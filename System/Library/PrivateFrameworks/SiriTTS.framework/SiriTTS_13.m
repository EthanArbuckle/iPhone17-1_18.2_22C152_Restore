uint64_t **SiriTTS::TextToPhoneme::TextToPhoneme(uint64_t **a1, std::string::size_type a2, uint64_t a3)
{
  void *v6;
  TTSSynthesizer *v7;
  long long v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  long long v14;
  std::__shared_weak_count *v15;
  std::string __p;
  void *v18[2];
  char v19;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v6 = operator new(0x28uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = off_26C215D78;
  v7 = (TTSSynthesizer *)(v6 + 3);
  _ZNSt3__115allocate_sharedB8ne180100IN14TTSSynthesizer22TTSSynthesizerInternalENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v6 + 3);
  *(void *)&v8 = v6 + 3;
  *((void *)&v8 + 1) = v6;
  v9 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    v7 = (TTSSynthesizer *)*a1;
  }
  TTSSynthesizer::set_fe_only(v7, 1);
  v10 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v18, &byte_20D5A22AE);
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
  TTSSynthesizer::initialize(v10, a2, (long long *)v18, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  v11 = *(unsigned __int8 *)(a3 + 23);
  if ((v11 & 0x80u) != 0) {
    v11 = *(void *)(a3 + 8);
  }
  if (v11)
  {
    v12 = **a1;
    v13 = (std::string *)operator new(0x90uLL);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C219460;
    *(void *)&v14 = SiriTTS::PhonemeMapper::PhonemeMapper(v13 + 1, (long long *)(v12 + 344), v12 + 320, (long long *)a3);
    *((void *)&v14 + 1) = v13;
    v15 = (std::__shared_weak_count *)a1[3];
    *((_OWORD *)a1 + 1) = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  return a1;
}

void sub_20D3735E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  v24 = *(std::__shared_weak_count **)(v20 + 24);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  v25 = *(std::__shared_weak_count **)(v20 + 8);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SiriTTS::PhonemeMapper>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 120, *(void **)(a1 + 128));
  v2 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void std::__shared_ptr_emplace<SiriTTS::PhonemeMapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SiriTTS::PhonemeMapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TTSSynthesizer>::__on_zero_shared(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<TTSSynthesizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TTSSynthesizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void SiriTTS::TextToPhoneme::text_to_phoneme(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  v61[2] = *MEMORY[0x263EF8340];
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v60, *(void *)(**(void **)a1 + 240));
  size = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
  long long v6 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
  if (v60.__r_.__value_.__l.__size_)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v60.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  v48 = 0;
  v49 = 0;
  uint64_t v50 = 0;
  v51[0] = &off_26C214DD8;
  v51[1] = &v48;
  v51[3] = v51;
  std::__function::__value_func<void ()(FrontendFeature const&)>::__value_func[abi:ne180100]((uint64_t)&__p, (uint64_t)v51);
  if (!v55)
  {
    v59 = 0;
    goto LABEL_12;
  }
  std::__function::__value_func<void ()(FrontendFeature const&)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)&__p);
  v59 = 0;
  v7 = operator new(0x28uLL);
  v8 = v7;
  void *v7 = off_26C214D28;
  if (v61[0])
  {
    if ((std::string *)v61[0] == &v60)
    {
      v7[4] = v7 + 1;
      (*(void (**)(std::string *))(v60.__r_.__value_.__r.__words[0] + 24))(&v60);
      goto LABEL_11;
    }
    v9 = v61;
    v7[4] = v61[0];
  }
  else
  {
    v9 = v7 + 4;
  }
  void *v9 = 0;
LABEL_11:
  v59 = v8;
  std::__function::__value_func<void ()(FrontendFeature const&)>::~__value_func[abi:ne180100](&v60);
LABEL_12:
  Observable::on_event(v6, "tts.feature.frontend", (uint64_t)&v56, &v46);
  std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](&v56);
  std::__function::__value_func<void ()(FrontendFeature const&)>::~__value_func[abi:ne180100](&__p);
  std::__function::__value_func<void ()(FrontendFeature const&)>::~__value_func[abi:ne180100](v51);
  TTSSynthesizer::synthesize_text(*(uint64_t ***)a1, a2);
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v10 = v48;
  v41 = v49;
  if (v48 == v49) {
    goto LABEL_120;
  }
  do
  {
    memset(&v45, 0, sizeof(v45));
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    if (*v10 != v11)
    {
      while (*(unsigned char *)(v12 + 24))
      {
LABEL_75:
        v12 += 216;
        if (v12 == v11)
        {
          unsigned int v28 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v45.__r_.__value_.__l.__size_) {
              goto LABEL_93;
            }
            v30 = (std::string *)v45.__r_.__value_.__r.__words[0];
            if (*(unsigned char *)(v45.__r_.__value_.__r.__words[0] + v45.__r_.__value_.__l.__size_ - 1) == 32)
            {
              uint64_t v29 = --v45.__r_.__value_.__l.__size_;
LABEL_83:
              v30->__r_.__value_.__s.__data_[v29] = 0;
              if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                unsigned int v28 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
                if (!*((unsigned char *)&v45.__r_.__value_.__s + 23)) {
                  goto LABEL_93;
                }
                goto LABEL_85;
              }
            }
            if (!v45.__r_.__value_.__l.__size_) {
              goto LABEL_92;
            }
            v32 = (std::string *)v45.__r_.__value_.__r.__words[0];
            if (*(unsigned char *)(v45.__r_.__value_.__r.__words[0] + v45.__r_.__value_.__l.__size_ - 1) != 95) {
              goto LABEL_92;
            }
            uint64_t v31 = --v45.__r_.__value_.__l.__size_;
          }
          else
          {
            if (!*((unsigned char *)&v45.__r_.__value_.__s + 23)) {
              goto LABEL_93;
            }
            if (*((unsigned char *)&v44 + HIBYTE(v45.__r_.__value_.__r.__words[2]) + 7) == 32)
            {
              uint64_t v29 = HIBYTE(v45.__r_.__value_.__r.__words[2]) - 1;
              --*((unsigned char *)&v45.__r_.__value_.__s + 23);
              v30 = &v45;
              goto LABEL_83;
            }
LABEL_85:
            if (*((unsigned char *)&v44 + v28 + 7) != 95) {
              goto LABEL_92;
            }
            uint64_t v31 = v28 - 1;
            *((unsigned char *)&v45.__r_.__value_.__s + 23) = v28 - 1;
            v32 = &v45;
          }
          v33 = (char *)v32 + v31;
          goto LABEL_91;
        }
      }
      if (*(char *)(v12 + 119) < 0)
      {
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(v12 + 96), *(void *)(v12 + 104));
      }
      else
      {
        long long v13 = *(_OWORD *)(v12 + 96);
        v60.__r_.__value_.__r.__words[2] = *(void *)(v12 + 112);
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v13;
      }
      v56 = 0;
      size_t v57 = 0;
      uint64_t v58 = 0;
      if (!*(_DWORD *)(v12 + 160))
      {
        v15 = ".";
        if (!*(_DWORD *)(v12 + 172)) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v14 = v60.__r_.__value_.__l.__size_;
        if (v60.__r_.__value_.__l.__size_ != 1)
        {
LABEL_28:
          v15 = "_";
          if (!v14)
          {
            std::string::size_type v16 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
            if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v16 = v45.__r_.__value_.__l.__size_;
            }
            v15 = "_";
            if (!v16) {
              goto LABEL_73;
            }
          }
          goto LABEL_32;
        }
        v15 = "_";
        if (*v60.__r_.__value_.__l.__data_ != 35)
        {
LABEL_32:
          MEMORY[0x210558E70](&v56, v15);
LABEL_33:
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v17 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v17 = v60.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v17 + 1);
          if ((v54 & 0x80u) == 0) {
            p_p = (char *)&__p;
          }
          else {
            p_p = (char *)__p;
          }
          if (v17)
          {
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v19 = &v60;
            }
            else {
              v19 = (std::string *)v60.__r_.__value_.__r.__words[0];
            }
            memmove(p_p, v19, v17);
          }
          *(_WORD *)&p_p[v17] = 32;
          if ((v54 & 0x80u) == 0) {
            uint64_t v20 = (const std::string::value_type *)&__p;
          }
          else {
            uint64_t v20 = (const std::string::value_type *)__p;
          }
          if ((v54 & 0x80u) == 0) {
            std::string::size_type v21 = v54;
          }
          else {
            std::string::size_type v21 = v53;
          }
          std::string::append(&v45, v20, v21);
          if ((char)v54 < 0) {
            operator delete(__p);
          }
          char v22 = HIBYTE(v58);
          if (v58 >= 0) {
            size_t v23 = HIBYTE(v58);
          }
          else {
            size_t v23 = v57;
          }
          if (v23)
          {
            std::string::basic_string[abi:ne180100]((uint64_t)&__p, v23 + 1);
            if ((v54 & 0x80u) == 0) {
              v24 = (char *)&__p;
            }
            else {
              v24 = (char *)__p;
            }
            if (v58 >= 0) {
              v25 = (void **)&v56;
            }
            else {
              v25 = v56;
            }
            memmove(v24, v25, v23);
            *(_WORD *)&v24[v23] = 32;
            if ((v54 & 0x80u) == 0) {
              v26 = (const std::string::value_type *)&__p;
            }
            else {
              v26 = (const std::string::value_type *)__p;
            }
            if ((v54 & 0x80u) == 0) {
              std::string::size_type v27 = v54;
            }
            else {
              std::string::size_type v27 = v53;
            }
            std::string::append(&v45, v26, v27);
            if ((char)v54 < 0) {
              operator delete(__p);
            }
            char v22 = HIBYTE(v58);
          }
          if (v22 < 0) {
            operator delete(v56);
          }
        }
      }
      else
      {
        std::string::size_type v14 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        if (HIBYTE(v60.__r_.__value_.__r.__words[2]) != 1 || v60.__r_.__value_.__s.__data_[0] != 35) {
          goto LABEL_28;
        }
      }
LABEL_73:
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      goto LABEL_75;
    }
LABEL_92:
    while (1)
    {
      unsigned int v28 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
LABEL_93:
      if ((v28 & 0x80) != 0) {
        break;
      }
      if (!v28 || *((unsigned char *)&v44 + v28 + 7) != 32) {
        goto LABEL_101;
      }
      uint64_t v34 = v28 - 1;
      *((unsigned char *)&v45.__r_.__value_.__s + 23) = v34;
      v35 = &v45;
LABEL_100:
      v33 = (char *)v35 + v34;
LABEL_91:
      unsigned char *v33 = 0;
    }
    if (v45.__r_.__value_.__l.__size_)
    {
      v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if (*(unsigned char *)(v45.__r_.__value_.__r.__words[0] + v45.__r_.__value_.__l.__size_ - 1) == 32)
      {
        uint64_t v34 = --v45.__r_.__value_.__l.__size_;
        goto LABEL_100;
      }
    }
LABEL_101:
    v36 = *(const void ***)(a1 + 16);
    if (v36)
    {
      SiriTTS::PhonemeMapper::map(v36, (uint64_t)&v45, &v60);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v37 = &v60;
      }
      else {
        v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v60.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)v37, v38);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if ((v28 & 0x80u) == 0) {
        v39 = &v45;
      }
      else {
        v39 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if ((v28 & 0x80u) == 0) {
        std::string::size_type v40 = v28;
      }
      else {
        std::string::size_type v40 = v45.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)v39, v40);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    v10 += 19;
  }
  while (v10 != v41);
LABEL_120:
  v43 = v46;
  v44 = v47;
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Observable::remove_observer(v6, (const void ***)&v43);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  std::vector<FrontendFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_20D373E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<FrontendFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<FrontendFeature>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::target_type()
{
}

uint64_t std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::operator()(uint64_t a1, FrontendFeature *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(v3 + 8);
  unint64_t v5 = *(void *)(v3 + 16);
  if (v4 >= v5)
  {
    unint64_t v7 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - *(void *)v3) >> 3);
    if (v7 + 1 > 0x1AF286BCA1AF286) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v5 - *(void *)v3) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0xD79435E50D7943) {
      unint64_t v10 = 0x1AF286BCA1AF286;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v28 = v3 + 16;
    if (v10)
    {
      if (v10 > 0x1AF286BCA1AF286) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (FrontendFeature *)operator new(152 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    v24 = v11;
    v25 = (FrontendFeature *)((char *)v11 + 152 * v7);
    std::string::size_type v27 = (char *)v11 + 152 * v10;
    FrontendFeature::FrontendFeature(v25, a2);
    uint64_t v12 = v25;
    long long v6 = (char *)v25 + 152;
    v26 = (char *)v25 + 152;
    std::string::size_type v14 = *(char **)v3;
    long long v13 = *(char **)(v3 + 8);
    if (v13 == *(char **)v3)
    {
      char v22 = *(FrontendFeature **)(v3 + 8);
    }
    else
    {
      uint64_t v15 = 0;
      do
      {
        std::string::size_type v16 = (char *)v12 + v15;
        size_t v17 = &v13[v15];
        *((void *)v16 - 19) = 0;
        *((void *)v16 - 18) = 0;
        *((void *)v16 - 17) = 0;
        *(_OWORD *)(v16 - 152) = *(_OWORD *)&v13[v15 - 152];
        *((void *)v16 - 17) = *(void *)&v13[v15 - 136];
        *((void *)v17 - 19) = 0;
        *((void *)v17 - 18) = 0;
        *((void *)v17 - 17) = 0;
        *((void *)v16 - 16) = 0;
        *((void *)v16 - 15) = 0;
        *((void *)v16 - 14) = 0;
        *((_OWORD *)v16 - 8) = *(_OWORD *)&v13[v15 - 128];
        *((void *)v16 - 14) = *(void *)&v13[v15 - 112];
        *((void *)v17 - 16) = 0;
        *((void *)v17 - 15) = 0;
        *((void *)v17 - 14) = 0;
        *((void *)v16 - 13) = 0;
        *((void *)v16 - 12) = 0;
        *((void *)v16 - 11) = 0;
        *(_OWORD *)(v16 - 104) = *(_OWORD *)&v13[v15 - 104];
        *((void *)v16 - 11) = *(void *)&v13[v15 - 88];
        *((void *)v17 - 13) = 0;
        *((void *)v17 - 12) = 0;
        long long v18 = *(_OWORD *)&v13[v15 - 80];
        uint64_t v19 = *(void *)&v13[v15 - 64];
        *((void *)v17 - 11) = 0;
        *((void *)v16 - 8) = v19;
        *((_OWORD *)v16 - 5) = v18;
        *((void *)v17 - 9) = 0;
        *((void *)v17 - 8) = 0;
        *((void *)v17 - 10) = 0;
        long long v20 = *(_OWORD *)&v13[v15 - 56];
        *((void *)v16 - 5) = *(void *)&v13[v15 - 40];
        *(_OWORD *)(v16 - 56) = v20;
        *((void *)v17 - 6) = 0;
        *((void *)v17 - 5) = 0;
        *((void *)v17 - 7) = 0;
        long long v21 = *(_OWORD *)&v13[v15 - 32];
        *((void *)v16 - 2) = *(void *)&v13[v15 - 16];
        *((_OWORD *)v16 - 2) = v21;
        *((void *)v17 - 4) = 0;
        *((void *)v17 - 3) = 0;
        *((void *)v17 - 2) = 0;
        *(v16 - 8) = v13[v15 - 8];
        v15 -= 152;
      }
      while (&v13[v15] != v14);
      uint64_t v12 = (FrontendFeature *)((char *)v12 + v15);
      char v22 = *(FrontendFeature **)v3;
      long long v13 = *(char **)(v3 + 8);
      long long v6 = v26;
    }
    *(void *)uint64_t v3 = v12;
    v24 = v22;
    v25 = v22;
    *(void *)(v3 + 8) = v6;
    v26 = v13;
    size_t v23 = *(char **)(v3 + 16);
    *(void *)(v3 + 16) = v27;
    std::string::size_type v27 = v23;
    std::__split_buffer<FrontendFeature>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    FrontendFeature::FrontendFeature(*(FrontendFeature **)(v3 + 8), a2);
    long long v6 = (char *)(v4 + 152);
    *(void *)(v3 + 8) = v4 + 152;
  }
  *(void *)(v3 + 8) = v6;
}

void sub_20D374290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<FrontendFeature>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void FrontendFeature::FrontendFeature(FrontendFeature *this, const FrontendFeature *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<PhoneFeature>::__init_with_size[abi:ne180100]<PhoneFeature*,PhoneFeature*>(this, *(void *)a2, *((void *)a2 + 1), 0x84BDA12F684BDA13 * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 4);
  if (v5 != v4)
  {
    std::vector<WordFeature>::__vallocate[abi:ne180100]((void *)this + 3, 0xF0F0F0F0F0F0F0F1 * ((v5 - v4) >> 3));
    *((void *)this + 4) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>((uint64_t)this + 40, v4, v5, *((void *)this + 4));
  }
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<Prompt>::__init_with_size[abi:ne180100]<Prompt*,Prompt*>((void *)this + 6, *((void *)a2 + 6), *((void *)a2 + 7), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 72);
    *((void *)this + 11) = *((void *)a2 + 11);
    *(_OWORD *)((char *)this + 72) = v6;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 6);
    *((void *)this + 14) = *((void *)a2 + 14);
    *((_OWORD *)this + 6) = v7;
  }
  unint64_t v8 = (std::string *)((char *)this + 120);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 120);
    *((void *)this + 17) = *((void *)a2 + 17);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *((unsigned char *)this + 144) = *((unsigned char *)a2 + 144);
}

void sub_20D37443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (*(char *)(v9 + 119) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v9 + 95) < 0) {
    operator delete(*v11);
  }
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = v10;
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)v9;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<FrontendFeature>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    std::allocator<FrontendFeature>::destroy[abi:ne180100](i - 152);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<PhoneFeature>::__init_with_size[abi:ne180100]<PhoneFeature*,PhoneFeature*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<PhoneFeature>::__vallocate[abi:ne180100](result, a4);
    result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20D374570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::vector<Prompt>::__init_with_size[abi:ne180100]<Prompt*,Prompt*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<Prompt>::__vallocate[abi:ne180100](result, a4);
    result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Prompt>,Prompt*,Prompt*,Prompt*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20D3745F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<WordFeature>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<WordFeature>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[136 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      WordFeature::WordFeature(a4 + v7, a2 + v7);
      v7 += 136;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

uint64_t WordFeature::WordFeature(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  unint64_t v8 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_20D374828(_Unwind_Exception *exception_object)
{
  if (v1[111] < 0) {
    operator delete(*v5);
  }
  if (v1[87] < 0) {
    operator delete(*v4);
  }
  if (v1[63] < 0) {
    operator delete(*v3);
  }
  if (v1[39] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<WordFeature>>(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(136 * a1);
}

char *std::vector<PhoneFeature>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[216 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      PhoneFeature::PhoneFeature((std::string *)(a4 + v7), (const PhoneFeature *)(a2 + v7));
      v7 += 216;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

uint64_t std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_26C214DD8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_26C214DD8;
  result[1] = v3;
  return result;
}

void std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::~__func()
{
}

void siritts_create_text_to_phoneme()
{
}

void sub_20D374AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  MEMORY[0x2105595E0](v20, 0x20C40DC1BFBCFLL);
  _Unwind_Resume(a1);
}

uint64_t siritts_delete_text_to_phoneme(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(std::__shared_weak_count **)(result + 24);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    JUMPOUT(0x2105595E0);
  }
  return result;
}

char *siritts_text_to_phoneme(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  SiriTTS::TextToPhoneme::text_to_phoneme(a1, (uint64_t)__p, &__s1);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return strdup((const char *)&__s1);
  }
  uint64_t v4 = (void *)__s1.__r_.__value_.__r.__words[0];
  uint64_t v3 = strdup(__s1.__r_.__value_.__l.__data_);
  operator delete(v4);
  return v3;
}

void sub_20D374C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void UnparseSSMLImpl::end_document(xmlTextWriterPtr *this)
{
  v3[0] = 0;
  v3[1] = 0;
  UnparseSSMLImpl::dump_attr((UnparseSSMLImpl *)this, (uint64_t)v3);
  xmlTextWriterEndDocument(this[19]);
  uint64_t v2 = this[19];
  xmlFreeTextWriter(v2);
}

void UnparseSSMLImpl::dump_attr(UnparseSSMLImpl *this, uint64_t a2)
{
  if (*(void *)a2)
  {
    int v4 = 0;
    long long v5 = *(TokenAttributes **)a2;
    do
    {
      ++v4;
      long long v5 = *(TokenAttributes **)v5;
    }
    while (v5);
    long long v6 = (int *)((char *)this + 144);
    UnparseSSMLImpl::dump_attr((xmlTextWriterPtr *)this, *((TokenAttributes **)this + 16), *((_DWORD *)this + 36), *(TokenAttributes **)a2, v4);
  }
  else
  {
    long long v6 = (int *)((char *)this + 144);
    UnparseSSMLImpl::dump_attr((xmlTextWriterPtr *)this, *((TokenAttributes **)this + 16), *((_DWORD *)this + 36), 0, 0);
    int v4 = 0;
  }
  unint64_t v8 = *(TokenAttributes **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = v8;
  *((void *)this + 17) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *long long v6 = v4;
}

void UnparseSSMLImpl::dump_attr(xmlTextWriterPtr *this, TokenAttributes *a2, int a3, TokenAttributes *a4, int a5)
{
  int v7 = a3;
  unint64_t v8 = a2;
  long long v9 = this;
  if (a3 <= a5)
  {
    if (a3 < a5)
    {
      uint64_t v10 = *(TokenAttributes **)a4;
      int v11 = a5 - 1;
      goto LABEL_8;
    }
  }
  else
  {
    do
    {
      xmlTextWriterEndElement(v9[19]);
      unint64_t v8 = *(TokenAttributes **)v8;
      --v7;
    }
    while (v7 > a5);
    int v7 = a5;
  }
  if (v8 == a4) {
    return;
  }
  xmlTextWriterEndElement(v9[19]);
  a2 = *(TokenAttributes **)v8;
  a3 = v7 - 1;
  uint64_t v10 = *(TokenAttributes **)a4;
  int v11 = a5 - 1;
  this = v9;
LABEL_8:
  UnparseSSMLImpl::dump_attr((UnparseSSMLImpl *)this, a2, a3, v10, v11);
  switch(*((_DWORD *)a4 + 8))
  {
    case 0:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"speak");
      uint64_t v12 = v9[19];
      std::string::basic_string[abi:ne180100]<0>(&__p, "1.1");
      if ((v125 & 0x80u) == 0) {
        p_p = (const xmlChar *)&__p;
      }
      else {
        p_p = (const xmlChar *)__p;
      }
      xmlTextWriterWriteAttribute(v12, (const xmlChar *)"version", p_p);
      if ((char)v125 < 0) {
        operator delete(__p);
      }
      UnparseSSMLImpl::lang_attr((UnparseSSMLImpl *)v9, a4);
      uint64_t v14 = *((void *)a4 + 2);
      uint64_t v15 = *(unsigned __int8 *)(v14 + 79);
      int v16 = (char)v15;
      if ((v15 & 0x80u) != 0) {
        uint64_t v15 = *(void *)(v14 + 64);
      }
      if (v15)
      {
        if (v16 >= 0) {
          size_t v17 = (const xmlChar *)(v14 + 56);
        }
        else {
          size_t v17 = *(const xmlChar **)(v14 + 56);
        }
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"startmark", v17);
      }
      uint64_t v18 = *(unsigned __int8 *)(v14 + 103);
      int v19 = (char)v18;
      if ((v18 & 0x80u) != 0) {
        uint64_t v18 = *(void *)(v14 + 88);
      }
      if (v18)
      {
        if (v19 >= 0) {
          uint64_t v20 = (const xmlChar *)(v14 + 80);
        }
        else {
          uint64_t v20 = *(const xmlChar **)(v14 + 80);
        }
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"endmark", v20);
      }
      long long v21 = *(void **)(v14 + 104);
      uint64_t v122 = v14;
      if (v21 != (void *)(v14 + 112))
      {
        do
        {
          xmlTextWriterStartElement(v9[19], (const xmlChar *)"lexicon");
          if (*((char *)v21 + 55) >= 0) {
            char v22 = (const xmlChar *)(v21 + 4);
          }
          else {
            char v22 = (const xmlChar *)v21[4];
          }
          xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"xml:id", v22);
          if (*((char *)v21 + 79) >= 0) {
            size_t v23 = (const xmlChar *)(v21 + 7);
          }
          else {
            size_t v23 = (const xmlChar *)v21[7];
          }
          xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"uri", v23);
          if (*((char *)v21 + 103) >= 0) {
            v24 = (const xmlChar *)(v21 + 10);
          }
          else {
            v24 = (const xmlChar *)v21[10];
          }
          xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"type", v24);
          xmlTextWriterWriteAttributeIfNotEqual(v9[19], (const xmlChar *)"fetchtimeout", *((float *)v21 + 26), INFINITY);
          xmlTextWriterWriteAttributeIfNotEqual(v9[19], (const xmlChar *)"maxage", v21[14], 0xFFFFFFFFLL);
          xmlTextWriterWriteAttributeIfNotEqual(v9[19], (const xmlChar *)"maxstale", v21[15], 0);
          xmlTextWriterEndElement(v9[19]);
          v25 = (void *)v21[1];
          if (v25)
          {
            do
            {
              v26 = v25;
              v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v26 = (void *)v21[2];
              BOOL v27 = *v26 == (void)v21;
              long long v21 = v26;
            }
            while (!v27);
          }
          long long v21 = v26;
        }
        while (v26 != (void *)(v14 + 112));
      }
      uint64_t v28 = *(void *)(v14 + 128);
      for (i = *(void *)(v14 + 136); v28 != i; uint64_t v28 = v37 + 24)
      {
        xmlTextWriterStartElement(v9[19], (const xmlChar *)"meta");
        uint64_t v30 = *(unsigned __int8 *)(v28 + 23);
        int v31 = (char)v30;
        if ((v30 & 0x80u) != 0) {
          uint64_t v30 = *(void *)(v28 + 8);
        }
        if (v30)
        {
          if (v31 >= 0) {
            v32 = (const xmlChar *)v28;
          }
          else {
            v32 = *(const xmlChar **)v28;
          }
          xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"name", v32);
        }
        uint64_t v33 = *(unsigned __int8 *)(v28 + 47);
        int v34 = (char)v33;
        if ((v33 & 0x80u) != 0) {
          uint64_t v33 = *(void *)(v28 + 32);
        }
        if (v33)
        {
          if (v34 >= 0) {
            v35 = (const xmlChar *)(v28 + 24);
          }
          else {
            v35 = *(const xmlChar **)(v28 + 24);
          }
          xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"http-equiv", v35);
        }
        std::string::size_type v38 = *(const xmlChar **)(v28 + 48);
        uint64_t v37 = v28 + 48;
        v36 = v38;
        if (*(char *)(v37 + 23) >= 0) {
          v39 = (const xmlChar *)v37;
        }
        else {
          v39 = v36;
        }
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"content", v39);
        xmlTextWriterEndElement(v9[19]);
      }
      uint64_t v40 = *(void *)(v14 + 152);
      for (uint64_t j = *(void *)(v122 + 160); v40 != j; v40 += 24)
      {
        xmlTextWriterStartElement(v9[19], (const xmlChar *)"metadata");
        if (*(char *)(v40 + 23) >= 0) {
          v42 = (const xmlChar *)v40;
        }
        else {
          v42 = *(const xmlChar **)v40;
        }
        xmlTextWriterWriteString(v9[19], v42);
        xmlTextWriterEndElement(v9[19]);
      }
      return;
    case 1:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"lookup");
      v43 = v9[19];
      v46 = (const xmlChar *)*((void *)a4 + 12);
      std::string v45 = (const xmlChar *)a4 + 96;
      v44 = v46;
      if (*((char *)v45 + 23) >= 0) {
        v47 = v45;
      }
      else {
        v47 = v44;
      }
      v48 = "ref";
      goto LABEL_99;
    case 2:
      v49 = v9[19];
      uint64_t v50 = "p";
      goto LABEL_163;
    case 3:
      v49 = v9[19];
      uint64_t v50 = "s";
      goto LABEL_163;
    case 4:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"w");
      UnparseSSMLImpl::lang_attr((UnparseSSMLImpl *)v9, a4);
      uint64_t v51 = *((unsigned __int8 *)a4 + 143);
      int v52 = (char)v51;
      if ((v51 & 0x80u) != 0) {
        uint64_t v51 = *((void *)a4 + 16);
      }
      if (!v51) {
        return;
      }
      v43 = v9[19];
      uint64_t v55 = (const xmlChar *)*((void *)a4 + 15);
      unsigned __int8 v54 = (const xmlChar *)a4 + 120;
      std::string::size_type v53 = v55;
      if (v52 >= 0) {
        v47 = v54;
      }
      else {
        v47 = v53;
      }
      v48 = "role";
      goto LABEL_99;
    case 5:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"say-as");
      if (*((char *)a4 + 167) >= 0) {
        v56 = (const xmlChar *)a4 + 144;
      }
      else {
        v56 = (const xmlChar *)*((void *)a4 + 18);
      }
      xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"interpret-as", v56);
      uint64_t v57 = *((unsigned __int8 *)a4 + 191);
      int v58 = (char)v57;
      if ((v57 & 0x80u) != 0) {
        uint64_t v57 = *((void *)a4 + 22);
      }
      if (v57)
      {
        if (v58 >= 0) {
          v59 = (const xmlChar *)a4 + 168;
        }
        else {
          v59 = (const xmlChar *)*((void *)a4 + 21);
        }
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"format", v59);
      }
      uint64_t v60 = *((unsigned __int8 *)a4 + 215);
      int v61 = (char)v60;
      if ((v60 & 0x80u) != 0) {
        uint64_t v60 = *((void *)a4 + 25);
      }
      if (!v60) {
        return;
      }
      v43 = v9[19];
      v64 = (const xmlChar *)*((void *)a4 + 24);
      v63 = (const xmlChar *)a4 + 192;
      v62 = v64;
      if (v61 >= 0) {
        v47 = v63;
      }
      else {
        v47 = v62;
      }
      v48 = "detail";
LABEL_99:
      xmlTextWriterWriteAttribute(v43, (const xmlChar *)v48, v47);
      return;
    case 6:
      v49 = v9[19];
      uint64_t v50 = "lang";
      goto LABEL_163;
    case 7:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"voice");
      uint64_t v65 = *((void *)a4 + 35);
      v66 = v9[19];
      uint64_t v67 = *(unsigned int *)(v65 + 16);
      v68 = operator new(0x20uLL);
      v69 = v68;
      _OWORD *v68 = xmmword_264115330;
      v68[1] = *(_OWORD *)&off_264115340;
      if (v67 > 3) {
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&__p, *((char **)v68 + v67));
      }
      uint64_t v99 = v125;
      unsigned __int8 v100 = v125;
      if ((v125 & 0x80u) != 0) {
        uint64_t v99 = v124;
      }
      if (v99)
      {
        if ((v125 & 0x80u) == 0) {
          v101 = (const xmlChar *)&__p;
        }
        else {
          v101 = (const xmlChar *)__p;
        }
        xmlTextWriterWriteAttribute(v66, (const xmlChar *)"gender", v101);
        unsigned __int8 v100 = v125;
      }
      if ((v100 & 0x80) != 0) {
        operator delete(__p);
      }
      operator delete(v69);
      xmlTextWriterWriteAttributeIfNotEqual(v9[19], (const xmlChar *)"age", *(void *)(v65 + 24), 0);
      xmlTextWriterWriteAttributeIfNotEqual(v9[19], (const xmlChar *)"variant", *(void *)(v65 + 32), 0);
      uint64_t v102 = *(unsigned __int8 *)(v65 + 63);
      int v103 = (char)v102;
      if ((v102 & 0x80u) != 0) {
        uint64_t v102 = *(void *)(v65 + 48);
      }
      if (v102)
      {
        if (v103 >= 0) {
          v104 = (const xmlChar *)(v65 + 40);
        }
        else {
          v104 = *(const xmlChar **)(v65 + 40);
        }
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"name", v104);
      }
      uint64_t v105 = *(unsigned __int8 *)(v65 + 87);
      int v106 = (char)v105;
      if ((v105 & 0x80u) != 0) {
        uint64_t v105 = *(void *)(v65 + 72);
      }
      if (v105)
      {
        if (v106 >= 0) {
          v107 = (const xmlChar *)(v65 + 64);
        }
        else {
          v107 = *(const xmlChar **)(v65 + 64);
        }
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"languages", v107);
      }
      uint64_t v108 = *(unsigned __int8 *)(v65 + 111);
      int v109 = (char)v108;
      if ((v108 & 0x80u) != 0) {
        uint64_t v108 = *(void *)(v65 + 96);
      }
      if (v108)
      {
        if (v109 >= 0) {
          v110 = (const xmlChar *)(v65 + 88);
        }
        else {
          v110 = *(const xmlChar **)(v65 + 88);
        }
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"required", v110);
      }
      uint64_t v111 = *(unsigned __int8 *)(v65 + 135);
      int v112 = (char)v111;
      if ((v111 & 0x80u) != 0) {
        uint64_t v111 = *(void *)(v65 + 120);
      }
      if (v111)
      {
        if (v112 >= 0) {
          v113 = (const xmlChar *)(v65 + 112);
        }
        else {
          v113 = *(const xmlChar **)(v65 + 112);
        }
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"ordering", v113);
      }
      v114 = v9[19];
      uint64_t v115 = *(unsigned int *)(v65 + 136);
      v116 = operator new(0x18uLL);
      v97 = v116;
      *(_OWORD *)v116 = xmmword_264115350;
      v116[2] = "processorchoice";
      if (v115 > 2) {
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v116[v115]);
      }
      uint64_t v120 = v125;
      unsigned __int8 v118 = v125;
      if ((v125 & 0x80u) != 0) {
        uint64_t v120 = v124;
      }
      if (!v120) {
        goto LABEL_223;
      }
      if ((v125 & 0x80u) == 0) {
        v121 = (const xmlChar *)&__p;
      }
      else {
        v121 = (const xmlChar *)__p;
      }
      xmlTextWriterWriteAttribute(v114, (const xmlChar *)"onvoicefailure", v121);
      goto LABEL_222;
    case 8:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"prosody");
      v70 = v9[19];
      ParseAttr::label_pitch(&__p, *((void *)a4 + 27));
      uint64_t v71 = v125;
      unsigned __int8 v72 = v125;
      if ((v125 & 0x80u) != 0) {
        uint64_t v71 = v124;
      }
      if (v71)
      {
        if ((v125 & 0x80u) == 0) {
          v73 = (const xmlChar *)&__p;
        }
        else {
          v73 = (const xmlChar *)__p;
        }
        xmlTextWriterWriteAttribute(v70, (const xmlChar *)"pitch", v73);
        unsigned __int8 v72 = v125;
      }
      if ((v72 & 0x80) != 0) {
        operator delete(__p);
      }
      v74 = v9[19];
      ParseAttr::label_pitch(&__p, *((void *)a4 + 28));
      uint64_t v75 = v125;
      unsigned __int8 v76 = v125;
      if ((v125 & 0x80u) != 0) {
        uint64_t v75 = v124;
      }
      if (v75)
      {
        if ((v125 & 0x80u) == 0) {
          v77 = (const xmlChar *)&__p;
        }
        else {
          v77 = (const xmlChar *)__p;
        }
        xmlTextWriterWriteAttribute(v74, (const xmlChar *)"range", v77);
        unsigned __int8 v76 = v125;
      }
      if ((v76 & 0x80) != 0) {
        operator delete(__p);
      }
      uint64_t v78 = *((unsigned __int8 *)a4 + 271);
      int v79 = (char)v78;
      if ((v78 & 0x80u) != 0) {
        uint64_t v78 = *((void *)a4 + 32);
      }
      if (v78)
      {
        if (v79 >= 0) {
          v80 = (const xmlChar *)a4 + 248;
        }
        else {
          v80 = (const xmlChar *)*((void *)a4 + 31);
        }
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"contour", v80);
      }
      v81 = v9[19];
      ParseAttr::label_rate(&__p, *((void *)a4 + 29));
      uint64_t v82 = v125;
      unsigned __int8 v83 = v125;
      if ((v125 & 0x80u) != 0) {
        uint64_t v82 = v124;
      }
      if (v82)
      {
        if ((v125 & 0x80u) == 0) {
          v84 = (const xmlChar *)&__p;
        }
        else {
          v84 = (const xmlChar *)__p;
        }
        xmlTextWriterWriteAttribute(v81, (const xmlChar *)"rate", v84);
        unsigned __int8 v83 = v125;
      }
      if ((v83 & 0x80) != 0) {
        operator delete(__p);
      }
      v85 = v9[19];
      ParseAttr::label_duration((ParseAttr *)&__p, *((float *)a4 + 68));
      uint64_t v86 = v125;
      unsigned __int8 v87 = v125;
      if ((v125 & 0x80u) != 0) {
        uint64_t v86 = v124;
      }
      if (v86)
      {
        if ((v125 & 0x80u) == 0) {
          v88 = (const xmlChar *)&__p;
        }
        else {
          v88 = (const xmlChar *)__p;
        }
        xmlTextWriterWriteAttribute(v85, (const xmlChar *)"duration", v88);
        unsigned __int8 v87 = v125;
      }
      if ((v87 & 0x80) != 0) {
        operator delete(__p);
      }
      v89 = v9[19];
      ParseAttr::label_volume(&__p, *((void *)a4 + 30));
      uint64_t v90 = v125;
      unsigned __int8 v91 = v125;
      if ((v125 & 0x80u) != 0) {
        uint64_t v90 = v124;
      }
      if (v90)
      {
        if ((v125 & 0x80u) == 0) {
          v92 = (const xmlChar *)&__p;
        }
        else {
          v92 = (const xmlChar *)__p;
        }
        xmlTextWriterWriteAttribute(v89, (const xmlChar *)"volume", v92);
        unsigned __int8 v91 = v125;
      }
      if ((v91 & 0x80) == 0) {
        return;
      }
      v93 = __p;
      goto LABEL_226;
    case 9:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"emphasis");
      v94 = v9[19];
      uint64_t v95 = *((int *)a4 + 69);
      v96 = operator new(0x58uLL);
      v97 = v96;
      v96[2] = xmmword_264113C10;
      v96[3] = off_264113C20;
      v96[4] = xmmword_264113C30;
      *((void *)v96 + 10) = &byte_20D5A22AE;
      _OWORD *v96 = xmmword_264113BF0;
      v96[1] = *(_OWORD *)&off_264113C00;
      if (v95 > 0xA) {
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&__p, *((char **)v96 + v95));
      }
      uint64_t v117 = v125;
      unsigned __int8 v118 = v125;
      if ((v125 & 0x80u) != 0) {
        uint64_t v117 = v124;
      }
      if (!v117) {
        goto LABEL_223;
      }
      if ((v125 & 0x80u) == 0) {
        v119 = (const xmlChar *)&__p;
      }
      else {
        v119 = (const xmlChar *)__p;
      }
      xmlTextWriterWriteAttribute(v94, (const xmlChar *)"level", v119);
LABEL_222:
      unsigned __int8 v118 = v125;
LABEL_223:
      if ((v118 & 0x80) != 0) {
        operator delete(__p);
      }
      v93 = v97;
LABEL_226:
      operator delete(v93);
      break;
    case 0xA:
      v98 = v9[19];
      xmlTextWriterStartElement(v98, (const xmlChar *)"audio");
      return;
    case 0xB:
      v49 = v9[19];
      uint64_t v50 = "desc";
LABEL_163:
      xmlTextWriterStartElement(v49, (const xmlChar *)v50);
      UnparseSSMLImpl::lang_attr((UnparseSSMLImpl *)v9, a4);
      break;
    default:
      return;
  }
}

void sub_20D375840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void UnparseSSMLImpl::lang_attr(UnparseSSMLImpl *this, TokenAttributes *a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((unsigned __int8 *)a2 + 95);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 10);
  }
  if (v5)
  {
    int v7 = (xmlTextWriter *)*((void *)this + 19);
    if (v6 >= 0) {
      unint64_t v8 = (const xmlChar *)a2 + 72;
    }
    else {
      unint64_t v8 = (const xmlChar *)*((void *)a2 + 9);
    }
    xmlTextWriterWriteAttribute(v7, (const xmlChar *)"xml:id", v8);
  }
  if (v4)
  {
    uint64_t v9 = *((unsigned __int8 *)a2 + 63);
    char v10 = v9;
    if ((v9 & 0x80u) == 0) {
      uint64_t v11 = *((unsigned __int8 *)a2 + 63);
    }
    else {
      uint64_t v11 = *((void *)a2 + 6);
    }
    uint64_t v12 = *(unsigned __int8 *)(v4 + 63);
    int v13 = (char)v12;
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(v4 + 48);
    }
    if (v11 == v12)
    {
      uint64_t v14 = (const void **)((char *)a2 + 40);
      if (v13 >= 0) {
        uint64_t v15 = (unsigned __int8 *)(v4 + 40);
      }
      else {
        uint64_t v15 = *(unsigned __int8 **)(v4 + 40);
      }
      if ((char)v9 < 0)
      {
        if (!memcmp(*v14, v15, *((void *)a2 + 6))) {
          goto LABEL_28;
        }
      }
      else
      {
        if (!(_BYTE)v9) {
          goto LABEL_28;
        }
        while (*(unsigned __int8 *)v14 == *v15)
        {
          uint64_t v14 = (const void **)((char *)v14 + 1);
          ++v15;
          if (!--v9) {
            goto LABEL_28;
          }
        }
      }
    }
  }
  else
  {
    char v10 = *((unsigned char *)a2 + 63);
  }
  if (v10 >= 0) {
    int v16 = (const xmlChar *)a2 + 40;
  }
  else {
    int v16 = (const xmlChar *)*((void *)a2 + 5);
  }
  xmlTextWriterWriteAttribute(*((xmlTextWriterPtr *)this + 19), (const xmlChar *)"xml:lang", v16);
  if (v4)
  {
LABEL_28:
    unsigned int v17 = *((_DWORD *)a2 + 16);
    if (v17 == *(_DWORD *)(v4 + 64)) {
      return;
    }
    goto LABEL_31;
  }
  unsigned int v17 = *((_DWORD *)a2 + 16);
LABEL_31:
  uint64_t v18 = (xmlTextWriter *)*((void *)this + 19);
  int v19 = operator new(0x20uLL);
  uint64_t v20 = v19;
  _OWORD *v19 = xmmword_264115310;
  v19[1] = *(_OWORD *)&off_264115320;
  if (v17 > 3) {
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, *((char **)v19 + v17));
  }
  if (v23 >= 0) {
    long long v21 = __p;
  }
  else {
    long long v21 = (void **)__p[0];
  }
  xmlTextWriterWriteAttribute(v18, (const xmlChar *)"onlangfailure", (const xmlChar *)v21);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  operator delete(v20);
}

void sub_20D375A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void xmlTextWriterWriteAttributeIfNotEqual(_xmlTextWriter *a1, const xmlChar *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    StringFormatter::StringFormatter((StringFormatter *)__p, "%zd", a3);
    if (v8 >= 0) {
      int v6 = __p;
    }
    else {
      int v6 = (void **)__p[0];
    }
    xmlTextWriterWriteAttribute(a1, a2, (const xmlChar *)v6);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_20D375B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xmlTextWriterWriteAttributeIfNotEqual(_xmlTextWriter *a1, const xmlChar *a2, float a3, float a4)
{
  if (fabsf(a4) == INFINITY)
  {
    if (fabsf(a3) == INFINITY) {
      return;
    }
  }
  else if (vabds_f32(a3, a4) < 0.001)
  {
    return;
  }
  StringFormatter::StringFormatter((StringFormatter *)__p, "%g", a3);
  if (v8 >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  xmlTextWriterWriteAttribute(a1, a2, (const xmlChar *)v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D375C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void UnparseSSMLImpl::dump_token(xmlTextWriterPtr *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if ((void *)(v4 + 8) == v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Token missing TokenBasicItem");
    MEMORY[0x210558D40](exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uint64_t v6 = v5[5];
  int v7 = *(std::__shared_weak_count **)(v6 + 64);
  v75[0] = *(void *)(v6 + 56);
  v75[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  UnparseSSMLImpl::dump_attr((UnparseSSMLImpl *)a1, (uint64_t)v75);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  int v8 = *(_DWORD *)(v6 + 8);
  if (v8 > 1835102826)
  {
    switch(v8)
    {
      case 1835102827:
        xmlTextWriterStartElement(a1[19], (const xmlChar *)"mark");
        std::string::size_type v38 = *(const xmlChar **)(v6 + 32);
        uint64_t v37 = v6 + 32;
        v36 = v38;
        if (*(char *)(v37 + 23) >= 0) {
          v39 = (const xmlChar *)v37;
        }
        else {
          v39 = v36;
        }
        xmlTextWriterWriteAttribute(a1[19], (const xmlChar *)"name", v39);
        goto LABEL_71;
      case 1885892462:
        uint64_t v45 = *a2;
        if ((void *)(v45 + 8) == v46) {
          return;
        }
        uint64_t v47 = v46[5];
        xmlTextWriterStartElement(a1[19], (const xmlChar *)"phoneme");
        uint64_t v48 = *(unsigned __int8 *)(v47 + 55);
        int v49 = (char)v48;
        if ((v48 & 0x80u) != 0) {
          uint64_t v48 = *(void *)(v47 + 40);
        }
        if (v48)
        {
          if (v49 >= 0) {
            uint64_t v50 = (const xmlChar *)(v47 + 32);
          }
          else {
            uint64_t v50 = *(const xmlChar **)(v47 + 32);
          }
          xmlTextWriterWriteAttribute(a1[19], (const xmlChar *)"alphabet", v50);
        }
        if (*(char *)(v47 + 31) >= 0) {
          uint64_t v51 = (const xmlChar *)(v47 + 8);
        }
        else {
          uint64_t v51 = *(const xmlChar **)(v47 + 8);
        }
        xmlTextWriterWriteAttribute(a1[19], (const xmlChar *)"ph", v51);
        uint64_t v52 = *(unsigned __int8 *)(v47 + 79);
        int v53 = (char)v52;
        if ((v52 & 0x80u) != 0) {
          uint64_t v52 = *(void *)(v47 + 64);
        }
        if (!v52) {
          goto LABEL_67;
        }
        uint64_t v20 = a1[19];
        v56 = *(const xmlChar **)(v47 + 56);
        uint64_t v55 = (const xmlChar *)(v47 + 56);
        unsigned __int8 v54 = v56;
        if (v53 >= 0) {
          v24 = v55;
        }
        else {
          v24 = v54;
        }
        v25 = "type";
        break;
      case 1952807028:
        uint64_t v17 = *a2;
        if ((void *)(v17 + 8) == v18)
        {
          v64 = *(const xmlChar **)(v6 + 32);
          uint64_t v63 = v6 + 32;
          v62 = v64;
          uint64_t v15 = a1[19];
          if (*(char *)(v63 + 23) >= 0) {
            int v16 = (const xmlChar *)v63;
          }
          else {
            int v16 = v62;
          }
LABEL_77:
          xmlTextWriterWriteString(v15, v16);
          return;
        }
        uint64_t v19 = v18[5];
        xmlTextWriterStartElement(a1[19], (const xmlChar *)"sub");
        uint64_t v20 = a1[19];
        char v23 = *(const xmlChar **)(v19 + 8);
        uint64_t v22 = v19 + 8;
        long long v21 = v23;
        if (*(char *)(v22 + 23) >= 0) {
          v24 = (const xmlChar *)v22;
        }
        else {
          v24 = v21;
        }
        v25 = "alias";
        break;
      default:
        return;
    }
    xmlTextWriterWriteAttribute(v20, (const xmlChar *)v25, v24);
LABEL_67:
    v59 = *(const xmlChar **)(v6 + 32);
    uint64_t v58 = v6 + 32;
    uint64_t v57 = v59;
    if (*(char *)(v58 + 23) >= 0) {
      uint64_t v60 = (const xmlChar *)v58;
    }
    else {
      uint64_t v60 = v57;
    }
    xmlTextWriterWriteString(a1[19], v60);
LABEL_71:
    int v61 = a1[19];
    xmlTextWriterEndElement(v61);
    return;
  }
  switch(v8)
  {
    case 1635083369:
      uint64_t v26 = *a2;
      if ((void *)(v26 + 8) != v27)
      {
        uint64_t v28 = v27[5];
        if (*(char *)(v28 + 31) >= 0) {
          uint64_t v29 = (const xmlChar *)(v28 + 8);
        }
        else {
          uint64_t v29 = *(const xmlChar **)(v28 + 8);
        }
        xmlTextWriterWriteAttribute(a1[19], (const xmlChar *)"src", v29);
        uint64_t v30 = a1[19];
        ParseAttr::label_duration((ParseAttr *)&__p, *(float *)(v28 + 32));
        uint64_t v31 = v78;
        unsigned __int8 v32 = v78;
        if ((v78 & 0x80u) != 0) {
          uint64_t v31 = v77;
        }
        if (v31)
        {
          if ((v78 & 0x80u) == 0) {
            p_p = (const xmlChar *)&__p;
          }
          else {
            p_p = (const xmlChar *)__p;
          }
          xmlTextWriterWriteAttribute(v30, (const xmlChar *)"timeout", p_p);
          unsigned __int8 v32 = v78;
        }
        if ((v32 & 0x80) != 0) {
          operator delete(__p);
        }
        xmlTextWriterWriteAttributeIfNotEqual(a1[19], (const xmlChar *)"maxage", *(void *)(v28 + 40), 0xFFFFFFFFLL);
        xmlTextWriterWriteAttributeIfNotEqual(a1[19], (const xmlChar *)"maxstale", *(void *)(v28 + 48), 0);
        xmlTextWriterWriteAttributeIfNotEqual(a1[19], (const xmlChar *)"clipbegin", *(float *)(v28 + 56), 0.0);
        xmlTextWriterWriteAttributeIfNotEqual(a1[19], (const xmlChar *)"clipend", *(float *)(v28 + 60), INFINITY);
        xmlTextWriterWriteAttributeIfNotEqual(a1[19], (const xmlChar *)"repeatdur", *(float *)(v28 + 68), 0.0);
        xmlTextWriterWriteAttributeIfNotEqual(a1[19], (const xmlChar *)"repeatcount", *(float *)(v28 + 64), 1.0);
        if (*(unsigned char *)(v28 + 37))
        {
          int v34 = a1[19];
          std::string::basic_string[abi:ne180100]<0>(&__p, "true");
          v35 = (v78 & 0x80u) == 0 ? (const xmlChar *)&__p : (const xmlChar *)__p;
          xmlTextWriterWriteAttribute(v34, (const xmlChar *)"apple:overlap", v35);
          if ((char)v78 < 0) {
            operator delete(__p);
          }
        }
      }
      break;
    case 1651664235:
      uint64_t v40 = *a2;
      if ((void *)(v40 + 8) != v41)
      {
        uint64_t v42 = v41[5];
        xmlTextWriterStartElement(a1[19], (const xmlChar *)"break");
        v43 = a1[19];
        uint64_t v44 = *(int *)(v42 + 12);
        if (v44 == 8)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
        }
        else
        {
          uint64_t v65 = operator new(0x58uLL);
          v66 = v65;
          v65[2] = xmmword_264113C68;
          v65[3] = *(_OWORD *)&off_264113C78;
          v65[4] = xmmword_264113C88;
          *((void *)v65 + 10) = "x-strong";
          *uint64_t v65 = xmmword_264113C48;
          v65[1] = *(_OWORD *)&off_264113C58;
          if (v44 > 0xA) {
            std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(&__p, *((char **)v65 + v44));
          }
          operator delete(v66);
        }
        uint64_t v67 = v78;
        unsigned __int8 v68 = v78;
        if ((v78 & 0x80u) != 0) {
          uint64_t v67 = v77;
        }
        if (v67)
        {
          if ((v78 & 0x80u) == 0) {
            v69 = (const xmlChar *)&__p;
          }
          else {
            v69 = (const xmlChar *)__p;
          }
          xmlTextWriterWriteAttribute(v43, (const xmlChar *)"strength", v69);
          unsigned __int8 v68 = v78;
        }
        if ((v68 & 0x80) != 0) {
          operator delete(__p);
        }
        v70 = a1[19];
        ParseAttr::label_duration((ParseAttr *)&__p, *(float *)(v42 + 8));
        uint64_t v71 = v78;
        unsigned __int8 v72 = v78;
        if ((v78 & 0x80u) != 0) {
          uint64_t v71 = v77;
        }
        if (v71)
        {
          if ((v78 & 0x80u) == 0) {
            v73 = (const xmlChar *)&__p;
          }
          else {
            v73 = (const xmlChar *)__p;
          }
          xmlTextWriterWriteAttribute(v70, (const xmlChar *)"time", v73);
          unsigned __int8 v72 = v78;
        }
        if ((v72 & 0x80) != 0) {
          operator delete(__p);
        }
        xmlTextWriterEndElement(a1[19]);
      }
      break;
    case 1684370275:
      uint64_t v9 = *a2;
      if ((void *)(v9 + 8) == v10) {
        return;
      }
      uint64_t v11 = v10[5];
      uint64_t v14 = *(const xmlChar **)(v11 + 8);
      uint64_t v12 = v11 + 8;
      int v13 = v14;
      uint64_t v15 = a1[19];
      if (*(char *)(v12 + 23) >= 0) {
        int v16 = (const xmlChar *)v12;
      }
      else {
        int v16 = v13;
      }
      goto LABEL_77;
    default:
      return;
  }
}

void sub_20D376288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t UnparseSSMLImpl::start_document(void **this)
{
  IO = xmlOutputBufferCreateIO((xmlOutputWriteCallback)ssmlOutputWriteCallback, (xmlOutputCloseCallback)ssmlOutputCloseCallback, this[15], 0);
  this[19] = xmlNewTextWriter(IO);
  *((_DWORD *)this + 36) = 0;
  uint64_t v3 = (std::__shared_weak_count *)this[17];
  this[16] = 0;
  this[17] = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  (*(void (**)(void *))(*(void *)this[2] + 24))(this[2]);
  uint64_t v4 = (xmlTextWriter *)this[19];
  return xmlTextWriterStartDocument(v4, 0, 0, 0);
}

uint64_t ssmlOutputCloseCallback()
{
  return 0;
}

uint64_t ssmlOutputWriteCallback(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = (void *)std::ostream::write();
  if ((*((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5) != 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a3;
  }
}

void UnparseSSMLImpl::~UnparseSSMLImpl(UnparseSSMLImpl *this)
{
  UnparseSSMLImpl::~UnparseSSMLImpl(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C201680;
  *((void *)this + 13) = &off_26C2016E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  UnparserModule::~UnparserModule(this);
}

void UnparseSSML::~UnparseSSML(UnparseSSML *this)
{
  UnparserModule::~UnparserModule(this);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<UnparseSSMLImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<UnparseSSMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<UnparseSSMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void MergeFrontendFeatureModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(uint64_t **)(*(void *)v3 + 8);
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  *(void *)&long long v166 = v5;
  *((void *)&v166 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v164, *(void *)(a1 + 168));
  if (v164) {
    BOOL v6 = *(_DWORD *)(v164 + 60) == 3;
  }
  else {
    BOOL v6 = 0;
  }
  uint64_t v7 = *v5;
  if (v5[1] != *v5)
  {
    uint64_t v9 = *(void *)(v7 + 72);
    uint64_t v8 = *(void *)(v7 + 80);
    if (v9 != v8)
    {
      uint64_t v10 = v9 + 56;
      do
      {
        int v11 = *(_DWORD *)(v10 - 56);
        BOOL v12 = v11 == 1 || v10 == v8;
        v10 += 56;
      }
      while (!v12);
      if (v11 == 1) {
        std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100]((uint64_t *)(a1 + 280));
      }
    }
  }
  std::vector<std::shared_ptr<FrontendFeature>>::push_back[abi:ne180100]((uint64_t *)(a1 + 280), &v166);
  if (!*((unsigned char *)v5 + 144)) {
    goto LABEL_187;
  }
  uint64_t v159 = 0;
  uint64_t v160 = 0;
  uint64_t v158 = 0;
  std::vector<std::shared_ptr<FrontendFeature>>::__init_with_size[abi:ne180100]<std::shared_ptr<FrontendFeature>*,std::shared_ptr<FrontendFeature>*>(&v158, *(void **)(a1 + 280), *(void **)(a1 + 288), (uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 4);
  unint64_t v13 = *(unsigned int *)(a1 + 272);
  uint64_t v150 = a1;
  unint64_t v14 = *(unsigned int *)(a1 + 276);
  v171 = 0;
  v172 = 0;
  v173 = 0;
  uint64_t v15 = v158;
  if (v159 == v158)
  {
    v161 = 0;
    v162 = 0;
    uint64_t v163 = 0;
    goto LABEL_182;
  }
  BOOL v153 = v6;
  unint64_t v16 = 0;
  int v17 = 0;
  do
  {
    if (!v16
      || (int)v13 >= 1
      && 0xF0F0F0F0F0F0F0F1
       * ((uint64_t)(*(void *)(*(void *)(v15 + 16 * v16) + 32) - *(void *)(*(void *)(v15 + 16 * v16) + 24)) >> 3)
       + v17 > v13
      || (uint64_t v18 = v172, (int)v14 >= 1) && v14 <= (uint64_t)(*((void *)v172 - 2) - *((void *)v172 - 3)) >> 4)
    {
      long long v174 = 0uLL;
      uint64_t v175 = 0;
      uint64_t v19 = v172;
      if (v172 >= v173)
      {
        long long v21 = v171;
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3) + 1;
        if (v22 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v173 - v171) >> 3) > v22) {
          unint64_t v22 = 0x5555555555555556 * ((v173 - v171) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v173 - v171) >> 3) >= 0x555555555555555) {
          unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v24 = (char *)operator new(24 * v23);
        v25 = &v24[8 * ((v19 - v21) >> 3)];
        *(void *)v25 = 0;
        *((void *)v25 + 1) = 0;
        *((void *)v25 + 2) = 0;
        uint64_t v175 = 0;
        long long v174 = 0uLL;
        uint64_t v20 = v25 + 24;
        if (v19 == v21)
        {
          v171 = &v24[8 * ((v19 - v21) >> 3)];
          v172 = v25 + 24;
          v173 = &v24[24 * v23];
          if (!v19) {
            goto LABEL_40;
          }
        }
        else
        {
          do
          {
            *((void *)v25 - 3) = 0;
            *((void *)v25 - 2) = 0;
            v25 -= 24;
            *((void *)v25 + 2) = 0;
            long long v26 = *(_OWORD *)(v19 - 24);
            v19 -= 24;
            *(_OWORD *)v25 = v26;
            *((void *)v25 + 2) = *((void *)v19 + 2);
            *(void *)uint64_t v19 = 0;
            *((void *)v19 + 1) = 0;
            *((void *)v19 + 2) = 0;
          }
          while (v19 != v21);
          BOOL v27 = v171;
          uint64_t v19 = v172;
          v171 = v25;
          v172 = v20;
          v173 = &v24[24 * v23];
          if (v19 != v27)
          {
            do
            {
              v19 -= 24;
              v168 = (const std::string **)v19;
              std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
            }
            while (v19 != v27);
            uint64_t v19 = v27;
          }
          if (!v19) {
            goto LABEL_40;
          }
        }
        operator delete(v19);
      }
      else
      {
        *(void *)v172 = 0;
        *((void *)v19 + 1) = 0;
        *((void *)v19 + 2) = 0;
        *(_OWORD *)uint64_t v19 = v174;
        *((void *)v19 + 2) = v175;
        long long v174 = 0uLL;
        uint64_t v175 = 0;
        uint64_t v20 = v19 + 24;
      }
LABEL_40:
      v172 = v20;
      v168 = (const std::string **)&v174;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
      int v17 = 0;
      uint64_t v18 = v172;
      uint64_t v15 = v158;
    }
    std::vector<std::shared_ptr<FrontendFeature>>::push_back[abi:ne180100]((uint64_t *)v18 - 3, (long long *)(v15 + 16 * v16));
    uint64_t v15 = v158;
    v17 -= 252645135
         * ((*(void *)(*(void *)(v158 + 16 * v16) + 32) - *(void *)(*(void *)(v158 + 16 * v16) + 24)) >> 3);
    ++v16;
  }
  while (v16 < (v159 - v158) >> 4);
  uint64_t v28 = v171;
  v162 = 0;
  uint64_t v163 = 0;
  v161 = 0;
  v149 = v172;
  if (v171 != v172)
  {
    while (1)
    {
      v168 = 0;
      v169 = 0;
      uint64_t v170 = 0;
      std::vector<std::shared_ptr<FrontendFeature>>::__init_with_size[abi:ne180100]<std::shared_ptr<FrontendFeature>*,std::shared_ptr<FrontendFeature>*>(&v168, *(void **)v28, *((void **)v28 + 1), (uint64_t)(*((void *)v28 + 1) - *(void *)v28) >> 4);
      v151 = v28;
      uint64_t v29 = (char *)operator new(0xB0uLL);
      *((void *)v29 + 1) = 0;
      *((void *)v29 + 2) = 0;
      *(void *)uint64_t v29 = off_26C215FA8;
      *(_OWORD *)(v29 + 24) = 0u;
      uint64_t v30 = (uint64_t)(v29 + 24);
      *(_OWORD *)(v29 + 40) = 0u;
      *(_OWORD *)(v29 + 56) = 0u;
      *(_OWORD *)(v29 + 72) = 0u;
      *(_OWORD *)(v29 + 88) = 0u;
      *(_OWORD *)(v29 + 104) = 0u;
      *(_OWORD *)(v29 + 120) = 0u;
      *(_OWORD *)(v29 + 136) = 0u;
      *(_OWORD *)(v29 + 152) = 0u;
      *((void *)v29 + 21) = 0;
      *(void *)&long long v167 = v29 + 24;
      *((void *)&v167 + 1) = v29;
      uint64_t v31 = (void **)v168;
      if (v169 != (void **)v168) {
        break;
      }
LABEL_177:
      std::vector<std::shared_ptr<FrontendFeature>>::push_back[abi:ne180100]((uint64_t *)&v161, &v167);
      if (*((void *)&v167 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v167 + 1));
      }
      *(void *)&long long v174 = &v168;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
      uint64_t v28 = v151 + 24;
      if (v151 + 24 == v149) {
        goto LABEL_182;
      }
    }
    uint64_t v32 = 0;
    while (2)
    {
      uint64_t v155 = v32;
      if (v32)
      {
        uint64_t v33 = v31[2 * v32];
        v35 = *(std::string **)v33;
        uint64_t v34 = *((void *)v33 + 1);
        if (*(void *)v33 != v34)
        {
          uint64_t v36 = *(void *)(v30 + 8);
          uint64_t v37 = *(std::string **)v33;
          do
          {
            HIDWORD(v37[6].__r_.__value_.__r.__words[0]) += *(_DWORD *)(v36 - 68);
            v37 += 9;
          }
          while (v37 != (std::string *)v34);
        }
        std::string::size_type v38 = (_DWORD *)*((void *)v33 + 3);
        v39 = (_DWORD *)*((void *)v33 + 4);
        if (v38 == v39)
        {
          unint64_t v40 = *(void *)(v30 + 8);
        }
        else
        {
          unint64_t v40 = *(void *)(v30 + 8);
          int v41 = 1749801491 * ((v40 - *(void *)v30) >> 3);
          do
          {
            if (*(char *)(v30 + 95) < 0) {
              uint64_t v42 = *(void *)(v30 + 80);
            }
            else {
              LODWORD(v42) = *(unsigned __int8 *)(v30 + 95);
            }
            v38[2] += v42 + 1;
            *v38 += v41;
            v38 += 34;
          }
          while (v38 != v39);
        }
        uint64_t v51 = (_DWORD *)*((void *)v33 + 6);
        uint64_t v52 = (_DWORD *)*((void *)v33 + 7);
        unint64_t v154 = 16 * v32;
        if (v51 == v52)
        {
          int v53 = *(std::string **)v30;
          unint64_t v54 = 0x84BDA12F684BDA13 * ((uint64_t)(v40 - *(void *)v30) >> 3);
        }
        else
        {
          int v53 = *(std::string **)v30;
          unint64_t v54 = 0x84BDA12F684BDA13 * ((uint64_t)(v40 - *(void *)v30) >> 3);
          do
          {
            *v51 += v54;
            v51 += 18;
          }
          while (v51 != v52);
        }
        if (v34 - (uint64_t)v35 >= 1)
        {
          uint64_t v55 = (v34 - (uint64_t)v35) / 216;
          v56 = v53 + 9 * v54;
          uint64_t v57 = *(void *)(v30 + 16);
          if ((uint64_t)(0x84BDA12F684BDA13 * ((uint64_t)(v57 - v40) >> 3)) >= v55)
          {
            if ((uint64_t)(0x84BDA12F684BDA13 * ((uint64_t)(v40 - (void)v56) >> 3)) >= v55)
            {
              v64 = &v35[9 * v55];
            }
            else
            {
              v64 = (std::string *)((char *)v35 + 8 * ((uint64_t)(v40 - (void)v56) >> 3));
              *(void *)(v30 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(v30 + 16, (uint64_t)v64, v34, v40);
              if ((uint64_t)(v40 - (void)v56) < 1) {
                goto LABEL_96;
              }
            }
            std::vector<PhoneFeature>::__move_range(v30, (uint64_t)v56, v40, (uint64_t)&v56[9 * v55]);
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(v35, v64, v56);
            goto LABEL_96;
          }
          unint64_t v58 = v55 - 0x7B425ED097B425EDLL * ((uint64_t)(v40 - (void)v53) >> 3);
          if (v58 > 0x12F684BDA12F684) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v59 = 0x84BDA12F684BDA13 * ((v57 - (uint64_t)v53) >> 3);
          uint64_t v60 = 2 * v59;
          if (2 * v59 <= v58) {
            uint64_t v60 = v58;
          }
          if (v59 >= 0x97B425ED097B42) {
            unint64_t v61 = 0x12F684BDA12F684;
          }
          else {
            unint64_t v61 = v60;
          }
          uint64_t v177 = v30 + 16;
          if (v61)
          {
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(v61);
          }
          else
          {
            v62 = 0;
            uint64_t v63 = 0;
          }
          v66 = (std::string *)&v62[216 * v54];
          *(void *)&long long v174 = v62;
          *((void *)&v174 + 1) = v66;
          uint64_t v175 = (uint64_t)v66;
          v176 = &v62[216 * v63];
          uint64_t v67 = 216 * v55;
          unsigned __int8 v68 = &v66[9 * v55];
          do
          {
            PhoneFeature::PhoneFeature(v66, (const PhoneFeature *)v35);
            v66 += 9;
            v35 += 9;
            v67 -= 216;
          }
          while (v67);
          uint64_t v175 = (uint64_t)v68;
          std::vector<PhoneFeature>::__swap_out_circular_buffer((uint64_t *)v30, &v174, (uint64_t)v56);
          std::__split_buffer<PhoneFeature>::~__split_buffer((uint64_t)&v174);
        }
LABEL_96:
        v69 = (uint64_t *)v167;
        unint64_t v70 = v154;
        uint64_t v71 = v168[v154 / 8];
        uint64_t data = (uint64_t)v71[1].__r_.__value_.__l.__data_;
        uint64_t size = v71[1].__r_.__value_.__l.__size_;
        if (size - data > 0)
        {
          uint64_t v74 = (size - data) / 136;
          uint64_t v75 = *(void *)(v167 + 24);
          unint64_t v76 = *(void *)(v167 + 32);
          uint64_t v77 = (uint64_t)(v76 - v75) / 136;
          uint64_t v78 = v75 + 136 * v77;
          uint64_t v79 = *(void *)(v167 + 40);
          if ((uint64_t)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v79 - v76) >> 3)) >= v74)
          {
            if ((uint64_t)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v76 - v78) >> 3)) >= v74)
            {
              uint64_t v152 = data + 136 * v74;
              uint64_t v84 = *(void *)(v167 + 32);
            }
            else
            {
              uint64_t v152 = data + 8 * ((uint64_t)(v76 - v78) >> 3);
              uint64_t v84 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(v167 + 40, v152, size, v76);
              v69[4] = v84;
              if ((uint64_t)(v76 - v78) < 1)
              {
                unint64_t v70 = v154;
                goto LABEL_134;
              }
            }
            unint64_t v85 = v84 - 136 * v74;
            uint64_t v86 = v84;
            while (v85 < v76)
            {
              *(_OWORD *)uint64_t v86 = *(_OWORD *)v85;
              long long v87 = *(_OWORD *)(v85 + 16);
              *(void *)(v86 + 32) = *(void *)(v85 + 32);
              *(_OWORD *)(v86 + 16) = v87;
              *(void *)(v85 + 24) = 0;
              *(void *)(v85 + 32) = 0;
              *(void *)(v85 + 16) = 0;
              long long v88 = *(_OWORD *)(v85 + 40);
              *(void *)(v86 + 56) = *(void *)(v85 + 56);
              *(_OWORD *)(v86 + 40) = v88;
              *(void *)(v85 + 48) = 0;
              *(void *)(v85 + 56) = 0;
              *(void *)(v85 + 40) = 0;
              long long v89 = *(_OWORD *)(v85 + 64);
              *(void *)(v86 + 80) = *(void *)(v85 + 80);
              *(_OWORD *)(v86 + 64) = v89;
              *(void *)(v85 + 64) = 0;
              *(void *)(v85 + 72) = 0;
              *(void *)(v85 + 80) = 0;
              long long v90 = *(_OWORD *)(v85 + 88);
              *(void *)(v86 + 104) = *(void *)(v85 + 104);
              *(_OWORD *)(v86 + 88) = v90;
              *(void *)(v85 + 88) = 0;
              *(void *)(v85 + 96) = 0;
              *(void *)(v85 + 104) = 0;
              long long v91 = *(_OWORD *)(v85 + 112);
              *(void *)(v86 + 128) = *(void *)(v85 + 128);
              *(_OWORD *)(v86 + 112) = v91;
              *(void *)(v85 + 112) = 0;
              *(void *)(v85 + 120) = 0;
              *(void *)(v85 + 128) = 0;
              v86 += 136;
              v85 += 136;
            }
            uint64_t v92 = v78 + 136 * v74;
            v69[4] = v86;
            if (v84 != v92)
            {
              uint64_t v93 = 0;
              unint64_t v94 = 0xF0F0F0F0F0F0F0F1 * ((v84 - v92) >> 3);
              uint64_t v95 = v75 + 136 * v94 + 136 * v77;
              uint64_t v96 = -136 * v94;
              do
              {
                uint64_t v97 = v95 + v93;
                uint64_t v98 = v84 + v93;
                *(_OWORD *)(v84 + v93 - 136) = *(_OWORD *)(v95 + v93 - 136);
                uint64_t v99 = (void **)(v84 + v93 - 120);
                if (*(char *)(v84 + v93 - 97) < 0) {
                  operator delete(*v99);
                }
                long long v100 = *(_OWORD *)(v97 - 120);
                *(void *)(v84 + v93 - 104) = *(void *)(v97 - 104);
                *(_OWORD *)uint64_t v99 = v100;
                *(unsigned char *)(v97 - 97) = 0;
                *(unsigned char *)(v97 - 120) = 0;
                v101 = (void **)(v98 - 96);
                if (*(char *)(v98 - 73) < 0) {
                  operator delete(*v101);
                }
                uint64_t v102 = (long long *)(v97 - 96);
                uint64_t v103 = v95 + v93;
                long long v104 = *v102;
                *(void *)(v98 - 80) = *((void *)v102 + 2);
                *(_OWORD *)v101 = v104;
                *(unsigned char *)(v95 + v93 - 73) = 0;
                *(unsigned char *)uint64_t v102 = 0;
                uint64_t v105 = v84 + v93;
                int v106 = (void **)(v84 + v93 - 72);
                if (*(char *)(v84 + v93 - 49) < 0) {
                  operator delete(*v106);
                }
                long long v107 = *(_OWORD *)(v103 - 72);
                *(void *)(v84 + v93 - 56) = *(void *)(v103 - 56);
                *(_OWORD *)int v106 = v107;
                *(unsigned char *)(v103 - 49) = 0;
                *(unsigned char *)(v103 - 72) = 0;
                uint64_t v108 = (void **)(v105 - 48);
                if (*(char *)(v105 - 25) < 0) {
                  operator delete(*v108);
                }
                int v109 = (long long *)(v103 - 48);
                uint64_t v110 = v95 + v93;
                long long v111 = *v109;
                *(void *)(v105 - 32) = *((void *)v109 + 2);
                *(_OWORD *)uint64_t v108 = v111;
                *(unsigned char *)(v95 + v93 - 25) = 0;
                *(unsigned char *)int v109 = 0;
                int v112 = (void **)(v84 + v93 - 24);
                if (*(char *)(v84 + v93 - 1) < 0) {
                  operator delete(*v112);
                }
                long long v113 = *(_OWORD *)(v110 - 24);
                *(void *)(v84 + v93 - 8) = *(void *)(v110 - 8);
                *(_OWORD *)int v112 = v113;
                *(unsigned char *)(v110 - 1) = 0;
                *(unsigned char *)(v110 - 24) = 0;
                v93 -= 136;
              }
              while (v96 != v93);
            }
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(data, v152, v78);
            unint64_t v70 = v154;
          }
          else
          {
            unint64_t v80 = v77 + v74;
            if ((unint64_t)(v77 + v74) > 0x1E1E1E1E1E1E1E1) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v81 = 0xF0F0F0F0F0F0F0F1 * ((v79 - v75) >> 3);
            if (2 * v81 > v80) {
              unint64_t v80 = 2 * v81;
            }
            if (v81 >= 0xF0F0F0F0F0F0F0) {
              unint64_t v82 = 0x1E1E1E1E1E1E1E1;
            }
            else {
              unint64_t v82 = v80;
            }
            uint64_t v177 = v167 + 40;
            unint64_t v70 = v154;
            if (v82) {
              unint64_t v82 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<WordFeature>>(v82);
            }
            else {
              uint64_t v83 = 0;
            }
            uint64_t v114 = v82 + 136 * v77;
            *(void *)&long long v174 = v82;
            *((void *)&v174 + 1) = v114;
            uint64_t v175 = v114;
            v176 = (char *)(v82 + 136 * v83);
            uint64_t v115 = v114 + 136 * v74;
            uint64_t v116 = 136 * v74;
            do
            {
              WordFeature::WordFeature(v114, data);
              v114 += 136;
              data += 136;
              v116 -= 136;
            }
            while (v116);
            uint64_t v175 = v115;
            uint64_t v117 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<WordFeature>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>>((uint64_t)(v69 + 5), v78, v78, v69[3], v69[3], *((uint64_t *)&v174 + 1), *((uint64_t *)&v174 + 1));
            *((void *)&v174 + 1) = v117;
            uint64_t v118 = v69[4];
            uint64_t v119 = v175;
            if (v78 != v118)
            {
              do
              {
                *(_OWORD *)uint64_t v119 = *(_OWORD *)v78;
                long long v120 = *(_OWORD *)(v78 + 16);
                *(void *)(v119 + 32) = *(void *)(v78 + 32);
                *(_OWORD *)(v119 + 16) = v120;
                *(void *)(v78 + 24) = 0;
                *(void *)(v78 + 32) = 0;
                *(void *)(v78 + 16) = 0;
                long long v121 = *(_OWORD *)(v78 + 40);
                *(void *)(v119 + 56) = *(void *)(v78 + 56);
                *(_OWORD *)(v119 + 40) = v121;
                *(void *)(v78 + 48) = 0;
                *(void *)(v78 + 56) = 0;
                *(void *)(v78 + 40) = 0;
                long long v122 = *(_OWORD *)(v78 + 64);
                *(void *)(v119 + 80) = *(void *)(v78 + 80);
                *(_OWORD *)(v119 + 64) = v122;
                *(void *)(v78 + 64) = 0;
                *(void *)(v78 + 72) = 0;
                *(void *)(v78 + 80) = 0;
                long long v123 = *(_OWORD *)(v78 + 88);
                *(void *)(v119 + 104) = *(void *)(v78 + 104);
                *(_OWORD *)(v119 + 88) = v123;
                *(void *)(v78 + 88) = 0;
                *(void *)(v78 + 96) = 0;
                *(void *)(v78 + 104) = 0;
                long long v124 = *(_OWORD *)(v78 + 112);
                *(void *)(v119 + 128) = *(void *)(v78 + 128);
                *(_OWORD *)(v119 + 112) = v124;
                *(void *)(v78 + 112) = 0;
                *(void *)(v78 + 120) = 0;
                *(void *)(v78 + 128) = 0;
                v119 += 136;
                v78 += 136;
              }
              while (v78 != v118);
              uint64_t v117 = *((void *)&v174 + 1);
              uint64_t v78 = v69[4];
            }
            uint64_t v125 = v69[3];
            v69[3] = v117;
            v69[4] = v119;
            uint64_t v126 = v69[5];
            v69[5] = (uint64_t)v176;
            uint64_t v175 = v78;
            v176 = (char *)v126;
            *(void *)&long long v174 = v125;
            *((void *)&v174 + 1) = v125;
            std::__split_buffer<WordFeature>::~__split_buffer((uint64_t)&v174);
            v69 = (uint64_t *)v167;
          }
        }
LABEL_134:
        std::vector<Prompt>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Prompt*>,std::__wrap_iter<Prompt*>>((uint64_t)(v69 + 6), v69[7], (uint64_t *)(*(const std::string **)((char *)v168 + v70))[2].__r_.__value_.__l.__data_, (*(const std::string **)((char *)v168 + v70))[2].__r_.__value_.__l.__size_, 0x8E38E38E38E38E39* ((uint64_t)((*(const std::string **)((char *)v168 + v70))[2].__r_.__value_.__l.__size_- (*(const std::string **)((char *)v168 + v70))[2].__r_.__value_.__r.__words[0]) >> 3));
        std::operator+<char>();
        uint64_t v30 = v167;
        if (v175 >= 0) {
          v127 = (const std::string::value_type *)&v174;
        }
        else {
          v127 = (const std::string::value_type *)v174;
        }
        if (v175 >= 0) {
          std::string::size_type v128 = HIBYTE(v175);
        }
        else {
          std::string::size_type v128 = *((void *)&v174 + 1);
        }
        std::string::append((std::string *)(v167 + 72), v127, v128);
        if (SHIBYTE(v175) < 0) {
          operator delete((void *)v174);
        }
        if (v153)
        {
          std::operator+<char>();
          v129 = v175 >= 0 ? (const std::string::value_type *)&v174 : (const std::string::value_type *)v174;
          std::string::size_type v130 = v175 >= 0 ? HIBYTE(v175) : *((void *)&v174 + 1);
          std::string::append((std::string *)(v30 + 96), v129, v130);
          if (SHIBYTE(v175) < 0) {
            operator delete((void *)v174);
          }
        }
LABEL_176:
        uint64_t v32 = v155 + 1;
        uint64_t v31 = (void **)v168;
        if (v155 + 1 >= (unint64_t)(((char *)v169 - (char *)v168) >> 4)) {
          goto LABEL_177;
        }
        continue;
      }
      break;
    }
    v43 = (std::string **)*v31;
    if ((std::string **)v30 != v43)
    {
      uint64_t v45 = *v43;
      uint64_t v44 = v43[1];
      unint64_t v46 = 0x84BDA12F684BDA13 * (((char *)v44 - (char *)*v43) >> 3);
      uint64_t v47 = *(std::string **)v30;
      if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(v30 + 16) - *(void *)v30) >> 3) >= v46)
      {
        if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(v30 + 8) - (void)v47) >> 3) < v46)
        {
          uint64_t v65 = (std::string *)((char *)v45 + 8 * ((uint64_t)(*(void *)(v30 + 8) - (void)v47) >> 3));
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(v45, v65, v47);
          uint64_t v50 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(v30 + 16, (uint64_t)v65, (uint64_t)v44, *(void *)(v30 + 8));
          goto LABEL_89;
        }
        v131 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(v45, v44, v47);
        for (uint64_t i = *(void *)(v30 + 8); (std::string *)i != v131; std::allocator<PhoneFeature>::destroy[abi:ne180100](i))
          i -= 216;
        *(void *)(v30 + 8) = v131;
      }
      else
      {
        std::vector<PhoneFeature>::__vdeallocate((void **)v30);
        if (v46 > 0x12F684BDA12F684) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v48 = 0x97B425ED097B426 * ((uint64_t)(*(void *)(v30 + 16) - *(void *)v30) >> 3);
        if (v48 <= v46) {
          unint64_t v48 = v46;
        }
        if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(v30 + 16) - *(void *)v30) >> 3) >= 0x97B425ED097B42) {
          unint64_t v49 = 0x12F684BDA12F684;
        }
        else {
          unint64_t v49 = v48;
        }
        std::vector<PhoneFeature>::__vallocate[abi:ne180100]((void *)v30, v49);
        uint64_t v50 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(v30 + 16, (uint64_t)v45, (uint64_t)v44, *(void *)(v30 + 8));
LABEL_89:
        *(void *)(v30 + 8) = v50;
      }
      v133 = *v168;
      uint64_t v30 = v167;
      if ((const std::string *)v167 == *v168)
      {
        uint64_t v30 = (uint64_t)*v168;
LABEL_175:
        std::string::operator=((std::string *)(v30 + 72), v133 + 3);
        uint64_t v30 = v167;
        std::string::operator=((std::string *)(v167 + 96), *v168 + 4);
        std::string::operator=((std::string *)(v30 + 120), *v168 + 5);
        goto LABEL_176;
      }
      v135 = (void *)(v167 + 24);
      uint64_t v134 = *(void *)(v167 + 24);
      uint64_t v137 = (uint64_t)v133[1].__r_.__value_.__l.__data_;
      uint64_t v136 = v133[1].__r_.__value_.__l.__size_;
      unint64_t v138 = 0xF0F0F0F0F0F0F0F1 * ((v136 - v137) >> 3);
      v139 = (void *)(v167 + 40);
      if (0xF0F0F0F0F0F0F0F1 * ((*(void *)(v167 + 40) - v134) >> 3) >= v138)
      {
        if (0xF0F0F0F0F0F0F0F1 * ((*(void *)(v167 + 32) - v134) >> 3) < v138)
        {
          uint64_t v143 = v137 + 8 * ((*(void *)(v167 + 32) - v134) >> 3);
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(v137, v143, v134);
          uint64_t v142 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(v30 + 40, v143, v136, *(void *)(v30 + 32));
          goto LABEL_167;
        }
        uint64_t v144 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(v137, v136, v134);
        for (uint64_t j = *(void *)(v30 + 32); j != v144; std::allocator<WordFeature>::destroy[abi:ne180100](j))
          j -= 136;
        *(void *)(v30 + 32) = v144;
      }
      else
      {
        std::vector<WordFeature>::__vdeallocate((void **)(v167 + 24));
        if (v138 > 0x1E1E1E1E1E1E1E1) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v140 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*v139 - *v135) >> 3);
        if (v140 <= v138) {
          unint64_t v140 = 0xF0F0F0F0F0F0F0F1 * ((v136 - v137) >> 3);
        }
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*v139 - *v135) >> 3) >= 0xF0F0F0F0F0F0F0) {
          unint64_t v141 = 0x1E1E1E1E1E1E1E1;
        }
        else {
          unint64_t v141 = v140;
        }
        std::vector<WordFeature>::__vallocate[abi:ne180100]((void *)(v30 + 24), v141);
        uint64_t v142 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(v30 + 40, v137, v136, *(void *)(v30 + 32));
LABEL_167:
        *(void *)(v30 + 32) = v142;
      }
      if ((const std::string *)v30 != *v168)
      {
        std::vector<Prompt>::__assign_with_size[abi:ne180100]<Prompt*,Prompt*>(v30 + 48, (uint64_t *)(*v168)[2].__r_.__value_.__l.__data_, (uint64_t *)(*v168)[2].__r_.__value_.__l.__size_, 0x8E38E38E38E38E39* ((uint64_t)((*v168)[2].__r_.__value_.__l.__size_ - (*v168)[2].__r_.__value_.__r.__words[0]) >> 3));
        v133 = *v168;
        goto LABEL_175;
      }
    }
    v133 = (const std::string *)v30;
    goto LABEL_175;
  }
LABEL_182:
  *(void *)&long long v174 = &v171;
  std::vector<std::vector<std::shared_ptr<FrontendFeature>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
  *(void *)&long long v174 = &v158;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
  v147 = v161;
  for (k = v162; v147 != k; v147 += 2)
  {
    v148 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v148 + 8) = 0u;
    *(void *)v148 = off_26C215330;
    *((_OWORD *)v148 + 2) = 0u;
    *((void *)v148 + 3) = v148 + 32;
    Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v148 + 24), v147);
    v156 = v148 + 24;
    v157 = (std::__shared_weak_count *)v148;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v148 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, char **))(*(void *)v150 + 72))(v150, &v156);
    if (v157) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v157);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v148);
  }
  *(void *)&long long v174 = &v161;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
LABEL_187:
  if (v165) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v165);
  }
  if (*((void *)&v166 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v166 + 1));
  }
}

void sub_20D3775F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::shared_ptr<FrontendFeature>>::push_back[abi:ne180100](uint64_t *result, long long *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (uint64_t)(result + 2);
  unint64_t v4 = result[2];
  BOOL v6 = (void *)result[1];
  if ((unint64_t)v6 >= v4)
  {
    uint64_t v9 = ((uint64_t)v6 - *result) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - *result;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v25 = v5;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v12);
    unint64_t v14 = &v13[16 * v9];
    unint64_t v16 = &v13[16 * v15];
    *(void *)&long long v23 = v14;
    v24 = v16;
    long long v17 = *a2;
    *(_OWORD *)unint64_t v14 = *a2;
    if (*((void *)&v17 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v18 = v23;
      unint64_t v16 = v24;
    }
    else
    {
      uint64_t v18 = (uint64_t)v14;
    }
    uint64_t v8 = v14 + 16;
    uint64_t v19 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<Module>>,std::reverse_iterator<std::shared_ptr<Module>*>,std::reverse_iterator<std::shared_ptr<Module>*>,std::reverse_iterator<std::shared_ptr<Module>*>>(v5, v3[1], (void *)v3[1], *v3, (void *)*v3, v18, v18);
    long long v20 = *(_OWORD *)v3;
    *uint64_t v3 = v19;
    v3[1] = (uint64_t)v8;
    long long v23 = v20;
    uint64_t v21 = v3[2];
    void v3[2] = (uint64_t)v16;
    v24 = (char *)v21;
    uint64_t v22 = v20;
    result = (uint64_t *)std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *BOOL v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
    v6[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v6 + 2;
  }
  v3[1] = (uint64_t)v8;
  return result;
}

void *std::vector<std::shared_ptr<FrontendFeature>>::__init_with_size[abi:ne180100]<std::shared_ptr<FrontendFeature>*,std::shared_ptr<FrontendFeature>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    BOOL v6 = result;
    uint64_t v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(a4);
    *BOOL v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[2 * v8];
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<FrontendFeature>>,std::shared_ptr<FrontendFeature>*,std::shared_ptr<FrontendFeature>*,std::shared_ptr<FrontendFeature>*>((uint64_t)(v6 + 2), a2, a3, v7);
    v6[1] = result;
  }
  return result;
}

void sub_20D377940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::vector<std::shared_ptr<FrontendFeature>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        BOOL v6 = v4;
        std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v5 + 16));
      std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v5 + 40));
      std::string::operator=((std::string *)(a3 + 64), (const std::string *)(v5 + 64));
      std::string::operator=((std::string *)(a3 + 88), (const std::string *)(v5 + 88));
      std::string::operator=((std::string *)(a3 + 112), (const std::string *)(v5 + 112));
      a3 += 136;
      v5 += 136;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t std::__split_buffer<WordFeature>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    std::allocator<WordFeature>::destroy[abi:ne180100](i - 136);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<WordFeature>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 136)
  {
    *(_OWORD *)(result - 136) = *(_OWORD *)(a3 - 136);
    long long v8 = *(_OWORD *)(a3 - 120);
    *(void *)(result - 104) = *(void *)(a3 - 104);
    *(_OWORD *)(result - 120) = v8;
    *(void *)(a3 - 112) = 0;
    *(void *)(a3 - 104) = 0;
    *(void *)(a3 - 120) = 0;
    long long v9 = *(_OWORD *)(a3 - 96);
    *(void *)(result - 80) = *(void *)(a3 - 80);
    *(_OWORD *)(result - 96) = v9;
    *(void *)(a3 - 88) = 0;
    *(void *)(a3 - 80) = 0;
    *(void *)(a3 - 96) = 0;
    long long v10 = *(_OWORD *)(a3 - 72);
    *(void *)(result - 56) = *(void *)(a3 - 56);
    *(_OWORD *)(result - 72) = v10;
    *(void *)(a3 - 72) = 0;
    *(void *)(a3 - 64) = 0;
    *(void *)(a3 - 56) = 0;
    long long v11 = *(_OWORD *)(a3 - 48);
    *(void *)(result - 32) = *(void *)(a3 - 32);
    *(_OWORD *)(result - 48) = v11;
    *(void *)(a3 - 48) = 0;
    *(void *)(a3 - 40) = 0;
    *(void *)(a3 - 32) = 0;
    long long v12 = *(_OWORD *)(a3 - 24);
    *(void *)(result - 8) = *(void *)(a3 - 8);
    *(_OWORD *)(result - 24) = v12;
    result -= 136;
    *(void *)(a3 - 24) = 0;
    *(void *)(a3 - 16) = 0;
    *(void *)(a3 - 8) = 0;
  }
  return result;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      long long v6 = *(_OWORD *)((char *)v5[2].__r_.__value_.__r.__words + 4);
      long long v7 = *(_OWORD *)&v5[1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[1].__r_.__value_.__l.__data_;
      *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v7;
      *(_OWORD *)((char *)this[2].__r_.__value_.__r.__words + 4) = v6;
      if (this != v5) {
        std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)&this[3], (uint64_t)v5[3].__r_.__value_.__l.__data_, v5[3].__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[3].__r_.__value_.__l.__size_ - v5[3].__r_.__value_.__r.__words[0]) >> 3));
      }
      std::string::operator=(this + 4, v5 + 4);
      std::string::operator=(this + 5, v5 + 5);
      *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[6].__r_.__value_.__l.__data_;
      long long v9 = *(_OWORD *)&v5[7].__r_.__value_.__r.__words[1];
      long long v8 = *(_OWORD *)&v5[8].__r_.__value_.__l.__data_;
      long long v10 = *(_OWORD *)&v5[6].__r_.__value_.__r.__words[2];
      LODWORD(this[8].__r_.__value_.__r.__words[2]) = v5[8].__r_.__value_.__r.__words[2];
      *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v9;
      *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v8;
      *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = v10;
      this += 9;
      v5 += 9;
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<WordFeature>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 136;
        std::allocator<WordFeature>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<PhoneFeature>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 216;
        std::allocator<PhoneFeature>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<FrontendFeature>>,std::shared_ptr<FrontendFeature>*,std::shared_ptr<FrontendFeature>*,std::shared_ptr<FrontendFeature>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  long long v10 = a4;
  long long v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    long long v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<Agglomerate>>,std::shared_ptr<Agglomerate>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void MergeFrontendFeatureModule::clean_up(MergeFrontendFeatureModule *this)
{
  Module::clean_up(this);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100]((uint64_t *)this + 35);
}

void MergeFrontendFeatureModule::~MergeFrontendFeatureModule(MergeFrontendFeatureModule *this)
{
  *(void *)this = off_26C204320;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = off_26C204320;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Module::~Module(this);
}

void TextPreprocessing::process_data(void *a1, uint64_t *a2)
{
  void (***v278)(uint8_t *__return_ptr);
  uint64_t v279;
  std::string::size_type v280;
  uint64_t v281;
  uint8_t *v282;
  std::string *v283;
  NSObject *v284;
  unsigned int *v285;
  unsigned int *v286;
  NSObject *v287;
  const char *v288;
  unsigned int v289;
  NSObject *v290;
  unsigned char *v291;
  const char *v292;
  unsigned char *v293;
  NSObject *v294;
  unsigned char *v295;
  const char *v296;
  unsigned char *v297;
  NSObject *v298;
  const char *v299;
  std::string *v300;
  std::string *v301;
  uint64_t *v302;
  uint64_t *v303;
  void *v304;
  void *v305;
  std::__shared_weak_count *v306;
  std::__shared_weak_count *v307;
  unint64_t v308;
  char *v309;
  long long v310;
  unsigned char *v311;
  unint64_t v312;
  char *v313;
  void *v314;
  unint64_t v315;
  std::string *v316;
  uint64_t v317;
  uint64_t v318;
  std::string *v319;
  std::string *__dst;
  unint64_t v321;
  unint64_t v322;
  uint64_t *v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  uint8_t v329[16];
  uint8_t buf[16];
  long long v331;
  int64x2_t v332;
  unsigned char v333[32];
  char *v334;
  uint64_t v335;

  uint64_t v2 = a2;
  v335 = *MEMORY[0x263EF8340];
  long long v6 = *(std::string **)(*(void *)v4 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v316 = v6;
  if (a1[36])
  {
    v302 = v2;
    v304 = a1;
    v306 = v5;
    long long v7 = (void *)a1[34];
    char v8 = a1 + 35;
    if (v7 == a1 + 35) {
      goto LABEL_399;
    }
    v314 = a1 + 35;
LABEL_6:
    int v9 = *((char *)v7 + 55);
    if (v9 >= 0) {
      long long v10 = v7 + 4;
    }
    else {
      long long v10 = (void *)v7[4];
    }
    if (v9 >= 0) {
      uint64_t v11 = *((unsigned __int8 *)v7 + 55);
    }
    else {
      uint64_t v11 = v7[5];
    }
    int v12 = *((char *)v7 + 79);
    if (v12 >= 0) {
      unint64_t v13 = (char *)(v7 + 7);
    }
    else {
      unint64_t v13 = (char *)v7[7];
    }
    if (v12 >= 0) {
      unint64_t v14 = *((unsigned __int8 *)v7 + 79);
    }
    else {
      unint64_t v14 = v7[8];
    }
    int v15 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
    if (v15 >= 0) {
      unint64_t v16 = v6;
    }
    else {
      unint64_t v16 = (std::string *)v6->__r_.__value_.__r.__words[0];
    }
    if (v15 >= 0) {
      std::string::size_type size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v6->__r_.__value_.__l.__size_;
    }
    if (size) {
      BOOL v18 = v11 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18) {
      goto LABEL_393;
    }
    v326 = &v13[v14];
    uint64_t v19 = (std::string *)((char *)v16 + size);
    uint64_t v20 = v11 - 1;
    std::string::size_type v21 = size - 1;
    while (1)
    {
      uint64_t v22 = 0;
      while (v16->__r_.__value_.__s.__data_[v22] == *((unsigned __int8 *)v10 + v22))
      {
        uint64_t v23 = v22 + 1;
        if (v21 != v22)
        {
          BOOL v18 = v20 == v22++;
          if (!v18) {
            continue;
          }
        }
        v24 = (void *)((char *)v10 + v23);
        uint64_t v25 = (std::string *)((char *)v16 + v23);
        goto LABEL_36;
      }
      v24 = (void *)((char *)v10 + v22);
      uint64_t v25 = (std::string *)((char *)v16 + v22);
LABEL_36:
      if (v24 == (void *)((char *)v10 + v11)) {
        break;
      }
      unint64_t v16 = (std::string *)((char *)v16 + 1);
      --v21;
      if (v16 == v19) {
        goto LABEL_393;
      }
    }
    if (v16 == v25) {
      goto LABEL_393;
    }
    v331 = 0u;
    v332 = 0u;
    *(_OWORD *)buf = 0u;
    if ((v6->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v26 = v6;
    }
    else {
      long long v26 = (std::string *)v6->__r_.__value_.__r.__words[0];
    }
    v315 = v14 >> 1;
    BOOL v27 = v26;
    v317 = (uint64_t)v10 + v11;
    v318 = v11;
    v325 = v13;
    v321 = v14;
    while (1)
    {
      __dst = (std::string *)boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int64x2_t *)buf, v26, v27, v16);
      uint64_t v29 = v332.i64[1];
      uint64_t v28 = v332.i64[0];
      uint64_t v30 = v332.i64[0] + v332.i64[1];
      unint64_t v31 = (unint64_t)(v332.i64[0] + v332.i64[1]) >> 12;
      uint64_t v33 = *(char **)&buf[8];
      uint64_t v32 = (char *)v331;
      uint64_t v34 = (char *)(*(void *)&buf[8] + 8 * v31);
      unint64_t v35 = (unint64_t)v332.i64[0] >> 12;
      uint64_t v36 = v331 - *(void *)&buf[8];
      if ((void)v331 == *(void *)&buf[8])
      {
        uint64_t v37 = 0;
        uint64_t v39 = 0;
        std::string::size_type v38 = (char *)(*(void *)&buf[8] + 8 * v35);
      }
      else
      {
        uint64_t v37 = *(void *)v34 + (v30 & 0xFFF);
        std::string::size_type v38 = (char *)(*(void *)&buf[8] + 8 * v35);
        uint64_t v39 = *(void *)v38 + (v332.i16[0] & 0xFFF);
      }
      if (v37 == v39) {
        unint64_t v40 = 0;
      }
      else {
        unint64_t v40 = v37 + ((v34 - v38) << 9) - (v39 + *(void *)v34) + *(void *)v38;
      }
      v322 = v40;
      v319 = v25;
      if (v40 < v332.i64[1] - v40)
      {
        unint64_t v41 = v14 - v332.i64[0];
        if (v14 > v332.i64[0])
        {
          uint64_t v42 = (v36 << 9) - 1;
          uint64_t v43 = v331 - *(void *)&buf[8];
          if ((void)v331 == *(void *)&buf[8])
          {
            uint64_t v42 = 0;
            ++v41;
          }
          if ((v41 & 0xFFF) != 0) {
            unint64_t v44 = (v41 >> 12) + 1;
          }
          else {
            unint64_t v44 = v41 >> 12;
          }
          unint64_t v45 = v42 - v30;
          if (v44 >= v45 >> 12) {
            unint64_t v46 = v45 >> 12;
          }
          else {
            unint64_t v46 = v44;
          }
          if (v44 <= v45 >> 12)
          {
            for (v332.i64[0] += v46 << 12; v46; --v46)
            {
              *(void *)v333 = *(void *)(v331 - 8);
              *(void *)&v331 = v331 - 8;
              std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)buf, v333);
            }
          }
          else
          {
            unint64_t v47 = v44 - v46;
            uint64_t v48 = *((void *)&v331 + 1) - *(void *)buf;
            if (v44 - v46 <= ((uint64_t)(*((void *)&v331 + 1) - *(void *)buf) >> 3) - (v43 >> 3))
            {
              if (v47)
              {
                if (*(void *)&buf[8] == *(void *)buf)
                {
LABEL_115:
                  unint64_t v84 = v47;
                  do
                  {
                    *(void *)v333 = operator new(0x1000uLL);
                    std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(buf, v333);
                    --v84;
                  }
                  while (v84);
                  v46 += v47;
                  uint64_t v28 = v332.i64[0];
                }
                else
                {
                  while (1)
                  {
                    *(void *)v333 = operator new(0x1000uLL);
                    std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)buf, v333);
                    uint64_t v83 = 4095;
                    if ((void)v331 - *(void *)&buf[8] != 8) {
                      uint64_t v83 = 4096;
                    }
                    uint64_t v28 = v83 + v332.i64[0];
                    v332.i64[0] = v28;
                    if (!--v47) {
                      break;
                    }
                    if (*(void *)&buf[8] == *(void *)buf) {
                      goto LABEL_115;
                    }
                  }
                }
              }
              for (v332.i64[0] = v28 + (v46 << 12); v46; --v46)
              {
                *(void *)v333 = *(void *)(v331 - 8);
                *(void *)&v331 = v331 - 8;
                std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)buf, v333);
              }
            }
            else
            {
              BOOL v49 = v331 == *(void *)&buf[8];
              if (v48 >> 2 <= v47 + (v43 >> 3)) {
                unint64_t v50 = v47 + (v43 >> 3);
              }
              else {
                unint64_t v50 = v48 >> 2;
              }
              v334 = (char *)&v331 + 8;
              if (v50) {
                unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v50);
              }
              else {
                uint64_t v51 = 0;
              }
              unint64_t v85 = (v44 << 12) - v49;
              *(void *)v333 = v50;
              *(void *)&v333[8] = v50;
              *(void *)&v333[16] = v50;
              *(void *)&v333[24] = v50 + 8 * v51;
              do
              {
                *(void *)v329 = operator new(0x1000uLL);
                std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(v333, v329);
                --v47;
              }
              while (v47);
              v308 = v85;
              uint64_t v86 = v331;
              for (uint64_t i = *(char **)&v333[16]; v46; --v46)
              {
                if (i == *(char **)&v333[24])
                {
                  long long v88 = *(char **)&v333[8];
                  long long v89 = *(void **)v333;
                  if (*(void *)&v333[8] <= *(void *)v333)
                  {
                    if (i == *(char **)v333) {
                      unint64_t v95 = 1;
                    }
                    else {
                      unint64_t v95 = (uint64_t)&i[-*(void *)v333] >> 2;
                    }
                    uint64_t v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v95);
                    uint64_t v98 = i - v88;
                    BOOL v18 = i == v88;
                    uint64_t i = &v96[8 * (v95 >> 2)];
                    if (!v18)
                    {
                      uint64_t i = &v96[8 * (v95 >> 2) + (v98 & 0xFFFFFFFFFFFFFFF8)];
                      uint64_t v99 = 8 * (v98 >> 3);
                      long long v100 = &v96[8 * (v95 >> 2)];
                      do
                      {
                        uint64_t v101 = *(void *)v88;
                        v88 += 8;
                        *(void *)long long v100 = v101;
                        v100 += 8;
                        v99 -= 8;
                      }
                      while (v99);
                    }
                    *(void *)v333 = v96;
                    *(void *)&v333[8] = &v96[8 * (v95 >> 2)];
                    *(void *)&v333[16] = i;
                    *(void *)&v333[24] = &v96[8 * v97];
                    if (v89) {
                      operator delete(v89);
                    }
                  }
                  else
                  {
                    uint64_t v90 = (uint64_t)(*(void *)&v333[8] - *(void *)v333) >> 3;
                    if (v90 >= -1) {
                      uint64_t v91 = v90 + 1;
                    }
                    else {
                      uint64_t v91 = v90 + 2;
                    }
                    uint64_t v92 = *(void *)&v333[8] - 8 * (v91 >> 1);
                    uint64_t v93 = &i[-*(void *)&v333[8]];
                    if (i != *(char **)&v333[8])
                    {
                      memmove((void *)(*(void *)&v333[8] - 8 * (v91 >> 1)), *(const void **)&v333[8], (size_t)&i[-*(void *)&v333[8]]);
                      uint64_t i = v88;
                    }
                    unint64_t v94 = &i[-8 * (v91 >> 1)];
                    uint64_t i = &v93[v92];
                    *(void *)&v333[8] = v94;
                    *(void *)&v333[16] = &v93[v92];
                    unint64_t v13 = v325;
                  }
                }
                *(void *)uint64_t i = *(void *)(v86 - 8);
                uint64_t i = (char *)(*(void *)&v333[16] + 8);
                *(void *)&v333[16] += 8;
                uint64_t v86 = v331 - 8;
                *(void *)&v331 = v331 - 8;
              }
              uint64_t v102 = *(uint64_t **)&buf[8];
              if (*(void *)&buf[8] != v86)
              {
                do
                {
                  if (i == *(char **)&v333[24])
                  {
                    uint64_t v103 = *(char **)&v333[8];
                    long long v104 = *(void **)v333;
                    if (*(void *)&v333[8] <= *(void *)v333)
                    {
                      if (i == *(char **)v333) {
                        unint64_t v110 = 1;
                      }
                      else {
                        unint64_t v110 = (uint64_t)&i[-*(void *)v333] >> 2;
                      }
                      long long v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v110);
                      uint64_t v113 = i - v103;
                      BOOL v18 = i == v103;
                      uint64_t i = &v111[8 * (v110 >> 2)];
                      if (!v18)
                      {
                        uint64_t i = &v111[8 * (v110 >> 2) + (v113 & 0xFFFFFFFFFFFFFFF8)];
                        uint64_t v114 = 8 * (v113 >> 3);
                        uint64_t v115 = &v111[8 * (v110 >> 2)];
                        do
                        {
                          uint64_t v116 = *(void *)v103;
                          v103 += 8;
                          *(void *)uint64_t v115 = v116;
                          v115 += 8;
                          v114 -= 8;
                        }
                        while (v114);
                      }
                      *(void *)v333 = v111;
                      *(void *)&v333[8] = &v111[8 * (v110 >> 2)];
                      *(void *)&v333[16] = i;
                      *(void *)&v333[24] = &v111[8 * v112];
                      if (v104) {
                        operator delete(v104);
                      }
                    }
                    else
                    {
                      uint64_t v105 = (uint64_t)(*(void *)&v333[8] - *(void *)v333) >> 3;
                      if (v105 >= -1) {
                        uint64_t v106 = v105 + 1;
                      }
                      else {
                        uint64_t v106 = v105 + 2;
                      }
                      uint64_t v107 = *(void *)&v333[8] - 8 * (v106 >> 1);
                      uint64_t v108 = &i[-*(void *)&v333[8]];
                      if (i != *(char **)&v333[8])
                      {
                        memmove((void *)(*(void *)&v333[8] - 8 * (v106 >> 1)), *(const void **)&v333[8], (size_t)&i[-*(void *)&v333[8]]);
                        uint64_t i = v103;
                      }
                      int v109 = &i[-8 * (v106 >> 1)];
                      uint64_t i = &v108[v107];
                      *(void *)&v333[8] = v109;
                      *(void *)&v333[16] = &v108[v107];
                    }
                  }
                  uint64_t v117 = *v102++;
                  *(void *)uint64_t i = v117;
                  uint64_t i = (char *)(*(void *)&v333[16] + 8);
                  *(void *)&v333[16] += 8;
                }
                while (v102 != (uint64_t *)v331);
              }
              uint64_t v118 = *(void **)buf;
              *(_OWORD *)buf = *(_OWORD *)v333;
              *(void *)&v331 = i;
              *((void *)&v331 + 1) = *(void *)&v333[24];
              v332.i64[0] += v308;
              if (v118) {
                operator delete(v118);
              }
            }
          }
          LOWORD(v28) = v332.i16[0];
          uint64_t v33 = *(char **)&buf[8];
          uint64_t v32 = (char *)v331;
          unint64_t v35 = (unint64_t)v332.i64[0] >> 12;
        }
        uint64_t v119 = &v33[8 * v35];
        if (v32 == v33) {
          long long v120 = 0;
        }
        else {
          long long v120 = (char *)(*(void *)v119 + (v28 & 0xFFF));
        }
        long long v121 = v120;
        long long v122 = (void **)&v33[8 * v35];
        long long v123 = v13;
        unint64_t v124 = v321;
        if (v321 <= v322) {
          goto LABEL_179;
        }
        unint64_t v124 = v322;
        if (v322 >= v315) {
          long long v123 = &v13[v321 - v322];
        }
        else {
          long long v123 = &v326[-v322];
        }
        if (v123 == v13)
        {
          long long v121 = v120;
          long long v122 = (void **)&v33[8 * v35];
          long long v123 = v13;
          if (!v322) {
            goto LABEL_346;
          }
        }
        else
        {
          uint64_t v125 = v123;
          long long v122 = (void **)&v33[8 * v35];
          long long v121 = v120;
          do
          {
            if (v121 == *v122)
            {
              uint64_t v126 = (uint64_t)*--v122;
              long long v121 = (char *)(v126 + 4096);
            }
            char v127 = *--v125;
            *--long long v121 = v127;
            v332 = vaddq_s64(v332, (int64x2_t)xmmword_20D6B4A20);
          }
          while (v125 != v13);
LABEL_179:
          if (!v124) {
            goto LABEL_346;
          }
        }
        v309 = &v33[8 * v35];
        std::string::size_type v128 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100](v119, (uint64_t)v120, v124);
        std::string::size_type v130 = v128;
        if (v120 != v129)
        {
          v131 = (void **)v128;
          v132 = v129;
          do
          {
            if (v121 == *v122)
            {
              uint64_t v133 = (uint64_t)*--v122;
              long long v121 = (char *)(v133 + 4096);
            }
            if (v132 == *v131)
            {
              uint64_t v134 = (uint64_t)*--v131;
              v132 = (char *)(v134 + 4096);
            }
            char v135 = *--v132;
            *--long long v121 = v135;
            v332 = vaddq_s64(v332, (int64x2_t)xmmword_20D6B4A20);
          }
          while (v132 != v120);
        }
        uint64_t v136 = v309;
        *(void *)&long long v137 = v309;
        *((void *)&v137 + 1) = v120;
        if (v124 < v322)
        {
          unint64_t v138 = v129;
          v310 = v137;
          v139 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100](v136, (uint64_t)v120, v322);
          unint64_t v141 = v140;
          *(_OWORD *)v333 = v310;
          *(void *)v329 = v333;
          if (v130 == v139)
          {
            unint64_t v154 = v138;
          }
          else
          {
            uint64_t v142 = v139;
            v311 = v140;
            uint64_t v144 = *v130;
            uint64_t v143 = v130 + 1;
            std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100]((void **)v329, v138, (unsigned char *)(v144 + 4096));
            if (v143 != v142)
            {
              v146 = *(char **)&v333[8];
              v145 = *(void **)v333;
              v323 = v142;
              do
              {
                uint64_t v147 = 0;
                uint64_t v148 = *v143;
                v149 = (char *)*v145;
                while (1)
                {
                  uint64_t v150 = v149 - v146 + 4096;
                  if (4096 - v147 >= v150) {
                    size_t v151 = v150;
                  }
                  else {
                    size_t v151 = 4096 - v147;
                  }
                  if (v151) {
                    memmove(v146, (const void *)(v148 + v147), v151);
                  }
                  v147 += v151;
                  if (v147 == 4096) {
                    break;
                  }
                  uint64_t v152 = (char *)v145[1];
                  ++v145;
                  v149 = v152;
                  v146 = v152;
                }
                v146 += v151;
                if ((char *)(*v145 + 4096) == v146)
                {
                  BOOL v153 = (char *)v145[1];
                  ++v145;
                  v146 = v153;
                }
                uint64_t v142 = v323;
                unint64_t v13 = v325;
                *(void *)v333 = v145;
                *(void *)&v333[8] = v146;
                ++v143;
              }
              while (v143 != v323);
            }
            unint64_t v154 = (unsigned char *)*v142;
            unint64_t v141 = v311;
          }
          std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100]((void **)v329, v154, v141);
          long long v120 = *(char **)&v333[8];
          *(void *)&long long v137 = *(void *)v333;
        }
        if (v123 != v326)
        {
          v156 = (void **)(v137 + 8);
          uint64_t v155 = *(unsigned char **)v137;
          while (1)
          {
            uint64_t v157 = v155 - v120 + 4096;
            if (v326 - v123 >= v157) {
              size_t v158 = v157;
            }
            else {
              size_t v158 = v326 - v123;
            }
            if (v158) {
              memmove(v120, v123, v158);
            }
            v123 += v158;
            if (v123 == v326) {
              break;
            }
            uint64_t v159 = *v156++;
            uint64_t v155 = v159;
            long long v120 = v159;
          }
        }
        goto LABEL_346;
      }
      uint64_t v52 = (v36 << 9) - 1;
      uint64_t v53 = v331 - *(void *)&buf[8];
      if ((void)v331 == *(void *)&buf[8]) {
        uint64_t v52 = 0;
      }
      unint64_t v54 = v52 - v30;
      BOOL v55 = v14 >= v54;
      unint64_t v56 = v14 - v54;
      if (v56 != 0 && v55)
      {
        if ((void)v331 == *(void *)&buf[8]) {
          unint64_t v57 = v56 + 1;
        }
        else {
          unint64_t v57 = v56;
        }
        if ((v57 & 0xFFF) != 0) {
          unint64_t v58 = (v57 >> 12) + 1;
        }
        else {
          unint64_t v58 = v57 >> 12;
        }
        if (v58 >= v35) {
          unint64_t v59 = (unint64_t)v332.i64[0] >> 12;
        }
        else {
          unint64_t v59 = v58;
        }
        if (v58 <= v35)
        {
          for (v332.i64[0] -= v59 << 12; v59; --v59)
          {
            v64 = (char *)(*(void *)&buf[8] + 8);
            uint64_t v65 = **(void **)&buf[8];
            *(void *)&buf[8] += 8;
            if (v32 == *((char **)&v331 + 1))
            {
              uint64_t v66 = (uint64_t)&v64[-*(void *)buf];
              if ((unint64_t)v64 <= *(void *)buf)
              {
                if (v32 == *(char **)buf) {
                  unint64_t v74 = 1;
                }
                else {
                  unint64_t v74 = (uint64_t)&v32[-*(void *)buf] >> 2;
                }
                uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v74);
                uint64_t v77 = *(uint64_t **)&buf[8];
                uint64_t v32 = &v75[8 * (v74 >> 2)];
                uint64_t v78 = v331 - *(void *)&buf[8];
                if ((void)v331 != *(void *)&buf[8])
                {
                  uint64_t v32 = &v75[8 * (v74 >> 2) + (v78 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v79 = 8 * (v78 >> 3);
                  unint64_t v80 = &v75[8 * (v74 >> 2)];
                  do
                  {
                    uint64_t v81 = *v77++;
                    *(void *)unint64_t v80 = v81;
                    v80 += 8;
                    v79 -= 8;
                  }
                  while (v79);
                }
                unint64_t v82 = *(void **)buf;
                *(void *)buf = v75;
                *(void *)&buf[8] = &v75[8 * (v74 >> 2)];
                *(void *)&v331 = v32;
                *((void *)&v331 + 1) = &v75[8 * v76];
                if (v82)
                {
                  operator delete(v82);
                  uint64_t v32 = (char *)v331;
                }
              }
              else
              {
                uint64_t v67 = v66 >> 3;
                BOOL v68 = v66 >> 3 < -1;
                uint64_t v69 = (v66 >> 3) + 2;
                if (v68) {
                  uint64_t v70 = v69;
                }
                else {
                  uint64_t v70 = v67 + 1;
                }
                uint64_t v71 = &v64[-8 * (v70 >> 1)];
                int64_t v72 = v32 - v64;
                if (v32 != v64)
                {
                  memmove(&v64[-8 * (v70 >> 1)], v64, v32 - v64);
                  uint64_t v32 = *(char **)&buf[8];
                }
                v73 = &v32[-8 * (v70 >> 1)];
                uint64_t v32 = &v71[v72];
                *(void *)&buf[8] = v73;
                *(void *)&v331 = &v71[v72];
              }
            }
            *(void *)uint64_t v32 = v65;
            uint64_t v32 = (char *)(v331 + 8);
            *(void *)&v331 = v331 + 8;
          }
        }
        else
        {
          unint64_t v60 = v58 - v59;
          if (v58 - v59 <= ((uint64_t)(*((void *)&v331 + 1) - *(void *)buf) >> 3) - (v53 >> 3))
          {
            if (v60)
            {
              while (*((void *)&v331 + 1) != (void)v331)
              {
                *(void *)v333 = operator new(0x1000uLL);
                std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(buf, v333);
                if (!--v60)
                {
                  uint64_t v32 = (char *)v331;
                  goto LABEL_249;
                }
              }
              for (uint64_t j = 0; j != v60; ++j)
              {
                *(void *)v333 = operator new(0x1000uLL);
                std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)buf, v333);
                uint64_t v32 = (char *)v331;
                uint64_t v179 = 4095;
                if ((void)v331 - *(void *)&buf[8] != 8) {
                  uint64_t v179 = 4096;
                }
                uint64_t v180 = v179 + v332.i64[0];
                v332.i64[0] = v180;
              }
              v59 += v60;
            }
            else
            {
LABEL_249:
              uint64_t v180 = v332.i64[0];
            }
            for (v332.i64[0] = v180 - (v59 << 12); v59; --v59)
            {
              v181 = (char *)(*(void *)&buf[8] + 8);
              uint64_t v182 = **(void **)&buf[8];
              *(void *)&buf[8] += 8;
              if (v32 == *((char **)&v331 + 1))
              {
                uint64_t v183 = (uint64_t)&v181[-*(void *)buf];
                if ((unint64_t)v181 <= *(void *)buf)
                {
                  if (v32 == *(char **)buf) {
                    unint64_t v190 = 1;
                  }
                  else {
                    unint64_t v190 = (uint64_t)&v32[-*(void *)buf] >> 2;
                  }
                  v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v190);
                  v193 = *(uint64_t **)&buf[8];
                  uint64_t v32 = &v191[8 * (v190 >> 2)];
                  uint64_t v194 = v331 - *(void *)&buf[8];
                  if ((void)v331 != *(void *)&buf[8])
                  {
                    uint64_t v32 = &v191[8 * (v190 >> 2) + (v194 & 0xFFFFFFFFFFFFFFF8)];
                    uint64_t v195 = 8 * (v194 >> 3);
                    v196 = &v191[8 * (v190 >> 2)];
                    do
                    {
                      uint64_t v197 = *v193++;
                      *(void *)v196 = v197;
                      v196 += 8;
                      v195 -= 8;
                    }
                    while (v195);
                  }
                  v198 = *(void **)buf;
                  *(void *)buf = v191;
                  *(void *)&buf[8] = &v191[8 * (v190 >> 2)];
                  *(void *)&v331 = v32;
                  *((void *)&v331 + 1) = &v191[8 * v192];
                  if (v198)
                  {
                    operator delete(v198);
                    uint64_t v32 = (char *)v331;
                  }
                }
                else
                {
                  uint64_t v184 = v183 >> 3;
                  BOOL v68 = v183 >> 3 < -1;
                  uint64_t v185 = (v183 >> 3) + 2;
                  if (v68) {
                    uint64_t v186 = v185;
                  }
                  else {
                    uint64_t v186 = v184 + 1;
                  }
                  v187 = &v181[-8 * (v186 >> 1)];
                  int64_t v188 = v32 - v181;
                  if (v32 != v181)
                  {
                    memmove(&v181[-8 * (v186 >> 1)], v181, v32 - v181);
                    uint64_t v32 = *(char **)&buf[8];
                  }
                  v189 = &v32[-8 * (v186 >> 1)];
                  uint64_t v32 = &v187[v188];
                  *(void *)&buf[8] = v189;
                  *(void *)&v331 = &v187[v188];
                }
              }
              *(void *)uint64_t v32 = v182;
              uint64_t v32 = (char *)(v331 + 8);
              *(void *)&v331 = v331 + 8;
            }
          }
          else
          {
            uint64_t v61 = v53 >> 3;
            if ((uint64_t)(*((void *)&v331 + 1) - *(void *)buf) >> 2 <= v60 + (v53 >> 3)) {
              unint64_t v62 = v60 + (v53 >> 3);
            }
            else {
              unint64_t v62 = (uint64_t)(*((void *)&v331 + 1) - *(void *)buf) >> 2;
            }
            v334 = (char *)&v331 + 8;
            if (v62) {
              unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v62);
            }
            else {
              uint64_t v63 = 0;
            }
            *(void *)v333 = v62;
            *(void *)&v333[8] = v62 + 8 * (v61 - v59);
            *(void *)&v333[16] = *(void *)&v333[8];
            *(void *)&v333[24] = v62 + 8 * v63;
            do
            {
              *(void *)v329 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(v333, v329);
              --v60;
            }
            while (v60);
            v312 = v59 << 12;
            if (v59)
            {
              uint64_t v160 = *(void **)&buf[8];
              v161 = *(char **)&v333[16];
              do
              {
                if (v161 == *(char **)&v333[24])
                {
                  v162 = *(char **)&v333[8];
                  uint64_t v163 = *(void **)v333;
                  if (*(void *)&v333[8] <= *(void *)v333)
                  {
                    if (v161 == *(char **)v333) {
                      unint64_t v169 = 1;
                    }
                    else {
                      unint64_t v169 = (uint64_t)&v161[-*(void *)v333] >> 2;
                    }
                    uint64_t v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v169);
                    uint64_t v172 = v161 - v162;
                    BOOL v18 = v161 == v162;
                    v161 = &v170[8 * (v169 >> 2)];
                    if (!v18)
                    {
                      v161 = &v170[8 * (v169 >> 2) + (v172 & 0xFFFFFFFFFFFFFFF8)];
                      uint64_t v173 = 8 * (v172 >> 3);
                      long long v174 = &v170[8 * (v169 >> 2)];
                      do
                      {
                        uint64_t v175 = *(void *)v162;
                        v162 += 8;
                        *(void *)long long v174 = v175;
                        v174 += 8;
                        v173 -= 8;
                      }
                      while (v173);
                    }
                    *(void *)v333 = v170;
                    *(void *)&v333[8] = &v170[8 * (v169 >> 2)];
                    *(void *)&v333[16] = v161;
                    *(void *)&v333[24] = &v170[8 * v171];
                    if (v163) {
                      operator delete(v163);
                    }
                  }
                  else
                  {
                    uint64_t v164 = (uint64_t)(*(void *)&v333[8] - *(void *)v333) >> 3;
                    if (v164 >= -1) {
                      uint64_t v165 = v164 + 1;
                    }
                    else {
                      uint64_t v165 = v164 + 2;
                    }
                    uint64_t v166 = *(void *)&v333[8] - 8 * (v165 >> 1);
                    long long v167 = &v161[-*(void *)&v333[8]];
                    if (v161 != *(char **)&v333[8])
                    {
                      memmove((void *)(*(void *)&v333[8] - 8 * (v165 >> 1)), *(const void **)&v333[8], (size_t)&v161[-*(void *)&v333[8]]);
                      v161 = v162;
                    }
                    v168 = &v161[-8 * (v165 >> 1)];
                    v161 = &v167[v166];
                    *(void *)&v333[8] = v168;
                    *(void *)&v333[16] = &v167[v166];
                    unint64_t v13 = v325;
                  }
                }
                *(void *)v161 = *v160;
                v161 = (char *)(*(void *)&v333[16] + 8);
                *(void *)&v333[16] += 8;
                uint64_t v160 = (void *)(*(void *)&buf[8] + 8);
                *(void *)&buf[8] += 8;
                --v59;
              }
              while (v59);
            }
            v176 = (void *)v331;
            unint64_t v14 = v321;
            while (v176 != *(void **)&buf[8])
              std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)v333, --v176);
            uint64_t v177 = *(void **)buf;
            *(_OWORD *)buf = *(_OWORD *)v333;
            v331 = *(_OWORD *)&v333[16];
            v332.i64[0] -= v312;
            if (v177)
            {
              operator delete(v177);
              uint64_t v32 = (char *)v331;
            }
            else
            {
              uint64_t v32 = *(char **)&v333[16];
            }
          }
        }
        uint64_t v29 = v332.i64[1];
        uint64_t v33 = *(char **)&buf[8];
        LOWORD(v30) = v332.i16[0] + v332.i16[4];
        unint64_t v31 = (unint64_t)(v332.i64[0] + v332.i64[1]) >> 12;
      }
      v199 = &v33[8 * v31];
      if (v32 == v33) {
        v200 = 0;
      }
      else {
        v200 = (char *)(*(void *)v199 + (v30 & 0xFFF));
      }
      unint64_t v201 = v29 - v322;
      v202 = v200;
      v203 = v199;
      v204 = v326;
      unint64_t v205 = v14;
      if (v29 - v322 < v14)
      {
        v204 = &v13[v201];
        unint64_t v206 = v14 + v322 - v29;
        v207 = &v13[v201];
        v203 = v199;
        v202 = v200;
        do
        {
          *v202++ = *v207;
          if (&v202[-*(void *)v203] == (char *)4096)
          {
            v208 = (char *)*((void *)v203 + 1);
            v203 += 8;
            v202 = v208;
          }
          ++v207;
          ++v332.i64[1];
          --v206;
        }
        while (v206);
        unint64_t v205 = v201;
      }
      if (v205) {
        break;
      }
LABEL_346:
      long long v6 = v316;
      std::string::size_type v251 = HIBYTE(v316->__r_.__value_.__r.__words[2]);
      if ((v251 & 0x80u) == 0) {
        v252 = v316;
      }
      else {
        v252 = (std::string *)v316->__r_.__value_.__r.__words[0];
      }
      if ((v251 & 0x80u) != 0) {
        std::string::size_type v251 = v316->__r_.__value_.__l.__size_;
      }
      v253 = (std::string *)((char *)v252 + v251);
      BOOL v27 = v319;
      if (v319 == v253 || v318 == 0)
      {
LABEL_368:
        long long v26 = __dst;
LABEL_369:
        v259 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int64x2_t *)buf, v26, v319, v253);
        int v260 = SHIBYTE(v316->__r_.__value_.__r.__words[2]);
        if (v260 >= 0) {
          std::string::size_type v261 = HIBYTE(v316->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v261 = v316->__r_.__value_.__l.__size_;
        }
        if (v332.i64[1])
        {
          v262 = (char *)(*(void *)&buf[8] + 8 * ((unint64_t)v332.i64[0] >> 12));
          if ((void)v331 == *(void *)&buf[8])
          {
            v263 = 0;
            uint64_t v265 = 0;
            v264 = (char *)(*(void *)&buf[8] + 8 * ((unint64_t)(v332.i64[0] + v332.i64[1]) >> 12));
          }
          else
          {
            v263 = (std::string::value_type *)(*(void *)v262 + (v332.i16[0] & 0xFFF));
            v264 = (char *)(*(void *)&buf[8] + 8 * ((unint64_t)(v332.i64[0] + v332.i64[1]) >> 12));
            uint64_t v265 = *(void *)v264 + ((v332.i64[0] + v332.i64[1]) & 0xFFF);
          }
          if ((std::string::value_type *)v265 != v263)
          {
            std::string::size_type v267 = v265 + ((v264 - v262) << 9) - (void)&v263[*(void *)v264] + *(void *)v262;
            if (v267)
            {
              memset(v333, 0, 24);
              do
              {
                std::string::push_back((std::string *)v333, *v263++);
                if (&v263[-*(void *)v262] == (std::string::value_type *)4096)
                {
                  v268 = (std::string::value_type *)*((void *)v262 + 1);
                  v262 += 8;
                  v263 = v268;
                }
              }
              while (v263 != (std::string::value_type *)v265);
              uint64_t v269 = v333[23];
              if (v333[23] >= 0) {
                v270 = v333;
              }
              else {
                v270 = *(char **)v333;
              }
              if (v333[23] < 0) {
                uint64_t v269 = *(void *)&v333[8];
              }
              std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v316, v267, v261, v270, &v270[v269]);
              if ((v333[23] & 0x80000000) != 0) {
                operator delete(*(void **)v333);
              }
            }
          }
        }
        else
        {
          std::string::size_type v266 = v316->__r_.__value_.__r.__words[0];
          if (v260 >= 0) {
            std::string::size_type v266 = (std::string::size_type)v316;
          }
          std::string::erase(v316, (std::string::size_type)&v259[-v266], v266 + v261 - (void)v259);
        }
        std::deque<char>::~deque[abi:ne180100]((uint64_t)buf);
        char v8 = v314;
LABEL_393:
        v271 = (void *)v7[1];
        if (v271)
        {
          do
          {
            v272 = v271;
            v271 = (void *)*v271;
          }
          while (v271);
        }
        else
        {
          do
          {
            v272 = (void *)v7[2];
            BOOL v18 = *v272 == (void)v7;
            long long v7 = v272;
          }
          while (!v18);
        }
        long long v7 = v272;
        if (v272 == v8)
        {
LABEL_399:
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          a1 = v304;
          uint64_t v5 = v306;
          v273 = Diagnostics_GetLogObject(void)::__profile_log_default;
          uint64_t v2 = v302;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            v275 = v6;
            if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0) {
              v275 = (std::string *)v6->__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&buf[4] = v275;
            _os_log_impl(&dword_20CD80000, v273, OS_LOG_TYPE_DEFAULT, "Preprocessed text: %s", buf, 0xCu);
          }
          if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0) {
            long long v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
          }
          v301 = v6;
          v276 = "Preprocessed text: %s";
          goto LABEL_408;
        }
        goto LABEL_6;
      }
      unint64_t v16 = v319;
      unint64_t v14 = v321;
      while (1)
      {
        uint64_t v255 = 0;
        while (v16->__r_.__value_.__s.__data_[v255] == *((unsigned __int8 *)v10 + v255))
        {
          uint64_t v256 = v255 + 1;
          if ((std::string *)((char *)&v16->__r_.__value_.__l.__data_ + v255 + 1) != v253)
          {
            BOOL v18 = v20 == v255++;
            if (!v18) {
              continue;
            }
          }
          uint64_t v257 = (uint64_t)v10 + v256;
          v258 = (std::string *)((char *)v16 + v256);
          goto LABEL_363;
        }
        uint64_t v257 = (uint64_t)v10 + v255;
        v258 = (std::string *)((char *)v16 + v255);
LABEL_363:
        if (v257 == v317) {
          break;
        }
        unint64_t v16 = (std::string *)((char *)v16 + 1);
        if (v16 == v253) {
          goto LABEL_368;
        }
      }
      uint64_t v25 = v258;
      long long v26 = __dst;
      if (v16 == v258) {
        goto LABEL_369;
      }
    }
    uint64_t v209 = (uint64_t)&v200[-v205 - *(void *)v199];
    if (v209 < 1)
    {
      unint64_t v212 = 4095 - v209;
      v210 = &v199[-8 * (v212 >> 12)];
      v211 = (char *)(*(void *)v210 + (~(_WORD)v212 & 0xFFF));
    }
    else
    {
      v210 = &v199[8 * ((unint64_t)v209 >> 12)];
      v211 = (char *)(*(void *)v210 + (v209 & 0xFFF));
    }
    v213 = v210;
    for (k = v211; k != v200; ++v332.i64[1])
    {
      *v202++ = *k;
      if (&v202[-*(void *)v203] == (char *)4096)
      {
        v215 = (char *)*((void *)v203 + 1);
        v203 += 8;
        v202 = v215;
      }
      if (&(++k)[-*(void *)v213] == (char *)4096)
      {
        v216 = (char *)*((void *)v213 + 1);
        v213 += 8;
        k = v216;
      }
    }
    if (v205 < v201)
    {
      v217 = *(unsigned char **)v199;
      uint64_t v218 = (uint64_t)&v200[-v201 - *(void *)v199];
      if (v218 < 1)
      {
        unint64_t v221 = 4095 - v218;
        v219 = &v199[-8 * (v221 >> 12)];
        v220 = (char *)(*(void *)v219 + (~(_WORD)v221 & 0xFFF));
      }
      else
      {
        v219 = &v199[8 * ((unint64_t)v218 >> 12)];
        v220 = (char *)(*(void *)v219 + (v218 & 0xFFF));
      }
      if (v219 != v210)
      {
        v324 = v220;
        v222 = *(unsigned char **)v210;
        if (*(char **)v210 != v211)
        {
          v313 = v210;
          v223 = v219;
          while (1)
          {
            v224 = (char *)(v200 - v217);
            if (v211 - v222 >= (uint64_t)v224) {
              size_t v225 = (size_t)v224;
            }
            else {
              size_t v225 = v211 - v222;
            }
            v211 -= v225;
            v200 -= v225;
            if (v225) {
              memmove(v200, v211, v225);
            }
            if (v211 == v222) {
              break;
            }
            v226 = (unsigned char *)*((void *)v199 - 1);
            v199 -= 8;
            v217 = v226;
            v200 = v226 + 4096;
          }
          v217 = *(unsigned char **)v199;
          if ((char *)(*(void *)v199 + 4096) == v200)
          {
            v227 = (unsigned char *)*((void *)v199 + 1);
            v199 += 8;
            v217 = v227;
            v200 = v227;
          }
          v219 = v223;
          v210 = v313;
        }
        for (m = v210 - 8; m != v219; m -= 8)
        {
          v229 = v219;
          v230 = *(unsigned char **)m;
          v231 = (char *)(*(void *)m + 4096);
          while (1)
          {
            v232 = (char *)(v200 - v217);
            if (v231 - v230 >= (uint64_t)v232) {
              size_t v233 = (size_t)v232;
            }
            else {
              size_t v233 = v231 - v230;
            }
            v231 -= v233;
            v200 -= v233;
            if (v233) {
              memmove(v200, v231, v233);
            }
            if (v231 == v230) {
              break;
            }
            v234 = (unsigned char *)*((void *)v199 - 1);
            v199 -= 8;
            v217 = v234;
            v200 = v234 + 4096;
          }
          v217 = *(unsigned char **)v199;
          if ((char *)(*(void *)v199 + 4096) == v200)
          {
            v235 = (unsigned char *)*((void *)v199 + 1);
            v199 += 8;
            v217 = v235;
            v200 = v235;
          }
          unint64_t v13 = v325;
          v219 = v229;
        }
        v236 = (char *)(*(void *)v219 + 4096);
        if (v236 == v324) {
          goto LABEL_337;
        }
        uint64_t v237 = *(void *)v199;
        while (1)
        {
          v238 = &v200[-v237];
          if (v236 - v324 >= (uint64_t)v238) {
            size_t v239 = (size_t)v238;
          }
          else {
            size_t v239 = v236 - v324;
          }
          v236 -= v239;
          v200 -= v239;
          if (v239) {
            memmove(v200, v236, v239);
          }
          if (v236 == v324) {
            break;
          }
          uint64_t v240 = *((void *)v199 - 1);
          v199 -= 8;
          uint64_t v237 = v240;
          v200 = (char *)(v240 + 4096);
        }
        goto LABEL_335;
      }
      if (v220 != v211)
      {
        while (1)
        {
          v241 = (char *)(v200 - v217);
          if (v211 - v220 >= (uint64_t)v241) {
            size_t v242 = (size_t)v241;
          }
          else {
            size_t v242 = v211 - v220;
          }
          v211 -= v242;
          v200 -= v242;
          if (v242) {
            memmove(v200, v211, v242);
          }
          if (v211 == v220) {
            break;
          }
          v243 = (unsigned char *)*((void *)v199 - 1);
          v199 -= 8;
          v217 = v243;
          v200 = v243 + 4096;
        }
LABEL_335:
        if ((char *)(*(void *)v199 + 4096) == v200)
        {
          v244 = (char *)*((void *)v199 + 1);
          v199 += 8;
          v200 = v244;
        }
      }
    }
LABEL_337:
    if (v204 != v13)
    {
      uint64_t v247 = *(void *)v199;
      v246 = (uint64_t *)(v199 - 8);
      uint64_t v245 = v247;
      while (1)
      {
        v248 = &v200[-v245];
        if (v204 - v13 >= (uint64_t)v248) {
          size_t v249 = (size_t)v248;
        }
        else {
          size_t v249 = v204 - v13;
        }
        v204 -= v249;
        if (v249) {
          memmove(&v200[-v249], v204, v249);
        }
        if (v204 == v13) {
          break;
        }
        uint64_t v250 = *v246--;
        uint64_t v245 = v250;
        v200 = (char *)(v250 + 4096);
      }
    }
    goto LABEL_346;
  }
  v278 = (void (***)(uint8_t *__return_ptr))a1[37];
  if (v278)
  {
    (**v278)(buf);
    v279 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    if ((v279 & 0x80u) == 0) {
      v280 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    }
    else {
      v280 = v6->__r_.__value_.__l.__size_;
    }
    v281 = BYTE7(v331);
    if (SBYTE7(v331) < 0) {
      v281 = *(void *)&buf[8];
    }
    if (v280 == v281)
    {
      if ((SBYTE7(v331) & 0x80u) == 0) {
        v282 = buf;
      }
      else {
        v282 = *(uint8_t **)buf;
      }
      if ((v279 & 0x80) == 0)
      {
        if (*((unsigned char *)&v6->__r_.__value_.__s + 23))
        {
          v283 = v6;
          while (v283->__r_.__value_.__s.__data_[0] == *v282)
          {
            v283 = (std::string *)((char *)v283 + 1);
            ++v282;
            if (!--v279) {
              goto LABEL_471;
            }
          }
          goto LABEL_438;
        }
LABEL_471:
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        v298 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          v300 = v6;
          if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0) {
            v300 = (std::string *)v6->__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v333 = 136315138;
          *(void *)&v333[4] = v300;
          _os_log_impl(&dword_20CD80000, v298, OS_LOG_TYPE_DEFAULT, "Preprocessed text: %s", v333, 0xCu);
        }
        if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0) {
          long long v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(5, "Preprocessed text: %s", v299, v6);
        if (v332.i64[0]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v332.i64[0]);
        }
        if (SBYTE7(v331) < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_409;
      }
      if (!memcmp(v6->__r_.__value_.__l.__data_, v282, v6->__r_.__value_.__l.__size_)) {
        goto LABEL_471;
      }
    }
LABEL_438:
    v303 = v2;
    v305 = a1;
    v307 = v5;
    v285 = (unsigned int *)**((void **)&v331 + 1);
    v286 = *(unsigned int **)(*((void *)&v331 + 1) + 8);
    if (**((unsigned int ***)&v331 + 1) != v286)
    {
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        v287 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          v289 = *v285;
          *(_DWORD *)v333 = 67109120;
          *(_DWORD *)&v333[4] = v289;
          _os_log_impl(&dword_20CD80000, v287, OS_LOG_TYPE_DEFAULT, "#Preprocess - POS - %d", v333, 8u);
        }
        Diagnostics::log(5, "#Preprocess - POS - %d", v288, *v285);
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        v290 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          Censor::global_plaintext((std::string *)v333, (uint64_t)(v285 + 2));
          v291 = v333[23] >= 0 ? v333 : *(unsigned char **)v333;
          *(_DWORD *)v329 = 136315138;
          *(void *)&v329[4] = v291;
          _os_log_impl(&dword_20CD80000, v290, OS_LOG_TYPE_DEFAULT, "#Preprocess - Matched - %s", v329, 0xCu);
          if ((v333[23] & 0x80000000) != 0) {
            operator delete(*(void **)v333);
          }
        }
        Censor::global_plaintext((std::string *)v333, (uint64_t)(v285 + 2));
        if (v333[23] >= 0) {
          v293 = v333;
        }
        else {
          v293 = *(unsigned char **)v333;
        }
        Diagnostics::log(5, "#Preprocess - Matched - %s", v292, v293);
        if ((v333[23] & 0x80000000) != 0) {
          operator delete(*(void **)v333);
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        v294 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          Censor::global_plaintext((std::string *)v333, (uint64_t)(v285 + 8));
          v295 = v333[23] >= 0 ? v333 : *(unsigned char **)v333;
          *(_DWORD *)v329 = 136315138;
          *(void *)&v329[4] = v295;
          _os_log_impl(&dword_20CD80000, v294, OS_LOG_TYPE_DEFAULT, "#Preprocess - Replaced - %s", v329, 0xCu);
          if ((v333[23] & 0x80000000) != 0) {
            operator delete(*(void **)v333);
          }
        }
        Censor::global_plaintext((std::string *)v333, (uint64_t)(v285 + 8));
        if (v333[23] >= 0) {
          v297 = v333;
        }
        else {
          v297 = *(unsigned char **)v333;
        }
        Diagnostics::log(5, "#Preprocess - Replaced - %s", v296, v297);
        if ((v333[23] & 0x80000000) != 0) {
          operator delete(*(void **)v333);
        }
        v285 += 20;
      }
      while (v285 != v286);
    }
    uint64_t v5 = v307;
    std::string::operator=(v6, (const std::string *)buf);
    uint64_t v2 = v303;
    a1 = v305;
    goto LABEL_471;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  v284 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v284, OS_LOG_TYPE_DEFAULT, "Bypass Preprocess Module", buf, 2u);
  }
  v276 = "Bypass Preprocess Module";
LABEL_408:
  Diagnostics::log(5, v276, v274, v301);
LABEL_409:
  v277 = (std::__shared_weak_count *)v2[1];
  v327 = *v2;
  v328 = v277;
  if (v277) {
    atomic_fetch_add_explicit(&v277->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *))(*a1 + 72))(a1, &v327);
  if (v328) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v328);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D3797A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair(v14 - 192);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void sub_20D379860(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v3 = *(void ***)(v2 - 136);
    uint64_t v4 = *(void ***)(v2 - 128);
    while (v3 != v4)
    {
      uint64_t v5 = *v3++;
      operator delete(v5);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x20D379858);
}

void sub_20D379890()
{
  __cxa_end_catch();
  uint64_t v1 = *(void **)(v0 - 144);
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x20D379840);
}

void sub_20D3798A0(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v3 = *(void ***)(v2 - 136);
    uint64_t v4 = *(void ***)(v2 - 128);
    while (v3 != v4)
    {
      uint64_t v5 = *v3++;
      operator delete(v5);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x20D379858);
}

void sub_20D3798D0()
{
}

void sub_20D3798EC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (*(char *)(v2 - 121) < 0) {
      operator delete(*(void **)(v2 - 144));
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x20D379858);
}

void sub_20D379914()
{
}

void sub_20D379920(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x20D379858);
}

void TextPreprocessing::~TextPreprocessing(TextPreprocessing *this)
{
  *(void *)this = off_26C202070;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 35));
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C202070;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 35));
  Module::~Module(this);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void FastSpeech2EncoderBaseInference::get_outputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(v21, "graph_encoder_output_name");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v4 + 32))(&v23, v4, v21);
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_encoder_output_alignment_name");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v5 + 32))(&v19, v5, __p);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(v13, "graph_encoder_output_decoder_length_name");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v6 + 32))(&v15, v6, v13);
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  InferenceEngine::DataTensor::get_2d_array<int>(v19, &__dst);
  uint64_t v7 = *a2;
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(*a2 + 32));
  *(std::vector<int> *)(v7 + 32) = __dst;
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_dst);
  InferenceEngine::DataTensor::get_3d_array<float>(v23, &__dst);
  uint64_t v8 = *a2;
  std::vector<std::vector<std::vector<float>>>::__vdeallocate((void ***)(*a2 + 8));
  *(std::vector<int> *)(v8 + 8) = __dst;
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_dst);
  int v9 = (const void *)*((void *)v15 + 11);
  LODWORD(v8) = InferenceEngine::DataTensor::get_size(v15);
  std::vector<int>::vector(&__dst, (int)v8);
  memcpy(__dst.__begin_, v9, 4 * (int)v8);
  long long v10 = (void *)*a2;
  uint64_t v11 = (void *)v10[7];
  if (v11)
  {
    v10[8] = v11;
    operator delete(v11);
    v10[7] = 0;
    v10[8] = 0;
    v10[9] = 0;
  }
  *(std::vector<int> *)(v10 + 7) = __dst;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_20D379C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v28 - 48);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::vector<float>>>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        uint64_t v5 = v3;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void FastSpeech2EncoderBaseInference::prepare_inputs(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "graph_encoder_input_name");
  InferenceEngine::DataTensor::build_from_1d_array<int>(*(void *)a2 + 32, &v16);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "graph_encoder_input_length_name");
  std::vector<int>::value_type __x = (*(void *)(*(void *)a2 + 40) - *(void *)(*(void *)a2 + 32)) >> 2;
  std::vector<int>::vector(&v11, 1uLL, &__x);
  InferenceEngine::DataTensor::build_from_1d_array<int>((uint64_t)&v11, &v12);
  if (v11.__begin_)
  {
    v11.__end_ = v11.__begin_;
    operator delete(v11.__begin_);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t v4 = *(void (****)(void, uint64_t *))(a1 + 16);
  uint64_t v8 = v16;
  int v9 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v4)(v4, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v5 = *(void (****)(void, uint64_t *))(a1 + 16);
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v5)(v5, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_20D379F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::string::size_type v21 = *(std::__shared_weak_count **)(v19 - 24);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_20D379F88()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x20D379F80);
}

void FastSpeech2EncoderBaseInference::inference(void **a1, void *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEBUG, "Parallel AM inference encoder begin.", buf, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference encoder begin.", v7);
  uint64_t v8 = (char *)operator new(0x70uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = off_26C217898;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *((_WORD *)v8 + 12) = 257;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((void *)v8 + 12) = 0;
  *((void *)v8 + 13) = 0;
  uint64_t v10 = *a2;
  int v9 = (std::__shared_weak_count *)a2[1];
  *((_DWORD *)v8 + 7) = *(_DWORD *)(*a2 + 360);
  uint64_t v26 = v10;
  BOOL v27 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(void **, uint64_t *))(*a1)[2])(a1, &v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::vector<int> v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = (uint64_t)(*(void *)(*a2 + 40) - *(void *)(*a2 + 32)) >> 2;
    *(_DWORD *)buf = 134217984;
    double v29 = *(double *)&v13;
    _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_DEFAULT, "Parallel AM input length: %ld", buf, 0xCu);
  }
  Diagnostics::log(5, "Parallel AM input length: %ld", v12, (uint64_t)(*(void *)(*a2 + 40) - *(void *)(*a2 + 32)) >> 2);
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(void *))(*a1[2] + 48))(a1[2]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  char v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 134217984;
    double v29 = (double)((v16.__d_.__rep_ - v14.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_DEFAULT, "Parallel AM encoder inference time: %.3f s", buf, 0xCu);
  }
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM encoder inference time: %.3f s", v18, (double)((v17.__d_.__rep_ - v14.__d_.__rep_) / 1000000) / 1000.0);
  v24 = v8 + 24;
  uint64_t v25 = (std::__shared_weak_count *)v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  ((void (*)(void **, char **))(*a1)[3])(a1, &v24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  (*(void (**)(void *))(*a1[2] + 56))(a1[2]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v19, OS_LOG_TYPE_DEBUG, "Parallel AM inference encoder end.", buf, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference encoder end.", v20);
  char v22 = v8 + 24;
  uint64_t v23 = (std::__shared_weak_count *)v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  uint64_t v21 = *(void *)(a3 + 24);
  if (!v21) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, char **))(*(void *)v21 + 48))(v21, &v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_20D37A44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

uint64_t FastSpeech2EncoderBaseInference::FastSpeech2EncoderBaseInference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  *(void *)a1 = off_26C205018;
  *(void *)(a1 + 8) = -4294967056;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  if (a3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    uint64_t v3 = *(void *)(a1 + 16);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max_input_length");
  *(_DWORD *)(a1 + 8) = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v3 + 8), (const void **)__p, *(unsigned int *)(a1 + 8));
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_maximum_position_encoding");
  *(_DWORD *)(a1 + 12) = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v5 + 8), (const void **)__p, *(unsigned int *)(a1 + 12));
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_20D37A578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::chrono::steady_clock::time_point v17 = *(std::__shared_weak_count **)(v15 + 24);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void WaveformRateChangerImpl::change_rate(uint64_t a1@<X0>, const void **a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X4>, char **a6@<X8>)
{
  int v9 = a2;
  uint64_t v11 = (uint64_t)a6;
  uint64_t v197 = *MEMORY[0x263EF8340];
  if (*(float *)(a1 + 116) == 1.0 && !*(unsigned char *)(a1 + 112))
  {
    uint64_t v12 = *a2;
LABEL_27:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    uint64_t v26 = (uint64_t)v9[1];
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a6, v12, v26, (v26 - (uint64_t)v12) >> 2);
    return;
  }
  uint64_t v12 = *a2;
  if (!*(unsigned char *)(a1 + 113) || v9[1] == v12) {
    goto LABEL_27;
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  std::vector<float>::vector(&__dst, *(int *)(a1 + 136));
  if (!a3) {
    goto LABEL_23;
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v13)
  {
    float v14 = *(float *)(v13 + 4);
    BOOL v15 = (LODWORD(v14) & 0x7FFFFFFFu) - 1 < 0x7FFFFF;
    BOOL v16 = ((LODWORD(v14) & 0x7FFFFFFFu) - 0x800000) >> 24 < 0x7F;
    if (v14 >= 0.0)
    {
      BOOL v16 = 0;
      BOOL v15 = 0;
    }
    if ((LODWORD(v14) & 0x7FFFFFFF) == 0) {
      BOOL v15 = 1;
    }
    int v17 = (LODWORD(v14) & 0x7FFFFFFF) == 0x7F800000 || v15;
    if ((LODWORD(v14) & 0x7FFFFFFFu) > 0x7F800000) {
      int v17 = 1;
    }
    if (v17 | v16) {
      float v14 = 1.0;
    }
    if (v14 > 1.0 && v14 < 4.0)
    {
LABEL_23:
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v11, *(void *)(v11 + 8), *(char **)(a1 + 80), *(char **)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
      *a5 = (unint64_t)((double)(unint64_t)((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2)
                             * 1000.0
                             / (double)*(int *)(a1 + 128));
    }
  }
  int v19 = -(int)((*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
  uint64_t v186 = (void **)(a1 + 32);
  v187 = v9;
  int v20 = *(_DWORD *)(a1 + 136);
  int v21 = v20 - ((*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
  uint64_t v23 = (char *)*v9;
  char v22 = v9[1];
  unint64_t v24 = (unint64_t)(v22 - (unsigned char *)*v9) >> 2;
  if (v21 > (int)v24)
  {
    int v25 = *(_DWORD *)(a1 + 104);
    goto LABEL_132;
  }
  int v185 = a4;
  do
  {
    int v27 = v19;
    if ((v19 & 0x80000000) == 0)
    {
      if (!v20) {
        goto LABEL_46;
      }
      uint64_t v28 = &v23[4 * v19];
      size_t v29 = 4 * v21 - 4 * v19;
LABEL_44:
      unint64_t v35 = (char *)__dst;
      goto LABEL_45;
    }
    double v30 = fabs((double)v19);
    if (v30 >= (double)v20)
    {
      if (!v20) {
        goto LABEL_46;
      }
      uint64_t v28 = (char *)(*(void *)(a1 + 40) + 4 * v19);
      size_t v29 = 4 * v20;
      goto LABEL_44;
    }
    uint64_t v31 = *(void *)(a1 + 40);
    if ((int)v30 >= (int)((unint64_t)(v31 - *(void *)(a1 + 32)) >> 2)) {
      int v32 = (unint64_t)(v31 - *(void *)(a1 + 32)) >> 2;
    }
    else {
      int v32 = (int)v30;
    }
    uint64_t v33 = v32;
    if (v32) {
      memmove(__dst, (const void *)(v31 - 4 * v32), 4 * v32);
    }
    int v34 = v20 - v32;
    uint64_t v11 = (uint64_t)a6;
    if (v34 >= 1)
    {
      uint64_t v28 = (char *)*v9;
      size_t v29 = 4 * (v34 & ~(v34 >> 31));
      unint64_t v35 = (char *)__dst + 4 * v33;
LABEL_45:
      memmove(v35, v28, v29);
    }
LABEL_46:
    uint64_t v37 = *(void *)v11;
    uint64_t v36 = *(void *)(v11 + 8);
    unint64_t v38 = (unint64_t)(v36 - *(void *)v11) >> 2;
    int v39 = *(_DWORD *)(a1 + 136) / 4;
    uint64_t v40 = *(int *)(a1 + 152);
    if ((int)v40 >= 0) {
      int v41 = *(_DWORD *)(a1 + 152);
    }
    else {
      int v41 = v40 + 1;
    }
    if (v39 - (v41 >> 1) <= (int)v38 && (int)v40 <= (int)((unint64_t)(v190 - (unsigned char *)__dst) >> 3))
    {
      if ((int)v40 >= 0) {
        int v43 = *(_DWORD *)(a1 + 152);
      }
      else {
        int v43 = v40 + 1;
      }
      LODWORD(__A[0]) = 0;
      std::vector<float>::vector(buf, 2 * v40 - 1, __A);
      float __C = 0.0;
      vDSP_Length __I = 0;
      unint64_t v44 = 3 * *(int *)(a1 + 152) - 2;
      LODWORD(__F) = 0;
      std::vector<float>::vector(__A, v44, &__F);
      unint64_t v45 = *(int *)(a1 + 152);
      if (v45)
      {
        unint64_t v46 = &__A[0][v45];
        uint64_t v47 = 4 * v45;
        uint64_t v48 = *(void *)v11 + 4 * ((int)v38 - ((v43 >> 1) + v39)) - 4;
        do
        {
          *v46++ = *(float *)(v48 + v47);
          v47 -= 4;
        }
        while (v47);
      }
      std::vector<float>::vector(&__F, v45);
      uint64_t v49 = *(int *)(a1 + 152);
      unint64_t v50 = __F;
      if (v49)
      {
        uint64_t v51 = (char *)__dst + 4 * (v39 - (v43 >> 1));
        uint64_t v52 = 4 * v49;
        uint64_t v53 = __F;
        do
        {
          *v53++ = *(float *)&v51[v52 - 4];
          v52 -= 4;
        }
        while (v52);
      }
      vDSP_conv(__A[0], 1, v50, 1, *(float **)buf, 1, (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2, v192 - v50);
      vDSP_maxvi(*(const float **)buf, 1, &__C, &__I, (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2);
      if (__C == 0.0)
      {
        float v54 = fabsf(**(float **)buf);
        if ((int)((*(void *)&buf[8] - *(void *)buf) >> 2) >= 2)
        {
          uint64_t v55 = ((*(void *)&buf[8] - *(void *)buf) >> 2) - 1;
          unint64_t v56 = (float *)(*(void *)buf + 4);
          do
          {
            float v57 = *v56++;
            float v54 = v54 + fabsf(v57);
            --v55;
          }
          while (v55);
        }
        int v58 = *(_DWORD *)(a1 + 152);
        if (v54 == 0.0) {
          vDSP_Length __I = v58;
        }
      }
      else
      {
        int v58 = *(_DWORD *)(a1 + 152);
      }
      int v59 = __I;
      if (__F)
      {
        uint64_t v192 = __F;
        operator delete(__F);
      }
      if (__A[0])
      {
        __A[1] = __A[0];
        operator delete(__A[0]);
      }
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      int v42 = v59 - v58;
      uint64_t v37 = *(void *)v11;
      uint64_t v36 = *(void *)(v11 + 8);
    }
    else
    {
      int v42 = 0;
    }
    if (v37 == v36)
    {
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)v11, (char *)__dst + 4 * (*(_DWORD *)(a1 + 136) / 2), (uint64_t)v190, (v190 - ((unsigned char *)__dst + 4 * (*(_DWORD *)(a1 + 136) / 2))) >> 2);
    }
    else
    {
      unint64_t v60 = (unint64_t)(v36 - v37) >> 2;
      int v61 = *(_DWORD *)(a1 + 136);
      int v62 = v61 / 4;
      uint64_t v63 = *(unsigned int *)(a1 + 152);
      if ((int)v63 >= 0) {
        int v64 = *(_DWORD *)(a1 + 152);
      }
      else {
        int v64 = v63 + 1;
      }
      int v65 = v60 - (v62 + (v64 >> 1));
      int v66 = v62 - (v64 >> 1) + v42;
      if ((int)v63 >= 1)
      {
        uint64_t v67 = 0;
        BOOL v68 = (char *)__dst;
        uint64_t v69 = (v66 + v27);
        uint64_t v70 = (char *)*v9;
        uint64_t v71 = v37 + 4 * v65;
        do
        {
          if (v66 + v67 < 0)
          {
            if ((int)v69 + v67 < 0)
            {
              uint64_t v73 = *(void *)(a1 + 32);
              unint64_t v74 = *(void *)(a1 + 40) - v73;
              unint64_t v75 = v69 + v67 + (v74 >> 2);
              if ((v75 & 0x80000000) != 0)
              {
                uint64_t v76 = *(void *)(a1 + 56);
                unsigned int v77 = v69 + v67 + (v74 >> 2) + ((unint64_t)(*(void *)(a1 + 64) - v76) >> 2);
                if ((v77 & 0x80000000) != 0)
                {
                  float v78 = 0.0;
                  goto LABEL_90;
                }
                int64_t v72 = (float *)(v76 + 4 * v77);
              }
              else
              {
                int64_t v72 = (float *)(v73 + 4 * v75);
              }
            }
            else
            {
              int64_t v72 = (float *)&v70[4 * (v69 + v67)];
            }
          }
          else
          {
            int64_t v72 = (float *)&v68[4 * (v66 + v67)];
          }
          float v78 = *v72;
LABEL_90:
          *(float *)(v71 + 4 * v67) = (float)((float)((float)(int)v67 / (float)(v63 - 1)) * v78)
                                    + (float)((float)(1.0 - (float)((float)(int)v67 / (float)(v63 - 1)))
                                            * *(float *)(v71 + 4 * v67));
          ++v67;
        }
        while (v63 != v67);
      }
      int v79 = v65 + v63;
      int v80 = v66 + v63;
      int v81 = v61 - (v66 + v63);
      std::vector<float>::resize((uint64_t)a6, v61 - v66 + v65);
      if (v61 != v80) {
        memmove(&(*a6)[4 * v79], (char *)__dst + 4 * v80, 4 * v81);
      }
    }
    uint64_t v83 = *(void *)(a1 + 8);
    uint64_t v82 = *(void *)(a1 + 16);
    if ((int)((unint64_t)(v82 - v83) >> 3) < 1)
    {
      float v86 = *(float *)(a1 + 120);
      uint64_t v11 = (uint64_t)a6;
    }
    else
    {
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      uint64_t v11 = (uint64_t)a6;
      do
      {
        if (*(_DWORD *)(v83 + v84) <= v27 + *(_DWORD *)(a1 + 136) / 2)
        {
          float v86 = *(float *)(v83 + v84 + 4);
          BOOL v87 = (LODWORD(v86) & 0x7FFFFFFFu) - 1 < 0x7FFFFF;
          BOOL v88 = ((LODWORD(v86) & 0x7FFFFFFFu) - 0x800000) >> 24 < 0x7F;
          if (v86 >= 0.0)
          {
            BOOL v88 = 0;
            BOOL v87 = 0;
          }
          if ((LODWORD(v86) & 0x7FFFFFFF) == 0) {
            BOOL v87 = 1;
          }
          int v89 = (LODWORD(v86) & 0x7FFFFFFF) == 0x7F800000 || v87;
          if ((LODWORD(v86) & 0x7FFFFFFFu) > 0x7F800000) {
            int v89 = 1;
          }
          if (v89 | v88) {
            float v86 = 1.0;
          }
          *(float *)(a1 + 120) = v86;
        }
        else
        {
          float v86 = *(float *)(a1 + 120);
        }
        if (*(float *)(a1 + 124) != v86)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v90 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            double v92 = *(float *)(a1 + 120);
            double v93 = *(float *)(a1 + 116);
            *(_DWORD *)buf = 134218240;
            *(double *)&uint8_t buf[4] = v92;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v93;
            _os_log_impl(&dword_20CD80000, v90, OS_LOG_TYPE_DEBUG, "WaveformRateChangeModule: Modify waveform with WSOLA: local rate = %.2f, global rate: %.2f", buf, 0x16u);
          }
          Diagnostics::log(7, "WaveformRateChangeModule: Modify waveform with WSOLA: local rate = %.2f, global rate: %.2f", v91, *(float *)(a1 + 120), *(float *)(a1 + 116));
          float v86 = *(float *)(a1 + 120);
          uint64_t v83 = *(void *)(a1 + 8);
          uint64_t v82 = *(void *)(a1 + 16);
        }
        *(float *)(a1 + 124) = v86;
        ++v85;
        v84 += 8;
      }
      while (v85 < (int)((unint64_t)(v82 - v83) >> 3));
    }
    int v25 = *(_DWORD *)(a1 + 104);
    int v20 = *(_DWORD *)(a1 + 136);
    float v94 = *(float *)(a1 + 116);
    float v95 = (float)((float)*(int *)(a1 + 108)
                + (float)(unint64_t)((uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 2))
        - (float)((float)(v25 + v27 + v20) / (float)(v94 * v86));
    float v96 = v94 * (float)*(int *)(a1 + 144);
    float v97 = *(float *)(a1 + 156);
    float v98 = v97 * (float)(v86 * v96);
    if (v95 >= v98) {
      float v99 = v97 * (float)(v86 * v96);
    }
    else {
      float v99 = v95;
    }
    if (v98 <= (float)-v95) {
      float v100 = -v98;
    }
    else {
      float v100 = v95;
    }
    if (v95 <= 0.0) {
      float v101 = v100;
    }
    else {
      float v101 = v99;
    }
    int v19 = v27 + (int)(float)(v101 + (float)(v96 * v86));
    int v21 = v20 + v19;
    uint64_t v23 = (char *)*v9;
    char v22 = v9[1];
    unint64_t v24 = (unint64_t)(v22 - (unsigned char *)*v9) >> 2;
  }
  while (v20 + v19 <= (int)v24);
  int v19 = v27;
  a4 = v185;
LABEL_132:
  int v102 = v20 + v19;
  int v103 = v25 + v20 + v19;
  *(_DWORD *)(a1 + 104) = v103;
  if ((a3 & 1) == 0)
  {
    v103 += (*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
    *(_DWORD *)(a1 + 104) = v103;
  }
  long long v104 = a6[1];
  int v105 = *(_DWORD *)(a1 + 108) + ((unint64_t)(v104 - *a6) >> 2);
  *(_DWORD *)(a1 + 108) = v105;
  if (!a4)
  {
    unint64_t v124 = *(char **)(a1 + 32);
    *(void *)(a1 + 40) = v124;
    uint64_t v125 = v102 & ~(v102 >> 31);
    uint64_t v126 = *v9;
    if ((int)v125 < (int)((unint64_t)((unsigned char *)v9[1] - (unsigned char *)*v9) >> 2))
    {
      char v127 = (void *)(a1 + 48);
      do
      {
        if ((unint64_t)v124 >= *v127)
        {
          v129 = (char *)*v186;
          uint64_t v130 = (v124 - (unsigned char *)*v186) >> 2;
          unint64_t v131 = v130 + 1;
          if ((unint64_t)(v130 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v132 = *v127 - (void)v129;
          if (v132 >> 1 > v131) {
            unint64_t v131 = v132 >> 1;
          }
          if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v133 = v131;
          }
          if (v133)
          {
            uint64_t v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 48, v133);
            v129 = *(char **)(a1 + 32);
            unint64_t v124 = *(char **)(a1 + 40);
          }
          else
          {
            uint64_t v134 = 0;
          }
          char v135 = &v134[4 * v130];
          *(_DWORD *)char v135 = v126[v125];
          std::string::size_type v128 = v135 + 4;
          while (v124 != v129)
          {
            int v136 = *((_DWORD *)v124 - 1);
            v124 -= 4;
            *((_DWORD *)v135 - 1) = v136;
            v135 -= 4;
          }
          *(void *)(a1 + 32) = v135;
          *(void *)(a1 + 40) = v128;
          *(void *)(a1 + 48) = &v134[4 * v133];
          if (v129) {
            operator delete(v129);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v124 = v126[v125];
          std::string::size_type v128 = v124 + 4;
        }
        *(void *)(a1 + 40) = v128;
        ++v125;
        uint64_t v126 = *v9;
        unint64_t v124 = v128;
      }
      while ((int)v125 < (int)((unint64_t)((unsigned char *)v9[1] - (unsigned char *)*v9) >> 2));
      int v20 = *(_DWORD *)(a1 + 136);
      int v102 = v20 + v19;
    }
    unint64_t v138 = (void **)(a1 + 56);
    long long v137 = *(char **)(a1 + 56);
    *(void *)(a1 + 64) = v137;
    unsigned int v139 = v102 - *(_DWORD *)(a1 + 152);
    if ((int)v139 >= v102)
    {
LABEL_233:
      size_t v158 = (void **)(a1 + 80);
      uint64_t v157 = *(char **)(a1 + 80);
      *(void *)(a1 + 88) = v157;
      if (v20 > 1)
      {
        int v159 = 0;
        uint64_t v160 = (void *)(a1 + 96);
        uint64_t v161 = (uint64_t)a6[1];
        do
        {
          if ((char *)v161 != *a6)
          {
            if ((unint64_t)v157 >= *v160)
            {
              uint64_t v163 = (char *)*v158;
              uint64_t v164 = (v157 - (unsigned char *)*v158) >> 2;
              unint64_t v165 = v164 + 1;
              if ((unint64_t)(v164 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v166 = *v160 - (void)v163;
              if (v166 >> 1 > v165) {
                unint64_t v165 = v166 >> 1;
              }
              if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v167 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v167 = v165;
              }
              if (v167)
              {
                v168 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 96, v167);
                uint64_t v163 = *(char **)(a1 + 80);
                uint64_t v157 = *(char **)(a1 + 88);
              }
              else
              {
                v168 = 0;
              }
              unint64_t v169 = &v168[4 * v164];
              *(_DWORD *)unint64_t v169 = *(_DWORD *)(v161 - 4);
              v162 = v169 + 4;
              while (v157 != v163)
              {
                int v170 = *((_DWORD *)v157 - 1);
                v157 -= 4;
                *((_DWORD *)v169 - 1) = v170;
                v169 -= 4;
              }
              *(void *)(a1 + 80) = v169;
              *(void *)(a1 + 88) = v162;
              *(void *)(a1 + 96) = &v168[4 * v167];
              if (v163) {
                operator delete(v163);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v157 = *(_DWORD *)(v161 - 4);
              v162 = v157 + 4;
            }
            *(void *)(a1 + 88) = v162;
            uint64_t v161 = (uint64_t)(a6[1] - 4);
            a6[1] = (char *)v161;
            --*(_DWORD *)(a1 + 108);
            int v20 = *(_DWORD *)(a1 + 136);
            uint64_t v157 = v162;
          }
          ++v159;
          if (v20 >= 0) {
            int v171 = v20;
          }
          else {
            int v171 = v20 + 1;
          }
        }
        while (v159 < v171 >> 1);
        uint64_t v172 = (char *)*v158;
        uint64_t v173 = v157 - 4;
        if (*v158 != v157 && v173 > v172)
        {
          unint64_t v175 = (unint64_t)(v172 + 4);
          do
          {
            int v176 = *(_DWORD *)(v175 - 4);
            *(_DWORD *)(v175 - 4) = *(_DWORD *)v173;
            *(_DWORD *)uint64_t v173 = v176;
            v173 -= 4;
            BOOL v177 = v175 >= (unint64_t)v173;
            v175 += 4;
          }
          while (!v177);
        }
      }
      uint64_t v178 = *(void *)(a1 + 8);
      unint64_t v179 = (unint64_t)(*(void *)(a1 + 16) - v178) >> 3;
      if ((int)v179 < 1)
      {
        float v180 = *(float *)(a1 + 120);
      }
      else
      {
        float v180 = *(float *)(v178 + 8 * (v179 - 1) + 4);
        *(float *)(a1 + 120) = v180;
      }
      if (*(float *)(a1 + 124) != v180)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        v181 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          double v183 = *(float *)(a1 + 120);
          double v184 = *(float *)(a1 + 116);
          *(_DWORD *)buf = 134218240;
          *(double *)&uint8_t buf[4] = v183;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v184;
          _os_log_impl(&dword_20CD80000, v181, OS_LOG_TYPE_DEBUG, "WaveformRateChangeModule: Modify waveform with WSOLA: local rate = %.2f, global rate: %.2f", buf, 0x16u);
        }
        Diagnostics::log(7, "WaveformRateChangeModule: Modify waveform with WSOLA: local rate = %.2f, global rate: %.2f", v182, *(float *)(a1 + 120), *(float *)(a1 + 116));
        float v180 = *(float *)(a1 + 120);
      }
      *(float *)(a1 + 124) = v180;
      goto LABEL_275;
    }
    unint64_t v140 = (unint64_t *)(a1 + 72);
    while (1)
    {
      if ((v139 & 0x80000000) != 0)
      {
        unint64_t v142 = *v140;
      }
      else
      {
        unint64_t v141 = *v9;
        unint64_t v142 = *v140;
        if (v139 < (unint64_t)(((unsigned char *)v9[1] - (unsigned char *)*v9) >> 2))
        {
          if ((unint64_t)v137 >= v142)
          {
            v145 = (char *)*v138;
            uint64_t v151 = (v137 - (unsigned char *)*v138) >> 2;
            unint64_t v152 = v151 + 1;
            if ((unint64_t)(v151 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v153 = v142 - (void)v145;
            if (v153 >> 1 > v152) {
              unint64_t v152 = v153 >> 1;
            }
            if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v149 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v149 = v152;
            }
            if (v149)
            {
              uint64_t v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v149);
              v145 = *(char **)(a1 + 56);
              long long v137 = *(char **)(a1 + 64);
            }
            else
            {
              uint64_t v150 = 0;
            }
            unint64_t v154 = &v150[4 * v151];
            *(_DWORD *)unint64_t v154 = v141[v139];
            uint64_t v144 = v154 + 4;
            if (v137 == v145)
            {
              int v9 = v187;
            }
            else
            {
              int v9 = v187;
              do
              {
                int v156 = *((_DWORD *)v137 - 1);
                v137 -= 4;
                *((_DWORD *)v154 - 1) = v156;
                v154 -= 4;
              }
              while (v137 != v145);
            }
LABEL_230:
            *(void *)(a1 + 56) = v154;
            *(void *)(a1 + 64) = v144;
            *(void *)(a1 + 72) = &v150[4 * v149];
            if (v145) {
              operator delete(v145);
            }
            goto LABEL_232;
          }
          *(_DWORD *)long long v137 = v141[v139];
          uint64_t v143 = v137 + 4;
          goto LABEL_203;
        }
      }
      if ((unint64_t)v137 >= v142)
      {
        v145 = (char *)*v138;
        uint64_t v146 = (v137 - (unsigned char *)*v138) >> 2;
        unint64_t v147 = v146 + 1;
        if ((unint64_t)(v146 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v148 = v142 - (void)v145;
        if (v148 >> 1 > v147) {
          unint64_t v147 = v148 >> 1;
        }
        if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v149 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v149 = v147;
        }
        if (v149)
        {
          uint64_t v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v149);
          v145 = *(char **)(a1 + 56);
          long long v137 = *(char **)(a1 + 64);
        }
        else
        {
          uint64_t v150 = 0;
        }
        unint64_t v154 = &v150[4 * v146];
        *(_DWORD *)unint64_t v154 = 0;
        uint64_t v144 = v154 + 4;
        while (v137 != v145)
        {
          int v155 = *((_DWORD *)v137 - 1);
          v137 -= 4;
          *((_DWORD *)v154 - 1) = v155;
          v154 -= 4;
        }
        goto LABEL_230;
      }
      *(_DWORD *)long long v137 = 0;
      uint64_t v143 = v137 + 4;
LABEL_203:
      uint64_t v144 = v143;
LABEL_232:
      *(void *)(a1 + 64) = v144;
      ++v139;
      int v20 = *(_DWORD *)(a1 + 136);
      long long v137 = v144;
      if ((int)v139 >= v20 + v19) {
        goto LABEL_233;
      }
    }
  }
  int v106 = v103 + ((v24 - v102) & ~(((int)v24 - v102) >> 31));
  *(_DWORD *)(a1 + 104) = v106;
  uint64_t v107 = *v9;
  if (v102 < (int)((unint64_t)(v22 - (unsigned char *)*v9) >> 2))
  {
    int v108 = (int)(float)((float)v106 / (float)(*(float *)(a1 + 116) * *(float *)(a1 + 120)));
    int v109 = a6 + 2;
    while (v105 >= v108)
    {
LABEL_172:
      if (++v102 >= (int)((unint64_t)(v22 - v107) >> 2)) {
        goto LABEL_275;
      }
    }
    if (v102 < 0)
    {
      uint64_t v107 = *(unsigned char **)(a1 + 32);
      uint64_t v110 = (int)(v102 + ((*(void *)(a1 + 40) - (void)v107) >> 2));
      if ((unint64_t)v104 >= *v109)
      {
        long long v111 = *a6;
        uint64_t v118 = (v104 - *a6) >> 2;
        unint64_t v119 = v118 + 1;
        if ((unint64_t)(v118 + 1) >> 62) {
LABEL_281:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v120 = *v109 - (void)v111;
        if (v120 >> 1 > v119) {
          unint64_t v119 = v120 >> 1;
        }
        if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v119;
        }
        if (v115)
        {
          uint64_t v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v109, v115);
          long long v111 = *a6;
          long long v104 = a6[1];
        }
        else
        {
          uint64_t v116 = 0;
        }
        long long v121 = &v116[4 * v118];
        *(_DWORD *)long long v121 = *(_DWORD *)&v107[4 * v110];
        uint64_t v117 = v121 + 4;
        if (v104 != v111)
        {
          int v9 = v187;
          do
          {
            int v123 = *((_DWORD *)v104 - 1);
            v104 -= 4;
            *((_DWORD *)v121 - 1) = v123;
            v121 -= 4;
          }
          while (v104 != v111);
          goto LABEL_169;
        }
        goto LABEL_168;
      }
    }
    else
    {
      uint64_t v110 = v102;
      if ((unint64_t)v104 >= *v109)
      {
        long long v111 = *a6;
        uint64_t v112 = (v104 - *a6) >> 2;
        unint64_t v113 = v112 + 1;
        if ((unint64_t)(v112 + 1) >> 62) {
          goto LABEL_281;
        }
        uint64_t v114 = *v109 - (void)v111;
        if (v114 >> 1 > v113) {
          unint64_t v113 = v114 >> 1;
        }
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v113;
        }
        if (v115)
        {
          uint64_t v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v109, v115);
          long long v111 = *a6;
          long long v104 = a6[1];
        }
        else
        {
          uint64_t v116 = 0;
        }
        long long v121 = &v116[4 * v112];
        *(_DWORD *)long long v121 = *(_DWORD *)&v107[4 * v102];
        uint64_t v117 = v121 + 4;
        if (v104 != v111)
        {
          int v9 = v187;
          do
          {
            int v122 = *((_DWORD *)v104 - 1);
            v104 -= 4;
            *((_DWORD *)v121 - 1) = v122;
            v121 -= 4;
          }
          while (v104 != v111);
          goto LABEL_169;
        }
LABEL_168:
        int v9 = v187;
LABEL_169:
        *a6 = v121;
        a6[1] = v117;
        a6[2] = &v116[4 * v115];
        if (v111) {
          operator delete(v111);
        }
LABEL_171:
        a6[1] = v117;
        int v105 = *(_DWORD *)(a1 + 108) + 1;
        *(_DWORD *)(a1 + 108) = v105;
        uint64_t v107 = *v9;
        char v22 = v9[1];
        long long v104 = v117;
        goto LABEL_172;
      }
    }
    *(_DWORD *)long long v104 = *(_DWORD *)&v107[4 * v110];
    uint64_t v117 = v104 + 4;
    goto LABEL_171;
  }
LABEL_275:
  if (__dst)
  {
    unint64_t v190 = __dst;
    operator delete(__dst);
  }
}

void sub_20D37B594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v26 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void WaveformRateChangerImpl::reset(WaveformRateChangerImpl *this)
{
  int v2 = *((_DWORD *)this + 34);
  int v5 = 0;
  std::vector<float>::resize((uint64_t)this + 32, (uint64_t)(v2 + (v2 < 0)) >> 1, &v5);
  *((void *)this + 8) = *((void *)this + 7);
  int v3 = *((_DWORD *)this + 34);
  int v4 = 0;
  std::vector<float>::resize((uint64_t)this + 80, (uint64_t)(v3 + (v3 < 0)) >> 1, &v4);
  *((unsigned char *)this + 112) = 0;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 30) = 1065353216;
}

char *WaveformRateChangerImpl::set_markers(char *result, const void **a2)
{
  int v2 = result;
  int v3 = result + 8;
  if (result + 8 == (char *)a2)
  {
    uint64_t v13 = (char *)*((void *)result + 2);
    goto LABEL_22;
  }
  int v4 = (char *)*a2;
  int v5 = (char *)a2[1];
  int64_t v6 = v5 - (unsigned char *)*a2;
  unint64_t v7 = v6 >> 3;
  uint64_t v8 = *((void *)result + 3);
  int v9 = (char *)*((void *)result + 1);
  if (v6 >> 3 <= (unint64_t)((v8 - (uint64_t)v9) >> 3))
  {
    uint64_t v12 = (void **)(result + 16);
    float v14 = (unsigned char *)*((void *)result + 2);
    unint64_t v15 = (v14 - v9) >> 3;
    if (v15 < v7)
    {
      BOOL v16 = &v4[8 * v15];
      if (v14 != v9)
      {
        uint64_t result = (char *)memmove(*((void **)result + 1), *a2, v14 - v9);
        int v9 = (char *)*v12;
      }
      int64_t v6 = v5 - v16;
      if (v5 == v16) {
        goto LABEL_21;
      }
      int v17 = v9;
      char v18 = v16;
      goto LABEL_20;
    }
  }
  else
  {
    if (v9)
    {
      *((void *)result + 2) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v3 = 0;
      v3[1] = 0;
      void v3[2] = 0;
    }
    if (v6 < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= v7) {
      uint64_t v10 = v6 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<RateMarker>::__vallocate[abi:ne180100](v3, v11);
    uint64_t v12 = (void **)(v2 + 16);
    int v9 = (char *)*((void *)v2 + 2);
  }
  if (v5 != v4)
  {
    int v17 = v9;
    char v18 = v4;
LABEL_20:
    uint64_t result = (char *)memmove(v17, v18, v6);
  }
LABEL_21:
  uint64_t v13 = &v9[v6];
  *uint64_t v12 = &v9[v6];
LABEL_22:
  if ((int)((unint64_t)&v13[-*v3] >> 3) >= 1) {
    v2[112] = 1;
  }
  return result;
}

void WaveformRateChangerImpl::~WaveformRateChangerImpl(WaveformRateChangerImpl *this)
{
  *(void *)this = off_26C203AC8;
  int v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
  JUMPOUT(0x2105595E0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(void *)this = off_26C203AC8;
  int v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
}

void WaveformRateChangeModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(void *)(*(void *)v4 + 8);
  int v5 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(unsigned char *)v6)
  {
    *(void *)(v6 + 104) = 0;
    (*(void (**)(void))(**(void **)(a1 + 272) + 24))(*(void *)(a1 + 272));
  }
  uint64_t v7 = *a2;
  uint64_t v8 = *(void **)(*a2 + 8);
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v31 = 0;
    std::vector<RateMarker>::__init_with_size[abi:ne180100]<RateMarker*,RateMarker*>(__p, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3);
    (*(void (**)(void, void **))(**(void **)(a1 + 272) + 16))(*(void *)(a1 + 272), __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_44;
  }
  {
    uint64_t v12 = *(void **)(*(void *)v10 + 8);
    unint64_t v11 = *(std::__shared_weak_count **)(*(void *)v10 + 16);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v28, *(void *)(a1 + 168));
    if (v28)
    {
      uint64_t v13 = (void *)*v12;
      if (*(_DWORD *)(v28 + 60) == 3 && 0x84BDA12F684BDA13 * ((uint64_t)(v12[1] - (void)v13) >> 3) >= 2)
      {
        float v14 = (_DWORD *)v13[36];
        unint64_t v15 = (_DWORD *)v13[37];
        if (v14 != v15)
        {
          float v16 = 1.0;
          do
          {
            if (*v14 == 1)
            {
              float v16 = 1.0;
            }
            else if (*v14 == 5)
            {
              float v16 = (float)(int)v14[1] / 100.0;
            }
            v14 += 14;
          }
          while (v14 != v15);
LABEL_36:
          if (v16 > 0.0 && v16 != 1.0)
          {
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v31 = 0;
            int v21 = (float *)operator new(8uLL);
            float *v21 = 0.0;
            v21[1] = v16;
            __p[0] = v21;
            uint64_t v31 = v21 + 2;
            char v22 = *(uint64_t **)(a1 + 272);
            uint64_t v23 = *v22;
            __p[1] = v31;
            (*(void (**)(uint64_t *, void **))(v23 + 16))(v22, __p);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          goto LABEL_40;
        }
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v13 = (void *)*v12;
    }
    if ((void *)v12[1] != v13)
    {
      int v19 = (_DWORD *)v13[9];
      int v20 = (_DWORD *)v13[10];
      if (v19 != v20)
      {
        float v16 = 1.0;
        do
        {
          if (*v19 == 1)
          {
            float v16 = 1.0;
          }
          else if (*v19 == 5)
          {
            float v16 = (float)(int)v19[1] / 100.0;
          }
          v19 += 14;
        }
        while (v19 != v20);
        goto LABEL_36;
      }
    }
LABEL_40:
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    goto LABEL_44;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_DEBUG, "No local rate change markers detected.", (uint8_t *)__p, 2u);
  }
  Diagnostics::log(7, "No local rate change markers detected.", v18);
LABEL_44:
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 272) + 32))(__p);
  unint64_t v24 = *(void **)(v6 + 56);
  if (v24)
  {
    *(void *)(v6 + 64) = v24;
    operator delete(v24);
    *(void *)(v6 + 56) = 0;
    *(void *)(v6 + 64) = 0;
    *(void *)(v6 + 72) = 0;
  }
  *(_OWORD *)(v6 + 56) = *(_OWORD *)__p;
  *(void *)(v6 + 72) = v31;
  int v25 = (std::__shared_weak_count *)a2[1];
  uint64_t v26 = *a2;
  int v27 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D37BD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void WaveformRateChangeModule::~WaveformRateChangeModule(WaveformRateChangeModule *this)
{
  *(void *)this = off_26C203EA8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C203EA8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
}

uint64_t WaveformRateChanger::create_rate_changer(WaveformRateChanger *this, char a2, float a3, int a4, float a5, float a6, float a7)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t result = (uint64_t)operator new(0xB8uLL);
  unint64_t v15 = (_DWORD *)result;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_26C217748;
  uint64_t v16 = result + 24;
  *(void *)(result + 24) = off_26C203AC8;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(unsigned char *)(result + 137) = a2;
  *(float *)(result + 140) = a3;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(result + 144) = _D0;
  int v22 = (int)a5;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 0;
  *(_DWORD *)(result + 152) = a4;
  *(_DWORD *)(result + 156) = (int)a5;
  int v23 = (int)(float)((float)(int)a5 * 0.5);
  int v24 = (int)a6;
  *(_DWORD *)(result + 164) = v23;
  *(_DWORD *)(result + 172) = (int)a6;
  *(float *)(result + 180) = a7;
  if ((int)a5 >= 0) {
    int v25 = (int)a5;
  }
  else {
    int v25 = v22 + 1;
  }
  if (v24 > v25 >> 1)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v26 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      int v28 = v15[43];
      int v29 = v15[41];
      *(_DWORD *)buf = 67109376;
      int v35 = v28;
      __int16 v36 = 1024;
      int v37 = v29;
      _os_log_impl(&dword_20CD80000, v26, OS_LOG_TYPE_DEBUG, "Correlation frame size (%d ms) must be smaller than half frame size (%d ms).", buf, 0xEu);
    }
    Diagnostics::log(7, "Correlation frame size (%d ms) must be smaller than half frame size (%d ms).", v27, v15[43], v15[41]);
    v15[43] = (int)((double)(int)v15[39] * 0.9 * 0.5);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    double v30 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      int v32 = v15[43];
      *(_DWORD *)buf = 67109120;
      int v35 = v32;
      _os_log_impl(&dword_20CD80000, v30, OS_LOG_TYPE_DEBUG, "Set correlation frame size to %d ms.", buf, 8u);
    }
    uint64_t result = Diagnostics::log(7, "Set correlation frame size to %d ms.", v31, v15[43]);
    a4 = v15[38];
    int v22 = v15[39];
    int v23 = v15[41];
    int v24 = v15[43];
  }
  v15[40] = a4 * v22 / 1000;
  v15[42] = v23 * a4 / 1000;
  v15[44] = v24 * a4 / 1000;
  *(void *)&long long v33 = v16;
  *((void *)&v33 + 1) = v15;
  *(_OWORD *)this = v33;
  return result;
}

uint64_t std::__shared_ptr_emplace<WaveformRateChangerImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<WaveformRateChangerImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<WaveformRateChangerImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void SilenceTrimmingStream::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(v4 + 8);
  int v5 = *(unsigned __int16 **)(v4 + 16);
  if ((unsigned __int16 *)v6 == v5)
  {
    BOOL v13 = 0;
LABEL_31:
    char v22 = 1;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 8);
    do
    {
      uint64_t v8 = *(_DWORD **)(v7 + 160);
      uint64_t v9 = *(_DWORD **)(v7 + 168);
      while (v8 != v9)
      {
        if (*v8 == 1)
        {
          *(void *)(a1 + 280) = 0;
          *(void *)(a1 + 296) = 0;
        }
        v8 += 14;
      }
      v7 += 184;
    }
    while ((unsigned __int16 *)v7 != v5);
    uint64_t v10 = *(void *)(v6 + 160);
    uint64_t v11 = *(void *)(v6 + 168);
    if (v10 == v11)
    {
      BOOL v13 = 0;
    }
    else
    {
      uint64_t v12 = v10 + 56;
      do
      {
        BOOL v13 = *(_DWORD *)(v12 - 56) == 7;
        BOOL v14 = *(_DWORD *)(v12 - 56) == 7 || v12 == v11;
        v12 += 56;
      }
      while (!v14);
    }
    unint64_t v15 = (unsigned __int16 *)(v6 + 40);
    while (1)
    {
      int v16 = *((char *)v15 + 23);
      if (v16 < 0)
      {
        if (*((void *)v15 + 1) != 3) {
          break;
        }
        int v17 = *(unsigned __int16 **)v15;
      }
      else
      {
        int v17 = v15;
        if (v16 != 3) {
          break;
        }
      }
      int v18 = *v17;
      int v19 = *((unsigned __int8 *)v17 + 2);
      if (v18 != 26995 || v19 != 108) {
        break;
      }
      int v21 = v15 + 72;
      v15 += 92;
      if (v21 == v5) {
        goto LABEL_31;
      }
    }
    char v22 = 0;
  }
  if (!v13 && !*(void *)(a1 + 280))
  {
    int v24 = *(float **)(v4 + 56);
    int v23 = *(float **)(v4 + 64);
    unint64_t v25 = (char *)v23 - (char *)v24;
    unint64_t v26 = v23 - v24;
    if (v26 >= 0xF0) {
      unint64_t v26 = 240;
    }
    int v27 = &v23[-v26];
    int v28 = *(float **)(v4 + 56);
    if (v24 != v27)
    {
      int v28 = *(float **)(v4 + 56);
      while (fabsf(*v28) <= 100.0)
      {
        if (++v28 == v27) {
          goto LABEL_59;
        }
      }
    }
    if (v28 != v27)
    {
      do
      {
        int v27 = v28;
        if (v28 <= v24) {
          break;
        }
        --v28;
      }
      while ((float)(*(v27 - 1) * *v27) > 0.0);
    }
LABEL_59:
    unint64_t v41 = (char *)v27 - (char *)v24;
    uint64_t v42 = v27 - v24;
    if (v27 != v24)
    {
      int v43 = &v24[v42];
      int64_t v44 = (char *)v23 - (char *)v43;
      if (v23 != v43) {
        memmove(*(void **)(v4 + 56), v43, (char *)v23 - (char *)v43);
      }
      uint64_t v45 = *(void *)(v4 + 56);
      *(void *)(v4 + 64) = (char *)v24 + v44;
      unint64_t v25 = (unint64_t)v24 + v44 - v45;
    }
    unint64_t v46 = *(int **)(v4 + 32);
    uint64_t v47 = *(_DWORD **)(v4 + 40);
    if (v47 != v46)
    {
      unint64_t v48 = v25 >> 2;
      unint64_t v49 = v47 - v46;
      if (v49 <= 1) {
        unint64_t v49 = 1;
      }
      do
      {
        int v50 = *v46 - (v41 >> 2);
        if (v50 >= (int)v48) {
          int v50 = v48;
        }
        *v46++ = v50 & ~(v50 >> 31);
        --v49;
      }
      while (v49);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v51 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v102 = v42;
      _os_log_impl(&dword_20CD80000, v51, OS_LOG_TYPE_DEBUG, "SilenceTrimmingStream trimmed %zu samples of initial silence", buf, 0xCu);
    }
    Diagnostics::log(7, "SilenceTrimmingStream trimmed %zu samples of initial silence", v52, v42);
    if ((v22 & 1) == 0) {
      goto LABEL_74;
    }
LABEL_55:
    *(void *)(a1 + 288) = 0;
    goto LABEL_86;
  }
  unint64_t v29 = *(void *)(a1 + 288);
  if (v29)
  {
    double v30 = *(char **)(v4 + 56);
    *(_DWORD *)buf = 0;
    std::vector<float>::insert(v4 + 56, v30, v29, (char *)buf);
    uint64_t v31 = *(int **)(v4 + 32);
    int v32 = *(int **)(v4 + 40);
    uint64_t v33 = (char *)v32 - (char *)v31;
    if (v32 != v31)
    {
      int v34 = *(_DWORD *)(a1 + 288);
      uint64_t v35 = (*(void *)(v4 + 64) - *(void *)(v4 + 56)) >> 2;
      unint64_t v36 = v33 >> 2;
      if (v36 <= 1) {
        unint64_t v36 = 1;
      }
      do
      {
        int v37 = *v31 + v34;
        if (v37 >= (int)v35) {
          int v37 = v35;
        }
        *v31++ = v37 & ~(v37 >> 31);
        --v36;
      }
      while (v36);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v40 = *(void *)(a1 + 288);
      *(_DWORD *)buf = 134217984;
      uint64_t v102 = v40;
      _os_log_impl(&dword_20CD80000, v38, OS_LOG_TYPE_DEBUG, "SilenceTrimmingStream restored %zu samples of inter-sentence silence", buf, 0xCu);
    }
    Diagnostics::log(7, "SilenceTrimmingStream restored %zu samples of inter-sentence silence", v39, *(void *)(a1 + 288));
    *(void *)(a1 + 288) = 0;
  }
  if (v22) {
    goto LABEL_55;
  }
LABEL_74:
  uint64_t v54 = *(void *)(v4 + 56);
  uint64_t v53 = *(float **)(v4 + 64);
  unint64_t v55 = ((uint64_t)v53 - v54) >> 2;
  if (v55 >= 0xF0) {
    unint64_t v55 = 240;
  }
  unint64_t v56 = (float *)(v54 + 4 * v55);
  float v57 = *(float **)(v4 + 64);
  while (v57 != v56)
  {
    float v58 = *--v57;
    if (fabsf(v58) > 100.0)
    {
      int v59 = v57 + 1;
      do
      {
        unint64_t v56 = v59;
        if (v59 >= v53) {
          break;
        }
        ++v59;
      }
      while ((float)(*v56 * *(v56 - 1)) > 0.0);
      break;
    }
  }
  uint64_t v60 = v53 - v56;
  *(void *)(a1 + 288) = v60;
  if (v53 != v56)
  {
    int v61 = &v56[v60];
    int64_t v62 = (char *)v53 - (char *)v61;
    if (v53 != v61) {
      memmove(v56, v61, (char *)v53 - (char *)v61);
    }
    *(void *)(v4 + 64) = (char *)v56 + v62;
  }
LABEL_86:
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v63 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v65 = *(void *)(a1 + 288);
    *(_DWORD *)buf = 134217984;
    uint64_t v102 = v65;
    _os_log_impl(&dword_20CD80000, v63, OS_LOG_TYPE_DEBUG, "SilenceTrimmingStream trimmed %zu samples of ending silence", buf, 0xCu);
  }
  Diagnostics::log(7, "SilenceTrimmingStream trimmed %zu samples of ending silence", v64, *(void *)(a1 + 288));
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v66 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v68 = (uint64_t)(*(void *)(v4 + 64) - *(void *)(v4 + 56)) >> 2;
    *(_DWORD *)buf = 134217984;
    uint64_t v102 = v68;
    _os_log_impl(&dword_20CD80000, v66, OS_LOG_TYPE_INFO, "Final audio %zu samples", buf, 0xCu);
  }
  uint64_t v69 = (GryphonAnalysis *)Diagnostics::log(6, "Final audio %zu samples", v67, (uint64_t)(*(void *)(v4 + 64) - *(void *)(v4 + 56)) >> 2);
  uint64_t v70 = (GryphonAnalysis *)GryphonAnalysis::Storage(v69);
  if (*(unsigned char *)v70)
  {
    int v71 = *(_DWORD *)(a1 + 272);
    uint64_t v72 = *(void *)(v4 + 8);
    uint64_t v73 = *(void *)(v4 + 16);
    if (v73 == v72)
    {
      uint64_t v80 = *(void *)(v4 + 16);
    }
    else
    {
      unint64_t v74 = (v73 - v72) / 184;
      unint64_t v75 = *(int **)(v4 + 32);
      uint64_t v76 = *(void *)(a1 + 288) + ((uint64_t)(*(void *)(v4 + 64) - *(void *)(v4 + 56)) >> 2);
      unint64_t v77 = v74 - 1;
      if (v74 <= 1) {
        unint64_t v74 = 1;
      }
      float v78 = (float *)(v72 + 152);
      do
      {
        if (v77) {
          float v79 = (float)(1000 * (v75[1] - *v75) / v71);
        }
        else {
          float v79 = (float)(1000 * (v76 - *v75) / (unint64_t)v71);
        }
        *float v78 = v79;
        v78 += 46;
        ++v75;
        --v77;
        --v74;
      }
      while (v74);
      int v71 = *(_DWORD *)(a1 + 272);
      uint64_t v73 = *(void *)(v4 + 8);
      uint64_t v80 = *(void *)(v4 + 16);
    }
    int v81 = (GryphonAnalysis *)GryphonAnalysis::Storage(v70);
    uint64_t v82 = 0;
    unint64_t v83 = 0xD37A6F4DE9BD37A7 * ((v80 - v73) >> 3);
    uint64_t v84 = *((void *)v81 + 58);
    while (1)
    {
      uint64_t v85 = v84;
      int v81 = (GryphonAnalysis *)GryphonAnalysis::Storage(v81);
      if (v85 == *((void *)v81 + 57)) {
        break;
      }
      uint64_t v84 = v85 - 120;
      v82 -= 0x2C8590B21642C859 * ((uint64_t)(*(void *)(v85 - 104) - *(void *)(v85 - 112)) >> 3);
      if (v82 == v83)
      {
        int v81 = (GryphonAnalysis *)GryphonAnalysis::Storage(v81);
        unint64_t v86 = 0xEEEEEEEEEEEEEEEFLL * ((v85 - *((void *)v81 + 57)) >> 3) - 1;
        goto LABEL_110;
      }
    }
    unint64_t v86 = 0;
LABEL_110:
    uint64_t v87 = 0;
    while (1)
    {
      BOOL v88 = (GryphonAnalysis *)GryphonAnalysis::Storage(v81);
      if (v86 >= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)v88 + 58) - *((void *)v88 + 57)) >> 3)) {
        break;
      }
      int v81 = (GryphonAnalysis *)GryphonAnalysis::Storage(v88);
      uint64_t v89 = *((void *)v81 + 57) + 120 * v86;
      uint64_t v90 = *(void *)(v89 + 8);
      uint64_t v91 = *(void *)(v89 + 16);
      if (v90 != v91)
      {
        double v92 = (int *)(*(void *)(v4 + 8) + 184 * v87 + 152);
        do
        {
          int v93 = *v92;
          v92 += 46;
          *(_DWORD *)(v90 + 152) = v93;
          ++v87;
          v90 += 184;
        }
        while (v90 != v91);
      }
      ++v86;
    }
    uint64_t v95 = *(void *)(v4 + 56);
    uint64_t v94 = *(void *)(v4 + 64);
    uint64_t v96 = GryphonAnalysis::Storage(v88);
    *(float *)(v96 + 480) = *(float *)(v96 + 480) + (float)((float)(unint64_t)((v94 - v95) >> 2) / (float)v71);
  }
  uint64_t v97 = *(void *)(a1 + 296);
  *(void *)(v4 + 96) = v97;
  *(void *)(a1 + 296) = v97 + ((uint64_t)(*(void *)(v4 + 64) - *(void *)(v4 + 56)) >> 2);
  ++*(void *)(a1 + 280);
  float v98 = (std::__shared_weak_count *)a2[1];
  uint64_t v99 = *a2;
  float v100 = v98;
  if (v98) {
    atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v99);
  if (v100) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v100);
  }
}

void sub_20D37CA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void SilenceTrimmingStream::~SilenceTrimmingStream(SilenceTrimmingStream *this)
{
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

uint64_t EspressoWaveRNNProcessor::process@<X0>(void *a1@<X8>)
{
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_ERROR, "Stub WaveRNN processor should not be used during runtime.", v7, 2u);
  }
  uint64_t result = Diagnostics::log(3, "Stub WaveRNN processor should not be used during runtime.", v5);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void EspressoWaveRNNProcessor::reset(EspressoWaveRNNProcessor *this)
{
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_INFO, "EspressoWaveRNNProcessor reset.", v7, 2u);
  }
  Diagnostics::log(6, "EspressoWaveRNNProcessor reset.", v3);
  uint64_t v4 = (void *)*((void *)this + 29);
  uint64_t v5 = *((void *)this + 72);
  if (v5 >= 1) {
    bzero(*((void **)this + 8), 4 * (v5 - ((v5 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  uint64_t v6 = *((void *)this + 71);
  if (v6 >= 1) {
    bzero(v4, 4 * (v6 - ((v6 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  *((_DWORD *)this + 148) = 0;
}

void EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(EspressoWaveRNNProcessor *this)
{
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  JUMPOUT(0x2105595E0);
}

{
  void *v2;

  *(void *)this = &off_26C203B90;
  int v2 = (void *)*((void *)this + 7);
  if (v2 && *v2 && espresso_plan_get_phase() == 1) {
    espresso_plan_build_clean();
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 600));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void EspressoWaveRNNProcessor::safe_process(EspressoWaveRNNProcessor *this, const WaveNetFeature *a2)
{
  uint64_t v4 = (std::recursive_mutex *)((char *)this + 600);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 600));
  *((unsigned char *)this + 664) = 1;
  (*(void (**)(EspressoWaveRNNProcessor *, const WaveNetFeature *))(*(void *)this + 40))(this, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_20D37CD94(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void EspressoWaveRNNProcessor::prepare(EspressoWaveRNNProcessor *this)
{
  int v2 = (std::recursive_mutex *)((char *)this + 600);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 600));
  if (!*((unsigned char *)this + 664))
  {
    *((unsigned char *)this + 664) = 1;
    int v3 = *((_DWORD *)this + 148);
    __int16 v5 = 257;
    char v6 = 0;
    memset(v7, 0, sizeof(v7));
    long long v8 = 0u;
    *(_OWORD *)uint64_t v9 = 0u;
    memset(v10, 0, 22);
    std::vector<std::vector<float>>::resize((uint64_t *)v7, 1uLL);
    std::vector<float>::resize(*(uint64_t *)&v7[0], *((void *)this + 72));
    (*(void (**)(void **__return_ptr, EspressoWaveRNNProcessor *, __int16 *))(*(void *)this + 40))(__p, this, &v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *((_DWORD *)this + 148) = v3;
    if (v9[1])
    {
      v10[0] = v9[1];
      operator delete(v9[1]);
    }
    uint64_t v11 = (void **)&v8;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
    uint64_t v11 = (void **)&v7[1] + 1;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
    uint64_t v11 = (void **)v7;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  }
  std::recursive_mutex::unlock(v2);
}

void sub_20D37CECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WaveNetFeature::~WaveNetFeature((WaveNetFeature *)va);
  std::recursive_mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void EspressoWaveRNNSubscalingANEProcessor::process(EspressoWaveRNNSubscalingANEProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, void *a3@<X8>)
{
  uint64_t v45 = (void *)*((void *)this + 29);
  std::vector<int> __dst = (void *)*((void *)this + 8);
  int v43 = (_DWORD *)*((void *)this + 85);
  int64_t v44 = (const void *)*((void *)this + 50);
  uint64_t v42 = (_DWORD *)*((void *)this + 106);
  std::vector<short>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3) * *((void *)this + 4));
  uint64_t v5 = *((void *)a2 + 1);
  unint64_t v41 = a2;
  if (*((void *)a2 + 2) != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    float v8 = 1.0;
    *(float *)&int v9 = 0.86;
    float v10 = -1.0;
    while (1)
    {
      memcpy(__dst, *(const void **)(v5 + 24 * v7), *(void *)(v5 + 24 * v7 + 8) - *(void *)(v5 + 24 * v7));
      _DWORD *v43 = 0;
      _DWORD *v42 = *((_DWORD *)this + 338);
      memcpy(v45, v44, 4 * *((void *)this + 71));
      int v11 = espresso_plan_execute_sync();
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
      if (v11)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        int v36 = v51;
        int v37 = (void **)__p[0];
        status_string = (const char *)espresso_get_status_string();
        int v39 = __p;
        if (v36 < 0) {
          int v39 = v37;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v52, "%s Error: %d, %s", (const char *)v39, v11, status_string);
        MEMORY[0x210558D40](exception, &v52);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (v51 < 0) {
        operator delete(__p[0]);
      }
      std::vector<float>::vector(&v52, *((void *)this + 139));
      std::vector<float>::vector(v49, *((void *)this + 139));
      BOOL v13 = (float *)v52;
      uint64_t v12 = v53;
      BOOL v14 = (float *)v49[0];
      uint64_t v47 = (void *)v49[0];
      uint64_t v48 = v6;
      if (v53 != v52) {
        break;
      }
      if (v49[0]) {
        goto LABEL_32;
      }
LABEL_33:
      if (v12)
      {
        uint64_t v53 = v12;
        operator delete(v12);
      }
      ++v7;
      uint64_t v5 = *((void *)v41 + 1);
      uint64_t v6 = v48 + 2;
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)v41 + 2) - v5) >> 3)) {
        return;
      }
    }
    unint64_t v15 = (float *)*((void *)this + 127);
    int v16 = (float *)*((void *)this + 148);
    if ((unint64_t)(((unsigned char *)v53 - (unsigned char *)v52) >> 2) <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = ((unsigned char *)v53 - (unsigned char *)v52) >> 2;
    }
    int v18 = (_WORD *)(*a3 + *((void *)this + 4) * v6 + 2);
    do
    {
      float v19 = *v15++;
      *BOOL v13 = (float)(v19 + v8) * 127.5;
      *BOOL v14 = (float)(*v16 + v8) * 127.5;
      float v20 = *v16++;
      *((float *)this + 338) = v20;
      float v21 = *v13++;
      float v22 = v10 + (float)((float)(v21 / 255.0) * 2.0);
      float v10 = -1.0;
      float v23 = 1.0;
      if (v22 <= 0.0) {
        float v23 = 0.0;
      }
      float v24 = *(float *)&v9;
      if (v22 >= 0.0) {
        float v25 = v23;
      }
      else {
        float v25 = -1.0;
      }
      float v26 = (float)((float)(exp2f(fabsf(v22) * 8.0) + -1.0) * 0.0039216) * v25;
      float v27 = *v14++;
      float v28 = (float)((float)(v27 / 255.0) * 2.0) + -1.0;
      float v29 = 1.0;
      if (v28 <= 0.0) {
        float v29 = 0.0;
      }
      float v8 = 1.0;
      if (v28 >= 0.0) {
        float v30 = v29;
      }
      else {
        float v30 = -1.0;
      }
      float v31 = exp2f(fabsf(v28) * 8.0);
      float v32 = v26 + (float)(*((float *)this + 148) * v24);
      *(float *)&int v9 = v24;
      float v33 = (float)((float)(v31 + -1.0) * 0.0039216) * v30;
      if (v32 < -1.0) {
        float v32 = -1.0;
      }
      if (v32 > 1.0) {
        float v32 = 1.0;
      }
      float v34 = v33 + (float)(v32 * v24);
      if (v34 < -1.0) {
        float v34 = -1.0;
      }
      if (v34 > 1.0) {
        float v34 = 1.0;
      }
      *((float *)this + 148) = v34;
      *(v18 - 1) = (int)(float)(v32 * 32767.0);
      *int v18 = (int)(float)(v34 * 32767.0);
      v18 += 2;
      --v17;
    }
    while (v17);
LABEL_32:
    v49[1] = v47;
    operator delete(v47);
    uint64_t v12 = v52;
    goto LABEL_33;
  }
}

void sub_20D37D27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      if (a31 < 0) {
        operator delete(a26);
      }
      uint64_t v40 = *(void **)a13;
      if (*(void *)a13)
      {
        *(void *)(a13 + 8) = v40;
        operator delete(v40);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v38);
  goto LABEL_6;
}

void EspressoWaveRNNSubscalingANEProcessor::reset(EspressoWaveRNNSubscalingANEProcessor *this)
{
  *((_DWORD *)this + 338) = 0;
}

void EspressoWaveRNNSubscalingANEProcessor::~EspressoWaveRNNSubscalingANEProcessor(EspressoWaveRNNSubscalingANEProcessor *this)
{
  EspressoWaveRNNSubscalingANEProcessor::~EspressoWaveRNNSubscalingANEProcessor(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &off_26C2055A0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 171);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
}

void EspressoWaveRNNFusedSubscalingANEProcessor::process(EspressoWaveRNNFusedSubscalingANEProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, void *a3@<X8>)
{
  uint64_t v48 = (void *)*((void *)this + 29);
  std::vector<int> __dst = (void *)*((void *)this + 8);
  unint64_t v46 = (_DWORD *)*((void *)this + 87);
  uint64_t v47 = (const void *)*((void *)this + 50);
  int64_t v44 = (_DWORD *)*((void *)this + 129);
  uint64_t v45 = (_DWORD *)*((void *)this + 108);
  uint64_t v42 = *((void *)this + 234);
  int v43 = (_DWORD *)*((void *)this + 150);
  unint64_t v41 = (void *)*((void *)this + 171);
  std::vector<short>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3) * *((void *)this + 4));
  int v5 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  if (v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v36 = v57;
    int v37 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    int v39 = __p;
    if (v36 < 0) {
      int v39 = v37;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v58, "%s Error: %d, %s", (const char *)v39, v5, status_string);
    MEMORY[0x210558D40](exception, &v58);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v57 < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)a2 + 2) != *((void *)a2 + 1))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      memcpy(v41, (const void *)(v42 + 4 * *((void *)this + 4) * v7), 4 * *((void *)this + 4) * *((void *)this + 73));
      memcpy(__dst, *(const void **)(*((void *)a2 + 1) + 24 * v7), *(void *)(*((void *)a2 + 1) + 24 * v7 + 8) - *(void *)(*((void *)a2 + 1) + 24 * v7));
      _DWORD *v46 = *((_DWORD *)this + 510);
      *uint64_t v45 = *((_DWORD *)this + 511);
      _DWORD *v44 = *((_DWORD *)this + 512);
      _DWORD *v43 = *((_DWORD *)this + 513);
      memcpy(v48, v47, 4 * *((void *)this + 71));
      int v8 = espresso_plan_execute_sync();
      std::string::basic_string[abi:ne180100]<0>(v54, &byte_20D5A22AE);
      if (v8)
      {
        float v30 = __cxa_allocate_exception(0x10uLL);
        int v31 = v55;
        float v32 = (void **)v54[0];
        float v33 = (const char *)espresso_get_status_string();
        float v34 = v54;
        if (v31 < 0) {
          float v34 = v32;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v58, "%s Error: %d, %s", (const char *)v34, v8, v33);
        MEMORY[0x210558D40](v30, &v58);
        __cxa_throw(v30, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (v55 < 0) {
        operator delete(v54[0]);
      }
      std::vector<float>::vector(&v58, *((void *)this + 204));
      std::vector<float>::vector(&v52, *((void *)this + 225));
      std::vector<float>::vector(&v50, 2 * *((void *)this + 204));
      int v9 = v50;
      *((_DWORD *)v50 + 1) = *((_DWORD *)this + 513);
      v9[3] = *((_DWORD *)this + 510);
      uint64_t v10 = *((void *)this + 192);
      unint64_t v11 = (v59 - v58) >> 2;
      if (v59 != v58) {
        break;
      }
LABEL_24:
      *((_DWORD *)this + 511) = *(_DWORD *)(v10 + 4 * v11 - 4);
      if (v51 != v9)
      {
        if ((unint64_t)(v51 - v9) <= 1) {
          uint64_t v22 = 1;
        }
        else {
          uint64_t v22 = v51 - v9;
        }
        float v23 = (_WORD *)(*a3 + *((void *)this + 4) * v6);
        float v24 = (float *)v9;
        do
        {
          float v25 = (float)(*v24 + 1.0) * 127.5;
          *v24++ = v25;
          float v26 = (float)((float)(v25 / 255.0) * 2.0) + -1.0;
          if (v26 > 0.0) {
            float v27 = 1.0;
          }
          else {
            float v27 = 0.0;
          }
          if (v26 >= 0.0) {
            float v28 = v27;
          }
          else {
            float v28 = -1.0;
          }
          float v29 = (float)((float)((float)(exp2f(fabsf(v26) * 8.0) + -1.0) * 0.0039216) * v28)
              + (float)(*((float *)this + 148) * 0.86);
          if (v29 < -1.0) {
            float v29 = -1.0;
          }
          if (v29 > 1.0) {
            float v29 = 1.0;
          }
          *((float *)this + 148) = v29;
          *v23++ = (int)(float)(v29 * 32767.0);
          --v22;
        }
        while (v22);
      }
      char v51 = v9;
      operator delete(v9);
      if (v52)
      {
        uint64_t v53 = v52;
        operator delete(v52);
      }
      if (v58)
      {
        int v59 = v58;
        operator delete(v58);
      }
      ++v7;
      v6 += 2;
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3)) {
        return;
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = (v53 - (unsigned char *)v52) >> 2;
    uint64_t v14 = v13 - 3;
    uint64_t v15 = v13 - 2;
    uint64_t v16 = v13 - 1;
    if (v11 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = (v59 - v58) >> 2;
    }
    int v18 = v9 + 5;
    while (1)
    {
      *(v18 - 5) = *(_DWORD *)(v10 + 4 * v12);
      if (v14 == v12)
      {
        uint64_t v19 = *((void *)this + 213);
        *((_DWORD *)this + 512) = *(_DWORD *)(v19 + 4 * v14);
        int v20 = *(_DWORD *)(v19 + 4 * v14);
      }
      else
      {
        if (v15 == v12)
        {
          *((_DWORD *)this + 513) = *(_DWORD *)(*((void *)this + 213) + 4 * v15);
          goto LABEL_21;
        }
        uint64_t v21 = *((void *)this + 213);
        if (v16 == v12)
        {
          *((_DWORD *)this + 510) = *(_DWORD *)(v21 + 4 * v16);
          goto LABEL_21;
        }
        int v20 = *(_DWORD *)(v21 + 4 * v12);
      }
      *int v18 = v20;
LABEL_21:
      ++v12;
      v18 += 2;
      if (v17 == v12) {
        goto LABEL_24;
      }
    }
  }
}

void sub_20D37D8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v44 - 153) < 0)
  {
    operator delete(*(void **)(v44 - 176));
    if ((v42 & 1) == 0)
    {
LABEL_6:
      if (a42 < 0) {
        operator delete(__p);
      }
      unint64_t v46 = *(void **)a13;
      if (*(void *)a13)
      {
        *(void *)(a13 + 8) = v46;
        operator delete(v46);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v43);
  goto LABEL_6;
}

double EspressoWaveRNNFusedSubscalingANEProcessor::reset(EspressoWaveRNNFusedSubscalingANEProcessor *this)
{
  EspressoWaveRNNProcessor::reset(this);
  double result = 0.0;
  *(_OWORD *)((char *)this + 2040) = 0u;
  return result;
}

void EspressoWaveRNNFusedSubscalingANEProcessor::~EspressoWaveRNNFusedSubscalingANEProcessor(EspressoWaveRNNFusedSubscalingANEProcessor *this)
{
  EspressoWaveRNNFusedSubscalingANEProcessor::~EspressoWaveRNNFusedSubscalingANEProcessor(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &off_26C2056C8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 258);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
}

uint64_t EspressoWaveRNNSubscalingCPUProcessor::process@<X0>(EspressoWaveRNNSubscalingCPUProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = *((void *)this + 4);
  if (*((unsigned char *)this + 40))
  {
    unint64_t v7 = (float *)*((void *)a2 + 10);
    if (v7 != *((float **)a2 + 11)) {
      unint64_t v6 = (unint64_t)(float)((float)v6 / *v7);
    }
  }
  int v8 = (char *)*((void *)this + 8);
  int v9 = (void *)*((void *)this + 29);
  uint64_t v10 = (const void *)*((void *)this + 50);
  std::vector<short>::vector(a3, v6 * 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  BNNSSetNetwork();
  uint64_t v11 = *((void *)a2 + 1);
  if (*((void *)a2 + 2) != v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v40 = a2;
    do
    {
      uint64_t v41 = v13;
      uint64_t v14 = v11 + 24 * v13;
      uint64_t v15 = *(unsigned char **)v14;
      uint64_t v16 = *(unsigned char **)(v14 + 8);
      if (v16 != v15) {
        memmove(v8, v15, v16 - v15);
      }
      if (v6)
      {
        for (unint64_t i = 0; i < v6; i += 2)
        {
          int v18 = espresso_plan_execute_sync();
          std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute.");
          if (v18)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            int v36 = v44;
            int v37 = (void **)__p[0];
            status_string = (const char *)espresso_get_status_string();
            int v39 = __p;
            if (v36 < 0) {
              int v39 = v37;
            }
            StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v39, v18, status_string);
            MEMORY[0x210558D40](exception, buf);
            __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v44 < 0) {
            operator delete(__p[0]);
          }
          float v19 = **((float **)this + 84);
          float v42 = **((float **)this + 105);
          int v20 = &v8[4 * *((void *)this + 72)];
          *((_DWORD *)v20 - 2) = **((_DWORD **)this + 126);
          *((_DWORD *)v20 - 1) = 0;
          uint64_t v21 = *((void *)this + 71);
          if (v21) {
            memmove(v9, v10, 4 * v21);
          }
          float v22 = (float)((float)(v19 / 255.0) * 2.0) + -1.0;
          float v23 = 0.0;
          if (v22 > 0.0) {
            float v23 = 1.0;
          }
          if (v22 >= 0.0) {
            float v24 = v23;
          }
          else {
            float v24 = -1.0;
          }
          float v25 = (float)((float)((float)(exp2f(fabsf(v22) * 8.0) + -1.0) * 0.0039216) * v24)
              + (float)(*((float *)this + 148) * 0.86);
          if (v25 < -1.0) {
            float v25 = -1.0;
          }
          if (v25 <= 1.0) {
            float v26 = v25;
          }
          else {
            float v26 = 1.0;
          }
          float v27 = (float)((float)(v42 / 255.0) * 2.0) + -1.0;
          float v28 = 0.0;
          if (v27 > 0.0) {
            float v28 = 1.0;
          }
          if (v27 >= 0.0) {
            float v29 = v28;
          }
          else {
            float v29 = -1.0;
          }
          float v30 = (float)((float)((float)(exp2f(fabsf(v27) * 8.0) + -1.0) * 0.0039216) * v29) + (float)(v26 * 0.86);
          if (v30 < -1.0) {
            float v30 = -1.0;
          }
          if (v30 > 1.0) {
            float v30 = 1.0;
          }
          int v31 = (_WORD *)(*a3 + v12 + 2 * i);
          *int v31 = (int)(float)(v26 * 32767.0);
          v31[1] = (int)(float)(v30 * 32767.0);
          *((float *)this + 148) = v30;
          if (fabsf(v30) == INFINITY)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            float v32 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_20CD80000, v32, OS_LOG_TYPE_ERROR, "prev_sample_ became Inf or NaN. This will result in silence audio.", buf, 2u);
            }
            Diagnostics::log(3, "prev_sample_ became Inf or NaN. This will result in silence audio.", v33);
          }
        }
      }
      uint64_t v13 = v41 + 1;
      uint64_t v11 = *((void *)v40 + 1);
      v12 += 2 * v6;
    }
    while (v41 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v40 + 2) - v11) >> 3));
  }
  return BNNSClearNetwork();
}

void sub_20D37DE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  int v31 = *(void **)v29;
  if (*(void *)v29)
  {
    *(void *)(v29 + 8) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWaveRNNSubscalingCPUProcessor::~EspressoWaveRNNSubscalingCPUProcessor(EspressoWaveRNNSubscalingCPUProcessor *this)
{
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  JUMPOUT(0x2105595E0);
}

uint64_t EspressoWaveRNNFusedSubscaleCPUProcessor::process@<X0>(EspressoWaveRNNFusedSubscaleCPUProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, void *a3@<X8>)
{
  unint64_t v117 = *((void *)this + 4);
  if (*((unsigned char *)this + 40))
  {
    int v5 = (float *)*((void *)a2 + 10);
    if (v5 != *((float **)a2 + 11)) {
      unint64_t v117 = (unint64_t)(float)((float)v117 / *v5);
    }
  }
  uint64_t v114 = (void *)*((void *)this + 29);
  std::vector<int> __dst = (char *)*((void *)this + 8);
  unint64_t v113 = (const void *)*((void *)this + 50);
  std::vector<short>::vector(a3, v117 * 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  BNNSSetNetwork();
  uint64_t v6 = *((void *)a2 + 1);
  if (*((void *)a2 + 2) != v6)
  {
    uint64_t v7 = 0;
    int v8 = (char *)this + 1384;
    int v9 = (void **)((char *)this + 1360);
    uint64_t v10 = (void *)((char *)this + 1368);
    long long v111 = a2;
    do
    {
      uint64_t v112 = v7;
      uint64_t v11 = v6 + 24 * v7;
      uint64_t v12 = *(unsigned char **)v11;
      uint64_t v13 = *(unsigned char **)(v11 + 8);
      if (v13 != v12) {
        memmove(__dst, v12, v13 - v12);
      }
      if (v117)
      {
        for (unint64_t i = 0; i < v117; i += *((int *)this + 336))
        {
          int v15 = espresso_plan_execute_sync();
          std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute.");
          if (v15)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            int v107 = v119;
            int v108 = (void **)__p[0];
            status_string = (const char *)espresso_get_status_string();
            uint64_t v110 = __p;
            if (v107 < 0) {
              uint64_t v110 = v108;
            }
            StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v110, v15, status_string);
            MEMORY[0x210558D40](exception, buf);
            __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v119 < 0) {
            operator delete(__p[0]);
          }
          float v16 = **((float **)this + 84);
          float v17 = **((float **)this + 105);
          int v18 = **((_DWORD **)this + 126);
          int v19 = **((_DWORD **)this + 147);
          int v20 = *(void **)v8;
          uint64_t v21 = *(char **)(*(void *)v8 + 32);
          unint64_t v22 = *(void *)(*(void *)v8 + 40);
          if ((unint64_t)v21 >= v22)
          {
            float v24 = (char *)v20[3];
            uint64_t v25 = (v21 - v24) >> 2;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62) {
              goto LABEL_130;
            }
            uint64_t v27 = v22 - (void)v24;
            if (v27 >> 1 > v26) {
              unint64_t v26 = v27 >> 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            if (v28)
            {
              uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(*(void *)v8 + 40, v28);
              float v24 = (char *)v20[3];
              uint64_t v21 = (char *)v20[4];
            }
            else
            {
              uint64_t v29 = 0;
            }
            float v30 = &v29[4 * v25];
            *(_DWORD *)float v30 = v18;
            float v23 = v30 + 4;
            while (v21 != v24)
            {
              int v31 = *((_DWORD *)v21 - 1);
              v21 -= 4;
              *((_DWORD *)v30 - 1) = v31;
              v30 -= 4;
            }
            v20[3] = v30;
            v20[4] = v23;
            v20[5] = &v29[4 * v28];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v21 = v18;
            float v23 = v21 + 4;
          }
          v20[4] = v23;
          uint64_t v32 = *(void *)v8;
          float v33 = *(_DWORD **)(*(void *)v8 + 8);
          unint64_t v34 = *(void *)(*(void *)v8 + 16);
          if ((unint64_t)v33 >= v34)
          {
            int v36 = *(_DWORD **)v32;
            uint64_t v37 = ((uint64_t)v33 - *(void *)v32) >> 2;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62) {
LABEL_130:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v39 = v34 - (void)v36;
            if (v39 >> 1 > v38) {
              unint64_t v38 = v39 >> 1;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v40)
            {
              uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(*(void *)v8 + 16, v40);
              int v36 = *(_DWORD **)v32;
              float v33 = *(_DWORD **)(v32 + 8);
            }
            else
            {
              uint64_t v41 = 0;
            }
            float v42 = &v41[4 * v37];
            *(_DWORD *)float v42 = v19;
            uint64_t v35 = v42 + 4;
            while (v33 != v36)
            {
              int v43 = *--v33;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            *(void *)uint64_t v32 = v42;
            *(void *)(v32 + 8) = v35;
            *(void *)(v32 + 16) = &v41[4 * v40];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            _DWORD *v33 = v19;
            uint64_t v35 = v33 + 1;
          }
          *(void *)(v32 + 8) = v35;
          EspressoWaveRNNFusedSubscaleCPUProcessor::get_receptive_field_from_previous_samples((char **)buf, (uint64_t)this, (uint64_t *)this + 173);
          char v44 = *v9;
          if (*v9)
          {
            void *v10 = v44;
            operator delete(v44);
            void *v9 = 0;
            *((void *)this + 171) = 0;
            *((void *)this + 172) = 0;
          }
          uint64_t v45 = *(unsigned char **)buf;
          void *v9 = *(void **)buf;
          unint64_t v46 = (unsigned char *)v121;
          *(_OWORD *)uint64_t v10 = v121;
          if (v46 != v45) {
            memmove(&__dst[4 * *((void *)this + 72) - (v46 - v45)], v45, v46 - v45);
          }
          uint64_t v47 = *((void *)this + 71);
          if (v47) {
            memmove(v114, v113, 4 * v47);
          }
          uint64_t v48 = (void *)*((void *)this + 176);
          float v49 = (float)((float)(v16 / 255.0) * 2.0) + -1.0;
          if (v49 > 0.0) {
            float v50 = 1.0;
          }
          else {
            float v50 = 0.0;
          }
          if (v49 >= 0.0) {
            float v51 = v50;
          }
          else {
            float v51 = -1.0;
          }
          float v52 = (float)((float)(exp2f(fabsf(v49) * 8.0) + -1.0) * 0.0039216) * v51;
          unint64_t v53 = v48[5];
          uint64_t v54 = (float *)v48[4];
          if ((unint64_t)v54 >= v53)
          {
            unint64_t v56 = (float *)v48[3];
            uint64_t v57 = v54 - v56;
            if ((unint64_t)(v57 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v58 = v53 - (void)v56;
            unint64_t v59 = (uint64_t)(v53 - (void)v56) >> 1;
            if (v59 <= v57 + 1) {
              unint64_t v59 = v57 + 1;
            }
            if (v58 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v60 = v59;
            }
            if (v60)
            {
              int v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v48 + 5), v60);
              unint64_t v56 = (float *)v48[3];
              uint64_t v54 = (float *)v48[4];
            }
            else
            {
              int v61 = 0;
            }
            int64_t v62 = (float *)&v61[4 * v57];
            float *v62 = v52;
            char v55 = v62 + 1;
            while (v54 != v56)
            {
              int v63 = *((_DWORD *)v54-- - 1);
              *((_DWORD *)v62-- - 1) = v63;
            }
            v48[3] = v62;
            v48[4] = v55;
            v48[5] = &v61[4 * v60];
            if (v56) {
              operator delete(v56);
            }
          }
          else
          {
            *uint64_t v54 = v52;
            char v55 = v54 + 1;
          }
          v48[4] = v55;
          uint64_t v64 = *((void *)this + 176);
          float v65 = (float)((float)(v17 / 255.0) * 2.0) + -1.0;
          if (v65 > 0.0) {
            float v66 = 1.0;
          }
          else {
            float v66 = 0.0;
          }
          if (v65 >= 0.0) {
            float v67 = v66;
          }
          else {
            float v67 = -1.0;
          }
          float v68 = (float)((float)(exp2f(fabsf(v65) * 8.0) + -1.0) * 0.0039216) * v67;
          unint64_t v69 = *(void *)(v64 + 16);
          uint64_t v70 = *(float **)(v64 + 8);
          if ((unint64_t)v70 >= v69)
          {
            uint64_t v72 = *(float **)v64;
            uint64_t v73 = ((uint64_t)v70 - *(void *)v64) >> 2;
            unint64_t v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v75 = v69 - (void)v72;
            if (v75 >> 1 > v74) {
              unint64_t v74 = v75 >> 1;
            }
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v76 = v74;
            }
            if (v76)
            {
              unint64_t v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v64 + 16, v76);
              uint64_t v72 = *(float **)v64;
              uint64_t v70 = *(float **)(v64 + 8);
            }
            else
            {
              unint64_t v77 = 0;
            }
            float v78 = (float *)&v77[4 * v73];
            *float v78 = v68;
            int v71 = v78 + 1;
            while (v70 != v72)
            {
              int v79 = *((_DWORD *)v70-- - 1);
              *((_DWORD *)v78-- - 1) = v79;
            }
            *(void *)uint64_t v64 = v78;
            *(void *)(v64 + 8) = v71;
            *(void *)(v64 + 16) = &v77[4 * v76];
            if (v72) {
              operator delete(v72);
            }
          }
          else
          {
            float *v70 = v68;
            int v71 = v70 + 1;
          }
          *(void *)(v64 + 8) = v71;
        }
      }
      uint64_t v7 = v112 + 1;
      uint64_t v6 = *((void *)v111 + 1);
    }
    while (v112 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v111 + 2) - v6) >> 3));
  }
  uint64_t v80 = *((void *)this + 177);
  unint64_t v81 = *(void *)(v80 - 16) - *(void *)(v80 - 24);
  uint64_t v82 = *((void *)this + 176);
  if (v81 < 5)
  {
    unint64_t v91 = v81 >> 2;
  }
  else
  {
    uint64_t v83 = 0;
    unint64_t v84 = 1;
    uint64_t v85 = *((void *)this + 176);
    do
    {
      if (v80 == v85)
      {
        uint64_t v85 = v80;
      }
      else
      {
        uint64_t v86 = 0;
        unint64_t v87 = 0;
        float v88 = *((float *)this + 148);
        do
        {
          float v88 = *(float *)(*(void *)(v85 + v86) + 4 * v84) + (float)(v88 * 0.86);
          if (v88 < -1.0) {
            float v88 = -1.0;
          }
          if (v88 > 1.0) {
            float v88 = 1.0;
          }
          *((float *)this + 148) = v88;
          if (fabsf(v88) == INFINITY)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v89 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_20CD80000, v89, OS_LOG_TYPE_ERROR, "prev_sample_ became Inf or NaN. This will result in silence audio.", buf, 2u);
            }
            Diagnostics::log(3, "prev_sample_ became Inf or NaN. This will result in silence audio.", v90);
            float v88 = *((float *)this + 148);
            uint64_t v80 = *((void *)this + 177);
            uint64_t v82 = *((void *)this + 176);
          }
          *(_WORD *)(*a3 + 2 * (v87 - 0x5555555555555555 * ((v80 - v82) >> 3) * v83)) = (int)(float)(v88 * 32767.0);
          ++v87;
          v86 += 24;
          uint64_t v85 = v82;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v80 - v82) >> 3) > v87);
      }
      ++v84;
      unint64_t v91 = (uint64_t)(*(void *)(v80 - 16) - *(void *)(v80 - 24)) >> 2;
      ++v83;
    }
    while (v91 > v84);
  }
  if (v80 != v82)
  {
    uint64_t v92 = 0;
    unint64_t v93 = 0;
    unint64_t v94 = v91 - 1;
    do
    {
      if (v94)
      {
        uint64_t v95 = *(void *)(v82 + v92);
        uint64_t v96 = (unsigned char *)(v95 + 4 * v94);
        uint64_t v97 = v82 + v92;
        float v98 = *(unsigned char **)(v82 + v92 + 8);
        int64_t v99 = v98 - v96;
        if (v98 != v96) {
          memmove(*(void **)(v82 + v92), v96, v98 - v96);
        }
        *(void *)(v97 + 8) = v95 + v99;
        float v100 = (void **)(*((void *)this + 173) + v92);
        uint64_t v102 = (char *)*v100;
        float v101 = (char *)v100[1];
        uint64_t v103 = (char *)*v100 + 4 * v94;
        int64_t v104 = v101 - v103;
        if (v101 != v103) {
          memmove(*v100, v103, v101 - v103);
        }
        v100[1] = &v102[v104];
        uint64_t v80 = *((void *)this + 177);
        uint64_t v82 = *((void *)this + 176);
      }
      ++v93;
      v92 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v80 - v82) >> 3) > v93);
  }
  return BNNSClearNetwork();
}

void sub_20D37E7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v32 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWaveRNNFusedSubscaleCPUProcessor::get_receptive_field_from_previous_samples(char **a1, uint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = -1431655765 * ((unint64_t)(a3[1] - *a3) >> 3) - 1;
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v7 = (uint64_t)(a1 + 2);
    do
    {
      uint64_t v8 = *a3;
      if (-1 - 0x5555555555555555 * ((a3[1] - *a3) >> 3) == v3)
      {
        uint64_t v9 = *(void *)(v8 + 24 * v3 + 8);
        uint64_t v11 = a1[1];
        unint64_t v10 = (unint64_t)a1[2];
        if ((unint64_t)v11 >= v10)
        {
          uint64_t v13 = *a1;
          uint64_t v14 = (v11 - *a1) >> 2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v10 - (void)v13;
          if (v16 >> 1 > v15) {
            unint64_t v15 = v16 >> 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7, v17);
            uint64_t v13 = *a1;
            uint64_t v11 = a1[1];
          }
          else
          {
            int v18 = 0;
          }
          int v19 = &v18[4 * v14];
          *(_DWORD *)int v19 = *(_DWORD *)(v9 - 4);
          uint64_t v12 = v19 + 4;
          while (v11 != v13)
          {
            int v20 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          *a1 = v19;
          a1[1] = v12;
          a1[2] = &v18[4 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v11 = *(_DWORD *)(v9 - 4);
          uint64_t v12 = v11 + 4;
        }
        a1[1] = v12;
      }
      else
      {
        std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)a1, (uint64_t)a1[1], (char *)(*(void *)(v8 + 24 * v3 + 8) - 4 * *(int *)(a2 + 1348) - 4), *(char **)(v8 + 24 * v3 + 8), (4 - -4 * *(int *)(a2 + 1348)) >> 2);
      }
    }
    while (v3-- > 0);
  }
}

void sub_20D37EA10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double EspressoWaveRNNFusedSubscaleCPUProcessor::reset(EspressoWaveRNNFusedSubscaleCPUProcessor *this)
{
  EspressoWaveRNNProcessor::reset(this);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 173);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 176);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 173, *((int *)this + 336));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 176, *((int *)this + 336));
  unint64_t v2 = -1431655765 * ((*((void *)this + 174) - *((void *)this + 173)) >> 3) - 1;
  if ((v2 & 0x80000000) == 0)
  {
    int v3 = 0;
    uint64_t v4 = 24 * v2;
    do
    {
      if (-1 - 0x5555555555555555 * ((uint64_t)(*((void *)this + 174) - *((void *)this + 173)) >> 3) <= v2) {
        int v5 = 1;
      }
      else {
        int v5 = *((_DWORD *)this + 337) + 1;
      }
      v3 += v5;
      int v13 = 0;
      std::vector<float>::vector(&v14, v3, &v13);
      uint64_t v6 = *((void *)this + 173) + v4;
      uint64_t v7 = *(void **)v6;
      if (*(void *)v6)
      {
        *(void *)(v6 + 8) = v7;
        operator delete(v7);
        *(void *)uint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        *(void *)(v6 + 16) = 0;
      }
      *(_OWORD *)uint64_t v6 = v14;
      *(void *)(v6 + 16) = v15;
      int v13 = 0;
      std::vector<float>::vector(&v14, v3, &v13);
      uint64_t v8 = *((void *)this + 176) + v4;
      uint64_t v9 = *(void **)v8;
      if (*(void *)v8)
      {
        *(void *)(v8 + 8) = v9;
        operator delete(v9);
        *(void *)uint64_t v8 = 0;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
      }
      *(_OWORD *)uint64_t v8 = v14;
      *(void *)(v8 + 16) = v15;
      v4 -= 24;
    }
    while ((uint64_t)v2-- > 0);
  }
  EspressoWaveRNNFusedSubscaleCPUProcessor::get_receptive_field_from_previous_samples((char **)&v14, (uint64_t)this, (uint64_t *)this + 173);
  uint64_t v11 = (void *)*((void *)this + 170);
  if (v11)
  {
    *((void *)this + 171) = v11;
    operator delete(v11);
  }
  double result = *(double *)&v14;
  *((_OWORD *)this + 85) = v14;
  *((void *)this + 172) = v15;
  return result;
}

void EspressoWaveRNNFusedSubscaleCPUProcessor::~EspressoWaveRNNFusedSubscaleCPUProcessor(EspressoWaveRNNFusedSubscaleCPUProcessor *this)
{
  *(void *)this = &off_26C205670;
  int v3 = (void **)((char *)this + 1408);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = (void **)((char *)this + 1384);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = (void *)*((void *)this + 170);
  if (v2)
  {
    *((void *)this + 171) = v2;
    operator delete(v2);
  }
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  MEMORY[0x2105595E0]();
}

{
  void *v2;
  void **v3;

  *(void *)this = &off_26C205670;
  int v3 = (void **)((char *)this + 1408);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = (void **)((char *)this + 1384);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = (void *)*((void *)this + 170);
  if (v2)
  {
    *((void *)this + 171) = v2;
    operator delete(v2);
  }
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
}

void EspressoWaveRNNSingleSoftmaxProcessor::process(EspressoWaveRNNSingleSoftmaxProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, void *a3@<X8>)
{
  unint64_t v31 = *((void *)this + 4);
  if (*((unsigned char *)this + 40))
  {
    uint64_t v6 = (float *)*((void *)a2 + 10);
    if (v6 != *((float **)a2 + 11)) {
      unint64_t v31 = (unint64_t)(float)((float)v31 / *v6);
    }
  }
  uint64_t v7 = *((void *)this + 73);
  uint64_t v8 = (void *)*((void *)this + 8);
  uint64_t v9 = (void *)*((void *)this + 29);
  unint64_t v10 = (const void *)*((void *)this + 50);
  std::vector<short>::vector(a3, v31 * 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  uint64_t v11 = *((void *)a2 + 1);
  if (*((void *)a2 + 2) != v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    float v30 = a2;
    do
    {
      uint64_t v32 = v13;
      uint64_t v14 = v11 + 24 * v13;
      uint64_t v15 = *(unsigned char **)v14;
      uint64_t v16 = *(unsigned char **)(v14 + 8);
      if (v16 != v15) {
        memmove(v8, v15, v16 - v15);
      }
      uint64_t v33 = v12;
      for (unint64_t i = v31; i; --i)
      {
        int v18 = espresso_plan_execute_sync();
        std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute.");
        if (v18)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          int v26 = v35;
          uint64_t v27 = (void **)__p[0];
          status_string = (const char *)espresso_get_status_string();
          uint64_t v29 = __p;
          if (v26 < 0) {
            uint64_t v29 = v27;
          }
          StringFormatter::StringFormatter((StringFormatter *)v36, "%s Error: %d, %s", (const char *)v29, v18, status_string);
          MEMORY[0x210558D40](exception, v36);
          __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v35 < 0) {
          operator delete(__p[0]);
        }
        float v19 = (float)(__int16)random_sample(*((float **)this + 84), (float *)(*((void *)this + 84) + 4 * *((void *)this + 73)));
        float v20 = (float)((float)(v19 / 255.0) * 2.0) + -1.0;
        float v21 = 0.0;
        if (v20 > 0.0) {
          float v21 = 1.0;
        }
        if (v20 >= 0.0) {
          float v22 = v21;
        }
        else {
          float v22 = -1.0;
        }
        float v23 = (float)((float)((float)(exp2f(fabsf(v20) * 8.0) + -1.0) * 0.0039216) * v22)
            + (float)(*((float *)this + 148) * 0.86);
        if (v23 < -1.0) {
          float v23 = -1.0;
        }
        if (v23 > 1.0) {
          float v23 = 1.0;
        }
        *((float *)this + 148) = v23;
        *(_WORD *)(*a3 + v12) = (int)(float)(v23 * 32767.0);
        uint64_t v24 = *((void *)this + 71);
        if (v24) {
          memmove(v9, v10, 4 * v24);
        }
        *((float *)v8 + *((void *)this + 72) - 1) = (float)(v19 / (float)((float)(unint64_t)(v7 - 1) * 0.5))
                                                    + -1.0;
        v12 += 2;
      }
      uint64_t v13 = v32 + 1;
      uint64_t v11 = *((void *)v30 + 1);
      uint64_t v12 = v33 + 2 * v31;
    }
    while (v32 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v30 + 2) - v11) >> 3));
  }
}

void sub_20D37EFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      if (a23 < 0) {
        operator delete(a18);
      }
      uint64_t v33 = *(void **)v29;
      if (*(void *)v29)
      {
        *(void *)(v29 + 8) = v33;
        operator delete(v33);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

uint64_t random_sample(float *a1, float *a2)
{
  {
    unsigned int v29 = 0;
    random_sample(float *,float *)::gen[0] = 0;
    for (uint64_t i = 1; i != 624; ++i)
    {
      unsigned int v29 = i + 1812433253 * (v29 ^ (v29 >> 30));
      random_sample(float *,float *)::gen[i] = v29;
    }
    qword_267703C60 = 0;
  }
  __p = 0;
  long long v32 = 0uLL;
  if (a2 != a1)
  {
    std::vector<double>::__vallocate[abi:ne180100](&__p, a2 - a1);
    uint64_t v4 = (double *)v32;
    do
    {
      float v5 = *a1++;
      *v4++ = v5;
    }
    while (a1 != a2);
    *(void *)&long long v32 = v4;
    uint64_t v6 = (double *)__p;
    if (__p != v4)
    {
      if ((unint64_t)((char *)v4 - (unsigned char *)__p) < 9)
      {
        *(void *)&long long v32 = __p;
        if (*((void **)&v32 + 1) != __p)
        {
          __p = 0;
          long long v32 = 0uLL;
          if (v6) {
            goto LABEL_20;
          }
        }
      }
      else
      {
        uint64_t v7 = ((char *)v4 - (unsigned char *)__p) >> 3;
        double v8 = 0.0;
        uint64_t v9 = (double *)__p;
        do
        {
          double v10 = *v9++;
          double v8 = v8 + v10;
        }
        while (v9 != v4);
        while (v6 < v4)
        {
          *uint64_t v6 = *v6 / v8;
          ++v6;
        }
        std::vector<double>::vector(&v33, v7 - 1);
        uint64_t v6 = (double *)__p;
        uint64_t v11 = (double *)(v32 - 8);
        uint64_t v12 = v33;
        if (__p != (void *)(v32 - 8))
        {
          uint64_t v13 = (double *)((char *)__p + 8);
          double v14 = *(double *)__p;
          double *v33 = *(double *)__p;
          if (v6 + 1 != v11)
          {
            uint64_t v15 = v12 + 1;
            do
            {
              double v16 = *v13++;
              double v14 = v14 + v16;
              *v15++ = v14;
            }
            while (v13 != v11);
          }
        }
        __p = v12;
        uint64_t v17 = *((void *)&v32 + 1);
        long long v32 = v34;
        uint64_t v33 = v6;
        *((void *)&v34 + 1) = v17;
        if (v6)
        {
          *(void *)&long long v34 = v6;
LABEL_20:
          operator delete(v6);
        }
      }
    }
  }
  int v18 = (char *)__p;
  float v19 = (unsigned char *)v32;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v20 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)random_sample(float *,float *)::gen);
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v21 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)random_sample(float *,float *)::gen);
  if (v19 != v18)
  {
    unint64_t v22 = (v19 - v18) >> 3;
    do
    {
      unint64_t v23 = v22 >> 1;
      uint64_t v24 = (double *)&v18[8 * (v22 >> 1)];
      double v26 = *v24;
      uint64_t v25 = v24 + 1;
      v22 += ~(v22 >> 1);
      if (((double)v20 + (double)v21 * 4294967300.0) * 5.42101086e-20 + 0.0 < v26) {
        unint64_t v22 = v23;
      }
      else {
        int v18 = (char *)v25;
      }
    }
    while (v22);
    float v19 = v18;
  }
  uint64_t v27 = __p;
  if (__p)
  {
    *(void *)&long long v32 = __p;
    operator delete(__p);
  }
  return (int)((v19 - v27) >> 3);
}

void sub_20D37F2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWaveRNNSingleSoftmaxProcessor::~EspressoWaveRNNSingleSoftmaxProcessor(EspressoWaveRNNSingleSoftmaxProcessor *this)
{
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  JUMPOUT(0x2105595E0);
}

void *EspressoWaveRNNDualSoftmaxProcessor::process@<X0>(EspressoWaveRNNDualSoftmaxProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, void *a3@<X8>)
{
  unint64_t v38 = *((void *)this + 4);
  if (*((unsigned char *)this + 40))
  {
    uint64_t v6 = (float *)*((void *)a2 + 10);
    if (v6 != *((float **)a2 + 11)) {
      unint64_t v38 = (unint64_t)(float)((float)v38 / *v6);
    }
  }
  uint64_t v7 = *((void *)this + 73);
  double v8 = (char *)*((void *)this + 8);
  uint64_t v9 = (void *)*((void *)this + 29);
  double v10 = (const void *)*((void *)this + 50);
  double result = std::vector<short>::vector(a3, v38 * 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  uint64_t v12 = *((void *)a2 + 1);
  if (*((void *)a2 + 2) != v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    float v15 = (float)(unint64_t)(v7 - 1) * 0.5;
    uint64_t v37 = a2;
    do
    {
      uint64_t v39 = v14;
      uint64_t v16 = v12 + 24 * v14;
      uint64_t v17 = *(unsigned char **)v16;
      int v18 = *(unsigned char **)(v16 + 8);
      if (v18 != v17) {
        double result = memmove(v8, v17, v18 - v17);
      }
      uint64_t v40 = v13;
      for (unint64_t i = v38; i; --i)
      {
        *(_DWORD *)&v8[4 * *((void *)this + 72) - 4] = 0;
        int v20 = espresso_plan_execute_sync();
        std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute.");
        if (v20)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          int v33 = v44;
          long long v34 = (void **)__p[0];
          status_string = (const char *)espresso_get_status_string();
          int v36 = __p;
          if (v33 < 0) {
            int v36 = v34;
          }
          StringFormatter::StringFormatter((StringFormatter *)v45, "%s Error: %d, %s", (const char *)v36, v20, status_string);
          MEMORY[0x210558D40](exception, v45);
          __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v44 < 0) {
          operator delete(__p[0]);
        }
        __int16 v21 = random_sample(*((float **)this + 84), (float *)(*((void *)this + 84) + 4 * *((void *)this + 73)));
        float v22 = (float)((float)v21 / v15) + -1.0;
        *(float *)&v8[4 * *((void *)this + 72) - 4] = v22;
        int v23 = espresso_plan_execute_sync();
        std::string::basic_string[abi:ne180100]<0>(v41, "Unable to execute.");
        if (v23)
        {
          uint64_t v27 = __cxa_allocate_exception(0x10uLL);
          int v28 = v42;
          unsigned int v29 = (void **)v41[0];
          float v30 = (const char *)espresso_get_status_string();
          int v31 = v41;
          if (v28 < 0) {
            int v31 = v29;
          }
          StringFormatter::StringFormatter((StringFormatter *)v45, "%s Error: %d, %s", (const char *)v31, v23, v30);
          MEMORY[0x210558D40](v27, v45);
          __cxa_throw(v27, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v42 < 0) {
          operator delete(v41[0]);
        }
        double result = (void *)random_sample(*((float **)this + 105), (float *)(*((void *)this + 105) + 4 * *((void *)this + 73)));
        __int16 v24 = (__int16)result;
        uint64_t v25 = (float *)&v8[4 * *((void *)this + 72)];
        *(v25 - 3) = v22;
        *(v25 - 2) = (float)((float)(__int16)result / v15) + -1.0;
        uint64_t v26 = *((void *)this + 71);
        if (v26) {
          double result = memmove(v9, v10, 4 * v26);
        }
        *(_WORD *)(*a3 + v13) = (v24 + (v21 << 8)) ^ 0x8000;
        v13 += 2;
      }
      uint64_t v14 = v39 + 1;
      uint64_t v12 = *((void *)v37 + 1);
      uint64_t v13 = v40 + 2 * v38;
    }
    while (v39 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v37 + 2) - v12) >> 3));
  }
  return result;
}

void sub_20D37F670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0) {
        operator delete(a23);
      }
      unint64_t v38 = *(void **)v34;
      if (*(void *)v34)
      {
        *(void *)(v34 + 8) = v38;
        operator delete(v38);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

void EspressoWaveRNNDualSoftmaxProcessor::~EspressoWaveRNNDualSoftmaxProcessor(EspressoWaveRNNDualSoftmaxProcessor *this)
{
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  JUMPOUT(0x2105595E0);
}

void EspressoWaveRNNModule::process_data(void **a1, uint64_t *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_DEBUG, "Espresso WaveRNN Inference begin.", buf, 2u);
  }
  Diagnostics::log(7, "Espresso WaveRNN Inference begin.", v5);
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v9 = *(void *)(*(void *)v7 + 8);
  unint64_t v8 = *(void *)(*(void *)v7 + 16);
  v40[0] = v9;
  v40[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  int v33 = (std::__shared_weak_count *)v8;
  uint64_t v11 = *(std::__shared_weak_count **)(*(void *)v10 + 16);
  v39[0] = *(void *)(*(void *)v10 + 8);
  v39[1] = (unint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*(_DWORD *)(v9 + 104)) {
    (*(void (**)(void *))(*a1[34] + 32))(a1[34]);
  }
  uint64_t v13 = (EspressoWaveRNNProcessor *)a1[34];
  *((unsigned char *)v13 + 40) = v12;
  EspressoWaveRNNProcessor::safe_process(v13, (const WaveNetFeature *)v9);
  uint64_t v14 = (char *)operator new(0x90uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = off_26C216718;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *((void *)v14 + 17) = 0;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_WORD *)v14 + 12) = 257;
  *((void *)v14 + 12) = 0;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *((void *)v14 + 15) = 0;
  *((void *)v14 + 16) = 0;
  *((_WORD *)v14 + 68) = 0;
  v36[0] = (unint64_t)(v14 + 24);
  v36[1] = (unint64_t)v14;
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((void *)v14 + 10, (__int16 *)__p, v38, ((char *)v38 - (unsigned char *)__p) >> 1);
  v14[24] = *(_DWORD *)(v9 + 104) == 0;
  v14[25] = *(unsigned char *)(v9 + 1);
  v14[137] = *(unsigned char *)(v9 + 109);
  if (*(unsigned char *)(v9 + 108)) {
    *((_DWORD *)v14 + 26) = 1;
  }
  float v15 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v15 + 8) = 0u;
  *(void *)float v15 = off_26C215330;
  *((_OWORD *)v15 + 2) = 0u;
  *((void *)v15 + 3) = v15 + 32;
  uint64_t v16 = (uint64_t)(v15 + 24);
  Agglomerate::set<std::shared_ptr<WaveNetFeature>>((uint64_t)(v15 + 24), v40);
  Agglomerate::set<std::shared_ptr<AudioSegmentation>>((uint64_t)(v15 + 24), v36);
  Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v15 + 24), v39);
  uint64_t v17 = *a2;
  int v18 = *(void **)(*a2 + 8);
  {
    int v20 = *(std::__shared_weak_count **)(*(void *)v19 + 16);
    *(void *)buf = *(void *)(*(void *)v19 + 8);
    *(void *)&uint8_t buf[8] = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v16, (unint64_t *)buf);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    uint64_t v17 = *a2;
    int v18 = *(void **)(*a2 + 8);
  }
  {
    Agglomerate::set<std::shared_ptr<std::vector<TTSSynthesizer::Marker>>>(v16, (unint64_t *)(*(void *)v21 + 8));
  }
  uint64_t v34 = v15 + 24;
  char v35 = (std::__shared_weak_count *)v15;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
  ((void (*)(void **, char **))(*a1)[9])(a1, &v34);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = (std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_) / 1000000;
  uint64_t v23 = (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3;
  float v24 = (float)(0xAAAAAAAAAAAAAAAELL * v23);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * v23;
  uint64_t v26 = Diagnostics_GetLogObject(void)::__profile_log_default;
  float v27 = v24 / (float)v22;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v29 = a1[34];
    float v30 = v29 + 1;
    if (*((char *)v29 + 31) < 0) {
      float v30 = (void *)*v30;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = v30;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v25;
    __int16 v42 = 2048;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = v22;
    __int16 v44 = 2048;
    double v45 = v27;
    _os_log_impl(&dword_20CD80000, v26, OS_LOG_TYPE_DEFAULT, "WaveRNN %s generated %zu frames, latency: %lld ms, RTF: %.2f", buf, 0x2Au);
  }
  int v31 = a1[34];
  long long v32 = v31 + 1;
  if (*((char *)v31 + 31) < 0) {
    long long v32 = (void *)*v32;
  }
  Diagnostics::log(5, "WaveRNN %s generated %zu frames, latency: %lld ms, RTF: %.2f", v28, v32, v25, v22, v27);
  kdebug_trace();
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
  if (__p)
  {
    unint64_t v38 = (__int16 *)__p;
    operator delete(__p);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_20D37FCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWaveRNNModule::prepare(EspressoWaveRNNProcessor **this)
{
}

void EspressoWaveRNNModule::~EspressoWaveRNNModule(EspressoWaveRNNModule *this)
{
  *(void *)this = off_26C202EE8;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C202EE8;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
}

void EspressoWaveRNNModel::~EspressoWaveRNNModel(EspressoWaveRNNModel *this)
{
  *((void *)this + 1) = 0;
  espresso_context_destroy();
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

uint64_t EspressoWaveRNNModule::is_ane_model_compiled(uint64_t *a1, long long ***a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!NeuralTTSUtils::is_ane_available((NeuralTTSUtils *)a1)) {
    return 0;
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)a1;
  __p.__r_.__value_.__r.__words[2] = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0x8000000000000000;
  int v4 = *(unsigned __int8 *)a1;
  if (v4 == 1)
  {
    __p.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(a1[1], "ane_model_path");
    int v4 = *(unsigned __int8 *)a1;
  }
  else
  {
    if (v4 == 2)
    {
      uint64_t v5 = a1[1];
      __p.__r_.__value_.__r.__words[2] = *(void *)(v5 + 8);
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)a1;
      buf.__r_.__value_.__r.__words[2] = 0;
      uint64_t v18 = 0;
      unint64_t v19 = 0x8000000000000000;
LABEL_10:
      buf.__r_.__value_.__r.__words[2] = *(void *)(v5 + 8);
      goto LABEL_13;
    }
    unint64_t v16 = 1;
  }
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)a1;
  buf.__r_.__value_.__r.__words[2] = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0x8000000000000000;
  if (v4 == 1)
  {
    buf.__r_.__value_.__l.__size_ = a1[1] + 8;
  }
  else
  {
    if (v4 == 2)
    {
      uint64_t v5 = a1[1];
      goto LABEL_10;
    }
    unint64_t v19 = 1;
  }
LABEL_13:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&buf))
  {
    return 0;
  }
  SharedObjectPool::get<VoiceConfig>(&v12, *a2);
  uint64_t v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a1, "ane_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_20:
      if (p_p->__r_.__value_.__s.__data_[0] != 47)
      {
        (*(void (**)(std::string *__return_ptr))(*(void *)v12 + 40))(&buf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = buf;
      }
    }
  }
  else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    p_p = &__p;
    goto LABEL_20;
  }
  uint64_t has_network = espresso_ane_cache_has_network();
  if (has_network)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = has_network;
      _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_ERROR, "Unable to query ANE model compilation state, err: %d", (uint8_t *)&buf, 8u);
    }
    Diagnostics::log(3, "Unable to query ANE model compilation state, err: %d", v11, has_network);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return 0;
}

void sub_20D38013C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void SharedObjectPool::inject<EspressoWaveRNNANEStatus>(_OWORD *a1, uint64_t a2, unint64_t *a3)
{
  std::chrono::steady_clock::time_point v6 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  uint64_t v12 = &v14;
  if (!v7) {
    operator new();
  }
  unint64_t v8 = *a3;
  unint64_t v9 = a3[1];
  uint64_t v12 = (char ***)off_26C206618;
  *(void *)&long long v13 = v8;
  *((void *)&v13 + 1) = v9;
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    long long v10 = v13;
  }
  else
  {
    long long v10 = v8;
  }
  long long v13 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(v7 + 16);
  *(_OWORD *)(v7 + 8) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    uint64_t v12 = (char ***)off_26C206618;
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  *a1 = *(_OWORD *)a3;
  *a3 = 0;
  a3[1] = 0;
  std::recursive_mutex::unlock(v6);
}

void sub_20D380300(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<EspressoWaveRNNFusedSubscalingANEModel,std::allocator<EspressoWaveRNNFusedSubscalingANEModel>,std::string &,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned char *a4, std::__shared_weak_count *a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unint64_t v9 = (std::string *)operator new(0x70uLL);
  long long v10 = (std::string::__raw *)v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C2189E0;
  if (a5) {
    atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v9[1].__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = v9 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10[2].__words[2] = *(void *)(a2 + 16);
  }
  v10[3].__words[0] = 0;
  v10[3].__words[1] = 0;
  uint64_t v12 = (uint64_t *)&v10[1];
  v10[3].__words[2] = 0;
  if (a5)
  {
    atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
    v10[3].__words[1] = (std::string::size_type)a5;
  }
  else
  {
    v10[3].__words[1] = 0;
  }
  v10[3].__words[0] = (std::string::size_type)a4;
  if (a4 && !*a4)
  {
    LODWORD(__p[0]) = 0;
    uint64_t has_network = espresso_ane_cache_has_network();
    if (has_network)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v40) = has_network;
        _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_ERROR, "Unable to query ANE model compilation state, err: %d", buf, 8u);
      }
      Diagnostics::log(3, "Unable to query ANE model compilation state, err: %d", v15, has_network);
    }
    else
    {
      *(unsigned char *)v10[3].__words[0] = LODWORD(__p[0]) != 0;
    }
  }
  kdebug_trace();
  uint64_t context = espresso_create_context();
  *uint64_t v12 = context;
  if (!context)
  {
    *uint64_t v12 = espresso_create_context();
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_INFO, "ANE is not supported on this device. Fall back to CPU.", buf, 2u);
    }
    Diagnostics::log(6, "ANE is not supported on this device. Fall back to CPU.", v18);
  }
  espresso_create_plan();
  int v19 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to load network.");
  if (v19)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v26 = v38;
    float v27 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    unsigned int v29 = __p;
    if (v26 < 0) {
      unsigned int v29 = v27;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v29, v19, status_string);
    MEMORY[0x210558D40](exception, buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  v10[3].__words[2] = espresso_create_context();
  espresso_create_plan();
  int v20 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(v35, "Unable to load gumbel network.");
  if (v20)
  {
    float v30 = __cxa_allocate_exception(0x10uLL);
    int v31 = v36;
    long long v32 = (void **)v35[0];
    int v33 = (const char *)espresso_get_status_string();
    uint64_t v34 = v35;
    if (v31 < 0) {
      uint64_t v34 = v32;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v34, v20, v33);
    MEMORY[0x210558D40](v30, buf);
    __cxa_throw(v30, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v23 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v23 = *(const std::string::value_type **)a2;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v40 = v23;
    _os_log_impl(&dword_20CD80000, v21, OS_LOG_TYPE_INFO, "Successfully loaded WaveRNN FUSED ANE model from path: %s", buf, 0xCu);
  }
  if (*(char *)(a2 + 23) >= 0) {
    float v24 = (const std::string::value_type *)a2;
  }
  else {
    float v24 = *(const std::string::value_type **)a2;
  }
  Diagnostics::log(6, "Successfully loaded WaveRNN FUSED ANE model from path: %s", v22, v24);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  *a1 = v12;
  a1[1] = (uint64_t *)v10;
}

void sub_20D38082C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v33);
  }
  EspressoWaveRNNModel::~EspressoWaveRNNModel(v32);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v35);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<EspressoWaveRNNANEModel,std::allocator<EspressoWaveRNNANEModel>,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>(uint64_t **a1, uint64_t a2, unsigned char *a3, std::__shared_weak_count *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t v8 = (std::string *)operator new(0x58uLL);
  unint64_t v9 = (std::string::__raw *)v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C2175F8;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[1].__r_.__value_.__r.__words[0] = 0;
  long long v10 = v8 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v9[2].__words[2] = *(void *)(a2 + 16);
  }
  uint64_t v11 = (uint64_t *)&v9[1];
  v9[3].__words[0] = 0;
  v9[3].__words[1] = 0;
  if (a4)
  {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
    v9[3].__words[1] = (std::string::size_type)a4;
  }
  else
  {
    v9[3].__words[1] = 0;
  }
  v9[3].__words[0] = (std::string::size_type)a3;
  if (a3 && !*a3)
  {
    LODWORD(__p[0]) = 0;
    uint64_t has_network = espresso_ane_cache_has_network();
    if (has_network)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      long long v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v31) = has_network;
        _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_ERROR, "Unable to query ANE model compilation state, err: %d", buf, 8u);
      }
      Diagnostics::log(3, "Unable to query ANE model compilation state, err: %d", v14, has_network);
    }
    else
    {
      *(unsigned char *)v9[3].__words[0] = LODWORD(__p[0]) != 0;
    }
  }
  kdebug_trace();
  uint64_t context = espresso_create_context();
  *uint64_t v11 = context;
  if (!context)
  {
    *uint64_t v11 = espresso_create_context();
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v16, OS_LOG_TYPE_INFO, "ANE is not supported on this device. Fall back to CPU.", buf, 2u);
    }
    Diagnostics::log(6, "ANE is not supported on this device. Fall back to CPU.", v17);
  }
  espresso_create_plan();
  int v18 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to load network.");
  if (v18)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v24 = v29;
    unint64_t v25 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    float v27 = __p;
    if (v24 < 0) {
      float v27 = v25;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v27, v18, status_string);
    MEMORY[0x210558D40](exception, buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v21 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v21 = *(const std::string::value_type **)a2;
    }
    *(_DWORD *)std::string buf = 136315138;
    int v31 = v21;
    _os_log_impl(&dword_20CD80000, v19, OS_LOG_TYPE_INFO, "Successfully loaded WaveRNN ANE model from path: %s", buf, 0xCu);
  }
  if (*(char *)(a2 + 23) >= 0) {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = (const std::string::value_type *)a2;
  }
  else {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = *(const std::string::value_type **)a2;
  }
  Diagnostics::log(6, "Successfully loaded WaveRNN ANE model from path: %s", v20, v22);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *a1 = v11;
  a1[1] = (uint64_t *)v9;
}

void sub_20D380D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v26);
  }
  EspressoWaveRNNModel::~EspressoWaveRNNModel(v25);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v28);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EspressoWaveRNNCPUModel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<EspressoWaveRNNCPUModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNCPUModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNANEModel>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  EspressoWaveRNNModel::~EspressoWaveRNNModel((EspressoWaveRNNModel *)(a1 + 24));
}

void std::__shared_ptr_emplace<EspressoWaveRNNANEModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2175F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNANEModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2175F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEModel>::__on_zero_shared(uint64_t a1)
{
  espresso_plan_destroy();
  espresso_context_destroy();
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  EspressoWaveRNNModel::~EspressoWaveRNNModel((EspressoWaveRNNModel *)(a1 + 24));
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2189E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2189E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::ItemHolder<std::shared_ptr<EspressoWaveRNNANEStatus>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206618;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<EspressoWaveRNNANEStatus>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206618;
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<EspressoWaveRNNANEStatus>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2177B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNANEStatus>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2177B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void EspressoWaveRNNPersistentModule::~EspressoWaveRNNPersistentModule(void **this)
{
  *this = off_26C204F08;
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  unint64_t v2 = (std::__shared_weak_count *)this[38];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = off_26C204F08;
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  unint64_t v2 = (std::__shared_weak_count *)this[38];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule(this);
}

uint64_t EspressoWaveRNNSubscalingANEProcessor::EspressoWaveRNNSubscalingANEProcessor(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &off_26C203B90;
  uint64_t v4 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Stub");
  *(unsigned char *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  MEMORY[0x210559270](a1 + 600);
  *(unsigned char *)(a1 + 664) = 0;
  *(void *)a1 = &off_26C2055A0;
  *(_DWORD *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1360) = 0u;
  MEMORY[0x210558E70](v4, "ANE");
  uint64_t v5 = *a2;
  uint64_t v6 = *a2 + 8;
  *(void *)(a1 + 48) = *a2;
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(v5 + 48);
  unint64_t v8 = *(std::__shared_weak_count **)(v5 + 56);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1360) = v7;
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 1368);
  *(void *)(a1 + 1368) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  espresso_network_declare_output();
  espresso_network_declare_output();
  espresso_network_declare_output();
  int v10 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v73, "Unable to build ANE plan.");
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v20 = v74;
    uint64_t v21 = (const char *)v73[0];
    status_string = (const char *)espresso_get_status_string();
    uint64_t v23 = (const char *)v73;
    if (v20 < 0) {
      uint64_t v23 = v21;
    }
    StringFormatter::StringFormatter((StringFormatter *)v75, "%s Error: %d, %s", v23, v10, status_string);
    MEMORY[0x210558D40](exception, v75);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  int v11 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v71, "Unable to bind hidden state.");
  if (v11)
  {
    int v24 = __cxa_allocate_exception(0x10uLL);
    int v25 = v72;
    int v26 = (const char *)v71[0];
    float v27 = (const char *)espresso_get_status_string();
    int v28 = (const char *)v71;
    if (v25 < 0) {
      int v28 = v26;
    }
    StringFormatter::StringFormatter((StringFormatter *)v75, "%s Error: %d, %s", v28, v11, v27);
    MEMORY[0x210558D40](v24, v75);
    __cxa_throw(v24, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  int v12 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind ane coarse input.");
  if (v12)
  {
    char v29 = __cxa_allocate_exception(0x10uLL);
    int v30 = v70;
    int v31 = (void **)__p[0];
    uint64_t v32 = (const char *)espresso_get_status_string();
    int v33 = __p;
    if (v30 < 0) {
      int v33 = v31;
    }
    StringFormatter::StringFormatter((StringFormatter *)v75, "%s Error: %d, %s", (const char *)v33, v12, v32);
    MEMORY[0x210558D40](v29, v75);
    __cxa_throw(v29, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v70 < 0) {
    operator delete(__p[0]);
  }
  int v13 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v67, "Unable to bind ane fine input.");
  if (v13)
  {
    uint64_t v34 = __cxa_allocate_exception(0x10uLL);
    int v35 = v68;
    char v36 = (void **)v67[0];
    uint64_t v37 = (const char *)espresso_get_status_string();
    char v38 = v67;
    if (v35 < 0) {
      char v38 = v36;
    }
    StringFormatter::StringFormatter((StringFormatter *)v75, "%s Error: %d, %s", (const char *)v38, v13, v37);
    MEMORY[0x210558D40](v34, v75);
    __cxa_throw(v34, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v68 < 0) {
    operator delete(v67[0]);
  }
  int v14 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v65, "Unable to bind input.");
  if (v14)
  {
    uint64_t v39 = __cxa_allocate_exception(0x10uLL);
    int v40 = v66;
    uint64_t v41 = (void **)v65[0];
    __int16 v42 = (const char *)espresso_get_status_string();
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = v65;
    if (v40 < 0) {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = v41;
    }
    StringFormatter::StringFormatter((StringFormatter *)v75, "%s Error: %d, %s", (const char *)v43, v14, v42);
    MEMORY[0x210558D40](v39, v75);
    __cxa_throw(v39, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  int v15 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v63, "Unable to bind output_new_hidden.");
  if (v15)
  {
    __int16 v44 = __cxa_allocate_exception(0x10uLL);
    int v45 = v64;
    uint64_t v46 = (void **)v63[0];
    uint64_t v47 = (const char *)espresso_get_status_string();
    uint64_t v48 = v63;
    if (v45 < 0) {
      uint64_t v48 = v46;
    }
    StringFormatter::StringFormatter((StringFormatter *)v75, "%s Error: %d, %s", (const char *)v48, v15, v47);
    MEMORY[0x210558D40](v44, v75);
    __cxa_throw(v44, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  int v16 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v61, "Unable to bind coarse bit scaled.");
  if (v16)
  {
    float v49 = __cxa_allocate_exception(0x10uLL);
    int v50 = v62;
    float v51 = (void **)v61[0];
    float v52 = (const char *)espresso_get_status_string();
    unint64_t v53 = v61;
    if (v50 < 0) {
      unint64_t v53 = v51;
    }
    StringFormatter::StringFormatter((StringFormatter *)v75, "%s Error: %d, %s", (const char *)v53, v16, v52);
    MEMORY[0x210558D40](v49, v75);
    __cxa_throw(v49, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  int v17 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v59, "Unable to bind coarse bit scaled.");
  if (v17)
  {
    uint64_t v54 = __cxa_allocate_exception(0x10uLL);
    int v55 = v60;
    unint64_t v56 = (void **)v59[0];
    uint64_t v57 = (const char *)espresso_get_status_string();
    unint64_t v58 = v59;
    if (v55 < 0) {
      unint64_t v58 = v56;
    }
    StringFormatter::StringFormatter((StringFormatter *)v75, "%s Error: %d, %s", (const char *)v58, v17, v57);
    MEMORY[0x210558D40](v54, v75);
    __cxa_throw(v54, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  *(void *)(a1 + 568) = *(void *)(a1 + 312);
  *(void *)(a1 + 576) = *(void *)(a1 + 144);
  *(void *)(a1 + 584) = *(void *)(a1 + 1112);
  *(void *)(a1 + 672) = *(void *)(a1 + 1280);
  **(unsigned char **)(a1 + 1360) = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return a1;
}

void sub_20D381978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v50 - 49) < 0)
  {
    operator delete(*(void **)(v50 - 72));
    if ((v49 & 1) == 0)
    {
LABEL_6:
      if (a17 < 0) {
        operator delete(__p);
      }
      float v52 = (std::__shared_weak_count *)*((void *)v47 + 171);
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(v47);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

uint64_t EspressoWaveRNNFusedSubscalingANEProcessor::EspressoWaveRNNFusedSubscalingANEProcessor(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &off_26C203B90;
  uint64_t v4 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Stub");
  *(unsigned char *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  MEMORY[0x210559270](a1 + 600);
  *(unsigned char *)(a1 + 664) = 0;
  *(void *)a1 = &off_26C2056C8;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  MEMORY[0x210558E70](v4, "FusedANE");
  uint64_t v5 = *a2;
  uint64_t v6 = *a2 + 8;
  *(void *)(a1 + 48) = *a2;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 680) = v5 + 64;
  *(void *)(a1 + 688) = v5 + 72;
  uint64_t v7 = *(void *)(v5 + 48);
  unint64_t v8 = *(std::__shared_weak_count **)(v5 + 56);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 2056) = v7;
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 2064);
  *(void *)(a1 + 2064) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  espresso_network_declare_output();
  espresso_network_declare_output();
  espresso_network_declare_output();
  int v10 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v113, "Unable to build ANE plan.");
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v25 = v114;
    int v26 = (const char *)v113[0];
    status_string = (const char *)espresso_get_status_string();
    int v28 = (const char *)v113;
    if (v25 < 0) {
      int v28 = v26;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", v28, v10, status_string);
    MEMORY[0x210558D40](exception, v115);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v114 < 0) {
    operator delete(v113[0]);
  }
  int v11 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v111, "Unable to bind hidden state_odd.");
  if (v11)
  {
    char v29 = __cxa_allocate_exception(0x10uLL);
    int v30 = v112;
    int v31 = (const char *)v111[0];
    uint64_t v32 = (const char *)espresso_get_status_string();
    int v33 = (const char *)v111;
    if (v30 < 0) {
      int v33 = v31;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", v33, v11, v32);
    MEMORY[0x210558D40](v29, v115);
    __cxa_throw(v29, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v112 < 0) {
    operator delete(v111[0]);
  }
  int v12 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v109, "Unable to bind ane fine input.");
  if (v12)
  {
    uint64_t v34 = __cxa_allocate_exception(0x10uLL);
    int v35 = v110;
    char v36 = (const char *)v109[0];
    uint64_t v37 = (const char *)espresso_get_status_string();
    char v38 = (const char *)v109;
    if (v35 < 0) {
      char v38 = v36;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", v38, v12, v37);
    MEMORY[0x210558D40](v34, v115);
    __cxa_throw(v34, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v110 < 0) {
    operator delete(v109[0]);
  }
  int v13 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v107, "Unable to bind ane coarse input.");
  if (v13)
  {
    uint64_t v39 = __cxa_allocate_exception(0x10uLL);
    int v40 = v108;
    uint64_t v41 = (const char *)v107[0];
    __int16 v42 = (const char *)espresso_get_status_string();
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = (const char *)v107;
    if (v40 < 0) {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = v41;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", v43, v13, v42);
    MEMORY[0x210558D40](v39, v115);
    __cxa_throw(v39, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v108 < 0) {
    operator delete(v107[0]);
  }
  int v14 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v105, "Unable to bind ane x2t_1 input.");
  if (v14)
  {
    __int16 v44 = __cxa_allocate_exception(0x10uLL);
    int v45 = v106;
    uint64_t v46 = (const char *)v105[0];
    uint64_t v47 = (const char *)espresso_get_status_string();
    uint64_t v48 = (const char *)v105;
    if (v45 < 0) {
      uint64_t v48 = v46;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", v48, v14, v47);
    MEMORY[0x210558D40](v44, v115);
    __cxa_throw(v44, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v106 < 0) {
    operator delete(v105[0]);
  }
  int v15 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind ane x2t_3 input.");
  if (v15)
  {
    int v49 = __cxa_allocate_exception(0x10uLL);
    int v50 = v104;
    float v51 = (void **)__p[0];
    float v52 = (const char *)espresso_get_status_string();
    unint64_t v53 = __p;
    if (v50 < 0) {
      unint64_t v53 = v51;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", (const char *)v53, v15, v52);
    MEMORY[0x210558D40](v49, v115);
    __cxa_throw(v49, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v104 < 0) {
    operator delete(__p[0]);
  }
  int v16 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v101, "Unable to bind input.");
  if (v16)
  {
    uint64_t v54 = __cxa_allocate_exception(0x10uLL);
    int v55 = v102;
    unint64_t v56 = (void **)v101[0];
    uint64_t v57 = (const char *)espresso_get_status_string();
    unint64_t v58 = v101;
    if (v55 < 0) {
      unint64_t v58 = v56;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", (const char *)v58, v16, v57);
    MEMORY[0x210558D40](v54, v115);
    __cxa_throw(v54, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v102 < 0) {
    operator delete(v101[0]);
  }
  int v17 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v99, "Unable to bind O2__rand_v.");
  if (v17)
  {
    unint64_t v59 = __cxa_allocate_exception(0x10uLL);
    int v60 = v100;
    int v61 = (void **)v99[0];
    char v62 = (const char *)espresso_get_status_string();
    int v63 = v99;
    if (v60 < 0) {
      int v63 = v61;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", (const char *)v63, v17, v62);
    MEMORY[0x210558D40](v59, v115);
    __cxa_throw(v59, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v100 < 0) {
    operator delete(v99[0]);
  }
  int v18 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v97, "Unable to bind output_new_hidden_even.");
  if (v18)
  {
    char v64 = __cxa_allocate_exception(0x10uLL);
    int v65 = v98;
    char v66 = (void **)v97[0];
    float v67 = (const char *)espresso_get_status_string();
    char v68 = v97;
    if (v65 < 0) {
      char v68 = v66;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", (const char *)v68, v18, v67);
    MEMORY[0x210558D40](v64, v115);
    __cxa_throw(v64, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  int v19 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v95, "Unable to bind coarse bit scaled.");
  if (v19)
  {
    unint64_t v69 = __cxa_allocate_exception(0x10uLL);
    int v70 = v96;
    int v71 = (void **)v95[0];
    char v72 = (const char *)espresso_get_status_string();
    uint64_t v73 = v95;
    if (v70 < 0) {
      uint64_t v73 = v71;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", (const char *)v73, v19, v72);
    MEMORY[0x210558D40](v69, v115);
    __cxa_throw(v69, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v96 < 0) {
    operator delete(v95[0]);
  }
  int v20 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v93, "Unable to bind fine bit scaled.");
  if (v20)
  {
    char v74 = __cxa_allocate_exception(0x10uLL);
    int v75 = v94;
    unint64_t v76 = (void **)v93[0];
    unint64_t v77 = (const char *)espresso_get_status_string();
    float v78 = v93;
    if (v75 < 0) {
      float v78 = v76;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", (const char *)v78, v20, v77);
    MEMORY[0x210558D40](v74, v115);
    __cxa_throw(v74, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  espresso_network_declare_output();
  int v21 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v91, "Unable to build gumbel CPU plan.");
  if (v21)
  {
    int v79 = __cxa_allocate_exception(0x10uLL);
    int v80 = v92;
    unint64_t v81 = (void **)v91[0];
    uint64_t v82 = (const char *)espresso_get_status_string();
    uint64_t v83 = v91;
    if (v80 < 0) {
      uint64_t v83 = v81;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", (const char *)v83, v21, v82);
    MEMORY[0x210558D40](v79, v115);
    __cxa_throw(v79, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v92 < 0) {
    operator delete(v91[0]);
  }
  int v22 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v89, "Unable to bind fine bit scaled.");
  if (v22)
  {
    unint64_t v84 = __cxa_allocate_exception(0x10uLL);
    int v85 = v90;
    uint64_t v86 = (void **)v89[0];
    unint64_t v87 = (const char *)espresso_get_status_string();
    float v88 = v89;
    if (v85 < 0) {
      float v88 = v86;
    }
    StringFormatter::StringFormatter((StringFormatter *)v115, "%s Error: %d, %s", (const char *)v88, v22, v87);
    MEMORY[0x210558D40](v84, v115);
    __cxa_throw(v84, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v90 < 0) {
    operator delete(v89[0]);
  }
  *(void *)(a1 + 568) = *(void *)(a1 + 312);
  *(void *)(a1 + 576) = *(void *)(a1 + 144);
  *(void *)(a1 + 584) = *(void *)(a1 + 1952);
  *(void *)(a1 + 672) = *(void *)(a1 + 1800);
  **(unsigned char **)(a1 + 2056) = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return a1;
}

void sub_20D382734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (*(char *)(v63 - 49) < 0)
  {
    operator delete(*(void **)(v63 - 72));
    if ((v62 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0) {
        operator delete(__p);
      }
      int v65 = (std::__shared_weak_count *)*((void *)v60 + 258);
      if (v65) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v65);
      }
      EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(v60);
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v61);
  goto LABEL_6;
}

BOOL EspressoWaveRNNModule::has_ota_ane_model(unsigned __int8 *a1)
{
  int v10 = a1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0x8000000000000000;
  int v2 = *a1;
  if (v2 == 1)
  {
    uint64_t v11 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*((void *)a1 + 1), "ane_model_path");
    int v2 = *a1;
  }
  else
  {
    if (v2 == 2)
    {
      uint64_t v3 = *(void *)(*((void *)a1 + 1) + 8);
      uint64_t v12 = v3;
      uint64_t v5 = a1;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      unint64_t v9 = 0x8000000000000000;
      goto LABEL_9;
    }
    unint64_t v14 = 1;
  }
  uint64_t v5 = a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0x8000000000000000;
  if (v2 == 1)
  {
    uint64_t v6 = *((void *)a1 + 1) + 8;
    return !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v10, &v5);
  }
  if (v2 != 2)
  {
    unint64_t v9 = 1;
    return !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v10, &v5);
  }
  uint64_t v3 = *(void *)(*((void *)a1 + 1) + 8);
LABEL_9:
  uint64_t v7 = v3;
  return !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v10, &v5);
}

void EspressoWaveRNNModule::compile_ane_model(unsigned __int8 *a1, long long **a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  SharedObjectPool::get<VoiceConfig>(&v34, a2);
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)a1;
  buf.__r_.__value_.__r.__words[2] = 0;
  uint64_t v32 = 0;
  unint64_t v33 = 0x8000000000000000;
  int v3 = *a1;
  if (v3 == 1)
  {
    buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*((void *)a1 + 1), "ane_model_path");
    int v3 = *a1;
  }
  else
  {
    if (v3 == 2)
    {
      uint64_t v4 = *((void *)a1 + 1);
      buf.__r_.__value_.__r.__words[2] = *(void *)(v4 + 8);
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = (unint64_t)a1;
      v36.__r_.__value_.__r.__words[2] = 0;
      uint64_t v37 = 0;
      unint64_t v38 = 0x8000000000000000;
LABEL_9:
      v36.__r_.__value_.__r.__words[2] = *(void *)(v4 + 8);
      goto LABEL_12;
    }
    unint64_t v33 = 1;
  }
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v36.__r_.__value_.__r.__words[2] = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0x8000000000000000;
  if (v3 == 1)
  {
    v36.__r_.__value_.__l.__size_ = *((void *)a1 + 1) + 8;
  }
  else
  {
    if (v3 == 2)
    {
      uint64_t v4 = *((void *)a1 + 1);
      goto LABEL_9;
    }
    unint64_t v38 = 1;
  }
LABEL_12:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&v36))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEFAULT, "ane_model_path not found, skip OTA ANE compiling", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "ane_model_path not found, skip OTA ANE compiling", v6);
    goto LABEL_73;
  }
  uint64_t v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a1, "ane_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v7, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    if (buf.__r_.__value_.__l.__size_)
    {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_23:
      if (p_buf->__r_.__value_.__s.__data_[0] != 47)
      {
        (*(void (**)(std::string *__return_ptr))(*(void *)v34 + 40))(&v36);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        std::string buf = v36;
      }
    }
  }
  else if (*((unsigned char *)&buf.__r_.__value_.__s + 23))
  {
    p_std::string buf = &buf;
    goto LABEL_23;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v11 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v36.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_DEFAULT, "Start compiling ANE model '%s'", (uint8_t *)&v36, 0xCu);
  }
  uint64_t v12 = &buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &buf;
  }
  else {
    uint64_t v13 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(5, "Start compiling ANE model '%s'", v10, v13);
  unint64_t v14 = (char *)operator new(0x20uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)unint64_t v14 = off_26C2177B8;
  v14[24] = 0;
  int v15 = v14 + 24;
  int64_t size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    int64_t size = buf.__r_.__value_.__l.__size_;
    uint64_t v12 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if (size >= 5)
  {
    int v17 = (char *)v12 + size;
    int v18 = v12;
    do
    {
      int v19 = (char *)memchr(v18, 102, size - 4);
      if (!v19) {
        break;
      }
      if (*(_DWORD *)v19 == 1702065510 && v19[4] == 100)
      {
        if (v19 == v17 || v19 - (char *)v12 == -1) {
          break;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "gumbel_model_path");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("load_random_cpu.espresso.net", (char *)a1, (const void **)&__p.__r_.__value_.__l.__data_, &v36);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        (*(void (**)(std::string *__return_ptr))(*(void *)v34 + 40))(&__p);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        std::string v36 = __p;
        std::allocate_shared[abi:ne180100]<EspressoWaveRNNFusedSubscalingANEModel,std::allocator<EspressoWaveRNNFusedSubscalingANEModel>,std::string &,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>((uint64_t **)&v29, (uint64_t)&buf, (uint64_t)&v36, v15, (std::__shared_weak_count *)v14);
        int v21 = (std::__shared_weak_count *)operator new(0x830uLL);
        v21->__shared_owners_ = 0;
        v21->__shared_weak_owners_ = 0;
        v21->__vftable = (std::__shared_weak_count_vtbl *)off_26C218B30;
        int v22 = (std::__shared_weak_count *)*((void *)&v29 + 1);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        if (*((void *)&v29 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        EspressoWaveRNNFusedSubscalingANEProcessor::EspressoWaveRNNFusedSubscalingANEProcessor((uint64_t)&v21[1], (uint64_t *)&__p);
        if (v22)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        else
        {
          int v22 = v21;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        goto LABEL_63;
      }
      int v18 = (std::string *)(v19 + 1);
      int64_t size = v17 - (char *)v18;
    }
    while (v17 - (char *)v18 >= 5);
  }
  std::allocate_shared[abi:ne180100]<EspressoWaveRNNANEModel,std::allocator<EspressoWaveRNNANEModel>,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>((uint64_t **)&__p, (uint64_t)&buf, v15, (std::__shared_weak_count *)v14);
  uint64_t v23 = (std::__shared_weak_count *)operator new(0x578uLL);
  v23->__shared_owners_ = 0;
  v23->__shared_weak_owners_ = 0;
  v23->__vftable = (std::__shared_weak_count_vtbl *)off_26C218890;
  int v24 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  EspressoWaveRNNSubscalingANEProcessor::EspressoWaveRNNSubscalingANEProcessor((uint64_t)&v23[1], (uint64_t *)&v36);
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  else
  {
    int v24 = v23;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
LABEL_63:
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    float v27 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      float v27 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v36.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
    _os_log_impl(&dword_20CD80000, v25, OS_LOG_TYPE_DEFAULT, "Finished compiling ANE model '%s'", (uint8_t *)&v36, 0xCu);
  }
  int v28 = &buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v28 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(5, "Finished compiling ANE model '%s'", v26, v28);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_73:
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
}

void sub_20D3831D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v38);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNSubscalingANEProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<EspressoWaveRNNSubscalingANEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNSubscalingANEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218B30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t EspressoWaveRNNModule::EspressoWaveRNNModule(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v468 = *MEMORY[0x263EF8340];
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  v440[0] = *a3;
  v440[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Module::Module(a1, a2, v440);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)a1 = off_26C202EE8;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  uint64_t v438 = a1;
  if (*(char *)(a1 + 207) < 0) {
    std::string::__init_copy_ctor_external(&v467, *(const std::string::value_type **)(a1 + 184), *(void *)(a1 + 192));
  }
  else {
    std::string v467 = *(std::string *)(a1 + 184);
  }
  uint64_t v7 = *a3;
  uint64_t v8 = (std::__shared_weak_count *)a3[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  if (v9)
  {
    int v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)(v7 + 16);
      if (v12
        && (uint64_t v13 = v12 + 8,
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v12 + 8), (unsigned __int8 *)&v467)))
      {
        v465[0] = (long long *)&v467;
        unint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (unsigned __int8 *)&v467, v465);
        uint64_t v16 = *((void *)v14 + 5);
        uint64_t v15 = *((void *)v14 + 6);
        if (v15)
        {
          v437 = (std::__shared_weak_count *)*((void *)v14 + 6);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
        else
        {
          v437 = 0;
        }
      }
      else
      {
        v437 = 0;
        uint64_t v16 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      if (!v8) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  v437 = 0;
  uint64_t v16 = 0;
  if (v8) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_18:
  if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v467.__r_.__value_.__l.__data_);
  }
  if (*(char *)(v16 + 335) < 0) {
    std::string::__init_copy_ctor_external(&v439, *(const std::string::value_type **)(v16 + 312), *(void *)(v16 + 320));
  }
  else {
    std::string v439 = *(std::string *)(v16 + 312);
  }
  uint64_t v17 = HIBYTE(v439.__r_.__value_.__r.__words[2]);
  char v18 = HIBYTE(v439.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v439.__r_.__value_.__l.__size_;
  std::string::size_type v20 = v439.__r_.__value_.__r.__words[0];
  if ((v439.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v21 = HIBYTE(v439.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v21 = v439.__r_.__value_.__l.__size_;
  }
  if ((v439.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v22 = &v439;
  }
  else {
    int v22 = (std::string *)v439.__r_.__value_.__r.__words[0];
  }
  uint64_t v23 = (char *)v22 + v21;
  if (v21 < 6) {
    goto LABEL_113;
  }
  int64_t v24 = v21;
  int v25 = v22;
  while (1)
  {
    int v26 = memchr(v25, 117, v24 - 5);
    if (!v26) {
      goto LABEL_46;
    }
    if (*(_DWORD *)v26 == 1869770357 && v26[2] == 27756) {
      break;
    }
    int v25 = (std::string *)((char *)v26 + 1);
    int64_t v24 = v23 - (char *)v25;
    if (v23 - (char *)v25 < 6) {
      goto LABEL_46;
    }
  }
  if (v26 != (_WORD *)v23 && (char *)v26 - (char *)v22 != -1)
  {
    uint64_t v29 = *(void *)(v16 + 296);
    int v28 = *(std::__shared_weak_count **)(v16 + 304);
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      if (v29)
      {
        uint64_t v17 = HIBYTE(v439.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v439.__r_.__value_.__l.__size_;
        std::string::size_type v20 = v439.__r_.__value_.__r.__words[0];
        char v18 = HIBYTE(v439.__r_.__value_.__r.__words[2]);
LABEL_270:
        if (v18 >= 0) {
          uint64_t v121 = v17;
        }
        else {
          uint64_t v121 = size;
        }
        if (v18 >= 0) {
          int v122 = &v439;
        }
        else {
          int v122 = (std::string *)v20;
        }
        if (v121 >= 5)
        {
          int v123 = (char *)v122 + v121;
          unint64_t v124 = v122;
          do
          {
            uint64_t v125 = (char *)memchr(v124, 102, v121 - 4);
            if (!v125) {
              break;
            }
            if (*(_DWORD *)v125 == 1702065510 && v125[4] == 100)
            {
              if (v125 == v123 || v125 - (char *)v122 == -1) {
                break;
              }
              uint64_t v34 = &fst::TropicalWeightTpl<float>::Type(void)::type;
              uint64_t v35 = v438;
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              unint64_t v131 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
              {
                LOWORD(v467.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_20CD80000, v131, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with ANE FUSED subscaling dual softmax wavernn model", (uint8_t *)&v467, 2u);
              }
              Diagnostics::log(6, "EspressoWaveRNNModule init with ANE FUSED subscaling dual softmax wavernn model", v132);
              uint64_t v133 = *(void *)(v16 + 296);
              char v66 = *(std::__shared_weak_count **)(v16 + 304);
              if (v66) {
                atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::allocate_shared[abi:ne180100]<EspressoWaveRNNFusedSubscalingANEProcessor,std::allocator<EspressoWaveRNNFusedSubscalingANEProcessor>,std::shared_ptr<EspressoWaveRNNFusedSubscalingANEModel> const,void>(&v467, v133, v66);
              std::string::size_type v134 = v467.__r_.__value_.__r.__words[0];
              if (v467.__r_.__value_.__r.__words[0])
              {
                std::string::size_type v135 = v467.__r_.__value_.__l.__size_;
                if (v467.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v467.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                std::string::size_type v135 = 0;
              }
              unint64_t v140 = *(std::__shared_weak_count **)(v438 + 280);
              *(void *)(v438 + 272) = v134;
              *(void *)(v438 + 280) = v135;
              if (v140) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v140);
              }
              unint64_t v113 = (std::__shared_weak_count *)v467.__r_.__value_.__l.__size_;
              if (v467.__r_.__value_.__l.__size_) {
                goto LABEL_249;
              }
              goto LABEL_250;
            }
            unint64_t v124 = (std::string *)(v125 + 1);
            uint64_t v121 = v123 - (char *)v124;
          }
          while (v123 - (char *)v124 >= 5);
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v35 = v438;
        int v136 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          LOWORD(v467.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_20CD80000, v136, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with ANE subscaling dual softmax wavernn model", (uint8_t *)&v467, 2u);
        }
        Diagnostics::log(6, "EspressoWaveRNNModule init with ANE subscaling dual softmax wavernn model", v137);
        std::string::size_type v138 = *(void *)(v16 + 296);
        char v66 = *(std::__shared_weak_count **)(v16 + 304);
        if (v66) {
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v139 = (std::__shared_weak_count *)operator new(0x578uLL);
        unint64_t v69 = v139;
        v139->__shared_owners_ = 0;
        v139->__shared_weak_owners_ = 0;
        v139->__vftable = (std::__shared_weak_count_vtbl *)off_26C218890;
        int v70 = &v139[1].__vftable;
        v467.__r_.__value_.__r.__words[0] = v138;
        v467.__r_.__value_.__l.__size_ = (std::string::size_type)v66;
        if (v66) {
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        EspressoWaveRNNSubscalingANEProcessor::EspressoWaveRNNSubscalingANEProcessor((uint64_t)&v139[1], (uint64_t *)&v467);
        uint64_t v34 = &fst::TropicalWeightTpl<float>::Type(void)::type;
LABEL_244:
        if (v66) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
        char v112 = *(std::__shared_weak_count **)(v35 + 280);
        *(void *)(v35 + 272) = v70;
        *(void *)(v35 + 280) = v69;
        if (v112) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v112);
        }
        unint64_t v113 = v69;
LABEL_249:
        std::__shared_weak_count::__release_shared[abi:ne180100](v113);
LABEL_250:
        if (v66)
        {
          unint64_t v59 = v66;
          goto LABEL_252;
        }
        goto LABEL_253;
      }
    }
    else if (v29)
    {
      goto LABEL_270;
    }
    uint64_t v34 = &fst::TropicalWeightTpl<float>::Type(void)::type;
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v35 = v438;
    char v127 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      LOWORD(v467.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v127, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with Stub wavernn processor.", (uint8_t *)&v467, 2u);
    }
    Diagnostics::log(6, "EspressoWaveRNNModule init with Stub wavernn processor.", v128);
    v129 = operator new(0x2B8uLL);
    v129[1] = 0;
    v129[2] = 0;
    void *v129 = off_26C2177F0;
    bzero(v129 + 4, 0x298uLL);
    v129[3] = &off_26C203B90;
    std::string::basic_string[abi:ne180100]<0>(v129 + 4, "Stub");
    *((unsigned char *)v129 + 64) = 0;
    *((_DWORD *)v129 + 154) = 0;
    v129[9] = 0;
    v129[10] = 0;
    MEMORY[0x210559270](v129 + 78);
    *((unsigned char *)v129 + 688) = 0;
    *(void *)&long long v130 = v129 + 3;
    *((void *)&v130 + 1) = v129;
    unint64_t v59 = *(std::__shared_weak_count **)(v438 + 280);
    *(_OWORD *)(v438 + 272) = v130;
    if (v59) {
      goto LABEL_252;
    }
    goto LABEL_253;
  }
LABEL_46:
  if (v21 < 14) {
    goto LABEL_113;
  }
  int64_t v30 = v21;
  int v31 = v22;
  while (1)
  {
    uint64_t v32 = memchr(v31, 102, v30 - 13);
    if (!v32) {
      goto LABEL_113;
    }
    if (*v32 == 0x75735F6465737566 && *(void *)((char *)v32 + 6) == 0x656C616373627573) {
      break;
    }
    int v31 = (std::string *)((char *)v32 + 1);
    int64_t v30 = v23 - (char *)v31;
    if (v23 - (char *)v31 < 14) {
      goto LABEL_113;
    }
  }
  if (v32 == (void *)v23 || (char *)v32 - (char *)v22 == -1)
  {
LABEL_113:
    uint64_t v35 = v438;
    if (v21 >= 3)
    {
      int64_t v60 = v21;
      int v61 = v22;
      while (1)
      {
        int v62 = (char *)memchr(v61, 115, v60 - 2);
        if (!v62) {
          goto LABEL_169;
        }
        if (*(_WORD *)v62 == 30067 && v62[2] == 98) {
          break;
        }
        int v61 = (std::string *)(v62 + 1);
        int64_t v60 = v23 - (char *)v61;
        if (v23 - (char *)v61 < 3) {
          goto LABEL_169;
        }
      }
      if (v62 != v23 && v62 - (char *)v22 != -1)
      {
        uint64_t v34 = &fst::TropicalWeightTpl<float>::Type(void)::type;
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        char v64 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          LOWORD(v467.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_20CD80000, v64, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with AMX subscaling dual softmax wavernn model", (uint8_t *)&v467, 2u);
        }
        Diagnostics::log(6, "EspressoWaveRNNModule init with AMX subscaling dual softmax wavernn model", v65);
        float v67 = *(std::__shared_weak_count_vtbl **)(v16 + 296);
        char v66 = *(std::__shared_weak_count **)(v16 + 304);
        if (v66) {
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v68 = (std::__shared_weak_count *)operator new(0x4B0uLL);
        unint64_t v69 = v68;
        v68->__shared_owners_ = 0;
        v68->__shared_weak_owners_ = 0;
        v68->__vftable = (std::__shared_weak_count_vtbl *)off_26C2188C8;
        int v70 = &v68[1].__vftable;
        if (v66) {
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v68[1].__vftable = (std::__shared_weak_count_vtbl *)&off_26C203B90;
        std::string::basic_string[abi:ne180100]<0>(&v68[1].__shared_owners_, "Stub");
        LOBYTE(v69[2].__shared_weak_owners_) = 0;
        LODWORD(v69[25].__shared_weak_owners_) = 0;
        v69[3].__vftable = 0;
        v69[3].__shared_owners_ = 0;
        int v71 = (NeuralTTSUtils *)MEMORY[0x210559270](&v69[26]);
        LOBYTE(v69[28].__shared_weak_owners_) = 0;
        v69[1].__vftable = (std::__shared_weak_count_vtbl *)&off_26C2055E0;
        if (NeuralTTSUtils::is_amx_available(v71)) {
          char v72 = "AMX";
        }
        else {
          char v72 = "CPU";
        }
        MEMORY[0x210558E70](&v69[1].__shared_owners_, v72);
        v69[3].__vftable = v67;
        v69[3].__shared_owners_ = (uint64_t)&v67->~__shared_weak_count_0;
        int v73 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(v465, &byte_20D5A22AE);
        if (v73)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          int v190 = v73;
          v191 = exception;
          int v192 = v466;
          v193 = v465[0];
          int v194 = v190;
          status_string = (const char *)espresso_get_status_string();
          v196 = (const char *)v465;
          if (v192 < 0) {
            v196 = (const char *)v193;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v196, v194, status_string);
          MEMORY[0x210558D40](v191, &v467);
          __cxa_throw(v191, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v466 < 0) {
          operator delete(v465[0]);
        }
        int v74 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(v463, &byte_20D5A22AE);
        if (v74)
        {
          uint64_t v197 = __cxa_allocate_exception(0x10uLL);
          int v198 = v74;
          v199 = v197;
          int v200 = v464;
          unint64_t v201 = (const char *)v463[0];
          int v202 = v198;
          v203 = (const char *)espresso_get_status_string();
          v204 = (const char *)v463;
          if (v200 < 0) {
            v204 = v201;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v204, v202, v203);
          MEMORY[0x210558D40](v199, &v467);
          __cxa_throw(v199, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v464 < 0) {
          operator delete(v463[0]);
        }
        int v75 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(v461, &byte_20D5A22AE);
        if (v75)
        {
          unint64_t v205 = __cxa_allocate_exception(0x10uLL);
          int v206 = v75;
          v207 = v205;
          int v208 = v462;
          uint64_t v209 = (const char *)v461[0];
          int v210 = v206;
          v211 = (const char *)espresso_get_status_string();
          unint64_t v212 = (const char *)v461;
          if (v208 < 0) {
            unint64_t v212 = v209;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v212, v210, v211);
          MEMORY[0x210558D40](v207, &v467);
          __cxa_throw(v207, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v462 < 0) {
          operator delete(v461[0]);
        }
        int v76 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(v459, &byte_20D5A22AE);
        if (v76)
        {
          v213 = __cxa_allocate_exception(0x10uLL);
          int v214 = v76;
          v215 = v213;
          int v216 = v460;
          v217 = (const char *)v459[0];
          int v218 = v214;
          v219 = (const char *)espresso_get_status_string();
          v220 = (const char *)v459;
          if (v216 < 0) {
            v220 = v217;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v220, v218, v219);
          MEMORY[0x210558D40](v215, &v467);
          __cxa_throw(v215, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v460 < 0) {
          operator delete(v459[0]);
        }
        int v77 = espresso_plan_build();
        std::string::basic_string[abi:ne180100]<0>(v457, "Unable to build plan.");
        if (v77)
        {
          unint64_t v221 = __cxa_allocate_exception(0x10uLL);
          int v222 = v77;
          v223 = v221;
          int v224 = v458;
          size_t v225 = (const char *)v457[0];
          int v226 = v222;
          v227 = (const char *)espresso_get_status_string();
          v228 = (const char *)v457;
          if (v224 < 0) {
            v228 = v225;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v228, v226, v227);
          MEMORY[0x210558D40](v223, &v467);
          __cxa_throw(v223, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v458 < 0) {
          operator delete(v457[0]);
        }
        int v78 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind hidden state.");
        if (v78)
        {
          v229 = __cxa_allocate_exception(0x10uLL);
          int v230 = v78;
          v231 = v229;
          int v232 = v456;
          size_t v233 = (void **)__p[0];
          int v234 = v230;
          v235 = (const char *)espresso_get_status_string();
          v236 = __p;
          if (v232 < 0) {
            v236 = v233;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v236, v234, v235);
          MEMORY[0x210558D40](v231, &v467);
          __cxa_throw(v231, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v456 < 0) {
          operator delete(__p[0]);
        }
        int v79 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v453, "Unable to bind input.");
        if (v79)
        {
          uint64_t v237 = __cxa_allocate_exception(0x10uLL);
          int v238 = v79;
          size_t v239 = v237;
          int v240 = v454;
          v241 = (void **)v453[0];
          int v242 = v238;
          v243 = (const char *)espresso_get_status_string();
          v244 = v453;
          if (v240 < 0) {
            v244 = v241;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v244, v242, v243);
          MEMORY[0x210558D40](v239, &v467);
          __cxa_throw(v239, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v454 < 0) {
          operator delete(v453[0]);
        }
        int v80 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v451, "Unable to bind output_new_hidden.");
        if (v80)
        {
          uint64_t v245 = __cxa_allocate_exception(0x10uLL);
          int v246 = v80;
          uint64_t v247 = v245;
          int v248 = v452;
          size_t v249 = (void **)v451[0];
          int v250 = v246;
          std::string::size_type v251 = (const char *)espresso_get_status_string();
          v252 = v451;
          if (v248 < 0) {
            v252 = v249;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v252, v250, v251);
          MEMORY[0x210558D40](v247, &v467);
          __cxa_throw(v247, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v452 < 0) {
          operator delete(v451[0]);
        }
        int v81 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v449, "Unable to bind softmax_p_ct.");
        if (v81)
        {
          v253 = __cxa_allocate_exception(0x10uLL);
          int v254 = v81;
          uint64_t v255 = v253;
          int v256 = v450;
          uint64_t v257 = (void **)v449[0];
          int v258 = v254;
          v259 = (const char *)espresso_get_status_string();
          int v260 = v449;
          if (v256 < 0) {
            int v260 = v257;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v260, v258, v259);
          MEMORY[0x210558D40](v255, &v467);
          __cxa_throw(v255, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v450 < 0) {
          operator delete(v449[0]);
        }
        int v82 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v447, "Unable to bind softmax_p_ft.");
        if (v82)
        {
          std::string::size_type v261 = __cxa_allocate_exception(0x10uLL);
          int v262 = v82;
          v263 = v261;
          int v264 = v448;
          uint64_t v265 = (void **)v447[0];
          int v266 = v262;
          std::string::size_type v267 = (const char *)espresso_get_status_string();
          v268 = v447;
          if (v264 < 0) {
            v268 = v265;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v268, v266, v267);
          MEMORY[0x210558D40](v263, &v467);
          __cxa_throw(v263, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v448 < 0) {
          operator delete(v447[0]);
        }
        int v83 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v445, "Unable to bind softmax_p_ft.");
        if (v83)
        {
          uint64_t v269 = __cxa_allocate_exception(0x10uLL);
          int v270 = v83;
          v271 = v269;
          int v272 = v446;
          v273 = (void **)v445[0];
          int v274 = v270;
          v275 = (const char *)espresso_get_status_string();
          v276 = v445;
          if (v272 < 0) {
            v276 = v273;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v276, v274, v275);
          MEMORY[0x210558D40](v271, &v467);
          __cxa_throw(v271, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        if (v446 < 0) {
          operator delete(v445[0]);
        }
        goto LABEL_243;
      }
LABEL_169:
      uint64_t v34 = &fst::TropicalWeightTpl<float>::Type(void)::type;
      if (v21 >= 8)
      {
        int64_t v84 = v21;
        int v85 = v22;
        while (1)
        {
          uint64_t v86 = (char *)memchr(v85, 49, v84 - 7);
          if (!v86) {
            goto LABEL_207;
          }
          if (*(void *)v86 == 0x78616D74666F7331) {
            break;
          }
          int v85 = (std::string *)(v86 + 1);
          int64_t v84 = v23 - (char *)v85;
          if (v23 - (char *)v85 < 8) {
            goto LABEL_207;
          }
        }
        if (v86 != v23 && v86 - (char *)v22 != -1)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          unint64_t v87 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            LOWORD(v467.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_20CD80000, v87, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with single softmax wavernn model", (uint8_t *)&v467, 2u);
          }
          Diagnostics::log(6, "EspressoWaveRNNModule init with single softmax wavernn model", v88);
          uint64_t v89 = *(std::__shared_weak_count_vtbl **)(v16 + 296);
          char v66 = *(std::__shared_weak_count **)(v16 + 304);
          if (v66) {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v90 = (std::__shared_weak_count *)operator new(0x360uLL);
          unint64_t v69 = v90;
          v90->__shared_owners_ = 0;
          v90->__shared_weak_owners_ = 0;
          v90->__vftable = (std::__shared_weak_count_vtbl *)off_26C218858;
          int v70 = &v90[1].__vftable;
          if (v66) {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v90[1].__vftable = (std::__shared_weak_count_vtbl *)&off_26C203B90;
          std::string::basic_string[abi:ne180100]<0>(&v90[1].__shared_owners_, "Stub");
          LOBYTE(v69[2].__shared_weak_owners_) = 0;
          LODWORD(v69[25].__shared_weak_owners_) = 0;
          v69[3].__vftable = 0;
          v69[3].__shared_owners_ = 0;
          MEMORY[0x210559270](&v69[26]);
          LOBYTE(v69[28].__shared_weak_owners_) = 0;
          v69[1].__vftable = (std::__shared_weak_count_vtbl *)&off_26C205560;
          MEMORY[0x210558E70](&v69[1].__shared_owners_, "SingleSoftmax");
          v69[3].__vftable = v89;
          v69[3].__shared_owners_ = (uint64_t)&v89->~__shared_weak_count_0;
          int v91 = espresso_network_declare_output();
          std::string::basic_string[abi:ne180100]<0>(v465, &byte_20D5A22AE);
          if (v91)
          {
            v277 = __cxa_allocate_exception(0x10uLL);
            int v278 = v91;
            v279 = v277;
            int v280 = v466;
            v281 = v465[0];
            int v282 = v278;
            v283 = (const char *)espresso_get_status_string();
            v284 = (const char *)v465;
            if (v280 < 0) {
              v284 = (const char *)v281;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v284, v282, v283);
            MEMORY[0x210558D40](v279, &v467);
            __cxa_throw(v279, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v466 < 0) {
            operator delete(v465[0]);
          }
          int v92 = espresso_network_declare_output();
          std::string::basic_string[abi:ne180100]<0>(v463, &byte_20D5A22AE);
          if (v92)
          {
            v285 = __cxa_allocate_exception(0x10uLL);
            int v286 = v92;
            v287 = v285;
            int v288 = v464;
            v289 = (const char *)v463[0];
            int v290 = v286;
            v291 = (const char *)espresso_get_status_string();
            v292 = (const char *)v463;
            if (v288 < 0) {
              v292 = v289;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v292, v290, v291);
            MEMORY[0x210558D40](v287, &v467);
            __cxa_throw(v287, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v464 < 0) {
            operator delete(v463[0]);
          }
          int v93 = espresso_plan_build();
          std::string::basic_string[abi:ne180100]<0>(v461, "Unable to build plan.");
          if (v93)
          {
            v293 = __cxa_allocate_exception(0x10uLL);
            int v294 = v93;
            v295 = v293;
            int v296 = v462;
            v297 = (const char *)v461[0];
            int v298 = v294;
            v299 = (const char *)espresso_get_status_string();
            v300 = (const char *)v461;
            if (v296 < 0) {
              v300 = v297;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v300, v298, v299);
            MEMORY[0x210558D40](v295, &v467);
            __cxa_throw(v295, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v462 < 0) {
            operator delete(v461[0]);
          }
          int v94 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v459, "Unable to bind hidden state.");
          if (v94)
          {
            v301 = __cxa_allocate_exception(0x10uLL);
            int v302 = v94;
            v303 = v301;
            int v304 = v460;
            v305 = (const char *)v459[0];
            int v306 = v302;
            v307 = (const char *)espresso_get_status_string();
            v308 = (const char *)v459;
            if (v304 < 0) {
              v308 = v305;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v308, v306, v307);
            MEMORY[0x210558D40](v303, &v467);
            __cxa_throw(v303, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v460 < 0) {
            operator delete(v459[0]);
          }
          int v95 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v457, "Unable to bind input.");
          if (v95)
          {
            v309 = __cxa_allocate_exception(0x10uLL);
            int v310 = v95;
            v311 = v309;
            int v312 = v458;
            v313 = (const char *)v457[0];
            int v314 = v310;
            v315 = (const char *)espresso_get_status_string();
            v316 = (const char *)v457;
            if (v312 < 0) {
              v316 = v313;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v316, v314, v315);
            MEMORY[0x210558D40](v311, &v467);
            __cxa_throw(v311, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v458 < 0) {
            operator delete(v457[0]);
          }
          int v96 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind output_new_hidden.");
          if (v96)
          {
            v317 = __cxa_allocate_exception(0x10uLL);
            int v318 = v96;
            v319 = v317;
            int v320 = v456;
            v321 = (void **)__p[0];
            int v322 = v318;
            v323 = (const char *)espresso_get_status_string();
            v324 = __p;
            if (v320 < 0) {
              v324 = v321;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v324, v322, v323);
            MEMORY[0x210558D40](v319, &v467);
            __cxa_throw(v319, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v456 < 0) {
            operator delete(__p[0]);
          }
          int v97 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v453, "Unable to bind softmax_p_ct.");
          if (v97)
          {
            v325 = __cxa_allocate_exception(0x10uLL);
            int v326 = v97;
            v327 = v325;
            int v328 = v454;
            v329 = (void **)v453[0];
            int v330 = v326;
            v331 = (const char *)espresso_get_status_string();
            v332 = v453;
            if (v328 < 0) {
              v332 = v329;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v332, v330, v331);
            MEMORY[0x210558D40](v327, &v467);
            __cxa_throw(v327, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v454 < 0) {
            operator delete(v453[0]);
          }
          goto LABEL_243;
        }
LABEL_207:
        char v98 = v22;
        while (1)
        {
          if (v21 == 7) {
            goto LABEL_212;
          }
          int64_t v99 = (char *)memchr(v98, 50, v21 - 7);
          if (!v99) {
            goto LABEL_212;
          }
          if (*(void *)v99 == 0x78616D74666F7332) {
            break;
          }
          char v98 = (std::string *)(v99 + 1);
          int64_t v21 = v23 - (char *)v98;
          if (v23 - (char *)v98 < 8) {
            goto LABEL_212;
          }
        }
        if (v99 != v23 && v99 - (char *)v22 != -1)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          char v102 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            LOWORD(v467.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_20CD80000, v102, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with dual softmax wavernn model", (uint8_t *)&v467, 2u);
          }
          Diagnostics::log(6, "EspressoWaveRNNModule init with dual softmax wavernn model", v103);
          char v104 = *(std::__shared_weak_count_vtbl **)(v16 + 296);
          char v66 = *(std::__shared_weak_count **)(v16 + 304);
          if (v66) {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v105 = (std::__shared_weak_count *)operator new(0x408uLL);
          unint64_t v69 = v105;
          v105->__shared_owners_ = 0;
          v105->__shared_weak_owners_ = 0;
          v105->__vftable = (std::__shared_weak_count_vtbl *)off_26C2187E8;
          int v70 = &v105[1].__vftable;
          if (v66) {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v105[1].__vftable = (std::__shared_weak_count_vtbl *)&off_26C203B90;
          std::string::basic_string[abi:ne180100]<0>(&v105[1].__shared_owners_, "Stub");
          LOBYTE(v69[2].__shared_weak_owners_) = 0;
          LODWORD(v69[25].__shared_weak_owners_) = 0;
          v69[3].__vftable = 0;
          v69[3].__shared_owners_ = 0;
          MEMORY[0x210559270](&v69[26]);
          LOBYTE(v69[28].__shared_weak_owners_) = 0;
          v69[1].__vftable = (std::__shared_weak_count_vtbl *)&off_26C2054D8;
          MEMORY[0x210558E70](&v69[1].__shared_owners_, "DualSoftmax");
          v69[3].__vftable = v104;
          v69[3].__shared_owners_ = (uint64_t)&v104->~__shared_weak_count_0;
          int v106 = espresso_plan_build();
          std::string::basic_string[abi:ne180100]<0>(v465, "Unable to build plan.");
          if (v106)
          {
            unint64_t v141 = __cxa_allocate_exception(0x10uLL);
            int v142 = v106;
            uint64_t v143 = v141;
            int v144 = v466;
            v145 = v465[0];
            int v146 = v142;
            unint64_t v147 = (const char *)espresso_get_status_string();
            uint64_t v148 = (const char *)v465;
            if (v144 < 0) {
              uint64_t v148 = (const char *)v145;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v148, v146, v147);
            MEMORY[0x210558D40](v143, &v467);
            __cxa_throw(v143, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v466 < 0) {
            operator delete(v465[0]);
          }
          int v107 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v463, "Unable to bind hidden state.");
          if (v107)
          {
            unint64_t v149 = __cxa_allocate_exception(0x10uLL);
            int v150 = v107;
            uint64_t v151 = v149;
            int v152 = v464;
            uint64_t v153 = (const char *)v463[0];
            int v154 = v150;
            int v155 = (const char *)espresso_get_status_string();
            int v156 = (const char *)v463;
            if (v152 < 0) {
              int v156 = v153;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v156, v154, v155);
            MEMORY[0x210558D40](v151, &v467);
            __cxa_throw(v151, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v464 < 0) {
            operator delete(v463[0]);
          }
          int v108 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v461, "Unable to bind input.");
          if (v108)
          {
            uint64_t v157 = __cxa_allocate_exception(0x10uLL);
            int v158 = v108;
            int v159 = v157;
            int v160 = v462;
            uint64_t v161 = (const char *)v461[0];
            int v162 = v158;
            uint64_t v163 = (const char *)espresso_get_status_string();
            uint64_t v164 = (const char *)v461;
            if (v160 < 0) {
              uint64_t v164 = v161;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v164, v162, v163);
            MEMORY[0x210558D40](v159, &v467);
            __cxa_throw(v159, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v462 < 0) {
            operator delete(v461[0]);
          }
          int v109 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v459, "Unable to bind output_new_hidden.");
          if (v109)
          {
            unint64_t v165 = __cxa_allocate_exception(0x10uLL);
            int v166 = v109;
            unint64_t v167 = v165;
            int v168 = v460;
            unint64_t v169 = (const char *)v459[0];
            int v170 = v166;
            int v171 = (const char *)espresso_get_status_string();
            uint64_t v172 = (const char *)v459;
            if (v168 < 0) {
              uint64_t v172 = v169;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v172, v170, v171);
            MEMORY[0x210558D40](v167, &v467);
            __cxa_throw(v167, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v460 < 0) {
            operator delete(v459[0]);
          }
          int v110 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v457, "Unable to bind softmax_p_ct.");
          if (v110)
          {
            uint64_t v173 = __cxa_allocate_exception(0x10uLL);
            int v174 = v110;
            unint64_t v175 = v173;
            int v176 = v458;
            BOOL v177 = (const char *)v457[0];
            int v178 = v174;
            unint64_t v179 = (const char *)espresso_get_status_string();
            float v180 = (const char *)v457;
            if (v176 < 0) {
              float v180 = v177;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v180, v178, v179);
            MEMORY[0x210558D40](v175, &v467);
            __cxa_throw(v175, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v458 < 0) {
            operator delete(v457[0]);
          }
          int v111 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind softmax_p_ft.");
          if (v111)
          {
            v181 = __cxa_allocate_exception(0x10uLL);
            int v182 = v111;
            double v183 = v181;
            int v184 = v456;
            int v185 = (void **)__p[0];
            int v186 = v182;
            v187 = (const char *)espresso_get_status_string();
            int64_t v188 = __p;
            if (v184 < 0) {
              int64_t v188 = v185;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v188, v186, v187);
            MEMORY[0x210558D40](v183, &v467);
            __cxa_throw(v183, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v456 < 0) {
            operator delete(__p[0]);
          }
LABEL_243:
          v69[24].__shared_weak_owners_ = (uint64_t)v69[14].__vftable;
          v69[25].__vftable = v69[7].__vftable;
          v69[25].__shared_owners_ = v69[32].__shared_owners_;
          ((void (*)(void *))v69[1].__on_zero_shared_weak)(v70);
          goto LABEL_244;
        }
      }
    }
LABEL_212:
    char v100 = __cxa_allocate_exception(0x10uLL);
    float v101 = &v439;
    if ((v439.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      float v101 = (std::string *)v439.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "Unrecognized model: '%s'", (const char *)v101);
    MEMORY[0x210558D40](v100, &v467);
    __cxa_throw(v100, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uint64_t v34 = &fst::TropicalWeightTpl<float>::Type(void)::type;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v35 = v438;
  std::string v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(v467.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v36, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with AMX fused subscale softmax wavernn model", (uint8_t *)&v467, 2u);
  }
  Diagnostics::log(6, "EspressoWaveRNNModule init with AMX fused subscale softmax wavernn model", v37);
  uint64_t v38 = *(void *)(v16 + 296);
  uint64_t v39 = *(std::__shared_weak_count **)(v16 + 304);
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v40 = operator new(0x5B0uLL);
  uint64_t v41 = v40;
  v40[1] = 0;
  unint64_t v40[2] = 0;
  *int v40 = off_26C218AC0;
  __int16 v42 = v40 + 3;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v40[3] = &off_26C203B90;
  std::string::basic_string[abi:ne180100]<0>(v40 + 4, "Stub");
  *((unsigned char *)v41 + 64) = 0;
  *((_DWORD *)v41 + 154) = 0;
  v41[9] = 0;
  v41[10] = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = (NeuralTTSUtils *)MEMORY[0x210559270](v41 + 78);
  v41[3] = &off_26C205670;
  *((unsigned char *)v41 + 688) = 0;
  *(_OWORD *)(v41 + 173) = 0u;
  *(_OWORD *)(v41 + 175) = 0u;
  *(_OWORD *)(v41 + 177) = 0u;
  *(_OWORD *)(v41 + 179) = 0u;
  v41[181] = 0;
  if (NeuralTTSUtils::is_amx_available(v43)) {
    __int16 v44 = "AMX";
  }
  else {
    __int16 v44 = "CPU";
  }
  MEMORY[0x210558E70](v41 + 4, v44);
  v41[9] = v38;
  v41[10] = v38 + 8;
  v41[171] = 0x200000002;
  *((_DWORD *)v41 + 344) = 4;
  int v45 = espresso_network_declare_output();
  std::string::basic_string[abi:ne180100]<0>(v465, &byte_20D5A22AE);
  if (v45)
  {
    v333 = __cxa_allocate_exception(0x10uLL);
    int v334 = v45;
    v335 = v333;
    int v336 = v466;
    v337 = v465[0];
    int v338 = v334;
    v339 = (const char *)espresso_get_status_string();
    v340 = (const char *)v465;
    if (v336 < 0) {
      v340 = (const char *)v337;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v340, v338, v339);
    MEMORY[0x210558D40](v335, &v467);
    __cxa_throw(v335, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v466 < 0) {
    operator delete(v465[0]);
  }
  int v46 = espresso_network_declare_output();
  std::string::basic_string[abi:ne180100]<0>(v463, &byte_20D5A22AE);
  if (v46)
  {
    v341 = __cxa_allocate_exception(0x10uLL);
    int v342 = v46;
    v343 = v341;
    int v344 = v464;
    v345 = (const char *)v463[0];
    int v346 = v342;
    v347 = (const char *)espresso_get_status_string();
    v348 = (const char *)v463;
    if (v344 < 0) {
      v348 = v345;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v348, v346, v347);
    MEMORY[0x210558D40](v343, &v467);
    __cxa_throw(v343, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v464 < 0) {
    operator delete(v463[0]);
  }
  int v47 = espresso_network_declare_output();
  std::string::basic_string[abi:ne180100]<0>(v461, &byte_20D5A22AE);
  if (v47)
  {
    v349 = __cxa_allocate_exception(0x10uLL);
    int v350 = v47;
    v351 = v349;
    int v352 = v462;
    v353 = (const char *)v461[0];
    int v354 = v350;
    v355 = (const char *)espresso_get_status_string();
    v356 = (const char *)v461;
    if (v352 < 0) {
      v356 = v353;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v356, v354, v355);
    MEMORY[0x210558D40](v351, &v467);
    __cxa_throw(v351, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v462 < 0) {
    operator delete(v461[0]);
  }
  int v48 = espresso_network_declare_output();
  std::string::basic_string[abi:ne180100]<0>(v459, &byte_20D5A22AE);
  if (v48)
  {
    v357 = __cxa_allocate_exception(0x10uLL);
    int v358 = v48;
    v359 = v357;
    int v360 = v460;
    v361 = (const char *)v459[0];
    int v362 = v358;
    v363 = (const char *)espresso_get_status_string();
    v364 = (const char *)v459;
    if (v360 < 0) {
      v364 = v361;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v364, v362, v363);
    MEMORY[0x210558D40](v359, &v467);
    __cxa_throw(v359, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v460 < 0) {
    operator delete(v459[0]);
  }
  int v49 = espresso_network_declare_output();
  std::string::basic_string[abi:ne180100]<0>(v457, &byte_20D5A22AE);
  if (v49)
  {
    v365 = __cxa_allocate_exception(0x10uLL);
    int v366 = v49;
    v367 = v365;
    int v368 = v458;
    v369 = (const char *)v457[0];
    int v370 = v366;
    v371 = (const char *)espresso_get_status_string();
    v372 = (const char *)v457;
    if (v368 < 0) {
      v372 = v369;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", v372, v370, v371);
    MEMORY[0x210558D40](v367, &v467);
    __cxa_throw(v367, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v458 < 0) {
    operator delete(v457[0]);
  }
  int v50 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to build plan.");
  if (v50)
  {
    v373 = __cxa_allocate_exception(0x10uLL);
    int v374 = v50;
    v375 = v373;
    int v376 = v456;
    v377 = (void **)__p[0];
    int v378 = v374;
    v379 = (const char *)espresso_get_status_string();
    v380 = __p;
    if (v376 < 0) {
      v380 = v377;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v380, v378, v379);
    MEMORY[0x210558D40](v375, &v467);
    __cxa_throw(v375, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v456 < 0) {
    operator delete(__p[0]);
  }
  int v51 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v453, "Unable to bind hidden state.");
  if (v51)
  {
    v381 = __cxa_allocate_exception(0x10uLL);
    int v382 = v51;
    v383 = v381;
    int v384 = v454;
    v385 = (void **)v453[0];
    int v386 = v382;
    v387 = (const char *)espresso_get_status_string();
    v388 = v453;
    if (v384 < 0) {
      v388 = v385;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v388, v386, v387);
    MEMORY[0x210558D40](v383, &v467);
    __cxa_throw(v383, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v454 < 0) {
    operator delete(v453[0]);
  }
  int v52 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v451, "Unable to bind input.");
  if (v52)
  {
    v389 = __cxa_allocate_exception(0x10uLL);
    int v390 = v52;
    v391 = v389;
    int v392 = v452;
    v393 = (void **)v451[0];
    int v394 = v390;
    v395 = (const char *)espresso_get_status_string();
    v396 = v451;
    if (v392 < 0) {
      v396 = v393;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v396, v394, v395);
    MEMORY[0x210558D40](v391, &v467);
    __cxa_throw(v391, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v452 < 0) {
    operator delete(v451[0]);
  }
  int v53 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v449, "Unable to bind output_new_hidden.");
  if (v53)
  {
    v397 = __cxa_allocate_exception(0x10uLL);
    int v398 = v53;
    v399 = v397;
    int v400 = v450;
    v401 = (void **)v449[0];
    int v402 = v398;
    v403 = (const char *)espresso_get_status_string();
    v404 = v449;
    if (v400 < 0) {
      v404 = v401;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v404, v402, v403);
    MEMORY[0x210558D40](v399, &v467);
    __cxa_throw(v399, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v450 < 0) {
    operator delete(v449[0]);
  }
  int v54 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v447, "Unable to bind o1_bit.");
  if (v54)
  {
    v405 = __cxa_allocate_exception(0x10uLL);
    int v406 = v54;
    v407 = v405;
    int v408 = v448;
    v409 = (void **)v447[0];
    int v410 = v406;
    v411 = (const char *)espresso_get_status_string();
    v412 = v447;
    if (v408 < 0) {
      v412 = v409;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v412, v410, v411);
    MEMORY[0x210558D40](v407, &v467);
    __cxa_throw(v407, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v448 < 0) {
    operator delete(v447[0]);
  }
  int v55 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v445, "Unable to bind o1_bit_scaled.");
  if (v55)
  {
    v413 = __cxa_allocate_exception(0x10uLL);
    int v414 = v55;
    v415 = v413;
    int v416 = v446;
    v417 = (void **)v445[0];
    int v418 = v414;
    v419 = (const char *)espresso_get_status_string();
    v420 = v445;
    if (v416 < 0) {
      v420 = v417;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v420, v418, v419);
    MEMORY[0x210558D40](v415, &v467);
    __cxa_throw(v415, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v446 < 0) {
    operator delete(v445[0]);
  }
  int v56 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v443, "Unable to bind o2_bit.");
  if (v56)
  {
    v421 = __cxa_allocate_exception(0x10uLL);
    int v422 = v56;
    v423 = v421;
    int v424 = v444;
    v425 = (void **)v443[0];
    int v426 = v422;
    v427 = (const char *)espresso_get_status_string();
    v428 = v443;
    if (v424 < 0) {
      v428 = v425;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v428, v426, v427);
    MEMORY[0x210558D40](v423, &v467);
    __cxa_throw(v423, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v444 < 0) {
    operator delete(v443[0]);
  }
  int v57 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v441, "Unable to bind o2_bit_scaled.");
  if (v57)
  {
    v429 = __cxa_allocate_exception(0x10uLL);
    int v430 = v57;
    v431 = v429;
    int v432 = v442;
    v433 = (void **)v441[0];
    int v434 = v430;
    v435 = (const char *)espresso_get_status_string();
    v436 = v441;
    if (v432 < 0) {
      v436 = v433;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v467, "%s Error: %d, %s", (const char *)v436, v434, v435);
    MEMORY[0x210558D40](v431, &v467);
    __cxa_throw(v431, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v442 < 0) {
    operator delete(v441[0]);
  }
  v41[74] = v41[42];
  v41[75] = v41[21];
  v41[76] = v41[97];
  (*(void (**)(void *))(v41[3] + 32))(v42);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  atomic_fetch_add_explicit(v41 + 1, 1uLL, memory_order_relaxed);
  unint64_t v58 = *(std::__shared_weak_count **)(v438 + 280);
  *(void *)(v438 + 272) = v42;
  *(void *)(v438 + 280) = v41;
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v41);
  if (v39)
  {
    unint64_t v59 = v39;
LABEL_252:
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
LABEL_253:
  std::string::basic_string[abi:ne180100]<0>(&v467, "frame_size");
  LODWORD(v465[0]) = 240;
  uint64_t v114 = v35 + 272;
  *(void *)(*(void *)(v35 + 272) + 32) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v467.__r_.__value_.__l.__data_, (unsigned int *)v465);
  if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v467.__r_.__value_.__l.__data_);
  }
  if (v34[34] != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v115 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v117 = *(void *)(*(void *)v114 + 32);
    LODWORD(v467.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v467.__r_.__value_.__r.__words + 4) = v117;
    _os_log_impl(&dword_20CD80000, v115, OS_LOG_TYPE_INFO, "WaveRNN module frame size: %ld", (uint8_t *)&v467, 0xCu);
  }
  Diagnostics::log(6, "WaveRNN module frame size: %ld", v116, *(void *)(*(void *)v114 + 32));
  if (v34[34] != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v118 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(v467.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v118, OS_LOG_TYPE_INFO, "Successfully initialized WaveRNN module", (uint8_t *)&v467, 2u);
  }
  Diagnostics::log(6, "Successfully initialized WaveRNN module", v119);
  if (SHIBYTE(v439.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v439.__r_.__value_.__l.__data_);
  }
  if (v437) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v437);
  }
  return v35;
}

void sub_20D3860F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, Module *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  int v22 = (std::__shared_weak_count *)*((void *)a14 + 35);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  Module::~Module(a14);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<EspressoWaveRNNFusedSubscalingANEProcessor,std::allocator<EspressoWaveRNNFusedSubscalingANEProcessor>,std::shared_ptr<EspressoWaveRNNFusedSubscalingANEModel> const,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v6 = operator new(0x830uLL);
  uint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = off_26C218B30;
  uint64_t v8 = v6 + 3;
  v9[0] = a2;
  v9[1] = (uint64_t)a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  EspressoWaveRNNFusedSubscalingANEProcessor::EspressoWaveRNNFusedSubscalingANEProcessor((uint64_t)(v6 + 3), v9);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_20D386A24(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNDualSoftmaxProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<EspressoWaveRNNDualSoftmaxProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2187E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNDualSoftmaxProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2187E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNSingleSoftmaxProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<EspressoWaveRNNSingleSoftmaxProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNSingleSoftmaxProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNSubscalingCPUProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<EspressoWaveRNNSubscalingCPUProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2188C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNSubscalingCPUProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2188C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscaleCPUProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscaleCPUProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscaleCPUProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<EspressoWaveRNNProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2177F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2177F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FRCodeBitmap::copy_to(uint64_t a1, unint64_t *a2)
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    for (uint64_t j = 0; j != 64; ++j)
    {
      if ((*(void *)(a1 + 8 * i) >> j))
      {
        char v6 = ((_BYTE)i << 6) + j;
        uint64_t v8 = (unsigned char *)a2[1];
        unint64_t v7 = a2[2];
        if ((unint64_t)v8 >= v7)
        {
          unint64_t v10 = *a2;
          uint64_t v11 = &v8[-*a2];
          unint64_t v12 = (unint64_t)(v11 + 1);
          if ((uint64_t)(v11 + 1) < 0) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v13 = v7 - v10;
          if (2 * v13 > v12) {
            unint64_t v12 = 2 * v13;
          }
          if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v14 = v12;
          }
          if (v14) {
            uint64_t v15 = (char *)operator new(v14);
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v16 = &v11[(void)v15];
          uint64_t v17 = &v11[(void)v15];
          *uint64_t v17 = v6;
          unint64_t v9 = v17 + 1;
          if (v8 != (unsigned char *)v10)
          {
            char v18 = &v8[~v10];
            do
            {
              char v19 = *--v8;
              (v18--)[(void)v15] = v19;
            }
            while (v8 != (unsigned char *)v10);
            uint64_t v8 = (unsigned char *)*a2;
            uint64_t v16 = v15;
          }
          *a2 = (unint64_t)v16;
          a2[1] = (unint64_t)v9;
          a2[2] = (unint64_t)&v15[v14];
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          unsigned char *v8 = v6;
          unint64_t v9 = v8 + 1;
        }
        a2[1] = (unint64_t)v9;
      }
    }
  }
}

void FRCodeUMap::FRCodeUMap(FRCodeUMap *this, const FRCodeUMap *a2)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  FRCodeUMap::copy(this, a2);
}

void sub_20D386EBC(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void FRCodeUMap::copy(FRCodeUMap *this, const FRCodeUMap *a2)
{
  *((unsigned char *)this + 76) = *((unsigned char *)a2 + 76);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  operator new[]();
}

void FRCodeUMap::~FRCodeUMap(FRCodeUMap *this)
{
  if (!*(unsigned char *)this)
  {
    uint64_t v2 = *((void *)this + 8);
    if (v2) {
      MEMORY[0x2105595E0](v2, 0x1000C40BDFB0063);
    }
  }
  int v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void FRCodeUMap::copy_to(char *a1, char *a2, unint64_t *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    char v6 = (unsigned char *)a3[1];
    do
    {
      char v7 = *v5;
      unint64_t v8 = a3[2];
      if ((unint64_t)v6 >= v8)
      {
        unint64_t v10 = *a3;
        uint64_t v11 = &v6[-*a3];
        unint64_t v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = v8 - v10;
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v12;
        }
        if (v14) {
          uint64_t v15 = (char *)operator new(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = &v11[(void)v15];
        uint64_t v17 = &v11[(void)v15];
        *uint64_t v17 = v7;
        unint64_t v9 = v17 + 1;
        if (v6 != (unsigned char *)v10)
        {
          char v18 = &v6[~v10];
          do
          {
            char v19 = *--v6;
            (v18--)[(void)v15] = v19;
          }
          while (v6 != (unsigned char *)v10);
          char v6 = (unsigned char *)*a3;
          uint64_t v16 = v15;
        }
        *a3 = (unint64_t)v16;
        a3[1] = (unint64_t)v9;
        a3[2] = (unint64_t)&v15[v14];
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *char v6 = v7;
        unint64_t v9 = v6 + 1;
      }
      a3[1] = (unint64_t)v9;
      ++v5;
      char v6 = v9;
    }
    while (v5 != a2);
  }
}

void FRCode::init_tables(FRCode *this)
{
  {
    operator new();
  }
  uint64_t v1 = (uint64_t *)FRCode::init_tables(void)::g_bnd_map;
  std::string::basic_string[abi:ne180100]<0>(__p, "\\B");
  int v6 = 0;
  std::__hash_table<std::__hash_value_type<std::string,FRCode::BndType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FRCode::BndType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FRCode::BndType>>(v1, (unsigned __int8 *)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = (uint64_t *)FRCode::init_tables(void)::g_bnd_map;
  std::string::basic_string[abi:ne180100]<0>(__p, "\\E");
  int v6 = 1;
  std::__hash_table<std::__hash_value_type<std::string,FRCode::BndType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FRCode::BndType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FRCode::BndType>>(v2, (unsigned __int8 *)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  int v3 = (uint64_t *)FRCode::init_tables(void)::g_bnd_map;
  std::string::basic_string[abi:ne180100]<0>(__p, "\\b");
  int v6 = 2;
  std::__hash_table<std::__hash_value_type<std::string,FRCode::BndType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FRCode::BndType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FRCode::BndType>>(v3, (unsigned __int8 *)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  FRCode::g_bnd_map_ = FRCode::init_tables(void)::g_bnd_map;
}

void sub_20D38737C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void std::__hash_table<std::__hash_value_type<std::string,FRCode::BndType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FRCode::BndType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FRCode::BndType>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  char v7 = a1 + 3;
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v9;
  uint64_t v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  char v18 = a1 + 2;
  *((_DWORD *)v16 + 10) = *(_DWORD *)(a3 + 24);
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = a1[1];
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v25 = operator new(8 * *(void *)&prime);
          int v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          int v28 = (void *)*v18;
          if (*v18)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v18;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *int v28 = *v34;
                  *uint64_t v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                int v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v39 = (void *)*a1;
        *a1 = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v36 = *a1;
  uint64_t v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *(void *)uint64_t v16 = *v37;
LABEL_75:
    void *v37 = v16;
    goto LABEL_76;
  }
  *(void *)uint64_t v16 = *v18;
  *char v18 = v16;
  *(void *)(v36 + 8 * v3) = v18;
  if (*(void *)v16)
  {
    unint64_t v38 = *(void *)(*(void *)v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v38 >= v10) {
        v38 %= v10;
      }
    }
    else
    {
      v38 &= v10 - 1;
    }
    uint64_t v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
}

void sub_20D3877E4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,FRCode::BndType>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,FRCode::BndType>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void FRCode::copy_and_append_ops(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = a3 + a2;
  if (v3 > a2)
  {
    char v5 = (_DWORD *)a1[1];
    int v6 = -1431655765 * (((unint64_t)v5 - *a1) >> 2) - a2;
    unint64_t v7 = a2;
    do
    {
      unint64_t v8 = (_DWORD *)*a1;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 2);
      if (v9 <= v7) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v10 = &v8[3 * v7];
      int v12 = *v10;
      int v11 = v10[1];
      int v13 = v10[2];
      int v14 = v11 + v6;
      int v15 = v13 + v6;
      if (v12 == 6) {
        v11 += v6;
      }
      else {
        int v15 = v13;
      }
      if (v12 == 8) {
        int v16 = v14;
      }
      else {
        int v16 = v11;
      }
      if (v12 == 8) {
        int v17 = v13;
      }
      else {
        int v17 = v15;
      }
      unint64_t v18 = a1[2];
      if ((unint64_t)v5 >= v18)
      {
        if (v9 + 1 > 0x1555555555555555) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v8) >> 2);
        uint64_t v20 = 2 * v19;
        if (2 * v19 <= v9 + 1) {
          uint64_t v20 = v9 + 1;
        }
        if (v19 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v21 = 0x1555555555555555;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        unint64_t v23 = (_DWORD *)(v21 + 12 * v9);
        _DWORD *v23 = v12;
        v23[1] = v16;
        v23[2] = v17;
        int v25 = (_DWORD *)*a1;
        int64_t v24 = (_DWORD *)a1[1];
        int v26 = v23;
        if (v24 != (_DWORD *)*a1)
        {
          do
          {
            uint64_t v27 = *(void *)(v24 - 3);
            v24 -= 3;
            int v28 = v24[2];
            *(void *)(v26 - 3) = v27;
            v26 -= 3;
            v26[2] = v28;
          }
          while (v24 != v25);
          int64_t v24 = (_DWORD *)*a1;
        }
        char v5 = v23 + 3;
        *a1 = v26;
        a1[1] = v23 + 3;
        a1[2] = v21 + 12 * v22;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        _DWORD *v5 = v12;
        v5[1] = v16;
        v5[2] = v17;
        v5 += 3;
      }
      a1[1] = v5;
      ++v7;
    }
    while (v7 != v3);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a1);
}

uint64_t FRCode::get_previous_op(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v2 = *(_DWORD *)(a2 - 12);
  unint64_t v3 = 0xFFFFFFFFLL;
  if (v2 <= 0xF)
  {
    if (((1 << v2) & 0xF400) != 0) {
      return -1431655765 * ((unint64_t)(a2 - a1) >> 2) - 1;
    }
    if (((1 << v2) & 0x28) != 0)
    {
      unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
      unint64_t v3 = (v4 - 1);
      if (v4 > v3)
      {
        int v5 = 0;
        while (2)
        {
          switch(*(_DWORD *)(a1 + 12 * v3))
          {
            case 2:
            case 4:
              if (!--v5) {
                return v3;
              }
              goto LABEL_12;
            case 3:
            case 5:
              ++v5;
              goto LABEL_12;
            default:
LABEL_12:
              unint64_t v3 = (v3 - 1);
              if (v4 <= v3) {
                break;
              }
              continue;
          }
          break;
        }
      }
LABEL_13:
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    if (v2 != 9) {
      return v3;
    }
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
    if ((*(unsigned char *)(a2 - 8) & 0x80) == 0) {
      return (v6 - 1);
    }
    if (v6 < 2) {
      return 0xFFFFFFFFLL;
    }
    unint64_t v8 = (v6 - 2);
    if (v6 <= v8) {
      goto LABEL_13;
    }
    unsigned int v9 = v6 - 3;
    while ((*(_DWORD *)(a1 + 12 * v8 + 4) + 62) >= 0x33u)
    {
      unint64_t v8 = v9;
      if (v6 <= v9--) {
        goto LABEL_13;
      }
    }
    return v9 + 1;
  }
  return v3;
}

uint64_t FRCode::create_range(uint64_t a1, void **a2, void *a3, uint64_t a4, int a5)
{
  if (*(unsigned char *)(a1 + 120))
  {
    std::string __p = 0;
    v331 = 0;
    v332 = 0;
    memset(&v329, 0, sizeof(v329));
    __dst[0] = 0;
    __dst[1] = 0;
    char v317 = a5;
    if (a5) {
      unint64_t v48 = 2;
    }
    else {
      unint64_t v48 = 1;
    }
    v326[0] = 0;
    std::string::push_back(&v329, 91);
    v319 = a3;
    for (std::string::size_type i = v48; ; i += v324)
    {
      uint64_t v50 = *(unsigned __int8 *)(a4 + 23);
      if (*(char *)(a4 + 23) < 0)
      {
        if (i >= *(void *)(a4 + 8) - 1)
        {
LABEL_469:
          std::string::size_type v267 = (char *)__dst[0];
          if (__dst[0] == __dst[1])
          {
            uint64_t v269 = v319;
          }
          else
          {
            v268 = v331;
            std::string::size_type v267 = (char *)__dst[1];
            uint64_t v269 = v319;
            do
            {
              if (v268 >= v332)
              {
                unint64_t v271 = (unint64_t)__p;
                uint64_t v272 = v268 - (unsigned char *)__p;
                uint64_t v273 = v268 - (unsigned char *)__p + 1;
                if (v273 < 0) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v274 = v332 - (unsigned char *)__p;
                if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v273) {
                  uint64_t v273 = 2 * v274;
                }
                if (v274 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v275 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v275 = v273;
                }
                if (v275) {
                  v276 = (char *)operator new(v275);
                }
                else {
                  v276 = 0;
                }
                v277 = &v276[v272];
                int v278 = &v276[v272];
                *int v278 = *(v267 - 1);
                int v270 = v278 + 1;
                if (v268 != (char *)v271)
                {
                  v279 = &v268[~v271];
                  do
                  {
                    char v280 = *--v268;
                    (v279--)[(void)v276] = v280;
                  }
                  while (v268 != (char *)v271);
                  v268 = (char *)__p;
                  v277 = v276;
                }
                std::string __p = v277;
                v331 = v270;
                v332 = &v276[v275];
                if (v268) {
                  operator delete(v268);
                }
              }
              else
              {
                char *v268 = *(v267 - 1);
                int v270 = v268 + 1;
              }
              v331 = v270;
              std::string::size_type v267 = (char *)__dst[1] - 1;
              __dst[1] = v267;
              v268 = v270;
            }
            while (__dst[0] != v267);
          }
          std::string::push_back(&v329, 93);
          if (v267) {
            operator delete(v267);
          }
          LOBYTE(__dst[0]) = 0;
          v326[0] = 0;
          v326[1] = 0;
          __dst[1] = 0;
          char v328 = v317;
          int v334 = 0;
          if ((v329.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v281 = &v329;
          }
          else {
            v281 = (std::string *)v329.__r_.__value_.__r.__words[0];
          }
          if ((v329.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v329.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v329.__r_.__value_.__l.__size_;
          }
          UTFString::to_utf16(&v335, (const char *)v281, size);
          uint64_t v283 = uset_openPatternOptions();
          if (!v334)
          {
            uint64_t v286 = v283;
            MEMORY[0x21055AB50]();
            MEMORY[0x21055ABB0](v286);
            operator new[]();
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          v284 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_20CD80000, v284, OS_LOG_TYPE_ERROR, "create uset error!", buf, 2u);
          }
          Diagnostics::log(3, "create uset error!", v285);
          if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v335.__r_.__value_.__l.__data_);
          }
          int v288 = (char *)__p;
          v287 = v331;
          size_t v289 = v331 - (unsigned char *)__p;
          int v290 = (char *)__dst[1];
          if ((void *)((char *)v326[1] - (char *)__dst[1]) >= (void *)(v331 - (unsigned char *)__p))
          {
            if ((char *)v326[0] - (char *)__dst[1] >= v289) {
              goto LABEL_517;
            }
            v292 = (char *)__p + (char *)v326[0] - (char *)__dst[1];
            if (v331 != v292) {
              memmove(__dst[1], v292, v331 - v292);
            }
            v293 = (char *)__dst[1] + v287 - v292;
          }
          else
          {
            if ((v289 & 0x8000000000000000) != 0) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            size_t v291 = 2 * (uint64_t)v326[1];
            if (2 * (uint64_t)v326[1] <= v289) {
              size_t v291 = v331 - (unsigned char *)__p;
            }
            std::vector<signed char>::__vallocate[abi:ne180100](&__dst[1], v291);
            int v290 = (char *)v326[0];
LABEL_517:
            if (v287 != v288) {
              memmove(v290, v288, v289);
            }
            v293 = &v290[v289];
          }
          v326[0] = v293;
          unint64_t v294 = v269[2];
          unint64_t v295 = v269[1];
          if (v295 < v294) {
            FRCodeUMap::FRCodeUMap((FRCodeUMap *)v269[1], (const FRCodeUMap *)__dst);
          }
          unint64_t v296 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v295 - *v269) >> 4);
          if (v296 + 1 <= 0x333333333333333)
          {
            unint64_t v297 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v294 - *v269) >> 4);
            uint64_t v298 = 2 * v297;
            if (2 * v297 <= v296 + 1) {
              uint64_t v298 = v296 + 1;
            }
            if (v297 >= 0x199999999999999) {
              unint64_t v299 = 0x333333333333333;
            }
            else {
              unint64_t v299 = v298;
            }
            v337 = v269 + 2;
            if (v299)
            {
              if (v299 > 0x333333333333333) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v300 = (char *)operator new(80 * v299);
            }
            else
            {
              v300 = 0;
            }
            v335.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v300;
            v335.__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)&v300[80 * v296];
            v335.__r_.__value_.__r.__words[2] = v335.__r_.__value_.__l.__size_;
            int v336 = &v300[80 * v299];
            FRCodeUMap::FRCodeUMap((FRCodeUMap *)v335.__r_.__value_.__l.__size_, (const FRCodeUMap *)__dst);
          }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v51 = *(void *)a4;
      }
      else
      {
        uint64_t v51 = a4;
        if (i >= v50 - 1) {
          goto LABEL_469;
        }
      }
      uint64_t v52 = (int)i + 1;
      unsigned int v53 = *(unsigned __int8 *)(v51 + (int)i);
      if ((v53 + 62) > 0x32u) {
        goto LABEL_126;
      }
      if ((v50 & 0x80) != 0)
      {
        if (*(void *)(a4 + 8) == v52) {
          goto LABEL_126;
        }
        uint64_t v54 = *(void *)a4;
      }
      else
      {
        uint64_t v54 = a4;
        if (v50 == v52) {
          goto LABEL_126;
        }
      }
      unint64_t v55 = *(unsigned __int8 *)(v54 + v52);
      if ((v53 & 0xF0) == 0xE0)
      {
        if ((a00000000000000[v53 & 0xF] >> (v55 >> 5)))
        {
          uint64_t v52 = (int)i + 2;
          if ((v50 & 0x80) != 0)
          {
            if (*(void *)(a4 + 8) != v52)
            {
              uint64_t v56 = *(void *)a4;
LABEL_121:
              int v59 = *(char *)(v56 + v52);
              int v60 = i + 3;
              goto LABEL_122;
            }
          }
          else
          {
            uint64_t v56 = a4;
            if (v50 != v52) {
              goto LABEL_121;
            }
          }
        }
      }
      else
      {
        if (v53 <= 0xDF)
        {
          if ((char)v55 < -64) {
            LODWORD(v52) = i + 2;
          }
          goto LABEL_126;
        }
        if ((byte_20D6DDA97[v55 >> 4] >> (v53 & 7)))
        {
          uint64_t v52 = (int)i + 2;
          if ((v50 & 0x80) != 0)
          {
            uint64_t v61 = *(void *)(a4 + 8);
            if (v61 != v52)
            {
              uint64_t v58 = *(void *)a4;
              if (*(char *)(*(void *)a4 + v52) <= -65)
              {
                LODWORD(v52) = i + 3;
                if (v61 != i + 3)
                {
                  uint64_t v57 = (int)v52;
LABEL_378:
                  int v59 = *(char *)(v58 + v57);
                  int v60 = i + 4;
LABEL_122:
                  if (v59 < -64) {
                    LODWORD(v52) = v60;
                  }
                }
              }
            }
          }
          else if (v50 != v52 && *(char *)(a4 + v52) < -64)
          {
            LODWORD(v52) = i + 3;
            if (v50 != i + 3)
            {
              uint64_t v57 = (int)v52;
              uint64_t v58 = a4;
              goto LABEL_378;
            }
          }
        }
      }
LABEL_126:
      int v324 = v52 - i;
      if ((int)v52 - (int)i >= 2)
      {
        uint64_t v62 = (int)v52;
        std::string::size_type v63 = i;
        if (i < (int)v52)
        {
          do
          {
            char v64 = (std::string::value_type *)std::string::at((const std::string *)a4, v63);
            std::string::push_back(&v329, *v64);
            ++v63;
          }
          while (v62 != v63);
        }
        int v65 = (char *)__dst[1];
        if (__dst[0] != __dst[1])
        {
          char v66 = v331;
          do
          {
            if (v66 >= v332)
            {
              unint64_t v68 = (unint64_t)__p;
              uint64_t v69 = v66 - (unsigned char *)__p;
              uint64_t v70 = v66 - (unsigned char *)__p + 1;
              if (v70 < 0) {
                goto LABEL_553;
              }
              unint64_t v71 = v332 - (unsigned char *)__p;
              if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v70) {
                uint64_t v70 = 2 * v71;
              }
              if (v71 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v72 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v72 = v70;
              }
              if (v72) {
                int v73 = (char *)operator new(v72);
              }
              else {
                int v73 = 0;
              }
              int v74 = &v73[v69];
              int v75 = &v73[v69];
              *int v75 = *(v65 - 1);
              float v67 = v75 + 1;
              if (v66 != (char *)v68)
              {
                int v76 = &v66[~v68];
                do
                {
                  char v77 = *--v66;
                  (v76--)[(void)v73] = v77;
                }
                while (v66 != (char *)v68);
                char v66 = (char *)__p;
                int v74 = v73;
              }
              std::string __p = v74;
              v331 = v67;
              v332 = &v73[v72];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              char *v66 = *(v65 - 1);
              float v67 = v66 + 1;
            }
            v331 = v67;
            int v65 = (char *)__dst[1] - 1;
            __dst[1] = v65;
            char v66 = v67;
          }
          while (__dst[0] != v65);
        }
        std::string::const_reference v78 = std::string::at((const std::string *)a4, i);
        int v79 = (char *)v78;
        int v80 = v331;
        if (v331 < v332)
        {
          char *v331 = *v78;
          int v81 = v80 + 1;
LABEL_151:
          int v82 = v81;
LABEL_261:
          v331 = v82;
          continue;
        }
        unint64_t v96 = (unint64_t)__p;
        uint64_t v97 = v331 - (unsigned char *)__p;
        uint64_t v98 = v331 - (unsigned char *)__p + 1;
        if (v98 < 0) {
LABEL_553:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        unint64_t v99 = v332 - (unsigned char *)__p;
        if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v98) {
          uint64_t v98 = 2 * v99;
        }
        if (v99 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v100 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v100 = v98;
        }
        if (v100) {
          float v101 = (char *)operator new(v100);
        }
        else {
          float v101 = 0;
        }
        uint64_t v148 = &v101[v97];
        unint64_t v149 = &v101[v97];
        char *v149 = *v79;
        int v82 = v149 + 1;
        if (v80 == (char *)v96)
        {
LABEL_259:
          std::string __p = v148;
          v331 = v82;
          v332 = &v101[v100];
          if (v80) {
            operator delete(v80);
          }
          goto LABEL_261;
        }
        int v150 = &v80[~v96];
        do
        {
          char v151 = *--v80;
          (v150--)[(void)v101] = v151;
        }
        while (v80 != (char *)v96);
LABEL_258:
        int v80 = (char *)__p;
        uint64_t v148 = v101;
        goto LABEL_259;
      }
      int v83 = *std::string::at((const std::string *)a4, i);
      unint64_t v85 = (unint64_t)__dst[0];
      int64_t v84 = (char *)__dst[1];
      if (v83 == 92)
      {
        if (__dst[0] != __dst[1] && *((unsigned char *)__dst[1] - 1) == 92)
        {
          std::string::append(&v329, "\\\\"");
          uint64_t v86 = v331;
          if (v331 >= v332)
          {
            unint64_t v161 = (unint64_t)__p;
            uint64_t v162 = v331 - (unsigned char *)__p;
            uint64_t v163 = v331 - (unsigned char *)__p + 1;
            if (v163 < 0) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v164 = v332 - (unsigned char *)__p;
            if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v163) {
              uint64_t v163 = 2 * v164;
            }
            if (v164 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v165 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v165 = v163;
            }
            if (v165) {
              int v166 = (char *)operator new(v165);
            }
            else {
              int v166 = 0;
            }
            int v192 = &v166[v162];
            v193 = &v166[v162];
            char *v193 = 92;
            unint64_t v87 = v193 + 1;
            if (v86 != (char *)v161)
            {
              int v194 = &v86[~v161];
              do
              {
                char v195 = *--v86;
                (v194--)[(void)v166] = v195;
              }
              while (v86 != (char *)v161);
              uint64_t v86 = (char *)__p;
              int v192 = v166;
            }
            std::string __p = v192;
            v331 = v87;
            v332 = &v166[v165];
            if (v86) {
              operator delete(v86);
            }
          }
          else
          {
            char *v331 = 92;
            unint64_t v87 = v86 + 1;
          }
          v331 = v87;
          char v102 = (char *)__dst[1] - 1;
          goto LABEL_343;
        }
        if (__dst[1] < v326[0])
        {
          *(unsigned char *)__dst[1] = 92;
          char v102 = v84 + 1;
LABEL_343:
          __dst[1] = v102;
          continue;
        }
        int64_t v152 = (char *)__dst[1] - (char *)__dst[0];
        int64_t v153 = (char *)__dst[1] - (char *)__dst[0] + 1;
        if (v153 >= 0)
        {
          unint64_t v154 = (char *)v326[0] - (char *)__dst[0];
          if (2 * ((char *)v326[0] - (char *)__dst[0]) > (unint64_t)v153) {
            int64_t v153 = 2 * v154;
          }
          if (v154 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v155 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v155 = v153;
          }
          if (v155) {
            int v156 = (char *)operator new(v155);
          }
          else {
            int v156 = 0;
          }
          unint64_t v167 = &v156[v152];
          int v168 = &v156[v152];
          char *v168 = 92;
          char v102 = v168 + 1;
          if ((char *)v85 != v84)
          {
            unint64_t v169 = &v84[~v85];
            do
            {
              char v170 = *--v84;
              (v169--)[(void)v156] = v170;
            }
            while (v84 != (char *)v85);
            unint64_t v85 = (unint64_t)__dst[0];
            unint64_t v167 = v156;
          }
          __dst[0] = v167;
          v326[0] = &v156[v155];
          if (v85) {
            operator delete((void *)v85);
          }
          goto LABEL_343;
        }
LABEL_561:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      std::string::value_type v88 = v83;
      if (__dst[0] != __dst[1] && *((unsigned char *)__dst[1] - 1) == 92)
      {
        switch(v83)
        {
          case 'a':
            uint64_t v89 = v331;
            if (v331 < v332) {
              goto LABEL_301;
            }
            unint64_t v90 = (unint64_t)__p;
            uint64_t v91 = v331 - (unsigned char *)__p;
            uint64_t v92 = v331 - (unsigned char *)__p + 1;
            if (v92 < 0) {
              goto LABEL_561;
            }
            unint64_t v93 = v332 - (unsigned char *)__p;
            if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v92) {
              uint64_t v92 = 2 * v93;
            }
            if (v93 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v94 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v94 = v92;
            }
            if (v94) {
              int v95 = (char *)operator new(v94);
            }
            else {
              int v95 = 0;
            }
            v253 = &v95[v91];
            int v254 = &v95[v91];
            *int v254 = v88;
            int v171 = v254 + 1;
            if (v89 != (char *)v90)
            {
              uint64_t v255 = &v89[~v90];
              do
              {
                char v256 = *--v89;
                (v255--)[(void)v95] = v256;
              }
              while (v89 != (char *)v90);
              uint64_t v89 = (char *)__p;
              v253 = v95;
            }
            std::string __p = v253;
            v331 = v171;
            v332 = &v95[v94];
            if (v89) {
              operator delete(v89);
            }
            goto LABEL_457;
          case 'b':
            goto LABEL_344;
          case 'c':
            v199 = v331;
            if (v331 >= v332)
            {
              unint64_t v225 = (unint64_t)__p;
              uint64_t v226 = v331 - (unsigned char *)__p;
              uint64_t v227 = v331 - (unsigned char *)__p + 1;
              if (v227 < 0) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v228 = v332 - (unsigned char *)__p;
              if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v227) {
                uint64_t v227 = 2 * v228;
              }
              if (v228 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v229 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v229 = v227;
              }
              if (v229) {
                int v230 = (char *)operator new(v229);
              }
              else {
                int v230 = 0;
              }
              size_t v249 = &v230[v226];
              int v250 = &v230[v226];
              *int v250 = 58;
              int v200 = v250 + 1;
              if (v199 != (char *)v225)
              {
                std::string::size_type v251 = &v199[~v225];
                do
                {
                  char v252 = *--v199;
                  (v251--)[(void)v230] = v252;
                }
                while (v199 != (char *)v225);
                v199 = (char *)__p;
                size_t v249 = v230;
              }
              std::string __p = v249;
              v331 = v200;
              v332 = &v230[v229];
              if (v199) {
                operator delete(v199);
              }
            }
            else
            {
              char *v331 = 58;
              int v200 = v199 + 1;
            }
            v331 = v200;
            std::string::append(&v329, "\\:");
            goto LABEL_466;
          case 'd':
            std::string::append(&v329, "0-9");
            unsigned int v201 = 48;
            int v202 = v331;
            do
            {
              if (v202 >= v332)
              {
                unint64_t v204 = (unint64_t)__p;
                uint64_t v205 = v202 - (unsigned char *)__p;
                uint64_t v206 = v202 - (unsigned char *)__p + 1;
                if (v206 < 0) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v207 = v332 - (unsigned char *)__p;
                if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v206) {
                  uint64_t v206 = 2 * v207;
                }
                if (v207 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v208 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v208 = v206;
                }
                if (v208) {
                  uint64_t v209 = (char *)operator new(v208);
                }
                else {
                  uint64_t v209 = 0;
                }
                int v210 = &v209[v205];
                v211 = &v209[v205];
                char *v211 = v201;
                v203 = v211 + 1;
                if (v202 != (char *)v204)
                {
                  unint64_t v212 = &v202[~v204];
                  do
                  {
                    char v213 = *--v202;
                    (v212--)[(void)v209] = v213;
                  }
                  while (v202 != (char *)v204);
                  int v202 = (char *)__p;
                  int v210 = v209;
                }
                std::string __p = v210;
                v331 = v203;
                v332 = &v209[v208];
                if (v202) {
                  operator delete(v202);
                }
              }
              else
              {
                char *v202 = v201;
                v203 = v202 + 1;
              }
              v331 = v203;
              int v202 = v203;
            }
            while (v201++ < 0x39);
            goto LABEL_466;
          case 'e':
            std::string::append(&v329, "\\u001b");
            v196 = v331;
            if (v331 < v332)
            {
              char v198 = 27;
LABEL_373:
              char *v196 = v198;
              uint64_t v197 = v196 + 1;
              goto LABEL_374;
            }
            unint64_t v231 = (unint64_t)__p;
            uint64_t v232 = v331 - (unsigned char *)__p;
            uint64_t v233 = v331 - (unsigned char *)__p + 1;
            if (v233 < 0) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v234 = v332 - (unsigned char *)__p;
            if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v233) {
              uint64_t v233 = 2 * v234;
            }
            if (v234 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v220 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v220 = v233;
            }
            if (v220) {
              unint64_t v221 = (char *)operator new(v220);
            }
            else {
              unint64_t v221 = 0;
            }
            uint64_t v245 = &v221[v232];
            uint64_t v257 = &v221[v232];
            *uint64_t v257 = 27;
            v215 = v257 + 1;
            if (v196 == (char *)v231) {
              goto LABEL_463;
            }
            int v258 = &v196[~v231];
            do
            {
              char v259 = *--v196;
              (v258--)[(void)v221] = v259;
            }
            while (v196 != (char *)v231);
            goto LABEL_462;
          default:
            if (v83 == 115)
            {
              std::string::push_back(&v329, 32);
              v196 = v331;
              if (v331 < v332)
              {
                char v198 = 32;
                goto LABEL_373;
              }
              unint64_t v241 = (unint64_t)__p;
              uint64_t v242 = v331 - (unsigned char *)__p;
              uint64_t v243 = v331 - (unsigned char *)__p + 1;
              if (v243 < 0) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v244 = v332 - (unsigned char *)__p;
              if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v243) {
                uint64_t v243 = 2 * v244;
              }
              if (v244 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v220 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v220 = v243;
              }
              if (v220) {
                unint64_t v221 = (char *)operator new(v220);
              }
              else {
                unint64_t v221 = 0;
              }
              uint64_t v245 = &v221[v242];
              int v264 = &v221[v242];
              char *v264 = 32;
              v215 = v264 + 1;
              if (v196 != (char *)v241)
              {
                uint64_t v265 = &v196[~v241];
                do
                {
                  char v266 = *--v196;
                  (v265--)[(void)v221] = v266;
                }
                while (v196 != (char *)v241);
                goto LABEL_462;
              }
            }
            else
            {
              if (v83 == 117)
              {
                uint64_t v89 = v331;
                if (v331 >= v332)
                {
                  unint64_t v235 = (unint64_t)__p;
                  uint64_t v236 = v331 - (unsigned char *)__p;
                  uint64_t v237 = v331 - (unsigned char *)__p + 1;
                  if (v237 < 0) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v238 = v332 - (unsigned char *)__p;
                  if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v237) {
                    uint64_t v237 = 2 * v238;
                  }
                  if (v238 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v239 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v239 = v237;
                  }
                  if (v239) {
                    int v240 = (char *)operator new(v239);
                  }
                  else {
                    int v240 = 0;
                  }
                  int v260 = &v240[v236];
                  std::string::size_type v261 = &v240[v236];
                  *std::string::size_type v261 = 95;
                  int v171 = v261 + 1;
                  if (v89 != (char *)v235)
                  {
                    int v262 = &v89[~v235];
                    do
                    {
                      char v263 = *--v89;
                      (v262--)[(void)v240] = v263;
                    }
                    while (v89 != (char *)v235);
                    uint64_t v89 = (char *)__p;
                    int v260 = v240;
                  }
                  std::string __p = v260;
                  v331 = v171;
                  v332 = &v240[v239];
                  if (v89) {
                    operator delete(v89);
                  }
                  std::string::value_type v88 = 95;
                }
                else
                {
                  std::string::value_type v88 = 95;
LABEL_301:
                  char *v89 = v88;
                  int v171 = v89 + 1;
                }
LABEL_457:
                v331 = v171;
                std::string::push_back(&v329, v88);
                goto LABEL_466;
              }
LABEL_344:
              std::string::push_back(&v329, 92);
              std::string::push_back(&v329, v83);
              v196 = v331;
              if (v331 < v332)
              {
                char *v331 = v83;
                uint64_t v197 = v196 + 1;
LABEL_374:
                v215 = v197;
LABEL_465:
                v331 = v215;
LABEL_466:
                int v146 = (char *)__dst[1] - 1;
                goto LABEL_467;
              }
              unint64_t v216 = (unint64_t)__p;
              uint64_t v217 = v331 - (unsigned char *)__p;
              uint64_t v218 = v331 - (unsigned char *)__p + 1;
              if (v218 < 0) {
                goto LABEL_561;
              }
              unint64_t v219 = v332 - (unsigned char *)__p;
              if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v218) {
                uint64_t v218 = 2 * v219;
              }
              if (v219 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v220 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v220 = v218;
              }
              if (v220) {
                unint64_t v221 = (char *)operator new(v220);
              }
              else {
                unint64_t v221 = 0;
              }
              uint64_t v245 = &v221[v217];
              int v246 = &v221[v217];
              std::string::value_type *v246 = v88;
              v215 = v246 + 1;
              if (v196 != (char *)v216)
              {
                uint64_t v247 = &v196[~v216];
                do
                {
                  char v248 = *--v196;
                  (v247--)[(void)v221] = v248;
                }
                while (v196 != (char *)v216);
LABEL_462:
                v196 = (char *)__p;
                uint64_t v245 = v221;
              }
            }
LABEL_463:
            std::string __p = v245;
            v331 = v215;
            v332 = &v221[v220];
            if (v196) {
              operator delete(v196);
            }
            goto LABEL_465;
        }
      }
      if (i > v48
        && *std::string::at((const std::string *)a4, i - 1) != 92
        && v83 - 36 <= 0x3A
        && ((1 << (v83 - 36)) & 0x400000000000005) != 0)
      {
        std::string::push_back(&v329, 92);
        std::string::push_back(&v329, v83);
        int v80 = v331;
        if (v331 < v332)
        {
          char *v331 = v83;
          int v81 = v80 + 1;
          goto LABEL_151;
        }
        unint64_t v188 = (unint64_t)__p;
        uint64_t v189 = v331 - (unsigned char *)__p;
        uint64_t v190 = v331 - (unsigned char *)__p + 1;
        if (v190 >= 0)
        {
          unint64_t v191 = v332 - (unsigned char *)__p;
          if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v190) {
            uint64_t v190 = 2 * v191;
          }
          if (v191 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v100 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v100 = v190;
          }
          if (v100) {
            float v101 = (char *)operator new(v100);
          }
          else {
            float v101 = 0;
          }
          uint64_t v148 = &v101[v189];
          int v222 = &v101[v189];
          std::string::value_type *v222 = v88;
          int v82 = v222 + 1;
          if (v80 == (char *)v188) {
            goto LABEL_259;
          }
          v223 = &v80[~v188];
          do
          {
            char v224 = *--v80;
            (v223--)[(void)v101] = v224;
          }
          while (v80 != (char *)v188);
          goto LABEL_258;
        }
        goto LABEL_561;
      }
      int64_t v103 = (char *)__dst[1] - (char *)__dst[0];
      if ((void *)((char *)__dst[1] - (char *)__dst[0]) < (void *)2
        || (char v104 = (char *)__dst[1] - 1, *((unsigned char *)__dst[1] - 1) != 45))
      {
        if (__dst[1] >= v326[0])
        {
          unint64_t v157 = v103 + 1;
          if (v103 + 1 < 0) {
            goto LABEL_561;
          }
          unint64_t v158 = (char *)v326[0] - (char *)__dst[0];
          if (2 * ((char *)v326[0] - (char *)__dst[0]) > v157) {
            unint64_t v157 = 2 * v158;
          }
          if (v158 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v159 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v159 = v157;
          }
          if (v159) {
            int v160 = (char *)operator new(v159);
          }
          else {
            int v160 = 0;
          }
          uint64_t v172 = &v160[v103];
          uint64_t v173 = &v160[v103];
          char *v173 = v83;
          unint64_t v147 = v173 + 1;
          if ((char *)v85 != v84)
          {
            int v174 = &v84[~v85];
            do
            {
              char v175 = *--v84;
              (v174--)[(void)v160] = v175;
            }
            while (v84 != (char *)v85);
            unint64_t v85 = (unint64_t)__dst[0];
            uint64_t v172 = v160;
          }
          __dst[0] = v172;
          v326[0] = &v160[v159];
          if (v85) {
            operator delete((void *)v85);
          }
        }
        else
        {
          *(unsigned char *)__dst[1] = v83;
          unint64_t v147 = v84 + 1;
        }
        __dst[1] = v147;
        int v176 = v331;
        if (v331 >= v332)
        {
          unint64_t v178 = (unint64_t)__p;
          uint64_t v179 = v331 - (unsigned char *)__p;
          uint64_t v180 = v331 - (unsigned char *)__p + 1;
          if (v180 < 0) {
            goto LABEL_561;
          }
          unint64_t v181 = v332 - (unsigned char *)__p;
          if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v180) {
            uint64_t v180 = 2 * v181;
          }
          if (v181 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v182 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v182 = v180;
          }
          if (v182) {
            double v183 = (char *)operator new(v182);
          }
          else {
            double v183 = 0;
          }
          int v184 = &v183[v179];
          int v185 = &v183[v179];
          *int v185 = v88;
          BOOL v177 = v185 + 1;
          if (v176 != (char *)v178)
          {
            int v186 = &v176[~v178];
            do
            {
              char v187 = *--v176;
              (v186--)[(void)v183] = v187;
            }
            while (v176 != (char *)v178);
            int v176 = (char *)__p;
            int v184 = v183;
          }
          std::string __p = v184;
          v331 = v177;
          v332 = &v183[v182];
          if (v176) {
            operator delete(v176);
          }
        }
        else
        {
          char *v331 = v83;
          BOOL v177 = v176 + 1;
        }
        v331 = v177;
        std::string::push_back(&v329, v88);
        continue;
      }
      std::string::push_back(&v329, v83);
      --__dst[1];
      uint64_t v105 = *(v84 - 2);
      if ((int)v105 > v83) {
        goto LABEL_251;
      }
      std::string::size_type v321 = i;
      do
      {
        if ((*(unsigned char *)(a1 + 120) & 8) != 0)
        {
          if ((v105 & 0x80) != 0) {
            int v108 = __maskrune(v105, 0x100uLL);
          }
          else {
            int v108 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v105 + 60) & 0x100;
          }
          int v107 = v331;
          unint64_t v106 = (unint64_t)v332;
          if (v108)
          {
            uint64_t v109 = case_folding[v105];
            if (v331 >= v332)
            {
              unint64_t v118 = (unint64_t)__p;
              uint64_t v119 = v331 - (unsigned char *)__p;
              uint64_t v120 = v331 - (unsigned char *)__p + 1;
              if (v120 < 0) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v121 = v332 - (unsigned char *)__p;
              if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v120) {
                uint64_t v120 = 2 * v121;
              }
              if (v121 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v122 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v122 = v120;
              }
              if (v122) {
                int v123 = (char *)operator new(v122);
              }
              else {
                int v123 = 0;
              }
              std::string::size_type v128 = &v123[v119];
              v129 = &v123[v119];
              char *v129 = v109;
              int v110 = v129 + 1;
              if (v107 != (char *)v118)
              {
                long long v130 = &v107[~v118];
                do
                {
                  char v131 = *--v107;
                  (v130--)[(void)v123] = v131;
                }
                while (v107 != (char *)v118);
                int v107 = (char *)__p;
                std::string::size_type v128 = v123;
              }
              std::string __p = v128;
              v331 = v110;
              v332 = &v123[v122];
              if (v107) {
                operator delete(v107);
              }
            }
            else
            {
              char *v331 = v109;
              int v110 = v107 + 1;
            }
            v331 = v110;
            std::string::value_type v132 = case_folding[v105 & 0xFFFFFEFF | 0x100];
            if (v110 < v332)
            {
              char *v110 = v132;
              uint64_t v133 = (uint64_t)(v110 + 1);
LABEL_245:
              v331 = (char *)v133;
              if (v105 == v109) {
                std::string::value_type v145 = v132;
              }
              else {
                std::string::value_type v145 = v109;
              }
              std::string::push_back(&v329, v145);
              goto LABEL_249;
            }
            uint64_t v134 = v109;
            unint64_t v135 = v48;
            unint64_t v136 = (unint64_t)__p;
            uint64_t v137 = v110 - (unsigned char *)__p;
            uint64_t v138 = v110 - (unsigned char *)__p + 1;
            if (v138 < 0) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v139 = v332 - (unsigned char *)__p;
            if (2 * (v332 - (unsigned char *)__p) > (unint64_t)v138) {
              uint64_t v138 = 2 * v139;
            }
            if (v139 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v140 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v140 = v138;
            }
            if (v140) {
              unint64_t v141 = operator new(v140);
            }
            else {
              unint64_t v141 = 0;
            }
            int v142 = (char *)v141 + v140;
            *((unsigned char *)v141 + v137) = v132;
            uint64_t v133 = (uint64_t)v141 + v137 + 1;
            if (v110 == (char *)v136)
            {
              std::string __p = (char *)v141 + v137;
              v331 = (char *)v141 + v137 + 1;
              v332 = v142;
              unint64_t v48 = v135;
              uint64_t v109 = v134;
            }
            else
            {
              uint64_t v143 = &v110[~v136];
              unint64_t v48 = v135;
              do
              {
                char v144 = *--v110;
                (v143--)[(void)v141] = v144;
              }
              while (v110 != (char *)v136);
              int v110 = (char *)__p;
              std::string __p = v141;
              v331 = (char *)v133;
              v332 = v142;
              uint64_t v109 = v134;
              if (!v110) {
                goto LABEL_244;
              }
            }
            operator delete(v110);
LABEL_244:
            std::string::size_type i = v321;
            goto LABEL_245;
          }
        }
        else
        {
          int v107 = v331;
          unint64_t v106 = (unint64_t)v332;
        }
        if ((unint64_t)v107 >= v106)
        {
          unint64_t v112 = (unint64_t)__p;
          uint64_t v113 = v107 - (unsigned char *)__p;
          uint64_t v114 = v107 - (unsigned char *)__p + 1;
          if (v114 < 0) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v115 = v106 - (void)__p;
          if (2 * v115 > v114) {
            uint64_t v114 = 2 * v115;
          }
          if (v115 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v116 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v116 = v114;
          }
          if (v116) {
            std::string::size_type v117 = (char *)operator new(v116);
          }
          else {
            std::string::size_type v117 = 0;
          }
          unint64_t v124 = &v117[v113];
          uint64_t v125 = &v117[v113];
          *uint64_t v125 = v105;
          int v111 = v125 + 1;
          if (v107 != (char *)v112)
          {
            uint64_t v126 = &v107[~v112];
            do
            {
              char v127 = *--v107;
              (v126--)[(void)v117] = v127;
            }
            while (v107 != (char *)v112);
            int v107 = (char *)__p;
            unint64_t v124 = v117;
          }
          std::string __p = v124;
          v331 = v111;
          v332 = &v117[v116];
          if (v107) {
            operator delete(v107);
          }
        }
        else
        {
          char *v107 = v105;
          int v111 = v107 + 1;
        }
        v331 = v111;
LABEL_249:
        ++v105;
      }
      while ((int)v105 <= v83);
      char v104 = (char *)__dst[1];
LABEL_251:
      int v146 = v104 - 1;
LABEL_467:
      __dst[1] = v146;
    }
  }
  unint64_t v6 = a2;
  unint64_t v7 = 0;
  int v8 = *(char *)(a4 + 23);
  uint64_t v9 = *(void *)a4;
  if (v8 >= 0) {
    uint64_t v9 = a4;
  }
  uint64_t v323 = v9;
  if (v8 >= 0) {
    unint64_t v10 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    unint64_t v10 = *(void *)(a4 + 8);
  }
  *(_OWORD *)std::vector<int> __dst = 0u;
  *(_OWORD *)int v326 = 0u;
  LOBYTE(v327) = a5;
  memset(&v335, 0, sizeof(v335));
  if (a5) {
    unint64_t v11 = 2;
  }
  else {
    unint64_t v11 = 1;
  }
  unint64_t v320 = v10;
  unint64_t v12 = v10 - 1;
  if (v11 < v10 - 1)
  {
    unint64_t v7 = 0;
    std::basic_string<char16_t>::size_type v13 = 0;
    while (1)
    {
      unint64_t v14 = *(unsigned __int8 *)boost::basic_string_ref<char,std::char_traits<char>>::at(v323, v320, v11);
      if (v14 == 92)
      {
        if ((unsigned char *)v13 == v7 || (int v15 = v7 - 1, *(v7 - 1) != 92))
        {
          if ((unint64_t)v7 >= v335.__r_.__value_.__r.__words[2])
          {
            int v26 = &v7[-v13];
            uint64_t v27 = (uint64_t)&v7[-v13 + 1];
            if (v27 < 0) {
              goto LABEL_557;
            }
            unint64_t v28 = v335.__r_.__value_.__r.__words[2] - v13;
            if (2 * (v335.__r_.__value_.__r.__words[2] - v13) > v27) {
              uint64_t v27 = 2 * v28;
            }
            if (v28 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v29 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v29 = v27;
            }
            if (v29) {
              std::basic_string<char16_t>::size_type v30 = (std::basic_string<char16_t>::size_type)operator new(v29);
            }
            else {
              std::basic_string<char16_t>::size_type v30 = 0;
            }
            unint64_t v35 = &v26[v30];
            uint64_t v36 = &v26[v30];
            unsigned char *v36 = 92;
            uint64_t v37 = v36 + 1;
            if ((unsigned char *)v13 == v7)
            {
              std::basic_string<char16_t>::size_type v13 = (std::basic_string<char16_t>::size_type)v35;
            }
            else
            {
              unint64_t v38 = &v7[~v13];
              do
              {
                char v39 = *--v7;
                (v38--)[v30] = v39;
              }
              while (v7 != (unsigned char *)v13);
              unint64_t v7 = (unsigned char *)v335.__r_.__value_.__r.__words[0];
              std::basic_string<char16_t>::size_type v13 = v30;
            }
            v335.__r_.__value_.__r.__words[0] = v13;
            v335.__r_.__value_.__r.__words[2] = v30 + v29;
            if (v7) {
              operator delete(v7);
            }
            unint64_t v7 = v37;
          }
          else
          {
            *v7++ = 92;
          }
          goto LABEL_83;
        }
        int v16 = (void *)((unint64_t)__dst[1] | 0x10000000);
LABEL_16:
        __dst[1] = v16;
      }
      else
      {
        if ((unsigned char *)v13 == v7 || (int v15 = v7 - 1, *(v7 - 1) != 92))
        {
          unint64_t v18 = &v7[-v13];
          if ((unint64_t)&v7[-v13] >= 2 && *(v7 - 1) == 45)
          {
            v335.__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)(v7 - 1);
            unsigned int v20 = *(v7 - 2);
            v7 -= 2;
            for (uint64_t j = v20; (int)j <= (char)v14; ++j)
            {
              if ((*(unsigned char *)(a1 + 120) & 8) != 0
                && ((j & 0x80) != 0
                  ? (int v21 = __maskrune(j, 0x100uLL))
                  : (int v21 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * j + 60) & 0x100),
                    v21))
              {
                *(void **)((char *)__dst + (((unint64_t)case_folding[j] >> 3) & 0x18)) = (void *)((1 << case_folding[j]) | *(unint64_t *)((char *)__dst + (((unint64_t)case_folding[j] >> 3) & 0x18)));
                unint64_t v22 = case_folding[j & 0xFFFFFEFF | 0x100];
                uint64_t v23 = 1 << v22;
                int64_t v24 = (void **)((char *)__dst + ((v22 >> 3) & 0x18));
                uint64_t v25 = (uint64_t)*v24;
              }
              else
              {
                uint64_t v25 = 1 << j;
                int64_t v24 = &__dst[j >> 6];
                uint64_t v23 = (uint64_t)*v24;
              }
              _DWORD *v24 = (void *)(v23 | v25);
            }
          }
          else if ((unint64_t)v7 >= v335.__r_.__value_.__r.__words[2])
          {
            unint64_t v31 = (unint64_t)(v18 + 1);
            if ((uint64_t)(v18 + 1) < 0) {
LABEL_557:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            unint64_t v32 = v335.__r_.__value_.__r.__words[2] - v13;
            if (2 * (v335.__r_.__value_.__r.__words[2] - v13) > v31) {
              unint64_t v31 = 2 * v32;
            }
            if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v33 = v31;
            }
            if (v33) {
              std::basic_string<char16_t>::size_type v34 = (std::basic_string<char16_t>::size_type)operator new(v33);
            }
            else {
              std::basic_string<char16_t>::size_type v34 = 0;
            }
            v18[v34] = v14;
            uint64_t v40 = (uint64_t)&v18[v34 + 1];
            if ((unsigned char *)v13 == v7)
            {
              std::basic_string<char16_t>::size_type v13 = (std::basic_string<char16_t>::size_type)&v18[v34];
            }
            else
            {
              uint64_t v41 = &v7[~v13];
              do
              {
                char v42 = *--v7;
                (v41--)[v34] = v42;
              }
              while (v7 != (unsigned char *)v13);
              unint64_t v7 = (unsigned char *)v335.__r_.__value_.__r.__words[0];
              std::basic_string<char16_t>::size_type v13 = v34;
            }
            v335.__r_.__value_.__r.__words[0] = v13;
            v335.__r_.__value_.__r.__words[2] = v34 + v33;
            if (v7) {
              operator delete(v7);
            }
            unint64_t v7 = (unsigned char *)v40;
          }
          else
          {
            *v7++ = v14;
          }
          goto LABEL_83;
        }
        switch((char)v14)
        {
          case 'a':
            int v17 = (void *)((unint64_t)__dst[0] | 0x4000200000000000);
            goto LABEL_81;
          case 'b':
            goto LABEL_74;
          case 'c':
            int v17 = (void *)((unint64_t)__dst[0] | 0x400000000000000);
            goto LABEL_81;
          case 'd':
            for (uint64_t k = 48; k != 58; ++k)
              __dst[k >> 6] = (void *)((unint64_t)__dst[k >> 6] | (1 << k));
            break;
          case 'e':
            int v17 = (void *)((unint64_t)__dst[0] | 0x8000000);
            goto LABEL_81;
          default:
            if ((char)v14 == 115)
            {
              int v17 = (void *)((unint64_t)__dst[0] | 0x100000000);
LABEL_81:
              __dst[0] = v17;
            }
            else
            {
              if ((char)v14 == 117)
              {
                int v16 = (void *)((unint64_t)__dst[1] | 0x80000000);
                goto LABEL_16;
              }
LABEL_74:
              *(void **)((char *)__dst + ((v14 >> 3) & 0x18)) = (void *)(*(unint64_t *)((char *)__dst
                                                                                             + ((v14 >> 3) & 0x18)) | (1 << v14));
            }
            break;
        }
      }
      unint64_t v7 = v15;
LABEL_83:
      v335.__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)v7;
      if (++v11 == v12)
      {
        std::basic_string<char16_t>::size_type v44 = v335.__r_.__value_.__r.__words[0];
        if (v335.__r_.__value_.__l.__data_ == (std::basic_string<char16_t>::pointer)v7)
        {
          unint64_t v6 = a2;
        }
        else
        {
          int v45 = v7 - 1;
          unint64_t v6 = a2;
          do
          {
            *(void **)((char *)__dst + (((unint64_t)*v45 >> 3) & 0x18)) = (void *)((1 << *v45) | *(unint64_t *)((char *)__dst + (((unint64_t)*v45 >> 3) & 0x18)));
            v335.__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)v45;
          }
          while (v45-- != (unsigned char *)v44);
          unint64_t v7 = (unsigned char *)v44;
        }
        break;
      }
    }
  }
  v301 = (char *)v6[1];
  int v302 = (char *)v6[2];
  if (v301 >= v302)
  {
    unint64_t v304 = 0xCCCCCCCCCCCCCCCDLL * ((v301 - (unsigned char *)*v6) >> 3);
    unint64_t v305 = v304 + 1;
    if (v304 + 1 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v306 = 0xCCCCCCCCCCCCCCCDLL * ((v302 - (unsigned char *)*v6) >> 3);
    if (2 * v306 > v305) {
      unint64_t v305 = 2 * v306;
    }
    if (v306 >= 0x333333333333333) {
      unint64_t v307 = 0x666666666666666;
    }
    else {
      unint64_t v307 = v305;
    }
    if (v307) {
      unint64_t v307 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v307);
    }
    else {
      uint64_t v308 = 0;
    }
    unint64_t v309 = v307 + 40 * v304;
    unint64_t v310 = v307 + 40 * v308;
    *(_OWORD *)unint64_t v309 = *(_OWORD *)__dst;
    *(_OWORD *)(v309 + 16) = *(_OWORD *)v326;
    *(void *)(v309 + 32) = v327;
    v303 = (void *)(v309 + 40);
    int v312 = (char *)*v6;
    v311 = (char *)v6[1];
    if (v311 != *v6)
    {
      do
      {
        long long v313 = *(_OWORD *)(v311 - 40);
        long long v314 = *(_OWORD *)(v311 - 24);
        *(unsigned char *)(v309 - 8) = *(v311 - 8);
        *(_OWORD *)(v309 - 24) = v314;
        *(_OWORD *)(v309 - 40) = v313;
        v309 -= 40;
        v311 -= 40;
      }
      while (v311 != v312);
      v311 = (char *)*v6;
    }
    *unint64_t v6 = (void *)v309;
    v6[1] = v303;
    v6[2] = (void *)v310;
    if (v311) {
      operator delete(v311);
    }
  }
  else
  {
    *(_OWORD *)v301 = *(_OWORD *)__dst;
    *((_OWORD *)v301 + 1) = *(_OWORD *)v326;
    *((void *)v301 + 4) = v327;
    v303 = v301 + 40;
  }
  v6[1] = v303;
  unint64_t v315 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)v303 - (unsigned char *)*v6) >> 3);
  if (v7) {
    operator delete(v7);
  }
  return (v315 - 1);
}

void sub_20D38985C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a31) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::basic_string_ref<char,std::char_traits<char>>::at(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 <= a3)
  {
    std::logic_error::logic_error(&v6, "boost::string_ref::at");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    v4.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/loca"
                         "l/include/boost/utility/string_ref.hpp";
    v4.i64[1] = (uint64_t)"const charT &boost::basic_string_ref<char>::at(size_t) const [charT = char, traits = std::char_traits<char>]";
    uint64_t v5 = 139;
    boost::throw_exception<std::out_of_range>(&v6, &v4);
  }
  return a1 + a3;
}

void boost::throw_exception<std::out_of_range>(const std::logic_error *a1, int8x16_t *a2)
{
  exception = (char *)__cxa_allocate_exception(0x40uLL);
  *(void *)exception = &unk_26C2096A8;
  std::logic_error::logic_error((std::logic_error *)(exception + 8), a1);
  *((void *)exception + 5) = 0;
  *((void *)exception + 6) = 0;
  *(void *)exception = &off_26C209630;
  *((void *)exception + 1) = off_26C209660;
  *((void *)exception + 3) = &unk_26C209688;
  *((void *)exception + 4) = 0;
  *((_DWORD *)exception + 14) = a2[1].i32[0];
  *(int8x16_t *)(exception + 40) = vextq_s8(*a2, *a2, 8uLL);
}

uint64_t boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26C2096D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x210558D80](a1 + 8);
  return a1;
}

void non-virtual thunk to'boost::wrapexcept<std::out_of_range>::~wrapexcept(void *a1)
{
  *a1 = &unk_26C2096D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x210558D80](a1 - 2);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t vars8;

  *a1 = &unk_26C2096D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x210558D80);
}

void non-virtual thunk to'boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26C2096D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x210558D80](a1);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_26C2096D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x210558D80);
}

void boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26C2096D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x210558D80](a1 + 8);
  JUMPOUT(0x2105595E0);
}

void boost::wrapexcept<std::out_of_range>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::out_of_range>::wrapexcept((uint64_t)exception, a1);
}

void sub_20D389DF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<std::out_of_range>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C2096A8;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x263F8C390] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_26C2096D8;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &off_26C209630;
  *(void *)(a1 + 8) = off_26C209660;
  *(void *)(a1 + 24) = &unk_26C209688;
  return a1;
}

void boost::wrapexcept<std::out_of_range>::clone()
{
}

void sub_20D38A110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<FRCodeUMap>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    FRCodeUMap::~FRCodeUMap((FRCodeUMap *)(i - 80));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void FRCode::compile(uint64_t a1, long long **a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  unsigned int v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)v3, *((void *)v3 + 1));
  }
  else
  {
    long long v4 = *v3;
    v5.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
    *(_OWORD *)&v5.__r_.__value_.__l.__data_ = v4;
  }
  operator new[]();
}

void sub_20D38E3A0()
{
  __cxa_end_catch();
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 232);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x20D38E5ACLL);
}

void sub_20D38E3B0()
{
  __cxa_end_catch();
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 232);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x20D38E5ACLL);
}

void sub_20D38E3C0()
{
}

void sub_20D38E568()
{
  if (*(char *)(v0 - 185) < 0) {
    operator delete(*(void **)(v0 - 208));
  }
  JUMPOUT(0x20D38E700);
}

void sub_20D38E5D8()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  if (*(char *)(v1 - 185) < 0) {
    operator delete(*(void **)(v1 - 208));
  }
  JUMPOUT(0x20D38E700);
}

void sub_20D38E60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (!a40) {
    JUMPOUT(0x20D38E694);
  }
  JUMPOUT(0x20D38E68CLL);
}

void sub_20D38E63C()
{
}

void std::vector<FRCode::Op>::insert(uint64_t a1, char *__src, uint64_t *a3)
{
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v12 = *(char **)a1;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v13 > 0x1555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = __src - v12;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((__src - v12) >> 2);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v12) >> 2);
    if (2 * v16 > v13) {
      unint64_t v13 = 2 * v16;
    }
    if (v16 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x1555555555555555;
    }
    else {
      unint64_t v17 = v13;
    }
    if (v17)
    {
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v17);
    }
    else
    {
      unint64_t v19 = 0;
      uint64_t v18 = 0;
    }
    unint64_t v22 = &v19[12 * v15];
    uint64_t v23 = &v19[12 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src) {
          unint64_t v26 = 1;
        }
        else {
          unint64_t v26 = 2 * v15;
        }
        uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v26);
        unint64_t v22 = &v27[12 * (v26 >> 2)];
        uint64_t v23 = &v27[12 * v28];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        int64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(12 * v15) >> 2);
        if (v24 >= -1) {
          uint64_t v25 = v24 + 1;
        }
        else {
          uint64_t v25 = v24 + 2;
        }
        v22 -= 12 * (v25 >> 1);
      }
    }
    uint64_t v29 = *a3;
    *((_DWORD *)v22 + 2) = *((_DWORD *)a3 + 2);
    *(void *)unint64_t v22 = v29;
    std::basic_string<char16_t>::size_type v30 = *(char **)a1;
    unint64_t v31 = v22;
    if (*(char **)a1 != __src)
    {
      unint64_t v32 = __src;
      unint64_t v31 = v22;
      do
      {
        uint64_t v33 = *(void *)(v32 - 12);
        v32 -= 12;
        int v34 = *((_DWORD *)v32 + 2);
        *(void *)(v31 - 12) = v33;
        v31 -= 12;
        *((_DWORD *)v31 + 2) = v34;
      }
      while (v32 != v30);
    }
    unint64_t v35 = *(unsigned char **)(a1 + 8);
    uint64_t v36 = v35 - __src;
    if (v35 != __src) {
      memmove(v22 + 12, __src, v35 - __src);
    }
    uint64_t v37 = *(char **)a1;
    *(void *)a1 = v31;
    *(void *)(a1 + 8) = &v22[v36 + 12];
    *(void *)(a1 + 16) = v23;
    if (v37)
    {
      operator delete(v37);
    }
  }
  else if (__src == v6)
  {
    uint64_t v21 = *a3;
    *((_DWORD *)__src + 2) = *((_DWORD *)a3 + 2);
    *(void *)__src = v21;
    *(void *)(a1 + 8) = __src + 12;
  }
  else
  {
    int v8 = __src + 12;
    uint64_t v9 = v6 - 12;
    uint64_t v10 = *(void *)(a1 + 8);
    while (v9 < v6)
    {
      uint64_t v11 = *(void *)v9;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)v9 + 2);
      *(void *)uint64_t v10 = v11;
      v10 += 12;
      v9 += 12;
    }
    *(void *)(a1 + 8) = v10;
    if (v6 != v8) {
      memmove(__src + 12, __src, v6 - v8);
    }
    uint64_t v20 = *a3;
    *((_DWORD *)__src + 2) = *((_DWORD *)a3 + 2);
    *(void *)__src = v20;
  }
}

void sub_20D38E998(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<FRCode::Op>::push_back[abi:ne180100](unint64_t *a1, uint64_t *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (v5 >= v4)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 2);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x1555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + 12 * v8;
    unint64_t v14 = v11 + 12 * v12;
    uint64_t v15 = *a2;
    *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v13 = v15;
    unint64_t v7 = v13 + 12;
    unint64_t v17 = (_DWORD *)*a1;
    unint64_t v16 = (_DWORD *)a1[1];
    if (v16 != (_DWORD *)*a1)
    {
      do
      {
        uint64_t v18 = *(void *)(v16 - 3);
        v16 -= 3;
        int v19 = v16[2];
        *(void *)(v13 - 12) = v18;
        v13 -= 12;
        *(_DWORD *)(v13 + 8) = v19;
      }
      while (v16 != v17);
      unint64_t v16 = (_DWORD *)*a1;
    }
    *a1 = v13;
    a1[1] = v7;
    a1[2] = v14;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *(_DWORD *)(v5 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v5 = v6;
    unint64_t v7 = v5 + 12;
  }
  a1[1] = v7;
}

uint64_t FRCode::get_low(uint64_t a1, unint64_t a2)
{
  if (a2 >= 9)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unsigned int v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_ERROR, "Assumption of raw is one utf8 char, this doesn't hold here", buf, 2u);
    }
    Diagnostics::log(3, "Assumption of raw is one utf8 char, this doesn't hold here", v3);
    return 0;
  }
  if (a2 >= 4) {
    uint64_t v5 = 4;
  }
  else {
    uint64_t v5 = a2;
  }
  unsigned int v9 = 0;
  if (!v5) {
    return 0;
  }
  for (unint64_t i = 0; i != v5; ++i)
    buf[i - 4] = *(unsigned char *)boost::basic_string_ref<char,std::char_traits<char>>::at(a1, a2, i);
  return v9;
}

uint64_t FRCode::get_high(uint64_t a1, unint64_t a2)
{
  if (a2 < 9)
  {
    uint64_t result = 0;
    if (a2 <= 4) {
      uint64_t v7 = 4;
    }
    else {
      uint64_t v7 = a2;
    }
    unsigned int v9 = 0;
    if (v7 >= 5)
    {
      for (unint64_t i = 4; i != v7; ++i)
        buf[i - 4] = *(unsigned char *)boost::basic_string_ref<char,std::char_traits<char>>::at(a1, a2, i);
      return v9;
    }
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unsigned int v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_ERROR, "Assumption of raw is one utf8 char, this doesn't hold here", buf, 2u);
    }
    Diagnostics::log(3, "Assumption of raw is one utf8 char, this doesn't hold here", v3);
    return 0;
  }
  return result;
}

uint64_t FRCode::calc_min_length(uint64_t *a1, void *a2, int a3, int a4)
{
  if (a3 < a4)
  {
    int v4 = a4;
    int v5 = a3;
    uint64_t v8 = 0;
    while (2)
    {
      uint64_t v9 = *a1;
      if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2) > v5)
      {
        int v10 = v5;
        switch(*(_DWORD *)(v9 + 12 * v5))
        {
          case 6:
            uint64_t v11 = v9 + 12 * v5;
            unsigned int v13 = *(_DWORD *)(v11 + 4);
            unsigned int v12 = *(_DWORD *)(v11 + 8);
            if (v13 <= v12) {
              int v5 = v12;
            }
            else {
              int v5 = v13;
            }
            goto LABEL_7;
          case 7:
            int v28 = v8;
            uint64_t v14 = v9 + 12 * v5;
            unsigned int v17 = *(_DWORD *)(v14 + 4);
            unint64_t v16 = (_DWORD *)(v14 + 4);
            unsigned int v15 = v17;
            if (v17 >= v16[1] + v17)
            {
              int v5 = 0;
              unsigned int v19 = -1;
            }
            else
            {
              int v5 = 0;
              int v18 = 2 * v15;
              unsigned int v19 = -1;
              do
              {
                unsigned int v20 = FRCode::calc_min_length(a1, a2, (*(_DWORD *)(*a2 + 4 * v18) + v10), (*(_DWORD *)(*a2 + 4 * (v18 + 1)) + v10));
                if (v20 < v19)
                {
                  unsigned int v21 = *(_DWORD *)(*a2 + 4 * (v18 + 1)) + v10;
                  if (*(_DWORD *)(*a1 + 12 * v21) == 8) {
                    int v5 = *(_DWORD *)(*a1 + 12 * v21 + 4);
                  }
                  else {
                    int v5 = v21 + 1;
                  }
                  unsigned int v19 = v20;
                }
                ++v15;
                v18 += 2;
              }
              while (v16[1] + *v16 > v15);
            }
            int v4 = a4;
            uint64_t v8 = v19 + v28;
            goto LABEL_7;
          case 8:
            int v5 = *(_DWORD *)(v9 + 12 * v5 + 4);
            goto LABEL_7;
          case 9:
          case 0xC:
          case 0xD:
          case 0xE:
            goto LABEL_5;
          case 0xA:
            unsigned int v22 = *(_DWORD *)(v9 + 12 * v5 + 4);
            if (HIBYTE(v22))
            {
              unsigned int v23 = *(_DWORD *)(v9 + 12 * v5 + 8);
              if (v23)
              {
                if (v23 > 0xFF)
                {
                  if (HIWORD(v23))
                  {
                    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                    }
                    int64_t v24 = Diagnostics_GetLogObject(void)::__profile_log_default;
                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)std::string buf = 0;
                      _os_log_impl(&dword_20CD80000, v24, OS_LOG_TYPE_ERROR, "Invalid UTF8 Char", buf, 2u);
                    }
                    Diagnostics::log(3, "Invalid UTF8 Char", v25);
                  }
                  else
                  {
                    uint64_t v8 = (v8 + 6);
                  }
                }
                else
                {
                  uint64_t v8 = (v8 + 5);
                }
              }
              else
              {
                uint64_t v8 = (v8 + 4);
              }
            }
            else if (v22 <= 0xFE)
            {
LABEL_5:
              uint64_t v8 = (v8 + 1);
            }
            else if (v22 > 0xFFFE)
            {
              uint64_t v8 = (v8 + 3);
            }
            else
            {
              uint64_t v8 = (v8 + 2);
            }
            goto LABEL_6;
          default:
LABEL_6:
            int v5 = v10 + 1;
LABEL_7:
            if (v5 >= v4) {
              return v8;
            }
            continue;
        }
      }
      break;
    }
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  return 0;
}

void FRCode::update_anchor_bytes(uint64_t a1, void *a2, void *a3, void *a4, void *a5, unint64_t *a6, unint64_t *a7, int a8, int a9)
{
  uint64_t v9 = a1;
  if (a8 < a9)
  {
    int v10 = a5;
    uint64_t v11 = a4;
    unsigned int v12 = a3;
    unsigned int v13 = a2;
    uint64_t v14 = *a4;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 2);
    char v16 = 1;
    while (2)
    {
      if (v15 <= a8) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      int v17 = a8;
      switch(*(_DWORD *)(v14 + 12 * a8))
      {
        case 6:
          uint64_t v18 = v14 + 12 * a8;
          unsigned int v19 = a6;
          unsigned int v20 = a7;
          FRCode::update_anchor_bytes(a1, a2, a3, a4, a5, a6, a7, *(unsigned int *)(v18 + 4), v15);
          FRCode::update_anchor_bytes(v9, v13, v12, v11, v10, v19, v20, *(unsigned int *)(v18 + 8), -1431655765 * ((v11[1] - *v11) >> 2));
          goto LABEL_62;
        case 7:
          char v73 = v16;
          uint64_t v21 = v14 + 12 * a8;
          unsigned int v25 = *(_DWORD *)(v21 + 4);
          unsigned int v23 = (_DWORD *)(v21 + 4);
          unsigned int v24 = v25;
          unint64_t v26 = v23 + 1;
          if (v25 < v23[1] + v25)
          {
            int v27 = 2 * v24;
            do
            {
              uint64_t v28 = (*(_DWORD *)(*v10 + 4 * v27) + v17);
              int v72 = *(_DWORD *)(*v10 + 4 * (v27 + 1)) + v17;
              uint64_t v29 = v13;
              std::basic_string<char16_t>::size_type v30 = v12;
              unint64_t v31 = v11;
              unint64_t v32 = v10;
              uint64_t v33 = a6;
              int v34 = a7;
              unint64_t v35 = v11;
              uint64_t v36 = v10;
              uint64_t v37 = v23;
              FRCode::update_anchor_bytes(a1, v29, v30, v31, v32, a6, a7, v28, v72);
              unsigned int v23 = v37;
              int v10 = v36;
              uint64_t v11 = v35;
              a7 = v34;
              a6 = v33;
              unsigned int v13 = a2;
              unsigned int v12 = a3;
              ++v24;
              v27 += 2;
            }
            while (*v26 + *v23 > v24);
          }
          uint64_t v9 = a1;
          if ((v73 & 1) == 0) {
            return;
          }
          goto LABEL_63;
        case 8:
          a8 = *(_DWORD *)(v14 + 12 * a8 + 4);
          goto LABEL_6;
        case 9:
          int v38 = *(_DWORD *)(v14 + 12 * a8 + 4);
          uint64_t v40 = (unsigned char *)a6[1];
          unint64_t v51 = a6[2];
          if ((unint64_t)v40 < v51) {
            goto LABEL_30;
          }
          unint64_t v58 = *a6;
          int v59 = &v40[-*a6];
          unint64_t v60 = (unint64_t)(v59 + 1);
          if ((uint64_t)(v59 + 1) < 0) {
            goto LABEL_67;
          }
          unint64_t v61 = v51 - v58;
          if (2 * v61 > v60) {
            unint64_t v60 = 2 * v61;
          }
          if (v61 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v62 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v62 = v60;
          }
          if (v62)
          {
            std::string::size_type v63 = a6;
            unint64_t v47 = (unint64_t)operator new(v62);
            a6 = v63;
          }
          else
          {
            unint64_t v47 = 0;
          }
          int v65 = &v59[v47];
          char v66 = (char *)(v47 + v62);
          v59[v47] = v38;
          uint64_t v52 = (uint64_t)&v59[v47 + 1];
          if (v40 == (unsigned char *)v58) {
            goto LABEL_58;
          }
          uint64_t v69 = &v40[~v58];
          do
          {
            char v70 = *--v40;
            (v69--)[v47] = v70;
          }
          while (v40 != (unsigned char *)v58);
          goto LABEL_57;
        case 0xA:
          LOBYTE(v38) = *(unsigned char *)(v14 + 12 * a8 + 4);
          uint64_t v40 = (unsigned char *)a6[1];
          unint64_t v39 = a6[2];
          if ((unint64_t)v40 < v39)
          {
LABEL_30:
            *uint64_t v40 = v38;
            uint64_t v52 = (uint64_t)(v40 + 1);
          }
          else
          {
            unint64_t v41 = *a6;
            char v42 = &v40[-*a6];
            unint64_t v43 = (unint64_t)(v42 + 1);
            if ((uint64_t)(v42 + 1) < 0) {
LABEL_67:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            unint64_t v44 = v39 - v41;
            if (2 * v44 > v43) {
              unint64_t v43 = 2 * v44;
            }
            if (v44 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v45 = v43;
            }
            if (v45)
            {
              int v46 = a6;
              unint64_t v47 = (unint64_t)operator new(v45);
              a6 = v46;
            }
            else
            {
              unint64_t v47 = 0;
            }
            int v65 = &v42[v47];
            char v66 = (char *)(v47 + v45);
            v42[v47] = v38;
            uint64_t v52 = (uint64_t)&v42[v47 + 1];
            if (v40 == (unsigned char *)v41)
            {
LABEL_58:
              unint64_t v47 = (unint64_t)v65;
            }
            else
            {
              float v67 = &v40[~v41];
              do
              {
                char v68 = *--v40;
                (v67--)[v47] = v68;
              }
              while (v40 != (unsigned char *)v41);
LABEL_57:
              uint64_t v40 = (unsigned char *)*a6;
            }
            *a6 = v47;
            a6[1] = v52;
            a6[2] = (unint64_t)v66;
            if (v40)
            {
              unint64_t v71 = a6;
              operator delete(v40);
              a6 = v71;
            }
          }
          a6[1] = v52;
          goto LABEL_62;
        case 0xC:
          unint64_t v53 = *(unsigned int *)(v14 + 12 * a8 + 4);
          if ((*(unsigned char *)(a1 + 120) & 1) == 0)
          {
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) > v53)
            {
              uint64_t v49 = *a2 + 40 * v53;
              uint64_t v50 = a6;
              goto LABEL_34;
            }
            goto LABEL_66;
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 4) <= v53) {
            goto LABEL_68;
          }
          uint64_t v64 = *a3 + 80 * v53;
          unint64_t v55 = *(char **)(v64 + 8);
          uint64_t v56 = *(char **)(v64 + 16);
          uint64_t v57 = a6;
          break;
        case 0xD:
          unint64_t v48 = *(unsigned int *)(v14 + 12 * a8 + 4);
          if ((*(unsigned char *)(a1 + 120) & 1) == 0)
          {
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) > v48)
            {
              uint64_t v49 = *a2 + 40 * v48;
              uint64_t v50 = a7;
LABEL_34:
              FRCodeBitmap::copy_to(v49, v50);
              goto LABEL_62;
            }
LABEL_66:
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 4) <= v48) {
LABEL_68:
          }
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          uint64_t v54 = *a3 + 80 * v48;
          unint64_t v55 = *(char **)(v54 + 8);
          uint64_t v56 = *(char **)(v54 + 16);
          uint64_t v57 = a7;
          break;
        case 0xE:
          char v16 = 0;
          ++a8;
          if (v17 + 1 >= a9) {
            return;
          }
          continue;
        default:
          ++a8;
LABEL_6:
          if (a8 >= a9) {
            goto LABEL_62;
          }
          continue;
      }
      break;
    }
    FRCodeUMap::copy_to(v55, v56, v57);
LABEL_62:
    if ((v16 & 1) == 0) {
      return;
    }
  }
LABEL_63:
  *(void *)(v9 + 120) |= 4uLL;
}

void std::vector<FRCodeUMap>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        FRCodeUMap::~FRCodeUMap((FRCodeUMap *)(v4 - 80));
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t FRCode::to_string(FRCode *this, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  if (*(_DWORD *)(a2 + 40))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    int v5 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v6 = *(unsigned int *)(*(void *)(a2 + 32) + v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Pos: ", 5);
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" | ", 3);
      uint64_t v9 = (&FRCode::OpKindNames)[v6];
      size_t v10 = strlen(v9);
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" | Left: ", 9);
      unsigned int v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" | Right: ", 10);
      unsigned int v13 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
      uint64_t v14 = std::locale::use_facet(&v21, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(&v21);
      std::ostream::put();
      std::ostream::flush();
      ++v4;
      v3 += 12;
    }
    while (v4 < *(unsigned int *)(a2 + 40));
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x263F8C2B8];
  uint64_t v15 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v18[0] = v15;
  v18[1] = MEMORY[0x263F8C318] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x210559500](&v20);
}

void sub_20D38F7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 FRCode::add_state(unint64_t *a1, int a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v9 = (char *)*a1;
  unint64_t v8 = a1[1];
  if (*a1 == v8)
  {
LABEL_5:
    unint64_t v11 = a1[2];
    if (v8 >= v11)
    {
      uint64_t v13 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v8 - (void)v9) >> 2);
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) > 0x14E5E0A72F05397) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v11 - (void)v9) >> 2);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0xA72F05397829CBLL) {
        unint64_t v16 = 0x14E5E0A72F05397;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::State>>(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = v16 + 196 * v13;
      *(_DWORD *)unint64_t v18 = -1;
      *(_OWORD *)(v18 + 4) = 0u;
      *(_OWORD *)(v18 + 20) = 0u;
      unint64_t v19 = v16 + 196 * v17;
      *(_OWORD *)(v18 + 36) = 0u;
      *(_OWORD *)(v18 + 52) = 0u;
      *(_OWORD *)(v18 + 68) = 0u;
      *(_OWORD *)(v18 + 84) = 0u;
      *(_OWORD *)(v18 + 100) = 0u;
      *(_OWORD *)(v18 + 116) = 0u;
      *(_OWORD *)(v18 + 132) = 0u;
      *(_OWORD *)(v18 + 148) = 0u;
      *(_OWORD *)(v18 + 164) = 0u;
      *(_OWORD *)(v18 + 180) = 0u;
      unint64_t v12 = v18 + 196;
      std::locale v21 = (char *)*a1;
      uint64_t v20 = (char *)a1[1];
      if (v20 != (char *)*a1)
      {
        do
        {
          *(_OWORD *)(v18 - 196) = *(_OWORD *)(v20 - 196);
          long long v22 = *(_OWORD *)(v20 - 180);
          long long v23 = *(_OWORD *)(v20 - 164);
          long long v24 = *(_OWORD *)(v20 - 148);
          *(_OWORD *)(v18 - 132) = *(_OWORD *)(v20 - 132);
          *(_OWORD *)(v18 - 148) = v24;
          *(_OWORD *)(v18 - 164) = v23;
          *(_OWORD *)(v18 - 180) = v22;
          long long v25 = *(_OWORD *)(v20 - 116);
          long long v26 = *(_OWORD *)(v20 - 100);
          long long v27 = *(_OWORD *)(v20 - 84);
          *(_OWORD *)(v18 - 68) = *(_OWORD *)(v20 - 68);
          *(_OWORD *)(v18 - 84) = v27;
          *(_OWORD *)(v18 - 100) = v26;
          *(_OWORD *)(v18 - 116) = v25;
          long long v28 = *(_OWORD *)(v20 - 52);
          long long v29 = *(_OWORD *)(v20 - 36);
          long long v30 = *(_OWORD *)(v20 - 20);
          *(_DWORD *)(v18 - 4) = *((_DWORD *)v20 - 1);
          *(_OWORD *)(v18 - 20) = v30;
          *(_OWORD *)(v18 - 36) = v29;
          *(_OWORD *)(v18 - 52) = v28;
          v18 -= 196;
          v20 -= 196;
        }
        while (v20 != v21);
        uint64_t v20 = (char *)*a1;
      }
      *a1 = v18;
      a1[1] = v12;
      a1[2] = v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v8 = -1;
      *(_OWORD *)(v8 + 4) = 0u;
      *(_OWORD *)(v8 + 20) = 0u;
      *(_OWORD *)(v8 + 36) = 0u;
      *(_OWORD *)(v8 + 52) = 0u;
      *(_OWORD *)(v8 + 68) = 0u;
      *(_OWORD *)(v8 + 84) = 0u;
      *(_OWORD *)(v8 + 100) = 0u;
      *(_OWORD *)(v8 + 116) = 0u;
      *(_OWORD *)(v8 + 132) = 0u;
      *(_OWORD *)(v8 + 148) = 0u;
      *(_OWORD *)(v8 + 164) = 0u;
      unint64_t v12 = v8 + 196;
      *(_OWORD *)(v8 + 180) = 0u;
    }
    a1[1] = v12;
    *(_DWORD *)(v12 - 196) = a2;
    long long v31 = a3[1];
    *(_OWORD *)(v12 - 192) = *a3;
    *(_OWORD *)(v12 - 176) = v31;
    long long v32 = a3[2];
    long long v33 = a3[3];
    long long v34 = a3[5];
    *(_OWORD *)(v12 - 128) = a3[4];
    *(_OWORD *)(v12 - 112) = v34;
    *(_OWORD *)(v12 - 160) = v32;
    *(_OWORD *)(v12 - 144) = v33;
    unint64_t v35 = a1[1];
    long long v36 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v35 - 96) = *(_OWORD *)a4;
    *(_OWORD *)(v35 - 80) = v36;
    __n128 result = *(__n128 *)(a4 + 32);
    long long v38 = *(_OWORD *)(a4 + 48);
    long long v39 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(v35 - 32) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(v35 - 16) = v39;
    *(__n128 *)(v35 - 64) = result;
    *(_OWORD *)(v35 - 48) = v38;
  }
  else
  {
    size_t v10 = (_DWORD *)*a1;
    while (*v10 != a2)
    {
      v10 += 49;
      if (v10 == (_DWORD *)v8) {
        goto LABEL_5;
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::State>>(unint64_t a1)
{
  if (a1 >= 0x14E5E0A72F05398) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(196 * a1);
}

uint64_t FRCode::match_step(void *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t a6, int a7, int a8, int a9, char a10)
{
  size_t v10 = a4;
  unint64_t v12 = a3[1];
  if (v12 != *a3)
  {
    unint64_t v14 = 0;
    char v97 = 0;
    BOOL v15 = a8 == 0;
    unint64_t v99 = a8;
    unint64_t v88 = a8 - 1;
    int v95 = a8 + 1;
    if (a6 == a8) {
      BOOL v15 = 1;
    }
    BOOL v90 = v15;
    if (a6 <= a8) {
      char v16 = 1;
    }
    else {
      char v16 = a10;
    }
    char v98 = v16;
    BOOL v17 = a6 <= a8 || (a9 - 7) < 0xFFFFFFFB;
    char v91 = a10 | v17;
    unint64_t v12 = *a3;
    while (1)
    {
      unint64_t v18 = (unsigned int *)(v12 + 196 * v14);
      uint64_t v19 = a1[4];
      unsigned int v20 = *v18;
      switch(*(_DWORD *)(v19 + 12 * *v18))
      {
        case 0:
        case 4:
        case 5:
          int v21 = v20 + 1;
          goto LABEL_66;
        case 1:
          unint64_t v29 = v12 + 196 * v14;
          int v30 = *(_DWORD *)(v29 + 100);
          int v31 = *(_DWORD *)(v29 + 104);
          unint64_t v32 = v29 + 100;
          int v33 = *(_DWORD *)(v32 - 96);
          int v34 = *(_DWORD *)(v32 - 92);
          long long v36 = *(uint64_t **)a2;
          unint64_t v35 = *(std::__shared_weak_count **)(a2 + 8);
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v37 = (v31 + a7 - v34);
          unsigned int v38 = a8 - v30 + v33;
          uint64_t v39 = *v36;
          while (2)
          {
            if (v39 == v36[1])
            {
              memset((char *)&__p[3] + 8, 0, 24);
              memset((char *)__p + 8, 0, 48);
              LODWORD(__p[0]) = v31 + a7 - v34;
              char v70 = (char *)boost::basic_string_ref<char,std::char_traits<char>>::substr(a5, a6, v37);
              std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v103, v70, &v70[v71], v71);
              *(std::string *)((char *)__p + 8) = v103;
              FRCode::get_replacement(&v103, (uint64_t)a1, a5, a6, v32 - 96);
              int v72 = (char *)a1[3];
              *(std::string *)&__p[2] = v103;
              std::string::basic_string[abi:ne180100]<0>(&v103, v72);
              if (SHIBYTE(__p[4]) < 0) {
                operator delete(*((void **)&__p[3] + 1));
              }
              *(std::string *)((char *)&__p[3] + 8) = v103;
              unint64_t v73 = v36[1];
              if (v73 >= v36[2])
              {
                uint64_t v74 = std::vector<FRReplaceInst>::__push_back_slow_path<FRReplaceInst const&>(v36, (uint64_t)__p);
              }
              else
              {
                std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(v36[1], (uint64_t)__p);
                uint64_t v74 = v73 + 80;
                v36[1] = v73 + 80;
              }
              v36[1] = v74;
              if (SHIBYTE(__p[4]) < 0) {
                operator delete(*((void **)&__p[3] + 1));
              }
              if (SBYTE7(__p[3]) < 0) {
                operator delete(*(void **)&__p[2]);
              }
              if (SHIBYTE(__p[1]) < 0) {
                operator delete(*((void **)&__p[0] + 1));
              }
            }
            else
            {
              if (*(_DWORD *)v39 != v37)
              {
                v39 += 80;
                continue;
              }
              if (*(char *)(v39 + 31) < 0) {
                uint64_t v78 = *(void *)(v39 + 16);
              }
              else {
                uint64_t v78 = *(unsigned __int8 *)(v39 + 31);
              }
              if (v78 + v37 < v38)
              {
                int v80 = (char *)boost::basic_string_ref<char,std::char_traits<char>>::substr(a5, a6, v37);
                std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v80, &v80[v81], v81);
                int v82 = (void **)(v39 + 8);
                if (*(char *)(v39 + 31) < 0) {
                  operator delete(*v82);
                }
                long long v83 = __p[0];
                *(void *)(v39 + 24) = *(void *)&__p[1];
                *(_OWORD *)int v82 = v83;
                FRCode::get_replacement((std::string *)__p, (uint64_t)a1, a5, a6, v32 - 96);
                int64_t v84 = (void **)(v39 + 32);
                if (*(char *)(v39 + 55) < 0) {
                  operator delete(*v84);
                }
                *(_OWORD *)int64_t v84 = __p[0];
                *(void *)(v39 + 48) = *(void *)&__p[1];
              }
            }
            break;
          }
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          char v97 = 1;
          goto LABEL_70;
        case 2:
          uint64_t v40 = (_OWORD *)(v12 + 196 * v14 + 4);
          unint64_t v41 = (_DWORD *)v40 + *(unsigned int *)(v19 + 12 * v20 + 4);
          if (!*v41) {
            _DWORD *v41 = v95;
          }
          int v21 = v20 + 1;
          unint64_t v42 = v12 + 196 * v14;
          goto LABEL_67;
        case 3:
          unint64_t v43 = v12 + 196 * v14;
          uint64_t v44 = v43 + 100;
          *(_DWORD *)(v43 + 100 + 4 * *(unsigned int *)(v19 + 12 * v20 + 4)) = v95;
          int v21 = v20 + 1;
          uint64_t v40 = (_OWORD *)(v43 + 4);
          goto LABEL_68;
        case 6:
          uint64_t v45 = v19 + 12 * v20;
          unint64_t v46 = v12 + 196 * v14;
          unint64_t v47 = (_OWORD *)(v46 + 4);
          uint64_t v48 = v46 + 100;
          FRCode::add_state(a3, *(_DWORD *)(v45 + 4), (_OWORD *)(v46 + 4), v46 + 100);
          int v21 = *(_DWORD *)(v45 + 8);
          uint64_t v49 = a3;
          uint64_t v40 = v47;
          uint64_t v44 = v48;
          goto LABEL_69;
        case 7:
          uint64_t v50 = v19 + 12 * v20;
          unsigned int v53 = *(_DWORD *)(v50 + 4);
          unint64_t v51 = (_DWORD *)(v50 + 4);
          unsigned int v52 = v53;
          if (v53 < v51[1] + v53)
          {
            unint64_t v54 = v12 + 196 * v14;
            unint64_t v55 = (_OWORD *)(v54 + 4);
            uint64_t v56 = v54 + 100;
            int v57 = 2 * v52;
            do
            {
              FRCode::add_state(a3, *(_DWORD *)(a1[10] + 4 * v57) + *v18, v55, v56);
              ++v52;
              v57 += 2;
            }
            while (v51[1] + *v51 > v52);
            size_t v10 = a4;
          }
          goto LABEL_70;
        case 8:
          int v21 = *(_DWORD *)(v19 + 12 * v20 + 4);
          goto LABEL_66;
        case 9:
          if (v98) {
            goto LABEL_70;
          }
          uint64_t v58 = a1[15];
          uint64_t v59 = *(unsigned __int8 *)boost::basic_string_ref<char,std::char_traits<char>>::at(a5, a6, v99);
          if ((v58 & 8) == 0)
          {
            if (*(_DWORD *)(v19 + 12 * v20 + 4) != v59) {
              goto LABEL_70;
            }
LABEL_90:
            FRCode::add_state(v10, *v18 + 1, (_OWORD *)(v12 + 196 * v14 + 4), v12 + 196 * v14 + 100);
            goto LABEL_70;
          }
          int v79 = *(_DWORD *)(v19 + 12 * v20 + 4);
          if (v79 == case_folding[v59] || v79 == case_folding[v59 + 256]) {
            goto LABEL_90;
          }
LABEL_70:
          ++v14;
          unint64_t v12 = *a3;
          if (0x7D6343EB1A1F58D1 * ((uint64_t)(a3[1] - *a3) >> 2) <= v14) {
            goto LABEL_106;
          }
          break;
        case 0xA:
          if (v91) {
            goto LABEL_70;
          }
          uint64_t v60 = boost::basic_string_ref<char,std::char_traits<char>>::substr(a5, a6, v99);
          int low = FRCode::get_low(v60, v61);
          uint64_t v62 = boost::basic_string_ref<char,std::char_traits<char>>::substr(a5, a6, v99);
          int high = FRCode::get_high(v62, v63);
          if (low != *(_DWORD *)(v19 + 12 * v20 + 4))
          {
            size_t v10 = a4;
            goto LABEL_70;
          }
          size_t v10 = a4;
          if (high != *(_DWORD *)(v19 + 12 * v20 + 8)) {
            goto LABEL_70;
          }
          goto LABEL_77;
        case 0xB:
          uint64_t v65 = v19 + 12 * v20;
          int v68 = *(_DWORD *)(v65 + 4);
          float v67 = (int *)(v65 + 4);
          int v66 = v68;
          if (!(v68 | a8))
          {
            FRCode::add_state(a3, v20 + 1, (_OWORD *)(v12 + 196 * v14 + 4), v12 + 196 * v14 + 100);
            int v66 = *v67;
          }
          if (v66 == 1 && a6 == v99)
          {
            FRCode::add_state(a3, *v18 + 1, (_OWORD *)(v12 + 196 * v14 + 4), v12 + 196 * v14 + 100);
            int v66 = *v67;
          }
          if (v66 != 2
            || !v90
            && *(unsigned char *)boost::basic_string_ref<char,std::char_traits<char>>::at(a5, a6, v88) != 32
            && *(unsigned char *)boost::basic_string_ref<char,std::char_traits<char>>::at(a5, a6, v99) != 32)
          {
            goto LABEL_70;
          }
          int v21 = *v18 + 1;
LABEL_66:
          unint64_t v42 = v12 + 196 * v14;
          uint64_t v40 = (_OWORD *)(v42 + 4);
LABEL_67:
          uint64_t v44 = v42 + 100;
LABEL_68:
          uint64_t v49 = a3;
          goto LABEL_69;
        case 0xC:
        case 0xD:
          if (v98) {
            goto LABEL_70;
          }
          uint64_t v22 = v19 + 12 * v20;
          unsigned int v23 = *(_DWORD *)(v22 + 4);
          if (*(_DWORD *)(v22 + 8) == 1)
          {
            uint64_t v24 = a1[8];
            long long v25 = (char *)boost::basic_string_ref<char,std::char_traits<char>>::substr(a5, a6, v99);
            std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v103, v25, &v25[v26], v26);
            if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v27 = &v103;
            }
            else {
              long long v27 = (std::string *)v103.__r_.__value_.__r.__words[0];
            }
            if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v103.__r_.__value_.__l.__size_;
            }
            UTFString::to_utf16((std::basic_string<char16_t> *)__p, (const char *)v27, size);
            if (SBYTE7(__p[1]) < 0) {
              operator delete(*(void **)&__p[0]);
            }
            if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v103.__r_.__value_.__l.__data_);
            }
            if ((uset_serializedContains() != 0) == (*(unsigned char *)(v24 + 80 * v23 + 76) == 1)) {
              goto LABEL_70;
            }
            int v21 = *v18 + 1;
          }
          else
          {
            uint64_t v75 = a1[6] + 40 * v23;
            int v76 = (unsigned char *)boost::basic_string_ref<char,std::char_traits<char>>::at(a5, a6, v99);
            if ((*(unsigned char *)(v75 + 32) == 1) == ((*(void *)(v75
                                                            + (((unint64_t)*v76 >> 3) & 0x18)) >> *v76) & 1))
              goto LABEL_70;
LABEL_77:
            int v21 = *v18 + 1;
          }
LABEL_78:
          unint64_t v77 = v12 + 196 * v14;
          uint64_t v40 = (_OWORD *)(v77 + 4);
          uint64_t v44 = v77 + 100;
          uint64_t v49 = v10;
LABEL_69:
          FRCode::add_state(v49, v21, v40, v44);
          goto LABEL_70;
        case 0xE:
          if (a10) {
            goto LABEL_70;
          }
          int v21 = v20 + 1;
          goto LABEL_78;
        default:
          goto LABEL_70;
      }
    }
  }
  char v97 = 0;
LABEL_106:
  *a3 = *v10;
  unint64_t *v10 = v12;
  unint64_t v85 = a3[1];
  a3[1] = v10[1];
  v10[1] = v85;
  unint64_t v86 = a3[2];
  a3[2] = v10[2];
  v10[1] = *v10;
  v10[2] = v86;
  return v97 & 1;
}

void sub_20D39030C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  FRReplaceInst::~FRReplaceInst(&a27);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::basic_string_ref<char,std::char_traits<char>>::substr(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    std::logic_error::logic_error(&v6, "string_ref::substr");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    v4.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/loca"
                         "l/include/boost/utility/string_ref.hpp";
    v4.i64[1] = (uint64_t)"basic_string_ref<charT, traits> boost::basic_string_ref<char>::substr(size_type, size_type) con"
                         "st [charT = char, traits = std::char_traits<char>]";
    uint64_t v5 = 166;
    boost::throw_exception<std::out_of_range>(&v6, &v4);
  }
  return a1 + a3;
}

void FRCode::get_replacement(std::string *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (*(_DWORD *)(a2 + 4))
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(unsigned __int8 *)(*(void *)(a2 + 16) + v10);
      if (v11 == 255)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)(*(void *)(a2 + 8) + 8 * v10));
        if ((v18 & 0x80u) == 0) {
          p_p = (const std::string::value_type *)&__p;
        }
        else {
          p_p = (const std::string::value_type *)__p;
        }
        if ((v18 & 0x80u) == 0) {
          std::string::size_type v15 = v18;
        }
        else {
          std::string::size_type v15 = v17;
        }
      }
      else
      {
        unint64_t v12 = (char *)boost::basic_string_ref<char,std::char_traits<char>>::substr(a3, a4, (*(_DWORD *)(a5 + 4 * v11 + 8) - 1));
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, v12, &v12[v13], v13);
        if ((v18 & 0x80u) == 0) {
          p_p = (const std::string::value_type *)&__p;
        }
        else {
          p_p = (const std::string::value_type *)__p;
        }
        if ((v18 & 0x80u) == 0) {
          std::string::size_type v15 = v18;
        }
        else {
          std::string::size_type v15 = v17;
        }
      }
      std::string::append(a1, p_p, v15);
      if ((char)v18 < 0) {
        operator delete(__p);
      }
      ++v10;
    }
    while (v10 < *(unsigned int *)(a2 + 4));
  }
}

void sub_20D39057C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void FRReplaceInst::~FRReplaceInst(void **this)
{
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void std::vector<FRCode::State>::reserve(void **a1, unint64_t a2)
{
  if (0x7D6343EB1A1F58D1 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 2) < a2)
  {
    uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 196;
    int8x16_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::State>>(a2);
    uint64_t v5 = &v4[196 * v3];
    uint64_t v7 = &v4[196 * v6];
    uint64_t v9 = (char *)*a1;
    unint64_t v8 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *(_OWORD *)(v10 - 196) = *(_OWORD *)(v8 - 196);
        long long v11 = *(_OWORD *)(v8 - 180);
        long long v12 = *(_OWORD *)(v8 - 164);
        long long v13 = *(_OWORD *)(v8 - 148);
        *(_OWORD *)(v10 - 132) = *(_OWORD *)(v8 - 132);
        *(_OWORD *)(v10 - 148) = v13;
        *(_OWORD *)(v10 - 164) = v12;
        *(_OWORD *)(v10 - 180) = v11;
        long long v14 = *(_OWORD *)(v8 - 116);
        long long v15 = *(_OWORD *)(v8 - 100);
        long long v16 = *(_OWORD *)(v8 - 84);
        *(_OWORD *)(v10 - 68) = *(_OWORD *)(v8 - 68);
        *(_OWORD *)(v10 - 84) = v16;
        *(_OWORD *)(v10 - 100) = v15;
        *(_OWORD *)(v10 - 116) = v14;
        long long v17 = *(_OWORD *)(v8 - 52);
        long long v18 = *(_OWORD *)(v8 - 36);
        long long v19 = *(_OWORD *)(v8 - 20);
        *((_DWORD *)v10 - 1) = *((_DWORD *)v8 - 1);
        *(_OWORD *)(v10 - 20) = v19;
        *(_OWORD *)(v10 - 36) = v18;
        *(_OWORD *)(v10 - 52) = v17;
        v10 -= 196;
        v8 -= 196;
      }
      while (v8 != v9);
      unint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void TextSplitModule::process_data(uint64_t a1, uint64_t *a2)
{
  __dst[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)v2 + 8);
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  memset(v9, 0, sizeof(v9));
  if ((v8 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    size_t v6 = v8;
  }
  else {
    size_t v6 = (size_t)__p[1];
  }
  __dst[0] = 0;
  __dst[2] = v6;
  if (v6 < 0x11)
  {
    if (v6) {
      memmove(__dst, v5, v6);
    }
    std::__sort<std::__less<char,char> &,char *>();
    boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>((int)v9, v3, __dst);
  }
  operator new[]();
}

void sub_20D390F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  *(void *)(v35 - 112) = v34;
  if (*(char *)(v35 - 121) < 0) {
    operator delete(*(void **)(v35 - 144));
  }
  *(void *)(v35 - 144) = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  std::string __p = (void *)(v35 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)(v35 - 120) = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 120));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

void boost::algorithm::join<std::vector<std::string>,std::string>(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 == a3) {
    goto LABEL_10;
  }
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (char *)a2;
  }
  else {
    uint64_t v9 = *(char **)a2;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a2 + 8);
  }
  std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, (uint64_t)this, v9, &v9[v10], v10);
  while (1)
  {
    v6 += 24;
LABEL_10:
    if (v6 == a3) {
      break;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      long long v12 = this;
    }
    else {
      long long v12 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    uint64_t v13 = (uint64_t)v12 + size;
    int v14 = *(char *)(a4 + 23);
    if (v14 >= 0) {
      long long v15 = (char *)a4;
    }
    else {
      long long v15 = *(char **)a4;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v16 = *(void *)(a4 + 8);
    }
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, v13, v15, &v15[v16], v16);
    std::string::size_type v17 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v17 & 0x80u) == 0) {
      long long v18 = this;
    }
    else {
      long long v18 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if ((v17 & 0x80u) != 0) {
      std::string::size_type v17 = this->__r_.__value_.__l.__size_;
    }
    uint64_t v19 = (uint64_t)v18 + v17;
    int v20 = *(char *)(v6 + 23);
    if (v20 >= 0) {
      int v21 = (char *)v6;
    }
    else {
      int v21 = *(char **)v6;
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      std::string::size_type v22 = *(void *)(v6 + 8);
    }
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, v19, v21, &v21[v22], v22);
  }
}

void sub_20D3911C4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void Agglomerate::set<std::shared_ptr<FrontendInput>>(uint64_t a1, unint64_t *a2)
{
  int v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  int v8 = (char ***)off_26C2063D8;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    int v8 = (char ***)off_26C2063D8;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void Agglomerate::ItemHolder<std::shared_ptr<FrontendInput>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2063D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<FrontendInput>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2063D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<FrontendInput>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<FrontendInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FrontendInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  uint64_t v7 = a3;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__n_add) {
      return;
    }
    std::string::size_type v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    if (!__n_add) {
      return;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = this;
  }
  std::string::size_type v11 = a2 - (void)v10;
  if (v10 > (std::string *)a3 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= a3)
  {
    std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v11, a3, a4);
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    if (a3 == a4)
    {
      std::string::size_type v13 = 0;
      std::string::size_type v14 = 0;
      unsigned int v12 = 0;
    }
    else
    {
      do
        std::string::push_back(&v16, *v7++);
      while (v7 != a4);
      unsigned int v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = v16.__r_.__value_.__l.__size_;
      std::string::size_type v14 = v16.__r_.__value_.__r.__words[0];
    }
    if ((v12 & 0x80u) == 0) {
      long long v15 = &v16;
    }
    else {
      long long v15 = (std::string *)v14;
    }
    if ((v12 & 0x80u) == 0) {
      std::string::size_type v13 = v12;
    }
    std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v11, (char *)v15, (char *)v15 + v13);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20D3915F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TextSplitModule::~TextSplitModule(char **this)
{
  *this = (char *)off_26C201530;
  std::__tree<std::string>::destroy((uint64_t)(this + 35), this[36]);
  Module::~Module((Module *)this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t vars8;

  *this = (char *)off_26C201530;
  std::__tree<std::string>::destroy((uint64_t)(this + 35), this[36]);
  Module::~Module((Module *)this);
}

void RobertaWordEmbInference::get_outputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "word_emb");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v3 + 32))(&v7, v3, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v7, v4);
  if (v4[0] != a2) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a2, *(void *)v4[0], *(void *)(v4[0] + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4[0] + 8) - *(void *)v4[0]) >> 3));
  }
  long long v9 = (void **)v4;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_20D3917D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  *(void *)(v18 - 24) = &a10;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 24));
  int v20 = *(std::__shared_weak_count **)(v18 - 32);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void RobertaWordEmbInference::prepare_inputs(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "input_ids");
  InferenceEngine::DataTensor::build_from_1d_array<float>(a2, &v9);
  if (v8 < 0) {
    operator delete(__p);
  }
  InferenceEngine::DataTensor::unsqueeze(v9, 0);
  unint64_t v4 = *(void (****)(void, InferenceEngine::DataTensor **))(a1 + 8);
  unint64_t v5 = v9;
  char v6 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v4)(v4, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_20D3918E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 - 24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void RobertaWordEmbInference::inference(uint64_t a1, std::string *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  BBPE::encode_and_return_vector(&v26, *(void *)(a1 + 24), a2);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  std::string __p = 0;
  unint64_t v5 = v26;
  std::vector<float>::resize((uint64_t)&__p, 0xCCCCCCCCCCCCCCCDLL * ((v26[1] - *v26) >> 3));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 != v7)
  {
    char v8 = (float *)__p;
    do
    {
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v6;
        v29.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v9;
      }
      uint64_t v10 = *(void *)(v6 + 24);
      int v31 = *(_DWORD *)(v6 + 32);
      uint64_t v30 = v10;
      float *v8 = (float)(int)v10;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      v6 += 40;
      ++v8;
    }
    while (v6 != v7);
  }
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string::size_type v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v29.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_DEBUG, "RobertaWordEmb inference begin.", (uint8_t *)&v29, 2u);
  }
  Diagnostics::log(7, "RobertaWordEmb inference begin.", v12);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 8))(a1, &__p);
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string::size_type v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v29.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)v29.__r_.__value_.__r.__words + 4) = (double)((v15.__d_.__rep_ - v13.__d_.__rep_) / 1000000)
                                                           / 1000.0;
    _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_DEFAULT, "RobertaWordEmb inference time: %.3f s", (uint8_t *)&v29, 0xCu);
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "RobertaWordEmb inference time: %.3f s", v17, (double)((v16.__d_.__rep_ - v13.__d_.__rep_) / 1000000) / 1000.0);
  memset(&v29, 0, sizeof(v29));
  (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 16))(a1, &v29);
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_DEBUG, "RobertaWordEmb inference end.", buf, 2u);
  }
  Diagnostics::log(7, "RobertaWordEmb inference end.", v19);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = 0xAAAAAAAAAAAAAAABLL
                       * ((uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 3);
    _os_log_impl(&dword_20CD80000, v20, OS_LOG_TYPE_DEFAULT, "RobertaWordEmb generates output_embedding of length %zu", buf, 0xCu);
  }
  Diagnostics::log(5, "RobertaWordEmb generates output_embedding of length %zu", v21, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 3));
  uint64_t v22 = *(void *)(a3 + 24);
  if (!v22) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v22 + 48))(v22, &v29);
  *(void *)std::string buf = &v29;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void sub_20D391DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    __cxa_begin_catch(exception_object);
    (*(void (**)(void))(**(void **)(v17 + 8) + 56))(*(void *)(v17 + 8));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_20D391E84(_Unwind_Exception *a1)
{
}

void sub_20D391E90(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x20D391E98);
  }
  __clang_call_terminate(a1);
}

void RobertaWordEmbModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)v4 + 16);
  uint64_t v12 = *(void *)(*(void *)v4 + 8);
  uint64_t v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(*(void *)v6 + 8);
  uint64_t v7 = *(void *)(*(void *)v6 + 16);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_DEFAULT, "RobertaWordEmb module start.", buf, 2u);
  }
  Diagnostics::log(5, "RobertaWordEmb module start.", v10);
  std::mutex::lock((std::mutex *)(a1 + 280));
  *(unsigned char *)(a1 + 272) = 1;
  WordEmbeddingUtils::strip_marker_from_original_text(&v11, v8 + 96);
}

void sub_20D3927E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,std::__shared_weak_count *a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v56 = *v52;
  if (*v52)
  {
    v51[2].__shared_owners_ = (uint64_t)v56;
    operator delete(v56);
  }
  int v57 = *v53;
  if (*v53)
  {
    v51[1].__shared_owners_ = (uint64_t)v57;
    operator delete(v57);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v58 = *(void **)(v54 - 112);
  if (v58)
  {
    *(void *)(v54 - 104) = v58;
    operator delete(v58);
  }
  std::__shared_weak_count::~__shared_weak_count(v51);
  operator delete(v59);
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  if (a40 < 0) {
    operator delete(a35);
  }
  std::mutex::unlock(v49);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  _Unwind_Resume(a1);
}

void sub_20D3929D0()
{
  if (!v0) {
    JUMPOUT(0x20D3929BCLL);
  }
  JUMPOUT(0x20D3929B4);
}

void sub_20D3929DC()
{
}

void *std::__function::__value_func<int ()(std::vector<std::vector<float>> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *RobertaWordEmbModule::process_dialog_tag_ids(char *a1, void *a2, int *a3, int *a4)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  __n128 result = std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(a1, a3, a4, a4 - a3);
  uint64_t v7 = (float *)a2[56];
  if ((float *)a2[57] == v7) {
    uint64_t v7 = (float *)a2[59];
  }
  uint64_t v8 = *(char **)a1;
  if (**(float **)a1 == *v7)
  {
    long long v9 = (char *)*((void *)a1 + 1);
    uint64_t v10 = v9 - (v8 + 4);
    if (v9 != v8 + 4) {
      __n128 result = memmove(*(void **)a1, v8 + 4, v9 - (v8 + 4));
    }
    *((void *)a1 + 1) = &v8[v10];
  }
  return result;
}

void std::__shared_ptr_emplace<P2ADialogEmb>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<P2ADialogEmb>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C21F9D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<P2ADialogEmb>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C21F9D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char **std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2>,int ()(std::vector<std::vector<float>> &)>::target_type()
{
}

uint64_t std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2>,int ()(std::vector<std::vector<float>> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2>,int ()(std::vector<std::vector<float>> &)>::operator()(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(*(void *)(a1 + 8) + 160))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEFAULT, "RobertaWordEmb inference cancelled.", v6, 2u);
    }
    Diagnostics::log(5, "RobertaWordEmb inference cancelled.", v3);
  }
  else
  {
    uint64_t v4 = **(void **)(a1 + 16) + 48;
    if ((uint64_t *)v4 != a2) {
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    }
  }
  return 1;
}

__n128 std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2>,int ()(std::vector<std::vector<float>> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C21FAA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2>,int ()(std::vector<std::vector<float>> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_26C21FAA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_2>,int ()(std::vector<std::vector<float>> &)>::~__func()
{
}

char **std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1>,int ()(std::vector<std::vector<float>> &)>::target_type()
{
}

uint64_t std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1>,int ()(std::vector<std::vector<float>> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1>,int ()(std::vector<std::vector<float>> &)>::operator()(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(*(void *)(a1 + 8) + 160))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEFAULT, "RobertaWordEmb inference cancelled.", v6, 2u);
    }
    Diagnostics::log(5, "RobertaWordEmb inference cancelled.", v3);
  }
  else
  {
    uint64_t v4 = **(void **)(a1 + 16) + 24;
    if ((uint64_t *)v4 != a2) {
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    }
  }
  return 1;
}

__n128 std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1>,int ()(std::vector<std::vector<float>> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C21FA28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1>,int ()(std::vector<std::vector<float>> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_26C21FA28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_1>,int ()(std::vector<std::vector<float>> &)>::~__func()
{
}

void std::__shared_ptr_emplace<P2AWordEmb>::__on_zero_shared(void **a1)
{
  uint64_t v2 = a1 + 3;
  uint64_t v3 = a1 + 9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 6;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__shared_ptr_emplace<P2AWordEmb>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C21F988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<P2AWordEmb>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C21F988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char **std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::target_type()
{
}

uint64_t std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 160))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v3, OS_LOG_TYPE_DEFAULT, "RobertaWordEmb inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "RobertaWordEmb inference cancelled.", v4);
  }
  else
  {
    uint64_t v8 = (char *)operator new(0x60uLL);
    *(_OWORD *)(v8 + 8) = 0u;
    *(void *)uint64_t v8 = off_26C21F988;
    uint64_t v22 = 0;
    *(_OWORD *)std::string buf = 0u;
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(buf, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    *((void *)v8 + 3) = 0;
    *((void *)v8 + 4) = 0;
    *((void *)v8 + 5) = 0;
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((void *)v8 + 3, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3));
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    std::string __p = buf;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    *(void *)&long long v9 = v8 + 24;
    *((void *)&v9 + 1) = v8;
    uint64_t v10 = **(void **)(a1 + 16);
    std::string v11 = *(std::__shared_weak_count **)(v10 + 88);
    *(_OWORD *)(v10 + 80) = v9;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (*(void *)(v2 + 456) != *(void *)(v2 + 448))
    {
      uint64_t v12 = *(uint64_t **)(a1 + 16);
      uint64_t v13 = *v12;
      std::string::size_type v14 = (std::__shared_weak_count *)v12[1];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RobertaWordEmbModule::process_dialog_tag_ids((char *)&__p, (void *)v2, *(int **)(v13 + 440), *(int **)(v13 + 448));
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&__p, (uint64_t)__p, *(char **)(v2 + 448), *(char **)(v2 + 456), (uint64_t)(*(void *)(v2 + 456) - *(void *)(v2 + 448)) >> 2);
      uint64_t v15 = (char *)operator new(0x60uLL);
      *(_OWORD *)(v15 + 8) = 0u;
      *(void *)uint64_t v15 = off_26C21F9D8;
      uint64_t v22 = 0;
      *(_OWORD *)std::string buf = 0u;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(buf, __p, (uint64_t)v20, (v20 - (unsigned char *)__p) >> 2);
      *((void *)v15 + 3) = 0;
      *((void *)v15 + 4) = 0;
      *((void *)v15 + 5) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v15 + 3, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2);
      *((_OWORD *)v15 + 4) = 0u;
      *((_OWORD *)v15 + 5) = 0u;
      *((_OWORD *)v15 + 3) = 0u;
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      *(void *)&long long v16 = v15 + 24;
      *((void *)&v16 + 1) = v15;
      uint64_t v17 = **(void **)(a1 + 16);
      uint64_t v18 = *(std::__shared_weak_count **)(v17 + 520);
      *(_OWORD *)(v17 + 512) = v16;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (__p)
      {
        int v20 = __p;
        operator delete(__p);
      }
    }
  }
  return 1;
}

void sub_20D393310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C1EDF10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_26C1EDF10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::~__func()
{
}

void RobertaWordEmbModule::prepare(RobertaWordEmbModule *this)
{
  if (!*((unsigned char *)this + 272))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
    }
    Diagnostics::log(5, "Prepare inference.", v3);
    uint64_t v4 = (char *)operator new(0x228uLL);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = off_26C216280;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    *(_OWORD *)(v4 + 264) = 0u;
    *(_OWORD *)(v4 + 280) = 0u;
    *(_OWORD *)(v4 + 296) = 0u;
    *(_OWORD *)(v4 + 312) = 0u;
    *(_OWORD *)(v4 + 328) = 0u;
    *(_OWORD *)(v4 + 344) = 0u;
    *(_OWORD *)(v4 + 360) = 0u;
    *(_OWORD *)(v4 + 376) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *((_WORD *)v4 + 12) = 257;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 9) = 0u;
    *((_OWORD *)v4 + 10) = 0u;
    *((_OWORD *)v4 + 11) = 0u;
    *((_OWORD *)v4 + 12) = 0u;
    *((_OWORD *)v4 + 13) = 0u;
    *((_OWORD *)v4 + 14) = 0u;
    *((_OWORD *)v4 + 15) = 0u;
    *((_OWORD *)v4 + 16) = 0u;
    *((_OWORD *)v4 + 17) = 0u;
    *((_OWORD *)v4 + 18) = 0u;
    *((_OWORD *)v4 + 19) = 0u;
    *((_OWORD *)v4 + 20) = 0u;
    *((_OWORD *)v4 + 21) = 0u;
    *((_OWORD *)v4 + 22) = 0u;
    *((_OWORD *)v4 + 23) = 0u;
    *(_OWORD *)(v4 + 520) = 0u;
    *(_OWORD *)(v4 + 536) = 0u;
    *(_OWORD *)(v4 + 488) = 0u;
    *(_OWORD *)(v4 + 504) = 0u;
    *(_OWORD *)(v4 + 456) = 0u;
    *(_OWORD *)(v4 + 472) = 0u;
    *(_OWORD *)(v4 + 424) = 0u;
    *(_OWORD *)(v4 + 440) = 0u;
    *(_OWORD *)(v4 + 392) = 0u;
    *(_OWORD *)(v4 + 408) = 0u;
    *(void *)std::string buf = v4 + 24;
    std::string v11 = v4;
    std::vector<int>::resize((std::vector<int> *)(v4 + 56), 0xC8uLL);
    v4[26] = 1;
    uint64_t v5 = (char *)operator new(0xB0uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)uint64_t v5 = off_26C215FA8;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 152) = 0u;
    *((void *)v5 + 21) = 0;
    *(_OWORD *)(v5 + 24) = 0u;
    v9[0] = (unint64_t)(v5 + 24);
    v9[1] = (unint64_t)v5;
    uint64_t v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 8) = 0u;
    *(void *)uint64_t v6 = off_26C215330;
    *((_OWORD *)v6 + 2) = 0u;
    *((void *)v6 + 3) = v6 + 32;
    Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)(v6 + 24), (unint64_t *)buf);
    Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v6 + 24), v9);
    uint64_t v7 = v6 + 24;
    uint64_t v8 = (std::__shared_weak_count *)v6;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(RobertaWordEmbModule *, char **))(*(void *)this + 80))(this, &v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  }
}

void sub_20D3936D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void RobertaWordEmbModule::~RobertaWordEmbModule(RobertaWordEmbModule *this)
{
  RobertaWordEmbModule::~RobertaWordEmbModule(this);
  JUMPOUT(0x2105595E0);
}

{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = off_26C1ED888;
  uint64_t v2 = (void *)*((void *)this + 62);
  if (v2)
  {
    *((void *)this + 63) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 59);
  if (v3)
  {
    *((void *)this + 60) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 56);
  if (v4)
  {
    *((void *)this + 57) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 46, *((unsigned __int8 *)this + 360));
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  Module::~Module(this);
}

uint64_t RobertaWordEmbModule::load_txt(std::string *a1, uint64_t a2)
{
  v10[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v8);
  if (!v9[15])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (const char *)a2;
    }
    else {
      uint64_t v6 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v7, "Unable to open txt file: %s", v6);
    MEMORY[0x210558D40](exception, v7);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(a1, *(void **)((char *)&v9[3] + *(void *)(v8[0] - 24)));
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v8 + *(void *)(v8[0] - 24)), *(_DWORD *)((char *)&v9[2] + *(void *)(v8[0] - 24)) | 4);
  }
  v8[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x210558FE0](v9);
  std::istream::~istream();
  return MEMORY[0x210559500](v10);
}

void sub_20D393A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream(&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *this, void *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (a2 && (a2[3] != a2[4] || (*(unsigned int (**)(void *))(*a2 + 72))(a2) != -1))
  {
    uint64_t v4 = (std::string::value_type *)a2[3];
    if (v4 == (std::string::value_type *)a2[4]) {
      std::string::value_type v5 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v5 = *v4;
    }
    std::string::push_back(this, v5);
    uint64_t v6 = a2[3];
    if (v6 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v6 + 1;
    }
  }
}

void sub_20D393B7C(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_20D393B98(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<RobertaWordEmbInference>::__on_zero_shared(void *a1)
{
  a1[3] = off_26C1ED8F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<RobertaWordEmbInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<RobertaWordEmbInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<BBPE>::__on_zero_shared(uint64_t a1)
{
  pcre2_code_free_8(*(void *)(a1 + 240));
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  std::__list_imp<std::pair<std::string,std::string>>::clear((char *)(a1 + 184));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 136);
  BBPEVocab::~BBPEVocab((BBPEVocab *)(a1 + 64));
  return std::__hash_table<std::__hash_value_type<std::string,char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char>>>::~__hash_table(a1 + 24);
}

void std::__shared_ptr_emplace<BBPE>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218C10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<BBPE>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218C10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void RobertaWordEmbPersistentModule::~RobertaWordEmbPersistentModule(RobertaWordEmbPersistentModule *this)
{
  *(void *)this = off_26C1EDB10;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = off_26C1EDB10;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  PersistentModule::~PersistentModule((void **)this);
}

uint64_t NeuralFallbacklistConnection::should_consume_data(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 88)) {
    return 0;
  }
  FrontendFeature::FrontendFeature((FrontendFeature *)v29, *(const FrontendFeature **)(*(void *)v3 + 8));
  if (v29[0] != v29[1])
  {
    uint64_t v4 = *(_DWORD **)(v29[0] + 72);
    std::string::value_type v5 = *(_DWORD **)(v29[0] + 80);
    if (v4 != v5)
    {
      do
      {
        if (*v4 == 1)
        {
          *(unsigned char *)(a1 + 72) = 0;
          long long v9 = *(long long **)(a1 + 80);
          uint64_t v8 = *(long long **)(a1 + 88);
          if (v9 == v8) {
            break;
          }
          uint64_t v10 = v34;
          long long v27 = *(long long **)(a1 + 88);
          while (1)
          {
            if (*((char *)v9 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v9, *((void *)v9 + 1));
            }
            else
            {
              long long v11 = *v9;
              v28.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
              *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
            }
            int64_t v12 = v35;
            if ((v35 & 0x80u) == 0) {
              uint64_t v13 = v10;
            }
            else {
              uint64_t v13 = (void **)v34[0];
            }
            char v14 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v15 = &v28;
            }
            else {
              uint64_t v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
            }
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int64_t size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
            }
            else {
              int64_t size = v28.__r_.__value_.__l.__size_;
            }
            if (!size)
            {
LABEL_39:
              *(unsigned char *)(a1 + 72) = 1;
              SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v39, *(void *)(a1 + 56));
              if (v39)
              {
                int v38 = 4;
                Observable::emit(v39, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, &v38);
              }
              if (v40) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v40);
              }
              char v17 = 0;
              char v14 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
              goto LABEL_44;
            }
            if ((v35 & 0x80u) != 0) {
              int64_t v12 = (int64_t)v34[1];
            }
            if (v12 < size)
            {
              char v17 = 1;
              goto LABEL_44;
            }
            int v18 = v10;
            uint64_t v19 = (char *)v13 + v12;
            int v20 = v15->__r_.__value_.__s.__data_[0];
            int v21 = v13;
            while (1)
            {
              int64_t v22 = v12 - size;
              if (v22 == -1 || (unsigned int v23 = (char *)memchr(v21, v20, v22 + 1)) == 0)
              {
LABEL_35:
                char v17 = 1;
                uint64_t v10 = v18;
LABEL_36:
                uint64_t v8 = v27;
                goto LABEL_44;
              }
              uint64_t v24 = v23;
              if (!memcmp(v23, v15, size)) {
                break;
              }
              int v21 = (void **)(v24 + 1);
              int64_t v12 = v19 - (v24 + 1);
              if (v12 < size) {
                goto LABEL_35;
              }
            }
            char v17 = 1;
            uint64_t v10 = v18;
            if (v24 == v19) {
              goto LABEL_36;
            }
            BOOL v25 = v24 - (char *)v13 == -1;
            uint64_t v8 = v27;
            if (!v25) {
              goto LABEL_39;
            }
LABEL_44:
            if (v14 < 0) {
              operator delete(v28.__r_.__value_.__l.__data_);
            }
            if ((v17 & 1) == 0) {
              goto LABEL_53;
            }
            long long v9 = (long long *)((char *)v9 + 24);
            if (v9 == v8) {
              goto LABEL_48;
            }
          }
        }
        v4 += 14;
      }
      while (v4 != v5);
LABEL_48:
      if (!*(unsigned char *)(a1 + 72)) {
        goto LABEL_54;
      }
      SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v28, *(void *)(a1 + 56));
      uint64_t v6 = (uint64_t **)v28.__r_.__value_.__r.__words[0];
      if (!v28.__r_.__value_.__r.__words[0]) {
        goto LABEL_51;
      }
      goto LABEL_50;
    }
  }
  if (*(unsigned char *)(a1 + 72))
  {
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v28, *(void *)(a1 + 56));
    uint64_t v6 = (uint64_t **)v28.__r_.__value_.__r.__words[0];
    if (!v28.__r_.__value_.__r.__words[0])
    {
LABEL_51:
      if (v28.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v28.__r_.__value_.__l.__size_);
      }
LABEL_53:
      uint64_t v7 = 1;
      goto LABEL_55;
    }
LABEL_50:
    LODWORD(v39) = 4;
    Observable::emit(v6, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, &v39);
    goto LABEL_51;
  }
LABEL_54:
  uint64_t v7 = 0;
LABEL_55:
  if (v37 < 0) {
    operator delete(__p);
  }
  if ((char)v35 < 0) {
    operator delete(v34[0]);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  return v7;
}

void sub_20D39418C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  FrontendFeature::~FrontendFeature(&a17);
  _Unwind_Resume(a1);
}

void FrontendFeature::~FrontendFeature(void **this)
{
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v2 = this + 6;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t NeuralFallbackConnection::should_consume_data(uint64_t a1, uint64_t *a2)
{
  if (NeuralTTSUtils::disable_neural_tts)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_20CD80000, v3, OS_LOG_TYPE_DEFAULT, "Neural TTS is disabled explicitly", (uint8_t *)&__p, 2u);
    }
    Diagnostics::log(5, "Neural TTS is disabled explicitly", v4);
    *(_DWORD *)std::string buf = 0;
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&__p, *(void *)(a1 + 56));
    if (__p) {
      Observable::emit((uint64_t **)__p, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, buf);
    }
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
    return 1;
  }
  uint64_t v8 = *(uint64_t **)(*(void *)v6 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(*(void *)v6 + 16);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  std::string __p = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v11 = v9 - v10;
  if (!v11)
  {
    long long v16 = 0;
    goto LABEL_24;
  }
  unint64_t v12 = 0x84BDA12F684BDA13 * (v11 >> 3);
  std::vector<BOOL>::__vallocate[abi:ne180100](&__p, v12);
  unint64_t v13 = (unint64_t)v48;
  char v14 = (char *)v48 + v12;
  uint64_t v48 = (std::__shared_weak_count *)((char *)v48 + v12);
  if (!v13)
  {
    uint64_t v15 = v14 - 1;
    goto LABEL_19;
  }
  uint64_t v15 = v14 - 1;
  if (((unint64_t)(v14 - 1) ^ (v13 - 1)) >= 0x40)
  {
LABEL_19:
    unint64_t v17 = (unint64_t)v15 >> 6;
    if ((unint64_t)v14 >= 0x41) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = 0;
    }
    *((void *)__p + v18) = 0;
  }
  *(void *)std::string buf = (char *)__p + 8 * (v13 >> 6);
  LODWORD(v51) = v13 & 0x3F;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)buf, v12);
  long long v16 = (char *)__p;
LABEL_24:
  uint64_t v19 = (int *)v8[6];
  int v20 = (int *)v8[7];
  if (v19 != v20)
  {
    int v21 = (int *)v8[6];
    do
    {
      unint64_t v22 = *v21;
      unint64_t v23 = v21[1] + v22;
      if (v22 < v23)
      {
        do
        {
          *(void *)&v16[(v22 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v22;
          ++v22;
        }
        while (v22 < v23);
      }
      v21 += 18;
    }
    while (v21 != v20);
  }
  uint64_t v25 = *v8;
  uint64_t v24 = v8[1];
  uint64_t v26 = v24 - *v8;
  if (v24 == *v8)
  {
    if (v16) {
LABEL_39:
    }
      operator delete(v16);
LABEL_40:
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v32 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_20CD80000, v32, OS_LOG_TYPE_INFO, "Neural TTS is not used because prompt is found", (uint8_t *)&__p, 2u);
    }
    Diagnostics::log(6, "Neural TTS is not used because prompt is found", v33, __p);
    *(_DWORD *)std::string buf = 3;
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&__p, *(void *)(a1 + 56));
    uint64_t v34 = (uint64_t **)__p;
    if (!__p) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  BOOL v27 = 0;
  unint64_t v28 = 0;
  unint64_t v29 = v26 / 216;
  if (v29 <= 1) {
    uint64_t v30 = 1;
  }
  else {
    uint64_t v30 = v29;
  }
  uint64_t v31 = (unsigned char *)(v25 + 24);
  while (((*(void *)&v16[(v28 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v28) & 1) != 0 || *v31)
  {
    BOOL v27 = ++v28 >= v29;
    v31 += 216;
    if (v30 == v28) {
      goto LABEL_39;
    }
  }
  if (v19 == v20) {
    goto LABEL_58;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v36, OS_LOG_TYPE_DEFAULT, "Partial prompt is found and ignored in neural TTS.", buf, 2u);
  }
  Diagnostics::log(5, "Partial prompt is found and ignored in neural TTS.", v37, __p);
  long long v16 = (char *)__p;
  if (__p) {
LABEL_58:
  }
    operator delete(v16);
  if (v27) {
    goto LABEL_40;
  }
  BOOL is_ane_available = NeuralTTSUtils::is_ane_available((NeuralTTSUtils *)v16);
  if (is_ane_available || NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)is_ane_available))
  {
    SharedObjectPool::get_if<EspressoWaveRNNANEStatus>(buf, *(void *)(a1 + 56));
    if (*(void *)buf && !**(unsigned char **)buf)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v45 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_20CD80000, v45, OS_LOG_TYPE_INFO, "WaveRNN ANE model is not ready for use.", (uint8_t *)&__p, 2u);
      }
      Diagnostics::log(6, "WaveRNN ANE model is not ready for use.", v46, __p);
      int v52 = 2;
      SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&__p, *(void *)(a1 + 56));
      unint64_t v42 = (uint64_t **)__p;
      if (!__p) {
        goto LABEL_84;
      }
    }
    else
    {
      if (!NeuralTTSUtils::check_fallback_conditions(v39))
      {
        uint64_t v5 = 0;
LABEL_87:
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        goto LABEL_49;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_20CD80000, v40, OS_LOG_TYPE_DEFAULT, "Neural TTS is disabled due to thermal condition or low power mode", (uint8_t *)&__p, 2u);
      }
      Diagnostics::log(5, "Neural TTS is disabled due to thermal condition or low power mode", v41, __p);
      int v52 = 5;
      SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&__p, *(void *)(a1 + 56));
      unint64_t v42 = (uint64_t **)__p;
      if (!__p)
      {
LABEL_84:
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
        uint64_t v5 = 1;
        goto LABEL_87;
      }
    }
    Observable::emit(v42, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, &v52);
    goto LABEL_84;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_20CD80000, v43, OS_LOG_TYPE_DEFAULT, "No ANE or AMX or GPU is found, use fallback pipeline instead.", (uint8_t *)&__p, 2u);
  }
  Diagnostics::log(5, "No ANE or AMX or GPU is found, use fallback pipeline instead.", v44, __p);
  *(_DWORD *)std::string buf = 1;
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&__p, *(void *)(a1 + 56));
  uint64_t v34 = (uint64_t **)__p;
  if (__p) {
LABEL_45:
  }
    Observable::emit(v34, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, buf);
LABEL_46:
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  uint64_t v5 = 1;
LABEL_49:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v5;
}

void sub_20D3948A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SharedObjectPool::get_if<EspressoWaveRNNANEStatus>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    uint64_t v6 = *(void *)(*(void *)v5 + 16);
    *a1 = *(void *)(*(void *)v5 + 8);
    a1[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D3949A8(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(void const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void Observable::on_event(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, std::string **a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!*(void *)(a3 + 24))
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  uint64_t v8 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v9 = (std::string *)operator new(0x50uLL);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C218E78;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::__function::__value_func<void ()(void const*)>::__value_func[abi:ne180100]((uint64_t)v30, a3);
  uint64_t v10 = v9 + 1;
  if (SHIBYTE(v29) < 0)
  {
    std::string::__init_copy_ctor_external(v9 + 1, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v9[1].__r_.__value_.__r.__words[2] = v29;
  }
  std::__function::__value_func<void ()(void const*)>::__value_func[abi:ne180100]((uint64_t)&v9[2], (uint64_t)v30);
  std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](v30);
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  *a4 = v10;
  a4[1] = v9;
  std::string::basic_string[abi:ne180100]<0>(v30, a2);
  __p[0] = v30;
  uint64_t v11 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a1, (const void **)v30, (_OWORD **)__p);
  unint64_t v12 = v11;
  char v14 = (char *)v11[8];
  unint64_t v13 = v11[9];
  if ((unint64_t)v14 >= v13)
  {
    long long v16 = (char *)v11[7];
    uint64_t v17 = (v14 - v16) >> 4;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = v13 - (void)v16;
    if (v19 >> 3 > v18) {
      unint64_t v18 = v19 >> 3;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v21 = (char *)operator new(16 * v20);
    unint64_t v22 = &v21[16 * v17];
    long long v23 = *(_OWORD *)a4;
    *(_OWORD *)unint64_t v22 = *(_OWORD *)a4;
    if (*((void *)&v23 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
      long long v16 = (char *)v12[7];
      char v14 = (char *)v12[8];
    }
    uint64_t v24 = &v21[16 * v20];
    uint64_t v15 = v22 + 16;
    if (v14 == v16)
    {
      v12[7] = v22;
      v12[8] = v15;
      v12[9] = v24;
      if (!v16) {
        goto LABEL_28;
      }
    }
    else
    {
      do
      {
        long long v25 = *((_OWORD *)v14 - 1);
        v14 -= 16;
        *((_OWORD *)v22 - 1) = v25;
        v22 -= 16;
        *(void *)char v14 = 0;
        *((void *)v14 + 1) = 0;
      }
      while (v14 != v16);
      uint64_t v26 = (char *)v12[7];
      long long v16 = (char *)v12[8];
      v12[7] = v22;
      v12[8] = v15;
      v12[9] = v24;
      if (v16 != v26)
      {
        do
        {
          BOOL v27 = (std::__shared_weak_count *)*((void *)v16 - 1);
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          v16 -= 16;
        }
        while (v16 != v26);
        long long v16 = v26;
      }
      if (!v16) {
        goto LABEL_28;
      }
    }
    operator delete(v16);
  }
  else
  {
    *(void *)char v14 = *a4;
    *((void *)v14 + 1) = v9;
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v9->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
    uint64_t v15 = v14 + 16;
    v11[8] = v14 + 16;
  }
LABEL_28:
  v12[8] = v15;
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  std::mutex::unlock(v8);
}

void sub_20D394CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  std::mutex::unlock(v20);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v8[2] = 0;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 9) = 0;
    *((void *)v6 + 7) = 0;
    char v12 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<Observer>>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<Observer>::__on_zero_shared(uint64_t a1)
{
  std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<Observer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218E78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Observer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Observable::remove_observer(uint64_t a1, const void ***a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = *a2;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(a1, &v20, *a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x50uLL);
    v18[0] = v7;
    v18[1] = a1 + 8;
    char v19 = 0;
    uint64_t v9 = (std::string *)(v7 + 4);
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      long long v10 = *(_OWORD *)v5;
      v7[6] = (uint64_t)v5[2];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v7[7] = 0;
    v7[8] = 0;
    v7[9] = 0;
    char v19 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)a1, v20, v8, v7);
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  uint64_t v11 = (const void ***)v7[7];
  char v12 = (const void ***)v7[8];
  if (v11 != v12)
  {
    while (*v11 != *a2)
    {
      v11 += 2;
      if (v11 == v12)
      {
        uint64_t v11 = (const void ***)v7[8];
        break;
      }
    }
  }
  if (v11 != v12)
  {
    uint64_t v13 = v11 + 2;
    if (v11 + 2 != v12)
    {
      do
      {
        char v14 = *v13;
        if (*v13 != *a2)
        {
          uint64_t v15 = v13[1];
          *uint64_t v13 = 0;
          v13[1] = 0;
          long long v16 = (std::__shared_weak_count *)v11[1];
          *uint64_t v11 = v14;
          v11[1] = v15;
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          v11 += 2;
        }
        v13 += 2;
      }
      while (v13 != v12);
      char v12 = (const void ***)v7[8];
    }
  }
  if (v11 != v12)
  {
    while (v12 != v11)
    {
      uint64_t v17 = (std::__shared_weak_count *)*(v12 - 1);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      v12 -= 2;
    }
    v7[8] = (uint64_t)v11;
  }
  std::mutex::unlock(v4);
}

void sub_20D395118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void Observable::emit(uint64_t **this, char *a2, void *a3)
{
  uint64_t v6 = (std::mutex *)(this + 3);
  std::mutex::lock((std::mutex *)(this + 3));
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  char v14 = __p;
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (_OWORD **)&v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = (uint64_t *)*((void *)v7 + 7);
  uint64_t v8 = (uint64_t *)*((void *)v7 + 8);
  while (v9 != v8)
  {
    uint64_t v10 = *v9;
    __p[0] = a3;
    uint64_t v11 = *(void *)(v10 + 48);
    if (!v11) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, __p);
    v9 += 2;
  }
  std::mutex::unlock(v6);
}

void sub_20D39521C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void Environment::Environment(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_20D3952CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void SharedObjectPool::get<FeatureBook>(void *a1, uint64_t a2)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  unint64_t v73 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  uint64_t v3 = a2 + 32;
  {
    goto LABEL_158;
  }
  uint64_t v70 = a2 + 32;
  SharedObjectPool::get<VoiceConfig>(&v79, (long long **)a2);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v79 + 72))(&v77);
  uint64_t v4 = (char *)operator new(0x50uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  long long v5 = v4 + 56;
  *((void *)v4 + 6) = v4 + 56;
  uint64_t v6 = (void **)(v4 + 48);
  uint64_t v74 = v4;
  *(void *)uint64_t v4 = off_26C2153D8;
  *(_OWORD *)(v4 + 24) = 0u;
  unint64_t v71 = (std::vector<std::string> *)(v4 + 24);
  *((void *)v4 + 5) = 0;
  *((_DWORD *)v4 + 18) = 0;
  long long v7 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v108, (uint64_t)&v77);
  uint64_t v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v7, (char *)FEATURE_NAMES_KEY);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v106, (uint64_t)v8);
  uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v108, (char *)FEATURE_NAMES_KEY);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(&v103, (unsigned __int8 *)v9);
  std::vector<std::string>::__vdeallocate(v71);
  *((std::vector<std::string> *)v74 + 1) = v103;
  memset(&v103, 0, sizeof(v103));
  *(void *)&long long buf = &v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v103.__begin_ = (std::vector<std::string>::pointer)v108;
  v103.__end_ = 0;
  v103.__end_cap_.__value_ = 0;
  uint64_t v104 = 0;
  unint64_t v105 = 0x8000000000000000;
  if (v108[0] == 1)
  {
    v103.__end_ = (std::vector<std::string>::pointer)(v109 + 1);
    v103.__end_ = (std::vector<std::string>::pointer)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>((uint64_t)v109, (const std::string::value_type **)&FEATURE_NAMES_KEY);
  }
  else if (v108[0] == 2)
  {
    v103.__end_cap_.__value_ = (std::string *)v109[1];
  }
  else
  {
    unint64_t v105 = 1;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v108, (unsigned __int8 **)&v103, &buf);
  *(void *)&long long buf = v108;
  *((void *)&buf + 1) = 0;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  unint64_t v113 = 0x8000000000000000;
  int v10 = v108[0];
  if (v108[0] == 1)
  {
    *((void *)&buf + 1) = v109 + 1;
    uint64_t v11 = v5;
    *((void *)&buf + 1) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>((uint64_t)v109, (const std::string::value_type **)&FEATURE_QUESTION_KEY);
    int v10 = v108[0];
  }
  else
  {
    uint64_t v11 = v5;
    if (v108[0] == 2)
    {
      char v12 = v109;
      uint64_t v111 = v109[1];
      __endptr = (char *)v108;
      unint64_t v99 = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      unint64_t v102 = 0x8000000000000000;
LABEL_15:
      uint64_t v100 = v12[1];
      goto LABEL_18;
    }
    unint64_t v113 = 1;
  }
  __endptr = (char *)v108;
  unint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  unint64_t v102 = 0x8000000000000000;
  if (v10 == 1)
  {
    unint64_t v99 = v109 + 1;
  }
  else
  {
    if (v10 == 2)
    {
      char v12 = v109;
      goto LABEL_15;
    }
    unint64_t v102 = 1;
  }
LABEL_18:
  int v76 = v6;
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&__endptr))
  {
    char v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v108, (char *)FEATURE_QUESTION_KEY);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(&v95, (unsigned __int8 *)v13);
    std::vector<std::string>::pointer begin = v95.__begin_;
    for (std::vector<std::string>::pointer i = v95.__end_; begin != i; ++begin)
    {
      __endptr = 0;
      long long v16 = (const char *)begin;
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0) {
        long long v16 = (const char *)begin->__r_.__value_.__r.__words[0];
      }
      char v17 = strtol(v16, &__endptr, 10);
      if (*__endptr)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        unint64_t v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          std::vector<std::string>::pointer v20 = begin;
          if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0) {
            std::vector<std::string>::pointer v20 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v20;
          _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_ERROR, "Invalid question bit value '%s'", (uint8_t *)&buf, 0xCu);
        }
        std::vector<std::string>::pointer v21 = begin;
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0) {
          std::vector<std::string>::pointer v21 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(3, "Invalid question bit value '%s'", v19, v21);
        uint64_t v11 = v5;
      }
      else
      {
        *((_DWORD *)v74 + 18) |= 1 << v17;
      }
    }
    *(void *)&long long buf = v108;
    *((void *)&buf + 1) = 0;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    unint64_t v113 = 0x8000000000000000;
    if (v108[0] == 1)
    {
      *((void *)&buf + 1) = v109 + 1;
      *((void *)&buf + 1) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>((uint64_t)v109, (const std::string::value_type **)&FEATURE_QUESTION_KEY);
    }
    else if (v108[0] == 2)
    {
      uint64_t v111 = v109[1];
    }
    else
    {
      unint64_t v113 = 1;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v108, (unsigned __int8 **)&buf, &__endptr);
    __endptr = (char *)&v95;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__endptr);
  }
  __endptr = (char *)v108;
  unint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  unint64_t v102 = 0x8000000000000000;
  if (v108[0])
  {
    if (v108[0] == 2)
    {
      uint64_t v100 = *v109;
    }
    else if (v108[0] == 1)
    {
      unint64_t v99 = (uint64_t *)*v109;
    }
    else
    {
      unint64_t v102 = 0;
    }
  }
  else
  {
    unint64_t v102 = 1;
  }
  uint64_t v75 = v74 + 64;
  while (1)
  {
    v95.__end_cap_.__value_ = 0;
    uint64_t v96 = 0;
    v95.__end_ = 0;
    v95.__begin_ = (std::vector<std::string>::pointer)v108;
    unint64_t v97 = 0x8000000000000000;
    if (v108[0] == 2)
    {
      v95.__end_cap_.__value_ = (std::string *)v109[1];
    }
    else if (v108[0] == 1)
    {
      v95.__end_ = (std::vector<std::string>::pointer)(v109 + 1);
    }
    else
    {
      unint64_t v97 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__endptr, (unsigned __int8 **)&v95))
    {
      break;
    }
    uint64_t v22 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key((uint64_t)&__endptr);
    if (*(char *)(v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
    }
    else
    {
      long long v23 = *(_OWORD *)v22;
      v94.__r_.__value_.__r.__words[2] = *(void *)(v22 + 16);
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v23;
    }
    uint64_t v24 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__endptr);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v92, (uint64_t)v24);
    BOOL v90 = 0;
    uint64_t v91 = 0;
    uint64_t v89 = &v90;
    v95.__end_cap_.__value_ = 0;
    uint64_t v96 = 0;
    v95.__end_ = 0;
    v95.__begin_ = (std::vector<std::string>::pointer)v92;
    unint64_t v97 = 0x8000000000000000;
    if (v92[0])
    {
      if (v92[0] == 2)
      {
        v95.__end_cap_.__value_ = *v93;
      }
      else if (v92[0] == 1)
      {
        v95.__end_ = *v93;
      }
      else
      {
        unint64_t v97 = 0;
      }
    }
    else
    {
      unint64_t v97 = 1;
    }
    while (1)
    {
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      unint64_t v85 = 0;
      int64_t v84 = (unsigned __int8 *)v92;
      unint64_t v88 = 0x8000000000000000;
      if (v92[0] == 2)
      {
        uint64_t v86 = (uint64_t)v93[1];
      }
      else if (v92[0] == 1)
      {
        unint64_t v85 = (uint64_t *)(v93 + 1);
      }
      else
      {
        unint64_t v88 = 1;
      }
      if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v95, &v84))
      {
        break;
      }
      uint64_t v25 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key((uint64_t)&v95);
      if (*(char *)(v25 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v25, *(void *)(v25 + 8));
      }
      else
      {
        long long v26 = *(_OWORD *)v25;
        v83.__r_.__value_.__r.__words[2] = *(void *)(v25 + 16);
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v26;
      }
      BOOL v27 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v95);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>(v27, &__p);
      unint64_t v28 = v90;
      std::string::size_type v29 = (void **)&v90;
      uint64_t v30 = &v90;
      if (!v90) {
        goto LABEL_82;
      }
      std::string::size_type v29 = (void **)&v90;
      while (1)
      {
        while (1)
        {
          uint64_t v30 = (uint64_t **)v28;
          char v31 = (const void **)(v28 + 4);
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v91, (const void **)&v83.__r_.__value_.__l.__data_, (const void **)v28 + 4))break; {
          unint64_t v28 = *v30;
          }
          std::string::size_type v29 = (void **)v30;
          if (!*v30) {
            goto LABEL_82;
          }
        }
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v91, v31, (const void **)&v83.__r_.__value_.__l.__data_))break; {
        std::string::size_type v29 = (void **)(v30 + 1);
        }
        unint64_t v28 = v30[1];
        if (!v28) {
          goto LABEL_82;
        }
      }
      uint64_t v32 = (char *)*v29;
      if (!*v29)
      {
LABEL_82:
        uint64_t v32 = (char *)operator new(0x50uLL);
        int64_t v84 = (unsigned __int8 *)v32;
        unint64_t v85 = (uint64_t *)&v90;
        LOBYTE(v86) = 0;
        char v33 = (std::string *)(v32 + 32);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v33, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
          *((void *)v32 + 6) = *((void *)&v83.__r_.__value_.__l + 2);
        }
        *((void *)v32 + 8) = 0;
        *((void *)v32 + 9) = 0;
        *((void *)v32 + 7) = 0;
        LOBYTE(v86) = 1;
        *(void *)uint64_t v32 = 0;
        *((void *)v32 + 1) = 0;
        *((void *)v32 + 2) = v30;
        *std::string::size_type v29 = v32;
        uint64_t v34 = (uint64_t *)v32;
        if (*v89)
        {
          uint64_t v89 = (uint64_t **)*v89;
          uint64_t v34 = (uint64_t *)*v29;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v90, v34);
        ++v91;
        int64_t v84 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v84);
      }
      if (v32 + 56 != (char *)&__p) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v32 + 56, (char *)__p, (uint64_t)v82, (v82 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        int v82 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v95);
      uint64_t v11 = v5;
    }
    unsigned __int8 v35 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)v76, &v84, (const void **)&v94.__r_.__value_.__l.__data_);
    long long v36 = (char *)*v35;
    if (!*v35)
    {
      char v37 = v35;
      long long v36 = (char *)operator new(0x50uLL);
      v95.__begin_ = (std::vector<std::string>::pointer)v36;
      v95.__end_ = (std::vector<std::string>::pointer)v11;
      LOBYTE(v95.__end_cap_.__value_) = 0;
      int v38 = (std::string *)(v36 + 32);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v38, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
        *((void *)v36 + 6) = *((void *)&v94.__r_.__value_.__l + 2);
      }
      *((void *)v36 + 9) = 0;
      *((void *)v36 + 8) = 0;
      *((void *)v36 + 7) = v36 + 64;
      LOBYTE(v95.__end_cap_.__value_) = 1;
      uint64_t v39 = v84;
      *(void *)long long v36 = 0;
      *((void *)v36 + 1) = 0;
      *((void *)v36 + 2) = v39;
      const char *v37 = v36;
      uint64_t v40 = (void *)**v76;
      unint64_t v41 = (uint64_t *)v36;
      if (v40)
      {
        *int v76 = v40;
        unint64_t v41 = (uint64_t *)*v37;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)v11, v41);
      ++*v75;
      v95.__begin_ = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v95);
    }
    unint64_t v42 = (uint64_t **)(v36 + 56);
    if (v36 + 56 != (char *)&v89)
    {
      unint64_t v43 = v89;
      if (*((void *)v36 + 9))
      {
        uint64_t v44 = *((void *)v36 + 8);
        uint64_t v45 = *((void *)v36 + 7);
        *((void *)v36 + 7) = v36 + 64;
        *(void *)(v44 + 16) = 0;
        *((void *)v36 + 8) = 0;
        *((void *)v36 + 9) = 0;
        if (*(void *)(v45 + 8)) {
          unint64_t v46 = *(std::string **)(v45 + 8);
        }
        else {
          unint64_t v46 = (std::string *)v45;
        }
        v95.__begin_ = (std::vector<std::string>::pointer)(v36 + 56);
        v95.__end_ = v46;
        v95.__end_cap_.__value_ = v46;
        if (v46)
        {
          v95.__end_ = (std::vector<std::string>::pointer)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v46);
          unint64_t v47 = &v90;
          if (v43 != &v90)
          {
            do
            {
              std::string::operator=((std::string *)((char *)v46 + 32), (const std::string *)(v43 + 4));
              if (v46 != (std::string *)v43) {
                std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v46[2].__r_.__value_.__s.__data_[8], (char *)v43[7], (uint64_t)v43[8], ((char *)v43[8] - (char *)v43[7]) >> 2);
              }
              value = v95.__end_cap_.__value_;
              leaf_int high = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)(v36 + 56), &v84, (const void **)&v95.__end_cap_.__value_[1].__r_.__value_.__l.__size_);
              std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)v36 + 7, (uint64_t)v84, leaf_high, (uint64_t *)value);
              v95.__end_cap_.__value_ = v95.__end_;
              if (v95.__end_) {
                v95.__end_ = (std::vector<std::string>::pointer)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v95.__end_);
              }
              uint64_t v50 = v43[1];
              if (v50)
              {
                do
                {
                  unint64_t v47 = (uint64_t **)v50;
                  uint64_t v50 = (uint64_t *)*v50;
                }
                while (v50);
              }
              else
              {
                do
                {
                  unint64_t v47 = (uint64_t **)v43[2];
                  BOOL v51 = *v47 == (uint64_t *)v43;
                  unint64_t v43 = v47;
                }
                while (!v51);
              }
              unint64_t v46 = v95.__end_cap_.__value_;
              if (v95.__end_cap_.__value_) {
                BOOL v51 = v47 == &v90;
              }
              else {
                BOOL v51 = 1;
              }
              unint64_t v43 = v47;
            }
            while (!v51);
          }
        }
        else
        {
          unint64_t v47 = v43;
        }
        std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v95);
        unint64_t v43 = v47;
        uint64_t v11 = v5;
      }
      if (v43 != &v90)
      {
        int v52 = (std::string *)(v36 + 64);
        do
        {
          unsigned int v53 = (char *)operator new(0x50uLL);
          uint64_t v54 = v53;
          v95.__begin_ = (std::vector<std::string>::pointer)v53;
          v95.__end_ = v52;
          LOBYTE(v95.__end_cap_.__value_) = 0;
          unint64_t v55 = (const void **)(v53 + 32);
          if (*((char *)v43 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v53 + 32), (const std::string::value_type *)v43[4], (std::string::size_type)v43[5]);
          }
          else
          {
            long long v56 = *((_OWORD *)v43 + 2);
            *((void *)v53 + 6) = v43[6];
            *(_OWORD *)unint64_t v55 = v56;
          }
          v54[7] = 0;
          v54[8] = 0;
          v54[9] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v54 + 7, v43[7], (uint64_t)v43[8], ((char *)v43[8] - (char *)v43[7]) >> 2);
          LOBYTE(v95.__end_cap_.__value_) = 1;
          int v57 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v42, &v84, v55);
          std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v42, (uint64_t)v84, v57, (uint64_t *)v95.__begin_);
          v95.__begin_ = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v95);
          uint64_t v58 = v43[1];
          if (v58)
          {
            do
            {
              uint64_t v59 = (uint64_t **)v58;
              uint64_t v58 = (uint64_t *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              uint64_t v59 = (uint64_t **)v43[2];
              BOOL v51 = *v59 == (uint64_t *)v43;
              unint64_t v43 = v59;
            }
            while (!v51);
          }
          unint64_t v43 = v59;
          uint64_t v11 = v5;
        }
        while (v59 != &v90);
      }
    }
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v90);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v93, v92[0]);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&__endptr);
  }
  std::string::basic_string[abi:ne180100]<0>(&__endptr, "name");
  uint64_t v60 = *(char **)v11;
  unint64_t v61 = v11;
  if (!*(void *)v11) {
    goto LABEL_146;
  }
  do
  {
    BOOL v62 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)v75, (const void **)v60 + 4, (const void **)&__endptr);
    unint64_t v63 = (char **)(v60 + 8);
    if (!v62)
    {
      unint64_t v63 = (char **)v60;
      uint64_t v11 = v60;
    }
    uint64_t v60 = *v63;
  }
  while (*v63);
  unint64_t v61 = v5;
  if (v11 == v5
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)v75, (const void **)&__endptr, (const void **)v11 + 4))
  {
LABEL_146:
    uint64_t v11 = v61;
  }
  if (SHIBYTE(v100) < 0) {
    operator delete(__endptr);
  }
  if (v5 == v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&__endptr, "Feature book doesn't have phone name encoding.");
    MEMORY[0x210558D40](exception, &__endptr);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v107, v106[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v109, v108[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v78, v77);
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  v103.__begin_ = (std::vector<std::string>::pointer)&buf;
  if (!v64) {
    operator new();
  }
  v103.__begin_ = (std::vector<std::string>::pointer)off_26C206378;
  v103.__end_ = (std::vector<std::string>::pointer)v71;
  v103.__end_cap_.__value_ = (std::string *)v74;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v74 + 1, 1uLL, memory_order_relaxed);
  long long v65 = *(_OWORD *)&v103.__end_;
  v103.__end_ = 0;
  v103.__end_cap_.__value_ = 0;
  int v66 = *(std::__shared_weak_count **)(v64 + 16);
  *(_OWORD *)(v64 + 8) = v65;
  if (v66)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    v103.__begin_ = (std::vector<std::string>::pointer)off_26C206378;
    if (v103.__end_cap_.__value_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103.__end_cap_.__value_);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v74);
  uint64_t v3 = v70;
LABEL_158:
  uint64_t v68 = *(void *)(*(void *)v67 + 16);
  *a1 = *(void *)(*(void *)v67 + 8);
  a1[1] = v68;
  if (v68) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v73);
}

void sub_20D3960A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, std::recursive_mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned __int8 a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  std::string __p = &a53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v63 - 168), *(unsigned __int8 *)(v63 - 176));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v63 - 152), *(unsigned __int8 *)(v63 - 160));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<int>>>>>::destroy(*(void **)(a15 + 56));
  std::string __p = a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a15);
  operator delete(v65);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a23, a22);
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  std::recursive_mutex::unlock(a14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NNInputEncoder>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__shared_ptr_emplace<NNInputEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NNInputEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::ItemHolder<std::shared_ptr<FeatureBook>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206378;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<FeatureBook>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206378;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

float std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(uint64_t a1, char *__src, int *a3, int *a4, uint64_t a5)
{
  if (a5 < 1) {
    return result;
  }
  uint64_t v6 = a3;
  long long v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 <= (uint64_t)(v11 - v12) >> 2)
  {
    uint64_t v19 = (uint64_t)(v12 - (void)__src) >> 2;
    if (v19 >= a5)
    {
      std::vector<std::string>::pointer v20 = &a3[a5];
      uint64_t v22 = *(float **)(v9 - 8);
    }
    else
    {
      std::vector<std::string>::pointer v20 = &a3[v19];
      if (v20 == a4)
      {
        uint64_t v22 = *(float **)(v9 - 8);
      }
      else
      {
        std::vector<std::string>::pointer v21 = &a3[v19];
        uint64_t v22 = *(float **)(v9 - 8);
        do
        {
          int v23 = *v21++;
          float result = (float)v23;
          *v22++ = (float)v23;
        }
        while (v21 != a4);
      }
      *(void *)(a1 + 8) = v22;
      if ((uint64_t)(v12 - (void)__src) < 1) {
        return result;
      }
    }
    std::string::size_type v29 = (float *)&__src[4 * a5];
    uint64_t v30 = &v22[-a5];
    char v31 = v22;
    if ((unint64_t)v30 < v12)
    {
      char v31 = v22;
      do
      {
        float v32 = *v30++;
        float result = v32;
        *v31++ = v32;
      }
      while ((unint64_t)v30 < v12);
    }
    *(void *)(a1 + 8) = v31;
    if (v22 != v29) {
      memmove(&v22[-(v22 - v29)], __src, (char *)v22 - (char *)v29);
    }
    for (; v6 != v20; v7 += 4)
    {
      int v33 = *v6++;
      float result = (float)v33;
      *(float *)long long v7 = (float)v33;
    }
  }
  else
  {
    char v13 = *(unsigned char **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__src - v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v38 = v9;
    if (v17) {
      unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    uint64_t v25 = (float *)&v18[4 * v15];
    std::string __p = v18;
    unsigned __int8 v35 = v25;
    char v37 = &v18[4 * v17];
    uint64_t v26 = 4 * a5;
    BOOL v27 = &v25[a5];
    do
    {
      int v28 = *v6++;
      *v25++ = (float)v28;
      v26 -= 4;
    }
    while (v26);
    long long v36 = v27;
    std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v7);
    if (v36 != v35) {
      long long v36 = (float *)((char *)v36 + (((char *)v35 - (char *)v36 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    }
    if (__p) {
      operator delete(__p);
    }
  }
  return result;
}

void sub_20D396610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FrontendEnvironment::get_shared_component_instance<PronunciationDictionary>(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 168);
  {
    uint64_t v4 = &v5;
    operator new();
  }
  if (v1 == v2) {
    return 0;
  }
  else {
    return v2[5] + 8;
  }
}

void sub_20D396880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  char v13 = *(std::__shared_weak_count **)(v11 + 16);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  MEMORY[0x2105595E0](v11, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<PronunciationDictionary>::~ItemHolder(void *a1)
{
  *a1 = off_26C2062D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<PronunciationDictionary>::~ItemHolder(void *a1)
{
  *a1 = off_26C2062D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<NNetExtractor>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<NNetExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NNetExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void NormClassify::nn_prediction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v5 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v4, a3);
  memset(v3, 0, sizeof(v3));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v3, v4, v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3));
  to_roost<float,float>((uint64_t)&v7, (uint64_t)v3);
}

void sub_20D396D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_6:
      if (a35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a35);
      }
      std::string __p = &a15;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string __p = &a21;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

void NormClassify::get_label(void *a1, uint64_t a2, char *a3, unint64_t a4, unsigned __int16 *a5, int a6, unsigned __int8 **a7)
{
  uint64_t v7 = a5;
  uint64_t v8 = a1;
  unint64_t v113 = 0;
  uint64_t v114 = 0;
  v115[0] = 0;
  if (a4 == 1)
  {
    if (*a5 == *(unsigned __int16 *)(a2 + 76))
    {
      uint64_t v7 = (unsigned __int16 *)(a2 + 76);
      unint64_t v9 = 2;
    }
    else
    {
      unint64_t v9 = 1;
    }
    goto LABEL_6;
  }
  unint64_t v9 = a4;
  if (a4)
  {
LABEL_6:
    int v102 = a6;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    unint64_t v105 = v9;
    int v108 = v7;
    while (1)
    {
      int v14 = (__int16)v7[v13];
      uint64_t v15 = v7[v13];
      if ((v14 & 0x80000000) == 0)
      {
        if (v9 == 1)
        {
          uint64_t v16 = v114;
          if ((unint64_t)v114 >= v115[0])
          {
            int v28 = v113;
            uint64_t v39 = v114 - v113;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v41 = v115[0] - (void)v113;
            if ((uint64_t)(v115[0] - (void)v113) >> 1 > v40) {
              unint64_t v40 = v41 >> 1;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v40;
            }
            if (v32)
            {
              int v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v115, v32);
              int v28 = v113;
              uint64_t v16 = v114;
            }
            else
            {
              int v33 = 0;
            }
            uint64_t v54 = (float *)&v33[4 * v39];
            *uint64_t v54 = 1.0;
            unint64_t v17 = v54 + 1;
            while (v16 != v28)
            {
              int v55 = *((_DWORD *)v16-- - 1);
              *((_DWORD *)v54-- - 1) = v55;
            }
            goto LABEL_113;
          }
          float *v114 = 1.0;
          unint64_t v17 = v16 + 1;
          goto LABEL_115;
        }
        std::vector<std::string>::pointer v20 = *a7;
        std::vector<std::string>::pointer v21 = a7[1];
        if (*a7 == v21) {
          goto LABEL_36;
        }
        uint64_t v22 = (const char *)(*(uint64_t (**)(void, void))(**(void **)(a2 + 40) + 24))(*(void *)(a2 + 40), v7[v13]);
        size_t v23 = strlen(v22);
        while (1)
        {
          if ((char)v20[23] < 0)
          {
            if (v23 == *((void *)v20 + 1))
            {
              if (v23 == -1) {
LABEL_178:
              }
                std::string::__throw_out_of_range[abi:ne180100]();
              uint64_t v24 = *(unsigned __int8 **)v20;
LABEL_23:
              if (!memcmp(v24, v22, v23)) {
                goto LABEL_26;
              }
            }
          }
          else if (v23 == v20[23])
          {
            uint64_t v24 = v20;
            if (v23 == -1) {
              goto LABEL_178;
            }
            goto LABEL_23;
          }
          v20 += 24;
          if (v20 == v21)
          {
            std::vector<std::string>::pointer v20 = v21;
LABEL_26:
            uint64_t v7 = v108;
            if (v20 != a7[1])
            {
              double likelihood = get_likelihood(a3, v15);
              float v26 = -*(float *)&likelihood;
              BOOL v27 = v114;
              if ((unint64_t)v114 >= v115[0])
              {
                int v28 = v113;
                uint64_t v29 = v114 - v113;
                unint64_t v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v31 = v115[0] - (void)v113;
                if ((uint64_t)(v115[0] - (void)v113) >> 1 > v30) {
                  unint64_t v30 = v31 >> 1;
                }
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v32 = v30;
                }
                unint64_t v9 = v105;
                if (v32)
                {
                  int v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v115, v32);
                  int v28 = v113;
                  BOOL v27 = v114;
                }
                else
                {
                  int v33 = 0;
                }
                uint64_t v54 = (float *)&v33[4 * v29];
                *uint64_t v54 = v26;
                unint64_t v17 = v54 + 1;
                while (v27 != v28)
                {
                  int v70 = *((_DWORD *)v27-- - 1);
                  *((_DWORD *)v54-- - 1) = v70;
                }
                goto LABEL_113;
              }
LABEL_37:
              *BOOL v27 = v26;
              unint64_t v17 = v27 + 1;
              unint64_t v9 = v105;
              goto LABEL_115;
            }
LABEL_36:
            double v34 = get_likelihood(a3, v15);
            float v26 = *(float *)&v34;
            BOOL v27 = v114;
            if ((unint64_t)v114 < v115[0]) {
              goto LABEL_37;
            }
            int v28 = v113;
            uint64_t v42 = v114 - v113;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v44 = v115[0] - (void)v113;
            if ((uint64_t)(v115[0] - (void)v113) >> 1 > v43) {
              unint64_t v43 = v44 >> 1;
            }
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v43;
            }
            unint64_t v9 = v105;
            if (v32)
            {
              int v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v115, v32);
              int v28 = v113;
              BOOL v27 = v114;
            }
            else
            {
              int v33 = 0;
            }
            uint64_t v54 = (float *)&v33[4 * v42];
            *uint64_t v54 = v26;
            unint64_t v17 = v54 + 1;
            while (v27 != v28)
            {
              int v56 = *((_DWORD *)v27-- - 1);
              *((_DWORD *)v54-- - 1) = v56;
            }
LABEL_113:
            unint64_t v113 = v54;
            uint64_t v114 = v17;
            v115[0] = &v33[4 * v32];
            if (v28) {
              operator delete(v28);
            }
LABEL_115:
            uint64_t v114 = v17;
            if ((unint64_t)v11 >= v10)
            {
              uint64_t v71 = v11 - v12;
              if (v11 - v12 <= -3) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v72 = v71 >> 1;
              if (v10 - (unint64_t)v12 <= (v71 >> 1) + 1) {
                uint64_t v73 = v72 + 1;
              }
              else {
                uint64_t v73 = v10 - (void)v12;
              }
              if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v74 = v73;
              }
              if (v74) {
                uint64_t v74 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v74);
              }
              else {
                uint64_t v75 = 0;
              }
              int v76 = (char *)(v74 + 2 * v72);
              *(_WORD *)int v76 = v14;
              uint64_t v68 = v76 + 2;
              while (v11 != v12)
              {
                __int16 v77 = *((_WORD *)v11 - 1);
                v11 -= 2;
                *((_WORD *)v76 - 1) = v77;
                v76 -= 2;
              }
              unint64_t v10 = v74 + 2 * v75;
              if (v12) {
                operator delete(v12);
              }
              unint64_t v12 = v76;
            }
            else
            {
              *(_WORD *)uint64_t v11 = v14;
              unint64_t v61 = v11 + 2;
LABEL_117:
              uint64_t v68 = v61;
            }
            goto LABEL_134;
          }
        }
      }
      if (v9 == 2)
      {
        unint64_t v18 = v114;
        if ((unint64_t)v114 < v115[0])
        {
          float *v114 = 1.0;
          uint64_t v19 = v18 + 1;
LABEL_40:
          uint64_t v38 = v19;
          goto LABEL_91;
        }
        uint64_t v45 = v113;
        uint64_t v46 = v114 - v113;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v48 = v115[0] - (void)v113;
        if ((uint64_t)(v115[0] - (void)v113) >> 1 > v47) {
          unint64_t v47 = v48 >> 1;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49)
        {
          uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v115, v49);
          uint64_t v45 = v113;
          unint64_t v18 = v114;
        }
        else
        {
          uint64_t v50 = 0;
        }
        int v57 = (float *)&v50[4 * v46];
        *int v57 = 1.0;
        uint64_t v38 = v57 + 1;
        while (v18 != v45)
        {
          int v58 = *((_DWORD *)v18-- - 1);
          *((_DWORD *)v57-- - 1) = v58;
        }
      }
      else
      {
        double v35 = get_likelihood(a3, v15 & 0x7FFF);
        int v36 = LODWORD(v35);
        char v37 = v114;
        if ((unint64_t)v114 < v115[0])
        {
          float *v114 = *(float *)&v35;
          uint64_t v19 = v37 + 1;
          goto LABEL_40;
        }
        uint64_t v45 = v113;
        uint64_t v51 = v114 - v113;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v53 = v115[0] - (void)v113;
        if ((uint64_t)(v115[0] - (void)v113) >> 1 > v52) {
          unint64_t v52 = v53 >> 1;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v52;
        }
        if (v49)
        {
          uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v115, v49);
          uint64_t v45 = v113;
          char v37 = v114;
        }
        else
        {
          uint64_t v50 = 0;
        }
        int v57 = (float *)&v50[4 * v51];
        *(_DWORD *)int v57 = v36;
        uint64_t v38 = v57 + 1;
        while (v37 != v45)
        {
          int v59 = *((_DWORD *)v37-- - 1);
          *((_DWORD *)v57-- - 1) = v59;
        }
      }
      unint64_t v113 = v57;
      uint64_t v114 = v38;
      v115[0] = &v50[4 * v49];
      if (v45) {
        operator delete(v45);
      }
LABEL_91:
      uint64_t v114 = v38;
      unsigned __int16 v60 = v7[++v13];
      if ((unint64_t)v11 < v10)
      {
        *(_WORD *)uint64_t v11 = v60;
        unint64_t v61 = v11 + 2;
        goto LABEL_117;
      }
      uint64_t v62 = v11 - v12;
      if (v11 - v12 <= -3) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v63 = v62 >> 1;
      if (v10 - (unint64_t)v12 <= (v62 >> 1) + 1) {
        uint64_t v64 = v63 + 1;
      }
      else {
        uint64_t v64 = v10 - (void)v12;
      }
      if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v65 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v65 = v64;
      }
      if (v65) {
        uint64_t v65 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v65);
      }
      else {
        uint64_t v66 = 0;
      }
      uint64_t v67 = (char *)(v65 + 2 * v63);
      *(_WORD *)uint64_t v67 = v60;
      uint64_t v68 = v67 + 2;
      while (v11 != v12)
      {
        __int16 v69 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v67 - 1) = v69;
        v67 -= 2;
      }
      unint64_t v10 = v65 + 2 * v66;
      if (v12) {
        operator delete(v12);
      }
      unint64_t v12 = v67;
LABEL_134:
      ++v13;
      uint64_t v11 = v68;
      if (v13 >= v9)
      {
        if (Diagnostics::s_log_level < *(_DWORD *)(a2 + 72))
        {
          uint64_t v8 = a1;
          uint64_t v78 = a2;
          goto LABEL_166;
        }
        unint64_t v79 = v9;
        uint64_t v80 = 0;
        unint64_t v81 = 0;
        memset(&v112, 0, sizeof(v112));
        int v82 = v12;
        uint64_t v78 = a2;
        do
        {
          uint64_t v83 = v108[v81];
          if ((__int16)v108[v81] < 0)
          {
            uint64_t v87 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 24))(*(void *)(a2 + 40), v83 & 0x7FFF);
            unint64_t v88 = (const char *)(*(uint64_t (**)(void, void))(**(void **)(a2 + 40) + 24))(*(void *)(a2 + 40), *(unsigned __int16 *)v82);
            StringFormatter::StringFormatter((StringFormatter *)&__p, " %s:%s : %5.3f", v87, v88, v113[v80]);
            if ((v111 & 0x80u) == 0) {
              p_p = (const std::string::value_type *)&__p;
            }
            else {
              p_p = (const std::string::value_type *)__p;
            }
            if ((v111 & 0x80u) == 0) {
              std::string::size_type v90 = v111;
            }
            else {
              std::string::size_type v90 = v110;
            }
            std::string::append(&v112, p_p, v90);
            if ((char)v111 < 0) {
              operator delete(__p);
            }
            ++v81;
          }
          else
          {
            int64_t v84 = (const char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 24))(*(void *)(a2 + 40), v83);
            StringFormatter::StringFormatter((StringFormatter *)&__p, " %s : %5.3f", v84, v113[v80]);
            if ((v111 & 0x80u) == 0) {
              unint64_t v85 = (const std::string::value_type *)&__p;
            }
            else {
              unint64_t v85 = (const std::string::value_type *)__p;
            }
            if ((v111 & 0x80u) == 0) {
              std::string::size_type v86 = v111;
            }
            else {
              std::string::size_type v86 = v110;
            }
            std::string::append(&v112, v85, v86);
            if ((char)v111 < 0) {
              operator delete(__p);
            }
          }
          ++v81;
          ++v80;
          v82 += 2;
        }
        while (v81 < v79);
        uint64_t v91 = *(unsigned int *)(a2 + 72);
        uint64_t v92 = &v112;
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v92 = (std::string *)v112.__r_.__value_.__r.__words[0];
        }
        uint64_t v8 = a1;
        a6 = v102;
LABEL_160:
        unint64_t v93 = "Basic";
        if (a6) {
          unint64_t v93 = "Smart";
        }
        Diagnostics::log(v91, "Possible %s Labels:%s\n", a3, v93, v92);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        goto LABEL_166;
      }
    }
  }
  uint64_t v78 = a2;
  uint64_t v91 = *(unsigned int *)(a2 + 72);
  if (Diagnostics::s_log_level >= (int)v91)
  {
    unint64_t v12 = 0;
    memset(&v112, 0, sizeof(v112));
    uint64_t v92 = &v112;
    goto LABEL_160;
  }
  unint64_t v12 = 0;
LABEL_166:
  std::string v94 = v113 + 1;
  BOOL v95 = v113 == v114 || v94 == v114;
  uint64_t v96 = v113;
  if (!v95)
  {
    float v97 = *v113;
    uint64_t v96 = v113;
    char v98 = v113 + 1;
    do
    {
      float v99 = *v98++;
      float v100 = v99;
      if (v97 < v99)
      {
        float v97 = v100;
        uint64_t v96 = v94;
      }
      std::string v94 = v98;
    }
    while (v98 != v114);
  }
  uint64_t v101 = (char *)(*(uint64_t (**)(void, void))(**(void **)(v78 + 40) + 24))(*(void *)(v78 + 40), *(unsigned __int16 *)&v12[((char *)v96 - (char *)v113) << 30 >> 31]);
  std::string::basic_string[abi:ne180100]<0>(v8, v101);
  operator delete(v12);
  if (v113)
  {
    uint64_t v114 = v113;
    operator delete(v113);
  }
}

void sub_20D39773C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v32) {
    operator delete(v32);
  }
  double v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

double get_likelihood(void *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 2))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = ((uint64_t)(a1[1] - *a1) >> 2) - 1;
      *(_DWORD *)long long buf = 67109376;
      int v9 = a2;
      __int16 v10 = 2048;
      uint64_t v11 = v7;
      _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_ERROR, "NormClassify illegal label %u max %zu", buf, 0x12u);
    }
    Diagnostics::log(3, "NormClassify illegal label %u max %zu", v6, a2, ((uint64_t)(a1[1] - *a1) >> 2) - 1);
    return 0.0;
  }
  else
  {
    LODWORD(result) = *(_DWORD *)(*a1 + 4 * a2);
  }
  return result;
}

void NormClassify::get_basic_label(void *a1, uint64_t a2, char *a3, uint64_t a4, unsigned __int8 **a5)
{
  if (UTFString::is_digits<std::string>(a4))
  {
    uint64_t v10 = *(void *)(a2 + 40);
    std::string::basic_string[abi:ne180100]<0>(__p, "_DIGIT_");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v10 + 40))(v10, __p);
  }
  else if (UTFString::is_alpha<std::string>(a4))
  {
    uint64_t v13 = *(void *)(a2 + 40);
    std::string::basic_string[abi:ne180100]<0>(__p, "_ALPHA_");
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v13 + 40))(v13, __p);
  }
  else
  {
    int v14 = UTFString::is_punct<std::string>(a4);
    uint64_t v15 = *(void *)(a2 + 40);
    if (v14) {
      std::string::basic_string[abi:ne180100]<0>(__p, "_PUNCT_");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "_NONE_");
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v15 + 40))(v15, __p);
  }
  unint64_t v16 = v11;
  unint64_t v17 = v12;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  NormClassify::get_label(a1, a2, a3, v16, v17, 0, a5);
}

void sub_20D397AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t UTFString::is_alpha<std::string>(uint64_t a1)
{
  v17[4] = *MEMORY[0x263EF8340];
  v16[0] = &off_26C211470;
  v16[1] = MEMORY[0x263F8C450];
  v16[3] = v16;
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  std::__function::__value_func<BOOL ()(char32_t)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v16);
  BOOL v5 = (v2 & 0x80u) != 0;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = v4;
  }
  if (!v5) {
    uint64_t v3 = a1;
  }
  uint64_t v14 = v3;
  uint64_t v15 = v2 << 32;
  if (v2)
  {
    int v6 = 0;
    do
    {
      int v7 = UTFString::codepoint_iterator<std::string>::operator*(&v14);
      uint64_t v8 = std::function<BOOL ()(char32_t)>::operator()(v17[3], v7);
      if (!v8) {
        break;
      }
      unsigned int v9 = *(unsigned __int8 *)(v3 + v6);
      unsigned int v10 = (v9 + 62);
      int v11 = v9 <= 0xEF ? 2 : 3;
      int v12 = v9 <= 0xDF ? v11 : v11 + 1;
      if (v10 >= 0x33) {
        int v12 = 1;
      }
      v6 += v12;
      LODWORD(v15) = v6;
    }
    while (v6 != v2);
  }
  else
  {
    uint64_t v8 = 1;
  }
  std::__function::__value_func<BOOL ()(char32_t)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<BOOL ()(char32_t)>::~__value_func[abi:ne180100](v16);
  return v8;
}

void sub_20D397C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(char32_t)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t UTFString::is_punct<std::string>(uint64_t a1)
{
  v17[4] = *MEMORY[0x263EF8340];
  v16[0] = &off_26C211470;
  v16[1] = MEMORY[0x263F8C470];
  v16[3] = v16;
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  std::__function::__value_func<BOOL ()(char32_t)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v16);
  BOOL v5 = (v2 & 0x80u) != 0;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = v4;
  }
  if (!v5) {
    uint64_t v3 = a1;
  }
  uint64_t v14 = v3;
  uint64_t v15 = v2 << 32;
  if (v2)
  {
    int v6 = 0;
    do
    {
      int v7 = UTFString::codepoint_iterator<std::string>::operator*(&v14);
      uint64_t v8 = std::function<BOOL ()(char32_t)>::operator()(v17[3], v7);
      if (!v8) {
        break;
      }
      unsigned int v9 = *(unsigned __int8 *)(v3 + v6);
      unsigned int v10 = (v9 + 62);
      int v11 = v9 <= 0xEF ? 2 : 3;
      int v12 = v9 <= 0xDF ? v11 : v11 + 1;
      if (v10 >= 0x33) {
        int v12 = 1;
      }
      v6 += v12;
      LODWORD(v15) = v6;
    }
    while (v6 != v2);
  }
  else
  {
    uint64_t v8 = 1;
  }
  std::__function::__value_func<BOOL ()(char32_t)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<BOOL ()(char32_t)>::~__value_func[abi:ne180100](v16);
  return v8;
}

void sub_20D397D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(char32_t)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void boost::algorithm::split<std::vector<std::string>,std::string&,boost::algorithm::detail::is_any_ofF<char>>(int a1, int a2, void *__src, int a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  size_t v5 = __src[2];
  size_t __n = v5;
  __srca[0] = 0;
  if (v5 < 0x11)
  {
    memcpy(__srca, __src, v5);
    size_t v30 = __n;
    v29[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v29, __srca, __n);
      size_t v9 = v30;
      __dst[0] = 0;
      if (v30 <= 0x10)
      {
        memcpy(__dst, v29, v30);
        int v10 = a4;
        size_t v24 = v9;
        v23[0] = 0;
        if (v9 < 0x11)
        {
          memcpy(v23, __dst, v9);
          int v25 = a4;
          size_t v18 = v24;
          v17[0] = 0;
          if (v24 < 0x11)
          {
            memcpy(v17, v23, v24);
            int v19 = a4;
            size_t v12 = v18;
            v11[0] = 0;
            if (v18 < 0x11)
            {
              memcpy(v11, v17, v18);
              int v13 = a4;
              size_t v15 = v12;
              v14[0] = 0;
              if (v12 < 0x11)
              {
                memcpy(v14, v11, v12);
                int v16 = a4;
                size_t v21 = v15;
                v20[0] = 0;
                if (v15 < 0x11)
                {
                  memcpy(v20, v14, v15);
                  int v22 = a4;
                  size_t v27 = v21;
                  v26[0] = 0;
                  if (v21 < 0x11)
                  {
                    memcpy(v26, v20, v21);
                    int v28 = a4;
                    size_t v30 = v27;
                    v29[0] = 0;
                    if (v27 < 0x11)
                    {
                      memcpy(v29, v26, v27);
                      int v31 = a4;
                      operator new();
                    }
                    operator new[]();
                  }
                  operator new[]();
                }
                operator new[]();
              }
              operator new[]();
            }
            operator new[]();
          }
          operator new[]();
        }
        operator new[]();
      }
      operator new[]();
    }
    operator new[]();
  }
  operator new[]();
}

void sub_20D3985F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MEMORY[0x2105595E0](v63, 0x1012C405C87E9CELL);
  uint64_t v72 = *(void *)(v70 - 184);
  if (v72) {
    MEMORY[0x2105595C0](v72, 0x1000C8077774924);
  }
  if (v69 >= 0x11 && STACK[0x2B8]) {
    MEMORY[0x2105595C0](STACK[0x2B8], 0x1000C8077774924);
  }
  if (v68 >= 0x11 && STACK[0x248]) {
    MEMORY[0x2105595C0](STACK[0x248], 0x1000C8077774924);
  }
  if (v67 >= 0x11 && a63) {
    MEMORY[0x2105595C0](a63, 0x1000C8077774924);
  }
  if (v66 >= 0x11 && a53) {
    MEMORY[0x2105595C0](a53, 0x1000C8077774924);
  }
  if (v65 >= 0x11 && STACK[0x200]) {
    MEMORY[0x2105595C0](STACK[0x200], 0x1000C8077774924);
  }
  if (v64 >= 0x11 && STACK[0x298]) {
    MEMORY[0x2105595C0](STACK[0x298], 0x1000C8077774924);
  }
  if (a11 >= 0x11 && a49) {
    MEMORY[0x2105595C0](a49, 0x1000C8077774924);
  }
  if (a12 >= 0x11)
  {
    if (a46) {
      MEMORY[0x2105595C0](a46, 0x1000C8077774924);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

char *boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>,boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::invoke(uint64_t a1, char *a2, char *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  size_t v5 = *(_DWORD **)a1;
  size_t v6 = *(void *)(*(void *)a1 + 16);
  unint64_t v10 = v6;
  v9[0] = 0;
  if (v6 >= 0x11) {
    operator new[]();
  }
  memcpy(v9, v5, v6);
  while (a2 != a3)
  {
    if (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v9, *a2)) {
      goto LABEL_8;
    }
    ++a2;
  }
  a2 = a3;
LABEL_8:
  if (v10 >= 0x11 && v9[0]) {
    MEMORY[0x2105595C0](v9[0], 0x1000C8077774924);
  }
  if (a2 == a3) {
    return a3;
  }
  if (!v5[6])
  {
    int v7 = a2;
    do
    {
      if (!boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v5, *v7)) {
        break;
      }
      ++v7;
    }
    while (v7 != a3);
  }
  return a2;
}

void PronSourceProxy::set_fallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  size_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D398AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PronSourceProxy::is_multiword_prefix(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t PronSourceProxy::pronounce_multi(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t PronSourceProxy::pronounce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t PronSourceProxy::is_word(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

void PronSourceProxy::~PronSourceProxy(PronSourceProxy *this)
{
}

uint64_t PronSourceList::is_multiword_prefix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v7 = v3 + 16;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 - 16) + 40))(*(void *)(v7 - 16), a2, a3);
    if (result) {
      break;
    }
    BOOL v9 = v7 == v4;
    v7 += 16;
  }
  while (!v9);
  return result;
}

void *PronSourceList::pronounce_multi@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 8);
  for (std::vector<std::string>::pointer i = *(void **)(a1 + 16); v4 != i; v4 += 2)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 32))(*v4, a2);
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8)) {
        return result;
      }
      operator delete(*(void **)a3);
    }
    else if (*(unsigned char *)(a3 + 23))
    {
      return result;
    }
  }
  return std::string::basic_string[abi:ne180100]<0>((void *)a3, &byte_20D5A22AE);
}

void *PronSourceList::pronounce@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = *(void **)(a1 + 8);
  for (std::vector<std::string>::pointer i = *(void **)(a1 + 16); v5 != i; v5 += 2)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 24))(*v5, a2, a3);
    if (*(char *)(a4 + 23) < 0)
    {
      if (*(void *)(a4 + 8)) {
        return result;
      }
      operator delete(*(void **)a4);
    }
    else if (*(unsigned char *)(a4 + 23))
    {
      return result;
    }
  }
  return std::string::basic_string[abi:ne180100]<0>((void *)a4, &byte_20D5A22AE);
}

uint64_t PronSourceList::is_word(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v5 = v2 + 16;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 - 16) + 16))(*(void *)(v5 - 16), a2);
    if (result) {
      break;
    }
    BOOL v7 = v5 == v3;
    v5 += 16;
  }
  while (!v7);
  return result;
}

void PronSourceList::~PronSourceList(PronSourceList *this)
{
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x2105595E0);
}

{
  void **v1;

  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t PronSource::is_word()
{
  return 0;
}

void *PronSource::pronounce_multi@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
}

uint64_t PronSource::is_multiword_prefix()
{
  return 0;
}

void std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(a1[1]);
    uint64_t v2 = a1[5];
    a1[5] = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    operator delete(a1);
  }
}

void non-virtual thunk to'PronounceImpl::~PronounceImpl(PronounceImpl *this)
{
  PronounceImpl::~PronounceImpl((PronounceImpl *)((char *)this - 104));
  JUMPOUT(0x2105595E0);
}

{
  PronounceImpl::~PronounceImpl((PronounceImpl *)((char *)this - 104));
}

void PronounceImpl::~PronounceImpl(PronounceImpl *this)
{
  *(void *)this = off_26C200638;
  *((void *)this + 13) = &off_26C200688;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  size_t v6 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  BOOL v7 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  FrontendModule::~FrontendModule((void **)this);
}

{
  uint64_t vars8;

  PronounceImpl::~PronounceImpl(this);
  JUMPOUT(0x2105595E0);
}

void non-virtual thunk to'PronounceImpl::add_pls_dictionary(uint64_t a1, uint64_t *a2)
{
}

void PronounceImpl::add_pls_dictionary(void *a1, uint64_t *a2)
{
  uint64_t v5 = a1[20];
  uint64_t v4 = (std::__shared_weak_count *)a1[21];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v6 = (std::__shared_weak_count *)operator new(0xA0uLL);
  BOOL v7 = v6;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_26C216590;
  uint64_t v8 = (PronounceSqliteDict *)&v6[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v9 = 0uLL;
    *(_OWORD *)&v6[5].__shared_owners_ = 0u;
    v6[6].std::__shared_count = 0u;
    v6[4].std::__shared_count = 0u;
    *(_OWORD *)&v6[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v6[1].__shared_owners_ = 0u;
    v6[2].std::__shared_count = 0u;
    *(_OWORD *)&v6[2].__shared_weak_owners_ = 0u;
    v6[3].__shared_owners_ = 0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)off_26C201B90;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v9 = 0uLL;
    *(_OWORD *)&v6[5].__shared_owners_ = 0u;
    v6[6].std::__shared_count = 0u;
    v6[4].std::__shared_count = 0u;
    *(_OWORD *)&v6[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v6[1].__shared_owners_ = 0u;
    v6[2].std::__shared_count = 0u;
    *(_OWORD *)&v6[2].__shared_weak_owners_ = 0u;
    v6[3].__shared_owners_ = 0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)off_26C201B90;
  }
  long long v49 = v9;
  long long v50 = v9;
  long long v51 = v9;
  long long v52 = v9;
  long long v53 = v9;
  long long v54 = v9;
  uint64_t v46 = &off_26C1FFE28;
  uint64_t v55 = v5;
  int v56 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = sqlite3_open_v2("PLSDict", &v47, 262278, 0);
  BuildPLSDict::report_error((BuildPLSDict *)&v46, v10, "open compiled PLS dictionary");
  uint64_t v11 = sqlite3_exec(v47, "CREATE TABLE Metadata (name TEXT, value TEXT);", 0, 0, 0);
  BuildPLSDict::report_error((BuildPLSDict *)&v46, v11, "create metadata table");
  uint64_t v12 = sqlite3_exec(v47, "INSERT INTO Metadata VALUES('version','2.0');", 0, 0, 0);
  BuildPLSDict::report_error((BuildPLSDict *)&v46, v12, "set version");
  uint64_t v13 = sqlite3_exec(v47, "CREATE TABLE Dictionary (spelling TEXT, pos TEXT, pronunciation TEXT);", 0, 0, 0);
  BuildPLSDict::report_error((BuildPLSDict *)&v46, v13, "create dictionary");
  uint64_t v14 = sqlite3_prepare_v2(v47, "INSERT INTO Dictionary VALUES(?, ?, ?);", -1, &v48, 0);
  BuildPLSDict::report_error((BuildPLSDict *)&v46, v14, "compile entry creation query");
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v37 = &v46;
  memset(&v38.isStandalone, 0, 40);
  v38.setDocumentLocator = 0;
  v38.startElement = 0;
  v38.endElement = 0;
  *(_OWORD *)&v38.fatalError = 0u;
  *(_OWORD *)&v38.initialized = 0u;
  v38.serror = 0;
  *(_OWORD *)uint64_t v41 = 0u;
  *(_OWORD *)uint64_t v42 = 0u;
  long long v43 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v45 = 0;
  v38.attributeDecl = (attributeDeclSAXFunc)SSML_attribute_decl;
  v38.cdataBlocuint64_t k = (cdataBlockSAXFunc)SSML_cdata_block;
  v38.comment = (commentSAXFunc)SSML_comment;
  v38.elementDecl = (elementDeclSAXFunc)SSML_element_decl;
  v38.entityDecl = (entityDeclSAXFunc)SSML_entity_decl;
  v38.unparsedEntityDecl = (unparsedEntityDeclSAXFunc)SSML_unparsed_entity_decl;
  v38.externalSubset = (externalSubsetSAXFunc)SSML_subset;
  v38.internalSubset = (internalSubsetSAXFunc)SSML_subset;
  v38.notationDecl = (notationDeclSAXFunc)SSML_subset;
  v38.processingInstruction = (processingInstructionSAXFunc)SSML_processing_instruction;
  v38.reference = (referenceSAXFunc)SSML_reference;
  v38.startDocument = (startDocumentSAXFunc)SSML_start_document;
  v38.startElementNs = (startElementNsSAX2Func)SSML_start_elementNs;
  v38.endElementNs = (endElementNsSAX2Func)SSML_end_elementNs;
  v38.characters = (charactersSAXFunc)SSML_characters;
  v38.ignorableWhitespace = (ignorableWhitespaceSAXFunc)SSML_characters;
  v38.endDocument = (endDocumentSAXFunc)SSML_end_document;
  v38.error = (errorSAXFunc)SSML_error;
  v38.warning = (warningSAXFunc)SSML_warning;
  long long v39 = xmmword_20D6B4A60;
  v38.initialized = -554844497;
  int v40 = -1;
  uint64_t v15 = *((unsigned __int8 *)a2 + 23);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = a2[1];
  }
  if (v15)
  {
    int v16 = xmlCreatePushParserCtxt(&v38, &v37, 0, 0, 0);
    xmlCtxtUseOptions(v16, 2051);
    int v17 = *((unsigned __int8 *)a2 + 23);
    BOOL v18 = (v17 & 0x80u) != 0;
    if ((v17 & 0x80u) != 0) {
      int v17 = *((_DWORD *)a2 + 2);
    }
    if (v17 >= 512) {
      int v19 = 512;
    }
    else {
      int v19 = v17;
    }
    if (v19)
    {
      uint64_t v20 = 0;
      do
      {
        if (v18) {
          size_t v21 = (const char *)*a2;
        }
        else {
          size_t v21 = (const char *)a2;
        }
        xmlParseChunk(v16, &v21[v20], v19, 0);
        v20 += v19;
        int v22 = *((unsigned __int8 *)a2 + 23);
        BOOL v18 = (v22 & 0x80u) != 0;
        if ((v22 & 0x80u) != 0) {
          int v22 = *((_DWORD *)a2 + 2);
        }
        int v23 = v22 - v20;
        if (v23 >= 512) {
          int v19 = 512;
        }
        else {
          int v19 = v23;
        }
      }
      while (v19);
    }
    xmlParseChunk(v16, 0, 0, 1);
    xmlFreeParserCtxt(v16);
  }
  PronounceSqliteDict::setup(v8, v47);
  if (SHIBYTE(v45) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(v42[1]);
  }
  if (SHIBYTE(v42[0]) < 0) {
    operator delete(v41[0]);
  }
  BuildPLSDict::~BuildPLSDict((BuildPLSDict *)&v46);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v24 = a1[16];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v25 = *(PronounceSqliteDict ***)(v24 + 16);
  unint64_t v26 = *(void *)(v24 + 24);
  if ((unint64_t)v25 >= v26)
  {
    uint64_t v28 = *(void *)(v24 + 8);
    uint64_t v29 = ((uint64_t)v25 - v28) >> 4;
    unint64_t v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = v26 - v28;
    if (v31 >> 3 > v30) {
      unint64_t v30 = v31 >> 3;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    v38.hasExternalSubset = (hasExternalSubsetSAXFunc)(v24 + 24);
    uint64_t v33 = (uint64_t (***)())std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v32);
    *(void *)&long long v34 = v8;
    *((void *)&v34 + 1) = v7;
    double v35 = &v33[2 * v29];
    char v37 = v33;
    v38.internalSubset = (internalSubsetSAXFunc)v35;
    v38.hasInternalSubset = (hasInternalSubsetSAXFunc)&v33[2 * v36];
    *(_OWORD *)double v35 = v34;
    v38.isStandalone = (isStandaloneSAXFunc)(v35 + 2);
    std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer((void *)(v24 + 8), &v37);
    size_t v27 = *(void **)(v24 + 16);
    std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)&v37);
  }
  else
  {
    float *v25 = v8;
    v25[1] = (PronounceSqliteDict *)v7;
    size_t v27 = v25 + 2;
    *(void *)(v24 + 16) = v25 + 2;
  }
  *(void *)(v24 + 16) = v27;
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_20D399624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *((_OWORD *)v2 - 1);
    v2 -= 2;
    *(_OWORD *)(v4 - 16) = v5;
    v4 -= 16;
    void *v2 = 0;
    v2[1] = 0;
  }
  a2[1] = v4;
  size_t v6 = (void *)*result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__shared_ptr_emplace<PronouncePLSDict>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PronouncePLSDict>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PronouncePLSDict>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void PronounceImpl::generate_tokens(PronounceImpl *this)
{
  if (!*((unsigned char *)this + 8))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v52);
    if ((void)v52)
    {
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
      uint64_t v2 = (void **)v52;
      uint64_t v4 = v2 + 1;
      if (v2 + 1 != v3)
      {
        long long v5 = (char *)v3[5];
        int v6 = *((_DWORD *)v5 + 2);
        if (v6 == 1885892462)
        {
          if (*((void *)this + 20))
          {
            if (v4 != v13)
            {
              uint64_t v14 = (char *)v13[5];
              *(_OWORD *)int v56 = 0u;
              long long v57 = 0u;
              long long v55 = 0u;
              std::string::operator=((std::string *)&v56[1], (const std::string *)(v5 + 32));
              long long v58 = *((_OWORD *)v5 + 1);
              if (v14[31] < 0)
              {
                std::string::__init_copy_ctor_external(&v62, *((const std::string::value_type **)v14 + 1), *((void *)v14 + 2));
              }
              else
              {
                long long v15 = *(_OWORD *)(v14 + 8);
                v62.__r_.__value_.__r.__words[2] = *((void *)v14 + 3);
                *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v15;
              }
              uint64_t v20 = *((void *)this + 26);
              (*(void (**)(std::string *__return_ptr))(**((void **)this + 20) + 24))(&__p);
              (*(void (**)(std::string **__return_ptr))(**(void **)v20 + 16))(&v59);
              std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v55, (uint64_t *)v59, v60, 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - (char *)v59) >> 3));
              v53[0] = (void **)&v59;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](v53);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              Agglomerate::set<TokenPronunciationItem>(v52, (uint64_t)&v55);
              if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v62.__r_.__value_.__l.__data_);
              }
              TokenPronunciationItem::~TokenPronunciationItem((void **)&v55);
            }
          }
        }
        else if (v6 == 1952807028)
        {
          uint64_t v7 = (std::__shared_weak_count *)*((void *)&v52 + 1);
          *(void *)&long long v51 = v2;
          *((void *)&v51 + 1) = *((void *)&v52 + 1);
          if (*((void *)&v52 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          if (v4 == v8) {
            goto LABEL_65;
          }
          long long v9 = (char *)v8[5];
          uint64_t v10 = v9 + 8;
          int v11 = v9[31];
          if ((v9[31] & 0x80000000) == 0)
          {
            uint64_t v12 = (int *)(v9 + 8);
            switch(v9[31])
            {
              case 5:
                goto LABEL_52;
              case 7:
                goto LABEL_18;
              case 9:
                goto LABEL_61;
              case 12:
                goto LABEL_43;
              default:
                goto LABEL_65;
            }
          }
          uint64_t v16 = *((void *)v9 + 2);
          if (v16 != 7)
          {
LABEL_39:
            if (v16 == 5)
            {
              uint64_t v10 = *(_DWORD **)v10;
              goto LABEL_52;
            }
            if (v16 == 9)
            {
              uint64_t v10 = *(_DWORD **)v10;
LABEL_61:
              uint64_t v31 = *(void *)v10;
              int v32 = *((unsigned __int8 *)v10 + 8);
              if (v31 != 0x554F5F4C4C455053 || v32 != 84) {
                goto LABEL_65;
              }
              if (v7) {
                atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v4 == v44) {
                uint64_t v45 = 0;
              }
              else {
                uint64_t v45 = (uint64_t)v44[5] + 8;
              }
              *(_OWORD *)int v56 = 0u;
              long long v57 = 0u;
              long long v55 = 0u;
              std::string::operator=((std::string *)&v56[1], (const std::string *)(v45 + 24));
              if (SHIBYTE(v57) < 0)
              {
                uint64_t v48 = (void **)v56[1];
                uint64_t v47 = v57 - 1;
                *(void *)&long long v57 = v57 - 1;
              }
              else
              {
                uint64_t v47 = HIBYTE(v57) - 1;
                HIBYTE(v57) = v47 & 0x7F;
                uint64_t v48 = &v56[1];
              }
              *((unsigned char *)v48 + v47) = 0;
              uint64_t v49 = *((void *)this + 26);
              uint64_t v50 = *((void *)this + 22);
              std::string::basic_string[abi:ne180100]<0>(&__p, "NN");
              (*(void (**)(std::string **__return_ptr, uint64_t, void **, std::string *))(*(void *)v50 + 24))(&v59, v50, &v56[1], &__p);
              (*(void (**)(std::string *__return_ptr))(**(void **)v49 + 16))(&v62);
              std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v55, (uint64_t *)v62.__r_.__value_.__l.__data_, (uint64_t *)v62.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v62.__r_.__value_.__l.__size_ - v62.__r_.__value_.__r.__words[0]) >> 3));
              v53[0] = (void **)&v62;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](v53);
              if (v61 < 0) {
                operator delete(v59);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              long long v58 = *(_OWORD *)(v45 + 8);
              Agglomerate::set<TokenPronunciationItem>((uint64_t)v2, (uint64_t)&v55);
              if (SHIBYTE(v57) < 0) {
                operator delete(v56[1]);
              }
              v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
LABEL_136:
              if (v7) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v7);
              }
              std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v51);
              goto LABEL_91;
            }
            if (v16 != 12) {
              goto LABEL_65;
            }
            uint64_t v10 = *(_DWORD **)v10;
LABEL_43:
            uint64_t v23 = *(void *)v10;
            int v24 = v10[2];
            if (v23 != 0x4C505F4C4C455053 || v24 != 1279349333) {
              goto LABEL_65;
            }
            *(void *)&long long v55 = v2;
            *((void *)&v55 + 1) = v7;
            if (v7) {
              atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            }
LABEL_50:
            PronounceImpl::handle_spelled_word((uint64_t)this, (uint64_t *)&v55);
            goto LABEL_136;
          }
          uint64_t v12 = *(int **)v10;
LABEL_18:
          int v17 = *v12;
          int v18 = *(int *)((char *)v12 + 3);
          if (v17 != 1414287957 || v18 != 1415071060)
          {
LABEL_22:
            if ((v11 & 0x80) == 0)
            {
              if (v11 != 5)
              {
LABEL_65:
                if (v4 == v34) {
                  uint64_t v35 = 0;
                }
                else {
                  uint64_t v35 = (uint64_t)v34[5] + 8;
                }
                if (v4 == v36)
                {
                  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
                }
                else
                {
                  char v37 = (char *)v36[5];
                  if (v37[31] < 0)
                  {
                    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v37 + 1), *((void *)v37 + 2));
                  }
                  else
                  {
                    long long v38 = *(_OWORD *)(v37 + 8);
                    __p.__r_.__value_.__r.__words[2] = *((void *)v37 + 3);
                    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
                  }
                }
                *(_OWORD *)int v56 = 0u;
                long long v57 = 0u;
                long long v55 = 0u;
                std::string::operator=((std::string *)&v56[1], (const std::string *)(v5 + 32));
                long long v58 = *((_OWORD *)v5 + 1);
                v53[0] = v2;
                v53[1] = (void **)&v7->__vftable;
                if (v7) {
                  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                int64_t v39 = PronounceImpl::handle_multiword((uint64_t)this, (uint64_t *)v53, (uint64_t)&v55);
                if (v7) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
                }
                if (!v39)
                {
                  if (v35
                    && (*(char *)(v35 + 79) < 0 ? (uint64_t v43 = *(void *)(v35 + 64)) : (uint64_t v43 = *(unsigned __int8 *)(v35 + 79)),
                        v43))
                  {
                    (*(void (**)(std::string *__return_ptr))(***((void ***)this + 26) + 16))(&v62);
                    std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v55, (uint64_t *)v62.__r_.__value_.__l.__data_, (uint64_t *)v62.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v62.__r_.__value_.__l.__size_ - v62.__r_.__value_.__r.__words[0]) >> 3));
                    int v59 = &v62;
                    std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
                    uint64_t v2 = (void **)v51;
                  }
                  else
                  {
                    if (v7) {
                      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    (*(void (**)(std::string *__return_ptr))(**((void **)this + 18) + 24))(&v62);
                    (*(void (**)(std::string **__return_ptr))(***((void ***)this + 26) + 16))(&v59);
                    std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v55, (uint64_t *)v59, v60, 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - (char *)v59) >> 3));
                    uint64_t v63 = &v59;
                    std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
                    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v62.__r_.__value_.__l.__data_);
                    }
                    if (v7) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
                    }
                  }
                }
                Agglomerate::set<TokenPronunciationItem>((uint64_t)v2, (uint64_t)&v55);
                if (SHIBYTE(v57) < 0) {
                  operator delete(v56[1]);
                }
                v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
                std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
LABEL_82:
                std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v51);
                while (v39)
                {
                  --v39;
                  do
                  {
                    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v55);
                    std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v55);
                    (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
                    uint64_t v40 = v55;
                    if ((void *)(v40 + 8) == v41) {
                      uint64_t v42 = 0;
                    }
                    else {
                      uint64_t v42 = (_DWORD *)(v41[5] + 8);
                    }
                    if (*((void *)&v55 + 1)) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
                    }
                  }
                  while (*v42 != 1952807028);
                }
LABEL_91:
                if (*((void *)&v51 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v51 + 1));
                }
                goto LABEL_32;
              }
LABEL_52:
              int v26 = *v10;
              int v27 = *((unsigned __int8 *)v10 + 4);
              if (v26 != 1279610963 || v27 != 76) {
                goto LABEL_65;
              }
              *(_OWORD *)int v56 = 0u;
              long long v57 = 0u;
              uint64_t v29 = &v56[1];
              long long v55 = 0u;
              std::string::operator=((std::string *)&v56[1], (const std::string *)(v5 + 32));
              if (SHIBYTE(v57) < 0)
              {
                uint64_t v29 = (void **)v56[1];
                if (*((unsigned char *)v56[1] + v57 - 1) != 95) {
                  goto LABEL_118;
                }
                uint64_t v30 = v57 - 1;
                *(void *)&long long v57 = v57 - 1;
              }
              else
              {
                if (*((unsigned char *)v56 + HIBYTE(v57) + 7) != 95) {
                  goto LABEL_118;
                }
                uint64_t v30 = HIBYTE(v57) - 1;
                HIBYTE(v57) = v30 & 0x7F;
              }
              *((unsigned char *)v29 + v30) = 0;
LABEL_118:
              long long v58 = *((_OWORD *)v5 + 1);
              v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
              v62.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
              if (v7) {
                atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int64_t v46 = PronounceImpl::handle_multiword((uint64_t)this, (uint64_t *)&v62, (uint64_t)&v55);
              int64_t v39 = v46;
              if (v7)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v7);
                if (!v39)
                {
                  int v59 = (std::string *)v2;
                  unsigned __int16 v60 = (uint64_t *)v7;
                  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
                  goto LABEL_140;
                }
              }
              else if (!v46)
              {
                int v59 = (std::string *)v2;
                unsigned __int16 v60 = 0;
LABEL_140:
                PronounceImpl::handle_spelled_word((uint64_t)this, (uint64_t *)&v59);
                if (v7) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
                }
                goto LABEL_142;
              }
              Agglomerate::set<TokenPronunciationItem>((uint64_t)v2, (uint64_t)&v55);
LABEL_142:
              if (SHIBYTE(v57) < 0) {
                operator delete(v56[1]);
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_82;
            }
            uint64_t v16 = *((void *)v9 + 2);
            goto LABEL_39;
          }
          size_t v21 = (uint64_t *)(v5 + 32);
          int v22 = v5[55];
          if (v22 < 0)
          {
            if (*((void *)v5 + 5) != 2) {
              goto LABEL_22;
            }
            size_t v21 = (uint64_t *)*v21;
          }
          else if (v22 != 2)
          {
            goto LABEL_22;
          }
          if (*((unsigned char *)v21 + 1) == 95)
          {
            *(void *)&long long v55 = v2;
            *((void *)&v55 + 1) = v7;
            if (v7) {
              atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            goto LABEL_50;
          }
          goto LABEL_22;
        }
      }
      std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v52);
    }
    else
    {
      *((unsigned char *)this + 8) = 1;
    }
LABEL_32:
    if (*((void *)&v52 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
    }
  }
}

void sub_20D39A244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void PronounceImpl::handle_spelled_word(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if ((void *)(v4 + 8) == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5[5] + 8;
  }
  *(_OWORD *)int v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  std::string::operator=((std::string *)&v18[1], (const std::string *)(v6 + 24));
  if (SHIBYTE(v19) < 0)
  {
    uint64_t v7 = v19 - 1;
    if ((unint64_t)v19 > 1)
    {
      uint64_t v8 = (void **)v18[1];
      if (*((unsigned char *)v18[1] + v19 - 1) == 95)
      {
        *(void *)&long long v19 = v19 - 1;
        goto LABEL_11;
      }
    }
  }
  else if (HIBYTE(v19) > 1u && *((unsigned char *)v18 + HIBYTE(v19) + 7) == 95)
  {
    uint64_t v7 = HIBYTE(v19) - 1;
    --HIBYTE(v19);
    uint64_t v8 = &v18[1];
LABEL_11:
    *((unsigned char *)v8 + v7) = 0;
  }
  uint64_t v9 = *(void *)(a1 + 208);
  uint64_t v10 = *(void *)(a1 + 192);
  std::string::basic_string[abi:ne180100]<0>(v11, "NN");
  (*(void (**)(void **__return_ptr, uint64_t, void **, void **))(*(void *)v10 + 24))(&__p, v10, &v18[1], v11);
  (*(void (**)(void ***__return_ptr))(**(void **)v9 + 16))(&v15);
  std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v17, (uint64_t *)v15, v16, 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 3));
  size_t v21 = &v15;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  long long v20 = *(_OWORD *)(v6 + 8);
  Agglomerate::set<TokenPronunciationItem>(*a2, (uint64_t)&v17);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  long long v15 = (void **)&v17;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void sub_20D39A610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25)
{
  *(void *)(v25 - 56) = &a22;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 56));
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  TokenPronunciationItem::~TokenPronunciationItem(&a25);
  _Unwind_Resume(a1);
}

int64_t PronounceImpl::handle_multiword(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v151[2] = *MEMORY[0x263EF8340];
  memset(&v148, 0, sizeof(v148));
  std::string::value_type v145 = 0;
  int v146 = 0;
  unint64_t v147 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  unint64_t v144 = 0;
  uint64_t v6 = (std::string *)(a3 + 24);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&v141.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v141.__r_.__value_.__r.__words[2] = *(void *)(a3 + 40);
  }
  memset(&v140, 0, sizeof(v140));
  memset(&v139, 0, sizeof(v139));
  std::string::size_type size = HIBYTE(v141.__r_.__value_.__r.__words[2]);
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v141.__r_.__value_.__l.__size_;
  }
  memset(&v138, 0, sizeof(v138));
  std::string __p = 0;
  long long v137 = 0uLL;
  if (size == 1)
  {
    uint64_t v8 = &v141;
    if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v141.__r_.__value_.__r.__words[0];
    }
    v140.__r_.__value_.__r.__words[0] = v8->__r_.__value_.__s.__data_[0] | 0x2E00;
    v140.__r_.__value_.__l.__size_ = 0;
    *(std::string::size_type *)((char *)&v140.__r_.__value_.__r.__words[1] + 7) = 0;
    *((unsigned char *)&v140.__r_.__value_.__s + 23) = 2;
  }
  uint64_t v9 = *a2;
  if ((void *)(v9 + 8) != v10)
  {
    std::string::operator=(&v139, (const std::string *)(v10[5] + 32));
    uint64_t v9 = *a2;
  }
  v129 = v6;
  long long v130 = (std::string *)a3;
  if ((void *)(v9 + 8) != v11) {
    std::string::operator=(&v138, (const std::string *)(v11[5] + 64));
  }
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t v13 = v143;
    if ((unint64_t)v143 >= v144)
    {
      long long v15 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v142, (long long *)&v139);
    }
    else
    {
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v143, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v14 = *(_OWORD *)&v139.__r_.__value_.__l.__data_;
        v143->__r_.__value_.__r.__words[2] = v139.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      long long v15 = v13 + 1;
    }
    uint64_t v143 = v15;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 16))(&v134);
    uint64_t v16 = v134;
    if (!v134
    {
LABEL_28:
      int v21 = 2;
      goto LABEL_29;
    }
    uint64_t v18 = v17[5];
    int v19 = *(_DWORD *)(v18 + 8);
    if (v19 == 1952807028)
    {
      memset(&v133, 0, sizeof(v133));
      if ((void *)(v16 + 8) == v22)
      {
        std::string::size_type v25 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v25 = v138.__r_.__value_.__l.__size_;
        }
        if (v25) {
          goto LABEL_49;
        }
      }
      else
      {
        std::string::operator=(&v133, (const std::string *)(v22[5] + 64));
        std::string::size_type v23 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v23 = v138.__r_.__value_.__l.__size_;
        }
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          BOOL v24 = v133.__r_.__value_.__l.__size_ == 0;
        }
        else {
          BOOL v24 = HIBYTE(v133.__r_.__value_.__r.__words[2]) == 0;
        }
        char v26 = v24;
        if (v23)
        {
          if ((v26 & 1) == 0)
          {
            int v21 = 1;
            goto LABEL_258;
          }
LABEL_49:
          if (v148.__begin_ == v148.__end_)
          {
            std::operator+<char>();
            int v27 = std::string::append(&v131, "〉");
            long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
            v132.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v28;
            v27->__r_.__value_.__l.__size_ = 0;
            v27->__r_.__value_.__r.__words[2] = 0;
            v27->__r_.__value_.__r.__words[0] = 0;
            uint64_t v29 = std::string::append(&v132, "_");
            long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            v150.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v30;
            v29->__r_.__value_.__l.__size_ = 0;
            v29->__r_.__value_.__r.__words[2] = 0;
            v29->__r_.__value_.__r.__words[0] = 0;
            int v31 = *(char *)(v18 + 55);
            if (v31 >= 0) {
              int v32 = (const std::string::value_type *)(v18 + 32);
            }
            else {
              int v32 = *(const std::string::value_type **)(v18 + 32);
            }
            if (v31 >= 0) {
              std::string::size_type v33 = *(unsigned __int8 *)(v18 + 55);
            }
            else {
              std::string::size_type v33 = *(void *)(v18 + 40);
            }
            long long v34 = std::string::append(&v150, v32, v33);
            std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
            v151[0] = v34->__r_.__value_.__l.__size_;
            *(void *)((char *)v151 + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
            char v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
            v34->__r_.__value_.__l.__size_ = 0;
            v34->__r_.__value_.__r.__words[2] = 0;
            v34->__r_.__value_.__r.__words[0] = 0;
            std::vector<std::string>::pointer end = v148.__end_;
            if (v148.__end_ >= v148.__end_cap_.__value_)
            {
              unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v148.__end_ - (char *)v148.__begin_) >> 3);
              unint64_t v39 = v38 + 1;
              if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v148.__end_cap_.__value_ - (char *)v148.__begin_) >> 3) > v39) {
                unint64_t v39 = 0x5555555555555556 * (((char *)v148.__end_cap_.__value_ - (char *)v148.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v148.__end_cap_.__value_ - (char *)v148.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v40 = v39;
              }
              v149.__end_cap_.__value_ = (std::allocator<std::string> *)&v148.__end_cap_;
              if (!v40)
              {
                uint64_t v74 = 0;
LABEL_185:
                unint64_t v85 = v74 + v38;
                v149.__first_ = v74;
                v149.__begin_ = v85;
                v149.__end_cap_.__value_ = &v74[v40];
                std::string::size_type v86 = v151[0];
                v85->__r_.__value_.__r.__words[0] = v35;
                v85->__r_.__value_.__l.__size_ = v86;
                *(std::string::size_type *)((char *)&v85->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v151 + 7);
                *((unsigned char *)&v85->__r_.__value_.__s + 23) = v36;
                v151[0] = 0;
                *(void *)((char *)v151 + 7) = 0;
                v149.__end_ = v85 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v148, &v149);
                unsigned __int16 v60 = v148.__end_;
                std::__split_buffer<std::string>::~__split_buffer(&v149);
                goto LABEL_186;
              }
LABEL_152:
              uint64_t v74 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v148.__end_cap_, v40);
              goto LABEL_185;
            }
            goto LABEL_101;
          }
          goto LABEL_230;
        }
        if ((v26 & 1) == 0)
        {
          if (v148.__begin_ == v148.__end_)
          {
            if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v49 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v49 = v141.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v131, v49 + 1);
            if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v50 = &v131;
            }
            else {
              uint64_t v50 = (std::string *)v131.__r_.__value_.__r.__words[0];
            }
            if (v49)
            {
              if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v51 = &v141;
              }
              else {
                long long v51 = (std::string *)v141.__r_.__value_.__r.__words[0];
              }
              memmove(v50, v51, v49);
            }
            *(_WORD *)((char *)&v50->__r_.__value_.__l.__data_ + v49) = 95;
            long long v52 = std::string::append(&v131, "〈");
            long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
            v132.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v53;
            v52->__r_.__value_.__l.__size_ = 0;
            v52->__r_.__value_.__r.__words[2] = 0;
            v52->__r_.__value_.__r.__words[0] = 0;
            if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v54 = &v133;
            }
            else {
              long long v54 = (std::string *)v133.__r_.__value_.__r.__words[0];
            }
            if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v55 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v55 = v133.__r_.__value_.__l.__size_;
            }
            int v56 = std::string::append(&v132, (const std::string::value_type *)v54, v55);
            long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            v150.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            long long v58 = std::string::append(&v150, "〉");
            std::string::size_type v35 = v58->__r_.__value_.__r.__words[0];
            v151[0] = v58->__r_.__value_.__l.__size_;
            *(void *)((char *)v151 + 7) = *(std::string::size_type *)((char *)&v58->__r_.__value_.__r.__words[1] + 7);
            char v36 = HIBYTE(v58->__r_.__value_.__r.__words[2]);
            v58->__r_.__value_.__l.__size_ = 0;
            v58->__r_.__value_.__r.__words[2] = 0;
            v58->__r_.__value_.__r.__words[0] = 0;
            std::vector<std::string>::pointer end = v148.__end_;
            if (v148.__end_ >= v148.__end_cap_.__value_)
            {
              unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v148.__end_ - (char *)v148.__begin_) >> 3);
              unint64_t v75 = v38 + 1;
              if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v148.__end_cap_.__value_ - (char *)v148.__begin_) >> 3) > v75) {
                unint64_t v75 = 0x5555555555555556 * (((char *)v148.__end_cap_.__value_ - (char *)v148.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v148.__end_cap_.__value_ - (char *)v148.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v40 = v75;
              }
              v149.__end_cap_.__value_ = (std::allocator<std::string> *)&v148.__end_cap_;
              if (!v40)
              {
                uint64_t v74 = 0;
                goto LABEL_185;
              }
              goto LABEL_152;
            }
LABEL_101:
            std::string::size_type v59 = v151[0];
            end->__r_.__value_.__r.__words[0] = v35;
            end->__r_.__value_.__l.__size_ = v59;
            *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v151 + 7);
            *((unsigned char *)&end->__r_.__value_.__s + 23) = v36;
            unsigned __int16 v60 = end + 1;
LABEL_186:
            v148.__end_ = v60;
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v150.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v132.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v131.__r_.__value_.__l.__data_);
            }
            if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v87 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v87 = v141.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v149, v87 + 1);
            if (SHIBYTE(v149.__end_) >= 0) {
              first = (char *)&v149;
            }
            else {
              first = (char *)v149.__first_;
            }
            if (v87)
            {
              if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v89 = &v141;
              }
              else {
                uint64_t v89 = (std::string *)v141.__r_.__value_.__r.__words[0];
              }
              memmove(first, v89, v87);
            }
            *(_WORD *)&first[v87] = 95;
            int v90 = *(char *)(v18 + 55);
            if (v90 >= 0) {
              uint64_t v91 = (const std::string::value_type *)(v18 + 32);
            }
            else {
              uint64_t v91 = *(const std::string::value_type **)(v18 + 32);
            }
            if (v90 >= 0) {
              std::string::size_type v92 = *(unsigned __int8 *)(v18 + 55);
            }
            else {
              std::string::size_type v92 = *(void *)(v18 + 40);
            }
            unint64_t v93 = std::string::append((std::string *)&v149, v91, v92);
            std::string v94 = (void *)v93->__r_.__value_.__r.__words[0];
            v150.__r_.__value_.__r.__words[0] = v93->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v150.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v93->__r_.__value_.__r.__words[1] + 7);
            char v95 = HIBYTE(v93->__r_.__value_.__r.__words[2]);
            v93->__r_.__value_.__l.__size_ = 0;
            v93->__r_.__value_.__r.__words[2] = 0;
            v93->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v137) < 0) {
              operator delete(__p);
            }
            std::string __p = v94;
            *(void *)&long long v137 = v150.__r_.__value_.__r.__words[0];
            *(void *)((char *)&v137 + 7) = *(std::string::size_type *)((char *)v150.__r_.__value_.__r.__words + 7);
            HIBYTE(v137) = v95;
            if (SHIBYTE(v149.__end_) < 0) {
              operator delete(v149.__first_);
            }
            uint64_t v96 = *(void *)(v18 + 24) + *(void *)(v18 + 16);
            float v97 = v146;
            if (v146 >= v147)
            {
              float v99 = v145;
              uint64_t v100 = (v146 - v145) >> 3;
              unint64_t v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v102 = v147 - v145;
              if ((v147 - v145) >> 2 > v101) {
                unint64_t v101 = v102 >> 2;
              }
              if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v103 = v101;
              }
              if (v103)
              {
                uint64_t v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v147, v103);
                float v99 = v145;
                float v97 = v146;
              }
              else
              {
                uint64_t v104 = 0;
              }
              unint64_t v105 = &v104[8 * v100];
              *(void *)unint64_t v105 = v96;
              char v98 = v105 + 8;
              while (v97 != v99)
              {
                uint64_t v106 = *((void *)v97 - 1);
                v97 -= 8;
                *((void *)v105 - 1) = v106;
                v105 -= 8;
              }
              std::string::value_type v145 = v105;
              int v146 = v98;
              unint64_t v147 = &v104[8 * v103];
              if (v99) {
                operator delete(v99);
              }
            }
            else
            {
              *(void *)int v146 = v96;
              char v98 = v97 + 8;
            }
            int v146 = v98;
          }
LABEL_230:
          int v21 = 2;
LABEL_258:
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
          goto LABEL_29;
        }
      }
      std::string::size_type v41 = v139.__r_.__value_.__l.__size_;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v41 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v42 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
      std::string::size_type v43 = v141.__r_.__value_.__l.__size_;
      if (v41)
      {
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(v141.__r_.__value_.__r.__words[2])
           : v141.__r_.__value_.__l.__size_)
        {
          if ((*(uint64_t (**)(void, std::string *, std::string *))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), &v141, &v139))goto LABEL_120; {
          std::string::size_type v42 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
          }
          std::string::size_type v43 = v141.__r_.__value_.__l.__size_;
        }
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v43 = v42;
      }
      if (v43)
      {
        uint64_t v45 = *(void *)(a1 + 144);
        std::string::basic_string[abi:ne180100]<0>(&v149, "_");
        char v46 = (*(uint64_t (**)(uint64_t, std::string *, std::__split_buffer<std::string> *))(*(void *)v45 + 40))(v45, &v141, &v149);
        char v47 = v46;
        if (SHIBYTE(v149.__end_) < 0)
        {
          operator delete(v149.__first_);
          if (v47) {
            goto LABEL_80;
          }
        }
        else if (v46)
        {
LABEL_80:
          int v48 = 1;
          goto LABEL_107;
        }
        LOBYTE(v42) = *((unsigned char *)&v141.__r_.__value_.__s + 23);
      }
      int v48 = 0;
      if ((v42 & 0x80) != 0)
      {
        *v141.__r_.__value_.__l.__data_ = 0;
        v141.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v141.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&v141.__r_.__value_.__s + 23) = 0;
      }
LABEL_107:
      std::string::size_type v61 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      char v62 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v61 = v140.__r_.__value_.__l.__size_;
      }
      if (v61)
      {
        uint64_t v63 = *(void *)(a1 + 144);
        std::string::basic_string[abi:ne180100]<0>(&v149, "_");
        char v64 = (*(uint64_t (**)(uint64_t, std::string *, std::__split_buffer<std::string> *))(*(void *)v63 + 40))(v63, &v140, &v149);
        char v65 = v64;
        if (SHIBYTE(v149.__end_) < 0)
        {
          operator delete(v149.__first_);
          if (v65)
          {
LABEL_119:
            MEMORY[0x210558E70](&v139, "_");
LABEL_120:
            if (*(char *)(v18 + 55) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v149, *(const std::string::value_type **)(v18 + 32), *(void *)(v18 + 40));
            }
            else
            {
              *(_OWORD *)&v149.__first_ = *(_OWORD *)(v18 + 32);
              v149.__end_ = *(std::__split_buffer<std::string>::pointer *)(v18 + 48);
            }
            if (SHIBYTE(v149.__end_) < 0)
            {
              unint64_t v67 = v149.__first_;
              if (v149.__first_->__r_.__value_.__s.__data_[(unint64_t)v149.__begin_ - 1] == 95)
              {
                std::__split_buffer<std::string>::pointer v66 = --v149.__begin_;
                goto LABEL_128;
              }
            }
            else if (*((unsigned char *)&v148.__end_cap_.__value_ + HIBYTE(v149.__end_) + 7) == 95)
            {
              std::__split_buffer<std::string>::pointer v66 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v149.__end_) - 1);
              HIBYTE(v149.__end_) = (HIBYTE(v149.__end_) - 1) & 0x7F;
              unint64_t v67 = &v149;
LABEL_128:
              v66->__r_.__value_.__s.__data_[(void)v67] = 0;
            }
            std::string::size_type v68 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
            if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v68 = v141.__r_.__value_.__l.__size_;
            }
            if (v68)
            {
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v139.__r_.__value_.__l.__data_, (const void **)&v149.__first_, (uint64_t)&v150);
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v69 = &v150;
              }
              else {
                unint64_t v69 = (std::string *)v150.__r_.__value_.__r.__words[0];
              }
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v70 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v70 = v150.__r_.__value_.__l.__size_;
              }
              std::string::append(&v141, (const std::string::value_type *)v69, v70);
              if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v150.__r_.__value_.__l.__data_);
              }
              std::vector<std::string>::pointer v71 = v148.__end_;
              if (v148.__end_ >= v148.__end_cap_.__value_)
              {
                uint64_t v73 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v148, (long long *)&v141);
              }
              else
              {
                if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v148.__end_, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v72 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
                  v148.__end_->__r_.__value_.__r.__words[2] = v141.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
                }
                uint64_t v73 = v71 + 1;
              }
              v148.__end_ = v73;
            }
            std::string::size_type v76 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
            if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v76 = v140.__r_.__value_.__l.__size_;
            }
            if (v76)
            {
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v139.__r_.__value_.__l.__data_, (const void **)&v149.__first_, (uint64_t)&v150);
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                __int16 v77 = &v150;
              }
              else {
                __int16 v77 = (std::string *)v150.__r_.__value_.__r.__words[0];
              }
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v78 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v78 = v150.__r_.__value_.__l.__size_;
              }
              std::string::append(&v140, (const std::string::value_type *)v77, v78);
              if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v150.__r_.__value_.__l.__data_);
              }
              end_int high = (std::__split_buffer<std::string>::pointer)HIBYTE(v149.__end_);
              if (SHIBYTE(v149.__end_) < 0) {
                end_int high = v149.__begin_;
              }
              if (end_high == (std::__split_buffer<std::string>::pointer)1) {
                std::string::push_back(&v140, 46);
              }
              std::string::size_type v80 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
              if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v80 = v141.__r_.__value_.__l.__size_;
              }
              if (!v80)
              {
                std::vector<std::string>::pointer v81 = v148.__end_;
                if (v148.__end_ >= v148.__end_cap_.__value_)
                {
                  int64_t v84 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v148, (long long *)&v140);
                }
                else
                {
                  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v148.__end_, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    long long v82 = *(_OWORD *)&v140.__r_.__value_.__l.__data_;
                    v148.__end_->__r_.__value_.__r.__words[2] = v140.__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v82;
                  }
                  int64_t v84 = v81 + 1;
                }
                v148.__end_ = v84;
              }
            }
            else
            {
              std::__split_buffer<std::string>::pointer begin = (std::__split_buffer<std::string>::pointer)HIBYTE(v149.__end_);
              if (SHIBYTE(v149.__end_) < 0) {
                std::__split_buffer<std::string>::pointer begin = v149.__begin_;
              }
              if (begin == (std::__split_buffer<std::string>::pointer)1)
              {
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v141.__r_.__value_.__l.__data_, 46, (uint64_t)&v150);
                if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v140.__r_.__value_.__l.__data_);
                }
                std::string v140 = v150;
              }
            }
            uint64_t v107 = *(void *)(v18 + 24) + *(void *)(v18 + 16);
            int v108 = v146;
            if (v146 >= v147)
            {
              std::string::size_type v110 = v145;
              uint64_t v111 = (v146 - v145) >> 3;
              unint64_t v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v113 = v147 - v145;
              if ((v147 - v145) >> 2 > v112) {
                unint64_t v112 = v113 >> 2;
              }
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v112;
              }
              if (v114)
              {
                unint64_t v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v147, v114);
                std::string::size_type v110 = v145;
                int v108 = v146;
              }
              else
              {
                unint64_t v115 = 0;
              }
              size_t v116 = &v115[8 * v111];
              *(void *)size_t v116 = v107;
              uint64_t v109 = v116 + 8;
              while (v108 != v110)
              {
                uint64_t v117 = *((void *)v108 - 1);
                v108 -= 8;
                *((void *)v116 - 1) = v117;
                v116 -= 8;
              }
              std::string::value_type v145 = v116;
              int v146 = v109;
              unint64_t v147 = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(void *)int v146 = v107;
              uint64_t v109 = v108 + 8;
            }
            int v146 = v109;
            uint64_t v118 = v134;
            if ((void *)(v118 + 8) == v119)
            {
              if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
              {
                *v139.__r_.__value_.__l.__data_ = 0;
                v139.__r_.__value_.__l.__size_ = 0;
              }
              else
              {
                v139.__r_.__value_.__s.__data_[0] = 0;
                *((unsigned char *)&v139.__r_.__value_.__s + 23) = 0;
              }
            }
            else
            {
              std::string::operator=(&v139, (const std::string *)(v119[5] + 32));
            }
            if (SHIBYTE(v149.__end_) < 0) {
              operator delete(v149.__first_);
            }
            int v21 = 0;
            goto LABEL_258;
          }
        }
        else if (v64)
        {
          goto LABEL_119;
        }
        char v62 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      }
      if (v62 < 0)
      {
        *v140.__r_.__value_.__l.__data_ = 0;
        v140.__r_.__value_.__l.__size_ = 0;
        if ((v48 & 1) == 0) {
          goto LABEL_230;
        }
      }
      else
      {
        v140.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&v140.__r_.__value_.__s + 23) = 0;
        if (!v48) {
          goto LABEL_230;
        }
      }
      goto LABEL_119;
    }
    if (v19 != 1853189228) {
      goto LABEL_28;
    }
    long long v20 = v143 - 1;
    if (SHIBYTE(v143[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20->__r_.__value_.__l.__data_);
    }
    uint64_t v143 = v20;
    int v21 = 4;
LABEL_29:
    if (v135) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v135);
    }
    if (v21 && v21 != 4) {
      break;
    }
  }
  if (v21 == 2)
  {
    memset(&v149, 0, 24);
    int64_t v120 = v148.__end_ - v148.__begin_;
    if (v148.__end_ != v148.__begin_)
    {
      uint64_t v121 = 24 * v120 - 24;
      while (1)
      {
        (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 144) + 32))(&v133);
        if (SHIBYTE(v149.__end_) < 0) {
          operator delete(v149.__first_);
        }
        int64_t v122 = v120 - 1;
        v149.__end_ = (std::__split_buffer<std::string>::pointer)v133.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v149.__first_ = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
        std::__split_buffer<std::string>::pointer v123 = (std::__split_buffer<std::string>::pointer)HIBYTE(v133.__r_.__value_.__r.__words[2]);
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::__split_buffer<std::string>::pointer v123 = v149.__begin_;
        }
        if (v123) {
          break;
        }
        v121 -= 24;
        --v120;
        if (!v122)
        {
          if ((*((unsigned char *)&v133.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_272;
          }
          goto LABEL_295;
        }
      }
      uint64_t v125 = HIBYTE(v137);
      if (v137 < 0) {
        uint64_t v125 = v137;
      }
      if (v125) {
        p_p = (const std::string *)&__p;
      }
      else {
        p_p = &v148.__begin_[v122];
      }
      std::string::operator=(v129, p_p);
      (*(void (**)(std::string *__return_ptr))(***(void ***)(a1 + 208) + 16))(&v133);
      if (&v133 != v130) {
        std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)v130, (uint64_t *)v133.__r_.__value_.__l.__data_, (uint64_t *)v133.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v133.__r_.__value_.__l.__size_ - v133.__r_.__value_.__r.__words[0]) >> 3));
      }
      v150.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133;
      std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v150);
      std::string::pointer data = v130[2].__r_.__value_.__l.__data_;
      std::string::size_type v128 = &data[v130[2].__r_.__value_.__l.__size_];
      if ((unint64_t)v128 <= *(void *)&v145[8 * v122]) {
        std::string::size_type v128 = *(char **)&v145[8 * v122];
      }
      v130[2].__r_.__value_.__l.__size_ = v128 - data;
      if ((HIBYTE(v149.__end_) & 0x80) != 0) {
LABEL_295:
      }
        operator delete(v149.__first_);
    }
  }
  else
  {
    int64_t v120 = 0;
  }
LABEL_272:
  if (SHIBYTE(v137) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v138.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  v149.__first_ = (std::__split_buffer<std::string>::pointer)&v142;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
  if (v145)
  {
    int v146 = v145;
    operator delete(v145);
  }
  v149.__first_ = (std::__split_buffer<std::string>::pointer)&v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
  return v120;
}

void sub_20D39B68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62)
{
  *(void *)(v63 - 208) = v62;
  if (*(char *)(v63 - 169) < 0) {
    operator delete(*(void **)(v63 - 192));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  a56 = &a62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  char v65 = *(void **)(v63 - 240);
  if (v65)
  {
    *(void *)(v63 - 232) = v65;
    operator delete(v65);
  }
  *(void *)(v63 - 240) = v63 - 216;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v63 - 240));
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PronounceSqliteDict>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PronounceSqliteDict>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PronounceSqliteDict>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::set<std::shared_ptr<PLSHandler>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v8 = (char ***)off_26C206338;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v8 = (char ***)off_26C206338;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void Agglomerate::ItemHolder<std::shared_ptr<PLSHandler>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206338;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<PLSHandler>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206338;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<PronounceImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PronounceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PronounceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::allocate_shared[abi:ne180100]<PronounceAffix,std::allocator<PronounceAffix>,std::string &,std::shared_ptr<PronSourceList> &,void>(void *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  uint64_t v8 = operator new(0x80uLL);
  long long v9 = v8;
  v8[1] = 0;
  uint64_t v8[2] = 0;
  void *v8 = off_26C215D08;
  uint64_t v10 = (char *)(v8 + 3);
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)v8 + 2) = 0u;
  int v11 = v8 + 4;
  v8[3] = off_26C200CB0;
  *((_OWORD *)v8 + 3) = 0u;
  v8[8] = a3;
  v8[9] = a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v8 + 10, "〈");
  std::string::basic_string[abi:ne180100]<0>(v9 + 13, "〉");
  uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  if (v12) {
    FSTGrammar::create((const char *)a2);
  }
  uint64_t v13 = *v11;
  if (*v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "RULES");
    std::string::basic_string[abi:ne180100]<0>(v18, &byte_20D5A22AE);
    (*(void (**)(std::string *__return_ptr, uint64_t, void **, void **))(*(void *)v13 + 8))(&__p, v13, v14, v18);
    std::istringstream::basic_istringstream[abi:ne180100](v20, &__p, 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    if (SBYTE7(v15) < 0) {
      operator delete(v14[0]);
    }
    std::istream_iterator<std::string,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100]((uint64_t **)&__p, v20);
    *(_OWORD *)long long v14 = 0u;
    long long v15 = 0u;
    std::copy[abi:ne180100]<std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::back_insert_iterator<std::vector<std::string>>>((uint64_t)&__p, (uint64_t)v14, v9 + 5);
    if (v17 < 0) {
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    }
    v20[0] = *MEMORY[0x263F8C2C0];
    *(uint64_t *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
    v20[2] = MEMORY[0x263F8C318] + 16;
    if (v21 < 0) {
      operator delete((void *)v20[10]);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x210559500](&v22);
  }
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *a1 = v10;
  a1[1] = v9;
}

void sub_20D39BF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  a32 = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)&a32 + *(void *)(a32 - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  a34 = MEMORY[0x263F8C318] + 16;
  if (a47 < 0) {
    operator delete(a42);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x210559500](&a50);
  if (*(char *)(v50 + 127) < 0) {
    operator delete(*v53);
  }
  if (*(char *)(v50 + 103) < 0) {
    operator delete(*v52);
  }
  int v56 = *(std::__shared_weak_count **)(v50 + 72);
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  uint64_t v57 = *v54;
  *long long v54 = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 24))(v57);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v50);
  operator delete(v58);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PronounceSpell>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PronounceSpell>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PronounceSpell>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<PronounceLetter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PronounceLetter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2161A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PronounceLetter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2161A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<NativePhonemePassThrough>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<NativePhonemePassThrough>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NativePhonemePassThrough>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<PronSourceProxy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PronSourceProxy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216168;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PronSourceProxy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<PronounceNNMT>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PronounceNNMT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PronounceNNMT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<PronounceAffix>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PronounceAffix>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PronounceAffix>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<PronSourceList>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PronSourceList>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PronSourceList>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void PronouncePersistentModule::~PronouncePersistentModule(PronouncePersistentModule *this)
{
  *(void *)this = off_26C204108;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = off_26C204108;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void UnitSegmentStream::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    do
    {
      long long v6 = *(uint64_t **)(a1 + 272);
      unint64_t v7 = v6[1];
      uint64_t v8 = *(void *)(v7 - 104);
      if (*(void *)(v7 - 112) != v8)
      {
        if (*(_DWORD *)(v8 - 180) + 1 != *(_DWORD *)(v4 + 4)) {
          goto LABEL_19;
        }
        uint64_t v9 = *(unsigned __int8 *)(v8 - 97);
        size_t v10 = *(void *)(v8 - 112);
        if ((v9 & 0x80u) == 0) {
          uint64_t v11 = *(unsigned __int8 *)(v8 - 97);
        }
        else {
          uint64_t v11 = *(void *)(v8 - 112);
        }
        uint64_t v12 = *(unsigned __int8 *)(v4 + 87);
        int v13 = (char)v12;
        if ((v12 & 0x80u) != 0) {
          uint64_t v12 = *(void *)(v4 + 72);
        }
        if (v11 != v12) {
          goto LABEL_19;
        }
        long long v14 = (const void **)(v8 - 120);
        if (v13 >= 0) {
          long long v15 = (unsigned __int8 *)(v4 + 64);
        }
        else {
          long long v15 = *(unsigned __int8 **)(v4 + 64);
        }
        if ((v9 & 0x80) != 0)
        {
          if (memcmp(*v14, v15, v10)) {
            goto LABEL_19;
          }
        }
        else if (v9)
        {
          while (*(unsigned __int8 *)v14 == *v15)
          {
            long long v14 = (const void **)((char *)v14 + 1);
            ++v15;
            if (!--v9) {
              goto LABEL_32;
            }
          }
LABEL_19:
          unint64_t v16 = v6[2];
          if (v7 >= v16)
          {
            unint64_t v18 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v7 - *v6) >> 3);
            unint64_t v19 = v18 + 1;
            if (v18 + 1 > 0x222222222222222) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v20 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v16 - *v6) >> 3);
            if (2 * v20 > v19) {
              unint64_t v19 = 2 * v20;
            }
            if (v20 >= 0x111111111111111) {
              unint64_t v21 = 0x222222222222222;
            }
            else {
              unint64_t v21 = v19;
            }
            *(void *)&v134[8] = v6 + 2;
            if (v21) {
              unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v21);
            }
            else {
              uint64_t v22 = 0;
            }
            unint64_t v23 = v21 + 120 * v18;
            *(void *)blocuint64_t k = v21;
            *(void *)&block[8] = v23;
            *(void *)uint64_t v134 = v21 + 120 * v22;
            *(_OWORD *)unint64_t v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)(v23 + 80) = 0u;
            *(_OWORD *)(v23 + 96) = 0u;
            *(void *)(v23 + 104) = 0;
            *(void *)(v23 + 112) = 0;
            *(_OWORD *)(v23 + 64) = 0u;
            *(_WORD *)unint64_t v23 = 257;
            *(_OWORD *)(v23 + 24) = 0u;
            *(_OWORD *)(v23 + 8) = 0u;
            *(void *)(v23 + 72) = 0;
            *(_OWORD *)(v23 + 56) = 0u;
            *(_OWORD *)(v23 + 40) = 0u;
            *(void *)(v23 + 96) = 0;
            *(_WORD *)(v23 + 112) = 0;
            *(void *)&block[16] = v23 + 120;
            std::vector<AudioSegmentation>::__swap_out_circular_buffer(v6, block);
            uint64_t v17 = v6[1];
            std::__split_buffer<AudioSegmentation>::~__split_buffer((uint64_t)block);
          }
          else
          {
            *(_OWORD *)unint64_t v7 = 0u;
            *(_OWORD *)(v7 + 16) = 0u;
            *(_OWORD *)(v7 + 32) = 0u;
            *(_OWORD *)(v7 + 48) = 0u;
            *(_OWORD *)(v7 + 80) = 0u;
            *(_OWORD *)(v7 + 96) = 0u;
            *(void *)(v7 + 104) = 0;
            *(void *)(v7 + 112) = 0;
            *(_OWORD *)(v7 + 64) = 0u;
            *(_WORD *)unint64_t v7 = 257;
            *(_OWORD *)(v7 + 8) = 0u;
            *(_OWORD *)(v7 + 24) = 0u;
            *(_OWORD *)(v7 + 40) = 0u;
            *(_OWORD *)(v7 + 56) = 0u;
            *(void *)(v7 + 72) = 0;
            *(void *)(v7 + 96) = 0;
            *(_WORD *)(v7 + 112) = 0;
            uint64_t v17 = v7 + 120;
            v6[1] = v17;
          }
          v6[1] = v17;
          ++*(_DWORD *)(a1 + 348);
        }
      }
LABEL_32:
      BOOL v24 = *(_DWORD **)(v4 + 160);
      std::string::size_type v25 = *(_DWORD **)(v4 + 168);
      while (v24 != v25)
      {
        if (*v24 == 1) {
          *(_DWORD *)(a1 + 352) = 0;
        }
        v24 += 14;
      }
      uint64_t v26 = *(void *)(*(void *)(a1 + 272) + 8);
      int v27 = *(Unit **)(v26 - 112);
      long long v28 = *(Unit **)(v26 - 104);
      if (v27 == v28)
      {
        if (*(_DWORD *)(a1 + 348)) {
          int v29 = 15;
        }
        else {
          int v29 = 0;
        }
        *(float *)(v26 - 36) = (float)v29;
        *(_DWORD *)(v26 - 32) = 1092616192;
      }
      unint64_t v30 = *(void *)(v26 - 96);
      if ((unint64_t)v28 >= v30)
      {
        unint64_t v32 = 0xD37A6F4DE9BD37A7 * ((v28 - v27) >> 3);
        if (v32 + 1 > 0x1642C8590B21642) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v33 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v30 - (void)v27) >> 3);
        uint64_t v34 = 2 * v33;
        if (2 * v33 <= v32 + 1) {
          uint64_t v34 = v32 + 1;
        }
        if (v33 >= 0xB21642C8590B21) {
          unint64_t v35 = 0x1642C8590B21642;
        }
        else {
          unint64_t v35 = v34;
        }
        *(void *)&v134[8] = v26 - 96;
        if (v35) {
          unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Unit>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        *(void *)blocuint64_t k = v35;
        *(void *)&block[8] = v35 + 184 * v32;
        *(void *)&block[16] = *(void *)&block[8];
        *(void *)uint64_t v134 = v35 + 184 * v36;
        Unit::Unit(*(Unit **)&block[8], (const Unit *)v4);
        *(void *)&block[16] += 184;
        std::vector<Unit>::__swap_out_circular_buffer((uint64_t *)(v26 - 112), block);
        int v31 = *(char **)(v26 - 104);
        std::__split_buffer<Unit>::~__split_buffer((uint64_t)block);
      }
      else
      {
        Unit::Unit(v28, (const Unit *)v4);
        int v31 = (char *)v28 + 184;
        *(void *)(v26 - 104) = v31;
      }
      *(void *)(v26 - 104) = v31;
      v4 += 184;
    }
    while (v4 != v5);
  }
  char v37 = *(uint64_t **)(a1 + 272);
  if (*v37 != v37[1])
  {
    unint64_t v38 = *(std::__shared_weak_count **)(a1 + 320);
    uint64_t v126 = *(void *)(a1 + 312);
    char v127 = v38;
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = *(void *)(a1 + 328);
    unint64_t v39 = *(std::__shared_weak_count **)(a1 + 336);
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v41 = (double)*(int *)(a1 + 344) / 1000.0;
    float v130 = v41;
    v132.__m_.__sig = 850045863;
    memset(v132.__m_.__opaque, 0, sizeof(v132.__m_.__opaque));
    char v129 = 0;
    uint64_t v43 = *v37;
    uint64_t v42 = v37[1];
    uint64_t v44 = operator new(0x30uLL);
    unint64_t v45 = 0xEEEEEEEEEEEEEEEFLL * ((v42 - v43) >> 3);
    void *v44 = &off_26C2114C8;
    v44[1] = a1 + 288;
    v44[2] = v37;
    v44[3] = &v126;
    v44[4] = &v129;
    v44[5] = &v130;
    v131[3] = v44;
    int v46 = vcvtps_s32_f32((float)v45 * 0.25);
    if ((int)v45 < v46) {
      int v46 = -286331153 * ((v42 - v43) >> 3);
    }
    *(void *)blocuint64_t k = MEMORY[0x263EF8330];
    *(void *)&block[8] = 1174405120;
    *(void *)&block[16] = ___Z19multithread_forloopmmNSt3__18functionIFvmmEEE_block_invoke;
    *(void *)uint64_t v134 = &__block_descriptor_tmp_1;
    *(void *)&v134[8] = v46;
    *(void *)&v134[16] = 0xEEEEEEEEEEEEEEEFLL * ((v42 - v43) >> 3);
    std::__function::__value_func<void ()(unsigned long,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v134[24], (uint64_t)v131);
    dispatch_apply(4uLL, 0, block);
    std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](&v134[24]);
    std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v131);
    if (v129) {
      goto LABEL_66;
    }
    SharedObjectPool::get_if<OverlappingPrompt>(block, v40);
    uint64_t v47 = *(void *)block;
    if (*(void *)&block[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&block[8]);
    }
    if (v47)
    {
LABEL_66:
      uint64_t v48 = *v37;
      for (uint64_t i = v37[1]; v48 != i; v48 += 120)
      {
        uint64_t v50 = *(void *)(v48 + 8);
        if ((*(_DWORD *)(v50 + 4) & 0x80000000) != 0)
        {
          uint64_t v51 = *(void *)(v50 + 160);
          uint64_t v52 = *(void *)(v50 + 168);
          while (v51 != v52)
          {
            if (*(_DWORD *)v51 == 9 && *(unsigned char *)(v51 + 48) != 0)
            {
              SharedObjectPool::get<OverlappingPrompt>(block, v40);
              OverlappingPrompt::store_overlap(*(void **)block, *(char **)(v48 + 56), *(char **)(v48 + 64));
              *(void *)(v48 + 64) = *(void *)(v48 + 56);
              if (*(void *)&block[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&block[8]);
              }
            }
            v51 += 56;
          }
        }
        if (*(void *)(v48 + 56) != *(void *)(v48 + 64))
        {
          v128[0] = v40;
          v128[1] = (uint64_t)v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          OverlappingPrompt::overlap_if_available(v128, v48 + 56);
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
        }
      }
    }
    std::mutex::~mutex(&v132);
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    long long v54 = (GryphonAnalysis *)v127;
    if (v127) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v127);
    }
    if (*(void *)(*(void *)(a1 + 272) + 8) != **(void **)(a1 + 272))
    {
      unint64_t v55 = 0;
      do
      {
        int v56 = (GryphonAnalysis *)GryphonAnalysis::Storage(v54);
        if (*(unsigned char *)v56)
        {
          uint64_t v57 = *(uint64_t **)(a1 + 272);
          uint64_t v58 = *v57;
          if (0xEEEEEEEEEEEEEEEFLL * ((v57[1] - *v57) >> 3) <= v55) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          std::string::size_type v59 = (void *)GryphonAnalysis::Storage(v56);
          unsigned __int16 v60 = v59;
          uint64_t v61 = v58 + 120 * v55;
          unint64_t v63 = v59[55];
          unint64_t v62 = v59[56];
          if (v63 >= v62)
          {
            uint64_t v66 = v59[54];
            unint64_t v67 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v63 - v66) >> 3);
            unint64_t v68 = v67 + 1;
            if (v67 + 1 > 0x222222222222222) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v69 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v62 - v66) >> 3);
            if (2 * v69 > v68) {
              unint64_t v68 = 2 * v69;
            }
            if (v69 >= 0x111111111111111) {
              unint64_t v70 = 0x222222222222222;
            }
            else {
              unint64_t v70 = v68;
            }
            *(void *)&v134[8] = v60 + 56;
            if (v70) {
              unint64_t v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v70);
            }
            else {
              uint64_t v71 = 0;
            }
            *(void *)blocuint64_t k = v70;
            *(void *)&block[8] = v70 + 120 * v67;
            *(void *)&block[16] = *(void *)&block[8];
            *(void *)uint64_t v134 = v70 + 120 * v71;
            std::allocator<AudioSegmentation>::construct[abi:ne180100]<AudioSegmentation,AudioSegmentation const&>(*(uint64_t *)&block[8], v61);
            *(void *)&block[16] += 120;
            std::vector<AudioSegmentation>::__swap_out_circular_buffer(v60 + 54, block);
            unint64_t v65 = v60[55];
            char v64 = (GryphonAnalysis *)std::__split_buffer<AudioSegmentation>::~__split_buffer((uint64_t)block);
          }
          else
          {
            std::allocator<AudioSegmentation>::construct[abi:ne180100]<AudioSegmentation,AudioSegmentation const&>(v59[55], v61);
            unint64_t v65 = v63 + 120;
            v60[55] = v65;
          }
          v60[55] = v65;
          long long v72 = (void *)GryphonAnalysis::Storage(v64);
          uint64_t v73 = v72;
          unint64_t v75 = v72[58];
          unint64_t v74 = v72[59];
          if (v75 >= v74)
          {
            uint64_t v77 = v72[57];
            unint64_t v78 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v75 - v77) >> 3);
            unint64_t v79 = v78 + 1;
            if (v78 + 1 > 0x222222222222222) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v80 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v74 - v77) >> 3);
            if (2 * v80 > v79) {
              unint64_t v79 = 2 * v80;
            }
            if (v80 >= 0x111111111111111) {
              unint64_t v81 = 0x222222222222222;
            }
            else {
              unint64_t v81 = v79;
            }
            *(void *)&v134[8] = v73 + 59;
            if (v81) {
              unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v81);
            }
            else {
              uint64_t v82 = 0;
            }
            *(void *)blocuint64_t k = v81;
            *(void *)&block[8] = v81 + 120 * v78;
            *(void *)&block[16] = *(void *)&block[8];
            *(void *)uint64_t v134 = v81 + 120 * v82;
            std::allocator<AudioSegmentation>::construct[abi:ne180100]<AudioSegmentation,AudioSegmentation const&>(*(uint64_t *)&block[8], v61);
            *(void *)&block[16] += 120;
            std::vector<AudioSegmentation>::__swap_out_circular_buffer(v73 + 57, block);
            unint64_t v76 = v73[58];
            std::__split_buffer<AudioSegmentation>::~__split_buffer((uint64_t)block);
          }
          else
          {
            std::allocator<AudioSegmentation>::construct[abi:ne180100]<AudioSegmentation,AudioSegmentation const&>(v72[58], v61);
            unint64_t v76 = v75 + 120;
            v73[58] = v76;
          }
          v73[58] = v76;
        }
        float v83 = (double)*(int *)(a1 + 344) / 1000.0;
        uint64_t v84 = **(void **)(a1 + 272);
        uint64_t v85 = *(void *)(v84 + 120 * v55 + 8);
        if ((*(_DWORD *)(v85 + 4) & 0x80000000) != 0)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          float v97 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v99 = **(void **)(a1 + 272) + 120 * v55;
            uint64_t v100 = *(void *)(v99 + 8);
            int v101 = -*(_DWORD *)(v100 + 4);
            LODWORD(v99) = -*(_DWORD *)(*(void *)(v99 + 16) - 180);
            uint64_t v102 = (uint64_t)(float)(*(float *)(v100 + 148) * v83);
            *(_DWORD *)blocuint64_t k = 134219008;
            *(void *)&block[4] = v55;
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = v101;
            *(_WORD *)&block[18] = 1024;
            *(_DWORD *)&block[20] = v99;
            *(_WORD *)uint64_t v134 = 2048;
            *(void *)&v134[2] = (uint64_t)(float)(v83 * (float)v101);
            *(_WORD *)&v134[10] = 2048;
            *(void *)&v134[12] = v102;
            _os_log_impl(&dword_20CD80000, v97, OS_LOG_TYPE_DEBUG, "Segment %3ld: %7d-%-7d %6ld @ %-8ld sil", block, 0x2Cu);
          }
          uint64_t v103 = **(void **)(a1 + 272) + 120 * v55;
          long long v54 = (GryphonAnalysis *)Diagnostics::log(7, "Segment %3ld: %7d-%-7d %6ld @ %-8ld sil", v98, v55, -*(_DWORD *)(*(void *)(v103 + 8) + 4), -*(_DWORD *)(*(void *)(v103 + 16) - 180), (uint64_t)(float)(v83 * (float)-*(_DWORD *)(*(void *)(v103 + 8) + 4)), (uint64_t)(float)(*(float *)(*(void *)(v103 + 8) + 148) * v83), v125);
        }
        else
        {
          uint64_t v86 = *(void *)(v84 + 120 * v55 + 16);
          float v87 = 0.0;
          while (v85 != v86)
          {
            float v87 = v87 + *(float *)(v85 + 152);
            v85 += 184;
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          unint64_t v88 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v90 = **(void **)(a1 + 272) + 120 * v55;
            uint64_t v91 = *(void *)(v90 + 8);
            std::string::size_type v92 = (void *)(v91 + 64);
            if (*(char *)(v91 + 87) < 0) {
              std::string::size_type v92 = (void *)*v92;
            }
            int v93 = *(_DWORD *)(v91 + 4);
            int v94 = *(_DWORD *)(*(void *)(v90 + 16) - 180);
            uint64_t v95 = (uint64_t)(float)(v87 * v83);
            uint64_t v96 = (uint64_t)(float)(*(float *)(v91 + 148) * v83);
            *(_DWORD *)blocuint64_t k = 134219266;
            *(void *)&block[4] = v55;
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = v93;
            *(_WORD *)&block[18] = 1024;
            *(_DWORD *)&block[20] = v94;
            *(_WORD *)uint64_t v134 = 2048;
            *(void *)&v134[2] = v95;
            *(_WORD *)&v134[10] = 2048;
            *(void *)&v134[12] = v96;
            *(_WORD *)&v134[20] = 2080;
            *(void *)&v134[22] = v92;
            _os_log_impl(&dword_20CD80000, v88, OS_LOG_TYPE_DEBUG, "Segment %3ld: %7d-%-7d %6ld @ %-8ld %s", block, 0x36u);
          }
          else
          {
            uint64_t v95 = (uint64_t)(float)(v87 * v83);
          }
          uint64_t v104 = **(void **)(a1 + 272) + 120 * v55;
          uint64_t v105 = *(void *)(v104 + 8);
          uint64_t v106 = (void *)(v105 + 64);
          if (*(char *)(v105 + 87) < 0) {
            uint64_t v106 = (void *)*v106;
          }
          long long v54 = (GryphonAnalysis *)Diagnostics::log(7, "Segment %3ld: %7d-%-7d %6ld @ %-8ld %s", v89, v55, *(unsigned int *)(v105 + 4), *(unsigned int *)(*(void *)(v104 + 16) - 180), v95, (uint64_t)(float)(*(float *)(v105 + 148) * v83), v106);
        }
        ++v55;
      }
      while (v55 < 0xEEEEEEEEEEEEEEEFLL
                  * ((uint64_t)(*(void *)(*(void *)(a1 + 272) + 8) - **(void **)(a1 + 272)) >> 3));
    }
    uint64_t v107 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v107 + 8) = 0u;
    *((_OWORD *)v107 + 2) = 0u;
    *((void *)v107 + 3) = v107 + 32;
    *(void *)uint64_t v107 = off_26C215330;
    *(void *)blocuint64_t k = &v132;
    if (!v108) {
      operator new();
    }
    unint64_t v109 = *(void *)(a1 + 272);
    uint64_t v110 = *(void *)(a1 + 280);
    *(void *)blocuint64_t k = off_26C206738;
    *(void *)&block[8] = v109;
    *(void *)&block[16] = v110;
    if (v110)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v110 + 8), 1uLL, memory_order_relaxed);
      long long v111 = *(_OWORD *)&block[8];
    }
    else
    {
      long long v111 = v109;
    }
    *(void *)&block[8] = 0;
    *(void *)&block[16] = 0;
    unint64_t v112 = *(std::__shared_weak_count **)(v108 + 16);
    *(_OWORD *)(v108 + 8) = v111;
    if (v112)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v112);
      *(void *)blocuint64_t k = off_26C206738;
      if (*(void *)&block[16]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&block[16]);
      }
    }
    v132.__m_.__sig = (uint64_t)(v107 + 24);
    *(void *)v132.__m_.__opaque = v107;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v107 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, std::mutex *))(*(void *)a1 + 72))(a1, &v132);
    if (*(void *)v132.__m_.__opaque) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v132.__m_.__opaque);
    }
    *(_DWORD *)(a1 + 348) = 0;
    ++*(_DWORD *)(a1 + 352);
    uint64_t v113 = operator new(0x30uLL);
    v113[1] = 0;
    v113[2] = 0;
    v113[3] = 0;
    unint64_t v114 = v113 + 3;
    void *v113 = off_26C219738;
    v113[4] = 0;
    v113[5] = 0;
    unint64_t v115 = *(std::__shared_weak_count **)(a1 + 280);
    *(void *)(a1 + 272) = v113 + 3;
    *(void *)(a1 + 280) = v113;
    if (v115)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v115);
      unint64_t v114 = *(uint64_t **)(a1 + 272);
    }
    unint64_t v116 = v114[2];
    unint64_t v117 = v114[1];
    if (v117 >= v116)
    {
      unint64_t v119 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v117 - *v114) >> 3);
      unint64_t v120 = v119 + 1;
      if (v119 + 1 > 0x222222222222222) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v121 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v116 - *v114) >> 3);
      if (2 * v121 > v120) {
        unint64_t v120 = 2 * v121;
      }
      if (v121 >= 0x111111111111111) {
        unint64_t v122 = 0x222222222222222;
      }
      else {
        unint64_t v122 = v120;
      }
      *(void *)&v134[8] = v114 + 2;
      if (v122) {
        unint64_t v122 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v122);
      }
      else {
        uint64_t v123 = 0;
      }
      unint64_t v124 = v122 + 120 * v119;
      *(void *)blocuint64_t k = v122;
      *(void *)&block[8] = v124;
      *(void *)uint64_t v134 = v122 + 120 * v123;
      *(_OWORD *)unint64_t v124 = 0u;
      *(_OWORD *)(v124 + 16) = 0u;
      *(_OWORD *)(v124 + 32) = 0u;
      *(_OWORD *)(v124 + 48) = 0u;
      *(_OWORD *)(v124 + 80) = 0u;
      *(_OWORD *)(v124 + 96) = 0u;
      *(void *)(v124 + 104) = 0;
      *(void *)(v124 + 112) = 0;
      *(_OWORD *)(v124 + 64) = 0u;
      *(_WORD *)unint64_t v124 = 257;
      *(_OWORD *)(v124 + 24) = 0u;
      *(_OWORD *)(v124 + 8) = 0u;
      *(void *)(v124 + 72) = 0;
      *(_OWORD *)(v124 + 56) = 0u;
      *(_OWORD *)(v124 + 40) = 0u;
      *(void *)(v124 + 96) = 0;
      *(_WORD *)(v124 + 112) = 0;
      *(void *)&block[16] = v124 + 120;
      std::vector<AudioSegmentation>::__swap_out_circular_buffer(v114, block);
      uint64_t v118 = v114[1];
      std::__split_buffer<AudioSegmentation>::~__split_buffer((uint64_t)block);
    }
    else
    {
      *(_OWORD *)unint64_t v117 = 0u;
      *(_OWORD *)(v117 + 16) = 0u;
      *(_OWORD *)(v117 + 32) = 0u;
      *(_OWORD *)(v117 + 48) = 0u;
      *(_OWORD *)(v117 + 80) = 0u;
      *(_OWORD *)(v117 + 96) = 0u;
      *(void *)(v117 + 104) = 0;
      *(void *)(v117 + 112) = 0;
      *(_OWORD *)(v117 + 64) = 0u;
      *(_WORD *)unint64_t v117 = 257;
      *(_OWORD *)(v117 + 8) = 0u;
      *(_OWORD *)(v117 + 24) = 0u;
      *(_OWORD *)(v117 + 40) = 0u;
      *(_OWORD *)(v117 + 56) = 0u;
      *(void *)(v117 + 72) = 0;
      *(void *)(v117 + 96) = 0;
      *(_WORD *)(v117 + 112) = 0;
      uint64_t v118 = v117 + 120;
      v114[1] = v117 + 120;
    }
    v114[1] = v118;
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v107);
  }
}

void sub_20D39D558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::mutex::~mutex((std::mutex *)&a29);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(unint64_t a1)
{
  if (a1 >= 0x222222222222223) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(120 * a1);
}

uint64_t *std::vector<AudioSegmentation>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      __int16 v8 = *(_WORD *)(v2 + v5 - 120);
      *(void *)(v6 - 104) = 0;
      *(void *)(v6 - 96) = 0;
      *(void *)(v6 - 112) = 0;
      *(_WORD *)(v6 - 120) = v8;
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(void *)(v6 - 96) = *(void *)(v2 + v5 - 96);
      *(void *)(v7 - 112) = 0;
      *(void *)(v7 - 104) = 0;
      *(void *)(v7 - 96) = 0;
      *(void *)(v6 - 88) = 0;
      *(void *)(v6 - 80) = 0;
      *(void *)(v6 - 72) = 0;
      *(_OWORD *)(v6 - 88) = *(_OWORD *)(v2 + v5 - 88);
      *(void *)(v6 - 72) = *(void *)(v2 + v5 - 72);
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 72) = 0;
      *(void *)(v6 - 64) = 0;
      *(void *)(v6 - 56) = 0;
      *(void *)(v6 - 48) = 0;
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(void *)(v6 - 48) = *(void *)(v2 + v5 - 48);
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 56) = 0;
      long long v9 = *(_OWORD *)(v2 + v5 - 40);
      long long v10 = *(_OWORD *)(v2 + v5 - 24);
      __int16 v11 = *(_WORD *)(v2 + v5 - 8);
      *(void *)(v7 - 48) = 0;
      *(_WORD *)(v6 - 8) = v11;
      *(_OWORD *)(v6 - 24) = v10;
      *(_OWORD *)(v6 - 40) = v9;
      v5 -= 120;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v12 = *result;
  void *result = v4;
  a2[1] = v12;
  uint64_t v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AudioSegmentation>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    std::allocator<AudioSegmentation>::destroy[abi:ne180100](i - 120);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void SharedObjectPool::get_if<OverlappingPrompt>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    uint64_t v6 = *(void *)(*(void *)v5 + 16);
    *a1 = *(void *)(*(void *)v5 + 8);
    a1[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D39D8E8(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void SharedObjectPool::get<OverlappingPrompt>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  uint64_t v5 = a2 + 32;
  {
    uint64_t v6 = (char *)operator new(0x48uLL);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(_OWORD *)(v6 + 24) = 0u;
    *(void *)uint64_t v6 = off_26C216830;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    uint64_t v12 = &v14;
    if (!v7) {
      operator new();
    }
    uint64_t v12 = (char ***)off_26C206578;
    *(void *)&long long v13 = v6 + 24;
    *((void *)&v13 + 1) = v6;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
    long long v8 = v13;
    long long v13 = 0uLL;
    long long v9 = *(std::__shared_weak_count **)(v7 + 16);
    *(_OWORD *)(v7 + 8) = v8;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v12 = (char ***)off_26C206578;
      if (*((void *)&v13 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  }
  uint64_t v11 = *(void *)(*(void *)v10 + 16);
  *a1 = *(void *)(*(void *)v10 + 8);
  a1[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D39DADC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<AudioSegmentation>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v3 -= 120;
        std::allocator<AudioSegmentation>::destroy[abi:ne180100](v3);
      }
      while (v3 != v1);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<std::vector<AudioSegmentation>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<AudioSegmentation>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::ItemHolder<std::shared_ptr<std::vector<AudioSegmentation>>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206738;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<std::vector<AudioSegmentation>>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206738;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<OverlappingPrompt>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206578;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<OverlappingPrompt>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206578;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

char **std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(**(void **)(a1 + 8) + 16 * *a3);
  uint64_t v6 = *v4;
  uint64_t v5 = (std::__shared_weak_count *)v4[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = **(void **)(a1 + 16);
  uint64_t v8 = v7 + 120 * v3;
  uint64_t v9 = *(void *)(v8 + 8);
  unint64_t v112 = (uint64_t *)(v8 + 8);
  uint64_t v10 = *(unsigned int *)(v9 + 4);
  uint64_t v113 = v3;
  if ((v10 & 0x80000000) == 0 || (v49 = *(void *)(v9 + 160), uint64_t v48 = *(void *)(v9 + 168), v49 == v48))
  {
LABEL_4:
    uint64_t v11 = v7 + 120 * v3;
    uint64_t v12 = (char **)(v11 + 56);
    *(void *)(v11 + 64) = *(void *)(v11 + 56);
    uint64_t v13 = v11 + 64;
    int v14 = (int)*(float *)(v13 + 24);
    if ((v10 & 0x80000000) != 0)
    {
      unint64_t v51 = (*(_DWORD *)(v6 + 72) * (v14 + (int)*(float *)(v13 + 20) - v10));
    }
    else
    {
      int v107 = (int)*(float *)(v13 + 24);
      int v108 = (int)*(float *)(v13 + 20);
      uint64_t v15 = *(int *)(*(void *)(v13 - 48) - 180);
      uint64_t v16 = *(void *)(v6 + 32);
      uint64_t v17 = *(void *)(v6 + 168);
      unint64_t v18 = (unsigned int *)(v17 + v16 + 10 * v10);
      uint64_t v19 = v16 + 10 * (int)v15;
      *(void *)(v6 + 144) = v19;
      uint64_t v20 = v17 + v19;
      unint64_t v109 = v5;
      uint64_t v110 = v18;
      unsigned int v21 = *v18;
      unsigned int v22 = *(_DWORD *)(v17 + v19) + *(unsigned __int8 *)(v17 + v19 + 4);
      unint64_t v23 = v22 - *v18;
      if (v22 < *v18 || v23 >= 0x7D1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)md, "AudioExtractor: Preposterous extraction request %d[%u]..%u[%u]\n", v10, v21, v15, v22);
        MEMORY[0x210558D40](exception, md);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      int v24 = *(unsigned __int16 *)(*(void *)(v6 + 16) + 12);
      uint64_t v25 = v21 * v24;
      if (v21 || *((_WORD *)v18 + 3))
      {
        uint64_t v105 = v22 * v24 - v25;
        uint64_t v5 = v109;
        if (*(_DWORD *)v6 == 2)
        {
          *(void *)md = 0;
          unint64_t v120 = 0;
          uint64_t v121 = 0;
          unsigned __int16 v52 = **(_WORD **)(v6 + 88);
          std::vector<unsigned short>::resize((char **)md, v23);
          unsigned int v53 = v21 / v52;
          int v54 = v53 * v52;
          unint64_t v55 = *(void *)(v6 + 48) + 2 * **(unsigned __int16 **)(v6 + 88) * (unint64_t)v53;
          uint64_t v56 = *(void *)(v6 + 168);
          unint64_t v57 = v55 + 2 * (v21 - v54);
          *(void *)(v6 + 144) = v57;
          uint64_t v58 = *(void *)(*(void *)(v6 + 128) + 8 * v53);
          if (v21 != v54)
          {
            int v59 = 0;
            uint64_t v60 = v56 + v55;
            do
              v58 += *(unsigned __int16 *)(v60 + 2 * (unsigned __int16)v59++);
            while (v21 - v54 > (unsigned __int16)v59);
          }
          memcpy(*(void **)md, (const void *)(v56 + v57), (size_t)v120 - *(void *)md);
          uint64_t v61 = *(void *)(v6 + 40) + v58;
          unint64_t v116 = 0;
          unint64_t v117 = 0;
          uint64_t v118 = 0;
          DecompressAudio::decompress_relevant_audio(*(void *)(v6 + 112), md, v61, (uint64_t)&v116);
          uint64_t v62 = *(void *)(v6 + 64);
          if (v62)
          {
            uint64_t v63 = v62 + 4 * v10;
            uint64_t v64 = *(void *)(v6 + 168);
            uint64_t v65 = v62 + 4 * v15;
            *(void *)(v6 + 144) = v65;
            unsigned int v66 = *(unsigned __int16 *)(v64 + v63);
            uint64_t v67 = v64 + v65;
            unsigned int v68 = *((unsigned __int16 *)v110 + 3);
            int v69 = *(_DWORD *)(v6 + 72);
            unsigned int v70 = v69 * v108;
            unsigned int v71 = v68 - v69 * v108;
            unsigned __int16 v72 = v66 - v68 + v69 * v108;
            unsigned int v73 = *(unsigned __int16 *)(v64 + v65 + 2);
            unsigned int v74 = *(unsigned __int16 *)(v20 + 8);
            int v75 = v69 * v107;
            if (v74 - v75 >= v73) {
              unsigned __int16 v76 = 0;
            }
            else {
              unsigned __int16 v76 = v73 + v75 - v74;
            }
            unsigned __int16 v106 = v76;
            if (v71 < v66 && v72 != 0)
            {
              std::vector<unsigned short>::vector(&__p, v72);
              std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)v12, *v12, (unsigned __int16 *)__p, v115, ((char *)v115 - (unsigned char *)__p) >> 1);
              if (__p)
              {
                unint64_t v115 = (unsigned __int16 *)__p;
                operator delete(__p);
              }
              unsigned int v68 = *((unsigned __int16 *)v110 + 3);
              int v75 = *(_DWORD *)(v6 + 72);
              unsigned int v74 = *(unsigned __int16 *)(v20 + 8);
              unsigned int v66 = *(unsigned __int16 *)(v64 + v63);
              unsigned int v73 = *(unsigned __int16 *)(v67 + 2);
              unsigned int v70 = v75 * v108;
              LOWORD(v75) = v75 * v107;
            }
            unsigned __int16 v78 = v74 - v75;
            if (v70 <= v68) {
              unsigned __int16 v79 = v68 - v70;
            }
            else {
              unsigned __int16 v79 = 0;
            }
            if (v70 <= v74) {
              unsigned __int16 v80 = v78;
            }
            else {
              unsigned __int16 v80 = 0;
            }
            if (v79 > v66) {
              unsigned int v66 = v79;
            }
            unint64_t v81 = (__int16 *)((char *)v116 + 2 * v66);
            if (v80 <= v73) {
              unsigned int v82 = v73;
            }
            else {
              unsigned int v82 = v80;
            }
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((uint64_t)v12, *(char **)v13, v81, &v117[-v82], &v117[-v82] - v81);
            if (v106)
            {
              std::vector<unsigned short>::vector(&__p, v106);
              std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)v12, *(char **)v13, (unsigned __int16 *)__p, v115, ((char *)v115 - (unsigned char *)__p) >> 1);
              if (__p)
              {
                unint64_t v115 = (unsigned __int16 *)__p;
                operator delete(__p);
              }
            }
          }
          else
          {
            int v87 = *(_DWORD *)(v6 + 72);
            unint64_t v88 = (__int16 *)((char *)v116 + 2 * *((unsigned __int16 *)v110 + 3) + -2 * (v87 * v108));
            uint64_t v89 = &v117[v87 * v107 - *(unsigned __int16 *)(v20 + 8)];
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((uint64_t)v12, *v12, v88, v89, v89 - v88);
          }
          if (v116)
          {
            unint64_t v117 = (__int16 *)v116;
            operator delete(v116);
          }
LABEL_77:
          if (*(void *)md)
          {
            unint64_t v120 = *(unsigned __int16 **)md;
            operator delete(*(void **)md);
          }
          goto LABEL_79;
        }
        if (*(_DWORD *)v6 == 1)
        {
          std::vector<float>::resize((uint64_t)v12, 0);
          uint64_t v26 = *(void *)(v6 + 40) + 2 * v25;
          *(void *)(v6 + 144) = v26;
          uint64_t v27 = *(void *)(v6 + 168);
          long long v28 = (__int16 *)(v27 + v26);
          uint64_t v29 = *(void *)(v6 + 64);
          if (v29)
          {
            uint64_t v30 = v29 + 4 * v10;
            uint64_t v31 = v29 + 4 * v15;
            *(void *)(v6 + 144) = v31;
            LODWORD(v29) = *(unsigned __int16 *)(v27 + v30);
            uint64_t v32 = v27 + v31;
            unsigned int v33 = *((unsigned __int16 *)v110 + 3);
            int v34 = *(_DWORD *)(v6 + 72);
            unsigned int v35 = v34 * v108;
            unsigned int v36 = v33 - v34 * v108;
            unsigned __int16 v37 = v29 - v33 + v34 * v108;
            unsigned int v38 = *(unsigned __int16 *)(v27 + v31 + 2);
            unsigned int v39 = *(unsigned __int16 *)(v20 + 8);
            int v40 = v34 * v107;
            if (v39 - v40 >= v38) {
              unsigned __int16 v41 = 0;
            }
            else {
              unsigned __int16 v41 = v38 + v40 - v39;
            }
            unsigned __int16 v104 = v41;
            if (v36 < v29 && v37 != 0)
            {
              std::vector<unsigned short>::vector(md, v37);
              std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)v12, *v12, *(unsigned __int16 **)md, v120, ((uint64_t)v120 - *(void *)md) >> 1);
              if (*(void *)md)
              {
                unint64_t v120 = *(unsigned __int16 **)md;
                operator delete(*(void **)md);
              }
              unsigned int v33 = *((unsigned __int16 *)v110 + 3);
              int v40 = *(_DWORD *)(v6 + 72);
              unsigned int v39 = *(unsigned __int16 *)(v20 + 8);
              LODWORD(v29) = *(unsigned __int16 *)(v27 + v30);
              unsigned int v38 = *(unsigned __int16 *)(v32 + 2);
              unsigned int v35 = v40 * v108;
              LOWORD(v40) = v40 * v107;
            }
            unsigned __int16 v43 = v39 - v40;
            if (v35 <= v33) {
              unsigned __int16 v44 = v33 - v35;
            }
            else {
              unsigned __int16 v44 = 0;
            }
            if (v35 <= v39) {
              unsigned __int16 v45 = v43;
            }
            else {
              unsigned __int16 v45 = 0;
            }
            int v46 = *(char **)v13;
            if (v44 <= v29) {
              uint64_t v29 = v29;
            }
            else {
              uint64_t v29 = v44;
            }
            unint64_t v47 = v29 + *v28;
            if (v45 > v38) {
              unsigned int v38 = v45;
            }
            *(float *)md = (float)(int)(v28[v105 - 1] - v38);
            std::vector<float>::insert((uint64_t)v12, v46, v47, (char *)md);
            if (!v104) {
              goto LABEL_79;
            }
            std::vector<unsigned short>::vector(md, v104);
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)v12, *(char **)v13, *(unsigned __int16 **)md, v120, ((uint64_t)v120 - *(void *)md) >> 1);
            goto LABEL_77;
          }
          uint64_t v84 = *v12;
          int v85 = *(_DWORD *)(v6 + 72);
          unint64_t v86 = *((unsigned __int16 *)v110 + 3) + *v28 - v85 * v108;
          *(float *)md = (float)(v28[v105 - 1] + v85 * v107 - *(unsigned __int16 *)(v20 + 8));
          std::vector<float>::insert((uint64_t)v12, v84, v86, (char *)md);
        }
LABEL_79:
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG)
          || Diagnostics::s_log_level >= 7)
        {
          CC_SHA1(*v12, (*(_DWORD *)v13 - *v12) & 0xFFFFFFFC, md);
        }
        goto LABEL_84;
      }
      unint64_t v51 = v22 * v24
          - v25
          + (*(_DWORD *)(v6 + 72) * v108)
          + (unint64_t)(*(_DWORD *)(v6 + 72) * v14);
      uint64_t v5 = v109;
    }
    std::vector<float>::resize((uint64_t)v12, v51);
    goto LABEL_79;
  }
  while (1)
  {
    if (*(_DWORD *)v49 == 9)
    {
      uint64_t v50 = *(unsigned int *)(v49 + 4);
      if (v50 != 0x7FFFFFFF) {
        break;
      }
    }
    v49 += 56;
    if (v49 == v48) {
      goto LABEL_4;
    }
  }
  (*(void (**)(void, uint64_t, uint64_t))(***(void ***)(a1 + 24) + 24))(**(void **)(a1 + 24), v50, v7 + 120 * v3 + 56);
  uint64_t v83 = v7 + 120 * v3;
  *(_DWORD *)(v83 + 84) = 0;
  *(_DWORD *)(v83 + 88) = 0;
  if (*(unsigned char *)(v49 + 48)) {
    **(unsigned char **)(a1 + 32) = 1;
  }
LABEL_84:
  uint64_t v90 = v7 + 120 * v113;
  uint64_t v92 = *(void *)(v90 + 16);
  uint64_t v91 = v90 + 16;
  std::vector<int>::resize((std::vector<int> *)(v91 + 16), 0xD37A6F4DE9BD37A7 * ((v92 - *v112) >> 3));
  uint64_t v93 = *v112;
  int v94 = *(_DWORD *)(*v112 + 4);
  float v95 = **(float **)(a1 + 40);
  int v96 = (int)(float)(*(float *)(v7 + 120 * v113 + 84) * v95);
  float v97 = *(int **)(v91 + 16);
  int *v97 = v96;
  if ((v94 & 0x80000000) == 0)
  {
    unint64_t v98 = 0xD37A6F4DE9BD37A7 * ((*(void *)v91 - v93) >> 3);
    if (v98 >= 2)
    {
      unint64_t v99 = v98 - 1;
      uint64_t v100 = v97 + 1;
      int v101 = (float *)(v93 + 152);
      do
      {
        float v102 = *v101;
        v101 += 46;
        int v96 = (int)(float)((float)v96 + (float)(v102 * v95));
        *v100++ = v96;
        --v99;
      }
      while (v99);
    }
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D39E618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  long long v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(void *)(v26 - 112) = v28;
    operator delete(v28);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C2114C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &off_26C2114C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

void UnitSegmentStream::~UnitSegmentStream(UnitSegmentStream *this)
{
  *(void *)this = off_26C202208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v5 = (void **)((char *)this + 288);
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void **v5;
  uint64_t vars8;

  *(void *)this = off_26C202208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v5 = (void **)((char *)this + 288);
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  Module::~Module(this);
}

void SharedObjectPool::get<GeneratedPromptDB>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    SharedObjectPool::get<VoiceConfig>(&v8, (long long **)a2);
    uint64_t v5 = operator new(0x38uLL);
    v5[1] = 0;
    v5[2] = 0;
    void *v5 = off_26C2167C0;
    v10[0] = v8;
    v10[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    GeneratedPromptDB::GeneratedPromptDB((uint64_t)(v5 + 3), (uint64_t)v10, a2);
  }
  uint64_t v7 = *(void *)(*(void *)v6 + 16);
  *a1 = *(void *)(*(void *)v6 + 8);
  a1[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D39EAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v15);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::recursive_mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AudioExtractor>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 184);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 144);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<AudioExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AudioExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::ItemHolder<std::shared_ptr<GeneratedPromptDB>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206558;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<GeneratedPromptDB>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206558;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<FRBMatch>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 248);
  if (v2)
  {
    long long v3 = *(void ***)(a1 + 256);
    uint64_t v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        v3 -= 3;
        uint64_t v8 = v3;
        std::vector<FRBMatchGroupRecord>::__destroy_vector::operator()[abi:ne180100](&v8);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 248);
    }
    *(void *)(a1 + 256) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*(void **)(a1 + 232));
  uint64_t v5 = *(void **)(a1 + 200);
  if (v5)
  {
    *(void *)(a1 + 208) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::__map_value_compare<BinaryCounter const*,std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::less<BinaryCounter const*>,true>,std::allocator<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>>>::destroy(*(void **)(a1 + 184));
  uint64_t v6 = *(void **)(a1 + 152);
  if (v6)
  {
    *(void *)(a1 + 160) = v6;
    operator delete(v6);
  }
  uint64_t v8 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::__map_value_compare<BinaryCounter const*,std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::less<BinaryCounter const*>,true>,std::allocator<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::__map_value_compare<BinaryCounter const*,std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::less<BinaryCounter const*>,true>,std::allocator<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>>>::destroy(*a1);
    std::__tree<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::__map_value_compare<BinaryCounter const*,std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::less<BinaryCounter const*>,true>,std::allocator<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void std::vector<FRBMatchGroupRecord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<FRBMatchGroupRecord>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<FRBMatchGroupRecord>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__shared_ptr_emplace<FRBMatch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218E40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FRBMatch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<unsigned int>>>(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (void *)v5;
        unsigned int v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = result + 1;
LABEL_9:
    uint64_t v9 = (char *)operator new(0x40uLL);
    *((_DWORD *)v9 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 8);
    *((void *)v9 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    *uint64_t v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *uint64_t v4 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }
    __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t FRBMatch::check_counter_status(unsigned int *a1, unsigned int **a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v8 = **a2;
      *(_DWORD *)long long buf = 134218752;
      int v14 = a1;
      __int16 v15 = 1024;
      unsigned int v16 = v8;
      __int16 v17 = 1024;
      int v18 = v3;
      __int16 v19 = 1024;
      int v20 = v4;
      _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEBUG, "Cell Counter %p, Idx: %d, Min: %d, Max: %d", buf, 0x1Eu);
    }
    Diagnostics::log(7, "Cell Counter %p, Idx: %d, Min: %d, Max: %d", v7, a1, **a2, v3, v4);
  }
  unsigned int v9 = **a2;
  if (v9 <= v4 || v4 == 0) {
    unsigned int v11 = 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v9 >= v3) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t FRBMatch::counting(uint64_t a1, unsigned int *a2)
{
  unsigned int v4 = *a2;
  BOOL v5 = *a2 != 1 || a2[1] != 1;
  uint64_t v6 = (void *)(a1 + 160);
  uint64_t v7 = *(void **)(a1 + 160);
  if (!v7) {
    goto LABEL_15;
  }
  unsigned int v8 = (void *)(a1 + 160);
  unsigned int v9 = *(void **)(a1 + 160);
  do
  {
    unint64_t v10 = v9[4];
    BOOL v11 = v10 >= (unint64_t)a2;
    if (v10 >= (unint64_t)a2) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v9 + 1;
    }
    if (v11) {
      unsigned int v8 = v9;
    }
    unsigned int v9 = (void *)*v12;
  }
  while (*v12);
  if (v8 == v6 || v8[4] > (unint64_t)a2)
  {
LABEL_15:
    uint64_t v13 = (std::__shared_weak_count *)operator new(0x20uLL);
    int v14 = v13;
    v13->__shared_owners_ = 0;
    v13[1].__vftable = 0;
    __int16 v15 = (unsigned int *)&v13[1];
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)off_26C215B48;
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v16 = (void *)(a1 + 160);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v16 = v7;
          unint64_t v17 = v7[4];
          if (v17 <= (unint64_t)a2) {
            break;
          }
          uint64_t v7 = (void *)*v7;
          uint64_t v6 = v16;
          if (!*v16) {
            goto LABEL_22;
          }
        }
        if (v17 >= (unint64_t)a2) {
          break;
        }
        uint64_t v7 = (void *)v7[1];
        if (!v7)
        {
          uint64_t v6 = v16 + 1;
          goto LABEL_22;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    else
    {
LABEL_22:
      int v18 = operator new(0x38uLL);
      *(void *)&long long v19 = a2;
      *((void *)&v19 + 1) = v15;
      void v18[2] = v19;
      *((void *)v18 + 6) = v14;
      *(void *)int v18 = 0;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = v16;
      *uint64_t v6 = v18;
      uint64_t v20 = **(void **)(a1 + 152);
      if (v20)
      {
        *(void *)(a1 + 152) = v20;
        int v18 = (_OWORD *)*v6;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), (uint64_t *)v18);
      ++*(void *)(a1 + 168);
    }
    ++*v15;
    if (!v5)
    {
      HIDWORD(v14[1].__vftable) = 1;
      goto LABEL_33;
    }
    v26[0] = v15;
    v26[1] = (unsigned int *)v14;
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    HIDWORD(v14[1].__vftable) = FRBMatch::check_counter_status(a2, v26);
LABEL_31:
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
LABEL_33:
    uint64_t v22 = v15[1];
LABEL_34:
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    return v22;
  }
  __int16 v15 = (unsigned int *)v8[5];
  int v14 = (std::__shared_weak_count *)v8[6];
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v21 = *v15 + 1;
    unsigned int *v15 = v21;
    if (v5)
    {
      int v24 = v15;
      uint64_t v25 = v14;
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      v15[1] = FRBMatch::check_counter_status(a2, &v24);
      goto LABEL_31;
    }
    unsigned int v4 = *a2;
  }
  else
  {
    unsigned int v21 = *v15 + 1;
    unsigned int *v15 = v21;
    if (v5)
    {
      int v24 = v15;
      uint64_t v25 = 0;
      uint64_t v22 = FRBMatch::check_counter_status(a2, &v24);
      v15[1] = v22;
      return v22;
    }
  }
  if (v21 >= v4 && v21 <= a2[1]) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = 2;
  }
  v15[1] = v22;
  if (v14) {
    goto LABEL_34;
  }
  return v22;
}

void sub_20D39F424(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<FRMatchCounter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FRMatchCounter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FRBMatch::undoCounting(uint64_t a1, unsigned int *a2)
{
  BOOL v2 = *a2 != 1 || a2[1] != 1;
  BOOL v5 = *(void **)(a1 + 160);
  uint64_t v3 = (void *)(a1 + 160);
  unsigned int v4 = v5;
  if (v5)
  {
    uint64_t v6 = v3;
    do
    {
      unint64_t v7 = v4[4];
      BOOL v8 = v7 >= (unint64_t)a2;
      if (v7 >= (unint64_t)a2) {
        unsigned int v9 = v4;
      }
      else {
        unsigned int v9 = v4 + 1;
      }
      if (v8) {
        uint64_t v6 = v4;
      }
      unsigned int v4 = (void *)*v9;
    }
    while (*v9);
    if (v6 != v3 && v6[4] <= (unint64_t)a2)
    {
      BOOL v11 = (unsigned int *)v6[5];
      uint64_t v10 = v6[6];
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      if (*v11) {
        --*v11;
      }
      if (v2)
      {
        v12[0] = v11;
        v12[1] = (unsigned int *)v10;
        if (!v10)
        {
          v11[1] = FRBMatch::check_counter_status(a2, v12);
          return;
        }
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        v11[1] = FRBMatch::check_counter_status(a2, v12);
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
      }
      else
      {
        v11[1] = 1;
        if (!v10) {
          return;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
    }
  }
}

void FRBMatchGroupRecord::~FRBMatchGroupRecord(FRBMatchGroupRecord *this)
{
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  __int16 v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_20D39F79C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20D39F7A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 std::allocator<FRBMatchGroupRecord>::construct[abi:ne180100]<FRBMatchGroupRecord,FRBMatchGroupRecord const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  std::string::size_type v5 = *((void *)a2 + 8);
  this[2].__r_.__value_.__r.__words[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)((char *)a2 + 72);
  *(__n128 *)&this[3].__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_20D39F848(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<FRBMatchGroupRecord>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    std::allocator<FRBMatchGroupRecord>::destroy[abi:ne180100](i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void FRBMatch::rollback_to_previous_matched_buffer(FRBMatch *this)
{
  if (*((unsigned char *)this + 56))
  {
    uint64_t v1 = this;
    uint64_t v2 = *((void *)this + 16);
    for (uint64_t i = *((void *)this + 17); v2 != i; *((void *)v1 + 17) = i)
    {
      uint64_t v5 = i - 8;
      int v4 = *(_DWORD *)(i - 8);
      unint64_t v6 = *(int *)(i - 4);
      int v7 = *((_DWORD *)v1 + 10);
      uint64_t v8 = i - v2;
      if ((unint64_t)(i - v2) >= 9)
      {
        int v9 = *((_DWORD *)v1 + 15);
        BOOL v10 = v9 == v7 && v4 == v9;
        uint64_t i = v5;
        if (v10) {
          continue;
        }
      }
      uint64_t v12 = *((void *)v1 + 28);
      uint64_t v11 = *((void *)v1 + 29);
      if (0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3) <= v4) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v13 = (uint64_t *)(v12 + 24 * v4);
      uint64_t v14 = *v13;
      unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((v13[1] - *v13) >> 3);
      if (v15 <= v6) {
        goto LABEL_173;
      }
      if (v8 == 8 && v4 == v7)
      {
        unint64_t v16 = *((int *)v1 + 11);
        if (v15 <= v16) {
LABEL_173:
        }
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        if (v12 == v11) {
          goto LABEL_160;
        }
        uint64_t v17 = v14 + 88 * (int)v16;
        unint64_t v20 = *(void *)(v17 + 72);
        long long v19 = (_DWORD *)(v17 + 72);
        unsigned int v18 = v20;
        uint64_t v21 = v14 + 88 * (int)v6;
        unint64_t v22 = *(void *)(v21 + 72);
        std::string::size_type v128 = (_DWORD *)(v21 + 72);
        *(_OWORD *)&v137[12] = 0u;
        if (v20 >= v22) {
          unsigned int v23 = v22;
        }
        else {
          unsigned int v23 = v18;
        }
        long long v136 = 0uLL;
        *(_OWORD *)long long v137 = 0uLL;
        std::string::operator=((std::string *)&v136, (const std::string *)(v14 + 88 * (int)v16));
        uint64_t v24 = v14 + 88 * (int)v16;
        uint64_t v26 = *(void *)(v24 + 56);
        uint64_t v25 = *(void *)(v24 + 64);
        if (v25) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v27 = *(std::__shared_weak_count **)&v137[16];
        *(void *)&v137[8] = v26;
        *(void *)&v137[16] = v25;
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        *(_DWORD *)&v137[24] = *v19 - 1;
        memset(v135, 0, 44);
        std::string::operator=(v135, (const std::string *)(v14 + 88 * (int)v6));
        uint64_t v28 = v14 + 88 * (int)v6;
        std::string::size_type v30 = *(void *)(v28 + 56);
        std::string::size_type v29 = *(void *)(v28 + 64);
        if (v29) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::size_type size = (std::__shared_weak_count *)v135[1].__r_.__value_.__l.__size_;
        v135[1].__r_.__value_.__r.__words[0] = v30;
        v135[1].__r_.__value_.__l.__size_ = v29;
        if (size) {
          std::__shared_weak_count::__release_shared[abi:ne180100](size);
        }
        LODWORD(v135[1].__r_.__value_.__r.__words[2]) = *v128 - 1;
        uint64_t v32 = v14 + 88 * (int)v6;
        int v33 = *(_DWORD *)(v32 + 80);
        uint64_t v34 = *(void *)(v32 + 48);
        unsigned int v35 = (char *)operator new(0x10uLL);
        int v123 = v16;
        unsigned int v36 = (int *)(v35 + 16);
        *(_DWORD *)unsigned int v35 = v33;
        std::string v133 = (int *)v35;
        *((void *)v35 + 1) = v34;
        if ((v23 & 0x80000000) != 0)
        {
          unint64_t v16 = 0;
          std::string __p = 0;
          goto LABEL_123;
        }
        uint64_t v122 = v14;
        std::string __p = 0;
        unint64_t v16 = 0;
        unint64_t v125 = 0;
        char v127 = (int *)(v35 + 16);
        while (1)
        {
          uint64_t v37 = *((void *)v1 + 28);
          if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v1 + 29) - v37) >> 3) <= v23) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v131 = v23;
          char v129 = (void *)(v37 + 24 * v23 + 8);
          float v130 = (uint64_t *)(v37 + 24 * v23);
          uint64_t v38 = *v130;
          if (*v129 != *v130) {
            break;
          }
LABEL_107:
          unsigned int v23 = v131 - 1;
          uint64_t v1 = this;
          if ((int)v131 <= 0)
          {
LABEL_118:
            uint64_t v14 = v122;
            if (v133 == v36)
            {
LABEL_140:
              unint64_t v107 = (uint64_t)(v16 - (void)__p) >> 4;
              unsigned int v108 = ((v16 - (unint64_t)__p) >> 4) - 1;
              LODWORD(v16) = v123;
              while ((v108 & 0x80000000) == 0)
              {
                if (v107 <= v108) {
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                }
                unint64_t v109 = &__p[16 * v108];
                unint64_t v110 = *(int *)v109 + 2;
                uint64_t v111 = *((void *)v1 + 9);
                if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v1 + 10) - v111) >> 3) <= v110) {
LABEL_167:
                }
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                std::string::push_back((std::string *)(v111 + 24 * v110), v109[4]);
                if (*(int *)v109 >= 1)
                {
                  unint64_t v112 = (std::string *)*((void *)v1 + 9);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v1 + 10) - (void)v112) >> 3) < 3) {
                    goto LABEL_167;
                  }
                  std::string::push_back(v112 + 2, v109[4]);
                }
                --v108;
                FRBMatch::counting((uint64_t)v1, *((unsigned int **)v109 + 1));
              }
              if (__p) {
                operator delete(__p);
              }
              if (v133) {
                operator delete(v133);
              }
              if (v135[1].__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v135[1].__r_.__value_.__l.__size_);
              }
              if (SHIBYTE(v135[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v135[0].__r_.__value_.__l.__data_);
              }
              if (*(void *)&v137[16]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v137[16]);
              }
              if ((v137[7] & 0x80000000) != 0) {
                operator delete((void *)v136);
              }
LABEL_160:
              uint64_t v113 = v14 + 88 * (int)v16;
              uint64_t v115 = *(int *)(v113 + 80);
              unint64_t v114 = (int *)(v113 + 80);
              uint64_t v116 = v115 + 2;
              uint64_t v117 = *((void *)v1 + 9);
              if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v1 + 10) - v117) >> 3) > v115 + 2)
              {
                uint64_t v118 = v14 + 88 * (int)v16;
                std::string::value_type v120 = *(unsigned char *)(v118 + 84);
                unint64_t v119 = (std::string::value_type *)(v118 + 84);
                std::string::push_back((std::string *)(v117 + 24 * v116), v120);
                if (*v114 < 1) {
                  goto LABEL_164;
                }
                uint64_t v121 = (std::string *)*((void *)v1 + 9);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v1 + 10) - (void)v121) >> 3) > 2)
                {
                  std::string::push_back(v121 + 2, *v119);
                  goto LABEL_164;
                }
              }
LABEL_172:
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            }
LABEL_123:
            int v96 = v133;
            while (2)
            {
              uint64_t v97 = *v96;
              uint64_t v98 = *((void *)v1 + 9);
              if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v1 + 10) - v98) >> 3) <= v97 + 2) {
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              }
              unint64_t v99 = (unsigned int *)*((void *)v96 + 1);
              uint64_t v100 = (uint64_t *)(v98 + 24 * (v97 + 2));
              if (*((char *)v100 + 23) < 0)
              {
                uint64_t v102 = v100[1];
                if (v102)
                {
                  uint64_t v101 = v102 - 1;
                  v100[1] = v101;
                  uint64_t v100 = (uint64_t *)*v100;
LABEL_130:
                  *((unsigned char *)v100 + v101) = 0;
                }
              }
              else if (*((unsigned char *)v100 + 23))
              {
                uint64_t v101 = *((unsigned __int8 *)v100 + 23) - 1;
                *((unsigned char *)v100 + 23) = v101;
                goto LABEL_130;
              }
              if ((int)v97 >= 1)
              {
                uint64_t v103 = *((void *)v1 + 9);
                if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v1 + 10) - v103) >> 3) <= 2) {
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                }
                if (*(char *)(v103 + 71) < 0)
                {
                  uint64_t v106 = *(void *)(v103 + 56);
                  if (v106)
                  {
                    uint64_t v105 = v106 - 1;
                    uint64_t v104 = *(void *)(v103 + 48);
                    *(void *)(v103 + 56) = v105;
LABEL_138:
                    *(unsigned char *)(v104 + v105) = 0;
                  }
                }
                else if (*(unsigned char *)(v103 + 71))
                {
                  uint64_t v104 = v103 + 48;
                  uint64_t v105 = *(unsigned __int8 *)(v103 + 71) - 1;
                  *(unsigned char *)(v103 + 71) = v105;
                  goto LABEL_138;
                }
              }
              FRBMatch::undoCounting((uint64_t)v1, v99);
              v96 += 4;
              if (v96 == v36) {
                goto LABEL_140;
              }
              continue;
            }
          }
        }
        unint64_t v39 = 0;
        int v126 = 0;
        char v132 = 0;
        while (2)
        {
          int v40 = (const std::string *)(v38 + 88 * v39);
          unsigned __int16 v41 = (uint64_t *)&v40[1];
          p_std::string::size_type size = (uint64_t *)&v40[1].__r_.__value_.__l.__size_;
          if (*(void *)v128 <= v131
            || (uint64_t v43 = v38 + 88 * v39,
                uint64_t v45 = *(void *)(v43 + 72),
                unsigned __int16 v44 = (_DWORD *)(v43 + 72),
                v45 != SLODWORD(v135[1].__r_.__value_.__r.__words[2]))
            || std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*v41, v40[1].__r_.__value_.__l.__size_, (unsigned __int8 **)v135) == *p_size)
          {
            int v50 = 0;
          }
          else
          {
            std::string::operator=(v135, (const std::string *)(v38 + 88 * v39));
            uint64_t v46 = v38 + 88 * v39;
            std::string::size_type v48 = *(void *)(v46 + 56);
            std::string::size_type v47 = *(void *)(v46 + 64);
            if (v47) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v49 = (std::__shared_weak_count *)v135[1].__r_.__value_.__l.__size_;
            v135[1].__r_.__value_.__r.__words[0] = v48;
            v135[1].__r_.__value_.__l.__size_ = v47;
            if (v49) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v49);
            }
            LODWORD(v135[1].__r_.__value_.__r.__words[2]) = *v44 - 1;
            int v50 = 1;
          }
          uint64_t v51 = v38 + 88 * v39;
          uint64_t v53 = *(void *)(v51 + 72);
          unsigned __int16 v52 = (_DWORD *)(v51 + 72);
          if (v53 != *(int *)&v137[24]
            || std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*v41, *p_size, (unsigned __int8 **)&v136) == *p_size)
          {
            if (v132 & 1 | ((v50 & 1) == 0))
            {
              v132 |= v50;
            }
            else
            {
              uint64_t v62 = v38 + 88 * v39;
              int v63 = *(_DWORD *)(v62 + 80);
              uint64_t v64 = *(void *)(v62 + 48);
              if (v36 >= v127)
              {
                unsigned int v66 = __p;
                uint64_t v72 = ((char *)v36 - (char *)v133) >> 4;
                unint64_t v73 = v72 + 1;
                if ((unint64_t)(v72 + 1) >> 60) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                if (((char *)v127 - (char *)v133) >> 3 > v73) {
                  unint64_t v73 = ((char *)v127 - (char *)v133) >> 3;
                }
                if ((unint64_t)((char *)v127 - (char *)v133) >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v74 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v74 = v73;
                }
                if (v74) {
                  unint64_t v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v74);
                }
                else {
                  uint64_t v75 = 0;
                }
                unint64_t v80 = v74 + 16 * v72;
                *(_DWORD *)unint64_t v80 = v63;
                *(void *)(v80 + 8) = v64;
                if (v36 == v133)
                {
                  unint64_t v82 = v74 + 16 * v72;
                }
                else
                {
                  unint64_t v81 = v74 + 16 * v72;
                  do
                  {
                    unint64_t v82 = v81 - 16;
                    *(_OWORD *)(v81 - 16) = *((_OWORD *)v36 - 1);
                    v36 -= 4;
                    v81 -= 16;
                  }
                  while (v36 != v133);
                }
                char v127 = (int *)(v74 + 16 * v75);
                unsigned int v36 = (int *)(v80 + 16);
                if (v133) {
                  operator delete(v133);
                }
                char v132 = 1;
                uint64_t v65 = (int *)v82;
                goto LABEL_54;
              }
              int *v36 = v63;
              *((void *)v36 + 1) = v64;
              v36 += 4;
              char v132 = 1;
            }
          }
          else
          {
            std::string::operator=((std::string *)&v136, v40);
            uint64_t v54 = v38 + 88 * v39;
            uint64_t v56 = *(void *)(v54 + 56);
            uint64_t v55 = *(void *)(v54 + 64);
            if (v55) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
            }
            unint64_t v57 = *(std::__shared_weak_count **)&v137[16];
            *(void *)&v137[8] = v56;
            *(void *)&v137[16] = v55;
            if (v57) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v57);
            }
            *(_DWORD *)&v137[24] = *v52 - 1;
            if (((v50 | v126) & 1) == 0)
            {
              uint64_t v58 = v38 + 88 * v39;
              int v60 = *(_DWORD *)(v58 + 80);
              int v59 = *(_DWORD *)(v58 + 84);
              uint64_t v61 = *(void *)(v58 + 48);
              if (v16 < v125)
              {
                *(_DWORD *)unint64_t v16 = v60;
                *(_DWORD *)(v16 + 4) = v59;
                *(void *)(v16 + 8) = v61;
                v16 += 16;
                int v126 = 1;
                break;
              }
              uint64_t v65 = v133;
              uint64_t v76 = (uint64_t)(v16 - (void)__p) >> 4;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 60) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v125 - (void)__p) >> 3 > v77) {
                unint64_t v77 = (uint64_t)(v125 - (void)__p) >> 3;
              }
              if (v125 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v77;
              }
              if (v78) {
                unint64_t v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v78);
              }
              else {
                uint64_t v79 = 0;
              }
              unint64_t v83 = v78 + 16 * v76;
              *(_DWORD *)unint64_t v83 = v60;
              *(_DWORD *)(v83 + 4) = v59;
              *(void *)(v83 + 8) = v61;
              if ((char *)v16 == __p)
              {
                unint64_t v85 = v78 + 16 * v76;
              }
              else
              {
                unint64_t v84 = v78 + 16 * v76;
                do
                {
                  unint64_t v85 = v84 - 16;
                  *(_OWORD *)(v84 - 16) = *(_OWORD *)(v16 - 16);
                  v16 -= 16;
                  v84 -= 16;
                }
                while ((char *)v16 != __p);
              }
              unint64_t v125 = v78 + 16 * v79;
              unint64_t v16 = v83 + 16;
              if (__p) {
                operator delete(__p);
              }
              int v126 = 1;
              unsigned int v66 = (char *)v85;
LABEL_54:
              uint64_t v67 = v137[7];
              if (v137[7] >= 0) {
                uint64_t v68 = v137[7];
              }
              else {
                uint64_t v68 = *((void *)&v136 + 1);
              }
              std::string::size_type v69 = HIBYTE(v135[0].__r_.__value_.__r.__words[2]);
              if ((v135[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v69 = v135[0].__r_.__value_.__l.__size_;
              }
              std::string v133 = v65;
              std::string __p = v66;
              if (v68 == v69)
              {
                if ((v135[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unsigned int v70 = v135;
                }
                else {
                  unsigned int v70 = (std::string *)v135[0].__r_.__value_.__r.__words[0];
                }
                if ((v137[7] & 0x80) != 0)
                {
                  if (memcmp((const void *)v136, v70, *((size_t *)&v136 + 1))) {
                    goto LABEL_71;
                  }
                }
                else if (v137[7])
                {
                  unsigned int v71 = (unsigned __int8 *)&v136;
                  while (*v71 == v70->__r_.__value_.__s.__data_[0])
                  {
                    ++v71;
                    unsigned int v70 = (std::string *)((char *)v70 + 1);
                    if (!--v67) {
                      goto LABEL_70;
                    }
                  }
                  goto LABEL_71;
                }
LABEL_70:
                if (*(_DWORD *)&v137[24] == LODWORD(v135[1].__r_.__value_.__r.__words[2]))
                {
                  uint64_t v1 = this;
                  goto LABEL_118;
                }
              }
LABEL_71:
              ++v39;
              uint64_t v38 = *v130;
              if (0x2E8BA2E8BA2E8BA3 * ((*v129 - *v130) >> 3) <= v39) {
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        uint64_t v65 = v133;
        unsigned int v66 = __p;
        goto LABEL_54;
      }
      uint64_t v86 = v14 + 88 * (int)v6;
      uint64_t v88 = *(int *)(v86 + 80);
      int v87 = (int *)(v86 + 80);
      uint64_t v89 = v88 + 2;
      uint64_t v90 = *((void *)v1 + 9);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v1 + 10) - v90) >> 3) <= v88 + 2) {
        goto LABEL_172;
      }
      uint64_t v91 = (uint64_t *)(v90 + 24 * v89);
      if (*((char *)v91 + 23) < 0)
      {
        uint64_t v92 = v91[1] - 1;
        v91[1] = v92;
        uint64_t v91 = (uint64_t *)*v91;
      }
      else
      {
        uint64_t v92 = *((unsigned __int8 *)v91 + 23) - 1;
        *((unsigned char *)v91 + 23) = v92 & 0x7F;
      }
      *((unsigned char *)v91 + v92) = 0;
      if (*v87 >= 1)
      {
        uint64_t v93 = *((void *)v1 + 9);
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v1 + 10) - v93) >> 3) <= 2) {
          goto LABEL_172;
        }
        if (*(char *)(v93 + 71) < 0)
        {
          uint64_t v94 = *(void *)(v93 + 48);
          uint64_t v95 = *(void *)(v93 + 56) - 1;
          *(void *)(v93 + 56) = v95;
        }
        else
        {
          uint64_t v94 = v93 + 48;
          uint64_t v95 = *(unsigned __int8 *)(v93 + 71) - 1;
          *(unsigned char *)(v93 + 71) = v95 & 0x7F;
        }
        *(unsigned char *)(v94 + v95) = 0;
      }
LABEL_164:
      uint64_t v2 = *((void *)v1 + 16);
      uint64_t i = *((void *)v1 + 17) - 8;
    }
  }
}

void sub_20D3A0274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair((uint64_t)va);
  std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair(v15 - 144);
  _Unwind_Resume(a1);
}

std::string *FRBMatch::set_rule(uint64_t a1, int a2, std::string *__str)
{
  *(_DWORD *)(a1 + 120) = a2;
  *(unsigned char *)(a1 + 56) = 1;
  __n128 result = std::string::operator=((std::string *)(a1 + 16), __str);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  unint64_t v5 = *(unsigned int *)(a1 + 60);
  *(_DWORD *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a1 + 224);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 232) - v6) >> 3);
  if (v7 == v5)
  {
    int v8 = 0;
  }
  else
  {
    if (v7 <= v5) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    int v8 = -1171354717
       * ((*(void *)(v6 + 24 * v5 + 8) - *(void *)(v6 + 24 * v5)) >> 3)
       - 1;
  }
  *(_DWORD *)(a1 + 44) = v8;
  return result;
}

void Agglomerate::ItemHolder<GrammaticalNumberRules>::~ItemHolder(void *a1)
{
  *a1 = off_26C206298;
  GrammaticalNumberRules::~GrammaticalNumberRules((GrammaticalNumberRules *)(a1 + 1));
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<GrammaticalNumberRules>::~ItemHolder(void *a1)
{
  *a1 = off_26C206298;
  GrammaticalNumberRules::~GrammaticalNumberRules((GrammaticalNumberRules *)(a1 + 1));
  return a1;
}

void NormExec::normalize_group(uint64_t a1, const std::string::value_type ****a2, uint64_t a3)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 24) + 96))(v26);
  if (SHIBYTE(v30) < 0)
  {
    if (v29 != 8) {
      goto LABEL_24;
    }
    uint64_t v6 = v28;
  }
  else
  {
    if (SHIBYTE(v30) != 8) {
      goto LABEL_24;
    }
    uint64_t v6 = &v28;
  }
  if (*v6 == 0x4C414E4944524143)
  {
    memset(&v25, 0, sizeof(v25));
    unint64_t v7 = *a2;
    int v8 = a2[1];
    while (v7 != v8)
    {
      int v9 = *((char *)*v7 + 23);
      if (v9 >= 0) {
        BOOL v10 = (const std::string::value_type *)*v7;
      }
      else {
        BOOL v10 = **v7;
      }
      if (v9 >= 0) {
        std::string::size_type v11 = *((unsigned __int8 *)*v7 + 23);
      }
      else {
        std::string::size_type v11 = (std::string::size_type)(*v7)[1];
      }
      std::string::append(&v25, v10, v11);
      v7 += 3;
    }
    uint64_t v12 = *(void *)(a1 + 24);
    std::string::basic_string[abi:ne180100]<0>(__p, "INTEGER");
    (*(void (**)(void **__return_ptr, uint64_t, std::string *, void **))(*(void *)v12 + 80))(v23, v12, &v25, __p);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = *(void *)(a1 + 56);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
    GrammaticalNumberRules::update_number(v13, a1 + 64, (uint64_t)v23, (uint64_t)__p);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
LABEL_24:
  unint64_t v14 = *(void *)(a3 + 8);
  if (v14 >= *(void *)(a3 + 16))
  {
    unint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, (long long *)v26);
  }
  else
  {
    if (SHIBYTE(v27) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), (const std::string::value_type *)v26[0], (std::string::size_type)v26[1]);
    }
    else
    {
      long long v15 = *(_OWORD *)v26;
      *(void *)(v14 + 16) = v27;
      *(_OWORD *)unint64_t v14 = v15;
    }
    unint64_t v16 = v14 + 24;
    *(void *)(a3 + 8) = v16;
  }
  *(void *)(a3 + 8) = v16;
  unsigned int v18 = *a2;
  std::string::size_type v17 = (std::string::size_type)a2[1];
  if (v17 - (void)*a2 != 24)
  {
    unint64_t v19 = 0;
    unint64_t v20 = (long long *)(a1 + 32);
    do
    {
      if (v16 >= *(void *)(a3 + 16))
      {
        unint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, v20);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, v20);
        v16 += 24;
      }
      *(void *)(a3 + 8) = v16;
      ++v19;
      unsigned int v18 = *a2;
      std::string::size_type v17 = (std::string::size_type)a2[1];
    }
    while (v19 < -1 - 0x5555555555555555 * ((uint64_t)(v17 - (void)*a2) >> 3));
  }
  while ((const std::string::value_type ***)v17 != v18)
  {
    v17 -= 24;
    v25.__r_.__value_.__r.__words[0] = v17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  }
  a2[1] = v18;
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v28);
  }
}

void sub_20D3A06FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  *(void *)(v39 + 8) = v40;
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(uint64_t *a1, long long **a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  unint64_t v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  int v8 = (std::string *)&v7[24 * v2];
  std::string::size_type v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  unint64_t v19 = &v7[24 * v6];
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v8, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v9 = v18.i64[0];
  uint64_t v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  uint64_t v12 = (void *)*a1;
  std::string::size_type v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      v9 -= 24;
      *(void *)(v9 + 16) = 0;
      long long v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 16) = v11[2];
      *std::string::size_type v11 = 0;
      v11[1] = 0;
      void v11[2] = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  int64x2_t v18 = v14;
  long long v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  unint64_t v19 = v15;
  std::string::size_type v17 = (char *)v14.i64[0];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_20D3A0910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    int v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    unint64_t v6 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void NashvilleFEPersistentModule::~NashvilleFEPersistentModule(NashvilleFEPersistentModule *this)
{
  NashvilleFEPersistentModule::~NashvilleFEPersistentModule(this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t i;
  std::__shared_weak_count *v3;
  void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  void **v13;
  uint64_t vars8;

  *(void *)this = off_26C204690;
  for (uint64_t i = *((void *)this + 53); *((void *)this + 52) != i; uint64_t i = *((void *)this + 53))
  {
    int v4 = *(void **)(i - 16);
    uint64_t v3 = *(std::__shared_weak_count **)(i - 8);
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t i = *((void *)this + 53);
      unint64_t v5 = *(std::__shared_weak_count **)(i - 8);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
    *((void *)this + 53) = i - 16;
    NashvilleFEPersistentModule::unload_resource(this, v4, v3);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  long long v13 = (void **)((char *)this + 416);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v13);
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::string::size_type v11 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void NashvilleFEPersistentModule::unload_resource(void *a1, void *lpsrc, std::__shared_weak_count *a3)
{
  if (!lpsrc) {
    return;
  }
  if (!v5) {
    return;
  }
  uint64_t v10 = v5;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v11 = (uint64_t *)*((void *)v5 + 1);
  if (v11)
  {
    ve_ttsResourceUnload(*(void *)(a1[37] + 280), *(void *)(a1[37] + 288), v11, *((void *)v5 + 2), v6, v7, v8, v9);
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v23[0] = 0;
      _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_ERROR, "Ignore invalid resource handle", (uint8_t *)v23, 2u);
    }
    Diagnostics::log(3, "Ignore invalid resource handle", v13);
  }
  int64x2_t v14 = (long long *)a1[52];
  long long v15 = (long long *)a1[53];
  if (v14 == v15) {
    goto LABEL_20;
  }
  while (1)
  {
    if (!*(void *)v14) {
      goto LABEL_19;
    }
    if (!v16) {
      goto LABEL_19;
    }
    std::string::size_type v17 = (std::__shared_weak_count *)*((void *)v14 + 1);
    if (!v17) {
      break;
    }
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v10[1] == v16[1])
    {
      long long v15 = (long long *)a1[53];
      int64x2_t v18 = v17;
      goto LABEL_25;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    long long v15 = (long long *)a1[53];
LABEL_19:
    if (++v14 == v15) {
      goto LABEL_20;
    }
  }
  if (v10[1] != v16[1]) {
    goto LABEL_19;
  }
  int64x2_t v18 = 0;
LABEL_25:
  unint64_t v19 = v14 + 1;
  if (v14 + 1 != v15)
  {
    do
    {
      int64x2_t v14 = v19;
      long long v20 = *v19;
      *(void *)unint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      uint64_t v21 = (std::__shared_weak_count *)*((void *)v19 - 1);
      *(v19 - 1) = v20;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      unint64_t v19 = v14 + 1;
    }
    while (v14 + 1 != v15);
    long long v15 = (long long *)a1[53];
  }
  while (v15 != v14)
  {
    char v22 = (std::__shared_weak_count *)*((void *)v15 - 1);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    --v15;
  }
  a1[53] = v14;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
LABEL_20:
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
}

void sub_20D3A0D64(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void NashvilleFEModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 432) = 0;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(__p, *(void *)(v4 + 8));
    uint64_t v6 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(__p, *(void *)(v4 + 8));
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  memset(v79, 0, sizeof(v79));
  uint64_t v9 = *(void *)(a1 + 304);
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v77 = *a2;
  unint64_t v78 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 24))(v9, &v77);
  if (v78) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v78);
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 304) + 16))(__p);
  uint64_t v16 = *(void *)(*(void *)v11 + 8);
  std::string::size_type v17 = *(std::__shared_weak_count **)(*(void *)v11 + 16);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (__p[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
  }
  uint64_t v18 = *(void *)(a1 + 272);
  LOWORD(v80) = 1;
  ve_ttsGetLanguageList(*(void *)(v18 + 264), *(void *)(v18 + 272), (char *)buf, &v80, v12, v13, v14, v15);
  memcpy(__p, buf, 0x104uLL);
  std::string::basic_string[abi:ne180100]<0>(v75, &__p[5].__r_.__value_.__s.__data_[8]);
  UTFRegex::UTFRegex((UTFRegex *)v74, **(const UTFRegex ***)(a1 + 448));
  SiriTTS::preprocess_for_vendor_voice(__p, (const void **)v75, (UTFRegex *)v74, v16, (void **)(a1 + 520));
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  long long v19 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(void *)(v16 + 16) = *((void *)&__p[0].__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v16 = v19;
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 0;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  UTFRegex::~UTFRegex((UTFRegex *)v74);
  *(void *)&long long __str = v16;
  *((void *)&__str + 1) = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v20 = (std::__shared_weak_count *)operator new(0x30uLL);
  uint64_t v21 = v20;
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_26C219888;
  v20[1].__vftable = 0;
  uint64_t v22 = (uint64_t)&v20[1];
  v20[1].__shared_owners_ = 0;
  v20[1].__shared_weak_owners_ = 0;
  if (!*(unsigned char *)(a1 + 496))
  {
    *(_DWORD *)(v16 + 48) = 0;
    std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100]((uint64_t)&v20[1], &__str);
    goto LABEL_131;
  }
  unsigned int v23 = *(UTFRegex **)(a1 + 448);
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
  int v24 = *(char *)(v16 + 23);
  if (v24 >= 0) {
    std::string v25 = (const char *)v16;
  }
  else {
    std::string v25 = *(const char **)v16;
  }
  if (v24 >= 0) {
    int64_t v26 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    int64_t v26 = *(void *)(v16 + 8);
  }
  uint64_t v27 = utext_openUTF8(0, v25, v26, (UErrorCode *)__p);
  if (SLODWORD(__p[0].__r_.__value_.__l.__data_) <= 0) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  UTFRegex::set_text(v23, v28, 1);
  std::string::size_type v69 = v17;
  uint64_t v29 = 0;
  int v70 = 0;
  while (UTFRegex::search(*(URegularExpression ***)(a1 + 448)))
  {
    uint64_t v30 = *(URegularExpression ***)(a1 + 448);
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    uint64_t v31 = uregex_start(*v30, 0, (UErrorCode *)__p);
    uint64_t v32 = *(URegularExpression ***)(a1 + 448);
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    uint64_t v33 = uregex_end(*v32, 0, (UErrorCode *)__p);
    UTFRegex::group<std::basic_string<char16_t>>((uint64_t)__p, *(URegularExpression ***)(a1 + 448), 1);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v34 = (const UChar *)__p;
    }
    else {
      uint64_t v34 = (const UChar *)__p[0].__r_.__value_.__r.__words[0];
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int32_t v35 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    }
    else {
      int32_t v35 = __p[0].__r_.__value_.__r.__words[1];
    }
    UTFString::to_utf8(buf, v34, v35);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    UTFRegex::group<std::basic_string<char16_t>>((uint64_t)__p, *(URegularExpression ***)(a1 + 448), 2);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v36 = (const UChar *)__p;
    }
    else {
      unsigned int v36 = (const UChar *)__p[0].__r_.__value_.__r.__words[0];
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int32_t v37 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    }
    else {
      int32_t v37 = __p[0].__r_.__value_.__r.__words[1];
    }
    UTFString::to_utf8(&v83, v36, v37);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (!v31) {
        goto LABEL_73;
      }
LABEL_56:
      uint64_t v38 = (char *)operator new(0x50uLL);
      *((void *)v38 + 1) = 0;
      *((void *)v38 + 2) = 0;
      *(void *)uint64_t v38 = off_26C215720;
      *(_OWORD *)(v38 + 24) = 0u;
      uint64_t v39 = (void **)(v38 + 24);
      *(_OWORD *)(v38 + 40) = 0u;
      *(_OWORD *)(v38 + 56) = 0u;
      *((void *)v38 + 9) = 0;
      *(void *)&long long v82 = v38 + 24;
      *((void *)&v82 + 1) = v38;
      if ((*((unsigned char *)&buf[0].__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (HIBYTE(buf[0].__r_.__value_.__r.__words[2]) == 2)
        {
          uint64_t v40 = buf;
          goto LABEL_61;
        }
        goto LABEL_71;
      }
      if (buf[0].__r_.__value_.__l.__size_ != 2) {
        goto LABEL_71;
      }
      uint64_t v40 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      if (LOWORD(v40->__r_.__value_.__l.__data_) != 28276) {
        goto LABEL_62;
      }
LABEL_61:
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v83.__r_.__value_.__l.__size_ != 5) {
          goto LABEL_62;
        }
        uint64_t v42 = (std::string *)v83.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) != 5) {
          goto LABEL_62;
        }
        uint64_t v42 = &v83;
      }
      int data = (int)v42->__r_.__value_.__l.__data_;
      int v45 = v42->__r_.__value_.__s.__data_[4];
      if (data == 1818587251 && v45 == 108)
      {
        std::string::basic_string(__p, (const std::string *)__str, (int)v29, (int)v31 - (int)v29, (std::allocator<char> *)&v80);
        NashvilleFEModule::update_spell_text((uint64_t)&v80, a1, __p);
        if (v38[47] < 0) {
          operator delete(*v39);
        }
        *(_OWORD *)uint64_t v39 = v80;
        *((void *)v38 + 5) = v81;
        MEMORY[0x210558E70](v38 + 48, &byte_20D5A22AE);
        *((_DWORD *)v38 + 18) = v29;
        std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](v22, &v82);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        int v70 = 1;
      }
      else
      {
LABEL_62:
        if ((*((unsigned char *)&buf[0].__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (buf[0].__r_.__value_.__l.__size_ != 2) {
            goto LABEL_71;
          }
          unsigned __int16 v41 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
        }
        else
        {
          if (HIBYTE(buf[0].__r_.__value_.__r.__words[2]) != 2) {
            goto LABEL_71;
          }
          unsigned __int16 v41 = buf;
        }
        if (LOWORD(v41->__r_.__value_.__l.__data_) != 28276) {
          goto LABEL_71;
        }
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v83.__r_.__value_.__l.__size_ != 6) {
            goto LABEL_71;
          }
          uint64_t v43 = (std::string *)v83.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) != 6) {
            goto LABEL_71;
          }
          uint64_t v43 = &v83;
        }
        int v47 = (int)v43->__r_.__value_.__l.__data_;
        int v48 = WORD2(v43->__r_.__value_.__r.__words[0]);
        BOOL v49 = v47 == 1836216174 && v48 == 27745;
        BOOL v50 = v49;
        if ((v50 & v70) == 1)
        {
          std::string::basic_string(__p, (const std::string *)__str, (int)v29, (int)v33 - (int)v29, (std::allocator<char> *)&v80);
          NashvilleFEModule::update_spell_text((uint64_t)&v80, a1, __p);
          if (v38[47] < 0) {
            operator delete(*v39);
          }
          *(_OWORD *)uint64_t v39 = v80;
          *((void *)v38 + 5) = v81;
          MEMORY[0x210558E70](v38 + 48, &byte_20D5A22AE);
          *((_DWORD *)v38 + 18) = v29;
          std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](v22, &v82);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          int v70 = 1;
          uint64_t v31 = v33;
        }
        else
        {
LABEL_71:
          uint64_t v31 = v29;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38);
      uint64_t v29 = v31;
      goto LABEL_73;
    }
    if (v31) {
      goto LABEL_56;
    }
LABEL_73:
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
  }
  if (*(char *)(__str + 23) < 0) {
    unint64_t v51 = *(void *)(__str + 8);
  }
  else {
    unint64_t v51 = *(unsigned __int8 *)(__str + 23);
  }
  if (v51 > (int)v29)
  {
    std::string::basic_string(__p, (const std::string *)__str, (int)v29, v51 - (int)v29, (std::allocator<char> *)buf);
    unsigned __int16 v52 = (char *)operator new(0x50uLL);
    *((void *)v52 + 1) = 0;
    *((void *)v52 + 2) = 0;
    *(_OWORD *)(v52 + 24) = 0u;
    uint64_t v53 = (void **)(v52 + 24);
    *(void *)unsigned __int16 v52 = off_26C215720;
    *(_OWORD *)(v52 + 40) = 0u;
    *(_OWORD *)(v52 + 56) = 0u;
    *((void *)v52 + 9) = 0;
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)(v52 + 24);
    v83.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
    NashvilleFEModule::update_spell_text((uint64_t)buf, a1, __p);
    if (v52[47] < 0) {
      operator delete(*v53);
    }
    *(_OWORD *)uint64_t v53 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
    *((void *)v52 + 5) = *((void *)&buf[0].__r_.__value_.__l + 2);
    MEMORY[0x210558E70](v52 + 48, &byte_20D5A22AE);
    *((_DWORD *)v52 + 18) = v29;
    std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](v22, (long long *)&v83);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  uint64_t v55 = (uint64_t *)v21[1].__vftable;
  shared_owners = (uint64_t *)v21[1].__shared_owners_;
  std::string::size_type v17 = v69;
  if ((unint64_t)((char *)shared_owners - (char *)v55) >= 0x11)
  {
    if (v55 == shared_owners)
    {
LABEL_123:
      int v59 = shared_owners;
    }
    else
    {
      while (1)
      {
        uint64_t v56 = *v55;
        unint64_t v57 = (std::__shared_weak_count *)v55[1];
        if (v57) {
          atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v58 = NashvilleFEModule::split_requests(std::shared_ptr<FrontendInput>)::$_0::operator()(a1, v56);
        if (v57) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
        }
        if (v58) {
          break;
        }
        v55 += 2;
        if (v55 == shared_owners) {
          goto LABEL_123;
        }
      }
      int v59 = shared_owners;
      if (v55 != shared_owners)
      {
        int v63 = v55 + 2;
        if (v55 + 2 == shared_owners)
        {
          int v59 = v55;
        }
        else
        {
          int v59 = v55;
          do
          {
            uint64_t v64 = *v63;
            uint64_t v65 = (std::__shared_weak_count *)v63[1];
            if (v65) {
              atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            BOOL v66 = NashvilleFEModule::split_requests(std::shared_ptr<FrontendInput>)::$_0::operator()(a1, v64);
            if (v65) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v65);
            }
            if (!v66)
            {
              long long v67 = *(_OWORD *)v63;
              uint64_t *v63 = 0;
              v63[1] = 0;
              uint64_t v68 = (std::__shared_weak_count *)v59[1];
              *(_OWORD *)int v59 = v67;
              if (v68) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v68);
              }
              v59 += 2;
            }
            v63 += 2;
          }
          while (v63 != shared_owners);
        }
      }
    }
    uint64_t v60 = v21[1].__shared_owners_;
    std::string::size_type v17 = v69;
    if (v59 != (uint64_t *)v60)
    {
      while ((uint64_t *)v60 != v59)
      {
        uint64_t v61 = *(std::__shared_weak_count **)(v60 - 8);
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
        v60 -= 16;
      }
      v21[1].__shared_owners_ = (uint64_t)v59;
    }
  }
LABEL_131:
  if (*((void *)&__str + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
  }
  uint64_t v62 = *(NSObject **)(a1 + 440);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN17NashvilleFEModule12process_dataENSt3__110shared_ptrI11AgglomerateEE_block_invoke;
  block[3] = &__block_descriptor_tmp_2699;
  block[4] = a1;
  block[5] = v22;
  uint64_t v72 = v21;
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(v62, block);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v76 < 0) {
    operator delete(v75[0]);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_20D3A1764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  a41 = &a33;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  _Unwind_Resume(a1);
}

void ___ZN17NashvilleFEModule12process_dataENSt3__110shared_ptrI11AgglomerateEE_block_invoke(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  float v37 = 0.0;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = 0;
  kdebug_trace();
  uint64_t v3 = *(uint64_t ****)(a1 + 40);
  uint64_t v4 = *v3;
  int32_t v35 = v3[1];
  if (*v3 != v35)
  {
    do
    {
      uint64_t v6 = *v4;
      unint64_t v5 = (std::__shared_weak_count *)v4[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
      uint64_t v7 = *(void **)(v2 + 272);
      int v8 = *((_DWORD *)v6 + 12);
      uint64_t v10 = *(void *)(v2 + 288);
      uint64_t v9 = *(std::__shared_weak_count **)(v2 + 296);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v43 = 0;
      uint64_t v11 = operator new(0x20uLL);
      *uint64_t v11 = &unk_26C214E88;
      v11[1] = v2;
      void v11[2] = &rep;
      v11[3] = &v37;
      uint64_t v43 = v11;
      int v39 = 0;
      uint64_t v12 = *((unsigned __int8 *)v6 + 23);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *((unsigned int *)v6 + 2);
      }
      if (v13 >= 0) {
        uint64_t v14 = v6;
      }
      else {
        uint64_t v14 = (uint64_t *)*v6;
      }
      uint64_t v40 = v12;
      unsigned __int16 v41 = v14;
      uint64_t v15 = (char *)operator new(0x68uLL);
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *(void *)uint64_t v15 = off_26C216B78;
      *(_OWORD *)(v15 + 24) = 0u;
      uint64_t v16 = v15 + 24;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 56) = 0u;
      *(_OWORD *)(v15 + 72) = 0u;
      *(_OWORD *)(v15 + 88) = 0u;
      std::string::size_type v17 = (char *)operator new(0x70uLL);
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = 0;
      *(void *)std::string::size_type v17 = off_26C217EB8;
      *(_OWORD *)(v17 + 40) = 0u;
      *(_OWORD *)(v17 + 56) = 0u;
      *(_OWORD *)(v17 + 72) = 0u;
      *(_OWORD *)(v17 + 88) = 0u;
      *((void *)v17 + 13) = 0;
      *(_OWORD *)(v17 + 24) = 0u;
      *((void *)v15 + 3) = v17 + 24;
      *((void *)v15 + 4) = v17;
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = (std::__shared_weak_count *)*((void *)v15 + 6);
        *((void *)v15 + 5) = v10;
        *((void *)v15 + 6) = v9;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        *((void *)v15 + 5) = v10;
        *((void *)v15 + 6) = 0;
      }
      std::string::operator=((std::string *)(*(void *)v16 + 32), (const std::string *)v6);
      std::string::operator=((std::string *)(*(void *)v16 + 56), (const std::string *)v6);
      *(_DWORD *)(*((void *)v15 + 3) + 80) = v8;
      long long v19 = v15 + 72;
      if (v43)
      {
        if (v43 == v42)
        {
          p_long long buf = (char *)&buf;
          (*(void (**)(void *, long long *))(v42[0] + 24))(v42, &buf);
          long long v20 = (long long *)p_buf;
        }
        else
        {
          long long v20 = (long long *)(*(uint64_t (**)(void))(*v43 + 16))();
          p_long long buf = (char *)v20;
        }
        uint64_t v22 = (char **)(v15 + 96);
        uint64_t v21 = (char *)*((void *)v15 + 12);
        if (v20 == &buf)
        {
          if (v21 == v19)
          {
            (*(void (**)(long long *, uint8_t *))(buf + 24))(&buf, v46);
            (*(void (**)(char *))(*(void *)p_buf + 32))(p_buf);
            p_long long buf = 0;
            (*(void (**)(char *, long long *))(*(void *)*v22 + 24))(*v22, &buf);
            (*(void (**)(void))(*(void *)*v22 + 32))();
            *uint64_t v22 = 0;
            p_long long buf = (char *)&buf;
            (*(void (**)(uint8_t *, char *))(*(void *)v46 + 24))(v46, v15 + 72);
            (*(void (**)(uint8_t *))(*(void *)v46 + 32))(v46);
          }
          else
          {
            (*(void (**)(long long *, char *))(buf + 24))(&buf, v15 + 72);
            (*(void (**)(char *))(*(void *)p_buf + 32))(p_buf);
            p_long long buf = *v22;
          }
          *uint64_t v22 = v19;
          goto LABEL_29;
        }
        if (v21 == v19)
        {
LABEL_24:
          (*(void (**)(char *, long long *))(*(void *)v19 + 24))(v15 + 72, &buf);
          (*(void (**)(void))(*(void *)*v22 + 32))();
          *uint64_t v22 = p_buf;
          p_long long buf = (char *)&buf;
          goto LABEL_29;
        }
      }
      else
      {
        p_long long buf = 0;
        uint64_t v22 = (char **)(v15 + 96);
        uint64_t v21 = (char *)*((void *)v15 + 12);
        if (v21 == v19) {
          goto LABEL_24;
        }
        long long v20 = 0;
      }
      p_long long buf = v21;
      *uint64_t v22 = (char *)v20;
LABEL_29:
      std::__function::__value_func<void ()(std::shared_ptr<FrontendFeature>)>::~__value_func[abi:ne180100](&buf);
      uint64_t v24 = v7[37];
      uint64_t v23 = v7[38];
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      std::string v25 = (std::__shared_weak_count *)*((void *)v15 + 8);
      *((void *)v15 + 7) = v24;
      *((void *)v15 + 8) = v23;
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      uint64_t v38 = 0;
      if (ve_ttsGetRsrc(v7[35], v7[36], &v38))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        int64_t v26 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_20CD80000, v26, OS_LOG_TYPE_ERROR, "Unable to ve_ttsGetRsrc for binding bridge", (uint8_t *)&buf, 2u);
        }
        Diagnostics::log(3, "Unable to ve_ttsGetRsrc for binding bridge", v27);
      }
      else
      {
        uint64_t v28 = v38;
        *(void *)&long long buf = v15 + 24;
        *((void *)&buf + 1) = v15;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
        NashvilleFE::set_binding_with_rsrc(v28, (uint64_t *)&buf);
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15);
        unsigned int v29 = ve_ttsProcessText2Speech(v7[35], v7[36], (uint64_t)&v39);
        void *v7 = v29;
        if (v29)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v30 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            uint64_t v32 = *v7;
            *(_DWORD *)uint64_t v46 = 134217984;
            *(void *)&v46[4] = v32;
            _os_log_impl(&dword_20CD80000, v30, OS_LOG_TYPE_ERROR, "Unable to ve_ttsProcessText2Speech in LegacyFE, error: 0x%08zx", v46, 0xCu);
          }
          Diagnostics::log(3, "Unable to ve_ttsProcessText2Speech in LegacyFE, error: 0x%08zx", v31, *v7);
        }
        *(_OWORD *)uint64_t v46 = 0uLL;
        NashvilleFE::set_binding_with_rsrc(v38, (uint64_t *)v46);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15);
      std::__function::__value_func<void ()(std::shared_ptr<FrontendFeature>)>::~__value_func[abi:ne180100](v42);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      v4 += 2;
    }
    while (v4 != v35);
  }
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(double *)((char *)&buf + 4) = v37 / 1000.0;
    _os_log_impl(&dword_20CD80000, v33, OS_LOG_TYPE_DEFAULT, "Nashville FE Latency : %.3f s", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(5, "Nashville FE Latency : %.3f s", v34, v37 / 1000.0);
  std::mutex::lock((std::mutex *)(v2 + 320));
  *(_DWORD *)(v2 + 432) = 2;
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 384));
  std::mutex::unlock((std::mutex *)(v2 + 320));
}

void sub_20D3A2098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void __destroy_helper_block_e8_40c80_ZTSNSt3__110shared_ptrINS_6vectorINS0_I13FrontendInputEENS_9allocatorIS3_EEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_e8_40c80_ZTSNSt3__110shared_ptrINS_6vectorINS0_I13FrontendInputEENS_9allocatorIS3_EEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__value_func<void ()(std::shared_ptr<FrontendFeature>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void NashvilleFE::set_binding_with_rsrc(NashvilleFE *a1, uint64_t *a2)
{
  uint64_t v4 = (std::mutex *)NashvilleFE::binding_mutex(a1);
  std::mutex::lock(v4);
  uint64_t v6 = NashvilleFE::rsrc_bindings(v5);
  uint64_t v7 = *a2;
  uint64_t v9 = (uint64_t *)(v6 + 8);
  int v8 = *(uint64_t **)(v6 + 8);
  if (*a2)
  {
    uint64_t v10 = (uint64_t *)(v6 + 8);
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v10 = v8;
          unint64_t v11 = v8[4];
          if (v11 <= (unint64_t)a1) {
            break;
          }
          int v8 = (uint64_t *)*v8;
          uint64_t v9 = v10;
          if (!*v10) {
            goto LABEL_9;
          }
        }
        if (v11 >= (unint64_t)a1) {
          break;
        }
        int v8 = (uint64_t *)v8[1];
        if (!v8)
        {
          uint64_t v9 = v10 + 1;
          goto LABEL_9;
        }
      }
      uint64_t v12 = v8;
    }
    else
    {
LABEL_9:
      uint64_t v12 = (uint64_t *)operator new(0x38uLL);
      v12[5] = 0;
      v12[6] = 0;
      v12[4] = (uint64_t)a1;
      *uint64_t v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v10;
      uint64_t *v9 = (uint64_t)v12;
      uint64_t v13 = **(void **)v6;
      uint64_t v14 = v12;
      if (v13)
      {
        *(void *)uint64_t v6 = v13;
        uint64_t v14 = (uint64_t *)*v9;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 8), v14);
      ++*(void *)(v6 + 16);
      uint64_t v7 = *a2;
    }
    uint64_t v22 = a2[1];
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = (std::__shared_weak_count *)v12[6];
    v12[5] = v7;
    v12[6] = v22;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
  else if (v8)
  {
    uint64_t v15 = (uint64_t *)(v6 + 8);
    uint64_t v16 = *(void **)(v6 + 8);
    do
    {
      unint64_t v17 = v16[4];
      BOOL v18 = v17 >= (unint64_t)a1;
      if (v17 >= (unint64_t)a1) {
        long long v19 = v16;
      }
      else {
        long long v19 = v16 + 1;
      }
      if (v18) {
        uint64_t v15 = v16;
      }
      uint64_t v16 = (void *)*v19;
    }
    while (*v19);
    if (v15 != v9 && v15[4] <= (unint64_t)a1)
    {
      long long v20 = (uint64_t *)v15[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          long long v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        uint64_t v24 = v15;
        do
        {
          uint64_t v21 = (uint64_t *)v24[2];
          BOOL v25 = *v21 == (void)v24;
          uint64_t v24 = v21;
        }
        while (!v25);
      }
      if (*(uint64_t **)v6 == v15) {
        *(void *)uint64_t v6 = v21;
      }
      --*(void *)(v6 + 16);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v8, v15);
      int64_t v26 = (std::__shared_weak_count *)v15[6];
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      operator delete(v15);
    }
  }
  std::mutex::unlock(v4);
}

void sub_20D3A2394(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t NashvilleFE::binding_mutex(NashvilleFE *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&NashvilleFE::binding_mutex(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&NashvilleFE::binding_mutex(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<NashvilleFE::binding_mutex(void)::$_0 &&>>);
  }
  return NashvilleFE::binding_mutex(void)::_mutex;
}

uint64_t NashvilleFE::rsrc_bindings(NashvilleFE *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&NashvilleFE::rsrc_bindings(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&NashvilleFE::rsrc_bindings(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<NashvilleFE::rsrc_bindings(void)::$_0 &&>>);
  }
  return NashvilleFE::rsrc_bindings(void)::_bridge_bindings;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<NashvilleFE::rsrc_bindings(void)::$_0 &&>>()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<NashvilleFE::binding_mutex(void)::$_0 &&>>()
{
}

void std::__shared_ptr_emplace<NashvilleAdapterModuleInput>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0)
  {
    char v2 = *(void **)(a1 + 56);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<NashvilleAdapterModuleInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NashvilleAdapterModuleInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NashvilleFEBinding>::__on_zero_shared(void *a1)
{
  std::__function::__value_func<void ()(std::shared_ptr<FrontendFeature>)>::~__value_func[abi:ne180100](a1 + 9);
  char v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__shared_ptr_emplace<NashvilleFEBinding>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NashvilleFEBinding>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char **_ZNKSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEE11target_typeEv()
{
  return _ZTIZZN17NashvilleFEModule12process_dataENSt3__110shared_ptrI11AgglomerateEEEUb_E3__3;
}

uint64_t _ZNKSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)_ZTIZZN17NashvilleFEModule12process_dataENSt3__110shared_ptrI11AgglomerateEEEUb_E3__3))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEEclEOSA_(uint64_t a1, unint64_t *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v25[0] = *a2;
  v25[1] = (unint64_t)v3;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v5 + 320);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v5 + 320));
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v6 = (std::chrono::steady_clock::now().__d_.__rep_ - **(void **)(a1 + 16)) / 1000000;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = (double)v6 / 1000.0;
    _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_DEFAULT, "Nashville FE Chunk Latency : %.3f s", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(5, "Nashville FE Chunk Latency : %.3f s", v8, (double)v6 / 1000.0);
  **(float **)(a1 + 24) = **(float **)(a1 + 24) + (float)v6;
  *(unsigned char *)(v4 + 144) = 0;
  uint64_t v9 = *(void *)v4;
  if (*(void *)(v4 + 8) != *(void *)v4)
  {
    uint64_t v10 = *(void *)(v9 + 72);
    uint64_t v11 = *(void *)(v9 + 80);
    while (v10 != v11)
    {
      if ((*(_DWORD *)v10 - 1) <= 1)
      {
        unint64_t v12 = *(char *)(v4 + 143) < 0 ? *(void *)(v4 + 128) : *(unsigned __int8 *)(v4 + 143);
        if (*(void *)(v10 + 40) + *(void *)(v10 + 32) >= v12)
        {
          *(unsigned char *)(v4 + 144) = 1;
          break;
        }
      }
      v10 += 56;
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&buf, v4 + 120);
    uint64_t v14 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)uint64_t v28 = 136315138;
    unsigned int v29 = v14;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&buf, v4 + 120);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&buf, v4 + 72);
    BOOL v18 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)uint64_t v28 = 136315138;
    unsigned int v29 = v18;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&buf, v4 + 72);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v20 = &buf;
  }
  else {
    long long v20 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    int v23 = *(unsigned __int8 *)(v4 + 144);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v23;
    _os_log_impl(&dword_20CD80000, v21, OS_LOG_TYPE_INFO, "End of stream: %d", (uint8_t *)&buf, 8u);
  }
  Diagnostics::log(6, "End of stream: %d", v22, *(unsigned __int8 *)(v4 + 144));
  uint64_t v24 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v24 + 8) = 0u;
  *(void *)uint64_t v24 = off_26C215330;
  *((_OWORD *)v24 + 2) = 0u;
  *((void *)v24 + 3) = v24 + 32;
  Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v24 + 24), v25);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 24);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v24 + 1, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 72))(v5, &buf);
  if (buf.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
  }
  *(_DWORD *)(v5 + 432) = 1;
  std::condition_variable::notify_all((std::condition_variable *)(v5 + 384));
  while (*(_DWORD *)(v5 + 432))
    std::condition_variable::wait((std::condition_variable *)(v5 + 384), &__lk);
  (*(std::chrono::steady_clock::time_point **)(a1 + 16))->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v24);
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_20D3A2C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::mutex::unlock(v17);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void sub_20D3A2C78()
{
  if (!v0) {
    JUMPOUT(0x20D3A2C70);
  }
  JUMPOUT(0x20D3A2C68);
}

__n128 _ZNKSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEE7__cloneEPNS0_6__baseISB_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C214E88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEE7__cloneEv(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  *(void *)char v2 = &unk_26C214E88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void _ZNSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEED0Ev()
{
}

void NashvilleFEModule::update_spell_text(uint64_t a1, uint64_t a2, std::string *a3)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v6 = *(UTFRegex **)(a2 + 480);
  UErrorCode status = U_ZERO_ERROR;
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  int v7 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v7 >= 0) {
    int v8 = (const char *)a3;
  }
  else {
    int v8 = (const char *)a3->__r_.__value_.__r.__words[0];
  }
  if (v7 >= 0) {
    int64_t size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = a3->__r_.__value_.__l.__size_;
  }
  uint64_t v10 = utext_openUTF8(0, v8, size, (UErrorCode *)&__p);
  if (SLODWORD(__p.__r_.__value_.__l.__data_) <= 0) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  UTFRegex::set_text(v6, v11, 1);
  if (uregex_find(*(URegularExpression **)v6, 0, &status))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    unint64_t v12 = *(URegularExpression ***)(a2 + 480);
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    int32_t v13 = uregex_end(*v12, 0, (UErrorCode *)&__p);
    std::string::size_type v14 = v13;
    std::string::basic_string(&__p, a3, 0, v13, (std::allocator<char> *)&status);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = __p;
    unint64_t v15 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v15 & 0x80u) != 0) {
      unint64_t v15 = a3->__r_.__value_.__l.__size_;
    }
    if (v15 > v13)
    {
      int32_t v16 = v13;
      while (1)
      {
        int v17 = *std::string::at(a3, v14);
        if (v17 < 0 && (v17 + 62) > 0x32u)
        {
          int v18 = 1;
          goto LABEL_49;
        }
        uint64_t v19 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v24 = (std::string *)a3->__r_.__value_.__r.__words[0];
          LODWORD(v20) = v16 + 1;
          unsigned int v22 = *(unsigned __int8 *)(a3->__r_.__value_.__r.__words[0] + v14);
          if ((v22 + 62) >= 0x33u || a3->__r_.__value_.__l.__size_ == (int)v20) {
            goto LABEL_45;
          }
          uint64_t v21 = (int)v20;
        }
        else
        {
          LODWORD(v20) = v16 + 1;
          uint64_t v21 = v16 + 1;
          unsigned int v22 = a3->__r_.__value_.__s.__data_[v14];
          if ((v22 + 11) < 0xCDu || v19 == (int)v20) {
            goto LABEL_45;
          }
          uint64_t v24 = a3;
        }
        unint64_t v25 = v24->__r_.__value_.__s.__data_[v21];
        if ((v22 & 0xF0) == 0xE0) {
          break;
        }
        if (v22 > 0xDF)
        {
          if (((byte_20D6DDA97[v25 >> 4] >> (v22 & 7)) & 1) == 0) {
            goto LABEL_45;
          }
          uint64_t v20 = v16 + 2;
          if ((v19 & 0x80) != 0)
          {
            std::string::size_type v33 = a3->__r_.__value_.__l.__size_;
            if (v33 == v20) {
              goto LABEL_45;
            }
            uint64_t v28 = (std::string *)a3->__r_.__value_.__r.__words[0];
            if (*(char *)(a3->__r_.__value_.__r.__words[0] + v20) > -65) {
              goto LABEL_45;
            }
            LODWORD(v20) = v16 + 3;
            if (v33 == v16 + 3) {
              goto LABEL_45;
            }
            uint64_t v27 = (int)v20;
          }
          else
          {
            if (v19 == v20) {
              goto LABEL_45;
            }
            if (a3->__r_.__value_.__s.__data_[v20] >= -64) {
              goto LABEL_45;
            }
            LODWORD(v20) = v16 + 3;
            if (v19 == v16 + 3) {
              goto LABEL_45;
            }
            uint64_t v27 = (int)v20;
            uint64_t v28 = a3;
          }
          int v34 = v28->__r_.__value_.__s.__data_[v27];
          int v35 = v16 + 4;
LABEL_68:
          if (v34 < -64) {
            LODWORD(v20) = v35;
          }
          goto LABEL_45;
        }
        if ((char)v25 < -64) {
          LODWORD(v20) = v16 + 2;
        }
LABEL_45:
        int v18 = v20 - v16;
        if (v17 == 27 && v18 == 1)
        {
          std::string::basic_string(&__p, a3, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&status);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v46 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)a1, (const std::string::value_type *)p_p, v46);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          return;
        }
LABEL_49:
        std::string::basic_string(&__p, a3, v14, v18, (std::allocator<char> *)&status);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v30 = &__p;
        }
        else {
          uint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a1, (const std::string::value_type *)v30, v31);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string::push_back((std::string *)a1, 11);
        v16 += v18;
        std::string::size_type v14 = v16;
        unint64_t v32 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if ((v32 & 0x80u) != 0) {
          unint64_t v32 = a3->__r_.__value_.__l.__size_;
        }
        if (v32 <= v16) {
          return;
        }
      }
      if (((a00000000000000[v22 & 0xF] >> (v25 >> 5)) & 1) == 0) {
        goto LABEL_45;
      }
      uint64_t v20 = v16 + 2;
      if ((v19 & 0x80) != 0)
      {
        if (a3->__r_.__value_.__l.__size_ == v20) {
          goto LABEL_45;
        }
        int64_t v26 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      else
      {
        int64_t v26 = a3;
        if (v19 == v20) {
          goto LABEL_45;
        }
      }
      int v34 = v26->__r_.__value_.__s.__data_[v20];
      int v35 = v16 + 3;
      goto LABEL_68;
    }
  }
  else
  {
    unsigned int v36 = *(UTFRegex **)(a2 + 504);
    UErrorCode status = U_ZERO_ERROR;
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    int v37 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
    if (v37 >= 0) {
      uint64_t v38 = (const char *)a3;
    }
    else {
      uint64_t v38 = (const char *)a3->__r_.__value_.__r.__words[0];
    }
    if (v37 >= 0) {
      int64_t v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v39 = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v40 = utext_openUTF8(0, v38, v39, (UErrorCode *)&__p);
    if (SLODWORD(__p.__r_.__value_.__l.__data_) <= 0) {
      unsigned __int16 v41 = v40;
    }
    else {
      unsigned __int16 v41 = 0;
    }
    UTFRegex::set_text(v36, v41, 1);
    if (uregex_find(*(URegularExpression **)v36, 0, &status))
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      uint64_t v42 = *(URegularExpression ***)(a2 + 504);
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      int32_t v43 = uregex_end(*v42, 0, (UErrorCode *)&__p);
      std::string::basic_string(&__p, a3, v43, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&status);
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      *(_OWORD *)a1 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      std::string::size_type v44 = __p.__r_.__value_.__r.__words[2];
    }
    else
    {
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a1, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
        return;
      }
      *(_OWORD *)a1 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
      std::string::size_type v44 = a3->__r_.__value_.__r.__words[2];
    }
    *(void *)(a1 + 16) = v44;
  }
}

void sub_20D3A31B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL NashvilleFEModule::split_requests(std::shared_ptr<FrontendInput>)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v12 = *(std::string *)a2;
  }
  UTFString::lstrip(&v12);
  UTFString::rstrip(&v12);
  unint64_t v3 = v12.__r_.__value_.__r.__words[2];
  std::string __p = v12;
  memset(&v12, 0, sizeof(v12));
  unint64_t v4 = *(UTFRegex **)(a1 + 464);
  UErrorCode status = U_ZERO_ERROR;
  std::string::size_type v5 = HIBYTE(v3);
  if ((v5 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v5 & 0x80u) == 0) {
    std::string::size_type size = v5;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v8 = utext_openUTF8(0, (const char *)p_p, size, &status);
  if (status <= U_ZERO_ERROR) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  UTFRegex::set_text(v4, v9, 1);
  UErrorCode status = U_ZERO_ERROR;
  int v10 = uregex_matches(*(URegularExpression **)v4, 0, &status);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10 != 0;
}

void sub_20D3A32FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<FrontendInput>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    unint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        std::string::size_type v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        v3 -= 16;
      }
      while (v3 != v1);
      unint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<FrontendInput>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<FrontendInput>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void NashvilleFEModule::clean_up(NashvilleFEModule *this)
{
  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 320);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)this + 5);
  while (*((_DWORD *)this + 108) != 2)
  {
    *((_DWORD *)this + 108) = 0;
    std::condition_variable::notify_all((std::condition_variable *)this + 8);
    std::condition_variable::wait((std::condition_variable *)this + 8, &v2);
  }
  (*(void (**)(void))(**((void **)this + 36) + 64))(*((void *)this + 36));
  Module::clean_up(this);
  if (v2.__owns_) {
    std::mutex::unlock(v2.__m_);
  }
}

void sub_20D3A34D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void NashvilleFEModule::cancel(NashvilleFEModule *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  std::unique_lock<std::mutex> v2 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  *((unsigned char *)this + 160) = 1;
  std::recursive_mutex::unlock(v2);
  uint64_t v3 = *((void *)this + 34);
  int32_t v16 = 0;
  if (!ve_ttsGetRsrc(*(void *)(v3 + 280), *(void *)(v3 + 288), &v16))
  {
    NashvilleFE::retrieve_binding_with_rsrc((NashvilleFE *)&v14, (unint64_t)v16);
    if (v14)
    {
      unsigned int v10 = ve_ttsStop(*(void *)(v3 + 280), *(void *)(v3 + 288), v4, v5, v6, v7, v8, v9);
      if (v10)
      {
        uint64_t v11 = v10;
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        std::string v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v18 = v11;
          _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_ERROR, "Unable to cancel in LegacyFE, error: 0x%08zx", buf, 0xCu);
        }
        Diagnostics::log(3, "Unable to cancel in LegacyFE, error: 0x%08zx", v13, v11);
      }
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_20D3A3634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void NashvilleFE::retrieve_binding_with_rsrc(NashvilleFE *this, unint64_t a2)
{
  uint64_t v4 = (std::mutex *)NashvilleFE::binding_mutex(this);
  std::mutex::lock(v4);
  uint64_t v6 = NashvilleFE::rsrc_bindings(v5);
  uint64_t v9 = *(void **)(v6 + 8);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = v9;
  if (!v9) {
    goto LABEL_12;
  }
  unsigned int v10 = (void *)v7;
  uint64_t v11 = v8;
  do
  {
    unint64_t v12 = v11[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    if (v13) {
      unsigned int v10 = v11;
    }
    uint64_t v11 = (void *)*v14;
  }
  while (*v14);
  if (v10 != (void *)v7 && v10[4] <= a2)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v15 = v8[4];
        if (v15 <= a2) {
          break;
        }
        uint64_t v8 = (void *)*v8;
        if (!v8) {
          goto LABEL_21;
        }
      }
      if (v15 >= a2) {
        break;
      }
      uint64_t v8 = (void *)v8[1];
      if (!v8) {
LABEL_21:
      }
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    uint64_t v17 = v8[5];
    uint64_t v16 = v8[6];
    *(void *)this = v17;
    *((void *)this + 1) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
  std::mutex::unlock(v4);
}

void sub_20D3A3738(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void NashvilleFEModule::retrieve(NashvilleFEModule *this@<X0>, uint64_t a2@<X8>)
{
  if (!*((void *)this + 19))
  {
    m = (std::mutex *)((char *)this + 320);
    v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 320);
    v5.__owns_ = 1;
    std::mutex::lock((std::mutex *)this + 5);
    if (*((_DWORD *)this + 108) == 2)
    {
      Module::retrieve(this, a2);
    }
    else
    {
      *((_DWORD *)this + 108) = 0;
      std::condition_variable::notify_all((std::condition_variable *)this + 8);
      while (!*((_DWORD *)this + 108))
        std::condition_variable::wait((std::condition_variable *)this + 8, &v5);
      Module::retrieve(this, a2);
      if (!v5.__owns_) {
        return;
      }
      m = v5.__m_;
    }
    std::mutex::unlock(m);
    return;
  }
  Module::retrieve(this, a2);
}

void sub_20D3A3830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void NashvilleFEModule::~NashvilleFEModule(NashvilleFEModule *this)
{
  NashvilleFEModule::~NashvilleFEModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t vars8;

  *(void *)this = off_26C201EC8;
  dispatch_release(*((dispatch_object_t *)this + 55));
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*((void **)this + 66));
  std::unique_lock<std::mutex> v2 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::unique_lock<std::mutex> v5 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)this + 8);
  std::mutex::~mutex((std::mutex *)this + 5);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  Module::~Module(this);
}

void *NashvilleFE::NashvilleFE(void *a1, long long ***a2)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 1;
  *((_OWORD *)a1 + 2) = 0u;
  std::unique_lock<std::mutex> v5 = (char **)(a1 + 4);
  a1[37] = 0;
  a1[38] = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  a1[6] = 0;
  SharedObjectPool::get<VoiceConfig>(&v71, *a2);
  SharedObjectPool::get<TrackSubstitutions>(v109, (uint64_t)*a2);
  uint64_t v6 = (std::__shared_weak_count *)a1[38];
  *(_OWORD *)(a1 + 37) = *(_OWORD *)&v109[0].__r_.__value_.__l.__data_;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = v71;
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v71 + 16))(&v69, v71, 1651664996, 2);
  memset(&v68, 0, sizeof(v68));
  if ((void)v69)
  {
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, void))(*(void *)v7 + 32))(&v100, v7, 1651664996, 0);
    *(_OWORD *)&v110[0].__pn_.__r_.__value_.__l.__data_ = v100;
    v110[0].__pn_.__r_.__value_.__r.__words[2] = v101;
    *(void *)&long long v101 = 0;
    long long v100 = 0uLL;
    std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)v77, v110);
    int v8 = v77[23];
    if ((v77[23] & 0x80000000) != 0)
    {
LABEL_5:
      std::string::__init_copy_ctor_external(v109, *(const std::string::value_type **)v77, *(std::string::size_type *)&v77[8]);
LABEL_15:
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      std::string v68 = v109[0];
      *((unsigned char *)&v109[0].__r_.__value_.__s + 23) = 0;
      v109[0].__r_.__value_.__s.__data_[0] = 0;
      if (v8 < 0) {
        operator delete(*(void **)v77);
      }
      if (SHIBYTE(v110[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110[0].__pn_.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v101) < 0) {
        operator delete((void *)v100);
      }
      goto LABEL_28;
    }
LABEL_14:
    v109[0] = *(std::string *)v77;
    goto LABEL_15;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v109, v7, 1650550884, 2);
  long long v9 = *(_OWORD *)&v109[0].__r_.__value_.__l.__data_;
  if (v109[0].__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v109[0].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v10 = (std::__shared_weak_count *)*((void *)&v69 + 1);
  long long v69 = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  long long v70 = *(_OWORD *)&v109[0].__r_.__value_.__r.__words[2];
  if (v109[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v109[0].__r_.__value_.__l.__size_);
  }
  if ((void)v69)
  {
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, void))(*(void *)v7 + 32))(&v100, v7, 1650550884, 0);
    *(_OWORD *)&v110[0].__pn_.__r_.__value_.__l.__data_ = v100;
    v110[0].__pn_.__r_.__value_.__r.__words[2] = v101;
    *(void *)&long long v101 = 0;
    long long v100 = 0uLL;
    std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)v77, v110);
    int v8 = v77[23];
    if ((v77[23] & 0x80000000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v109[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_ERROR, "Unable to mmap either broker.hdr or broker.hdr.asset", (uint8_t *)v109, 2u);
  }
  Diagnostics::log(3, "Unable to mmap either broker.hdr or broker.hdr.asset", v12);
LABEL_28:
  BOOL v13 = *a2;
  uint64_t v14 = (std::recursive_mutex *)(v13 + 7);
  std::recursive_mutex::lock((std::recursive_mutex *)(v13 + 7));
  {
    uint64_t v17 = *(void *)(*(void *)v15 + 8);
    uint64_t v16 = *(std::__shared_weak_count **)(*(void *)v15 + 16);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::recursive_mutex::unlock(v14);
    if (v17) {
      goto LABEL_58;
    }
  }
  else
  {
    std::recursive_mutex::unlock((std::recursive_mutex *)(v13 + 7));
    uint64_t v16 = 0;
  }
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v17 = (uint64_t)(a1 + 7);
  a1[23] = 0;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *((_WORD *)a1 + 28) = 8963;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  a1[32] = 0;
  *((_DWORD *)a1 + 48) = 131584;
  SiriTTS::vocalizer_common_resource_path((SiriTTS *)v109);
  uint64_t v18 = &v68;
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v18 = (std::string *)v68.__r_.__value_.__r.__words[0];
  }
  if ((v109[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = v109;
  }
  else {
    uint64_t v19 = (std::string *)v109[0].__r_.__value_.__r.__words[0];
  }
  v110[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  v110[0].__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
  a1[25] = v110;
  unsigned int Interfaces = vplatform_GetInterfaces(a1 + 7, (_WORD *)a1 + 96);
  *a1 = Interfaces;
  if (Interfaces)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *a1;
      *(_DWORD *)uint64_t v77 = 136315394;
      *(void *)&v77[4] = "vplatform_GetInterfaces(&default_ve_install_, &platform_resource_)";
      *(_WORD *)&v77[12] = 2048;
      *(void *)&v77[14] = v23;
      _os_log_impl(&dword_20CD80000, v21, OS_LOG_TYPE_ERROR, "NashvilleFE: %s returned %zx", v77, 0x16u);
    }
    Diagnostics::log(3, "NashvilleFE: %s returned %zx", v22, "vplatform_GetInterfaces(&default_ve_install_, &platform_resource_)", *a1);
    uint64_t v17 = 0;
  }
  else
  {
    a1[11] = &SiriTTSVocalizerGetCriticalSectionImpl::__CriticalSectionImpl;
  }
  if (SHIBYTE(v109[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v109[0].__r_.__value_.__l.__data_);
    if (Interfaces)
    {
LABEL_48:
      if (!v16) {
        goto LABEL_50;
      }
      goto LABEL_49;
    }
  }
  else if (Interfaces)
  {
    goto LABEL_48;
  }
LABEL_58:
  if ((void)v69) {
    *(void *)(v17 + 8) = v70;
  }
  uint64_t v25 = ve_ttsInitialize(v17, a1 + 33);
  *a1 = v25;
  if (!v25)
  {
    __int16 v67 = 1;
    MEMORY[0x270FA5388](v25);
    unsigned int LanguageList = ve_ttsGetLanguageList(a1[33], a1[34], (char *)v65, &v67, v29, v30, v31, v32);
    *a1 = LanguageList;
    if (LanguageList)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      int v34 = Diagnostics_GetLogObject(void)::__profile_log_default;
      unsigned int v36 = "ve_ttsGetLanguageList(ve_speech_, languages, &numberOfElement)";
      if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_80;
      }
      std::string::size_type v37 = *a1;
      LODWORD(v109[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v109[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ve_ttsGetLanguageList(ve_speech_, languages, &numberOfElement)";
      WORD2(v109[0].__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v109[0].__r_.__value_.__r.__words[1] + 6) = v37;
    }
    else
    {
      uint64_t v38 = memcpy(v110, v65, 0x104uLL);
      MEMORY[0x270FA5388](v38);
      uint64_t v40 = &v65[-32 * v39];
      unsigned int VoiceList = ve_ttsGetVoiceList(a1[33], a1[34], (const char *)v110, (uint64_t)v40, &v67, v41, v42, v43);
      *a1 = VoiceList;
      if (!VoiceList)
      {
        memcpy(v109, v40, sizeof(v109));
        unsigned int v50 = ve_ttsOpen(a1[33], a1[34], 0, 0, (uint64_t)(a1 + 35), v47, v48, v49);
        *a1 = v50;
        if (v50)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          int v34 = Diagnostics_GetLogObject(void)::__profile_log_default;
          unsigned int v36 = "ve_ttsOpen(ve_speech_, NULL, NULL, &ve_instance_)";
          if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR)) {
            goto LABEL_80;
          }
          uint64_t v51 = *a1;
          *(_DWORD *)uint64_t v77 = 136315394;
          *(void *)&v77[4] = "ve_ttsOpen(ve_speech_, NULL, NULL, &ve_instance_)";
          *(_WORD *)&v77[12] = 2048;
          *(void *)&v77[14] = v51;
          std::string::size_type v46 = (std::string *)v77;
        }
        else
        {
          LODWORD(v100) = 1;
          strncpy((char *)&v100 + 4, (const char *)v110, 0x80uLL);
          LODWORD(v98[0]) = 2;
          strncpy((char *)v98 + 4, &v109[10].__r_.__value_.__s.__data_[16], 0x80uLL);
          long long v82 = v106;
          long long v83 = v107;
          long long v78 = v102;
          long long v79 = v103;
          long long v80 = v104;
          long long v81 = v105;
          *(_OWORD *)uint64_t v77 = v100;
          *(_OWORD *)&v77[16] = v101;
          long long v90 = v98[5];
          long long v91 = v98[6];
          long long v92 = v98[7];
          long long v86 = v98[1];
          long long v87 = v98[2];
          long long v88 = v98[3];
          long long v89 = v98[4];
          int v84 = v108;
          int v93 = v99;
          long long v85 = v98[0];
          int v94 = 7;
          __int16 v95 = 2;
          int v96 = 19;
          __int16 v97 = 1;
          unsigned int v56 = ve_ttsSetParamList(a1[35], a1[36], v77, 4, v52, v53, v54, v55);
          *a1 = v56;
          if (v56)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            int v34 = Diagnostics_GetLogObject(void)::__profile_log_default;
            unsigned int v36 = "ve_ttsSetParamList(ve_instance_, params, sizeof(params) / sizeof(*params))";
            if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))goto LABEL_80; {
            uint64_t v62 = *a1;
            }
            int v73 = 136315394;
            unint64_t v74 = "ve_ttsSetParamList(ve_instance_, params, sizeof(params) / sizeof(*params))";
            __int16 v75 = 2048;
            uint64_t v76 = v62;
          }
          else
          {
            v66[0] = a1;
            v66[1] = nashville_fe_ve_synthesis_callback;
            unsigned int v63 = ve_ttsSetOutDevice(a1[35], a1[36], (uint64_t)v66, v57, v58, v59, v60, v61);
            *a1 = v63;
            if (!v63)
            {
              std::vector<unsigned char>::resize(v4);
              std::vector<VE_MARKINFO>::resize(v5);
LABEL_81:
              if (!v16) {
                goto LABEL_50;
              }
LABEL_49:
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
              goto LABEL_50;
            }
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            int v34 = Diagnostics_GetLogObject(void)::__profile_log_default;
            unsigned int v36 = "ve_ttsSetOutDevice(ve_instance_, &ve_out_device)";
            if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
LABEL_80:
              Diagnostics::log(3, "NashvilleFE: %s returned %zx", v35, v36, *a1);
              goto LABEL_81;
            }
            uint64_t v64 = *a1;
            int v73 = 136315394;
            unint64_t v74 = "ve_ttsSetOutDevice(ve_instance_, &ve_out_device)";
            __int16 v75 = 2048;
            uint64_t v76 = v64;
          }
          std::string::size_type v46 = (std::string *)&v73;
        }
LABEL_79:
        _os_log_impl(&dword_20CD80000, v34, OS_LOG_TYPE_ERROR, "NashvilleFE: %s returned %zx", (uint8_t *)v46, 0x16u);
        goto LABEL_80;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      int v34 = Diagnostics_GetLogObject(void)::__profile_log_default;
      unsigned int v36 = "ve_ttsGetVoiceList(ve_speech_, language.szLanguage, voiceInfos, &numberOfElement)";
      if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_80;
      }
      std::string::size_type v45 = *a1;
      LODWORD(v109[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v109[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ve_ttsGetVoiceList(ve_speech_, language.szLanguage, voiceInfos, &numberOfElement)";
      WORD2(v109[0].__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v109[0].__r_.__value_.__r.__words[1] + 6) = v45;
    }
    std::string::size_type v46 = v109;
    goto LABEL_79;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int64_t v26 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    std::string::size_type v28 = *a1;
    LODWORD(v109[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v109[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ve_ttsInitialize(ve_install, &ve_speech_)";
    WORD2(v109[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v109[0].__r_.__value_.__r.__words[1] + 6) = v28;
    _os_log_impl(&dword_20CD80000, v26, OS_LOG_TYPE_ERROR, "NashvilleFE: %s returned %zx", (uint8_t *)v109, 0x16u);
  }
  Diagnostics::log(3, "NashvilleFE: %s returned %zx", v27, "ve_ttsInitialize(ve_install, &ve_speech_)", *a1);
  if (v16) {
    goto LABEL_49;
  }
LABEL_50:
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v69 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  return a1;
}

void sub_20D3A4470(_Unwind_Exception *exception_object)
{
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*(void **)(v1 + 32));
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 72);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  int v8 = *(std::__shared_weak_count **)(v1 + 104);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  long long v9 = (std::__shared_weak_count *)v2[38];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unsigned int v10 = *v4;
  if (*v4)
  {
    v2[5] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v3;
  if (*v3)
  {
    v2[2] = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_20D3A457C()
{
}

double std::__fs::filesystem::path::parent_path[abi:ne180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__parent_path(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v9;
  return result;
}

void std::vector<unsigned char>::resize(unint64_t *a1)
{
  unint64_t v1 = a1[1] - *a1;
  if (v1 > 0x7FF)
  {
    if (v1 != 2048) {
      a1[1] = *a1 + 2048;
    }
  }
  else
  {
    std::vector<signed char>::__append(a1, 2048 - v1);
  }
}

void std::vector<VE_MARKINFO>::resize(char **a1)
{
  std::__fs::filesystem::path::__string_view v3 = *a1;
  std::unique_lock<std::mutex> v2 = a1[1];
  uint64_t v4 = v2 - *a1;
  unint64_t v5 = 0x6DB6DB6DB6DB6DB7 * (v4 >> 3);
  if (v5 > 0x3F)
  {
    if (v4 == 3584) {
      return;
    }
    uint64_t v18 = v3 + 3584;
    goto LABEL_19;
  }
  std::basic_string_view<_CharT, _Traits>::size_type v6 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v2) >> 3) >= 64 - v5)
  {
    bzero(a1[1], 56 * ((3528 - v4) / 0x38uLL) + 56);
    uint64_t v18 = &v2[56 * ((3528 - v4) / 0x38uLL) + 56];
LABEL_19:
    a1[1] = v18;
    return;
  }
  unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((v6 - v3) >> 3);
  unint64_t v8 = 0xDB6DB6DB6DB6DB6ELL * ((v6 - v3) >> 3);
  if (v8 <= 0x40) {
    unint64_t v8 = 64;
  }
  if (v7 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 > 0x492492492492492) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v10 = 56 * v9;
  uint64_t v11 = (char *)operator new(56 * v9);
  unint64_t v12 = &v11[8 * (v4 >> 3)];
  BOOL v13 = &v11[v10];
  bzero(v12, 56 * ((3528 - v4) / 0x38uLL) + 56);
  uint64_t v14 = &v12[56 * ((3528 - v4) / 0x38uLL) + 56];
  if (v2 != v3)
  {
    do
    {
      long long v15 = *(_OWORD *)(v2 - 56);
      long long v16 = *(_OWORD *)(v2 - 40);
      long long v17 = *(_OWORD *)(v2 - 24);
      *((void *)v12 - 1) = *((void *)v2 - 1);
      *(_OWORD *)(v12 - 24) = v17;
      *(_OWORD *)(v12 - 40) = v16;
      *(_OWORD *)(v12 - 56) = v15;
      v12 -= 56;
      v2 -= 56;
    }
    while (v2 != v3);
    std::unique_lock<std::mutex> v2 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v2)
  {
    operator delete(v2);
  }
}

uint64_t nashville_fe_ve_synthesis_callback(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (*(_DWORD *)a4 == 8)
  {
    uint64_t v4 = *(void **)(a4 + 8);
    uint64_t v5 = a3[1];
    v4[1] = a3[2] - v5;
    v4[2] = v5;
    uint64_t v6 = a3[4];
    void v4[3] = a3[5] - v6;
    v4[4] = v6;
  }
  return 0;
}

uint64_t *NashvilleFE::load_resource(uint64_t a1, int a2, char *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v15 = 0;
  if (*(char *)(a5 + 23) >= 0) {
    unint64_t v9 = (const char *)a5;
  }
  else {
    unint64_t v9 = *(const char **)a5;
  }
  uint64_t v10 = ve_ttsResourceLoad(a1, a2, v9, a4, a3, &v15, a7, a8);
  if (!v10) {
    return v15;
  }
  uint64_t v11 = v10;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134218240;
    long long v17 = a3;
    __int16 v18 = 1024;
    int v19 = v11;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_ERROR, "Error (ve_ttsResourceLoad %p) : 0x%x", buf, 0x12u);
  }
  Diagnostics::log(3, "Error (ve_ttsResourceLoad %p) : 0x%x", v13, a3, v11);
  return 0;
}

uint64_t *std::unique_ptr<MemoryMap>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  std::string *result = 0;
  if (v1)
  {
    std::unique_lock<std::mutex> v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x2105595E0);
  }
  return result;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(char *a1)
{
  std::unique_lock<std::mutex> v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_20D3A4A70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void NashvilleFEPersistentModule::load_voice_resource(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = (uint64_t *)*a3;
    }
    buf[0] = 136315138;
    *(void *)&buf[1] = v6;
    _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_INFO, "Loading resource: '%s'", (uint8_t *)buf, 0xCu);
  }
  if (*((char *)a3 + 23) >= 0) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = (uint64_t *)*a3;
  }
  Diagnostics::log(6, "Loading resource: '%s'", v5, v7);
  unint64_t v8 = operator new(0x30uLL);
  v8[1] = 0;
  void *v8 = off_26C219498;
  v8[4] = 0;
  v8[5] = 0;
  uint64_t v8[2] = 0;
  v8[3] = &off_26C211250;
  operator new();
}

void SiriTTS::NashvilleVoiceResource::~NashvilleVoiceResource(SiriTTS::NashvilleVoiceResource *this)
{
}

uint64_t std::__shared_ptr_emplace<SiriTTS::NashvilleVoiceResource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SiriTTS::NashvilleVoiceResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SiriTTS::NashvilleVoiceResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NashvilleFE>::__on_zero_shared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v9 = ve_ttsClose(*(void *)(a1 + 304), *(void *)(a1 + 312), a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v22 = v9;
      _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_ERROR, "Error ve_ttsClose 0x%x", buf, 8u);
    }
    Diagnostics::log(3, "Error ve_ttsClose 0x%x", v11, v9);
  }
  uint64_t v12 = ve_ttsUnInitialize(*(void *)(a1 + 288), *(void *)(a1 + 296));
  if (v12)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    BOOL v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v22 = v12;
      _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_ERROR, "Error ve_ttsUnInitialize 0x%x", buf, 8u);
    }
    Diagnostics::log(3, "Error ve_ttsUnInitialize 0x%x", v14, v12);
  }
  if (*(_WORD *)(a1 + 80) == 8963)
  {
    uint64_t v15 = vplatform_ReleaseInterfaces(a1 + 80);
    if (v15)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      long long v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v22 = v15;
        _os_log_impl(&dword_20CD80000, v16, OS_LOG_TYPE_ERROR, "Error vplatform_ReleaseInterfaces 0x%x", buf, 8u);
      }
      Diagnostics::log(3, "Error vplatform_ReleaseInterfaces 0x%x", v17, v15);
    }
  }
  __int16 v18 = *(std::__shared_weak_count **)(a1 + 328);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  int v19 = *(void **)(a1 + 56);
  if (v19)
  {
    *(void *)(a1 + 64) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(a1 + 32);
  if (v20)
  {
    *(void *)(a1 + 40) = v20;
    operator delete(v20);
  }
}

void sub_20D3A52B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<NashvilleFE>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NashvilleFE>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<NashvilleAdapterModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<NashvilleAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NashvilleAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<SSMLPreprocessorModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SSMLPreprocessorModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SSMLPreprocessorModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void NashvilleFEPersistentModule::load_voice_resource(std::__shared_weak_count **a1, void *a2, char *a3, void *a4, uint64_t a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = *a4;
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = a3;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v12;
    _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_INFO, "Loading resource from memory: %p, size: %ld", buf, 0x16u);
  }
  Diagnostics::log(6, "Loading resource from memory: %p, size: %ld", v11, a3, *a4);
  BOOL v13 = (std::__shared_weak_count *)operator new(0x30uLL);
  v13->__shared_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_26C219498;
  uint64_t v14 = v13 + 1;
  v13[1].__shared_owners_ = 0;
  v13[1].__shared_weak_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&off_26C211250;
  resource = NashvilleFE::load_resource(*(void *)(a2[37] + 280), *(void *)(a2[37] + 288), a3, *a4, a5, v15, v16, v17);
  if (resource)
  {
    v13[1].__shared_owners_ = (uint64_t)resource;
    v13[1].__shared_weak_owners_ = v19;
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v13 + 1;
      _os_log_impl(&dword_20CD80000, v20, OS_LOG_TYPE_DEFAULT, "Resource %p loaded from memory.", buf, 0xCu);
    }
    Diagnostics::log(5, "Resource %p loaded from memory.", v21, v14);
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = (std::__shared_weak_count **)a2[53];
    unint64_t v22 = a2[54];
    if ((unint64_t)v23 >= v22)
    {
      uint64_t v25 = a2[52];
      uint64_t v26 = ((uint64_t)v23 - v25) >> 4;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v22 - v25;
      if (v28 >> 3 > v27) {
        unint64_t v27 = v28 >> 3;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      int v35 = a2 + 54;
      uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v29);
      uint64_t v31 = (std::__shared_weak_count **)&v30[16 * v26];
      *(void *)std::string buf = v30;
      *(void *)&uint8_t buf[8] = v31;
      int v34 = &v30[16 * v32];
      *uint64_t v31 = v14;
      v31[1] = v13;
      *(void *)&uint8_t buf[16] = v31 + 2;
      std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer(a2 + 52, buf);
      uint64_t v24 = (void *)a2[53];
      std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::__shared_weak_count *v23 = v14;
      v23[1] = v13;
      uint64_t v24 = v23 + 2;
      a2[53] = v23 + 2;
    }
    a2[53] = v24;
    *a1 = v14;
    a1[1] = v13;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_20D3A5740(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nashville_fe_module_load_voice(_WORD **a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  LODWORD(v18) = 0;
  uint64_t BrokerString = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 0);
  if ((BrokerString & 0x80000000) == 0)
  {
    std::__fs::filesystem::path::__string_view v3 = (const char *)a1[4];
    if (v3)
    {
      uint64_t v4 = BrokerString;
      if (!strcmp(v3 + 152, __s2)) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v5 = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 1, 0);
  if ((v5 & 0x80000000) != 0)
  {
    __s2[0] = 0;
  }
  else
  {
    uint64_t v4 = v5;
    uint64_t v6 = (const char *)a1[4];
    if (!v6 || strcmp(v6 + 152, __s2))
    {
      uint64_t AddRefCountedObject = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __s2, &v18);
      if (!v18) {
        __s2[0] = 0;
      }
      if ((AddRefCountedObject & 0x80001FFF) == 0x8000000A) {
        return AddRefCountedObject;
      }
    }
    if (__s2[0]) {
      goto LABEL_19;
    }
  }
  uint64_t AddRefCountedObject = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 0);
  uint64_t v4 = AddRefCountedObject;
  if ((AddRefCountedObject & 0x80000000) != 0) {
    return AddRefCountedObject;
  }
  uint64_t AddRefCountedObject = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __s2, &v18);
  if (!v18) {
    __s2[0] = 0;
  }
  if ((AddRefCountedObject & 0x80001FFF) == 0x8000000A) {
    return AddRefCountedObject;
  }
  if (!__s2[0])
  {
    uint64_t v4 = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 1);
    if ((v4 & 0x80000000) != 0) {
      return v4;
    }
  }
LABEL_19:
  unint64_t v8 = (const char *)a1[4];
  if (v8)
  {
    uint64_t v9 = (uint64_t)(v8 + 152);
    if (!strcmp(v8 + 152, __s2)) {
      return v4;
    }
    uint64_t v10 = a1[3];
    if (!v10 || (uint64_t v11 = *((void *)v10 + 6)) == 0) {
      uint64_t v11 = *((void *)a1[2] + 6);
    }
    uint64_t AddRefCountedObject = objc_ReleaseObject(v11, v9);
    a1[4] = 0;
    if ((AddRefCountedObject & 0x80000000) != 0) {
      return AddRefCountedObject;
    }
  }
  uint64_t v18 = 0;
  uint64_t v12 = a1[3];
  if (v12 && (uint64_t v13 = *((void *)v12 + 6)) != 0)
  {
    uint64_t v14 = (uint64_t)a1[2];
  }
  else
  {
    uint64_t v14 = (uint64_t)a1[2];
    uint64_t v13 = *(void *)(v14 + 48);
  }
  uint64_t AddRefCountedObject = objc_GetAddRefCountedObject(v13, (uint64_t)__s2, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))uselect_ObjcVoiceOpen, (void (*)(void, void, long long *))uselect_ObjcVoiceClose, v14, &v18);
  if ((AddRefCountedObject & 0x80000000) != 0) {
    return AddRefCountedObject;
  }
  uint64_t v15 = *(void *)(v18 + 32);
  a1[4] = (_WORD *)v15;
  uint64_t AddRefCountedObject = paramc_ParamSetStr(*((void *)a1[2] + 5), (uint64_t)"uselectrawdataversion", (char *)(v15 + 64));
  if ((AddRefCountedObject & 0x80000000) != 0) {
    return AddRefCountedObject;
  }
  uint64_t v16 = paramc_ParamSetStr(*((void *)a1[2] + 5), (uint64_t)"uselectreductionversion", (char *)a1[4] + 140);
  uint64_t v4 = v16;
  if ((v16 & 0x80000000) == 0)
  {
    if (a1[4][1789] == 2) {
      return v16;
    }
    else {
      return 2686459919;
    }
  }
  return v4;
}

uint64_t nashville_fe_module_closeStreams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = *(void *)(a2 + v4);
    if (v6)
    {
      unint64_t v7 = (uint64_t *)(a2 + v4);
      int v8 = (*(uint64_t (**)(uint64_t, void))(a1 + 72))(v6, *(void *)(a2 + v4 + 8));
      uint64_t *v7 = safeh_GetNullHandle();
      v7[1] = v9;
      if ((int)v5 > -1 && v8 < 0) {
        uint64_t v5 = v8;
      }
      else {
        uint64_t v5 = v5;
      }
    }
    v4 += 16;
  }
  while (v4 != 48);
  return v5;
}

uint64_t nashville_fe_module_ObjReopen(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 1029, 128) & 0x80000000) != 0) {
    return 2686459912;
  }
  paramc_ParamSetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"voiceaddon", &byte_20D5A22AE);
  return nashville_fe_module_load_voice((_WORD **)a1);
}

uint64_t nashville_fe_module_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 1029, 128) & 0x80000000) != 0) {
    return 2686459912;
  }
  uint64_t v7 = 0;
  for (uint64_t i = a1 + 64; ; i += 16)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v9 + 64);
    if (v7 * 8)
    {
      uint64_t v11 = szOUTPUT_STREAMS[v7];
      uint64_t v12 = a3;
      uint64_t v13 = a4;
      uint64_t v14 = 0;
      uint64_t v15 = i;
    }
    else
    {
      uint64_t v14 = (*(uint64_t (**)(void))(v9 + 152))();
      uint64_t v12 = a3;
      uint64_t v13 = a4;
      uint64_t v11 = "application/x-realspeak-markers-pp;version=4.0";
      uint64_t v15 = a1 + 64;
    }
    uint64_t v16 = v10(v12, v13, 207, v11, v14, 1, v15);
    if ((v16 & 0x80000000) != 0) {
      break;
    }
    if (++v7 == 3) {
      return v16;
    }
  }
  nashville_fe_module_closeStreams(*(void *)(a1 + 48), a1 + 64);
  return v16;
}

void _NashvilleFEModule_ReportModifiedText(unint64_t a1, void *a2, unsigned int a3)
{
  NashvilleFE::retrieve_binding_with_rsrc((NashvilleFE *)&v9, a1);
  uint64_t v5 = v9;
  if (v9)
  {
    std::string::basic_string[abi:ne180100](&__dst, a2, a3);
    uint64_t v6 = *(void *)v5 + 56;
    if (*(char *)(*(void *)v5 + 79) < 0) {
      operator delete(*(void **)v6);
    }
    *(_OWORD *)uint64_t v6 = __dst;
    *(void *)(v6 + 16) = v8;
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_20D3A5C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void _Gryphon_TrackSubstitution(unint64_t a1, int a2, int a3, int a4)
{
  NashvilleFE::retrieve_binding_with_rsrc((NashvilleFE *)&v8, a1);
  if (v8) {
    TrackSubstitutions::add_substitution(*(TrackSubstitutions **)(v8 + 32), a3, a2, a4);
  }
  uint64_t v7 = v9;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_20D3A5D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nashville_fe_module_Process(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v49 = 0;
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 1029, 128);
  if ((result & 0x80000000) != 0) {
    return 2686459912;
  }
  *a5 = 1;
  if (!a1[8]) {
    return result;
  }
  uint64_t v10 = (void *)a1[15];
  bzero(v10, 0xE48uLL);
  void *v10 = a1[4];
  int v11 = usextract_ProcessStart(a1[2], (uint64_t)"NASHVILLE_FE_MODULE", a1[5], a3, a4, (uint64_t)v10, &v49);
  int v17 = v11;
  if (v11 < 0)
  {
    log_OutPublic(*(void *)(a1[2] + 32), (uint64_t)"NASHVILLE_FE_MODULE", 55005, "%s%x", v13, v14, v15, v16, "lhError");
    char v19 = 1;
    int v18 = v17;
    goto LABEL_53;
  }
  if (*((__int16 *)v10 + 5) > 1)
  {
    int Layers = usextract_allocateLayers(a1[2], (uint64_t)"NASHVILLE_FE_MODULE", v10, *((unsigned __int16 *)v10 + 5) + 4 * *((__int16 *)v10 + 7));
    if (Layers < 0)
    {
      int v18 = Layers;
      char v19 = 1;
    }
    else
    {
      int v18 = usextract_Process(a1[2], (uint64_t)"NASHVILLE_FE_MODULE", a1[5], a3, a4, (uint64_t)v10, v15, v16);
      if ((v18 & 0x80000000) == 0)
      {
        uint64_t v21 = (int *)v10[439];
        if (v21)
        {
          if (*((_DWORD *)v10 + 880))
          {
            unint64_t v22 = (unsigned __int16 *)v10[225];
            uint64_t v23 = *v22;
            if (*v22)
            {
              uint64_t v24 = 0;
              while (*v21 != 26)
              {
                ++v24;
                v21 += 8;
                if (v23 == v24) {
                  goto LABEL_31;
                }
              }
              if (v23 <= (unsigned __int16)v24) {
                goto LABEL_30;
              }
              int v25 = 0;
              uint64_t v26 = v23 - v24;
              do
              {
                int v27 = *v21;
                v21 += 8;
                if (v27 == 8) {
                  int v25 = 1;
                }
                --v26;
              }
              while (v26);
              if (!v25)
              {
LABEL_30:
                v22[1] += v23 - v24;
                *unint64_t v22 = v24;
              }
            }
          }
        }
LABEL_31:
        NashvilleFE::retrieve_binding_with_rsrc((NashvilleFE *)&v47, a1[2]);
        uint64_t v28 = v47;
        if (v47)
        {
          unint64_t v29 = (void *)*v47;
          *unint64_t v29 = v10;
          v29[1] = a1[5];
          void v29[2] = a3;
          void v29[3] = a4;
          uint64_t v30 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v30 + 8) = 0u;
          *(void *)uint64_t v30 = off_26C215330;
          *((_OWORD *)v30 + 2) = 0u;
          *((void *)v30 + 3) = v30 + 32;
          Agglomerate::set<std::shared_ptr<NashvilleAdapterModuleInput>>((uint64_t)(v30 + 24), v28);
          unint64_t v31 = v28[2];
          std::string::size_type v45 = v30 + 24;
          std::string::size_type v46 = (std::__shared_weak_count *)v30;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v30 + 1, 1uLL, memory_order_relaxed);
          (*(void (**)(unint64_t, char **))(*(void *)v31 + 24))(v31, &v45);
          if (v46) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v46);
          }
          (*(void (**)(uint8_t *__return_ptr))(*(void *)v28[2] + 16))(buf);
          if (v28[9])
          {
            if (v32)
            {
              atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v42 = v32;
              atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            else
            {
              uint64_t v42 = 0;
            }
            std::function<void ()(std::shared_ptr<FrontendFeature>)>::operator()(v28[9]);
            if (v42) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v42);
            }
            if (v32) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v32);
            }
          }
          if (v44) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v30);
        }
        else
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          std::string::size_type v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_20CD80000, v33, OS_LOG_TYPE_INFO, "No binding found for rsrc object, probably synthesis is cancelled.", buf, 2u);
          }
          Diagnostics::log(6, "No binding found for rsrc object, probably synthesis is cancelled.", v34);
        }
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
      }
      char v19 = 0;
    }
LABEL_53:
    if (v49)
    {
      int v35 = nashville_fe_module_closeStreams(a1[6], (uint64_t)(a1 + 8));
      if (v35 < 0 && v18 > -1) {
        int v18 = v35;
      }
    }
    if ((v19 & 1) == 0)
    {
      int v37 = usextract_freeLayers(a1[2], (uint64_t)"NASHVILLE_FE_MODULE", v10, v12, v13, v14, v15, v16);
      if (v37 < 0 && v18 > -1) {
        int v18 = v37;
      }
    }
    if (v17 < 0) {
      goto LABEL_71;
    }
    goto LABEL_66;
  }
  if (v49)
  {
    int v18 = v11;
    if (a1[8])
    {
      int v18 = v11;
      if (*((_DWORD *)v10 + 880))
      {
        int v18 = (*(uint64_t (**)(void))(a1[6] + 104))();
        if (v18 < 0) {
          log_OutPublic(*(void *)(a1[2] + 32), (uint64_t)"NASHVILLE_FE_MODULE", 55008, "%s%s%s%x", v13, v14, v15, v16, "contentType");
        }
      }
    }
    char v19 = 1;
    *a5 = 1;
    goto LABEL_53;
  }
  *a5 = 0;
  int v18 = v11;
LABEL_66:
  int v39 = usextract_ProcessEnd(a1[2], (uint64_t)"NASHVILLE_FE_MODULE", (uint64_t)v10);
  if (v39 < 0 && v18 > -1) {
    int v18 = v39;
  }
LABEL_71:
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(a1[5] + 64))(a3, a4);
  if ((int)result >= 0 || v18 <= -1) {
    return v18;
  }
  else {
    return result;
  }
}

void sub_20D3A6260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(a1);
}

void sub_20D3A62C8()
{
}

void Agglomerate::set<std::shared_ptr<NashvilleAdapterModuleInput>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v8 = (char ***)off_26C206658;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v8 = (char ***)off_26C206658;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

uint64_t std::function<void ()(std::shared_ptr<FrontendFeature>)>::operator()(uint64_t a1)
{
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 48);
  return v1();
}

void Agglomerate::ItemHolder<std::shared_ptr<NashvilleAdapterModuleInput>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206658;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<NashvilleAdapterModuleInput>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206658;
  std::unique_lock<std::mutex> v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t nashville_fe_module_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 1029, 128) & 0x80000000) != 0) {
    return 2686459912;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  return nashville_fe_module_closeStreams(v3, a1 + 64);
}

uint64_t nashville_fe_module_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2686459905;
  }
  uint64_t result = 0;
  *a2 = &INashvilleFEModule;
  return result;
}

uint64_t nashville_fe_module_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 1029, 128);
  if ((result & 0x80000000) != 0) {
    return 2686459912;
  }
  if (a1)
  {
    if (a1[5]) {
      objc_ReleaseObject(*(void *)(a1[2] + 48), (uint64_t)"LINGDB");
    }
    if (a1[6]) {
      objc_ReleaseObject(*(void *)(a1[2] + 48), (uint64_t)"SYNTHSTREAM");
    }
    if (a1[7]) {
      objc_ReleaseObject(*(void *)(a1[2] + 48), (uint64_t)"FE_DEPES");
    }
    paramc_ParamSetStr(*(void *)(a1[2] + 40), (uint64_t)"uselectrawdataversion", &byte_20D5A22AE);
    paramc_ParamSetStr(*(void *)(a1[2] + 40), (uint64_t)"uselectreductionversion", &byte_20D5A22AE);
    uint64_t v4 = a1[4];
    if (v4)
    {
      uint64_t v5 = a1[3];
      if (!v5 || (uint64_t v6 = *(void *)(v5 + 48)) == 0) {
        uint64_t v6 = *(void *)(a1[2] + 48);
      }
      objc_ReleaseObject(v6, v4 + 152);
    }
    uint64_t v7 = a1[15];
    if (v7) {
      heap_Free(*(void **)(a1[2] + 8), v7);
    }
    heap_Free(*(void **)(a1[2] + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t nashville_fe_module_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  unsigned int v23 = 0;
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v26);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v10 = (void *)heap_Calloc(*(void **)(v26 + 8), 1, 128);
  if (!v10)
  {
    uint64_t Object = 2686459914;
    uint64_t v18 = v26;
LABEL_14:
    log_OutPublic(*(void *)(v18 + 32), (uint64_t)"NASHVILLE_FE_MODULE", 31000, 0, v11, v12, v13, v14, v22);
    return Object;
  }
  uint64_t v15 = v10;
  void *v10 = a3;
  v10[1] = a4;
  uint64_t v16 = v26;
  v10[2] = v26;
  void v10[3] = a1;
  v10[5] = 0;
  v10[6] = 0;
  v10[4] = 0;
  uint64_t v17 = heap_Calloc(*(void **)(v16 + 8), 1, 3656);
  v15[15] = v17;
  uint64_t v18 = v26;
  if (!v17)
  {
    uint64_t Object = 2686459914;
    goto LABEL_14;
  }
  paramc_ParamSetStr(*(void *)(v26 + 40), (uint64_t)"voiceaddon", &byte_20D5A22AE);
  uint64_t voice = nashville_fe_module_load_voice((_WORD **)v15);
  if ((voice & 0x80000000) != 0
    || (uint64_t voice = objc_GetObject(*(void *)(v26 + 48), (uint64_t)"LINGDB", &v24), (voice & 0x80000000) != 0))
  {
    uint64_t Object = voice;
    goto LABEL_16;
  }
  v15[5] = *(void *)(v24 + 8);
  uint64_t Object = objc_GetObject(*(void *)(v26 + 48), (uint64_t)"SYNTHSTREAM", &v25);
  if ((Object & 0x80000000) != 0)
  {
LABEL_16:
    nashville_fe_module_ObjClose(*(void **)a5, *(void *)(a5 + 8));
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return Object;
  }
  v15[6] = *(void *)(v25 + 8);
  *((_DWORD *)v15 + 28) = 0;
  if ((paramc_ParamGetUInt(*(void *)(v26 + 40), (uint64_t)"usewordorthography", &v23) & 0x80000000) == 0 && v23 == 1) {
    *((_DWORD *)v15 + 28) = 1;
  }
  *(void *)a5 = v15;
  *(_DWORD *)(a5 + 8) = 1029;
  return Object;
}

uint64_t nashville_fe_module_ClassClose()
{
  return 0;
}

uint64_t nashville_fe_module_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2686459911;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 1030;
  }
  return result;
}

void SharedObjectPool::get<RNN>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  uint64_t v5 = a2 + 32;
  {
    SharedObjectPool::get<VoiceConfig>(&v14, (long long **)a2);
    (*(void (**)(uint64_t (***__return_ptr)()))(*(void *)v14 + 16))(&p_p);
    if (v13)
    {
      uint64_t v6 = operator new(0x200uLL);
      v6[1] = 0;
      v6[2] = 0;
      *uint64_t v6 = off_26C218A88;
      std::string::basic_string[abi:ne180100]<0>(&__p, "rnn");
      NNetExtractor::NNetExtractor((uint64_t)(v6 + 3), (uint64_t *)&p_p, &__p);
    }
    if ((void)v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    p_p = (uint64_t (**)())&__p;
    if (!v7) {
      operator new();
    }
    p_p = off_26C2066B8;
    long long v12 = 0uLL;
    long long v12 = 0uLL;
    uint64_t v8 = *(std::__shared_weak_count **)(v7 + 16);
    *(_OWORD *)(v7 + 8) = 0uLL;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      p_p = off_26C2066B8;
      if (*((void *)&v12 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
      }
    }
  }
  uint64_t v10 = *(void *)(*(void *)v9 + 16);
  *a1 = *(void *)(*(void *)v9 + 8);
  a1[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D3A6B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v24);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::recursive_mutex::unlock(v21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RNNOutputDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2165C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<RNNOutputDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2165C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::ItemHolder<std::shared_ptr<RNN>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2066B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<RNN>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2066B8;
  std::unique_lock<std::mutex> v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t UTFText::dispatch_map_native_index_to_utf16(UTFText *this, const UText *a2)
{
  std::unique_lock<std::mutex> v2 = *(uint64_t (**)(void))(*(void *)UTFText::utf_text(this, a2) + 72);
  return v2();
}

uint64_t UTFText::utf_text(UTFText *this, const UText *a2)
{
  if (*((_UNKNOWN **)this + 7) != &UTFText::UTFTEXT_FUNCS)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v5, "UText instance %p is not an UTFText\n", this);
    MEMORY[0x210558D40](exception, v5);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  return *((void *)this + 9);
}

void sub_20D3A6E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t UTFText::dispatch_map_offset_to_native(UTFText *this, const UText *a2)
{
  std::unique_lock<std::mutex> v2 = *(uint64_t (**)(void))(*(void *)UTFText::utf_text(this, a2) + 64);
  return v2();
}

uint64_t UTFText::dispatch_copy(UTFText *this, UText *a2, uint64_t a3, uint64_t a4, uint64_t a5, signed __int8 a6, UErrorCode *a7)
{
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)UTFText::utf_text(this, a2) + 56);
  return v7();
}

uint64_t UTFText::dispatch_replace(UTFText *a1, const UText *a2)
{
  std::unique_lock<std::mutex> v2 = *(uint64_t (**)(void))(*(void *)UTFText::utf_text(a1, a2) + 48);
  return v2();
}

uint64_t UTFText::dispatch_extract(UTFText *a1, const UText *a2)
{
  std::unique_lock<std::mutex> v2 = *(uint64_t (**)(void))(*(void *)UTFText::utf_text(a1, a2) + 40);
  return v2();
}

uint64_t UTFText::dispatch_access(UTFText *this, UText *a2)
{
  std::unique_lock<std::mutex> v2 = *(uint64_t (**)(void))(*(void *)UTFText::utf_text(this, a2) + 32);
  return v2();
}

uint64_t UTFText::dispatch_native_length(UTFText *this, UText *a2)
{
  std::unique_lock<std::mutex> v2 = *(uint64_t (**)(void))(*(void *)UTFText::utf_text(this, a2) + 24);
  return v2();
}

uint64_t UTFText::dispatch_clone(UTFText *this, UText *a2, const UText *a3, signed __int8 a4, UErrorCode *a5)
{
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)UTFText::utf_text((UTFText *)a2, a2) + 16);
  return v5();
}

void UTFText::copy(UTFText *this, UText *a2, uint64_t a3, uint64_t a4, uint64_t a5, signed __int8 a6, UErrorCode *a7)
{
  *a7 = U_NO_WRITE_PERMISSION;
}

uint64_t UTFText::replace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  *a7 = 30;
  return 0;
}

UText *UTFText::clone(UTFText *this, UText *__dst, const UText *__src, int a4, UErrorCode *a5)
{
  if (a4)
  {
    uint64_t v5 = 0;
    *a5 = U_UNSUPPORTED_ERROR;
  }
  else
  {
    uint64_t v5 = __dst;
    memcpy(__dst, __src, __src->sizeOfStruct);
  }
  return v5;
}

void TTSACDecoder::~TTSACDecoder(AudioConverterRef *this)
{
  TTSACDecoder::~TTSACDecoder(this);
  JUMPOUT(0x2105595E0);
}

{
  *this = (AudioConverterRef)&off_26C200168;
  AudioConverterDispose(this[1]);
}

uint64_t TTSACDecoder::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, UInt32 a5, char *a6)
{
  inInputDataProcUserData[0] = *(_DWORD *)(a1 + 16);
  if ((inInputDataProcUserData[0] & 0x80000000) != 0)
  {
    uint64_t v9 = *a4;
    inInputDataProcUserData[1] = (unint64_t)(a4[1] - *a4) >> 1;
    uint64_t v20 = v9;
    uint64_t v21 = a3;
    uint64_t v22 = 0;
    int v23 = 0;
    int v24 = 0;
  }
  outOutputData.mNumberBuffers = 1;
  outOutputData.mBuffers[0].mNumberChannels = 1;
  do
  {
    outOutputData.mBuffers[0].mDataByteSize = 2 * a5;
    outOutputData.mBuffers[0].mData = a6;
    UInt32 ioOutputDataPacketSize = a5;
    if (AudioConverterFillComplexBuffer(*(AudioConverterRef *)(a1 + 8), (AudioConverterComplexInputDataProc)ttsac_fetch_data, inInputDataProcUserData, &ioOutputDataPacketSize, &outOutputData, 0))
    {
      BOOL v10 = 1;
    }
    else
    {
      BOOL v10 = ioOutputDataPacketSize == 0;
    }
    char v11 = !v10;
    int v12 = v11 & (ioOutputDataPacketSize < a5);
    if (v12) {
      UInt32 v13 = ioOutputDataPacketSize;
    }
    else {
      UInt32 v13 = 0;
    }
    if (v12) {
      uint64_t v14 = ioOutputDataPacketSize;
    }
    else {
      uint64_t v14 = 0;
    }
    BOOL v15 = v12 != 1 || a5 == ioOutputDataPacketSize;
    a5 -= v13;
    a6 += 2 * v14;
  }
  while (!v15);
  return AudioConverterReset(*(AudioConverterRef *)(a1 + 8));
}

uint64_t ttsac_fetch_data(OpaqueAudioConverter *a1, unsigned int *a2, AudioBufferList *a3, AudioStreamPacketDescription **a4, char *a5)
{
  int v5 = *((_DWORD *)a5 + 1);
  if ((*(_DWORD *)a5 & 0x80000000) != 0)
  {
    if (v5 >= 1) {
      int v5 = 1;
    }
    *a2 = v5;
    if (v5)
    {
      BOOL v10 = (unsigned __int16 *)*((void *)a5 + 1);
      char v11 = (char *)*((void *)a5 + 2);
      UInt32 v12 = *v10;
      a3->mBuffers[0].mData = v11;
      a3->mBuffers[0].mNumberChannels = 1;
      a3->mBuffers[0].mDataByteSize = v12;
      *((_DWORD *)a5 + 9) = v12;
      *((void *)a5 + 1) = v10 + 1;
      *((void *)a5 + 2) = &v11[v12];
      *a4 = (AudioStreamPacketDescription *)(a5 + 24);
      int v9 = *((_DWORD *)a5 + 1) - 1;
      goto LABEL_10;
    }
  }
  else
  {
    if (v5 >= *a2) {
      int v5 = *a2;
    }
    *a2 = v5;
    if (v5)
    {
      a3->mBuffers[0].mNumberChannels = 1;
      uint64_t v6 = (char *)*((void *)a5 + 2);
      a3->mBuffers[0].mData = v6;
      int v7 = *((_DWORD *)a5 + 1);
      uint64_t v8 = *(_DWORD *)a5 * *a2;
      a3->mBuffers[0].mDataByteSize = v8;
      *((void *)a5 + 2) = &v6[v8];
      int v9 = v7 - *a2;
LABEL_10:
      *((_DWORD *)a5 + 1) = v9;
    }
  }
  return 0;
}

void *InjectJSONImpl::set_text(uint64_t a1, uint64_t a2)
{
  v21[18] = *MEMORY[0x263EF8340];
  v18[3] = 0;
  v16[0] = 0;
  uint64_t v17 = 0;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v18);
  if ((v4 & 0x80u) == 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = v5;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = v6;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>(v7, v7 + v8, (uint64_t)v19, 1, (uint64_t)v20);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parse((uint64_t)v20, 1, (uint64_t)v16);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer((uint64_t)v21);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v19);
  int v9 = *(unsigned __int8 *)(a1 + 280);
  *(unsigned char *)(a1 + 280) = v16[0];
  v16[0] = v9;
  BOOL v10 = *(uint64_t **)(a1 + 288);
  *(void *)(a1 + 288) = v17;
  uint64_t v17 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v9);
  uint64_t result = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v18);
  int v12 = *(unsigned __int8 *)(a1 + 280);
  if (*(unsigned char *)(a1 + 280))
  {
    if (v12 == 2)
    {
      uint64_t v14 = 0;
      uint64_t v13 = **(void **)(a1 + 288);
    }
    else
    {
      if (v12 != 1)
      {
        uint64_t v13 = 0;
        unint64_t v15 = 0;
        uint64_t v14 = 0;
        goto LABEL_15;
      }
      uint64_t v13 = 0;
      uint64_t v14 = **(void **)(a1 + 288);
    }
    unint64_t v15 = 0x8000000000000000;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 1;
  }
LABEL_15:
  *(void *)(a1 + 296) = a1 + 280;
  *(void *)(a1 + 304) = v14;
  *(void *)(a1 + 312) = v13;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = v15;
  return result;
}

void sub_20D3A75B4(_Unwind_Exception *a1, unsigned __int8 a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer(v4 + 40);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v3, a2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void InjectJSONImpl::generate_tokens(InjectJSONImpl *this)
{
  uint64_t v264 = *MEMORY[0x263EF8340];
  std::unique_lock<std::mutex> v2 = (unsigned __int8 **)((char *)this + 296);
  uint64_t v3 = (unsigned __int8 *)this + 280;
  char v252 = (uint64_t **)((char *)this + 208);
  size_t v249 = (char *)this + 216;
  int v250 = (uint64_t **)((char *)this + 232);
  std::string::size_type v251 = (uint64_t **)((char *)this + 256);
  uint64_t v255 = (char *)this + 280;
  while (2)
  {
    int v4 = *v3;
    if (v4 == 2)
    {
      uint64_t v6 = 0;
      uint64_t v5 = *(void *)(*((void *)this + 36) + 8);
      goto LABEL_6;
    }
    if (v4 == 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = *((void *)this + 36) + 8;
LABEL_6:
      unint64_t v7 = 0x8000000000000000;
      goto LABEL_8;
    }
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 1;
LABEL_8:
    *(void *)std::string buf = v3;
    *(void *)&uint8_t buf[8] = v6;
    *(void *)char v263 = v5;
    *(void *)&v263[8] = 0;
    *(void *)&v263[16] = v7;
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(v2, (unsigned __int8 **)buf))
    {
      *((unsigned char *)this + 8) = 1;
      return;
    }
    uint64_t v8 = *v2;
    int v9 = **v2;
    if (v9 == 2)
    {
      uint64_t v8 = (unsigned __int8 *)*((void *)this + 39);
    }
    else if (v9 == 1)
    {
      uint64_t v8 = (unsigned __int8 *)(*((void *)this + 38) + 56);
    }
    else if (*((void *)this + 41))
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(buf, "cannot get value");
      nlohmann::detail::invalid_iterator::create(214, (uint64_t)buf, exception);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "what");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v8, (const void **)buf, &__p);
    if ((v263[7] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      p_p = &__p;
      switch(*((unsigned char *)&__p.__r_.__value_.__s + 23))
      {
        case 5:
          goto LABEL_30;
        case 6:
          BOOL v11 = LODWORD(__p.__r_.__value_.__l.__data_) == 1651469415 && WORD2(__p.__r_.__value_.__r.__words[0]) == 27745;
          if (v11) {
            goto LABEL_85;
          }
          if (LODWORD(__p.__r_.__value_.__l.__data_) != 1634887792 || WORD2(__p.__r_.__value_.__r.__words[0]) != 25971) {
            goto LABEL_98;
          }
          goto LABEL_77;
        case 8:
          std::string::size_type v18 = __p.__r_.__value_.__r.__words[0];
          goto LABEL_44;
        case 0xA:
          if (__p.__r_.__value_.__r.__words[0] != 0x7475626972747461
            || LOWORD(__p.__r_.__value_.__r.__words[1]) != 29541)
          {
            goto LABEL_98;
          }
          goto LABEL_112;
        default:
          goto LABEL_98;
      }
    }
    switch(__p.__r_.__value_.__l.__size_)
    {
      case 5uLL:
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_30:
        int data = (int)p_p->__r_.__value_.__l.__data_;
        int v14 = p_p->__r_.__value_.__s.__data_[4];
        if (data != 1701539700 || v14 != 110) {
          goto LABEL_98;
        }
        int v16 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v2);
        InjectJSONImpl::inject_token((uint64_t)this, v16);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(v2);
        char v17 = 0;
        goto LABEL_108;
      case 6uLL:
        if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 1651469415
          || *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 4) != 27745)
        {
          if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 1634887792
            || *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 4) != 25971)
          {
LABEL_98:
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              uint64_t v59 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = v59;
            }
            uint64_t v60 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            goto LABEL_107;
          }
LABEL_77:
          int v37 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v2);
          uint64_t v38 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v38 + 8) = 0u;
          *(void *)uint64_t v38 = off_26C215330;
          *((_OWORD *)v38 + 2) = 0u;
          *((void *)v38 + 3) = v38 + 32;
          uint64_t v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v37, "id");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v39, (std::string *)buf);
          v261.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          uint64_t v40 = std::__tree<std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Agglomerate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v250, (const void **)buf, &v261);
          atomic_fetch_add_explicit((atomic_ullong *volatile)v38 + 1, 1uLL, memory_order_relaxed);
          uint64_t v41 = (std::__shared_weak_count *)v40[8];
          v40[7] = (uint64_t)(v38 + 24);
          v40[8] = (uint64_t)v38;
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
          if ((v263[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (*v37 == 1
            && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)v37 + 1), "num_words"))
          {
            uint64_t v42 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v37, "num_words");
            *(void *)std::string buf = 0;
            nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v42, (unint64_t *)buf);
            uint64_t v43 = *(void *)buf;
            std::string::size_type v44 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v37, "num_syllables");
            *(void *)std::string buf = 0;
            nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v44, (unint64_t *)buf);
            uint64_t v45 = *(void *)buf;
            std::string::size_type v46 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v37, "num_phonemes");
            *(void *)std::string buf = 0;
            nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v46, (unint64_t *)buf);
            uint64_t v47 = *(void *)buf;
            *(void *)std::string buf = &v261;
            if (!v48) {
              operator new();
            }
            v48[1] = v47;
            v48[2] = v45;
            v48[3] = v43;
            uint64_t v3 = (unsigned __int8 *)v255;
          }
          std::string v133 = (std::__shared_weak_count *)v38;
LABEL_570:
          std::__shared_weak_count::__release_shared[abi:ne180100](v133);
          goto LABEL_107;
        }
LABEL_85:
        int v49 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v2);
        unsigned int v50 = (char *)operator new(0xC8uLL);
        *((void *)v50 + 1) = 0;
        *((void *)v50 + 2) = 0;
        *(void *)unsigned int v50 = off_26C217160;
        *(_OWORD *)(v50 + 120) = 0u;
        *(_OWORD *)(v50 + 40) = 0u;
        *(_OWORD *)(v50 + 56) = 0u;
        *(_OWORD *)(v50 + 72) = 0u;
        *(_OWORD *)(v50 + 88) = 0u;
        *(_OWORD *)(v50 + 104) = 0u;
        *(_OWORD *)(v50 + 24) = 0u;
        *(_OWORD *)(v50 + 136) = 0u;
        *((void *)v50 + 16) = v50 + 136;
        *(_OWORD *)(v50 + 152) = 0u;
        *(_OWORD *)(v50 + 168) = 0u;
        *(_OWORD *)(v50 + 184) = 0u;
        uint64_t v51 = (std::__shared_weak_count *)*((void *)this + 25);
        *((void *)this + 24) = v50 + 24;
        *((void *)this + 25) = v50;
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        std::string::basic_string[abi:ne180100]<0>(&v261, "text");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v49, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
        uint64_t v52 = *((void *)this + 24);
        if (*(char *)(v52 + 23) < 0) {
          operator delete(*(void **)v52);
        }
        long long v53 = *(_OWORD *)buf;
        *(void *)(v52 + 16) = *(void *)v263;
        *(_OWORD *)uint64_t v52 = v53;
        v263[7] = 0;
        buf[0] = 0;
        if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v261.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v261, "parser");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("legacy", (char *)v49, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
        int v54 = v263[7];
        if ((v263[7] & 0x80000000) != 0)
        {
          if (*(void *)&buf[8] != 4)
          {
            *(_DWORD *)(*((void *)this + 24) + 24) = 1818715001;
LABEL_148:
            operator delete(*(void **)buf);
            goto LABEL_149;
          }
          uint64_t v55 = *(unsigned int **)buf;
        }
        else
        {
          if (v263[7] != 4)
          {
            *(_DWORD *)(*((void *)this + 24) + 24) = 1818715001;
LABEL_149:
            if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v261.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v261, "base");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v49, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
            uint64_t v72 = *((void *)this + 24);
            uint64_t v73 = v72 + 32;
            if (*(char *)(v72 + 55) < 0) {
              operator delete(*(void **)v73);
            }
            *(_OWORD *)uint64_t v73 = *(_OWORD *)buf;
            *(void *)(v73 + 16) = *(void *)v263;
            v263[7] = 0;
            buf[0] = 0;
            if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v261.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v261, "startmark");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v49, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
            uint64_t v74 = *((void *)this + 24);
            uint64_t v75 = v74 + 56;
            if (*(char *)(v74 + 79) < 0) {
              operator delete(*(void **)v75);
            }
            *(_OWORD *)uint64_t v75 = *(_OWORD *)buf;
            *(void *)(v75 + 16) = *(void *)v263;
            v263[7] = 0;
            buf[0] = 0;
            if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v261.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v261, "endmark");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v49, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
            uint64_t v76 = *((void *)this + 24);
            uint64_t v77 = v76 + 80;
            if (*(char *)(v76 + 103) < 0) {
              operator delete(*(void **)v77);
            }
            *(_OWORD *)uint64_t v77 = *(_OWORD *)buf;
            *(void *)(v77 + 16) = *(void *)v263;
            v263[7] = 0;
            buf[0] = 0;
            if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v261.__r_.__value_.__l.__data_);
            }
            if (*v49 == 1)
            {
              if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)v49 + 1), "lexica"))
              {
                uint64_t v78 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v49, "lexica");
                long long v79 = (unsigned __int8 *)v78;
                *(_OWORD *)&v257.__r_.__value_.__r.__words[1] = 0uLL;
                v257.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257.__r_.__value_.__l.__size_;
                if (*(unsigned char *)v78 != 1)
                {
                  unint64_t v241 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
                  unint64_t v242 = *v79;
                  if (v242 > 9) {
                    uint64_t v243 = "number";
                  }
                  else {
                    uint64_t v243 = off_2641152A0[v242];
                  }
                  unint64_t v244 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v261, v243);
                  uint64_t v245 = std::string::insert(v244, 0, "type must be object, but is ");
                  long long v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
                  *(void *)char v263 = *((void *)&v245->__r_.__value_.__l + 2);
                  *(_OWORD *)std::string buf = v246;
                  v245->__r_.__value_.__l.__size_ = 0;
                  v245->__r_.__value_.__r.__words[2] = 0;
                  v245->__r_.__value_.__r.__words[0] = 0;
                  nlohmann::detail::type_error::create(302, (uint64_t)buf, v241);
                }
                p_std::string::size_type size = (uint64_t *)&v260.__r_.__value_.__l.__size_;
                *(_OWORD *)&v260.__r_.__value_.__r.__words[1] = 0uLL;
                v260.__r_.__value_.__r.__words[0] = (std::string::size_type)&v260.__r_.__value_.__l.__size_;
                long long v81 = *(void **)(v78 + 8);
                int v84 = (void *)*v81;
                long long v82 = v81 + 1;
                long long v83 = v84;
                if (v84 == v82)
                {
                  std::string::size_type size = 0;
                }
                else
                {
                  do
                  {
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v261, (uint64_t)(v83 + 7));
                    if (*((char *)v83 + 55) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v83[4], v83[5]);
                    }
                    else
                    {
                      *(_OWORD *)std::string buf = *((_OWORD *)v83 + 2);
                      *(void *)char v263 = v83[6];
                    }
                    v263[8] = v261.__r_.__value_.__s.__data_[0];
                    *(void *)&v263[16] = v261.__r_.__value_.__l.__size_;
                    v261.__r_.__value_.__s.__data_[0] = 0;
                    v261.__r_.__value_.__l.__size_ = 0;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v261.__r_.__value_.__l.__size_, 0);
                    long long v85 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(&v260, p_size, v259, &v258, (const void **)buf);
                    long long v86 = *v85;
                    if (!*v85)
                    {
                      long long v87 = (char *)operator new(0x48uLL);
                      v261.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
                      v261.__r_.__value_.__l.__size_ = (std::string::size_type)&v260.__r_.__value_.__l.__size_;
                      v261.__r_.__value_.__s.__data_[16] = 0;
                      long long v88 = (std::string *)(v87 + 32);
                      if ((v263[7] & 0x80000000) != 0)
                      {
                        std::string::__init_copy_ctor_external(v88, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
                        long long v89 = (uint64_t *)v261.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        *(_OWORD *)&v88->__r_.__value_.__l.__data_ = *(_OWORD *)buf;
                        *((void *)v87 + 6) = *(void *)v263;
                        long long v89 = (uint64_t *)v87;
                      }
                      v87[56] = v263[8];
                      *((void *)v87 + 8) = *(void *)&v263[16];
                      v263[8] = 0;
                      *(void *)&v263[16] = 0;
                      v261.__r_.__value_.__s.__data_[16] = 1;
                      std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)&v260, (uint64_t)v259[0], v85, v89);
                      long long v86 = (uint64_t *)v261.__r_.__value_.__r.__words[0];
                      v261.__r_.__value_.__r.__words[0] = 0;
                      std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v261, 0);
                    }
                    long long v90 = (uint64_t *)v86[1];
                    if (v90)
                    {
                      do
                      {
                        p_std::string::size_type size = v90;
                        long long v90 = (uint64_t *)*v90;
                      }
                      while (v90);
                    }
                    else
                    {
                      do
                      {
                        p_std::string::size_type size = (uint64_t *)v86[2];
                        BOOL v11 = *p_size == (void)v86;
                        long long v86 = p_size;
                      }
                      while (!v11);
                    }
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v263[16], v263[8]);
                    if ((v263[7] & 0x80000000) != 0) {
                      operator delete(*(void **)buf);
                    }
                    long long v91 = (void *)v83[1];
                    if (v91)
                    {
                      do
                      {
                        long long v92 = v91;
                        long long v91 = (void *)*v91;
                      }
                      while (v91);
                    }
                    else
                    {
                      do
                      {
                        long long v92 = (void *)v83[2];
                        BOOL v11 = *v92 == (void)v83;
                        long long v83 = v92;
                      }
                      while (!v11);
                    }
                    long long v83 = v92;
                  }
                  while (v92 != v82);
                  std::string::size_type size = (char *)v257.__r_.__value_.__l.__size_;
                }
                std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)&v257, size);
                uint64_t v98 = (char *)v260.__r_.__value_.__l.__size_;
                std::string v257 = v260;
                if (v260.__r_.__value_.__r.__words[2])
                {
                  *(void *)(v260.__r_.__value_.__l.__size_ + 16) = &v257.__r_.__value_.__l.__size_;
                  v260.__r_.__value_.__r.__words[0] = (std::string::size_type)&v260.__r_.__value_.__l.__size_;
                  *(_OWORD *)&v260.__r_.__value_.__r.__words[1] = 0uLL;
                  uint64_t v98 = 0;
                }
                else
                {
                  v257.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257.__r_.__value_.__l.__size_;
                }
                std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)&v260, v98);
                std::string::size_type v99 = v257.__r_.__value_.__r.__words[0];
                if ((std::string::size_type *)v257.__r_.__value_.__l.__data_ != &v257.__r_.__value_.__r.__words[1])
                {
                  do
                  {
                    memset(v263, 0, 32);
                    *(_OWORD *)std::string buf = 0u;
                    *(_DWORD *)&v263[32] = 2139095040;
                    *(_OWORD *)&v263[40] = xmmword_20D6B4A70;
                    std::string::basic_string[abi:ne180100]<0>(&v260, "uri");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)(v99 + 56), (const void **)&v260.__r_.__value_.__l.__data_, &v261);
                    if ((v263[7] & 0x80000000) != 0) {
                      operator delete(*(void **)buf);
                    }
                    *(_OWORD *)std::string buf = *(_OWORD *)&v261.__r_.__value_.__l.__data_;
                    *(void *)char v263 = *((void *)&v261.__r_.__value_.__l + 2);
                    *((unsigned char *)&v261.__r_.__value_.__s + 23) = 0;
                    v261.__r_.__value_.__s.__data_[0] = 0;
                    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v260.__r_.__value_.__l.__data_);
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v260, "media_type");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)(v99 + 56), (const void **)&v260.__r_.__value_.__l.__data_, &v261);
                    if ((v263[31] & 0x80000000) != 0) {
                      operator delete(*(void **)&v263[8]);
                    }
                    *(std::string *)&v263[8] = v261;
                    *((unsigned char *)&v261.__r_.__value_.__s + 23) = 0;
                    v261.__r_.__value_.__s.__data_[0] = 0;
                    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v260.__r_.__value_.__l.__data_);
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v261, "timeout");
                    LODWORD(v260.__r_.__value_.__l.__data_) = 2139095040;
                    *(_DWORD *)&v263[32] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)(v99 + 56), (const void **)&v261.__r_.__value_.__l.__data_, (uint64_t)&v260);
                    if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v261.__r_.__value_.__l.__data_);
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v261, "maxage");
                    LODWORD(v260.__r_.__value_.__l.__data_) = -1;
                    *(void *)&v263[40] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<unsigned int,0>((unsigned __int8 *)(v99 + 56), (const void **)&v261.__r_.__value_.__l.__data_, (unsigned int *)&v260);
                    if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v261.__r_.__value_.__l.__data_);
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v261, "maxstale");
                    LODWORD(v260.__r_.__value_.__l.__data_) = 0;
                    *(void *)&v263[48] = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)(v99 + 56), (const void **)&v261.__r_.__value_.__l.__data_, (unsigned int *)&v260);
                    if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v261.__r_.__value_.__l.__data_);
                    }
                    long long v100 = (uint64_t **)(*((void *)this + 24) + 104);
                    v261.__r_.__value_.__r.__words[0] = v99 + 32;
                    long long v101 = std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v100, (const void **)(v99 + 32), (long long **)&v261);
                    std::string::operator=((std::string *)(v101 + 56), (const std::string *)buf);
                    std::string::operator=((std::string *)(v101 + 80), (const std::string *)&v263[8]);
                    *(_OWORD *)(v101 + 104) = *(_OWORD *)&v263[32];
                    *((void *)v101 + 15) = *(void *)&v263[48];
                    if ((v263[31] & 0x80000000) != 0) {
                      operator delete(*(void **)&v263[8]);
                    }
                    if ((v263[7] & 0x80000000) != 0) {
                      operator delete(*(void **)buf);
                    }
                    long long v102 = *(std::string **)(v99 + 8);
                    if (v102)
                    {
                      do
                      {
                        long long v103 = v102;
                        long long v102 = (std::string *)v102->__r_.__value_.__r.__words[0];
                      }
                      while (v102);
                    }
                    else
                    {
                      do
                      {
                        long long v103 = *(std::string **)(v99 + 16);
                        BOOL v11 = v103->__r_.__value_.__r.__words[0] == v99;
                        std::string::size_type v99 = (std::string::size_type)v103;
                      }
                      while (!v11);
                    }
                    std::string::size_type v99 = (std::string::size_type)v103;
                  }
                  while (v103 != (std::string *)&v257.__r_.__value_.__r.__words[1]);
                }
                std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)&v257, (char *)v257.__r_.__value_.__l.__size_);
              }
              if (*v49 == 1)
              {
                if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)v49 + 1), "meta"))
                {
                  uint64_t v104 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v49, "meta");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v104, &v261);
                  std::string::size_type v105 = v261.__r_.__value_.__l.__size_;
                  for (uint64_t i = (char *)v261.__r_.__value_.__r.__words[0]; i != (char *)v105; i += 16)
                  {
                    memset(v263, 0, sizeof(v263));
                    *(_OWORD *)std::string buf = 0u;
                    std::string::basic_string[abi:ne180100]<0>(&v257, "name");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, i, (const void **)&v257.__r_.__value_.__l.__data_, &v260);
                    *(_OWORD *)std::string buf = *(_OWORD *)&v260.__r_.__value_.__l.__data_;
                    *(void *)char v263 = *((void *)&v260.__r_.__value_.__l + 2);
                    *((unsigned char *)&v260.__r_.__value_.__s + 23) = 0;
                    v260.__r_.__value_.__s.__data_[0] = 0;
                    if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v257.__r_.__value_.__l.__data_);
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v257, "http-equiv");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, i, (const void **)&v257.__r_.__value_.__l.__data_, &v260);
                    *(std::string *)&v263[8] = v260;
                    *((unsigned char *)&v260.__r_.__value_.__s + 23) = 0;
                    v260.__r_.__value_.__s.__data_[0] = 0;
                    if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v257.__r_.__value_.__l.__data_);
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v257, "content");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, i, (const void **)&v257.__r_.__value_.__l.__data_, &v260);
                    *(std::string *)&v263[32] = v260;
                    *((unsigned char *)&v260.__r_.__value_.__s + 23) = 0;
                    v260.__r_.__value_.__s.__data_[0] = 0;
                    if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v257.__r_.__value_.__l.__data_);
                    }
                    long long v107 = (int64x2_t *)*((void *)this + 24);
                    unint64_t v108 = v107[8].u64[1];
                    if (v108 >= v107[9].i64[0])
                    {
                      uint64_t v109 = std::vector<MetaElement>::__push_back_slow_path<MetaElement const&>(v107 + 8, (long long *)buf);
                    }
                    else
                    {
                      std::allocator<MetaElement>::construct[abi:ne180100]<MetaElement,MetaElement const&>((std::string *)v107[8].i64[1], (long long *)buf);
                      uint64_t v109 = v108 + 72;
                      v107[8].i64[1] = v108 + 72;
                    }
                    v107[8].i64[1] = v109;
                    if ((v263[55] & 0x80000000) != 0) {
                      operator delete(*(void **)&v263[32]);
                    }
                    uint64_t v3 = (unsigned __int8 *)v255;
                    if ((v263[31] & 0x80000000) != 0) {
                      operator delete(*(void **)&v263[8]);
                    }
                    if ((v263[7] & 0x80000000) != 0) {
                      operator delete(*(void **)buf);
                    }
                  }
                  *(void *)std::string buf = &v261;
                  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                }
                if (*v49 == 1
                  && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)v49 + 1), "metadata"))
                {
                  uint64_t v110 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v49, "metadata");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v110, &v261);
                  std::string::size_type v112 = v261.__r_.__value_.__l.__size_;
                  for (uint64_t j = v261.__r_.__value_.__r.__words[0]; j != v112; j += 16)
                  {
                    uint64_t v113 = *((void *)this + 24);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(j, &v260);
                    unint64_t v114 = *(void *)(v113 + 168);
                    unint64_t v115 = *(void *)(v113 + 160);
                    if (v115 >= v114)
                    {
                      uint64_t v117 = *(void *)(v113 + 152);
                      unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115 - v117) >> 3);
                      unint64_t v119 = v118 + 1;
                      if (v118 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v120 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - v117) >> 3);
                      if (2 * v120 > v119) {
                        unint64_t v119 = 2 * v120;
                      }
                      if (v120 >= 0x555555555555555) {
                        unint64_t v121 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v121 = v119;
                      }
                      *(void *)&v263[16] = v113 + 168;
                      if (v121) {
                        uint64_t v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v113 + 168, v121);
                      }
                      else {
                        uint64_t v122 = 0;
                      }
                      int v123 = &v122[24 * v118];
                      *(void *)std::string buf = v122;
                      *(void *)&uint8_t buf[8] = v123;
                      *(void *)&v263[8] = &v122[24 * v121];
                      long long v124 = *(_OWORD *)&v260.__r_.__value_.__l.__data_;
                      *((void *)v123 + 2) = *((void *)&v260.__r_.__value_.__l + 2);
                      *(_OWORD *)int v123 = v124;
                      memset(&v260, 0, sizeof(v260));
                      *(void *)char v263 = v123 + 24;
                      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v113 + 152), (std::__split_buffer<std::string> *)buf);
                      uint64_t v125 = *(void *)(v113 + 160);
                      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)buf);
                      int v126 = SHIBYTE(v260.__r_.__value_.__r.__words[2]);
                      *(void *)(v113 + 160) = v125;
                      uint64_t v3 = (unsigned __int8 *)v255;
                      if (v126 < 0) {
                        operator delete(v260.__r_.__value_.__l.__data_);
                      }
                    }
                    else
                    {
                      long long v116 = *(_OWORD *)&v260.__r_.__value_.__l.__data_;
                      *(void *)(v115 + 16) = *((void *)&v260.__r_.__value_.__l + 2);
                      *(_OWORD *)unint64_t v115 = v116;
                      *(void *)(v113 + 160) = v115 + 24;
                    }
                  }
                  *(void *)std::string buf = &v261;
                  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                }
              }
            }
            goto LABEL_107;
          }
          uint64_t v55 = (unsigned int *)buf;
        }
        unsigned int v65 = bswap32(*v55);
        BOOL v66 = v65 >= 0x73736D6C;
        int v67 = v65 > 0x73736D6C;
        int v68 = !v66;
        if (v67 == v68) {
          int v69 = 1936944492;
        }
        else {
          int v69 = 1818715001;
        }
        *(_DWORD *)(*((void *)this + 24) + 24) = v69;
        if ((v54 & 0x80000000) == 0) {
          goto LABEL_149;
        }
        goto LABEL_148;
      case 8uLL:
        std::string::size_type v18 = *(void *)__p.__r_.__value_.__l.__data_;
LABEL_44:
        if (v18 != 0x65636E65746E6573) {
          goto LABEL_98;
        }
        uint64_t v20 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v2);
        uint64_t v21 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v21 + 8) = 0u;
        *(void *)uint64_t v21 = off_26C215330;
        *((_OWORD *)v21 + 2) = 0u;
        *((void *)v21 + 3) = v21 + 32;
        uint64_t v22 = (uint64_t)(v21 + 24);
        uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v20, "id");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v23, (std::string *)buf);
        v261.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        int v24 = std::__tree<std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Agglomerate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v251, (const void **)buf, &v261);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v21 + 1, 1uLL, memory_order_relaxed);
        uint64_t v25 = (std::__shared_weak_count *)v24[8];
        v24[7] = (uint64_t)(v21 + 24);
        v24[8] = (uint64_t)v21;
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        if ((v263[7] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (*v20 != 1) {
          goto LABEL_197;
        }
        if (!std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)v20 + 1), "sent_type"))goto LABEL_190; {
        std::string::basic_string[abi:ne180100]<0>(&v261, "sent_type");
        }
        if (*v20 != 1
          || !std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*((void *)v20 + 1), (const void **)&v261.__r_.__value_.__l.__data_))
        {
          LODWORD(v31) = 0;
          goto LABEL_143;
        }
        uint64_t v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v20, (const void **)&v261.__r_.__value_.__l.__data_);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v26, (std::string *)buf);
        int v27 = operator new(0x18uLL);
        *(_OWORD *)int v27 = xmmword_264113FE0;
        v27[2] = "yes/no-question";
        uint64_t v28 = v263[7];
        uint64_t v29 = *(void *)&buf[8];
        if (v263[7] >= 0) {
          uint64_t v30 = v263[7];
        }
        else {
          uint64_t v30 = *(void *)&buf[8];
        }
        if (!v30) {
          goto LABEL_65;
        }
        uint64_t v31 = 0;
        std::string __s1 = *(uint8_t **)buf;
        do
        {
          size_t v32 = strlen((const char *)v27[v31]);
          size_t v33 = v32;
          if ((v28 & 0x80) != 0)
          {
            if (v32 != v29) {
              goto LABEL_64;
            }
            int v34 = __s1;
            if (v29 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
          }
          else
          {
            if (v32 != v28) {
              goto LABEL_64;
            }
            int v34 = buf;
          }
          if (!memcmp(v34, (const void *)v27[v31], v33)) {
            goto LABEL_66;
          }
LABEL_64:
          ++v31;
        }
        while (v31 != 3);
LABEL_65:
        LODWORD(v31) = 0;
LABEL_66:
        operator delete(v27);
        uint64_t v3 = (unsigned __int8 *)v255;
        if ((v263[7] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
LABEL_143:
        if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v261.__r_.__value_.__l.__data_);
        }
        *(void *)std::string buf = &v261;
        if (!v71) {
          operator new();
        }
        *(_DWORD *)(v71 + 8) = v31;
LABEL_190:
        if (*v20 == 1)
        {
          uint64_t v94 = *((void *)v20 + 1);
          __int16 v97 = *(uint64_t **)(v94 + 8);
          __int16 v95 = (uint64_t *)(v94 + 8);
          for (uint64_t k = v97; k; uint64_t k = (uint64_t *)*k)
          {
            if (std::string::compare((const std::string *)(k + 4), "num_phrases") <= 0)
            {
              if ((std::string::compare((const std::string *)(k + 4), "num_phrases") & 0x80000000) == 0)
              {
                std::string v141 = (uint64_t *)*k;
                uint64_t v142 = k;
                if (*k)
                {
                  uint64_t v142 = k;
                  do
                  {
                    int v143 = std::string::compare((const std::string *)(v141 + 4), "num_phrases");
                    unint64_t v144 = (uint64_t **)(v141 + 1);
                    if (v143 >= 0)
                    {
                      unint64_t v144 = (uint64_t **)v141;
                      uint64_t v142 = v141;
                    }
                    std::string v141 = *v144;
                  }
                  while (*v144);
                }
                std::string::value_type v145 = (uint64_t *)k[1];
                if (v145)
                {
                  do
                  {
                    int v146 = std::string::compare((const std::string *)(v145 + 4), "num_phrases");
                    unint64_t v147 = (uint64_t **)(v145 + 1);
                    if (v146 > 0)
                    {
                      unint64_t v147 = (uint64_t **)v145;
                      __int16 v95 = v145;
                    }
                    std::string::value_type v145 = *v147;
                  }
                  while (*v147);
                }
                uint64_t v3 = (unsigned __int8 *)v255;
                if (v142 != v95)
                {
                  std::vector<std::string> v148 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v20, "num_phrases");
                  *(void *)std::string buf = 0;
                  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v148, (unint64_t *)buf);
                  uint64_t v149 = *(void *)buf;
                  std::string v150 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v20, "num_words");
                  *(void *)std::string buf = 0;
                  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v150, (unint64_t *)buf);
                  uint64_t v151 = *(void *)buf;
                  int64_t v152 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v20, "num_syllables");
                  *(void *)std::string buf = 0;
                  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v152, (unint64_t *)buf);
                  uint64_t v153 = *(void *)buf;
                  unint64_t v154 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v20, "num_phonemes");
                  *(void *)std::string buf = 0;
                  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v154, (unint64_t *)buf);
                  uint64_t v155 = *(void *)buf;
                  *(void *)std::string buf = &v261;
                  if (!v156) {
                    operator new();
                  }
                  v156[1] = v155;
                  v156[2] = v153;
                  v156[3] = v151;
                  v156[4] = v149;
                  uint64_t v3 = (unsigned __int8 *)v255;
                }
                break;
              }
              ++k;
            }
            else
            {
              __int16 v95 = k;
            }
          }
        }
LABEL_197:
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v21);
LABEL_107:
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(v2);
        char v17 = 1;
LABEL_108:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v17) {
          continue;
        }
        return;
      case 0xAuLL:
        if (*(void *)__p.__r_.__value_.__l.__data_ != 0x7475626972747461
          || *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 8) != 29541)
        {
          goto LABEL_98;
        }
LABEL_112:
        uint64_t v61 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v2);
        std::string::basic_string[abi:ne180100]<0>(&v261, "super");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
        v260.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        uint64_t v62 = std::__tree<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v252, (const void **)buf, &v260);
        uint64_t v64 = (const void **)*((void *)v62 + 7);
        unsigned int v63 = (std::__shared_weak_count *)*((void *)v62 + 8);
        if (v63) {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        __s1a = v63;
        if ((v263[7] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v261.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "type");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)buf, &v260);
        if ((v263[7] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if ((*((unsigned char *)&v260.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          switch(*((unsigned char *)&v260.__r_.__value_.__s + 23))
          {
            case 4:
              if (LODWORD(v260.__r_.__value_.__l.__data_) == 1146244951) {
                goto LABEL_298;
              }
              if (LODWORD(v260.__r_.__value_.__l.__data_) == 1196310860) {
                goto LABEL_356;
              }
              goto LABEL_367;
            case 5:
              if (LODWORD(v260.__r_.__value_.__l.__data_) == 1095061587 && v260.__r_.__value_.__s.__data_[4] == 75) {
                goto LABEL_342;
              }
              if (LODWORD(v260.__r_.__value_.__l.__data_) == 1128877910 && v260.__r_.__value_.__s.__data_[4] == 69) {
                goto LABEL_355;
              }
              if ((*((unsigned char *)&v260.__r_.__value_.__s + 23) & 0x80) != 0) {
                goto LABEL_315;
              }
              goto LABEL_327;
            case 6:
              if (LODWORD(v260.__r_.__value_.__l.__data_) != 1263488844
                || WORD2(v260.__r_.__value_.__r.__words[0]) != 20565)
              {
                goto LABEL_366;
              }
              goto LABEL_306;
            case 7:
              if (LODWORD(v260.__r_.__value_.__l.__data_) != 1397707344
                || *(_DWORD *)((char *)v260.__r_.__value_.__r.__words + 3) != 1497648979)
              {
                goto LABEL_578;
              }
              goto LABEL_281;
            case 8:
              if (v260.__r_.__value_.__r.__words[0] == 0x45434E45544E4553) {
                goto LABEL_335;
              }
              if (v260.__r_.__value_.__r.__words[0] != 0x5349534148504D45) {
                goto LABEL_578;
              }
              goto LABEL_334;
            case 9:
              if (v260.__r_.__value_.__r.__words[0] != 0x5041524741524150 || v260.__r_.__value_.__s.__data_[8] != 72) {
                goto LABEL_578;
              }
              goto LABEL_341;
            default:
              goto LABEL_578;
          }
        }
        break;
      default:
        goto LABEL_98;
    }
    break;
  }
  std::string::size_type v70 = v260.__r_.__value_.__l.__size_;
  switch(v260.__r_.__value_.__l.__size_)
  {
    case 4uLL:
      if (*(_DWORD *)v260.__r_.__value_.__l.__data_ == 1146244951)
      {
LABEL_298:
        int v129 = 4;
        goto LABEL_382;
      }
      if (*(_DWORD *)v260.__r_.__value_.__l.__data_ == 1196310860)
      {
LABEL_356:
        int v129 = 6;
        goto LABEL_382;
      }
      if ((*((unsigned char *)&v260.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_364;
      }
      std::string::size_type v70 = v260.__r_.__value_.__l.__size_;
      if (v260.__r_.__value_.__l.__size_ == 5)
      {
LABEL_311:
        if (*(_DWORD *)v260.__r_.__value_.__l.__data_ == 1128877910
          && *(unsigned char *)(v260.__r_.__value_.__r.__words[0] + 4) == 69)
        {
LABEL_355:
          int v129 = 7;
          goto LABEL_382;
        }
LABEL_315:
        std::string::size_type v70 = v260.__r_.__value_.__l.__size_;
      }
LABEL_316:
      if (v70 != 7) {
        goto LABEL_322;
      }
      if (*(_DWORD *)v260.__r_.__value_.__l.__data_ == 1397707344
        && *(_DWORD *)(v260.__r_.__value_.__r.__words[0] + 3) == 1497648979)
      {
LABEL_281:
        int v129 = 8;
      }
      else
      {
        if ((*((unsigned char *)&v260.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_327;
        }
LABEL_322:
        std::string::size_type v138 = v260.__r_.__value_.__l.__size_;
        if (v260.__r_.__value_.__l.__size_ != 8) {
          goto LABEL_358;
        }
LABEL_325:
        if (*(void *)v260.__r_.__value_.__l.__data_ != 0x5349534148504D45)
        {
          if ((*((unsigned char *)&v260.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            std::string::size_type v138 = v260.__r_.__value_.__l.__size_;
LABEL_358:
            if (v138 != 5) {
              goto LABEL_370;
            }
            if (*(_DWORD *)v260.__r_.__value_.__l.__data_ != 1229215041
              || *(unsigned char *)(v260.__r_.__value_.__r.__words[0] + 4) != 79)
            {
              if ((*((unsigned char *)&v260.__r_.__value_.__s + 23) & 0x80) == 0)
              {
LABEL_364:
                if (HIBYTE(v260.__r_.__value_.__r.__words[2]) != 4) {
                  goto LABEL_365;
                }
                goto LABEL_367;
              }
LABEL_370:
              std::string::size_type v159 = v260.__r_.__value_.__l.__size_;
              if (v260.__r_.__value_.__l.__size_ == 4)
              {
                if (*(_DWORD *)v260.__r_.__value_.__l.__data_ == 1129530692)
                {
LABEL_368:
                  int v129 = 11;
                  goto LABEL_382;
                }
                if ((*((unsigned char *)&v260.__r_.__value_.__s + 23) & 0x80) == 0) {
                  goto LABEL_578;
                }
                std::string::size_type v159 = v260.__r_.__value_.__l.__size_;
              }
              if (v159 != 6) {
                goto LABEL_578;
              }
LABEL_375:
              unint64_t v158 = (std::string *)v260.__r_.__value_.__r.__words[0];
              goto LABEL_376;
            }
LABEL_369:
            int v129 = 10;
            goto LABEL_382;
          }
LABEL_327:
          if (HIBYTE(v260.__r_.__value_.__r.__words[2]) == 4)
          {
LABEL_367:
            if (LODWORD(v260.__r_.__value_.__l.__data_) != 1129530692) {
              goto LABEL_578;
            }
            goto LABEL_368;
          }
          if (HIBYTE(v260.__r_.__value_.__r.__words[2]) != 5)
          {
LABEL_365:
            if (HIBYTE(v260.__r_.__value_.__r.__words[2]) != 6) {
              goto LABEL_578;
            }
LABEL_366:
            unint64_t v158 = &v260;
LABEL_376:
            int v160 = (int)v158->__r_.__value_.__l.__data_;
            int v161 = WORD2(v158->__r_.__value_.__r.__words[0]);
            if (v160 != 760824147 || v161 != 21313) {
              goto LABEL_578;
            }
            int v129 = 5;
            goto LABEL_382;
          }
          if (LODWORD(v260.__r_.__value_.__l.__data_) != 1229215041 || v260.__r_.__value_.__s.__data_[4] != 79)
          {
LABEL_578:
            uint64_t v247 = __cxa_allocate_exception(0x10uLL);
            char v248 = &v260;
            if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              char v248 = (std::string *)v260.__r_.__value_.__r.__words[0];
            }
            MEMORY[0x210558D40](v247, buf);
            __cxa_throw(v247, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          goto LABEL_369;
        }
LABEL_334:
        int v129 = 9;
      }
LABEL_382:
      if (v64)
      {
        v259[0] = v64;
        v259[1] = (const void **)&__s1a->__vftable;
        if (__s1a) {
          atomic_fetch_add_explicit(&__s1a->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        TokenAttributes::create_nested((uint64_t *)&v257, (uint64_t *)v259, v129);
        if (__s1a) {
          std::__shared_weak_count::__release_shared[abi:ne180100](__s1a);
        }
      }
      else
      {
        uint64_t v163 = (char *)operator new(0x158uLL);
        *((void *)v163 + 1) = 0;
        *((void *)v163 + 2) = 0;
        *(void *)uint64_t v163 = off_26C2162F0;
        *(_OWORD *)(v163 + 40) = 0u;
        *(_OWORD *)(v163 + 56) = 0u;
        *(_OWORD *)(v163 + 72) = 0u;
        *(_OWORD *)(v163 + 88) = 0u;
        *(_OWORD *)(v163 + 104) = 0u;
        *(_OWORD *)(v163 + 120) = 0u;
        *(_OWORD *)(v163 + 136) = 0u;
        *(_OWORD *)(v163 + 152) = 0u;
        *(_OWORD *)(v163 + 168) = 0u;
        *(_OWORD *)(v163 + 184) = 0u;
        *(_OWORD *)(v163 + 200) = 0u;
        *(_OWORD *)(v163 + 216) = 0u;
        *(_OWORD *)(v163 + 232) = 0u;
        *(_OWORD *)(v163 + 248) = 0u;
        *(_OWORD *)(v163 + 24) = 0u;
        *(_OWORD *)(v163 + 264) = 0u;
        *(_OWORD *)(v163 + 280) = 0u;
        *(_OWORD *)(v163 + 296) = 0u;
        *(_OWORD *)(v163 + 312) = 0u;
        *(_OWORD *)(v163 + 328) = 0u;
        v257.__r_.__value_.__r.__words[0] = (std::string::size_type)(v163 + 24);
        v257.__r_.__value_.__l.__size_ = (std::string::size_type)v163;
      }
      std::string::size_type v164 = v257.__r_.__value_.__r.__words[0];
      *(_DWORD *)(v257.__r_.__value_.__r.__words[0] + 32) = v129;
      std::string::basic_string[abi:ne180100]<0>(&v261, "id");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
      size_t v165 = (void **)(v164 + 72);
      if (*(char *)(v164 + 95) < 0) {
        operator delete(*v165);
      }
      *(_OWORD *)size_t v165 = *(_OWORD *)buf;
      *(void *)(v164 + 88) = *(void *)v263;
      v263[7] = 0;
      buf[0] = 0;
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v261.__r_.__value_.__l.__data_);
      }
      int v166 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)v252, &v261, (const void **)(v164 + 72));
      unint64_t v167 = *v166;
      if (!*v166)
      {
        int v168 = v166;
        unint64_t v167 = (uint64_t *)operator new(0x48uLL);
        *(void *)std::string buf = v167;
        *(void *)&uint8_t buf[8] = v249;
        v263[0] = 0;
        unint64_t v169 = (std::string *)(v167 + 4);
        if (*(char *)(v164 + 95) < 0)
        {
          std::string::__init_copy_ctor_external(v169, *(const std::string::value_type **)(v164 + 72), *(void *)(v164 + 80));
        }
        else
        {
          long long v170 = *(_OWORD *)v165;
          v167[6] = *(void *)(v164 + 88);
          *(_OWORD *)&v169->__r_.__value_.__l.__data_ = v170;
        }
        v167[7] = 0;
        v167[8] = 0;
        v263[0] = 1;
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v252, (uint64_t)v261.__r_.__value_.__l.__data_, v168, v167);
        *(void *)std::string buf = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
      }
      std::string::size_type v171 = v257.__r_.__value_.__l.__size_;
      if (v257.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v257.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v172 = (std::__shared_weak_count *)v167[8];
      v167[7] = v164;
      v167[8] = v171;
      if (v172) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v172);
      }
      uint64_t v174 = *((void *)this + 24);
      uint64_t v173 = *((void *)this + 25);
      if (v173) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v173 + 8), 1uLL, memory_order_relaxed);
      }
      char v175 = *(std::__shared_weak_count **)(v164 + 24);
      *(void *)(v164 + 16) = v174;
      *(void *)(v164 + 24) = v173;
      if (v175) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v175);
      }
      switch(*(_DWORD *)(v164 + 32))
      {
        case 0:
        case 2:
        case 3:
        case 6:
        case 0xB:
          goto LABEL_406;
        case 1:
          std::string::basic_string[abi:ne180100]<0>(&v261, "ref");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
          std::string::size_type v190 = v164 + 96;
          if (*(char *)(v164 + 119) < 0) {
            goto LABEL_458;
          }
          goto LABEL_459;
        case 4:
          std::string::basic_string[abi:ne180100]<0>(&v261, "role");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
          uint64_t v197 = (void **)(v164 + 120);
          if (*(char *)(v164 + 143) < 0) {
            operator delete(*v197);
          }
          *(_OWORD *)uint64_t v197 = *(_OWORD *)buf;
          *(void *)(v164 + 136) = *(void *)v263;
          v263[7] = 0;
          buf[0] = 0;
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v261.__r_.__value_.__l.__data_);
          }
LABEL_406:
          std::string::basic_string[abi:ne180100]<0>(&v261, "lang");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>((char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, *(void *)v164 + 40, (std::string *)buf);
          int v176 = (void **)(v164 + 40);
          if (*(char *)(v164 + 63) < 0) {
            operator delete(*v176);
          }
          *(_OWORD *)int v176 = *(_OWORD *)buf;
          *(void *)(v164 + 56) = *(void *)v263;
          v263[7] = 0;
          buf[0] = 0;
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v261.__r_.__value_.__l.__data_);
          }
          if (*v61 != 1) {
            goto LABEL_565;
          }
          uint64_t v177 = *((void *)v61 + 1);
          uint64_t v180 = *(uint64_t **)(v177 + 8);
          unint64_t v178 = (uint64_t *)(v177 + 8);
          uint64_t v179 = v180;
          if (!v180) {
            goto LABEL_565;
          }
          while (std::string::compare((const std::string *)(v179 + 4), "onlangfailure") > 0)
          {
            unint64_t v178 = v179;
LABEL_416:
            uint64_t v179 = (uint64_t *)*v179;
            if (!v179) {
              goto LABEL_565;
            }
          }
          if (std::string::compare((const std::string *)(v179 + 4), "onlangfailure") < 0)
          {
            ++v179;
            goto LABEL_416;
          }
          char v198 = (uint64_t *)*v179;
          v199 = v179;
          if (*v179)
          {
            v199 = v179;
            do
            {
              int v200 = std::string::compare((const std::string *)(v198 + 4), "onlangfailure");
              unsigned int v201 = (uint64_t **)(v198 + 1);
              if (v200 >= 0)
              {
                unsigned int v201 = (uint64_t **)v198;
                v199 = v198;
              }
              char v198 = *v201;
            }
            while (*v201);
          }
          int v202 = (uint64_t *)v179[1];
          if (v202)
          {
            do
            {
              int v203 = std::string::compare((const std::string *)(v202 + 4), "onlangfailure");
              unint64_t v204 = (uint64_t **)(v202 + 1);
              if (v203 > 0)
              {
                unint64_t v204 = (uint64_t **)v202;
                unint64_t v178 = v202;
              }
              int v202 = *v204;
            }
            while (*v204);
          }
          uint64_t v3 = (unsigned __int8 *)v255;
          if (v199 == v178) {
            goto LABEL_565;
          }
          std::string::basic_string[abi:ne180100]<0>(&v261, "onlangfailure");
          if (*v61 == 1
            && std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*((void *)v61 + 1), (const void **)&v261.__r_.__value_.__l.__data_))
          {
            uint64_t v205 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v61, (const void **)&v261.__r_.__value_.__l.__data_);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v205, (std::string *)buf);
            uint64_t v206 = (const char **)operator new(0x20uLL);
            *(_OWORD *)uint64_t v206 = xmmword_264115310;
            *((_OWORD *)v206 + 1) = *(_OWORD *)&off_264115320;
            uint64_t v207 = v263[7];
            uint64_t v208 = *(void *)&buf[8];
            if (v263[7] >= 0) {
              uint64_t v209 = v263[7];
            }
            else {
              uint64_t v209 = *(void *)&buf[8];
            }
            if (v209)
            {
              uint64_t v210 = 0;
              v211 = *(uint8_t **)buf;
              do
              {
                size_t v212 = strlen(v206[v210]);
                size_t v213 = v212;
                if ((v207 & 0x80) != 0)
                {
                  if (v212 == v208)
                  {
                    int v214 = v211;
                    if (v208 == -1) {
                      std::string::__throw_out_of_range[abi:ne180100]();
                    }
LABEL_489:
                    if (!memcmp(v214, v206[v210], v213)) {
                      goto LABEL_492;
                    }
                  }
                }
                else if (v212 == v207)
                {
                  int v214 = buf;
                  goto LABEL_489;
                }
                ++v210;
              }
              while (v210 != 4);
            }
            LODWORD(v210) = 3;
LABEL_492:
            operator delete(v206);
            uint64_t v3 = (unsigned __int8 *)v255;
            if ((v263[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          else
          {
            LODWORD(v210) = 3;
          }
          *(_DWORD *)(v257.__r_.__value_.__r.__words[0] + 64) = v210;
LABEL_460:
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
          {
            char v187 = (void *)v261.__r_.__value_.__r.__words[0];
LABEL_462:
            operator delete(v187);
          }
          goto LABEL_565;
        case 5:
          std::string::basic_string[abi:ne180100]<0>(&v261, "interpret-as");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
          unint64_t v188 = (void **)(v164 + 144);
          if (*(char *)(v164 + 167) < 0) {
            operator delete(*v188);
          }
          *(_OWORD *)unint64_t v188 = *(_OWORD *)buf;
          *(void *)(v164 + 160) = *(void *)v263;
          v263[7] = 0;
          buf[0] = 0;
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v261.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v261, "format");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
          uint64_t v189 = (void **)(v164 + 168);
          if (*(char *)(v164 + 191) < 0) {
            operator delete(*v189);
          }
          *(_OWORD *)uint64_t v189 = *(_OWORD *)buf;
          *(void *)(v164 + 184) = *(void *)v263;
          v263[7] = 0;
          buf[0] = 0;
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v261.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v261, "detail");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
          std::string::size_type v190 = v164 + 192;
          if (*(char *)(v164 + 215) < 0) {
LABEL_458:
          }
            operator delete(*(void **)v190);
LABEL_459:
          *(_OWORD *)std::string::size_type v190 = *(_OWORD *)buf;
          *(void *)(v190 + 16) = *(void *)v263;
          v263[7] = 0;
          buf[0] = 0;
          goto LABEL_460;
        case 7:
          unint64_t v191 = (char *)operator new(0xA8uLL);
          int v192 = v191;
          *((void *)v191 + 1) = 0;
          *((void *)v191 + 2) = 0;
          *(void *)unint64_t v191 = off_26C218F90;
          *(_OWORD *)(v191 + 24) = 0u;
          v193 = v191 + 24;
          *(_OWORD *)(v191 + 40) = 0u;
          *(_OWORD *)(v191 + 56) = 0u;
          *(_OWORD *)(v191 + 72) = 0u;
          *(_OWORD *)(v191 + 88) = 0u;
          *(_OWORD *)(v191 + 104) = 0u;
          *(_OWORD *)(v191 + 120) = 0u;
          *(_OWORD *)(v191 + 136) = 0u;
          *(_OWORD *)(v191 + 152) = 0u;
          uint64_t v194 = *(void *)(v164 + 280);
          uint64_t v195 = *(void *)(v164 + 288);
          if (v195)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v195 + 8), 1uLL, memory_order_relaxed);
            v196 = (std::__shared_weak_count *)*((void *)v191 + 4);
            *((void *)v192 + 3) = v194;
            *((void *)v192 + 4) = v195;
            if (v196) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v196);
            }
          }
          else
          {
            *((void *)v191 + 3) = v194;
            *((void *)v191 + 4) = 0;
          }
          *((_DWORD *)v192 + 40) = 2;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v192 + 1, 1uLL, memory_order_relaxed);
          v215 = *(std::__shared_weak_count **)(v164 + 288);
          *(void *)(v164 + 280) = v193;
          *(void *)(v164 + 288) = v192;
          if (v215) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v215);
          }
          std::string::basic_string[abi:ne180100]<0>(&v261, "gender");
          if (*v61 != 1
            || !std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*((void *)v61 + 1), (const void **)&v261.__r_.__value_.__l.__data_))
          {
            LODWORD(v221) = 0;
            goto LABEL_520;
          }
          uint64_t v216 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v61, (const void **)&v261.__r_.__value_.__l.__data_);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v216, (std::string *)buf);
          uint64_t v217 = (const char **)operator new(0x20uLL);
          *(_OWORD *)uint64_t v217 = xmmword_264115330;
          *((_OWORD *)v217 + 1) = *(_OWORD *)&off_264115340;
          uint64_t v218 = v263[7];
          uint64_t v219 = *(void *)&buf[8];
          if (v263[7] >= 0) {
            uint64_t v220 = v263[7];
          }
          else {
            uint64_t v220 = *(void *)&buf[8];
          }
          if (v220)
          {
            uint64_t v221 = 0;
            int v222 = *(uint8_t **)buf;
            while (1)
            {
              size_t v223 = strlen(v217[v221]);
              size_t v224 = v223;
              if ((v218 & 0x80) != 0)
              {
                if (v223 == v219)
                {
                  unint64_t v225 = v222;
                  if (v219 == -1) {
                    std::string::__throw_out_of_range[abi:ne180100]();
                  }
LABEL_509:
                  if (!memcmp(v225, v217[v221], v224)) {
                    goto LABEL_518;
                  }
                }
              }
              else if (v223 == v218)
              {
                unint64_t v225 = buf;
                goto LABEL_509;
              }
              if (++v221 == 4)
              {
                LODWORD(v221) = 0;
                goto LABEL_518;
              }
            }
          }
          LODWORD(v221) = 0;
LABEL_518:
          operator delete(v217);
          uint64_t v3 = (unsigned __int8 *)v255;
          if ((v263[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
LABEL_520:
          *((_DWORD *)v192 + 10) = v221;
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v261.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "age");
          LODWORD(v261.__r_.__value_.__l.__data_) = 0;
          *((void *)v192 + 6) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v61, (const void **)buf, (unsigned int *)&v261);
          if ((v263[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "variant");
          LODWORD(v261.__r_.__value_.__l.__data_) = 0;
          *((void *)v192 + 7) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v61, (const void **)buf, (unsigned int *)&v261);
          if ((v263[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          std::string::basic_string[abi:ne180100]<0>(&v261, "name");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
          uint64_t v226 = (void **)(v192 + 64);
          if (v192[87] < 0) {
            operator delete(*v226);
          }
          *(_OWORD *)uint64_t v226 = *(_OWORD *)buf;
          *((void *)v192 + 10) = *(void *)v263;
          v263[7] = 0;
          buf[0] = 0;
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v261.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v261, "languages");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
          uint64_t v227 = (void **)(v192 + 88);
          if (v192[111] < 0) {
            operator delete(*v227);
          }
          *(_OWORD *)uint64_t v227 = *(_OWORD *)buf;
          *((void *)v192 + 13) = *(void *)v263;
          v263[7] = 0;
          buf[0] = 0;
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v261.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v261, "required");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
          unint64_t v228 = (void **)(v192 + 112);
          if (v192[135] < 0) {
            operator delete(*v228);
          }
          *(_OWORD *)unint64_t v228 = *(_OWORD *)buf;
          *((void *)v192 + 16) = *(void *)v263;
          v263[7] = 0;
          buf[0] = 0;
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v261.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v261, "ordering");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
          size_t v229 = (void **)(v192 + 136);
          if (v192[159] < 0) {
            operator delete(*v229);
          }
          *(_OWORD *)size_t v229 = *(_OWORD *)buf;
          *((void *)v192 + 19) = *(void *)v263;
          v263[7] = 0;
          buf[0] = 0;
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v261.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v261, "onvoicefailure");
          if (*v61 == 1
            && std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*((void *)v61 + 1), (const void **)&v261.__r_.__value_.__l.__data_))
          {
            uint64_t v230 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v61, (const void **)&v261.__r_.__value_.__l.__data_);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v230, (std::string *)buf);
            unint64_t v231 = operator new(0x18uLL);
            *(_OWORD *)unint64_t v231 = xmmword_264115350;
            v231[2] = "processorchoice";
            uint64_t v232 = v263[7];
            uint64_t v233 = *(void *)&buf[8];
            if (v263[7] >= 0) {
              uint64_t v234 = v263[7];
            }
            else {
              uint64_t v234 = *(void *)&buf[8];
            }
            if (v234)
            {
              uint64_t v235 = 0;
              uint64_t v236 = *(uint8_t **)buf;
              while (1)
              {
                size_t v237 = strlen((const char *)v231[v235]);
                size_t v238 = v237;
                if ((v232 & 0x80) != 0)
                {
                  if (v237 == v233)
                  {
                    size_t v239 = v236;
                    if (v233 == -1) {
                      std::string::__throw_out_of_range[abi:ne180100]();
                    }
LABEL_554:
                    if (!memcmp(v239, (const void *)v231[v235], v238)) {
                      goto LABEL_560;
                    }
                  }
                }
                else if (v237 == v232)
                {
                  size_t v239 = buf;
                  goto LABEL_554;
                }
                if (++v235 == 3)
                {
                  LODWORD(v235) = 2;
                  goto LABEL_560;
                }
              }
            }
            LODWORD(v235) = 2;
LABEL_560:
            operator delete(v231);
            uint64_t v3 = (unsigned __int8 *)v255;
            if ((v263[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          else
          {
            LODWORD(v235) = 2;
          }
          *((_DWORD *)v192 + 40) = v235;
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v261.__r_.__value_.__l.__data_);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v192);
LABEL_565:
          if (v257.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v257.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v260.__r_.__value_.__l.__data_);
          }
          std::string v133 = __s1a;
          if (!__s1a) {
            goto LABEL_107;
          }
          goto LABEL_570;
        case 8:
          if (*v61 == 1)
          {
            if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)v61 + 1), "pitch"))
            {
              uint64_t v181 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v61, "pitch");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v181, (std::string *)buf);
              *(void *)(v164 + 216) = ParseAttr::parse_pitch((std::string *)buf);
              if ((v263[7] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
            if (*v61 == 1)
            {
              if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)v61 + 1), "range"))
              {
                uint64_t v182 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v61, "range");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v182, (std::string *)buf);
                *(void *)(v164 + 224) = ParseAttr::parse_pitch((std::string *)buf);
                if ((v263[7] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v261, "contour");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
          double v183 = (void **)(v164 + 248);
          if (*(char *)(v164 + 271) < 0) {
            operator delete(*v183);
          }
          *(_OWORD *)double v183 = *(_OWORD *)buf;
          *(void *)(v164 + 264) = *(void *)v263;
          v263[7] = 0;
          buf[0] = 0;
          if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v261.__r_.__value_.__l.__data_);
          }
          if (*v61 != 1) {
            goto LABEL_565;
          }
          if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)v61 + 1), "rate"))
          {
            uint64_t v184 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v61, "rate");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v184, (std::string *)buf);
            *(void *)(v164 + 232) = ParseAttr::parse_rate((std::string *)buf);
            if ((v263[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (*v61 != 1) {
            goto LABEL_565;
          }
          if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)v61 + 1), "duration"))
          {
            uint64_t v185 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v61, "duration");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v185, (std::string *)buf);
            *(float *)(v164 + 272) = ParseAttr::parse_timedesignation((const std::string *)buf);
            if ((v263[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (*v61 != 1) {
            goto LABEL_565;
          }
          if (!std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)v61 + 1), "volume"))goto LABEL_565; {
          uint64_t v186 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v61, "volume");
          }
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v186, (std::string *)buf);
          *(void *)(v164 + 224) = ParseAttr::parse_volume((std::string *)buf);
          if ((v263[7] & 0x80000000) == 0) {
            goto LABEL_565;
          }
          char v187 = *(void **)buf;
          goto LABEL_462;
        case 9:
          std::string::basic_string[abi:ne180100]<0>(&v261, "level");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)v61, (const void **)&v261.__r_.__value_.__l.__data_, (std::string *)buf);
          *(_DWORD *)(v164 + 276) = ParseAttr::parse_emphasis((const void **)buf);
          if ((v263[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          goto LABEL_460;
        default:
          goto LABEL_565;
      }
    case 5uLL:
      if (*(_DWORD *)v260.__r_.__value_.__l.__data_ != 1095061587
        || *(unsigned char *)(v260.__r_.__value_.__r.__words[0] + 4) != 75)
      {
        goto LABEL_311;
      }
LABEL_342:
      int v129 = 0;
      goto LABEL_382;
    case 6uLL:
      if (*(_DWORD *)v260.__r_.__value_.__l.__data_ != 1263488844
        || *(_WORD *)(v260.__r_.__value_.__r.__words[0] + 4) != 20565)
      {
        goto LABEL_375;
      }
LABEL_306:
      int v129 = 1;
      goto LABEL_382;
    case 8uLL:
      if (*(void *)v260.__r_.__value_.__l.__data_ != 0x45434E45544E4553) {
        goto LABEL_325;
      }
LABEL_335:
      int v129 = 3;
      goto LABEL_382;
    case 9uLL:
      if (*(void *)v260.__r_.__value_.__l.__data_ != 0x5041524741524150
        || *(unsigned char *)(v260.__r_.__value_.__r.__words[0] + 8) != 72)
      {
        goto LABEL_578;
      }
LABEL_341:
      int v129 = 2;
      goto LABEL_382;
    default:
      goto LABEL_316;
  }
}

void sub_20D3A9FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,std::__shared_weak_count *a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (*(char *)(v49 - 153) < 0) {
    operator delete(*(void **)(v49 - 176));
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (a49 < 0) {
    operator delete(__p);
  }
  if ((a11 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void InjectJSONImpl::inject_token(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = operator new(0x30uLL);
  *(_OWORD *)((char *)v4 + 8) = 0u;
  *(void *)int v4 = off_26C215330;
  *((void *)&v122 + 1) = v4;
  v4[2] = 0u;
  *((void *)v4 + 3) = v4 + 2;
  uint64_t v5 = (uint64_t)v4 + 24;
  unint64_t v121 = 0;
  *(void *)&long long v122 = (char *)v4 + 24;
  long long v120 = 0u;
  *(_OWORD *)unint64_t v119 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)__p, &v116);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ((*((unsigned char *)&v116.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    uint64_t v6 = &v116;
    switch(*((unsigned char *)&v116.__r_.__value_.__s + 23))
    {
      case 4:
        if (LODWORD(v116.__r_.__value_.__l.__data_) != 1415071060) {
          goto LABEL_6;
        }
        goto LABEL_10;
      case 5:
        if (LODWORD(v116.__r_.__value_.__l.__data_) != 1095062082 || v116.__r_.__value_.__s.__data_[4] != 75) {
          goto LABEL_27;
        }
        goto LABEL_98;
      case 6:
        if (LODWORD(v116.__r_.__value_.__l.__data_) != 1297044048 || WORD2(v116.__r_.__value_.__r.__words[0]) != 21584) {
          goto LABEL_105;
        }
        goto LABEL_49;
      case 8:
        if (v116.__r_.__value_.__r.__words[0] == 0x434954454E4F4850) {
          goto LABEL_66;
        }
        goto LABEL_105;
      case 0xC:
        if (v116.__r_.__value_.__r.__words[0] != 0x5F4E474945524F46
          || LODWORD(v116.__r_.__value_.__r.__words[1]) != 1415071060)
        {
          goto LABEL_105;
        }
        goto LABEL_97;
      case 0xD:
        goto LABEL_101;
      case 0x10:
        if (v116.__r_.__value_.__r.__words[0] != 0x5F4E474945524F46
          || v116.__r_.__value_.__l.__size_ != 0x434954454E4F4850)
        {
          goto LABEL_105;
        }
        goto LABEL_55;
      default:
        goto LABEL_105;
    }
  }
  switch(v116.__r_.__value_.__l.__size_)
  {
    case 4uLL:
      if (*(_DWORD *)v116.__r_.__value_.__l.__data_ != 1415071060) {
        goto LABEL_71;
      }
LABEL_10:
      int v7 = 1952807028;
      goto LABEL_107;
    case 5uLL:
      if (*(_DWORD *)v116.__r_.__value_.__l.__data_ == 1095062082
        && *(unsigned char *)(v116.__r_.__value_.__r.__words[0] + 4) == 75)
      {
LABEL_98:
        int v7 = 1651664235;
        goto LABEL_107;
      }
      if ((*((unsigned char *)&v116.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_71;
      }
      if (HIBYTE(v116.__r_.__value_.__r.__words[2]) == 4) {
        goto LABEL_6;
      }
      if (HIBYTE(v116.__r_.__value_.__r.__words[2]) == 13) {
        goto LABEL_100;
      }
      if (HIBYTE(v116.__r_.__value_.__r.__words[2]) != 5) {
        goto LABEL_105;
      }
LABEL_27:
      if (LODWORD(v116.__r_.__value_.__l.__data_) == 1229215041 && v116.__r_.__value_.__s.__data_[4] == 79) {
        goto LABEL_95;
      }
      if ((*((unsigned char *)&v116.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_76;
      }
      if (HIBYTE(v116.__r_.__value_.__r.__words[2]) == 4)
      {
LABEL_6:
        if (LODWORD(v116.__r_.__value_.__l.__data_) != 1263681869) {
          goto LABEL_82;
        }
        goto LABEL_96;
      }
      if (HIBYTE(v116.__r_.__value_.__r.__words[2]) == 5) {
        goto LABEL_388;
      }
      if (HIBYTE(v116.__r_.__value_.__r.__words[2]) != 13)
      {
LABEL_105:
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v116, "NULL"))
        {
          exception = __cxa_allocate_exception(0x10uLL);
          if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v111 = &v116;
          }
          else {
            uint64_t v111 = (std::string *)v116.__r_.__value_.__r.__words[0];
          }
          MEMORY[0x210558D40](exception, __p);
          __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        int v7 = 1853189228;
        goto LABEL_107;
      }
LABEL_100:
      uint64_t v6 = &v116;
      goto LABEL_101;
    case 6uLL:
      if (*(_DWORD *)v116.__r_.__value_.__l.__data_ != 1297044048
        || *(_WORD *)(v116.__r_.__value_.__r.__words[0] + 4) != 21584)
      {
        goto LABEL_71;
      }
LABEL_49:
      int v7 = 1886547312;
      goto LABEL_107;
    case 8uLL:
      if (*(void *)v116.__r_.__value_.__l.__data_ != 0x434954454E4F4850) {
        goto LABEL_71;
      }
LABEL_66:
      int v7 = 1885892462;
      goto LABEL_107;
    case 0xCuLL:
      if (*(void *)v116.__r_.__value_.__l.__data_ != 0x5F4E474945524F46
        || *(_DWORD *)(v116.__r_.__value_.__r.__words[0] + 8) != 1415071060)
      {
        goto LABEL_71;
      }
LABEL_97:
      int v7 = 1718909044;
      goto LABEL_107;
    case 0x10uLL:
      if (*(void *)v116.__r_.__value_.__l.__data_ != 0x5F4E474945524F46
        || *(void *)(v116.__r_.__value_.__r.__words[0] + 8) != 0x434954454E4F4850)
      {
        goto LABEL_71;
      }
LABEL_55:
      int v7 = 1718642798;
      goto LABEL_107;
    default:
LABEL_71:
      if (v116.__r_.__value_.__l.__size_ == 5
        && *(_DWORD *)v116.__r_.__value_.__l.__data_ == 1229215041
        && *(unsigned char *)(v116.__r_.__value_.__r.__words[0] + 4) == 79)
      {
LABEL_95:
        int v7 = 1635083369;
        goto LABEL_107;
      }
LABEL_76:
      if (v116.__r_.__value_.__l.__size_ != 4) {
        goto LABEL_85;
      }
      if (*(_DWORD *)v116.__r_.__value_.__l.__data_ == 1263681869)
      {
LABEL_96:
        int v7 = 1835102827;
        goto LABEL_107;
      }
      if ((*((unsigned char *)&v116.__r_.__value_.__s + 23) & 0x80) != 0)
      {
LABEL_85:
        if (v116.__r_.__value_.__l.__size_ != 4 || *(_DWORD *)v116.__r_.__value_.__l.__data_ != 1129530692) {
          goto LABEL_87;
        }
LABEL_99:
        int v7 = 1684370275;
        goto LABEL_107;
      }
      if (HIBYTE(v116.__r_.__value_.__r.__words[2]) == 13) {
        goto LABEL_100;
      }
      if (HIBYTE(v116.__r_.__value_.__r.__words[2]) == 5)
      {
LABEL_388:
        if (LODWORD(v116.__r_.__value_.__l.__data_) != 1129207120 || v116.__r_.__value_.__s.__data_[4] != 84) {
          goto LABEL_105;
        }
        goto LABEL_393;
      }
      if (HIBYTE(v116.__r_.__value_.__r.__words[2]) != 4) {
        goto LABEL_105;
      }
LABEL_82:
      if (LODWORD(v116.__r_.__value_.__l.__data_) == 1129530692) {
        goto LABEL_99;
      }
      if ((*((unsigned char *)&v116.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_105;
      }
LABEL_87:
      if (v116.__r_.__value_.__l.__size_ != 5) {
        goto LABEL_93;
      }
      if (*(_DWORD *)v116.__r_.__value_.__l.__data_ == 1129207120
        && *(unsigned char *)(v116.__r_.__value_.__r.__words[0] + 4) == 84)
      {
LABEL_393:
        int v7 = 1886809699;
        goto LABEL_107;
      }
      if ((*((unsigned char *)&v116.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_105;
      }
LABEL_93:
      if (v116.__r_.__value_.__l.__size_ != 13) {
        goto LABEL_105;
      }
      uint64_t v6 = (std::string *)v116.__r_.__value_.__r.__words[0];
LABEL_101:
      std::string::size_type v19 = v6->__r_.__value_.__r.__words[0];
      uint64_t v20 = *(std::string::size_type *)((char *)v6->__r_.__value_.__r.__words + 5);
      if (v19 != 0x5F4E474945524F46 || v20 != 0x54434E55505F4E47) {
        goto LABEL_105;
      }
      int v7 = 1718644323;
LABEL_107:
      LODWORD(v117) = v7;
      uint64_t v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "attr");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v22, (std::string *)__p);
      v123[0] = __p;
      uint64_t v23 = std::__tree<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 208), (const void **)__p, (_OWORD **)v123);
      uint64_t v25 = *((void *)v23 + 7);
      int v24 = (std::__shared_weak_count *)*((void *)v23 + 8);
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)&v120 + 1) = v25;
      unint64_t v121 = v24;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)a2 + 1), "where"))
      {
        uint64_t v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "where");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)__p, v26);
        int v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(__p, "start");
        v123[0] = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v27, (unint64_t *)v123);
        *((void **)&v117 + 1) = v123[0];
        uint64_t v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(__p, "length");
        v123[0] = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v28, (unint64_t *)v123);
        unint64_t v118 = v123[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p[8], __p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v123, "text");
      std::string::basic_string[abi:ne180100]<0>(&v127, "name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v127, &v134);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>((char *)a2, (const void **)v123, (uint64_t)&v134, (std::string *)__p);
      *(_OWORD *)unint64_t v119 = *(_OWORD *)__p;
      *(void *)&long long v120 = *(void *)&__p[16];
      __p[23] = 0;
      __p[0] = 0;
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      if (v129 < 0) {
        operator delete(v127);
      }
      if (SHIBYTE(v124[0]) < 0) {
        operator delete(v123[0]);
      }
      Agglomerate::set<TokenBasicItem>(v5, &v117);
      std::string v133 = (void **)"norm_label";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v133))
      {
        long long v125 = 0u;
        *(_OWORD *)int v123 = 0u;
        memset(v124, 0, sizeof(v124));
        uint64_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "norm_label");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v29, (std::string *)__p);
        *(_OWORD *)int v123 = *(_OWORD *)__p;
        v124[0] = *(void *)&__p[16];
        memset(&__p[24], 0, 40);
        std::string::basic_string[abi:ne180100]<0>(&v127, "unnormalized");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v127, &v134);
        *(std::string *)&__p[24] = v134;
        *((unsigned char *)&v134.__r_.__value_.__s + 23) = 0;
        v134.__r_.__value_.__s.__data_[0] = 0;
        if (v129 < 0) {
          operator delete(v127);
        }
        uint64_t v30 = operator new(0x30uLL);
        *(_OWORD *)((char *)v30 + 8) = 0u;
        *(void *)uint64_t v30 = off_26C215330;
        v30[2] = 0u;
        *((void *)v30 + 3) = v30 + 2;
        *(void *)&long long v31 = (char *)v30 + 24;
        *((void *)&v31 + 1) = v30;
        long long v125 = v31;
        Agglomerate::set<TokenBasicItem>((uint64_t)v30 + 24, (long long *)__p);
        std::string::basic_string[abi:ne180100]<0>(&v127, "connector");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v127, &v134);
        *(std::string *)&v124[1] = v134;
        *((unsigned char *)&v134.__r_.__value_.__s + 23) = 0;
        v134.__r_.__value_.__s.__data_[0] = 0;
        if (v129 < 0) {
          operator delete(v127);
        }
        if ((__p[47] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[24]);
        }
        Agglomerate::set<TokenNormalizerItem>(v5, (long long *)v123);
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v30);
        }
        if (SHIBYTE(v124[3]) < 0) {
          operator delete((void *)v124[1]);
        }
        if (SHIBYTE(v124[0]) < 0) {
          operator delete(v123[0]);
        }
      }
      v134.__r_.__value_.__r.__words[0] = (std::string::size_type)"part_of_speech";
      if (*a2 == 1)
      {
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v134.__r_.__value_.__l.__data_))
        {
          v123[0] = 0;
          v123[1] = 0;
          v124[0] = 0;
          uint64_t v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "part_of_speech");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v32, (std::string *)__p);
          *(_OWORD *)int v123 = *(_OWORD *)__p;
          v124[0] = *(void *)&__p[16];
          Agglomerate::set<TokenPartOfSpeechItem>(v5, (long long *)v123);
          if (SHIBYTE(v124[0]) < 0) {
            operator delete(v123[0]);
          }
        }
      }
      v134.__r_.__value_.__r.__words[0] = (std::string::size_type)"written";
      if (*a2 == 1)
      {
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v134.__r_.__value_.__l.__data_))
        {
          v123[0] = 0;
          v123[1] = 0;
          v124[0] = 0;
          uint64_t v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "written");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v33, (std::string *)__p);
          *(_OWORD *)int v123 = *(_OWORD *)__p;
          v124[0] = *(void *)&__p[16];
          Agglomerate::set<TokenWrittenItem>(v5, (long long *)v123);
          if (SHIBYTE(v124[0]) < 0) {
            operator delete(v123[0]);
          }
        }
      }
      v134.__r_.__value_.__r.__words[0] = (std::string::size_type)"no_preceding_space";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v134.__r_.__value_.__l.__data_))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "no_preceding_space");
        LOBYTE(v123[0]) = 0;
        BOOL v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)__p, (unsigned __int8 *)v123);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        *(void *)std::string __p = v123;
        if (!v35) {
          operator new();
        }
        *(unsigned char *)(v35 + 8) = v34;
      }
      int v126 = "pron";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), &v126))
      {
        memset(__p, 0, 48);
        uint64_t v36 = *(void *)(a1 + 184);
        std::string::basic_string[abi:ne180100]<0>(&v127, "pron");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v127, &v134);
        (*(void (**)(void **__return_ptr))(**(void **)v36 + 16))(v123);
        std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)__p, (uint64_t *)v123[0], (uint64_t *)v123[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v123[1] - (char *)v123[0]) >> 3));
        std::string v133 = v123;
        std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v133);
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        if (v129 < 0) {
          operator delete(v127);
        }
        std::string::basic_string[abi:ne180100]<0>(&v134, "pron_text");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
        if ((__p[47] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[24]);
        }
        *(_OWORD *)&__p[24] = *(_OWORD *)v123;
        *(void *)&__p[40] = v124[0];
        HIBYTE(v124[0]) = 0;
        LOBYTE(v123[0]) = 0;
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        Agglomerate::set<TokenPronunciationItem>(v5, (uint64_t)__p);
        if ((__p[47] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[24]);
        }
        v123[0] = __p;
        std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)v123);
      }
      uint64_t v37 = v122;
      char v127 = "phon";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v127))
      {
        memset(__p, 0, 72);
        uint64_t v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phon");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v38, (std::string *)v123);
        *(_OWORD *)std::string __p = *(_OWORD *)v123;
        *(void *)&__p[16] = v124[0];
        std::string::basic_string[abi:ne180100]<0>(&v134, "alphabet");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
        *(_OWORD *)&__p[24] = *(_OWORD *)v123;
        *(void *)&__p[40] = v124[0];
        HIBYTE(v124[0]) = 0;
        LOBYTE(v123[0]) = 0;
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v134, "sub");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
        *(_OWORD *)&__p[48] = *(_OWORD *)v123;
        *(void *)&__p[64] = v124[0];
        HIBYTE(v124[0]) = 0;
        LOBYTE(v123[0]) = 0;
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        Agglomerate::set<TokenPhoneticItem>(v37, (long long *)__p);
        if ((__p[71] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[48]);
        }
        if ((__p[47] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[24]);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      uint64_t v39 = operator new(0x10uLL);
      uint64_t v40 = 0;
      void *v39 = "strength";
      v39[1] = "time";
      while (1)
      {
        v134.__r_.__value_.__r.__words[0] = v39[v40];
        if (*a2 == 1)
        {
          if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v134.__r_.__value_.__l.__data_))
          {
            break;
          }
        }
        if (++v40 == 2) {
          goto LABEL_194;
        }
      }
      float v41 = nanf(&byte_20D5A22AE);
      if (*a2 == 1)
      {
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)a2 + 1), "strength"))
        {
          uint64_t v42 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "strength");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v42, (std::string *)__p);
          uint64_t v43 = operator new(0x58uLL);
          v43[2] = xmmword_264113CC0;
          v43[3] = *(_OWORD *)&off_264113CD0;
          v43[4] = xmmword_264113CE0;
          *((void *)v43 + 10) = "x-strong";
          _OWORD *v43 = xmmword_264113CA0;
          v43[1] = *(_OWORD *)&off_264113CB0;
          int v44 = ParseAttr::parse_prosodic_level((const void **)__p, v43, (uint64_t)v43 + 88);
          operator delete(v43);
          if ((v44 | 4) == 4) {
            int v44 = 0;
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        else
        {
          int v44 = 8;
        }
        if (*a2 == 1)
        {
          if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)a2 + 1), "time"))
          {
            uint64_t v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "time");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v45, (std::string *)__p);
            float v41 = ParseAttr::parse_timedesignation((const std::string *)__p);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
      }
      else
      {
        int v44 = 8;
      }
      *(void *)std::string __p = v123;
      if (!v46) {
        operator new();
      }
      *(float *)(v46 + 8) = v41;
      *(_DWORD *)(v46 + 12) = v44;
LABEL_194:
      operator delete(v39);
      uint64_t v47 = operator new(0x10uLL);
      uint64_t v48 = 0;
      void *v47 = "sentence";
      v47[1] = "boundary";
      while (1)
      {
        int v126 = (const std::string::value_type *)v47[v48];
        if (*a2 == 1)
        {
          if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), &v126))
          {
            break;
          }
        }
        if (++v48 == 2) {
          goto LABEL_250;
        }
      }
      memset(&__p[8], 0, 32);
      std::string::basic_string[abi:ne180100]<0>(&v134, "sentence");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
      char v127 = v123;
      uint64_t v49 = std::__tree<std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Agglomerate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 256), (const void **)v123, (_OWORD **)&v127);
      uint64_t v50 = v49[7];
      uint64_t v51 = (std::__shared_weak_count *)v49[8];
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&__p[24] = v50;
      *(void *)&__p[32] = v51;
      if (SHIBYTE(v124[0]) < 0) {
        operator delete(v123[0]);
      }
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v134, "phrase");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
      char v127 = v123;
      uint64_t v52 = std::__tree<std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Agglomerate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 232), (const void **)v123, (_OWORD **)&v127);
      uint64_t v54 = v52[7];
      long long v53 = (std::__shared_weak_count *)v52[8];
      if (v53) {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&__p[8] = v54;
      *(void *)&__p[16] = v53;
      if (SHIBYTE(v124[0]) < 0) {
        operator delete(v123[0]);
      }
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v134, "boundary");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      if ((v124[0] & 0x8000000000000000) != 0)
      {
        if (v123[1] != (void *)6)
        {
          if (v123[1] != (void *)8)
          {
            if (v123[1] != (void *)9) {
              goto LABEL_243;
            }
            if (*(void *)v123[0] != 0x7061726761726170 || *((unsigned char *)v123[0] + 8) != 104) {
              goto LABEL_243;
            }
LABEL_231:
LABEL_237:
            __int16 v59 = 257;
            goto LABEL_334;
          }
          uint64_t v57 = *(void **)v123[0];
LABEL_236:
          if (v57 != (void *)0x65636E65746E6573)
          {
LABEL_243:
            *(_WORD *)std::string __p = 0;
            goto LABEL_244;
          }
          goto LABEL_237;
        }
        uint64_t v58 = (void **)v123[0];
      }
      else
      {
        if (HIBYTE(v124[0]) != 6)
        {
          if (HIBYTE(v124[0]) != 8)
          {
            if (HIBYTE(v124[0]) != 9) {
              goto LABEL_243;
            }
            if (v123[0] != (void *)0x7061726761726170 || LOBYTE(v123[1]) != 104) {
              goto LABEL_243;
            }
            goto LABEL_231;
          }
          uint64_t v57 = v123[0];
          goto LABEL_236;
        }
        uint64_t v58 = v123;
      }
      int v60 = *(_DWORD *)v58;
      int v61 = *((unsigned __int16 *)v58 + 2);
      if (v60 != 1634887792 || v61 != 25971) {
        goto LABEL_243;
      }
      __int16 v59 = 1;
LABEL_334:
      *(_WORD *)std::string __p = v59;
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)a2 + 1), "break"))
      {
        std::string::basic_string[abi:ne180100]<0>(&v127, "break");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v127, &v134);
        uint64_t v115 = v37;
        if (v129 < 0) {
          operator delete(v127);
        }
        if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t size = HIBYTE(v134.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t size = v134.__r_.__value_.__l.__size_;
        }
        long long v85 = &v134;
        if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v85 = (std::string *)v134.__r_.__value_.__r.__words[0];
        }
        long long v86 = (char *)v85 + size;
        if (size >= 5)
        {
          uint64_t v113 = a1;
          unint64_t v114 = v85;
          __int16 v97 = v85;
          int64_t v98 = size;
          std::string::size_type v99 = v97;
          do
          {
            long long v100 = (char *)memchr(v99, 109, v98 - 4);
            if (!v100) {
              break;
            }
            if (*(_DWORD *)v100 == 1701080941 && v100[4] == 108) {
              goto LABEL_365;
            }
            std::string::size_type v99 = (std::string *)(v100 + 1);
            int64_t v98 = v86 - (char *)v99;
          }
          while (v86 - (char *)v99 > 4);
          long long v100 = v86;
LABEL_365:
          if (v100 - (char *)v114 == -1 || v100 == v86) {
            __int16 v103 = 0;
          }
          else {
            __int16 v103 = 256;
          }
          __int16 v112 = v103;
          do
          {
            long long v88 = (char *)memchr(v97, 112, size - 4);
            if (!v88) {
              break;
            }
            if (*(_DWORD *)v88 == 1668183408 && v88[4] == 116) {
              goto LABEL_379;
            }
            __int16 v97 = (std::string *)(v88 + 1);
            int64_t size = v86 - (v88 + 1);
          }
          while (size > 4);
          long long v88 = v86;
LABEL_379:
          a1 = v113;
          long long v85 = v114;
          __int16 v87 = v112;
        }
        else
        {
          __int16 v87 = 0;
          long long v88 = (char *)v85 + size;
        }
        int64_t v105 = v88 - (char *)v85;
        __int16 v107 = v88 != v86 && v105 != -1;
        char v127 = &v133;
        uint64_t v37 = v115;
        if (!v108) {
          operator new();
        }
        *(_WORD *)(v108 + 8) = v87 | v107;
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
      }
LABEL_244:
      if (SHIBYTE(v124[0]) < 0) {
        operator delete(v123[0]);
      }
      Agglomerate::set<TokenPhrasingItem>(v37, (uint64_t)__p);
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
LABEL_250:
      operator delete(v47);
      v134.__r_.__value_.__r.__words[0] = (std::string::size_type)"sentence_break";
      if (*a2 == 1)
      {
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v134.__r_.__value_.__l.__data_))
        {
          *(void *)std::string __p = v123;
        }
      }
      v134.__r_.__value_.__r.__words[0] = (std::string::size_type)"src";
      if (*a2 != 1
        || !std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v134.__r_.__value_.__l.__data_))
      {
        goto LABEL_279;
      }
      memset(__p, 0, 24);
      *(_DWORD *)&__p[24] = 2139095040;
      *(_WORD *)&__p[28] = 1;
      *(_OWORD *)&__p[32] = xmmword_20D6B4A70;
      *(_OWORD *)&__p[48] = xmmword_20D6B4A80;
      __asm { FMOV            V0.2S, #1.0 }
      *(void *)&__p[64] = _D0;
      uint64_t v67 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "src");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v67, (std::string *)v123);
      int v68 = *a2;
      *(_OWORD *)std::string __p = *(_OWORD *)v123;
      *(void *)&__p[16] = v124[0];
      if (v68 != 1) {
        goto LABEL_263;
      }
      uint64_t v69 = *((void *)a2 + 1);
      uint64_t v72 = *(uint64_t **)(v69 + 8);
      std::string::size_type v70 = (uint64_t *)(v69 + 8);
      uint64_t v71 = v72;
      if (!v72) {
        goto LABEL_263;
      }
      while (std::string::compare((const std::string *)(v71 + 4), "timeout") > 0)
      {
        std::string::size_type v70 = v71;
LABEL_262:
        uint64_t v71 = (uint64_t *)*v71;
        if (!v71) {
          goto LABEL_263;
        }
      }
      if (std::string::compare((const std::string *)(v71 + 4), "timeout") < 0)
      {
        ++v71;
        goto LABEL_262;
      }
      long long v89 = (uint64_t *)*v71;
      long long v90 = v71;
      if (*v71)
      {
        long long v90 = v71;
        do
        {
          int v91 = std::string::compare((const std::string *)(v89 + 4), "timeout");
          long long v92 = (uint64_t **)(v89 + 1);
          if (v91 >= 0)
          {
            long long v92 = (uint64_t **)v89;
            long long v90 = v89;
          }
          long long v89 = *v92;
        }
        while (*v92);
      }
      int v93 = (uint64_t *)v71[1];
      if (v93)
      {
        do
        {
          int v94 = std::string::compare((const std::string *)(v93 + 4), "timeout");
          __int16 v95 = (uint64_t **)(v93 + 1);
          if (v94 > 0)
          {
            __int16 v95 = (uint64_t **)v93;
            std::string::size_type v70 = v93;
          }
          int v93 = *v95;
        }
        while (*v95);
      }
      if (v90 != v70)
      {
        uint64_t v96 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "timeout");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v96, (std::string *)v123);
        *(_DWORD *)&__p[24] = ParseAttr::parse_timedesignation((const std::string *)v123);
        if (SHIBYTE(v124[0]) < 0) {
          operator delete(v123[0]);
        }
      }
LABEL_263:
      std::string::basic_string[abi:ne180100]<0>(v123, "maxage");
      LODWORD(v127) = -1;
      *(void *)&__p[32] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<unsigned int,0>(a2, (const void **)v123, (unsigned int *)&v127);
      if (SHIBYTE(v124[0]) < 0) {
        operator delete(v123[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v123, "maxstale");
      LODWORD(v127) = 0;
      *(void *)&__p[40] = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)v123, (unsigned int *)&v127);
      if (SHIBYTE(v124[0]) < 0) {
        operator delete(v123[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v123, "clipbegin");
      LODWORD(v127) = 0;
      *(_DWORD *)&__p[48] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(a2, (const void **)v123, (uint64_t)&v127);
      if (SHIBYTE(v124[0]) < 0) {
        operator delete(v123[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v123, "clipend");
      LODWORD(v127) = 2139095040;
      *(_DWORD *)&__p[52] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(a2, (const void **)v123, (uint64_t)&v127);
      if (SHIBYTE(v124[0]) < 0) {
        operator delete(v123[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v123, "repeatdur");
      LODWORD(v127) = 0;
      *(_DWORD *)&__p[60] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(a2, (const void **)v123, (uint64_t)&v127);
      if (SHIBYTE(v124[0]) < 0) {
        operator delete(v123[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v123, "repeatcount");
      LODWORD(v127) = 1065353216;
      *(_DWORD *)&__p[56] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(a2, (const void **)v123, (uint64_t)&v127);
      if (SHIBYTE(v124[0]) < 0) {
        operator delete(v123[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v123, "overlap");
      LOBYTE(v127) = 0;
      __p[29] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)v123, (unsigned __int8 *)&v127);
      if (SHIBYTE(v124[0]) < 0) {
        operator delete(v123[0]);
      }
      Agglomerate::set<TokenAudioItem>(v37, (long long *)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
LABEL_279:
      uint64_t v73 = v122;
      v134.__r_.__value_.__r.__words[0] = (std::string::size_type)"num_phonemes";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v134.__r_.__value_.__l.__data_))
      {
        uint64_t v74 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "num_words");
        *(void *)std::string __p = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v74, (unint64_t *)__p);
        uint64_t v75 = *(void *)__p;
        uint64_t v76 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "num_syllables");
        *(void *)std::string __p = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v76, (unint64_t *)__p);
        uint64_t v77 = *(void *)__p;
        uint64_t v78 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "num_phonemes");
        *(void *)std::string __p = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v78, (unint64_t *)__p);
        uint64_t v79 = *(void *)__p;
        *(void *)std::string __p = v123;
        if (!v80) {
          operator new();
        }
        v80[1] = v79;
        v80[2] = v77;
        v80[3] = v75;
      }
      std::string v133 = (void **)"override";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v133))
      {
        uint64_t v132 = 0;
        long long v131 = 0u;
        memset(&__p[8], 0, 96);
        uint64_t v81 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "override");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v127, v81);
        std::string::basic_string[abi:ne180100]<0>(v123, "rule");
        LODWORD(v134.__r_.__value_.__l.__data_) = 0;
        *(_DWORD *)std::string __p = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)&v127, (const void **)v123, (unsigned int *)&v134);
        if (SHIBYTE(v124[0]) < 0) {
          operator delete(v123[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v134, "norm_label");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)&v127, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
        *(_OWORD *)&__p[8] = *(_OWORD *)v123;
        *(void *)&__p[24] = v124[0];
        HIBYTE(v124[0]) = 0;
        LOBYTE(v123[0]) = 0;
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v134, "part_of_speech");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)&v127, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
        *(_OWORD *)&__p[32] = *(_OWORD *)v123;
        *(void *)&__p[48] = v124[0];
        HIBYTE(v124[0]) = 0;
        LOBYTE(v123[0]) = 0;
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v134, "pronunciation");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)&v127, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
        *(_OWORD *)&__p[56] = *(_OWORD *)v123;
        *(void *)&__p[72] = v124[0];
        HIBYTE(v124[0]) = 0;
        LOBYTE(v123[0]) = 0;
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v134, "original_text");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)&v127, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
        *(_OWORD *)&__p[80] = *(_OWORD *)v123;
        *(void *)&__p[96] = v124[0];
        HIBYTE(v124[0]) = 0;
        LOBYTE(v123[0]) = 0;
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v134, "language");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)&v127, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
        long long v131 = *(_OWORD *)v123;
        uint64_t v132 = v124[0];
        HIBYTE(v124[0]) = 0;
        LOBYTE(v123[0]) = 0;
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v128, v127);
        Agglomerate::set<TokenOverrideItem>(v73, (const TokenOverrideItem *)__p);
        if (SHIBYTE(v132) < 0) {
          operator delete((void *)v131);
        }
        if ((__p[103] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[80]);
        }
        if ((__p[79] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[56]);
        }
        if ((__p[55] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[32]);
        }
        if ((__p[31] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[8]);
        }
      }
      v134.__r_.__value_.__r.__words[0] = (std::string::size_type)"mecab_pronunciation";
      if (*a2 == 1)
      {
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v134.__r_.__value_.__l.__data_))
        {
          memset(__p, 0, 48);
          uint64_t v82 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "mecab_pronunciation");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v82, (std::string *)v123);
          *(_OWORD *)std::string __p = *(_OWORD *)v123;
          *(void *)&__p[16] = v124[0];
          Agglomerate::set<TokenMeCabItem>(v73, (long long *)__p);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
      }
      std::string v133 = (void **)"prompt";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((void *)a2 + 1), (const std::string::value_type **)&v133))
      {
        __p[0] = 0;
        *(void *)&__p[8] = 0;
        *(void *)&__p[16] = 0;
        *(_DWORD *)&__p[24] = 0x7FFFFFFF;
        memset(&__p[32], 0, 24);
        uint64_t v83 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "prompt");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v127, v83);
        std::string::basic_string[abi:ne180100]<0>(&v134, "prompt_id");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)&v127, (const void **)&v134.__r_.__value_.__l.__data_, (std::string *)v123);
        *(_OWORD *)&__p[32] = *(_OWORD *)v123;
        *(void *)&__p[48] = v124[0];
        HIBYTE(v124[0]) = 0;
        LOBYTE(v123[0]) = 0;
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(v123, "unit_start");
        LODWORD(v134.__r_.__value_.__l.__data_) = 0;
        *(_DWORD *)&__p[16] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)&v127, (const void **)v123, (unsigned int *)&v134);
        if (SHIBYTE(v124[0]) < 0) {
          operator delete(v123[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v123, "unit_end");
        LODWORD(v134.__r_.__value_.__l.__data_) = 0;
        *(_DWORD *)&__p[20] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)&v127, (const void **)v123, (unsigned int *)&v134);
        if (SHIBYTE(v124[0]) < 0) {
          operator delete(v123[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v123, "generated_id");
        LODWORD(v134.__r_.__value_.__l.__data_) = 0x7FFFFFFF;
        *(_DWORD *)&__p[24] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)&v127, (const void **)v123, (unsigned int *)&v134);
        if (SHIBYTE(v124[0]) < 0) {
          operator delete(v123[0]);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v128, v127);
        Agglomerate::set<TokenPromptItem>(v73, (long long *)__p);
        if ((__p[55] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[32]);
        }
      }
      std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)(a1 + 32), &v122);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v116.__r_.__value_.__l.__data_);
      }
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      if (SBYTE7(v120) < 0) {
        operator delete(v119[0]);
      }
      if (*((void *)&v122 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v122 + 1));
      }
      return;
  }
}

void sub_20D3AC444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  TokenBasicItem::~TokenBasicItem((TokenBasicItem *)&a20);
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x48uLL);
    v11[1] = a1 + 1;
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v8[2] = 0;
    *((void *)v6 + 7) = 0;
    *((void *)v6 + 8) = 0;
    char v12 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(uint64_t a1, const std::string::value_type **a2)
{
  std::unique_lock<std::mutex> v2 = (void *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  while (std::string::compare((const std::string *)(v3 + 4), *a2) > 0)
  {
    std::unique_lock<std::mutex> v2 = v3;
LABEL_6:
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return 0;
    }
  }
  if (std::string::compare((const std::string *)(v3 + 4), *a2) < 0)
  {
    ++v3;
    goto LABEL_6;
  }
  uint64_t v6 = *v3;
  int v7 = v3;
  if (*v3)
  {
    int v7 = v3;
    do
    {
      int v8 = std::string::compare((const std::string *)(v6 + 32), *a2);
      uint64_t v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        uint64_t v9 = (uint64_t *)v6;
        int v7 = (void *)v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
  }
  uint64_t v10 = v3[1];
  if (v10)
  {
    do
    {
      int v11 = std::string::compare((const std::string *)(v10 + 32), *a2);
      char v12 = (uint64_t *)(v10 + 8);
      if (v11 > 0)
      {
        char v12 = (uint64_t *)v10;
        std::unique_lock<std::mutex> v2 = (void *)v10;
      }
      uint64_t v10 = *v12;
    }
    while (*v12);
  }
  if (v7 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v13 = (void *)v7[1];
    if (v13)
    {
      do
      {
        int v14 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        int v14 = (void *)v7[2];
        BOOL v15 = *v14 == (void)v7;
        int v7 = v14;
      }
      while (!v15);
    }
    ++result;
    int v7 = v14;
  }
  while (v14 != v2);
  return result;
}

void Agglomerate::set<TokenMeCabItem>(uint64_t a1, long long *a2)
{
  uint64_t v10 = &v15;
  if (!v3) {
    operator new();
  }
  Agglomerate::ItemHolder<TokenMeCabItem>::ItemHolder((uint64_t)&v10, a2);
  int v4 = (void **)(v3 + 8);
  if (*(char *)(v3 + 31) < 0) {
    operator delete(*v4);
  }
  long long v5 = __p;
  *(void *)(v3 + 24) = v12;
  *(_OWORD *)int v4 = v5;
  HIBYTE(v12) = 0;
  LOBYTE(__p) = 0;
  uint64_t v6 = (void **)(v3 + 32);
  if (*(char *)(v3 + 55) < 0)
  {
    operator delete(*v6);
    int v8 = SHIBYTE(v12);
    long long v9 = v13;
    *(void *)(v3 + 48) = v14;
    *(_OWORD *)uint64_t v6 = v9;
    HIBYTE(v14) = 0;
    LOBYTE(v13) = 0;
    uint64_t v10 = (char ***)off_26C205FD8;
    if (v8 < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    long long v7 = v13;
    *(void *)(v3 + 48) = v14;
    *(_OWORD *)uint64_t v6 = v7;
  }
}

void sub_20D3ACBD4(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1093C403F48558ALL);
  _Unwind_Resume(a1);
}

uint64_t Agglomerate::ItemHolder<TokenMeCabItem>::ItemHolder(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_26C205FD8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v4;
  }
  long long v5 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 48) = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_20D3ACC9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void Agglomerate::ItemHolder<TokenMeCabItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C205FD8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenMeCabItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C205FD8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void Agglomerate::set<TokenOverrideItem>(uint64_t a1, const TokenOverrideItem *a2)
{
  int v16 = &v28;
  if (!v3) {
    operator new();
  }
  int v16 = (char ***)off_26C206198;
  TokenOverrideItem::TokenOverrideItem((TokenOverrideItem *)&v17, a2);
  *(_DWORD *)(v3 + 8) = v17;
  long long v4 = (void **)(v3 + 16);
  if (*(char *)(v3 + 39) < 0) {
    operator delete(*v4);
  }
  long long v5 = v18;
  *(void *)(v3 + 32) = v19;
  *(_OWORD *)long long v4 = v5;
  HIBYTE(v19) = 0;
  LOBYTE(v18) = 0;
  long long v6 = (void **)(v3 + 40);
  if (*(char *)(v3 + 63) < 0) {
    operator delete(*v6);
  }
  long long v7 = v20;
  *(void *)(v3 + 56) = v21;
  *(_OWORD *)long long v6 = v7;
  HIBYTE(v21) = 0;
  LOBYTE(v20) = 0;
  int v8 = (void **)(v3 + 64);
  if (*(char *)(v3 + 87) < 0) {
    operator delete(*v8);
  }
  long long v9 = v22;
  *(void *)(v3 + 80) = v23;
  *(_OWORD *)int v8 = v9;
  HIBYTE(v23) = 0;
  LOBYTE(v22) = 0;
  uint64_t v10 = (void **)(v3 + 88);
  if (*(char *)(v3 + 111) < 0) {
    operator delete(*v10);
  }
  long long v11 = __p;
  *(void *)(v3 + 104) = v25;
  *(_OWORD *)uint64_t v10 = v11;
  HIBYTE(v25) = 0;
  LOBYTE(__p) = 0;
  uint64_t v12 = (void **)(v3 + 112);
  if (*(char *)(v3 + 135) < 0)
  {
    operator delete(*v12);
    int v14 = SHIBYTE(v25);
    long long v15 = v26;
    *(void *)(v3 + 128) = v27;
    *(_OWORD *)uint64_t v12 = v15;
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
    int v16 = (char ***)off_26C206198;
    if (v14 < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    long long v13 = v26;
    *(void *)(v3 + 128) = v27;
    *(_OWORD *)uint64_t v12 = v13;
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
    int v16 = (char ***)off_26C206198;
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
}

void sub_20D3ACFFC(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1093C40B1D12501);
  _Unwind_Resume(a1);
}

void TokenOverrideItem::~TokenOverrideItem(void **this)
{
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void TokenOverrideItem::TokenOverrideItem(TokenOverrideItem *this, const TokenOverrideItem *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 9) = *((void *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v6;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 5);
    *((void *)this + 12) = *((void *)a2 + 12);
    *((_OWORD *)this + 5) = v7;
  }
  int v8 = (std::string *)((char *)this + 104);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 104);
    *((void *)this + 15) = *((void *)a2 + 15);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_20D3AD1C0(_Unwind_Exception *exception_object)
{
  if (v1[103] < 0) {
    operator delete(*v5);
  }
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void Agglomerate::ItemHolder<TokenOverrideItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206198;
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenOverrideItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206198;
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void Agglomerate::ItemHolder<TokenCountItem>::~ItemHolder()
{
}

__n128 Agglomerate::set<TokenAudioItem>(uint64_t a1, long long *a2)
{
  int v8 = &v14;
  if (!v3) {
    operator new();
  }
  Agglomerate::ItemHolder<TokenAudioItem>::ItemHolder((uint64_t)&v8, a2);
  long long v4 = (void **)(v3 + 8);
  if (*(char *)(v3 + 31) < 0) {
    operator delete(*v4);
  }
  long long v5 = v9;
  *(void *)(v3 + 24) = v10;
  *(_OWORD *)long long v4 = v5;
  __n128 result = v11;
  long long v7 = v13;
  *(_OWORD *)(v3 + 48) = v12;
  *(_OWORD *)(v3 + 64) = v7;
  *(__n128 *)(v3 + 32) = result;
  return result;
}

void sub_20D3AD470(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1093C4080D51F78);
  _Unwind_Resume(a1);
}

uint64_t Agglomerate::ItemHolder<TokenAudioItem>::ItemHolder(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_26C205F38;
  long long v4 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  long long v7 = *(long long *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 48) = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  return a1;
}

void Agglomerate::ItemHolder<TokenAudioItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C205F38;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenAudioItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C205F38;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<unsigned int,0>(unsigned __int8 *a1, const void **a2, unsigned int *a3)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v9 = *a1;
    if (v9 > 9) {
      uint64_t v10 = "number";
    }
    else {
      uint64_t v10 = off_2641152A0[v9];
    }
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    __n128 v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v11->__r_.__value_.__r.__words[2];
    long long v16 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v16, exception);
  }
  *(void *)&long long v16 = a1;
  std::string::size_type v17 = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0x8000000000000000;
  *((void *)&v16 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)a1 + 1), a2);
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v13.__r_.__value_.__r.__words[2] = 0;
  uint64_t v14 = 0;
  unint64_t v15 = 0x8000000000000000;
  int v5 = *a1;
  if (v5 == 2)
  {
    v13.__r_.__value_.__r.__words[2] = *(void *)(*((void *)a1 + 1) + 8);
  }
  else if (v5 == 1)
  {
    v13.__r_.__value_.__l.__size_ = *((void *)a1 + 1) + 8;
  }
  else
  {
    unint64_t v15 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v16, (unsigned __int8 **)&v13))
  {
    return *a3;
  }
  long long v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v16);
  LODWORD(v13.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v7, (unsigned int *)&v13);
  return LODWORD(v13.__r_.__value_.__l.__data_);
}

void sub_20D3AD744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void Agglomerate::ItemHolder<SentenceBreakItem>::~ItemHolder()
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Agglomerate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  long long v6 = a1 + 1;
  int v5 = a1[1];
  if (!v5)
  {
    int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x48uLL);
    __n128 v11 = *a3;
    uint64_t v12 = *((void *)*a3 + 2);
    *((_OWORD *)v10 + 2) = **a3;
    v10[6] = v12;
    *__n128 v11 = 0;
    v11[1] = 0;
    void v11[2] = 0;
    v10[7] = 0;
    v10[8] = 0;
    uint64_t *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *long long v6 = v10;
    std::string v13 = (uint64_t *)**a1;
    uint64_t v14 = v10;
    if (v13)
    {
      *a1 = v13;
      uint64_t v14 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      int v8 = (uint64_t **)v5;
      unint64_t v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      int v5 = *v8;
      long long v6 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2)) {
      break;
    }
    long long v6 = v8 + 1;
    int v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v10 = *v6;
  if (!*v6) {
    goto LABEL_10;
  }
  return v10;
}

void Agglomerate::ItemHolder<PhraseBreakItem>::~ItemHolder()
{
}

void Agglomerate::set<TokenPhoneticItem>(uint64_t a1, long long *a2)
{
  uint64_t v12 = &v19;
  if (!v3) {
    operator new();
  }
  Agglomerate::ItemHolder<TokenPhoneticItem>::ItemHolder((uint64_t)&v12, a2);
  long long v4 = (void **)(v3 + 8);
  if (*(char *)(v3 + 31) < 0) {
    operator delete(*v4);
  }
  long long v5 = v13;
  *(void *)(v3 + 24) = v14;
  *(_OWORD *)long long v4 = v5;
  HIBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  long long v6 = (void **)(v3 + 32);
  if (*(char *)(v3 + 55) < 0) {
    operator delete(*v6);
  }
  long long v7 = __p;
  *(void *)(v3 + 48) = v16;
  *(_OWORD *)long long v6 = v7;
  HIBYTE(v16) = 0;
  LOBYTE(__p) = 0;
  int v8 = (void **)(v3 + 56);
  if (*(char *)(v3 + 79) < 0)
  {
    operator delete(*v8);
    int v10 = SHIBYTE(v16);
    long long v11 = v17;
    *(void *)(v3 + 72) = v18;
    *(_OWORD *)int v8 = v11;
    HIBYTE(v18) = 0;
    LOBYTE(v17) = 0;
    uint64_t v12 = (char ***)off_26C2061B8;
    if (v10 < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    long long v9 = v17;
    *(void *)(v3 + 72) = v18;
    *(_OWORD *)int v8 = v9;
    HIBYTE(v18) = 0;
    LOBYTE(v17) = 0;
    uint64_t v12 = (char ***)off_26C2061B8;
  }
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)v13);
  }
}

void sub_20D3ADAB8(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1093C406ED0B5F1);
  _Unwind_Resume(a1);
}

void TokenPhoneticItem::~TokenPhoneticItem(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t Agglomerate::ItemHolder<TokenPhoneticItem>::ItemHolder(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_26C2061B8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 48) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 32) = v5;
  }
  long long v6 = (std::string *)(a1 + 56);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *(void *)(a1 + 72) = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_20D3ADC04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void Agglomerate::ItemHolder<TokenPhoneticItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C2061B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenPhoneticItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C2061B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

__n128 Agglomerate::set<TokenWrittenItem>(uint64_t a1, long long *a2)
{
  long long v6 = &v9;
  if (!v3) {
    operator new();
  }
  Agglomerate::ItemHolder<TokenWrittenItem>::ItemHolder(&v6, a2);
  long long v4 = (void **)(v3 + 8);
  if (*(char *)(v3 + 31) < 0) {
    operator delete(*v4);
  }
  __n128 result = v7;
  *(void *)(v3 + 24) = v8;
  *(__n128 *)long long v4 = result;
  return result;
}

void sub_20D3ADE18(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

void *Agglomerate::ItemHolder<TokenWrittenItem>::ItemHolder(void *a1, long long *a2)
{
  *a1 = off_26C2060D8;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void Agglomerate::ItemHolder<TokenWrittenItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C2060D8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenWrittenItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C2060D8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

__n128 Agglomerate::set<TokenPartOfSpeechItem>(uint64_t a1, long long *a2)
{
  long long v6 = &v9;
  if (!v3) {
    operator new();
  }
  Agglomerate::ItemHolder<TokenPartOfSpeechItem>::ItemHolder(&v6, a2);
  long long v4 = (void **)(v3 + 8);
  if (*(char *)(v3 + 31) < 0) {
    operator delete(*v4);
  }
  __n128 result = v7;
  *(void *)(v3 + 24) = v8;
  *(__n128 *)long long v4 = result;
  return result;
}

void sub_20D3AE044(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

void *Agglomerate::ItemHolder<TokenPartOfSpeechItem>::ItemHolder(void *a1, long long *a2)
{
  *a1 = off_26C206278;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void Agglomerate::ItemHolder<TokenPartOfSpeechItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206278;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenPartOfSpeechItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206278;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void Agglomerate::set<TokenNormalizerItem>(uint64_t a1, long long *a2)
{
  int v10 = &v16;
  if (!v3) {
    operator new();
  }
  Agglomerate::ItemHolder<TokenNormalizerItem>::ItemHolder((uint64_t)&v10, a2);
  long long v4 = (void **)(v3 + 8);
  if (*(char *)(v3 + 31) < 0) {
    operator delete(*v4);
  }
  long long v5 = v11;
  *(void *)(v3 + 24) = v12;
  *(_OWORD *)long long v4 = v5;
  HIBYTE(v12) = 0;
  LOBYTE(v11) = 0;
  long long v6 = (void **)(v3 + 32);
  if (*(char *)(v3 + 55) < 0) {
    operator delete(*v6);
  }
  long long v7 = __p;
  *(void *)(v3 + 48) = v14;
  *(_OWORD *)long long v6 = v7;
  HIBYTE(v14) = 0;
  LOBYTE(__p) = 0;
  long long v8 = v15;
  long long v15 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v3 + 64);
  *(_OWORD *)(v3 + 56) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    int v10 = (char ***)off_26C206258;
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
  }
  else
  {
    int v10 = (char ***)off_26C206258;
  }
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_20D3AE33C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B3C4024788DBELL);
  _Unwind_Resume(a1);
}

void TokenNormalizerItem::~TokenNormalizerItem(TokenNormalizerItem *this)
{
  std::unique_lock<std::mutex> v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t Agglomerate::ItemHolder<TokenNormalizerItem>::ItemHolder(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_26C206258;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v4;
  }
  long long v5 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 48) = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = *((void *)a2 + 7);
  *(void *)(a1 + 56) = *((void *)a2 + 6);
  *(void *)(a1 + 64) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_20D3AE46C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void Agglomerate::ItemHolder<TokenNormalizerItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206258;
  std::unique_lock<std::mutex> v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenNormalizerItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206258;
  std::unique_lock<std::mutex> v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void Agglomerate::ItemHolder<PhraseCountItem>::~ItemHolder()
{
}

void Agglomerate::ItemHolder<SentenceCountItem>::~ItemHolder()
{
}

void Agglomerate::ItemHolder<SentenceTypeItem>::~ItemHolder()
{
}

void std::__shared_ptr_emplace<VoiceDesc>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  std::unique_lock<std::mutex> v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__shared_ptr_emplace<VoiceDesc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<VoiceDesc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char *std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  long long v6 = a1 + 1;
  long long v5 = (char *)a1[1];
  uint64_t v7 = (void **)(a1 + 1);
  long long v8 = (void **)(a1 + 1);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v7 = (void **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      long long v8 = (void **)v5;
      int v10 = (const void **)(v5 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      long long v5 = (char *)*v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2)) {
      break;
    }
    uint64_t v7 = v8 + 1;
    long long v5 = (char *)v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  long long v11 = (char *)*v7;
  if (!*v7)
  {
LABEL_10:
    long long v11 = (char *)operator new(0x80uLL);
    v18[0] = v11;
    v18[1] = v6;
    char v19 = 0;
    uint64_t v12 = (std::string *)(v11 + 32);
    long long v13 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v13, *((void *)v13 + 1));
    }
    else
    {
      long long v14 = *v13;
      *((void *)v11 + 6) = *((void *)v13 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    }
    *((void *)v11 + 13) = 0;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *((_DWORD *)v11 + 26) = 2139095040;
    *((_OWORD *)v11 + 7) = xmmword_20D6B4A70;
    char v19 = 1;
    *(void *)long long v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v8;
    unsigned __int8 *v7 = v11;
    long long v15 = (uint64_t *)**a1;
    uint64_t v16 = (uint64_t *)v11;
    if (v15)
    {
      *a1 = v15;
      uint64_t v16 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_20D3AE838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<MetaElement>::construct[abi:ne180100]<MetaElement,MetaElement const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_20D3AE8FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<MetaElement>::__push_back_slow_path<MetaElement const&>(int64x2_t *a1, long long *a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v3;
  }
  long long v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v7 = (char *)operator new(72 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  char v19 = v7;
  v20.i64[0] = (uint64_t)&v7[72 * v2];
  v20.i64[1] = v20.i64[0];
  uint64_t v21 = &v7[72 * v6];
  std::allocator<MetaElement>::construct[abi:ne180100]<MetaElement,MetaElement const&>((std::string *)v20.i64[0], a2);
  uint64_t v8 = a1->i64[0];
  unint64_t v9 = a1->u64[1];
  uint64_t v10 = v20.i64[0];
  uint64_t v11 = v20.i64[0];
  if (v9 == a1->i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v9);
  }
  else
  {
    do
    {
      long long v12 = *(_OWORD *)(v9 - 72);
      *(void *)(v11 - 56) = *(void *)(v9 - 56);
      *(_OWORD *)(v11 - 72) = v12;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 72) = 0;
      long long v13 = *(_OWORD *)(v9 - 48);
      *(void *)(v11 - 32) = *(void *)(v9 - 32);
      *(_OWORD *)(v11 - 48) = v13;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 48) = 0;
      long long v14 = *(_OWORD *)(v9 - 24);
      *(void *)(v11 - 8) = *(void *)(v9 - 8);
      *(_OWORD *)(v11 - 24) = v14;
      v11 -= 72;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      *(void *)(v9 - 24) = 0;
      v9 -= 72;
    }
    while (v9 != v8);
    int64x2_t v15 = *a1;
  }
  uint64_t v16 = v10 + 72;
  a1->i64[0] = v11;
  a1->i64[1] = v10 + 72;
  int64x2_t v20 = v15;
  long long v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  uint64_t v21 = v17;
  char v19 = (char *)v15.i64[0];
  std::__split_buffer<MetaElement>::~__split_buffer((uint64_t)&v19);
  return v16;
}

void sub_20D3AEAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<MetaElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<MetaElement>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::allocator<MetaElement>::destroy[abi:ne180100](i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator<MetaElement>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::allocator<MetaElement>::destroy[abi:ne180100]((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<GlobalTokenAttributes>::__on_zero_shared(uint64_t a1)
{
  long long v5 = (void **)(a1 + 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(void *)(a1 + 152);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 160);
    long long v4 = *(void **)(a1 + 152);
    if (v3 != v2)
    {
      do
      {
        v3 -= 72;
        std::allocator<MetaElement>::destroy[abi:ne180100](v3);
      }
      while (v3 != v2);
      long long v4 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::destroy(*(void **)(a1 + 136));
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::destroy(a1[1]);
    std::allocator<MetaElement>::destroy[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<GlobalTokenAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<GlobalTokenAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void InjectJSONImpl::~InjectJSONImpl(InjectJSONImpl *this)
{
  InjectJSONImpl::~InjectJSONImpl(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = off_26C200AE0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 36, *((unsigned __int8 *)this + 280));
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*((void **)this + 33));
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*((void **)this + 30));
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*((void **)this + 27));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = off_26C1FFFF0;
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  FrontendModule::~FrontendModule((void **)this);
}

uint64_t std::__shared_ptr_emplace<InjectJSONImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<InjectJSONImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<InjectJSONImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void BBPEVocab::~BBPEVocab(BBPEVocab *this)
{
  uint64_t v2 = (sqlite3_stmt *)*((void *)this + 5);
  if (v2) {
    sqlite3_finalize(v2);
  }
  uint64_t v3 = (sqlite3_stmt *)*((void *)this + 6);
  if (v3) {
    sqlite3_finalize(v3);
  }
  long long v4 = (sqlite3_stmt *)*((void *)this + 7);
  if (v4) {
    sqlite3_finalize(v4);
  }
  long long v5 = (sqlite3 *)*((void *)this + 4);
  if (v5) {
    sqlite3_close(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

uint64_t BBPEVocab::report_error(BBPEVocab *this, uint64_t a2, const char *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2 && a2 != 101)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      long long v7 = (sqlite3 *)*((void *)this + 4);
      if (v7) {
        uint64_t v8 = sqlite3_errmsg(v7);
      }
      else {
        uint64_t v8 = sqlite3_errstr(a2);
      }
      *(_DWORD *)std::string buf = 136315394;
      long long v14 = a3;
      __int16 v15 = 2080;
      uint64_t v16 = v8;
      _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_ERROR, "BBPEVocab: Failed to %s: %s", buf, 0x16u);
    }
    unint64_t v9 = (sqlite3 *)*((void *)this + 4);
    if (v9) {
      uint64_t v10 = sqlite3_errmsg(v9);
    }
    else {
      uint64_t v10 = sqlite3_errstr(a2);
    }
    Diagnostics::log(3, "BBPEVocab: Failed to %s: %s", v11, a3, v10);
  }
  return a2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node(*(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node(void **__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0) {
        operator delete(v1[2]);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      uint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  long long v5 = operator new(8 * prime);
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    long long v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          *long long v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          long long v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        long long v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t BBPEVocab::lookup(sqlite3_stmt **a1, uint64_t a2)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    return -1;
  }
  int v4 = *(char *)(a2 + 23);
  long long v5 = v4 >= 0 ? (const char *)a2 : *(const char **)a2;
  int v6 = v4 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_DWORD *)(a2 + 8);
  uint64_t v7 = sqlite3_bind_text(v3, 1, v5, v6, 0);
  int v8 = v7;
  BBPEVocab::report_error((BBPEVocab *)a1, v7, "bind lookup subword");
  if (v8) {
    return -1;
  }
  if (sqlite3_step(a1[5]) == 100) {
    sqlite3_int64 v9 = sqlite3_column_int64(a1[5], 0);
  }
  else {
    sqlite3_int64 v9 = -1;
  }
  sqlite3_reset(a1[5]);
  return v9;
}

uint64_t std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::unordered_map(uint64_t a1, char a2, char a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(unsigned char *)(a1 + 44) = a3;
  std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::__rehash<true>(a1, 0);
  return a1;
}

void sub_20D3AF470(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void BBPE::init_codes(BBPE *this)
{
  uint64_t v3 = 0;
  int v4 = (unint64_t *)((char *)this + 24);
  long long v5 = (float *)((char *)this + 32);
  uint64_t v37 = (void *)((char *)this + 16);
  do
  {
    std::string::basic_string[abi:ne180100]<0>(v38, BBPE_TOBYTES[v3]);
    *(_OWORD *)long long __p = *(_OWORD *)v38;
    uint64_t v41 = v39;
    v38[1] = 0;
    uint64_t v39 = 0;
    v38[0] = 0;
    char v42 = v3;
    unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v4, (uint64_t)__p);
    unint64_t v7 = v6;
    unint64_t v8 = *((void *)this + 1);
    if (v8)
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        unint64_t v1 = v6;
        if (v6 >= v8) {
          unint64_t v1 = v6 % v8;
        }
      }
      else
      {
        unint64_t v1 = (v8 - 1) & v6;
      }
      unint64_t v11 = *(unsigned __int8 ***)(*(void *)this + 8 * v1);
      if (v11)
      {
        for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
        {
          unint64_t v13 = *((void *)i + 1);
          if (v13 == v7)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v5, i + 16, (unsigned __int8 *)__p)) {
              goto LABEL_77;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v1) {
              break;
            }
          }
        }
      }
    }
    long long v14 = (char *)operator new(0x30uLL);
    *(void *)long long v14 = 0;
    *((void *)v14 + 1) = v7;
    size_t v15 = (std::string *)(v14 + 16);
    if (SHIBYTE(v41) < 0)
    {
      std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      *((void *)v14 + 4) = v41;
    }
    v14[40] = v42;
    float v16 = (float)(*v4 + 1);
    float v17 = *v5;
    if (!v8 || (float)(v17 * (float)v8) < v16)
    {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3) {
        BOOL v18 = 1;
      }
      unint64_t v19 = v18 | (2 * v8);
      unint64_t v20 = vcvtps_u32_f32(v16 / v17);
      if (v19 <= v20) {
        int8x8_t prime = (int8x8_t)v20;
      }
      else {
        int8x8_t prime = (int8x8_t)v19;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v8 = *((void *)this + 1);
      if (*(void *)&prime > v8) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v8)
      {
        unint64_t v28 = vcvtps_u32_f32((float)*v4 / *v5);
        if (v8 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
        {
          unint64_t v28 = std::__next_prime(v28);
        }
        else
        {
          uint64_t v30 = 1 << -(char)__clz(v28 - 1);
          if (v28 >= 2) {
            unint64_t v28 = v30;
          }
        }
        if (*(void *)&prime <= v28) {
          int8x8_t prime = (int8x8_t)v28;
        }
        if (*(void *)&prime >= v8)
        {
          unint64_t v8 = *((void *)this + 1);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v22 = operator new(8 * *(void *)&prime);
            uint64_t v23 = *(void **)this;
            *(void *)this = v22;
            if (v23) {
              operator delete(v23);
            }
            uint64_t v24 = 0;
            *((int8x8_t *)this + 1) = prime;
            do
              *(void *)(*(void *)this + 8 * v24++) = 0;
            while (*(void *)&prime != v24);
            uint64_t v25 = (void *)*v37;
            if (*v37)
            {
              unint64_t v26 = v25[1];
              uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
              v27.i16[0] = vaddlv_u8(v27);
              if (v27.u32[0] > 1uLL)
              {
                if (v26 >= *(void *)&prime) {
                  v26 %= *(void *)&prime;
                }
              }
              else
              {
                v26 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)this + 8 * v26) = v37;
              long long v31 = (void *)*v25;
              if (*v25)
              {
                do
                {
                  unint64_t v32 = v31[1];
                  if (v27.u32[0] > 1uLL)
                  {
                    if (v32 >= *(void *)&prime) {
                      v32 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v32 &= *(void *)&prime - 1;
                  }
                  if (v32 != v26)
                  {
                    if (!*(void *)(*(void *)this + 8 * v32))
                    {
                      *(void *)(*(void *)this + 8 * v32) = v25;
                      goto LABEL_58;
                    }
                    void *v25 = *v31;
                    *long long v31 = **(void **)(*(void *)this + 8 * v32);
                    **(void **)(*(void *)this + 8 * v32) = v31;
                    long long v31 = v25;
                  }
                  unint64_t v32 = v26;
LABEL_58:
                  uint64_t v25 = v31;
                  long long v31 = (void *)*v31;
                  unint64_t v26 = v32;
                }
                while (v31);
              }
            }
            unint64_t v8 = (unint64_t)prime;
            goto LABEL_62;
          }
          uint64_t v36 = *(void **)this;
          *(void *)this = 0;
          if (v36) {
            operator delete(v36);
          }
          unint64_t v8 = 0;
          *((void *)this + 1) = 0;
        }
      }
LABEL_62:
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8) {
          unint64_t v1 = v7 % v8;
        }
        else {
          unint64_t v1 = v7;
        }
      }
      else
      {
        unint64_t v1 = (v8 - 1) & v7;
      }
    }
    int8x8_t v33 = *(int8x8_t *)this;
    BOOL v34 = *(void **)(*(void *)this + 8 * v1);
    if (v34)
    {
      *(void *)long long v14 = *v34;
LABEL_75:
      *BOOL v34 = v14;
      goto LABEL_76;
    }
    *(void *)long long v14 = *v37;
    void *v37 = v14;
    *(void *)(*(void *)&v33 + 8 * v1) = v37;
    if (*(void *)v14)
    {
      unint64_t v35 = *(void *)(*(void *)v14 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v35 >= v8) {
          v35 %= v8;
        }
      }
      else
      {
        v35 &= v8 - 1;
      }
      BOOL v34 = (void *)(*(void *)this + 8 * v35);
      goto LABEL_75;
    }
LABEL_76:
    ++*v4;
LABEL_77:
    if (SHIBYTE(v41) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(v38[0]);
    }
    ++v3;
  }
  while (v3 != 256);
}

void sub_20D3AF918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,FRCode::BndType>,void *>>>::operator()[abi:ne180100](1, v21);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t BBPE::setup_pre_tokenization_regex(BBPE *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *((void *)this + 28);
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v10 = v4;
    _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEBUG, "Pretokenization Regex: %s", buf, 0xCu);
  }
  Diagnostics::log(7, "Pretokenization Regex: %s", v3, *((void *)this + 28));
  uint64_t result = pcre2_compile_8();
  *((void *)this + 27) = result;
  if (!result)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *((void *)this + 28);
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v10 = v8;
      __int16 v11 = 1024;
      int v12 = 0;
      _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEBUG, "Compiled RE failed(%s), Code: %d", buf, 0x12u);
    }
    return Diagnostics::log(7, "Compiled RE failed(%s), Code: %d", v7, *((void *)this + 28), 0, 0);
  }
  return result;
}

void std::__list_imp<std::pair<std::string,std::string>>::clear(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        long long v5 = (char *)*((void *)v3 + 1);
        if (v3[63] < 0) {
          operator delete(*((void **)v3 + 5));
        }
        if (v3[39] < 0) {
          operator delete(*((void **)v3 + 2));
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 40));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      float v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  long long v5 = operator new(8 * prime);
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    long long v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          *long long v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          long long v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        long long v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void BBPE::load_data(uint64_t a1, uint64_t a2)
{
  v144[1] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 136))
  {
    long long v5 = *(void **)(a1 + 128);
    if (v5)
    {
      do
      {
        unint64_t v6 = (void *)*v5;
        operator delete(v5);
        long long v5 = v6;
      }
      while (v6);
    }
    *(void *)(a1 + 128) = 0;
    uint64_t v7 = *(void *)(a1 + 120);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        *(void *)(*(void *)(a1 + 112) + 8 * i) = 0;
    }
    *(void *)(a1 + 136) = 0;
  }
  std::__list_imp<std::pair<std::string,std::string>>::clear((char *)(a1 + 160));
  std::string::size_type v9 = std::string::rfind((const std::string *)a2, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v9 != -1)
  {
    std::string::basic_string(&v119, (const std::string *)a2, v9, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)buf);
    if ((*((unsigned char *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v119.__r_.__value_.__l.__size_ != 4)
      {
        if (v119.__r_.__value_.__l.__size_ != 5) {
          goto LABEL_45;
        }
        if (*(_DWORD *)v119.__r_.__value_.__l.__data_ != 1869834798
          || *(unsigned char *)(v119.__r_.__value_.__r.__words[0] + 4) != 110)
        {
          goto LABEL_45;
        }
        goto LABEL_30;
      }
      long long v31 = (std::string *)v119.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v119.__r_.__value_.__r.__words[2]) != 4)
      {
        if (HIBYTE(v119.__r_.__value_.__r.__words[2]) != 5
          || (LODWORD(v119.__r_.__value_.__l.__data_) == 1869834798
            ? (BOOL v10 = v119.__r_.__value_.__s.__data_[4] == 110)
            : (BOOL v10 = 0),
              !v10))
        {
LABEL_45:
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          unint64_t v32 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_20CD80000, v32, OS_LOG_TYPE_ERROR, "Failed to load BBPEVocab, only .json and .dat are supported!", buf, 2u);
          }
          Diagnostics::log(3, "Failed to load BBPEVocab, only .json and .dat are supported!", v33);
          goto LABEL_50;
        }
LABEL_30:
        v117[0] = 0;
        unint64_t v118 = 0;
        std::ifstream::basic_ifstream((uint64_t *)buf);
        if (v141)
        {
          nlohmann::operator>>(buf, (uint64_t)v117);
          if (v117[0])
          {
            long long v14 = (sqlite3 **)(a1 + 72);
            uint64_t v15 = sqlite3_open_v2(":memory:", (sqlite3 **)(a1 + 72), 262278, 0);
            float v16 = (BBPEVocab *)(a1 + 40);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v15, "open compiled vocab");
            uint64_t v17 = sqlite3_exec(*(sqlite3 **)(a1 + 72), "CREATE TABLE Metadata (name TEXT, value TEXT);", 0, 0, 0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v17, "create metadata table");
            std::operator+<char>();
            BOOL v18 = std::string::append((std::string *)v143, "');");
            long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            int64_t v131 = v18->__r_.__value_.__r.__words[2];
            long long v130 = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            if ((v143[23] & 0x80000000) != 0) {
              operator delete(*(void **)v143);
            }
            if (v131 >= 0) {
              unint64_t v20 = (const char *)&v130;
            }
            else {
              unint64_t v20 = (const char *)v130;
            }
            uint64_t v21 = sqlite3_exec(*v14, v20, 0, 0, 0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v21, "set version");
            uint64_t v22 = sqlite3_exec(*v14, "CREATE TABLE vocab (subword TEXT, rank INT64);", 0, 0, 0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v22, "create vocab");
            uint64_t v23 = sqlite3_exec(*v14, "CREATE unique INDEX lookup_index on vocab (subword);", 0, 0, 0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v23, "create lookup_index");
            uint64_t v24 = sqlite3_exec(*v14, "CREATE unique INDEX id_lookup_index on vocab (rank);", 0, 0, 0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v24, "create id_lookup_index");
            uint64_t v25 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 72), "SELECT rank FROM vocab WHERE subword=?;",
                    -1,
                    (sqlite3_stmt **)(a1 + 80),
                    0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v25, "compile lookup query");
            uint64_t v26 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 72), "SELECT subword FROM vocab WHERE rank=?;",
                    -1,
                    (sqlite3_stmt **)(a1 + 88),
                    0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v26, "compile id lookup query");
            uint8x8_t v27 = *(sqlite3 **)(a1 + 72);
            unint64_t v28 = (sqlite3_stmt **)(a1 + 96);
            uint64_t v29 = sqlite3_prepare_v2(v27, "INSERT INTO vocab VALUES(?, ?);", -1, v28, 0);
            BBPEVocab::report_error(v16, v29, "compile entry creation query");
            uint64_t v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v117, "model");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v128, (uint64_t)v30);
            if (!v128[0])
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              uint64_t v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)int v143 = 0;
                _os_log_impl(&dword_20CD80000, v57, OS_LOG_TYPE_ERROR, "we cannot read model content from json file!", v143, 2u);
              }
              Diagnostics::log(3, "we cannot read model content from json file!", v58);
              goto LABEL_203;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "vocab");
            long long v120 = 0u;
            *(_OWORD *)unint64_t v121 = 0u;
            int v122 = 1065353216;
            if (v128[0] != 1)
            {
              exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
              if (v128[0] > 9uLL) {
                __int16 v103 = "number";
              }
              else {
                __int16 v103 = off_2641152A0[v128[0]];
              }
              std::string::basic_string[abi:ne180100]<0>(&v132, v103);
              uint64_t v104 = std::string::insert(&v132, 0, "cannot use value() with ");
              long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
              *(void *)&v143[16] = *((void *)&v104->__r_.__value_.__l + 2);
              *(_OWORD *)int v143 = v105;
              v104->__r_.__value_.__l.__size_ = 0;
              v104->__r_.__value_.__r.__words[2] = 0;
              v104->__r_.__value_.__r.__words[0] = 0;
              nlohmann::detail::type_error::create(306, (uint64_t)v143, exception);
            }
            v132.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
            v132.__r_.__value_.__r.__words[2] = 0;
            uint64_t v133 = 0;
            unint64_t v134 = 0x8000000000000000;
            v132.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v129, (const void **)__p);
            *(void *)int v143 = v128;
            memset(&v143[8], 0, 24);
            v144[0] = 0x8000000000000000;
            if (v128[0] == 2)
            {
              *(void *)&v143[16] = v129[1];
            }
            else if (v128[0] == 1)
            {
              *(void *)&v143[8] = v129 + 1;
            }
            else
            {
              v144[0] = 1;
            }
            if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v132, (unsigned __int8 **)v143))
            {
              *(_OWORD *)long long v125 = 0u;
              long long v126 = 0u;
              int v127 = 1065353216;
              std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__rehash<true>((uint64_t)v125, 0);
              std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node(0);
LABEL_186:
              if (v124 < 0) {
                operator delete(__p[0]);
              }
              long long v90 = (uint64_t *)v126;
              if ((void)v126)
              {
                do
                {
                  sqlite3_int64 v91 = v90[5];
                  sqlite3_clear_bindings(*v28);
                  int v92 = *((char *)v90 + 39);
                  if (v92 >= 0) {
                    int v93 = (const char *)(v90 + 2);
                  }
                  else {
                    int v93 = (const char *)v90[2];
                  }
                  if (v92 >= 0) {
                    int v94 = *((unsigned __int8 *)v90 + 39);
                  }
                  else {
                    int v94 = *((_DWORD *)v90 + 6);
                  }
                  uint64_t v95 = sqlite3_bind_text(*v28, 1, v93, v94, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
                  int v96 = v95;
                  BBPEVocab::report_error(v16, v95, "bind subword");
                  if (!v96)
                  {
                    uint64_t v97 = sqlite3_bind_int64(*v28, 2, v91);
                    int v98 = v97;
                    BBPEVocab::report_error(v16, v97, "bind rank");
                    if (!v98)
                    {
                      uint64_t v99 = sqlite3_step(*v28);
                      BBPEVocab::report_error(v16, v99, "add entry");
                      sqlite3_reset(*v28);
                    }
                  }
                  long long v90 = (uint64_t *)*v90;
                }
                while (v90);
                long long v100 = (void **)v126;
              }
              else
              {
                long long v100 = 0;
              }
              std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node(v100);
              long long v101 = v125[0];
              v125[0] = 0;
              if (v101) {
                operator delete(v101);
              }
LABEL_203:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v129, v128[0]);
              if (SHIBYTE(v131) < 0) {
                operator delete((void *)v130);
              }
              goto LABEL_205;
            }
            __int16 v59 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v132);
            int v60 = v59;
            *(_OWORD *)long long v125 = 0u;
            long long v126 = 0u;
            int v127 = 1065353216;
            if (*v59 != 1)
            {
              long long v106 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
              unint64_t v107 = *v60;
              if (v107 > 9) {
                uint64_t v108 = "number";
              }
              else {
                uint64_t v108 = off_2641152A0[v107];
              }
              std::string::basic_string[abi:ne180100]<0>(&v135, v108);
              uint64_t v109 = std::string::insert(&v135, 0, "type must be object, but is ");
              long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
              *(void *)&v143[16] = *((void *)&v109->__r_.__value_.__l + 2);
              *(_OWORD *)int v143 = v110;
              v109->__r_.__value_.__l.__size_ = 0;
              v109->__r_.__value_.__r.__words[2] = 0;
              v109->__r_.__value_.__r.__words[0] = 0;
              nlohmann::detail::type_error::create(302, (uint64_t)v143, v106);
            }
            memset(v143, 0, sizeof(v143));
            LODWORD(v144[0]) = 1065353216;
            int v61 = (void *)*((void *)v59 + 1);
            uint64_t v62 = (void *)*v61;
            std::string v116 = v61 + 1;
            if ((void *)*v61 == v61 + 1)
            {
LABEL_176:
              long long v85 = *(_OWORD *)v143;
              *(_OWORD *)int v143 = 0uLL;
              long long v86 = *(void ***)&v143[16];
              *(_OWORD *)long long v125 = v85;
              int v127 = v144[0];
              long long v126 = *(_OWORD *)&v143[16];
              if (*(void *)&v143[24])
              {
                unint64_t v87 = *(void *)(*(void *)&v143[16] + 8);
                if ((*((void *)&v85 + 1) & (*((void *)&v85 + 1) - 1)) != 0)
                {
                  if (v87 >= *((void *)&v85 + 1)) {
                    v87 %= *((void *)&v85 + 1);
                  }
                }
                else
                {
                  v87 &= *((void *)&v85 + 1) - 1;
                }
                long long v86 = 0;
                *(void *)(v85 + 8 * v87) = &v126;
                *(void *)&v143[16] = 0;
                *(void *)&v143[24] = 0;
              }
              std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node(v86);
              long long v88 = *(void **)v143;
              *(void *)int v143 = 0;
              if (v88) {
                operator delete(v88);
              }
              long long v89 = (void *)v120;
              std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node((void **)v121[0]);
              if (v89) {
                operator delete(v89);
              }
              goto LABEL_186;
            }
            while (1)
            {
              int v63 = *((unsigned __int8 *)v62 + 56);
              if (v63 != 5)
              {
                if (v63 == 7)
                {
                  uint64_t v64 = (uint64_t)*((double *)v62 + 8);
                  goto LABEL_124;
                }
                if (v63 != 6)
                {
                  uint64_t v111 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
                  unint64_t v112 = *((unsigned __int8 *)v62 + 56);
                  if (v112 > 9) {
                    uint64_t v113 = "number";
                  }
                  else {
                    uint64_t v113 = off_2641152A0[v112];
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v137, v113);
                  unint64_t v114 = std::string::insert(&v137, 0, "type must be number, but is ");
                  long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
                  std::string::size_type v139 = v114->__r_.__value_.__r.__words[2];
                  long long v138 = v115;
                  v114->__r_.__value_.__l.__size_ = 0;
                  v114->__r_.__value_.__r.__words[2] = 0;
                  v114->__r_.__value_.__r.__words[0] = 0;
                  nlohmann::detail::type_error::create(302, (uint64_t)&v138, v111);
                }
              }
              uint64_t v64 = v62[8];
LABEL_124:
              if (*((char *)v62 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v135, (const std::string::value_type *)v62[4], v62[5]);
              }
              else {
                std::string v135 = *(std::string *)(v62 + 4);
              }
              uint64_t v136 = v64;
              unint64_t v65 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v143[24], (uint64_t)&v135);
              unint64_t v66 = v65;
              unint64_t v67 = *(void *)&v143[8];
              if (*(void *)&v143[8])
              {
                uint8x8_t v68 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v143[8]);
                v68.i16[0] = vaddlv_u8(v68);
                unint64_t v69 = v68.u32[0];
                if (v68.u32[0] > 1uLL)
                {
                  unint64_t v2 = v65;
                  if (v65 >= *(void *)&v143[8]) {
                    unint64_t v2 = v65 % *(void *)&v143[8];
                  }
                }
                else
                {
                  unint64_t v2 = (*(void *)&v143[8] - 1) & v65;
                }
                std::string::size_type v70 = *(unsigned __int8 ***)(*(void *)v143 + 8 * v2);
                if (v70)
                {
                  for (uint64_t j = *v70; j; uint64_t j = *(unsigned __int8 **)j)
                  {
                    unint64_t v72 = *((void *)j + 1);
                    if (v72 == v66)
                    {
                      if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v144, j + 16, (unsigned __int8 *)&v135))goto LABEL_168; {
                    }
                      }
                    else
                    {
                      if (v69 > 1)
                      {
                        if (v72 >= v67) {
                          v72 %= v67;
                        }
                      }
                      else
                      {
                        v72 &= v67 - 1;
                      }
                      if (v72 != v2) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v73 = operator new(0x30uLL);
              void *v73 = 0;
              v73[1] = v66;
              uint64_t v74 = (std::string *)(v73 + 2);
              if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v74, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v74->__r_.__value_.__l.__data_ = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
                v73[4] = *((void *)&v135.__r_.__value_.__l + 2);
              }
              v73[5] = v136;
              float v75 = (float)(unint64_t)(*(void *)&v143[24] + 1);
              if (!v67 || (float)(*(float *)v144 * (float)v67) < v75)
              {
                BOOL v76 = (v67 & (v67 - 1)) != 0;
                if (v67 < 3) {
                  BOOL v76 = 1;
                }
                unint64_t v77 = v76 | (2 * v67);
                unint64_t v78 = vcvtps_u32_f32(v75 / *(float *)v144);
                if (v77 <= v78) {
                  size_t v79 = v78;
                }
                else {
                  size_t v79 = v77;
                }
                std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__rehash<true>((uint64_t)v143, v79);
                unint64_t v67 = *(void *)&v143[8];
                if ((v67 & (v67 - 1)) != 0)
                {
                  if (v66 >= *(void *)&v143[8]) {
                    unint64_t v2 = v66 % *(void *)&v143[8];
                  }
                  else {
                    unint64_t v2 = v66;
                  }
                }
                else
                {
                  unint64_t v2 = (*(void *)&v143[8] - 1) & v66;
                }
              }
              uint64_t v80 = *(void *)v143;
              uint64_t v81 = *(void **)(*(void *)v143 + 8 * v2);
              if (v81)
              {
                void *v73 = *v81;
              }
              else
              {
                void *v73 = *(void *)&v143[16];
                *(void *)&v143[16] = v73;
                *(void *)(v80 + 8 * v2) = &v143[16];
                if (!*v73) {
                  goto LABEL_167;
                }
                unint64_t v82 = *(void *)(*v73 + 8);
                if ((v67 & (v67 - 1)) != 0)
                {
                  if (v82 >= v67) {
                    v82 %= v67;
                  }
                }
                else
                {
                  v82 &= v67 - 1;
                }
                uint64_t v81 = (void *)(*(void *)v143 + 8 * v82);
              }
              void *v81 = v73;
LABEL_167:
              ++*(void *)&v143[24];
LABEL_168:
              if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v135.__r_.__value_.__l.__data_);
              }
              uint64_t v83 = (void *)v62[1];
              if (v83)
              {
                do
                {
                  int v84 = v83;
                  uint64_t v83 = (void *)*v83;
                }
                while (v83);
              }
              else
              {
                do
                {
                  int v84 = (void *)v62[2];
                  BOOL v10 = *v84 == (void)v62;
                  uint64_t v62 = v84;
                }
                while (!v10);
              }
              uint64_t v62 = v84;
              if (v84 == v116) {
                goto LABEL_176;
              }
            }
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v54 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(a2 + 23) >= 0) {
              uint64_t v55 = a2;
            }
            else {
              uint64_t v55 = *(void *)a2;
            }
            *(_DWORD *)int v143 = 136315138;
            *(void *)&v143[4] = v55;
            _os_log_impl(&dword_20CD80000, v54, OS_LOG_TYPE_ERROR, "%s was open, but we cannot read anything from it!", v143, 0xCu);
          }
          long long v53 = "%s was open, but we cannot read anything from it!";
        }
        else
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v50 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(a2 + 23) >= 0) {
              uint64_t v52 = a2;
            }
            else {
              uint64_t v52 = *(void *)a2;
            }
            *(_DWORD *)int v143 = 136315138;
            *(void *)&v143[4] = v52;
            _os_log_impl(&dword_20CD80000, v50, OS_LOG_TYPE_ERROR, "Unable to open vocab json file: %s", v143, 0xCu);
          }
          long long v53 = "Unable to open vocab json file: %s";
        }
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v56 = a2;
        }
        else {
          uint64_t v56 = *(void *)a2;
        }
        Diagnostics::log(3, v53, v51, v56);
LABEL_205:
        *(void *)std::string buf = *MEMORY[0x263F8C2A8];
        *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2A8] + 24);
        MEMORY[0x210558FE0](&buf[16]);
        std::istream::~istream();
        MEMORY[0x210559500](&v142);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v118, v117[0]);
LABEL_50:
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v119.__r_.__value_.__l.__data_);
        }
        return;
      }
      long long v31 = &v119;
    }
    if (LODWORD(v31->__r_.__value_.__l.__data_) == 1952539694)
    {
      memset(v143, 0, 24);
      MemoryMap::MemoryMap((std::__shared_weak_count **)buf, a2);
      uint64_t v35 = *(void *)buf;
      uint64_t v34 = *(void *)&buf[8];
      if (*(void *)&buf[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v36 = *(std::__shared_weak_count **)(a1 + 48);
      *(void *)(a1 + 40) = v35;
      *(void *)(a1 + 48) = v34;
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      *(_OWORD *)(a1 + 56) = *(_OWORD *)&buf[16];
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (*(void *)(a1 + 40))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v37 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v39 = a2;
          }
          else {
            uint64_t v39 = *(void *)a2;
          }
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v39;
          _os_log_impl(&dword_20CD80000, v37, OS_LOG_TYPE_DEFAULT, "Loaded BBPE Vocab: %s", buf, 0xCu);
        }
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v40 = a2;
        }
        else {
          uint64_t v40 = *(void *)a2;
        }
        Diagnostics::log(5, "Loaded BBPE Vocab: %s", v38, v40);
        uint64_t v41 = sqlite3_open_MemoryMap((const void **)(a1 + 40), (sqlite3 **)(a1 + 72));
        BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v41, "Open memory mapped BBPE Vocab");
        uint64_t v42 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 72), "SELECT rank FROM vocab WHERE subword=?;",
                -1,
                (sqlite3_stmt **)(a1 + 80),
                0);
        BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v42, "compile lookup query");
        uint64_t v43 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 72), "SELECT subword FROM vocab WHERE rank=?;",
                -1,
                (sqlite3_stmt **)(a1 + 88),
                0);
        BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v43, "compile id lookup query");
      }
      else
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        int v44 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v46 = a2;
          }
          else {
            uint64_t v46 = *(void *)a2;
          }
          uint64_t v47 = v143;
          if (v143[23] < 0) {
            uint64_t v47 = *(unsigned char **)v143;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v46;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v47;
          _os_log_impl(&dword_20CD80000, v44, OS_LOG_TYPE_ERROR, "BBPEVocab(%s) memory mapping failed: %s", buf, 0x16u);
        }
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v48 = a2;
        }
        else {
          uint64_t v48 = *(void *)a2;
        }
        uint64_t v49 = v143;
        if (v143[23] < 0) {
          uint64_t v49 = *(unsigned char **)v143;
        }
        Diagnostics::log(3, "BBPEVocab(%s) memory mapping failed: %s", v45, v48, v49);
      }
      if ((v143[23] & 0x80000000) != 0) {
        operator delete(*(void **)v143);
      }
      goto LABEL_50;
    }
    goto LABEL_45;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_ERROR, "Failed to load BBPEVocab, only file with .json or .dat suffix is supported!", buf, 2u);
  }
  Diagnostics::log(3, "Failed to load BBPEVocab, only file with .json or .dat suffix is supported!", v12);
}

void sub_20D3B0F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t *a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)&a24);
  if (a34 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a42, a41);
  if (a48 < 0) {
    operator delete(a43);
  }
  std::ifstream::~ifstream(&a66);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v66, a16);
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void UTFString::join<std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(&__p[32], 0, 7);
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    *(std::string *)long long __p = *(std::string *)a4;
  }
  if (a2 == a3)
  {
    uint64_t v7 = 0;
    std::string::size_type size = 0;
    LOBYTE(v9) = 0;
  }
  else
  {
    uint64_t v7 = 0;
    std::string::size_type size = 0;
    std::string::size_type v9 = 0;
    do
    {
      if ((v9 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(&v17, v7, size);
        std::string::size_type v10 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      else
      {
        v17.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
        v17.__r_.__value_.__l.__size_ = size;
        LODWORD(v17.__r_.__value_.__r.__words[2]) = *(_DWORD *)&__p[32];
        *(_DWORD *)((char *)&v17.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&__p[35];
        *((unsigned char *)&v17.__r_.__value_.__s + 23) = v9;
        std::string::size_type v10 = v9;
      }
      if ((v10 & 0x80u) != 0) {
        std::string::size_type v10 = size;
      }
      if (v10)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v17.__r_.__value_.__l.__data_, (const void **)__p, (uint64_t)&v19);
        int v11 = *(char *)(a2 + 23);
        if (v11 >= 0) {
          uint8x8_t v12 = (const std::string::value_type *)a2;
        }
        else {
          uint8x8_t v12 = *(const std::string::value_type **)a2;
        }
        if (v11 >= 0) {
          std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v13 = *(void *)(a2 + 8);
        }
        long long v14 = std::string::append(&v19, v12, v13);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v18.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
      }
      else if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        std::string v18 = *(std::string *)a2;
      }
      if ((char)v9 < 0) {
        operator delete(v7);
      }
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
      uint64_t v7 = (std::string::value_type *)v18.__r_.__value_.__r.__words[0];
      *(_DWORD *)&__p[32] = v18.__r_.__value_.__r.__words[2];
      *(_DWORD *)&__p[35] = *(_DWORD *)((char *)&v18.__r_.__value_.__r.__words[2] + 3);
      std::string::size_type v9 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      *((unsigned char *)&v18.__r_.__value_.__s + 23) = 0;
      v18.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      a2 += 24;
    }
    while (a2 != a3);
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = size;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)&__p[32];
  *(_DWORD *)(a1 + 19) = *(_DWORD *)&__p[35];
  *(unsigned char *)(a1 + 23) = v9;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
}

void sub_20D3B1428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>(std::string *this, uint64_t a2, int *a3, int *a4, int *a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v9 = *a3;
  int v10 = *a4;
  int v11 = *a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v9;
    HIDWORD(this[1].__r_.__value_.__r.__words[0]) = v10;
    LODWORD(this[1].__r_.__value_.__r.__words[1]) = v11;
    if (v12 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *this = __p;
    LODWORD(this[1].__r_.__value_.__l.__data_) = v9;
    HIDWORD(this[1].__r_.__value_.__r.__words[0]) = v10;
    LODWORD(this[1].__r_.__value_.__r.__words[1]) = v11;
  }
}

void sub_20D3B153C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::find<std::string const*>(void *a1, uint64_t *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 4), *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  int v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)a1 + 44;
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        long long v14 = (unsigned __int8 *)v11[2];
        if (v14 == (unsigned __int8 *)*a2
          || (std::equal_to<std::string>::operator()[abi:ne180100](v12, v14, (unsigned __int8 *)*a2) & 1) != 0)
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      int v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::erase(void *a1, void *__p)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  unint64_t v3 = __p[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  int8x8_t v5 = *(void **)(*a1 + 8 * v3);
  do
  {
    unint64_t v6 = v5;
    int8x8_t v5 = (void *)*v5;
  }
  while (v5 != __p);
  if (v6 == a1 + 2) {
    goto LABEL_18;
  }
  unint64_t v7 = v6[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v2) {
      v7 %= *(void *)&v2;
    }
  }
  else
  {
    v7 &= *(void *)&v2 - 1;
  }
  if (v7 != v3)
  {
LABEL_18:
    if (!*__p) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(*__p + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    if (v8 != v3) {
LABEL_19:
    }
      *(void *)(*a1 + 8 * v3) = 0;
  }
  uint64_t v9 = *__p;
  if (*__p)
  {
    unint64_t v10 = *(void *)(v9 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v2) {
        v10 %= *(void *)&v2;
      }
    }
    else
    {
      v10 &= *(void *)&v2 - 1;
    }
    if (v10 != v3)
    {
      *(void *)(*a1 + 8 * v10) = v6;
      uint64_t v9 = *__p;
    }
  }
  *unint64_t v6 = v9;
  char *__p = 0;
  --a1[3];
  operator delete(__p);
}

uint64_t *std::vector<ByteToken>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 40;
      long long v6 = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 24) = *(void *)(v3 - 24);
      *(_OWORD *)(v4 - 40) = v6;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 40) = 0;
      uint64_t v7 = *(void *)(v3 - 16);
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      *(void *)(v4 - 16) = v7;
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  void *result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void std::__shared_ptr_emplace<std::vector<ByteToken>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0) {
          operator delete(*(void **)(v3 - 40));
        }
        v3 -= 40;
      }
      while (v3 != v1);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<std::vector<ByteToken>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2197E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<ByteToken>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2197E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::vector<ByteChunk>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = (std::__shared_weak_count *)*((void *)v4 - 2);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 24;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void BBPE::encode_and_return_vector(uint64_t **a1, uint64_t a2, std::string *a3)
{
  uint64_t v282 = *MEMORY[0x263EF8340];
  long long v6 = (uint64_t *)operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0;
  uint64_t v7 = v6 + 3;
  *long long v6 = (uint64_t)off_26C2197E0;
  v6[4] = 0;
  v6[5] = 0;
  *a1 = v6 + 3;
  a1[1] = v6;
  std::string v260 = a1;
  std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
  }
  if (!size) {
    return;
  }
  uint64_t v9 = v6;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__first_) = 136315138;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v12;
    _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_DEBUG, "Pretokenization Input: %s", (uint8_t *)&buf, 0xCu);
  }
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v13 = a3;
  }
  else {
    unint64_t v13 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(7, "Pretokenization Input: %s", v11, v13);
  std::string::size_type v269 = 0;
  unint64_t v271 = 0;
  uint64_t v272 = 0;
  unint64_t v273 = 0;
  long long v14 = v9;
  std::string __p = a3;
  do
  {
    uint64_t v15 = *(void *)(a2 + 216);
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = *a3;
    }
    float v16 = pcre2_match_data_create_from_pattern_8(v15, 0);
    int matched = pcre2_match_8();
    memset(&v279, 0, sizeof(v279));
    if (matched < 0)
    {
      pcre2_match_data_free_8((uint64_t)v16);
      std::string::size_type v22 = v269;
    }
    else
    {
      ovector_pointer_8 = (std::string::size_type *)pcre2_get_ovector_pointer_8((uint64_t)v16);
      std::string v19 = ovector_pointer_8;
      std::string::size_type v20 = *ovector_pointer_8;
      std::string::size_type v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v21 = __str.__r_.__value_.__l.__size_;
      }
      if (v20 < v21)
      {
        std::string::basic_string((std::string *)&buf, &__str, v20, ovector_pointer_8[1] - v20, (std::allocator<char> *)&v276);
        *(_OWORD *)&v279.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__first_;
        v279.__r_.__value_.__r.__words[2] = (std::string::size_type)buf.__end_;
      }
      std::string::size_type v22 = v19[1];
      pcre2_match_data_free_8((uint64_t)v16);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    char v23 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
    if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v24 = v279.__r_.__value_.__l.__size_;
    }
    if (v24)
    {
      uint64_t v265 = (std::vector<std::string> *)v24;
      std::string::size_type v267 = v22;
      uint64_t v25 = (char *)operator new(0x30uLL);
      std::string::size_type v26 = 0;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = 0;
      *(void *)uint64_t v25 = off_26C2199A0;
      *((void *)v25 + 3) = 0;
      uint8x8_t v27 = (std::vector<std::string> *)(v25 + 24);
      *((void *)v25 + 4) = 0;
      *((void *)v25 + 5) = 0;
      do
      {
        std::string::const_reference v28 = std::string::at(&v279, v26);
        std::string::basic_string[abi:ne180100]<0>(&v280, BBPE_TOBYTES[*(unsigned __int8 *)v28]);
        unint64_t v30 = *((void *)v25 + 4);
        unint64_t v29 = *((void *)v25 + 5);
        if (v30 >= v29)
        {
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (unint64_t)v27->__begin_) >> 3);
          unint64_t v33 = v32 + 1;
          if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (unint64_t)v27->__begin_) >> 3);
          if (2 * v34 > v33) {
            unint64_t v33 = 2 * v34;
          }
          if (v34 >= 0x555555555555555) {
            unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v35 = v33;
          }
          buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v25 + 40);
          if (v35) {
            uint64_t v36 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v25 + 40), v35);
          }
          else {
            uint64_t v36 = 0;
          }
          uint64_t v37 = v36 + v32;
          buf.__first_ = v36;
          buf.__begin_ = v37;
          buf.__end_cap_.__value_ = &v36[v35];
          long long v38 = *(_OWORD *)&v280.__r_.__value_.__l.__data_;
          v37->__r_.__value_.__r.__words[2] = v280.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
          memset(&v280, 0, sizeof(v280));
          buf.__end_ = v37 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v27, &buf);
          uint64_t v39 = *((void *)v25 + 4);
          std::__split_buffer<std::string>::~__split_buffer(&buf);
          int v40 = SHIBYTE(v280.__r_.__value_.__r.__words[2]);
          *((void *)v25 + 4) = v39;
          if (v40 < 0) {
            operator delete(v280.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v31 = *(_OWORD *)&v280.__r_.__value_.__l.__data_;
          *(void *)(v30 + 16) = *((void *)&v280.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v30 = v31;
          *((void *)v25 + 4) = v30 + 24;
        }
        ++v26;
        if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v41 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v41 = v279.__r_.__value_.__l.__size_;
        }
      }
      while (v41 > v26);
      uint64_t v42 = v272;
      if ((unint64_t)v272 < v273)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v25 + 1, 1uLL, memory_order_relaxed);
        void *v272 = v27;
        v42[1] = (std::vector<std::string> *)v25;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v25 + 1, 1uLL, memory_order_relaxed);
        *((_DWORD *)v42 + 4) = v269;
        *((_DWORD *)v42 + 5) = v41;
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25);
        uint64_t v43 = v42 + 3;
        a3 = __p;
        std::string::size_type v22 = v267;
LABEL_70:
        uint64_t v272 = v43;
        std::string::size_type v24 = (std::string::size_type)v265;
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v54 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v56 = &v279;
          if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v56 = (std::string *)v279.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__first_) = 136315138;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v56;
          _os_log_impl(&dword_20CD80000, v54, OS_LOG_TYPE_DEBUG, "Pretokenization Chunk: %s", (uint8_t *)&buf, 0xCu);
        }
        uint64_t v57 = &v279;
        if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v57 = (std::string *)v279.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(7, "Pretokenization Chunk: %s", v55, v57);
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25);
        char v23 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
        long long v14 = v9;
        goto LABEL_79;
      }
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (v272 - v271) + 1;
      if (v44 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v273 - (void)v271) >> 3) > v44) {
        unint64_t v44 = 0x5555555555555556 * ((uint64_t)(v273 - (void)v271) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v273 - (void)v271) >> 3) >= 0x555555555555555) {
        unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v45 = v44;
      }
      if (v45 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v46 = (char *)operator new(24 * v45);
      uint64_t v47 = &v46[8 * (v272 - v271)];
      uint64_t v48 = &v46[24 * v45];
      atomic_fetch_add_explicit((atomic_ullong *volatile)v25 + 1, 1uLL, memory_order_relaxed);
      *(void *)uint64_t v47 = v27;
      *((void *)v47 + 1) = v25;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v25 + 1, 1uLL, memory_order_relaxed);
      *((_DWORD *)v47 + 4) = v269;
      *((_DWORD *)v47 + 5) = v41;
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25);
      uint64_t v50 = v271;
      uint64_t v49 = v272;
      uint64_t v43 = (std::vector<std::string> **)(v47 + 24);
      if (v272 == v271)
      {
        unint64_t v271 = (std::vector<std::string> **)v47;
        uint64_t v272 = (std::vector<std::string> **)(v47 + 24);
        unint64_t v273 = (unint64_t)v48;
      }
      else
      {
        do
        {
          long long v51 = *(_OWORD *)(v49 - 3);
          v49 -= 3;
          *(_OWORD *)(v47 - 24) = v51;
          v47 -= 24;
          unsigned char *v49 = 0;
          v49[1] = 0;
          *((void *)v47 + 2) = v49[2];
        }
        while (v49 != v50);
        uint64_t v52 = v271;
        uint64_t v50 = v272;
        unint64_t v271 = (std::vector<std::string> **)v47;
        uint64_t v272 = v43;
        unint64_t v273 = (unint64_t)v48;
        if (v50 != v52)
        {
          a3 = __p;
          do
          {
            long long v53 = (std::__shared_weak_count *)*(v50 - 2);
            if (v53) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v53);
            }
            v50 -= 3;
          }
          while (v50 != v52);
          uint64_t v50 = v52;
          goto LABEL_68;
        }
      }
      a3 = __p;
LABEL_68:
      std::string::size_type v22 = v267;
      if (v50) {
        operator delete(v50);
      }
      goto LABEL_70;
    }
LABEL_79:
    if (v23 < 0) {
      operator delete(v279.__r_.__value_.__l.__data_);
    }
    std::string::size_type v269 = v22;
  }
  while (v24);
  if (v271 != v272)
  {
    LODWORD(v280.__r_.__value_.__l.__data_) = 1;
    LODWORD(v279.__r_.__value_.__l.__data_) = 0;
    LODWORD(__str.__r_.__value_.__l.__data_) = 0;
    uint64_t v58 = (std::allocator<std::string> *)(v14 + 5);
    unint64_t v59 = v14[5];
    unint64_t v60 = v14[4];
    if (v60 >= v59)
    {
      int v61 = v7;
      unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v60 - *v7) >> 3);
      if (v63 + 1 > 0x666666666666666) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v64 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - *v7) >> 3);
      uint64_t v65 = 2 * v64;
      if (2 * v64 <= v63 + 1) {
        uint64_t v65 = v63 + 1;
      }
      if (v64 >= 0x333333333333333) {
        unint64_t v66 = 0x666666666666666;
      }
      else {
        unint64_t v66 = v65;
      }
      buf.__end_cap_.__value_ = v58;
      if (v66) {
        unint64_t v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v66);
      }
      else {
        uint64_t v67 = 0;
      }
      buf.__first_ = (std::__split_buffer<std::string>::pointer)v66;
      buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v66 + 40 * v63);
      buf.__end_ = buf.__begin_;
      buf.__end_cap_.__value_ = (std::string *)(v66 + 40 * v67);
      std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int,int>((uint64_t)buf.__begin_, (int *)&v280, (int *)&v279, (int *)&__str);
      buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 40);
      std::vector<ByteToken>::__swap_out_circular_buffer(v7, &buf);
      unint64_t v62 = v9[4];
      std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
    }
    else
    {
      std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int,int>(v60, (int *)&v280, (int *)&v279, (int *)&__str);
      int v61 = v7;
      unint64_t v62 = v60 + 40;
      v9[4] = v62;
    }
    v9[4] = v62;
    int v262 = v271;
    std::string v257 = v272;
    if (v271 != v272)
    {
      uint64_t v258 = (uint64_t *)(a2 + 112);
      int v270 = (sqlite3_stmt **)(a2 + 40);
      char v256 = (void *)(a2 + 128);
      while (1)
      {
        uint8x8_t v68 = operator new(0x30uLL);
        v68[1] = 0;
        v68[2] = 0;
        void *v68 = off_26C2197E0;
        v68[3] = 0;
        unint64_t v69 = v68 + 3;
        v68[4] = 0;
        v68[5] = 0;
        int v277 = *((_DWORD *)v262 + 4);
        memset(&v276, 0, sizeof(v276));
        std::string::size_type v70 = (uint64_t *)*v262;
        std::string::basic_string[abi:ne180100]<0>(&buf, &byte_20D5A22AE);
        v268 = v68;
        UTFString::join<std::string,std::string>((uint64_t)&v275, *v70, v70[1], (uint64_t)&buf);
        if (SHIBYTE(buf.__end_) < 0) {
          operator delete(buf.__first_);
        }
        buf.__first_ = &v275;
        uint64_t v71 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::find<std::string const*>(v258, (uint64_t *)&buf);
        if (v71)
        {
          unint64_t v72 = (uint64_t *)v71[3];
          uint64_t v73 = *(uint64_t **)(a2 + 168);
          if (v73 != v72)
          {
            uint64_t v74 = (uint64_t *)v72[1];
            if (v74 != v73)
            {
              uint64_t v75 = *v72;
              *(void *)(v75 + 8) = v74;
              *(void *)v72[1] = v75;
              uint64_t v76 = *v73;
              *(void *)(v76 + 8) = v72;
              *unint64_t v72 = v76;
              uint64_t *v73 = (uint64_t)v72;
              v72[1] = (uint64_t)v73;
            }
          }
          std::string::operator=(&v276, (const std::string *)(v72 + 5));
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          unint64_t v77 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            size_t v79 = &v275;
            if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              size_t v79 = (std::string *)v275.__r_.__value_.__r.__words[0];
            }
            LODWORD(buf.__first_) = 136315138;
            *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v79;
            _os_log_impl(&dword_20CD80000, v77, OS_LOG_TYPE_DEBUG, "Found BBPE Cached entry: %s", (uint8_t *)&buf, 0xCu);
          }
          uint64_t v80 = &v275;
          if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v80 = (std::string *)v275.__r_.__value_.__r.__words[0];
          }
          Diagnostics::log(7, "Found BBPE Cached entry: %s", v78, v80);
          UTFString::split(&v280, &v276, 0x20u, 1);
          uint64_t v81 = *(void *)v280.__r_.__value_.__l.__data_;
          uint64_t v82 = *(void *)(v280.__r_.__value_.__r.__words[0] + 8) - *(void *)v280.__r_.__value_.__l.__data_;
          if (v82)
          {
            LODWORD(v279.__r_.__value_.__l.__data_) = 0;
            if (0xAAAAAAAAAAAAAAABLL * (v82 >> 3) < 2) {
LABEL_417:
            }
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            unint64_t v83 = 0;
            uint64_t v84 = 1;
            while (1)
            {
              LODWORD(v279.__r_.__value_.__l.__data_) = std::stoi((const std::string *)(v81 + 24 * v84), 0, 10);
              long long v85 = (uint64_t *)v280.__r_.__value_.__r.__words[0];
              if (0xAAAAAAAAAAAAAAABLL * ((v85[1] - *v85) >> 3) <= v83) {
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v86 = *(void *)v280.__r_.__value_.__l.__data_ + 24 * v83;
              int v87 = *(char *)(v86 + 23);
              uint64_t v88 = *(void *)v86;
              BOOL v89 = v87 < 0;
              if (v87 >= 0) {
                uint64_t v88 = *(void *)v280.__r_.__value_.__l.__data_ + 24 * v83;
              }
              int v90 = *(unsigned __int8 *)(v86 + 23);
              if (v89) {
                int v90 = *(_DWORD *)(v86 + 8);
              }
              if (v90)
              {
                int v91 = 0;
                int data = 0;
                do
                {
                  ++data;
                  unsigned int v93 = *(unsigned __int8 *)(v88 + v91);
                  unsigned int v94 = (v93 + 62);
                  if (v93 <= 0xEF) {
                    int v95 = 2;
                  }
                  else {
                    int v95 = 3;
                  }
                  if (v93 <= 0xDF) {
                    int v96 = v95;
                  }
                  else {
                    int v96 = v95 + 1;
                  }
                  if (v94 >= 0x33) {
                    int v96 = 1;
                  }
                  v91 += v96;
                }
                while (v91 != v90);
              }
              else
              {
                int data = 0;
              }
              LODWORD(__str.__r_.__value_.__l.__data_) = data;
              unint64_t v98 = v268[4];
              unint64_t v97 = v268[5];
              if (v98 >= v97)
              {
                unint64_t v101 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v98 - *v69) >> 3);
                unint64_t v102 = v101 + 1;
                if (v101 + 1 > 0x666666666666666) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v103 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v97 - *v69) >> 3);
                if (2 * v103 > v102) {
                  unint64_t v102 = 2 * v103;
                }
                uint64_t v104 = (std::string *)(v103 >= 0x333333333333333 ? 0x666666666666666 : v102);
                buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v268 + 5);
                if (v104) {
                  uint64_t v104 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>((unint64_t)v104);
                }
                else {
                  uint64_t v105 = 0;
                }
                buf.__first_ = v104;
                buf.__begin_ = (std::string *)((char *)v104 + 40 * v101);
                buf.__end_ = buf.__begin_;
                buf.__end_cap_.__value_ = (std::string *)((char *)v104 + 40 * v105);
                std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>(buf.__begin_, v86, (int *)&v279, &v277, (int *)&__str);
                buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 40);
                std::vector<ByteToken>::__swap_out_circular_buffer(v69, &buf);
                long long v100 = v268;
                unint64_t v99 = v268[4];
                std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
                int data = (int)__str.__r_.__value_.__l.__data_;
                long long v85 = (uint64_t *)v280.__r_.__value_.__r.__words[0];
              }
              else
              {
                std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>((std::string *)v268[4], v86, (int *)&v279, &v277, (int *)&__str);
                unint64_t v99 = v98 + 40;
                long long v100 = v268;
                v268[4] = v99;
              }
              v100[4] = v99;
              v277 += data;
              v83 += 2;
              uint64_t v81 = *v85;
              unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * ((v85[1] - *v85) >> 3);
              if (v106 <= v83) {
                break;
              }
              LODWORD(v279.__r_.__value_.__l.__data_) = 0;
              uint64_t v84 = v83 | 1;
              if (v106 <= (v83 | 1)) {
                goto LABEL_417;
              }
            }
          }
          if (v280.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v280.__r_.__value_.__l.__size_);
          }
          unint64_t v107 = v268;
          goto LABEL_377;
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        char v259 = v68 + 3;
        uint64_t v108 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          long long v110 = &v275;
          if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v110 = (std::string *)v275.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__first_) = 136315138;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v110;
          _os_log_impl(&dword_20CD80000, v108, OS_LOG_TYPE_DEBUG, "Checked BBPE Cache: %s", (uint8_t *)&buf, 0xCu);
        }
        uint64_t v111 = &v275;
        if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v111 = (std::string *)v275.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(7, "Checked BBPE Cache: %s", v109, v111);
        unint64_t v112 = (char *)operator new(0x30uLL);
        *((void *)v112 + 1) = 0;
        uint64_t v113 = (atomic_ullong *)(v112 + 8);
        *((void *)v112 + 2) = 0;
        *(void *)unint64_t v112 = off_26C2199A0;
        *((void *)v112 + 3) = 0;
        char v266 = (std::vector<std::string> *)(v112 + 24);
        *((void *)v112 + 4) = 0;
        *((void *)v112 + 5) = 0;
        while (1)
        {
          long long v115 = *v262;
          unint64_t v114 = (std::__shared_weak_count *)v262[1];
          if (v114) {
            atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string v261 = v114;
          atomic_fetch_add_explicit(v113, 1uLL, memory_order_relaxed);
          std::vector<std::string>::pointer begin = v115->__begin_;
          std::vector<std::string>::pointer end = (long long *)v115->__end_;
          uint64_t v118 = (char *)end - (char *)v115->__begin_;
          unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * (v118 >> 3);
          if (v119 <= 1)
          {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(v266, begin, end, v119);
            goto LABEL_245;
          }
          if (end == (long long *)begin) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v280, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
            std::vector<std::string>::pointer begin = v115->__begin_;
            std::vector<std::string>::pointer end = (long long *)v115->__end_;
            uint64_t v118 = (char *)end - (char *)v115->__begin_;
            unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * (v118 >> 3);
          }
          else
          {
            long long v120 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
            v280.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v280.__r_.__value_.__l.__data_ = v120;
          }
          if (v118 == 24)
          {
            char v121 = 0;
            __pa = 0;
          }
          else
          {
            if (v119 < 2) {
LABEL_423:
            }
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            uint64_t v122 = 0;
            __pa = 0;
            char v121 = 0;
            float v123 = *(float *)(a2 + 188);
            int v124 = -1;
            uint64_t v125 = 1;
            while (1)
            {
              long long v126 = &begin[v125];
              if (SHIBYTE(begin[v125].__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v279, v126->__r_.__value_.__l.__data_, v126->__r_.__value_.__l.__size_);
              }
              else
              {
                long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
                v279.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v127;
              }
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v280.__r_.__value_.__l.__data_, (const void **)&v279.__r_.__value_.__l.__data_, (uint64_t)&buf);
              uint64_t v128 = BBPEVocab::lookup(v270, (uint64_t)&buf);
              if (SHIBYTE(buf.__end_) < 0) {
                operator delete(buf.__first_);
              }
              if (v128 == -1) {
                float v129 = *(float *)(a2 + 188);
              }
              else {
                float v129 = (float)v128;
              }
              if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v279.__r_.__value_.__l.__data_);
              }
              unint64_t v130 = v122 + 1;
              if (v129 < v123 && v129 != *(float *)(a2 + 188))
              {
                if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v131 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v131 = v280.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&buf, v131 + 1);
                if (SHIBYTE(buf.__end_) >= 0) {
                  p_std::__split_buffer<std::string> buf = (std::__split_buffer<std::string>::pointer)&buf;
                }
                else {
                  p_std::__split_buffer<std::string> buf = buf.__first_;
                }
                if (v131)
                {
                  if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v133 = &v280;
                  }
                  else {
                    uint64_t v133 = (std::string *)v280.__r_.__value_.__r.__words[0];
                  }
                  memmove(p_buf, v133, v131);
                }
                *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v131) = 32;
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v115->__end_ - (char *)v115->__begin_) >> 3) <= v130) {
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v134 = (uint64_t)&v115->__begin_[v125];
                int v135 = *(char *)(v134 + 23);
                if (v135 >= 0) {
                  uint64_t v136 = (const std::string::value_type *)&v115->__begin_[v125];
                }
                else {
                  uint64_t v136 = *(const std::string::value_type **)v134;
                }
                if (v135 >= 0) {
                  std::string::size_type v137 = *(unsigned __int8 *)(v134 + 23);
                }
                else {
                  std::string::size_type v137 = *(void *)(v134 + 8);
                }
                long long v138 = std::string::append((std::string *)&buf, v136, v137);
                std::string::size_type v139 = (void *)v138->__r_.__value_.__r.__words[0];
                char v140 = HIBYTE(v138->__r_.__value_.__r.__words[2]);
                v138->__r_.__value_.__r.__words[0] = 0;
                v138->__r_.__value_.__l.__size_ = 0;
                v138->__r_.__value_.__r.__words[2] = 0;
                if (v121 < 0) {
                  operator delete(__pa);
                }
                if (SHIBYTE(buf.__end_) < 0) {
                  operator delete(buf.__first_);
                }
                __pa = v139;
                char v121 = v140;
                float v123 = v129;
                int v124 = v122;
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v115->__end_ - (char *)v115->__begin_) >> 3) <= v130) {
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              }
              std::string::operator=(&v280, &v115->__begin_[v125]);
              unint64_t v119 = v122 + 2;
              std::vector<std::string>::pointer begin = v115->__begin_;
              std::vector<std::string>::pointer end = (long long *)v115->__end_;
              unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v115->__begin_) >> 3);
              if (v122 + 2 == v141) {
                break;
              }
              ++v122;
              ++v125;
              if (v141 <= v119) {
                goto LABEL_423;
              }
            }
            if (v124 != -1)
            {
              std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v266);
              std::vector<std::string>::pointer v142 = v115->__begin_;
              int v143 = v115->__end_;
              if (v143 != v115->__begin_)
              {
                unint64_t v144 = 0;
                int v145 = 0;
                unint64_t v146 = v124 + 1;
                do
                {
                  if (v145 == v124)
                  {
                    unint64_t v147 = 0xAAAAAAAAAAAAAAABLL * (((char *)v143 - (char *)v142) >> 3);
                    if (v147 <= v144 || v147 <= v146) {
                      std::vector<int>::__throw_out_of_range[abi:ne180100]();
                    }
                    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v142[v144].__r_.__value_.__l.__data_, (const void **)&v142[(int)v146].__r_.__value_.__l.__data_, (uint64_t)&__str);
                    unint64_t v149 = *((void *)v112 + 4);
                    unint64_t v150 = *((void *)v112 + 5);
                    if (v149 >= v150)
                    {
                      unint64_t v155 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - (unint64_t)v266->__begin_) >> 3);
                      unint64_t v156 = v155 + 1;
                      if (v155 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v157 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v150 - (unint64_t)v266->__begin_) >> 3);
                      if (2 * v157 > v156) {
                        unint64_t v156 = 2 * v157;
                      }
                      if (v157 >= 0x555555555555555) {
                        unint64_t v158 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v158 = v156;
                      }
                      buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v112 + 40);
                      if (v158) {
                        std::string::size_type v159 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v112 + 40), v158);
                      }
                      else {
                        std::string::size_type v159 = 0;
                      }
                      int v160 = v159 + v155;
                      buf.__first_ = v159;
                      buf.__begin_ = v160;
                      buf.__end_cap_.__value_ = &v159[v158];
                      long long v161 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                      v160->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v160->__r_.__value_.__l.__data_ = v161;
                      memset(&__str, 0, sizeof(__str));
                      buf.__end_ = v160 + 1;
                      std::vector<std::string>::__swap_out_circular_buffer(v266, &buf);
                      uint64_t v162 = *((void *)v112 + 4);
                      std::__split_buffer<std::string>::~__split_buffer(&buf);
                      int v163 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                      *((void *)v112 + 4) = v162;
                      if (v163 < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                    }
                    else
                    {
                      long long v151 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                      *(void *)(v149 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
                      *(_OWORD *)unint64_t v149 = v151;
                      memset(&__str, 0, sizeof(__str));
                      *((void *)v112 + 4) = v149 + 24;
                    }
                    int v145 = v124 + 1;
                  }
                  else
                  {
                    int64_t v152 = (long long *)&v142[v144];
                    unint64_t v153 = *((void *)v112 + 4);
                    if (v153 >= *((void *)v112 + 5))
                    {
                      uint64_t v154 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v266, v152);
                    }
                    else
                    {
                      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v266, v152);
                      uint64_t v154 = v153 + 24;
                    }
                    *((void *)v112 + 4) = v154;
                  }
                  unint64_t v144 = ++v145;
                  std::vector<std::string>::pointer v142 = v115->__begin_;
                  int v143 = v115->__end_;
                }
                while (0xAAAAAAAAAAAAAAABLL * (((char *)v143 - (char *)v115->__begin_) >> 3) > v145);
              }
              uint64_t v113 = (atomic_ullong *)(v112 + 8);
              goto LABEL_241;
            }
            uint64_t v113 = (atomic_ullong *)(v112 + 8);
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(v266, begin, end, v119);
LABEL_241:
          if (v121 < 0) {
            operator delete(__pa);
          }
          if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v280.__r_.__value_.__l.__data_);
          }
LABEL_245:
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v112);
          if (v261) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v261);
          }
          uint64_t v165 = *((void *)v112 + 3);
          uint64_t v164 = *((void *)v112 + 4);
          unint64_t v166 = 0xAAAAAAAAAAAAAAABLL * ((v164 - v165) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)(*v262)->__end_ - (char *)(*v262)->__begin_) >> 3) == v166) {
            break;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(*v262, *((std::string **)v112 + 3), *((long long **)v112 + 4), v166);
        }
        if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
        {
          *v276.__r_.__value_.__l.__data_ = 0;
          v276.__r_.__value_.__l.__size_ = 0;
          uint64_t v165 = *((void *)v112 + 3);
          uint64_t v164 = *((void *)v112 + 4);
        }
        else
        {
          v276.__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&v276.__r_.__value_.__s + 23) = 0;
        }
        for (uint64_t i = (uint64_t)&v280; v165 != v164; v165 += 24)
        {
          LODWORD(__str.__r_.__value_.__l.__data_) = BBPEVocab::lookup(v270, v165);
          int v168 = *(char *)(v165 + 23);
          unint64_t v169 = *(unsigned __int8 **)v165;
          BOOL v170 = v168 < 0;
          if (v168 >= 0) {
            unint64_t v169 = (unsigned __int8 *)v165;
          }
          int v171 = *(unsigned __int8 *)(v165 + 23);
          if (v170) {
            int v171 = *(_DWORD *)(v165 + 8);
          }
          if (v171)
          {
            int v172 = 0;
            int v173 = 0;
            do
            {
              ++v173;
              unsigned int v174 = v169[v172];
              unsigned int v175 = (v174 + 62);
              if (v174 <= 0xEF) {
                int v176 = 2;
              }
              else {
                int v176 = 3;
              }
              if (v174 <= 0xDF) {
                int v177 = v176;
              }
              else {
                int v177 = v176 + 1;
              }
              if (v175 >= 0x33) {
                int v177 = 1;
              }
              v172 += v177;
            }
            while (v172 != v171);
          }
          else
          {
            int v173 = 0;
          }
          int v274 = v173;
          unint64_t v179 = v268[4];
          unint64_t v178 = v268[5];
          if (v179 >= v178)
          {
            unint64_t v182 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v179 - *v259) >> 3);
            unint64_t v183 = v182 + 1;
            if (v182 + 1 > 0x666666666666666) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v184 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v178 - *v259) >> 3);
            if (2 * v184 > v183) {
              unint64_t v183 = 2 * v184;
            }
            if (v184 >= 0x333333333333333) {
              unint64_t v185 = 0x666666666666666;
            }
            else {
              unint64_t v185 = v183;
            }
            buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v268 + 5);
            if (v185) {
              unint64_t v185 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v185);
            }
            else {
              uint64_t v186 = 0;
            }
            buf.__first_ = (std::__split_buffer<std::string>::pointer)v185;
            buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v185 + 40 * v182);
            buf.__end_ = buf.__begin_;
            buf.__end_cap_.__value_ = (std::string *)(v185 + 40 * v186);
            std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>(buf.__begin_, v165, (int *)&__str, &v277, &v274);
            buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 40);
            std::vector<ByteToken>::__swap_out_circular_buffer(v259, &buf);
            uint64_t v181 = v268;
            unint64_t v180 = v268[4];
            std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
            int v173 = v274;
          }
          else
          {
            std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>((std::string *)v268[4], v165, (int *)&__str, &v277, &v274);
            unint64_t v180 = v179 + 40;
            uint64_t v181 = v268;
            v268[4] = v180;
          }
          v181[4] = v180;
          v277 += v173;
          std::string::size_type v187 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v187 = v276.__r_.__value_.__l.__size_;
          }
          if (v187) {
            std::string::append(&v276, " ");
          }
          if (*(char *)(v165 + 23) >= 0) {
            size_t v188 = *(unsigned __int8 *)(v165 + 23);
          }
          else {
            size_t v188 = *(void *)(v165 + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v280, v188 + 1);
          if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v189 = &v280;
          }
          else {
            uint64_t v189 = (std::string *)v280.__r_.__value_.__r.__words[0];
          }
          if (v188)
          {
            if (*(char *)(v165 + 23) >= 0) {
              std::string::size_type v190 = (unsigned __int8 *)v165;
            }
            else {
              std::string::size_type v190 = *(unsigned __int8 **)v165;
            }
            memmove(v189, v190, v188);
          }
          *(_WORD *)((char *)&v189->__r_.__value_.__l.__data_ + v188) = 32;
          std::to_string(&v279, (int)__str.__r_.__value_.__l.__data_);
          if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v191 = &v279;
          }
          else {
            unint64_t v191 = (std::string *)v279.__r_.__value_.__r.__words[0];
          }
          if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v192 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v192 = v279.__r_.__value_.__l.__size_;
          }
          v193 = std::string::append(&v280, (const std::string::value_type *)v191, v192);
          long long v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
          buf.__end_ = (std::__split_buffer<std::string>::pointer)v193->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__first_ = v194;
          v193->__r_.__value_.__l.__size_ = 0;
          v193->__r_.__value_.__r.__words[2] = 0;
          v193->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(buf.__end_) >= 0) {
            std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)&buf;
          }
          else {
            std::__split_buffer<std::string>::pointer first = buf.__first_;
          }
          if (SHIBYTE(buf.__end_) >= 0) {
            end_int high = HIBYTE(buf.__end_);
          }
          else {
            end_int high = (std::string::size_type)buf.__begin_;
          }
          std::string::append(&v276, (const std::string::value_type *)first, end_high);
          if (SHIBYTE(buf.__end_) < 0) {
            operator delete(buf.__first_);
          }
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v279.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v280.__r_.__value_.__l.__data_);
          }
        }
        unint64_t v107 = v268;
        if (*(void *)(a2 + 104))
        {
          buf.__first_ = (std::__split_buffer<std::string>::pointer)&buf;
          buf.__begin_ = (std::__split_buffer<std::string>::pointer)&buf;
          buf.__end_ = 0;
          v280.__r_.__value_.__r.__words[0] = (std::string::size_type)&v275;
          uint64_t v197 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::find<std::string const*>(v258, (uint64_t *)&v280);
          if (v197)
          {
            char v198 = (std::string *)v197[3];
            if (&buf != (std::__split_buffer<std::string> *)v198)
            {
              v199 = (std::__split_buffer<std::string> *)v198->__r_.__value_.__l.__size_;
              if (v199 != &buf)
              {
                std::string::size_type v200 = v198->__r_.__value_.__r.__words[0];
                *(void *)(v200 + 8) = v199;
                *(void *)v198->__r_.__value_.__l.__size_ = v200;
                std::__split_buffer<std::string>::pointer v201 = buf.__first_;
                buf.__first_->__r_.__value_.__l.__size_ = (std::string::size_type)v198;
                v198->__r_.__value_.__r.__words[0] = (std::string::size_type)v201;
                v198->__r_.__value_.__l.__size_ = (std::string::size_type)&buf;
                --*(void *)(a2 + 176);
                buf.__first_ = v198;
                ++buf.__end_;
              }
            }
            std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::erase(v258, v197);
          }
          else
          {
            unint64_t v202 = *(void *)(a2 + 176);
            if (v202 >= *(void *)(a2 + 104))
            {
              int v203 = *(std::string **)(a2 + 160);
              if (&buf != (std::__split_buffer<std::string> *)v203)
              {
                unint64_t v204 = (std::__split_buffer<std::string> *)v203->__r_.__value_.__l.__size_;
                if (v204 != &buf)
                {
                  std::string::size_type v205 = v203->__r_.__value_.__r.__words[0];
                  *(void *)(v205 + 8) = v204;
                  *(void *)v203->__r_.__value_.__l.__size_ = v205;
                  std::__split_buffer<std::string>::pointer v206 = buf.__first_;
                  buf.__first_->__r_.__value_.__l.__size_ = (std::string::size_type)v203;
                  v203->__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
                  v203->__r_.__value_.__l.__size_ = (std::string::size_type)&buf;
                  *(void *)(a2 + 176) = v202 - 1;
                  buf.__first_ = v203;
                  ++buf.__end_;
                }
              }
              v280.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__begin_->__r_.__value_.__r.__words[2];
              uint64_t v207 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::find<std::string const*>(v258, (uint64_t *)&v280);
              if (v207) {
                std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::erase(v258, v207);
              }
              std::string::operator=((std::string *)&buf.__begin_->__r_.__value_.__r.__words[2], &v275);
            }
            else
            {
              if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v280, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
              }
              else {
                std::string v280 = v275;
              }
              uint64_t v208 = (char *)operator new(0x40uLL);
              std::string::size_type v209 = v280.__r_.__value_.__l.__size_;
              uint64_t v210 = *(std::string::size_type *)((char *)&v280.__r_.__value_.__r.__words[1] + 7);
              *((void *)v208 + 2) = v280.__r_.__value_.__r.__words[0];
              *((void *)v208 + 3) = v209;
              *(void *)(v208 + 31) = v210;
              v208[39] = HIBYTE(v280.__r_.__value_.__r.__words[2]);
              *((void *)v208 + 6) = 0;
              *((void *)v208 + 7) = 0;
              *((void *)v208 + 5) = 0;
              std::__split_buffer<std::string>::pointer v211 = buf.__first_;
              *(void *)uint64_t v208 = buf.__first_;
              *((void *)v208 + 1) = &buf;
              v211->__r_.__value_.__l.__size_ = (std::string::size_type)v208;
              buf.__first_ = (std::__split_buffer<std::string>::pointer)v208;
              ++buf.__end_;
            }
          }
          std::__split_buffer<std::string>::pointer v212 = buf.__begin_;
          std::string::operator=((std::string *)((char *)buf.__begin_ + 40), &v276);
          size_t v213 = (unsigned __int8 *)&v212->__r_.__value_.__s.__data_[16];
          unint64_t v214 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 144, (uint64_t)&v212->__r_.__value_.__r.__words[2]);
          unint64_t v215 = v214;
          unint64_t v216 = *(void *)(a2 + 120);
          if (v216)
          {
            uint8x8_t v217 = (uint8x8_t)vcnt_s8((int8x8_t)v216);
            v217.i16[0] = vaddlv_u8(v217);
            unint64_t v218 = v217.u32[0];
            if (v217.u32[0] > 1uLL)
            {
              uint64_t i = v214;
              if (v214 >= v216) {
                uint64_t i = v214 % v216;
              }
            }
            else
            {
              uint64_t i = (v216 - 1) & v214;
            }
            uint64_t v219 = *(void **)(*v258 + 8 * i);
            if (v219)
            {
              uint64_t v220 = (void *)*v219;
              if (*v219)
              {
                do
                {
                  unint64_t v221 = v220[1];
                  if (v221 == v215)
                  {
                    int v222 = (unsigned __int8 *)v220[2];
                    if (v222 == v213
                      || (std::equal_to<std::string>::operator()[abi:ne180100](a2 + 156, v222, (unsigned __int8 *)&v212->__r_.__value_.__s.__data_[16]) & 1) != 0)
                    {
                      goto LABEL_372;
                    }
                  }
                  else
                  {
                    if (v218 > 1)
                    {
                      if (v221 >= v216) {
                        v221 %= v216;
                      }
                    }
                    else
                    {
                      v221 &= v216 - 1;
                    }
                    if (v221 != i) {
                      break;
                    }
                  }
                  uint64_t v220 = (void *)*v220;
                }
                while (v220);
              }
            }
          }
          size_t v223 = operator new(0x20uLL);
          void *v223 = 0;
          v223[1] = v215;
          v223[2] = v213;
          v223[3] = v212;
          float v224 = (float)(unint64_t)(*(void *)(a2 + 136) + 1);
          float v225 = *(float *)(a2 + 152);
          if (!v216 || (float)(v225 * (float)v216) < v224)
          {
            BOOL v226 = (v216 & (v216 - 1)) != 0;
            if (v216 < 3) {
              BOOL v226 = 1;
            }
            unint64_t v227 = v226 | (2 * v216);
            unint64_t v228 = vcvtps_u32_f32(v224 / v225);
            if (v227 <= v228) {
              size_t v229 = v228;
            }
            else {
              size_t v229 = v227;
            }
            std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::__rehash<true>((uint64_t)v258, v229);
            unint64_t v216 = *(void *)(a2 + 120);
            if ((v216 & (v216 - 1)) != 0)
            {
              if (v215 >= v216) {
                uint64_t i = v215 % v216;
              }
              else {
                uint64_t i = v215;
              }
            }
            else
            {
              uint64_t i = (v216 - 1) & v215;
            }
          }
          uint64_t v230 = *v258;
          unint64_t v231 = *(void **)(*v258 + 8 * i);
          if (v231)
          {
            void *v223 = *v231;
            goto LABEL_370;
          }
          void *v223 = *v256;
          *char v256 = v223;
          *(void *)(v230 + 8 * i) = v256;
          if (*v223)
          {
            unint64_t v232 = *(void *)(*v223 + 8);
            if ((v216 & (v216 - 1)) != 0)
            {
              if (v232 >= v216) {
                v232 %= v216;
              }
            }
            else
            {
              v232 &= v216 - 1;
            }
            unint64_t v231 = (void *)(*v258 + 8 * v232);
LABEL_370:
            void *v231 = v223;
          }
          ++*(void *)(a2 + 136);
LABEL_372:
          uint64_t v233 = *(std::__split_buffer<std::string>::pointer **)(a2 + 168);
          if (v233 != (std::__split_buffer<std::string>::pointer *)v212)
          {
            uint64_t v234 = (std::__split_buffer<std::string>::pointer *)v212->__r_.__value_.__l.__size_;
            if (v234 != v233)
            {
              std::string::size_type v235 = v212->__r_.__value_.__r.__words[0];
              *(void *)(v235 + 8) = v234;
              *(void *)v212->__r_.__value_.__l.__size_ = v235;
              std::string::size_type v236 = (std::string::size_type)*v233;
              *(void *)(v236 + 8) = v212;
              v212->__r_.__value_.__r.__words[0] = v236;
              *uint64_t v233 = v212;
              v212->__r_.__value_.__l.__size_ = (std::string::size_type)v233;
              --buf.__end_;
              ++*(void *)(a2 + 176);
            }
          }
          std::__list_imp<std::pair<std::string,std::string>>::clear((char *)&buf);
          unint64_t v107 = v268;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v112);
LABEL_377:
        if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v275.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v276.__r_.__value_.__l.__data_);
        }
        size_t v238 = (int *)v107[3];
        size_t v237 = (int *)v107[4];
        while (v238 != v237)
        {
          size_t v239 = *v260;
          unint64_t v240 = (*v260)[1];
          unint64_t v241 = (*v260)[2];
          if (v240 >= v241)
          {
            unint64_t v243 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v240 - *v239) >> 3);
            unint64_t v244 = v243 + 1;
            if (v243 + 1 > 0x666666666666666) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v245 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v241 - *v239) >> 3);
            if (2 * v245 > v244) {
              unint64_t v244 = 2 * v245;
            }
            if (v245 >= 0x333333333333333) {
              unint64_t v246 = 0x666666666666666;
            }
            else {
              unint64_t v246 = v244;
            }
            buf.__end_cap_.__value_ = (std::allocator<std::string> *)(*v260 + 2);
            if (v246) {
              unint64_t v246 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v246);
            }
            else {
              uint64_t v247 = 0;
            }
            buf.__first_ = (std::__split_buffer<std::string>::pointer)v246;
            buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v246 + 40 * v243);
            buf.__end_ = buf.__begin_;
            buf.__end_cap_.__value_ = (std::string *)(v246 + 40 * v247);
            std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>(buf.__begin_, (uint64_t)v238, v238 + 6, v238 + 7, v238 + 8);
            buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 40);
            std::vector<ByteToken>::__swap_out_circular_buffer(v239, &buf);
            uint64_t v242 = v239[1];
            std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
          }
          else
          {
            std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>((std::string *)(*v260)[1], (uint64_t)v238, v238 + 6, v238 + 7, v238 + 8);
            uint64_t v242 = v240 + 40;
            v239[1] = v242;
          }
          v239[1] = v242;
          v238 += 10;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v268);
        v262 += 3;
        if (v262 == v257)
        {
          int v61 = *v260;
          break;
        }
      }
    }
    unint64_t v248 = v61[1];
    LODWORD(v280.__r_.__value_.__l.__data_) = *(_DWORD *)(v248 - 8) + *(_DWORD *)(v248 - 12);
    LODWORD(v279.__r_.__value_.__l.__data_) = 2;
    LODWORD(__str.__r_.__value_.__l.__data_) = 0;
    unint64_t v249 = v61[2];
    if (v248 >= v249)
    {
      unint64_t v251 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v248 - *v61) >> 3);
      if (v251 + 1 > 0x666666666666666) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v252 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v249 - *v61) >> 3);
      uint64_t v253 = 2 * v252;
      if (2 * v252 <= v251 + 1) {
        uint64_t v253 = v251 + 1;
      }
      if (v252 >= 0x333333333333333) {
        unint64_t v254 = 0x666666666666666;
      }
      else {
        unint64_t v254 = v253;
      }
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v61 + 2);
      if (v254) {
        unint64_t v254 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v254);
      }
      else {
        uint64_t v255 = 0;
      }
      buf.__first_ = (std::__split_buffer<std::string>::pointer)v254;
      buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v254 + 40 * v251);
      buf.__end_ = buf.__begin_;
      buf.__end_cap_.__value_ = (std::string *)(v254 + 40 * v255);
      std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int &,int>((uint64_t)buf.__begin_, (int *)&v279, (int *)&v280, (int *)&__str);
      buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 40);
      std::vector<ByteToken>::__swap_out_circular_buffer(v61, &buf);
      unint64_t v250 = v61[1];
      std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
    }
    else
    {
      std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int &,int>(v248, (int *)&v279, (int *)&v280, (int *)&__str);
      unint64_t v250 = v248 + 40;
      v61[1] = v248 + 40;
    }
    v61[1] = v250;
  }
  buf.__first_ = (std::__split_buffer<std::string>::pointer)&v271;
  std::vector<ByteChunk>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
}

void sub_20D3B355C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,char *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  std::__list_imp<std::pair<std::string,std::string>>::clear((char *)(v53 - 160));
  std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  a47 = &a30;
  std::vector<ByteChunk>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  if (*(void *)(a22 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(a22 + 8));
  }
  _Unwind_Resume(a1);
}

void std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int,int>(uint64_t a1, int *a2, int *a3, int *a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "BOS");
  int v8 = *a2;
  int v9 = *a3;
  int v10 = *a4;
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v11 = SHIBYTE(v13);
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 28) = v9;
    *(_DWORD *)(a1 + 32) = v10;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v13;
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 28) = v9;
    *(_DWORD *)(a1 + 32) = v10;
  }
}

void sub_20D3B39AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int &,int>(uint64_t a1, int *a2, int *a3, int *a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "EOS");
  int v8 = *a2;
  int v9 = *a3;
  int v10 = *a4;
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    int v11 = SHIBYTE(v13);
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 28) = v9;
    *(_DWORD *)(a1 + 32) = v10;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v13;
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 28) = v9;
    *(_DWORD *)(a1 + 32) = v10;
  }
}

void sub_20D3B3A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Tokenize_FallbackImpl::generate_tokens(Tokenize_FallbackImpl *this)
{
  uint64_t v2 = (void *)((char *)this + 32);
  while (!*((unsigned char *)this + 8))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v30);
    uint64_t v3 = v30;
    if ((void)v30)
    {
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
      uint64_t v4 = v30;
      if ((void *)(v4 + 8) != v5)
      {
        uint64_t v6 = v5[5];
        if ((void *)(v4 + 8) != v7)
        {
          uint64_t v8 = v7[5];
          long long v29 = 0u;
          memset(v28, 0, sizeof(v28));
          std::string::operator=((std::string *)&v28[24], (const std::string *)(v8 + 32));
          if (*(char *)(v8 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v8 + 8), *(void *)(v8 + 16));
          }
          else
          {
            long long v9 = *(_OWORD *)(v8 + 8);
            v26.__r_.__value_.__r.__words[2] = *(void *)(v8 + 24);
            *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v9;
          }
          Tokenize_FallbackImpl::filter_valid_phones(&__str, (uint64_t)this, (uint64_t)&v26);
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v26.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!__str.__r_.__value_.__l.__size_) {
              goto LABEL_20;
            }
            if (__str.__r_.__value_.__l.__size_ == 1)
            {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_19:
              if (p_str->__r_.__value_.__s.__data_[0] == 42) {
                goto LABEL_20;
              }
            }
LABEL_22:
            std::string::operator=((std::string *)v28, &__str);
          }
          else
          {
            if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
            {
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 1)
              {
                p_str = &__str;
                goto LABEL_19;
              }
              goto LABEL_22;
            }
LABEL_20:
            if (*(char *)(v6 + 55) < 0) {
              std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v6 + 32), *(void *)(v6 + 40));
            }
            else {
              std::string v24 = *(std::string *)(v6 + 32);
            }
            uint64_t v11 = *((void *)this + 13);
            if (v11)
            {
              if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v12 = &v24;
              }
              else {
                uint64_t v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
              }
              if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v24.__r_.__value_.__l.__size_;
              }
              UTFString::to_utf16(&v31, (const char *)v12, size);
              UTFTransliterator::transliterate((std::basic_string<char16_t> *)&v32, v11, (const void **)&v31.__r_.__value_.__l.__data_);
              if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v31.__r_.__value_.__l.__data_);
              }
              if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v14 = (const UChar *)&v32;
              }
              else {
                long long v14 = (const UChar *)v32.__r_.__value_.__r.__words[0];
              }
              if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int32_t v15 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
              }
              else {
                int32_t v15 = v32.__r_.__value_.__r.__words[1];
              }
              UTFString::to_utf8(&v25, v14, v15);
              if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v32.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              std::string v25 = v24;
              memset(&v24, 0, sizeof(v24));
            }
            if ((v28[23] & 0x80000000) != 0) {
              operator delete(*(void **)v28);
            }
            *(std::string *)std::string::const_reference v28 = v25;
            *((unsigned char *)&v25.__r_.__value_.__s + 23) = 0;
            v25.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v24.__r_.__value_.__l.__data_);
            }
            if ((v28[23] & 0x80000000) != 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v28, *(std::string::size_type *)&v28[8]);
            }
            else {
              std::string __p = *(std::string *)v28;
            }
            Tokenize_FallbackImpl::filter_valid_phones(&v32, (uint64_t)this, (uint64_t)&__p);
            if ((v28[23] & 0x80000000) != 0) {
              operator delete(*(void **)v28);
            }
            *(std::string *)std::string::const_reference v28 = v32;
            *((unsigned char *)&v32.__r_.__value_.__s + 23) = 0;
            v32.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            MEMORY[0x210558E70](&v28[24], &byte_20D5A22AE);
          }
          v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
          if (!v16) {
            operator new();
          }
          Agglomerate::ItemHolder<TokenFallbackItem>::ItemHolder((uint64_t)&v32, (long long *)v28);
          std::string v17 = (void **)(v16 + 8);
          if (*(char *)(v16 + 31) < 0) {
            operator delete(*v17);
          }
          long long v18 = *(_OWORD *)&v32.__r_.__value_.__r.__words[1];
          *(void *)(v16 + 24) = v33;
          *(_OWORD *)std::string v17 = v18;
          HIBYTE(v33) = 0;
          v32.__r_.__value_.__s.__data_[8] = 0;
          std::string v19 = (void **)(v16 + 32);
          if (*(char *)(v16 + 55) < 0)
          {
            operator delete(*v19);
            int v21 = SHIBYTE(v33);
            uint64_t v22 = v35;
            *(_OWORD *)std::string v19 = v34;
            *(void *)(v16 + 48) = v22;
            HIBYTE(v35) = 0;
            LOBYTE(v34) = 0;
            v32.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C206178;
            if (v21 < 0) {
              operator delete((void *)v32.__r_.__value_.__l.__size_);
            }
          }
          else
          {
            long long v20 = v34;
            *(void *)(v16 + 48) = v35;
            *(_OWORD *)std::string v19 = v20;
          }
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v30);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v29) < 0) {
            operator delete(*(void **)&v28[24]);
          }
          if ((v28[23] & 0x80000000) != 0) {
            operator delete(*(void **)v28);
          }
        }
      }
    }
    else
    {
      *((unsigned char *)this + 8) = 1;
    }
    if (*((void *)&v30 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
    }
    if (!v3) {
      return;
    }
  }
}

void sub_20D3B3F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  std::pair<std::string,std::string>::~pair((uint64_t)&a39);
  std::string::size_type v41 = *(std::__shared_weak_count **)(v39 - 176);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  _Unwind_Resume(a1);
}

void Tokenize_FallbackImpl::filter_valid_phones(std::string *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 112))
  {
    int v5 = *(char *)(a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (const char *)a3;
    }
    else {
      uint64_t v6 = *(const char **)a3;
    }
    if (v5 >= 0) {
      unint64_t v7 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      unint64_t v7 = *(void *)(a3 + 8);
    }
    uint64_t v8 = &v16;
    UTFString::to_utf16(&v16, v6, v7);
    memset(&__p, 0, sizeof(__p));
    std::basic_string<char16_t>::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::basic_string<char16_t>::size_type size = v16.__r_.__value_.__l.__size_;
      uint64_t v8 = (std::basic_string<char16_t> *)v16.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      uint64_t v10 = 2 * size;
      do
      {
        if (MEMORY[0x21055AB40](*(void *)(a2 + 112), (unsigned __int16)v8->__r_.__value_.__s.__data_[0]))std::basic_string<char16_t>::push_back(&__p, v8->__r_.__value_.__s.__data_[0]); {
        uint64_t v8 = (std::basic_string<char16_t> *)((char *)v8 + 2);
        }
        v10 -= 2;
      }
      while (v10);
      int32_t v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::basic_string<char16_t>::size_type v12 = __p.__r_.__value_.__r.__words[0];
      LODWORD(size) = __p.__r_.__value_.__r.__words[1];
    }
    else
    {
      std::basic_string<char16_t>::size_type v12 = 0;
      int32_t v11 = 0;
    }
    if ((v11 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::basic_string<char16_t> *)v12;
    }
    if ((v11 & 0x80u) == 0) {
      int32_t v14 = v11;
    }
    else {
      int32_t v14 = size;
    }
    UTFString::to_utf8(a1, (const UChar *)p_p, v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a1->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
  }
}

void sub_20D3B4140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Agglomerate::ItemHolder<TokenFallbackItem>::ItemHolder(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_26C206178;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v4;
  }
  int v5 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 48) = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_20D3B4214(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void Agglomerate::ItemHolder<TokenFallbackItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206178;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenFallbackItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206178;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::basic_string<char16_t>::push_back(std::basic_string<char16_t> *this, std::basic_string<char16_t>::value_type __c)
{
  int v5 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this->__r_.__value_.__s + 23) != 10)
    {
      std::basic_string<char16_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      *((unsigned char *)&this->__r_.__value_.__s + 23) = (*((unsigned char *)&this->__r_.__value_.__s + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    std::basic_string<char16_t>::size_type v6 = 10;
    goto LABEL_5;
  }
  std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
  std::basic_string<char16_t>::size_type v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (size == v6)
  {
LABEL_5:
    std::basic_string<char16_t>::__grow_by(this, v6, 1uLL, v6, v6, v2, v3);
    std::basic_string<char16_t>::size_type size = v6;
  }
  v5->__r_.__value_.__l.__size_ = size + 1;
  int v5 = (std::basic_string<char16_t> *)v5->__r_.__value_.__r.__words[0];
LABEL_8:
  uint64_t v8 = (std::basic_string<char16_t>::value_type *)((char *)v5 + 2 * size);
  std::basic_string<char16_t>::value_type *v8 = __c;
  v8[1] = 0;
}

void Tokenize_FallbackImpl::~Tokenize_FallbackImpl(UTFTransliterator **this)
{
  *this = (UTFTransliterator *)off_26C203290;
  std::unique_ptr<UTFTransliterator>::reset[abi:ne180100](this + 13, 0);
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t vars8;

  *this = (UTFTransliterator *)off_26C203290;
  std::unique_ptr<UTFTransliterator>::reset[abi:ne180100](this + 13, 0);
  FrontendModule::~FrontendModule((void **)this);
}

UTFTransliterator *std::unique_ptr<UTFTransliterator>::reset[abi:ne180100](UTFTransliterator **a1, UTFTransliterator *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    UTFTransliterator::~UTFTransliterator(result);
    JUMPOUT(0x2105595E0);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [18]>(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return v1;
  }
  uint64_t v3 = a1 + 8;
  do
  {
    int v4 = std::string::compare((const std::string *)(v2 + 32), "tokenize_fallback");
    int v5 = (uint64_t *)(v2 + 8);
    if (v4 >= 0)
    {
      int v5 = (uint64_t *)v2;
      uint64_t v3 = v2;
    }
    uint64_t v2 = *v5;
  }
  while (*v5);
  if (v3 == v1 || std::string::compare((const std::string *)(v3 + 32), "tokenize_fallback") >= 1) {
    return v1;
  }
  return v3;
}

uint64_t std::__shared_ptr_emplace<Tokenize_FallbackImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Tokenize_FallbackImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2172E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Tokenize_FallbackImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2172E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t SoundStormInference::check_outputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "vq_mask_id");
  int parameter_value = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v5 + 8), (const void **)__p, 1024);
  unint64_t v7 = *(float ***)(v4 + 8);
  uint64_t v8 = *(float ***)(v4 + 16);
  if (v7 == v8)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      for (uint64_t i = *v7; i != v7[1]; ++i)
      {
        float v11 = *i;
        if (v11 == (float)parameter_value) {
          uint64_t v9 = (v9 + 1);
        }
        else {
          uint64_t v9 = v9;
        }
      }
      v7 += 3;
    }
    while (v7 != v8);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if ((int)v9 < 1)
  {
    long long v18 = *(uint64_t **)(*a2 + 8);
    for (uint64_t j = *(uint64_t **)(*a2 + 16); v18 != j; v18 += 3)
    {
      for (uint64_t k = *v18; k != v18[1]; k += 4)
        ;
    }
    return 1;
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::basic_string<char16_t>::size_type v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, "vq_mask_id");
      int v14 = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v13 + 8), (const void **)__p, 1024);
      *(_DWORD *)std::__split_buffer<std::string> buf = 67109376;
      int v23 = v9;
      __int16 v24 = 1024;
      int v25 = v14;
      _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_ERROR, "Found %d appearances of invalid value %d", buf, 0xEu);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v15 = *(void *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "vq_mask_id");
    uint64_t v16 = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v15 + 8), (const void **)__p, 1024);
    Diagnostics::log(3, "Found %d appearances of invalid value %d", v17, v9, v16);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
}

void sub_20D3B48B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SoundStormInference::get_outputs(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "vq_tokens");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v3 + 32))(&v11, v3, __p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v11, v5);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v6, (uint64_t)*v5[0], (uint64_t)v5[0][1], 0xAAAAAAAAAAAAAAABLL * (((char *)v5[0][1] - (char *)*v5[0]) >> 3));
  uint64_t v13 = v5;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  uint64_t v4 = (uint64_t *)(*a2 + 8);
  if (v4 != &v6) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)v4, v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
  }
  v5[0] = (void **)&v6;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v5);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_20D3B49EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  a9 = &a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 32);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

uint64_t SoundStormInference::set_dynamic_prompt()
{
  return 0;
}

void SoundStormInference::prepare_inputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = *(int **)(*a2 + 8);
  uint64_t v5 = *(int **)(v3 + 16);
  uint64_t v16 = 0;
  std::string v17 = 0;
  uint64_t v18 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v16, v4, v5, v5 - v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_semantic");
  int v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v16, (uint64_t)v17, (v17 - (unsigned char *)v16) >> 2);
  uint64_t v9 = 0;
  char v10 = 0;
  float v11 = 0;
  std::string v19 = (void **)&v9;
  char v20 = 0;
  uint64_t v9 = (uint64_t *)operator new(0x18uLL);
  char v10 = v9;
  float v11 = v9 + 3;
  char v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)&v11, (uint64_t)&v21, (uint64_t)&v24, v9);
  InferenceEngine::DataTensor::build_from_2d_array<float>(&v9, &v14);
  std::string v19 = (void **)&v9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  uint64_t v6 = *(void (****)(void, uint64_t *))(a1 + 8);
  uint64_t v7 = v14;
  uint64_t v8 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v6)(v6, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v16)
  {
    std::string v17 = v16;
    operator delete(v16);
  }
}

void sub_20D3B4BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,void *__p,uint64_t a24)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SoundStormInference::inference(void **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_INFO, "SoundStorm inference begin.", buf, 2u);
  }
  Diagnostics::log(6, "SoundStorm inference begin.", v7);
  std::chrono::steady_clock::now();
  std::string::basic_string[abi:ne180100]<0>(buf, "disableInferenceRetry");
  int BOOL_for_key = InternalSettings::get_BOOL_for_key((uint64_t *)buf);
  if (v33 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v9 = 0;
  if (BOOL_for_key) {
    int v10 = 1;
  }
  else {
    int v10 = 2;
  }
  while (1)
  {
    float v11 = (char *)operator new(0x48uLL);
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(void *)float v11 = off_26C215E58;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *((_WORD *)v11 + 12) = 257;
    *((void *)v11 + 4) = 0;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    *((_DWORD *)v11 + 14) = 0;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    std::basic_string<char16_t>::size_type v12 = (std::__shared_weak_count *)a2[1];
    uint64_t v30 = *a2;
    std::basic_string<char16_t> v31 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ((void (*)(void **, uint64_t *))(*a1)[1])(a1, &v30);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    (*(void (**)(void *))(*a1[1] + 48))(a1[1]);
    uint64_t v28 = v11 + 24;
    long long v29 = (std::__shared_weak_count *)v11;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
    ((void (*)(void **, char **))(*a1)[4])(a1, &v28);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    (*(void (**)(void *))(*a1[1] + 56))(a1[1]);
    std::string v26 = v11 + 24;
    char v27 = (std::__shared_weak_count *)v11;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
    char v13 = ((uint64_t (*)(void **, char **))(*a1)[5])(a1, &v26);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v13) {
      break;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10 - 1;
      _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_DEFAULT, "Detected error in Soundstorm inference output, remaining try count: %d", buf, 8u);
    }
    Diagnostics::log(5, "Detected error in Soundstorm inference output, remaining try count: %d", v15, (v10 - 1));
    uint64_t v9 = (std::__shared_weak_count *)v11;
    if (v10-- <= 1)
    {
      char v17 = 0;
      goto LABEL_29;
    }
  }
  char v17 = 1;
LABEL_29:
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_INFO, "SoundStorm inference end.", buf, 2u);
  }
  Diagnostics::log(6, "SoundStorm inference end.", v19);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  char v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v11 + 5) - *((void *)v11 + 4)) >> 3);
    *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl(&dword_20CD80000, v20, OS_LOG_TYPE_DEFAULT, "SoundStorm generates acoustic tokens of length %zu", buf, 0xCu);
  }
  Diagnostics::log(5, "SoundStorm generates acoustic tokens of length %zu", v21, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v11 + 5) - *((void *)v11 + 4)) >> 3));
  uint64_t v24 = v11 + 24;
  int v25 = (std::__shared_weak_count *)v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
  }
  buf[0] = v17;
  uint64_t v23 = *(void *)(a3 + 24);
  if (!v23) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, char **, unsigned char *))(*(void *)v23 + 48))(v23, &v24, buf);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
  }
}

void sub_20D3B52F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void SoundStormBaseInference::prepare_inputs(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SoundStormInference::prepare_inputs((uint64_t)a1, v12);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void (***)(void, uint64_t *))a1[1];
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  uint64_t v10 = a1[3];
  float v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v4)(v4, &v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v6 = (void (***)(void, uint64_t *))a1[1];
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  uint64_t v8 = a1[5];
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v6)(v6, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_20D3B545C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

float SoundStormModule::get_current_rate(uint64_t a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  float v3 = *(float *)(*(void *)(a1 + 288) + 4);
  uint64_t v4 = *a2;
  {
    float j = -1.0;
    goto LABEL_27;
  }
  uint64_t v7 = *(void **)(*(void *)v5 + 8);
  uint64_t v6 = *(std::__shared_weak_count **)(*(void *)v5 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(buf, *(void *)(a1 + 168));
  if (!*(void *)buf)
  {
    uint64_t v8 = (void *)*v7;
    goto LABEL_16;
  }
  uint64_t v8 = (void *)*v7;
  if (*(_DWORD *)(*(void *)buf + 60) != 3 || 0x84BDA12F684BDA13 * ((uint64_t)(v7[1] - (void)v8) >> 3) < 2)
  {
LABEL_16:
    float j = -1.0;
    if ((void *)v7[1] != v8)
    {
      std::basic_string<char16_t>::size_type v12 = (_DWORD *)v8[9];
      for (uint64_t i = (_DWORD *)v8[10]; v12 != i; v12 += 14)
      {
        if (*v12 == 1)
        {
          float j = -1.0;
        }
        else if (*v12 == 5)
        {
          float j = (float)(int)v12[1] / 100.0;
        }
      }
    }
    goto LABEL_23;
  }
  uint64_t v9 = (_DWORD *)v8[36];
  uint64_t v10 = (_DWORD *)v8[37];
  for (float j = -1.0; v9 != v10; v9 += 14)
  {
    if (*v9 == 1)
    {
      float j = -1.0;
    }
    else if (*v9 == 5)
    {
      float j = (float)(int)v9[1] / 100.0;
    }
  }
LABEL_23:
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
LABEL_27:
  if (j > 0.0) {
    float v3 = j;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    double v16 = *(float *)(*(void *)(a1 + 288) + 4);
    double v17 = j;
    double v18 = v3;
    *(_DWORD *)std::__split_buffer<std::string> buf = 134218496;
    *(double *)&uint8_t buf[4] = v16;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v17;
    __int16 v21 = 2048;
    double v22 = v3;
    _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_INFO, "Global rate %f, marker rate %f, final rate is set to %f", buf, 0x20u);
  }
  else
  {
    double v17 = j;
    double v18 = v3;
  }
  Diagnostics::log(6, "Global rate %f, marker rate %f, final rate is set to %f", v15, *(float *)(*(void *)(a1 + 288) + 4), *(void *)&v17, *(void *)&v18);
  return v3;
}

void sub_20D3B5738(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SoundStormModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)v4 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_DEFAULT, "SoundStorm module start.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "SoundStorm module start.", v8);
  std::mutex::lock((std::mutex *)(a1 + 328));
  *(unsigned char *)(a1 + 320) = 1;
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&buf, *(void *)(a1 + 168));
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v15 = *a2;
  double v16 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v10 = (*(float (**)(uint64_t, uint64_t *))(*(void *)a1 + 96))(a1, &v15);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  float v17 = v10;
  float v11 = *(void (****)(void, uint64_t *, void *))(a1 + 272);
  uint64_t v13 = v6;
  uint64_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v21 = 0;
  std::basic_string<char16_t>::size_type v12 = operator new(0x28uLL);
  *std::basic_string<char16_t>::size_type v12 = &off_26C21FB58;
  v12[1] = a1;
  uint64_t v12[2] = &buf;
  v12[3] = a2;
  v12[4] = &v17;
  __int16 v21 = v12;
  (**v11)(v11, &v13, v20);
  std::__function::__value_func<int ()(std::shared_ptr<AcousticFeature>,BOOL)>::~__value_func[abi:ne180100](v20);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::mutex::unlock((std::mutex *)(a1 + 328));
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D3B59A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<int ()(std::shared_ptr<AcousticFeature>,BOOL)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  std::mutex::unlock(v11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<int ()(std::shared_ptr<AcousticFeature>,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char **std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::target_type()
{
}

uint64_t std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::operator()(uint64_t a1, unint64_t *a2, unsigned char *a3)
{
  float v3 = (std::__shared_weak_count *)a2[1];
  unint64_t v19 = *a2;
  char v20 = v3;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  if (v4[160])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEFAULT, "SoundStorm inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "SoundStorm inference cancelled.", v6, v19, v20);
    if (v3) {
LABEL_7:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    if (!*a3)
    {
      uint64_t v9 = **(uint64_t ****)(a1 + 16);
      if (v9)
      {
        *(_DWORD *)uint64_t buf = 2;
        Observable::emit(v9, (char *)TTSSynthesizerEvent::SynthesisQualityIssue, buf);
      }
    }
    float v10 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v10 + 8) = 0u;
    *(void *)float v10 = off_26C215330;
    *((_OWORD *)v10 + 2) = 0u;
    *((void *)v10 + 3) = v10 + 32;
    uint64_t v11 = (uint64_t)(v10 + 24);
    std::basic_string<char16_t>::size_type v12 = *(uint64_t **)(a1 + 24);
    uint64_t v13 = *v12;
    {
      uint64_t v15 = *(std::__shared_weak_count **)(*(void *)v14 + 16);
      *(void *)uint64_t buf = *(void *)(*(void *)v14 + 8);
      uint64_t v22 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Agglomerate::set<std::shared_ptr<FrontendFeature>>(v11, (unint64_t *)buf);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    float v16 = **(float **)(a1 + 32);
    if (v16 != 1.0)
    {
      float v17 = (std::__shared_weak_count *)operator new(0x30uLL);
      v17->__shared_owners_ = 0;
      v17->__shared_weak_owners_ = 0;
      v17->__vftable = (std::__shared_weak_count_vtbl *)off_26C219690;
      v17[1].__shared_owners_ = 0;
      v17[1].__shared_weak_owners_ = 0;
      v17[1].__vftable = 0;
      *(void *)uint64_t buf = v17 + 1;
      uint64_t v22 = v17;
      double v18 = (float *)operator new(8uLL);
      *double v18 = 0.0;
      v18[1] = v16;
      v17[1].__shared_owners_ = (uint64_t)(v18 + 2);
      v17[1].__shared_weak_owners_ = (uint64_t)(v18 + 2);
      v17[1].__vftable = (std::__shared_weak_count_vtbl *)v18;
      Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v11, (unint64_t *)buf);
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    Agglomerate::set<std::shared_ptr<AcousticFeature>>(v11, &v19);
    *(void *)uint64_t buf = v10 + 24;
    uint64_t v22 = (std::__shared_weak_count *)v10;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(unsigned char *, uint8_t *))(*(void *)v4 + 72))(v4, buf);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
    if (v3) {
      goto LABEL_7;
    }
  }
  return 1;
}

void sub_20D3B5D6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void sub_20D3B5DC8()
{
  if (!v0) {
    JUMPOUT(0x20D3B5DC0);
  }
  JUMPOUT(0x20D3B5DB8);
}

__n128 std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C21FB58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_26C21FB58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::~__func()
{
}

void SoundStormModule::clean_up(SoundStormModule *this)
{
  (*(void (**)(void))(**((void **)this + 34) + 16))(*((void *)this + 34));
  Module::clean_up(this);
}

void SoundStormModule::prepare(SoundStormModule *this)
{
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
  }
  Diagnostics::log(5, "Prepare inference.", v3);
  uint64_t v4 = (char *)operator new(0xB0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = off_26C216210;
  *((void *)v4 + 3) = 257;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *(_DWORD *)uint64_t buf = 0;
  std::vector<int>::resize((std::vector<int> *)(v4 + 32), 0x64uLL, (std::vector<int>::const_reference)buf);
  std::string::basic_string[abi:ne180100]<0>(__p, "n_embd");
  unsigned int v11 = 512;
  int v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)this + 304, (const void **)__p, &v11);
  int v10 = 0;
  std::vector<float>::vector(buf, v5, &v10);
  std::vector<std::vector<float>>::resize((uint64_t *)v4 + 16, 0x64uLL, (uint64_t)buf);
  if (*(void *)buf)
  {
    uint64_t v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "n_embd");
  unsigned int v11 = 512;
  int v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)this + 304, (const void **)__p, &v11);
  int v10 = 0;
  std::vector<float>::vector(buf, v6, &v10);
  std::vector<std::vector<float>>::resize((uint64_t *)v4 + 19, 1uLL, (uint64_t)buf);
  if (*(void *)buf)
  {
    uint64_t v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *((void *)this + 34);
  uint64_t v8 = v4 + 24;
  uint64_t v9 = (std::__shared_weak_count *)v4;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, char **))(*(void *)v7 + 8))(v7, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
}

void sub_20D3B6108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SemanticFeature>::__on_zero_shared(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 152);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 104);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  float v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<SemanticFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SemanticFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void SoundStormModule::~SoundStormModule(SoundStormModule *this)
{
  SoundStormModule::~SoundStormModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = off_26C201BD8;
  std::mutex::~mutex((std::mutex *)((char *)this + 328));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 39, *((unsigned __int8 *)this + 304));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  float v3 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  Module::~Module(this);
}

void SoundStormStreamingModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)v4 + 8);
  int v5 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_DEFAULT, "SoundStorm streaming module start.", buf, 2u);
  }
  Diagnostics::log(5, "SoundStorm streaming module start.", v8);
  std::mutex::lock((std::mutex *)(a1 + 400));
  *(unsigned char *)(a1 + 392) = 1;
  int v9 = *(_DWORD *)(a1 + 464);
  int v45 = 1065353216;
  int v46 = v9;
  int v10 = (std::__shared_weak_count *)operator new(0x30uLL);
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_26C219690;
  v10[1].__vftable = 0;
  unsigned int v11 = (void **)&v10[1].__vftable;
  v10[1].__shared_owners_ = 0;
  v10[1].__shared_weak_owners_ = 0;
  *(void *)uint64_t buf = v10 + 1;
  unint64_t v44 = v10;
  uint64_t v12 = *a2;
  {
    uint64_t v15 = *(uint64_t **)(*(void *)v13 + 8);
    uint64_t v14 = *(std::__shared_weak_count **)(*(void *)v13 + 16);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)uint64_t buf = v15;
    unint64_t v44 = v14;
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    if (*v15 != v17)
    {
      while (*(float *)(v16 + 4) == 1.0)
      {
        v16 += 8;
        if (v16 == v17) {
          goto LABEL_43;
        }
      }
      int v45 = *(_DWORD *)(v16 + 4);
      if (v9 <= 5) {
        int v24 = 5;
      }
      else {
        int v24 = v9;
      }
      int v46 = v24;
    }
  }
  else
  {
    double v18 = (std::__shared_weak_count *)a2[1];
    uint64_t v41 = v12;
    uint64_t v42 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v19 = (*(float (**)(uint64_t, uint64_t *))(*(void *)a1 + 96))(a1, &v41);
    int v45 = LODWORD(v19);
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    if (v19 != 1.0)
    {
      if (v9 <= 5) {
        int v20 = 5;
      }
      else {
        int v20 = v9;
      }
      int v46 = v20;
    }
    shared_owners = (float *)v10[1].__shared_owners_;
    unint64_t shared_weak_owners = v10[1].__shared_weak_owners_;
    if ((unint64_t)shared_owners >= shared_weak_owners)
    {
      int v25 = (float *)*v11;
      uint64_t v26 = ((char *)shared_owners - (unsigned char *)*v11) >> 3;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = shared_weak_owners - (void)v25;
      if (v28 >> 2 > v27) {
        unint64_t v27 = v28 >> 2;
      }
      BOOL v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v29) {
        unint64_t v30 = v27;
      }
      if (v30)
      {
        unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v30);
        int v25 = (float *)v10[1].__vftable;
        shared_owners = (float *)v10[1].__shared_owners_;
      }
      else
      {
        uint64_t v31 = 0;
      }
      unint64_t v32 = v30 + 8 * v26;
      uint64_t v33 = v30 + 8 * v31;
      *(_DWORD *)unint64_t v32 = 0;
      *(float *)(v32 + 4) = v19;
      uint64_t v23 = v32 + 8;
      if (shared_owners != v25)
      {
        do
        {
          uint64_t v34 = *((void *)shared_owners - 1);
          shared_owners -= 2;
          *(void *)(v32 - 8) = v34;
          v32 -= 8;
        }
        while (shared_owners != v25);
        int v25 = (float *)*v11;
      }
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)v32;
      v10[1].__shared_owners_ = v23;
      v10[1].__shared_weak_owners_ = v33;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      float *shared_owners = 0.0;
      shared_owners[1] = v19;
      uint64_t v23 = (uint64_t)(shared_owners + 2);
    }
    v10[1].__shared_owners_ = v23;
  }
LABEL_43:
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v39, *(void *)(a1 + 168));
  uint64_t v35 = *(void (****)(void, uint64_t *, void *))(a1 + 272);
  uint64_t v37 = v6;
  long long v38 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = 0;
  uint64_t v36 = operator new(0x38uLL);
  void *v36 = &off_26C21FBD8;
  v36[1] = a1;
  unint64_t v36[2] = &v39;
  v36[3] = &v46;
  v36[4] = a2;
  v36[5] = &v45;
  v36[6] = buf;
  uint64_t v48 = v36;
  (**v35)(v35, &v37, v47);
  std::__function::__value_func<int ()(std::shared_ptr<AcousticFeature>,BOOL)>::~__value_func[abi:ne180100](v47);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  std::mutex::unlock((std::mutex *)(a1 + 400));
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D3B675C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::mutex::unlock(v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void sub_20D3B67E8()
{
  if (!v0) {
    JUMPOUT(0x20D3B67E0);
  }
  JUMPOUT(0x20D3B67D8);
}

char **std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::target_type()
{
}

uint64_t std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::operator()(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  float v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v55 = v3;
  if (*(unsigned char *)(*(void *)(a1 + 8) + 160))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEFAULT, "SoundStorm streaming inference cancelled.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "SoundStorm streaming inference cancelled.", v6);
  }
  else
  {
    uint64_t v56 = *(void *)(a1 + 8);
    if (!*a3)
    {
      int v9 = **(uint64_t ****)(a1 + 16);
      if (v9)
      {
        LODWORD(buf) = 2;
        Observable::emit(v9, (char *)TTSSynthesizerEvent::SynthesisQualityIssue, &buf);
      }
    }
    if (*(void *)(v4 + 16) != *(void *)(v4 + 8))
    {
      unint64_t v10 = 0;
      unint64_t v11 = 0;
      uint64_t v57 = v4;
      do
      {
        uint64_t v12 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v12 + 8) = 0u;
        *(void *)uint64_t v12 = off_26C215330;
        *((_OWORD *)v12 + 2) = 0u;
        *((void *)v12 + 3) = v12 + 32;
        uint64_t v13 = (uint64_t)(v12 + 24);
        uint64_t v14 = *(uint64_t **)(a1 + 32);
        uint64_t v15 = *v14;
        {
          uint64_t v17 = *(std::__shared_weak_count **)(*(void *)v16 + 16);
          *(void *)&long long buf = *(void *)(*(void *)v16 + 8);
          *((void *)&buf + 1) = v17;
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Agglomerate::set<std::shared_ptr<FrontendFeature>>(v13, (unint64_t *)&buf);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
        }
        if (**(float **)(a1 + 40) != 1.0)
        {
          double v18 = *(uint64_t ***)(a1 + 48);
          unint64_t v19 = (*v18)[1] - **v18;
          if (v19 == 8)
          {
            Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v13, *(unint64_t **)(a1 + 48));
          }
          else if (v19 >= 9)
          {
            int v20 = (std::__shared_weak_count *)operator new(0x30uLL);
            v20->__shared_owners_ = 0;
            v20->__shared_weak_owners_ = 0;
            v20->__vftable = (std::__shared_weak_count_vtbl *)off_26C219690;
            v20[1].__vftable = 0;
            v20[1].__shared_owners_ = 0;
            v20[1].__shared_weak_owners_ = 0;
            *(void *)&long long buf = v20 + 1;
            *((void *)&buf + 1) = v20;
            uint64_t v21 = **v18;
            int v22 = v11 + **(_DWORD **)(a1 + 24);
            unint64_t v23 = (unint64_t)((*v18)[1] - v21) >> 3;
            if (v22 + 1 < (int)v23) {
              LODWORD(v23) = v22 + 1;
            }
            uint64_t v24 = v21 + 8 * (int)v23;
            unint64_t v25 = (int)v23 - v10;
            if ((int)v23 == v10)
            {
              shared_owners = 0;
              p_shared_owners = &v20[1].__shared_owners_;
              size_t v28 = 8 * (int)v23 - 8 * v10;
            }
            else
            {
              if (v25 >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              BOOL v29 = (const void *)(v21 + 8 * v10);
              std::vector<RateMarker>::__vallocate[abi:ne180100](&v20[1].__vftable, v25);
              p_shared_owners = &v20[1].__shared_owners_;
              shared_owners = (char *)v20[1].__shared_owners_;
              unint64_t v30 = v29;
              size_t v28 = v24 - (void)v29;
              memmove(shared_owners, v30, v28);
            }
            uint64_t *p_shared_owners = (uint64_t)&shared_owners[v28];
            Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v13, (unint64_t *)&buf);
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
            uint64_t v4 = v57;
          }
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        uint64_t v67 = 0;
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v67, *(void *)(v4 + 8), *(void *)(v4 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3));
        uint64_t v31 = (char *)operator new(0x48uLL);
        *((void *)v31 + 1) = 0;
        *((void *)v31 + 2) = 0;
        *(void *)uint64_t v31 = off_26C215E58;
        *(_OWORD *)(v31 + 40) = 0u;
        *(_OWORD *)(v31 + 56) = 0u;
        *(_OWORD *)(v31 + 24) = 0u;
        *((void *)v31 + 4) = 0;
        unint64_t v32 = (uint64_t *)(v31 + 32);
        *((_WORD *)v31 + 12) = 257;
        *((void *)v31 + 5) = 0;
        *((void *)v31 + 6) = 0;
        *((_DWORD *)v31 + 14) = 0;
        v66[0] = (unint64_t)(v31 + 24);
        v66[1] = (unint64_t)v31;
        int v33 = -1431655765 * ((unint64_t)(v68 - v67) >> 3);
        if (**(_DWORD **)(a1 + 24) + (int)v11 + 1 < v33) {
          int v33 = **(_DWORD **)(a1 + 24) + v11 + 1;
        }
        uint64_t v73 = 0;
        long long buf = 0uLL;
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(&buf, v67 + 24 * v10, v67 + 24 * v33, v33 - v10);
        std::vector<std::vector<int>>::__vdeallocate(v32);
        *((_OWORD *)v31 + 2) = buf;
        *((void *)v31 + 6) = v73;
        uint64_t v73 = 0;
        long long buf = 0uLL;
        v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
        *((_DWORD *)v31 + 14) = v11;
        int v34 = **(_DWORD **)(a1 + 24);
        v31[60] = (int)v11 < v34;
        v31[61] = 0xAAAAAAAAAAAAAAABLL * ((v68 - v67) >> 3) <= v34 + (int)v11 + 1;
        *((_DWORD *)v31 + 16) = -1431655765 * ((*((void *)v31 + 5) - *((void *)v31 + 4)) >> 3);
        Agglomerate::set<std::shared_ptr<AcousticFeature>>(v13, v66);
        unint64_t v64 = v12 + 24;
        uint64_t v65 = (std::__shared_weak_count *)v12;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 1, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, char **))(*(void *)v56 + 72))(v56, &v64);
        uint64_t v4 = v57;
        if (v65) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v65);
        }
        if (v11 == **(_DWORD **)(a1 + 24)
                          * (0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(void *)(v57 + 16) - *(void *)(v57 + 8)) >> 3)
                                         / (2
                                          * **(int **)(a1 + 24))))
        {
          int v61 = 0;
          unint64_t v62 = 0;
          unint64_t v63 = 0;
          if (*((int *)v31 + 16) >= 1)
          {
            uint64_t v35 = 0;
            uint64_t v36 = 0;
            do
            {
              int v37 = (int)**(float **)(*v32 + 24 * v36);
              if (v35 >= v63)
              {
                uint64_t v39 = (int *)v61;
                uint64_t v40 = ((char *)v35 - (unsigned char *)v61) >> 2;
                unint64_t v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v42 = (char *)v63 - (unsigned char *)v61;
                if (((char *)v63 - (unsigned char *)v61) >> 1 > v41) {
                  unint64_t v41 = v42 >> 1;
                }
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v43 = v41;
                }
                if (v43)
                {
                  unint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v63, v43);
                  uint64_t v39 = (int *)v61;
                  uint64_t v35 = v62;
                }
                else
                {
                  unint64_t v44 = 0;
                }
                int v45 = (int *)&v44[4 * v40];
                *int v45 = v37;
                long long v38 = v45 + 1;
                while (v35 != v39)
                {
                  int v46 = *--v35;
                  *--int v45 = v46;
                }
                int v61 = v45;
                unint64_t v62 = v38;
                unint64_t v63 = (int *)&v44[4 * v43];
                if (v39) {
                  operator delete(v39);
                }
              }
              else
              {
                int *v35 = v37;
                long long v38 = v35 + 1;
              }
              unint64_t v62 = v38;
              ++v36;
              uint64_t v35 = v38;
            }
            while (v36 < *((int *)v31 + 16));
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v4 = v57;
          uint64_t v47 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, " ");
            uint64_t v48 = (int *)v61;
            uint64_t v49 = v62;
            uint64_t v73 = 0;
            long long buf = 0uLL;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v71, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else {
              std::string v71 = __p;
            }
            std::accumulate[abi:ne180100]<std::__wrap_iter<int const*>,std::string,std::string UTFString::join<std::string,int>(std::vector<int> const&,std::string const&)::{lambda(std::string,int)#1}>((uint64_t)v58, v48, v49, (uint64_t)&buf, (const void **)&v71.__r_.__value_.__l.__data_);
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v71.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v73) < 0) {
              operator delete((void *)buf);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            Censor::global_plaintext(&v60, (uint64_t)v58);
            uint64_t v50 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v50 = (std::string *)v60.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t v74 = 67109378;
            int v75 = v11;
            __int16 v76 = 2080;
            unint64_t v77 = v50;
            _os_log_impl(&dword_20CD80000, v47, OS_LOG_TYPE_DEFAULT, "VQ0 tokens at idx %d: %s", v74, 0x12u);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v60.__r_.__value_.__l.__data_);
            }
            if (v59 < 0) {
              operator delete(v58[0]);
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, " ");
          long long v51 = (int *)v61;
          uint64_t v52 = v62;
          uint64_t v73 = 0;
          long long buf = 0uLL;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v71, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v71 = __p;
          }
          std::accumulate[abi:ne180100]<std::__wrap_iter<int const*>,std::string,std::string UTFString::join<std::string,int>(std::vector<int> const&,std::string const&)::{lambda(std::string,int)#1}>((uint64_t)v58, v51, v52, (uint64_t)&buf, (const void **)&v71.__r_.__value_.__l.__data_);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v71.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v73) < 0) {
            operator delete((void *)buf);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          Censor::global_plaintext(&v60, (uint64_t)v58);
          uint64_t v54 = &v60;
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v54 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          Diagnostics::log(5, "VQ0 tokens at idx %d: %s", v53, v11, v54);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          if (v59 < 0) {
            operator delete(v58[0]);
          }
          if (v61)
          {
            unint64_t v62 = (int *)v61;
            operator delete(v61);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v31);
        *(void *)&long long buf = &v67;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12);
        unint64_t v10 = **(int **)(a1 + 24) + (uint64_t)(int)v11;
        unint64_t v11 = v10;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3) > v10);
    }
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  return 1;
}

void sub_20D3B70F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::accumulate[abi:ne180100]<std::__wrap_iter<int const*>,std::string,std::string UTFString::join<std::string,int>(std::vector<int> const&,std::string const&)::{lambda(std::string,int)#1}>(uint64_t a1, int *a2, int *a3, uint64_t a4, const void **a5)
{
  if (a2 != a3)
  {
    int v9 = a2;
    while (1)
    {
      if (*(char *)(a4 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
      }
      else {
        std::string __p = *(std::string *)a4;
      }
      std::to_string(&v19, *v9);
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size) {
        break;
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
LABEL_20:
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        goto LABEL_22;
      }
      std::string v17 = v19;
LABEL_22:
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v17;
      *((unsigned char *)&v17.__r_.__value_.__s + 23) = 0;
      v17.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (++v9 == a3) {
        goto LABEL_27;
      }
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p.__r_.__value_.__l.__data_, a5, (uint64_t)&v18);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v11 = &v19;
    }
    else {
      unint64_t v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v12 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v12 = v19.__r_.__value_.__l.__size_;
    }
    uint64_t v13 = std::string::append(&v18, (const std::string::value_type *)v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    goto LABEL_20;
  }
LABEL_27:
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)a1 = *(_OWORD *)a4;
  *(void *)(a1 + 16) = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  return result;
}

void sub_20D3B73B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (*(char *)(v25 - 49) < 0) {
    operator delete(*(void **)(v25 - 72));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C21FBD8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &off_26C21FBD8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

void std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>,BOOL)>::~__func()
{
}

void SoundStormStreamingModule::~SoundStormStreamingModule(SoundStormStreamingModule *this)
{
  *(void *)this = off_26C1ED920;
  std::mutex::~mutex((std::mutex *)((char *)this + 400));
  SoundStormModule::~SoundStormModule(this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t vars8;

  *(void *)this = off_26C1ED920;
  std::mutex::~mutex((std::mutex *)((char *)this + 400));
  SoundStormModule::~SoundStormModule(this);
}

uint64_t SoundStormModule::SoundStormModule(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 8);
  v168[0] = *(void *)a3;
  v168[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Module::Module(a1, a2, v168);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)a1 = off_26C201BD8;
  *(void *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(unsigned char *)(a1 + 304) = 0;
  *(void *)(a1 + 328) = 850045863;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = 0;
  uint64_t v156 = a1;
  SharedObjectPool::get<VoiceConfig>(&v166, *(long long ***)a3);
  uint64_t v7 = v166;
  uint64_t v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v4, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v8, &v180);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v7 + 40))(v164, v7, 1936946287, &v180, 0);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v180.__r_.__value_.__l.__data_);
  }
  InferenceEngine::Utils::read_json_from_file((char *)v164, (uint64_t)v162);
  std::string::basic_string[abi:ne180100]<0>(&v180, "model_parameters");
  LOBYTE(v176) = 0;
  *((void *)&v176 + 1) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v162, (const void **)&v180.__r_.__value_.__l.__data_, (unsigned __int8 *)&v176, (uint64_t)v160);
  int v9 = *(unsigned __int8 *)(a1 + 304);
  *(unsigned char *)(a1 + 304) = v160[0];
  v160[0] = v9;
  unint64_t v10 = *(uint64_t **)(a1 + 312);
  *(void *)(a1 + 312) = v161;
  long long v161 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v161, v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v176 + 1, v176);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v180.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v180, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", v4, (const void **)&v180.__r_.__value_.__l.__data_, &v159);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v180.__r_.__value_.__l.__data_);
  }
  unint64_t v11 = (const char *)(a1 + 184);
  uint64_t v13 = *(long long ***)a3;
  std::string::size_type v12 = *(std::__shared_weak_count **)(a3 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v14 = (std::__shared_weak_count *)v13[3];
  if (!v14 || (uint64_t v15 = std::__shared_weak_count::lock(v14)) == 0)
  {
    unint64_t v155 = 0;
    uint64_t v21 = 0;
    if (!v12) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v16 = v15;
  std::string v17 = v13[2];
  if (v17
    && (uint64_t v18 = (uint64_t)v17 + 8,
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)v17 + 1, (unsigned __int8 *)(a1 + 184))))
  {
    v180.__r_.__value_.__r.__words[0] = a1 + 184;
    std::string v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, (unsigned __int8 *)(a1 + 184), (long long **)&v180);
    uint64_t v21 = (void *)*((void *)v19 + 5);
    uint64_t v20 = *((void *)v19 + 6);
    if (v20)
    {
      unint64_t v155 = (std::__shared_weak_count *)*((void *)v19 + 6);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      unint64_t v155 = 0;
    }
  }
  else
  {
    unint64_t v155 = 0;
    uint64_t v21 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (v12) {
LABEL_20:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_21:
  if (!v21)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 207) < 0) {
      unint64_t v11 = *(const char **)v11;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v180, "Persitent module '%s' is null", v11);
    MEMORY[0x210558D40](exception, &v180);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v22 = &v159;
    switch(*((unsigned char *)&v159.__r_.__value_.__s + 23))
    {
      case 3:
        if (LOWORD(v159.__r_.__value_.__l.__data_) == 12912 && v159.__r_.__value_.__s.__data_[2] == 97) {
          goto LABEL_36;
        }
        break;
      case 6:
        if (LODWORD(v159.__r_.__value_.__l.__data_) == 1836020336 && WORD2(v159.__r_.__value_.__r.__words[0]) == 29808) {
          goto LABEL_136;
        }
        break;
      case 7:
        if (LODWORD(v159.__r_.__value_.__l.__data_) == 1634100580
          && *(_DWORD *)((char *)v159.__r_.__value_.__r.__words + 3) == 1953264993)
        {
          goto LABEL_86;
        }
        break;
      case 0xA:
        goto LABEL_207;
      default:
        goto LABEL_275;
    }
    goto LABEL_275;
  }
  switch(v159.__r_.__value_.__l.__size_)
  {
    case 3uLL:
      if (*(_WORD *)v159.__r_.__value_.__l.__data_ != 12912 || *(unsigned char *)(v159.__r_.__value_.__r.__words[0] + 2) != 97) {
        goto LABEL_275;
      }
LABEL_36:
      uint64_t v25 = v21[37];
      uint64_t v26 = (std::__shared_weak_count *)v21[38];
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v28 = v21[39];
      unint64_t v27 = (std::__shared_weak_count *)v21[40];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v29 = v27;
      unint64_t v30 = operator new(0x40uLL);
      uint64_t v31 = v30;
      v30[1] = 0;
      v30[2] = 0;
      void *v30 = off_26C217550;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v32 = v30 + 3;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v173.__r_.__value_.__r.__words[0] = v28;
      v173.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
      if (v27)
      {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        SoundStormP2ABaseInference::SoundStormP2ABaseInference(v30 + 3, v25, v26, (uint64_t *)&v173);
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        if (!v26) {
          goto LABEL_47;
        }
      }
      else
      {
        SoundStormP2ABaseInference::SoundStormP2ABaseInference(v30 + 3, v25, v26, (uint64_t *)&v173);
        if (!v26)
        {
LABEL_47:
          v31[6] = 0;
          int v33 = (InferenceEngine::DataTensor **)(v31 + 6);
          v31[3] = off_26C203808;
          v31[7] = 0;
          uint64_t v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v4, "prompt_vq");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v34, &v175);
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v25 + 40))(&v176, v25, 1936946287, &v175, 0);
          InferenceEngine::DataUtils::read_vector_from_file<float>(&v180);
          if (SHIBYTE(v177) < 0) {
            operator delete((void *)v176);
          }
          if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v175.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v176, "prompt_target");
          InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v180, &v175);
          long long v35 = *(_OWORD *)&v175.__r_.__value_.__l.__data_;
          *(_OWORD *)&v175.__r_.__value_.__l.__data_ = 0uLL;
          uint64_t v36 = (std::__shared_weak_count *)v31[7];
          *((_OWORD *)v31 + 3) = v35;
          if (v36)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v36);
            if (v175.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v175.__r_.__value_.__l.__size_);
            }
          }
          if (SHIBYTE(v177) < 0) {
            operator delete((void *)v176);
          }
          InferenceEngine::DataTensor::get_shape(*v33, 0, (char **)&v176);
          unint64_t v37 = *(void *)v176;
          uint64_t v38 = v31[4];
          std::string::basic_string[abi:ne180100]<0>(&v175, "num_vqs");
          int parameter_value = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v38 + 8), (const void **)&v175.__r_.__value_.__l.__data_, 8);
          if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v175.__r_.__value_.__l.__data_);
          }
          if ((void)v176)
          {
            *((void *)&v176 + 1) = v176;
            operator delete((void *)v176);
          }
          uint64_t v40 = v31[4];
          std::string::basic_string[abi:ne180100]<0>(&v175, "num_vqs");
          int v41 = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v40 + 8), (const void **)&v175.__r_.__value_.__l.__data_, 8);
          uint64_t v42 = v29;
          unint64_t v43 = operator new(0x18uLL);
          *((void *)&v176 + 1) = v43 + 3;
          int v177 = v43 + 3;
          void *v43 = 1;
          v43[1] = v37 / parameter_value;
          v43[2] = v41;
          *(void *)&long long v176 = v43;
          if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v175.__r_.__value_.__l.__data_);
          }
          InferenceEngine::DataTensor::reshape(*v33, (uint64_t)&v176);
          if ((void)v176)
          {
            *((void *)&v176 + 1) = v176;
            operator delete((void *)v176);
          }
          unint64_t v44 = (void *)v180.__r_.__value_.__r.__words[0];
          if (v180.__r_.__value_.__r.__words[0])
          {
            v180.__r_.__value_.__l.__size_ = v180.__r_.__value_.__r.__words[0];
            goto LABEL_264;
          }
          goto LABEL_265;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      goto LABEL_47;
    case 6uLL:
      if (*(_DWORD *)v159.__r_.__value_.__l.__data_ != 1836020336
        || *(_WORD *)(v159.__r_.__value_.__r.__words[0] + 4) != 29808)
      {
        goto LABEL_275;
      }
LABEL_136:
      uint64_t v65 = v21[37];
      unint64_t v64 = (std::__shared_weak_count *)v21[38];
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v147 = v64;
      uint64_t v67 = v21[39];
      unint64_t v66 = (std::__shared_weak_count *)v21[40];
      if (v66) {
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v153 = v66;
      uint64_t v68 = operator new(0x80uLL);
      uint64_t v69 = v68;
      v68[1] = 0;
      v68[2] = 0;
      void *v68 = off_26C217C18;
      if (v66) {
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v146 = v68 + 3;
      if (v147) {
        atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v66) {
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v68[3] = off_26C202A48;
      v68[4] = v67;
      v68[5] = v66;
      if (v66)
      {
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v66);
      }
      if (v147) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v147);
      }
      *((_OWORD *)v69 + 5) = 0u;
      std::string::size_type v70 = v69 + 10;
      v69[3] = off_26C204270;
      std::string v71 = v69 + 13;
      *((_OWORD *)v69 + 6) = 0u;
      *((_OWORD *)v69 + 7) = 0u;
      uint64_t v72 = v69[4];
      long long v151 = v69 + 13;
      int64_t v152 = v69 + 10;
      std::string::basic_string[abi:ne180100]<0>(&v180, "mha_hidden_state");
      v69[6] = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v72 + 8), (const void **)&v180.__r_.__value_.__l.__data_, 512);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v180.__r_.__value_.__l.__data_);
      }
      uint64_t v73 = v69[4];
      std::string::basic_string[abi:ne180100]<0>(&v180, "mha_n_heads");
      v69[7] = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v73 + 8), (const void **)&v180.__r_.__value_.__l.__data_, 16);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v180.__r_.__value_.__l.__data_);
      }
      uint64_t v74 = v69[4];
      std::string::basic_string[abi:ne180100]<0>(&v180, "conformer_layers");
      v69[8] = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v74 + 8), (const void **)&v180.__r_.__value_.__l.__data_, 6);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v180.__r_.__value_.__l.__data_);
      }
      uint64_t v75 = v69[4];
      std::string::basic_string[abi:ne180100]<0>(&v180, "num_vqs");
      uint64_t v76 = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v75 + 8), (const void **)&v180.__r_.__value_.__l.__data_, 8);
      v69[9] = v76;
      uint64_t v42 = v153;
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v180.__r_.__value_.__l.__data_);
        uint64_t v76 = v69[9];
      }
      if (v76)
      {
        uint64_t v77 = 0;
        unint64_t v78 = 0;
        uint64_t v148 = (uint64_t)(v69 + 15);
        uint64_t v149 = (uint64_t)(v69 + 12);
        unint64_t v150 = v69;
        do
        {
          std::to_string(&v180, v78);
          size_t v79 = std::string::insert(&v180, 0, "prompt_k_");
          long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          int v177 = (void *)v79->__r_.__value_.__r.__words[2];
          long long v176 = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v180.__r_.__value_.__l.__data_);
          }
          std::to_string(&v180, v78);
          uint64_t v81 = std::string::insert(&v180, 0, "prompt_v_");
          long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          v175.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v180.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v173, "prompt_k");
          uint64_t v83 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)v4, (const void **)&v176);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v83, &v169);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v65 + 40))(&__p, v65, 1936946287, &v169, 0);
          uint64_t v157 = v77;
          _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v174, (uint64_t)&v173, (uint64_t)&__p);
          long long v85 = (_OWORD *)v69[11];
          unint64_t v84 = v69[12];
          if ((unint64_t)v85 >= v84)
          {
            uint64_t v87 = ((uint64_t)v85 - *v70) >> 4;
            if ((unint64_t)(v87 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v88 = v84 - *v70;
            uint64_t v89 = v88 >> 3;
            if (v88 >> 3 <= (unint64_t)(v87 + 1)) {
              uint64_t v89 = v87 + 1;
            }
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v90 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v90 = v89;
            }
            unint64_t v182 = v149;
            int v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v149, v90);
            int v92 = &v91[16 * v87];
            v180.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
            v180.__r_.__value_.__l.__size_ = (std::string::size_type)v92;
            uint64_t v181 = &v91[16 * v93];
            *(_OWORD *)int v92 = v174;
            long long v174 = 0uLL;
            v180.__r_.__value_.__r.__words[2] = (std::string::size_type)(v92 + 16);
            std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::__swap_out_circular_buffer(v70, &v180);
            uint64_t v86 = (_OWORD *)v69[11];
            std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((void **)&v180.__r_.__value_.__l.__data_);
          }
          else
          {
            _OWORD *v85 = v174;
            uint64_t v86 = v85 + 1;
          }
          v69[11] = v86;
          if (v172 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v169.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v173.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v173, "prompt_v");
          uint64_t v94 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)v4, (const void **)&v175.__r_.__value_.__l.__data_);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v94, &v169);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v65 + 40))(&__p, v65, 1936946287, &v169, 0);
          _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v174, (uint64_t)&v173, (uint64_t)&__p);
          int v96 = (_OWORD *)v69[14];
          unint64_t v95 = v69[15];
          if ((unint64_t)v96 >= v95)
          {
            uint64_t v98 = ((uint64_t)v96 - *v71) >> 4;
            if ((unint64_t)(v98 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v99 = v95 - *v71;
            uint64_t v100 = v99 >> 3;
            if (v99 >> 3 <= (unint64_t)(v98 + 1)) {
              uint64_t v100 = v98 + 1;
            }
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v101 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v101 = v100;
            }
            unint64_t v182 = v148;
            unint64_t v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v148, v101);
            unint64_t v103 = &v102[16 * v98];
            v180.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
            v180.__r_.__value_.__l.__size_ = (std::string::size_type)v103;
            uint64_t v181 = &v102[16 * v104];
            *(_OWORD *)unint64_t v103 = v174;
            long long v174 = 0uLL;
            v180.__r_.__value_.__r.__words[2] = (std::string::size_type)(v103 + 16);
            std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::__swap_out_circular_buffer(v71, &v180);
            unint64_t v97 = (_OWORD *)v69[14];
            std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((void **)&v180.__r_.__value_.__l.__data_);
          }
          else
          {
            _OWORD *v96 = v174;
            unint64_t v97 = v96 + 1;
          }
          v69[14] = v97;
          if (v172 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v169.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v173.__r_.__value_.__l.__data_);
          }
          uint64_t v105 = v4;
          InferenceEngine::DataTensor::get_shape(*(InferenceEngine::DataTensor **)(*v70 + v157), 0, &v180.__r_.__value_.__l.__data_);
          unint64_t v106 = *(void *)v180.__r_.__value_.__l.__data_;
          unint64_t v107 = v69;
          long long v110 = v69 + 7;
          unint64_t v109 = v69[7];
          uint64_t v108 = v110[1];
          unint64_t v111 = v107[6];
          v180.__r_.__value_.__l.__size_ = v180.__r_.__value_.__r.__words[0];
          operator delete(v180.__r_.__value_.__l.__data_);
          unint64_t v113 = v107[7];
          uint64_t v112 = v107[8];
          unint64_t v114 = v107[6];
          long long v115 = operator new(0x20uLL);
          v180.__r_.__value_.__l.__size_ = (std::string::size_type)(v115 + 4);
          v180.__r_.__value_.__r.__words[2] = (std::string::size_type)(v115 + 4);
          *long long v115 = v112;
          v115[1] = v106 / (v109 * v108 * (v111 / v109));
          void v115[2] = v113;
          v115[3] = v114 / v113;
          v180.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
          std::string v71 = v151;
          std::string::size_type v70 = v152;
          InferenceEngine::DataTensor::reshape(*(InferenceEngine::DataTensor **)(*v152 + v157), (uint64_t)&v180);
          InferenceEngine::DataTensor::reshape(*(InferenceEngine::DataTensor **)(*v151 + v157), (uint64_t)&v180);
          uint64_t v42 = v153;
          uint64_t v4 = v105;
          uint64_t v69 = v150;
          if (v180.__r_.__value_.__r.__words[0])
          {
            v180.__r_.__value_.__l.__size_ = v180.__r_.__value_.__r.__words[0];
            operator delete(v180.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v175.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v177) < 0) {
            operator delete((void *)v176);
          }
          ++v78;
          uint64_t v77 = v157 + 16;
        }
        while (v78 < v150[9]);
      }
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
      if (v147) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v147);
      }
      *(void *)&long long v62 = v146;
      *((void *)&v62 + 1) = v69;
      goto LABEL_271;
    case 7uLL:
      if (*(_DWORD *)v159.__r_.__value_.__l.__data_ != 1634100580
        || *(_DWORD *)(v159.__r_.__value_.__r.__words[0] + 3) != 1953264993)
      {
        goto LABEL_275;
      }
LABEL_86:
      uint64_t v48 = v21[37];
      uint64_t v49 = (std::__shared_weak_count *)v21[38];
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v50 = v21[39];
      uint64_t v42 = (std::__shared_weak_count *)v21[40];
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v51 = operator new(0x50uLL);
      uint64_t v31 = v51;
      v51[1] = 0;
      v51[2] = 0;
      *long long v51 = off_26C217710;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v51[3] = off_26C202A48;
      void v51[4] = v50;
      v51[5] = v42;
      if (v42)
      {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      *((_OWORD *)v31 + 3) = 0u;
      uint64_t v52 = (InferenceEngine::DataTensor **)(v31 + 6);
      v31[3] = off_26C203A88;
      *((_OWORD *)v31 + 4) = 0u;
      uint64_t v53 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v4, "prompt_semantic");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v53, &v175);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v48 + 40))(&v176, v48, 1936946287, &v175, 0);
      InferenceEngine::DataUtils::read_vector_from_file<float>(&v180);
      if (SHIBYTE(v177) < 0) {
        operator delete((void *)v176);
      }
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      uint64_t v54 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v4, "prompt_vq");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v54, &v173);
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v48 + 40))(&v175, v48, 1936946287, &v173, 0);
      InferenceEngine::DataUtils::read_vector_from_file<float>(&v176);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v173.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v175, "prompt_semantic");
      InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v180, &v173);
      long long v55 = *(_OWORD *)&v173.__r_.__value_.__l.__data_;
      *(_OWORD *)&v173.__r_.__value_.__l.__data_ = 0uLL;
      uint64_t v56 = (std::__shared_weak_count *)v31[7];
      *((_OWORD *)v31 + 3) = v55;
      if (v56)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
        if (v173.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v173.__r_.__value_.__l.__size_);
        }
      }
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      InferenceEngine::DataTensor::get_shape(*v52, 0, &v175.__r_.__value_.__l.__data_);
      uint64_t v57 = *(void *)v175.__r_.__value_.__l.__data_;
      v175.__r_.__value_.__l.__size_ = v175.__r_.__value_.__r.__words[0];
      operator delete(v175.__r_.__value_.__l.__data_);
      uint64_t v58 = operator new(0x10uLL);
      v175.__r_.__value_.__l.__size_ = (std::string::size_type)(v58 + 2);
      v175.__r_.__value_.__r.__words[2] = (std::string::size_type)(v58 + 2);
      *uint64_t v58 = 1;
      v58[1] = v57;
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
      char v59 = operator new(0x18uLL);
      v173.__r_.__value_.__l.__size_ = (std::string::size_type)(v59 + 3);
      v173.__r_.__value_.__r.__words[2] = (std::string::size_type)(v59 + 3);
      void *v59 = 1;
      v59[1] = v57;
      v59[2] = 8;
      v173.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
      InferenceEngine::DataTensor::reshape(*v52, (uint64_t)&v175);
      std::string::basic_string[abi:ne180100]<0>(&__p, "prompt_vq");
      InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v176, &v169);
      long long v60 = *(_OWORD *)&v169.__r_.__value_.__l.__data_;
      *(_OWORD *)&v169.__r_.__value_.__l.__data_ = 0uLL;
      int v61 = (std::__shared_weak_count *)v31[9];
      *((_OWORD *)v31 + 4) = v60;
      if (v61)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        if (v169.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v169.__r_.__value_.__l.__size_);
        }
      }
      if (v172 < 0) {
        operator delete(__p);
      }
      InferenceEngine::DataTensor::reshape((InferenceEngine::DataTensor *)v31[8], (uint64_t)&v173);
      if (v173.__r_.__value_.__r.__words[0])
      {
        v173.__r_.__value_.__l.__size_ = v173.__r_.__value_.__r.__words[0];
        operator delete(v173.__r_.__value_.__l.__data_);
      }
      if (v175.__r_.__value_.__r.__words[0])
      {
        v175.__r_.__value_.__l.__size_ = v175.__r_.__value_.__r.__words[0];
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if ((void)v176)
      {
        *((void *)&v176 + 1) = v176;
        operator delete((void *)v176);
      }
      if (v180.__r_.__value_.__r.__words[0])
      {
        v180.__r_.__value_.__l.__size_ = v180.__r_.__value_.__r.__words[0];
        operator delete(v180.__r_.__value_.__l.__data_);
      }
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      *(void *)&long long v62 = v31 + 3;
      goto LABEL_270;
    case 0xAuLL:
      int v22 = (std::string *)v159.__r_.__value_.__r.__words[0];
LABEL_207:
      std::string::size_type v116 = v22->__r_.__value_.__r.__words[0];
      int v117 = LOWORD(v22->__r_.__value_.__r.__words[1]);
      if (v116 != 0x6D6F72705F613270 || v117 != 29808) {
        goto LABEL_275;
      }
      long long v119 = *(_OWORD *)(v21 + 37);
      long long v158 = v119;
      uint64_t v26 = (std::__shared_weak_count *)v21[38];
      if (*((void *)&v119 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v119 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      std::string::size_type v121 = v21[39];
      long long v120 = (std::__shared_weak_count *)v21[40];
      if (v120) {
        atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v122 = v120;
      float v123 = operator new(0xB8uLL);
      uint64_t v31 = v123;
      v123[1] = 0;
      v123[2] = 0;
      *float v123 = off_26C1EE2A8;
      if (v120) {
        atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v32 = v123 + 3;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v173.__r_.__value_.__r.__words[0] = v121;
      v173.__r_.__value_.__l.__size_ = (std::string::size_type)v120;
      if (v120)
      {
        atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
        SoundStormP2ABaseInference::SoundStormP2ABaseInference(v123 + 3, v158, v26, (uint64_t *)&v173);
        std::__shared_weak_count::__release_shared[abi:ne180100](v120);
      }
      else
      {
        SoundStormP2ABaseInference::SoundStormP2ABaseInference(v123 + 3, v158, v26, (uint64_t *)&v173);
      }
      uint64_t v124 = (uint64_t)v4;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      v31[21] = 0;
      uint64_t v125 = v31 + 21;
      *((unsigned char *)v31 + 96) = 0;
      long long v126 = v31 + 12;
      *(_OWORD *)(v31 + 13) = 0u;
      long long v127 = (uint64_t **)(v31 + 13);
      v31[3] = off_26C1EDAD0;
      *(_OWORD *)(v31 + 17) = 0u;
      uint64_t v154 = v31 + 20;
      v31[22] = 0;
      v31[10] = 0;
      v31[11] = 0;
      *(_OWORD *)(v31 + 15) = 0u;
      v31[19] = 0;
      v31[20] = v31 + 21;
      uint64_t v128 = v31[4];
      std::string::basic_string[abi:ne180100]<0>(&v180, "mha_hidden_state");
      v31[6] = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v128 + 8), (const void **)&v180.__r_.__value_.__l.__data_, 512);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v180.__r_.__value_.__l.__data_);
      }
      uint64_t v129 = v31[4];
      std::string::basic_string[abi:ne180100]<0>(&v180, "mha_n_heads");
      v31[7] = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v129 + 8), (const void **)&v180.__r_.__value_.__l.__data_, 16);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v180.__r_.__value_.__l.__data_);
      }
      uint64_t v130 = v31[4];
      std::string::basic_string[abi:ne180100]<0>(&v180, "conformer_layers");
      v31[8] = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v130 + 8), (const void **)&v180.__r_.__value_.__l.__data_, 6);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v180.__r_.__value_.__l.__data_);
      }
      uint64_t v131 = v31[4];
      std::string::basic_string[abi:ne180100]<0>(&v180, "num_vqs");
      v31[9] = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v131 + 8), (const void **)&v180.__r_.__value_.__l.__data_, 8);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v180.__r_.__value_.__l.__data_);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&__p, v124);
      int v132 = *v126;
      *long long v126 = (_BYTE)__p;
      LOBYTE(__p) = v132;
      uint64_t v133 = *v127;
      void *v127 = v171;
      int v171 = v133;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v171, v132);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v134 = (std::__shared_weak_count *)v31[11];
      *((_OWORD *)v31 + 5) = v158;
      uint64_t v42 = v122;
      if (v134) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v134);
      }
      *(_OWORD *)&v180.__r_.__value_.__l.__data_ = (unint64_t)v126;
      v180.__r_.__value_.__r.__words[2] = 0;
      uint64_t v181 = 0;
      unint64_t v182 = 0x8000000000000000;
      int v135 = *v126;
      if (v135 == 1)
      {
        uint64_t v137 = (uint64_t)*v127;
        v180.__r_.__value_.__l.__size_ = (std::string::size_type)(*v127 + 1);
        v180.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(v137, (const std::string::value_type **)&PROMPT_MAP_KEY);
        int v135 = *v126;
      }
      else
      {
        if (v135 == 2)
        {
          uint64_t v136 = *v127;
          v180.__r_.__value_.__r.__words[2] = (*v127)[1];
          long long v176 = (unint64_t)v126;
          int v177 = 0;
          uint64_t v178 = 0;
          unint64_t v179 = 0x8000000000000000;
LABEL_248:
          int v177 = (void *)v136[1];
          goto LABEL_251;
        }
        unint64_t v182 = 1;
      }
      long long v176 = (unint64_t)v126;
      int v177 = 0;
      uint64_t v178 = 0;
      unint64_t v179 = 0x8000000000000000;
      if (v135 == 1)
      {
        *((void *)&v176 + 1) = *v127 + 1;
      }
      else
      {
        if (v135 == 2)
        {
          uint64_t v136 = *v127;
          goto LABEL_248;
        }
        unint64_t v179 = 1;
      }
LABEL_251:
      if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v180, (unsigned __int8 **)&v176))
      {
        std::string::basic_string[abi:ne180100]<0>(&v180, &byte_20D5A22AE);
        (*(void (**)(void *, std::string *))(*v32 + 24))(v31 + 3, &v180);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v176, (char *)PROMPT_MAP_KEY);
        *(_OWORD *)&v175.__r_.__value_.__r.__words[1] = 0uLL;
        v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175.__r_.__value_.__l.__size_;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::map<std::string,std::string>,0>((uint64_t *)&v180, (unsigned __int8 *)v31 + 96, (const void **)&v176, (const void ***)&v175);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v154, (void *)v31[21]);
        std::string::size_type size = (void *)v180.__r_.__value_.__l.__size_;
        v31[20] = v180.__r_.__value_.__r.__words[0];
        v31[21] = size;
        std::string::size_type v139 = v180.__r_.__value_.__r.__words[2];
        v31[22] = *((void *)&v180.__r_.__value_.__l + 2);
        if (v139)
        {
          size[2] = v125;
          v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180.__r_.__value_.__l.__size_;
          *(_OWORD *)&v180.__r_.__value_.__r.__words[1] = 0uLL;
          std::string::size_type size = 0;
        }
        else
        {
          *uint64_t v154 = v125;
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v180, size);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v175, (void *)v175.__r_.__value_.__l.__size_);
        if (SHIBYTE(v177) < 0) {
          operator delete((void *)v176);
        }
        std::string::basic_string[abi:ne180100]<0>(&v180, "default");
        uint64_t v140 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v154, (const void **)&v180.__r_.__value_.__l.__data_);
        if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v180.__r_.__value_.__l.__data_);
        }
        if (v125 == (void *)v140)
        {
          int v145 = __cxa_allocate_exception(0x10uLL);
          StringFormatter::StringFormatter((StringFormatter *)&v180, "prompt_map must contains '%s' prompt", "default");
          MEMORY[0x210558D40](v145, &v180);
          __cxa_throw(v145, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v180, "default");
        (*(void (**)(void *, std::string *))(*v32 + 24))(v31 + 3, &v180);
      }
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v44 = (void *)v180.__r_.__value_.__r.__words[0];
LABEL_264:
        operator delete(v44);
      }
LABEL_265:
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      *(void *)&long long v62 = v32;
LABEL_270:
      *((void *)&v62 + 1) = v31;
LABEL_271:
      unint64_t v141 = *(std::__shared_weak_count **)(v156 + 280);
      *(_OWORD *)(v156 + 272) = v62;
      if (v141) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v141);
      }
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
LABEL_275:
      *(unsigned char *)(v156 + 320) = 0;
      SharedObjectPool::get<SynthesizerConfig>(&v180, *(void *)(v156 + 168));
      std::vector<std::string>::pointer v142 = *(std::__shared_weak_count **)(v156 + 296);
      *(_OWORD *)(v156 + 288) = *(_OWORD *)&v180.__r_.__value_.__l.__data_;
      if (v142) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v142);
      }
      if (v155) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v155);
      }
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v163, v162[0]);
      if (v165 < 0) {
        operator delete(v164[0]);
      }
      if (v167) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v167);
      }
      return v156;
    default:
      goto LABEL_275;
  }
}

void sub_20D3B8C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,long long a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,unsigned __int8 a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (*(char *)(v61 - 105) < 0)
  {
    operator delete(*(void **)(v61 - 128));
    if ((v54 & 1) == 0)
    {
LABEL_6:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a18, *(void **)(v57 + 168));
      *(void *)(v61 - 128) = v59;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 128));
      *(void *)(v61 - 128) = v60 - 56;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 128));
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v58, *(unsigned __int8 *)(v57 + 96));
      long long v62 = *(std::__shared_weak_count **)(v57 + 88);
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
      *(void *)(v57 + 24) = off_26C202A48;
      unint64_t v63 = *(std::__shared_weak_count **)(v57 + 40);
      if (v63)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        if (!v55)
        {
LABEL_10:
          if (!v56) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
      }
      else if (!v55)
      {
        goto LABEL_10;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      if (!v56)
      {
LABEL_12:
        std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v57);
        operator delete(v64);
        if (v55) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
        }
        if (a19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a19);
        }
        if (a27 < 0) {
          operator delete(__p);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a31, a30);
        if (a37 < 0) {
          operator delete(a32);
        }
        if (a39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a39);
        }
        std::mutex::~mutex((std::mutex *)(a20 + 328));
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a20 + 312), *(unsigned __int8 *)(a20 + 304));
        uint64_t v65 = *(std::__shared_weak_count **)(a20 + 296);
        if (v65) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v65);
        }
        unint64_t v66 = *(std::__shared_weak_count **)(a20 + 280);
        if (v66) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
        Module::~Module((Module *)a20);
        _Unwind_Resume(a1);
      }
LABEL_11:
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      goto LABEL_12;
    }
  }
  else if (!v54)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v53);
  goto LABEL_6;
}

void std::__shared_ptr_emplace<SoundStormP2APromptInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = off_26C1EDAD0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 160, *(void **)(a1 + 168));
  uint64_t v4 = (void **)(a1 + 136);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 112);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 104), *(unsigned __int8 *)(a1 + 96));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)(a1 + 24) = off_26C202A48;
  long long v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<SoundStormP2APromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE2A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SoundStormP2APromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE2A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoundStormP2AInference>::__on_zero_shared(void *a1)
{
  a1[3] = off_26C203808;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  a1[3] = off_26C202A48;
  long long v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<SoundStormP2AInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SoundStormP2AInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoundStormPromptInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = off_26C204270;
  long long v3 = (void **)(a1 + 104);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  long long v3 = (void **)(a1 + 80);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)(a1 + 24) = off_26C202A48;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__shared_ptr_emplace<SoundStormPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SoundStormPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoundStormBaseInference>::__on_zero_shared(void *a1)
{
  a1[3] = off_26C203A88;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  a1[3] = off_26C202A48;
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__shared_ptr_emplace<SoundStormBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SoundStormBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

Module *SoundStormPersistentModule::SoundStormPersistentModule(Module *a1, char *a2, long long ***a3)
{
  uint64_t v6 = (void *)((char *)a1 + 296);
  Module::Module(a1);
  v7[34] = 0;
  v7[35] = 0;
  v7[36] = 0;
  void *v7 = off_26C204400;
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  {
    operator new();
  }
  uint64_t v8 = (std::mutex *)SoundStormPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)SoundStormPersistentModule::thread_mutex(void)::mutex);
  uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v9, &v48);
  SharedObjectPool::get<VoiceConfig>(&v49, *a3);
  std::string::size_type v10 = v49.__r_.__value_.__r.__words[0];
  unint64_t v11 = (std::__shared_weak_count *)*((void *)a1 + 38);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    std::string::size_type v12 = *v6;
  }
  else
  {
    std::string::size_type v12 = v10;
  }
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &v49);
  (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t, std::string *, void))(*(void *)v12 + 40))(v46, v12, 1936946287, &v49, 0);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v49, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)&v49.__r_.__value_.__l.__data_, &v45);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::BaseInferenceController,std::allocator<InferenceEngine::BaseInferenceController>,std::string &,std::string &,void>(&v49, (char *)v46, (uint64_t)&v48);
  long long v14 = (std::__shared_weak_count *)*((void *)a1 + 40);
  *((_OWORD *)v6 + 1) = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if ((*((unsigned char *)&v45.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    uint64_t v15 = &v45;
    switch(*((unsigned char *)&v45.__r_.__value_.__s + 23))
    {
      case 3:
        if (LOWORD(v45.__r_.__value_.__l.__data_) != 12912 || v45.__r_.__value_.__s.__data_[2] != 97) {
          goto LABEL_67;
        }
        goto LABEL_35;
      case 6:
        int v20 = WORD2(v45.__r_.__value_.__r.__words[0]);
        BOOL v21 = LODWORD(v45.__r_.__value_.__l.__data_) == 1836020336;
        int v22 = 29808;
        goto LABEL_22;
      case 7:
        int v20 = *(_DWORD *)((char *)v45.__r_.__value_.__r.__words + 3);
        BOOL v21 = LODWORD(v45.__r_.__value_.__l.__data_) == 1634100580;
        int v22 = 1953264993;
LABEL_22:
        if (!v21 || v20 != v22) {
          goto LABEL_67;
        }
        goto LABEL_53;
      case 0xA:
        goto LABEL_29;
      default:
        goto LABEL_67;
    }
  }
  switch(v45.__r_.__value_.__l.__size_)
  {
    case 3uLL:
      int v17 = *(unsigned __int8 *)(v45.__r_.__value_.__r.__words[0] + 2);
      BOOL v18 = *(_WORD *)v45.__r_.__value_.__l.__data_ == 12912;
      int v19 = 97;
      goto LABEL_30;
    case 6uLL:
      int v24 = *(unsigned __int16 *)(v45.__r_.__value_.__r.__words[0] + 4);
      BOOL v25 = *(_DWORD *)v45.__r_.__value_.__l.__data_ == 1836020336;
      int v26 = 29808;
      goto LABEL_48;
    case 7uLL:
      int v24 = *(_DWORD *)(v45.__r_.__value_.__r.__words[0] + 3);
      BOOL v25 = *(_DWORD *)v45.__r_.__value_.__l.__data_ == 1634100580;
      int v26 = 1953264993;
LABEL_48:
      if (!v25 || v24 != v26) {
        goto LABEL_67;
      }
LABEL_53:
      InferenceEngine::MLInferenceModel::get_model_parameters((InferenceEngine::MilInferenceModel **)v6[2], (uint64_t)&v44);
      int v33 = operator new(0x40uLL);
      v33[1] = 0;
      v33[2] = 0;
      void *v33 = off_26C219188;
      uint64_t v34 = v33 + 3;
      v49.__r_.__value_.__s.__data_[0] = v44.__r_.__value_.__s.__data_[0];
      v49.__r_.__value_.__l.__size_ = v44.__r_.__value_.__l.__size_;
      v44.__r_.__value_.__s.__data_[0] = 0;
      v44.__r_.__value_.__l.__size_ = 0;
      InferenceEngine::SoundStormIOProcessor::SoundStormIOProcessor(v33 + 3, &v49);
      break;
    case 0xAuLL:
      uint64_t v15 = (std::string *)v45.__r_.__value_.__r.__words[0];
LABEL_29:
      std::string::size_type v27 = v15->__r_.__value_.__r.__words[0];
      int v17 = LOWORD(v15->__r_.__value_.__r.__words[1]);
      BOOL v18 = v27 == 0x6D6F72705F613270;
      int v19 = 29808;
LABEL_30:
      if (!v18 || v17 != v19) {
        goto LABEL_67;
      }
LABEL_35:
      uint64_t v29 = v6[2];
      std::string::basic_string[abi:ne180100]<0>(__p, "layer_groups");
      uint64_t v30 = *(void *)(v29 + 8);
      memset(&v49, 0, sizeof(v49));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v49, 0, 0, 0);
      if (*(unsigned char *)(v30 + 48) != 1
        || *(void *)(v30 + 56) + 8 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(void *)(v30 + 56), (const void **)__p))
      {
        std::string v44 = v49;
        memset(&v49, 0, sizeof(v49));
      }
      else
      {
        uint64_t v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)(v30 + 48), (const void **)__p);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v31, &v44);
        if (v49.__r_.__value_.__r.__words[0])
        {
          v49.__r_.__value_.__l.__size_ = v49.__r_.__value_.__r.__words[0];
          operator delete(v49.__r_.__value_.__l.__data_);
        }
      }
      long long v32 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
      if (v44.__r_.__value_.__r.__words[0])
      {
        v44.__r_.__value_.__l.__size_ = v44.__r_.__value_.__r.__words[0];
        operator delete((void *)v32);
      }
      if (v43 < 0) {
        operator delete(__p[0]);
      }
      InferenceEngine::MLInferenceModel::get_model_parameters((InferenceEngine::MilInferenceModel **)v6[2], (uint64_t)&v44);
      int v33 = operator new(0x40uLL);
      v33[1] = 0;
      v33[2] = 0;
      if (*((void *)&v32 + 1) == (void)v32)
      {
        void *v33 = off_26C219268;
        uint64_t v34 = v33 + 3;
        v49.__r_.__value_.__s.__data_[0] = v44.__r_.__value_.__s.__data_[0];
        v49.__r_.__value_.__l.__size_ = v44.__r_.__value_.__l.__size_;
        v44.__r_.__value_.__s.__data_[0] = 0;
        v44.__r_.__value_.__l.__size_ = 0;
        InferenceEngine::P2ASoundStormIOProcessor::P2ASoundStormIOProcessor(v33 + 3, &v49);
      }
      else
      {
        void *v33 = off_26C1EE3F8;
        uint64_t v34 = v33 + 3;
        v49.__r_.__value_.__s.__data_[0] = v44.__r_.__value_.__s.__data_[0];
        v49.__r_.__value_.__l.__size_ = v44.__r_.__value_.__l.__size_;
        v44.__r_.__value_.__s.__data_[0] = 0;
        v44.__r_.__value_.__l.__size_ = 0;
        InferenceEngine::P2ASoundStormLayerGroupIOProcessor::P2ASoundStormLayerGroupIOProcessor(v33 + 3, &v49);
      }
      break;
    default:
LABEL_67:
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&v49, "Model type need to be one of the value from [default, prompt, p2a]");
      MEMORY[0x210558D40](exception, &v49);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v49.__r_.__value_.__l.__size_, v49.__r_.__value_.__s.__data_[0]);
  *(void *)&long long v36 = v34;
  *((void *)&v36 + 1) = v33;
  long long v40 = v36;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v44.__r_.__value_.__l.__size_, v44.__r_.__value_.__s.__data_[0]);
  uint64_t v37 = v6[2];
  long long v41 = v40;
  if (*((void *)&v40 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v37 + 40))(v37, &v41);
  if (*((void *)&v41 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
  }
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(v8);
  return a1;
}

void sub_20D3B9EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  long long v36 = *(std::__shared_weak_count **)(v34 + 320);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v34 + 304);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  PersistentModule::~PersistentModule((void **)v34);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<InferenceEngine::BaseInferenceController,std::allocator<InferenceEngine::BaseInferenceController>,std::string &,std::string &,void>(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x68uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = off_26C2191C0;
  InferenceEngine::BaseInferenceController::BaseInferenceController(v6 + 3, a2, a3);
  *a1 = v7;
  a1[1] = v6;
}

void sub_20D3BA104(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormIOProcessor>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormLayerGroupIOProcessor>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormLayerGroupIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE3F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormLayerGroupIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE3F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::SoundStormIOProcessor>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<InferenceEngine::SoundStormIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<InferenceEngine::SoundStormIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::BaseInferenceController>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<InferenceEngine::BaseInferenceController>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2191C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<InferenceEngine::BaseInferenceController>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2191C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void SoundStormPersistentModule::~SoundStormPersistentModule(SoundStormPersistentModule *this)
{
  *(void *)this = off_26C204400;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = off_26C204400;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void SoundStormStreamingPersistentModule::~SoundStormStreamingPersistentModule(SoundStormStreamingPersistentModule *this)
{
  *(void *)this = off_26C204400;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = off_26C204400;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void NashvilleAdapterModule::process_data(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v549 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)(*(void *)v3 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(*(void *)v3 + 16);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v266 = v4;
  uint64_t v277 = *(void *)v5;
  uint64_t v6 = operator new(0x30uLL);
  *(_OWORD *)((char *)v6 + 8) = 0u;
  *(void *)uint64_t v6 = off_26C215330;
  v6[2] = 0u;
  std::string::size_type v267 = (std::__shared_weak_count *)v6;
  *((void *)v6 + 3) = v6 + 2;
  uint64_t v7 = (uint64_t)v6 + 24;
  uint64_t v8 = (char *)operator new(0xB0uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  *(void *)uint64_t v8 = off_26C215FA8;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *((void *)v8 + 21) = 0;
  v268 = (uint64_t *)(v8 + 24);
  v285 = (const std::string *)(v8 + 24);
  uint64_t v286 = (std::__shared_weak_count *)v8;
  std::string v276 = (std::string *)v8;
  Agglomerate::set<std::shared_ptr<FrontendFeature>>(v7, (unint64_t *)&v285);
  uint64_t v9 = *(void *)(v1 + 168);
  if (v9)
  {
    unint64_t v283 = v5;
    v284 = v266;
    if (v266) {
      atomic_fetch_add_explicit(&v266->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v10 = (std::recursive_mutex *)(v9 + 56);
    std::recursive_mutex::lock((std::recursive_mutex *)(v9 + 56));
    Agglomerate::set<std::shared_ptr<NashvilleAdapterModuleInput>>(v9 + 32, &v283);
    unint64_t v11 = v284;
    unint64_t v283 = 0;
    v284 = 0;
    std::recursive_mutex::unlock(v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  std::string::operator=(v276 + 5, (const std::string *)(v5 + 32));
  std::string::operator=(v276 + 6, (const std::string *)(v5 + 56));
  uint64_t v264 = v7;
  unint64_t v265 = v5;
  uint64_t v12 = v277;
  std::vector<int>::vector(&v282, *(__int16 *)(v277 + 10));
  if (*(__int16 *)(v277 + 10) >= 1)
  {
    uint64_t v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = v1 + 392;
    unint64_t v273 = (std::string *)(v1 + 320);
    __int16 v274 = 0;
    int v270 = (void **)(v1 + 272);
    uint64_t v271 = v1 + 328;
    std::string::size_type v269 = (void *)(v1 + 280);
    do
    {
      memset(v294, 0, 25);
      *(void *)&long long v19 = 0x8000000080000000;
      *((void *)&v19 + 1) = 0x8000000080000000;
      *(_OWORD *)&v294[28] = v19;
      *(_OWORD *)&v294[44] = v19;
      *(void *)&v294[60] = 0x8000000080000000;
      memset(&v294[72], 0, 64);
      uint64_t v295 = 0;
      *(_OWORD *)unint64_t v296 = v19;
      *(_OWORD *)&v296[16] = v19;
      *(_OWORD *)unint64_t v297 = v19;
      *(_OWORD *)&v297[16] = v19;
      *(_DWORD *)&v297[32] = 0x7FFFFFFF;
      PhoneConversion::get_string_phone(&__str, *(unsigned __int8 *)(*(void *)(v12 + 32) + v13), (uint64_t *)(v1 + 392));
      std::string::operator=((std::string *)v294, &__str);
      uint64_t v20 = v17;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if ((v294[23] & 0x80) != 0)
      {
        if (*(void *)&v294[8] != 3)
        {
          int v25 = 0;
          v294[24] = 0;
          int v31 = *(unsigned __int8 *)(*(void *)(v277 + 232) + v13);
          goto LABEL_36;
        }
        BOOL v21 = *(unsigned __int16 **)v294;
      }
      else
      {
        if (v294[23] != 3)
        {
          int v25 = 0;
          v294[24] = 0;
          int v26 = *(unsigned __int8 *)(*(void *)(v277 + 232) + v13);
          *(_DWORD *)&v294[28] = v26;
          goto LABEL_27;
        }
        BOOL v21 = (unsigned __int16 *)v294;
      }
      int v22 = *v21;
      int v23 = *((unsigned __int8 *)v21 + 2);
      BOOL v24 = v22 == 26995 && v23 == 108;
      int v25 = v24;
      v294[24] = v25;
      int v26 = *(unsigned __int8 *)(*(void *)(v277 + 232) + v13);
      *(_DWORD *)&v294[28] = v26;
      if ((v294[23] & 0x80) != 0)
      {
        if (*(void *)&v294[8] != 3) {
          goto LABEL_37;
        }
        std::string::size_type v27 = *(unsigned __int16 **)v294;
        goto LABEL_29;
      }
LABEL_27:
      if (v294[23] != 3) {
        goto LABEL_37;
      }
      std::string::size_type v27 = (unsigned __int16 *)v294;
LABEL_29:
      int v28 = *v27;
      int v29 = *((unsigned __int8 *)v27 + 2);
      if (v28 == 26995 && v29 == 108)
      {
        int v31 = (int)(float)(*(float *)(v1 + 432) * (float)v26);
LABEL_36:
        *(_DWORD *)&v294[28] = v31;
      }
LABEL_37:
      int v32 = *(unsigned __int8 *)(*(void *)(v277 + 216) + v13);
      if (*(unsigned char *)(*(void *)(v277 + 216) + v13)) {
        int v32 = ScaledLogToHz[3 * *(unsigned __int8 *)(*(void *)(v277 + 216) + v13) - 270];
      }
      *(_DWORD *)&v294[32] = v32;
      int v33 = *(unsigned __int8 *)(*(void *)(v277 + 160) + v13);
      *(_DWORD *)&v294[36] = v33;
      int v34 = *(unsigned __int8 *)(v1 + 415);
      if ((v34 & 0x80) != 0)
      {
        if (*(void *)(v1 + 400) == 5)
        {
          long long v36 = *(int **)v18;
          if (**(_DWORD **)v18 == 1311597166 && *(unsigned char *)(*(void *)v18 + 4) == 79) {
            goto LABEL_57;
          }
          goto LABEL_52;
        }
      }
      else if (v34 == 5)
      {
        BOOL v35 = *(_DWORD *)v18 == 1311597166 && *(unsigned char *)(v1 + 396) == 79;
        long long v36 = (int *)(v1 + 392);
        if (v35) {
          goto LABEL_57;
        }
LABEL_52:
        int v38 = *v36;
        int v39 = *((unsigned __int8 *)v36 + 4);
        if (v38 == 1395488371 && v39 == 69) {
          goto LABEL_57;
        }
      }
      int v33 = v33 != 0;
LABEL_57:
      *(_DWORD *)&v296[8] = v33;
      int v41 = *(unsigned __int8 *)(*(void *)(v277 + 184) + v13);
      if (v41 != 4) {
        int v25 = 0;
      }
      if (!*(unsigned char *)(*(void *)(v277 + 184) + v13)) {
        int v25 = 1;
      }
      v14 += v25;
      if (v41 == 1) {
        int v42 = v15 + 1;
      }
      else {
        int v42 = v15;
      }
      int v15 = v42 + v25;
      *(_DWORD *)&v294[40] = *(unsigned __int8 *)(*(void *)(v277 + 184) + v13);
      *(_DWORD *)unint64_t v296 = v42 + v25;
      *(_DWORD *)&v296[4] = v14;
      *(_DWORD *)&v294[44] = *(unsigned __int8 *)(*(void *)(v277 + 152) + v13);
      uint64_t v43 = *(void *)(v277 + 536);
      if (!v43) {
        uint64_t v43 = *(void *)(v277 + 88);
      }
      *(_DWORD *)&v294[48] = *(unsigned __int8 *)(v43 + v13);
      *(_DWORD *)&v294[52] = *(unsigned __int8 *)(*(void *)(v277 + 248) + v13);
      uint64_t v44 = *(void *)(v277 + 272);
      if (v44) {
        *(_DWORD *)&v294[56] = *(unsigned __int8 *)(v44 + v13);
      }
      uint64_t v45 = *(void *)(v277 + 264);
      if (v45)
      {
        if ((v34 & 0x80) != 0)
        {
          if (*(void *)(v1 + 400) != 5) {
            goto LABEL_98;
          }
          uint64_t v46 = *(void *)v18;
        }
        else
        {
          uint64_t v46 = v1 + 392;
          if (v34 != 5) {
            goto LABEL_98;
          }
        }
        int v47 = *(_DWORD *)v46;
        int v48 = *(unsigned __int8 *)(v46 + 4);
        if (v47 != 1311597166 || v48 != 79) {
          goto LABEL_98;
        }
      }
      if ((v34 & 0x80) != 0)
      {
        if (*(void *)(v1 + 400) != 5) {
          goto LABEL_99;
        }
        uint64_t v51 = *(void *)v18;
        if (**(_DWORD **)v18 == 1311597166 && *(unsigned char *)(*(void *)v18 + 4) == 79)
        {
LABEL_97:
          uint64_t v45 = *(void *)(v277 + 280);
LABEL_98:
          *(_DWORD *)&v294[60] = *(unsigned __int8 *)(v45 + v13);
          goto LABEL_99;
        }
      }
      else
      {
        if (v34 != 5) {
          goto LABEL_99;
        }
        BOOL v50 = *(_DWORD *)v18 == 1311597166 && *(unsigned char *)(v1 + 396) == 79;
        uint64_t v51 = v1 + 392;
        if (v50) {
          goto LABEL_97;
        }
      }
      int v53 = *(_DWORD *)v51;
      int v54 = *(unsigned __int8 *)(v51 + 4);
      if (v53 == 1395488371 && v54 == 69) {
        goto LABEL_97;
      }
LABEL_99:
      uint64_t v56 = *(void *)(v277 + 616);
      if (v56) {
        *(_DWORD *)&v294[64] = *(unsigned __int8 *)(v56 + v13);
      }
      if ((v34 & 0x80) != 0)
      {
        if (*(void *)(v1 + 400) != 5) {
          goto LABEL_110;
        }
        uint64_t v57 = *(void *)v18;
      }
      else
      {
        uint64_t v57 = v1 + 392;
        if (v34 != 5) {
          goto LABEL_110;
        }
      }
      int v58 = *(_DWORD *)v57;
      int v59 = *(unsigned __int8 *)(v57 + 4);
      if (v58 == 1244488042 && v59 == 80)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "a_1");
        uint64_t v65 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v273, (const void **)&__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        BOOL v24 = v271 == v65;
        uint64_t v20 = v17;
        if (!v24
          && v269 != (void *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v270, (const void **)v294))
        {
          if (*(unsigned char *)(*(void *)(v277 + 88) + v13)) {
            unint64_t v66 = "_1";
          }
          else {
            unint64_t v66 = "_0";
          }
          std::string::append((std::string *)v294, v66);
        }
      }
LABEL_110:
      std::string::operator=((std::string *)&v294[96], (const std::string *)v294);
      if (!*(void *)(v1 + 336)) {
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)v273, *v270, v269);
      }
      if (*(_DWORD *)&v296[8]
        && v271 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v273, (const void **)&v294[96]))
      {
        std::string::push_back((std::string *)&v294[96], 58);
      }
      if (*(_DWORD *)&v294[60] == 0x7FFFFFFF) {
        goto LABEL_236;
      }
      int v61 = *(char *)(v1 + 415);
      if (v61 < 0)
      {
        if (*(void *)(v1 + 400) != 5) {
          goto LABEL_151;
        }
        uint64_t v64 = *(void *)v18;
        if ((**(_DWORD **)v18 != 1127049338 || *(unsigned char *)(*(void *)v18 + 4) != 78)
          && (*(_DWORD *)v64 != 1412262010 || *(unsigned char *)(v64 + 4) != 87))
        {
LABEL_145:
          int v69 = *(_DWORD *)v64;
          int v70 = *(unsigned __int8 *)(v64 + 4);
          if (v69 != 1210935418 || v70 != 75) {
            goto LABEL_151;
          }
        }
      }
      else
      {
        if (v61 != 5) {
          goto LABEL_151;
        }
        if (*(_DWORD *)v18 != 1127049338 || *(unsigned char *)(v1 + 396) != 78)
        {
          BOOL v63 = *(_DWORD *)v18 == 1412262010 && *(unsigned char *)(v1 + 396) == 87;
          uint64_t v64 = v1 + 392;
          if (!v63) {
            goto LABEL_145;
          }
        }
      }
      if (!*(void *)(v1 + 312))
      {
        int v80 = *(_DWORD *)&v294[56];
        int v81 = *(_DWORD *)&v294[64];
        if (*(_DWORD *)&v294[56] == 8) {
          int v80 = 0;
        }
        if (*(_DWORD *)&v294[64] == 8) {
          int v81 = 0;
        }
        *(_DWORD *)&v294[56] = v80;
        *(_DWORD *)&v294[64] = v81;
        if (v269 != (void *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v270, (const void **)v294)&& *(_DWORD *)&v294[60])
        {
          std::to_string(&__str, *(int *)&v294[60]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)&v294[96], (const std::string::value_type *)p_str, size);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::to_string(&__str, *(int *)&v294[60]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v84 = &__str;
          }
          else {
            unint64_t v84 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v85 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v85 = __str.__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)v294, (const std::string::value_type *)v84, v85);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v20 = v17;
        }
        goto LABEL_236;
      }
LABEL_151:
      if (v1 + 304 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v1 + 296, (const void **)&v294[96]))goto LABEL_236; {
      int v72 = *(_DWORD *)&v294[56];
      }
      int v73 = *(_DWORD *)&v294[64];
      if (*(_DWORD *)&v294[56] == 8) {
        int v72 = 0;
      }
      if (*(_DWORD *)&v294[64] == 8) {
        int v73 = 0;
      }
      *(_DWORD *)&v294[56] = v72;
      *(_DWORD *)&v294[64] = v73;
      int v74 = *(unsigned __int8 *)(v1 + 415);
      if ((v74 & 0x80) != 0)
      {
        if (*(void *)(v1 + 400) != 5) {
          goto LABEL_208;
        }
        uint64_t v75 = *(void *)v18;
      }
      else
      {
        uint64_t v75 = v1 + 392;
        if (v74 != 5) {
          goto LABEL_208;
        }
      }
      int v76 = *(_DWORD *)v75;
      int v77 = *(unsigned __int8 *)(v75 + 4);
      if (v76 == 1311597166 && v77 == 79)
      {
        if ((*(_DWORD *)&v296[8] - 1) < 6) {
          int v86 = *(_DWORD *)&v294[60] + 1;
        }
        else {
          int v86 = 0;
        }
        *(_DWORD *)&v294[60] = v86;
        if ((v74 & 0x80) != 0)
        {
LABEL_195:
          if (*(void *)(v1 + 400) != 5) {
            goto LABEL_208;
          }
          uint64_t v79 = *(void *)v18;
          goto LABEL_197;
        }
      }
      else if ((v74 & 0x80) != 0)
      {
        goto LABEL_195;
      }
      uint64_t v79 = v1 + 392;
      if (v74 != 5) {
        goto LABEL_208;
      }
LABEL_197:
      int v87 = *(_DWORD *)v79;
      int v88 = *(unsigned __int8 *)(v79 + 4);
      BOOL v89 = v87 == 1395488371 && v88 == 69;
      if (!v89 || *(int *)&v296[8] < 1)
      {
LABEL_208:
        int v90 = *(_DWORD *)&v294[60];
        if (*(_DWORD *)&v294[60]) {
          goto LABEL_209;
        }
        goto LABEL_236;
      }
      if (*(_DWORD *)&v296[8] <= 6u)
      {
        if (*(_DWORD *)&v294[60] <= 1u) {
          int v90 = 1;
        }
        else {
          int v90 = *(_DWORD *)&v294[60];
        }
        *(_DWORD *)&v294[60] = v90;
LABEL_209:
        std::to_string(&v293, v90);
        if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v91.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v293;
        }
        else {
          v91.__i_ = (std::__wrap_iter<const char *>::iterator_type)v293.__r_.__value_.__r.__words[0];
        }
        std::string::insert(&v293, v91, 95);
        std::string __str = v293;
        memset(&v293, 0, sizeof(v293));
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v92 = &__str;
        }
        else {
          int v92 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v93 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v93 = __str.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)&v294[96], (const std::string::value_type *)v92, v93);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v293.__r_.__value_.__l.__data_);
        }
        std::to_string(&v293, *(int *)&v294[60]);
        if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v94.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v293;
        }
        else {
          v94.__i_ = (std::__wrap_iter<const char *>::iterator_type)v293.__r_.__value_.__r.__words[0];
        }
        std::string::insert(&v293, v94, 95);
        std::string __str = v293;
        memset(&v293, 0, sizeof(v293));
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v95 = &__str;
        }
        else {
          unint64_t v95 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v96 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v96 = __str.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)v294, (const std::string::value_type *)v95, v96);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        uint64_t v20 = v17;
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v293.__r_.__value_.__l.__data_);
        }
        goto LABEL_236;
      }
      *(_DWORD *)&v294[60] = 0;
LABEL_236:
      if (v294[24])
      {
        *(void *)&v296[12] = 0;
        *(void *)&v297[28] = 0;
        *(void *)&v297[4] = 0;
        *(void *)&v297[12] = 0;
      }
      else
      {
        if (*(_DWORD *)&v294[40]) {
          int v97 = v20 & (v16 != 0);
        }
        else {
          int v97 = 1;
        }
        *(_DWORD *)&v296[12] = v97;
        *(_DWORD *)&v296[16] = *(_DWORD *)&v294[40] == 4;
        if ((v20 & (v16 != 0)) == 1) {
          *(_DWORD *)&v294[40] = 0;
        }
        int v16 = 0;
        *(_DWORD *)&v297[32] = 0;
        *(_DWORD *)&v297[28] = 0;
        *(void *)&v297[4] = 0;
        *(void *)&v297[12] = 0;
        uint64_t v20 = 0;
        switch(*(_DWORD *)&v294[44])
        {
          case 0:
            *(_DWORD *)&v297[12] = 1;
            *(_DWORD *)&v297[28] = 1;
            goto LABEL_260;
          case 1:
            int v16 = 0;
            uint64_t v20 = 0;
            *(_DWORD *)&v297[16] = 1;
            goto LABEL_265;
          case 2:
            *(void *)&v297[12] = 0x100000001;
            *(void *)&v297[28] = 0x100000001;
LABEL_260:
            int v16 = 0;
            uint64_t v20 = 0;
            if (*(_DWORD *)&v296[4] == 2) {
              *(_DWORD *)&v297[4] = 1;
            }
            break;
          case 3:
            int v16 = 0;
            uint64_t v20 = 0;
            *(_DWORD *)&v297[8] = 1;
            *(_DWORD *)&v297[16] = 1;
            *(void *)&v297[28] = 0x100000001;
            break;
          case 4:
            int v16 = 0;
            uint64_t v20 = 0;
            *(_DWORD *)&v297[28] = 1;
            break;
          case 6:
            int v16 = 0;
            uint64_t v20 = 0;
LABEL_265:
            *(_DWORD *)&v297[32] = 1;
            break;
          default:
            break;
        }
      }
      *(_DWORD *)unint64_t v297 = 1;
      *(_DWORD *)&v297[20] = *(unsigned __int8 *)(*(void *)(v277 + 104) + v13);
      v282.__begin_[v13 - v274] += *(unsigned __int16 *)(*(void *)(v277 + 1800) + 2 * v13);
      if (v1 + 352 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v1 + 344, (const void **)v294))
      {
        uint64_t v17 = v20;
        unint64_t v98 = v276[1].__r_.__value_.__l.__size_;
        if (v98 >= v276[1].__r_.__value_.__r.__words[2])
        {
          uint64_t v99 = std::vector<PhoneFeature>::__push_back_slow_path<PhoneFeature const&>(v268, (const PhoneFeature *)v294);
          uint64_t v100 = v276;
        }
        else
        {
          PhoneFeature::PhoneFeature((std::string *)v276[1].__r_.__value_.__l.__size_, (const PhoneFeature *)v294);
          uint64_t v99 = v98 + 216;
          uint64_t v100 = v276;
          v276[1].__r_.__value_.__l.__size_ = v98 + 216;
        }
        v100[1].__r_.__value_.__l.__size_ = v99;
      }
      else
      {
        ++v274;
        uint64_t v17 = 1;
        int v16 = *(_DWORD *)&v296[12];
      }
      if (SHIBYTE(v295) < 0) {
        operator delete(*(void **)&v294[120]);
      }
      if ((v294[119] & 0x80000000) != 0) {
        operator delete(*(void **)&v294[96]);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v294[72];
      std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if ((v294[23] & 0x80000000) != 0) {
        operator delete(*(void **)v294);
      }
      ++v13;
      uint64_t v12 = v277;
    }
    while (v13 < *(__int16 *)(v277 + 10));
  }
  if (*(char *)(v1 + 415) < 0) {
    std::string::__init_copy_ctor_external(&v281, *(const std::string::value_type **)(v1 + 392), *(void *)(v1 + 400));
  }
  else {
    std::string v281 = *(std::string *)(v1 + 392);
  }
  std::string::size_type v101 = v276[1].__r_.__value_.__r.__words[0];
  std::string::size_type v102 = v276[1].__r_.__value_.__l.__size_;
  std::string v275 = (unsigned char *)v1;
  if (v102 != v101)
  {
    unint64_t v103 = 0;
    unint64_t v104 = 0x84BDA12F684BDA13 * ((uint64_t)(v102 - v101) >> 3);
    uint64_t v105 = 256;
    while (1)
    {
      unint64_t v106 = (int *)(v101 + v105);
      if (++v103 >= v104)
      {
        int v107 = 0x7FFFFFFF;
        int v108 = 0x7FFFFFFF;
      }
      else
      {
        int v107 = *v106;
        int v108 = v106[27];
      }
      unsigned int v109 = *(v106 - 54);
      int v110 = *(v106 - 27);
      *(void *)(v106 - 25) = 0;
      *(void *)(v106 - 23) = 0;
      *(v106 - 21) = 0;
      if (*((unsigned char *)v106 - 232)) {
        goto LABEL_290;
      }
      *(v106 - 25) = v109 == 0;
      if (v109 == 4 || !(v109 | v107) || v110 != v108) {
        *(v106 - 24) = 1;
      }
      *(v106 - 23) = v109 < 2;
      *(v106 - 22) = v109 == 2;
      if (v109)
      {
        if (v109 != 3)
        {
          if (v109 != 1)
          {
            if (v109 != 4) {
              goto LABEL_290;
            }
            goto LABEL_289;
          }
LABEL_287:
          if (v107 != 1
            || v1 + 280 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v1 + 272, (const void **)v106 - 32))
          {
            goto LABEL_290;
          }
        }
      }
      else if (v107)
      {
        goto LABEL_287;
      }
LABEL_289:
      *(v106 - 21) = 1;
LABEL_290:
      std::string::size_type v101 = v276[1].__r_.__value_.__r.__words[0];
      std::string::size_type v102 = v276[1].__r_.__value_.__l.__size_;
      unint64_t v104 = 0x84BDA12F684BDA13 * ((uint64_t)(v102 - v101) >> 3);
      v105 += 216;
      if (v103 >= v104) {
        goto LABEL_293;
      }
    }
  }
  std::string::size_type v101 = v276[1].__r_.__value_.__l.__size_;
LABEL_293:
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v281.__r_.__value_.__l.__data_);
    std::string::size_type v101 = v276[1].__r_.__value_.__r.__words[0];
    std::string::size_type v102 = v276[1].__r_.__value_.__l.__size_;
  }
  if (v101 != v102)
  {
    unint64_t v111 = (uint64_t)(v102 - v101) / 216;
    int v112 = *(_DWORD *)(v102 - 68) - 1;
    if (v111 <= 1) {
      unint64_t v111 = 1;
    }
    unint64_t v113 = (int *)(v101 + 200);
    while (1)
    {
      int *v113 = 0;
      int v114 = *(v113 - 13);
      if (v114 < 3) {
        break;
      }
      if (v114 >= v112)
      {
        int v115 = 2;
        goto LABEL_303;
      }
LABEL_304:
      v113 += 54;
      if (!--v111) {
        goto LABEL_305;
      }
    }
    int v115 = 1;
LABEL_303:
    int *v113 = v115;
    goto LABEL_304;
  }
LABEL_305:
  std::string::basic_string[abi:ne180100]<0>(v294, "cw");
  std::string::size_type v116 = (void *)(v1 + 368);
  uint64_t v117 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v1 + 368, (const void **)v294);
  uint64_t v118 = (void *)(v1 + 376);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  int data = (long long *)v276[1].__r_.__value_.__l.__data_;
  long long v119 = (long long *)v276[1].__r_.__value_.__l.__size_;
  if (v118 != (void *)v117)
  {
    std::string::size_type v121 = (long long *)v276[1].__r_.__value_.__l.__data_;
    goto LABEL_338;
  }
  std::string::size_type v121 = (long long *)v276[1].__r_.__value_.__l.__size_;
  if (data != v119)
  {
    if (*((char *)data + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)data, *((void *)data + 1));
    }
    else
    {
      long long v122 = *data;
      v293.__r_.__value_.__r.__words[2] = *((void *)data + 2);
      *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v122;
    }
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v294);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(&v294[48], "@ b O r d", "aboard");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(&v294[96], "@ b aU t", "about");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v296, "@ b V v", "above");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(&v297[16], "{ b s @ n t", "absent");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v298, "@ k O r d I ng", "according");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v299);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v300, "@ k r A s", "across");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v301, "{ f t @r", "after");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v302, "@ g E n s t", "against");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v303, "@ h E d", "ahead");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v304, "O l b i I t", "albeit");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v305, "O l", "all");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v306, "@ l O ng", "along");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v307, "@ l O ng s aI d", "alongside");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v308);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v309, "@ m I d", "amid");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v310, "@ m I d s t", "amidst");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v311, "@ m V ng", "among");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v312, "@ m V ng s t", "amongst");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v313, "@ n", "an");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v314, "{ n d", "and");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v315, "@ n V D @r", "another");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v316);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v317, "E n i", "any");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v318, "E n i b A 4 i", "anybody");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v319, "E n i w V n", "anyone");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v320, "E n i T I ng", "anything");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v321, "@ r aU n d", "around");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v322, "{ z", "as");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v323, "@ s aI d", "aside");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v324, "@ s t r { 4 l=", "astraddle");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v325, "@ s t r aI d", "astride");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v326, "{ t", "at");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v327, "@ w e", "away");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v328, "b A r", "bar");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v329, "b A r I ng", "barring");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v330, "b i", "be");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v331, "b i k V z", "because");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v332, "b i f O r", "before");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v333, "b i h aI n d", "behind");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v334, "b @ l o", "below");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v335, "b I n i T", "beneath");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v336, "b I s aI d", "beside");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v337, "b @ s aI d z", "besides");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v338, "b i t w i n", "between");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v339, "b i j A n d", "beyond");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v340, "b o T", "both");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v341, "b V t", "but");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v342, "b aI", "by");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v343, "k { n", "can");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v344, "s @r t n=", "certain");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v345, "s @r k @", "circa");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v346, "k l o s", "close");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[11],0>(v347, "k @ n s @r n I ng", "concerning");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v348);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[12],0>(v349);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v350, "k U d", "could");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v351, "d E r", "dare");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v352, "d I s p aI t", "despite");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v353, "d aU n", "down");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v354, "d u", "due");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v355, "d U r I ng", "during");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v356, "i tS", "each");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v357, "e t", "eight");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v358, "i D @r", "either");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v359, "I n V f", "enough");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v360, "E v r i", "every");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v361, "E v r i b A 4 i", "everybody");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v362, "E v r i w V n", "everyone");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(v363, "E v r i T I ng", "everything");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v364, "I k s E p t", "except");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[10],0>(v365, "I k s E p t I ng", "excepting");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[10],0>(v366);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v367, "f e l I ng", "failing");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v368, "f j u", "few");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v369, "f j u @r", "fewer");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v370, "f aI v", "five");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v371, "f A l o I ng", "following");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v372, "f O r", "for");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v373, "f O r", "four");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v374, "f r A m", "from");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v375, "g I v @ n", "given");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v376, "h { d", "had");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v377, "h { v", "have");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v378, "h i", "he");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v379, "h i p s", "heaps");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v380, "h E n s", "hence");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v381, "h @r", "her");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v382, "h @r z", "hers");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v383, "h @r s E l f", "herself");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v384, "h I m", "him");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v385, "h I m s E l f", "himself");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v386, "h I z", "his");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v387, "h aU E v @r", "however");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v388);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v389, "I f", "if");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v390, "I n", "in");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v391);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v392, "I n s aI d", "inside");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v393, "I n s t E d", "instead");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v394, "I n t U", "into");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v395, "I t", "it");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v396, "I t s", "its");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v397, "I t s E l f", "itself");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v398, "l E s", "less");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v399, "l aI k", "like");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v400);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v401, "l o d z", "loads");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v402, "l A t s", "lots");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v403, "m E n i", "many");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v404, "m { s I z", "masses");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v405, "m e", "may");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v406, "m i", "me");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v407, "m aI t", "might");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v408, "m aI n", "mine");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[6],0>(v409);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v410, "m O r", "more");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v411, "m o s t", "most");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v412, "m V tS", "much");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v413, "m V s t", "must");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v414, "m aI", "my");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v415, "m aI s E l f", "myself");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v416, "n i r", "near");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v417, "n i d", "need");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v418, "n i D @r", "neither");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[13],0>(v419);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v420, "n E k s t", "next");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v421, "n aI n", "nine");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v422, "n o", "no");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v423, "n o b @ 4 i", "nobody");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v424, "n V n", "none");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v425, "n o w V n", "no_one");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v426, "n O r", "nor");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v427, "n V T I ng", "nothing");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v428);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v429, "n V m b @r z", "numbers");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v430, "V v", "of");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v431, "@ v", "of");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v432, "O f", "off");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v433, "A n", "on");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v434, "w V n s", "once");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v435, "w V n", "one");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v436, "A n t u", "onto");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v437);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v438, "O r", "or");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v439, "V D @r", "other");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v440, "O t", "ought");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v441, "A r", "our");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v442, "A r z", "ours");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v443, "aU r s E l v z", "ourselves");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v444, "aU t", "out");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v445, "aU t s aI d", "outside");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v446, "o v @r", "over");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v447, "p A r t", "part");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v448, "p { s t", "past");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v449, "p E n d I ng", "pending");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v450, "p @r", "per");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v451, "p @r t e n I ng", "pertaining");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v452, "p l E n 4 i", "plenty");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v453, "p l V s", "plus");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[11],0>(v454, "k w A n t @ 4 i z", "quantities");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[10],0>(v455, "r I g A r d I ng", "regarding");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v456);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v457, "r aU n d", "round");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v458, "s e v", "save");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v459, "s e v I ng", "saving");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v460, "s E v @ n", "seven");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v461, "s E v r l=", "several");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v462, "S { l", "shall");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v463, "S i", "she");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v464, "S U d", "should");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v465, "s I m @ l @r", "similar");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v466, "s I n s", "since");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[4],0>(v467);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v468, "s o", "so");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v469, "s V m", "some");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v470, "s V m b V 4 i", "somebody");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v471, "s V m w V n", "someone");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v472, "s V m T I ng", "something");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v473, "s V tS", "such");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v474, "t E n", "ten");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v475, "D { n", "than");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v476, "T { ng k s", "thanks");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v477, "D { t", "that");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v478, "D @", "the");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v479, "D E r", "their");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v480, "D E r z", "theirs");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v481, "D E m", "them");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v482, "D @ m s E l v z", "themselves");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v483, "D E n", "then");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v484, "D E n s", "thence");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v485);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v486, "D i z", "these");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v487);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v488, "D I s", "this");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v489, "D o z", "those");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v490);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v491, "T r i", "three");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v492);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v493);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v494, "T r u", "thru");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v495, "D V s", "thus");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v496, "t I l", "till");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v497, "t u", "to");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v498, "t V n z", "tons");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v499, "t w O r d", "toward");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v500, "t w O r d z", "towards");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v501, "t u", "two");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v502, "V n d @r", "under");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(v503, "V n d @r n i T", "underneath");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v504, "@ n l E s", "unless");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v505, "V n l aI k", "unlike");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v506, "@ n t I l", "until");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v507, "V n t u", "unto");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v508, "V p", "up");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v509, "@ p A n", "upon");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v510, "V s", "us");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v511, "j u z d", "used");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v512, "v E r i @ s", "various");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v513, "v @r s @ s", "versus");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v514, "v i @", "via");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v515, "w A n t I ng", "wanting");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v516, "w i", "we");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v517, "w A t", "what");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v518, "w A 4 E v @r", "whatever");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v519, "w E n", "when");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v520, "w E n s", "whence");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v521, "w E n E v @r", "whenever");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v522, "w E r", "where");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v523, "w E r { z", "whereas");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v524, "w E r E v @r", "wherever");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v525, "w E D @r", "whether");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v526, "w I tS", "which");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(v527);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v528, "w aI l", "while");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v529, "w aI l s t", "whilst");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v530, "h u", "who");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v531, "h u E v @r", "whoever");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v532, "h u m", "whom");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v533, "h u m E v @r", "whomever");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v534, "h u z", "whose");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v535, "w I l", "will");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v536, "w I D", "with");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v537, "w I D I n", "within");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v538, "w I D aU t", "without");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v539, "w U d", "would");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v540, "j E t", "yet");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v541, "j u", "you");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v542, "j @r", "your");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v543, "j O r z", "yours");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v544, "j @r s E l f", "yourself");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v545, "j O r s E l v z", "yourselves");
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&__str, (const void **)v294, 253);
      NeverDestructed<std::map<std::string,std::string>>::NeverDestructed<>();
    }
    uint64_t v123 = get_word_trans_dict(void)::WORD_TRANS_DICT;
    std::string::pointer v124 = v276[1].__r_.__value_.__l.__data_;
    if (v276[1].__r_.__value_.__l.__size_ - (void)v124 == 216)
    {
      int v125 = 0;
    }
    else
    {
      unint64_t v126 = 0;
      int v127 = 0;
      uint64_t v128 = get_word_trans_dict(void)::WORD_TRANS_DICT + 8;
      uint64_t v129 = 1;
      do
      {
        unint64_t v130 = v126 + 1;
        if (*(_DWORD *)&v124[216 * v126 + 148] == *(_DWORD *)&v124[216 * v126 + 364])
        {
          uint64_t v131 = std::string::append(&v293, " ");
          uint64_t v132 = *v268 + 216 * v130;
          int v133 = *(char *)(v132 + 23);
          if (v133 >= 0) {
            uint64_t v134 = (const std::string::value_type *)(*v268 + 216 * v130);
          }
          else {
            uint64_t v134 = *(const std::string::value_type **)v132;
          }
          if (v133 >= 0) {
            std::string::size_type v135 = *(unsigned __int8 *)(v132 + 23);
          }
          else {
            std::string::size_type v135 = *(void *)(v132 + 8);
          }
          std::string::append(v131, v134, v135);
        }
        else
        {
          uint64_t v136 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v123, (const void **)&v293.__r_.__value_.__l.__data_);
          uint64_t v137 = *v268;
          if (v126 >= v127)
          {
            uint64_t v138 = v127;
            std::string::size_type v139 = (_DWORD *)(v137 + 216 * v127 + 176);
            do
            {
              _DWORD *v139 = v128 == v136;
              v139 += 54;
              ++v138;
            }
            while (v129 != v138);
          }
          std::string::operator=(&v293, (const std::string *)(v137 + 216 * v130));
          int v127 = v126 + 1;
        }
        std::string::pointer v124 = v276[1].__r_.__value_.__l.__data_;
        unint64_t v140 = 0x84BDA12F684BDA13 * ((uint64_t)(v276[1].__r_.__value_.__l.__size_ - (void)v124) >> 3);
        ++v129;
        ++v126;
      }
      while (v130 < v140 - 1);
      int v125 = v140 - 1;
      if (v140 == 1)
      {
        std::string::size_type v116 = v275 + 368;
        uint64_t v1 = (uint64_t)v275;
      }
      else
      {
        int v141 = v140 - 2;
        std::string::size_type v116 = v275 + 368;
        uint64_t v1 = (uint64_t)v275;
        if (*(_DWORD *)&v124[216 * v125 + 148] == *(_DWORD *)&v124[216 * v141 + 148])
        {
          *(_DWORD *)&v124[216 * v125 + 176] = *(_DWORD *)&v124[216 * v141 + 176];
LABEL_335:
          if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v293.__r_.__value_.__l.__data_);
          }
          std::string::size_type v121 = (long long *)v276[1].__r_.__value_.__l.__data_;
          long long v119 = (long long *)v276[1].__r_.__value_.__l.__size_;
          goto LABEL_338;
        }
      }
    }
    *(_DWORD *)(*v268 + 216 * v125 + 176) = v123 + 8 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v123, (const void **)&v293.__r_.__value_.__l.__data_);
    goto LABEL_335;
  }
LABEL_338:
  std::vector<std::string>::pointer v142 = (void *)*v116;
  if ((void *)*v116 != v118)
  {
    do
    {
      int v143 = v142 + 4;
      if (*((char *)v142 + 55) < 0)
      {
        uint64_t v145 = v142[5];
        switch(v145)
        {
          case 2:
            int v143 = (void *)*v143;
LABEL_364:
            if (*(_WORD *)v143 == 30563)
            {
              if (v121 != v119)
              {
                int64_t v152 = v121;
                do
                {
                  *((_DWORD *)v152 + 44) = 0;
                  int64_t v152 = (long long *)((char *)v152 + 216);
                }
                while (v152 != v119);
              }
            }
            else if (*(_WORD *)v143 == 26995)
            {
              if (v121 != v119)
              {
                unint64_t v153 = v121;
                do
                {
                  *((_DWORD *)v153 + 41) = 0;
                  unint64_t v153 = (long long *)((char *)v153 + 216);
                }
                while (v153 != v119);
              }
            }
            else if (*(_WORD *)v143 == 26227 && v121 != v119)
            {
              long long v151 = v121;
              do
              {
                *((_DWORD *)v151 + 43) = 0;
                long long v151 = (long long *)((char *)v151 + 216);
              }
              while (v151 != v119);
            }
            break;
          case 4:
            int v143 = (void *)*v143;
LABEL_356:
            if (*(_DWORD *)v143 == 1836020336 && v121 != v119)
            {
              uint64_t v149 = v121;
              do
              {
                *((_DWORD *)v149 + 12) = 0;
                uint64_t v149 = (long long *)((char *)v149 + 216);
              }
              while (v149 != v119);
            }
            break;
          case 6:
            int v143 = (void *)*v143;
LABEL_348:
            if (*(_DWORD *)v143 ^ 0x65727473 | *((unsigned __int16 *)v143 + 2) ^ 0x7373) {
              BOOL v146 = 1;
            }
            else {
              BOOL v146 = v121 == v119;
            }
            if (!v146)
            {
              unint64_t v147 = v121;
              do
              {
                *((_DWORD *)v147 + 38) = 0;
                unint64_t v147 = (long long *)((char *)v147 + 216);
              }
              while (v147 != v119);
            }
            break;
        }
      }
      else
      {
        int v144 = *((unsigned __int8 *)v142 + 55);
        switch(v144)
        {
          case 2:
            goto LABEL_364;
          case 4:
            goto LABEL_356;
          case 6:
            goto LABEL_348;
        }
      }
      uint64_t v154 = (void *)v142[1];
      if (v154)
      {
        do
        {
          unint64_t v155 = v154;
          uint64_t v154 = (void *)*v154;
        }
        while (v154);
      }
      else
      {
        do
        {
          unint64_t v155 = (void *)v142[2];
          BOOL v24 = *v155 == (void)v142;
          std::vector<std::string>::pointer v142 = v155;
        }
        while (!v24);
      }
      std::vector<std::string>::pointer v142 = v155;
    }
    while (v155 != v118);
  }
  if (v119 != v121)
  {
    uint64_t v156 = 0;
    int v157 = 0;
    std::vector<int>::pointer begin = v282.__begin_;
    while (1)
    {
      if (begin[v156] < 1) {
        goto LABEL_464;
      }
      int v159 = begin[v156];
      if (v159 >= 1) {
        break;
      }
      v157 += v159;
LABEL_464:
      if (++v156 >= 0x84BDA12F684BDA13 * (((char *)v119 - (char *)v121) >> 3)) {
        goto LABEL_465;
      }
    }
    int v160 = (uint64_t *)v121 + 27 * v156;
    long long v161 = v160 + 9;
    uint64_t v162 = v160 + 10;
    int v163 = v160 + 11;
    uint64_t v164 = v157;
    while (1)
    {
      uint64_t v165 = *(void *)(v277 + 3512);
      uint64_t v166 = v165 + 32 * v164;
      *(_DWORD *)&v294[4] = 0x7FFFFFFF;
      memset(&v294[8], 0, 42);
      uint64_t v167 = *(void *)(v166 + 4);
      *(void *)&long long v168 = v167;
      *((void *)&v168 + 1) = HIDWORD(v167);
      *(_OWORD *)&v294[32] = v168;
      int v169 = *(_DWORD *)v166;
      if (v169 > 15) {
        break;
      }
      if (v169 == 1)
      {
        int v174 = 3;
LABEL_419:
        *(_DWORD *)unint64_t v294 = v174;
        goto LABEL_425;
      }
      if (v169 == 8)
      {
        int v171 = 7;
LABEL_411:
        *(_DWORD *)unint64_t v294 = v171;
LABEL_412:
        *(_DWORD *)&v294[4] = *(_DWORD *)(v165 + 32 * v164 + 24);
        goto LABEL_425;
      }
LABEL_461:
      ++v164;
      std::vector<int>::pointer begin = v282.__begin_;
      if (v164 >= v282.__begin_[v156] + (uint64_t)v157)
      {
        uint64_t v1 = (uint64_t)v275;
        std::string::size_type v121 = (long long *)v276[1].__r_.__value_.__l.__data_;
        long long v119 = (long long *)v276[1].__r_.__value_.__l.__size_;
        v157 += v282.__begin_[v156];
        goto LABEL_464;
      }
    }
    switch(v169)
    {
      case 16:
        int v170 = 4;
        goto LABEL_407;
      case 17:
      case 19:
      case 20:
      case 22:
      case 23:
      case 25:
      case 27:
      case 28:
        goto LABEL_461;
      case 18:
        int v170 = 5;
LABEL_407:
        *(_DWORD *)unint64_t v294 = v170;
        goto LABEL_412;
      case 21:
        int v172 = 11;
        goto LABEL_415;
      case 24:
        int v171 = 6;
        goto LABEL_411;
      case 26:
        *(_DWORD *)unint64_t v294 = 9;
        std::string v173 = *(const char **)(v165 + 32 * v164 + 24);
        if (!strncmp(v173, "play ", 5uLL)) {
          goto LABEL_423;
        }
        goto LABEL_416;
      case 29:
        std::string v173 = *(const char **)(v165 + 32 * v164 + 24);
        if (!strncmp(v173, "ctx=", 4uLL))
        {
          int v175 = 12;
LABEL_421:
          *(_DWORD *)unint64_t v294 = v175;
          long long v176 = v173 + 4;
          goto LABEL_424;
        }
        if (!strncmp(v173, "emo=", 4uLL))
        {
          int v175 = 8;
          goto LABEL_421;
        }
        if (strncmp(v173, "play=", 5uLL))
        {
          *(_DWORD *)unint64_t v294 = 10;
          goto LABEL_416;
        }
        *(_DWORD *)unint64_t v294 = 9;
LABEL_423:
        long long v176 = v173 + 5;
LABEL_424:
        MEMORY[0x210558E70](&v294[8], v176);
        break;
      default:
        if (v169 == 36)
        {
          int v172 = 13;
LABEL_415:
          *(_DWORD *)unint64_t v294 = v172;
          std::string v173 = *(const char **)(v165 + 32 * v164 + 24);
LABEL_416:
          MEMORY[0x210558E70](&v294[8], v173);
          break;
        }
        if (v169 != 0x4000) {
          goto LABEL_461;
        }
        if (v275[436])
        {
          *(_DWORD *)unint64_t v294 = 1;
          v275[436] = 0;
          break;
        }
        int v174 = 2;
        goto LABEL_419;
    }
LABEL_425:
    std::string::basic_string[abi:ne180100]<0>(&__str, "&overlap");
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v177 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v177 = __str.__r_.__value_.__l.__size_;
    }
    if (*(_DWORD *)v294 == 9)
    {
      if ((v294[31] & 0x80000000) != 0)
      {
        uint64_t v178 = *(void *)&v294[16];
        if (*(void *)&v294[16] <= v177) {
          goto LABEL_454;
        }
      }
      else
      {
        uint64_t v178 = v294[31];
        if (v177 >= v294[31]) {
          goto LABEL_454;
        }
      }
      std::string::basic_string(&v293, (const std::string *)&v294[8], v178 - v177, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v291);
      if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v179 = HIBYTE(v293.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v179 = v293.__r_.__value_.__l.__size_;
      }
      std::string::size_type v180 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v180 = __str.__r_.__value_.__l.__size_;
      }
      if (v179 != v180)
      {
LABEL_448:
        if ((*((unsigned char *)&v293.__r_.__value_.__s + 23) & 0x80) != 0) {
          operator delete(v293.__r_.__value_.__l.__data_);
        }
        goto LABEL_454;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v181 = &__str;
      }
      else {
        uint64_t v181 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&v293.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (*((unsigned char *)&v293.__r_.__value_.__s + 23))
        {
          uint64_t v182 = 0;
          while (v293.__r_.__value_.__s.__data_[v182] == v181->__r_.__value_.__s.__data_[v182])
          {
            if (HIBYTE(v293.__r_.__value_.__r.__words[2]) == ++v182) {
              goto LABEL_451;
            }
          }
          goto LABEL_448;
        }
LABEL_451:
        v294[48] = 1;
        uint64_t v185 = v294[31];
        if (v294[31] < 0) {
          uint64_t v185 = *(void *)&v294[16];
        }
        std::string::erase((std::string *)&v294[8], v185 - v177, 0xFFFFFFFFFFFFFFFFLL);
        goto LABEL_454;
      }
      unint64_t v183 = (void *)v293.__r_.__value_.__r.__words[0];
      int v184 = memcmp(v293.__r_.__value_.__l.__data_, v181, v293.__r_.__value_.__l.__size_);
      operator delete(v183);
      if (!v184) {
        goto LABEL_451;
      }
    }
LABEL_454:
    uint64_t v186 = *v162;
    if ((unint64_t)*v162 >= *v163)
    {
      uint64_t v187 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v161, (uint64_t)v294);
    }
    else
    {
      std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v161, (uint64_t)v294);
      uint64_t v187 = v186 + 56;
    }
    uint64_t *v162 = v187;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if ((v294[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v294[8]);
    }
    goto LABEL_461;
  }
LABEL_465:
  uint64_t v188 = *(void *)(v265 + 8);
  if (v188)
  {
    uint64_t v189 = v285;
    uint64_t v190 = *(void *)(v265 + 16);
    uint64_t v191 = *(void *)(v265 + 24);
    uint64_t v278 = **(void **)v265;
    unsigned __int16 v291 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(v188 + 104))(v190, v191, 1, 0, &v291) & 0x80000000) == 0)
    {
      __int16 v290 = 0;
      query_string_field(v190, v191, v188, v291, 0, (uint64_t)&v189[3]);
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, __int16 *))(v188 + 152))(v190, v191, 2, v291, &v290) & 0x80000000) == 0)
      {
        if (v290)
        {
          unsigned __int16 v289 = 0;
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(v188 + 104))(v190, v191, 2, v291, &v289) & 0x80000000) == 0)
          {
            uint64_t v272 = (uint64_t *)&v189[1];
            while (v289)
            {
              LODWORD(v293.__r_.__value_.__l.__data_) = 4;
              v288[1] = 0;
              if (((*(uint64_t (**)(uint64_t, uint64_t))(v188 + 168))(v190, v191) & 0x80000000) != 0) {
                goto LABEL_546;
              }
              *(void *)&long long v192 = 0x8000000080000000;
              *((void *)&v192 + 1) = 0x8000000080000000;
              *(_OWORD *)unint64_t v294 = v192;
              memset(&v294[16], 0, 120);
              if ((LODWORD(v293.__r_.__value_.__l.__data_) - 9) < 6
                || (v193 = &v294[16], LODWORD(v293.__r_.__value_.__l.__data_) == 4))
              {
                query_string_field(v190, v191, v188, v289, 3, (uint64_t)&v294[16]);
                if (v294[39] >= 0) {
                  v193 = &v294[16];
                }
                else {
                  v193 = *(unsigned __int8 **)&v294[16];
                }
              }
              int valid = usextract_nrOfValidPhonemes(v278, v193);
              uint64_t v195 = v294[39];
              if (v294[39] < 0) {
                uint64_t v195 = *(void *)&v294[24];
              }
              if (v195 && valid)
              {
                query_string_field(v190, v191, v188, v289, 5, (uint64_t)&v294[64]);
                query_string_field(v190, v191, v188, v289, 14, (uint64_t)&v294[88]);
                v288[0] = 0;
                query_uint16_field(v190, v191, v188, v289, 1, (uint64_t)v288);
                *(_DWORD *)&v294[8] = v288[0];
                unsigned __int16 v287 = 0;
                query_uint16_field(v190, v191, v188, v289, 2, (uint64_t)&v287);
                *(_DWORD *)&v294[12] = v287 - *(_DWORD *)&v294[8];
                std::string::basic_string(&__str, v189 + 3, *(int *)&v294[8], v287 - (uint64_t)*(int *)&v294[8], (std::allocator<char> *)&v292);
                if ((v294[63] & 0x80000000) != 0) {
                  operator delete(*(void **)&v294[40]);
                }
                *(std::string *)&v294[40] = __str;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v196 = &v294[40];
                }
                else {
                  v196 = *(const char **)&v294[40];
                }
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int32_t v197 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                }
                else {
                  int32_t v197 = __str.__r_.__value_.__r.__words[1];
                }
                LODWORD(__str.__r_.__value_.__l.__data_) = 0;
                u_strFromUTF8(0, 0, 0, v196, v197, (UErrorCode *)&__str);
                if (LODWORD(__str.__r_.__value_.__l.__data_) == 10)
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  char v198 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(__str.__r_.__value_.__l.__data_) = 67109376;
                    HIDWORD(__str.__r_.__value_.__r.__words[0]) = *(_DWORD *)&v294[8];
                    LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = *(_DWORD *)&v294[12]
                                                                                 + *(_DWORD *)&v294[8];
                    _os_log_impl(&dword_20CD80000, v198, OS_LOG_TYPE_ERROR, "Word range [%d, %d) from Legacy FE results in invalid UTF8. Ignore word.", (uint8_t *)&__str, 0xEu);
                  }
                  Diagnostics::log(3, "Word range [%d, %d) from Legacy FE results in invalid UTF8. Ignore word.", v199, *(unsigned int *)&v294[8], (*(_DWORD *)&v294[12] + *(_DWORD *)&v294[8]));
                  MEMORY[0x210558E70](&v294[40], &byte_20D5A22AE);
                }
                std::string::size_type v200 = v189[1].__r_.__value_.__l.__size_;
                std::string::size_type v201 = v189[1].__r_.__value_.__r.__words[2];
                if (v200 >= v201)
                {
                  unint64_t v208 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v200 - *v272) >> 3);
                  unint64_t v209 = v208 + 1;
                  if (v208 + 1 > 0x1E1E1E1E1E1E1E1) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v210 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v201 - *v272) >> 3);
                  if (2 * v210 > v209) {
                    unint64_t v209 = 2 * v210;
                  }
                  if (v210 >= 0xF0F0F0F0F0F0F0) {
                    unint64_t v211 = 0x1E1E1E1E1E1E1E1;
                  }
                  else {
                    unint64_t v211 = v209;
                  }
                  v548 = &v189[1].__r_.__value_.__s.__data_[16];
                  if (v211) {
                    unint64_t v211 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<WordFeature>>(v211);
                  }
                  else {
                    uint64_t v212 = 0;
                  }
                  std::string::size_type v213 = v211 + 136 * v208;
                  __str.__r_.__value_.__r.__words[0] = v211;
                  __str.__r_.__value_.__l.__size_ = v213;
                  unint64_t v547 = v211 + 136 * v212;
                  *(_OWORD *)std::string::size_type v213 = *(_OWORD *)v294;
                  long long v214 = *(_OWORD *)&v294[16];
                  *(void *)(v213 + 32) = *(void *)&v294[32];
                  *(_OWORD *)(v213 + 16) = v214;
                  memset(&v294[16], 0, 24);
                  long long v215 = *(_OWORD *)&v294[40];
                  *(void *)(v213 + 56) = *(void *)&v294[56];
                  *(_OWORD *)(v213 + 40) = v215;
                  memset(&v294[40], 0, 24);
                  long long v216 = *(_OWORD *)&v294[64];
                  *(void *)(v213 + 80) = *(void *)&v294[80];
                  *(_OWORD *)(v213 + 64) = v216;
                  memset(&v294[64], 0, 24);
                  long long v217 = *(_OWORD *)&v294[88];
                  *(void *)(v213 + 104) = *(void *)&v294[104];
                  *(_OWORD *)(v213 + 88) = v217;
                  memset(&v294[88], 0, 24);
                  long long v218 = *(_OWORD *)&v294[112];
                  *(void *)(v213 + 128) = *(void *)&v294[128];
                  *(_OWORD *)(v213 + 112) = v218;
                  memset(&v294[112], 0, 24);
                  __str.__r_.__value_.__r.__words[2] = v213 + 136;
                  std::vector<WordFeature>::__swap_out_circular_buffer(v272, &__str);
                  std::string::size_type v207 = v189[1].__r_.__value_.__l.__size_;
                  std::__split_buffer<WordFeature>::~__split_buffer((uint64_t)&__str);
                }
                else
                {
                  *(_OWORD *)std::string::size_type v200 = *(_OWORD *)v294;
                  long long v202 = *(_OWORD *)&v294[16];
                  *(void *)(v200 + 32) = *(void *)&v294[32];
                  *(_OWORD *)(v200 + 16) = v202;
                  memset(&v294[16], 0, 24);
                  uint64_t v203 = *(void *)&v294[56];
                  *(_OWORD *)(v200 + 40) = *(_OWORD *)&v294[40];
                  *(void *)(v200 + 56) = v203;
                  memset(&v294[40], 0, 24);
                  long long v204 = *(_OWORD *)&v294[64];
                  *(void *)(v200 + 80) = *(void *)&v294[80];
                  *(_OWORD *)(v200 + 64) = v204;
                  memset(&v294[64], 0, 24);
                  long long v205 = *(_OWORD *)&v294[88];
                  *(void *)(v200 + 104) = *(void *)&v294[104];
                  *(_OWORD *)(v200 + 88) = v205;
                  memset(&v294[88], 0, 24);
                  long long v206 = *(_OWORD *)&v294[112];
                  *(void *)(v200 + 128) = *(void *)&v294[128];
                  *(_OWORD *)(v200 + 112) = v206;
                  memset(&v294[112], 0, 24);
                  std::string::size_type v207 = v200 + 136;
                }
                v189[1].__r_.__value_.__l.__size_ = v207;
              }
              int v219 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(v188 + 120))(v190, v191, v289, &v289);
              if ((v294[135] & 0x80000000) != 0) {
                operator delete(*(void **)&v294[112]);
              }
              if ((v294[111] & 0x80000000) != 0) {
                operator delete(*(void **)&v294[88]);
              }
              if ((v294[87] & 0x80000000) != 0) {
                operator delete(*(void **)&v294[64]);
              }
              if ((v294[63] & 0x80000000) != 0) {
                operator delete(*(void **)&v294[40]);
              }
              if ((v294[39] & 0x80000000) != 0)
              {
                operator delete(*(void **)&v294[16]);
                if (v219 < 0) {
                  goto LABEL_546;
                }
              }
              else if (v219 < 0)
              {
                goto LABEL_546;
              }
            }
            std::string::size_type v220 = v189->__r_.__value_.__l.__size_;
            std::string::pointer v221 = v189[1].__r_.__value_.__l.__data_;
            unint64_t v222 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v189[1].__r_.__value_.__l.__size_ - (void)v221) >> 3);
            int64_t v223 = v220 - v189->__r_.__value_.__r.__words[0];
            if (v220 == v189->__r_.__value_.__r.__words[0])
            {
              LODWORD(v229) = -1;
            }
            else
            {
              uint64_t v224 = 0;
              uint64_t v225 = v223 / 216;
              BOOL v226 = v223 / 216 != 0;
              uint64_t v227 = v223 / 216 - 1;
              if (v227 == 0 || !v226) {
                uint64_t v225 = 1;
              }
              unint64_t v228 = (_DWORD *)(v189->__r_.__value_.__r.__words[0] + 148);
              LODWORD(v229) = -1;
              int v230 = -1;
              do
              {
                int v231 = *((unsigned __int8 *)v228 - 124);
                if (*((unsigned char *)v228 - 124))
                {
                  BOOL v232 = 0;
                  int v233 = 1;
                }
                else
                {
                  BOOL v232 = *v228 != v230;
                  int v233 = v227 == v224 || v232;
                }
                if (v229 != -1)
                {
                  uint64_t v234 = &v221[136 * (int)v229];
                  int v236 = *((_DWORD *)v234 + 1);
                  std::string::size_type v235 = v234 + 4;
                  if (v236 != 0x7FFFFFFF) {
                    int v233 = 0;
                  }
                  if (v233 == 1)
                  {
                    int v237 = *(_DWORD *)&v221[136 * (int)v229];
                    _DWORD *v235 = v224 - v237;
                    if (v227 == v224 && !v231) {
                      _DWORD *v235 = v224 - v237 + 1;
                    }
                  }
                }
                if (v232)
                {
                  unint64_t v229 = (int)v229 + 1;
                  if (v222 <= v229)
                  {
                    exception = __cxa_allocate_exception(0x10uLL);
                    StringFormatter::StringFormatter((StringFormatter *)v294, "Running out of word features. index: %d, words size: %d", v229, -252645135* ((uint64_t)(v189[1].__r_.__value_.__l.__size_ - v189[1].__r_.__value_.__r.__words[0]) >> 3));
                    MEMORY[0x210558D40](exception, v294);
                    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
                  }
                  *(_DWORD *)&v221[136 * v229] = v224;
                }
                int v238 = *v228;
                v228 += 54;
                int v230 = v238;
                ++v224;
              }
              while (v225 != v224);
            }
            if (v222 != v229 + 1)
            {
              char v263 = __cxa_allocate_exception(0x10uLL);
              StringFormatter::StringFormatter((StringFormatter *)v294, "Not using all word features. used: %d, words size: %d", v229, -252645135 * ((uint64_t)(v189[1].__r_.__value_.__l.__size_ - v189[1].__r_.__value_.__r.__words[0]) >> 3));
              MEMORY[0x210558D40](v263, v294);
              __cxa_throw(v263, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
            }
          }
        }
      }
    }
LABEL_546:
    uint64_t v1 = (uint64_t)v275;
  }
  uint64_t v239 = *(void *)(v1 + 416);
  std::string::pointer v240 = v276[1].__r_.__value_.__l.__data_;
  std::string::size_type v241 = v276[1].__r_.__value_.__l.__size_;
  if (v239)
  {
    if (v240 != (std::string::pointer)v241)
    {
      uint64_t v242 = v239 + 24;
      uint64_t v243 = v239 + 32;
      while (1)
      {
        std::string::basic_string[abi:ne180100]<0>(v294, "name");
        if (v243 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v242, (const void **)v294))
        {
          BOOL v245 = 0;
        }
        else
        {
          uint64_t v244 = std::map<std::string,std::string>::at(v242, (const void **)v294);
          BOOL v245 = v244 + 8 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v244, (const void **)v240);
        }
        if ((v294[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v294);
          if (!v245)
          {
LABEL_557:
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            unint64_t v246 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              std::string::pointer v248 = v240;
              if (v240[23] < 0) {
                std::string::pointer v248 = *(std::string::pointer *)v240;
              }
              *(_DWORD *)unint64_t v294 = 136315138;
              *(void *)&v294[4] = v248;
              _os_log_impl(&dword_20CD80000, v246, OS_LOG_TYPE_ERROR, "Unknown phoneme '%s', replacing with sil", v294, 0xCu);
            }
            std::string::pointer v249 = v240;
            if (v240[23] < 0) {
              std::string::pointer v249 = *(std::string::pointer *)v240;
            }
            Diagnostics::log(3, "Unknown phoneme '%s', replacing with sil", v247, v249);
            v240[24] = 1;
            MEMORY[0x210558E70](v240, "sil");
          }
        }
        else if (!v245)
        {
          goto LABEL_557;
        }
        v240 += 216;
        if (v240 == (std::string::pointer)v241)
        {
          std::string::pointer v240 = v276[1].__r_.__value_.__l.__data_;
          std::string::size_type v241 = v276[1].__r_.__value_.__l.__size_;
          goto LABEL_568;
        }
      }
    }
    memset(v294, 0, 24);
  }
  else
  {
LABEL_568:
    memset(v294, 0, 24);
    if (v240 != (std::string::pointer)v241)
    {
      int v251 = *((_DWORD *)v240 + 36);
      int v250 = *((_DWORD *)v240 + 37);
      std::string::pointer v252 = v240 + 96;
      do
      {
        if (*((_DWORD *)v252 + 12) != v251)
        {
          if (*((_DWORD *)v252 + 13) == v250) {
            uint64_t v253 = ". ";
          }
          else {
            uint64_t v253 = "_ ";
          }
          std::string::append((std::string *)v294, v253);
          int v251 = *((_DWORD *)v252 + 12);
          int v250 = *((_DWORD *)v252 + 13);
        }
        int v254 = v252[23];
        if (v254 >= 0) {
          uint64_t v255 = v252;
        }
        else {
          uint64_t v255 = *(const std::string::value_type **)v252;
        }
        if (v254 >= 0) {
          std::string::size_type v256 = v252[23];
        }
        else {
          std::string::size_type v256 = *((void *)v252 + 1);
        }
        std::string::append((std::string *)v294, v255, v256);
        std::string::push_back((std::string *)v294, 32);
        std::string::pointer v257 = v252 + 120;
        v252 += 216;
      }
      while (v257 != (std::string::pointer)v241);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v258 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&__str, (uint64_t)v294);
    char v259 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__str
         : (std::string *)__str.__r_.__value_.__r.__words[0];
    LODWORD(v293.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v293.__r_.__value_.__r.__words + 4) = (std::string::size_type)v259;
    _os_log_impl(&dword_20CD80000, v258, OS_LOG_TYPE_INFO, "Phonemes : %s ", (uint8_t *)&v293, 0xCu);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__str, (uint64_t)v294);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v261 = &__str;
  }
  else {
    std::string v261 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(6, "Phonemes : %s ", v260, v261);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v279 = v264;
  std::string v280 = v267;
  atomic_fetch_add_explicit(&v267->__shared_owners_, 1uLL, memory_order_relaxed);
  (*(void (**)(unsigned char *, uint64_t *))(*(void *)v275 + 72))(v275, &v279);
  if (v280) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v280);
  }
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  if (v282.__begin_)
  {
    v282.__end_ = v282.__begin_;
    operator delete(v282.__begin_);
  }
  if (v286) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v286);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v267);
  if (v266) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v266);
  }
}

void sub_20D3BE690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,int a58,__int16 a59,char a60,char a61)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v62 - 160, *(void **)(v62 - 152));
  uint64_t v64 = -12144;
  do
  {
    std::pair<std::string,std::string>::~pair(v61);
    v61 -= 48;
    v64 += 48;
  }
  while (v64);
  if (a50 < 0) {
    operator delete(__p);
  }
  if (a36) {
    operator delete(a36);
  }
  uint64_t v65 = a14;
  if (a42)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
    uint64_t v65 = a14;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<PhoneFeature>::__push_back_slow_path<PhoneFeature const&>(uint64_t *a1, const PhoneFeature *a2)
{
  unint64_t v2 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x12F684BDA12F684) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  }
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42) {
    unint64_t v7 = 0x12F684BDA12F684;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v17 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v14 = v7;
  *(void *)&long long v15 = v7 + 216 * v2;
  *((void *)&v15 + 1) = v15;
  unint64_t v16 = v7 + 216 * v8;
  PhoneFeature::PhoneFeature((std::string *)v15, a2);
  uint64_t v9 = v15 + 216;
  uint64_t v10 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhoneFeature>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>>(v6, a1[1], a1[1], *a1, *a1, v15, v15);
  long long v11 = *(_OWORD *)a1;
  *a1 = v10;
  a1[1] = v9;
  long long v15 = v11;
  uint64_t v12 = a1[2];
  a1[2] = v16;
  unint64_t v16 = v12;
  unint64_t v14 = v11;
  std::__split_buffer<PhoneFeature>::~__split_buffer((uint64_t)&v14);
  return v9;
}

void sub_20D3BEA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<PhoneFeature>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t query_string_field(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v14 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a3 + 184))(a1, a2, a4, a5, &v14);
  if ((result & 0x80000000) == 0 && v14)
  {
    uint64_t v13 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __int16 *))(a3 + 176))(a1, a2, a4, a5, &v13, &v14);
    if ((result & 0x80000000) == 0) {
      return MEMORY[0x210558E70](a6, v13);
    }
  }
  return result;
}

uint64_t query_uint16_field(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v13 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a3 + 184))(a1, a2, a4, a5, &v13);
  if ((result & 0x80000000) == 0)
  {
    if (v13) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a3 + 168))(a1, a2, a4, a5, 1, a6, &v13);
    }
  }
  return result;
}

void WordFeature::~WordFeature(void **this)
{
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

uint64_t std::vector<WordFeature>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<WordFeature>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t NashvilleAdapterModule::clean_up(uint64_t this)
{
  *(unsigned char *)(this + 436) = 1;
  return this;
}

void NashvilleAdapterModule::~NashvilleAdapterModule(NashvilleAdapterModule *this)
{
  NashvilleAdapterModule::~NashvilleAdapterModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C203580;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 415) < 0) {
    operator delete(*((void **)this + 49));
  }
  std::__tree<std::string>::destroy((uint64_t)this + 368, *((char **)this + 47));
  std::__tree<std::string>::destroy((uint64_t)this + 344, *((char **)this + 44));
  std::__tree<std::string>::destroy((uint64_t)this + 320, *((char **)this + 41));
  std::__tree<std::string>::destroy((uint64_t)this + 296, *((char **)this + 38));
  std::__tree<std::string>::destroy((uint64_t)this + 272, *((char **)this + 35));
  Module::~Module(this);
}

void VoiceConfig::get_param<std::set<std::string>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(&v6, a2, a3, a4);
  if ((_BYTE)v6)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)a1, (unsigned __int8 *)&v6);
    int v5 = v6;
  }
  else
  {
    int v5 = 0;
    a1[2] = 0;
    a1[1] = 0;
    *a1 = a1 + 1;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v5);
}

void sub_20D3BEE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v9 + 8), a9);
  _Unwind_Resume(a1);
}

void TranslatePhonemes::pronounce(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v7 = (sqlite3_stmt **)(a1 + 16);
  uint64_t v6 = *(sqlite3_stmt **)(a1 + 16);
  if (!v6)
  {
    if (!*(void *)(a1 + 72)
      || (uint64_t v17 = sqlite3_open_MemoryMap((const void **)(a1 + 72), (sqlite3 **)(a1 + 8)),
          int v18 = v17,
          TranslatePhonemes::report_error((sqlite3 **)a1, v17, "open dictionary"),
          v18)
      || (uint64_t v19 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 8), "SELECT in_phon,out_phon,out_stress,quality FROM Phonemes WHERE in_phon GLOB ? AND in_stress=? AND alphabet=?;",
                  -1,
                  v7,
                  0),
          int v20 = v19,
          TranslatePhonemes::report_error((sqlite3 **)a1, v19, "compile query"),
          v20))
    {
LABEL_16:
      std::string::basic_string[abi:ne180100]<0>(a4, &byte_20D5A22AE);
      return;
    }
    uint64_t v6 = *v7;
    uint64_t v4 = a3;
  }
  int v8 = *((char *)v4 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const char *)v4;
  }
  else {
    uint64_t v9 = (const char *)*v4;
  }
  if (v8 >= 0) {
    int v10 = *((unsigned __int8 *)v4 + 23);
  }
  else {
    int v10 = *((_DWORD *)v4 + 2);
  }
  uint64_t v11 = sqlite3_bind_text(v6, 3, v9, v10, 0);
  uint64_t v12 = v4;
  int v13 = v11;
  TranslatePhonemes::report_error((sqlite3 **)a1, v11, "bind alphabet argument");
  if (v13) {
    goto LABEL_16;
  }
  uint64_t v99 = v12;
  unint64_t v104 = (sqlite3 **)a1;
  UTFString::replace<std::string>(&v108, a2, (UTFRegex *)(a1 + 24), a1 + 48);
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  std::string::size_type size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
  long long v15 = (std::string *)v108.__r_.__value_.__r.__words[0];
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v108.__r_.__value_.__l.__size_;
  }
  else {
    long long v15 = &v108;
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  buf.__r_.__value_.__l.__size_ = size << 32;
  buf.__r_.__value_.__s.__data_[16] = 0;
  HIDWORD(buf.__r_.__value_.__r.__words[2]) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v115, &byte_20D5A22AE);
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v106 - v105) >> 4) + 1;
  if (v21 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((v107 - v105) >> 4) > v21) {
    unint64_t v21 = 0x5555555555555556 * ((v107 - v105) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v107 - v105) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v22 = 0x555555555555555;
  }
  else {
    unint64_t v22 = v21;
  }
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)&v107;
  if (v22) {
    unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v22);
  }
  else {
    uint64_t v23 = 0;
  }
  std::string::size_type v24 = v22 + 16 * ((v106 - v105) >> 4);
  __p.__r_.__value_.__r.__words[0] = v22;
  __p.__r_.__value_.__l.__size_ = v24;
  v110.__r_.__value_.__r.__words[0] = v22 + 48 * v23;
  long long v25 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(void *)(v24 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
  *(_OWORD *)std::string::size_type v24 = v25;
  long long v26 = v115;
  *(void *)(v24 + 40) = v116;
  *(_OWORD *)(v24 + 24) = v26;
  uint64_t v116 = 0;
  long long v115 = 0uLL;
  __p.__r_.__value_.__r.__words[2] = v24 + 48;
  std::vector<TranslatePhonemes::Hypothesis>::__swap_out_circular_buffer(&v105, &__p);
  uint64_t v27 = v106;
  std::__split_buffer<TranslatePhonemes::Hypothesis>::~__split_buffer((uint64_t)&__p);
  uint64_t v106 = v27;
  if (SHIBYTE(v116) < 0) {
    operator delete((void *)v115);
  }
  do
  {
    while (1)
    {
      uint64_t v28 = v105;
      uint64_t v29 = v106 - v105;
      if (v106 - v105 == 48)
      {
        int v30 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
        if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v30 = v108.__r_.__value_.__r.__words[1];
        }
        if (*(_DWORD *)(v105 + 8) == v30) {
          goto LABEL_139;
        }
LABEL_41:
        unint64_t v32 = 0;
        goto LABEL_42;
      }
      uint64_t v31 = v29 / 48;
      if ((unint64_t)(v29 / 48) < 2) {
        goto LABEL_41;
      }
      unint64_t v32 = 0;
      int v33 = *(_DWORD *)(v105 + 8);
      int v34 = (int *)(v105 + 56);
      uint64_t v35 = 1;
      do
      {
        int v37 = *v34;
        v34 += 12;
        int v36 = v37;
        if (v37 < v33)
        {
          int v33 = v36;
          unint64_t v32 = v35;
        }
        ++v35;
      }
      while (v31 != v35);
LABEL_42:
      uint64_t v38 = v105 + 48 * v32;
      std::string buf = *(std::string *)v38;
      long long v115 = *(_OWORD *)(v38 + 24);
      uint64_t v116 = *(void *)(v38 + 40);
      *(void *)(v38 + 32) = 0;
      *(void *)(v38 + 40) = 0;
      *(void *)(v38 + 24) = 0;
      uint64_t v39 = v106;
      if (v32 < -1 - 0x5555555555555555 * ((v106 - v105) >> 4))
      {
        uint64_t v40 = v105 + 48 * v32;
        long long v41 = *(_OWORD *)(v106 - 48);
        *(void *)(v40 + 16) = *(void *)(v106 - 32);
        *(_OWORD *)uint64_t v40 = v41;
        uint64_t v42 = v40 + 24;
        if (*(char *)(v40 + 47) < 0) {
          operator delete(*(void **)v42);
        }
        long long v43 = *(_OWORD *)(v39 - 24);
        *(void *)(v42 + 16) = *(void *)(v39 - 8);
        *(_OWORD *)uint64_t v42 = v43;
        *(unsigned char *)(v39 - 1) = 0;
        *(unsigned char *)(v39 - 24) = 0;
        uint64_t v39 = v106;
      }
      if (*(char *)(v39 - 1) < 0) {
        operator delete(*(void **)(v39 - 24));
      }
      uint64_t v106 = v39 - 48;
      memset(&v113, 0, sizeof(v113));
      unsigned int v44 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&buf);
      if (v44 - 42 <= 0x31 && ((1 << (v44 - 42)) & 0x2000000200001) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v111, "[");
        std::string::push_back(&v111, v44);
        std::string v112 = v111;
        memset(&v111, 0, sizeof(v111));
        std::string::push_back(&v112, 93);
        std::string __p = v112;
        memset(&v112, 0, sizeof(v112));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(&v113, (const std::string::value_type *)p_p, v46);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        UTFString::push_back_codepoint<std::string>(&v113, v44);
      }
      std::string::push_back(&v113, 42);
      int v47 = (v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v113
          : (std::string *)v113.__r_.__value_.__r.__words[0];
      int v48 = (v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v113.__r_.__value_.__r.__words[2])
          : LODWORD(v113.__r_.__value_.__r.__words[1]);
      uint64_t v49 = sqlite3_bind_text(*v7, 1, (const char *)v47, v48, 0);
      int v50 = v49;
      TranslatePhonemes::report_error(v104, v49, "bind input argument");
      if (v50)
      {
        char v51 = 0;
      }
      else
      {
        int v103 = buf.__r_.__value_.__s.__data_[16];
        char v52 = buf.__r_.__value_.__s.__data_[16] != 0;
        std::string::size_type v53 = SLODWORD(buf.__r_.__value_.__r.__words[1]);
        if (v116 >= 0) {
          size_t v54 = HIBYTE(v116);
        }
        else {
          size_t v54 = *((void *)&v115 + 1);
        }
        float v55 = *((float *)&buf.__r_.__value_.__r.__words[2] + 1);
        long long v56 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        uint64_t v57 = &v115;
        if (v116 < 0) {
          uint64_t v57 = (long long *)v115;
        }
        __src = v57;
        do
        {
          uint64_t v58 = sqlite3_bind_int(*v7, 2, v52 & 1);
          int v59 = v58;
          TranslatePhonemes::report_error(v104, v58, "bind stress argument");
          if (v59)
          {
            char v51 = 0;
            goto LABEL_132;
          }
          char v60 = 0;
          while (1)
          {
            uint64_t v61 = sqlite3_step(*v7);
            if ((v61 & 0xFFFFFFFE) != 0x64) {
              TranslatePhonemes::report_error(v104, v61, "execute query");
            }
            if (v61 != 100) {
              break;
            }
            uint64_t v62 = (char *)sqlite3_column_text(*v7, 0);
            std::string::basic_string[abi:ne180100]<0>(&v112, v62);
            char v63 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
            if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v64 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v64 = v112.__r_.__value_.__l.__size_;
            }
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::size_type v65 = v108.__r_.__value_.__l.__size_;
              if (v108.__r_.__value_.__l.__size_ < v53 || v64 == -1) {
LABEL_174:
              }
                std::string::__throw_out_of_range[abi:ne180100]();
              unint64_t v66 = (std::string *)v108.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type v65 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
              if (HIBYTE(v108.__r_.__value_.__r.__words[2]) < v53 || v64 == -1) {
                goto LABEL_174;
              }
              unint64_t v66 = &v108;
            }
            std::string::size_type v67 = v65 - v53;
            if (v65 - v53 >= v64) {
              size_t v68 = v64;
            }
            else {
              size_t v68 = v65 - v53;
            }
            if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v69 = &v112;
            }
            else {
              int v69 = (std::string *)v112.__r_.__value_.__r.__words[0];
            }
            if (!memcmp((char *)v66 + v53, v69, v68) && v64 <= v67)
            {
              int v70 = sqlite3_column_text(*v7, 1);
              std::string v71 = (const std::string::value_type *)v70;
              if (!v54 || (int v72 = " ", !*v70)) {
                int v72 = &byte_20D5A22AE;
              }
              int v73 = sqlite3_column_int(*v7, 2);
              double v74 = sqlite3_column_double(*v7, 3);
              BOOL v75 = v103 != 0;
              if (v52 & 1 | (v73 != 0)) {
                BOOL v75 = v73 != 0;
              }
              double v76 = v74 * v55 * 0.999000013;
              int v77 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
              if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int v77 = v112.__r_.__value_.__r.__words[1];
              }
              __p.__r_.__value_.__r.__words[0] = v56;
              __p.__r_.__value_.__l.__size_ = (DWORD2(v56) + v77) | *((void *)&v56 + 1) & 0xFFFFFFFF00000000;
              float v78 = v76;
              __p.__r_.__value_.__s.__data_[16] = v75;
              *((float *)&__p.__r_.__value_.__r.__words[2] + 1) = v78;
              size_t v79 = strlen(v72);
              std::string::basic_string[abi:ne180100]((uint64_t)&v111, v54 + v79);
              if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v80 = &v111;
              }
              else {
                int v80 = (std::string *)v111.__r_.__value_.__r.__words[0];
              }
              if (v54) {
                memmove(v80, __src, v54);
              }
              int v81 = (char *)v80 + v54;
              if (v79) {
                memcpy(v81, v72, v79);
              }
              v81[v79] = 0;
              long long v82 = std::string::append(&v111, v71);
              std::string v110 = *v82;
              v82->__r_.__value_.__l.__size_ = 0;
              v82->__r_.__value_.__r.__words[2] = 0;
              v82->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v111.__r_.__value_.__l.__data_);
              }
              TranslatePhonemes::add_hypothesis(&v105, (long long *)&__p);
              if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v110.__r_.__value_.__l.__data_);
              }
              char v60 = 1;
              char v63 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
            }
            if (v63 < 0) {
              operator delete(v112.__r_.__value_.__l.__data_);
            }
          }
          sqlite3_reset(*v7);
          char v83 = v60 | ~v52;
          char v52 = 0;
        }
        while ((v83 & 1) == 0);
        unsigned int v84 = *(unsigned __int8 *)(v56 + SDWORD2(v56));
        unsigned int v85 = (v84 + 62);
        if (v84 <= 0xEF) {
          int v86 = 2;
        }
        else {
          int v86 = 3;
        }
        if (v84 <= 0xDF) {
          int v87 = v86;
        }
        else {
          int v87 = v86 + 1;
        }
        if (v85 >= 0x33) {
          int v87 = 1;
        }
        LODWORD(buf.__r_.__value_.__r.__words[1]) = v87 + DWORD2(v56);
        *((float *)&buf.__r_.__value_.__r.__words[2] + 1) = v55 * 0.2;
        TranslatePhonemes::add_hypothesis(&v105, (long long *)&buf);
        char v51 = 1;
      }
LABEL_132:
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v116) < 0) {
        break;
      }
      if ((v51 & 1) == 0) {
        goto LABEL_138;
      }
    }
    operator delete((void *)v115);
  }
  while ((v51 & 1) != 0);
LABEL_138:
  uint64_t v28 = v105;
LABEL_139:
  if (*(char *)(v28 + 47) < 0)
  {
    BOOL v89 = a4;
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)(v28 + 24), *(void *)(v28 + 32));
  }
  else
  {
    long long v88 = *(_OWORD *)(v28 + 24);
    BOOL v89 = a4;
    a4->__r_.__value_.__r.__words[2] = *(void *)(v28 + 40);
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v88;
  }
  std::string::size_type v90 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
  if ((v90 & 0x80u) != 0) {
    std::string::size_type v90 = v89->__r_.__value_.__l.__size_;
  }
  if (v90)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::string::const_iterator v91 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      Censor::global_plaintext(&__p, (uint64_t)a2);
      int v92 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v93 = *((char *)v99 + 23) >= 0 ? (std::string::size_type)v99 : *v99;
      uint64_t v94 = (a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (uint64_t)a4
          : a4->__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      *(void *)&long long v115 = v94;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    Censor::global_plaintext(&buf, (uint64_t)a2);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if (*((char *)v99 + 23) >= 0) {
      int v97 = v99;
    }
    else {
      int v97 = (uint64_t *)*v99;
    }
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v98 = (uint64_t *)a4;
    }
    else {
      unint64_t v98 = (uint64_t *)a4->__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  sqlite3_clear_bindings(*v7);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
  std::vector<TranslatePhonemes::Hypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
}

void sub_20D3BF9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (*(char *)(a16 + 23) < 0) {
    operator delete(*(void **)a16);
  }
  *(void *)(v56 - 192) = &a23;
  std::vector<TranslatePhonemes::Hypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 192));
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t TranslatePhonemes::report_error(sqlite3 **this, uint64_t a2, const char *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = sqlite3_errmsg(this[1]);
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v12 = a3;
      __int16 v13 = 2080;
      __int16 v14 = v7;
      _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_ERROR, "TranslatePhonemes: Failed to %s: %s", buf, 0x16u);
    }
    int v8 = sqlite3_errmsg(this[1]);
    Diagnostics::log(3, "TranslatePhonemes: Failed to %s: %s", v9, a3, v8);
  }
  return a2;
}

UText *UTFString::replace<std::string>(std::string *a1, const char *a2, UTFRegex *a3, uint64_t a4)
{
  UErrorCode v29 = U_ZERO_ERROR;
  LODWORD(status.__r_.__value_.__l.__data_) = 0;
  int64_t v7 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    int64_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    int64_t v8 = v7;
  }
  uint64_t v9 = utext_openUTF8(0, a2, v8, (UErrorCode *)&status);
  if (SLODWORD(status.__r_.__value_.__l.__data_) <= 0) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  UTFRegex::set_text(a3, v10, 1);
  LODWORD(status.__r_.__value_.__l.__data_) = 0;
  int v11 = *(char *)(a4 + 23);
  if (v11 >= 0) {
    uint64_t v12 = (const char *)a4;
  }
  else {
    uint64_t v12 = *(const char **)a4;
  }
  if (v11 >= 0) {
    int64_t v13 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    int64_t v13 = *(void *)(a4 + 8);
  }
  __int16 v14 = utext_openUTF8(0, v12, v13, (UErrorCode *)&status);
  if (SLODWORD(status.__r_.__value_.__l.__data_) <= 0) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  unint64_t v16 = uregex_replaceAllUText(*(URegularExpression **)a3, v15, 0, &v29);
  int64_t v17 = utext_nativeLength(v16);
  std::basic_string<char16_t>::basic_string[abi:ne180100](&status, v17);
  UErrorCode v31 = U_ZERO_ERROR;
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::basic_string<char16_t> status = &status;
  }
  else {
    p_std::basic_string<char16_t> status = (std::basic_string<char16_t> *)status.__r_.__value_.__r.__words[0];
  }
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int32_t v19 = HIBYTE(status.__r_.__value_.__r.__words[2]);
  }
  else {
    int32_t v19 = status.__r_.__value_.__r.__words[1];
  }
  int32_t v20 = utext_extract(v16, 0, 1000000, (UChar *)p_status, v19, &v31);
  std::basic_string<char16_t>::size_type v22 = v20;
  std::basic_string<char16_t>::size_type size = HIBYTE(status.__r_.__value_.__r.__words[2]);
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::basic_string<char16_t>::size_type size = status.__r_.__value_.__l.__size_;
  }
  if (size < v20)
  {
    UErrorCode v31 = U_ZERO_ERROR;
    std::basic_string<char16_t>::resize(&status, v20, v21);
    if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = &status;
    }
    else {
      std::string::size_type v24 = (std::basic_string<char16_t> *)status.__r_.__value_.__r.__words[0];
    }
    if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int32_t v25 = HIBYTE(status.__r_.__value_.__r.__words[2]);
    }
    else {
      int32_t v25 = status.__r_.__value_.__r.__words[1];
    }
    std::basic_string<char16_t>::size_type v22 = utext_extract(v16, 0, 1000000, (UChar *)v24, v25, &v31);
  }
  std::basic_string<char16_t>::resize(&status, v22, v21);
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v26 = &status;
  }
  else {
    long long v26 = (std::basic_string<char16_t> *)status.__r_.__value_.__r.__words[0];
  }
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int32_t v27 = HIBYTE(status.__r_.__value_.__r.__words[2]);
  }
  else {
    int32_t v27 = status.__r_.__value_.__r.__words[1];
  }
  UTFString::to_utf8(a1, (const UChar *)v26, v27);
  if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(status.__r_.__value_.__l.__data_);
  }
  utext_close(v15);
  return utext_close(v16);
}

void sub_20D3BFDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<TranslatePhonemes::Hypothesis>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 6;
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void TranslatePhonemes::add_hypothesis(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_5:
    unint64_t v7 = a1[2];
    if (v5 >= v7)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v4) >> 4);
      if (v11 + 1 > 0x555555555555555) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v4) >> 4);
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= v11 + 1) {
        uint64_t v13 = v11 + 1;
      }
      if (v12 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v14 = 0x555555555555555;
      }
      else {
        unint64_t v14 = v13;
      }
      int32_t v27 = a1 + 2;
      if (v14) {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v20 = v14 + 48 * v11;
      v24[0] = v14;
      v24[1] = v20;
      unint64_t v25 = v20;
      unint64_t v26 = v14 + 48 * v15;
      long long v21 = *a2;
      *(void *)(v20 + 16) = *((void *)a2 + 2);
      *(_OWORD *)unint64_t v20 = v21;
      std::basic_string<char16_t>::size_type v22 = (std::string *)(v20 + 24);
      if (*((char *)a2 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v22, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
        unint64_t v20 = v25;
      }
      else
      {
        long long v23 = *(long long *)((char *)a2 + 24);
        *(void *)(v20 + 40) = *((void *)a2 + 5);
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
      }
      unint64_t v25 = v20 + 48;
      std::vector<TranslatePhonemes::Hypothesis>::__swap_out_circular_buffer(a1, v24);
      uint64_t v19 = a1[1];
      std::__split_buffer<TranslatePhonemes::Hypothesis>::~__split_buffer((uint64_t)v24);
    }
    else
    {
      long long v8 = *a2;
      *(void *)(v5 + 16) = *((void *)a2 + 2);
      *(_OWORD *)unint64_t v5 = v8;
      uint64_t v9 = (std::string *)(v5 + 24);
      if (*((char *)a2 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
      }
      else
      {
        long long v10 = *(long long *)((char *)a2 + 24);
        *(void *)(v5 + 40) = *((void *)a2 + 5);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      uint64_t v19 = v5 + 48;
      a1[1] = v5 + 48;
    }
    a1[1] = v19;
  }
  else
  {
    uint64_t v6 = *a1;
    while (*(_DWORD *)(v6 + 8) != *((_DWORD *)a2 + 2))
    {
      v6 += 48;
      if (v6 == v5) {
        goto LABEL_5;
      }
    }
    if (*((float *)a2 + 5) > *(float *)(v6 + 20))
    {
      long long v16 = *a2;
      *(void *)(v6 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v6 = v16;
      uint64_t v17 = v6 + 24;
      if (*(char *)(v6 + 47) < 0) {
        operator delete(*(void **)v17);
      }
      long long v18 = *(long long *)((char *)a2 + 24);
      *(void *)(v17 + 16) = *((void *)a2 + 5);
      *(_OWORD *)uint64_t v17 = v18;
      *((unsigned char *)a2 + 47) = 0;
      *((unsigned char *)a2 + 24) = 0;
    }
  }
}

void sub_20D3C00A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TranslatePhonemes::Hypothesis>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<TranslatePhonemes::Hypothesis>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 48;
      long long v6 = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v6;
      long long v7 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v7;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  UTFTransliterator *result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<TranslatePhonemes::Hypothesis>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void TranslatePhonemes::~TranslatePhonemes(TranslatePhonemes *this)
{
  TranslatePhonemes::~TranslatePhonemes(this);
  JUMPOUT(0x2105595E0);
}

{
  sqlite3 *v2;
  std::__shared_weak_count *v3;

  *(void *)this = off_26C202128;
  uint64_t v2 = (sqlite3 *)*((void *)this + 1);
  if (v2)
  {
    if (*((void *)this + 2))
    {
      sqlite3_finalize(*((sqlite3_stmt **)this + 2));
      uint64_t v2 = (sqlite3 *)*((void *)this + 1);
    }
    sqlite3_close(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  UTFRegex::~UTFRegex((TranslatePhonemes *)((char *)this + 24));
}

void NativePhonemePassThrough::pronounce(uint64_t a1@<X0>, unsigned __int8 *a2@<X2>, void *a3@<X8>)
{
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  if (v5 == v6)
  {
    if (v7 >= 0) {
      uint64_t v9 = (unsigned __int8 *)(a1 + 8);
    }
    else {
      uint64_t v9 = *(unsigned __int8 **)(a1 + 8);
    }
    if ((v4 & 0x80) == 0)
    {
      if (a2[23])
      {
        while (*a2 == *v9)
        {
          ++a2;
          ++v9;
          if (!--v4) {
            goto LABEL_19;
          }
        }
        goto LABEL_16;
      }
LABEL_19:
      uint64_t v10 = *(void **)(a1 + 32);
      (*(void (**)(void *__return_ptr))(*(void *)*v10 + 16))(v11);
      (*(void (**)(void, void *))(*(void *)*v10 + 24))(*v10, v11);
      unint64_t v12 = (void **)v11;
      std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v12);
      return;
    }
    if (!memcmp(*(const void **)a2, v9, *((void *)a2 + 1))) {
      goto LABEL_19;
    }
  }
LABEL_16:
  std::string::basic_string[abi:ne180100]<0>(a3, &byte_20D5A22AE);
}

void sub_20D3C03D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void NativePhonemePassThrough::~NativePhonemePassThrough(void **this)
{
  *this = off_26C203D20;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x2105595E0);
}

{
  *this = off_26C203D20;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void GryphonFEAdapterModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_20D3C051C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void GryphonFEAdapterModule::~GryphonFEAdapterModule(GryphonFEAdapterModule *this)
{
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

void TextSourceImpl::set_text(uint64_t a1, const std::string *a2)
{
  uint64_t v4 = (char *)operator new(0xC8uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = off_26C217160;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((void *)v4 + 16) = v4 + 136;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  std::string::operator=((std::string *)v4 + 1, a2);
  *(unsigned char *)(a1 + 176) = 0;
  uint64_t v5 = (char *)operator new(0x158uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = off_26C2162F0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  *((void *)v5 + 5) = v4 + 24;
  *((void *)v5 + 6) = v4;
  *((_DWORD *)v5 + 14) = 0;
  std::string::operator=((std::string *)(v5 + 64), (const std::string *)(a1 + 104));
  *((_DWORD *)v5 + 22) = 3;
  *((_DWORD *)v5 + 74) = 0;
  *((_DWORD *)v5 + 60) = 1;
  *((_DWORD *)v5 + 62) = 1;
  *((_DWORD *)v5 + 64) = 1;
  *((_DWORD *)v5 + 66) = 1;
  *((float *)v5 + 74) = nanf(&byte_20D5A22AE);
  *((_DWORD *)v5 + 75) = 1;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 128) = v5 + 24;
  *(void *)(a1 + 136) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
}

void sub_20D3C071C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void TextSourceImpl::generate_tokens(TextSourceImpl *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 16);
  if (!v2)
  {
    *((unsigned char *)this + 8) = 1;
    return;
  }
  uint64_t v3 = (char *)this + 176;
  if (*((unsigned char *)this + 176))
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)this + 20) + 16))(&__p);
    if (__p.__r_.__value_.__r.__words[0])
    {
      std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, (long long *)&__p);
      (*(void (**)(void))(**((void **)this + 20) + 32))(*((void *)this + 20));
    }
    else
    {
      *((unsigned char *)this + 8) = 1;
      *((unsigned char *)this + 176) = 0;
    }
LABEL_43:
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    return;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext(&__p, v4);
    uint64_t v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEBUG, "Text Source: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__p, v4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(7, "Text Source: %s", v7, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = (unsigned int (***)(void, uint64_t))*((void *)this + 18);
  if (v9 && (**v9)(v9, v4))
  {
    uint64_t v10 = *((void *)this + 20);
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 17);
    uint64_t v22 = *((void *)this + 16);
    long long v23 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v10 + 56))(v10, v4, &v22);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    (*(void (**)(std::string *__return_ptr))(**((void **)this + 20) + 16))(&__p);
    if (__p.__r_.__value_.__r.__words[0])
    {
      std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, (long long *)&__p);
      (*(void (**)(void))(**((void **)this + 20) + 32))(*((void *)this + 20));
    }
    else
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      long long v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_20CD80000, v16, OS_LOG_TYPE_DEBUG, "No valid input from ssml input", buf, 2u);
      }
      Diagnostics::log(7, "No valid input from ssml input", v17);
      uint64_t v3 = (char *)this + 8;
    }
    *uint64_t v3 = 1;
    goto LABEL_43;
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 1952807028;
  memset(&v19, 0, sizeof(v19));
  __p.__r_.__value_.__l.__size_ = 0;
  if (*(char *)(v4 + 23) < 0) {
    std::string::size_type v12 = *(void *)(v4 + 8);
  }
  else {
    std::string::size_type v12 = *(unsigned __int8 *)(v4 + 23);
  }
  __p.__r_.__value_.__r.__words[2] = v12;
  uint64_t v14 = *((void *)this + 16);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = v14;
  long long v21 = v13;
  std::string::operator=(&v19, (const std::string *)v4);
  uint64_t v15 = operator new(0x30uLL);
  *(_OWORD *)((char *)v15 + 8) = 0u;
  v15[2] = 0u;
  *(void *)uint64_t v15 = off_26C215330;
  *((void *)v15 + 3) = v15 + 2;
  *(void *)std::string buf = (char *)v15 + 24;
  *(void *)&uint8_t buf[8] = v15;
  Agglomerate::set<TokenBasicItem>((uint64_t)v15 + 24, (long long *)&__p);
  std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, (long long *)buf);
  *((unsigned char *)this + 8) = 1;
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_20D3C0B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TextSourceImpl::clear(TextSourceImpl *this)
{
  *((unsigned char *)this + 176) = 0;
  return FrontendModule::clear(this);
}

void TextSourceImpl::~TextSourceImpl(TextSourceImpl *this)
{
  *(void *)this = off_26C200DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = off_26C200DD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  FrontendModule::~FrontendModule((void **)this);
}

__n128 TextSource::create(__n128 *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  uint64_t v8 = (char *)operator new(0xD0uLL);
  unint64_t v9 = (unint64_t)v8;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = off_26C215DB0;
  unint64_t v10 = (unint64_t)(v8 + 24);
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 3) = off_26C200A98;
  v8[32] = 0;
  *((void *)v8 + 5) = a2;
  *((void *)v8 + 6) = a3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 15) = 0;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
    *(void *)(v9 + 24) = off_26C1FF6F0;
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    *((void *)v8 + 15) = 0;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *((void *)v8 + 3) = off_26C1FF6F0;
  }
  *(void *)(v9 + 24) = off_26C200DD0;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v9 + 128), *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)(v9 + 128) = *(_OWORD *)a4;
    *(void *)(v9 + 144) = *(void *)(a4 + 16);
  }
  *(unsigned char *)(v9 + 200) = 0;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  uint64_t v11 = *(void *)(a4 + 128);
  std::string::size_type v12 = *(std::__shared_weak_count **)(v11 + 24);
  if (v12)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v12);
    if (v13)
    {
      uint64_t v14 = v13;
      if (!*(void *)(v11 + 16))
      {
LABEL_35:
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        goto LABEL_36;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "source");
      uint64_t v16 = *(void *)(a4 + 128);
      uint64_t v15 = *(std::__shared_weak_count **)(a4 + 136);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = *(std::__shared_weak_count **)(v16 + 24);
      if (v17 && (long long v18 = std::__shared_weak_count::lock(v17)) != 0)
      {
        std::string v19 = v18;
        uint64_t v20 = *(void *)(v16 + 16);
        if (v20
          && (uint64_t v21 = v20 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v20 + 8), (unsigned __int8 *)__p)))
        {
          int v34 = __p;
          uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, (unsigned __int8 *)__p, (long long **)&v34);
          std::string::size_type v24 = (void *)*((void *)v22 + 5);
          long long v23 = (std::__shared_weak_count *)*((void *)v22 + 6);
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          long long v23 = 0;
          std::string::size_type v24 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        if (!v15) {
          goto LABEL_22;
        }
      }
      else
      {
        long long v23 = 0;
        std::string::size_type v24 = 0;
        if (!v15)
        {
LABEL_22:
          if (v33 < 0) {
            operator delete(__p[0]);
          }
          if (v24)
          {
            uint64_t v26 = v24[37];
            uint64_t v25 = v24[38];
            if (v25) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
            }
            int32_t v27 = *(std::__shared_weak_count **)(v9 + 176);
            *(void *)(v9 + 168) = v26;
            *(void *)(v9 + 176) = v25;
            if (v27) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v27);
            }
            uint64_t v29 = v24[39];
            uint64_t v28 = v24[40];
            if (v28) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
            }
            int v30 = *(std::__shared_weak_count **)(v9 + 192);
            *(void *)(v9 + 184) = v29;
            *(void *)(v9 + 192) = v28;
            if (v30) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            }
          }
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          goto LABEL_35;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      goto LABEL_22;
    }
  }
LABEL_36:
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a1 = result;
  return result;
}

void sub_20D3C1014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  uint64_t v22 = *(std::__shared_weak_count **)(v14 + 192);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  long long v23 = *(std::__shared_weak_count **)(v14 + 176);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::string::size_type v24 = *(std::__shared_weak_count **)(v14 + 160);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (*(char *)(v14 + 151) < 0) {
    operator delete(*v18);
  }
  FrontendModule::~FrontendModule(v16);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v14);
  operator delete(v25);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<TextSourceImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TextSourceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TextSourceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TextSourcePersistentModule::~TextSourcePersistentModule(TextSourcePersistentModule *this)
{
  *(void *)this = off_26C204470;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = off_26C204470;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void ClickDetectorModule::process_data(void *a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(*(void *)v4 + 8);
  uint64_t v6 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = *(unsigned char **)(*(void *)v7 + 8);
  unint64_t v10 = *(std::__shared_weak_count **)(*(void *)v7 + 16);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(v5 + 32);
  uint64_t v12 = *(void *)(v5 + 40);
  if (v11 == v12)
  {
    uint64_t v64 = a2[1];
    uint64_t v145 = *a2;
    BOOL v146 = (std::__shared_weak_count *)v64;
    if (v64) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*a1 + 72))(a1, &v145);
    std::string::size_type v65 = v146;
    if (v146) {
      goto LABEL_140;
    }
  }
  else
  {
    std::string::size_type v139 = v9;
    unint64_t v140 = a1;
    uint64_t v136 = a2;
    if (*v9)
    {
      uint64_t v13 = (void *)a1[34];
      v13[5] = v13[4];
      v13[8] = v13[7];
      v13[11] = v13[10];
      std::vector<std::vector<int>>::__clear[abi:ne180100](v13 + 16);
      uint64_t v11 = *(void *)(v5 + 32);
      uint64_t v12 = *(void *)(v5 + 40);
    }
    uint64_t v137 = v10;
    uint64_t v138 = v6;
    if (v12 != v11)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = (void *)a1[34];
      uint64_t v17 = v16 + 16;
      do
      {
        long long v18 = (float **)(v11 + v14);
        std::string v19 = *v18;
        uint64_t v20 = v18[1];
        unint64_t v21 = v20 - *v18;
        uint64_t v156 = 0;
        int v157 = 0;
        uint64_t v158 = 0;
        std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)&v156, v19, v20, v21);
        long long v23 = (void *)v16[17];
        unint64_t v22 = v16[18];
        if ((unint64_t)v23 >= v22)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - *v17) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v17) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v26;
          }
          long long v151 = v16 + 18;
          if (v28) {
            uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v16 + 18), v28);
          }
          else {
            uint64_t v29 = 0;
          }
          int v30 = (std::__shared_weak_count *)&v29[24 * v25];
          __src = v29;
          uint64_t v148 = v30;
          uint64_t v149 = v30;
          unint64_t v150 = &v29[24 * v28];
          v30->__vftable = 0;
          v30->__shared_owners_ = 0;
          v30->__shared_weak_owners_ = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v30, v156, (uint64_t)v157, (v157 - v156) >> 3);
          ++v149;
          std::vector<std::vector<double>>::__swap_out_circular_buffer(v16 + 16, &__src);
          std::string::size_type v24 = (void *)v16[17];
          std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)&__src);
        }
        else
        {
          void *v23 = 0;
          v23[1] = 0;
          v23[2] = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v23, v156, (uint64_t)v157, (v157 - v156) >> 3);
          std::string::size_type v24 = v23 + 3;
          v16[17] = v24;
        }
        v16[17] = v24;
        if (v156)
        {
          int v157 = v156;
          operator delete(v156);
        }
        ++v15;
        uint64_t v11 = *(void *)(v5 + 32);
        v14 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v5 + 40) - v11) >> 3) > v15);
    }
    uint64_t v31 = *((void *)v139 + 7);
    unint64_t v32 = a1;
    if (*((void *)v139 + 8) != v31)
    {
      unint64_t v33 = 0;
      int v34 = (void *)a1[34];
      uint64_t v35 = (void **)(v34 + 7);
      int v36 = v34 + 9;
      int v37 = (char *)v34[8];
      do
      {
        if ((unint64_t)v37 >= *v36)
        {
          uint64_t v39 = (char *)*v35;
          uint64_t v40 = (v37 - (unsigned char *)*v35) >> 2;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = *v36 - (void)v39;
          if (v42 >> 1 > v41) {
            unint64_t v41 = v42 >> 1;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43)
          {
            unsigned int v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v34 + 9), v43);
            uint64_t v39 = (char *)v34[7];
            int v37 = (char *)v34[8];
          }
          else
          {
            unsigned int v44 = 0;
          }
          uint64_t v45 = &v44[4 * v40];
          *(_DWORD *)uint64_t v45 = *(_DWORD *)(v31 + 4 * v33);
          uint64_t v38 = v45 + 4;
          while (v37 != v39)
          {
            int v46 = *((_DWORD *)v37 - 1);
            v37 -= 4;
            *((_DWORD *)v45 - 1) = v46;
            v45 -= 4;
          }
          v34[7] = v45;
          v34[8] = v38;
          v34[9] = &v44[4 * v43];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(_DWORD *)int v37 = *(_DWORD *)(v31 + 4 * v33);
          uint64_t v38 = v37 + 4;
        }
        v34[8] = v38;
        ++v33;
        uint64_t v31 = *((void *)v139 + 7);
        int v37 = v38;
      }
      while (v33 < (*((void *)v139 + 8) - v31) >> 2);
    }
    if (v139[1])
    {
      uint64_t v47 = a1[34];
      int v48 = *(float **)(v47 + 56);
      if (v48 == *(float **)(v47 + 64))
      {
        float v55 = *(double **)(v47 + 88);
      }
      else
      {
        uint64_t v49 = (void **)(v47 + 80);
        int v50 = (void *)(v47 + 96);
        char v51 = *(double **)(v47 + 88);
        v52.f64[0] = NAN;
        v52.f64[1] = NAN;
        int8x16_t v53 = (int8x16_t)vnegq_f64(v52);
        int8x16_t v141 = v53;
        do
        {
          *(double *)v53.i64 = (float)((float)(*v48 + -32768.0) * 0.000030518);
          v8.i64[0] = 1.0;
          int8x16_t v8 = vbslq_s8(v141, v8, v53);
          double v54 = *(double *)v53.i64 - (double)(int)*(double *)v8.i64;
          if ((unint64_t)v51 >= *v50)
          {
            uint64_t v56 = (double *)*v49;
            uint64_t v57 = ((char *)v51 - (unsigned char *)*v49) >> 3;
            unint64_t v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v59 = *v50 - (void)v56;
            if (v59 >> 2 > v58) {
              unint64_t v58 = v59 >> 2;
            }
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v60 = v58;
            }
            if (v60)
            {
              uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v47 + 96, v60);
              uint64_t v56 = *(double **)(v47 + 80);
              char v51 = *(double **)(v47 + 88);
            }
            else
            {
              uint64_t v61 = 0;
            }
            uint64_t v62 = (double *)&v61[8 * v57];
            double *v62 = v54;
            float v55 = v62 + 1;
            while (v51 != v56)
            {
              uint64_t v63 = *((void *)v51-- - 1);
              *((void *)v62-- - 1) = v63;
            }
            *(void *)(v47 + 80) = v62;
            *(void *)(v47 + 88) = v55;
            *(void *)(v47 + 96) = &v61[8 * v60];
            if (v56) {
              operator delete(v56);
            }
          }
          else
          {
            *char v51 = v54;
            float v55 = v51 + 1;
          }
          *(void *)(v47 + 88) = v55;
          ++v48;
          char v51 = v55;
        }
        while (v48 != *(float **)(v47 + 64));
      }
      __src = 0;
      uint64_t v148 = 0;
      uint64_t v149 = 0;
      uint64_t v66 = (uint64_t)v55 - *(void *)(v47 + 80);
      std::vector<double>::resize((uint64_t)&__src, (int)(v66 >> 3));
      std::string::size_type v67 = *(void **)(v47 + 80);
      size_t v68 = (char *)__src;
      *(void *)__src = *v67;
      if ((int)((unint64_t)v66 >> 3) >= 2)
      {
        double v69 = -*(float *)(v47 + 8);
        uint64_t v70 = ((unint64_t)v66 >> 3) - 1;
        std::string v71 = (double *)(v68 + 8);
        int v72 = (double *)(v67 + 1);
        do
        {
          *v71++ = *v72 + v69 * *(v72 - 1);
          ++v72;
          --v70;
        }
        while (v70);
      }
      std::vector<double>::vector(&v156, *(int *)(v47 + 20) + (((char *)v148 - v68) >> 3));
      int v73 = (std::__shared_weak_count *)__src;
      uint64_t v74 = (uint64_t)(*(_DWORD *)(v47 + 20) + (*(int *)(v47 + 20) < 0)) >> 1;
      BOOL v75 = v156;
      if ((char *)__src + 8 * (*(_DWORD *)(v47 + 20) / 2) + 8 != __src)
      {
        uint64_t v76 = 8 * v74;
        int v77 = v156;
        do
        {
          *v77++ = *(std::__shared_weak_count_vtbl **)((char *)&v73->__vftable + v76);
          v76 -= 8;
        }
        while (v76 != -8);
      }
      if (v148 != v73)
      {
        memmove(&v75[8 * v74], v73, (char *)v148 - (char *)v73);
        int v73 = v148;
      }
      if (v73 != (std::__shared_weak_count *)((char *)v73 - 8 * v74 - 8))
      {
        float v78 = v157;
        uint64_t v79 = 8 * ~v74;
        p_unint64_t shared_weak_owners = &v73[-1].__shared_weak_owners_;
        do
        {
          uint64_t v81 = *p_shared_weak_owners--;
          *(void *)&v78[v79] = v81;
          v79 += 8;
        }
        while (v79);
      }
      unint64_t v82 = *(int *)(v47 + 20);
      __B[0] = 0;
      std::vector<double>::vector(v155, v82, __B);
      std::vector<double>::vector(__B, *(_DWORD *)(v47 + 20) / 2 + 1);
      std::vector<double>::vector(v153, *(int *)(v47 + 24));
      std::vector<double>::vector(__p, *(int *)(v47 + 24));
      unint64_t v83 = (((v157 - v156) >> 3) - *(int *)(v47 + 20)) / (unint64_t)*(int *)(v47 + 16);
      if ((v83 & 0x80000000) != 0)
      {
        BOOL v86 = 0;
      }
      else
      {
        int v84 = 0;
        unsigned int v85 = (const DSPDoubleSplitComplex *)(v47 + 200);
        BOOL v86 = 1;
        do
        {
          int v87 = *(_DWORD *)(v47 + 12);
          long long v88 = (const DSPDoubleComplex *)v155[0];
          int v89 = *(_DWORD *)(v47 + 20);
          if (v87 >= 1)
          {
            int v90 = v89 - v87;
            if (v89 < v87) {
              ++v90;
            }
            int v91 = v87 + (v90 >> 1);
            int v92 = *(double **)(v47 + 32);
            uint64_t v93 = (uint64_t)v90 >> 1;
            uint64_t v94 = &v156[8 * *(_DWORD *)(v47 + 16) * v84];
            do
            {
              double v95 = *v92++;
              *(&v88->real + v93) = v95 * *(double *)&v94[8 * v93];
              ++v93;
            }
            while (v93 < v91);
          }
          vDSP_ctozD(v88, 2, v85, 1, (uint64_t)(v89 + (v89 < 0)) >> 1);
          vDSP_fft_zripD(*(FFTSetupD *)(v47 + 192), v85, 1, *(int *)(v47 + 184), 1);
          std::string::size_type v96 = *(double **)(v47 + 200);
          float v97 = *v96 * 0.5;
          unint64_t v98 = __B[0];
          *__B[0] = fabsf(v97);
          uint64_t v99 = *(double **)(v47 + 208);
          float v100 = *v99 * 0.5;
          double v101 = fabsf(v100);
          int v102 = *(_DWORD *)(v47 + 20);
          if (v102 >= 0) {
            int v103 = *(_DWORD *)(v47 + 20);
          }
          else {
            int v103 = v102 + 1;
          }
          LODWORD(v104) = v103 >> 1;
          v98[(int)v104] = v101;
          if (v102 >= 4)
          {
            if ((int)v104 <= 2) {
              uint64_t v104 = 2;
            }
            else {
              uint64_t v104 = v104;
            }
            uint64_t v105 = v104 - 1;
            uint64_t v106 = v98 + 1;
            uint64_t v107 = v99 + 1;
            std::string v108 = v96 + 1;
            do
            {
              double v109 = *v108++;
              double v110 = v109 * 0.5 * (v109 * 0.5);
              double v111 = *v107++;
              *v106++ = sqrt(v110 + v111 * 0.5 * (v111 * 0.5));
              --v105;
            }
            while (v105);
          }
          LODWORD(v112) = *(_DWORD *)(v47 + 24);
          double v113 = 0.0;
          if ((int)v112 >= 1)
          {
            uint64_t v114 = 0;
            uint64_t v115 = 0;
            uint64_t v116 = 0;
            do
            {
              vDSP_dotprD(*(const double **)(*(void *)(v47 + 104) + v114), 1, __B[0], 1, (double *)((char *)v153[0] + v115), *(_DWORD *)(v47 + 20) / 2 + 1);
              ++v116;
              uint64_t v112 = *(int *)(v47 + 24);
              v115 += 8;
              v114 += 24;
            }
            while (v116 < v112);
            if ((int)v112 >= 1)
            {
              BOOL v142 = v86;
              unint64_t v117 = v83;
              uint64_t v118 = *(unsigned int *)(v47 + 24);
              long long v119 = (double *)v153[0];
              long long v120 = (double *)__p[0];
              double v121 = *(float *)v47;
              double v122 = (float)-*(float *)v47;
              uint64_t v123 = (double *)__p[0];
              uint64_t v124 = v118;
              do
              {
                long double v125 = *v119;
                if (*v119 < 0.00001)
                {
                  double *v119 = 0.00001;
                  long double v125 = 0.00001;
                }
                double v126 = (log10(v125) * 20.0 - v121) / v122;
                *uint64_t v123 = v126;
                double v127 = 0.0;
                if (v126 < 0.0 || (double v127 = 1.0, v126 > 1.0)) {
                  *uint64_t v123 = v127;
                }
                ++v123;
                ++v119;
                --v124;
              }
              while (v124);
              if (*(unsigned char *)(v47 + 28)) {
                BOOL v128 = v84 >= 2;
              }
              else {
                BOOL v128 = 1;
              }
              uint64_t v129 = v84 - *(unsigned __int8 *)(v47 + 28);
              if (!v128) {
                uint64_t v129 = 0;
              }
              unint64_t v130 = *(double **)(*(void *)(v47 + 128) + 24 * v129);
              double v113 = 0.0;
              unint64_t v83 = v117;
              do
              {
                double v131 = *v120++;
                double v132 = v131;
                double v133 = *v130++;
                double v113 = v113 + v132 - v133;
                --v118;
              }
              while (v118);
              BOOL v86 = v142;
              unsigned int v85 = (const DSPDoubleSplitComplex *)(v47 + 200);
            }
          }
          if (v113 / (double)(int)v112 > *(float *)(v47 + 4)) {
            break;
          }
          BOOL v134 = v84 == v83;
          BOOL v86 = v84++ < (int)v83;
        }
        while (!v134);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      unint64_t v32 = v140;
      if (v153[0])
      {
        v153[1] = v153[0];
        operator delete(v153[0]);
      }
      if (__B[0])
      {
        __B[1] = __B[0];
        operator delete(__B[0]);
      }
      if (v155[0])
      {
        v155[1] = v155[0];
        operator delete(v155[0]);
      }
      if (v156)
      {
        int v157 = v156;
        operator delete(v156);
      }
      if (__src)
      {
        uint64_t v148 = (std::__shared_weak_count *)__src;
        operator delete(__src);
      }
      v139[112] = v86;
      SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&__src, v140[21]);
      if (__src)
      {
        LODWORD(v156) = 1;
        Observable::emit((uint64_t **)__src, (char *)TTSSynthesizerEvent::SynthesisQualityIssue, &v156);
      }
      if (v148) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v148);
      }
    }
    std::string::size_type v135 = (std::__shared_weak_count *)v136[1];
    uint64_t v143 = *v136;
    int v144 = v135;
    if (v135) {
      atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v10 = v137;
    uint64_t v6 = v138;
    (*(void (**)(void *, uint64_t *))(*v32 + 72))(v32, &v143);
    std::string::size_type v65 = v144;
    if (v144) {
LABEL_140:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20D3C1C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20D3C1E28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<double>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    void *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  UTFTransliterator *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<double>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ClickDetectorModule::~ClickDetectorModule(ClickDetectorModule *this)
{
  *(void *)this = off_26C202740;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C202740;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
}

void MelBanks::linspace(MelBanks *this, double a2, double a3, int a4)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a4)
  {
    int v6 = a4 - 1;
    if (a4 == 1)
    {
      uint64_t v7 = (double *)operator new(8uLL);
      double *v7 = a2;
      *(void *)this = v7;
      *((void *)this + 1) = v7 + 1;
      *((void *)this + 2) = v7 + 1;
      return;
    }
    unint64_t v9 = (uint64_t *)((char *)this + 16);
    if (a4 < 2)
    {
      std::string::size_type v24 = 0;
      unint64_t v10 = 0;
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v10 = 0;
      int v11 = 0;
      do
      {
        double v12 = a2 + (a3 - a2) / (double)v6 * (double)v11;
        if ((unint64_t)v10 >= *v9)
        {
          uint64_t v13 = *(double **)this;
          uint64_t v14 = ((uint64_t)v10 - *(void *)this) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = *v9 - (void)v13;
          if (v16 >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 16, v17);
            uint64_t v13 = *(double **)this;
            unint64_t v10 = (double *)*((void *)this + 1);
          }
          else
          {
            long long v18 = 0;
          }
          std::string v19 = (double *)&v18[8 * v14];
          double *v19 = v12;
          uint64_t v20 = v19 + 1;
          while (v10 != v13)
          {
            uint64_t v21 = *((void *)v10-- - 1);
            *((void *)v19-- - 1) = v21;
          }
          *(void *)this = v19;
          *((void *)this + 1) = v20;
          *((void *)this + 2) = &v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
          unint64_t v10 = v20;
        }
        else
        {
          *v10++ = v12;
        }
        *((void *)this + 1) = v10;
        ++v11;
      }
      while (v11 != v6);
      uint64_t v22 = *v9;
      if ((unint64_t)v10 < *v9)
      {
        double *v10 = a3;
        long long v23 = v10 + 1;
LABEL_42:
        *((void *)this + 1) = v23;
        return;
      }
      std::string::size_type v24 = *(double **)this;
    }
    uint64_t v25 = v10 - v24;
    unint64_t v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v27 = v22 - (void)v24;
    if (v27 >> 2 > v26) {
      unint64_t v26 = v27 >> 2;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28)
    {
      uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 16, v28);
      std::string::size_type v24 = *(double **)this;
      unint64_t v10 = (double *)*((void *)this + 1);
    }
    else
    {
      uint64_t v29 = 0;
    }
    int v30 = (double *)&v29[8 * v25];
    uint64_t v31 = &v29[8 * v28];
    double *v30 = a3;
    long long v23 = v30 + 1;
    while (v10 != v24)
    {
      uint64_t v32 = *((void *)v10-- - 1);
      *((void *)v30-- - 1) = v32;
    }
    *(void *)this = v30;
    *((void *)this + 1) = v23;
    *((void *)this + 2) = v31;
    if (v24) {
      operator delete(v24);
    }
    goto LABEL_42;
  }
}

void sub_20D3C2208(_Unwind_Exception *exception_object)
{
}

char **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>(char **a1, char **a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    uint64_t v4 = a2;
    long long v5 = a1;
    int v6 = (char **)(a3 + 8);
    while (v5 == v6 - 1)
    {
LABEL_26:
      v5 += 3;
      v3 += 24;
      v6 += 3;
      if (v5 == v4) {
        return v6 - 1;
      }
    }
    uint64_t v7 = *v5;
    uint64_t v8 = v5[1];
    int64_t v9 = v8 - *v5;
    unint64_t v10 = v9 >> 3;
    uint64_t v11 = (uint64_t)v6[1];
    double v12 = *(v6 - 1);
    if (v9 >> 3 > (unint64_t)((v11 - (uint64_t)v12) >> 3))
    {
      if (v12)
      {
        *int v6 = v12;
        operator delete(v12);
        uint64_t v11 = 0;
        *(v6 - 1) = 0;
        *int v6 = 0;
        v6[1] = 0;
      }
      if (v9 < 0) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v11 >> 2;
      if (v11 >> 2 <= v10) {
        uint64_t v13 = v9 >> 3;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      std::vector<double>::__vallocate[abi:ne180100](v6 - 1, v14);
      double v12 = *v6;
      if (v8 != v7) {
        memmove(*v6, v7, v9);
      }
      unint64_t v15 = v6;
      goto LABEL_25;
    }
    unint64_t v15 = (char **)(v3 + 8);
    int64_t v16 = *v6 - v12;
    uint64_t v17 = v16 >> 3;
    if (v16 >> 3 >= v10)
    {
      if (v8 == v7)
      {
LABEL_24:
        uint64_t v4 = a2;
LABEL_25:
        std::__shared_weak_count *v15 = &v12[v9];
        goto LABEL_26;
      }
      std::string v19 = *(v6 - 1);
      long long v18 = *v5;
    }
    else
    {
      if (*v6 != v12)
      {
        memmove(*(v6 - 1), *v5, v16);
        double v12 = *v6;
      }
      long long v18 = &v7[8 * v17];
      int64_t v9 = v8 - v18;
      if (v8 == v18) {
        goto LABEL_24;
      }
      std::string v19 = v12;
    }
    memmove(v19, v18, v9);
    goto LABEL_24;
  }
  return (char **)v3;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  uint64_t v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_20D3C2458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        long long v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<ClickDetector>::__on_zero_shared(uint64_t a1)
{
  free(*(void **)(a1 + 224));
  free(*(void **)(a1 + 232));
  long long v5 = (void **)(a1 + 176);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v5 = (void **)(a1 + 152);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v5 = (void **)(a1 + 128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(void *)(a1 + 64) = v4;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<ClickDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ClickDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void S1NARDecoderBaseInference::get_outputs(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(__p, "semantic");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v3 + 32))(&v14, v3, __p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_2d_array<float>(v14, &v7);
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  char v9 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v9, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 2);
  int64_t v16 = (void **)&v7;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v16);
  uint64_t v8 = 0;
  long long v7 = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)&v7, v9, v10, v10 - v9);
  uint64_t v4 = (void *)*a2;
  long long v5 = (void *)v4[1];
  if (v5)
  {
    v4[2] = v5;
    operator delete(v5);
    v4[1] = 0;
    v4[2] = 0;
    void v4[3] = 0;
  }
  *(_OWORD *)(v4 + 1) = v7;
  uint64_t v6 = v9;
  void v4[3] = v8;
  if (v6)
  {
    unint64_t v10 = v6;
    operator delete(v6);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_20D3C2700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 32);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    long long v7 = (_DWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = (int)v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20D3C27BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void S1NARDecoderBaseInference::prepare_inputs(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "enc_output");
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)(*(void *)a2 + 80), &v9);
  if (v8 < 0) {
    operator delete(__p);
  }
  InferenceEngine::DataTensor::unsqueeze(v9, 0);
  uint64_t v4 = *(void (****)(void, InferenceEngine::DataTensor **))(a1 + 296);
  long long v5 = v9;
  uint64_t v6 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v4)(v4, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_20D3C28A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::string v19 = *(std::__shared_weak_count **)(v17 - 24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void S1NARDecoderBaseInference::inference(void **a1, void *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEBUG, "S1NARDecoder inference begin.", buf, 2u);
  }
  Diagnostics::log(7, "S1NARDecoder inference begin.", v7);
  char v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v26 = *a2;
  uint64_t v27 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(void **, uint64_t *))(*a1)[13])(a1, &v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(void *))(*a1[37] + 48))(a1[37]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 134217984;
    double v29 = (double)((v11.__d_.__rep_ - v9.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_DEFAULT, "S1NARDecoder inference time: %.3f s", buf, 0xCu);
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "S1NARDecoder inference time: %.3f s", v13, (double)((v12.__d_.__rep_ - v9.__d_.__rep_) / 1000000) / 1000.0);
  unint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  uint64_t v25 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(void **, uint64_t *))(*a1)[14])(a1, &v24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  (*(void (**)(void *))(*a1[37] + 56))(a1[37]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_DEBUG, "S1NARDecoder inference end.", buf, 2u);
  }
  Diagnostics::log(7, "S1NARDecoder inference end.", v16);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = (uint64_t)(*(void *)(*a2 + 16) - *(void *)(*a2 + 8)) >> 2;
    *(_DWORD *)std::string buf = 134217984;
    double v29 = *(double *)&v19;
    _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_DEBUG, "S1NARDecoder generates semantic tokens of length %zu", buf, 0xCu);
  }
  Diagnostics::log(7, "S1NARDecoder generates semantic tokens of length %zu", v18, (uint64_t)(*(void *)(*a2 + 16) - *(void *)(*a2 + 8)) >> 2);
  uint64_t v20 = (std::__shared_weak_count *)a2[1];
  uint64_t v22 = *a2;
  long long v23 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void *)(a3 + 24);
  if (!v21) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v21 + 48))(v21, &v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
}

void sub_20D3C2D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16)
{
  if (a2)
  {
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    __cxa_begin_catch(exception_object);
    (*(void (**)(void))(**(void **)(v16 + 296) + 56))(*(void *)(v16 + 296));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_20D3C2DB4(_Unwind_Exception *a1)
{
}

void sub_20D3C2DC0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x20D3C2DC8);
  }
  __clang_call_terminate(a1);
}

void S1NARDecoderBaseInference::~S1NARDecoderBaseInference(S1NARDecoderBaseInference *this)
{
  *(void *)this = off_26C2041E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C2041E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void S1NARDecoderModule::process_data(uint64_t a1, uint64_t *a2)
{
  v13[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)v4 + 8);
  long long v5 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_DEFAULT, "S1NARDecoder module start.", buf, 2u);
  }
  Diagnostics::log(5, "S1NARDecoder module start.", v8);
  std::mutex::lock((std::mutex *)(a1 + 280));
  *(unsigned char *)(a1 + 272) = 1;
  uint64_t v9 = *(void *)(a1 + 344);
  uint64_t v10 = v6;
  std::chrono::steady_clock::time_point v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v13[0] = &off_26C212A70;
  v13[1] = a1;
  v13[2] = a2;
  v13[3] = v13;
  (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v9 + 96))(v9, &v10, v13);
  std::__function::__value_func<int ()(std::shared_ptr<SemanticFeature>)>::~__value_func[abi:ne180100](v13);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::mutex::unlock((std::mutex *)(a1 + 280));
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D3C3050(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<int ()(std::shared_ptr<SemanticFeature>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  std::mutex::unlock(v5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<int ()(std::shared_ptr<SemanticFeature>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char **std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::target_type()
{
}

uint64_t std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  unint64_t v14 = *a2;
  unint64_t v15 = v2;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = *(unsigned char **)(a1 + 8);
  if (v3[160])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_DEFAULT, "S1NARDecoder inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "S1NARDecoder inference cancelled.", v5, v14, v15);
    if (v2) {
LABEL_7:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    char v8 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v8 + 8) = 0u;
    *(void *)char v8 = off_26C215330;
    *((_OWORD *)v8 + 2) = 0u;
    *((void *)v8 + 3) = v8 + 32;
    uint64_t v9 = (uint64_t)(v8 + 24);
    uint64_t v10 = *(uint64_t **)(a1 + 16);
    uint64_t v11 = *v10;
    {
      char v13 = *(std::__shared_weak_count **)(*(void *)v12 + 16);
      *(void *)std::string buf = *(void *)(*(void *)v12 + 8);
      uint64_t v17 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Agglomerate::set<std::shared_ptr<FrontendFeature>>(v9, (unint64_t *)buf);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    Agglomerate::set<std::shared_ptr<SemanticFeature>>(v9, &v14);
    *(void *)std::string buf = v8 + 24;
    uint64_t v17 = (std::__shared_weak_count *)v8;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(unsigned char *, uint8_t *))(*(void *)v3 + 72))(v3, buf);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
    if (v2) {
      goto LABEL_7;
    }
  }
  return 1;
}

void sub_20D3C3338(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void Agglomerate::set<std::shared_ptr<SemanticFeature>>(uint64_t a1, unint64_t *a2)
{
  char v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  char v8 = (char ***)off_26C206498;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  long long v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    char v8 = (char ***)off_26C206498;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void Agglomerate::ItemHolder<std::shared_ptr<SemanticFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206498;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<SemanticFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206498;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

__n128 std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C212A70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_26C212A70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::~__func()
{
}

void S1NARDecoderModule::prepare(S1NARDecoderModule *this)
{
  if (!*((unsigned char *)this + 272))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
    }
    Diagnostics::log(5, "Prepare inference.", v3);
    unint64_t v4 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)off_26C216210;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)257;
    *(_OWORD *)&v4[1].__shared_owners_ = 0u;
    v4[2].std::__shared_count = 0u;
    *(_OWORD *)&v4[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v4[3].__shared_owners_ = 0u;
    v4[4].std::__shared_count = 0u;
    *(_OWORD *)&v4[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v4[5].__shared_owners_ = 0u;
    v4[6].std::__shared_count = 0u;
    *(_OWORD *)&v4[6].__shared_weak_owners_ = 0u;
    v13[0] = (unint64_t)&v4[1];
    v13[1] = (unint64_t)v4;
    unint64_t v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)this + 360, "n_embd");
    int v14 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v5, &v14);
    unint64_t v6 = v14;
    int v14 = 0;
    std::vector<float>::vector(buf, v6, &v14);
    std::vector<std::vector<float>>::resize(&v4[4].__shared_owners_, 0x64uLL, (uint64_t)buf);
    if (*(void *)buf)
    {
      uint64_t v12 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    long long v7 = (char *)operator new(0xB0uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)long long v7 = off_26C215FA8;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *((void *)v7 + 21) = 0;
    *(_OWORD *)(v7 + 24) = 0u;
    *(void *)std::string buf = v7 + 24;
    uint64_t v12 = v7;
    char v8 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v8 + 8) = 0u;
    *(void *)char v8 = off_26C215330;
    *((_OWORD *)v8 + 2) = 0u;
    *((void *)v8 + 3) = v8 + 32;
    Agglomerate::set<std::shared_ptr<SemanticFeature>>((uint64_t)(v8 + 24), v13);
    Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v8 + 24), (unint64_t *)buf);
    long long v9 = v8 + 24;
    uint64_t v10 = (std::__shared_weak_count *)v8;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(S1NARDecoderModule *, char **))(*(void *)this + 80))(this, &v9);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_20D3C3898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void S1NARDecoderModule::~S1NARDecoderModule(S1NARDecoderModule *this)
{
  S1NARDecoderModule::~S1NARDecoderModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C202548;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 46, *((unsigned __int8 *)this + 360));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  Module::~Module(this);
}

void std::__shared_ptr_emplace<InferenceEngine::S1NARDecoderIOProcessor>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<InferenceEngine::S1NARDecoderIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2191F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<InferenceEngine::S1NARDecoderIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2191F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TransliterateImpl::merge_transliteration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v319 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(uint64_t **)a3;
  if (!*(void *)a3)
  {
    long long v9 = *a4;
    char v8 = a4[1];
    if (v8) {
      atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *(std::__shared_weak_count **)(a3 + 8);
    *(void *)a3 = v9;
    *(void *)(a3 + 8) = v8;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    return;
  }
  if (*v6 == v6[1]) {
    return;
  }
  long long v7 = *a4;
  if (**a4 == (*a4)[1])
  {
    uint64_t v11 = a4[1];
    if (v11) {
      atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v11;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    char v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_DEBUG, "Transliterator alignment is overriden by non-aligned transliterator", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Transliterator alignment is overriden by non-aligned transliterator", v14);
    return;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    unint64_t v6 = *(uint64_t **)a3;
  }
  else
  {
    std::string __str = *(std::string *)a2;
  }
  unint64_t v15 = *(std::__shared_weak_count **)(a3 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)a4[1];
  char v292 = *a4;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v274 = v16;
  uint64_t v308 = 0;
  unint64_t v309 = 0;
  uint64_t v310 = 0;
  unint64_t v307 = 0;
  uint64_t v17 = *v292;
  if (v292[1] == *v292) {
    goto LABEL_400;
  }
  unint64_t v18 = 0;
  std::string v293 = v15;
  do
  {
    uint64_t v19 = (int *)(v17 + 56 * v18);
    int v20 = v19[1] + *v19;
    unint64_t v21 = v307;
    unint64_t v294 = *v19;
    if (*v19 <= v20) {
      int v22 = v19[1] + *v19;
    }
    else {
      int v22 = *v19;
    }
    int v301 = v22;
    if (v307 >= 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3)) {
      goto LABEL_137;
    }
    LOBYTE(v23) = 0;
    do
    {
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v21)
      {
        if (0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3) <= v21 - 1) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        int v24 = 0;
        uint64_t v25 = (unsigned __int8 *)(*v6 + 31);
        unint64_t v26 = v21;
        do
        {
          if ((char)v25[24] < 0) {
            uint64_t v27 = *(void *)(v25 + 9);
          }
          else {
            LODWORD(v27) = v25[24];
          }
          if ((char)*v25 < 0) {
            uint64_t v28 = *(void *)(v25 - 15);
          }
          else {
            LODWORD(v28) = *v25;
          }
          int v24 = v24 + v27 - v28;
          v25 += 56;
          --v26;
        }
        while (v26);
        if (v15)
        {
LABEL_46:
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          unint64_t v21 = v307;
        }
      }
      else
      {
        int v24 = 0;
        if (v15) {
          goto LABEL_46;
        }
      }
      uint64_t v30 = *v6;
      uint64_t v29 = v6[1];
      unint64_t v31 = 0x6DB6DB6DB6DB6DB7 * ((v29 - *v6) >> 3);
      if (v31 <= v21) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v32 = (int *)(v30 + 56 * v21);
      if (*((char *)v32 + 31) < 0) {
        uint64_t v33 = *((void *)v32 + 2);
      }
      else {
        uint64_t v33 = *((unsigned __int8 *)v32 + 31);
      }
      uint64_t v34 = *v32 - (uint64_t)v24;
      unint64_t v35 = v33 + v34;
      if ((v23 & 1) == 0)
      {
        if ((int)v34 <= v301)
        {
          if (v20 <= (int)v34) {
            goto LABEL_91;
          }
          unint64_t v37 = v21 + 1;
          if (v21 + 1 >= v31)
          {
            int v44 = 0;
          }
          else
          {
            int v38 = *(_DWORD *)(v30 + 56 * v37);
            if (v15)
            {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v30 = *v6;
              uint64_t v29 = v6[1];
              unint64_t v31 = 0x6DB6DB6DB6DB6DB7 * ((v29 - *v6) >> 3);
            }
            if (v31 <= v21) {
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            }
            int v39 = 0;
            uint64_t v40 = (unsigned __int8 *)(v30 + 31);
            uint64_t v41 = -1;
            do
            {
              if ((char)v40[24] < 0) {
                uint64_t v42 = *(void *)(v40 + 9);
              }
              else {
                LODWORD(v42) = v40[24];
              }
              if ((char)*v40 < 0) {
                uint64_t v43 = *(void *)(v40 - 15);
              }
              else {
                LODWORD(v43) = *v40;
              }
              int v39 = v39 + v42 - v43;
              ++v41;
              v40 += 56;
            }
            while (v21 != v41);
            if (v15)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
              unint64_t v21 = v307;
              unint64_t v37 = v307 + 1;
              uint64_t v30 = *v6;
              uint64_t v29 = v6[1];
            }
            unint64_t v31 = 0x6DB6DB6DB6DB6DB7 * ((v29 - v30) >> 3);
            if (v31 <= v37) {
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            }
            int v44 = v38 - v39;
          }
          if (v37 < v31 && v20 >= v44)
          {
            if (v35 >= v294)
            {
              std::string::size_type v67 = operator new(0x18uLL);
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v67 + 3);
              buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v67 + 3);
              *std::string::size_type v67 = 3;
              v67[1] = v21;
              v67[2] = v18;
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
              std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](&v308, (uint64_t)&buf);
              if (buf.__r_.__value_.__r.__words[0]) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
LABEL_56:
              int v23 = 1;
              goto LABEL_95;
            }
            goto LABEL_94;
          }
          if (v35 >= v294)
          {
LABEL_91:
            unint64_t v58 = operator new(0x18uLL);
            buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v58 + 3);
            buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v58 + 3);
            *unint64_t v58 = 2;
            v58[1] = v21;
            v58[2] = v18;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
            std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](&v308, (uint64_t)&buf);
          }
          else
          {
            uint64_t v62 = operator new(0x18uLL);
            buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v62 + 3);
            buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v62 + 3);
            void *v62 = 1;
            v62[1] = v37;
            v62[2] = v18;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
            std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](&v308, (uint64_t)&buf);
          }
        }
        else
        {
          int v36 = operator new(0x18uLL);
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v36 + 3);
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v36 + 3);
          void *v36 = 1;
          v36[1] = v21;
          unint64_t v36[2] = v18;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
          std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](&v308, (uint64_t)&buf);
        }
        uint64_t v59 = (void *)buf.__r_.__value_.__r.__words[0];
        if (buf.__r_.__value_.__r.__words[0]) {
          goto LABEL_93;
        }
        goto LABEL_94;
      }
      if (v20 <= (int)v34) {
        goto LABEL_94;
      }
      if (v35 < v20) {
        goto LABEL_56;
      }
      uint64_t v45 = v309;
      uint64_t v47 = *((void *)v309 - 3);
      int v46 = (char *)*((void *)v309 - 2);
      uint64_t v48 = ((unint64_t)&v46[-v47] >> 3) - 1;
      if ((int)v48 <= 1)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v49 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v48;
          _os_log_impl(&dword_20CD80000, v49, OS_LOG_TYPE_ERROR, "Invalid position for merging: %d", (uint8_t *)&buf, 8u);
        }
        Diagnostics::log(3, "Invalid position for merging: %d", v50, v48);
        uint64_t v45 = v309;
        uint64_t v47 = *((void *)v309 - 3);
        int v46 = (char *)*((void *)v309 - 2);
      }
      uint64_t v52 = (uint64_t)(v45 - 8);
      unint64_t v51 = *((void *)v45 - 1);
      int8x16_t v53 = (char *)(v47 + 8 * (int)v48);
      if ((unint64_t)v46 >= v51)
      {
        unint64_t v63 = ((uint64_t)&v46[-v47] >> 3) + 1;
        if (v63 >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v64 = v51 - v47;
        if (v64 >> 2 > v63) {
          unint64_t v63 = v64 >> 2;
        }
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v63;
        }
        int v318 = (uint64_t *)(v45 - 8);
        if (v65) {
          uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v45 - 8), v65);
        }
        else {
          uint64_t v66 = 0;
        }
        uint64_t v68 = 8 * (int)v48;
        uint64_t v69 = v68 >> 3;
        uint64_t v70 = (unint64_t *)&v66[8 * (v68 >> 3)];
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
        buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v70;
        char v317 = &v66[8 * v65];
        if (v68 >> 3 == v65)
        {
          if (v68 < 1)
          {
            if (v48) {
              unint64_t v72 = v68 >> 2;
            }
            else {
              unint64_t v72 = 1;
            }
            int v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v52, v72);
            uint64_t v70 = (unint64_t *)&v73[8 * (v72 >> 2)];
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
            buf.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
            char v317 = &v73[8 * v74];
            if (v66) {
              operator delete(v66);
            }
          }
          else
          {
            if (v69 >= -1) {
              unint64_t v71 = v69 + 1;
            }
            else {
              unint64_t v71 = v69 + 2;
            }
            v70 -= v71 >> 1;
            buf.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
          }
        }
        unint64_t *v70 = v307;
        buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v70 + 1);
        std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__swap_out_circular_buffer((void **)(v52 - 16), (uint64_t)&buf, v53);
        if (buf.__r_.__value_.__r.__words[2] != buf.__r_.__value_.__l.__size_) {
          buf.__r_.__value_.__r.__words[2] += (buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[2] + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v59 = (void *)buf.__r_.__value_.__r.__words[0];
        unint64_t v15 = v293;
        if (!buf.__r_.__value_.__r.__words[0]) {
          goto LABEL_94;
        }
LABEL_93:
        operator delete(v59);
LABEL_94:
        int v23 = 0;
        goto LABEL_95;
      }
      if (v53 == v46)
      {
        int v23 = 0;
        *(void *)int v46 = v307;
        *((void *)v45 - 2) = v46 + 8;
        unint64_t v15 = v293;
      }
      else
      {
        double v54 = v46 - 8;
        float v55 = v46;
        unint64_t v15 = v293;
        if ((unint64_t)v46 >= 8)
        {
          do
          {
            uint64_t v56 = *(void *)v54;
            v54 += 8;
            *(void *)float v55 = v56;
            v55 += 8;
          }
          while (v54 < v46);
        }
        *((void *)v45 - 2) = v55;
        if (v46 != v53 + 8) {
          memmove(&v46[-8 * ((v46 - (v53 + 8)) >> 3)], v53, v46 - (v53 + 8));
        }
        uint64_t v57 = &v307;
        if (v53 <= (char *)&v307) {
          uint64_t v57 = &v307 + (*((void *)v45 - 2) > (unint64_t)&v307);
        }
        int v23 = 0;
        *(void *)int8x16_t v53 = *v57;
      }
LABEL_95:
      unint64_t v21 = v307 + 1;
      unint64_t v307 = v21;
      unint64_t v60 = 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3);
    }
    while (v21 < v60);
    if (v23 && **((void **)v309 - 3) == 3)
    {
      BOOL v75 = (char *)(*((void *)v309 - 2) - 8);
      buf.__r_.__value_.__r.__words[0] = v60 - 1;
      std::vector<unsigned long>::insert((uint64_t)(v309 - 24), v75, &buf);
    }
LABEL_137:
    ++v18;
    uint64_t v17 = *v292;
  }
  while (v18 < 0x6DB6DB6DB6DB6DB7 * ((v292[1] - *v292) >> 3));
  int v77 = v308;
  uint64_t v76 = v309;
  if (v308 != v309)
  {
    uint64_t v78 = 0;
    std::string v280 = (unint64_t *)(v6 + 2);
    uint64_t v279 = v309;
    do
    {
      uint64_t v79 = *(uint64_t **)v77;
      uint64_t v80 = *((void *)v77 + 1);
      unint64_t v81 = v80 - *(void *)v77;
      if (v81 <= 8) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v82 = *v79;
      unint64_t v83 = v79[1];
      uint64_t v84 = v83 + v78;
      if (*v79 == 3)
      {
        unint64_t v298 = *(void *)(v80 - 8);
        uint64_t v302 = *v292;
        if (0x6DB6DB6DB6DB6DB7 * ((v292[1] - *v292) >> 3) <= v298) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v98 = *v6;
        unint64_t v99 = 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3);
        if (v99 <= v83) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v296 = v79[((uint64_t)v81 >> 3) - 2];
        if (v99 <= v296) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v84)
        {
          if (0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3) <= (unint64_t)(v84 - 1)) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          int v100 = 0;
          double v101 = (unsigned __int8 *)(*v6 + 31);
          do
          {
            if ((char)v101[24] < 0) {
              uint64_t v102 = *(void *)(v101 + 9);
            }
            else {
              LODWORD(v102) = v101[24];
            }
            if ((char)*v101 < 0) {
              uint64_t v103 = *(void *)(v101 - 15);
            }
            else {
              LODWORD(v103) = *v101;
            }
            int v100 = v100 + v102 - v103;
            v101 += 56;
            --v84;
          }
          while (v84);
          if (v15)
          {
LABEL_190:
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          int v100 = 0;
          if (v15) {
            goto LABEL_190;
          }
        }
        if (*((void *)v77 + 1) - *(void *)v77 <= 8uLL) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v104 = *(void *)(*((void *)v77 + 1) - 16) + v78;
        if (v104)
        {
          if (0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3) <= (unint64_t)(v104 - 1)) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          int v105 = 0;
          uint64_t v106 = (unsigned __int8 *)(*v6 + 31);
          unint64_t v107 = v298;
          do
          {
            if ((char)v106[24] < 0) {
              uint64_t v108 = *(void *)(v106 + 9);
            }
            else {
              LODWORD(v108) = v106[24];
            }
            if ((char)*v106 < 0) {
              uint64_t v109 = *(void *)(v106 - 15);
            }
            else {
              LODWORD(v109) = *v106;
            }
            int v105 = v105 + v108 - v109;
            v106 += 56;
            --v104;
          }
          while (v104);
        }
        else
        {
          int v105 = 0;
          unint64_t v107 = v298;
        }
        unsigned __int16 v291 = v77;
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        uint64_t v179 = v302;
        std::string::size_type v180 = (int *)(v302 + 56 * v107);
        uint64_t v181 = (int *)(v98 + 56 * v296);
        int v182 = *v180 + v100;
        int v183 = *v181;
        int v184 = v181[1];
        int v288 = (int *)(v98 + 56 * v83);
        if (v182 <= *v288)
        {
          int v282 = *v180;
          int v197 = *v181;
          int v285 = *v180 + v100;
        }
        else
        {
          int v275 = *(_DWORD *)(v98 + 56 * v296 + 4);
          int v276 = *v181;
          uint64_t v278 = (int *)(v302 + 56 * v107);
          int v285 = *v288;
          uint64_t v185 = std::string::basic_string(&buf, (const std::string *)(v98 + 56 * v83 + 8), 0, v182 - *v288, (std::allocator<char> *)v312);
          uint64_t v186 = v78;
          uint64_t v187 = v302 + 56 * v298;
          uint64_t v190 = *(const std::string::value_type **)(v187 + 8);
          uint64_t v189 = v187 + 8;
          uint64_t v188 = v190;
          int v191 = *(char *)(v189 + 23);
          if (v191 >= 0) {
            long long v192 = (const std::string::value_type *)v189;
          }
          else {
            long long v192 = v188;
          }
          if (v191 >= 0) {
            std::string::size_type v193 = *(unsigned __int8 *)(v189 + 23);
          }
          else {
            std::string::size_type v193 = *(void *)(v189 + 8);
          }
          long long v194 = std::string::append(v185, v192, v193);
          std::string::size_type v195 = v194->__r_.__value_.__r.__words[0];
          v313.__r_.__value_.__r.__words[0] = v194->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v313.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v194->__r_.__value_.__r.__words[1] + 7);
          char v196 = HIBYTE(v194->__r_.__value_.__r.__words[2]);
          v194->__r_.__value_.__l.__size_ = 0;
          v194->__r_.__value_.__r.__words[2] = 0;
          v194->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(v189 + 23) < 0) {
            operator delete(*(void **)v189);
          }
          *(void *)uint64_t v189 = v195;
          *(void *)(v189 + 8) = v313.__r_.__value_.__r.__words[0];
          *(void *)(v189 + 15) = *(std::string::size_type *)((char *)v313.__r_.__value_.__r.__words + 7);
          *(unsigned char *)(v189 + 23) = v196;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          int v282 = *v288;
          int v197 = *v181;
          uint64_t v78 = v186;
          unint64_t v107 = v298;
          uint64_t v179 = v302;
          std::string::size_type v180 = v278;
          int v184 = v275;
          int v183 = v276;
        }
        int v198 = v184 + v183;
        uint64_t v199 = v197 - v105;
        std::string::size_type size = v98 + 56 * v296;
        std::string::size_type v200 = (const std::string *)(size + 8);
        LODWORD(size) = *(char *)(size + 31);
        int v77 = v291;
        if ((size & 0x80000000) != 0)
        {
          std::string::size_type size = v200->__r_.__value_.__l.__size_;
          unint64_t v206 = size + v199;
          unint64_t v203 = *(int *)(v179 + 56 * v107 + 4) + (uint64_t)*v180;
          if (v206 > v203) {
            goto LABEL_300;
          }
        }
        else
        {
          LODWORD(size) = size;
          unint64_t v202 = size + v199;
          unint64_t v203 = *(int *)(v179 + 56 * v107 + 4) + (uint64_t)*v180;
          if (v202 > v203)
          {
LABEL_300:
            std::string::basic_string(&buf, v200, v105 - v197 + (int)v203, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v313);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string buf = &buf;
            }
            else {
              p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v205 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v205 = buf.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)(v179 + 56 * v107 + 8), (const std::string::value_type *)p_buf, v205);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            goto LABEL_310;
          }
        }
        int v198 = v198 + v105 + v203 - (v197 + size);
LABEL_310:
        std::string::basic_string(&buf, &__str, v285, v198 - v285, (std::allocator<char> *)&v313);
        unint64_t v207 = v98 + 56 * v83;
        unint64_t v208 = v207 + 32;
        if (*(char *)(v207 + 55) < 0) {
          operator delete(*(void **)v208);
        }
        long long v209 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(void *)(v208 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v208 = v209;
        if (*(char *)(v208 + 23) < 0) {
          uint64_t v210 = *(void *)(v208 + 8);
        }
        else {
          LODWORD(v210) = *(unsigned __int8 *)(v208 + 23);
        }
        unint64_t v15 = v293;
        unint64_t v211 = v98 + 56 * v83;
        *(_DWORD *)(v211 + 4) = v210;
        std::string::operator=((std::string *)(v211 + 8), (const std::string *)(v302 + 56 * v107 + 8));
        *int v288 = v282;
        uint64_t v212 = *(void *)v291;
        uint64_t v213 = *((void *)v291 + 1) - *(void *)v291;
        if ((unint64_t)v213 < 0x19)
        {
          uint64_t v76 = v279;
        }
        else
        {
          uint64_t v214 = *v6 + 56 * *(void *)(v212 + 16);
          uint64_t v215 = *v6 + 56 * *(void *)(v213 + v212 - 16) + 56;
          if (v214 != v215)
          {
            uint64_t v216 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Alignment::ReplChunk *,Alignment::ReplChunk *,Alignment::ReplChunk *>(v215, v6[1], v214);
            for (uint64_t i = v6[1]; i != v216; std::allocator<Alignment::ReplChunk>::destroy[abi:ne180100](i))
              i -= 56;
            v6[1] = v216;
            int v77 = v291;
            uint64_t v213 = *((void *)v291 + 1) - *(void *)v291;
          }
          uint64_t v76 = v279;
          uint64_t v78 = v78 - (v213 >> 3) + 3;
        }
        goto LABEL_399;
      }
      if (v82 == 2)
      {
        uint64_t v295 = v78;
        if (v81 <= 0x10) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v92 = v79[2];
        uint64_t v93 = *v292;
        if (0x6DB6DB6DB6DB6DB7 * ((v292[1] - *v292) >> 3) <= v92) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v84)
        {
          if (0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3) <= (unint64_t)(v84 - 1)) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          int v94 = 0;
          double v95 = (unsigned __int8 *)(*v6 + 31);
          do
          {
            if ((char)v95[24] < 0) {
              uint64_t v96 = *(void *)(v95 + 9);
            }
            else {
              LODWORD(v96) = v95[24];
            }
            if ((char)*v95 < 0) {
              uint64_t v97 = *(void *)(v95 - 15);
            }
            else {
              LODWORD(v97) = *v95;
            }
            int v94 = v94 + v96 - v97;
            v95 += 56;
            --v84;
          }
          while (v84);
        }
        else
        {
          int v94 = 0;
        }
        uint64_t v299 = v93;
        unint64_t v303 = v92;
        if (v15)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          uint64_t v93 = v299;
          unint64_t v92 = v303;
        }
        if (*((void *)v77 + 1) - *(void *)v77 <= 8uLL) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v113 = *(void *)(*(void *)v77 + 8);
        uint64_t v114 = *v6;
        if (0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3) <= v113) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v115 = v76;
        uint64_t v116 = (int *)(v114 + 56 * v113);
        uint64_t v117 = *((unsigned __int8 *)v116 + 31);
        unsigned __int16 v289 = v116 + 2;
        if (*((char *)v116 + 31) < 0) {
          uint64_t v118 = *((void *)v116 + 2);
        }
        else {
          uint64_t v118 = *((unsigned __int8 *)v116 + 31);
        }
        std::string::size_type v139 = (int *)(v93 + 56 * v92);
        uint64_t v140 = *v139;
        int v141 = v140 + v94;
        uint64_t v142 = *v116;
        unint64_t v143 = v118 + v142 - v94;
        if ((int)v142 <= (int)v140 + v94)
        {
          uint64_t v164 = *(int *)(v93 + 56 * v92 + 4);
          if (v143 >= v164 + v140)
          {
            if ((v117 & 0x80) != 0) {
              uint64_t v117 = *((void *)v116 + 2);
            }
            uint64_t v76 = v115;
            uint64_t v225 = std::string::basic_string(&v313, (const std::string *)v289, 0, v141 - (int)v142, (std::allocator<char> *)&v311);
            uint64_t v226 = v299 + 56 * v303;
            unint64_t v229 = *(const std::string::value_type **)(v226 + 8);
            uint64_t v227 = v226 + 8;
            unint64_t v228 = v229;
            int v230 = *(char *)(v227 + 23);
            if (v230 >= 0) {
              int v231 = (const std::string::value_type *)v227;
            }
            else {
              int v231 = v228;
            }
            if (v230 >= 0) {
              std::string::size_type v232 = *(unsigned __int8 *)(v227 + 23);
            }
            else {
              std::string::size_type v232 = *(void *)(v227 + 8);
            }
            int v233 = std::string::append(v225, v231, v232);
            long long v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
            buf.__r_.__value_.__r.__words[2] = v233->__r_.__value_.__r.__words[2];
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v234;
            v233->__r_.__value_.__l.__size_ = 0;
            v233->__r_.__value_.__r.__words[2] = 0;
            v233->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string(&v306, (const std::string *)v289, v140 - v143 + v164 + v117, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v311);
            uint64_t v78 = v295;
            if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v235 = &v306;
            }
            else {
              std::string::size_type v235 = (std::string *)v306.__r_.__value_.__r.__words[0];
            }
            if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v236 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v236 = v306.__r_.__value_.__l.__size_;
            }
            int v237 = std::string::append(&buf, (const std::string::value_type *)v235, v236);
            std::string::size_type v238 = v237->__r_.__value_.__r.__words[0];
            *(void *)int v312 = v237->__r_.__value_.__l.__size_;
            *(void *)&v312[7] = *(std::string::size_type *)((char *)&v237->__r_.__value_.__r.__words[1] + 7);
            char v239 = HIBYTE(v237->__r_.__value_.__r.__words[2]);
            v237->__r_.__value_.__l.__size_ = 0;
            v237->__r_.__value_.__r.__words[2] = 0;
            v237->__r_.__value_.__r.__words[0] = 0;
            if (*((char *)v289 + 23) < 0) {
              operator delete(*(void **)v289);
            }
            *(void *)unsigned __int16 v289 = v238;
            *((void *)v289 + 1) = *(void *)v312;
            *(void *)((char *)v289 + 15) = *(void *)&v312[7];
            *((unsigned char *)v289 + 23) = v239;
            if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v306.__r_.__value_.__l.__data_);
            }
            unint64_t v15 = v293;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v313.__r_.__value_.__l.__data_);
            }
            goto LABEL_399;
          }
          uint64_t v284 = *v6;
          uint64_t v287 = *(void *)(*(void *)v77 + 8);
          if ((v117 & 0x80) != 0) {
            uint64_t v117 = *((void *)v116 + 2);
          }
          std::string::basic_string(&buf, (const std::string *)(v93 + 56 * v92 + 32), v142 - v141 + v117, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v313);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v165 = &buf;
          }
          else {
            uint64_t v165 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v166 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v166 = buf.__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)(v284 + 56 * v287 + 32), (const std::string::value_type *)v165, v166);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          uint64_t v167 = std::string::basic_string(&buf, (const std::string *)v289, 0, *v139 + v94 - *v116, (std::allocator<char> *)v312);
          uint64_t v168 = v299 + 56 * v303;
          int v171 = *(const std::string::value_type **)(v168 + 8);
          uint64_t v169 = v168 + 8;
          int v170 = v171;
          int v172 = *(char *)(v169 + 23);
          if (v172 >= 0) {
            std::string v173 = (const std::string::value_type *)v169;
          }
          else {
            std::string v173 = v170;
          }
          if (v172 >= 0) {
            std::string::size_type v174 = *(unsigned __int8 *)(v169 + 23);
          }
          else {
            std::string::size_type v174 = *(void *)(v169 + 8);
          }
          int v175 = std::string::append(v167, v173, v174);
          uint64_t v76 = v115;
          std::string::size_type v176 = v175->__r_.__value_.__r.__words[0];
          v313.__r_.__value_.__r.__words[0] = v175->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v313.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v175->__r_.__value_.__r.__words[1] + 7);
          char v177 = HIBYTE(v175->__r_.__value_.__r.__words[2]);
          v175->__r_.__value_.__l.__size_ = 0;
          v175->__r_.__value_.__r.__words[2] = 0;
          v175->__r_.__value_.__r.__words[0] = 0;
          uint64_t v78 = v295;
          if (*((char *)v289 + 23) < 0) {
            operator delete(*(void **)v289);
          }
          *(void *)unsigned __int16 v289 = v176;
          *((void *)v289 + 1) = v313.__r_.__value_.__r.__words[0];
          *(void *)((char *)v289 + 15) = *(std::string::size_type *)((char *)v313.__r_.__value_.__r.__words + 7);
          *((unsigned char *)v289 + 23) = v177;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          unint64_t v15 = v293;
          if (*(char *)(v284 + 56 * v287 + 55) < 0) {
            uint64_t v178 = *(void *)(v284 + 56 * v287 + 40);
          }
          else {
            LODWORD(v178) = *(unsigned __int8 *)(v284 + 56 * v287 + 55);
          }
          uint64_t v251 = v284;
          uint64_t v252 = v287;
        }
        else
        {
          std::string v281 = (_DWORD *)(v114 + 56 * v113);
          uint64_t v283 = *v6;
          uint64_t v286 = *(void *)(*(void *)v77 + 8);
          int v144 = (const std::string *)(v93 + 56 * v92 + 32);
          int v277 = v140 + v94;
          uint64_t v145 = std::string::basic_string(&buf, v144, 0, (int)v142 - v141, (std::allocator<char> *)v312);
          BOOL v146 = v77;
          uint64_t v147 = v283 + 56 * v286;
          unint64_t v150 = *(const std::string::value_type **)(v147 + 32);
          uint64_t v149 = v147 + 32;
          uint64_t v148 = v150;
          int v151 = *(char *)(v149 + 23);
          int64_t v152 = (uint64_t *)(v149 + 8);
          if (v151 >= 0) {
            unint64_t v153 = (const std::string::value_type *)v149;
          }
          else {
            unint64_t v153 = v148;
          }
          if (v151 >= 0) {
            std::string::size_type v154 = *(unsigned __int8 *)(v149 + 23);
          }
          else {
            std::string::size_type v154 = *(void *)(v149 + 8);
          }
          unint64_t v155 = std::string::append(v145, v153, v154);
          std::string::size_type v156 = v155->__r_.__value_.__r.__words[0];
          v313.__r_.__value_.__r.__words[0] = v155->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v313.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v155->__r_.__value_.__r.__words[1] + 7);
          char v157 = HIBYTE(v155->__r_.__value_.__r.__words[2]);
          v155->__r_.__value_.__l.__size_ = 0;
          v155->__r_.__value_.__r.__words[2] = 0;
          v155->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(v149 + 23) < 0) {
            operator delete(*(void **)v149);
          }
          *(void *)uint64_t v149 = v156;
          *int64_t v152 = v313.__r_.__value_.__r.__words[0];
          *(void *)(v149 + 15) = *(std::string::size_type *)((char *)v313.__r_.__value_.__r.__words + 7);
          *(unsigned char *)(v149 + 23) = v157;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          uint64_t v158 = *v139;
          uint64_t v159 = *(int *)(v299 + 56 * v303 + 4);
          unint64_t v15 = v293;
          int v77 = v146;
          if (v143 >= v159 + v158)
          {
            std::string::pointer v240 = std::string::basic_string(&buf, (const std::string *)v289, (int)v158 + v94 + (int)v159 - *v281, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v312);
            uint64_t v76 = v279;
            uint64_t v241 = v299 + 56 * v303;
            uint64_t v244 = *(const std::string::value_type **)(v241 + 8);
            uint64_t v242 = v241 + 8;
            uint64_t v243 = v244;
            int v245 = *(char *)(v242 + 23);
            if (v245 >= 0) {
              unint64_t v246 = (const std::string::value_type *)v242;
            }
            else {
              unint64_t v246 = v243;
            }
            if (v245 >= 0) {
              std::string::size_type v247 = *(unsigned __int8 *)(v242 + 23);
            }
            else {
              std::string::size_type v247 = *(void *)(v242 + 8);
            }
            std::string::pointer v248 = std::string::insert(v240, 0, v246, v247);
            std::string::size_type v249 = v248->__r_.__value_.__r.__words[0];
            v313.__r_.__value_.__r.__words[0] = v248->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v313.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v248->__r_.__value_.__r.__words[1] + 7);
            char v250 = HIBYTE(v248->__r_.__value_.__r.__words[2]);
            v248->__r_.__value_.__l.__size_ = 0;
            v248->__r_.__value_.__r.__words[2] = 0;
            v248->__r_.__value_.__r.__words[0] = 0;
            uint64_t v78 = v295;
            if (*((char *)v289 + 23) < 0) {
              operator delete(*(void **)v289);
            }
            *(void *)unsigned __int16 v289 = v249;
            *((void *)v289 + 1) = v313.__r_.__value_.__r.__words[0];
            *(void *)((char *)v289 + 15) = *(std::string::size_type *)((char *)v313.__r_.__value_.__r.__words + 7);
            *((unsigned char *)v289 + 23) = v250;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            unint64_t v15 = v293;
          }
          else
          {
            std::string::basic_string(&buf, v144, v143 - v158, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v313);
            uint64_t v76 = v279;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v160 = &buf;
            }
            else {
              int v160 = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v161 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v161 = buf.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)v149, (const std::string::value_type *)v160, v161);
            uint64_t v163 = v299;
            unint64_t v162 = v303;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(buf.__r_.__value_.__l.__data_);
              uint64_t v163 = v299;
              unint64_t v162 = v303;
            }
            std::string::operator=((std::string *)v289, (const std::string *)(v163 + 56 * v162 + 8));
            uint64_t v78 = v295;
          }
          uint64_t v251 = v283;
          _DWORD *v281 = v277;
          uint64_t v252 = v286;
          if (*(char *)(v149 + 23) < 0) {
            uint64_t v178 = *v152;
          }
          else {
            LODWORD(v178) = *(unsigned __int8 *)(v149 + 23);
          }
        }
        *(_DWORD *)(v251 + 56 * v252 + 4) = v178;
      }
      else if (v82 == 1)
      {
        if (v81 <= 0x10) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v85 = v79[2];
        uint64_t v86 = *v292;
        if (0x6DB6DB6DB6DB6DB7 * ((v292[1] - *v292) >> 3) <= v85) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v84)
        {
          if (0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3) <= (unint64_t)(v84 - 1)) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          int v87 = 0;
          long long v88 = (unsigned __int8 *)(*v6 + 31);
          unint64_t v89 = v83 + v78;
          do
          {
            if ((char)v88[24] < 0) {
              uint64_t v90 = *(void *)(v88 + 9);
            }
            else {
              LODWORD(v90) = v88[24];
            }
            if ((char)*v88 < 0) {
              uint64_t v91 = *(void *)(v88 - 15);
            }
            else {
              LODWORD(v91) = *v88;
            }
            int v87 = v87 + v90 - v91;
            v88 += 56;
            --v89;
          }
          while (v89);
        }
        else
        {
          int v87 = 0;
        }
        long long v119 = (_DWORD *)(v86 + 56 * v85);
        *v119 += v87;
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        uint64_t v120 = *v6;
        unint64_t v121 = v6[1];
        uint64_t v122 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v121 - *v6) >> 3);
        if (v84 == v122)
        {
          if (v121 >= *v280)
          {
            unint64_t v218 = v84 + 1;
            if ((unint64_t)(v84 + 1) > 0x492492492492492) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v280 - v120) >> 3) > v218) {
              unint64_t v218 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v280 - v120) >> 3);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v280 - v120) >> 3)) >= 0x249249249249249) {
              unint64_t v219 = 0x492492492492492;
            }
            else {
              unint64_t v219 = v218;
            }
            int v318 = v6 + 2;
            if (v219) {
              unint64_t v219 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v219);
            }
            else {
              uint64_t v220 = 0;
            }
            buf.__r_.__value_.__r.__words[0] = v219;
            buf.__r_.__value_.__l.__size_ = v219 + 56 * v84;
            buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__l.__size_;
            char v317 = (char *)(v219 + 56 * v220);
            std::allocator<Alignment::ReplChunk>::construct[abi:ne180100]<Alignment::ReplChunk,Alignment::ReplChunk const&>(buf.__r_.__value_.__l.__size_, (uint64_t)v119);
            buf.__r_.__value_.__r.__words[2] += 56;
            std::vector<Alignment::ReplChunk>::__swap_out_circular_buffer(v6, &buf);
            unint64_t v123 = v6[1];
            std::__split_buffer<Alignment::ReplChunk>::~__split_buffer((uint64_t)&buf);
          }
          else
          {
            std::allocator<Alignment::ReplChunk>::construct[abi:ne180100]<Alignment::ReplChunk,Alignment::ReplChunk const&>(v6[1], (uint64_t)v119);
            unint64_t v123 = v121 + 56;
            v6[1] = v121 + 56;
          }
          v6[1] = v123;
          unint64_t v15 = v293;
        }
        else
        {
          uint64_t v304 = *v6;
          unint64_t v124 = v120 + 56 * v84;
          if (v121 >= *v280)
          {
            unint64_t v221 = v122 + 1;
            if (v221 > 0x492492492492492) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v280 - v304) >> 3) > v221) {
              unint64_t v221 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v280 - v304) >> 3);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v280 - v304) >> 3)) >= 0x249249249249249) {
              unint64_t v222 = 0x492492492492492;
            }
            else {
              unint64_t v222 = v221;
            }
            unint64_t v315 = v6 + 2;
            if (v222)
            {
              uint64_t v224 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v222);
            }
            else
            {
              uint64_t v224 = 0;
              uint64_t v223 = 0;
            }
            uint64_t v253 = (uint64_t)&v224[56 * v84];
            v313.__r_.__value_.__r.__words[0] = (std::string::size_type)v224;
            v313.__r_.__value_.__l.__size_ = v253;
            v313.__r_.__value_.__r.__words[2] = v253;
            long long v314 = &v224[56 * v223];
            if (v84 == v223)
            {
              if (v84 < 1)
              {
                if (v84) {
                  unint64_t v254 = 2 * v84;
                }
                else {
                  unint64_t v254 = 1;
                }
                int v318 = v315;
                uint64_t v255 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v254);
                std::string::size_type v257 = v313.__r_.__value_.__l.__size_;
                if (v313.__r_.__value_.__r.__words[2] == v313.__r_.__value_.__l.__size_)
                {
                  int64x2_t v262 = vdupq_n_s64(v313.__r_.__value_.__l.__size_);
                  std::string::size_type v258 = (std::string::size_type)&v255[56 * (v254 >> 2)];
                }
                else
                {
                  std::string::size_type v258 = (std::string::size_type)&v255[56 * (v254 >> 2)
                                                     + v313.__r_.__value_.__r.__words[2]
                                                     - v313.__r_.__value_.__l.__size_];
                  char v259 = &v255[56 * (v254 >> 2)];
                  do
                  {
                    *(void *)char v259 = *(void *)v257;
                    long long v260 = *(_OWORD *)(v257 + 8);
                    *((void *)v259 + 3) = *(void *)(v257 + 24);
                    *(_OWORD *)(v259 + 8) = v260;
                    *(void *)(v257 + 16) = 0;
                    *(void *)(v257 + 24) = 0;
                    *(void *)(v257 + 8) = 0;
                    long long v261 = *(_OWORD *)(v257 + 32);
                    *((void *)v259 + 6) = *(void *)(v257 + 48);
                    *((_OWORD *)v259 + 2) = v261;
                    *(void *)(v257 + 40) = 0;
                    *(void *)(v257 + 48) = 0;
                    *(void *)(v257 + 32) = 0;
                    v259 += 56;
                    v257 += 56;
                  }
                  while (v259 != (char *)v258);
                  int64x2_t v262 = *(int64x2_t *)&v313.__r_.__value_.__r.__words[1];
                }
                std::string::size_type v263 = v313.__r_.__value_.__r.__words[0];
                uint64_t v264 = v314;
                v313.__r_.__value_.__r.__words[0] = (std::string::size_type)v255;
                v313.__r_.__value_.__l.__size_ = (std::string::size_type)&v255[56 * (v254 >> 2)];
                *(int64x2_t *)&buf.__r_.__value_.__r.__words[1] = v262;
                v313.__r_.__value_.__r.__words[2] = v258;
                long long v314 = &v255[56 * v256];
                buf.__r_.__value_.__r.__words[0] = v263;
                char v317 = v264;
                std::__split_buffer<Alignment::ReplChunk>::~__split_buffer((uint64_t)&buf);
                uint64_t v253 = v313.__r_.__value_.__r.__words[2];
              }
              else
              {
                uint64_t v253 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Alignment::ReplChunk *,Alignment::ReplChunk *,Alignment::ReplChunk *>(v253, v253, v253 - 56 * ((v84 + 1) >> 1));
                unint64_t v15 = v293;
                v313.__r_.__value_.__l.__size_ -= 56 * ((v84 + 1) >> 1);
                v313.__r_.__value_.__r.__words[2] = v253;
              }
            }
            std::allocator<Alignment::ReplChunk>::construct[abi:ne180100]<Alignment::ReplChunk,Alignment::ReplChunk const&>(v253, (uint64_t)v119);
            v313.__r_.__value_.__r.__words[2] += 56;
            std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Alignment::ReplChunk>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>>((uint64_t)v280, v124, v124, *v6, *v6, v313.__r_.__value_.__l.__size_, v313.__r_.__value_.__l.__size_);
            v313.__r_.__value_.__l.__size_ = v265;
            uint64_t v266 = v6[1];
            std::string::size_type v267 = v313.__r_.__value_.__r.__words[2];
            while (v124 != v266)
            {
              *(void *)std::string::size_type v267 = *(void *)v124;
              long long v268 = *(_OWORD *)(v124 + 8);
              *(void *)(v267 + 24) = *(void *)(v124 + 24);
              *(_OWORD *)(v267 + 8) = v268;
              *(void *)(v124 + 16) = 0;
              *(void *)(v124 + 24) = 0;
              *(void *)(v124 + 8) = 0;
              long long v269 = *(_OWORD *)(v124 + 32);
              *(void *)(v267 + 48) = *(void *)(v124 + 48);
              *(_OWORD *)(v267 + 32) = v269;
              *(void *)(v124 + 40) = 0;
              *(void *)(v124 + 48) = 0;
              *(void *)(v124 + 32) = 0;
              v267 += 56;
              v124 += 56;
            }
            v313.__r_.__value_.__r.__words[2] = v267;
            std::string::size_type v270 = *v6;
            *unint64_t v6 = v313.__r_.__value_.__l.__size_;
            v313.__r_.__value_.__l.__size_ = v270;
            std::string::size_type v271 = v6[1];
            v6[1] = v313.__r_.__value_.__r.__words[2];
            std::string::size_type v272 = v313.__r_.__value_.__l.__size_;
            v313.__r_.__value_.__r.__words[2] = v271;
            uint64_t v273 = v6[2];
            v6[2] = (uint64_t)v314;
            long long v314 = (char *)v273;
            v313.__r_.__value_.__r.__words[0] = v272;
            std::__split_buffer<Alignment::ReplChunk>::~__split_buffer((uint64_t)&v313);
          }
          else if (v124 == v121)
          {
            std::allocator<Alignment::ReplChunk>::construct[abi:ne180100]<Alignment::ReplChunk,Alignment::ReplChunk const&>(v121, (uint64_t)v119);
            v6[1] = v121 + 56;
          }
          else
          {
            uint64_t v297 = v78;
            v300 = v119;
            __int16 v290 = v77;
            unint64_t v125 = v121 - 56;
            uint64_t v126 = v6[1];
            unint64_t v127 = v121 - 56;
            if (v121 >= 0x38)
            {
              do
              {
                *(void *)uint64_t v126 = *(void *)v127;
                long long v128 = *(_OWORD *)(v127 + 8);
                *(void *)(v126 + 24) = *(void *)(v127 + 24);
                *(_OWORD *)(v126 + 8) = v128;
                *(void *)(v127 + 16) = 0;
                *(void *)(v127 + 24) = 0;
                *(void *)(v127 + 8) = 0;
                long long v129 = *(_OWORD *)(v127 + 32);
                *(void *)(v126 + 48) = *(void *)(v127 + 48);
                *(_OWORD *)(v126 + 32) = v129;
                *(void *)(v127 + 40) = 0;
                *(void *)(v127 + 48) = 0;
                *(void *)(v127 + 32) = 0;
                v126 += 56;
                v127 += 56;
              }
              while (v127 < v121);
            }
            v6[1] = v126;
            if (v121 != v124 + 56)
            {
              uint64_t v130 = 0;
              do
              {
                uint64_t v131 = v125 + v130;
                uint64_t v132 = v121 + v130;
                *(void *)(v121 + v130 - 56) = *(void *)(v125 + v130 - 56);
                double v133 = (void **)(v121 + v130 - 48);
                if (*(char *)(v121 + v130 - 25) < 0) {
                  operator delete(*v133);
                }
                long long v134 = *(_OWORD *)(v131 - 48);
                *(void *)(v121 + v130 - 32) = *(void *)(v131 - 32);
                *(_OWORD *)double v133 = v134;
                *(unsigned char *)(v131 - 25) = 0;
                *(unsigned char *)(v131 - 48) = 0;
                std::string::size_type v135 = (void **)(v132 - 24);
                if (*(char *)(v132 - 1) < 0) {
                  operator delete(*v135);
                }
                uint64_t v136 = v125 + v130;
                long long v137 = *(_OWORD *)(v125 + v130 - 24);
                *(void *)(v132 - 8) = *(void *)(v125 + v130 - 8);
                *(_OWORD *)std::string::size_type v135 = v137;
                *(unsigned char *)(v136 - 1) = 0;
                *(unsigned char *)(v136 - 24) = 0;
                v130 -= 56;
              }
              while (-8 * ((uint64_t)(v121 - (v124 + 56)) >> 3) != v130);
            }
            uint64_t v138 = v300;
            if (v124 <= (unint64_t)v300) {
              uint64_t v138 = &v300[14 * (v6[1] > (unint64_t)v300)];
            }
            *(void *)unint64_t v124 = *(void *)v138;
            unint64_t v15 = v293;
            std::string::operator=((std::string *)(v304 + 56 * v84 + 8), (const std::string *)(v138 + 2));
            int v77 = v290;
            uint64_t v76 = v279;
            uint64_t v78 = v297;
            std::string::operator=((std::string *)(v304 + 56 * v84 + 32), (const std::string *)(v138 + 8));
          }
        }
        ++v78;
      }
      else
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        double v110 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          std::string::size_type v112 = **(void **)v77;
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v112;
          _os_log_impl(&dword_20CD80000, v110, OS_LOG_TYPE_ERROR, "Unknown operation in alignment, ignore: %lu", (uint8_t *)&buf, 0xCu);
        }
        Diagnostics::log(3, "Unknown operation in alignment, ignore: %lu", v111, **(void **)v77);
      }
LABEL_399:
      v77 += 24;
    }
    while (v77 != v76);
  }
LABEL_400:
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v308;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v274) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v274);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_20D3C5614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  *(void *)(v43 + 8) = v44;
  a35 = &a42;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void TransliterateImpl::generate_tokens(TransliterateImpl *this)
{
  uint64_t v1 = this;
  int v77 = (void *)((char *)this + 32);
  uint64_t v98 = *MEMORY[0x263EF8340];
  while (!*((unsigned char *)v1 + 8))
  {
    uint64_t v2 = *((void *)v1 + 2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 3);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v2 + 16))(v84);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(void *)&v84[0];
    if (*(void *)&v84[0])
    {
      uint64_t v5 = *((void *)v1 + 2);
      unint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 3);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      uint64_t v7 = *(void *)&v84[0];
      uint64_t v75 = v4;
      if ((void *)(v7 + 8) == v8) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v8[5] + 8;
      }
      uint64_t v10 = (_OWORD *)(v9 + 24);
      if ((*(char *)(v9 + 47) & 0x80000000) == 0)
      {
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = *v10;
        v83.__r_.__value_.__r.__words[2] = *(void *)(v9 + 40);
        goto LABEL_19;
      }
      std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)(v9 + 24), *(void *)(v9 + 32));
      if (*(char *)(v9 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v9 + 24), *(void *)(v9 + 32));
      }
      else
      {
LABEL_19:
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v10;
        __str.__r_.__value_.__r.__words[2] = *(void *)(v9 + 40);
      }
      uint64_t v80 = 0;
      unint64_t v81 = 0;
      uint64_t v11 = (unint64_t **)*((void *)v1 + 13);
      uint64_t v12 = *v11;
      char v13 = v11[1];
      if (*v11 == v13)
      {
        uint64_t v33 = 0;
      }
      else
      {
        do
        {
          unint64_t v14 = *v12;
          std::string::operator=(&v83, &__str);
          LODWORD(code.__r_.__value_.__l.__data_) = 0;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          UTFString::to_utf16(&v92, (const char *)p_str, size);
          if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v17 = &v92;
          }
          else {
            uint64_t v17 = (std::basic_string<char16_t> *)v92.__r_.__value_.__r.__words[0];
          }
          LODWORD(v91) = u_strlen((const UChar *)v17);
          LODWORD(v90) = v91;
          utrans_transUChars();
          std::basic_string<char16_t>::resize(&v92, (int)v91, v18);
          int data = (int)code.__r_.__value_.__l.__data_;
          if (LODWORD(code.__r_.__value_.__l.__data_) == 15)
          {
            LODWORD(code.__r_.__value_.__l.__data_) = 0;
            if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v20 = &v92;
            }
            else {
              int v20 = (std::basic_string<char16_t> *)v92.__r_.__value_.__r.__words[0];
            }
            LODWORD(v91) = u_strlen((const UChar *)v20);
            LODWORD(v90) = v91;
            utrans_transUChars();
            int data = (int)code.__r_.__value_.__l.__data_;
          }
          if (data < 1)
          {
            if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v27 = &v92;
            }
            else {
              uint64_t v27 = (std::basic_string<char16_t> *)v92.__r_.__value_.__r.__words[0];
            }
            if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int32_t v28 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
            }
            else {
              int32_t v28 = v92.__r_.__value_.__r.__words[1];
            }
            UTFString::to_utf8(&__p, (const UChar *)v27, v28);
            std::string::size_type v29 = __p.__r_.__value_.__r.__words[2];
            long long v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            std::string __p = __str;
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v30;
            __str.__r_.__value_.__r.__words[2] = v29;
          }
          else
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            unint64_t v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              int v22 = u_errorName((UErrorCode)code.__r_.__value_.__l.__data_);
              Censor::global_plaintext(&__p, (uint64_t)&__str);
              int v23 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &__p
                  : (std::string *)__p.__r_.__value_.__r.__words[0];
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v23;
              _os_log_impl(&dword_20CD80000, v21, OS_LOG_TYPE_ERROR, "Error transliterate: %s, '%s' ", (uint8_t *)&buf, 0x16u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            int v24 = u_errorName((UErrorCode)code.__r_.__value_.__l.__data_);
            Censor::global_plaintext(&__p, (uint64_t)&__str);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            Diagnostics::log(3, "Error transliterate: %s, '%s' ", v25, v24, p_p);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v92.__r_.__value_.__l.__data_);
          }
          unint64_t v31 = (uint64_t **)*((void *)v1 + 15);
          do
          {
            unint64_t v31 = (uint64_t **)v31[1];
            if (!v31) {
LABEL_169:
            }
              std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
            while (1)
            {
              unint64_t v32 = (unint64_t)v31[4];
              if (v14 >= v32) {
                break;
              }
              unint64_t v31 = (uint64_t **)*v31;
              if (!v31) {
                goto LABEL_169;
              }
            }
          }
          while (v32 < v14);
          ((void (*)(std::basic_string<char16_t> *__return_ptr, std::string *, std::string *))v31[5])(&v92, &v83, &__str);
          if (*(char *)(v9 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)(v9 + 24), *(void *)(v9 + 32));
          }
          else
          {
            *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *v10;
            v79.__r_.__value_.__r.__words[2] = *(void *)(v9 + 40);
          }
          long long v78 = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
          if (v92.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v92.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          (*(void (**)(TransliterateImpl *, std::string *, void **, long long *))(*(void *)v1 + 56))(v1, &v79, &v80, &v78);
          if (*((void *)&v78 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78 + 1));
          }
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
          if (v92.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__r_.__value_.__l.__size_);
          }
          ++v12;
        }
        while (v12 != v13);
        uint64_t v33 = v80;
      }
      std::string::size_type v34 = __str.__r_.__value_.__r.__words[2];
      long long v35 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v10;
      __str.__r_.__value_.__r.__words[2] = *(void *)(v9 + 40);
      _OWORD *v10 = v35;
      *(void *)(v9 + 40) = v34;
      if (!v33 || *v33 == v33[1])
      {
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v77, v84);
        uint64_t v4 = v75;
      }
      else
      {
        uint64_t v76 = v33;
        long long v36 = v84[0];
        if (*((void *)&v84[0] + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v84[0] + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (v81) {
          atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((void *)(v36 + 8) == v37) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = v37[5] + 8;
        }
        if ((void *)(v36 + 8) == v39) {
          uint64_t v74 = 0;
        }
        else {
          uint64_t v74 = (unsigned char *)(v39[5] + 8);
        }
        if (*(char *)(v38 + 47) < 0) {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v38 + 24), *(void *)(v38 + 32));
        }
        else {
          std::string buf = *(std::string *)(v38 + 24);
        }
        uint64_t v40 = *v76;
        if (v76[1] != *v76)
        {
          uint64_t v41 = 0;
          unint64_t v42 = 0;
          std::string::size_type v43 = 0;
          unint64_t v44 = 0;
          do
          {
            if (v44 < *(int *)(v40 + v41))
            {
              uint64_t v45 = operator new(0x30uLL);
              *(_OWORD *)((char *)v45 + 8) = 0u;
              *(void *)uint64_t v45 = off_26C215330;
              v45[2] = 0u;
              *((void *)v45 + 3) = v45 + 2;
              uint64_t v46 = (uint64_t)v45 + 24;
              code.__r_.__value_.__r.__words[0] = (std::string::size_type)v45 + 24;
              code.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
              double v95 = 0;
              long long v93 = 0u;
              long long v94 = 0u;
              LODWORD(v92.__r_.__value_.__l.__data_) = 1952807028;
              std::string::basic_string(&__p, &buf, v43, *(int *)(v40 + v41) - v44, (std::allocator<char> *)&v91);
              uint64_t v47 = *(void *)(v38 + 48);
              uint64_t v48 = *(std::__shared_weak_count **)(v38 + 56);
              long long v93 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)&long long v94 = *((void *)&__p.__r_.__value_.__l + 2);
              if (v48)
              {
                atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v49 = v95;
                *((void *)&v94 + 1) = v47;
                double v95 = v48;
                if (v49) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v49);
                }
              }
              else
              {
                *((void *)&v94 + 1) = v47;
                double v95 = 0;
              }
              char v50 = BYTE7(v94);
              if ((SBYTE7(v94) & 0x80u) == 0) {
                std::basic_string<char16_t>::size_type v51 = BYTE7(v94);
              }
              else {
                std::basic_string<char16_t>::size_type v51 = *((void *)&v93 + 1);
              }
              v92.__r_.__value_.__r.__words[2] = v51;
              v92.__r_.__value_.__l.__size_ = *(void *)(v38 + 8) + v44;
              Agglomerate::set<TokenBasicItem>(v46, (long long *)&v92);
              std::deque<std::shared_ptr<Agglomerate>>::push_back(v77, (long long *)&code);
              if (v48)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v48);
                char v50 = BYTE7(v94);
              }
              if (v50 < 0) {
                operator delete((void *)v93);
              }
              if (code.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)code.__r_.__value_.__l.__size_);
              }
              v43 += v51;
              v44 += v51;
            }
            uint64_t v52 = operator new(0x30uLL);
            *(_OWORD *)((char *)v52 + 8) = 0u;
            v52[2] = 0u;
            *(void *)uint64_t v52 = off_26C215330;
            *((void *)v52 + 3) = v52 + 2;
            *(void *)&long long v91 = (char *)v52 + 24;
            *((void *)&v91 + 1) = v52;
            double v95 = 0;
            long long v93 = 0u;
            long long v94 = 0u;
            LODWORD(v92.__r_.__value_.__l.__data_) = 1952807028;
            std::string::operator=((std::string *)&v93, (const std::string *)(v40 + v41 + 8));
            uint64_t v54 = *(void *)(v38 + 48);
            int8x16_t v53 = *(std::__shared_weak_count **)(v38 + 56);
            if (v53) {
              atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            float v55 = v95;
            *((void *)&v94 + 1) = v54;
            double v95 = v53;
            if (v55) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v55);
            }
            if (*(char *)(v40 + v41 + 55) < 0) {
              std::basic_string<char16_t>::size_type v56 = *(void *)(v40 + v41 + 40);
            }
            else {
              std::basic_string<char16_t>::size_type v56 = *(unsigned __int8 *)(v40 + v41 + 55);
            }
            v92.__r_.__value_.__r.__words[2] = v56;
            v92.__r_.__value_.__l.__size_ = *(void *)(v38 + 8) + *(int *)(v40 + v41);
            uint64_t v57 = v91;
            Agglomerate::set<TokenBasicItem>(v91, (long long *)&v92);
            std::basic_string<char16_t>::size_type v58 = v92.__r_.__value_.__r.__words[2];
            if ((SBYTE7(v94) & 0x80u) == 0) {
              uint64_t v59 = BYTE7(v94);
            }
            else {
              uint64_t v59 = *((void *)&v93 + 1);
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&code;
            std::deque<std::shared_ptr<Agglomerate>>::push_back(v77, &v91);
            v44 += v58;
            v43 += v59;
            unint64_t v60 = v76;
            if (v42 == 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v76[1] - *v76) >> 3) - 1)
            {
              std::string::size_type v61 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v61 = buf.__r_.__value_.__l.__size_;
              }
              if (v43 < v61)
              {
                uint64_t v62 = operator new(0x30uLL);
                *(_OWORD *)((char *)v62 + 8) = 0u;
                *(void *)uint64_t v62 = off_26C215330;
                v62[2] = 0u;
                *((void *)v62 + 3) = v62 + 2;
                uint64_t v63 = (uint64_t)v62 + 24;
                *(void *)&long long v90 = (char *)v62 + 24;
                *((void *)&v90 + 1) = v62;
                unint64_t v89 = 0;
                long long v87 = 0u;
                long long v88 = 0u;
                LODWORD(__p.__r_.__value_.__l.__data_) = 1952807028;
                std::string::basic_string(&code, &buf, v43, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v96);
                uint64_t v64 = *(void *)(v38 + 48);
                unint64_t v65 = *(std::__shared_weak_count **)(v38 + 56);
                long long v87 = *(_OWORD *)&code.__r_.__value_.__l.__data_;
                *(void *)&long long v88 = *((void *)&code.__r_.__value_.__l + 2);
                if (v65)
                {
                  atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
                  uint64_t v66 = v89;
                  *((void *)&v88 + 1) = v64;
                  unint64_t v89 = v65;
                  if (v66) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
                  }
                }
                else
                {
                  *((void *)&v88 + 1) = v64;
                  unint64_t v89 = 0;
                }
                char v67 = BYTE7(v88);
                if ((SBYTE7(v88) & 0x80u) == 0) {
                  std::string::size_type v68 = BYTE7(v88);
                }
                else {
                  std::string::size_type v68 = *((void *)&v87 + 1);
                }
                __p.__r_.__value_.__r.__words[2] = v68;
                __p.__r_.__value_.__l.__size_ = *(void *)(v38 + 8) + v44;
                Agglomerate::set<TokenBasicItem>(v63, (long long *)&__p);
                std::deque<std::shared_ptr<Agglomerate>>::push_back(v77, &v90);
                if (v65)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v65);
                  char v67 = BYTE7(v88);
                }
                if (v67 < 0) {
                  operator delete((void *)v87);
                }
                if (*((void *)&v90 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v90 + 1));
                }
                v43 += v68;
                v44 += v68;
                unint64_t v60 = v76;
              }
            }
            if (v95) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v95);
            }
            if (SBYTE7(v94) < 0) {
              operator delete((void *)v93);
            }
            if (*((void *)&v91 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91 + 1));
            }
            ++v42;
            uint64_t v69 = v60;
            uint64_t v40 = *v60;
            v41 += 56;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((v69[1] - v40) >> 3) > v42);
        }
        uint64_t v1 = this;
        uint64_t v4 = v75;
        if (v74)
        {
          uint64_t v70 = *((void *)this + 9);
          if (v70)
          {
            uint64_t v71 = *(void *)(*(void *)(*((void *)this + 5)
                                        + (((unint64_t)(v70 + *((void *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * (v70 + *((unsigned char *)this + 64) - 1));
            v92.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&__p;
            if (!v72) {
              operator new();
            }
            *(unsigned char *)(v72 + 8) = *v74;
          }
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (*((void *)&v36 + 1))
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
        }
      }
      if (v81) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v81);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      goto LABEL_165;
    }
    *((unsigned char *)v1 + 8) = 1;
LABEL_165:
    if (*((void *)&v84[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v84[0] + 1));
    }
    if (!v4) {
      return;
    }
  }
}

void sub_20D3C6430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  _Unwind_Resume(exception_object);
}

void TransliterateImpl::~TransliterateImpl(TransliterateImpl *this)
{
  TransliterateImpl::~TransliterateImpl(this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = off_26C202170;
  if (**((void **)this + 13) != *(void *)(*((void *)this + 13) + 8))
  {
    do
    {
      utrans_close();
      uint64_t v2 = (uint64_t *)*((void *)this + 13);
      uint64_t v3 = *v2;
      uint64_t v4 = v2[1] - 8;
      v2[1] = v4;
    }
    while (v3 != v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  FrontendModule::~FrontendModule((void **)this);
}

void *align_default@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = off_26C219850;
  v2[4] = 0;
  v2[5] = 0;
  a1[1] = v2;
  v2[3] = 0;
  __n128 result = v2 + 3;
  *a1 = result;
  return result;
}

void std::__shared_ptr_emplace<std::vector<Alignment::ReplChunk>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::allocator<Alignment::ReplChunk>::destroy[abi:ne180100](v3);
      }
      while (v3 != v1);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::allocator<Alignment::ReplChunk>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<Alignment::ReplChunk>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<Alignment::ReplChunk>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void align_full_2_half(const std::string *a1@<X0>, const std::string *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0;
  *unint64_t v6 = off_26C219850;
  v6[4] = 0;
  v6[5] = 0;
  std::string v79 = v6 + 3;
  *a3 = v6 + 3;
  a3[1] = v6;
  uint64_t v80 = v6;
  uint64_t v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  std::string::size_type v9 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    std::string::size_type v9 = a1->__r_.__value_.__l.__size_;
  }
  if (size != v9) {
    goto LABEL_16;
  }
  if (v10 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(a2->__r_.__value_.__l.__data_, v11, a2->__r_.__value_.__l.__size_) && size != 0)
    {
LABEL_24:
      std::string::size_type v14 = 0;
      char v15 = 0;
      int v16 = 0;
      int v17 = 0;
      long long v78 = v80 + 5;
      while (1)
      {
        unint64_t v18 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        if ((v18 & 0x80u) != 0) {
          unint64_t v18 = a2->__r_.__value_.__l.__size_;
        }
        if (v18 <= v16) {
          return;
        }
        int v19 = *std::string::at(a1, v14);
        if ((v19 & 0x80000000) == 0 || (v19 + 62) <= 0x32u) {
          break;
        }
        int v20 = 1;
LABEL_57:
        int v31 = *std::string::at(a2, v16);
        if ((v31 & 0x80000000) == 0 || (v31 + 62) <= 0x32u)
        {
          uint64_t v33 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            LODWORD(v34) = v16 + 1;
            unsigned int v35 = a2->__r_.__value_.__s.__data_[v16];
            if ((v35 + 11) >= 0xCDu)
            {
              uint64_t v36 = (int)v34;
              if (v33 != (int)v34)
              {
                unint64_t v37 = a2;
                goto LABEL_67;
              }
            }
            goto LABEL_83;
          }
          unint64_t v37 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          LODWORD(v34) = v16 + 1;
          unsigned int v35 = *(unsigned __int8 *)(a2->__r_.__value_.__r.__words[0] + v16);
          if ((v35 + 62) >= 0x33u || a2->__r_.__value_.__l.__size_ == (int)v34) {
            goto LABEL_83;
          }
          uint64_t v36 = (int)v34;
LABEL_67:
          unint64_t v38 = v37->__r_.__value_.__s.__data_[v36];
          if ((v35 & 0xF0) == 0xE0)
          {
            if (((a00000000000000[v35 & 0xF] >> (v38 >> 5)) & 1) == 0) {
              goto LABEL_83;
            }
            uint64_t v34 = v16 + 2;
            if ((v33 & 0x80) != 0)
            {
              if (a2->__r_.__value_.__l.__size_ == v34) {
                goto LABEL_83;
              }
              int v39 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            }
            else
            {
              int v39 = a2;
              if (v33 == v34) {
                goto LABEL_83;
              }
            }
            int v76 = v39->__r_.__value_.__s.__data_[v34];
            int v77 = v16 + 3;
          }
          else
          {
            if (v35 <= 0xDF)
            {
              if ((char)v38 < -64) {
                LODWORD(v34) = v16 + 2;
              }
              goto LABEL_83;
            }
            if (((byte_20D6DDA97[v38 >> 4] >> (v35 & 7)) & 1) == 0)
            {
LABEL_83:
              int v32 = v34 - v16;
              goto LABEL_84;
            }
            uint64_t v34 = v16 + 2;
            if ((v33 & 0x80) != 0)
            {
              std::string::size_type v75 = a2->__r_.__value_.__l.__size_;
              if (v75 == v34) {
                goto LABEL_83;
              }
              uint64_t v41 = (const std::string *)a2->__r_.__value_.__r.__words[0];
              if (*(char *)(a2->__r_.__value_.__r.__words[0] + v34) > -65) {
                goto LABEL_83;
              }
              LODWORD(v34) = v16 + 3;
              if (v75 == v16 + 3) {
                goto LABEL_83;
              }
              uint64_t v40 = (int)v34;
            }
            else
            {
              if (v33 == v34) {
                goto LABEL_83;
              }
              if (a2->__r_.__value_.__s.__data_[v34] >= -64) {
                goto LABEL_83;
              }
              LODWORD(v34) = v16 + 3;
              if (v33 == v16 + 3) {
                goto LABEL_83;
              }
              uint64_t v40 = (int)v34;
              uint64_t v41 = a2;
            }
            int v76 = v41->__r_.__value_.__s.__data_[v40];
            int v77 = v16 + 4;
          }
          if (v76 < -64) {
            LODWORD(v34) = v77;
          }
          goto LABEL_83;
        }
        int v32 = 1;
LABEL_84:
        std::string::basic_string(&v85, a1, v14, v20, (std::allocator<char> *)buf);
        std::string::basic_string(&v84, a2, v16, v32, (std::allocator<char> *)buf);
        if (v20 != v32) {
          goto LABEL_104;
        }
        uint64_t v42 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v43 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v43 = v85.__r_.__value_.__l.__size_;
        }
        std::string::size_type v44 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v44 = v84.__r_.__value_.__l.__size_;
        }
        if (v43 != v44) {
          goto LABEL_104;
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v45 = &v84;
        }
        else {
          uint64_t v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v85.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(v85.__r_.__value_.__l.__data_, v45, v85.__r_.__value_.__l.__size_)) {
            goto LABEL_104;
          }
        }
        else if (*((unsigned char *)&v85.__r_.__value_.__s + 23))
        {
          uint64_t v46 = &v85;
          uint64_t v47 = v45;
          uint64_t v48 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
          while (v46->__r_.__value_.__s.__data_[0] == v47->__r_.__value_.__s.__data_[0])
          {
            uint64_t v46 = (std::string *)((char *)v46 + 1);
            uint64_t v47 = (std::string *)((char *)v47 + 1);
            if (!--v48)
            {
              uint64_t v49 = &v85;
              while (v49->__r_.__value_.__s.__data_[0] == v45->__r_.__value_.__s.__data_[0])
              {
                uint64_t v49 = (std::string *)((char *)v49 + 1);
                uint64_t v45 = (std::string *)((char *)v45 + 1);
                if (!--v42) {
                  goto LABEL_134;
                }
              }
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              uint64_t v70 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl(&dword_20CD80000, v70, OS_LOG_TYPE_ERROR, "unexpected case for full-half transliterator", buf, 2u);
              }
              Diagnostics::log(3, "unexpected case for full-half transliterator", v71, v78);
              goto LABEL_142;
            }
          }
LABEL_104:
          if (v15)
          {
            uint64_t v50 = v80[4];
            *(_DWORD *)(v50 - 52) += v20;
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::basic_string<char16_t>::size_type v51 = &v85;
            }
            else {
              std::basic_string<char16_t>::size_type v51 = (std::string *)v85.__r_.__value_.__r.__words[0];
            }
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v52 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v52 = v85.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)(v50 - 24), (const std::string::value_type *)v51, v52);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int8x16_t v53 = &v84;
            }
            else {
              int8x16_t v53 = (std::string *)v84.__r_.__value_.__r.__words[0];
            }
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v54 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v54 = v84.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)(v50 - 48), (const std::string::value_type *)v53, v54);
          }
          else
          {
            *(_DWORD *)std::string buf = v17;
            *(_DWORD *)&uint8_t buf[4] = v20;
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v82, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
            }
            else {
              std::string v82 = v84;
            }
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__p, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
            }
            else {
              std::string __p = v85;
            }
            unint64_t v55 = v80[4];
            unint64_t v56 = v80[5];
            if (v55 >= v56)
            {
              uint64_t v59 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v55 - *v79) >> 3);
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) > 0x492492492492492) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v61 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v56 - *v79) >> 3);
              if (2 * v61 > v60) {
                unint64_t v60 = 2 * v61;
              }
              if (v61 >= 0x249249249249249) {
                unint64_t v62 = 0x492492492492492;
              }
              else {
                unint64_t v62 = v60;
              }
              v86[4] = v78;
              if (v62) {
                unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v62);
              }
              else {
                uint64_t v63 = 0;
              }
              unint64_t v64 = v62 + 56 * v59;
              v86[0] = v62;
              v86[1] = v64;
              v86[3] = v62 + 56 * v63;
              *(void *)unint64_t v64 = *(void *)buf;
              long long v65 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
              *(void *)(v64 + 24) = *((void *)&v82.__r_.__value_.__l + 2);
              *(_OWORD *)(v64 + 8) = v65;
              memset(&v82, 0, sizeof(v82));
              long long v66 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(v64 + 48) = *((void *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)(v64 + 32) = v66;
              memset(&__p, 0, sizeof(__p));
              v86[2] = v64 + 56;
              std::vector<Alignment::ReplChunk>::__swap_out_circular_buffer(v79, v86);
              uint64_t v67 = v80[4];
              std::__split_buffer<Alignment::ReplChunk>::~__split_buffer((uint64_t)v86);
              int v68 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v80[4] = v67;
              if (v68 < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              *(void *)unint64_t v55 = *(void *)buf;
              long long v57 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
              *(void *)(v55 + 24) = *((void *)&v82.__r_.__value_.__l + 2);
              *(_OWORD *)(v55 + 8) = v57;
              memset(&v82, 0, sizeof(v82));
              std::string::size_type v58 = __p.__r_.__value_.__r.__words[2];
              *(_OWORD *)(v55 + 32) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(v55 + 48) = v58;
              memset(&__p, 0, sizeof(__p));
              v80[4] = v55 + 56;
            }
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v82.__r_.__value_.__l.__data_);
            }
          }
          v17 += v20;
          v16 += v32;
          char v15 = 1;
          goto LABEL_142;
        }
LABEL_134:
        v17 += v20;
        v16 += v20;
        if (v15) {
          char v15 = 0;
        }
LABEL_142:
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        std::string::size_type v14 = v17;
        unint64_t v69 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        if ((v69 & 0x80u) != 0) {
          unint64_t v69 = a1->__r_.__value_.__l.__size_;
        }
        if (v69 <= v17) {
          return;
        }
      }
      uint64_t v21 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v26 = (const std::string *)a1->__r_.__value_.__r.__words[0];
        LODWORD(v22) = v17 + 1;
        unsigned int v24 = *(unsigned __int8 *)(a1->__r_.__value_.__r.__words[0] + v14);
        if ((v24 + 62) >= 0x33u || a1->__r_.__value_.__l.__size_ == (int)v22) {
          goto LABEL_56;
        }
        uint64_t v23 = (int)v22;
      }
      else
      {
        LODWORD(v22) = v17 + 1;
        uint64_t v23 = v17 + 1;
        unsigned int v24 = a1->__r_.__value_.__s.__data_[v14];
        if ((v24 + 11) < 0xCDu || v21 == (int)v22) {
          goto LABEL_56;
        }
        unint64_t v26 = a1;
      }
      unint64_t v27 = v26->__r_.__value_.__s.__data_[v23];
      if ((v24 & 0xF0) == 0xE0)
      {
        if ((a00000000000000[v24 & 0xF] >> (v27 >> 5)))
        {
          uint64_t v22 = v17 + 2;
          if ((v21 & 0x80) != 0)
          {
            if (a1->__r_.__value_.__l.__size_ != v22)
            {
              int32_t v28 = (const std::string *)a1->__r_.__value_.__r.__words[0];
LABEL_161:
              int v73 = v28->__r_.__value_.__s.__data_[v22];
              int v74 = v17 + 3;
LABEL_162:
              if (v73 < -64) {
                LODWORD(v22) = v74;
              }
            }
          }
          else
          {
            int32_t v28 = a1;
            if (v21 != v22) {
              goto LABEL_161;
            }
          }
        }
      }
      else
      {
        if (v24 <= 0xDF)
        {
          if ((char)v27 < -64) {
            LODWORD(v22) = v17 + 2;
          }
          goto LABEL_56;
        }
        if ((byte_20D6DDA97[v27 >> 4] >> (v24 & 7)))
        {
          uint64_t v22 = v17 + 2;
          if ((v21 & 0x80) != 0)
          {
            std::string::size_type v72 = a1->__r_.__value_.__l.__size_;
            if (v72 == v22) {
              goto LABEL_56;
            }
            long long v30 = (const std::string *)a1->__r_.__value_.__r.__words[0];
            if (*(char *)(a1->__r_.__value_.__r.__words[0] + v22) > -65) {
              goto LABEL_56;
            }
            LODWORD(v22) = v17 + 3;
            if (v72 == v17 + 3) {
              goto LABEL_56;
            }
            uint64_t v29 = (int)v22;
          }
          else
          {
            if (v21 == v22) {
              goto LABEL_56;
            }
            if (a1->__r_.__value_.__s.__data_[v22] >= -64) {
              goto LABEL_56;
            }
            LODWORD(v22) = v17 + 3;
            if (v21 == v17 + 3) {
              goto LABEL_56;
            }
            uint64_t v29 = (int)v22;
            long long v30 = a1;
          }
          int v73 = v30->__r_.__value_.__s.__data_[v29];
          int v74 = v17 + 4;
          goto LABEL_162;
        }
      }
LABEL_56:
      int v20 = v22 - v17;
      goto LABEL_57;
    }
  }
  else if (*((unsigned char *)&a2->__r_.__value_.__s + 23))
  {
    for (uint64_t i = a2;
          i->__r_.__value_.__s.__data_[0] == v11->__r_.__value_.__s.__data_[0];
          uint64_t i = (const std::string *)((char *)i + 1))
    {
      uint64_t v11 = (const std::string *)((char *)v11 + 1);
      if (!--v7) {
        return;
      }
    }
LABEL_16:
    if (!v9) {
      return;
    }
    goto LABEL_24;
  }
}

void sub_20D3C70F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

void std::vector<Alignment::ReplChunk>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Alignment::ReplChunk>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<Alignment::ReplChunk>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::allocator<Alignment::ReplChunk>::destroy[abi:ne180100](i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Alignment::ReplChunk>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a3 != a5)
  {
    uint64_t v8 = *(void *)(a3 - 56);
    a3 -= 56;
    *(void *)(a7 - 56) = v8;
    a7 -= 56;
    long long v9 = *(_OWORD *)(a3 + 8);
    *(void *)(a7 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)(a7 + 8) = v9;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    __n128 result = *(__n128 *)(a3 + 32);
    *(void *)(a7 + 48) = *(void *)(a3 + 48);
    *(__n128 *)(a7 + 32) = result;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::__map_value_compare<void **,std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::less<void **>,true>,std::allocator<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>::__emplace_unique_key_args<void **,std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>(uint64_t *result, unint64_t a2, _OWORD *a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    long long v9 = operator new(0x30uLL);
    void v9[2] = *a3;
    *(void *)long long v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    *uint64_t v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *uint64_t v4 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }
    __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void std::__shared_ptr_emplace<std::map<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&),std::less<void **>,std::allocator<std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<std::map<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&),std::less<void **>,std::allocator<std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::map<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&),std::less<void **>,std::allocator<std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<void **>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<void **>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219B60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<void **>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TransliteratePersistentModule::~TransliteratePersistentModule(TransliteratePersistentModule *this)
{
  *(void *)this = off_26C204CF8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = off_26C204CF8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
}

uint64_t std::__shared_ptr_emplace<TransliterateImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TransliterateImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2169B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TransliterateImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2169B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void fr_matching_threads(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v0 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v3 = fr_matching_threads(void)::matching_threads;
      _os_log_impl(&dword_20CD80000, v0, OS_LOG_TYPE_DEBUG, ">>>> Matching Threads: %u", buf, 8u);
    }
    Diagnostics::log(7, ">>>> Matching Threads: %u", v1, fr_matching_threads(void)::matching_threads);
  }
}

void fr_group_buffer_count(void)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v0 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v3 = fr_group_buffer_count(void)::group_buf_cnt;
      _os_log_impl(&dword_20CD80000, v0, OS_LOG_TYPE_DEBUG, ">>>> Group Buffer Count: %u", buf, 8u);
    }
    Diagnostics::log(7, ">>>> Group Buffer Count: %u", v1, fr_group_buffer_count(void)::group_buf_cnt);
  }
}

void InternalSettings::get_string_for_key(void *a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    int v3 = a2;
  }
  else {
    int v3 = (uint64_t *)*a2;
  }
  id v8 = [NSString stringWithUTF8String:v3];
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x263EFFA40]) initWithSuiteName:@"com.apple.voiceservices"];
  uint64_t v5 = [v4 stringForKey:v8];
  uint64_t v6 = v5;
  if (v5) {
    uint64_t v7 = (char *)[v5 UTF8String];
  }
  else {
    uint64_t v7 = &byte_20D5A22AE;
  }
  std::string::basic_string[abi:ne180100]<0>(a1, v7);
}

void sub_20D3C7878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t InternalSettings::get_BOOL_for_key(uint64_t *a1)
{
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = (uint64_t *)*a1;
  }
  uint64_t v2 = [NSString stringWithUTF8String:v1];
  int v3 = (void *)[objc_alloc(MEMORY[0x263EFFA40]) initWithSuiteName:@"com.apple.voiceservices"];
  uint64_t v4 = [v3 BOOLForKey:v2];

  return v4;
}

void sub_20D3C7924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TokenAttributes::create_nested(uint64_t *a1, uint64_t *a2, int a3)
{
  std::allocate_shared[abi:ne180100]<TokenAttributes,std::allocator<TokenAttributes>,TokenAttributes&,void>(a1, *a2);
  uint64_t v6 = *a1;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v9 = *(std::__shared_weak_count **)(v6 + 8);
  *(void *)uint64_t v6 = v8;
  *(void *)(v6 + 8) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(_DWORD *)(v6 + 32) = a3;
  MEMORY[0x210558E70](v6 + 72, &byte_20D5A22AE);
  *(_DWORD *)(v6 + 216) = 0;
  *(_DWORD *)(v6 + 224) = 0;
  *(_DWORD *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 240) = 0;
  if (*(char *)(v6 + 271) < 0)
  {
    **(unsigned char **)(v6 + 248) = 0;
    *(void *)(v6 + 256) = 0;
  }
  else
  {
    *(unsigned char *)(v6 + 248) = 0;
    *(unsigned char *)(v6 + 271) = 0;
  }
  *(float *)(v6 + 272) = nanf(&byte_20D5A22AE);
}

void sub_20D3C79F4(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void UnitFeature::UnitFeature(UnitFeature *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 2) = 0;
  *(void *)&long long v2 = 0x8000000080000000;
  *((void *)&v2 + 1) = 0x8000000080000000;
  *(_OWORD *)((char *)this + 28) = v2;
  *(_OWORD *)((char *)this + 44) = v2;
  *(void *)((char *)this + 60) = 0x8000000080000000;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 17) = 0;
  *((_OWORD *)this + 9) = v2;
  *((_OWORD *)this + 10) = v2;
  *((_OWORD *)this + 11) = v2;
  *((_OWORD *)this + 12) = v2;
  *((void *)this + 26) = 0x8000000080000000;
  *((void *)this + 27) = 0;
  int v3 = (_OWORD *)((char *)this + 216);
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 30, "*");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 33, "*");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 36, "*");
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  int32x4_t v4 = vdupq_n_s32(0x7F7FFFFFu);
  v3[15] = v4;
  v3[16] = v4;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  v3[23] = v4;
  *((_DWORD *)this + 150) = 0x7FFFFFFF;
}

void sub_20D3C7B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 287) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 263) < 0) {
    operator delete(*v3);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 143) < 0) {
    operator delete(*(void **)(v2 + 120));
  }
  if (*(char *)(v2 + 119) < 0) {
    operator delete(*(void **)(v2 + 96));
  }
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>(uint64_t a1, unsigned __int8 *a2, const void **a3, const void ***a4)
{
  if (*a2 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v10 = *a2;
    if (v10 > 9) {
      uint64_t v11 = "number";
    }
    else {
      uint64_t v11 = off_2641152A0[v10];
    }
    std::string::basic_string[abi:ne180100]<0>(&v14, v11);
    uint64_t v12 = std::string::insert(&v14, 0, "cannot use value() with ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v12->__r_.__value_.__r.__words[2];
    long long v17 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v17, exception);
  }
  *(void *)&long long v17 = a2;
  std::string::size_type v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = 0x8000000000000000;
  *((void *)&v17 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)a2 + 1), a3);
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = (unint64_t)a2;
  v14.__r_.__value_.__r.__words[2] = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0x8000000000000000;
  int v7 = *a2;
  if (v7 == 2)
  {
    v14.__r_.__value_.__r.__words[2] = *(void *)(*((void *)a2 + 1) + 8);
  }
  else if (v7 == 1)
  {
    v14.__r_.__value_.__l.__size_ = *((void *)a2 + 1) + 8;
  }
  else
  {
    unint64_t v16 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v17, (unsigned __int8 **)&v14))
  {
    std::set<std::string>::set[abi:ne180100](a1, a4);
  }
  else
  {
    uint64_t v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>(a1, v8);
  }
}

void sub_20D3C7D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, const void ***a2)
{
  *(void *)(a1 + 8) = 0;
  int v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  int32x4_t v4 = a2 + 1;
  uint64_t v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      uint64_t v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          int v7 = (const void ***)v6;
          uint64_t v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (const void ***)v5[2];
          BOOL v8 = *v7 == v5;
          uint64_t v5 = (const void **)v7;
        }
        while (!v8);
      }
      uint64_t v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_20D3C7E18(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  __n128 result = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  if (!*result)
  {
    int v7 = (uint64_t **)result;
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    return std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v10, v7, v8);
  }
  return result;
}

void GrammaticalNumberRules::~GrammaticalNumberRules(GrammaticalNumberRules *this)
{
  if (*((void *)this + 12)) {
    uplrules_close();
  }
  if (*((void *)this + 13)) {
    unum_close();
  }
  UTFNumberFormatter::~UTFNumberFormatter((GrammaticalNumberRules *)((char *)this + 112));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  std::__tree<std::string>::destroy((uint64_t)this + 48, *((char **)this + 7));
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
}

void GrammaticalNumberRules::update_number(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  memset(&v36, 0, sizeof(v36));
  if (!UTFString::is_digits<std::string>(a3) || (UTFString::is_digits<std::string>(a4) & 1) == 0)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
    goto LABEL_93;
  }
  uint64_t v7 = *(unsigned __int8 *)(a4 + 23);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a4 + 8);
  }
  if (!v7)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      unint64_t v24 = *(void *)(a3 + 8);
      if (v24 > 0x10)
      {
LABEL_55:
        std::string::basic_string(&__p, (const std::string *)a3, v24 - 15, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v37);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v25.__i_ = (std::__wrap_iter<const char *>::iterator_type)&__p;
        }
        else {
          v25.__i_ = (std::__wrap_iter<const char *>::iterator_type)__p.__r_.__value_.__r.__words[0];
        }
        std::string::insert(&__p, v25, 57);
        *(void *)std::string buf = __p.__r_.__value_.__l.__size_;
        std::string::size_type v26 = __p.__r_.__value_.__r.__words[0];
        *(void *)&buf[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
        char v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        memset(&__p, 0, sizeof(__p));
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v36.__r_.__value_.__l.__data_);
          v36.__r_.__value_.__r.__words[0] = v26;
          v36.__r_.__value_.__l.__size_ = *(void *)buf;
          *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[7];
          *((unsigned char *)&v36.__r_.__value_.__s + 23) = v27;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          v36.__r_.__value_.__r.__words[0] = v26;
          v36.__r_.__value_.__l.__size_ = *(void *)buf;
          *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[7];
          *((unsigned char *)&v36.__r_.__value_.__s + 23) = v27;
        }
        goto LABEL_63;
      }
    }
    else
    {
      unint64_t v24 = *(unsigned __int8 *)(a3 + 23);
      if (v24 > 0x10) {
        goto LABEL_55;
      }
    }
    std::string::operator=(&v36, (const std::string *)a3);
LABEL_63:
    *(_DWORD *)std::string buf = 0;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int32_t v28 = &v36;
    }
    else {
      int32_t v28 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    UTFString::to_utf16((std::basic_string<char16_t> *)&__p, (const char *)v28, size);
    unum_parseInt64();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_71;
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v9 = (const char *)a3;
  }
  else {
    uint64_t v9 = *(const char **)a3;
  }
  if (v8 >= 0) {
    unint64_t v10 = (const char *)a4;
  }
  else {
    unint64_t v10 = *(const char **)a4;
  }
  StringFormatter::StringFormatter((StringFormatter *)&__p, "%s.%s", v9, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
  }
  MEMORY[0x210558E80](&v36, p_p, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)std::string buf = 0;
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v13 = &v36;
  }
  else {
    long long v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = v36.__r_.__value_.__l.__size_;
  }
  UTFString::to_utf16((std::basic_string<char16_t> *)&__p, (const char *)v13, v14);
  unum_parseDouble();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = *(unsigned __int8 *)(a4 + 23);
  if ((v15 & 0x80u) == 0) {
    unint64_t v16 = (const char *)a4;
  }
  else {
    unint64_t v16 = *(const char **)a4;
  }
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a4 + 8);
  }
  if (v16[v15 - 1] == 48)
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(a3 + 8);
    }
    if (v17)
    {
      for (unint64_t i = 0; i < v19; ++i)
      {
        std::basic_string<char16_t>::push_back((std::basic_string<char16_t> *)&__p, 48);
        unint64_t v19 = *(unsigned __int8 *)(a3 + 23);
        if ((v19 & 0x80u) != 0) {
          unint64_t v19 = *(void *)(a3 + 8);
        }
      }
    }
    std::basic_string<char16_t>::push_back((std::basic_string<char16_t> *)&__p, 46);
    uint64_t v20 = *(unsigned __int8 *)(a4 + 23);
    if ((v20 & 0x80u) != 0) {
      uint64_t v20 = *(void *)(a4 + 8);
    }
    if (v20)
    {
      for (unint64_t j = 0; j < v22; ++j)
      {
        std::basic_string<char16_t>::push_back((std::basic_string<char16_t> *)&__p, 48);
        unint64_t v22 = *(unsigned __int8 *)(a4 + 23);
        if ((v22 & 0x80u) != 0) {
          unint64_t v22 = *(void *)(a4 + 8);
        }
      }
    }
    unum_applyPattern();
    int32_t v23 = uplrules_selectWithFormat();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_72;
  }
LABEL_71:
  int32_t v23 = uplrules_select();
LABEL_72:
  UTFString::to_utf8(&__p, v40, v23);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = __p;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v30 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext(&__p, (uint64_t)&v36);
    int v31 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    uint64_t v32 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v31;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v32;
    _os_log_impl(&dword_20CD80000, v30, OS_LOG_TYPE_DEBUG, "GrammaticalNumber %s [%s]", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__p, (uint64_t)&v36);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v34 = &__p;
  }
  else {
    uint64_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (*(char *)(a2 + 23) >= 0) {
    unsigned int v35 = (void *)a2;
  }
  else {
    unsigned int v35 = *(void **)a2;
  }
  Diagnostics::log(7, "GrammaticalNumber %s [%s]", v33, v34, v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_93:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_20D3C850C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void GrammaticalNumberRules::update_word(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  int v6 = *((char *)a2 + 23);
  if ((v6 & 0x80000000) == 0)
  {
    std::string v35 = *(std::string *)a2;
    goto LABEL_4;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)*a2, (std::string::size_type)a2[1]);
  int v6 = *((char *)a2 + 23);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_4:
    if (!(_BYTE)v6) {
      goto LABEL_83;
    }
    goto LABEL_5;
  }
  if (!a2[1]) {
    goto LABEL_83;
  }
LABEL_5:
  if (!std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(a1 + 48, (const void **)a3))
  {
    uint64_t v13 = *(void *)(a1 + 80);
    if (!v13) {
      goto LABEL_80;
    }
    uint64_t v14 = a1 + 80;
    do
    {
      BOOL v15 = std::less<std::string>::operator()[abi:ne180100](a1 + 88, (const void **)(v13 + 32), (const void **)a3);
      unint64_t v16 = (uint64_t *)(v13 + 8);
      if (!v15)
      {
        unint64_t v16 = (uint64_t *)v13;
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v16;
    }
    while (*v16);
    if (v14 == a1 + 80
      || std::less<std::string>::operator()[abi:ne180100](a1 + 88, (const void **)a3, (const void **)(v14 + 32)))
    {
      goto LABEL_80;
    }
    uint64_t v17 = *std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(a1, &__p, a2);
    if (!v17) {
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    uint64_t v18 = *(void *)(v14 + 56) + 24 * *(int *)(v17 + 56);
    if (*(char *)(v18 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v18, *(void *)(v18 + 8));
    }
    else
    {
      long long v19 = *(_OWORD *)v18;
      buf.__r_.__value_.__r.__words[2] = *(void *)(v18 + 16);
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v19;
    }
    uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
    if ((v20 & 0x80u) == 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
    std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    char v23 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }
    if (v21 != size) {
      goto LABEL_54;
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if ((v20 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, p_buf, *(void *)(a3 + 8)))
      {
LABEL_54:
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        std::string::size_type v26 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          Censor::global_plaintext(&v34, a3);
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v27 = &v34;
          }
          else {
            char v27 = (std::string *)v34.__r_.__value_.__r.__words[0];
          }
          int32_t v28 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int32_t v28 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          if (*((char *)a2 + 23) >= 0) {
            uint64_t v29 = (uint64_t *)a2;
          }
          else {
            uint64_t v29 = (uint64_t *)*a2;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
          HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
          char v37 = v29;
          _os_log_impl(&dword_20CD80000, v26, OS_LOG_TYPE_DEBUG, "GrammaticalNumber %s -> %s [%s]", (uint8_t *)&__p, 0x20u);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
        }
        Censor::global_plaintext(&__p, a3);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        uint64_t v32 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v32 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v33 = (uint64_t *)a2;
        }
        else {
          uint64_t v33 = (uint64_t *)*a2;
        }
        Diagnostics::log(7, "GrammaticalNumber %s -> %s [%s]", v30, p_p, v32, v33);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string::operator=((std::string *)a3, &buf);
        char v23 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
    }
    else if (*(unsigned char *)(a3 + 23))
    {
      std::string::const_iterator v25 = (unsigned __int8 *)a3;
      while (*v25 == p_buf->__r_.__value_.__s.__data_[0])
      {
        ++v25;
        p_std::string buf = (std::string *)((char *)p_buf + 1);
        if (!--v20) {
          goto LABEL_78;
        }
      }
      goto LABEL_54;
    }
LABEL_78:
    if (v23 < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
LABEL_80:
    if (*((char *)a2 + 23) < 0)
    {
      *(unsigned char *)*a2 = 0;
      a2[1] = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *((unsigned char *)a2 + 23) = 0;
    }
    goto LABEL_83;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext(&__p, a3);
    int v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::size_type v9 = *((char *)a2 + 23) >= 0 ? (std::string::size_type)a2 : (std::string::size_type)*a2;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v9;
    _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_DEBUG, "GrammaticalNumber %s [%s]", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &__p;
  }
  else {
    uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (*((char *)a2 + 23) >= 0) {
    std::string::size_type v12 = (uint64_t *)a2;
  }
  else {
    std::string::size_type v12 = (uint64_t *)*a2;
  }
  Diagnostics::log(7, "GrammaticalNumber %s [%s]", v10, v11, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_83:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_20D3C8A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 - 73) < 0) {
    operator delete(*(void **)(v20 - 96));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FrontendEnvironment::~FrontendEnvironment(FrontendEnvironment *this)
{
  std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(*((void **)this + 21));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 19, *((unsigned __int8 *)this + 144));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int32x4_t v4 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void FrontendEnvironment::load_configuration(FrontendEnvironment *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 12) + 72))(&v36);
  int v2 = *((unsigned __int8 *)this + 144);
  *((unsigned char *)this + 144) = v36;
  LOBYTE(v36) = v2;
  int v3 = (uint64_t *)*((void *)this + 19);
  *((void *)this + 19) = v37;
  char v37 = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v2);
  if (*((unsigned char *)this + 144)) {
    goto LABEL_61;
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 12) + 72))(&v55);
  int32x4_t v4 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v53, (uint64_t)&v55);
  char has_sane_pipeline = GryphonPipelineFactory::has_sane_pipeline(v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53[0]);
  if ((has_sane_pipeline & 1) == 0)
  {
    char v34 = 0;
    std::string v35 = 0;
    goto LABEL_60;
  }
  int v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v55, "pipeline");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v51, (uint64_t)v6);
  if (!v51[0])
  {
    int v7 = 0;
    char v34 = 0;
    std::string v35 = 0;
    goto LABEL_59;
  }
  memset(&v50, 0, sizeof(v50));
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
  *(_OWORD *)&v47.__r_.__value_.__r.__words[1] = 0uLL;
  uint64_t v48 = 0;
  unint64_t v49 = 0x8000000000000000;
  if (v51[0] == 2)
  {
    v47.__r_.__value_.__r.__words[2] = *v52;
  }
  else if (v51[0] == 1)
  {
    v47.__r_.__value_.__l.__size_ = *v52;
  }
  else
  {
    unint64_t v49 = 0;
  }
  while (1)
  {
    uint64_t v45 = 0;
    *(_OWORD *)&v44.__r_.__value_.__r.__words[1] = 0uLL;
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
    unint64_t v46 = 0x8000000000000000;
    if (v51[0] == 2)
    {
      v44.__r_.__value_.__r.__words[2] = v52[1];
    }
    else if (v51[0] == 1)
    {
      v44.__r_.__value_.__l.__size_ = (std::string::size_type)(v52 + 1);
    }
    else
    {
      unint64_t v46 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v47, (unsigned __int8 **)&v44))
    {
      break;
    }
    int v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v47);
    std::string::size_type v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8, "id");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v9, &v44);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__s, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
    }
    else {
      std::string __s = v44;
    }
    BOOL is_fe_module = GryphonPipelineFactory::is_fe_module(&__s);
    BOOL v11 = is_fe_module;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__s.__r_.__value_.__l.__data_);
      if (!v11) {
        goto LABEL_47;
      }
    }
    else if (!is_fe_module)
    {
      goto LABEL_47;
    }
    std::string::erase(&v44, 0, 3uLL);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v44.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
    if ((v42 & 0x80u) == 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (size)
    {
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v44;
      }
      else {
        uint64_t v14 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      memmove(p_p, v14, size);
    }
    *(_WORD *)&p_p[size] = 44;
    if ((v42 & 0x80u) == 0) {
      BOOL v15 = (const std::string::value_type *)&__p;
    }
    else {
      BOOL v15 = (const std::string::value_type *)__p;
    }
    if ((v42 & 0x80u) == 0) {
      std::string::size_type v16 = v42;
    }
    else {
      std::string::size_type v16 = (std::string::size_type)v41;
    }
    std::string::append(&v50, v15, v16);
    if ((char)v42 < 0) {
      operator delete(__p);
    }
    uint64_t v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v47);
    uint64_t v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v17, "params");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&__p, (uint64_t)v18);
    if ((_BYTE)__p)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)&__p);
      long long v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)&v55, (const void **)&v44.__r_.__value_.__l.__data_);
      int v20 = *(unsigned __int8 *)v19;
      *(unsigned char *)long long v19 = v38[0];
      v38[0] = v20;
      uint64_t v21 = (uint64_t *)v19[1];
      v19[1] = (uint64_t)v39;
      uint64_t v39 = v21;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v39, v20);
      int v22 = __p;
    }
    else
    {
      int v22 = 0;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v41, v22);
LABEL_47:
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v47);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v24 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v50.__r_.__value_.__r.__words[0] + v50.__r_.__value_.__l.__size_ - 1) == 44)
    {
      uint64_t v23 = --v50.__r_.__value_.__l.__size_;
LABEL_55:
      v24->__r_.__value_.__s.__data_[v23] = 0;
    }
  }
  else if (v50.__r_.__value_.__s.__data_[HIBYTE(v50.__r_.__value_.__r.__words[2]) - 1] == 44)
  {
    uint64_t v23 = HIBYTE(v50.__r_.__value_.__r.__words[2]) - 1;
    *((unsigned char *)&v50.__r_.__value_.__s + 23) = (*((unsigned char *)&v50.__r_.__value_.__s + 23) - 1) & 0x7F;
    unint64_t v24 = &v50;
    goto LABEL_55;
  }
  v47.__r_.__value_.__l.__size_ = 0;
  v47.__r_.__value_.__s.__data_[0] = 3;
  v47.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)&v50);
  std::string::const_iterator v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v55, "pipeline");
  int v26 = *(unsigned __int8 *)v25;
  *(unsigned char *)std::string::const_iterator v25 = v47.__r_.__value_.__s.__data_[0];
  v47.__r_.__value_.__s.__data_[0] = v26;
  std::string::size_type v27 = v25[1];
  v25[1] = v47.__r_.__value_.__l.__size_;
  v47.__r_.__value_.__l.__size_ = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v47.__r_.__value_.__l.__size_, v26);
  char v34 = v55;
  std::string v35 = v56;
  LOBYTE(v55) = 0;
  unint64_t v56 = 0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  int v7 = v51[0];
LABEL_59:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v52, v7);
LABEL_60:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v55);
  int v28 = *((unsigned __int8 *)this + 144);
  *((unsigned char *)this + 144) = v34;
  uint64_t v29 = (uint64_t *)*((void *)this + 19);
  *((void *)this + 19) = v35;
  std::string v35 = v29;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v35, v28);
  if (*((unsigned char *)this + 144))
  {
LABEL_61:
    long long v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)this + 144, "locale");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v30, &v47);
    if (*((char *)this + 23) < 0) {
      operator delete(*(void **)this);
    }
    *(std::string *)this = v47;
    std::string::basic_string[abi:ne180100]<0>(&v44, "phoneme_encoding");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)this + 144, (const void **)&v44.__r_.__value_.__l.__data_, &v47);
    int v31 = (void **)((char *)this + 24);
    if (*((char *)this + 47) < 0) {
      operator delete(*v31);
    }
    *(_OWORD *)int v31 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
    *((void *)this + 5) = *((void *)&v47.__r_.__value_.__l + 2);
    *((unsigned char *)&v47.__r_.__value_.__s + 23) = 0;
    v47.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v47, "rebuild");
    v44.__r_.__value_.__s.__data_[0] = 1;
    *((unsigned char *)this + 88) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)this + 144, (const void **)&v47.__r_.__value_.__l.__data_, (unsigned __int8 *)&v44);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v44, "multilingual");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)this + 144, (const void **)&v44.__r_.__value_.__l.__data_, &v47);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    std::string::size_type v32 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v32 = v47.__r_.__value_.__l.__size_;
    }
    if (v32)
    {
      UTFString::split(&v44, &v47, 0x2Cu, 0);
      uint64_t v33 = (std::__shared_weak_count *)*((void *)this + 10);
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
      if (v33) {
        goto LABEL_75;
      }
    }
    else
    {
      uint64_t v33 = (std::__shared_weak_count *)*((void *)this + 10);
      *((void *)this + 9) = 0;
      *((void *)this + 10) = 0;
      if (v33) {
LABEL_75:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20D3C916C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v42, __p);
  if (*(char *)(v43 - 145) < 0) {
    operator delete(*(void **)(v43 - 168));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a10, *(unsigned __int8 *)(v43 - 144));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v43 - 104), *(unsigned __int8 *)(v43 - 112));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    int v8 = a1 + 1;
LABEL_9:
    unint64_t v10 = (uint64_t *)operator new(0x40uLL);
    BOOL v11 = (std::string *)(v10 + 4);
    std::string::size_type v12 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v13 = *v12;
      v10[6] = *((void *)v12 + 2);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    v10[7] = 0;
    uint64_t *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *int v6 = v10;
    uint64_t v14 = (uint64_t *)**a1;
    BOOL v15 = v10;
    if (v14)
    {
      *a1 = v14;
      BOOL v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      int v8 = (uint64_t **)v5;
      std::string::size_type v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      int v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2)) {
      break;
    }
    int v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  unint64_t v10 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v10;
}

void sub_20D3C93A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void EnvironmentBroker::~EnvironmentBroker(EnvironmentBroker *this)
{
  **((void **)this + 3) = 0;
  int v2 = (FrontendEnvironment **)*((void *)this + 3);
  int v3 = (FrontendEnvironment **)*((void *)this + 4);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
      {
        FrontendEnvironment::~FrontendEnvironment(*v2);
        MEMORY[0x2105595E0]();
      }
      ++v2;
    }
    while (v2 != v3);
    int v2 = (FrontendEnvironment **)*((void *)this + 3);
  }
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
}

long long *EnvironmentBroker::get_environment(uint64_t **a1, long long *a2)
{
  environment = (long long *)EnvironmentBroker::find_environment((uint64_t)a1, (std::string::size_type)a2, 0);
  if (!environment)
  {
    environment = (long long *)*a1[3];
    int v7 = environment;
    uint64_t v5 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)environment, &v7)[7];
    int v7 = a2;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, &v7)[7] = v5;
  }
  return environment;
}

const void **EnvironmentBroker::find_environment(uint64_t a1, std::string::size_type a2, char a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = a1 + 8;
    do
    {
      BOOL v9 = std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v7 + 32), (const void **)a2);
      unint64_t v10 = (uint64_t *)(v7 + 8);
      if (!v9)
      {
        unint64_t v10 = (uint64_t *)v7;
        uint64_t v8 = v7;
      }
      uint64_t v7 = *v10;
    }
    while (*v10);
    if (v8 != v6
      && !std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)a2, (const void **)(v8 + 32)))
    {
      return *(const void ***)(*(void *)(a1 + 24) + 8 * *(void *)(v8 + 56));
    }
  }
  uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) == 0) {
    std::string::size_type v12 = (unsigned __int8 *)a2;
  }
  else {
    std::string::size_type v12 = *(unsigned __int8 **)a2;
  }
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  if (v11)
  {
    long long v13 = &v12[v11];
    uint64_t v14 = v12;
    while (2)
    {
      for (uint64_t i = 0; i != 2; ++i)
      {
        if (*v14 == asc_20D5F9AD9[i])
        {
          if (v14 != v13)
          {
            std::string::size_type v16 = v14 - v12;
            if (v14 - v12 != -1)
            {
              (*(void (**)(char **__return_ptr))(**(void **)(**(void **)(a1 + 24) + 96) + 64))(&v53);
              if (v53) {
                operator new();
              }
              if (a3)
              {
                environment = 0;
              }
              else
              {
                std::string::basic_string(&buf, (const std::string *)a2, 0, v16, (std::allocator<char> *)&__str);
                environment = (const void **)EnvironmentBroker::find_environment(a1, &buf, 0);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
              }
              if (v54) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v54);
              }
              return environment;
            }
          }
          goto LABEL_24;
        }
      }
      if (++v14 != v13) {
        continue;
      }
      break;
    }
  }
LABEL_24:
  uint64_t v17 = *(uint64_t **)(a1 + 24);
  uint64_t v18 = *v17;
  int v19 = *(unsigned __int8 *)(*v17 + 144);
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)(*v17 + 144);
  buf.__r_.__value_.__r.__words[2] = 0;
  uint64_t v59 = 0;
  unint64_t v60 = 0x8000000000000000;
  if (v19 == 1)
  {
    buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(void *)(v18 + 152), "languages");
    uint64_t v17 = *(uint64_t **)(a1 + 24);
  }
  else if (v19 == 2)
  {
    buf.__r_.__value_.__r.__words[2] = *(void *)(*(void *)(v18 + 152) + 8);
  }
  else
  {
    unint64_t v60 = 1;
  }
  uint64_t v21 = *v17;
  int v22 = *(unsigned __int8 *)(v21 + 144);
  int8x16_t v53 = (char *)(v21 + 144);
  std::string::size_type v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unint64_t v57 = 0x8000000000000000;
  if (v22 == 2)
  {
    uint64_t v55 = *(void *)(*(void *)(v21 + 152) + 8);
  }
  else if (v22 == 1)
  {
    std::string::size_type v54 = (std::__shared_weak_count *)(*(void *)(v21 + 152) + 8);
  }
  else
  {
    unint64_t v57 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&v53))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    }
    return 0;
  }
  uint64_t v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(**(void **)(a1 + 24) + 144, "languages");
  environment = (const void **)v51;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v51, v25);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
  uint64_t v59 = 0;
  unint64_t v60 = 0x8000000000000000;
  if (v51[0])
  {
    if (v51[0] == 2)
    {
      buf.__r_.__value_.__r.__words[2] = *v52;
      int8x16_t v53 = v51;
      std::string::size_type v54 = 0;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      unint64_t v57 = 0x8000000000000000;
      uint64_t v55 = v52[1];
      goto LABEL_51;
    }
    if (v51[0] == 1)
    {
      buf.__r_.__value_.__l.__size_ = *v52;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      unint64_t v57 = 0x8000000000000000;
      int8x16_t v53 = v51;
      std::string::size_type v54 = (std::__shared_weak_count *)(v52 + 1);
      goto LABEL_51;
    }
    unint64_t v60 = 0;
  }
  else
  {
    unint64_t v60 = 1;
  }
  int8x16_t v53 = v51;
  std::string::size_type v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unint64_t v57 = 1;
LABEL_51:
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&v53))
  {
    int v26 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v26, &__str);
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v27 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v27 = *(void *)(a2 + 8);
    }
    std::string::basic_string(&v62, &__str, 0, v27, (std::allocator<char> *)&v61);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v62.__r_.__value_.__l.__size_;
    }
    int v29 = *(char *)(a2 + 23);
    uint64_t v30 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v31 = *(void *)(a2 + 8);
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(a2 + 23);
    }
    if (size != v31)
    {
      if ((*((unsigned char *)&v62.__r_.__value_.__s + 23) & 0x80) != 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      goto LABEL_100;
    }
    if (v29 >= 0) {
      std::string::size_type v32 = (unsigned __int8 *)a2;
    }
    else {
      std::string::size_type v32 = *(unsigned __int8 **)a2;
    }
    if ((*((unsigned char *)&v62.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      char v37 = (void *)v62.__r_.__value_.__r.__words[0];
      int v38 = memcmp(v62.__r_.__value_.__l.__data_, v32, v62.__r_.__value_.__l.__size_);
      operator delete(v37);
      if (v38) {
        goto LABEL_100;
      }
      uint64_t v30 = *(unsigned __int8 *)(a2 + 23);
    }
    else if (*((unsigned char *)&v62.__r_.__value_.__s + 23))
    {
      uint64_t v33 = 0;
      do
      {
        int v34 = v62.__r_.__value_.__s.__data_[v33];
        int v35 = v32[v33];
      }
      while (v34 == v35 && HIBYTE(v62.__r_.__value_.__r.__words[2]) - 1 != v33++);
      if (v34 != v35) {
        goto LABEL_100;
      }
    }
    std::string::size_type v39 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v39 = __str.__r_.__value_.__l.__size_;
    }
    if ((v30 & 0x80) != 0) {
      uint64_t v30 = *(void *)(a2 + 8);
    }
    if (v39 == v30
      || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (uint64_t v40 = &__str)
        : (uint64_t v40 = (std::string *)__str.__r_.__value_.__r.__words[0]),
          memchr("-_", v40->__r_.__value_.__s.__data_[v30], 3uLL)))
    {
      uint64_t v41 = (const void **)EnvironmentBroker::find_environment(a1, &__str, 1);
      unsigned __int8 v42 = v41;
      if (v41)
      {
        v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
        uint64_t v43 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v41, (long long **)&v62)[7];
        v62.__r_.__value_.__r.__words[0] = a2;
        int v44 = 0;
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)a2, (long long **)&v62)[7] = v43;
        environment = v42;
        goto LABEL_101;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v45 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        LODWORD(v62.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v48 = &__str;
      }
      else {
        uint64_t v48 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
    }
LABEL_100:
    int v44 = 1;
LABEL_101:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (!v44) {
      goto LABEL_106;
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&buf);
  }
  environment = 0;
LABEL_106:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
  return environment;
}

void sub_20D3C9CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(exception_object);
}

void ClassifySentenceImpl_fr::generate_tokens(ClassifySentenceImpl_fr *this)
{
  v59[3] = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(&p_p, "qui");
    std::string::basic_string[abi:ne180100]<0>(v42, "quoi");
    std::string::basic_string[abi:ne180100]<0>(v43, "quel");
    std::string::basic_string[abi:ne180100]<0>(v44, "quels");
    std::string::basic_string[abi:ne180100]<0>(v45, "quand");
    std::string::basic_string[abi:ne180100]<0>(v46, "où");
    std::string::basic_string[abi:ne180100]<0>(v47, "d'où");
    std::string::basic_string[abi:ne180100]<0>(v48, "pourquoi");
    std::string::basic_string[abi:ne180100]<0>(v49, "comment");
    std::string::basic_string[abi:ne180100]<0>(v50, "combien");
    std::string::basic_string[abi:ne180100]<0>(v51, "lequel");
    std::string::basic_string[abi:ne180100]<0>(v52, "lequels");
    std::string::basic_string[abi:ne180100]<0>(v53, "duquel");
    std::string::basic_string[abi:ne180100]<0>(v54, "duquels");
    std::string::basic_string[abi:ne180100]<0>(v55, "quelle");
    std::string::basic_string[abi:ne180100]<0>(v56, "quelles");
    std::string::basic_string[abi:ne180100]<0>(v57, "laquelle");
    std::string::basic_string[abi:ne180100]<0>(v58, "laquelles");
    std::string::basic_string[abi:ne180100]<0>(v59, "ou");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&__p, (const void **)&p_p, 19);
    NeverDestructed<std::set<std::string>>::NeverDestructed<>();
  }
  if (!*((unsigned char *)this + 8))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v36);
    uint64_t v2 = v36;
    if (!(void)v36)
    {
      *((unsigned char *)this + 8) = 1;
      goto LABEL_66;
    }
    if ((void *)(v2 + 8) == v3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&p_p, "Token missing TokenBasicItem");
      MEMORY[0x210558D40](exception, &p_p);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    uint64_t v4 = v3[5];
    int v5 = *(_DWORD *)(v4 + 8);
    if (v5 != 1886809699)
    {
LABEL_23:
      if (v5 == 1952807028)
      {
        UTFString_Impl::to_lower((UTFString_Impl *)&p_p, v4 + 32);
        if ((char)v41 < 0)
        {
          if (v40 != 3) {
            goto LABEL_33;
          }
          long long v13 = (unsigned __int16 *)p_p;
        }
        else
        {
          if (v41 != 3) {
            goto LABEL_33;
          }
          long long v13 = (unsigned __int16 *)&p_p;
        }
        int v14 = *v13;
        int v15 = *((unsigned __int8 *)v13 + 2);
        if (v14 == 29541 && v15 == 116)
        {
          (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 2) + 16))(&v34);
          uint64_t v23 = v34;
          if (v34)
          {
            if ((void *)(v23 + 8) != v24)
            {
              uint64_t v25 = v24[5];
              if (*(_DWORD *)(v25 + 8) == 1952807028)
              {
                UTFString_Impl::to_lower((UTFString_Impl *)&__p, v25 + 32);
                BOOL v26 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "ce");
                if (v38 < 0) {
                  operator delete(__p);
                }
                if (v26)
                {
                  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 2) + 16))(&v32);
                  uint64_t v27 = v32;
                  if (v32)
                  {
                    if ((void *)(v27 + 8) != v28)
                    {
                      uint64_t v29 = v28[5];
                      if (*(_DWORD *)(v29 + 8) == 1952807028)
                      {
                        UTFString_Impl::to_lower((UTFString_Impl *)&__p, v29 + 32);
                        BOOL v30 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "que");
                        if (v38 < 0) {
                          operator delete(__p);
                        }
                        if (v30) {
                          *((unsigned char *)this + 105) = 1;
                        }
                      }
                    }
                  }
                  if (v33) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                  }
                }
              }
            }
          }
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
LABEL_63:
          if ((char)v41 < 0) {
            operator delete(p_p);
          }
          goto LABEL_65;
        }
LABEL_33:
        uint64_t v17 = (char *)&p_p;
        if (ClassifySentenceImpl_fr::generate_tokens(void)::WH_WORDS + 8 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(ClassifySentenceImpl_fr::generate_tokens(void)::WH_WORDS, (const void **)&p_p))
        {
          uint64_t v18 = v41;
          if ((v41 & 0x80u) != 0)
          {
            uint64_t v18 = v40;
            uint64_t v17 = (char *)p_p;
          }
          if (v18 >= 3)
          {
            int v19 = &v17[v18];
            int v20 = v17;
            while (1)
            {
              uint64_t v21 = (char *)memchr(v20, 113, v18 - 2);
              if (!v21) {
                break;
              }
              if (*(_WORD *)v21 == 30065 && v21[2] == 39)
              {
                if (v21 != v19 && v21 == v17) {
                  goto LABEL_34;
                }
                goto LABEL_63;
              }
              int v20 = v21 + 1;
              uint64_t v18 = v19 - (unsigned char *)v20;
              if (v19 - (unsigned char *)v20 < 3) {
                goto LABEL_63;
              }
            }
          }
        }
        else
        {
LABEL_34:
          *((unsigned char *)this + 104) = 1;
        }
        goto LABEL_63;
      }
LABEL_65:
      std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v36);
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
LABEL_66:
      if (*((void *)&v36 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
      }
      return;
    }
    if ((void *)(v2 + 8) == v6) {
      goto LABEL_65;
    }
    uint64_t v7 = v6[5];
    if (!*(unsigned char *)(v7 + 9)) {
      goto LABEL_65;
    }
    uint64_t v8 = (void *)(v4 + 32);
    int v9 = *(char *)(v4 + 55);
    if (v9 < 0)
    {
      if (*(void *)(v4 + 40) != 1) {
        goto LABEL_19;
      }
      uint64_t v8 = (void *)*v8;
    }
    else if (v9 != 1)
    {
      goto LABEL_19;
    }
    if (*(unsigned char *)v8 == 63)
    {
      if (*((unsigned char *)this + 104))
      {
        if (*((unsigned char *)this + 105)) {
          int v10 = 2;
        }
        else {
          int v10 = 1;
        }
      }
      else
      {
        int v10 = 2;
      }
      goto LABEL_20;
    }
LABEL_19:
    int v10 = 0;
LABEL_20:
    uint64_t v11 = *(void *)(v7 + 32);
    p_p = &__p;
    if (!v12) {
      operator new();
    }
    *(_DWORD *)(v12 + 8) = v10;
    *((_WORD *)this + 52) = 0;
    int v5 = *(_DWORD *)(v4 + 8);
    goto LABEL_23;
  }
}

void sub_20D3CA45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::string>::destroy((uint64_t)&a16, a17);
  uint64_t v25 = 456;
  while (1)
  {
    if (*((char *)&__p + v25 - 1) < 0) {
      operator delete(*(void **)(&a16 + v25));
    }
    v25 -= 24;
    if (!v25)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_20D3CA5E4(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void NeverDestructed<std::set<std::string>>::NeverDestructed<>()
{
}

void sub_20D3CA654(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t ClassifySentenceImpl_fr::clear(ClassifySentenceImpl_fr *this)
{
  *((_WORD *)this + 52) = 0;
  return FrontendModule::clear(this);
}

void ClassifySentenceImpl_fr::~ClassifySentenceImpl_fr(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<ClassifySentenceImpl_fr>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ClassifySentenceImpl_fr>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2175C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ClassifySentenceImpl_fr>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2175C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_20D3CA798(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_20D3CA7E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_20D3CA830(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(unsigned __int8 *a1, char *a2)
{
  if (*a1)
  {
    if (*a1 != 2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      unint64_t v17 = *a1;
      if (v17 > 9) {
        uint64_t v18 = "number";
      }
      else {
        uint64_t v18 = off_2641152A0[v17];
      }
      std::string::basic_string[abi:ne180100]<0>(&v21, v18);
      int v19 = std::string::insert(&v21, 0, "cannot use push_back() with ");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      uint64_t v23 = (char *)v19->__r_.__value_.__r.__words[2];
      long long v22 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(308, (uint64_t)&v22, exception);
    }
    uint64_t v4 = (uint64_t *)*((void *)a1 + 1);
  }
  else
  {
    *a1 = 2;
    uint64_t v4 = (uint64_t *)operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *uint64_t v4 = 0;
    *((void *)a1 + 1) = v4;
  }
  uint64_t result = (uint64_t)(v4 + 2);
  unint64_t v6 = v4[2];
  unint64_t v7 = v4[1];
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *v4) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v6 - *v4;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v25 = v4 + 2;
    long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(result, v12);
    int v14 = &v13[16 * v9];
    *(void *)&long long v22 = v13;
    *((void *)&v22 + 1) = v14;
    unint64_t v24 = &v13[16 * v15];
    *int v14 = *a2;
    *((void *)v14 + 1) = *((void *)a2 + 1);
    *a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v23 = v14 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v4, &v22);
    uint64_t v8 = v4[1];
    uint64_t result = std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *(unsigned char *)unint64_t v7 = *a2;
    *(void *)(v7 + 8) = *((void *)a2 + 1);
    *a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v8 = v7 + 16;
    v4[1] = v7 + 16;
  }
  v4[1] = v8;
  return result;
}

void sub_20D3CAA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_20D3CAAC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void GryphonPipelineFactory::pipeline_from_config(uint64_t **a1, uint64_t *a2, uint64_t a3, unsigned __int8 **a4, uint64_t a5, const void **a6)
{
  void (***v50)(void **__return_ptr);
  std::__shared_weak_count *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  BOOL v55;
  char *v56;
  unsigned __int8 *v57;
  char *v58;
  void *v59;
  char *v60;
  std::string::size_type v62;
  void *v63;
  std::string::size_type v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  uint64_t *v69;
  std::string *v70;
  std::string::size_type v71;
  std::string::size_type v72;
  int v73;
  BOOL v74;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t *v83;
  void *v84;
  void *v85;
  std::__shared_weak_count *v86;
  void *v87;
  void *v88;
  std::__shared_weak_count *v89;
  const char *v90;
  long long v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  long long v95;
  std::string *v96;
  void *v98;
  uint64_t v99;
  std::recursive_mutex *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t **v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  long long v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  void (***v113)(uint64_t *__return_ptr, void, std::string *, long long *, long long *, unsigned __int8 *, uint64_t *);
  std::__shared_weak_count *v114;
  uint64_t v115;
  BOOL v116;
  unsigned char *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  NSObject *v121;
  const char *v122;
  std::string *v123;
  std::string *v124;
  std::string *p_p;
  std::string *v126;
  std::string *v127;
  std::string *v128;
  std::string *v129;
  std::string *v130;
  std::string *v131;
  uint64_t v132;
  uint64_t v133;
  long long v134;
  std::__shared_weak_count *v135;
  unint64_t v136;
  long long v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  GryphonAnalysis *v149;
  uint64_t v150;
  GryphonAnalysis *v151;
  uint64_t v152;
  void *v153;
  void *v154;
  std::__shared_weak_count *v155;
  const void *v156;
  std::__shared_weak_count *v157;
  uint64_t *v158;
  int v159;
  uint64_t *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count *v162;
  void *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  void *v167;
  void *v168;
  std::__shared_weak_count *v169;
  const void *v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  void *v173;
  void *v174;
  std::__shared_weak_count *v175;
  const void *v176;
  std::__shared_weak_count *v177;
  uint64_t v178;
  uint64_t v179;
  const void *v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count *v182;
  const void *v183;
  uint64_t v184;
  void *v185;
  void *v186;
  std::__shared_weak_count *v187;
  const void *v188;
  std::__shared_weak_count *v189;
  void *v190;
  std::__shared_weak_count *v191;
  void *v192;
  void *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count *v196;
  void *v197;
  std::string *v198;
  void *v199;
  std::string *v200;
  void *exception;
  uint8_t *v202;
  void *v203;
  uint8_t *v204;
  void *v205;
  uint8_t *v206;
  uint64_t **v207;
  const void **v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  void *v212;
  std::__shared_weak_count *v213;
  uint64_t *v214;
  uint64_t *v215;
  std::__shared_weak_count *v217;
  void *v218;
  std::__shared_weak_count *v219;
  char v220;
  uint64_t *v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  void *v224[2];
  char v225;
  void *v226;
  uint64_t *v227;
  char v228;
  void v229[2];
  uint64_t v230;
  std::__shared_weak_count *v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  long long v234;
  long long v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  char v238[8];
  uint64_t *v239;
  char v240[8];
  uint64_t *v241;
  long long v242;
  char v243;
  std::string *v244;
  std::string __p;
  uint64_t v246;
  std::__shared_weak_count *v247;
  char v248;
  std::string *v249;
  char v250;
  std::string *v251;
  std::string v252;
  std::string __s;
  std::string v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  std::string *v258;
  unint64_t v259;
  void (***v260)(void **__return_ptr);
  std::__shared_weak_count *v261;
  char v262[8];
  std::string::size_type *v263;
  uint8_t v264[24];
  std::string *v265;
  unint64_t v266;
  void *v267;
  char v268;
  void *v269;
  char v270;
  unsigned char buf[24];
  unsigned char *v272;
  unint64_t v273;
  uint64_t v274;
  void *v275;
  char v276;
  void *v277;
  char v278;
  uint64_t v279;

  uint64_t v279 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a3 != 1
    || *(void *)(a3 + 8) + 8 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(void *)(a3 + 8), (const void **)a5))
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  unint64_t v208 = a6;
  long long v209 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a5 + 23) >= 0) {
      unint64_t v12 = (const void *)a5;
    }
    else {
      unint64_t v12 = *(const void **)a5;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_INFO, "Initializing pipeline: %s", buf, 0xCu);
  }
  if (*(char *)(a5 + 23) >= 0) {
    long long v13 = (const void *)a5;
  }
  else {
    long long v13 = *(const void **)a5;
  }
  Diagnostics::log(6, "Initializing pipeline: %s", v11, v13);
  uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at((unsigned __int8 *)a3, (const void **)a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v262, v14);
  uint64_t v15 = operator new(0x88uLL);
  v15[1] = 0;
  v15[2] = 0;
  void *v15 = off_26C2168D8;
  uint64_t v215 = v15 + 3;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  *((_OWORD *)v15 + 5) = 0u;
  *((_OWORD *)v15 + 6) = 0u;
  *((_OWORD *)v15 + 7) = 0u;
  v15[16] = 0;
  uint64_t v214 = v15;
  v15[3] = off_26C202018;
  SharedObjectPool::get<ModuleFactory>(&v260, *a2);
  std::string::size_type v258 = 0;
  std::string::size_type v257 = 0;
  char v259 = 0;
  v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v262;
  *(_OWORD *)&v254.__r_.__value_.__r.__words[1] = 0uLL;
  uint64_t v255 = 0;
  uint64_t v256 = 0x8000000000000000;
  unint64_t v207 = a1;
  if (v262[0])
  {
    if (v262[0] == 2)
    {
      v254.__r_.__value_.__r.__words[2] = *v263;
    }
    else if (v262[0] == 1)
    {
      v254.__r_.__value_.__l.__size_ = *v263;
    }
    else
    {
      uint64_t v256 = 0;
    }
  }
  else
  {
    uint64_t v256 = 1;
  }
  std::string::size_type v16 = 0;
  uint64_t v213 = 0;
LABEL_22:
  *(void *)&uint8_t buf[16] = 0;
  std::string::size_type v272 = 0;
  *(void *)&uint8_t buf[8] = 0;
  *(void *)std::string buf = v262;
  uint64_t v273 = 0x8000000000000000;
  if (v262[0] == 2)
  {
    *(void *)&uint8_t buf[16] = v263[1];
  }
  else if (v262[0] == 1)
  {
    *(void *)&uint8_t buf[8] = v263 + 1;
  }
  else
  {
    uint64_t v273 = 1;
  }
  long long v217 = v16;
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v254, (unsigned __int8 **)buf))
  {
    unint64_t v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v254);
    uint64_t v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v17, "id");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v18, &__s);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v252, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      uint64_t v252 = __s;
    }
    BOOL is_fe_module = GryphonPipelineFactory::is_fe_module(&v252);
    BOOL v20 = is_fe_module;
    if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v252.__r_.__value_.__l.__data_);
      if (v20) {
        goto LABEL_182;
      }
    }
    else if (is_fe_module)
    {
      goto LABEL_182;
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "params");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v264, 0, 0, 0, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v17, (const void **)buf, v264, (uint64_t)&v226);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v264[8], v264[0]);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v251 = 0;
    char v250 = 3;
    uint64_t v251 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)&__s);
    std::string v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v226, "id");
    int v22 = *(unsigned __int8 *)v21;
    *(unsigned char *)std::string v21 = v250;
    char v250 = v22;
    uint64_t v23 = (uint64_t *)v21[1];
    v21[1] = (uint64_t)v251;
    uint64_t v251 = (std::string *)v23;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v251, v22);
    unint64_t v24 = *a4;
    uint64_t v25 = a4[1];
    if (*a4 == v25) {
      goto LABEL_73;
    }
    uint64_t v26 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    size_t size = __s.__r_.__value_.__l.__size_;
    int v28 = (const void *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = __s.__r_.__value_.__l.__size_;
    }
    while (1)
    {
      uint64_t v30 = v24[23];
      int v31 = (char)v30;
      if ((v30 & 0x80u) != 0) {
        uint64_t v30 = *((void *)v24 + 1);
      }
      if (v29 == v30)
      {
        if (v31 >= 0) {
          uint64_t v32 = v24;
        }
        else {
          uint64_t v32 = *(unsigned __int8 **)v24;
        }
        if ((v26 & 0x80) != 0)
        {
          if (!memcmp(v28, v32, size))
          {
LABEL_56:
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            int v35 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
            {
              p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_s = &__s;
              }
              char v38 = v24 + 24;
              if ((char)v24[47] < 0) {
                char v38 = (void *)*v38;
              }
              std::string::size_type v39 = v24 + 48;
              if ((char)v24[71] < 0) {
                std::string::size_type v39 = (void *)*v39;
              }
              *(_DWORD *)std::string buf = 136315650;
              *(void *)&uint8_t buf[4] = p_s;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v38;
              *(_WORD *)&unsigned char buf[22] = 2080;
              std::string::size_type v272 = v39;
              _os_log_impl(&dword_20CD80000, v35, OS_LOG_TYPE_INFO, "Overriding module params module:%s, key=%s, value=%s", buf, 0x20u);
            }
            uint64_t v40 = &__s;
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v40 = (std::string *)__s.__r_.__value_.__r.__words[0];
            }
            unsigned __int8 v41 = v24 + 24;
            if ((char)v24[47] < 0) {
              unsigned __int8 v41 = (unsigned __int8 *)*((void *)v24 + 3);
            }
            unsigned __int8 v42 = v24 + 48;
            if ((char)v24[71] < 0) {
              unsigned __int8 v42 = (unsigned __int8 *)*((void *)v24 + 6);
            }
            Diagnostics::log(6, "Overriding module params module:%s, key=%s, value=%s", v36, v40, v41, v42);
            std::string::size_type v249 = 0;
            std::string::pointer v248 = 3;
            std::string::size_type v249 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)(v24 + 48));
            uint64_t v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)&v226, (const void **)v24 + 3);
            int v44 = *(unsigned __int8 *)v43;
            *(unsigned char *)uint64_t v43 = v248;
            std::string::pointer v248 = v44;
            uint64_t v45 = (uint64_t *)v43[1];
            v43[1] = (uint64_t)v249;
            std::string::size_type v249 = (std::string *)v45;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v249, v44);
LABEL_73:
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            unint64_t v46 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v48 = &__s;
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v48 = (std::string *)__s.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = v48;
              _os_log_impl(&dword_20CD80000, v46, OS_LOG_TYPE_DEBUG, "Creating module %s", buf, 0xCu);
            }
            unint64_t v49 = &__s;
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              unint64_t v49 = (std::string *)__s.__r_.__value_.__r.__words[0];
            }
            Diagnostics::log(7, "Creating module %s", v47, v49);
            std::string v50 = v260;
            std::basic_string<char16_t>::size_type v51 = (std::__shared_weak_count *)a2[1];
            unint64_t v246 = *a2;
            std::string::size_type v247 = v51;
            if (v51) {
              atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (**v50)(v224);
            if (v247) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v247);
            }
            nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::begin((uint64_t)buf, v17);
            nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::end((uint64_t)v264, v17);
            while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)v264))
            {
              std::string::size_type v52 = nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::key((unsigned __int8 **)buf);
              int8x16_t v53 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
              std::string::size_type v54 = *(unsigned __int8 *)(v52 + 23);
              uint64_t v55 = (v54 & 0x80u) != 0;
              if ((v54 & 0x80u) != 0) {
                std::string::size_type v54 = *(void *)(v52 + 8);
              }
              if (v55) {
                uint64_t v56 = *(char **)v52;
              }
              else {
                uint64_t v56 = (char *)v52;
              }
              if (v54 >= 7)
              {
                unint64_t v57 = v53;
                std::string::size_type v58 = &v56[v54];
                uint64_t v59 = v56;
                do
                {
                  unint64_t v60 = (char *)memchr(v59, 95, v54 - 6);
                  if (!v60) {
                    break;
                  }
                  if (*(_DWORD *)v60 == 1918988383 && *(_DWORD *)(v60 + 3) == 1936548210)
                  {
                    if (v60 == v58) {
                      std::string v62 = -1;
                    }
                    else {
                      std::string v62 = v60 - v56;
                    }
                    if (v62 + 1 >= 2)
                    {
                      uint64_t v63 = v224[0];
                      if (!*((void *)v224[0] + 12))
                      {
                        unint64_t v64 = *a2;
                        long long v65 = (std::__shared_weak_count *)a2[1];
                        if (v65) {
                          atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        Module::enable_hot_plugging((uint64_t)v63, (uint64_t)&__s, v64, v65);
                        if (v65) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v65);
                        }
                        long long v66 = *((void *)v224[0] + 12);
                        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
                        ModuleBuilder::add_config(v66, (uint64_t)&__p, (uint64_t)&v226);
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                      }
                      std::string::basic_string(&__p, (const std::string *)v52, 0, v62, (std::allocator<char> *)v240);
                      uint64_t v244 = 0;
                      uint64_t v243 = 3;
                      uint64_t v244 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)&__s);
                      uint64_t v67 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "id");
                      int v68 = *(unsigned __int8 *)v67;
                      *(unsigned char *)uint64_t v67 = v243;
                      uint64_t v243 = v68;
                      unint64_t v69 = (uint64_t *)v67[1];
                      v67[1] = (uint64_t)v244;
                      uint64_t v244 = (std::string *)v69;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v244, v68);
                      ModuleBuilder::add_config(*((void *)v224[0] + 12), (uint64_t)&__p, (uint64_t)v57);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                    }
                    break;
                  }
                  uint64_t v59 = v60 + 1;
                  std::string::size_type v54 = v58 - (unsigned char *)v59;
                }
                while (v58 - (unsigned char *)v59 >= 7);
              }
              nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
              ++v274;
            }
            if (v270 < 0) {
              operator delete(v269);
            }
            if (v268 < 0) {
              operator delete(v267);
            }
            if (v278 < 0) {
              operator delete(v277);
            }
            if (v276 < 0) {
              operator delete(v275);
            }
            if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (__s.__r_.__value_.__l.__size_ == 5)
              {
                if (*(_DWORD *)__s.__r_.__value_.__l.__data_ != 1819243376
                  || *(unsigned char *)(__s.__r_.__value_.__r.__words[0] + 4) != 97)
                {
                  goto LABEL_146;
                }
                goto LABEL_190;
              }
              if (__s.__r_.__value_.__l.__size_ != 20) {
                goto LABEL_146;
              }
              uint64_t v70 = (std::string *)__s.__r_.__value_.__r.__words[0];
LABEL_130:
              uint64_t v71 = v70->__r_.__value_.__r.__words[0];
              std::string::size_type v72 = v70->__r_.__value_.__l.__size_;
              int v73 = v70->__r_.__value_.__r.__words[2];
              int v74 = v71 == 0x6165665F74696E75 && v72 == 0x6572705F65727574;
              if (v74 && v73 == 1952672100)
              {
                int v76 = (std::__shared_weak_count *)v224[1];
                if (v224[1]) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)v224[1] + 1, 1uLL, memory_order_relaxed);
                }
                int v77 = v213;
                long long v78 = v217;
                if (v213) {
                  goto LABEL_193;
                }
              }
              else
              {
LABEL_146:
                long long v78 = v217;
                int v76 = v213;
              }
            }
            else
            {
              if (HIBYTE(__s.__r_.__value_.__r.__words[2]) != 5)
              {
                if (HIBYTE(__s.__r_.__value_.__r.__words[2]) == 20)
                {
                  uint64_t v70 = &__s;
                  goto LABEL_130;
                }
                goto LABEL_146;
              }
              if (LODWORD(__s.__r_.__value_.__l.__data_) != 1819243376 || __s.__r_.__value_.__s.__data_[4] != 97) {
                goto LABEL_146;
              }
LABEL_190:
              long long v78 = (std::__shared_weak_count *)v224[1];
              if (v224[1]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)v224[1] + 1, 1uLL, memory_order_relaxed);
              }
              int v77 = v217;
              int v76 = v213;
              if (v217) {
LABEL_193:
              }
                std::__shared_weak_count::__release_shared[abi:ne180100](v77);
            }
            *(void *)&uint8_t buf[16] = 0;
            std::string::size_type v272 = 0;
            *(void *)&uint8_t buf[8] = 0;
            *(void *)std::string buf = v17;
            uint64_t v273 = 0x8000000000000000;
            uint64_t v80 = *v17;
            if (v80 == 1)
            {
              unint64_t v81 = *((void *)v17 + 1);
              *(void *)&uint8_t buf[8] = v81 + 8;
              *(void *)&uint8_t buf[8] = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(v81, "async");
            }
            else if (v80 == 2)
            {
              *(void *)&uint8_t buf[16] = *(void *)(*((void *)v17 + 1) + 8);
            }
            else
            {
              uint64_t v273 = 1;
            }
            *(void *)&v264[16] = 0;
            std::string::size_type v265 = 0;
            *(void *)&v264[8] = 0;
            *(void *)uint64_t v264 = v17;
            uint64_t v266 = 0x8000000000000000;
            std::string v82 = *v17;
            if (v82 == 2)
            {
              *(void *)&v264[16] = *(void *)(*((void *)v17 + 1) + 8);
            }
            else if (v82 == 1)
            {
              *(void *)&v264[8] = *((void *)v17 + 1) + 8;
            }
            else
            {
              uint64_t v266 = 1;
            }
            if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)v264))
            {
              std::string v83 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v17, "async");
              __p.__r_.__value_.__s.__data_[0] = 0;
              nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v83, &__p);
              if (__p.__r_.__value_.__s.__data_[0])
              {
                std::string v84 = operator new(0x210uLL);
                std::string v85 = v84;
                v84[1] = 0;
                v84[2] = 0;
                std::string *v84 = off_26C216EC0;
                long long v87 = v224[0];
                uint64_t v86 = (std::__shared_weak_count *)v224[1];
                if (v224[1]) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)v224[1] + 1, 1uLL, memory_order_relaxed);
                }
                long long v88 = v84 + 3;
                Module::Module((Module *)(v84 + 3));
                v85[3] = off_26C202AF8;
                v85[37] = v87;
                v85[38] = v86;
                if (v86)
                {
                  atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
                  long long v87 = (void *)v85[37];
                }
                v85[39] = 0;
                v85[40] = 850045863;
                *(_OWORD *)(v85 + 41) = 0u;
                *(_OWORD *)(v85 + 43) = 0u;
                *(_OWORD *)(v85 + 45) = 0u;
                v85[47] = 0;
                v85[48] = 850045863;
                *(_OWORD *)(v85 + 49) = 0u;
                *(_OWORD *)(v85 + 51) = 0u;
                *(_OWORD *)(v85 + 53) = 0u;
                v85[55] = 0;
                v85[56] = 1018212795;
                v85[63] = 0;
                v85[64] = 0;
                *(_OWORD *)(v85 + 57) = 0u;
                *(_OWORD *)(v85 + 59) = 0u;
                *(_OWORD *)((char *)v85 + 481) = 0u;
                *(void *)std::string buf = &off_26C212AC8;
                *(void *)&uint8_t buf[8] = v88;
                std::string::size_type v272 = buf;
                Observable::on_event((uint64_t)v87 + 8, "cache", (uint64_t)buf, (std::string **)v264);
                unint64_t v89 = (std::__shared_weak_count *)v85[64];
                *(_OWORD *)(v85 + 63) = *(_OWORD *)v264;
                if (v89) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v89);
                }
                std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](buf);
                v85[65] = SiriTTS::DispatchQueue::create_queue((SiriTTS::DispatchQueue *)"AsyncContainerModule", v90);
                if (v86) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v86);
                }
                *(void *)&long long v91 = v85 + 3;
                *((void *)&v91 + 1) = v85;
                std::basic_string<char16_t> v92 = (std::__shared_weak_count *)v224[1];
                *(_OWORD *)uint64_t v224 = v91;
                if (v92) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v92);
                }
              }
            }
            long long v93 = (std::__shared_weak_count *)v224[1];
            uint64_t v242 = *(_OWORD *)v224;
            if (v224[1]) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)v224[1] + 1, 1uLL, memory_order_relaxed);
            }
            Pipeline::push_back_module(v215, &v242);
            if (v93) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v93);
            }
            long long v94 = v258;
            if ((unint64_t)v258 >= v259)
            {
              char v96 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v257, (long long *)&__s);
            }
            else
            {
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v258, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else
              {
                double v95 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                v258->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v95;
              }
              char v96 = v94 + 1;
            }
            std::string::size_type v258 = v96;
            if (v224[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v224[1]);
            }
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v227, v226);
            std::string::size_type v16 = v78;
            uint64_t v213 = v76;
LABEL_182:
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v254);
            goto LABEL_22;
          }
        }
        else
        {
          if (!v26) {
            goto LABEL_56;
          }
          uint64_t v33 = &__s;
          uint64_t v34 = v26;
          while (v33->__r_.__value_.__s.__data_[0] == *v32)
          {
            uint64_t v33 = (std::string *)((char *)v33 + 1);
            ++v32;
            if (!--v34) {
              goto LABEL_56;
            }
          }
        }
      }
      v24 += 72;
      if (v24 == v25) {
        goto LABEL_73;
      }
    }
  }
  uint64_t v98 = (void *)(*(uint64_t (**)(uint64_t *))(*v215 + 64))(v215);
  unint64_t v99 = *a2;
  int v100 = (std::recursive_mutex *)(*a2 + 56);
  std::recursive_mutex::lock(v100);
  double v101 = v99 + 32;
  {
    uint64_t v102 = (char *)operator new(0x38uLL);
    *(_OWORD *)(v102 + 8) = 0u;
    *(void *)uint64_t v102 = off_26C216788;
    uint64_t v103 = (uint64_t)(v102 + 24);
    *((void *)v102 + 3) = &off_26C201DB8;
    *(_OWORD *)(v102 + 40) = 0u;
    uint64_t v104 = v102 + 40;
    *((void *)v102 + 4) = v102 + 40;
    int v105 = (uint64_t **)(v102 + 32);
    std::string::basic_string[abi:ne180100]<0>(v264, "neural_fallback_connection");
    if (v102 + 40 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)(v102 + 32), (const void **)v264))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      if ((v264[23] & 0x80u) == 0) {
        unint64_t v202 = v264;
      }
      else {
        unint64_t v202 = *(uint8_t **)v264;
      }
      StringFormatter::StringFormatter((StringFormatter *)buf, "Connection name '%s' is registered already.", (const char *)v202);
      MEMORY[0x210558D40](exception, buf);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    *(void *)std::string buf = v264;
    uint64_t v106 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v105, (const void **)v264, (long long **)buf);
    *(void *)std::string buf = &off_26C2128B8;
    std::string::size_type v272 = buf;
    std::__function::__value_func<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](buf, v106 + 7);
    std::__function::__value_func<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](buf);
    if ((char)v264[23] < 0) {
      operator delete(*(void **)v264);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "neural_blacklist_connection");
    ConnectionFactory::register_connection<NeuralFallbacklistConnection>(v103, (uint64_t)buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "neural_fallbacklist_connection");
    ConnectionFactory::register_connection<NeuralFallbacklistConnection>(v103, (uint64_t)buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string::basic_string[abi:ne180100]<0>(v264, "audio_connection");
    if (v104 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v105, (const void **)v264))
    {
      unint64_t v203 = __cxa_allocate_exception(0x10uLL);
      if ((v264[23] & 0x80u) == 0) {
        long long v204 = v264;
      }
      else {
        long long v204 = *(uint8_t **)v264;
      }
      StringFormatter::StringFormatter((StringFormatter *)buf, "Connection name '%s' is registered already.", (const char *)v204);
      MEMORY[0x210558D40](v203, buf);
      __cxa_throw(v203, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    *(void *)std::string buf = v264;
    unint64_t v107 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v105, (const void **)v264, (long long **)buf);
    *(void *)std::string buf = &off_26C212860;
    std::string::size_type v272 = buf;
    std::__function::__value_func<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](buf, v107 + 7);
    std::__function::__value_func<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](buf);
    if ((char)v264[23] < 0) {
      operator delete(*(void **)v264);
    }
    std::string::basic_string[abi:ne180100]<0>(v264, "neural_thermal_fallback_connection");
    if (v104 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v105, (const void **)v264))
    {
      std::string::size_type v205 = __cxa_allocate_exception(0x10uLL);
      if ((v264[23] & 0x80u) == 0) {
        unint64_t v206 = v264;
      }
      else {
        unint64_t v206 = *(uint8_t **)v264;
      }
      StringFormatter::StringFormatter((StringFormatter *)buf, "Connection name '%s' is registered already.", (const char *)v206);
      MEMORY[0x210558D40](v205, buf);
      __cxa_throw(v205, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    *(void *)std::string buf = v264;
    uint64_t v108 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v105, (const void **)v264, (long long **)buf);
    *(void *)std::string buf = &off_26C212968;
    std::string::size_type v272 = buf;
    std::__function::__value_func<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](buf, v108 + 7);
    std::__function::__value_func<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](buf);
    if ((char)v264[23] < 0) {
      operator delete(*(void **)v264);
    }
    *(void *)std::string buf = v264;
    if (!v109) {
      operator new();
    }
    *(void *)std::string buf = off_26C206538;
    *(void *)&uint8_t buf[8] = v102 + 24;
    *(void *)&uint8_t buf[16] = v102;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v102 + 1, 1uLL, memory_order_relaxed);
    double v110 = *(_OWORD *)&buf[8];
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    double v111 = *(std::__shared_weak_count **)(v109 + 16);
    *(_OWORD *)(v109 + 8) = v110;
    if (v111)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v111);
      *(void *)std::string buf = off_26C206538;
      if (*(void *)&buf[16]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102);
  }
  unint64_t v113 = *(void (****)(uint64_t *__return_ptr, void, std::string *, long long *, long long *, unsigned __int8 *, uint64_t *))(*(void *)v112 + 8);
  uint64_t v114 = *(std::__shared_weak_count **)(*(void *)v112 + 16);
  if (v114) {
    atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v100);
  uint64_t v210 = v114;
  if (*(unsigned char *)v209 == 1
    && std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*(void *)(v209 + 8), v208))
  {
    uint64_t v115 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)v209, v208);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v240, v115);
    *(void *)std::string buf = v240;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    std::string::size_type v272 = 0;
    uint64_t v273 = 0x8000000000000000;
    if (v240[0])
    {
      if (v240[0] == 2)
      {
        *(void *)&uint8_t buf[16] = *v241;
      }
      else if (v240[0] == 1)
      {
        *(void *)&uint8_t buf[8] = *v241;
      }
      else
      {
        uint64_t v273 = 0;
      }
      goto LABEL_224;
    }
  }
  else
  {
    v240[0] = 0;
    uint64_t v241 = 0;
    *(void *)std::string buf = v240;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    std::string::size_type v272 = 0;
    uint64_t v273 = 0x8000000000000000;
  }
  uint64_t v273 = 1;
LABEL_224:
  uint64_t v212 = v98;
  while (1)
  {
    *(void *)&v264[16] = 0;
    std::string::size_type v265 = 0;
    *(void *)&v264[8] = 0;
    *(void *)uint64_t v264 = v240;
    uint64_t v266 = 0x8000000000000000;
    if (v240[0] == 2)
    {
      *(void *)&v264[16] = v241[1];
    }
    else if (v240[0] == 1)
    {
      *(void *)&v264[8] = v241 + 1;
    }
    else
    {
      uint64_t v266 = 1;
    }
    uint64_t v116 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)v264);
    if (v116) {
      break;
    }
    uint64_t v117 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
    uint64_t v118 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v117, "id");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v118, &v254);
    long long v119 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v117, "from");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v119, &__s);
    uint64_t v120 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v117, "to");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v120, &__p);
    std::string::basic_string[abi:ne180100]<0>(v264, "params");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v226, 0, 0, 0, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v117, (const void **)v264, (unsigned __int8 *)&v226, (uint64_t)v238);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v227, v226);
    if ((char)v264[23] < 0) {
      operator delete(*(void **)v264);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v121 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v123 = &v254;
      if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v123 = (std::string *)v254.__r_.__value_.__r.__words[0];
      }
      unint64_t v124 = &__s;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v124 = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v264 = 136315650;
      *(void *)&v264[4] = v123;
      *(_WORD *)&v264[12] = 2080;
      *(void *)&v264[14] = v124;
      *(_WORD *)&v264[22] = 2080;
      std::string::size_type v265 = p_p;
      _os_log_impl(&dword_20CD80000, v121, OS_LOG_TYPE_DEBUG, "Creating connection '%s' from '%s' to '%s'", v264, 0x20u);
    }
    uint64_t v126 = &v254;
    if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v126 = (std::string *)v254.__r_.__value_.__r.__words[0];
    }
    unint64_t v127 = &__s;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v127 = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    long long v128 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v128 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    Diagnostics::log(7, "Creating connection '%s' from '%s' to '%s'", v122, v126, v127, v128);
    long long v129 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v257, (uint64_t)v258, (unsigned __int8 **)&__s);
    if (v129 == v258)
    {
      int v197 = __cxa_allocate_exception(0x10uLL);
      int v198 = &__s;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v198 = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      StringFormatter::StringFormatter((StringFormatter *)v264, "Unfound from module id '%s'", (const char *)v198);
      MEMORY[0x210558D40](v197, v264);
      __cxa_throw(v197, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    uint64_t v130 = v129;
    uint64_t v131 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v257, (uint64_t)v258, (unsigned __int8 **)&__p);
    if (v131 == v258)
    {
      uint64_t v199 = __cxa_allocate_exception(0x10uLL);
      std::string::size_type v200 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v200 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      StringFormatter::StringFormatter((StringFormatter *)v264, "Unfound to module id '%s'", (const char *)v200);
      MEMORY[0x210558D40](v199, v264);
      __cxa_throw(v199, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    uint64_t v132 = v257;
    double v133 = *v98;
    long long v134 = *(_OWORD *)(*v98 - 0x5555555555555550 * (((unint64_t)v130 - v257) >> 3));
    std::string::size_type v135 = *(std::__shared_weak_count **)(*v98 - 0x5555555555555550 * (((unint64_t)v130 - v257) >> 3) + 8);
    if (v135)
    {
      atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
      double v133 = *v98;
    }
    uint64_t v136 = 0xAAAAAAAAAAAAAAB0 * (((unint64_t)v131 - v132) >> 3);
    long long v137 = *(_OWORD *)(v133 + v136);
    uint64_t v138 = *(std::__shared_weak_count **)(v133 + v136 + 8);
    if (v138) {
      atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v235 = v134;
    if (v135) {
      atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v234 = v137;
    if (v138) {
      atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v139 = (std::__shared_weak_count *)a2[1];
    std::string::size_type v232 = *a2;
    int v233 = v139;
    if (v139) {
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (**v113)(&v236, v113, &v254, &v235, &v234, (unsigned __int8 *)v238, &v232);
    if (v233) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v233);
    }
    if (*((void *)&v234 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v234 + 1));
    }
    if (*((void *)&v235 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v235 + 1));
    }
    if (*v117 == 1
      && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((void *)v117 + 1), "pipeline"))
    {
      uint64_t v140 = (std::__shared_weak_count *)a2[1];
      v229[0] = *a2;
      v229[1] = v140;
      if (v140) {
        atomic_fetch_add_explicit(&v140->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(v264, 0, sizeof(v264));
      std::string::basic_string[abi:ne180100]<0>(&v226, "pipeline");
      std::string::basic_string[abi:ne180100]<0>(v224, "connection");
      GryphonPipelineFactory::pipeline_from_config(&v230, v229, v117, v264, &v226, v224);
      if (v225 < 0) {
        operator delete(v224[0]);
      }
      if (v228 < 0) {
        operator delete(v226);
      }
      uint64_t v226 = v264;
      std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
      if (v140) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v140);
      }
      int v141 = (std::__shared_weak_count *)operator new(0x138uLL);
      uint64_t v142 = v141;
      v141->__shared_owners_ = 0;
      v141->__shared_weak_owners_ = 0;
      v141->__vftable = (std::__shared_weak_count_vtbl *)off_26C215C98;
      unint64_t v143 = v230;
      int v144 = v231;
      if (v231) {
        atomic_fetch_add_explicit(&v231->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v145 = &v141[1].__vftable;
      Module::Module((Module *)&v141[1]);
      v142[1].__vftable = (std::__shared_weak_count_vtbl *)off_26C200BF8;
      v142[12].__shared_owners_ = v143;
      v142[12].__shared_weak_owners_ = (uint64_t)v144;
      if (v144)
      {
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v144);
      }
      BOOL v146 = v236;
      atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v147 = *(std::__shared_weak_count **)(v146 + 48);
      *(void *)(v146 + 40) = v145;
      *(void *)(v146 + 48) = v142;
      uint64_t v98 = v212;
      if (v147) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v147);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v142);
      if (v144) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v144);
      }
    }
    unint64_t v222 = v236;
    uint64_t v223 = v237;
    if (v237) {
      atomic_fetch_add_explicit(&v237->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t *, uint64_t *))(*v215 + 24))(v215, &v222);
    if (v223) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v223);
    }
    if (v237) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v237);
    }
    if (v138) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v138);
    }
    if (v135) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v135);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v239, v238[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v254.__r_.__value_.__l.__data_);
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
  }
  if (*(unsigned char *)GryphonAnalysis::Storage((GryphonAnalysis *)v116))
  {
    SharedObjectPool::get<MDN>(buf, *a2);
    uint64_t v148 = *(void *)buf;
    *(void *)(GryphonAnalysis::Storage(v149) + 40) = v148;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    SharedObjectPool::get<Database>(buf, *a2);
    unint64_t v150 = *(void *)buf;
    *(void *)(GryphonAnalysis::Storage(v151) + 32) = v150;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  int64_t v152 = v214[4];
  if (v152 == v214[5]) {
    goto LABEL_326;
  }
  while (1)
  {
    if (!*(void *)v152) {
      goto LABEL_318;
    }
    if (v153) {
      break;
    }
LABEL_316:
    if (*(void *)v152
    {
      unint64_t v155 = *(std::__shared_weak_count **)(v152 + 8);
      if (!v155) {
        goto LABEL_326;
      }
      atomic_fetch_add_explicit(&v155->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_325;
    }
LABEL_318:
    v152 += 16;
    if (v152 == v214[5]) {
      goto LABEL_326;
    }
  }
  std::string::size_type v154 = v153;
  unint64_t v155 = *(std::__shared_weak_count **)(v152 + 8);
  if (v155) {
    atomic_fetch_add_explicit(&v155->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v156 = (const void *)v153[34];
  if (!v156
  {
    if (v155) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v155);
    }
    goto LABEL_316;
  }
  char v157 = (std::__shared_weak_count *)v154[35];
  if (v157)
  {
    atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v157);
  }
  if (v155) {
LABEL_325:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v155);
LABEL_326:
  if (v98[1] != v152) {
    goto LABEL_377;
  }
  buf[0] = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v220 = 4;
  unint64_t v221 = 0;
  uint64_t v158 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(buf, "enable_print");
  uint64_t v159 = *(unsigned __int8 *)v158;
  *(unsigned char *)uint64_t v158 = 4;
  uint64_t v220 = v159;
  int v160 = (uint64_t *)v158[1];
  v158[1] = (uint64_t)v221;
  unint64_t v221 = v160;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v221, v159);
  std::string::size_type v161 = (std::__shared_weak_count *)operator new(0x140uLL);
  unint64_t v162 = v161;
  v161->__shared_owners_ = 0;
  v161->__shared_weak_owners_ = 0;
  v161->__vftable = (std::__shared_weak_count_vtbl *)off_26C2178D0;
  uint64_t v163 = &v161[1].__vftable;
  uint64_t v164 = *a2;
  uint64_t v165 = (std::__shared_weak_count *)a2[1];
  if (v165) {
    atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FrontendFeatureLogModule::FrontendFeatureLogModule((uint64_t)&v161[1], buf, v164, v165);
  if (v165) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v165);
  }
  std::string::size_type v166 = v214[4];
  if (v166 == v214[5]) {
    goto LABEL_352;
  }
  while (2)
  {
    if (!*(void *)v166)
    {
LABEL_342:
      v166 += 16;
      if (v166 == v214[5]) {
        goto LABEL_352;
      }
      continue;
    }
    break;
  }
  if (!v167)
  {
LABEL_340:
    if (*(void *)v166
    {
      uint64_t v169 = *(std::__shared_weak_count **)(v166 + 8);
      if (!v169) {
        goto LABEL_352;
      }
      atomic_fetch_add_explicit(&v169->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_351;
    }
    goto LABEL_342;
  }
  uint64_t v168 = v167;
  uint64_t v169 = *(std::__shared_weak_count **)(v166 + 8);
  if (v169) {
    atomic_fetch_add_explicit(&v169->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v170 = (const void *)v167[34];
  if (!v170
  {
    if (v169) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v169);
    }
    goto LABEL_340;
  }
  int v171 = (std::__shared_weak_count *)v168[35];
  if (v171)
  {
    atomic_fetch_add_explicit(&v171->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v171);
  }
  if (v169) {
LABEL_351:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v169);
LABEL_352:
  int v172 = v212[1];
  if (v172 != v166) {
    goto LABEL_373;
  }
  std::string::size_type v166 = v214[4];
  if (v166 == v214[5]) {
    goto LABEL_372;
  }
  while (2)
  {
    if (!*(void *)v166)
    {
LABEL_364:
      v166 += 16;
      if (v166 == v214[5]) {
        goto LABEL_372;
      }
      continue;
    }
    break;
  }
  if (!v173)
  {
LABEL_362:
    if (*(void *)v166
    {
      int v175 = *(std::__shared_weak_count **)(v166 + 8);
      if (!v175) {
        goto LABEL_372;
      }
      atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_371;
    }
    goto LABEL_364;
  }
  std::string::size_type v174 = v173;
  int v175 = *(std::__shared_weak_count **)(v166 + 8);
  if (v175) {
    atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v176 = (const void *)v173[34];
  if (!v176
  {
    if (v175) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v175);
    }
    goto LABEL_362;
  }
  char v177 = (std::__shared_weak_count *)v174[35];
  if (v177)
  {
    atomic_fetch_add_explicit(&v177->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v177);
  }
  if (v175) {
LABEL_371:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v175);
LABEL_372:
  int v172 = v212[1];
LABEL_373:
  if (v166 != v172)
  {
    unint64_t v218 = v163;
    unint64_t v219 = v162;
    atomic_fetch_add_explicit(&v162->__shared_owners_, 1uLL, memory_order_relaxed);
    Pipeline::insert_module(v215, v166, (char *)&v218);
    if (v219) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v219);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v162);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[8], buf[0]);
LABEL_377:
  uint64_t v178 = v214[7];
  uint64_t v179 = v214[8];
  if (v178 != v179)
  {
    while (1)
    {
      std::string::size_type v180 = *(const void **)v178;
      uint64_t v181 = *(std::__shared_weak_count **)(v178 + 8);
      if (v181) {
        atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v180
      {
        break;
      }
      if (v181) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v181);
      }
      v178 += 16;
      if (v178 == v179)
      {
        uint64_t v178 = v179;
        goto LABEL_388;
      }
    }
    if (v181)
    {
      atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v181);
      std::__shared_weak_count::__release_shared[abi:ne180100](v181);
    }
  }
LABEL_388:
  if (v178 == v214[8])
  {
    int v183 = 0;
    int v182 = 0;
  }
  else
  {
    int v183 = *(const void **)v178;
    int v182 = *(std::__shared_weak_count **)(v178 + 8);
    if (v182) {
      atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  int v184 = v214[4];
  if (v184 == v214[5]) {
    goto LABEL_411;
  }
  while (2)
  {
    if (!*(void *)v184)
    {
LABEL_403:
      v184 += 16;
      if (v184 == v214[5]) {
        goto LABEL_411;
      }
      continue;
    }
    break;
  }
  if (!v185)
  {
LABEL_401:
    if (*(void *)v184
    {
      uint64_t v187 = *(std::__shared_weak_count **)(v184 + 8);
      if (!v187) {
        goto LABEL_411;
      }
      atomic_fetch_add_explicit(&v187->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_410;
    }
    goto LABEL_403;
  }
  uint64_t v186 = v185;
  uint64_t v187 = *(std::__shared_weak_count **)(v184 + 8);
  if (v187) {
    atomic_fetch_add_explicit(&v187->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v188 = (const void *)v185[34];
  if (!v188
  {
    if (v187) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v187);
    }
    goto LABEL_401;
  }
  uint64_t v189 = (std::__shared_weak_count *)v186[35];
  if (v189)
  {
    atomic_fetch_add_explicit(&v189->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v189);
  }
  if (v187) {
LABEL_410:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v187);
LABEL_411:
  if (v214[5] == v184)
  {
    void *v207 = v215;
    v207[1] = v214;
    int v191 = v217;
  }
  else
  {
    uint64_t v190 = *(void **)v184;
    int v191 = v217;
    if (*(void *)v184
    {
      std::string::size_type v193 = v192;
      long long v194 = *(std::__shared_weak_count **)(v184 + 8);
      if (v194) {
        atomic_fetch_add_explicit(&v194->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v190 = (void *)*((void *)v193 + 34);
      std::string::size_type v195 = (std::__shared_weak_count *)*((void *)v193 + 35);
      if (v195) {
        atomic_fetch_add_explicit(&v195->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v194) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v194);
      }
    }
    else
    {
      std::string::size_type v195 = *(std::__shared_weak_count **)(v184 + 8);
      if (v195) {
        atomic_fetch_add_explicit(&v195->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    if (v190 && v183)
    {
      if (v182) {
        atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v196 = (std::__shared_weak_count *)v190[35];
      v190[34] = v183;
      v190[35] = v182;
      if (v196) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v196);
      }
    }
    void *v207 = v215;
    v207[1] = v214;
    if (v195) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v195);
    }
  }
  if (v182) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v182);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v241, v240[0]);
  if (v210) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v210);
  }
  *(void *)std::string buf = &v257;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v191) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v191);
  }
  if (v213) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v213);
  }
  if (v261) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v261);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v263, v262[0]);
}

void sub_20D3CCE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (*(char *)(v36 - 185) < 0)
  {
    operator delete(*(void **)(v36 - 208));
    if ((v35 & 1) == 0)
    {
LABEL_6:
      if (SLOBYTE(STACK[0x2B7]) < 0) {
        operator delete((void *)STACK[0x2A0]);
      }
      std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(*(void **)(v34 + 40));
      std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
      operator delete(v38);
      std::recursive_mutex::unlock(v33);
      STACK[0x240] = (unint64_t)&STACK[0x268];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
      if (a32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a32);
      }
      if (a27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a27);
      }
      if (STACK[0x288]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x288]);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](a28);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&STACK[0x298], LOBYTE(STACK[0x290]));
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

void std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        if (*((char *)v4 - 25) < 0) {
          operator delete(*(v4 - 6));
        }
        if (*((char *)v4 - 49) < 0) {
          operator delete(*(v4 - 9));
        }
        v4 -= 9;
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL GryphonPipelineFactory::is_fe_module(void *__s)
{
  uint64_t v1 = __s;
  if (*((char *)__s + 23) < 0)
  {
    uint64_t v1 = (void *)*__s;
    uint64_t v2 = __s[1];
  }
  else
  {
    uint64_t v2 = *((unsigned __int8 *)__s + 23);
  }
  int v3 = (char *)v1 + v2;
  if (v2 >= 3)
  {
    uint64_t v4 = v1;
    do
    {
      int v5 = (char *)memchr(v4, 102, v2 - 2);
      if (!v5) {
        break;
      }
      if (*(_WORD *)v5 == 25958 && v5[2] == 47) {
        return v5 != v3 && v5 - (char *)v1 != -1;
      }
      uint64_t v4 = v5 + 1;
      uint64_t v2 = v3 - (unsigned char *)v4;
    }
    while (v3 - (unsigned char *)v4 > 2);
  }
  int v5 = v3;
  return v5 != v3 && v5 - (char *)v1 != -1;
}

uint64_t std::__shared_ptr_emplace<FrontendFeatureLogModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FrontendFeatureLogModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2178D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FrontendFeatureLogModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2178D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<PipelineModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PipelineModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PipelineModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::ItemHolder<std::shared_ptr<ConnectionFactory>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206538;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<ConnectionFactory>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206538;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<AsyncContainerModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AsyncContainerModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AsyncContainerModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<StreamingPipeline>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = off_26C205C38;
  std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100]((void *)(a1 + 80));
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      do
      {
        int v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v2;
    operator delete(v4);
  }
  unint64_t v6 = (void **)(a1 + 32);
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void std::__shared_ptr_emplace<StreamingPipeline>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2168D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<StreamingPipeline>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2168D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void GryphonPipelineFactory::nashvilleFE_backend_pipeline(uint64_t **a1, uint64_t *a2)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  v50[0] = 0;
  std::basic_string<char16_t>::size_type v51 = 0;
  GryphonPipelineFactory::shared_gryphon_backend_pipeline((GryphonPipelineFactory *)v48);
  int v4 = v50[0];
  v50[0] = v48[0];
  v48[0] = v4;
  int v5 = v51;
  std::basic_string<char16_t>::size_type v51 = v49;
  unint64_t v49 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v49, v4);
  char v61 = 0;
  LOBYTE(v60) = 3;
  char v61 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  std::string v62 = (void ***)&v60;
  char v63 = 1;
  long long v65 = 0;
  v64[0] = 3;
  long long v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>("frontend_feature_log");
  long long v66 = v64;
  char v67 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v68, (uint64_t)&v60, 2, 1, 2);
  unint64_t v69 = v68;
  char v70 = 1;
  int8x16_t v53 = 0;
  LOBYTE(__p) = 3;
  int8x16_t v53 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  char v55 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v38, 0, 0, 0, 1);
  v56[0] = v38;
  unint64_t v6 = v39[0];
  LOBYTE(v38) = 0;
  v39[0] = 0;
  unint64_t v57 = v6;
  std::string::size_type v58 = v56;
  char v59 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v71, (uint64_t)&__p, 2, 1, 2);
  std::string::size_type v72 = v71;
  char v73 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v46, (uint64_t)v68, 2, 1, 2);
  for (uint64_t i = 0; i != -64; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v71[i + 8], v71[i]);
  for (uint64_t j = 0; j != -8; j -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v57)[j], v56[j * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v39, v38);
  for (uint64_t k = 0; k != -8; k -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v65)[k], v64[k * 8]);
  char v44 = 4;
  uint64_t v45 = 0;
  unint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v46, "params");
  uint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v10, "enable_print");
  int v12 = *(unsigned __int8 *)v11;
  *(unsigned char *)uint64_t v11 = v44;
  char v44 = v12;
  long long v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v45;
  uint64_t v45 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v45, v12);
  if (v50[0] == 2) {
    uint64_t v14 = (unsigned char *)*v51;
  }
  else {
    uint64_t v14 = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(v68, v50, (uint64_t)v50, v14, (uint64_t)v46);
  if (v50[0] == 2) {
    uint64_t v15 = (unsigned char *)*v51;
  }
  else {
    uint64_t v15 = 0;
  }
  char v61 = 0;
  LOBYTE(v60) = 3;
  char v61 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  std::string v62 = (void ***)&v60;
  char v63 = 1;
  long long v65 = 0;
  v64[0] = 3;
  long long v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>("prompt_be");
  long long v66 = v64;
  char v67 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v68, (uint64_t)&v60, 2, 1, 2);
  unint64_t v69 = v68;
  char v70 = 1;
  int8x16_t v53 = 0;
  LOBYTE(__p) = 3;
  int8x16_t v53 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  char v55 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, 0, 0, 0, 1);
  v56[0] = v40[0];
  std::string::size_type v16 = v41;
  v40[0] = 0;
  unsigned __int8 v41 = 0;
  unint64_t v57 = v16;
  std::string::size_type v58 = v56;
  char v59 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v71, (uint64_t)&__p, 2, 1, 2);
  std::string::size_type v72 = v71;
  char v73 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v42, (uint64_t)v68, 2, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(&v38, v50, (uint64_t)v50, v15, (uint64_t)v42);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v43, v42[0]);
  for (uint64_t m = 0; m != -64; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v71[m + 8], v71[m]);
  for (uint64_t n = 0; n != -8; n -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v57)[n], v56[n * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v41, v40[0]);
  for (iuint64_t i = 0; ii != -8; ii -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v65)[ii], v64[ii * 8]);
  if (v50[0] == 2) {
    BOOL v20 = (unsigned char *)*v51;
  }
  else {
    BOOL v20 = 0;
  }
  char v61 = 0;
  LOBYTE(v60) = 3;
  char v61 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  std::string v62 = (void ***)&v60;
  char v63 = 1;
  long long v65 = 0;
  v64[0] = 3;
  long long v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>("nashville_fe");
  long long v66 = v64;
  char v67 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v68, (uint64_t)&v60, 2, 1, 2);
  unint64_t v69 = v68;
  char v70 = 1;
  int8x16_t v53 = 0;
  LOBYTE(__p) = 3;
  int8x16_t v53 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  char v55 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, 0, 0, 0, 1);
  v56[0] = v40[0];
  std::string v21 = v41;
  v40[0] = 0;
  unsigned __int8 v41 = 0;
  unint64_t v57 = v21;
  std::string::size_type v58 = v56;
  char v59 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v71, (uint64_t)&__p, 2, 1, 2);
  std::string::size_type v72 = v71;
  char v73 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v42, (uint64_t)v68, 2, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(&v38, v50, (uint64_t)v50, v20, (uint64_t)v42);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v43, v42[0]);
  for (juint64_t j = 0; jj != -64; jj -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v71[jj + 8], v71[jj]);
  for (kuint64_t k = 0; kk != -8; kk -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v57)[kk], v56[kk * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v41, v40[0]);
  for (muint64_t m = 0; mm != -8; mm -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v65)[mm], v64[mm * 8]);
  LOBYTE(v38) = 0;
  v39[0] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v50);
  uint64_t v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v38, "pipeline");
  int v26 = *(unsigned __int8 *)v25;
  *(unsigned char *)uint64_t v25 = v36[0];
  v36[0] = v26;
  uint64_t v27 = (uint64_t *)v25[1];
  v25[1] = (uint64_t)v37;
  char v37 = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v26);
  uint64_t v28 = *a2;
  std::string::size_type v29 = *(std::__shared_weak_count **)(*a2 + 24);
  if (v29)
  {
    std::string::size_type v29 = std::__shared_weak_count::lock(v29);
    uint64_t v30 = v29;
    if (v29) {
      std::string::size_type v29 = *(std::__shared_weak_count **)(v28 + 16);
    }
  }
  else
  {
    uint64_t v30 = 0;
  }
  int v31 = (std::__shared_weak_count *)a2[1];
  v35[0] = *a2;
  v35[1] = (uint64_t)v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersistentModuleFactory::load_from_config(v29, (uint64_t)&v38, v35);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  uint64_t v32 = *a2;
  uint64_t v33 = (std::__shared_weak_count *)a2[1];
  v34[0] = v32;
  v34[1] = (uint64_t)v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v68[0] = 0;
  v68[1] = 0;
  unint64_t v69 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v60, "pipeline");
  std::string::basic_string[abi:ne180100]<0>(&__p, "connection");
  GryphonPipelineFactory::pipeline_from_config(a1, v34, (uint64_t)&v38, v68, (uint64_t)&v60, (const void **)&__p);
  if (SHIBYTE(p_p) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(v60);
  }
  unint64_t v60 = v68;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v39, v38);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v47, v46[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v51, v50[0]);
}

void sub_20D3CE100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,unsigned __int8 a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  *(void *)(v40 - 216) = v40 - 152;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 216));
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v39, a15);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a27, a26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v37, a30);
  _Unwind_Resume(a1);
}

void GryphonPipelineFactory::shared_gryphon_backend_pipeline(GryphonPipelineFactory *this)
{
  uint64_t v256 = *MEMORY[0x263EF8340];
  v224[0] = 3;
  uint64_t v225 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  uint64_t v226 = v224;
  char v227 = 1;
  v229[0] = 0;
  v228[0] = 3;
  v229[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>("unit_feature_predict");
  v229[1] = v228;
  char v230 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v231, (uint64_t)v224, 2, 1, 2);
  std::string::size_type v232 = v231;
  char v233 = 1;
  v217[0] = 3;
  unint64_t v218 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  unint64_t v219 = v217;
  char v220 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v55, 0, 0, 0, 1);
  v221[0] = v55[0];
  uint64_t v2 = v56;
  v55[0] = 0;
  uint64_t v56 = 0;
  v222[0] = v2;
  v222[1] = v221;
  char v223 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v234, (uint64_t)v217, 2, 1, 2);
  std::string::size_type v235 = v234;
  char v236 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v237, (uint64_t)v231, 2, 1, 2);
  std::string::size_type v238 = v237;
  char v239 = 1;
  std::string::size_type v205 = 0;
  v204[0] = 3;
  std::string::size_type v205 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  unint64_t v206 = v204;
  char v207 = 1;
  v209[0] = 0;
  v208[0] = 3;
  v209[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[15]>("unit_preselect");
  v209[1] = v208;
  char v210 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v211, (uint64_t)v204, 2, 1, 2);
  uint64_t v212 = v211;
  char v213 = 1;
  int v198 = 0;
  v197[0] = 3;
  int v198 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  uint64_t v199 = v197;
  char v200 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v53, 0, 0, 0, 1);
  v201[0] = v53[0];
  uint64_t v3 = v54;
  v53[0] = 0;
  std::string::size_type v54 = 0;
  v202[0] = v3;
  v202[1] = v201;
  char v203 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v214, (uint64_t)v197, 2, 1, 2);
  uint64_t v215 = v214;
  char v216 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v240, (uint64_t)v211, 2, 1, 2);
  v240[2] = v240;
  char v241 = 1;
  uint64_t v185 = 0;
  v184[0] = 3;
  uint64_t v185 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  uint64_t v186 = v184;
  char v187 = 1;
  v189[0] = 0;
  v188[0] = 3;
  v189[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>("viterbi");
  v189[1] = v188;
  char v190 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v191, (uint64_t)v184, 2, 1, 2);
  long long v192 = v191;
  char v193 = 1;
  uint64_t v178 = 0;
  v177[0] = 3;
  uint64_t v178 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  uint64_t v179 = v177;
  char v180 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v51, 0, 0, 0, 1);
  v181[0] = v51[0];
  int v4 = v52;
  v51[0] = 0;
  std::string::size_type v52 = 0;
  v182[0] = v4;
  v182[1] = v181;
  char v183 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v194, (uint64_t)v177, 2, 1, 2);
  std::string::size_type v195 = v194;
  char v196 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v242, (uint64_t)v191, 2, 1, 2);
  v242[2] = v242;
  char v243 = 1;
  uint64_t v165 = 0;
  v164[0] = 3;
  uint64_t v165 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  std::string::size_type v166 = v164;
  char v167 = 1;
  v169[0] = 0;
  v168[0] = 3;
  v169[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>("unit_segment");
  v169[1] = v168;
  char v170 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v171, (uint64_t)v164, 2, 1, 2);
  int v172 = v171;
  char v173 = 1;
  uint64_t v158 = 0;
  v157[0] = 3;
  uint64_t v158 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  uint64_t v159 = v157;
  char v160 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v49, 0, 0, 0, 1);
  v161[0] = v49[0];
  int v5 = v50;
  v49[0] = 0;
  std::string v50 = 0;
  v162[0] = v5;
  v162[1] = v161;
  char v163 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v174, (uint64_t)v157, 2, 1, 2);
  int v175 = v174;
  char v176 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v244, (uint64_t)v171, 2, 1, 2);
  v244[2] = v244;
  char v245 = 1;
  uint64_t v145 = 0;
  v144[0] = 3;
  uint64_t v145 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  BOOL v146 = v144;
  char v147 = 1;
  v149[0] = 0;
  v148[0] = 3;
  v149[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>("psola");
  v149[1] = v148;
  char v150 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v151, (uint64_t)v144, 2, 1, 2);
  int64_t v152 = v151;
  char v153 = 1;
  uint64_t v138 = 0;
  v137[0] = 3;
  uint64_t v138 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  std::string::size_type v139 = v137;
  char v140 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v47, 0, 0, 0, 1);
  v141[0] = v47[0];
  unint64_t v6 = v48;
  v47[0] = 0;
  uint64_t v48 = 0;
  v142[0] = v6;
  v142[1] = v141;
  char v143 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v154, (uint64_t)v137, 2, 1, 2);
  unint64_t v155 = v154;
  char v156 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v246, (uint64_t)v151, 2, 1, 2);
  v246[2] = v246;
  char v247 = 1;
  unint64_t v125 = 0;
  v124[0] = 3;
  unint64_t v125 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  uint64_t v126 = v124;
  char v127 = 1;
  v129[0] = 0;
  v128[0] = 3;
  v129[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>("wsola");
  v129[1] = v128;
  char v130 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v131, (uint64_t)v124, 2, 1, 2);
  uint64_t v132 = v131;
  char v133 = 1;
  uint64_t v118 = 0;
  v117[0] = 3;
  uint64_t v118 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  long long v119 = v117;
  char v120 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v45, 0, 0, 0, 1);
  v121[0] = v45[0];
  unint64_t v7 = v46;
  v45[0] = 0;
  unint64_t v46 = 0;
  v122[0] = v7;
  v122[1] = v121;
  char v123 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v134, (uint64_t)v117, 2, 1, 2);
  std::string::size_type v135 = v134;
  char v136 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v248, (uint64_t)v131, 2, 1, 2);
  v248[2] = v248;
  char v249 = 1;
  int v105 = 0;
  v104[0] = 3;
  int v105 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  uint64_t v106 = v104;
  char v107 = 1;
  v109[0] = 0;
  v108[0] = 3;
  uint64_t v8 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v8, "silence_trimming");
  v109[0] = v8;
  v109[1] = v108;
  char v110 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v111, (uint64_t)v104, 2, 1, 2);
  std::string::size_type v112 = v111;
  char v113 = 1;
  uint64_t v98 = 0;
  v97[0] = 3;
  uint64_t v98 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  unint64_t v99 = v97;
  char v100 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v43, 0, 0, 0, 1);
  v101[0] = v43[0];
  uint64_t v9 = v44;
  v43[0] = 0;
  char v44 = 0;
  v102[0] = v9;
  v102[1] = v101;
  char v103 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v114, (uint64_t)v97, 2, 1, 2);
  uint64_t v115 = v114;
  char v116 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v250, (uint64_t)v111, 2, 1, 2);
  v250[2] = v250;
  char v251 = 1;
  std::string v85 = 0;
  v84[0] = 3;
  std::string v85 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  uint64_t v86 = v84;
  char v87 = 1;
  v89[0] = 0;
  v88[0] = 3;
  v89[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>("whisper");
  v89[1] = v88;
  char v90 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v91, (uint64_t)v84, 2, 1, 2);
  std::basic_string<char16_t> v92 = v91;
  char v93 = 1;
  long long v78 = 0;
  v77[0] = 3;
  long long v78 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  std::string v79 = v77;
  char v80 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v41, 0, 0, 0, 1);
  v81[0] = v41[0];
  unint64_t v10 = v42;
  v41[0] = 0;
  unsigned __int8 v42 = 0;
  v82[0] = v10;
  v82[1] = v81;
  char v83 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v94, (uint64_t)v77, 2, 1, 2);
  double v95 = v94;
  char v96 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v252, (uint64_t)v91, 2, 1, 2);
  v252[2] = v252;
  char v253 = 1;
  long long v65 = 0;
  v64[0] = 3;
  long long v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  long long v66 = v64;
  char v67 = 1;
  v69[0] = 0;
  v68[0] = 3;
  v69[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>("audio_marker");
  v69[1] = v68;
  char v70 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v71, (uint64_t)v64, 2, 1, 2);
  std::string::size_type v72 = v71;
  char v73 = 1;
  std::string::size_type v58 = 0;
  v57[0] = 3;
  std::string::size_type v58 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  char v59 = v57;
  char v60 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v39, 0, 0, 0, 1);
  v61[0] = v39[0];
  uint64_t v11 = v40;
  v39[0] = 0;
  uint64_t v40 = 0;
  v62[0] = v11;
  v62[1] = v61;
  char v63 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v74, (uint64_t)v57, 2, 1, 2);
  std::string::size_type v75 = v74;
  char v76 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v254, (uint64_t)v71, 2, 1, 2);
  v254[2] = v254;
  char v255 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)this, (uint64_t)v237, 9, 1, 2);
  uint64_t v12 = 288;
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v234[v12 + 8], v234[v12]);
    v12 -= 32;
  }
  while (v12);
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v74[v12 + 8], v74[v12]);
    v12 -= 32;
  }
  while (v12 != -64);
  for (uint64_t i = 0; i != -8; i -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v62[i], v61[i * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v40, v39[0]);
  for (uint64_t j = 0; j != -8; j -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v69[j], v68[j * 8]);
  for (uint64_t k = 0; k != -64; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v94[k + 8], v94[k]);
  for (uint64_t m = 0; m != -8; m -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v82[m], v81[m * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v42, v41[0]);
  for (uint64_t n = 0; n != -8; n -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v89[n], v88[n * 8]);
  for (iuint64_t i = 0; ii != -64; ii -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v114[ii + 8], v114[ii]);
  for (juint64_t j = 0; jj != -8; jj -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v102[jj], v101[jj * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v43[0]);
  for (kuint64_t k = 0; kk != -8; kk -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v109[kk], v108[kk * 8]);
  for (muint64_t m = 0; mm != -64; mm -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v134[mm + 8], v134[mm]);
  for (nuint64_t n = 0; nn != -8; nn -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v122[nn], v121[nn * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45[0]);
  for (uint64_t i1 = 0; i1 != -8; i1 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v129[i1], v128[i1 * 8]);
  for (uint64_t i2 = 0; i2 != -64; i2 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v154[i2 + 8], v154[i2]);
  for (uint64_t i3 = 0; i3 != -8; i3 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v142[i3], v141[i3 * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v48, v47[0]);
  for (uint64_t i4 = 0; i4 != -8; i4 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v149[i4], v148[i4 * 8]);
  for (uint64_t i5 = 0; i5 != -64; i5 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v174[i5 + 8], v174[i5]);
  for (uint64_t i6 = 0; i6 != -8; i6 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v162[i6], v161[i6 * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
  for (uint64_t i7 = 0; i7 != -8; i7 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v169[i7], v168[i7 * 8]);
  for (uint64_t i8 = 0; i8 != -64; i8 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v194[i8 + 8], v194[i8]);
  for (uint64_t i9 = 0; i9 != -8; i9 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v182[i9], v181[i9 * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
  for (uint64_t i10 = 0; i10 != -8; i10 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v189[i10], v188[i10 * 8]);
  for (uint64_t i11 = 0; i11 != -64; i11 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v214[i11 + 8], v214[i11]);
  for (uint64_t i12 = 0; i12 != -8; i12 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v202[i12], v201[i12 * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53[0]);
  for (uint64_t i13 = 0; i13 != -8; i13 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v209[i13], v208[i13 * 8]);
  for (uint64_t i14 = 0; i14 != -64; i14 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v234[i14 + 8], v234[i14]);
  for (uint64_t i15 = 0; i15 != -8; i15 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v222[i15], v221[i15 * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v55[0]);
  for (uint64_t i16 = 0; i16 != -8; i16 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v229[i16], v228[i16 * 8]);
}

void sub_20D3CF51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t **a13, uint64_t **a14, _Unwind_Exception *exception_objecta, uint64_t **a16, uint64_t **a17, uint64_t **a18, uint64_t **a19, uint64_t **a20,uint64_t **a21,uint64_t **a22,unsigned __int8 a23,uint64_t a24,unsigned __int8 a25,uint64_t a26,unsigned __int8 a27,uint64_t a28,unsigned __int8 a29,uint64_t a30,unsigned __int8 a31,uint64_t a32,unsigned __int8 a33,uint64_t a34,unsigned __int8 a35,uint64_t a36,unsigned __int8 a37,uint64_t a38,unsigned __int8 a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v66 = 288;
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v65 + v66 - 24), *(unsigned __int8 *)(v65 + v66 - 32));
    v66 -= 32;
  }
  while (v66);
  for (uint64_t i = 0; i != -64; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a57 + i + 40), *(&a57 + i + 32));
  for (uint64_t j = 0; j != -64; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a41 + j + 40), *(&a41 + j + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a13, a23);
  for (uint64_t k = 0; k != -64; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a49 + k + 40), *(&a49 + k + 32));
  for (uint64_t m = 0; m != -64; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x240] + m + 40), *((unsigned __int8 *)&STACK[0x240] + m + 32));
  for (uint64_t n = 0; n != -64; n -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a65 + n + 40), *(&a65 + n + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a14, a25);
  for (iuint64_t i = 0; ii != -64; ii -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x200] + ii + 40), *((unsigned __int8 *)&STACK[0x200] + ii + 32));
  for (juint64_t j = 0; jj != -64; jj -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x300] + jj + 40), *((unsigned __int8 *)&STACK[0x300] + jj + 32));
  for (kuint64_t k = 0; kk != -64; kk -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x280] + kk + 40), *((unsigned __int8 *)&STACK[0x280] + kk + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a16, a27);
  for (muint64_t m = 0; mm != -64; mm -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x2C0] + mm + 40), *((unsigned __int8 *)&STACK[0x2C0] + mm + 32));
  for (nuint64_t n = 0; nn != -64; nn -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x3C0] + nn + 40), *((unsigned __int8 *)&STACK[0x3C0] + nn + 32));
  for (uint64_t i1 = 0; i1 != -64; i1 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x340] + i1 + 40), *((unsigned __int8 *)&STACK[0x340] + i1 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a17, a29);
  for (uint64_t i2 = 0; i2 != -64; i2 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x380] + i2 + 40), *((unsigned __int8 *)&STACK[0x380] + i2 + 32));
  for (uint64_t i3 = 0; i3 != -64; i3 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x480] + i3 + 40), *((unsigned __int8 *)&STACK[0x480] + i3 + 32));
  for (uint64_t i4 = 0; i4 != -64; i4 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x400] + i4 + 40), *((unsigned __int8 *)&STACK[0x400] + i4 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a18, a31);
  for (uint64_t i5 = 0; i5 != -64; i5 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x440] + i5 + 40), *((unsigned __int8 *)&STACK[0x440] + i5 + 32));
  for (uint64_t i6 = 0; i6 != -64; i6 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x540] + i6 + 40), *((unsigned __int8 *)&STACK[0x540] + i6 + 32));
  for (uint64_t i7 = 0; i7 != -64; i7 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x4C0] + i7 + 40), *((unsigned __int8 *)&STACK[0x4C0] + i7 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a19, a33);
  for (uint64_t i8 = 0; i8 != -64; i8 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x500] + i8 + 40), *((unsigned __int8 *)&STACK[0x500] + i8 + 32));
  for (uint64_t i9 = 0; i9 != -64; i9 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x600] + i9 + 40), *((unsigned __int8 *)&STACK[0x600] + i9 + 32));
  for (uint64_t i10 = 0; i10 != -64; i10 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x580] + i10 + 40), *((unsigned __int8 *)&STACK[0x580] + i10 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a20, a35);
  for (uint64_t i11 = 0; i11 != -64; i11 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x5C0] + i11 + 40), *((unsigned __int8 *)&STACK[0x5C0] + i11 + 32));
  for (uint64_t i12 = 0; i12 != -64; i12 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x6C0] + i12 + 40), *((unsigned __int8 *)&STACK[0x6C0] + i12 + 32));
  for (uint64_t i13 = 0; i13 != -64; i13 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x640] + i13 + 40), *((unsigned __int8 *)&STACK[0x640] + i13 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a21, a37);
  for (uint64_t i14 = 0; i14 != -64; i14 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x680] + i14 + 40), *((unsigned __int8 *)&STACK[0x680] + i14 + 32));
  for (uint64_t i15 = 0; i15 != -64; i15 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x780] + i15 + 40), *((unsigned __int8 *)&STACK[0x780] + i15 + 32));
  for (uint64_t i16 = 0; i16 != -64; i16 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x700] + i16 + 40), *((unsigned __int8 *)&STACK[0x700] + i16 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a22, a39);
  for (uint64_t i17 = 0; i17 != -64; i17 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x740] + i17 + 40), *((unsigned __int8 *)&STACK[0x740] + i17 + 32));
  _Unwind_Resume(a1);
}

void sub_20D3CFCBC()
{
}

void sub_20D3CFCCC()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x340]));
  JUMPOUT(0x20D3CF900);
}

void sub_20D3CFCF0()
{
}

void sub_20D3CFD04()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x380]));
  JUMPOUT(0x20D3CF94CLL);
}

void sub_20D3CFD28()
{
}

void sub_20D3CFD38()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x400]));
  JUMPOUT(0x20D3CF9A4);
}

void sub_20D3CFD5C()
{
}

void sub_20D3CFD70()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x440]));
  JUMPOUT(0x20D3CF9F0);
}

void sub_20D3CFD94()
{
}

void sub_20D3CFDA4()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x4C0]));
  JUMPOUT(0x20D3CFA48);
}

void sub_20D3CFDC8()
{
}

void sub_20D3CFDDC()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x500]));
  JUMPOUT(0x20D3CFA94);
}

void sub_20D3CFE00()
{
}

void sub_20D3CFE10()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x580]));
  JUMPOUT(0x20D3CFAECLL);
}

void sub_20D3CFE34()
{
}

void sub_20D3CFE48()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x5C0]));
  JUMPOUT(0x20D3CFB38);
}

void sub_20D3CFE6C()
{
}

void sub_20D3CFE7C()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x640]));
  JUMPOUT(0x20D3CFB90);
}

void sub_20D3CFEA0()
{
}

void sub_20D3CFEB8()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x680]));
  JUMPOUT(0x20D3CFBE4);
}

void sub_20D3CFED8()
{
}

void sub_20D3CFEE8()
{
}

void sub_20D3CFEFC()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x700]));
  JUMPOUT(0x20D3CFC3CLL);
}

void sub_20D3CFF24()
{
}

void sub_20D3CFF40()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x740]));
  JUMPOUT(0x20D3CFCB4);
}

void sub_20D3CFF54()
{
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(void *a1, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5)
{
  if (*a2 != 2)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v38 = *a2;
    if (v38 > 9) {
      std::string::size_type v39 = "number";
    }
    else {
      std::string::size_type v39 = off_2641152A0[v38];
    }
    std::string::basic_string[abi:ne180100]<0>(&v43, v39);
    unsigned __int8 v41 = std::string::insert(&v43, 0, "cannot use insert() with ");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    *(void *)&v46[16] = *((void *)&v41->__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v46 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(309, (uint64_t)v46, exception);
  }
  if ((unsigned char *)a3 != a2)
  {
    uint64_t v40 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "iterator does not fit current value");
    nlohmann::detail::invalid_iterator::create(202, (uint64_t)v46, v40);
  }
  unint64_t v7 = a5;
  *a1 = a3;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0x8000000000000000;
  unint64_t v10 = *(uint64_t **)(a3 + 8);
  uint64_t v12 = *v10;
  unint64_t v11 = v10[1];
  uint64_t v13 = (uint64_t)&a4[-*v10];
  uint64_t v14 = v13 >> 4;
  uint64_t v15 = *(void *)(a3 + 8);
  unint64_t v18 = *(void *)(v15 + 16);
  uint64_t v17 = v15 + 16;
  unint64_t v16 = v18;
  if (v11 >= v18)
  {
    unint64_t v22 = ((uint64_t)(v11 - v12) >> 4) + 1;
    if (v22 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = v16 - v12;
    if (v23 >> 3 > v22) {
      unint64_t v22 = v23 >> 3;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    uint64_t v45 = v17;
    if (v24) {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v17, v24);
    }
    else {
      uint64_t v25 = 0;
    }
    std::string::size_type v26 = (std::string::size_type)&v25[16 * v14];
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    v43.__r_.__value_.__l.__size_ = v26;
    v43.__r_.__value_.__r.__words[2] = v26;
    char v44 = &v25[16 * v24];
    if (v14 == v24)
    {
      if (v13 < 1)
      {
        if ((unsigned char *)v12 == a4) {
          unint64_t v29 = 1;
        }
        else {
          unint64_t v29 = v13 >> 3;
        }
        uint64_t v48 = v17;
        uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v17, v29);
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
        if (v43.__r_.__value_.__r.__words[2] == v43.__r_.__value_.__l.__size_)
        {
          int64x2_t v35 = vdupq_n_s64(v43.__r_.__value_.__l.__size_);
          std::string::size_type v33 = (std::string::size_type)&v30[16 * (v29 >> 2)];
        }
        else
        {
          std::string::size_type v33 = (std::string::size_type)&v30[16 * (v29 >> 2)
                                           + v43.__r_.__value_.__r.__words[2]
                                           - v43.__r_.__value_.__l.__size_];
          uint64_t v34 = &v30[16 * (v29 >> 2)];
          do
          {
            *uint64_t v34 = *(unsigned char *)size;
            *((void *)v34 + 1) = *(void *)(size + 8);
            *(unsigned char *)std::string::size_type size = 0;
            *(void *)(size + 8) = 0;
            v34 += 16;
            size += 16;
          }
          while (v34 != (char *)v33);
          int64x2_t v35 = *(int64x2_t *)&v43.__r_.__value_.__r.__words[1];
        }
        uint64_t v36 = v44;
        *(void *)unint64_t v46 = v43.__r_.__value_.__r.__words[0];
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
        v43.__r_.__value_.__l.__size_ = (std::string::size_type)&v30[16 * (v29 >> 2)];
        *(int64x2_t *)&unsigned __int8 v46[8] = v35;
        v43.__r_.__value_.__r.__words[2] = v33;
        char v44 = &v30[16 * v31];
        std::string v47 = v36;
        std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v46);
        std::string::size_type v26 = v43.__r_.__value_.__r.__words[2];
      }
      else
      {
        if (v14 >= -1) {
          uint64_t v27 = v14 + 1;
        }
        else {
          uint64_t v27 = v14 + 2;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)v46, v26, v26, v26 - 16 * (v27 >> 1));
        std::string::size_type v26 = v28;
        v43.__r_.__value_.__l.__size_ -= 16 * (v27 >> 1);
        v43.__r_.__value_.__r.__words[2] = v28;
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v26, v7);
    v43.__r_.__value_.__r.__words[2] += 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v10, &v43, (uint64_t)a4);
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v43);
  }
  else if (a4 == (unsigned char *)v11)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)a4, a5);
    v10[1] = (uint64_t)(a4 + 16);
  }
  else
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__move_range(*(void *)(a3 + 8), (uint64_t)a4, v11, (uint64_t)(a4 + 16));
    if ((unint64_t)a4 <= v7) {
      v7 += 16 * (v10[1] > v7);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v46, v7);
    int v19 = *a4;
    *a4 = v46[0];
    v46[0] = v19;
    uint64_t v20 = v12 + 16 * v14;
    uint64_t v21 = *(void *)(v20 + 8);
    *(void *)(v20 + 8) = *(void *)&v46[8];
    *(void *)&unsigned __int8 v46[8] = v21;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v46[8], v19);
  }
  a1[2] = **(void **)(a3 + 8) + 16 * v14;
}

void sub_20D3D0300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v24 + 8) = v23;
  _Unwind_Resume(exception_object);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[15]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_20D3D03CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_20D3D0418(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_20D3D0464(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void GryphonPipelineFactory::gryphonFE_backend_pipeline(uint64_t **a1, uint64_t *a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  v36[0] = 0;
  char v37 = 0;
  GryphonPipelineFactory::shared_gryphon_backend_pipeline((GryphonPipelineFactory *)v34);
  int v4 = v36[0];
  v36[0] = v34[0];
  v34[0] = v4;
  int v5 = v37;
  char v37 = v35;
  int64x2_t v35 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v35, v4);
  unint64_t v46 = 0;
  LOBYTE(v45) = 3;
  unint64_t v46 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  std::string v47 = &v45;
  char v48 = 1;
  v50[0] = 0;
  v49[0] = 3;
  v50[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>("frontend_feature_log");
  v50[1] = v49;
  char v51 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v52, (uint64_t)&v45, 2, 1, 2);
  int8x16_t v53 = v52;
  char v54 = 1;
  std::string::size_type v39 = 0;
  LOBYTE(__p) = 3;
  std::string::size_type v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  char v41 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v30, 0, 0, 0, 1);
  v42[0] = v30[0];
  unint64_t v6 = v31;
  v30[0] = 0;
  uint64_t v31 = 0;
  v43[0] = v6;
  v43[1] = v42;
  char v44 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v55, (uint64_t)&__p, 2, 1, 2);
  uint64_t v56 = v55;
  char v57 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v32, (uint64_t)v52, 2, 1, 2);
  for (uint64_t i = 0; i != -64; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v55[i + 8], v55[i]);
  for (uint64_t j = 0; j != -8; j -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v43[j], v42[j * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
  for (uint64_t k = 0; k != -8; k -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v50[k], v49[k * 8]);
  char v28 = 4;
  unint64_t v29 = 0;
  unint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v32, "params");
  unint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v10, "enable_print");
  int v12 = *(unsigned __int8 *)v11;
  *(unsigned char *)unint64_t v11 = 4;
  char v28 = v12;
  uint64_t v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v29;
  unint64_t v29 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v12);
  if (v36[0] == 2) {
    uint64_t v14 = (unsigned char *)*v37;
  }
  else {
    uint64_t v14 = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(v52, v36, (uint64_t)v36, v14, (uint64_t)v32);
  v30[0] = 0;
  uint64_t v31 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v26, (uint64_t)v36);
  uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "pipeline");
  int v16 = *(unsigned __int8 *)v15;
  *(unsigned char *)uint64_t v15 = v26[0];
  v26[0] = v16;
  uint64_t v17 = (uint64_t *)v15[1];
  v15[1] = (uint64_t)v27;
  uint64_t v27 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v16);
  uint64_t v18 = *a2;
  int v19 = *(std::__shared_weak_count **)(*a2 + 24);
  if (v19)
  {
    int v19 = std::__shared_weak_count::lock(v19);
    uint64_t v20 = v19;
    if (v19) {
      int v19 = *(std::__shared_weak_count **)(v18 + 16);
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v21 = (std::__shared_weak_count *)a2[1];
  v25[0] = *a2;
  v25[1] = (uint64_t)v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersistentModuleFactory::load_from_config(v19, (uint64_t)v30, v25);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v22 = *a2;
  uint64_t v23 = (std::__shared_weak_count *)a2[1];
  v24[0] = v22;
  v24[1] = (uint64_t)v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v52[0] = 0;
  v52[1] = 0;
  int8x16_t v53 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v45, "pipeline");
  std::string::basic_string[abi:ne180100]<0>(&__p, "connection");
  GryphonPipelineFactory::pipeline_from_config(a1, v24, (uint64_t)v30, v52, (uint64_t)&v45, (const void **)&__p);
  if (SHIBYTE(p_p) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(v45);
  }
  uint64_t v45 = v52;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v33, v32[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v36[0]);
}

void sub_20D3D08C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, unsigned __int8 a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned __int8 a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  a37 = (void *)(v45 - 136);
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v44, a18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a21, a20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v42, a24);
  _Unwind_Resume(a1);
}

uint64_t GryphonPipelineFactory::has_sane_pipeline(unsigned __int8 *a1)
{
  if (!*a1) {
    return 1;
  }
  if (*a1 == 1)
  {
    uint64_t v1 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "pipeline");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v22, (uint64_t)v1);
    if (v22[0] != 2 || (uint64_t v2 = *v23, *v23 == v23[1]))
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      unint64_t v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_ERROR, "pipeline isn't a non-empty array: gryphon config has a wrong format", buf, 2u);
      }
      Diagnostics::log(3, "pipeline isn't a non-empty array: gryphon config has a wrong format", v8);
      BOOL v3 = 0;
    }
    else
    {
      *(void *)std::string buf = v22;
      uint64_t v18 = 0;
      uint64_t v20 = 0;
      unint64_t v21 = 0x8000000000000000;
      uint64_t v19 = v2;
      while (1)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v13 = 0;
        int v12 = v22;
        unint64_t v16 = 0x8000000000000000;
        if (v22[0] == 2)
        {
          uint64_t v14 = v23[1];
        }
        else if (v22[0] == 1)
        {
          uint64_t v13 = v23 + 1;
        }
        else
        {
          unint64_t v16 = 1;
        }
        BOOL v3 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, &v12);
        if (v3) {
          break;
        }
        int v4 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
        if (*v4 != 1
          || *(unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v4, "id") != 3)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v12) = 0;
            _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_ERROR, "pipeline element isn't an object with a string id: gryphon config has a wrong format", (uint8_t *)&v12, 2u);
          }
          Diagnostics::log(3, "pipeline element isn't an object with a string id: gryphon config has a wrong format", v10, v12, v13, v14, v15, v16);
          break;
        }
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_ERROR, "gryphon config isn't an object: gryphon config has a wrong format", buf, 2u);
    }
    Diagnostics::log(3, "gryphon config isn't an object: gryphon config has a wrong format", v6);
    return 0;
  }
  return v3;
}

void sub_20D3D0D6C(_Unwind_Exception *a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v1, *(unsigned __int8 *)(v2 - 80));
  _Unwind_Resume(a1);
}

void PhoneTransformModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v141 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(void **)(*(void *)v4 + 8);
  int v5 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v138, 0, sizeof(v138));
  memset(&v137, 0, sizeof(v137));
  memset(&v126, 0, sizeof(v126));
  v127[0] = 0;
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)&v127[4] = v7;
  *(_OWORD *)&v127[20] = v7;
  *(void *)&v127[36] = 0x8000000080000000;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  memset(&__p, 0, sizeof(__p));
  long long v132 = v7;
  long long v133 = v7;
  long long v134 = v7;
  long long v135 = v7;
  int v136 = 0x7FFFFFFF;
  uint64_t v8 = (char *)operator new(0x30uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = off_26C2196C8;
  *((void *)v8 + 3) = 0;
  std::string::size_type v112 = (uint64_t *)(v8 + 24);
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0;
  uint64_t v117 = v8;
  if (*(char *)(a1 + 423) < 0) {
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)(a1 + 400), *(void *)(a1 + 408));
  }
  else {
    std::string v125 = *(std::string *)(a1 + 400);
  }
  uint64_t v9 = (std::string::size_type *)(a1 + 296);
  uint64_t v106 = v2;
  if (*(char *)(a1 + 319) < 0)
  {
    uint64_t v11 = *(void *)(a1 + 304);
    if (v11 != 5)
    {
      if (v11 != 8) {
        goto LABEL_23;
      }
      unint64_t v10 = (void *)*v9;
LABEL_13:
      if (*v10 == 0x656C62616C6C7973)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        int v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_ERROR, "mapping_level at syllable is under the construction", (uint8_t *)&buf, 2u);
        }
        uint64_t v14 = "mapping_level at syllable is under the construction";
        goto LABEL_32;
      }
LABEL_23:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      unint64_t v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v17 = a1 + 296;
        if (*(char *)(a1 + 319) < 0) {
          std::string::size_type v17 = *v9;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v17;
        _os_log_impl(&dword_20CD80000, v16, OS_LOG_TYPE_ERROR, "mapping_level at %s is under the construction", (uint8_t *)&buf, 0xCu);
      }
      if (*(char *)(a1 + 319) < 0) {
        uint64_t v9 = (std::string::size_type *)*v9;
      }
      char v100 = v9;
      uint64_t v14 = "mapping_level at %s is under the construction";
LABEL_32:
      Diagnostics::log(3, v14, v13, v100);
      goto LABEL_33;
    }
    if (*(_DWORD *)*v9 != 1852794992 || *(unsigned char *)(*v9 + 4) != 101) {
      goto LABEL_23;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 319) != 5)
    {
      unint64_t v10 = (void *)(a1 + 296);
      if (*(unsigned char *)(a1 + 319) != 8) {
        goto LABEL_23;
      }
      goto LABEL_13;
    }
    if (*(_DWORD *)v9 != 1852794992 || *(unsigned char *)(a1 + 300) != 101) {
      goto LABEL_23;
    }
  }
  std::string __str = (std::string *)(a1 + 400);
  double v101 = v5;
  uint64_t v104 = v6 + 3;
  uint64_t v20 = (int *)*v6;
  uint64_t v107 = (uint64_t)v6;
  uint64_t v108 = (int *)v6[1];
  if ((int *)*v6 != v108)
  {
    uint64_t v21 = 0;
    int v22 = 0;
    int v105 = 0;
    char v103 = (uint64_t **)(a1 + 272);
    uint64_t v113 = a1 + 384;
    uint64_t v114 = a1 + 376;
    uint64_t v23 = a1 + 288;
    char v110 = (const void **)(a1 + 280);
    double v111 = (char **)(a1 + 344);
    uint64_t v120 = a1;
    uint64_t v109 = a1 + 288;
    while (1)
    {
      long long v119 = (long long *)(v20 + 6);
      if (*((unsigned char *)v20 + 24)) {
        BOOL v24 = 1;
      }
      else {
        BOOL v24 = v20[39] == 0;
      }
      if (!v24)
      {
        *(_DWORD *)(*v104 + 136 * (int)v21) = v22;
        int v105 = v22;
      }
      uint64_t v118 = (std::string *)(v20 + 24);
      std::string::operator=(&v138, (const std::string *)v20 + 4);
      if (*(unsigned char *)(a1 + 368)) {
        break;
      }
LABEL_139:
      char v54 = (char *)*v110;
      if (*v110)
      {
        char v55 = v110;
        do
        {
          BOOL v56 = std::less<std::string>::operator()[abi:ne180100](v23, (const void **)v54 + 4, (const void **)&v138.__r_.__value_.__l.__data_);
          char v57 = (void **)(v54 + 8);
          if (!v56)
          {
            char v57 = (void **)v54;
            char v55 = (const void **)v54;
          }
          char v54 = (char *)*v57;
        }
        while (*v57);
        if (v55 != v110
          && !std::less<std::string>::operator()[abi:ne180100](v23, (const void **)&v138.__r_.__value_.__l.__data_, v55 + 4))
        {
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
          unint64_t v64 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v103, (const void **)&v138.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&buf);
          if (&v137 != (std::vector<std::string> *)(v64 + 7)) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v137, (std::string *)v64[7], (long long *)v64[8], 0xAAAAAAAAAAAAAAABLL * ((v64[8] - v64[7]) >> 3));
          }
          if (v137.__end_ == v137.__begin_) {
            goto LABEL_150;
          }
          uint64_t v65 = 0;
          uint64_t v115 = v20;
          char v116 = (std::string *)(v20 + 30);
          uint64_t v66 = v20 + 36;
          while (2)
          {
            std::string::operator=(&v126, (const std::string *)v20);
            long long v67 = *v119;
            long long v68 = v119[1];
            *(_OWORD *)&v127[28] = *(long long *)((char *)v119 + 28);
            *(_OWORD *)char v127 = v67;
            *(_OWORD *)&v127[16] = v68;
            if (&v126 != (std::string *)v20) {
              std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)&v128, *((void *)v20 + 9), *((void *)v20 + 10), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)v20 + 10) - *((void *)v20 + 9)) >> 3));
            }
            std::string::operator=((std::string *)((char *)&v129 + 8), v118);
            std::string::operator=(&__p, v116);
            long long v132 = *(_OWORD *)v66;
            long long v69 = *((_OWORD *)v66 + 1);
            long long v70 = *((_OWORD *)v66 + 2);
            long long v71 = *((_OWORD *)v66 + 3);
            int v136 = v66[16];
            long long v134 = v70;
            long long v135 = v71;
            long long v133 = v69;
            std::string::size_type v72 = &v137.__begin_[v65];
            if (SHIBYTE(v72->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v123, v72->__r_.__value_.__l.__data_, v72->__r_.__value_.__l.__size_);
            }
            else
            {
              long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
              v123.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v73;
            }
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&buf, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
            }
            else {
              std::string buf = v123;
            }
            uint64_t v74 = v21;
            char v75 = *(unsigned char *)(a1 + 367);
            if (v75 < 0)
            {
              int64_t v76 = *(void *)(a1 + 352);
              if (v76) {
                goto LABEL_178;
              }
            }
            else if (*(unsigned char *)(a1 + 367))
            {
              int64_t v76 = *(void *)(v120 + 352);
LABEL_178:
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_std::string buf = &buf;
              }
              else {
                p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              if (v75 >= 0) {
                long long v78 = (char *)v111;
              }
              else {
                long long v78 = *v111;
              }
              if (v75 >= 0) {
                int64_t v79 = *(unsigned __int8 *)(a1 + 367);
              }
              else {
                int64_t v79 = v76;
              }
              if (v79)
              {
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int64_t size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                }
                else {
                  int64_t size = buf.__r_.__value_.__l.__size_;
                }
                if (size >= v79)
                {
                  unint64_t v81 = (char *)p_buf + size;
                  int v82 = *v78;
                  char v83 = p_buf;
                  do
                  {
                    int64_t v84 = size - v79;
                    if (v84 == -1) {
                      break;
                    }
                    std::string v85 = (char *)memchr(v83, v82, v84 + 1);
                    if (!v85) {
                      break;
                    }
                    uint64_t v86 = v85;
                    if (!memcmp(v85, v78, v79))
                    {
                      if (v86 != v81)
                      {
                        std::string::size_type v87 = v86 - (char *)p_buf;
                        if (v86 - (char *)p_buf != -1) {
                          goto LABEL_199;
                        }
                      }
                      break;
                    }
                    char v83 = (std::string *)(v86 + 1);
                    int64_t size = v81 - (v86 + 1);
                  }
                  while (size >= v79);
                }
              }
              else
              {
                std::string::size_type v87 = 0;
LABEL_199:
                std::string::replace(&buf, v87, v79, &byte_20D5A22AE);
              }
            }
            if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v126.__r_.__value_.__l.__data_);
            }
            std::string v126 = buf;
            *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
            buf.__r_.__value_.__s.__data_[0] = 0;
            uint64_t v8 = v117;
            a1 = v120;
            uint64_t v21 = v74;
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v123.__r_.__value_.__l.__data_);
            }
            uint64_t v20 = v115;
            if (*(unsigned char *)(v120 + 369))
            {
              std::string::size_type v88 = std::string::find(&v126, 59, 0);
              if (v88 != -1)
              {
                std::string::size_type v89 = v88;
                std::string::basic_string(&buf, &v126, 0, v88, (std::allocator<char> *)&v139);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                std::string __p = buf;
                if (v89 == -2)
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  char v90 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    std::basic_string<char16_t> v92 = &v138;
                    if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::basic_string<char16_t> v92 = (std::string *)v138.__r_.__value_.__r.__words[0];
                    }
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
                    _os_log_impl(&dword_20CD80000, v90, OS_LOG_TYPE_DEBUG, "Is phone mapping missing for %s", (uint8_t *)&buf, 0xCu);
                  }
                  char v93 = &v138;
                  if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    char v93 = (std::string *)v138.__r_.__value_.__r.__words[0];
                  }
                  Diagnostics::log(7, "Is phone mapping missing for %s", v91, v93);
                  MEMORY[0x210558E70](&v126, &byte_20D5A22AE);
                }
                else
                {
                  std::string::basic_string(&buf, &v126, v89 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v139);
                  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v126.__r_.__value_.__l.__data_);
                  }
                  std::string v126 = buf;
                }
              }
            }
            std::string::operator=((std::string *)((char *)&v129 + 8), &v137.__begin_[v65]);
            if (v65)
            {
              uint64_t v95 = *((void *)&v128 + 1);
              uint64_t v94 = v128;
              while (v95 != v94)
              {
                if (*(char *)(v95 - 25) < 0) {
                  operator delete(*(void **)(v95 - 48));
                }
                v95 -= 56;
              }
              *((void *)&v128 + 1) = v94;
              if (v115[41]) {
                DWORD1(v133) = 0;
              }
            }
            if (v115[43]
              && !v65
              && (char v96 = (char *)&v133 + 12,
                  0xAAAAAAAAAAAAAAABLL * (((char *)v137.__end_ - (char *)v137.__begin_) >> 3) > 1)
              || v65 && (char v96 = (char *)&v132 + 12, v115[39]))
            {
              *(_DWORD *)char v96 = 0;
            }
            unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * (((char *)v137.__end_ - (char *)v137.__begin_) >> 3);
            if (v115[40] && !v65 && v97 >= 2) {
              LODWORD(v133) = 0;
            }
            *(_DWORD *)&v127[4] = v115[7] / v97;
            unint64_t v98 = *((void *)v117 + 4);
            if (v98 >= *((void *)v117 + 5))
            {
              uint64_t v99 = std::vector<PhoneFeature>::__push_back_slow_path<PhoneFeature const&>(v112, (const PhoneFeature *)&v126);
            }
            else
            {
              PhoneFeature::PhoneFeature(*((std::string **)v117 + 4), (const PhoneFeature *)&v126);
              uint64_t v99 = v98 + 216;
              *((void *)v117 + 4) = v98 + 216;
            }
            *((void *)v117 + 4) = v99;
            if (v65) {
              ++v22;
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v137.__end_ - (char *)v137.__begin_) >> 3) <= ++v65) {
              goto LABEL_150;
            }
            continue;
          }
        }
      }
      unint64_t v58 = *((void *)v8 + 4);
      if (v58 >= *((void *)v8 + 5))
      {
        uint64_t v59 = std::vector<PhoneFeature>::__push_back_slow_path<PhoneFeature const&>(v112, (const PhoneFeature *)v20);
      }
      else
      {
        PhoneFeature::PhoneFeature(*((std::string **)v8 + 4), (const PhoneFeature *)v20);
        uint64_t v59 = v58 + 216;
        *((void *)v8 + 4) = v58 + 216;
      }
      *((void *)v8 + 4) = v59;
LABEL_150:
      if (*((unsigned char *)v20 + 24))
      {
        uint64_t v23 = v109;
      }
      else
      {
        uint64_t v23 = v109;
        if (v20[40])
        {
          uint64_t v60 = *(void *)(v107 + 24);
          if (0xF0F0F0F0F0F0F0F1 * ((*(void *)(v107 + 32) - v60) >> 3) <= (int)v21)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            char v61 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              unint64_t v63 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(v107 + 32) - *(void *)(v107 + 24)) >> 3);
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = v21;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v63;
              _os_log_impl(&dword_20CD80000, v61, OS_LOG_TYPE_ERROR, "word index (%d) is larger than word_feature size ('%lu') ", (uint8_t *)&buf, 0x12u);
            }
            Diagnostics::log(3, "word index (%d) is larger than word_feature size ('%lu') ", v62, v21, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(v107 + 32) - *(void *)(v107 + 24)) >> 3));
          }
          else
          {
            *(_DWORD *)(v60 + 136 * (int)v21 + 4) = v22 - v105 + 1;
            uint64_t v21 = (v21 + 1);
          }
        }
      }
      ++v22;
      v20 += 54;
      if (v20 == v108) {
        goto LABEL_249;
      }
    }
    if (!*(void *)(a1 + 392))
    {
      if (*((char *)v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v20, *((void *)v20 + 1));
      }
      else
      {
        long long v34 = *(_OWORD *)v20;
        v124.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v34;
      }
LABEL_136:
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v138.__r_.__value_.__l.__data_);
      }
      std::string v138 = v124;
      goto LABEL_139;
    }
    memset(&buf, 0, sizeof(buf));
    uint64_t v25 = *((void *)v20 + 9);
    uint64_t v26 = *((void *)v20 + 10);
    if (v25 == v26)
    {
      char v32 = 0;
      goto LABEL_91;
    }
    do
    {
      if (*(_DWORD *)v25 == 13)
      {
        uint64_t v27 = (std::string::size_type *)(v25 + 8);
        uint64_t v28 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v114, (const void **)(v25 + 8));
        if (v113 == v28)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          unint64_t v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            std::string::size_type v31 = v25 + 8;
            if (*(char *)(v25 + 31) < 0) {
              std::string::size_type v31 = *v27;
            }
            LODWORD(v139.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = v31;
            _os_log_impl(&dword_20CD80000, v29, OS_LOG_TYPE_DEBUG, "Unknown language marker from Nasvhille FE: %s, Ignored!", (uint8_t *)&v139, 0xCu);
          }
          if (*(char *)(v25 + 31) < 0) {
            uint64_t v27 = (std::string::size_type *)*v27;
          }
          Diagnostics::log(7, "Unknown language marker from Nasvhille FE: %s, Ignored!", v30, v27);
        }
        else
        {
          std::string::operator=(&buf, (const std::string *)(v28 + 56));
          std::string::operator=(&v125, &buf);
        }
      }
      v25 += 56;
    }
    while (v25 != v26);
    char v32 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (buf.__r_.__value_.__l.__size_ != 6) {
        goto LABEL_99;
      }
      std::string::size_type v33 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 6) {
        goto LABEL_91;
      }
      std::string::size_type v33 = &buf;
    }
    int data = (int)v33->__r_.__value_.__l.__data_;
    int v36 = WORD2(v33->__r_.__value_.__r.__words[0]);
    if (data == 1836216174 && v36 == 27745)
    {
      std::string::operator=(&buf, __str);
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      unint64_t v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        LOWORD(v139.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v38, OS_LOG_TYPE_INFO, "Set current_lang to default!", (uint8_t *)&v139, 2u);
      }
      Diagnostics::log(6, "Set current_lang to default!", v39);
      std::string::operator=(&v125, __str);
      char v32 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      if ((*((unsigned char *)&buf.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_91:
        if (!v32) {
          goto LABEL_100;
        }
        goto LABEL_105;
      }
    }
    else if ((*((unsigned char *)&buf.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      goto LABEL_91;
    }
LABEL_99:
    if (!buf.__r_.__value_.__l.__size_)
    {
LABEL_100:
      std::string::operator=(&buf, &v125);
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        LOWORD(v139.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v40, OS_LOG_TYPE_INFO, "Set to previous lang", (uint8_t *)&v139, 2u);
      }
      Diagnostics::log(6, "Set to previous lang", v41);
    }
LABEL_105:
    std::string::operator=((std::string *)v20 + 5, &buf);
    if (*(unsigned char *)v119)
    {
      if (*((char *)v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)v20, *((void *)v20 + 1));
      }
      else
      {
        long long v42 = *(_OWORD *)v20;
        v124.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v42;
      }
    }
    else
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      std::string v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        if (*((char *)v20 + 23) >= 0) {
          std::string::size_type v45 = (std::string::size_type)v20;
        }
        else {
          std::string::size_type v45 = *(void *)v20;
        }
        if (*((char *)v20 + 143) >= 0) {
          std::string::size_type v46 = (std::string::size_type)(v20 + 30);
        }
        else {
          std::string::size_type v46 = *((void *)v20 + 15);
        }
        LODWORD(v139.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = v45;
        WORD2(v139.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v139.__r_.__value_.__r.__words[1] + 6) = v46;
        _os_log_impl(&dword_20CD80000, v43, OS_LOG_TYPE_INFO, "Language for phone %s is %s", (uint8_t *)&v139, 0x16u);
      }
      if (*((char *)v20 + 23) >= 0) {
        std::string v47 = (const std::string::value_type *)v20;
      }
      else {
        std::string v47 = *(const std::string::value_type **)v20;
      }
      if (*((char *)v20 + 143) >= 0) {
        char v48 = v20 + 30;
      }
      else {
        char v48 = (int *)*((void *)v20 + 15);
      }
      Diagnostics::log(6, "Language for phone %s is %s", v44, v47, v48);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&buf.__r_.__value_.__l.__data_, 59, (uint64_t)&v139);
      int v49 = *((char *)v20 + 23);
      if (v49 >= 0) {
        std::string v50 = (const std::string::value_type *)v20;
      }
      else {
        std::string v50 = *(const std::string::value_type **)v20;
      }
      if (v49 >= 0) {
        std::string::size_type v51 = *((unsigned __int8 *)v20 + 23);
      }
      else {
        std::string::size_type v51 = *((void *)v20 + 1);
      }
      std::string::size_type v52 = std::string::append(&v139, v50, v51);
      long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v124.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v139.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    uint64_t v23 = v109;
    goto LABEL_136;
  }
LABEL_249:
  int v5 = v101;
  std::vector<PhoneFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<PhoneFeature*>,std::__wrap_iter<PhoneFeature*>>(v107, *((std::string **)v8 + 3), *((std::string **)v8 + 4), 0x84BDA12F684BDA13 * ((uint64_t)(*((void *)v8 + 4) - *((void *)v8 + 3)) >> 3));
  uint64_t v2 = v106;
  std::vector<WordFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<WordFeature*>,std::__wrap_iter<WordFeature*>>((uint64_t)v104, *(void *)(v107 + 24), *(void *)(v107 + 32), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(v107 + 32) - *(void *)(v107 + 24)) >> 3));
LABEL_33:
  uint64_t v18 = (std::__shared_weak_count *)v2[1];
  uint64_t v121 = *v2;
  uint64_t v122 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v121);
  if (v122) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v122);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v130) < 0) {
    operator delete(*((void **)&v129 + 1));
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v138.__r_.__value_.__l.__data_);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D3D1E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  PhoneFeature::~PhoneFeature((void **)&a64);
  a64 = v64 - 216;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  if (*(char *)(v64 - 169) < 0) {
    operator delete(*(void **)(v64 - 192));
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void std::vector<PhoneFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<PhoneFeature*>,std::__wrap_iter<PhoneFeature*>>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<PhoneFeature>::__vdeallocate((void **)a1);
    if (a4 > 0x12F684BDA12F684) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x97B425ED097B426 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x97B425ED097B42) {
      unint64_t v11 = 0x12F684BDA12F684;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<PhoneFeature>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(v8, (uint64_t)__str, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(__str, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  uint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(__str, a3, v9);
  for (uint64_t i = *(void *)(a1 + 8); (std::string *)i != v14; std::allocator<PhoneFeature>::destroy[abi:ne180100](i))
    i -= 216;
  *(void *)(a1 + 8) = v14;
}

void sub_20D3D20F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20D3D20FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<WordFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<WordFeature*>,std::__wrap_iter<WordFeature*>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<WordFeature>::__vdeallocate((void **)a1);
    if (a4 > 0x1E1E1E1E1E1E1E1) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
      unint64_t v11 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<WordFeature>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  uint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(a2, a3, (uint64_t)v9);
  for (uint64_t i = *(void *)(a1 + 8); i != v14; std::allocator<WordFeature>::destroy[abi:ne180100](i))
    i -= 136;
  *(void *)(a1 + 8) = v14;
}

void sub_20D3D2260(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20D3D2268(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<PhoneFeature>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<std::vector<PhoneFeature>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2196C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<PhoneFeature>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2196C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void PhoneTransformModule::~PhoneTransformModule(void **this)
{
  *this = off_26C202C70;
  if (*((char *)this + 423) < 0) {
    operator delete(this[50]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 47), this[48]);
  if (*((char *)this + 367) < 0) {
    operator delete(this[43]);
  }
  uint64_t v2 = this + 40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 319) < 0) {
    operator delete(this[37]);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)(this + 34), this[35]);
  Module::~Module((Module *)this);
  MEMORY[0x2105595E0]();
}

{
  void **v2;

  *this = off_26C202C70;
  if (*((char *)this + 423) < 0) {
    operator delete(this[50]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 47), this[48]);
  if (*((char *)this + 367) < 0) {
    operator delete(this[43]);
  }
  uint64_t v2 = this + 40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 319) < 0) {
    operator delete(this[37]);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)(this + 34), this[35]);
  Module::~Module((Module *)this);
}

void PipelineModule::process_data(void **a1, uint64_t *a2)
{
  (*(void (**)(void *))(*a1[34] + 48))(a1[34]);
  uint64_t v4 = a1[34];
  int v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  uint64_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *))(*v4 + 32))(v4, &v13);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  (*(void (**)(long long *__return_ptr))(*a1[34] + 56))(&v12);
  uint64_t v6 = v12;
  while (v6)
  {
    uint64_t v10 = v6;
    unint64_t v11 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    if (*((void *)&v12 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    ((void (*)(void **, uint64_t *))(*a1)[9])(a1, &v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    (*(void (**)(long long *__return_ptr))(*a1[34] + 56))(&v9);
    long long v7 = v9;
    long long v9 = 0uLL;
    uint64_t v8 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    long long v12 = v7;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      if (*((void *)&v9 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
      }
      uint64_t v6 = v12;
    }
    else
    {
      uint64_t v6 = v7;
    }
  }
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
}

void sub_20D3D2604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void PipelineModule::clean_up(PipelineModule *this)
{
  Module::clean_up(this);
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 34) + 64))(*((void *)this + 34));
  BOOL v3 = *(uint64_t **)v2;
  uint64_t v4 = *(uint64_t **)(v2 + 8);
  if (*(uint64_t **)v2 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = (std::__shared_weak_count *)v3[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t))(*(void *)v5 + 64))(v5);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
}

void sub_20D3D26F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PipelineModule::cancel(PipelineModule *this)
{
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  *((unsigned char *)this + 160) = 1;
  std::recursive_mutex::unlock(v2);
  BOOL v3 = *(uint64_t (**)(void))(**((void **)this + 34) + 40);
  return v3();
}

void PipelineModule::~PipelineModule(PipelineModule *this)
{
  *(void *)this = off_26C200BF8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C200BF8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
}

void UTFNumberFormatter::UTFNumberFormatter(UTFNumberFormatter *this, std::string *a2, const char *a3)
{
  BOOL v3 = a3;
  uint64_t v4 = a2;
  int v16 = 0;
  memset(&v15, 0, sizeof(v15));
  if (a3 && !a2 && *a3)
  {
    MEMORY[0x210558E70](&v15, "@numbers=");
    uint64_t v6 = *v3 == 37 ? v3 + 1 : v3;
    uint64_t v4 = &v15;
    std::string::append(&v15, v6);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v4 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
  }
  uint64_t v7 = unum_open();
  *(void *)this = v7;
  if (!v7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Illegal locale for number formatter %s\n", (const char *)v4);
    MEMORY[0x210558D40](exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v3 && *v3)
  {
    if (!strcmp(v3, "%roman")) {
      BOOL v3 = "%roman-upper";
    }
    size_t v8 = strlen(v3);
    UTFString::to_utf16(&__p, v3, v8);
    unum_setTextAttribute();
    if (v16 >= 1)
    {
      uint64_t v10 = __cxa_allocate_exception(0x10uLL);
      unint64_t v11 = v3;
      long long v12 = v10;
      StringFormatter::StringFormatter((StringFormatter *)v13, "Illegal ruleSet %s for locale %s\n", v11, (const char *)v4);
      MEMORY[0x210558D40](v12, v13);
      __cxa_throw(v12, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_20D3D2A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      if (a22 < 0) {
        operator delete(a17);
      }
      if (a28 < 0) {
        operator delete(a23);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

void UTFNumberFormatter::~UTFNumberFormatter(UTFNumberFormatter *this)
{
  if (*(void *)this) {
    unum_close();
  }
}

uint64_t std::function<int ()(char16_t *,unsigned long,UErrorCode *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2;
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v7, &v6, &v5);
}

void UTFString_Impl::formatNumberAsUTF8(std::string *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  BOOL v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v14 = v13;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v13);
    }
    else
    {
      uint64_t v14 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  int v12 = 0;
  uint64_t v4 = operator new(0x88uLL);
  v11.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v4;
  *(_OWORD *)&v11.__r_.__value_.__r.__words[1] = xmmword_20D6B4A90;
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  void v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  *((_WORD *)v4 + 64) = 0;
  unsigned int v5 = std::function<int ()(char16_t *,unsigned long,UErrorCode *)>::operator()((uint64_t)v14, (uint64_t)v4, 64, (uint64_t)&v12);
  if (v5 >= 0x41)
  {
    std::basic_string<char16_t>::resize(&v11, (int)(v5 + 1), v6);
    int v12 = 0;
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v11;
    }
    else {
      uint64_t v7 = (std::basic_string<char16_t> *)v11.__r_.__value_.__r.__words[0];
    }
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::basic_string<char16_t>::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    }
    else {
      std::basic_string<char16_t>::size_type size = v11.__r_.__value_.__l.__size_;
    }
    unsigned int v5 = std::function<int ()(char16_t *,unsigned long,UErrorCode *)>::operator()((uint64_t)v14, (uint64_t)v7, size, (uint64_t)&v12);
  }
  if (v12 <= 0)
  {
    std::basic_string<char16_t>::resize(&v11, (int)v5, v6);
  }
  else if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    *v11.__r_.__value_.__l.__data_ = 0;
    v11.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    v11.__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&v11.__r_.__value_.__s + 23) = 0;
  }
  std::__function::__value_func<int ()(char16_t *,unsigned long,UErrorCode *)>::~__value_func[abi:ne180100](v13);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v9 = &v11;
  }
  else {
    long long v9 = (std::basic_string<char16_t> *)v11.__r_.__value_.__r.__words[0];
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int32_t v10 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    int32_t v10 = v11.__r_.__value_.__r.__words[1];
  }
  UTFString::to_utf8(a1, (const UChar *)v9, v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_20D3D2D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

void ClassifySentenceImpl::generate_tokens(ClassifySentenceImpl *this)
{
  if (!*((unsigned char *)this + 8))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v7);
    uint64_t v2 = v7;
    if ((void)v7)
    {
      if ((void *)(v2 + 8) != v3)
      {
        uint64_t v4 = v3[5];
        if (*(unsigned char *)(v4 + 9))
        {
          uint64_t v5 = *(void *)(v4 + 32);
          long long v9 = &v8;
          if (!v6) {
            operator new();
          }
          *(_DWORD *)(v6 + 8) = 0;
        }
      }
      std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v7);
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
    }
    else
    {
      *((unsigned char *)this + 8) = 1;
    }
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
}

void sub_20D3D2F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ClassifySentenceImpl::clear(ClassifySentenceImpl *this)
{
  *((_WORD *)this + 52) = 1;
  return FrontendModule::clear(this);
}

void ClassifySentenceImpl::~ClassifySentenceImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x2105595E0);
}

uint64_t ClassifySentence::ClassifySentence(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = off_26C200A98;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
  }
  *(void *)a1 = off_26C201768;
  return a1;
}

uint64_t std::__shared_ptr_emplace<ClassifySentenceImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ClassifySentenceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ClassifySentenceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ClassifySentencePersistentModule::~ClassifySentencePersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x2105595E0);
}

void NeuralAdapterModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v616 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v5 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  v594[0] = *(void *)(*(void *)v4 + 8);
  v594[1] = (uint64_t)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    NeuralAdapterModule::setup_features(a1, v594);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    NeuralAdapterModule::setup_features(a1, v594);
  }
  SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v592, *(void *)(a1 + 168));
  if (v592) {
    BOOL v6 = *(_DWORD *)(v592 + 60) == 3;
  }
  else {
    BOOL v6 = 0;
  }
  NeuralAdapterModule::process_markers(a1, *(_DWORD **)(**(void **)(a1 + 840) + 72), *(_DWORD **)(**(void **)(a1 + 840) + 80));
  long long v7 = *(void **)(a1 + 840);
  if (v6 && 0x84BDA12F684BDA13 * ((uint64_t)(v7[1] - *v7) >> 3) >= 2)
  {
    NeuralAdapterModule::process_markers(a1, *(_DWORD **)(*v7 + 288), *(_DWORD **)(*v7 + 296));
    long long v7 = *(void **)(a1 + 840);
  }
  if (v7[1] == *v7)
  {
    int v8 = 0;
    int v562 = 0;
    goto LABEL_1001;
  }
  int v579 = 0;
  int v8 = 0;
  int v562 = 0;
  v590 = (long long *)(a1 + 400);
  std::string __str = (std::string *)(a1 + 616);
  v584 = (uint64_t *)(a1 + 880);
  v585 = (uint64_t *)(a1 + 856);
  uint64_t v557 = a1 + 896;
  v583 = (uint64_t *)(a1 + 904);
  v580 = (uint64_t *)(a1 + 928);
  v576 = (uint64_t *)(a1 + 944);
  v591 = (std::string *)(a1 + 952);
  uint64_t v558 = a1 + 544;
  uint64_t v559 = a1 + 536;
  uint64_t v554 = a1 + 512;
  uint64_t v555 = a1 + 504;
  v568 = (uint64_t *)(a1 + 976);
  uint64_t v9 = 0;
  v569 = (const void **)(a1 + 592);
  uint64_t v563 = a1 + 280;
  uint64_t v564 = a1 + 272;
  v570 = (long long *)(a1 + 304);
  uint64_t v573 = a1 + 432;
  uint64_t v574 = a1 + 424;
  uint64_t v566 = a1 + 456;
  uint64_t v567 = a1 + 448;
  uint64_t v560 = a1 + 480;
  uint64_t v561 = a1 + 472;
  int32_t v10 = *(uint64_t **)(a1 + 840);
  uint64_t v11 = *v10;
  do
  {
    uint64_t v12 = (int)v9;
    uint64_t v577 = v9;
    if (!*(unsigned char *)(v11 + 216 * (int)v9 + 24))
    {
      std::string v281 = v10 + 3;
      uint64_t v280 = v10[3];
      if (0xF0F0F0F0F0F0F0F1 * ((v281[1] - v280) >> 3) <= v562)
      {
        *(void *)std::basic_string<char16_t> __p = 0x8000000080000000;
        memset(&__p[8], 0, 96);
        int v282 = 0x7FFFFFFF;
        long long v605 = 0u;
        long long v606 = 0u;
      }
      else
      {
        WordFeature::WordFeature((uint64_t)__p, v280 + 136 * v562);
        int v282 = *(_DWORD *)__p;
      }
      uint64_t v283 = v577;
      int v284 = v577;
      if (v577 != v282)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        int v285 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v607 = 67109376;
          *(_DWORD *)&v607[4] = v577;
          *(_WORD *)&v607[8] = 1024;
          *(_DWORD *)&v607[10] = *(_DWORD *)__p;
          _os_log_impl(&dword_20CD80000, v285, OS_LOG_TYPE_ERROR, "Phoneme index %d != word phoneme offset %d", v607, 0xEu);
        }
        uint64_t v283 = v577;
        Diagnostics::log(3, "Phoneme index %d != word phoneme offset %d", v286, v577, *(unsigned int *)__p);
        int v284 = *(_DWORD *)__p;
      }
      uint64_t v287 = (*(_DWORD *)&__p[4] + v284);
      uint64_t v288 = 1749801491 * ((*(void *)(*(void *)(a1 + 840) + 8) - **(void **)(a1 + 840)) >> 3);
      if ((v287 & 0x80000000) != 0 || (int)v287 > (int)v288)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        __int16 v290 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v607 = 67109376;
          *(_DWORD *)&v607[4] = v287;
          *(_WORD *)&v607[8] = 1024;
          *(_DWORD *)&v607[10] = v288;
          _os_log_impl(&dword_20CD80000, v290, OS_LOG_TYPE_ERROR, "word phoneme end %d > limit %d", v607, 0xEu);
        }
        Diagnostics::log(3, "word phoneme end %d > limit %d", v291, v287, v288);
        int v289 = v288;
        uint64_t v283 = v577;
      }
      else
      {
        int v289 = *(_DWORD *)&__p[4] + v284;
      }
      unint64_t v292 = v562;
      if ((int)v283 >= v289)
      {
        uint64_t v12 = v283;
        goto LABEL_743;
      }
      int v582 = -1;
      int v572 = v289;
      while (1)
      {
        uint64_t v293 = **(void **)(a1 + 840);
        unint64_t v294 = (long long *)(v293 + 216 * v12);
        int v295 = v582;
        if (*((_DWORD *)v294 + 37) != v582)
        {
          if (v582 < 0)
          {
            int v295 = *((_DWORD *)v294 + 37);
          }
          else
          {
            unint64_t v296 = *(void *)(a1 + 864);
            if (v296 >= *(void *)(a1 + 872))
            {
              uint64_t v297 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v585, v590);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v585, v590);
              uint64_t v297 = v296 + 24;
            }
            *(void *)(a1 + 864) = v297;
            unint64_t v298 = *(void *)(a1 + 888);
            uint64_t v299 = (long long *)(v298 - 24);
            if (v298 >= *(void *)(a1 + 896))
            {
              uint64_t v300 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v584, v299);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v584, v299);
              uint64_t v300 = v298 + 24;
            }
            *(void *)(a1 + 888) = v300;
            unint64_t v301 = *(void *)(a1 + 912);
            uint64_t v302 = (long long *)(v301 - 24);
            if (v301 >= *(void *)(a1 + 920))
            {
              uint64_t v303 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v583, v302);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v583, v302);
              uint64_t v303 = v301 + 24;
            }
            *(void *)(a1 + 912) = v303;
            if (*(char *)(a1 + 423) < 0)
            {
              std::string::__init_copy_ctor_external(&v599, *(const std::string::value_type **)(a1 + 400), *(void *)(a1 + 408));
            }
            else
            {
              *(_OWORD *)&v599.__r_.__value_.__l.__data_ = *v590;
              v599.__r_.__value_.__r.__words[2] = *(void *)(a1 + 416);
            }
            if ((__p[63] & 0x80000000) != 0) {
              std::string::__init_copy_ctor_external(&v598, *(const std::string::value_type **)&__p[40], *(std::string::size_type *)&__p[48]);
            }
            else {
              std::string v598 = *(std::string *)&__p[40];
            }
            TacotronPhoneFeature::TacotronPhoneFeature((std::string *)v607, (long long *)&v599, (long long *)&v598, *(int *)&__p[8], *(int *)&__p[12], 1, 0, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
            unint64_t v304 = *(void *)(a1 + 936);
            unint64_t v305 = *(void *)(a1 + 944);
            if (v304 >= v305)
            {
              uint64_t v310 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v304 - *v580) >> 3);
              unint64_t v311 = v310 + 1;
              if ((unint64_t)(v310 + 1) > 0x276276276276276) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v312 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v305 - *v580) >> 3);
              if (2 * v312 > v311) {
                unint64_t v311 = 2 * v312;
              }
              if (v312 >= 0x13B13B13B13B13BLL) {
                unint64_t v313 = 0x276276276276276;
              }
              else {
                unint64_t v313 = v311;
              }
              uint64_t v615 = a1 + 944;
              long long v314 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v313);
              std::string::size_type v315 = (std::string::size_type)&v314[104 * v310];
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v314;
              buf.__r_.__value_.__l.__size_ = v315;
              v614 = &v314[104 * v316];
              long long v317 = *(_OWORD *)v607;
              *(void *)(v315 + 16) = *(void *)&v607[16];
              *(_OWORD *)std::string::size_type v315 = v317;
              memset(v607, 0, 24);
              long long v318 = *(_OWORD *)&v607[24];
              *(void *)(v315 + 40) = v608;
              *(_OWORD *)(v315 + 24) = v318;
              *(void *)&v607[32] = 0;
              uint64_t v608 = 0;
              *(void *)&v607[24] = 0;
              long long v319 = v610;
              *(_OWORD *)(v315 + 48) = v609;
              *(_OWORD *)(v315 + 64) = v319;
              *(void *)(v315 + 88) = 0;
              *(void *)(v315 + 96) = 0;
              *(void *)(v315 + 80) = 0;
              *(_OWORD *)(v315 + 80) = v611;
              *(void *)(v315 + 96) = v612;
              long long v611 = 0uLL;
              uint64_t v612 = 0;
              buf.__r_.__value_.__r.__words[2] = v315 + 104;
              std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v580, &buf);
              unint64_t v309 = *(void *)(a1 + 936);
              std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
            }
            else
            {
              long long v306 = *(_OWORD *)v607;
              *(void *)(v304 + 16) = *(void *)&v607[16];
              *(_OWORD *)unint64_t v304 = v306;
              memset(v607, 0, 24);
              uint64_t v307 = v608;
              *(_OWORD *)(v304 + 24) = *(_OWORD *)&v607[24];
              *(void *)(v304 + 40) = v307;
              *(void *)&v607[32] = 0;
              uint64_t v608 = 0;
              *(void *)&v607[24] = 0;
              long long v308 = v610;
              *(_OWORD *)(v304 + 48) = v609;
              *(_OWORD *)(v304 + 64) = v308;
              *(void *)(v304 + 80) = 0;
              *(void *)(v304 + 88) = 0;
              *(void *)(v304 + 96) = 0;
              *(_OWORD *)(v304 + 80) = v611;
              *(void *)(v304 + 96) = v612;
              long long v611 = 0uLL;
              uint64_t v612 = 0;
              unint64_t v309 = v304 + 104;
            }
            *(void *)(a1 + 936) = v309;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v611;
            std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            if (SHIBYTE(v608) < 0) {
              operator delete(*(void **)&v607[24]);
            }
            if ((v607[23] & 0x80000000) != 0) {
              operator delete(*(void **)v607);
            }
            if (SHIBYTE(v598.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v598.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v599.__r_.__value_.__l.__data_);
            }
            if (*(char *)(a1 + 423) >= 0) {
              size_t v320 = *(unsigned __int8 *)(a1 + 423);
            }
            else {
              size_t v320 = *(void *)(a1 + 408);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)v607, v320 + 1);
            if (v607[23] >= 0) {
              std::string::size_type v321 = v607;
            }
            else {
              std::string::size_type v321 = *(unsigned char **)v607;
            }
            if (v320)
            {
              if (*(char *)(a1 + 423) >= 0) {
                int v322 = (const void *)(a1 + 400);
              }
              else {
                int v322 = *(const void **)(a1 + 400);
              }
              memmove(v321, v322, v320);
            }
            *(_WORD *)&v321[v320] = 32;
            if (v607[23] >= 0) {
              uint64_t v323 = v607;
            }
            else {
              uint64_t v323 = *(const std::string::value_type **)v607;
            }
            if (v607[23] >= 0) {
              std::string::size_type v324 = v607[23];
            }
            else {
              std::string::size_type v324 = *(void *)&v607[8];
            }
            std::string::append(v591, v323, v324);
            if ((v607[23] & 0x80000000) != 0) {
              operator delete(*(void **)v607);
            }
            int v295 = *((_DWORD *)v294 + 37);
          }
        }
        if (*((char *)v294 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v597, *(const std::string::value_type **)v294, *((void *)v294 + 1));
        }
        else
        {
          long long v325 = *v294;
          v597.__r_.__value_.__r.__words[2] = *((void *)v294 + 2);
          *(_OWORD *)&v597.__r_.__value_.__l.__data_ = v325;
        }
        if (*(char *)(a1 + 615) < 0)
        {
          if (!*(void *)(a1 + 600)) {
            goto LABEL_565;
          }
        }
        else if (!*(unsigned char *)(a1 + 615))
        {
          goto LABEL_565;
        }
        if (!*(_DWORD *)(v293 + 216 * v12 + 152)) {
          goto LABEL_565;
        }
        if (*(unsigned char *)(a1 + 644))
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v569, (const void **)&v597.__r_.__value_.__l.__data_, (uint64_t)v607);
          uint64_t v326 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v564, (const void **)v607);
          if ((v607[23] & 0x80000000) != 0) {
            operator delete(*(void **)v607);
          }
          if (v563 != v326)
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v569, (const void **)&v597.__r_.__value_.__l.__data_, (uint64_t)v607);
LABEL_562:
            if (SHIBYTE(v597.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v597.__r_.__value_.__l.__data_);
            }
            std::string v597 = *(std::string *)v607;
          }
        }
        else
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v597.__r_.__value_.__l.__data_, v569, (uint64_t)v607);
          uint64_t v327 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v564, (const void **)v607);
          if ((v607[23] & 0x80000000) != 0) {
            operator delete(*(void **)v607);
          }
          if (v563 != v327)
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v597.__r_.__value_.__l.__data_, v569, (uint64_t)v607);
            goto LABEL_562;
          }
        }
LABEL_565:
        int v582 = v295;
        char v328 = *(unsigned char *)(a1 + 1000);
        uint64_t v589 = v12;
        uint64_t v329 = v293 + 216 * v12;
        int v330 = *(_DWORD **)(v329 + 72);
        v331 = *(_DWORD **)(v329 + 80);
        v332 = (uint64_t *)(v329 + 72);
        NeuralAdapterModule::process_markers(a1, v330, v331);
        *(unsigned char *)(a1 + 1000) = v328;
        unint64_t v333 = *(void *)(a1 + 864);
        if (v333 >= *(void *)(a1 + 872))
        {
          uint64_t v335 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v585, (long long *)&v597);
        }
        else
        {
          if (SHIBYTE(v597.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a1 + 864), v597.__r_.__value_.__l.__data_, v597.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v334 = *(_OWORD *)&v597.__r_.__value_.__l.__data_;
            *(void *)(v333 + 16) = *((void *)&v597.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v333 = v334;
          }
          uint64_t v335 = v333 + 24;
          *(void *)(a1 + 864) = v333 + 24;
        }
        *(void *)(a1 + 864) = v335;
        int v336 = (long long *)(v293 + 216 * v12 + 120);
        unint64_t v337 = *(void *)(a1 + 888);
        if (v337 >= *(void *)(a1 + 896))
        {
          uint64_t v338 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v584, v336);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v584, v336);
          uint64_t v338 = v337 + 24;
        }
        *(void *)(a1 + 888) = v338;
        unint64_t v339 = *(void *)(a1 + 912);
        if (v339 >= *(void *)(a1 + 920))
        {
          uint64_t v340 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v583, v570);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v583, v570);
          uint64_t v340 = v339 + 24;
        }
        *(void *)(a1 + 912) = v340;
        if (SHIBYTE(v597.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v596, v597.__r_.__value_.__l.__data_, v597.__r_.__value_.__l.__size_);
        }
        else {
          std::string v596 = v597;
        }
        if ((__p[63] & 0x80000000) != 0) {
          std::string::__init_copy_ctor_external(&v595, *(const std::string::value_type **)&__p[40], *(std::string::size_type *)&__p[48]);
        }
        else {
          std::string v595 = *(std::string *)&__p[40];
        }
        TacotronPhoneFeature::TacotronPhoneFeature((std::string *)v607, (long long *)&v596, (long long *)&v595, *(int *)&__p[8], *(int *)&__p[12], 0, 0, *(unsigned char *)(a1 + 1000), *(float *)(a1 + 296), *(float *)(a1 + 300));
        unint64_t v341 = *(void *)(a1 + 936);
        unint64_t v342 = *(void *)(a1 + 944);
        if (v341 >= v342)
        {
          uint64_t v347 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v341 - *v580) >> 3);
          unint64_t v348 = v347 + 1;
          if ((unint64_t)(v347 + 1) > 0x276276276276276) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v349 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v342 - *v580) >> 3);
          if (2 * v349 > v348) {
            unint64_t v348 = 2 * v349;
          }
          if (v349 >= 0x13B13B13B13B13BLL) {
            unint64_t v350 = 0x276276276276276;
          }
          else {
            unint64_t v350 = v348;
          }
          uint64_t v615 = a1 + 944;
          v351 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v350);
          std::string::size_type v352 = (std::string::size_type)&v351[104 * v347];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v351;
          buf.__r_.__value_.__l.__size_ = v352;
          v614 = &v351[104 * v353];
          long long v354 = *(_OWORD *)v607;
          *(void *)(v352 + 16) = *(void *)&v607[16];
          *(_OWORD *)std::string::size_type v352 = v354;
          memset(v607, 0, 24);
          long long v355 = *(_OWORD *)&v607[24];
          *(void *)(v352 + 40) = v608;
          *(_OWORD *)(v352 + 24) = v355;
          *(void *)&v607[32] = 0;
          uint64_t v608 = 0;
          *(void *)&v607[24] = 0;
          long long v356 = v610;
          *(_OWORD *)(v352 + 48) = v609;
          *(_OWORD *)(v352 + 64) = v356;
          *(void *)(v352 + 88) = 0;
          *(void *)(v352 + 96) = 0;
          *(void *)(v352 + 80) = 0;
          *(_OWORD *)(v352 + 80) = v611;
          *(void *)(v352 + 96) = v612;
          long long v611 = 0uLL;
          uint64_t v612 = 0;
          buf.__r_.__value_.__r.__words[2] = v352 + 104;
          std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v580, &buf);
          unint64_t v346 = *(void *)(a1 + 936);
          std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
        }
        else
        {
          long long v343 = *(_OWORD *)v607;
          *(void *)(v341 + 16) = *(void *)&v607[16];
          *(_OWORD *)unint64_t v341 = v343;
          memset(v607, 0, 24);
          uint64_t v344 = v608;
          *(_OWORD *)(v341 + 24) = *(_OWORD *)&v607[24];
          *(void *)(v341 + 40) = v344;
          *(void *)&v607[32] = 0;
          uint64_t v608 = 0;
          *(void *)&v607[24] = 0;
          long long v345 = v610;
          *(_OWORD *)(v341 + 48) = v609;
          *(_OWORD *)(v341 + 64) = v345;
          *(void *)(v341 + 80) = 0;
          *(void *)(v341 + 88) = 0;
          *(void *)(v341 + 96) = 0;
          *(_OWORD *)(v341 + 80) = v611;
          *(void *)(v341 + 96) = v612;
          long long v611 = 0uLL;
          uint64_t v612 = 0;
          unint64_t v346 = v341 + 104;
        }
        *(void *)(a1 + 936) = v346;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v611;
        std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        if (SHIBYTE(v608) < 0) {
          operator delete(*(void **)&v607[24]);
        }
        if ((v607[23] & 0x80000000) != 0) {
          operator delete(*(void **)v607);
        }
        if (SHIBYTE(v595.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v595.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v596.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v596.__r_.__value_.__l.__data_);
        }
        int v357 = *(_DWORD *)(v293 + 216 * v12 + 28);
        if (!v357) {
          int v357 = 200;
        }
        uint64_t v358 = *(void *)(a1 + 936);
        *(_DWORD *)(v358 - 48) = v357;
        if ((uint64_t *)(v358 - 24) != v332) {
          std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)(v358 - 24), *v332, *(void *)(v293 + 216 * v12 + 80), 0x6DB6DB6DB6DB6DB7 * ((*(void *)(v293 + 216 * v12 + 80) - *v332) >> 3));
        }
        uint64_t v359 = *(void *)(a1 + 976);
        uint64_t v360 = *(void *)(a1 + 984);
        if (v359 != v360)
        {
          std::vector<MarkerRecord>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MarkerRecord*>,std::__wrap_iter<MarkerRecord*>>((uint64_t *)(*(void *)(a1 + 936) - 24), *(void *)(*(void *)(a1 + 936) - 16), v359, v360, 0x6DB6DB6DB6DB6DB7 * ((v360 - v359) >> 3));
          std::vector<MarkerRecord>::__clear[abi:ne180100](v568);
        }
        if (*(unsigned char *)(a1 + 1000)) {
          *(unsigned char *)(a1 + 1000) = 0;
        }
        if ((v597.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v597.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v597.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)v607, size + 1);
        if (v607[23] >= 0) {
          int v362 = v607;
        }
        else {
          int v362 = *(unsigned char **)v607;
        }
        if (size)
        {
          if ((v597.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v363 = &v597;
          }
          else {
            v363 = (std::string *)v597.__r_.__value_.__r.__words[0];
          }
          memmove(v362, v363, size);
        }
        *(_WORD *)&v362[size] = 32;
        if (v607[23] >= 0) {
          v364 = v607;
        }
        else {
          v364 = *(const std::string::value_type **)v607;
        }
        if (v607[23] >= 0) {
          std::string::size_type v365 = v607[23];
        }
        else {
          std::string::size_type v365 = *(void *)&v607[8];
        }
        std::string::append(v591, v364, v365);
        if ((v607[23] & 0x80000000) != 0) {
          operator delete(*(void **)v607);
        }
        if (v573 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v574, (const void **)&v597.__r_.__value_.__l.__data_))
        {
          if (v566 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v567, (const void **)&v597.__r_.__value_.__l.__data_))
          {
            if (v560 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v561, (const void **)&v597.__r_.__value_.__l.__data_))
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              int v368 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
              {
                int v370 = &v597;
                if ((v597.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  int v370 = (std::string *)v597.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)v607 = 136315138;
                *(void *)&v607[4] = v370;
              }
              v371 = &v597;
              if ((v597.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v371 = (std::string *)v597.__r_.__value_.__r.__words[0];
              }
            }
            int v366 = 44;
          }
          else
          {
            int v366 = 46;
          }
          goto LABEL_648;
        }
        if (SHIBYTE(v597.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v597.__r_.__value_.__l.__size_ != 1) {
            goto LABEL_649;
          }
          v367 = (std::string *)v597.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v597.__r_.__value_.__r.__words[2]) != 1) {
            goto LABEL_649;
          }
          v367 = &v597;
        }
        if (v367->__r_.__value_.__s.__data_[0] == 35)
        {
          int v366 = 35;
LABEL_648:
          NeuralAdapterModule::save_break((NeuralAdapterModule *)a1, v366, v579, v8);
        }
LABEL_649:
        uint64_t v372 = (v579 - v8);
        if ((int)v372 >= *(_DWORD *)(a1 + 560))
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          int v378 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v607 = 67109120;
            *(_DWORD *)&v607[4] = v579 - v8;
            _os_log_impl(&dword_20CD80000, v378, OS_LOG_TYPE_INFO, "Max word limit reached. word count = %d", v607, 8u);
          }
          Diagnostics::log(6, "Max word limit reached. word count = %d", v379, v372);
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 864) - *(void *)(a1 + 856)) >> 3) < *(int *)(a1 + 564)) {
            goto LABEL_738;
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          v373 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            unint64_t v375 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 864) - *(void *)(a1 + 856)) >> 3);
            *(_DWORD *)v607 = 134217984;
            *(void *)&v607[4] = v375;
            _os_log_impl(&dword_20CD80000, v373, OS_LOG_TYPE_INFO, "Max phone limit reached. phone count = %ld", v607, 0xCu);
          }
          Diagnostics::log(6, "Max phone limit reached. phone count = %ld", v374, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 864) - *(void *)(a1 + 856)) >> 3));
          if (*(void *)(a1 + 1008) == *(void *)(a1 + 1016))
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            int v376 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v607 = 0;
              _os_log_impl(&dword_20CD80000, v376, OS_LOG_TYPE_INFO, "No proper stop position found in phone vector, do hard split", v607, 2u);
            }
            Diagnostics::log(6, "No proper stop position found in phone vector, do hard split", v377);
            NeuralAdapterModule::save_break((NeuralAdapterModule *)a1, 35, v579, v8);
          }
        }
        v380 = *(uint64_t **)(a1 + 1008);
        std::vector<std::string>::size_type v381 = v380[1];
        uint64_t v587 = *v380;
        std::string::size_type v382 = v380[2];
        uint64_t v578 = *((char *)v380 + 24);
        v383 = *(uint64_t **)(a1 + 1016);
        uint64_t v384 = (char *)v383 - (char *)(v380 + 4);
        if (v383 != v380 + 4) {
          memmove(v380, v380 + 4, v384 - 7);
        }
        *(void *)(a1 + 1016) = (char *)v380 + v384;
        v385 = *(long long **)(a1 + 864);
        uint64_t v386 = *(void *)(a1 + 856);
        unint64_t v387 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v385 - v386) >> 3);
        unint64_t v388 = v381;
        if (v381 >= v387) {
          goto LABEL_689;
        }
        int v389 = v8;
        int v390 = *(char *)(a1 + 423);
        if (v390 >= 0) {
          uint64_t v391 = *(unsigned __int8 *)(a1 + 423);
        }
        else {
          uint64_t v391 = *(void *)(a1 + 408);
        }
        unint64_t v388 = v381;
        while (1)
        {
          int v392 = (unsigned __int8 *)(v386 + 24 * v388);
          uint64_t v393 = v392[23];
          if ((v393 & 0x80u) == 0) {
            uint64_t v394 = v392[23];
          }
          else {
            uint64_t v394 = *((void *)v392 + 1);
          }
          if (v394 != v391) {
            goto LABEL_688;
          }
          if (v390 >= 0) {
            v395 = (unsigned __int8 *)(a1 + 400);
          }
          else {
            v395 = *(unsigned __int8 **)v590;
          }
          if ((v393 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v392, v395, *((void *)v392 + 1))) {
              goto LABEL_688;
            }
            goto LABEL_686;
          }
          if (v392[23]) {
            break;
          }
LABEL_686:
          if (++v388 == v387)
          {
            unint64_t v388 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v385 - v386) >> 3);
            goto LABEL_688;
          }
        }
        while (*v392 == *v395)
        {
          ++v392;
          ++v395;
          if (!--v393) {
            goto LABEL_686;
          }
        }
LABEL_688:
        int v8 = v389;
LABEL_689:
        memset(&buf, 0, sizeof(buf));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&buf, (long long *)(v386 + 24 * v388), v385, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v385 - v386 + -24 * v388) >> 3));
        std::vector<std::string>::resize((std::vector<std::string> *)v585, v381);
        v396 = (long long *)(*(void *)(a1 + 880) + 24 * v388);
        v397 = *(long long **)(a1 + 888);
        memset(&v603, 0, sizeof(v603));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v603, v396, v397, 0xAAAAAAAAAAAAAAABLL * (((char *)v397 - (char *)v396) >> 3));
        std::vector<std::string>::resize((std::vector<std::string> *)v584, v381);
        int v398 = (long long *)(*(void *)(a1 + 904) + 24 * v388);
        v399 = *(long long **)(a1 + 912);
        memset(&v602, 0, sizeof(v602));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v602, v398, v399, 0xAAAAAAAAAAAAAAABLL * (((char *)v399 - (char *)v398) >> 3));
        std::vector<std::string>::resize((std::vector<std::string> *)v583, v381);
        uint64_t v400 = *(void *)(a1 + 928);
        uint64_t v401 = *(void *)(a1 + 936);
        uint64_t v402 = v400 + 104 * v388;
        memset(&v601, 0, sizeof(v601));
        *(void *)v607 = &v601;
        v607[8] = 0;
        if (v401 != v402)
        {
          unint64_t v403 = 0x4EC4EC4EC4EC4EC5 * ((v401 - v402) >> 3);
          if (v403 > 0x276276276276276) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          v601.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v403);
          v601.__r_.__value_.__l.__size_ = v601.__r_.__value_.__r.__words[0];
          v601.__r_.__value_.__r.__words[2] = v601.__r_.__value_.__r.__words[0] + 104 * v404;
          v601.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>((uint64_t)&v601.__r_.__value_.__r.__words[2], v402, v401, (uint64_t)v601.__r_.__value_.__l.__data_);
          uint64_t v402 = *(void *)(a1 + 936);
          uint64_t v400 = *(void *)(a1 + 928);
        }
        unint64_t v405 = 0x4EC4EC4EC4EC4EC5 * ((v402 - v400) >> 3);
        unint64_t v406 = v381 - v405;
        if (v381 <= v405)
        {
          if (v381 < v405)
          {
            std::vector<std::string>::size_type v414 = v400 + 104 * v381;
            while (v402 != v414)
            {
              v402 -= 104;
              std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](v402);
            }
            *(void *)(a1 + 936) = v414;
          }
        }
        else
        {
          uint64_t v407 = *v576;
          if (0x4EC4EC4EC4EC4EC5 * ((*v576 - v402) >> 3) >= v406)
          {
            unint64_t v415 = v402 + 104 * v406;
            do
            {
              *(_OWORD *)(v402 + 16) = 0uLL;
              *(_OWORD *)(v402 + 32) = 0uLL;
              *(_OWORD *)uint64_t v402 = 0uLL;
              *(void *)(v402 + 48) = 0x8000000080000000;
              *(_DWORD *)(v402 + 56) = 0;
              *(_DWORD *)(v402 + 59) = 0;
              *(_OWORD *)(v402 + 64) = xmmword_20D6B4AA0;
              *(void *)(v402 + 88) = 0;
              *(void *)(v402 + 96) = 0;
              *(void *)(v402 + 80) = 0;
              v402 += 104;
            }
            while (v402 != v415);
            *(void *)(a1 + 936) = v415;
          }
          else
          {
            if (v381 > 0x276276276276276) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            *(void *)&v607[32] = a1 + 944;
            unint64_t v408 = 0x4EC4EC4EC4EC4EC5 * ((v407 - v400) >> 3);
            uint64_t v409 = 2 * v408;
            if (2 * v408 <= v381) {
              uint64_t v409 = v381;
            }
            if (v408 >= 0x13B13B13B13B13BLL) {
              unint64_t v410 = 0x276276276276276;
            }
            else {
              unint64_t v410 = v409;
            }
            v411 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v410);
            v412 = &v411[104 * v405];
            *(void *)v607 = v411;
            *(void *)&v607[8] = v412;
            *(void *)&v607[24] = &v411[104 * v413];
            do
            {
              *((_OWORD *)v412 + 1) = 0uLL;
              *((_OWORD *)v412 + 2) = 0uLL;
              *(_OWORD *)v412 = 0uLL;
              *((void *)v412 + 6) = 0x8000000080000000;
              *((_DWORD *)v412 + 14) = 0;
              *(_DWORD *)(v412 + 59) = 0;
              *((_OWORD *)v412 + 4) = xmmword_20D6B4AA0;
              *((void *)v412 + 11) = 0;
              *((void *)v412 + 12) = 0;
              *((void *)v412 + 10) = 0;
              v412 += 104;
            }
            while (v412 != &v411[104 * v381]);
            *(void *)&v607[16] = &v411[104 * v381];
            std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v580, v607);
            std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)v607);
          }
        }
        std::string::size_type v416 = *(unsigned __int8 *)(a1 + 975);
        for (std::string::size_type i = v382; ; ++i)
        {
          std::string::size_type v418 = v416;
          if ((v416 & 0x80) != 0) {
            std::string::size_type v418 = *(void *)(a1 + 960);
          }
          if (i >= v418) {
            goto LABEL_723;
          }
          int v419 = *std::string::at(v591, i);
          if (v419 != *std::string::at((std::string *)v590, 0) && *std::string::at(v591, i) != 32) {
            break;
          }
          std::string::size_type v416 = *(unsigned __int8 *)(a1 + 975);
          if (*(char *)(a1 + 975) < 0) {
            uint64_t v420 = *(void *)(a1 + 960);
          }
          else {
            uint64_t v420 = *(unsigned __int8 *)(a1 + 975);
          }
          if (i >= v420 - 1) {
            goto LABEL_723;
          }
        }
        std::string::size_type v416 = *(unsigned __int8 *)(a1 + 975);
LABEL_723:
        uint64_t v421 = a1 + 952;
        if ((v416 & 0x80) != 0)
        {
          uint64_t v421 = *(void *)(a1 + 952);
          std::string::size_type v416 = *(void *)(a1 + 960);
        }
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v600, (char *)(v421 + i), (char *)(v421 + v416), v416 - i);
        std::string::resize(v591, v382, 0);
        UTFString::rstrip(v591);
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        int v422 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v607 = 67109632;
          *(_DWORD *)&v607[4] = v578;
          *(_WORD *)&v607[8] = 2048;
          *(void *)&v607[10] = v587 + 1;
          *(_WORD *)&v607[18] = 2048;
          *(void *)&v607[20] = v381;
          _os_log_impl(&dword_20CD80000, v422, OS_LOG_TYPE_INFO, "Break [%c] %zu words %zu phones", v607, 0x1Cu);
        }
        Diagnostics::log(6, "Break [%c] %zu words %zu phones", v423, v578, v587 + 1, v381);
        NeuralAdapterModule::dump_features((NeuralAdapterModule *)a1);
        long long v424 = *(_OWORD *)v585;
        *(_OWORD *)v585 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v424;
        std::string::size_type v425 = *(void *)(a1 + 872);
        *(void *)(a1 + 872) = *((void *)&buf.__r_.__value_.__l + 2);
        buf.__r_.__value_.__r.__words[2] = v425;
        long long v426 = *(_OWORD *)(a1 + 880);
        *(_OWORD *)(a1 + 880) = *(_OWORD *)&v603.__r_.__value_.__l.__data_;
        *(_OWORD *)&v603.__r_.__value_.__l.__data_ = v426;
        std::string::size_type v427 = *(void *)(a1 + 896);
        *(void *)(a1 + 896) = *((void *)&v603.__r_.__value_.__l + 2);
        v603.__r_.__value_.__r.__words[2] = v427;
        long long v428 = *(_OWORD *)(a1 + 904);
        *(_OWORD *)(a1 + 904) = *(_OWORD *)&v602.__r_.__value_.__l.__data_;
        *(_OWORD *)&v602.__r_.__value_.__l.__data_ = v428;
        std::string::size_type v429 = *(void *)(a1 + 920);
        *(void *)(a1 + 920) = *((void *)&v602.__r_.__value_.__l + 2);
        v602.__r_.__value_.__r.__words[2] = v429;
        long long v430 = *(_OWORD *)(a1 + 928);
        *(_OWORD *)(a1 + 928) = *(_OWORD *)&v601.__r_.__value_.__l.__data_;
        *(_OWORD *)&v601.__r_.__value_.__l.__data_ = v430;
        std::string::size_type v431 = *(void *)(a1 + 944);
        *(void *)(a1 + 944) = *((void *)&v601.__r_.__value_.__l + 2);
        v601.__r_.__value_.__r.__words[2] = v431;
        *(_OWORD *)v607 = *(_OWORD *)&v591->__r_.__value_.__l.__data_;
        long long v432 = *(_OWORD *)v607;
        *(void *)&v607[16] = *(void *)(a1 + 968);
        std::string::size_type v433 = *(void *)&v607[16];
        *(_OWORD *)&v591->__r_.__value_.__l.__data_ = *(_OWORD *)&v600.__r_.__value_.__l.__data_;
        *(void *)(a1 + 968) = *((void *)&v600.__r_.__value_.__l + 2);
        v600.__r_.__value_.__r.__words[2] = v433;
        *(_OWORD *)&v600.__r_.__value_.__l.__data_ = v432;
        int v434 = *(uint64_t **)(a1 + 1008);
        v435 = *(uint64_t **)(a1 + 1016);
        while (v434 != v435)
        {
          std::vector<std::string>::size_type v436 = v434[1] - v381;
          *v434 += ~v587;
          v434[1] = v436;
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          v437 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            int v439 = *((char *)v434 + 24);
            uint64_t v440 = v434[1];
            uint64_t v441 = *v434 + 1;
            *(_DWORD *)v607 = 67109632;
            *(_DWORD *)&v607[4] = v439;
            *(_WORD *)&v607[8] = 2048;
            *(void *)&v607[10] = v441;
            *(_WORD *)&v607[18] = 2048;
            *(void *)&v607[20] = v440;
            _os_log_impl(&dword_20CD80000, v437, OS_LOG_TYPE_INFO, "Potential break [%c] %zu words %zu phones", v607, 0x1Cu);
          }
          uint64_t v442 = *((char *)v434 + 24);
          uint64_t v443 = *v434;
          uint64_t v444 = v434[1];
          v434 += 4;
          Diagnostics::log(6, "Potential break [%c] %zu words %zu phones", v438, v442, v443 + 1, v444);
        }
        if (SHIBYTE(v600.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v600.__r_.__value_.__l.__data_);
        }
        v8 += v587 + 1;
        *(void *)v607 = &v601;
        std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)v607);
        *(void *)v607 = &v602;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v607);
        *(void *)v607 = &v603;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v607);
        *(void *)v607 = &buf;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v607);
LABEL_738:
        unint64_t v292 = v562;
        if (SHIBYTE(v597.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v597.__r_.__value_.__l.__data_);
        }
        uint64_t v12 = v589 + 1;
        if (v572 == v589 + 1)
        {
LABEL_743:
          if (*(void *)(a1 + 1008) == *(void *)(a1 + 1016) || *(unsigned char *)(a1 + 645))
          {
            if (!*(unsigned char *)(a1 + 645)) {
              goto LABEL_749;
            }
            NeuralAdapterModule::save_break((NeuralAdapterModule *)a1, 35, v562, v8);
          }
          else
          {
            uint64_t v445 = *(void *)(*(void *)(a1 + 840) + 24);
            unint64_t v446 = 0xF0F0F0F0F0F0F0F1 * ((*(void *)(*(void *)(a1 + 840) + 32) - v445) >> 3);
            if (v446 - 1 <= v292) {
              goto LABEL_845;
            }
LABEL_749:
            if (*(char *)(a1 + 975) < 0)
            {
              std::string::__init_copy_ctor_external(&v603, *(const std::string::value_type **)(a1 + 952), *(void *)(a1 + 960));
            }
            else
            {
              *(_OWORD *)&v603.__r_.__value_.__l.__data_ = *(_OWORD *)&v591->__r_.__value_.__l.__data_;
              v603.__r_.__value_.__r.__words[2] = *(void *)(a1 + 968);
            }
            UTFString::rstrip(&v603);
            std::string buf = v603;
            memset(&v603, 0, sizeof(v603));
            NeuralAdapterModule::find_last_char((uint64_t)v607, (uint64_t)&buf, 1);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v603.__r_.__value_.__l.__data_);
            }
            if (v573 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v574, (const void **)v607))
            {
              int v447 = 35;
            }
            else if (v566 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v567, (const void **)v607))
            {
              if (v560 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v561, (const void **)v607))
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                }
                char v448 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                {
                  char v450 = v607;
                  if (v607[23] < 0) {
                    char v450 = *(unsigned char **)v607;
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v450;
                }
                v451 = v607;
                if (v607[23] < 0) {
                  v451 = *(unsigned char **)v607;
                }
              }
              int v447 = 44;
            }
            else
            {
              int v447 = 46;
            }
            NeuralAdapterModule::save_break((NeuralAdapterModule *)a1, v447, v562, v8);
            if ((v607[23] & 0x80000000) != 0) {
              operator delete(*(void **)v607);
            }
          }
          unint64_t v452 = *(void *)(a1 + 864);
          if (v452 >= *(void *)(a1 + 872))
          {
            uint64_t v453 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v585, v590);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v585, v590);
            uint64_t v453 = v452 + 24;
          }
          *(void *)(a1 + 864) = v453;
          uint64_t v454 = *(void *)(a1 + 888);
          if (v454 == *(void *)(a1 + 880))
          {
            std::string::basic_string[abi:ne180100]<0>(&v602, "-");
          }
          else if (*(char *)(v454 - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v602, *(const std::string::value_type **)(v454 - 24), *(void *)(v454 - 16));
          }
          else
          {
            long long v455 = *(_OWORD *)(v454 - 24);
            v602.__r_.__value_.__r.__words[2] = *(void *)(v454 - 8);
            *(_OWORD *)&v602.__r_.__value_.__l.__data_ = v455;
          }
          unint64_t v456 = *(void *)(a1 + 888);
          if (v456 >= *(void *)(a1 + 896))
          {
            uint64_t v458 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v584, (long long *)&v602);
          }
          else
          {
            if (SHIBYTE(v602.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a1 + 888), v602.__r_.__value_.__l.__data_, v602.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v457 = *(_OWORD *)&v602.__r_.__value_.__l.__data_;
              *(void *)(v456 + 16) = *((void *)&v602.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v456 = v457;
            }
            uint64_t v458 = v456 + 24;
            *(void *)(a1 + 888) = v456 + 24;
          }
          *(void *)(a1 + 888) = v458;
          uint64_t v459 = *(void *)(a1 + 912);
          if (v459 == *(void *)(a1 + 904))
          {
            std::string::basic_string[abi:ne180100]<0>(&v601, "narrator");
          }
          else if (*(char *)(v459 - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v601, *(const std::string::value_type **)(v459 - 24), *(void *)(v459 - 16));
          }
          else
          {
            long long v460 = *(_OWORD *)(v459 - 24);
            v601.__r_.__value_.__r.__words[2] = *(void *)(v459 - 8);
            *(_OWORD *)&v601.__r_.__value_.__l.__data_ = v460;
          }
          unint64_t v461 = *(void *)(a1 + 912);
          if (v461 >= *(void *)(a1 + 920))
          {
            uint64_t v463 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v583, (long long *)&v601);
          }
          else
          {
            if (SHIBYTE(v601.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a1 + 912), v601.__r_.__value_.__l.__data_, v601.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v462 = *(_OWORD *)&v601.__r_.__value_.__l.__data_;
              *(void *)(v461 + 16) = *((void *)&v601.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v461 = v462;
            }
            uint64_t v463 = v461 + 24;
            *(void *)(a1 + 912) = v461 + 24;
          }
          *(void *)(a1 + 912) = v463;
          if (*(char *)(a1 + 423) >= 0) {
            size_t v464 = *(unsigned __int8 *)(a1 + 423);
          }
          else {
            size_t v464 = *(void *)(a1 + 408);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v607, v464 + 1);
          if (v607[23] >= 0) {
            v465 = v607;
          }
          else {
            v465 = *(unsigned char **)v607;
          }
          if (v464)
          {
            if (*(char *)(a1 + 423) >= 0) {
              char v466 = (const void *)(a1 + 400);
            }
            else {
              char v466 = *(const void **)(a1 + 400);
            }
            memmove(v465, v466, v464);
          }
          *(_WORD *)&v465[v464] = 32;
          if (v607[23] >= 0) {
            std::string v467 = v607;
          }
          else {
            std::string v467 = *(const std::string::value_type **)v607;
          }
          if (v607[23] >= 0) {
            std::string::size_type v468 = v607[23];
          }
          else {
            std::string::size_type v468 = *(void *)&v607[8];
          }
          std::string::append(v591, v467, v468);
          unint64_t v292 = v562;
          if ((v607[23] & 0x80000000) != 0) {
            operator delete(*(void **)v607);
          }
          if (*(char *)(a1 + 423) < 0)
          {
            std::string::__init_copy_ctor_external(&v600, *(const std::string::value_type **)(a1 + 400), *(void *)(a1 + 408));
          }
          else
          {
            *(_OWORD *)&v600.__r_.__value_.__l.__data_ = *v590;
            v600.__r_.__value_.__r.__words[2] = *(void *)(a1 + 416);
          }
          if ((__p[63] & 0x80000000) != 0) {
            std::string::__init_copy_ctor_external(&v599, *(const std::string::value_type **)&__p[40], *(std::string::size_type *)&__p[48]);
          }
          else {
            std::string v599 = *(std::string *)&__p[40];
          }
          TacotronPhoneFeature::TacotronPhoneFeature((std::string *)v607, (long long *)&v600, (long long *)&v599, *(int *)&__p[8], *(int *)&__p[12], 1, 0, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
          unint64_t v469 = *(void *)(a1 + 936);
          unint64_t v470 = *(void *)(a1 + 944);
          if (v469 >= v470)
          {
            uint64_t v475 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v469 - *v580) >> 3);
            unint64_t v476 = v475 + 1;
            if ((unint64_t)(v475 + 1) > 0x276276276276276) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v477 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v470 - *v580) >> 3);
            if (2 * v477 > v476) {
              unint64_t v476 = 2 * v477;
            }
            if (v477 >= 0x13B13B13B13B13BLL) {
              unint64_t v478 = 0x276276276276276;
            }
            else {
              unint64_t v478 = v476;
            }
            uint64_t v615 = a1 + 944;
            v479 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v478);
            std::string::size_type v480 = (std::string::size_type)&v479[104 * v475];
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v479;
            buf.__r_.__value_.__l.__size_ = v480;
            v614 = &v479[104 * v481];
            long long v482 = *(_OWORD *)v607;
            *(void *)(v480 + 16) = *(void *)&v607[16];
            *(_OWORD *)std::string::size_type v480 = v482;
            memset(v607, 0, 24);
            long long v483 = *(_OWORD *)&v607[24];
            *(void *)(v480 + 40) = v608;
            *(_OWORD *)(v480 + 24) = v483;
            *(void *)&v607[32] = 0;
            uint64_t v608 = 0;
            *(void *)&v607[24] = 0;
            long long v484 = v610;
            *(_OWORD *)(v480 + 48) = v609;
            *(_OWORD *)(v480 + 64) = v484;
            *(void *)(v480 + 88) = 0;
            *(void *)(v480 + 96) = 0;
            *(void *)(v480 + 80) = 0;
            *(_OWORD *)(v480 + 80) = v611;
            *(void *)(v480 + 96) = v612;
            long long v611 = 0uLL;
            uint64_t v612 = 0;
            buf.__r_.__value_.__r.__words[2] = v480 + 104;
            std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v580, &buf);
            unint64_t v474 = *(void *)(a1 + 936);
            std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
            unint64_t v292 = v562;
          }
          else
          {
            long long v471 = *(_OWORD *)v607;
            *(void *)(v469 + 16) = *(void *)&v607[16];
            *(_OWORD *)unint64_t v469 = v471;
            memset(v607, 0, 24);
            uint64_t v472 = v608;
            *(_OWORD *)(v469 + 24) = *(_OWORD *)&v607[24];
            *(void *)(v469 + 40) = v472;
            *(void *)&v607[32] = 0;
            uint64_t v608 = 0;
            *(void *)&v607[24] = 0;
            long long v473 = v610;
            *(_OWORD *)(v469 + 48) = v609;
            *(_OWORD *)(v469 + 64) = v473;
            *(void *)(v469 + 80) = 0;
            *(void *)(v469 + 88) = 0;
            *(void *)(v469 + 96) = 0;
            *(_OWORD *)(v469 + 80) = v611;
            *(void *)(v469 + 96) = v612;
            long long v611 = 0uLL;
            uint64_t v612 = 0;
            unint64_t v474 = v469 + 104;
          }
          *(void *)(a1 + 936) = v474;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v611;
          std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          if (SHIBYTE(v608) < 0) {
            operator delete(*(void **)&v607[24]);
          }
          if ((v607[23] & 0x80000000) != 0) {
            operator delete(*(void **)v607);
          }
          if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v599.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v600.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v600.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v601.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v601.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v602.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v602.__r_.__value_.__l.__data_);
          }
          uint64_t v445 = *(void *)(*(void *)(a1 + 840) + 24);
          unint64_t v446 = 0xF0F0F0F0F0F0F0F1 * ((*(void *)(*(void *)(a1 + 840) + 32) - v445) >> 3);
LABEL_845:
          if (v446 > v292)
          {
            if (*(unsigned char *)(a1 + 645))
            {
              NeuralAdapterModule::find_last_char((uint64_t)&v603, v445 + 136 * (int)v292 + 40, 0);
              if ((-1
                  - 0xF0F0F0F0F0F0F0FLL
                  * ((uint64_t)(*(void *)(*(void *)(a1 + 840) + 32) - *(void *)(*(void *)(a1 + 840) + 24)) >> 3) == v292
                 || *(void *)(a1 + 1008) == *(void *)(a1 + 1016)
                 && (v562 - v8 + 1 == *(_DWORD *)(a1 + 560)
                  || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 864) - *(void *)(a1 + 856)) >> 3) >= *(int *)(a1 + 564)))
                && v573 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v574, (const void **)&v603.__r_.__value_.__l.__data_))
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                }
                v485 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)v607 = 0;
                  _os_log_impl(&dword_20CD80000, v485, OS_LOG_TYPE_DEBUG, "Append period in the end of utterance.", v607, 2u);
                }
                Diagnostics::log(7, "Append period in the end of utterance.", v486);
                std::string::operator=(&v603, (const std::string *)(a1 + 568));
              }
              if (v573 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v574, (const void **)&v603.__r_.__value_.__l.__data_))
              {
                unint64_t v487 = *(void *)(a1 + 864);
                if (v487 >= *(void *)(a1 + 872))
                {
                  uint64_t v489 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v585, (long long *)&v603);
                }
                else
                {
                  if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 864), v603.__r_.__value_.__l.__data_, v603.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    long long v488 = *(_OWORD *)&v603.__r_.__value_.__l.__data_;
                    *(void *)(v487 + 16) = *((void *)&v603.__r_.__value_.__l + 2);
                    *(_OWORD *)unint64_t v487 = v488;
                  }
                  uint64_t v489 = v487 + 24;
                  *(void *)(a1 + 864) = v487 + 24;
                }
                *(void *)(a1 + 864) = v489;
                unint64_t v490 = *(void *)(a1 + 888);
                v491 = (long long *)(v490 - 24);
                if (v490 >= *(void *)(a1 + 896))
                {
                  uint64_t v492 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v584, v491);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v584, v491);
                  uint64_t v492 = v490 + 24;
                }
                *(void *)(a1 + 888) = v492;
                unint64_t v493 = *(void *)(a1 + 912);
                v494 = (long long *)(v493 - 24);
                if (v493 >= *(void *)(a1 + 920))
                {
                  uint64_t v495 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v583, v494);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v583, v494);
                  uint64_t v495 = v493 + 24;
                }
                *(void *)(a1 + 912) = v495;
                if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v602, v603.__r_.__value_.__l.__data_, v603.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v602 = v603;
                }
                if ((__p[63] & 0x80000000) != 0) {
                  std::string::__init_copy_ctor_external(&v601, *(const std::string::value_type **)&__p[40], *(std::string::size_type *)&__p[48]);
                }
                else {
                  std::string v601 = *(std::string *)&__p[40];
                }
                TacotronPhoneFeature::TacotronPhoneFeature((std::string *)v607, (long long *)&v602, (long long *)&v601, *(int *)&__p[8], *(int *)&__p[12], 0, 1, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
                unint64_t v496 = *(void *)(a1 + 936);
                unint64_t v497 = *(void *)(a1 + 944);
                if (v496 >= v497)
                {
                  uint64_t v502 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v496 - *v580) >> 3);
                  unint64_t v503 = v502 + 1;
                  if ((unint64_t)(v502 + 1) > 0x276276276276276) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v504 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v497 - *v580) >> 3);
                  if (2 * v504 > v503) {
                    unint64_t v503 = 2 * v504;
                  }
                  if (v504 >= 0x13B13B13B13B13BLL) {
                    unint64_t v505 = 0x276276276276276;
                  }
                  else {
                    unint64_t v505 = v503;
                  }
                  uint64_t v615 = a1 + 944;
                  v506 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v505);
                  std::string::size_type v507 = (std::string::size_type)&v506[104 * v502];
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v506;
                  buf.__r_.__value_.__l.__size_ = v507;
                  v614 = &v506[104 * v508];
                  long long v509 = *(_OWORD *)v607;
                  *(void *)(v507 + 16) = *(void *)&v607[16];
                  *(_OWORD *)std::string::size_type v507 = v509;
                  memset(v607, 0, 24);
                  long long v510 = *(_OWORD *)&v607[24];
                  *(void *)(v507 + 40) = v608;
                  *(_OWORD *)(v507 + 24) = v510;
                  *(void *)&v607[32] = 0;
                  uint64_t v608 = 0;
                  *(void *)&v607[24] = 0;
                  long long v511 = v610;
                  *(_OWORD *)(v507 + 48) = v609;
                  *(_OWORD *)(v507 + 64) = v511;
                  *(void *)(v507 + 88) = 0;
                  *(void *)(v507 + 96) = 0;
                  *(void *)(v507 + 80) = 0;
                  *(_OWORD *)(v507 + 80) = v611;
                  *(void *)(v507 + 96) = v612;
                  long long v611 = 0uLL;
                  uint64_t v612 = 0;
                  buf.__r_.__value_.__r.__words[2] = v507 + 104;
                  std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v580, &buf);
                  unint64_t v501 = *(void *)(a1 + 936);
                  std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
                }
                else
                {
                  long long v498 = *(_OWORD *)v607;
                  *(void *)(v496 + 16) = *(void *)&v607[16];
                  *(_OWORD *)unint64_t v496 = v498;
                  memset(v607, 0, 24);
                  uint64_t v499 = v608;
                  *(_OWORD *)(v496 + 24) = *(_OWORD *)&v607[24];
                  *(void *)(v496 + 40) = v499;
                  *(void *)&v607[32] = 0;
                  uint64_t v608 = 0;
                  *(void *)&v607[24] = 0;
                  long long v500 = v610;
                  *(_OWORD *)(v496 + 48) = v609;
                  *(_OWORD *)(v496 + 64) = v500;
                  *(void *)(v496 + 80) = 0;
                  *(void *)(v496 + 88) = 0;
                  *(void *)(v496 + 96) = 0;
                  *(_OWORD *)(v496 + 80) = v611;
                  *(void *)(v496 + 96) = v612;
                  long long v611 = 0uLL;
                  uint64_t v612 = 0;
                  unint64_t v501 = v496 + 104;
                }
                *(void *)(a1 + 936) = v501;
                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v611;
                std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                if (SHIBYTE(v608) < 0) {
                  operator delete(*(void **)&v607[24]);
                }
                if ((v607[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v607);
                }
                if (SHIBYTE(v601.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v601.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v602.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v602.__r_.__value_.__l.__data_);
                }
                *(_DWORD *)(*(void *)(a1 + 936) - 48) = 200;
                if ((v603.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v512 = HIBYTE(v603.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v512 = v603.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)v607, v512 + 1);
                if (v607[23] >= 0) {
                  v513 = v607;
                }
                else {
                  v513 = *(unsigned char **)v607;
                }
                if (v512)
                {
                  if ((v603.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v514 = &v603;
                  }
                  else {
                    v514 = (std::string *)v603.__r_.__value_.__r.__words[0];
                  }
                  memmove(v513, v514, v512);
                }
                *(_WORD *)&v513[v512] = 32;
                if (v607[23] >= 0) {
                  v515 = v607;
                }
                else {
                  v515 = *(const std::string::value_type **)v607;
                }
                if (v607[23] >= 0) {
                  std::string::size_type v516 = v607[23];
                }
                else {
                  std::string::size_type v516 = *(void *)&v607[8];
                }
                std::string::append(v591, v515, v516);
                if ((v607[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v607);
                }
                if (-1
                   - 0xF0F0F0F0F0F0F0FLL
                   * ((uint64_t)(*(void *)(*(void *)(a1 + 840) + 32) - *(void *)(*(void *)(a1 + 840) + 24)) >> 3) > (unint64_t)v562)
                {
                  if (*(void *)(a1 + 1008) == *(void *)(a1 + 1016))
                  {
                    if (v562 - v8 + 1 != *(_DWORD *)(a1 + 560))
                    {
                      unint64_t v517 = *(void *)(a1 + 864);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v517 - *(void *)(a1 + 856)) >> 3) < *(int *)(a1 + 564)) {
                        goto LABEL_916;
                      }
                    }
                  }
                  else
                  {
                    unint64_t v517 = *(void *)(a1 + 864);
LABEL_916:
                    if (v517 >= *(void *)(a1 + 872))
                    {
                      uint64_t v518 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v585, v590);
                    }
                    else
                    {
                      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v585, v590);
                      uint64_t v518 = v517 + 24;
                    }
                    *(void *)(a1 + 864) = v518;
                    unint64_t v519 = *(void *)(a1 + 888);
                    v520 = (long long *)(v519 - 24);
                    if (v519 >= *(void *)(a1 + 896))
                    {
                      uint64_t v521 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v584, v520);
                    }
                    else
                    {
                      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v584, v520);
                      uint64_t v521 = v519 + 24;
                    }
                    *(void *)(a1 + 888) = v521;
                    unint64_t v522 = *(void *)(a1 + 912);
                    v523 = (long long *)(v522 - 24);
                    if (v522 >= *(void *)(a1 + 920))
                    {
                      uint64_t v524 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v583, v523);
                    }
                    else
                    {
                      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v583, v523);
                      uint64_t v524 = v522 + 24;
                    }
                    *(void *)(a1 + 912) = v524;
                    if (*(char *)(a1 + 423) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v600, *(const std::string::value_type **)(a1 + 400), *(void *)(a1 + 408));
                    }
                    else
                    {
                      *(_OWORD *)&v600.__r_.__value_.__l.__data_ = *v590;
                      v600.__r_.__value_.__r.__words[2] = *(void *)(a1 + 416);
                    }
                    if ((__p[63] & 0x80000000) != 0) {
                      std::string::__init_copy_ctor_external(&v599, *(const std::string::value_type **)&__p[40], *(std::string::size_type *)&__p[48]);
                    }
                    else {
                      std::string v599 = *(std::string *)&__p[40];
                    }
                    TacotronPhoneFeature::TacotronPhoneFeature((std::string *)v607, (long long *)&v600, (long long *)&v599, *(int *)&__p[8], *(int *)&__p[12], 0, 0, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
                    unint64_t v525 = *(void *)(a1 + 936);
                    unint64_t v526 = *(void *)(a1 + 944);
                    if (v525 >= v526)
                    {
                      uint64_t v531 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v525 - *v580) >> 3);
                      unint64_t v532 = v531 + 1;
                      if ((unint64_t)(v531 + 1) > 0x276276276276276) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v533 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v526 - *v580) >> 3);
                      if (2 * v533 > v532) {
                        unint64_t v532 = 2 * v533;
                      }
                      if (v533 >= 0x13B13B13B13B13BLL) {
                        unint64_t v534 = 0x276276276276276;
                      }
                      else {
                        unint64_t v534 = v532;
                      }
                      uint64_t v615 = a1 + 944;
                      v535 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v534);
                      std::string::size_type v536 = (std::string::size_type)&v535[104 * v531];
                      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v535;
                      buf.__r_.__value_.__l.__size_ = v536;
                      v614 = &v535[104 * v537];
                      long long v538 = *(_OWORD *)v607;
                      *(void *)(v536 + 16) = *(void *)&v607[16];
                      *(_OWORD *)std::string::size_type v536 = v538;
                      memset(v607, 0, 24);
                      long long v539 = *(_OWORD *)&v607[24];
                      *(void *)(v536 + 40) = v608;
                      *(_OWORD *)(v536 + 24) = v539;
                      *(void *)&v607[32] = 0;
                      uint64_t v608 = 0;
                      *(void *)&v607[24] = 0;
                      long long v540 = v610;
                      *(_OWORD *)(v536 + 48) = v609;
                      *(_OWORD *)(v536 + 64) = v540;
                      *(void *)(v536 + 88) = 0;
                      *(void *)(v536 + 96) = 0;
                      *(void *)(v536 + 80) = 0;
                      *(_OWORD *)(v536 + 80) = v611;
                      *(void *)(v536 + 96) = v612;
                      long long v611 = 0uLL;
                      uint64_t v612 = 0;
                      buf.__r_.__value_.__r.__words[2] = v536 + 104;
                      std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v580, &buf);
                      unint64_t v530 = *(void *)(a1 + 936);
                      std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
                    }
                    else
                    {
                      long long v527 = *(_OWORD *)v607;
                      *(void *)(v525 + 16) = *(void *)&v607[16];
                      *(_OWORD *)unint64_t v525 = v527;
                      memset(v607, 0, 24);
                      uint64_t v528 = v608;
                      *(_OWORD *)(v525 + 24) = *(_OWORD *)&v607[24];
                      *(void *)(v525 + 40) = v528;
                      *(void *)&v607[32] = 0;
                      uint64_t v608 = 0;
                      *(void *)&v607[24] = 0;
                      long long v529 = v610;
                      *(_OWORD *)(v525 + 48) = v609;
                      *(_OWORD *)(v525 + 64) = v529;
                      *(void *)(v525 + 80) = 0;
                      *(void *)(v525 + 88) = 0;
                      *(void *)(v525 + 96) = 0;
                      *(_OWORD *)(v525 + 80) = v611;
                      *(void *)(v525 + 96) = v612;
                      long long v611 = 0uLL;
                      uint64_t v612 = 0;
                      unint64_t v530 = v525 + 104;
                    }
                    *(void *)(a1 + 936) = v530;
                    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v611;
                    std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                    if (SHIBYTE(v608) < 0) {
                      operator delete(*(void **)&v607[24]);
                    }
                    if ((v607[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v607);
                    }
                    if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v599.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v600.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v600.__r_.__value_.__l.__data_);
                    }
                    if (*(char *)(a1 + 423) >= 0) {
                      size_t v541 = *(unsigned __int8 *)(a1 + 423);
                    }
                    else {
                      size_t v541 = *(void *)(a1 + 408);
                    }
                    std::string::basic_string[abi:ne180100]((uint64_t)v607, v541 + 1);
                    if (v607[23] >= 0) {
                      v542 = v607;
                    }
                    else {
                      v542 = *(unsigned char **)v607;
                    }
                    if (v541)
                    {
                      if (*(char *)(a1 + 423) >= 0) {
                        v543 = (const void *)(a1 + 400);
                      }
                      else {
                        v543 = *(const void **)(a1 + 400);
                      }
                      memmove(v542, v543, v541);
                    }
                    *(_WORD *)&v542[v541] = 32;
                    if (v607[23] >= 0) {
                      v544 = v607;
                    }
                    else {
                      v544 = *(const std::string::value_type **)v607;
                    }
                    if (v607[23] >= 0) {
                      std::string::size_type v545 = v607[23];
                    }
                    else {
                      std::string::size_type v545 = *(void *)&v607[8];
                    }
                    std::string::append(v591, v544, v545);
                    if ((v607[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v607);
                    }
                  }
                }
                if (v566 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v567, (const void **)&v603.__r_.__value_.__l.__data_))
                {
                  if (v560 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v561, (const void **)&v603.__r_.__value_.__l.__data_))
                  {
                    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                    }
                    unint64_t v547 = Diagnostics_GetLogObject(void)::__profile_log_default;
                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v549 = &v603;
                      if ((v603.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        uint64_t v549 = (std::string *)v603.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)v607 = 136315138;
                      *(void *)&v607[4] = v549;
                    }
                    v550 = &v603;
                    if ((v603.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      v550 = (std::string *)v603.__r_.__value_.__r.__words[0];
                    }
                  }
                  int v546 = 44;
                }
                else
                {
                  int v546 = 46;
                }
                NeuralAdapterModule::save_break((NeuralAdapterModule *)a1, v546, v562, v8);
              }
              if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v603.__r_.__value_.__l.__data_);
              }
            }
            int v579 = ++v562;
          }
          if (SHIBYTE(v606) < 0) {
            operator delete(*((void **)&v605 + 1));
          }
          if (SBYTE7(v605) < 0) {
            operator delete(*(void **)&__p[88]);
          }
          if ((__p[87] & 0x80000000) != 0) {
            operator delete(*(void **)&__p[64]);
          }
          if ((__p[63] & 0x80000000) != 0) {
            operator delete(*(void **)&__p[40]);
          }
          if ((__p[39] & 0x80000000) != 0) {
            operator delete(*(void **)&__p[16]);
          }
          int32_t v10 = *(uint64_t **)(a1 + 840);
          goto LABEL_998;
        }
      }
    }
    uint64_t v13 = v11 + 216 * (int)v9;
    uint64_t v15 = *(int **)(v13 + 72);
    uint64_t v14 = *(int **)(v13 + 80);
    if (v15 == v14) {
      goto LABEL_468;
    }
    int v575 = v8;
    int v16 = v562;
    int v588 = v12;
    v581 = *(int **)(v13 + 80);
    do
    {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 639);
      if (*(char *)(a1 + 639) < 0)
      {
        if (!*(void *)(a1 + 624))
        {
LABEL_53:
          int v21 = *v15;
LABEL_54:
          if (v21 == 10) {
            NeuralAdapterModule::process_bookmark(a1, (uint64_t)v15);
          }
          goto LABEL_56;
        }
      }
      else if (!*(unsigned char *)(a1 + 639))
      {
        goto LABEL_53;
      }
      uint64_t v18 = *(void *)(a1 + 840);
      uint64_t v19 = *(void *)(v18 + 24);
      uint64_t v20 = *(void *)(v18 + 32);
      int v21 = *v15;
      if (v19 == v20 || v21 != 7) {
        goto LABEL_54;
      }
      int v23 = -1 - 252645135 * ((unint64_t)(v20 - v19) >> 3);
      if (v23 >= v16) {
        int v23 = v16;
      }
      int v586 = v23;
      int v24 = v15[1];
      if (v24 >= 2)
      {
        float v25 = (float)v24;
        if (*(_DWORD *)(a1 + 640) == 2)
        {
          uint64_t v26 = *(void *)(a1 + 864);
          uint64_t v27 = *(void *)(a1 + 856);
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v27) >> 3);
          p_std::string buf = (std::string *)(v26 - 48);
          unint64_t v30 = v28 - 1;
          if (v28 <= 1) {
            p_std::string buf = &buf;
          }
          if (v26 == v27) {
            std::string::size_type v31 = &buf;
          }
          else {
            std::string::size_type v31 = p_buf;
          }
          if (v26 == v27) {
            char v32 = &buf;
          }
          else {
            char v32 = (std::string *)(v26 - 24);
          }
          if (*(float *)(a1 + 496) > v25) {
            float v25 = *(float *)(a1 + 496);
          }
          unint64_t v33 = v28 - 2;
          memset(&buf, 0, sizeof(buf));
          uint64_t v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
          if ((v34 & 0x80u) == 0) {
            std::string::size_type v35 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v35 = v32->__r_.__value_.__l.__size_;
          }
          uint64_t v36 = *(unsigned __int8 *)(a1 + 423);
          int v37 = (char)v36;
          if ((v36 & 0x80u) != 0) {
            uint64_t v36 = *(void *)(a1 + 408);
          }
          if (v35 != v36) {
            goto LABEL_105;
          }
          if (v37 >= 0) {
            unint64_t v38 = (unsigned __int8 *)(a1 + 400);
          }
          else {
            unint64_t v38 = *(unsigned __int8 **)v590;
          }
          if ((v34 & 0x80) != 0)
          {
            if (memcmp(v32->__r_.__value_.__l.__data_, v38, v32->__r_.__value_.__l.__size_)) {
              goto LABEL_105;
            }
          }
          else if (*((unsigned char *)&v32->__r_.__value_.__s + 23))
          {
            std::string::size_type v39 = v32;
            while (v39->__r_.__value_.__s.__data_[0] == *v38)
            {
              std::string::size_type v39 = (std::string *)((char *)v39 + 1);
              ++v38;
              if (!--v34) {
                goto LABEL_83;
              }
            }
            goto LABEL_105;
          }
LABEL_83:
          if (v558 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v559, (const void **)&v31->__r_.__value_.__l.__data_))
          {
            std::operator+<char>();
            char v55 = std::string::append(&v602, "->");
            long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
            v603.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v603.__r_.__value_.__l.__data_ = v56;
            v55->__r_.__value_.__l.__size_ = 0;
            v55->__r_.__value_.__r.__words[2] = 0;
            v55->__r_.__value_.__r.__words[0] = 0;
            char v57 = *(unsigned char *)(a1 + 639);
            if (v57 >= 0) {
              unint64_t v58 = (const std::string::value_type *)(a1 + 616);
            }
            else {
              unint64_t v58 = *(const std::string::value_type **)(a1 + 616);
            }
            if (v57 >= 0) {
              std::string::size_type v59 = *(unsigned __int8 *)(a1 + 639);
            }
            else {
              std::string::size_type v59 = *(void *)(a1 + 624);
            }
            uint64_t v60 = std::string::append(&v603, v58, v59);
            long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            *(void *)&v607[16] = *((void *)&v60->__r_.__value_.__l + 2);
            *(_OWORD *)v607 = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            std::string v62 = std::string::append((std::string *)v607, ") ");
            long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v62->__r_.__value_.__l + 2);
            *(_OWORD *)std::basic_string<char16_t> __p = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            if (__p[23] >= 0) {
              uint64_t v64 = __p;
            }
            else {
              uint64_t v64 = *(const std::string::value_type **)__p;
            }
            if (__p[23] >= 0) {
              std::string::size_type v65 = __p[23];
            }
            else {
              std::string::size_type v65 = *(void *)&__p[8];
            }
            std::string::append(v591, v64, v65);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            if ((v607[23] & 0x80000000) != 0) {
              operator delete(*(void **)v607);
            }
            if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v603.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v602.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v602.__r_.__value_.__l.__data_);
            }
            std::string::operator=(v31, __str);
            uint64_t v66 = *v580;
            std::string::operator=((std::string *)(*v580 + 104 * v33), __str);
            int v67 = *(_DWORD *)(a1 + 500);
            uint64_t v68 = v66 + 104 * v33;
LABEL_127:
            *(float *)(v68 + 72) = v25;
            *(_DWORD *)(v68 + 76) = v67;
LABEL_177:
            LODWORD(v12) = v588;
            uint64_t v14 = v581;
LABEL_178:
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_56;
            }
            uint64_t v99 = (void *)buf.__r_.__value_.__r.__words[0];
            goto LABEL_333;
          }
LABEL_105:
          if (v558 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v559, (const void **)&v32->__r_.__value_.__l.__data_))
          {
            std::operator+<char>();
            long long v69 = std::string::append(&v602, "->");
            long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
            v603.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v603.__r_.__value_.__l.__data_ = v70;
            v69->__r_.__value_.__l.__size_ = 0;
            v69->__r_.__value_.__r.__words[2] = 0;
            v69->__r_.__value_.__r.__words[0] = 0;
            int v71 = *(char *)(a1 + 639);
            if (v71 >= 0) {
              std::string::size_type v72 = (const std::string::value_type *)(a1 + 616);
            }
            else {
              std::string::size_type v72 = *(const std::string::value_type **)(a1 + 616);
            }
            if (v71 >= 0) {
              std::string::size_type v73 = *(unsigned __int8 *)(a1 + 639);
            }
            else {
              std::string::size_type v73 = *(void *)(a1 + 624);
            }
            uint64_t v74 = std::string::append(&v603, v72, v73);
            long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            *(void *)&v607[16] = *((void *)&v74->__r_.__value_.__l + 2);
            *(_OWORD *)v607 = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            int64_t v76 = std::string::append((std::string *)v607, ") ");
            long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v76->__r_.__value_.__l + 2);
            *(_OWORD *)std::basic_string<char16_t> __p = v77;
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            if (__p[23] >= 0) {
              long long v78 = __p;
            }
            else {
              long long v78 = *(const std::string::value_type **)__p;
            }
            if (__p[23] >= 0) {
              std::string::size_type v79 = __p[23];
            }
            else {
              std::string::size_type v79 = *(void *)&__p[8];
            }
            std::string::append(v591, v78, v79);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            if ((v607[23] & 0x80000000) != 0) {
              operator delete(*(void **)v607);
            }
            if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v603.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v602.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v602.__r_.__value_.__l.__data_);
            }
            std::string::operator=(v32, __str);
            uint64_t v80 = *v580;
            std::string::operator=((std::string *)(*v580 + 104 * v30), __str);
            int v67 = *(_DWORD *)(a1 + 500);
            uint64_t v68 = v80 + 104 * v30;
            goto LABEL_127;
          }
          uint64_t v81 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
          if ((v81 & 0x80u) == 0) {
            std::string::size_type v82 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v82 = v32->__r_.__value_.__l.__size_;
          }
          uint64_t v83 = *(unsigned __int8 *)(a1 + 423);
          int v84 = (char)v83;
          if ((v83 & 0x80u) != 0) {
            uint64_t v83 = *(void *)(a1 + 408);
          }
          if (v82 != v83) {
            goto LABEL_174;
          }
          if (v84 >= 0) {
            std::string v85 = (unsigned __int8 *)(a1 + 400);
          }
          else {
            std::string v85 = *(unsigned __int8 **)v590;
          }
          if ((v81 & 0x80) != 0)
          {
            if (memcmp(v32->__r_.__value_.__l.__data_, v85, v32->__r_.__value_.__l.__size_)) {
              goto LABEL_174;
            }
          }
          else if (*((unsigned char *)&v32->__r_.__value_.__s + 23))
          {
            uint64_t v86 = v32;
            while (v86->__r_.__value_.__s.__data_[0] == *v85)
            {
              uint64_t v86 = (std::string *)((char *)v86 + 1);
              ++v85;
              if (!--v81) {
                goto LABEL_172;
              }
            }
            goto LABEL_174;
          }
LABEL_172:
          if (v554 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v555, (const void **)&v31->__r_.__value_.__l.__data_))
          {
            int v97 = *(_DWORD *)(a1 + 528);
            uint64_t v98 = *(void *)(a1 + 928) + 104 * v33;
LABEL_176:
            *(_DWORD *)(v98 + 72) = v97;
            goto LABEL_177;
          }
LABEL_174:
          if (v554 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v555, (const void **)&v32->__r_.__value_.__l.__data_))
          {
            unint64_t v100 = *(void *)(a1 + 864);
            if (v100 >= *(void *)(a1 + 872))
            {
              uint64_t v101 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v585, (long long *)__str);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v585, (long long *)__str);
              uint64_t v101 = v100 + 24;
            }
            *(void *)(a1 + 864) = v101;
            std::string::basic_string[abi:ne180100]<0>(v607, "-");
            unint64_t v194 = *(void *)(a1 + 888);
            unint64_t v195 = *(void *)(a1 + 896);
            if (v194 >= v195)
            {
              unint64_t v197 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v194 - *v584) >> 3);
              unint64_t v198 = v197 + 1;
              if (v197 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v199 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v195 - *v584) >> 3);
              if (2 * v199 > v198) {
                unint64_t v198 = 2 * v199;
              }
              if (v199 >= 0x555555555555555) {
                unint64_t v200 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v200 = v198;
              }
              *(void *)&__p[32] = a1 + 896;
              if (v200) {
                std::string::size_type v201 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v557, v200);
              }
              else {
                std::string::size_type v201 = 0;
              }
              unint64_t v202 = &v201[24 * v197];
              *(void *)std::basic_string<char16_t> __p = v201;
              *(void *)&__p[8] = v202;
              *(void *)&__p[24] = &v201[24 * v200];
              long long v203 = *(_OWORD *)v607;
              *((void *)v202 + 2) = *(void *)&v607[16];
              *(_OWORD *)unint64_t v202 = v203;
              memset(v607, 0, 24);
              *(void *)&__p[16] = v202 + 24;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v584, (std::__split_buffer<std::string> *)__p);
              uint64_t v204 = *(void *)(a1 + 888);
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__p);
              int v205 = v607[23];
              *(void *)(a1 + 888) = v204;
              if (v205 < 0) {
                operator delete(*(void **)v607);
              }
            }
            else
            {
              long long v196 = *(_OWORD *)v607;
              *(void *)(v194 + 16) = *(void *)&v607[16];
              *(_OWORD *)unint64_t v194 = v196;
              *(void *)(a1 + 888) = v194 + 24;
            }
            uint64_t v206 = *(void *)(a1 + 912);
            if (v206 == *(void *)(a1 + 904))
            {
              std::string::basic_string[abi:ne180100]<0>(&v603, "narrator");
            }
            else if (*(char *)(v206 - 1) < 0)
            {
              std::string::__init_copy_ctor_external(&v603, *(const std::string::value_type **)(v206 - 24), *(void *)(v206 - 16));
            }
            else
            {
              long long v207 = *(_OWORD *)(v206 - 24);
              v603.__r_.__value_.__r.__words[2] = *(void *)(v206 - 8);
              *(_OWORD *)&v603.__r_.__value_.__l.__data_ = v207;
            }
            unint64_t v208 = *(void *)(a1 + 912);
            if (v208 >= *(void *)(a1 + 920))
            {
              uint64_t v210 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v583, (long long *)&v603);
            }
            else
            {
              if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a1 + 912), v603.__r_.__value_.__l.__data_, v603.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v209 = *(_OWORD *)&v603.__r_.__value_.__l.__data_;
                *(void *)(v208 + 16) = *((void *)&v603.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v208 = v209;
              }
              uint64_t v210 = v208 + 24;
              *(void *)(a1 + 912) = v208 + 24;
            }
            *(void *)(a1 + 912) = v210;
            uint64_t v211 = *(void *)(*(void *)(a1 + 840) + 24);
            if (*(char *)(a1 + 639) < 0)
            {
              std::string::__init_copy_ctor_external(&v602, *(const std::string::value_type **)(a1 + 616), *(void *)(a1 + 624));
            }
            else
            {
              *(_OWORD *)&v602.__r_.__value_.__l.__data_ = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
              v602.__r_.__value_.__r.__words[2] = *(void *)(a1 + 632);
            }
            uint64_t v212 = v211 + 136 * v586;
            char v213 = (long long *)(v212 + 40);
            if (*(char *)(v212 + 63) < 0)
            {
              std::string::__init_copy_ctor_external(&v601, *(const std::string::value_type **)(v212 + 40), *(void *)(v212 + 48));
            }
            else
            {
              long long v214 = *v213;
              v601.__r_.__value_.__r.__words[2] = *(void *)(v212 + 56);
              *(_OWORD *)&v601.__r_.__value_.__l.__data_ = v214;
            }
            uint64_t v215 = v211 + 136 * v586;
            int v217 = *(_DWORD *)(v215 + 8);
            char v216 = (int *)(v215 + 8);
            TacotronPhoneFeature::TacotronPhoneFeature((std::string *)__p, (long long *)&v602, (long long *)&v601, v217, v216[1], (int)v25, *(float *)(a1 + 296), *(float *)(a1 + 300));
            unint64_t v218 = *(void *)(a1 + 936);
            unint64_t v219 = *(void *)(a1 + 944);
            if (v218 >= v219)
            {
              uint64_t v224 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v218 - *v580) >> 3);
              unint64_t v225 = v224 + 1;
              if ((unint64_t)(v224 + 1) > 0x276276276276276) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v226 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v219 - *v580) >> 3);
              if (2 * v226 > v225) {
                unint64_t v225 = 2 * v226;
              }
              if (v226 >= 0x13B13B13B13B13BLL) {
                unint64_t v227 = 0x276276276276276;
              }
              else {
                unint64_t v227 = v225;
              }
              *(void *)&v607[32] = a1 + 944;
              unint64_t v228 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v227);
              unint64_t v229 = &v228[104 * v224];
              *(void *)v607 = v228;
              *(void *)&v607[8] = v229;
              *(void *)&v607[24] = &v228[104 * v230];
              long long v231 = *(_OWORD *)__p;
              *((void *)v229 + 2) = *(void *)&__p[16];
              *(_OWORD *)unint64_t v229 = v231;
              memset(__p, 0, 24);
              long long v232 = *(_OWORD *)&__p[24];
              *((void *)v229 + 5) = *(void *)&__p[40];
              *(_OWORD *)(v229 + 24) = v232;
              memset(&__p[24], 0, 24);
              long long v233 = *(_OWORD *)&__p[64];
              *((_OWORD *)v229 + 3) = *(_OWORD *)&__p[48];
              *((_OWORD *)v229 + 4) = v233;
              *((void *)v229 + 11) = 0;
              *((void *)v229 + 12) = 0;
              *((void *)v229 + 10) = 0;
              *((_OWORD *)v229 + 5) = *(_OWORD *)&__p[80];
              *((void *)v229 + 12) = *(void *)&__p[96];
              memset(&__p[80], 0, 24);
              *(void *)&v607[16] = v229 + 104;
              std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v580, v607);
              unint64_t v223 = *(void *)(a1 + 936);
              std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)v607);
            }
            else
            {
              long long v220 = *(_OWORD *)__p;
              *(void *)(v218 + 16) = *(void *)&__p[16];
              *(_OWORD *)unint64_t v218 = v220;
              memset(__p, 0, 24);
              uint64_t v221 = *(void *)&__p[40];
              *(_OWORD *)(v218 + 24) = *(_OWORD *)&__p[24];
              *(void *)(v218 + 40) = v221;
              memset(&__p[24], 0, 24);
              long long v222 = *(_OWORD *)&__p[64];
              *(_OWORD *)(v218 + 48) = *(_OWORD *)&__p[48];
              *(_OWORD *)(v218 + 64) = v222;
              *(void *)(v218 + 80) = 0;
              *(void *)(v218 + 88) = 0;
              *(void *)(v218 + 96) = 0;
              *(_OWORD *)(v218 + 80) = *(_OWORD *)&__p[80];
              *(void *)(v218 + 96) = *(void *)&__p[96];
              memset(&__p[80], 0, 24);
              unint64_t v223 = v218 + 104;
            }
            *(void *)(a1 + 936) = v223;
            *(void *)v607 = &__p[80];
            std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)v607);
            if ((__p[47] & 0x80000000) != 0) {
              operator delete(*(void **)&__p[24]);
            }
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            if (SHIBYTE(v601.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v601.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v602.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v602.__r_.__value_.__l.__data_);
            }
            *(_DWORD *)(*(void *)(a1 + 936) - 28) = *(_DWORD *)(a1 + 500);
            if (*(char *)(a1 + 639) >= 0) {
              size_t v234 = *(unsigned __int8 *)(a1 + 639);
            }
            else {
              size_t v234 = *(void *)(a1 + 624);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)__p, v234 + 1);
            if (__p[23] >= 0) {
              std::string::size_type v235 = __p;
            }
            else {
              std::string::size_type v235 = *(unsigned char **)__p;
            }
            if (v234)
            {
              if (*(char *)(a1 + 639) >= 0) {
                char v236 = (const void *)(a1 + 616);
              }
              else {
                char v236 = *(const void **)(a1 + 616);
              }
              memmove(v235, v236, v234);
            }
            *(_WORD *)&v235[v234] = 32;
            if (__p[23] >= 0) {
              int v237 = __p;
            }
            else {
              int v237 = *(const std::string::value_type **)__p;
            }
            if (__p[23] >= 0) {
              std::string::size_type v238 = __p[23];
            }
            else {
              std::string::size_type v238 = *(void *)&__p[8];
            }
            std::string::append(v591, v237, v238);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            unint64_t v239 = *(void *)(a1 + 864);
            if (v239 >= *(void *)(a1 + 872))
            {
              uint64_t v240 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v585, v590);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v585, v590);
              uint64_t v240 = v239 + 24;
            }
            *(void *)(a1 + 864) = v240;
            std::string::basic_string[abi:ne180100]<0>(v607, "-");
            unint64_t v241 = *(void *)(a1 + 888);
            unint64_t v242 = *(void *)(a1 + 896);
            if (v241 >= v242)
            {
              unint64_t v244 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v241 - *v584) >> 3);
              unint64_t v245 = v244 + 1;
              if (v244 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v246 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v242 - *v584) >> 3);
              if (2 * v246 > v245) {
                unint64_t v245 = 2 * v246;
              }
              if (v246 >= 0x555555555555555) {
                unint64_t v247 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v247 = v245;
              }
              *(void *)&__p[32] = a1 + 896;
              if (v247) {
                std::string::pointer v248 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v557, v247);
              }
              else {
                std::string::pointer v248 = 0;
              }
              char v249 = &v248[24 * v244];
              *(void *)std::basic_string<char16_t> __p = v248;
              *(void *)&__p[8] = v249;
              *(void *)&__p[24] = &v248[24 * v247];
              long long v250 = *(_OWORD *)v607;
              *((void *)v249 + 2) = *(void *)&v607[16];
              *(_OWORD *)char v249 = v250;
              memset(v607, 0, 24);
              *(void *)&__p[16] = v249 + 24;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v584, (std::__split_buffer<std::string> *)__p);
              uint64_t v251 = *(void *)(a1 + 888);
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__p);
              int v252 = v607[23];
              *(void *)(a1 + 888) = v251;
              if (v252 < 0) {
                operator delete(*(void **)v607);
              }
            }
            else
            {
              long long v243 = *(_OWORD *)v607;
              *(void *)(v241 + 16) = *(void *)&v607[16];
              *(_OWORD *)unint64_t v241 = v243;
              *(void *)(a1 + 888) = v241 + 24;
            }
            unint64_t v253 = *(void *)(a1 + 912);
            if (v253 >= *(void *)(a1 + 920))
            {
              uint64_t v255 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v583, (long long *)&v603);
            }
            else
            {
              if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a1 + 912), v603.__r_.__value_.__l.__data_, v603.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v254 = *(_OWORD *)&v603.__r_.__value_.__l.__data_;
                *(void *)(v253 + 16) = *((void *)&v603.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v253 = v254;
              }
              uint64_t v255 = v253 + 24;
              *(void *)(a1 + 912) = v253 + 24;
            }
            *(void *)(a1 + 912) = v255;
            if (*(char *)(a1 + 423) < 0)
            {
              std::string::__init_copy_ctor_external(&v600, *(const std::string::value_type **)(a1 + 400), *(void *)(a1 + 408));
            }
            else
            {
              *(_OWORD *)&v600.__r_.__value_.__l.__data_ = *v590;
              v600.__r_.__value_.__r.__words[2] = *(void *)(a1 + 416);
            }
            if (*((char *)v213 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v599, *(const std::string::value_type **)v213, *((void *)v213 + 1));
            }
            else
            {
              long long v256 = *v213;
              v599.__r_.__value_.__r.__words[2] = *((void *)v213 + 2);
              *(_OWORD *)&v599.__r_.__value_.__l.__data_ = v256;
            }
            TacotronPhoneFeature::TacotronPhoneFeature((std::string *)__p, (long long *)&v600, (long long *)&v599, *v216, v216[1], 1, 0, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
            LODWORD(v12) = v588;
            unint64_t v257 = *(void *)(a1 + 936);
            unint64_t v258 = *(void *)(a1 + 944);
            if (v257 >= v258)
            {
              uint64_t v263 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v257 - *v580) >> 3);
              unint64_t v264 = v263 + 1;
              if ((unint64_t)(v263 + 1) > 0x276276276276276) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v265 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v258 - *v580) >> 3);
              if (2 * v265 > v264) {
                unint64_t v264 = 2 * v265;
              }
              if (v265 >= 0x13B13B13B13B13BLL) {
                unint64_t v266 = 0x276276276276276;
              }
              else {
                unint64_t v266 = v264;
              }
              *(void *)&v607[32] = a1 + 944;
              std::string::size_type v267 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v266);
              long long v268 = &v267[104 * v263];
              *(void *)v607 = v267;
              *(void *)&v607[8] = v268;
              *(void *)&v607[24] = &v267[104 * v269];
              long long v270 = *(_OWORD *)__p;
              *((void *)v268 + 2) = *(void *)&__p[16];
              *(_OWORD *)long long v268 = v270;
              memset(__p, 0, 24);
              long long v271 = *(_OWORD *)&__p[24];
              *((void *)v268 + 5) = *(void *)&__p[40];
              *(_OWORD *)(v268 + 24) = v271;
              memset(&__p[24], 0, 24);
              long long v272 = *(_OWORD *)&__p[64];
              *((_OWORD *)v268 + 3) = *(_OWORD *)&__p[48];
              *((_OWORD *)v268 + 4) = v272;
              *((void *)v268 + 11) = 0;
              *((void *)v268 + 12) = 0;
              *((void *)v268 + 10) = 0;
              *((_OWORD *)v268 + 5) = *(_OWORD *)&__p[80];
              *((void *)v268 + 12) = *(void *)&__p[96];
              memset(&__p[80], 0, 24);
              *(void *)&v607[16] = v268 + 104;
              std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v580, v607);
              unint64_t v262 = *(void *)(a1 + 936);
              std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)v607);
            }
            else
            {
              long long v259 = *(_OWORD *)__p;
              *(void *)(v257 + 16) = *(void *)&__p[16];
              *(_OWORD *)unint64_t v257 = v259;
              memset(__p, 0, 24);
              uint64_t v260 = *(void *)&__p[40];
              *(_OWORD *)(v257 + 24) = *(_OWORD *)&__p[24];
              *(void *)(v257 + 40) = v260;
              memset(&__p[24], 0, 24);
              long long v261 = *(_OWORD *)&__p[64];
              *(_OWORD *)(v257 + 48) = *(_OWORD *)&__p[48];
              *(_OWORD *)(v257 + 64) = v261;
              *(void *)(v257 + 80) = 0;
              *(void *)(v257 + 88) = 0;
              *(void *)(v257 + 96) = 0;
              *(_OWORD *)(v257 + 80) = *(_OWORD *)&__p[80];
              *(void *)(v257 + 96) = *(void *)&__p[96];
              memset(&__p[80], 0, 24);
              unint64_t v262 = v257 + 104;
            }
            *(void *)(a1 + 936) = v262;
            *(void *)v607 = &__p[80];
            std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)v607);
            if ((__p[47] & 0x80000000) != 0) {
              operator delete(*(void **)&__p[24]);
            }
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v599.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v600.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v600.__r_.__value_.__l.__data_);
            }
            if (*(char *)(a1 + 423) >= 0) {
              size_t v273 = *(unsigned __int8 *)(a1 + 423);
            }
            else {
              size_t v273 = *(void *)(a1 + 408);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)__p, v273 + 1);
            if (__p[23] >= 0) {
              __int16 v274 = __p;
            }
            else {
              __int16 v274 = *(unsigned char **)__p;
            }
            if (v273)
            {
              if (*(char *)(a1 + 423) >= 0) {
                int v275 = (const void *)(a1 + 400);
              }
              else {
                int v275 = *(const void **)(a1 + 400);
              }
              memmove(v274, v275, v273);
            }
            *(_WORD *)&v274[v273] = 32;
            if (__p[23] >= 0) {
              int v276 = __p;
            }
            else {
              int v276 = *(const std::string::value_type **)__p;
            }
            if (__p[23] >= 0) {
              std::string::size_type v277 = __p[23];
            }
            else {
              std::string::size_type v277 = *(void *)&__p[8];
            }
            std::string::append(v591, v276, v277);
            uint64_t v14 = v581;
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v603.__r_.__value_.__l.__data_);
            }
            goto LABEL_178;
          }
          int v97 = *(_DWORD *)(a1 + 528);
          uint64_t v98 = *(void *)(a1 + 928) + 104 * v30;
          goto LABEL_176;
        }
        unint64_t v40 = *(void *)(a1 + 864);
        uint64_t v41 = *(void *)(a1 + 856);
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v41) >> 3);
        unint64_t v43 = v42 - 1;
        if (v42 <= 1) {
          char v44 = &buf;
        }
        else {
          char v44 = (std::string *)(v40 - 48);
        }
        if (v40 == v41) {
          std::string::size_type v45 = &buf;
        }
        else {
          std::string::size_type v45 = v44;
        }
        if (v40 == v41) {
          std::string::size_type v46 = &buf;
        }
        else {
          std::string::size_type v46 = (std::string *)(v40 - 24);
        }
        memset(&buf, 0, sizeof(buf));
        uint64_t v47 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
        size_t v48 = v46->__r_.__value_.__l.__size_;
        if ((v47 & 0x80u) == 0) {
          std::string::size_type v49 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v49 = v46->__r_.__value_.__l.__size_;
        }
        uint64_t v50 = *(unsigned __int8 *)(a1 + 423);
        int v51 = (char)v50;
        if ((v50 & 0x80u) != 0) {
          uint64_t v50 = *(void *)(a1 + 408);
        }
        if (v49 != v50) {
          goto LABEL_183;
        }
        if (v51 >= 0) {
          std::string::size_type v52 = (unsigned __int8 *)(a1 + 400);
        }
        else {
          std::string::size_type v52 = *(unsigned __int8 **)v590;
        }
        if ((v47 & 0x80) != 0)
        {
          unint64_t v571 = v42 - 1;
          size_t v556 = v46->__r_.__value_.__l.__size_;
          int v87 = memcmp(v46->__r_.__value_.__l.__data_, v52, v556);
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v41) >> 3);
          size_t v48 = v556;
          unint64_t v43 = v571;
          if (!v87) {
            goto LABEL_151;
          }
          if ((v17 & 0x80u) == 0) {
            uint64_t v88 = v17;
          }
          else {
            uint64_t v88 = *(void *)(a1 + 624);
          }
          int v16 = v562;
          LODWORD(v12) = v588;
          uint64_t v14 = v581;
          if (v49 == v88)
          {
            if ((v17 & 0x80u) == 0) {
              std::string::size_type v89 = (unsigned __int8 *)(a1 + 616);
            }
            else {
              std::string::size_type v89 = (unsigned __int8 *)__str->__r_.__value_.__r.__words[0];
            }
            goto LABEL_196;
          }
        }
        else
        {
          if (*((unsigned char *)&v46->__r_.__value_.__s + 23))
          {
            long long v53 = v46;
            uint64_t v54 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
            while (v53->__r_.__value_.__s.__data_[0] == *v52)
            {
              long long v53 = (std::string *)((char *)v53 + 1);
              ++v52;
              if (!--v54) {
                goto LABEL_151;
              }
            }
            goto LABEL_183;
          }
LABEL_151:
          char v90 = &buf;
          if (v42 <= 1) {
            long long v91 = &buf;
          }
          else {
            long long v91 = (std::string *)(v40 - 48);
          }
          if (v40 != v41) {
            char v90 = v91;
          }
          uint64_t v92 = HIBYTE(v90->__r_.__value_.__r.__words[2]);
          size_t v93 = v90->__r_.__value_.__l.__size_;
          if ((v92 & 0x80u) == 0) {
            std::string::size_type v94 = HIBYTE(v90->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v94 = v90->__r_.__value_.__l.__size_;
          }
          if ((v17 & 0x80u) == 0) {
            uint64_t v95 = v17;
          }
          else {
            uint64_t v95 = *(void *)(a1 + 624);
          }
          if (v94 == v95)
          {
            if ((v17 & 0x80u) == 0) {
              char v96 = (unsigned __int8 *)(a1 + 616);
            }
            else {
              char v96 = (unsigned __int8 *)__str->__r_.__value_.__r.__words[0];
            }
            if ((v92 & 0x80) != 0)
            {
              uint64_t v102 = (const void *)v45->__r_.__value_.__r.__words[0];
              unint64_t v103 = v43;
              size_t v104 = v48;
              unint64_t v105 = v42;
              int v106 = memcmp(v102, v96, v93);
              unint64_t v42 = v105;
              size_t v48 = v104;
              unint64_t v43 = v103;
              if (!v106)
              {
LABEL_334:
                uint64_t v14 = v581;
                *(float *)(*v580 + 104 * (v42 - 2) + 72) = v25;
                int v16 = v562;
                LODWORD(v12) = v588;
                goto LABEL_56;
              }
            }
            else
            {
              if (!v92) {
                goto LABEL_334;
              }
              while (v45->__r_.__value_.__s.__data_[0] == *v96)
              {
                std::string::size_type v45 = (std::string *)((char *)v45 + 1);
                ++v96;
                if (!--v92) {
                  goto LABEL_334;
                }
              }
            }
          }
LABEL_183:
          if ((v17 & 0x80u) == 0) {
            uint64_t v107 = v17;
          }
          else {
            uint64_t v107 = *(void *)(a1 + 624);
          }
          int v16 = v562;
          LODWORD(v12) = v588;
          uint64_t v14 = v581;
          if (v49 == v107)
          {
            if ((v17 & 0x80u) == 0) {
              std::string::size_type v89 = (unsigned __int8 *)(a1 + 616);
            }
            else {
              std::string::size_type v89 = (unsigned __int8 *)__str->__r_.__value_.__r.__words[0];
            }
            if ((v47 & 0x80) == 0)
            {
              if (!v47) {
                goto LABEL_210;
              }
              while (v46->__r_.__value_.__s.__data_[0] == *v89)
              {
                std::string::size_type v46 = (std::string *)((char *)v46 + 1);
                ++v89;
                if (!--v47) {
                  goto LABEL_210;
                }
              }
              goto LABEL_197;
            }
            unint64_t v571 = v43;
LABEL_196:
            int v108 = memcmp(v46->__r_.__value_.__l.__data_, v89, v48);
            unint64_t v43 = v571;
            if (!v108)
            {
LABEL_210:
              *(float *)(*v580 + 104 * v43 + 72) = v25;
              goto LABEL_56;
            }
          }
        }
LABEL_197:
        if (v40 >= *(void *)(a1 + 872))
        {
          uint64_t v109 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v585, (long long *)__str);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v585, (long long *)__str);
          uint64_t v109 = v40 + 24;
        }
        *(void *)(a1 + 864) = v109;
        std::string::basic_string[abi:ne180100]<0>(v607, "-");
        unint64_t v110 = *(void *)(a1 + 888);
        unint64_t v111 = *(void *)(a1 + 896);
        if (v110 >= v111)
        {
          unint64_t v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - *v584) >> 3);
          unint64_t v114 = v113 + 1;
          if (v113 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - *v584) >> 3);
          if (2 * v115 > v114) {
            unint64_t v114 = 2 * v115;
          }
          if (v115 >= 0x555555555555555) {
            unint64_t v116 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v116 = v114;
          }
          *(void *)&__p[32] = a1 + 896;
          if (v116) {
            uint64_t v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v557, v116);
          }
          else {
            uint64_t v117 = 0;
          }
          uint64_t v118 = &v117[24 * v113];
          *(void *)std::basic_string<char16_t> __p = v117;
          *(void *)&__p[8] = v118;
          *(void *)&__p[24] = &v117[24 * v116];
          long long v119 = *(_OWORD *)v607;
          *((void *)v118 + 2) = *(void *)&v607[16];
          *(_OWORD *)uint64_t v118 = v119;
          memset(v607, 0, 24);
          *(void *)&__p[16] = v118 + 24;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v584, (std::__split_buffer<std::string> *)__p);
          uint64_t v120 = *(void *)(a1 + 888);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__p);
          int v121 = v607[23];
          *(void *)(a1 + 888) = v120;
          if (v121 < 0) {
            operator delete(*(void **)v607);
          }
        }
        else
        {
          long long v112 = *(_OWORD *)v607;
          *(void *)(v110 + 16) = *(void *)&v607[16];
          *(_OWORD *)unint64_t v110 = v112;
          *(void *)(a1 + 888) = v110 + 24;
        }
        uint64_t v122 = *(void *)(a1 + 912);
        if (v122 == *(void *)(a1 + 904))
        {
          std::string::basic_string[abi:ne180100]<0>(&v603, "narrator");
        }
        else if (*(char *)(v122 - 1) < 0)
        {
          std::string::__init_copy_ctor_external(&v603, *(const std::string::value_type **)(v122 - 24), *(void *)(v122 - 16));
        }
        else
        {
          long long v123 = *(_OWORD *)(v122 - 24);
          v603.__r_.__value_.__r.__words[2] = *(void *)(v122 - 8);
          *(_OWORD *)&v603.__r_.__value_.__l.__data_ = v123;
        }
        unint64_t v124 = *(void *)(a1 + 912);
        if (v124 >= *(void *)(a1 + 920))
        {
          uint64_t v126 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v583, (long long *)&v603);
        }
        else
        {
          if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a1 + 912), v603.__r_.__value_.__l.__data_, v603.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v125 = *(_OWORD *)&v603.__r_.__value_.__l.__data_;
            *(void *)(v124 + 16) = *((void *)&v603.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v124 = v125;
          }
          uint64_t v126 = v124 + 24;
          *(void *)(a1 + 912) = v124 + 24;
        }
        *(void *)(a1 + 912) = v126;
        uint64_t v127 = *(void *)(*(void *)(a1 + 840) + 24);
        if (*(char *)(a1 + 639) < 0)
        {
          std::string::__init_copy_ctor_external(&v602, *(const std::string::value_type **)(a1 + 616), *(void *)(a1 + 624));
        }
        else
        {
          *(_OWORD *)&v602.__r_.__value_.__l.__data_ = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
          v602.__r_.__value_.__r.__words[2] = *(void *)(a1 + 632);
        }
        uint64_t v128 = v127 + 136 * v586;
        long long v129 = (long long *)(v128 + 40);
        if (*(char *)(v128 + 63) < 0)
        {
          std::string::__init_copy_ctor_external(&v601, *(const std::string::value_type **)(v128 + 40), *(void *)(v128 + 48));
        }
        else
        {
          long long v130 = *v129;
          v601.__r_.__value_.__r.__words[2] = *(void *)(v128 + 56);
          *(_OWORD *)&v601.__r_.__value_.__l.__data_ = v130;
        }
        uint64_t v131 = v127 + 136 * v586;
        int v133 = *(_DWORD *)(v131 + 8);
        long long v132 = (int *)(v131 + 8);
        TacotronPhoneFeature::TacotronPhoneFeature((std::string *)__p, (long long *)&v602, (long long *)&v601, v133, v132[1], (int)v25, *(float *)(a1 + 296), *(float *)(a1 + 300));
        unint64_t v134 = *(void *)(a1 + 936);
        unint64_t v135 = *(void *)(a1 + 944);
        if (v134 >= v135)
        {
          uint64_t v140 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v134 - *v580) >> 3);
          unint64_t v141 = v140 + 1;
          if ((unint64_t)(v140 + 1) > 0x276276276276276) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v142 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v135 - *v580) >> 3);
          if (2 * v142 > v141) {
            unint64_t v141 = 2 * v142;
          }
          if (v142 >= 0x13B13B13B13B13BLL) {
            unint64_t v143 = 0x276276276276276;
          }
          else {
            unint64_t v143 = v141;
          }
          *(void *)&v607[32] = a1 + 944;
          int v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v143);
          uint64_t v145 = &v144[104 * v140];
          *(void *)v607 = v144;
          *(void *)&v607[8] = v145;
          *(void *)&v607[24] = &v144[104 * v146];
          long long v147 = *(_OWORD *)__p;
          *((void *)v145 + 2) = *(void *)&__p[16];
          *(_OWORD *)uint64_t v145 = v147;
          memset(__p, 0, 24);
          long long v148 = *(_OWORD *)&__p[24];
          *((void *)v145 + 5) = *(void *)&__p[40];
          *(_OWORD *)(v145 + 24) = v148;
          memset(&__p[24], 0, 24);
          long long v149 = *(_OWORD *)&__p[64];
          *((_OWORD *)v145 + 3) = *(_OWORD *)&__p[48];
          *((_OWORD *)v145 + 4) = v149;
          *((void *)v145 + 11) = 0;
          *((void *)v145 + 12) = 0;
          *((void *)v145 + 10) = 0;
          *((_OWORD *)v145 + 5) = *(_OWORD *)&__p[80];
          *((void *)v145 + 12) = *(void *)&__p[96];
          memset(&__p[80], 0, 24);
          *(void *)&v607[16] = v145 + 104;
          std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v580, v607);
          unint64_t v139 = *(void *)(a1 + 936);
          std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)v607);
        }
        else
        {
          long long v136 = *(_OWORD *)__p;
          *(void *)(v134 + 16) = *(void *)&__p[16];
          *(_OWORD *)unint64_t v134 = v136;
          memset(__p, 0, 24);
          uint64_t v137 = *(void *)&__p[40];
          *(_OWORD *)(v134 + 24) = *(_OWORD *)&__p[24];
          *(void *)(v134 + 40) = v137;
          memset(&__p[24], 0, 24);
          long long v138 = *(_OWORD *)&__p[64];
          *(_OWORD *)(v134 + 48) = *(_OWORD *)&__p[48];
          *(_OWORD *)(v134 + 64) = v138;
          *(void *)(v134 + 80) = 0;
          *(void *)(v134 + 88) = 0;
          *(void *)(v134 + 96) = 0;
          *(_OWORD *)(v134 + 80) = *(_OWORD *)&__p[80];
          *(void *)(v134 + 96) = *(void *)&__p[96];
          memset(&__p[80], 0, 24);
          unint64_t v139 = v134 + 104;
        }
        *(void *)(a1 + 936) = v139;
        *(void *)v607 = &__p[80];
        std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)v607);
        if ((__p[47] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[24]);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (SHIBYTE(v601.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v601.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v602.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v602.__r_.__value_.__l.__data_);
        }
        if (*(char *)(a1 + 639) >= 0) {
          size_t v150 = *(unsigned __int8 *)(a1 + 639);
        }
        else {
          size_t v150 = *(void *)(a1 + 624);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v150 + 1);
        if (__p[23] >= 0) {
          int v151 = __p;
        }
        else {
          int v151 = *(unsigned char **)__p;
        }
        if (v150)
        {
          if (*(char *)(a1 + 639) >= 0) {
            int64_t v152 = (const void *)(a1 + 616);
          }
          else {
            int64_t v152 = *(const void **)(a1 + 616);
          }
          memmove(v151, v152, v150);
        }
        *(_WORD *)&v151[v150] = 32;
        if (__p[23] >= 0) {
          char v153 = __p;
        }
        else {
          char v153 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v154 = __p[23];
        }
        else {
          std::string::size_type v154 = *(void *)&__p[8];
        }
        std::string::append(v591, v153, v154);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        unint64_t v155 = *(void *)(a1 + 864);
        if (v155 >= *(void *)(a1 + 872))
        {
          uint64_t v156 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v585, v590);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v585, v590);
          uint64_t v156 = v155 + 24;
        }
        *(void *)(a1 + 864) = v156;
        std::string::basic_string[abi:ne180100]<0>(v607, "-");
        unint64_t v157 = *(void *)(a1 + 888);
        unint64_t v158 = *(void *)(a1 + 896);
        if (v157 >= v158)
        {
          unint64_t v160 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v157 - *v584) >> 3);
          unint64_t v161 = v160 + 1;
          if (v160 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v162 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v158 - *v584) >> 3);
          if (2 * v162 > v161) {
            unint64_t v161 = 2 * v162;
          }
          if (v162 >= 0x555555555555555) {
            unint64_t v163 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v163 = v161;
          }
          *(void *)&__p[32] = a1 + 896;
          if (v163) {
            uint64_t v164 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v557, v163);
          }
          else {
            uint64_t v164 = 0;
          }
          uint64_t v165 = &v164[24 * v160];
          *(void *)std::basic_string<char16_t> __p = v164;
          *(void *)&__p[8] = v165;
          *(void *)&__p[24] = &v164[24 * v163];
          long long v166 = *(_OWORD *)v607;
          *((void *)v165 + 2) = *(void *)&v607[16];
          *(_OWORD *)uint64_t v165 = v166;
          memset(v607, 0, 24);
          *(void *)&__p[16] = v165 + 24;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v584, (std::__split_buffer<std::string> *)__p);
          uint64_t v167 = *(void *)(a1 + 888);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__p);
          int v168 = v607[23];
          *(void *)(a1 + 888) = v167;
          if (v168 < 0) {
            operator delete(*(void **)v607);
          }
        }
        else
        {
          long long v159 = *(_OWORD *)v607;
          *(void *)(v157 + 16) = *(void *)&v607[16];
          *(_OWORD *)unint64_t v157 = v159;
          *(void *)(a1 + 888) = v157 + 24;
        }
        unint64_t v169 = *(void *)(a1 + 912);
        if (v169 >= *(void *)(a1 + 920))
        {
          uint64_t v171 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v583, (long long *)&v603);
        }
        else
        {
          if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a1 + 912), v603.__r_.__value_.__l.__data_, v603.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v170 = *(_OWORD *)&v603.__r_.__value_.__l.__data_;
            *(void *)(v169 + 16) = *((void *)&v603.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v169 = v170;
          }
          uint64_t v171 = v169 + 24;
          *(void *)(a1 + 912) = v169 + 24;
        }
        *(void *)(a1 + 912) = v171;
        if (*(char *)(a1 + 423) < 0)
        {
          std::string::__init_copy_ctor_external(&v600, *(const std::string::value_type **)(a1 + 400), *(void *)(a1 + 408));
        }
        else
        {
          *(_OWORD *)&v600.__r_.__value_.__l.__data_ = *v590;
          v600.__r_.__value_.__r.__words[2] = *(void *)(a1 + 416);
        }
        if (*((char *)v129 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v599, *(const std::string::value_type **)v129, *((void *)v129 + 1));
        }
        else
        {
          long long v172 = *v129;
          v599.__r_.__value_.__r.__words[2] = *((void *)v129 + 2);
          *(_OWORD *)&v599.__r_.__value_.__l.__data_ = v172;
        }
        TacotronPhoneFeature::TacotronPhoneFeature((std::string *)__p, (long long *)&v600, (long long *)&v599, *v132, v132[1], 1, 0, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
        LODWORD(v12) = v588;
        unint64_t v173 = *(void *)(a1 + 936);
        unint64_t v174 = *(void *)(a1 + 944);
        if (v173 >= v174)
        {
          uint64_t v179 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v173 - *v580) >> 3);
          unint64_t v180 = v179 + 1;
          if ((unint64_t)(v179 + 1) > 0x276276276276276) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v181 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v174 - *v580) >> 3);
          if (2 * v181 > v180) {
            unint64_t v180 = 2 * v181;
          }
          if (v181 >= 0x13B13B13B13B13BLL) {
            unint64_t v182 = 0x276276276276276;
          }
          else {
            unint64_t v182 = v180;
          }
          *(void *)&v607[32] = a1 + 944;
          char v183 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v182);
          int v184 = &v183[104 * v179];
          *(void *)v607 = v183;
          *(void *)&v607[8] = v184;
          *(void *)&v607[24] = &v183[104 * v185];
          long long v186 = *(_OWORD *)__p;
          *((void *)v184 + 2) = *(void *)&__p[16];
          *(_OWORD *)int v184 = v186;
          memset(__p, 0, 24);
          long long v187 = *(_OWORD *)&__p[24];
          *((void *)v184 + 5) = *(void *)&__p[40];
          *(_OWORD *)(v184 + 24) = v187;
          memset(&__p[24], 0, 24);
          long long v188 = *(_OWORD *)&__p[64];
          *((_OWORD *)v184 + 3) = *(_OWORD *)&__p[48];
          *((_OWORD *)v184 + 4) = v188;
          *((void *)v184 + 11) = 0;
          *((void *)v184 + 12) = 0;
          *((void *)v184 + 10) = 0;
          *((_OWORD *)v184 + 5) = *(_OWORD *)&__p[80];
          *((void *)v184 + 12) = *(void *)&__p[96];
          memset(&__p[80], 0, 24);
          *(void *)&v607[16] = v184 + 104;
          std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v580, v607);
          unint64_t v178 = *(void *)(a1 + 936);
          std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)v607);
        }
        else
        {
          long long v175 = *(_OWORD *)__p;
          *(void *)(v173 + 16) = *(void *)&__p[16];
          *(_OWORD *)unint64_t v173 = v175;
          memset(__p, 0, 24);
          uint64_t v176 = *(void *)&__p[40];
          *(_OWORD *)(v173 + 24) = *(_OWORD *)&__p[24];
          *(void *)(v173 + 40) = v176;
          memset(&__p[24], 0, 24);
          long long v177 = *(_OWORD *)&__p[64];
          *(_OWORD *)(v173 + 48) = *(_OWORD *)&__p[48];
          *(_OWORD *)(v173 + 64) = v177;
          *(void *)(v173 + 80) = 0;
          *(void *)(v173 + 88) = 0;
          *(void *)(v173 + 96) = 0;
          *(_OWORD *)(v173 + 80) = *(_OWORD *)&__p[80];
          *(void *)(v173 + 96) = *(void *)&__p[96];
          memset(&__p[80], 0, 24);
          unint64_t v178 = v173 + 104;
        }
        *(void *)(a1 + 936) = v178;
        *(void *)v607 = &__p[80];
        std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)v607);
        if ((__p[47] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[24]);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v599.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v600.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v600.__r_.__value_.__l.__data_);
        }
        if (*(char *)(a1 + 423) >= 0) {
          size_t v189 = *(unsigned __int8 *)(a1 + 423);
        }
        else {
          size_t v189 = *(void *)(a1 + 408);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v189 + 1);
        if (__p[23] >= 0) {
          char v190 = __p;
        }
        else {
          char v190 = *(unsigned char **)__p;
        }
        if (v189)
        {
          if (*(char *)(a1 + 423) >= 0) {
            int v191 = (const void *)(a1 + 400);
          }
          else {
            int v191 = *(const void **)(a1 + 400);
          }
          memmove(v190, v191, v189);
        }
        *(_WORD *)&v190[v189] = 32;
        if (__p[23] >= 0) {
          long long v192 = __p;
        }
        else {
          long long v192 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v193 = __p[23];
        }
        else {
          std::string::size_type v193 = *(void *)&__p[8];
        }
        std::string::append(v591, v192, v193);
        uint64_t v14 = v581;
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (SHIBYTE(v603.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v99 = (void *)v603.__r_.__value_.__r.__words[0];
LABEL_333:
          operator delete(v99);
        }
      }
LABEL_56:
      v15 += 14;
    }
    while (v15 != v14);
    int32_t v10 = *(uint64_t **)(a1 + 840);
    uint64_t v11 = *v10;
    int v8 = v575;
LABEL_468:
    uint64_t v278 = (uint64_t *)(v11 + 216 * (int)v12 + 72);
    if (v568 != v278)
    {
      uint64_t v279 = *(void *)(v11 + 216 * (int)v12 + 80);
      std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(v568, *v278, v279, 0x6DB6DB6DB6DB6DB7 * ((v279 - *v278) >> 3));
      int32_t v10 = *(uint64_t **)(a1 + 840);
    }
    uint64_t v12 = (v577 + 1);
LABEL_998:
    uint64_t v11 = *v10;
    uint64_t v9 = v12;
  }
  while (0x84BDA12F684BDA13 * ((v10[1] - *v10) >> 3) > (int)v12);
LABEL_1001:
  if (*(void *)(a1 + 856) != *(void *)(a1 + 864))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    v551 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      unint64_t v553 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 864) - *(void *)(a1 + 856)) >> 3);
      *(_DWORD *)std::basic_string<char16_t> __p = 67109376;
      *(_DWORD *)&__p[4] = v562 - v8;
      *(_WORD *)&__p[8] = 2048;
      *(void *)&__p[10] = v553;
      _os_log_impl(&dword_20CD80000, v551, OS_LOG_TYPE_INFO, "Remainder %d words %zu phones", __p, 0x12u);
    }
    Diagnostics::log(6, "Remainder %d words %zu phones", v552, (v562 - v8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 864) - *(void *)(a1 + 856)) >> 3));
    NeuralAdapterModule::dump_features((NeuralAdapterModule *)a1);
  }
  if (v593) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v593);
  }
}

void sub_20D3D79C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  WordFeature::~WordFeature((void **)&STACK[0x330]);
  if (a72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a72);
  }
  _Unwind_Resume(a1);
}

void NeuralAdapterModule::setup_features(uint64_t a1, uint64_t *a2)
{
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 856));
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 880));
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 904));
  uint64_t v4 = *(void *)(a1 + 936);
  uint64_t v5 = *(void *)(a1 + 928);
  while (v4 != v5)
  {
    v4 -= 104;
    std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](v4);
  }
  *(void *)(a1 + 936) = v5;
  if (*(char *)(a1 + 975) < 0)
  {
    **(unsigned char **)(a1 + 952) = 0;
    *(void *)(a1 + 960) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 952) = 0;
    *(unsigned char *)(a1 + 975) = 0;
  }
  std::vector<MarkerRecord>::__clear[abi:ne180100]((uint64_t *)(a1 + 976));
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 840) = v7;
  int v8 = *(std::__shared_weak_count **)(a1 + 848);
  *(void *)(a1 + 848) = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(unsigned char *)(a1 + 1000) = 0;
  *(void *)(a1 + 1016) = *(void *)(a1 + 1008);
}

void NeuralAdapterModule::process_markers(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = a1 + 304;
    uint64_t v7 = (_OWORD *)(a1 + 328);
    do
    {
      switch(*v4)
      {
        case 1:
          *(unsigned char *)(a1 + 1000) = 1;
          uint64_t v8 = *(void *)(a1 + 720);
          *(_DWORD *)(a1 + 296) = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(a1 + 300) = *(_DWORD *)(v8 + 24);
          MEMORY[0x210558E70](v6, "narrator");
          uint64_t v9 = *(void *)(a1 + 720);
          _OWORD *v7 = *(_OWORD *)(v9 + 28);
          *(_DWORD *)(a1 + 344) = *(_DWORD *)(v9 + 44);
          if (*(char *)(a1 + 839) < 0)
          {
            **(unsigned char **)(a1 + 816) = 0;
            *(void *)(a1 + 824) = 0;
          }
          else
          {
            *(unsigned char *)(a1 + 816) = 0;
            *(unsigned char *)(a1 + 839) = 0;
          }
          break;
        case 4:
          *(float *)(a1 + 300) = (float)(int)v4[1] / 100.0;
          break;
        case 5:
          *(float *)(a1 + 296) = (float)(int)v4[1] / 100.0;
          break;
        case 0xA:
          NeuralAdapterModule::process_bookmark(a1, (uint64_t)v4);
          break;
        default:
          break;
      }
      v4 += 14;
    }
    while (v4 != a3);
  }
}

void NeuralAdapterModule::dump_features(NeuralAdapterModule *this)
{
  uint64_t v321 = *MEMORY[0x263EF8340];
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&__p, (uint64_t)this + 952);
    uint64_t v3 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_INFO, "Neural Phonemes: %s ", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__p, (uint64_t)this + 952);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(6, "Neural Phonemes: %s ", v4, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (char *)operator new(0x228uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = off_26C216280;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *((_WORD *)v6 + 12) = 257;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 18) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  unint64_t v305 = v6 + 24;
  long long v306 = (std::__shared_weak_count *)v6;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  memset(&v307, 0, sizeof(v307));
  uint64_t v293 = (const void **)((char *)this + 376);
  if (*((char *)this + 399) < 0)
  {
    if (!*((void *)this + 48)) {
      goto LABEL_36;
    }
  }
  else if (!*((unsigned char *)this + 399))
  {
    goto LABEL_36;
  }
  if ((NeuralAdapterModule *)((char *)this + 280) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 272, v293))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 376;
    uint64_t v7 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 34, v293, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    uint64_t v8 = v7;
    std::string::size_type size = v307.__r_.__value_.__l.__size_;
    if (v307.__r_.__value_.__l.__size_ >= v307.__r_.__value_.__r.__words[2])
    {
      uint64_t v11 = (void *)v307.__r_.__value_.__r.__words[0];
      uint64_t v12 = (uint64_t)(v307.__r_.__value_.__l.__size_ - v307.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v14 = v307.__r_.__value_.__r.__words[2] - v307.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v307.__r_.__value_.__r.__words[2] - v307.__r_.__value_.__r.__words[0]) >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v307.__r_.__value_.__r.__words[2], v15);
        std::string::size_type size = v307.__r_.__value_.__l.__size_;
        uint64_t v11 = (void *)v307.__r_.__value_.__r.__words[0];
      }
      else
      {
        int v16 = 0;
      }
      uint64_t v17 = &v16[4 * v12];
      std::string::size_type v18 = (std::string::size_type)&v16[4 * v15];
      *(_DWORD *)uint64_t v17 = *((_DWORD *)v8 + 14);
      std::string::size_type v10 = (std::string::size_type)(v17 + 4);
      while ((void *)size != v11)
      {
        int v19 = *(_DWORD *)(size - 4);
        size -= 4;
        *((_DWORD *)v17 - 1) = v19;
        v17 -= 4;
      }
      v307.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      v307.__r_.__value_.__l.__size_ = v10;
      v307.__r_.__value_.__r.__words[2] = v18;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *(_DWORD *)v307.__r_.__value_.__l.__size_ = *((_DWORD *)v7 + 14);
      std::string::size_type v10 = size + 4;
    }
    v307.__r_.__value_.__l.__size_ = v10;
  }
LABEL_36:
  long long v20 = 0uLL;
  memset(&buf, 0, sizeof(buf));
  memset(&v309, 0, sizeof(v309));
  uint64_t v21 = *((void *)this + 107);
  if (*((void *)this + 108) == v21)
  {
    std::string::size_type v53 = 0;
    std::string::size_type v51 = 0;
    long long v52 = 0uLL;
  }
  else
  {
    unint64_t v22 = 0;
    do
    {
      int v23 = (long long *)(v21 + 24 * v22);
      if (*((char *)v23 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v319, *(const std::string::value_type **)v23, *((void *)v23 + 1));
      }
      else
      {
        long long v24 = *v23;
        v319.__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
        *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v24;
      }
      if ((NeuralAdapterModule *)((char *)this + 280) == (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 272, (const void **)&v319.__r_.__value_.__l.__data_))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        unint64_t v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v30 = &v319;
          }
          else {
            unint64_t v30 = (std::string *)v319.__r_.__value_.__r.__words[0];
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, " ");
          UTFString::join<std::string,std::string>((uint64_t)&v308, *((void *)this + 107), *((void *)this + 108), (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::size_type v31 = &v308;
          if ((v308.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v31 = (std::string *)v308.__r_.__value_.__r.__words[0];
          }
          LODWORD(v318.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v318.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
          WORD2(v318.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v318.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v31;
          _os_log_impl(&dword_20CD80000, v29, OS_LOG_TYPE_ERROR, "Unknown phone mapping for '%s' in /%s/", (uint8_t *)&v318, 0x16u);
          if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v308.__r_.__value_.__l.__data_);
          }
        }
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v32 = &v319;
        }
        else {
          char v32 = (std::string *)v319.__r_.__value_.__r.__words[0];
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, " ");
        UTFString::join<std::string,std::string>((uint64_t)&v308, *((void *)this + 107), *((void *)this + 108), (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v34 = &v308;
        if ((v308.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v34 = (std::string *)v308.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(3, "Unknown phone mapping for '%s' in /%s/", v33, v32, v34);
        if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v308.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v319;
        float v25 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 34, (const void **)&v319.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p);
        uint64_t v26 = v25;
        std::string::size_type v27 = v307.__r_.__value_.__l.__size_;
        if (v307.__r_.__value_.__l.__size_ >= v307.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v35 = (void *)v307.__r_.__value_.__r.__words[0];
          uint64_t v36 = (uint64_t)(v307.__r_.__value_.__l.__size_ - v307.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          int64_t v38 = v307.__r_.__value_.__r.__words[2] - v307.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v307.__r_.__value_.__r.__words[2] - v307.__r_.__value_.__r.__words[0]) >> 1 > v37) {
            unint64_t v37 = v38 >> 1;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v307.__r_.__value_.__r.__words[2], v39);
            std::string::size_type v27 = v307.__r_.__value_.__l.__size_;
            std::string::size_type v35 = (void *)v307.__r_.__value_.__r.__words[0];
          }
          else
          {
            unint64_t v40 = 0;
          }
          uint64_t v41 = &v40[4 * v36];
          *(_DWORD *)uint64_t v41 = *((_DWORD *)v26 + 14);
          std::string::size_type v28 = (std::string::size_type)(v41 + 4);
          while ((void *)v27 != v35)
          {
            int v42 = *(_DWORD *)(v27 - 4);
            v27 -= 4;
            *((_DWORD *)v41 - 1) = v42;
            v41 -= 4;
          }
          v307.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
          v307.__r_.__value_.__l.__size_ = v28;
          v307.__r_.__value_.__r.__words[2] = (std::string::size_type)&v40[4 * v39];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *(_DWORD *)v307.__r_.__value_.__l.__size_ = *((_DWORD *)v25 + 14);
          std::string::size_type v28 = v27 + 4;
        }
        v307.__r_.__value_.__l.__size_ = v28;
        uint64_t v43 = *((void *)this + 110) + 24 * v22;
        char v44 = (_OWORD *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v46 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&buf, (long long *)v43);
        }
        else
        {
          if (*(char *)(v43 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)buf.__r_.__value_.__l.__size_, *(const std::string::value_type **)v43, *(void *)(v43 + 8));
          }
          else
          {
            long long v45 = *(_OWORD *)v43;
            *(void *)(buf.__r_.__value_.__l.__size_ + 16) = *(void *)(v43 + 16);
            _OWORD *v44 = v45;
          }
          std::string::size_type v46 = (std::string::size_type)v44 + 24;
        }
        buf.__r_.__value_.__l.__size_ = v46;
        uint64_t v47 = *((void *)this + 113) + 24 * v22;
        size_t v48 = (_OWORD *)v309.__r_.__value_.__l.__size_;
        if (v309.__r_.__value_.__l.__size_ >= v309.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v50 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v309, (long long *)v47);
        }
        else
        {
          if (*(char *)(v47 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v309.__r_.__value_.__l.__size_, *(const std::string::value_type **)v47, *(void *)(v47 + 8));
          }
          else
          {
            long long v49 = *(_OWORD *)v47;
            *(void *)(v309.__r_.__value_.__l.__size_ + 16) = *(void *)(v47 + 16);
            _OWORD *v48 = v49;
          }
          std::string::size_type v50 = (std::string::size_type)v48 + 24;
        }
        v309.__r_.__value_.__l.__size_ = v50;
      }
      if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v319.__r_.__value_.__l.__data_);
      }
      ++v22;
      uint64_t v21 = *((void *)this + 107);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 108) - v21) >> 3) > v22);
    long long v20 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    std::string::size_type v51 = buf.__r_.__value_.__r.__words[2];
    long long v52 = *(_OWORD *)&v309.__r_.__value_.__l.__data_;
    std::string::size_type v53 = v309.__r_.__value_.__r.__words[2];
  }
  long long v54 = *((_OWORD *)this + 55);
  *((_OWORD *)this + 55) = v20;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v54;
  std::string::size_type v55 = *((void *)this + 112);
  *((void *)this + 112) = v51;
  buf.__r_.__value_.__r.__words[2] = v55;
  long long v56 = *(_OWORD *)((char *)this + 904);
  *(_OWORD *)((char *)this + 904) = v52;
  *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v56;
  std::string::size_type v57 = *((void *)this + 115);
  *((void *)this + 115) = v53;
  v309.__r_.__value_.__r.__words[2] = v57;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 352;
  int v295 = (char *)this + 272;
  unint64_t v292 = (const void **)((char *)this + 352);
  unint64_t v58 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 34, (const void **)this + 44, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  std::string::size_type v59 = v58;
  std::string::size_type v60 = v307.__r_.__value_.__l.__size_;
  if (v307.__r_.__value_.__l.__size_ >= v307.__r_.__value_.__r.__words[2])
  {
    std::string v62 = (void *)v307.__r_.__value_.__r.__words[0];
    uint64_t v63 = (uint64_t)(v307.__r_.__value_.__l.__size_ - v307.__r_.__value_.__r.__words[0]) >> 2;
    unint64_t v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v65 = v307.__r_.__value_.__r.__words[2] - v307.__r_.__value_.__r.__words[0];
    if ((uint64_t)(v307.__r_.__value_.__r.__words[2] - v307.__r_.__value_.__r.__words[0]) >> 1 > v64) {
      unint64_t v64 = v65 >> 1;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v66 = v64;
    }
    if (v66)
    {
      int v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v307.__r_.__value_.__r.__words[2], v66);
      std::string::size_type v60 = v307.__r_.__value_.__l.__size_;
      std::string v62 = (void *)v307.__r_.__value_.__r.__words[0];
    }
    else
    {
      int v67 = 0;
    }
    uint64_t v68 = &v67[4 * v63];
    std::string::size_type v69 = (std::string::size_type)&v67[4 * v66];
    *(_DWORD *)uint64_t v68 = *((_DWORD *)v59 + 14);
    std::string::size_type v61 = (std::string::size_type)(v68 + 4);
    while ((void *)v60 != v62)
    {
      int v70 = *(_DWORD *)(v60 - 4);
      v60 -= 4;
      *((_DWORD *)v68 - 1) = v70;
      v68 -= 4;
    }
    v307.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
    v307.__r_.__value_.__l.__size_ = v61;
    v307.__r_.__value_.__r.__words[2] = v69;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *(_DWORD *)v307.__r_.__value_.__l.__size_ = *((_DWORD *)v58 + 14);
    std::string::size_type v61 = v60 + 4;
  }
  v307.__r_.__value_.__l.__size_ = v61;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  int v71 = (void *)*((void *)v6 + 7);
  if (v71)
  {
    *((void *)v6 + 8) = v71;
    operator delete(v71);
  }
  *(std::string *)(v6 + 56) = v307;
  memset(&__p, 0, sizeof(__p));
  if (*((void *)this + 94))
  {
    if (*((char *)this + 399) < 0)
    {
      if (!*((void *)this + 48)) {
        goto LABEL_139;
      }
    }
    else if (!*((unsigned char *)this + 399))
    {
      goto LABEL_139;
    }
    if ((NeuralAdapterModule *)((char *)this + 280) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v295, v293)&& (NeuralAdapterModule *)((char *)this + 744) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 736, v293))
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 376;
      std::string::size_type v72 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 92, v293, (uint64_t)&std::piecewise_construct, (long long **)&buf);
      std::string::size_type v73 = v72;
      std::string::size_type v74 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        int64_t v76 = (void *)__p.__r_.__value_.__r.__words[0];
        uint64_t v77 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
        unint64_t v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 62) {
          goto LABEL_565;
        }
        int64_t v79 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v78) {
          unint64_t v78 = v79 >> 1;
        }
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v80 = v78;
        }
        if (v80)
        {
          uint64_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v80);
          std::string::size_type v74 = __p.__r_.__value_.__l.__size_;
          int64_t v76 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          uint64_t v81 = 0;
        }
        std::string::size_type v82 = &v81[4 * v77];
        std::string::size_type v83 = (std::string::size_type)&v81[4 * v80];
        *(_DWORD *)std::string::size_type v82 = *((_DWORD *)v73 + 14);
        std::string::size_type v75 = (std::string::size_type)(v82 + 4);
        while ((void *)v74 != v76)
        {
          int v84 = *(_DWORD *)(v74 - 4);
          v74 -= 4;
          *((_DWORD *)v82 - 1) = v84;
          v82 -= 4;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
        __p.__r_.__value_.__l.__size_ = v75;
        __p.__r_.__value_.__r.__words[2] = v83;
        if (v76) {
          operator delete(v76);
        }
      }
      else
      {
        *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v72 + 14);
        std::string::size_type v75 = v74 + 4;
      }
      __p.__r_.__value_.__l.__size_ = v75;
    }
LABEL_139:
    std::string::size_type v85 = *((void *)this + 110);
    for (uint64_t i = *((void *)this + 111); v85 != i; v85 += 24)
    {
      if ((NeuralAdapterModule *)((char *)this + 744) == (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 736, (const void **)v85))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        long long v91 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          std::string::size_type v93 = v85;
          if (*(char *)(v85 + 23) < 0) {
            std::string::size_type v93 = *(void *)v85;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v93;
          _os_log_impl(&dword_20CD80000, v91, OS_LOG_TYPE_ERROR, "Unknown language mapping for '%s' ", (uint8_t *)&buf, 0xCu);
        }
        std::string::size_type v94 = v85;
        if (*(char *)(v85 + 23) < 0) {
          std::string::size_type v94 = *(void *)v85;
        }
        Diagnostics::log(3, "Unknown language mapping for '%s' ", v92, v94);
      }
      else
      {
        buf.__r_.__value_.__r.__words[0] = v85;
        int v87 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 92, (const void **)v85, (uint64_t)&std::piecewise_construct, (long long **)&buf);
        uint64_t v88 = v87;
        std::string::size_type v89 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          uint64_t v95 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v96 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v97 = v96 + 1;
          if ((unint64_t)(v96 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          int64_t v98 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v97) {
            unint64_t v97 = v98 >> 1;
          }
          if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v99 = v97;
          }
          if (v99)
          {
            unint64_t v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v99);
            std::string::size_type v89 = __p.__r_.__value_.__l.__size_;
            uint64_t v95 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            unint64_t v100 = 0;
          }
          uint64_t v101 = &v100[4 * v96];
          *(_DWORD *)uint64_t v101 = *((_DWORD *)v88 + 14);
          std::string::size_type v90 = (std::string::size_type)(v101 + 4);
          while ((void *)v89 != v95)
          {
            int v102 = *(_DWORD *)(v89 - 4);
            v89 -= 4;
            *((_DWORD *)v101 - 1) = v102;
            v101 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
          __p.__r_.__value_.__l.__size_ = v90;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v100[4 * v99];
          if (v95) {
            operator delete(v95);
          }
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v87 + 14);
          std::string::size_type v90 = v89 + 4;
        }
        __p.__r_.__value_.__l.__size_ = v90;
      }
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 352;
    unint64_t v103 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 92, v292, (uint64_t)&std::piecewise_construct, (long long **)&buf);
    size_t v104 = v103;
    std::string::size_type v105 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
    {
      *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v103 + 14);
      std::string::size_type v106 = v105 + 4;
LABEL_184:
      __p.__r_.__value_.__l.__size_ = v106;
      goto LABEL_185;
    }
    uint64_t v107 = (void *)__p.__r_.__value_.__r.__words[0];
    uint64_t v108 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
    unint64_t v109 = v108 + 1;
    if (!((unint64_t)(v108 + 1) >> 62))
    {
      int64_t v110 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v109) {
        unint64_t v109 = v110 >> 1;
      }
      if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v111 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v111 = v109;
      }
      if (v111)
      {
        long long v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v111);
        std::string::size_type v105 = __p.__r_.__value_.__l.__size_;
        uint64_t v107 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        long long v112 = 0;
      }
      unint64_t v113 = &v112[4 * v108];
      std::string::size_type v114 = (std::string::size_type)&v112[4 * v111];
      *(_DWORD *)unint64_t v113 = *((_DWORD *)v104 + 14);
      std::string::size_type v106 = (std::string::size_type)(v113 + 4);
      while ((void *)v105 != v107)
      {
        int v115 = *(_DWORD *)(v105 - 4);
        v105 -= 4;
        *((_DWORD *)v113 - 1) = v115;
        v113 -= 4;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
      __p.__r_.__value_.__l.__size_ = v106;
      __p.__r_.__value_.__r.__words[2] = v114;
      if (v107) {
        operator delete(v107);
      }
      goto LABEL_184;
    }
LABEL_565:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
LABEL_185:
  unint64_t v116 = (void *)*((void *)v6 + 45);
  if (v116)
  {
    *((void *)v6 + 46) = v116;
    operator delete(v116);
  }
  *((std::string *)v6 + 15) = __p;
  memset(&buf, 0, sizeof(buf));
  if (*((void *)this + 83))
  {
    if (*((char *)this + 399) < 0)
    {
      if (!*((void *)this + 48))
      {
LABEL_203:
        std::string::size_type v122 = *((void *)this + 113);
        for (uint64_t j = *((void *)this + 114); v122 != j; v122 += 24)
        {
          if ((NeuralAdapterModule *)((char *)this + 656) == (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 648, (const void **)v122))
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v127 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              std::string::size_type v129 = v122;
              if (*(char *)(v122 + 23) < 0) {
                std::string::size_type v129 = *(void *)v122;
              }
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v129;
              _os_log_impl(&dword_20CD80000, v127, OS_LOG_TYPE_ERROR, "Unknown dialog mapping for '%s' ", (uint8_t *)&__p, 0xCu);
            }
            std::string::size_type v130 = v122;
            if (*(char *)(v122 + 23) < 0) {
              std::string::size_type v130 = *(void *)v122;
            }
            Diagnostics::log(3, "Unknown dialog mapping for '%s' ", v128, v130);
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = v122;
            unint64_t v124 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 81, (const void **)v122, (long long **)&__p);
            long long v125 = (void *)buf.__r_.__value_.__l.__size_;
            if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v126 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)(v124 + 7));
            }
            else
            {
              *(void *)buf.__r_.__value_.__l.__size_ = 0;
              v125[1] = 0;
              v125[2] = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v125, (const void *)v124[7], v124[8], (v124[8] - v124[7]) >> 2);
              std::string::size_type v126 = (std::string::size_type)(v125 + 3);
            }
            buf.__r_.__value_.__l.__size_ = v126;
          }
        }
        uint64_t v131 = (void *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_ == buf.__r_.__value_.__r.__words[0])
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "narrator");
          v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          long long v132 = (char *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 81, (const void **)&__p.__r_.__value_.__l.__data_, &v319)+ 56;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v131 = (void *)buf.__r_.__value_.__l.__size_;
        }
        else
        {
          long long v132 = (char *)(buf.__r_.__value_.__l.__size_ - 24);
        }
        if ((unint64_t)v131 >= buf.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v133 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)v132);
        }
        else
        {
          void *v131 = 0;
          v131[1] = 0;
          v131[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v131, *(const void **)v132, *((void *)v132 + 1), (uint64_t)(*((void *)v132 + 1) - *(void *)v132) >> 2);
          std::string::size_type v133 = (std::string::size_type)(v131 + 3);
        }
        buf.__r_.__value_.__l.__size_ = v133;
        goto LABEL_228;
      }
    }
    else if (!*((unsigned char *)this + 399))
    {
      goto LABEL_203;
    }
    if ((NeuralAdapterModule *)((char *)this + 280) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v295, v293))
    {
      uint64_t v117 = (long long *)*((void *)this + 113);
      if (*((long long **)this + 114) == v117)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "narrator");
      }
      else if (*((char *)v117 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v117, *((void *)v117 + 1));
      }
      else
      {
        long long v118 = *v117;
        __p.__r_.__value_.__r.__words[2] = *((void *)v117 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v118;
      }
      v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      long long v119 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 81, (const void **)&__p.__r_.__value_.__l.__data_, (long long **)&v319);
      uint64_t v120 = (void *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v121 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)(v119 + 7));
      }
      else
      {
        *(void *)buf.__r_.__value_.__l.__size_ = 0;
        v120[1] = 0;
        v120[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v120, (const void *)v119[7], v119[8], (v119[8] - v119[7]) >> 2);
        std::string::size_type v121 = (std::string::size_type)(v120 + 3);
      }
      buf.__r_.__value_.__l.__size_ = v121;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_203;
  }
LABEL_228:
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v6 + 61);
  *(std::string *)(v6 + 488) = buf;
  memset(&buf, 0, sizeof(buf));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  memset(&__p, 0, sizeof(__p));
  if (!*((void *)this + 86)) {
    goto LABEL_298;
  }
  if (*((char *)this + 399) < 0)
  {
    if (!*((void *)this + 48)) {
      goto LABEL_252;
    }
  }
  else if (!*((unsigned char *)this + 399))
  {
    goto LABEL_252;
  }
  if ((NeuralAdapterModule *)((char *)this + 280) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v295, v293)&& (NeuralAdapterModule *)((char *)this + 680) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 672, v293))
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 376;
    unint64_t v134 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 84, v293, (uint64_t)&std::piecewise_construct, (long long **)&buf);
    unint64_t v135 = v134;
    std::string::size_type v136 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      long long v138 = (void *)__p.__r_.__value_.__r.__words[0];
      uint64_t v139 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v140 = v139 + 1;
      if ((unint64_t)(v139 + 1) >> 62) {
        goto LABEL_566;
      }
      int64_t v141 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v140) {
        unint64_t v140 = v141 >> 1;
      }
      if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v142 = v140;
      }
      if (v142)
      {
        unint64_t v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v142);
        std::string::size_type v136 = __p.__r_.__value_.__l.__size_;
        long long v138 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        unint64_t v143 = 0;
      }
      int v144 = &v143[4 * v139];
      std::string::size_type v145 = (std::string::size_type)&v143[4 * v142];
      *(_DWORD *)int v144 = *((_DWORD *)v135 + 14);
      std::string::size_type v137 = (std::string::size_type)(v144 + 4);
      while ((void *)v136 != v138)
      {
        int v146 = *(_DWORD *)(v136 - 4);
        v136 -= 4;
        *((_DWORD *)v144 - 1) = v146;
        v144 -= 4;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
      __p.__r_.__value_.__l.__size_ = v137;
      __p.__r_.__value_.__r.__words[2] = v145;
      if (v138) {
        operator delete(v138);
      }
    }
    else
    {
      *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v134 + 14);
      std::string::size_type v137 = v136 + 4;
    }
    __p.__r_.__value_.__l.__size_ = v137;
  }
LABEL_252:
  std::string::size_type v147 = *((void *)this + 113);
  for (uint64_t k = *((void *)this + 114); v147 != k; v147 += 24)
  {
    if ((NeuralAdapterModule *)((char *)this + 680) == (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 672, (const void **)v147))
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      char v153 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v155 = v147;
        if (*(char *)(v147 + 23) < 0) {
          std::string::size_type v155 = *(void *)v147;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v155;
        _os_log_impl(&dword_20CD80000, v153, OS_LOG_TYPE_ERROR, "Unknown dialog mapping for '%s' ", (uint8_t *)&buf, 0xCu);
      }
      std::string::size_type v156 = v147;
      if (*(char *)(v147 + 23) < 0) {
        std::string::size_type v156 = *(void *)v147;
      }
      Diagnostics::log(3, "Unknown dialog mapping for '%s' ", v154, v156);
    }
    else
    {
      buf.__r_.__value_.__r.__words[0] = v147;
      long long v149 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 84, (const void **)v147, (uint64_t)&std::piecewise_construct, (long long **)&buf);
      size_t v150 = v149;
      std::string::size_type v151 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        unint64_t v157 = (void *)__p.__r_.__value_.__r.__words[0];
        uint64_t v158 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
        unint64_t v159 = v158 + 1;
        if ((unint64_t)(v158 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        int64_t v160 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v159) {
          unint64_t v159 = v160 >> 1;
        }
        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v161 = v159;
        }
        if (v161)
        {
          unint64_t v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v161);
          std::string::size_type v151 = __p.__r_.__value_.__l.__size_;
          unint64_t v157 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          unint64_t v162 = 0;
        }
        unint64_t v163 = &v162[4 * v158];
        *(_DWORD *)unint64_t v163 = *((_DWORD *)v150 + 14);
        std::string::size_type v152 = (std::string::size_type)(v163 + 4);
        while ((void *)v151 != v157)
        {
          int v164 = *(_DWORD *)(v151 - 4);
          v151 -= 4;
          *((_DWORD *)v163 - 1) = v164;
          v163 -= 4;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
        __p.__r_.__value_.__l.__size_ = v152;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v162[4 * v161];
        if (v157) {
          operator delete(v157);
        }
      }
      else
      {
        *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v149 + 14);
        std::string::size_type v152 = v151 + 4;
      }
      __p.__r_.__value_.__l.__size_ = v152;
    }
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 352;
  uint64_t v165 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 84, v292, (uint64_t)&std::piecewise_construct, (long long **)&buf);
  long long v166 = v165;
  std::string::size_type v167 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
  {
    unint64_t v169 = (void *)__p.__r_.__value_.__r.__words[0];
    uint64_t v170 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
    unint64_t v171 = v170 + 1;
    if (!((unint64_t)(v170 + 1) >> 62))
    {
      int64_t v172 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v171) {
        unint64_t v171 = v172 >> 1;
      }
      if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v173 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v173 = v171;
      }
      if (v173)
      {
        unint64_t v174 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v173);
        std::string::size_type v167 = __p.__r_.__value_.__l.__size_;
        unint64_t v169 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        unint64_t v174 = 0;
      }
      long long v175 = &v174[4 * v170];
      std::string::size_type v176 = (std::string::size_type)&v174[4 * v173];
      *(_DWORD *)long long v175 = *((_DWORD *)v166 + 14);
      std::string::size_type v168 = (std::string::size_type)(v175 + 4);
      while ((void *)v167 != v169)
      {
        int v177 = *(_DWORD *)(v167 - 4);
        v167 -= 4;
        *((_DWORD *)v175 - 1) = v177;
        v175 -= 4;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v175;
      __p.__r_.__value_.__l.__size_ = v168;
      __p.__r_.__value_.__r.__words[2] = v176;
      if (v169) {
        operator delete(v169);
      }
      goto LABEL_297;
    }
LABEL_566:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v165 + 14);
  std::string::size_type v168 = v167 + 4;
LABEL_297:
  __p.__r_.__value_.__l.__size_ = v168;
LABEL_298:
  unint64_t v178 = (void *)*((void *)v6 + 58);
  if (v178)
  {
    *((void *)v6 + 59) = v178;
    operator delete(v178);
  }
  *(std::string *)(v6 + 464) = __p;
  memset(&buf, 0, sizeof(buf));
  if (*((void *)this + 89))
  {
    if (*((char *)this + 399) < 0)
    {
      if (!*((void *)this + 48))
      {
LABEL_316:
        std::string::size_type v184 = *((void *)this + 113);
        for (uint64_t m = *((void *)this + 114); v184 != m; v184 += 24)
        {
          if ((NeuralAdapterModule *)((char *)this + 704) == (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 696, (const void **)v184))
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            size_t v189 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              std::string::size_type v191 = v184;
              if (*(char *)(v184 + 23) < 0) {
                std::string::size_type v191 = *(void *)v184;
              }
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v191;
              _os_log_impl(&dword_20CD80000, v189, OS_LOG_TYPE_ERROR, "Unfound dialog mapping for '%s' ", (uint8_t *)&__p, 0xCu);
            }
            std::string::size_type v192 = v184;
            if (*(char *)(v184 + 23) < 0) {
              std::string::size_type v192 = *(void *)v184;
            }
            Diagnostics::log(3, "Unfound dialog mapping for '%s' ", v190, v192);
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = v184;
            long long v186 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 87, (const void **)v184, (long long **)&__p);
            long long v187 = (void *)buf.__r_.__value_.__l.__size_;
            if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v188 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)(v186 + 7));
            }
            else
            {
              *(void *)buf.__r_.__value_.__l.__size_ = 0;
              v187[1] = 0;
              v187[2] = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v187, (const void *)v186[7], v186[8], (v186[8] - v186[7]) >> 2);
              std::string::size_type v188 = (std::string::size_type)(v187 + 3);
            }
            buf.__r_.__value_.__l.__size_ = v188;
          }
        }
        std::string::size_type v193 = (void *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_ == buf.__r_.__value_.__r.__words[0])
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "narrator");
          v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          unint64_t v194 = (char *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 87, (const void **)&__p.__r_.__value_.__l.__data_, &v319)+ 56;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::size_type v193 = (void *)buf.__r_.__value_.__l.__size_;
        }
        else
        {
          unint64_t v194 = (char *)(buf.__r_.__value_.__l.__size_ - 24);
        }
        if ((unint64_t)v193 >= buf.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v195 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)v194);
        }
        else
        {
          void *v193 = 0;
          v193[1] = 0;
          v193[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v193, *(const void **)v194, *((void *)v194 + 1), (uint64_t)(*((void *)v194 + 1) - *(void *)v194) >> 2);
          std::string::size_type v195 = (std::string::size_type)(v193 + 3);
        }
        buf.__r_.__value_.__l.__size_ = v195;
        goto LABEL_341;
      }
    }
    else if (!*((unsigned char *)this + 399))
    {
      goto LABEL_316;
    }
    if ((NeuralAdapterModule *)((char *)this + 280) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v295, v293))
    {
      uint64_t v179 = (long long *)*((void *)this + 113);
      if (*((long long **)this + 114) == v179)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "narrator");
      }
      else if (*((char *)v179 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v179, *((void *)v179 + 1));
      }
      else
      {
        long long v180 = *v179;
        __p.__r_.__value_.__r.__words[2] = *((void *)v179 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v180;
      }
      v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      unint64_t v181 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 87, (const void **)&__p.__r_.__value_.__l.__data_, (long long **)&v319);
      unint64_t v182 = (void *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v183 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)(v181 + 7));
      }
      else
      {
        *(void *)buf.__r_.__value_.__l.__size_ = 0;
        v182[1] = 0;
        void v182[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v182, (const void *)v181[7], v181[8], (v181[8] - v181[7]) >> 2);
        std::string::size_type v183 = (std::string::size_type)(v182 + 3);
      }
      buf.__r_.__value_.__l.__size_ = v183;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_316;
  }
LABEL_341:
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v6 + 64);
  *(std::string *)(v6 + 512) = buf;
  memset(&buf, 0, sizeof(buf));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long v196 = *((_OWORD *)v6 + 2);
  *((_OWORD *)v6 + 2) = *((_OWORD *)this + 58);
  *((_OWORD *)this + 58) = v196;
  uint64_t v197 = *((void *)v6 + 6);
  *((void *)v6 + 6) = *((void *)this + 118);
  *((void *)this + 118) = v197;
  *((_DWORD *)v6 + 96) = *((_DWORD *)this + 190);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  unint64_t v199 = (unint64_t)v305;
  unint64_t v198 = v306;
  if (v306) {
    atomic_fetch_add_explicit(&v306->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v200 = *((void *)this + 90);
  std::string::size_type v201 = *(char **)(v200 + 48);
  uint64_t v202 = *(void *)(v200 + 56);
  if (v201 == (char *)v202)
  {
    std::string::size_type v201 = (char *)*((void *)this + 96);
    uint64_t v202 = *((void *)this + 97);
  }
  uint64_t v204 = *((void *)v305 + 4);
  uint64_t v203 = *((void *)v305 + 5);
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v305 + 416, v201, v202, (v202 - (uint64_t)v201) >> 2);
  uint64_t v297 = v305 + 120;
  std::vector<float>::assign((char **)v305 + 15, (v203 - v204) >> 2, (_DWORD *)(*((void *)this + 90) + 16));
  std::vector<float>::assign((char **)v305 + 18, (v203 - v204) >> 2, (_DWORD *)(*((void *)this + 90) + 24));
  unint64_t v294 = v305 + 168;
  std::vector<float>::assign((char **)v305 + 21, (v203 - v204) >> 2, (_DWORD *)(*((void *)this + 90) + 20));
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  unint64_t v296 = v305 + 192;
  std::vector<float>::assign((char **)v305 + 24, (v203 - v204) >> 2, &__p);
  int v205 = v305 + 240;
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::assign((char **)v305 + 30, (v203 - v204) >> 2, &__p);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v206 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v208 = (float *)*((void *)this + 90);
    double v209 = v208[4];
    double v210 = v208[6];
    double v211 = v208[5];
    LODWORD(__p.__r_.__value_.__l.__data_) = 134218496;
    *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v209;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v210;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
    v313[0] = v211;
    _os_log_impl(&dword_20CD80000, v206, OS_LOG_TYPE_INFO, "Neural phone feature scale from synthesizer config: rate_scale=%f, pitch_scale=%f, energy_scale=%f", (uint8_t *)&__p, 0x20u);
  }
  Diagnostics::log(6, "Neural phone feature scale from synthesizer config: rate_scale=%f, pitch_scale=%f, energy_scale=%f", v207, *(float *)(*((void *)this + 90) + 16), *(float *)(*((void *)this + 90) + 24), *(float *)(*((void *)this + 90) + 20));
  if (*((char *)this + 375) < 0) {
    uint64_t v212 = *((void *)this + 45);
  }
  else {
    uint64_t v212 = *((unsigned __int8 *)this + 375);
  }
  uint64_t v213 = ((v203 - v204) >> 2) - (v212 != 0);
  if (*((char *)this + 399) < 0) {
    uint64_t v214 = *((void *)this + 48);
  }
  else {
    uint64_t v214 = *((unsigned __int8 *)this + 399);
  }
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)v305 + 2) - *((void *)v305 + 1)) >> 3) == v213 - (v214 != 0))
  {
    memset(&__p, 0, sizeof(__p));
    memset(&buf, 0, sizeof(buf));
    memset(&v309, 0, sizeof(v309));
    uint64_t v215 = *((void *)v305 + 1);
    if (*((void *)v305 + 2) != v215)
    {
      uint64_t v216 = 0;
      for (unint64_t n = 0; 0x4EC4EC4EC4EC4EC5 * ((*(void *)(v199 + 16) - v215) >> 3) > n; ++n)
      {
        if (*((char *)this + 399) < 0) {
          uint64_t v218 = *((void *)this + 48);
        }
        else {
          uint64_t v218 = *((unsigned __int8 *)this + 399);
        }
        uint64_t v219 = v215 + v216;
        if (v218) {
          unint64_t v220 = n + 1;
        }
        else {
          unint64_t v220 = n;
        }
        *(_DWORD *)(*(void *)(v199 + 144) + 4 * v220) = *(_DWORD *)(v219 + 68);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v221 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v221 = __p.__r_.__value_.__l.__size_;
        }
        if (v221)
        {
          std::to_string(&v308, *(float *)(v219 + 68));
          long long v222 = std::string::insert(&v308, 0, " ");
          long long v223 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
          v319.__r_.__value_.__r.__words[2] = v222->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v223;
          v222->__r_.__value_.__l.__size_ = 0;
          v222->__r_.__value_.__r.__words[2] = 0;
          v222->__r_.__value_.__r.__words[0] = 0;
        }
        else
        {
          std::to_string(&v319, *(float *)(v219 + 68));
        }
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v224 = &v319;
        }
        else {
          uint64_t v224 = (std::string *)v319.__r_.__value_.__r.__words[0];
        }
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v225 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v225 = v319.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v224, v225);
        if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v319.__r_.__value_.__l.__data_);
          if (!v221) {
            goto LABEL_382;
          }
        }
        else if (!v221)
        {
          goto LABEL_382;
        }
        if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v308.__r_.__value_.__l.__data_);
        }
LABEL_382:
        uint64_t v215 = *(void *)(v199 + 8);
        uint64_t v226 = v215 + v216;
        float v227 = *(float *)(v215 + v216 + 72);
        if (v227 <= 0.0) {
          goto LABEL_414;
        }
        if (*((char *)this + 399) < 0) {
          uint64_t v228 = *((void *)this + 48);
        }
        else {
          uint64_t v228 = *((unsigned __int8 *)this + 399);
        }
        if (v228) {
          unint64_t v229 = n + 1;
        }
        else {
          unint64_t v229 = n;
        }
        *(float *)(*v296 + 4 * v229) = v227;
        if (*((char *)this + 399) < 0) {
          uint64_t v230 = *((void *)this + 48);
        }
        else {
          uint64_t v230 = *((unsigned __int8 *)this + 399);
        }
        if (v230) {
          unint64_t v231 = n + 1;
        }
        else {
          unint64_t v231 = n;
        }
        *(_DWORD *)(*v297 + 4 * v231) = 0;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v232 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v232 = buf.__r_.__value_.__l.__size_;
        }
        if (v232)
        {
          std::to_string(&v307, *(float *)(v226 + 72));
          long long v233 = std::string::insert(&v307, 0, " ");
          long long v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
          v319.__r_.__value_.__r.__words[2] = v233->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v234;
          v233->__r_.__value_.__l.__size_ = 0;
          v233->__r_.__value_.__r.__words[2] = 0;
          v233->__r_.__value_.__r.__words[0] = 0;
        }
        else
        {
          std::to_string(&v319, *(float *)(v226 + 72));
        }
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v235 = &v319;
        }
        else {
          std::string::size_type v235 = (std::string *)v319.__r_.__value_.__r.__words[0];
        }
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v236 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v236 = v319.__r_.__value_.__l.__size_;
        }
        std::string::append(&buf, (const std::string::value_type *)v235, v236);
        if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v319.__r_.__value_.__l.__data_);
          if (v232)
          {
LABEL_411:
            if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v307.__r_.__value_.__l.__data_);
            }
          }
        }
        else if (v232)
        {
          goto LABEL_411;
        }
        uint64_t v215 = *(void *)(v199 + 8);
LABEL_414:
        uint64_t v237 = v215 + v216;
        float v238 = *(float *)(v215 + v216 + 76);
        if (v238 > 1.1755e-38)
        {
          if (*((char *)this + 399) < 0) {
            uint64_t v239 = *((void *)this + 48);
          }
          else {
            uint64_t v239 = *((unsigned __int8 *)this + 399);
          }
          if (v239) {
            unint64_t v240 = n + 1;
          }
          else {
            unint64_t v240 = n;
          }
          *(float *)(*v205 + 4 * v240) = v238;
          if (*((char *)this + 399) < 0) {
            uint64_t v241 = *((void *)this + 48);
          }
          else {
            uint64_t v241 = *((unsigned __int8 *)this + 399);
          }
          if (v241) {
            unint64_t v242 = n + 1;
          }
          else {
            unint64_t v242 = n;
          }
          *(_DWORD *)(*v294 + 4 * v242) = 0;
          if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v243 = HIBYTE(v309.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v243 = v309.__r_.__value_.__l.__size_;
          }
          if (v243)
          {
            std::to_string(&v318, *(float *)(v237 + 76));
            unint64_t v244 = std::string::insert(&v318, 0, " ");
            long long v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
            v319.__r_.__value_.__r.__words[2] = v244->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v245;
            v244->__r_.__value_.__l.__size_ = 0;
            v244->__r_.__value_.__r.__words[2] = 0;
            v244->__r_.__value_.__r.__words[0] = 0;
          }
          else
          {
            std::to_string(&v319, *(float *)(v237 + 76));
          }
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v246 = &v319;
          }
          else {
            unint64_t v246 = (std::string *)v319.__r_.__value_.__r.__words[0];
          }
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v247 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v247 = v319.__r_.__value_.__l.__size_;
          }
          std::string::append(&v309, (const std::string::value_type *)v246, v247);
          if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v319.__r_.__value_.__l.__data_);
            if (!v243)
            {
LABEL_445:
              uint64_t v215 = *(void *)(v199 + 8);
              goto LABEL_446;
            }
          }
          else if (!v243)
          {
            goto LABEL_445;
          }
          if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v318.__r_.__value_.__l.__data_);
          }
          goto LABEL_445;
        }
LABEL_446:
        v216 += 104;
      }
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::string::pointer v248 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      long long v250 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v250 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(v319.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v319.__r_.__value_.__r.__words + 4) = (std::string::size_type)v250;
      _os_log_impl(&dword_20CD80000, v248, OS_LOG_TYPE_INFO, "Neural phone feature pitch: %s", (uint8_t *)&v319, 0xCu);
    }
    uint64_t v251 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v251 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    Diagnostics::log(6, "Neural phone feature pitch: %s", v249, v251);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v252 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      p_std::string buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v319.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v319.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
      _os_log_impl(&dword_20CD80000, v252, OS_LOG_TYPE_INFO, "Neural phone feature duration: %s", (uint8_t *)&v319, 0xCu);
    }
    uint64_t v255 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v255 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    Diagnostics::log(6, "Neural phone feature duration: %s", v253, v255);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    long long v256 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      unint64_t v258 = &v309;
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v258 = (std::string *)v309.__r_.__value_.__r.__words[0];
      }
      LODWORD(v319.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v319.__r_.__value_.__r.__words + 4) = (std::string::size_type)v258;
      _os_log_impl(&dword_20CD80000, v256, OS_LOG_TYPE_INFO, "Neural phone feature energy: %s", (uint8_t *)&v319, 0xCu);
    }
    long long v259 = &v309;
    if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v259 = (std::string *)v309.__r_.__value_.__r.__words[0];
    }
    Diagnostics::log(6, "Neural phone feature energy: %s", v257, v259);
    if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v309.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v260 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v262 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)v305 + 2) - *((void *)v305 + 1)) >> 3);
      uint64_t v263 = (uint64_t)(*((void *)v305 + 19) - *((void *)v305 + 18)) >> 2;
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v262;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v263;
      _os_log_impl(&dword_20CD80000, v260, OS_LOG_TYPE_DEFAULT, "WARN: phonewise pitch scale, speech duration, and speech energy don't match feature wise length, skip overriding, phone_size=%ld, feature_size=%ld", (uint8_t *)&__p, 0x16u);
    }
    Diagnostics::log(5, "WARN: phonewise pitch scale, speech duration, and speech energy don't match feature wise length, skip overriding, phone_size=%ld, feature_size=%ld", v261, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)v305 + 2) - *((void *)v305 + 1)) >> 3), (uint64_t)(*((void *)v305 + 19) - *((void *)v305 + 18)) >> 2);
  }
  uint64_t v265 = *(void *)(v199 + 32);
  uint64_t v264 = *(void *)(v199 + 40);
  int v266 = *((_DWORD *)this + 86);
  std::string::size_type v267 = operator new(0x14uLL);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v267 + 5);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v267 + 5);
  *(_OWORD *)std::string::size_type v267 = *(_OWORD *)((char *)this + 328);
  v267[4] = v266;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v267;
  std::vector<std::vector<float>>::vector(&__p, (v264 - v265) >> 2, (uint64_t)&buf);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(v199 + 368));
  *(std::string *)(v199 + 368) = __p;
  memset(&__p, 0, sizeof(__p));
  v309.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v309);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)(v199 + 392), (const std::string *)this + 34);
  if (v198) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v198);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  UTFString::join<std::string,int>((uint64_t)&buf, *(int **)(v199 + 32), *(int **)(v199 + 40), (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  UTFString::join<std::string,int>((uint64_t)&v309, *(int **)(v199 + 336), *(int **)(v199 + 344), (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "female");
  std::string::basic_string[abi:ne180100]<0>(v313, "F");
  std::string::basic_string[abi:ne180100]<0>(v314, "male");
  std::string::basic_string[abi:ne180100]<0>(v315, "M");
  std::string::basic_string[abi:ne180100]<0>(v316, "narrator");
  std::string::basic_string[abi:ne180100]<0>(v317, "N");
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v319, (const void **)&__p.__r_.__value_.__l.__data_, 3);
  for (iuint64_t i = 0; ii != -18; ii -= 6)
  {
    uint64_t v269 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + ii * 8);
    if (SHIBYTE(v317[ii + 2]) < 0) {
      operator delete(v269[15]);
    }
    if (*((char *)v269 + 119) < 0) {
      operator delete(v269[12]);
    }
  }
  uint64_t v302 = 0;
  uint64_t v303 = 0;
  unint64_t v304 = 0;
  uint64_t v270 = *((void *)this + 113);
  if (*((void *)this + 114) != v270)
  {
    uint64_t v271 = 0;
    unint64_t v272 = 0;
    do
    {
      __p.__r_.__value_.__r.__words[0] = v270 + v271;
      size_t v273 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v319, (const void **)(v270 + v271), (uint64_t)&std::piecewise_construct, (long long **)&__p);
      __int16 v274 = (long long *)(v273 + 7);
      int v275 = v303;
      if ((unint64_t)v303 >= v304)
      {
        std::string::size_type v277 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v302, v274);
      }
      else
      {
        if (*((char *)v273 + 79) < 0)
        {
          std::string::__init_copy_ctor_external(v303, (const std::string::value_type *)v273[7], v273[8]);
        }
        else
        {
          long long v276 = *v274;
          v303->__r_.__value_.__r.__words[2] = v273[9];
          *(_OWORD *)&v275->__r_.__value_.__l.__data_ = v276;
        }
        std::string::size_type v277 = v275 + 1;
      }
      uint64_t v303 = v277;
      ++v272;
      uint64_t v270 = *((void *)this + 113);
      v271 += 24;
    }
    while (v272 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 114) - v270) >> 3));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  UTFString::join<std::string,std::string>((uint64_t)v300, v302, (uint64_t)v303, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v278 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    Censor::global_plaintext(&__p, (uint64_t)&buf);
    uint64_t v279 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)uint64_t v310 = 136315138;
    unint64_t v311 = v279;
    _os_log_impl(&dword_20CD80000, v278, OS_LOG_TYPE_DEFAULT, "Neural phone embeddings: %s ", v310, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__p, (uint64_t)&buf);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v281 = &__p;
  }
  else {
    std::string v281 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(5, "Neural phone embeddings: %s ", v280, v281);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v282 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&__p, (uint64_t)&v309);
    uint64_t v283 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)uint64_t v310 = 136315138;
    unint64_t v311 = v283;
    _os_log_impl(&dword_20CD80000, v282, OS_LOG_TYPE_INFO, "Language embeddings: %s", v310, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__p, (uint64_t)&v309);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v285 = &__p;
  }
  else {
    int v285 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(6, "Language embeddings: %s", v284, v285);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v286 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&__p, (uint64_t)v300);
    uint64_t v287 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)uint64_t v310 = 136315138;
    unint64_t v311 = v287;
    _os_log_impl(&dword_20CD80000, v286, OS_LOG_TYPE_INFO, "Dialog vector: %s", v310, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__p, (uint64_t)v300);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v289 = &__p;
  }
  else {
    int v289 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(6, "Dialog vector: %s", v288, v289);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&__p, *((void *)this + 21));
  __int16 v290 = (uint64_t **)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    Observable::emit((uint64_t **)__p.__r_.__value_.__l.__data_, "tts.feature.neural.phonemes", (char *)this + 856);
    Observable::emit(v290, "tts.feature.neural.dialog_vector", &v302);
  }
  unsigned __int16 v291 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v291 + 8) = 0u;
  *(void *)unsigned __int16 v291 = off_26C215330;
  *((_OWORD *)v291 + 2) = 0u;
  *((void *)v291 + 3) = v291 + 32;
  Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)(v291 + 24), (unint64_t *)&v305);
  Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v291 + 24), (unint64_t *)this + 105);
  unint64_t v298 = v291 + 24;
  uint64_t v299 = (std::__shared_weak_count *)v291;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v291 + 1, 1uLL, memory_order_relaxed);
  (*(void (**)(NeuralAdapterModule *, char **))(*(void *)this + 72))(this, &v298);
  if (v299) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v299);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v291);
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (v301 < 0) {
    operator delete(v300[0]);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v302;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v319, (void *)v319.__r_.__value_.__l.__size_);
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v309.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v306) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v306);
  }
}

void sub_20D3DA924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  *(void *)(v48 - 136) = v47;
  if (a46 < 0) {
    operator delete(__p);
  }
  a35 = (void *)(v48 - 144);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  _Unwind_Resume(a1);
}

void UTFString::join<std::string,int>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v9 = 0;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  std::accumulate[abi:ne180100]<std::__wrap_iter<int const*>,std::string,std::string UTFString::join<std::string,int>(std::vector<int> const&,std::string const&)::{lambda(std::string,int)#1}>(a1, a2, a3, (uint64_t)v8, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[0]);
  }
}

void sub_20D3DAE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_20D3DAEA8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void NeuralAdapterModule::find_last_char(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  char v3 = *(unsigned char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (const uint8_t *)a2;
  }
  else {
    uint64_t v4 = *(const uint8_t **)a2;
  }
  if (v3 >= 0) {
    LODWORD(v5) = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  int v16 = v4;
  unint64_t v17 = v5 | ((unint64_t)v5 << 32);
  if (!v5) {
    return;
  }
  uint64_t v8 = (int)v5 - 1;
  LODWORD(v17) = v5 - 1;
  if ((char)v4[v8] <= -65)
  {
    LODWORD(v8) = utf8_back1SafeBody(v4, 0, v8);
    LODWORD(v17) = v8;
  }
  unsigned int v9 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v16);
  UTFString::push_back_codepoint<std::string>((std::string *)a1, v9);
  if (!v8 || a3 == 0) {
    return;
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v11 = (int)v8 - 1;
  LODWORD(v17) = v8 - 1;
  if ((char)v4[v11] <= -65) {
    LODWORD(v17) = utf8_back1SafeBody(v4, 0, v11);
  }
  unsigned int v12 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v16);
  UTFString::push_back_codepoint<std::string>(&__p, v12);
  char v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ == 1)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_21:
      if (p_p->__r_.__value_.__s.__data_[0] == 32) {
        goto LABEL_24;
      }
    }
  }
  else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 1)
  {
    p_p = &__p;
    goto LABEL_21;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 23) = 0;
LABEL_24:
    if ((v13 & 0x80) == 0) {
      return;
    }
    goto LABEL_25;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_25:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20D3DB020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void TacotronPhoneFeature::TacotronPhoneFeature(std::string *this, long long *a2, long long *a3, int a4, int a5, std::string::value_type a6, std::string::value_type a7, std::string::value_type a8, float a9, float a10)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v19;
  }
  long long v20 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v21 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  HIDWORD(this[2].__r_.__value_.__r.__words[0]) = a5;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  this[2].__r_.__value_.__s.__data_[12] = a8;
  this[2].__r_.__value_.__s.__data_[13] = a6;
  this[2].__r_.__value_.__s.__data_[14] = a7;
  *(float *)&this[2].__r_.__value_.__r.__words[2] = a9;
  *((float *)&this[2].__r_.__value_.__r.__words[2] + 1) = a10;
  this[3].__r_.__value_.__r.__words[0] = 0x80000000000000;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
}

void sub_20D3DB138(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void TacotronPhoneFeature::~TacotronPhoneFeature(void **this)
{
  uint64_t v2 = this + 10;
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t NeuralAdapterModule::save_break(NeuralAdapterModule *this, int a2, int a3, int a4)
{
  unsigned __int8 v4 = a2;
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)*((void *)this + 126);
  uint64_t v7 = v6;
  if (v6 != *((char **)this + 127))
  {
    uint64_t v7 = (char *)*((void *)this + 127);
    do
    {
      int v8 = *(v7 - 8);
      if (v8 == 44)
      {
        if (a2 == 35) {
          goto LABEL_10;
        }
      }
      else if (v8 == 46 && a2 != 46)
      {
        goto LABEL_10;
      }
      v7 -= 32;
      *((void *)this + 127) = v7;
    }
    while (v7 != v6);
    uint64_t v7 = v6;
  }
LABEL_10:
  if (*((char *)this + 975) < 0) {
    uint64_t v9 = *((void *)this + 120);
  }
  else {
    uint64_t v9 = *((unsigned __int8 *)this + 975);
  }
  int v10 = a3 - a4;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 108) - *((void *)this + 107)) >> 3);
  uint64_t v12 = v9 - 1;
  unint64_t v13 = *((void *)this + 128);
  if ((unint64_t)v7 >= v13)
  {
    uint64_t v15 = (v7 - v6) >> 5;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v13 - (void)v6;
    if (v17 >> 4 > v16) {
      unint64_t v16 = v17 >> 4;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v19 = (char *)operator new(32 * v18);
    long long v20 = &v19[32 * v15];
    *(void *)long long v20 = v10;
    *((void *)v20 + 1) = v11;
    *((void *)v20 + 2) = v12;
    v20[24] = v4;
    int64_t v14 = v20 + 32;
    if (v7 == v6)
    {
      unint64_t v22 = &v19[32 * v15];
    }
    else
    {
      do
      {
        long long v21 = *((_OWORD *)v7 - 2);
        unint64_t v22 = v20 - 32;
        *(_OWORD *)(v20 - 23) = *(_OWORD *)(v7 - 23);
        *((_OWORD *)v20 - 2) = v21;
        v7 -= 32;
        v20 -= 32;
      }
      while (v7 != v6);
    }
    *((void *)this + 126) = v22;
    *((void *)this + 127) = v14;
    *((void *)this + 128) = &v19[32 * v18];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)uint64_t v7 = v10;
    *((void *)v7 + 1) = v11;
    *((void *)v7 + 2) = v12;
    unsigned char v7[24] = a2;
    int64_t v14 = v7 + 32;
  }
  *((void *)this + 127) = v14;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v25 = *((void *)this + 127);
    uint64_t v27 = *(void *)(v25 - 32);
    uint64_t v26 = *(void *)(v25 - 24);
    *(_DWORD *)std::string buf = 67109632;
    int v30 = v4;
    __int16 v31 = 2048;
    uint64_t v32 = v27 + 1;
    __int16 v33 = 2048;
    uint64_t v34 = v26;
    _os_log_impl(&dword_20CD80000, v23, OS_LOG_TYPE_INFO, "Potential break [%c] %zu words %zu phones", buf, 0x1Cu);
  }
  return Diagnostics::log(6, "Potential break [%c] %zu words %zu phones", v24, v4, *(void *)(*((void *)this + 127) - 32) + 1, *(void *)(*((void *)this + 127) - 24));
}

void std::vector<MarkerRecord>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MarkerRecord*>,std::__wrap_iter<MarkerRecord*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v21 = v12 - a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        uint64_t v22 = a3 + 56 * a5;
      }
      else
      {
        uint64_t v22 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MarkerRecord>,MarkerRecord*,MarkerRecord*,MarkerRecord*>(v9, v22, a4, *(void *)(v9 - 8));
        if (v21 < 1) {
          return;
        }
      }
      std::vector<MarkerRecord>::__move_range((uint64_t)a1, v7, v12, v7 + 56 * a5);
      for (; v6 != v22; v7 += 56)
      {
        *(void *)uint64_t v7 = *(void *)v6;
        std::string::operator=((std::string *)(v7 + 8), (const std::string *)(v6 + 8));
        __int16 v23 = *(_WORD *)(v6 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v6 + 32);
        *(_WORD *)(v7 + 48) = v23;
        v6 += 56;
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x249249249249249) {
        unint64_t v18 = 0x492492492492492;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v37 = v9;
      if (v18)
      {
        long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v18);
      }
      else
      {
        long long v19 = 0;
        uint64_t v20 = 0;
      }
      uint64_t v24 = 0;
      uint64_t v25 = &v19[56 * v15];
      v34[0] = v19;
      v34[1] = v25;
      uint64_t v35 = v25;
      uint64_t v36 = &v19[56 * v20];
      uint64_t v26 = 56 * a5;
      uint64_t v27 = &v25[56 * a5];
      do
      {
        uint64_t v28 = v6 + v24;
        *(void *)&v25[v24] = *(void *)(v6 + v24);
        unint64_t v29 = (std::string *)&v25[v24 + 8];
        int v30 = (const std::string::value_type **)(v6 + v24 + 8);
        if (*(char *)(v6 + v24 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v29, *v30, *(void *)(v28 + 16));
        }
        else
        {
          long long v31 = *(_OWORD *)v30;
          *(void *)&v25[v24 + 24] = *(void *)(v6 + v24 + 24);
          *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
        }
        uint64_t v32 = &v25[v24];
        long long v33 = *(_OWORD *)(v28 + 32);
        *((_WORD *)v32 + 24) = *(_WORD *)(v28 + 48);
        *((_OWORD *)v32 + 2) = v33;
        v24 += 56;
      }
      while (v26 != v24);
      uint64_t v35 = v27;
      std::vector<MarkerRecord>::__swap_out_circular_buffer(a1, v34, v7);
      std::__split_buffer<MarkerRecord>::~__split_buffer((uint64_t)v34);
    }
  }
}

void sub_20D3DB6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_20D3DB734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer begin = this->__begin_;
  std::vector<std::string>::pointer end = this->__end_;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v6 = __sz - v5;
  if (__sz <= v5)
  {
    if (__sz < v5)
    {
      unint64_t v16 = &begin[__sz];
      while (end != v16)
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      this->__end_ = v16;
    }
  }
  else
  {
    p_end_cap = &this->__end_cap_;
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v6)
    {
      size_t v17 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(end, v17);
      this->__end_ = (std::vector<std::string>::pointer)((char *)end + v17);
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::string>::size_type v10 = 2 * v9;
      if (2 * v9 <= __sz) {
        std::vector<std::string>::size_type v10 = __sz;
      }
      if (v9 >= 0x555555555555555) {
        unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v11);
      uint64_t v13 = v12 + v5;
      __v.__first_ = v12;
      __v.__begin_ = v13;
      __v.__end_cap_.__value_ = &v12[v14];
      size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v13, v15);
      __v.__end_ = (std::string *)((char *)v13 + v15);
      std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
}

void sub_20D3DB8DC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

__n128 std::vector<MarkerRecord>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  else
  {
    unint64_t v6 = a2 + v4 - a4;
    uint64_t v7 = *(void *)(a1 + 8);
    do
    {
      *(void *)uint64_t v7 = *(void *)v6;
      long long v8 = *(_OWORD *)(v6 + 8);
      *(void *)(v7 + 24) = *(void *)(v6 + 24);
      *(_OWORD *)(v7 + 8) = v8;
      *(void *)(v6 + 16) = 0;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 8) = 0;
      __n128 result = *(__n128 *)(v6 + 32);
      *(_WORD *)(v7 + 48) = *(_WORD *)(v6 + 48);
      *(__n128 *)(v7 + 32) = result;
      v7 += 56;
      v6 += 56;
    }
    while (v6 < a3);
  }
  *(void *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = -8 * ((v4 - a4) >> 3);
    do
    {
      uint64_t v12 = v5 + v10;
      uint64_t v13 = v4 + v10;
      *(void *)(v4 + v10 - 56) = *(void *)(v5 + v10 - 56);
      uint64_t v14 = (void **)(v4 + v10 - 48);
      if (*(char *)(v4 + v10 - 25) < 0) {
        operator delete(*v14);
      }
      long long v15 = *(_OWORD *)(v12 - 48);
      *(void *)(v4 + v10 - 32) = *(void *)(v12 - 32);
      *(_OWORD *)uint64_t v14 = v15;
      *(unsigned char *)(v12 - 25) = 0;
      *(unsigned char *)(v12 - 48) = 0;
      __n128 result = *(__n128 *)(v12 - 24);
      *(_WORD *)(v13 - 8) = *(_WORD *)(v12 - 8);
      *(__n128 *)(v13 - 24) = result;
      v10 -= 56;
    }
    while (v11 != v10);
  }
  return result;
}

uint64_t std::vector<MarkerRecord>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 2;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MarkerRecord>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  uint64_t v9 = a1[1];
  uint64_t v10 = a2[2];
  uint64_t v19 = v10;
  uint64_t v20 = v10;
  v17[0] = v7;
  v17[1] = &v19;
  void v17[2] = &v20;
  if (v9 != v3)
  {
    do
    {
      *(void *)uint64_t v10 = *(void *)v3;
      long long v11 = *(_OWORD *)(v3 + 8);
      *(void *)(v10 + 24) = *(void *)(v3 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      *(void *)(v3 + 16) = 0;
      *(void *)(v3 + 24) = 0;
      *(void *)(v3 + 8) = 0;
      long long v12 = *(_OWORD *)(v3 + 32);
      *(_WORD *)(v10 + 48) = *(_WORD *)(v3 + 48);
      *(_OWORD *)(v10 + 32) = v12;
      v10 += 56;
      v3 += 56;
    }
    while (v3 != v9);
    uint64_t v20 = v10;
  }
  char v18 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MarkerRecord>,MarkerRecord*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v17);
  a2[2] = v10;
  uint64_t v13 = *a1;
  *a1 = a2[1];
  a2[1] = v13;
  uint64_t v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return v6;
}

void NeuralAdapterModule::process_bookmark(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const std::string *)(a2 + 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dialog=");
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v4 = v53;
  }
  else {
    std::string::size_type v4 = v52;
  }
  std::string::basic_string(&v54, v3, 0, v4, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v6 = v54.__r_.__value_.__l.__size_ == 7
      && *(_DWORD *)v54.__r_.__value_.__l.__data_ == 1818323300
      && *(_DWORD *)(v54.__r_.__value_.__r.__words[0] + 3) == 1030188908;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v6 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 7
      && LODWORD(v54.__r_.__value_.__l.__data_) == 1818323300
      && *(_DWORD *)((char *)v54.__r_.__value_.__r.__words + 3) == 1030188908;
  }
  if ((char)v53 < 0)
  {
    operator delete(__p);
    if (v6) {
      goto LABEL_24;
    }
  }
  else if (v6)
  {
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>(&__p, "dialog=");
    if ((v53 & 0x80u) == 0) {
      std::string::size_type v8 = v53;
    }
    else {
      std::string::size_type v8 = v52;
    }
    std::string::basic_string(&v54, v3, v8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    uint64_t v9 = (void **)(a1 + 304);
    if (*(char *)(a1 + 327) < 0) {
      operator delete(*v9);
    }
    *(_OWORD *)uint64_t v9 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
    *(void *)(a1 + 320) = *((void *)&v54.__r_.__value_.__l + 2);
    *((unsigned char *)&v54.__r_.__value_.__s + 23) = 0;
    v54.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_199;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentpitch=");
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v10 = v53;
  }
  else {
    std::string::size_type v10 = v52;
  }
  std::string::basic_string(&v54, v3, 0, v10, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v54.__r_.__value_.__l.__size_ == 10
       && *(void *)v54.__r_.__value_.__l.__data_ == 0x63746970746E6573
       && *(_WORD *)(v54.__r_.__value_.__r.__words[0] + 8) == 15720;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 10
       && v54.__r_.__value_.__r.__words[0] == 0x63746970746E6573
       && LOWORD(v54.__r_.__value_.__r.__words[1]) == 15720;
  }
  if ((char)v53 < 0)
  {
    operator delete(__p);
    if (v12) {
      goto LABEL_54;
    }
  }
  else if (v12)
  {
LABEL_54:
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentpitch=");
    if ((v53 & 0x80u) == 0) {
      std::string::size_type v14 = v53;
    }
    else {
      std::string::size_type v14 = v52;
    }
    std::string::basic_string(&v54, v3, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      float v15 = atof((const char *)&v54);
      *(float *)(a1 + 328) = v15;
      goto LABEL_199;
    }
    std::string::size_type v19 = v54.__r_.__value_.__r.__words[0];
    float v20 = atof(v54.__r_.__value_.__l.__data_);
    *(float *)(a1 + 328) = v20;
LABEL_197:
    long long v49 = (void *)v19;
LABEL_198:
    operator delete(v49);
LABEL_199:
    if ((char)v53 < 0) {
      operator delete(__p);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentpitchrange=");
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v16 = v53;
  }
  else {
    std::string::size_type v16 = v52;
  }
  std::string::basic_string(&v54, v3, 0, v16, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v18 = v54.__r_.__value_.__l.__size_ == 15
       && *(void *)v54.__r_.__value_.__l.__data_ == 0x63746970746E6573
       && *(void *)(v54.__r_.__value_.__r.__words[0] + 7) == 0x3D65676E61726863;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v18 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 15
       && v54.__r_.__value_.__r.__words[0] == 0x63746970746E6573
       && *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7) == 0x3D65676E61726863;
  }
  if ((char)v53 < 0)
  {
    operator delete(__p);
    if (v18) {
      goto LABEL_84;
    }
  }
  else if (v18)
  {
LABEL_84:
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentpitchrange=");
    if ((v53 & 0x80u) == 0) {
      std::string::size_type v22 = v53;
    }
    else {
      std::string::size_type v22 = v52;
    }
    std::string::basic_string(&v54, v3, v22, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      float v23 = atof((const char *)&v54);
      *(float *)(a1 + 332) = v23;
      goto LABEL_199;
    }
    std::string::size_type v19 = v54.__r_.__value_.__r.__words[0];
    float v27 = atof(v54.__r_.__value_.__l.__data_);
    *(float *)(a1 + 332) = v27;
    goto LABEL_197;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentduration=");
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v24 = v53;
  }
  else {
    std::string::size_type v24 = v52;
  }
  std::string::basic_string(&v54, v3, 0, v24, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v26 = v54.__r_.__value_.__l.__size_ == 13
       && *(void *)v54.__r_.__value_.__l.__data_ == 0x61727564746E6573
       && *(void *)(v54.__r_.__value_.__r.__words[0] + 5) == 0x3D6E6F6974617275;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v26 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 13
       && v54.__r_.__value_.__r.__words[0] == 0x61727564746E6573
       && *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 5) == 0x3D6E6F6974617275;
  }
  if ((char)v53 < 0)
  {
    operator delete(__p);
    if (v26) {
      goto LABEL_114;
    }
  }
  else if (v26)
  {
LABEL_114:
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentduration=");
    if ((v53 & 0x80u) == 0) {
      std::string::size_type v29 = v53;
    }
    else {
      std::string::size_type v29 = v52;
    }
    std::string::basic_string(&v54, v3, v29, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      float v30 = atof((const char *)&v54);
      *(float *)(a1 + 336) = v30;
      goto LABEL_199;
    }
    std::string::size_type v19 = v54.__r_.__value_.__r.__words[0];
    float v34 = atof(v54.__r_.__value_.__l.__data_);
    *(float *)(a1 + 336) = v34;
    goto LABEL_197;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentenergy=");
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v31 = v53;
  }
  else {
    std::string::size_type v31 = v52;
  }
  std::string::basic_string(&v54, v3, 0, v31, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v33 = v54.__r_.__value_.__l.__size_ == 11
       && *(void *)v54.__r_.__value_.__l.__data_ == 0x72656E65746E6573
       && *(void *)(v54.__r_.__value_.__r.__words[0] + 3) == 0x3D796772656E6574;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v33 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 11
       && v54.__r_.__value_.__r.__words[0] == 0x72656E65746E6573
       && *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 3) == 0x3D796772656E6574;
  }
  if ((char)v53 < 0) {
    operator delete(__p);
  }
  if (v33)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentenergy=");
    if ((v53 & 0x80u) == 0) {
      std::string::size_type v36 = v53;
    }
    else {
      std::string::size_type v36 = v52;
    }
    std::string::basic_string(&v54, v3, v36, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      float v37 = atof((const char *)&v54);
      *(float *)(a1 + 340) = v37;
      goto LABEL_199;
    }
    std::string::size_type v19 = v54.__r_.__value_.__r.__words[0];
    float v41 = atof(v54.__r_.__value_.__l.__data_);
    *(float *)(a1 + 340) = v41;
    goto LABEL_197;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "senttilt=");
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v38 = v53;
  }
  else {
    std::string::size_type v38 = v52;
  }
  std::string::basic_string(&v54, v3, 0, v38, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v40 = v54.__r_.__value_.__l.__size_ == 9
       && *(void *)v54.__r_.__value_.__l.__data_ == 0x746C6974746E6573
       && *(unsigned char *)(v54.__r_.__value_.__r.__words[0] + 8) == 61;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v40 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 9
       && v54.__r_.__value_.__r.__words[0] == 0x746C6974746E6573
       && v54.__r_.__value_.__s.__data_[8] == 61;
  }
  if ((char)v53 < 0) {
    operator delete(__p);
  }
  if (v40)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "senttilt=");
    if ((v53 & 0x80u) == 0) {
      std::string::size_type v43 = v53;
    }
    else {
      std::string::size_type v43 = v52;
    }
    std::string::basic_string(&v54, v3, v43, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      float v44 = atof((const char *)&v54);
      *(float *)(a1 + 344) = v44;
      goto LABEL_199;
    }
    std::string::size_type v19 = v54.__r_.__value_.__r.__words[0];
    float v50 = atof(v54.__r_.__value_.__l.__data_);
    *(float *)(a1 + 344) = v50;
    goto LABEL_197;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentstyle=");
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v45 = v53;
  }
  else {
    std::string::size_type v45 = v52;
  }
  std::string::basic_string(&v54, v3, 0, v45, (std::allocator<char> *)&v55);
  BOOL v46 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "sentstyle=");
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if ((char)v53 < 0) {
    operator delete(__p);
  }
  if (v46)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentstyle=");
    if ((v53 & 0x80u) == 0) {
      std::string::size_type v47 = v53;
    }
    else {
      std::string::size_type v47 = v52;
    }
    std::string::basic_string(&v54, v3, v47, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v48 = &v54;
    }
    else {
      uint64_t v48 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    MEMORY[0x210558E70](a1 + 816, v48);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_199;
    }
    long long v49 = (void *)v54.__r_.__value_.__r.__words[0];
    goto LABEL_198;
  }
}

void sub_20D3DC400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void TacotronPhoneFeature::TacotronPhoneFeature(std::string *this, long long *a2, long long *a3, int a4, int a5, int a6, float a7, float a8)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v15 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v15;
  }
  std::string::size_type v16 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v17 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  HIDWORD(this[2].__r_.__value_.__r.__words[0]) = a5;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  WORD2(this[2].__r_.__value_.__r.__words[1]) = 0;
  this[2].__r_.__value_.__s.__data_[14] = 1;
  *(float *)&this[2].__r_.__value_.__r.__words[2] = a7;
  *((float *)&this[2].__r_.__value_.__r.__words[2] + 1) = a8;
  *(float *)&this[3].__r_.__value_.__l.__data_ = (float)a6;
  HIDWORD(this[3].__r_.__value_.__r.__words[0]) = 0x800000;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
}

void sub_20D3DC540(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void NeuralAdapterModule::~NeuralAdapterModule(NeuralAdapterModule *this)
{
  NeuralAdapterModule::~NeuralAdapterModule(this);
  JUMPOUT(0x2105595E0);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  void *v4;
  std::__shared_weak_count *v5;
  void **v6;

  *(void *)this = off_26C2028C0;
  uint64_t v2 = (void *)*((void *)this + 126);
  if (v2)
  {
    *((void *)this + 127) = v2;
    operator delete(v2);
  }
  BOOL v6 = (void **)((char *)this + 976);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 975) < 0) {
    operator delete(*((void **)this + 119));
  }
  BOOL v6 = (void **)((char *)this + 928);
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v6);
  BOOL v6 = (void **)((char *)this + 904);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  BOOL v6 = (void **)((char *)this + 880);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  BOOL v6 = (void **)((char *)this + 856);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 106);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 839) < 0) {
    operator delete(*((void **)this + 102));
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)this + 100));
  std::string::size_type v4 = (void *)*((void *)this + 96);
  if (v4)
  {
    *((void *)this + 97) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 93));
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)this + 88));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 85));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)this + 82));
  if (*((char *)this + 639) < 0) {
    operator delete(*((void **)this + 77));
  }
  if (*((char *)this + 615) < 0) {
    operator delete(*((void **)this + 74));
  }
  if (*((char *)this + 591) < 0) {
    operator delete(*((void **)this + 71));
  }
  std::__tree<std::string>::destroy((uint64_t)this + 536, *((char **)this + 68));
  std::__tree<std::string>::destroy((uint64_t)this + 504, *((char **)this + 64));
  std::__tree<std::string>::destroy((uint64_t)this + 472, *((char **)this + 60));
  std::__tree<std::string>::destroy((uint64_t)this + 448, *((char **)this + 57));
  std::__tree<std::string>::destroy((uint64_t)this + 424, *((char **)this + 54));
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  if (*((char *)this + 327) < 0) {
    operator delete(*((void **)this + 38));
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 35));
  Module::~Module(this);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::map<std::string,int>,0>(void *a1, unsigned __int8 *a2, const void **a3, const void ***a4)
{
  if (*a2 != 1)
  {
    exceptiounint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v20 = *a2;
    if (v20 > 9) {
      uint64_t v21 = "number";
    }
    else {
      uint64_t v21 = off_2641152A0[v20];
    }
    std::string::basic_string[abi:ne180100]<0>(&v24, v21);
    std::string::size_type v22 = std::string::insert(&v24, 0, "cannot use value() with ");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    std::string::size_type v28 = v22->__r_.__value_.__r.__words[2];
    long long v27 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v27, exception);
  }
  *(void *)&long long v27 = a2;
  std::string::size_type v28 = 0;
  uint64_t v29 = 0;
  unint64_t v30 = 0x8000000000000000;
  *((void *)&v27 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)a2 + 1), a3);
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = (unint64_t)a2;
  v24.__r_.__value_.__r.__words[2] = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0x8000000000000000;
  int v7 = *a2;
  if (v7 == 2)
  {
    v24.__r_.__value_.__r.__words[2] = *(void *)(*((void *)a2 + 1) + 8);
  }
  else if (v7 == 1)
  {
    v24.__r_.__value_.__l.__size_ = *((void *)a2 + 1) + 8;
  }
  else
  {
    unint64_t v26 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = a1 + 1;
    std::string::size_type v10 = *a4;
    std::string::size_type v8 = a4 + 1;
    uint64_t v9 = v10;
    if (v10 != (const void **)v8)
    {
      do
      {
        long long v11 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a1 + 1, &v32, &v31, v9 + 4);
        if (!*v11)
        {
          BOOL v12 = (char *)operator new(0x40uLL);
          v24.__r_.__value_.__l.__size_ = (std::string::size_type)(a1 + 1);
          v24.__r_.__value_.__s.__data_[16] = 0;
          uint64_t v13 = (std::string *)(v12 + 32);
          if (*((char *)v9 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)v9[4], (std::string::size_type)v9[5]);
          }
          else
          {
            long long v14 = *((_OWORD *)v9 + 2);
            *((void *)v12 + 6) = v9[6];
            *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
          }
          *((_DWORD *)v12 + 14) = *((_DWORD *)v9 + 14);
          std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v32, v11, (uint64_t *)v12);
        }
        long long v15 = (const void **)v9[1];
        if (v15)
        {
          do
          {
            std::string::size_type v16 = (const void ***)v15;
            long long v15 = (const void **)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            std::string::size_type v16 = (const void ***)v9[2];
            BOOL v17 = *v16 == v9;
            uint64_t v9 = (const void **)v16;
          }
          while (!v17);
        }
        uint64_t v9 = (const void **)v16;
      }
      while (v16 != v8);
    }
  }
  else
  {
    BOOL v18 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v27);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,int>,std::map<std::string,int>,0>((char ***)a1, v18);
  }
}

void sub_20D3DC9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v24, v25);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*v23);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::string>::__assign_unique<std::string const*>(uint64_t **result, std::string *a2, std::string *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    BOOL v6 = *result;
    int v7 = result[1];
    uint64_t *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      std::string::size_type v8 = (uint64_t *)v6[1];
    }
    else {
      std::string::size_type v8 = v6;
    }
    BOOL v12 = result;
    uint64_t v13 = v8;
    long long v14 = v8;
    if (v8)
    {
      uint64_t v13 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        do
        {
          uint64_t v9 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)v5, &v15, (const void **)&a2->__r_.__value_.__l.__data_);
          if (*v9)
          {
            std::string::size_type v8 = v14;
          }
          else
          {
            std::string::size_type v10 = v9;
            std::string::operator=((std::string *)(v8 + 4), a2);
            std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v5, v15, v10, v8);
            std::string::size_type v8 = v13;
            long long v14 = v13;
            if (!v13)
            {
              ++a2;
              break;
            }
            uint64_t v13 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v13);
          }
          ++a2;
          if (v8) {
            BOOL v11 = a2 == a3;
          }
          else {
            BOOL v11 = 1;
          }
        }
        while (!v11);
      }
    }
    __n128 result = (uint64_t **)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v12);
  }
  while (a2 != a3)
  {
    __n128 result = (uint64_t **)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)a2);
    ++a2;
  }
  return result;
}

void sub_20D3DCB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t NeuralAdapterModule::NeuralAdapterModule(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  v139[20] = *MEMORY[0x263EF8340];
  BOOL v6 = (std::__shared_weak_count *)a3[1];
  v101[0] = *a3;
  v101[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Module::Module(a1, (char *)a2, v101);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)a1 = off_26C2028C0;
  uint64_t v7 = a1 + 280;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 296) = _D0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 304), "narrator");
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 344) = 0;
  std::string::size_type v93 = (void **)(a1 + 376);
  uint64_t v96 = (void **)(a1 + 400);
  unint64_t v97 = (void **)(a1 + 352);
  *(_OWORD *)(a1 + 328) = 0u;
  uint64_t v13 = a1 + 432;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = a1 + 432;
  std::string::size_type v90 = (uint64_t *)(a1 + 448);
  long long v91 = (uint64_t *)(a1 + 424);
  *(_OWORD *)(a1 + 456) = 0u;
  uint64_t v14 = a1 + 456;
  *(void *)(a1 + 448) = a1 + 456;
  std::string::size_type v89 = (uint64_t *)(a1 + 472);
  uint64_t v15 = a1 + 480;
  *(_OWORD *)(a1 + 480) = 0u;
  *(void *)(a1 + 472) = a1 + 480;
  std::string::size_type v16 = (uint64_t *)(a1 + 512);
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 504) = a1 + 512;
  unint64_t v99 = (uint64_t **)(a1 + 536);
  unint64_t v100 = (uint64_t **)(a1 + 504);
  *(_OWORD *)(a1 + 544) = 0u;
  int v87 = (uint64_t *)(a1 + 544);
  *(void *)(a1 + 536) = a1 + 544;
  std::string::size_type v94 = (void **)(a1 + 592);
  uint64_t v95 = (void **)(a1 + 568);
  uint64_t v92 = (void **)(a1 + 616);
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 648) = a1 + 656;
  *(_OWORD *)(a1 + 680) = 0u;
  uint64_t v86 = a1 + 680;
  *(void *)(a1 + 672) = a1 + 680;
  *(void *)(a1 + 696) = a1 + 704;
  *(_OWORD *)(a1 + 744) = 0u;
  uint64_t v17 = a1 + 744;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(void *)(a1 + 736) = a1 + 744;
  *(_DWORD *)(a1 + 760) = -1;
  *(void *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  BOOL v18 = operator new(0x90uLL);
  int64_t v98 = (char *)(a1 + 768);
  *(void *)(a1 + 768) = v18;
  *(void *)(a1 + 784) = v18 + 9;
  v18[6] = xmmword_20D6C7418;
  v18[7] = unk_20D6C7428;
  v18[8] = xmmword_20D6C7438;
  void v18[2] = xmmword_20D6C73D8;
  v18[3] = unk_20D6C73E8;
  void v18[4] = xmmword_20D6C73F8;
  v18[5] = unk_20D6C7408;
  *BOOL v18 = xmmword_20D6C73B8;
  v18[1] = unk_20D6C73C8;
  *(void *)(a1 + 776) = v18 + 9;
  *(void *)(a1 + 808) = 0;
  *(void *)(a1 + 800) = 0;
  uint64_t v88 = a1 + 800;
  *(void *)(a1 + 792) = a1 + 800;
  *(void *)(a1 + 1008) = 0;
  *(void *)(a1 + 1024) = 0;
  *(void *)(a1 + 1016) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(void *)(a1 + 992) = 0;
  std::string::size_type v19 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phone_map");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,int>,std::map<std::string,int>,0>((char ***)&v133, v19);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 280));
  std::string::size_type size = v133.__r_.__value_.__l.__size_;
  *(void *)(a1 + 272) = v133.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 280) = size;
  std::string::size_type v21 = v133.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 288) = *((void *)&v133.__r_.__value_.__l + 2);
  if (v21)
  {
    *(void *)(size + 16) = v7;
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133.__r_.__value_.__l.__size_;
    *(_OWORD *)&v133.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type size = 0;
  }
  else
  {
    *(void *)(a1 + 272) = v7;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)size);
  std::string::basic_string[abi:ne180100]<0>(&__p, "language_map");
  *(_OWORD *)&v110[0].__r_.__value_.__r.__words[1] = 0uLL;
  v110[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v110[0].__r_.__value_.__l.__size_;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::map<std::string,int>,0>(&v133, a2, (const void **)&__p.__r_.__value_.__l.__data_, (const void ***)v110);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 744));
  std::string::size_type v22 = v133.__r_.__value_.__l.__size_;
  *(void *)(a1 + 736) = v133.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 744) = v22;
  std::string::size_type v23 = v133.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 752) = *((void *)&v133.__r_.__value_.__l + 2);
  if (v23)
  {
    *(void *)(v22 + 16) = v17;
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133.__r_.__value_.__l.__size_;
    *(_OWORD *)&v133.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v22 = 0;
  }
  else
  {
    *(void *)(a1 + 736) = v17;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v22);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v110[0].__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v24 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "punctuation");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)&v133, v24);
  std::__tree<std::string>::destroy((uint64_t)v91, *(char **)(a1 + 432));
  std::string::size_type v25 = v133.__r_.__value_.__l.__size_;
  *(void *)(a1 + 424) = v133.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 432) = v25;
  std::string::size_type v26 = v133.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 440) = *((void *)&v133.__r_.__value_.__l + 2);
  if (v26)
  {
    *(void *)(v25 + 16) = v13;
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133.__r_.__value_.__l.__size_;
    *(_OWORD *)&v133.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v25 = 0;
  }
  else
  {
    *long long v91 = v13;
  }
  std::__tree<std::string>::destroy((uint64_t)&v133, (char *)v25);
  std::string::basic_string[abi:ne180100]<0>(v110, "sentence_punctuation");
  std::string::basic_string[abi:ne180100]<0>(&v133, ".");
  std::string::basic_string[abi:ne180100]<0>(&v134, "?");
  std::string::basic_string[abi:ne180100]<0>(v137, "!");
  std::string::basic_string[abi:ne180100]<0>(v138, ":");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v131, (const void **)&v133.__r_.__value_.__l.__data_, 4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&__p, a2, (const void **)&v110[0].__r_.__value_.__l.__data_, (const void ***)&v131);
  std::__tree<std::string>::destroy((uint64_t)v90, *(char **)(a1 + 456));
  std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
  *(void *)(a1 + 448) = __p.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 456) = v27;
  std::string::size_type v28 = __p.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 464) = *((void *)&__p.__r_.__value_.__l + 2);
  if (v28)
  {
    *(void *)(v27 + 16) = v14;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v27 = 0;
  }
  else
  {
    *std::string::size_type v90 = v14;
  }
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)v27);
  std::__tree<std::string>::destroy((uint64_t)&v131, v132[0]);
  for (unint64_t i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 3)
  {
    if (SHIBYTE(v138[0].__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(v138[i / 3].__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v110[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v110, "phrase_punctuation");
  std::string::basic_string[abi:ne180100]<0>(&v133, ",");
  std::string::basic_string[abi:ne180100]<0>(&v134, ";");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v131, (const void **)&v133.__r_.__value_.__l.__data_, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&__p, a2, (const void **)&v110[0].__r_.__value_.__l.__data_, (const void ***)&v131);
  std::__tree<std::string>::destroy((uint64_t)v89, *(char **)(a1 + 480));
  std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
  *(void *)(a1 + 472) = __p.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 480) = v30;
  std::string::size_type v31 = __p.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 488) = *((void *)&__p.__r_.__value_.__l + 2);
  if (v31)
  {
    *(void *)(v30 + 16) = v15;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v30 = 0;
  }
  else
  {
    uint64_t *v89 = v15;
  }
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)v30);
  std::__tree<std::string>::destroy((uint64_t)&v131, v132[0]);
  for (uint64_t j = 0; j != -48; j -= 24)
  {
    if (*(&v136 + j) < 0) {
      operator delete(*(void **)((char *)&v133 + j + 24));
    }
  }
  if (SHIBYTE(v110[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110[0].__r_.__value_.__l.__data_);
  }
  uint64_t v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "eos");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v33, &v133);
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*v97);
  }
  *(_OWORD *)unint64_t v97 = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
  *(void *)(a1 + 368) = *((void *)&v133.__r_.__value_.__l + 2);
  uint64_t v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "word_boundary_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v34, &v133);
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*v96);
  }
  *(_OWORD *)uint64_t v96 = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
  *(void *)(a1 + 416) = *((void *)&v133.__r_.__value_.__l + 2);
  uint64_t v35 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "max_word_limit");
  LODWORD(v133.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v35, (int *)&v133);
  *(_DWORD *)(a1 + 560) = v133.__r_.__value_.__l.__data_;
  std::string::basic_string[abi:ne180100]<0>(&v133, "max_phone_limit");
  LODWORD(__p.__r_.__value_.__l.__data_) = 230;
  *(_DWORD *)(a1 + 564) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&v133.__r_.__value_.__l.__data_, (unsigned int *)&__p);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  uint64_t v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "end_period");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v36, &v133);
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*v95);
  }
  *(_OWORD *)uint64_t v95 = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
  *(void *)(a1 + 584) = *((void *)&v133.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "stress_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, &v133);
  if (*(char *)(a1 + 615) < 0) {
    operator delete(*v94);
  }
  *(_OWORD *)std::string::size_type v94 = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
  *(void *)(a1 + 608) = *((void *)&v133.__r_.__value_.__l + 2);
  *((unsigned char *)&v133.__r_.__value_.__s + 23) = 0;
  v133.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "stress_marker_before");
  __p.__r_.__value_.__s.__data_[0] = 0;
  *(unsigned char *)(a1 + 644) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&v133.__r_.__value_.__l.__data_, (unsigned __int8 *)&__p);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "bos");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, &v133);
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*v93);
  }
  *(_OWORD *)std::string::size_type v93 = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
  *(void *)(a1 + 392) = *((void *)&v133.__r_.__value_.__l + 2);
  *((unsigned char *)&v133.__r_.__value_.__s + 23) = 0;
  v133.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pause_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(",", (char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, &v133);
  if (*(char *)(a1 + 639) < 0) {
    operator delete(*v92);
  }
  *(_OWORD *)uint64_t v92 = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
  *(void *)(a1 + 632) = *((void *)&v133.__r_.__value_.__l + 2);
  *((unsigned char *)&v133.__r_.__value_.__s + 23) = 0;
  v133.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SharedObjectPool::get<SynthesizerConfig>(&v133, *(void *)(a1 + 168));
  float v37 = *(std::__shared_weak_count **)(a1 + 728);
  *(_OWORD *)(a1 + 720) = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "add_trailing_punc");
  __p.__r_.__value_.__s.__data_[0] = 1;
  *(unsigned char *)(a1 + 645) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&v133.__r_.__value_.__l.__data_, (unsigned __int8 *)&__p);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "pause_version");
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  *(_DWORD *)(a1 + 640) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&v133.__r_.__value_.__l.__data_, (unsigned int *)&__p);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "pause_min_duration");
  __p.__r_.__value_.__r.__words[0] = 0x4051800000000000;
  float v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(a2, (const void **)&v133.__r_.__value_.__l.__data_, (uint64_t)&__p);
  *(float *)(a1 + 496) = v38;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "pause_speech_energy");
  __p.__r_.__value_.__r.__words[0] = 0x3FD0000000000000;
  float v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(a2, (const void **)&v133.__r_.__value_.__l.__data_, (uint64_t)&__p);
  *(float *)(a1 + 500) = v39;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "?");
  std::string::basic_string[abi:ne180100]<0>(&v134, ".");
  std::string::basic_string[abi:ne180100]<0>(v137, "!");
  std::__tree<std::string>::__assign_unique<std::string const*>(v100, &v133, v138);
  for (uint64_t k = 0; k != -9; k -= 3)
  {
    if (SHIBYTE(v137[k + 2]) < 0) {
      operator delete((void *)v137[k]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "punctuation_set1");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&v133, a2, (const void **)&__p.__r_.__value_.__l.__data_, (const void ***)v100);
  std::__tree<std::string>::destroy((uint64_t)v100, *(char **)(a1 + 512));
  std::string::size_type v41 = v133.__r_.__value_.__l.__size_;
  *(void *)(a1 + 504) = v133.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 512) = v41;
  std::string::size_type v42 = v133.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 520) = *((void *)&v133.__r_.__value_.__l + 2);
  if (v42)
  {
    *(void *)(v41 + 16) = v16;
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133.__r_.__value_.__l.__size_;
    *(_OWORD *)&v133.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v41 = 0;
  }
  else
  {
    *unint64_t v100 = v16;
  }
  std::__tree<std::string>::destroy((uint64_t)&v133, (char *)v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "punctuation_set1_pause_duration");
  LODWORD(__p.__r_.__value_.__l.__data_) = 1120403456;
  *(float *)(a1 + 528) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(a2, (const void **)&v133.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, ",");
  std::string::basic_string[abi:ne180100]<0>(&v134, ";");
  std::string::basic_string[abi:ne180100]<0>(v137, ":");
  std::__tree<std::string>::__assign_unique<std::string const*>(v99, &v133, v138);
  for (uint64_t m = 0; m != -9; m -= 3)
  {
    if (SHIBYTE(v137[m + 2]) < 0) {
      operator delete((void *)v137[m]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "punctuation_set2");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&v133, a2, (const void **)&__p.__r_.__value_.__l.__data_, (const void ***)v99);
  std::__tree<std::string>::destroy((uint64_t)v99, *(char **)(a1 + 544));
  std::string::size_type v44 = v133.__r_.__value_.__l.__size_;
  *(void *)(a1 + 536) = v133.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 544) = v44;
  std::string::size_type v45 = v133.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 552) = *((void *)&v133.__r_.__value_.__l + 2);
  if (v45)
  {
    *(void *)(v44 + 16) = v87;
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133.__r_.__value_.__l.__size_;
    *(_OWORD *)&v133.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v44 = 0;
  }
  else
  {
    *unint64_t v99 = v87;
  }
  std::__tree<std::string>::destroy((uint64_t)&v133, (char *)v44);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "speaker_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v133.__r_.__value_.__l.__data_, v110);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "speaker_map");
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::map<std::string,int>,0>(&v131, a2, (const void **)&v133.__r_.__value_.__l.__data_, (const void ***)&__p);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)__p.__r_.__value_.__l.__size_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  std::string::size_type v46 = HIBYTE(v110[0].__r_.__value_.__r.__words[2]);
  if ((v110[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v46 = v110[0].__r_.__value_.__l.__size_;
  }
  if (v46
    && v132 != (char **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)&v131, (const void **)&v110[0].__r_.__value_.__l.__data_))
  {
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
    *(_DWORD *)(a1 + 760) = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v131, (const void **)&v110[0].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v133)+ 14);
  }
  std::string::basic_string[abi:ne180100]<0>(&v115, "neural_style_vector");
  if (*a2 != 1)
  {
    exceptiounint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v77 = *a2;
    if (v77 > 9) {
      unint64_t v78 = "number";
    }
    else {
      unint64_t v78 = off_2641152A0[v77];
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v78);
    std::string::size_type v82 = std::string::insert(&__p, 0, "cannot use value() with ");
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v133.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v133, exception);
  }
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v133.__r_.__value_.__r.__words[2] = 0;
  uint64_t v134 = 0;
  unint64_t v135 = 0x8000000000000000;
  v133.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)a2 + 1), (const void **)&v115.__r_.__value_.__l.__data_);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)a2;
  __p.__r_.__value_.__r.__words[2] = 0;
  uint64_t v124 = 0;
  unint64_t v125 = 0x8000000000000000;
  int v47 = *a2;
  if (v47 == 2)
  {
    __p.__r_.__value_.__r.__words[2] = *(void *)(*((void *)a2 + 1) + 8);
  }
  else if (v47 == 1)
  {
    __p.__r_.__value_.__l.__size_ = *((void *)a2 + 1) + 8;
  }
  else
  {
    unint64_t v125 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v133, (unsigned __int8 **)&__p))
  {
    long long v119 = 0;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v119, 0, 0, 0);
  }
  else
  {
    uint64_t v48 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v133);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(&v119, v48);
  }
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v115.__r_.__value_.__l.__data_);
  }
  if (v119 != v120 && v98 != (char *)&v119) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v98, (char *)v119, (uint64_t)v120, (v120 - (unsigned char *)v119) >> 2);
  }
  std::string::basic_string[abi:ne180100]<0>(&v109, "neural_style_map");
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  std::string::size_type v106 = &v107;
  if (*a2 != 1)
  {
    int64_t v79 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v80 = *a2;
    if (v80 > 9) {
      uint64_t v81 = "number";
    }
    else {
      uint64_t v81 = off_2641152A0[v80];
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v81);
    int v84 = std::string::insert(&__p, 0, "cannot use value() with ");
    long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v133.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v133, v79);
  }
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v133.__r_.__value_.__r.__words[2] = 0;
  uint64_t v134 = 0;
  unint64_t v135 = 0x8000000000000000;
  v133.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)a2 + 1), (const void **)&v109.__r_.__value_.__l.__data_);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)a2;
  __p.__r_.__value_.__r.__words[2] = 0;
  uint64_t v124 = 0;
  unint64_t v125 = 0x8000000000000000;
  int v49 = *a2;
  if (v49 == 2)
  {
    __p.__r_.__value_.__r.__words[2] = *(void *)(*((void *)a2 + 1) + 8);
  }
  else if (v49 == 1)
  {
    __p.__r_.__value_.__l.__size_ = *((void *)a2 + 1) + 8;
  }
  else
  {
    unint64_t v125 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v133, (unsigned __int8 **)&__p))
  {
    std::map<std::string,std::vector<float>>::map[abi:ne180100](&v115, (const void ***)&v106);
  }
  else
  {
    float v50 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v133);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::vector<float>>,std::map<std::string,std::vector<float>>,0>(&v115, v50);
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(a1 + 800));
  std::string::size_type v51 = (void *)v115.__r_.__value_.__l.__size_;
  *(void *)(a1 + 792) = v115.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 800) = v51;
  std::string::size_type v52 = v115.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 808) = *((void *)&v115.__r_.__value_.__l + 2);
  if (v52)
  {
    v51[2] = v88;
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115.__r_.__value_.__l.__size_;
    *(_OWORD *)&v115.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v51 = 0;
  }
  else
  {
    *(void *)(a1 + 792) = v88;
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v51);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v107);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  if (v119)
  {
    uint64_t v120 = v119;
    operator delete(v119);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v132[0]);
  if (SHIBYTE(v110[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110[0].__r_.__value_.__l.__data_);
  }
  unsigned __int8 v53 = (long long **)*a3;
  std::string v54 = (std::__shared_weak_count *)a3[1];
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SharedObjectPool::get<VoiceConfig>(&v116, v53);
  std::string::basic_string[abi:ne180100]<0>(&v133, "dialog_sv_map");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v133.__r_.__value_.__l.__data_, &v115);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  std::string::size_type v55 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
  if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v55 = v115.__r_.__value_.__l.__size_;
  }
  long long v56 = (std::string::size_type *)MEMORY[0x263F8C2A8];
  if (v55)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v116 + 40))(&v119);
    std::ifstream::basic_ifstream((uint64_t *)&v133);
    v132[2] = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(&v133, (uint64_t)&v131, 1, (uint64_t)&v106);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](&v131);
    nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::begin((uint64_t)&__p, (unsigned __int8 *)&v106);
    nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::end((uint64_t)v110, (unsigned __int8 *)&v106);
    while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)v110))
    {
      std::string::size_type v57 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(&v109, v57);
      *(void *)&long long v102 = nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::key((unsigned __int8 **)&__p);
      unint64_t v58 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 648), (const void **)v102, (long long **)&v102);
      std::string::size_type v59 = (void *)v58[7];
      if (v59)
      {
        v58[8] = (uint64_t)v59;
        operator delete(v59);
        v58[7] = 0;
        v58[8] = 0;
        v58[9] = 0;
      }
      *(std::string *)(v58 + 7) = v109;
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&__p);
      ++v126;
    }
    if (v114 < 0) {
      operator delete(v113);
    }
    if (v112 < 0) {
      operator delete(v111);
    }
    if (v130 < 0) {
      operator delete(v129);
    }
    if (v128 < 0) {
      operator delete(v127);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::string::size_type v60 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      std::string v62 = &v119;
      if (v121 < 0) {
        std::string v62 = v119;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
      _os_log_impl(&dword_20CD80000, v60, OS_LOG_TYPE_INFO, "Dialog sv map has been loaded from %s", (uint8_t *)&__p, 0xCu);
    }
    uint64_t v63 = &v119;
    if (v121 < 0) {
      uint64_t v63 = v119;
    }
    Diagnostics::log(6, "Dialog sv map has been loaded from %s", v61, v63);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v107, v106);
    v133.__r_.__value_.__r.__words[0] = *v56;
    *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words
                              + *(void *)(v133.__r_.__value_.__r.__words[0] - 24)) = v56[3];
    MEMORY[0x210558FE0](&v133.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x210559500](v139);
    if (SHIBYTE(v121) < 0) {
      operator delete(v119);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "dialog_map");
  *(_OWORD *)&v110[0].__r_.__value_.__r.__words[1] = 0uLL;
  v110[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v110[0].__r_.__value_.__l.__size_;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::map<std::string,int>,0>(&v133, a2, (const void **)&__p.__r_.__value_.__l.__data_, (const void ***)v110);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 680));
  std::string::size_type v64 = v133.__r_.__value_.__l.__size_;
  *(void *)(a1 + 672) = v133.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 680) = v64;
  std::string::size_type v65 = v133.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 688) = *((void *)&v133.__r_.__value_.__l + 2);
  if (v65)
  {
    *(void *)(v64 + 16) = v86;
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133.__r_.__value_.__l.__size_;
    *(_OWORD *)&v133.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v64 = 0;
  }
  else
  {
    *(void *)(a1 + 672) = v86;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v64);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v110[0].__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "dialog_sentence_prosody_bias_map");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v133.__r_.__value_.__l.__data_, &v109);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  std::string::size_type v66 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  char v67 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v66 = v109.__r_.__value_.__l.__size_;
  }
  if (v66)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v116 + 40))(&v106);
    std::ifstream::basic_ifstream((uint64_t *)&v133);
    uint64_t v122 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(&v133, (uint64_t)&v119, 1, (uint64_t)v104);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](&v119);
    nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::begin((uint64_t)&__p, v104);
    nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::end((uint64_t)v110, v104);
    while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)v110))
    {
      uint64_t v68 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(&v102, v68);
      long long v118 = (const void **)nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::key((unsigned __int8 **)&__p);
      std::string::size_type v69 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 696), v118, (long long **)&v118);
      int v70 = (void *)v69[7];
      if (v70)
      {
        v69[8] = (uint64_t)v70;
        operator delete(v70);
        v69[7] = 0;
        v69[8] = 0;
        v69[9] = 0;
      }
      *(_OWORD *)(v69 + 7) = v102;
      v69[9] = v103;
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&__p);
      ++v126;
    }
    if (v114 < 0) {
      operator delete(v113);
    }
    if (v112 < 0) {
      operator delete(v111);
    }
    if (v130 < 0) {
      operator delete(v129);
    }
    if (v128 < 0) {
      operator delete(v127);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v71 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      std::string::size_type v73 = &v106;
      if (v108 < 0) {
        std::string::size_type v73 = v106;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v73;
      _os_log_impl(&dword_20CD80000, v71, OS_LOG_TYPE_INFO, "Dialog sentence prosody bias map has been loaded from %s", (uint8_t *)&__p, 0xCu);
    }
    std::string::size_type v74 = &v106;
    if (v108 < 0) {
      std::string::size_type v74 = v106;
    }
    Diagnostics::log(6, "Dialog sentence prosody bias map has been loaded from %s", v72, v74);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v105, v104[0]);
    v133.__r_.__value_.__r.__words[0] = *v56;
    *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words
                              + *(void *)(v133.__r_.__value_.__r.__words[0] - 24)) = v56[3];
    MEMORY[0x210558FE0](&v133.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x210559500](v139);
    if (SHIBYTE(v108) < 0) {
      operator delete(v106);
    }
    char v67 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  if (v67 < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v115.__r_.__value_.__l.__data_);
  }
  if (v117) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v117);
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  return a1;
}

void sub_20D3DE2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)STACK[0x228]);
  if (a45 < 0) {
    operator delete(__p);
  }
  unint64_t v58 = *(void **)(v56 + 1008);
  if (v58)
  {
    *(void *)(v56 + 1016) = v58;
    operator delete(v58);
  }
  a56 = (void *)(v56 + 976);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  if (*(char *)(v56 + 975) < 0) {
    operator delete(*(void **)(v56 + 952));
  }
  a56 = (void *)(v56 + 928);
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  a56 = (void *)(v56 + 904);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  a56 = (void *)(v56 + 880);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  a56 = (void *)(v56 + 856);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  std::string::size_type v59 = *(std::__shared_weak_count **)(v56 + 848);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (*(char *)(v56 + 839) < 0) {
    operator delete(*(void **)(v56 + 816));
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a14);
  std::string::size_type v60 = *a24;
  if (*a24)
  {
    *(void *)(v56 + 776) = v60;
    operator delete(v60);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v56 + 744));
  std::string::size_type v61 = *(std::__shared_weak_count **)(v56 + 728);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(v56 + 704));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v56 + 680));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(v56 + 656));
  if (*(char *)(v56 + 639) < 0) {
    operator delete(*a18);
  }
  if (*(char *)(v56 + 615) < 0) {
    operator delete(*a20);
  }
  if (*(char *)(v56 + 591) < 0) {
    operator delete(*a21);
  }
  std::__tree<std::string>::destroy(a25, *(char **)(v56 + 544));
  std::__tree<std::string>::destroy(a26, *(char **)(v56 + 512));
  std::__tree<std::string>::destroy(a15, *(char **)(v56 + 480));
  std::__tree<std::string>::destroy(a16, *(char **)(v56 + 456));
  std::__tree<std::string>::destroy(a17, *(char **)(v56 + 432));
  if (*(char *)(v56 + 423) < 0) {
    operator delete(*a22);
  }
  if (*(char *)(v56 + 399) < 0) {
    operator delete(*a19);
  }
  if (*(char *)(v56 + 375) < 0) {
    operator delete(*a23);
  }
  if (*(char *)(v56 + 327) < 0) {
    operator delete(*a11);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v56 + 280));
  Module::~Module((Module *)v56);
  _Unwind_Resume(a1);
}

void FastSpeech2DecoderDennisInference::prepare_inputs(uint64_t a1, void *a2)
{
  std::string::size_type v4 = (std::__shared_weak_count *)a2[1];
  v13[0] = *a2;
  v13[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FastSpeech2DecoderBaseInference::prepare_inputs(a1, (uint64_t)v13);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::vector<int>::vector(&v12, 1uLL, (const std::vector<int>::value_type *)(*a2 + 4));
  std::string::basic_string[abi:ne180100]<0>(&__p, "graph_decoder_input_speaker_id_name");
  InferenceEngine::DataTensor::build_from_1d_array<int>((uint64_t)&v12, &v10);
  if (v9 < 0) {
    operator delete(__p);
  }
  unint64_t v5 = *(void (****)(void, uint64_t *))(a1 + 24);
  uint64_t v6 = v10;
  uint64_t v7 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v5)(v5, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
}

void sub_20D3DEB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sqlite3_open_MemoryMap(const void **a1, sqlite3 **a2)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&sqlite3_open_MemoryMap(MemoryMap const&,sqlite3 **)::memvfs_register, memory_order_acquire) != -1)
  {
    __p[0] = sqlite3_memvfs_register;
    char v9 = __p;
    std::__call_once(&sqlite3_open_MemoryMap(MemoryMap const&,sqlite3 **)::memvfs_register, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<int (&)(void)>>);
  }
  StringFormatter::StringFormatter((StringFormatter *)__p, "file:/mapped?ptr=%p&sz=%zu", a1[2], (size_t)a1[3]);
  if (v8 >= 0) {
    std::string::size_type v4 = __p;
  }
  else {
    std::string::size_type v4 = (void **)__p[0];
  }
  uint64_t v5 = sqlite3_open_v2((const char *)v4, a2, 65, "memvfs");
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_20D3DEC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<int (&)(void)>>(uint64_t (***a1)(void))
{
  return (**a1)();
}

uint64_t sqlite3_memvfs_register()
{
  sqlite3_initialize();
  qword_26B4962C0 = (uint64_t)sqlite3_vfs_find(0);
  dword_26B4962A4 = 40;
  return sqlite3_vfs_register((sqlite3_vfs *)&mem_vfs, 0);
}

uint64_t memCurrentTimeInt64(sqlite3_vfs *a1, uint64_t *a2)
{
  return (*((uint64_t (**)(void))a1->pAppData + 17))();
}

uint64_t memGetLastError(sqlite3_vfs *a1, int a2, char *a3)
{
  return (*((uint64_t (**)(void))a1->pAppData + 16))();
}

uint64_t memCurrentTime(sqlite3_vfs *a1, double *a2)
{
  return (*((uint64_t (**)(void))a1->pAppData + 15))();
}

uint64_t memSleep(sqlite3_vfs *a1)
{
  return (*((uint64_t (**)(void))a1->pAppData + 14))();
}

uint64_t memRandomness(sqlite3_vfs *a1, int a2, char *a3)
{
  return (*((uint64_t (**)(void))a1->pAppData + 13))();
}

uint64_t memDlClose(sqlite3_vfs *a1, void *a2)
{
  return (*((uint64_t (**)(void))a1->pAppData + 12))();
}

uint64_t memDlSym(sqlite3_vfs *a1, void *a2, const char *a3)
{
  return (*((uint64_t (**)(void))a1->pAppData + 11))();
}

uint64_t memDlError(sqlite3_vfs *a1, int a2, char *a3)
{
  return (*((uint64_t (**)(void))a1->pAppData + 10))();
}

uint64_t memDlOpen(sqlite3_vfs *a1, const char *a2)
{
  return (*((uint64_t (**)(void))a1->pAppData + 9))();
}

uint64_t memFullPathname(sqlite3_vfs *a1, const char *a2, int a3, char *a4)
{
  return 0;
}

uint64_t memAccess(sqlite3_vfs *a1, const char *a2, int a3, int *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t memDelete(sqlite3_vfs *a1, const char *a2)
{
  return 2570;
}

uint64_t memOpen(sqlite3_vfs *a1, const char *a2, sqlite3_file *a3, __int16 a4, int *a5)
{
  a3[4].pMethods = 0;
  *(_OWORD *)&a3->pMethods = 0u;
  *(_OWORD *)&a3[2].pMethods = 0u;
  if ((a4 & 0x100) == 0) {
    return 14;
  }
  uint64_t v7 = (const sqlite3_io_methods *)sqlite3_uri_int64(a2, "ptr", 0);
  a3[3].pMethods = v7;
  if (!v7) {
    return 14;
  }
  sqlite3_int64 v8 = sqlite3_uri_int64(a2, "sz", 0);
  a3[1].pMethods = (const sqlite3_io_methods *)v8;
  if (v8 < 0) {
    return 14;
  }
  char v9 = (const sqlite3_io_methods *)sqlite3_uri_int64(a2, "max", v8);
  a3[2].pMethods = v9;
  if ((uint64_t)v9 < (uint64_t)a3[1].pMethods) {
    return 14;
  }
  int v11 = sqlite3_uri_BOOLean(a2, "freeonclose", 0);
  uint64_t result = 0;
  LODWORD(a3[4].pMethods) = v11;
  a3->pMethods = (const sqlite3_io_methods *)&mem_io_methods;
  return result;
}

uint64_t memUnfetch(sqlite3_file *a1, uint64_t a2, void *a3)
{
  return 0;
}

uint64_t memFetch(sqlite3_file *a1, uint64_t a2, int a3, void **a4)
{
  *a4 = (char *)a1[3].pMethods + a2;
  return 0;
}

uint64_t memShmUnmap(sqlite3_file *a1)
{
  return 0;
}

uint64_t memShmLock(sqlite3_file *a1)
{
  return 5130;
}

uint64_t memShmMap(sqlite3_file *a1, int a2, int a3, int a4, volatile void **a5)
{
  return 5386;
}

uint64_t memDeviceCharacteristics(sqlite3_file *a1)
{
  return 5633;
}

uint64_t memSectorSize(sqlite3_file *a1)
{
  return 1024;
}

uint64_t memFileControl(sqlite3_file *a1, int a2, char **a3)
{
  if (a2 != 12) {
    return 12;
  }
  std::string::size_type v4 = sqlite3_mprintf("mem(%p,%lld)", a1[3].pMethods, a1[1].pMethods);
  uint64_t result = 0;
  *a3 = v4;
  return result;
}

uint64_t memCheckReservedLock(sqlite3_file *a1, int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t memUnlock(sqlite3_file *a1)
{
  return 0;
}

uint64_t memLock(sqlite3_file *a1)
{
  return 0;
}

uint64_t memFileSize(sqlite3_file *a1, const sqlite3_io_methods **a2)
{
  *a2 = a1[1].pMethods;
  return 0;
}

uint64_t memSync(sqlite3_file *a1)
{
  return 0;
}

uint64_t memTruncate(sqlite3_file *a1, const sqlite3_io_methods *a2)
{
  pMethods = a1[1].pMethods;
  BOOL v5 = (uint64_t)a2 <= (uint64_t)pMethods;
  size_t v6 = (char *)a2 - (char *)pMethods;
  if (!v5)
  {
    if ((uint64_t)a1[2].pMethods < (uint64_t)a2) {
      return 13;
    }
    bzero((char *)a1[3].pMethods + (unint64_t)pMethods, v6);
  }
  uint64_t result = 0;
  a1[1].pMethods = a2;
  return result;
}

uint64_t memWrite(sqlite3_file *a1, const void *__src, int a3, uint64_t a4)
{
  sqlite3_int64 v8 = (const sqlite3_io_methods *)(a4 + a3);
  pMethods = a1[1].pMethods;
  if ((uint64_t)v8 > (uint64_t)pMethods)
  {
    if ((uint64_t)v8 > (uint64_t)a1[2].pMethods) {
      return 13;
    }
    if (a4 > (uint64_t)pMethods) {
      bzero((char *)a1[3].pMethods + (unint64_t)pMethods, a4 - (void)pMethods);
    }
    a1[1].pMethods = v8;
  }
  memcpy((char *)a1[3].pMethods + a4, __src, a3);
  return 0;
}

uint64_t memRead(sqlite3_file *a1, void *__dst, int a3, uint64_t a4)
{
  return 0;
}

uint64_t memClose(sqlite3_file *a1)
{
  if (LODWORD(a1[4].pMethods)) {
    sqlite3_free((void *)a1[3].pMethods);
  }
  return 0;
}

double ExtractFeaturesImpl::extract_pause(ExtractFeaturesImpl **this)
{
  uint64_t v2 = ExtractFeaturesImpl::pause_duration(this[59]);
  if (v2)
  {
    *(void *)&double result = ExtractFeaturesImpl::extract_silence((ExtractFeaturesImpl *)this, v2).u64[0];
  }
  return result;
}

uint64_t ExtractFeaturesImpl::pause_duration(ExtractFeaturesImpl *this)
{
  if ((void *)((char *)this + 8) == v2) {
    return 0;
  }
  int v3 = (int)(float)(*(float *)(v2[5] + 8) * 1000.0);
  if (v3 <= 1) {
    return 1;
  }
  else {
    return v3;
  }
}

int64x2_t ExtractFeaturesImpl::extract_silence(ExtractFeaturesImpl *this, uint64_t a2)
{
  *((unsigned char *)this + 696) = 0;
  *((void *)this + 81) = 0;
  *((void *)this + 77) = 1;
  *((void *)this + 83) = 0;
  *((void *)this + 78) = 1;
  MEMORY[0x210558E70]((char *)this + 400, "SIL");
  MEMORY[0x210558E70]((char *)this + 424, "null");
  *(void *)((char *)this + 700) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7, "sil");
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  (*(void (**)(ExtractFeaturesImpl *, void **, uint64_t, void **))(*(void *)this + 160))(this, v7, a2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  int64x2_t result = vaddq_s64(*(int64x2_t *)((char *)this + 680), vdupq_n_s64(1uLL));
  *(int64x2_t *)((char *)this + 680) = result;
  return result;
}

void sub_20D3DF22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void ExtractFeaturesImpl::extract_sentence_text(ExtractFeaturesImpl *this)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 59) = 0;
  if (*((char *)this + 271) < 0)
  {
    **((unsigned char **)this + 31) = 0;
    *((void *)this + 32) = 0;
  }
  else
  {
    *((unsigned char *)this + 248) = 0;
    *((unsigned char *)this + 271) = 0;
  }
  if (*((char *)this + 319) < 0)
  {
    **((unsigned char **)this + 37) = 0;
    *((void *)this + 38) = 0;
  }
  else
  {
    *((unsigned char *)this + 296) = 0;
    *((unsigned char *)this + 319) = 0;
  }
  uint64_t v101 = 0;
  long long v102 = 0;
  unint64_t v103 = 0;
  (*(void (**)(std::string *__return_ptr))(***((void ***)this + 13) + 40))(&__p);
  uint64_t v2 = v102;
  if ((unint64_t)v102 >= v103)
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v102 - v101) >> 3);
    unint64_t v5 = v4 + 1;
    if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((uint64_t)(v103 - v101) >> 3) > v5) {
      unint64_t v5 = 0x5555555555555556 * ((uint64_t)(v103 - v101) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - v101) >> 3) >= 0x555555555555555) {
      unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v6 = v5;
    }
    uint64_t v107 = &v103;
    if (v6) {
      unint64_t v6 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v6);
    }
    else {
      uint64_t v7 = 0;
    }
    char v8 = (std::string *)(v6 + 24 * v4);
    buf.__r_.__value_.__r.__words[0] = v6;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    std::string::size_type v106 = (std::string *)(v6 + 24 * v7);
    v8->__r_.__value_.__r.__words[0] = 0;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    std::string *v8 = __p;
    memset(&__p, 0, sizeof(__p));
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&v8[1];
    std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(&v101, &buf);
    int v3 = (std::string::__raw *)v102;
    std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&buf);
  }
  else
  {
    v102->__r_.__value_.__r.__words[0] = 0;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    std::string *v2 = __p;
    memset(&__p, 0, sizeof(__p));
    int v3 = (std::string::__raw *)&v2[1];
  }
  uint64_t v96 = (std::string *)((char *)this + 248);
  int64_t v98 = (std::string *)((char *)this + 296);
  long long v102 = (std::string *)v3;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  std::string::size_type v9 = 0;
  unint64_t v99 = 0;
  uint64_t v10 = 0;
  BOOL v97 = 0;
  uint64_t v11 = 0;
  std::vector<int> v12 = (uint64_t *)((char *)this + 472);
  std::string::size_type v13 = 1000000000;
  while (1)
  {
    uint64_t v14 = v11;
    (*(void (**)(std::string *__return_ptr))(**((void **)this + 2) + 16))(&buf);
    long long v15 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    std::string::size_type v16 = (std::__shared_weak_count *)*((void *)this + 60);
    *(_OWORD *)std::vector<int> v12 = v15;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      uint64_t v17 = *v12;
      if (buf.__r_.__value_.__l.__size_)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
        if (!v17) {
          goto LABEL_146;
        }
        uint64_t v17 = *v12;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v17 = v15;
    }
    if (!v17) {
      goto LABEL_146;
    }
LABEL_26:
    ++v11;
    if ((void *)(v17 + 8) == v18)
    {
      *((void *)this + 61) = 0;
      goto LABEL_102;
    }
    uint64_t v19 = v18[5];
    *((void *)this + 61) = v19 + 8;
    if (!v10)
    {
      uint64_t v20 = *(void *)(v19 + 56);
      uint64_t v10 = *(void *)(v20 + 16);
      std::string::size_type v21 = *(std::__shared_weak_count **)(v20 + 24);
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v99) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v99);
      }
      unint64_t v99 = v21;
    }
    uint64_t v22 = *((void *)this + 61);
    int v23 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == 1853189228) {
      goto LABEL_102;
    }
    std::string::size_type v24 = *(void *)(v22 + 8);
    if (v24 < v13) {
      std::string::size_type v13 = *(void *)(v22 + 8);
    }
    std::string::size_type v25 = *(void *)(v22 + 16) + v24;
    if (v9 <= v25) {
      std::string::size_type v9 = v25;
    }
    if (v23 <= 1886547311) {
      break;
    }
    if (v23 == 1886547312 || v23 == 1952807028) {
      goto LABEL_47;
    }
    int v26 = 1886809699;
LABEL_46:
    if (v23 != v26) {
      goto LABEL_102;
    }
LABEL_47:
    std::string::size_type v27 = *((unsigned __int8 *)this + 319);
    if (*((char *)this + 319) < 0)
    {
      if (!*((void *)this + 38)) {
        goto LABEL_79;
      }
    }
    else if (!*((unsigned char *)this + 319))
    {
      goto LABEL_79;
    }
    if (*(char *)(v22 + 47) < 0)
    {
      if (!*(void *)(v22 + 32))
      {
LABEL_79:
        *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
        std::string::size_type v106 = 0;
        if ((v27 & 0x80) == 0) {
          goto LABEL_56;
        }
        goto LABEL_80;
      }
    }
    else if (!*(unsigned char *)(v22 + 47))
    {
      goto LABEL_79;
    }
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v106 = 0;
    if (!v97 && v23 != 1886809699)
    {
      std::string::push_back(v98, 32);
      std::string::size_type v27 = *((unsigned __int8 *)this + 319);
    }
    if ((v27 & 0x80) == 0) {
      goto LABEL_56;
    }
LABEL_80:
    std::string::size_type v27 = *((void *)this + 38);
LABEL_56:
    buf.__r_.__value_.__r.__words[0] = v27;
    Agglomerate::set<TokenExtractionItem>(*v12, (uint64_t *)&buf);
    uint64_t v28 = *((void *)this + 61);
    if (*(_DWORD *)v28 != 1952807028 || *(void *)(v28 + 16))
    {
      std::string::size_type v31 = *(const std::string::value_type **)(v28 + 24);
      uint64_t v29 = v28 + 24;
      std::string::size_type v30 = v31;
      int v32 = *(char *)(v29 + 23);
      if (v32 >= 0) {
        uint64_t v33 = (const std::string::value_type *)v29;
      }
      else {
        uint64_t v33 = v30;
      }
      if (v32 >= 0) {
        std::string::size_type v34 = *(unsigned __int8 *)(v29 + 23);
      }
      else {
        std::string::size_type v34 = *(void *)(v29 + 8);
      }
      std::string::append(v98, v33, v34);
    }
    uint64_t v35 = *v12;
    if ((void *)(v35 + 8) != v36)
    {
      uint64_t v37 = v36[5];
      char v38 = *(unsigned char *)(v37 + 55);
      if (v38 < 0) {
        uint64_t v39 = *(void *)(v37 + 40);
      }
      else {
        uint64_t v39 = *(unsigned __int8 *)(v37 + 55);
      }
      BOOL v97 = v39 != 0;
      if (v39)
      {
        if (v38 >= 0) {
          int v49 = (const std::string::value_type *)(v37 + 32);
        }
        else {
          int v49 = *(const std::string::value_type **)(v37 + 32);
        }
        if (v38 >= 0) {
          std::string::size_type v50 = *(unsigned __int8 *)(v37 + 55);
        }
        else {
          std::string::size_type v50 = *(void *)(v37 + 40);
        }
        std::string::append(v98, v49, v50);
      }
      if (*((char *)this + 271) < 0)
      {
        if (!*((void *)this + 32))
        {
LABEL_95:
          int v51 = *(char *)(v37 + 31);
          if (v51 >= 0) {
            std::string::size_type v52 = (const std::string::value_type *)(v37 + 8);
          }
          else {
            std::string::size_type v52 = *(const std::string::value_type **)(v37 + 8);
          }
          if (v51 >= 0) {
            std::string::size_type v53 = *(unsigned __int8 *)(v37 + 31);
          }
          else {
            std::string::size_type v53 = *(void *)(v37 + 16);
          }
          std::string::append(v96, v52, v53);
          ++*((_DWORD *)this + 59);
          goto LABEL_102;
        }
      }
      else if (!*((unsigned char *)this + 271))
      {
        goto LABEL_95;
      }
      std::string::append(v96, " ");
      goto LABEL_95;
    }
    BOOL v97 = 0;
LABEL_102:
    uint64_t v54 = *v12;
    if ((void *)(v54 + 8) != v55)
    {
      std::vector<PhonemeRepresentation::Word>::__insert_with_size[abi:ne180100]<std::__wrap_iter<PhonemeRepresentation::Word const*>,std::__wrap_iter<PhonemeRepresentation::Word const*>>(&v101, (uint64_t)v102, *(uint64_t **)(v55[5] + 8), *(uint64_t **)(v55[5] + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v55[5] + 16) - *(void *)(v55[5] + 8)) >> 3));
      uint64_t v54 = *v12;
    }
    if ((void *)(v54 + 8) != v56)
    {
      uint64_t v57 = v56[5];
      if (*(unsigned char *)(v57 + 8))
      {
        (*(void (**)(std::string *__return_ptr))(***((void ***)this + 13) + 40))(&__p);
        unint64_t v58 = v102;
        if ((unint64_t)v102 >= v103)
        {
          unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v102 - v101) >> 3);
          unint64_t v61 = v60 + 1;
          if (v60 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v103 - v101) >> 3) > v61) {
            unint64_t v61 = 0x5555555555555556 * ((uint64_t)(v103 - v101) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - v101) >> 3) >= 0x555555555555555) {
            unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v62 = v61;
          }
          uint64_t v107 = &v103;
          if (v62) {
            unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v62);
          }
          else {
            uint64_t v63 = 0;
          }
          std::string::size_type v64 = (std::string *)(v62 + 24 * v60);
          buf.__r_.__value_.__r.__words[0] = v62;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)v64;
          std::string::size_type v106 = (std::string *)(v62 + 24 * v63);
          v64->__r_.__value_.__r.__words[0] = 0;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          std::string *v64 = __p;
          memset(&__p, 0, sizeof(__p));
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&v64[1];
          std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(&v101, &buf);
          std::string::size_type v59 = (std::string::__raw *)v102;
          std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&buf);
        }
        else
        {
          v102->__r_.__value_.__r.__words[0] = 0;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          *unint64_t v58 = __p;
          memset(&__p, 0, sizeof(__p));
          std::string::size_type v59 = (std::string::__raw *)&v58[1];
        }
        long long v102 = (std::string *)v59;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      }
      if (*(unsigned char *)(v57 + 9))
      {
        uint64_t v11 = v14 + 1;
        goto LABEL_146;
      }
    }
  }
  if (v23 == 1635083369)
  {
    uint64_t v40 = *v12;
    if ((void *)(v40 + 8) == v41) {
      goto LABEL_102;
    }
    uint64_t v42 = v41[5];
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v106 = 0;
    std::string::size_type v43 = *((unsigned __int8 *)this + 319);
    if (*((char *)this + 319) < 0)
    {
      if (*((void *)this + 38))
      {
LABEL_72:
        std::string::push_back(v98, 32);
        std::string::size_type v43 = *((unsigned __int8 *)this + 319);
        if ((v43 & 0x80) == 0)
        {
LABEL_123:
          buf.__r_.__value_.__r.__words[0] = v43;
          Agglomerate::set<TokenExtractionItem>(*v12, (uint64_t *)&buf);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v104, 60, (const void **)(v42 + 40));
          std::string::push_back(&v104, 62);
          std::string __p = v104;
          memset(&v104, 0, sizeof(v104));
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(v98, (const std::string::value_type *)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v104.__r_.__value_.__l.__data_);
          }
          goto LABEL_102;
        }
LABEL_73:
        std::string::size_type v43 = *((void *)this + 38);
        goto LABEL_123;
      }
    }
    else if (*((unsigned char *)this + 319))
    {
      goto LABEL_72;
    }
    if ((v43 & 0x80) == 0) {
      goto LABEL_123;
    }
    goto LABEL_73;
  }
  if (v23 != 1651664235)
  {
    int v26 = 1885892462;
    goto LABEL_46;
  }
  uint64_t v44 = *v12;
  if ((void *)(v44 + 8) == v45) {
    goto LABEL_102;
  }
  uint64_t v46 = v45[5];
  if (*(float *)(v46 + 8) != 0.0)
  {
    (*(void (**)(std::string *__return_ptr))(***((void ***)this + 13) + 40))(&__p);
    int v47 = v102;
    if ((unint64_t)v102 >= v103)
    {
      unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v102 - v101) >> 3);
      unint64_t v68 = v67 + 1;
      if (v67 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v103 - v101) >> 3) > v68) {
        unint64_t v68 = 0x5555555555555556 * ((uint64_t)(v103 - v101) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - v101) >> 3) >= 0x555555555555555) {
        unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v69 = v68;
      }
      uint64_t v107 = &v103;
      if (v69) {
        unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v69);
      }
      else {
        uint64_t v70 = 0;
      }
      int v71 = (std::string *)(v69 + 24 * v67);
      buf.__r_.__value_.__r.__words[0] = v69;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v71;
      std::string::size_type v106 = (std::string *)(v69 + 24 * v70);
      v71->__r_.__value_.__r.__words[0] = 0;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      *int v71 = __p;
      memset(&__p, 0, sizeof(__p));
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&v71[1];
      std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(&v101, &buf);
      uint64_t v48 = (std::string::__raw *)v102;
      std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&buf);
    }
    else
    {
      v102->__r_.__value_.__r.__words[0] = 0;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      std::string *v47 = __p;
      memset(&__p, 0, sizeof(__p));
      uint64_t v48 = (std::string::__raw *)&v47[1];
    }
    long long v102 = (std::string *)v48;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    goto LABEL_102;
  }
  if (*(_DWORD *)(v46 + 12) != 1) {
    goto LABEL_102;
  }
  (*(void (**)(std::string *__return_ptr))(***((void ***)this + 13) + 40))(&buf);
  std::vector<PhonemeRepresentation::Word>::push_back[abi:ne180100](&v101, (uint64_t)&buf);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_146:
  if (*((char *)this + 207) < 0)
  {
    **((unsigned char **)this + 23) = 0;
    *((void *)this + 24) = 0;
    if (!v10) {
      goto LABEL_151;
    }
    goto LABEL_150;
  }
  *((unsigned char *)this + 184) = 0;
  *((unsigned char *)this + 207) = 0;
  if (v10) {
LABEL_150:
  }
    std::string::operator=((std::string *)((char *)this + 208), (const std::string *)v10);
LABEL_151:
  std::string::size_type v72 = (void **)((char *)this + 184);
  if (v11)
  {
    if (v13 < v9)
    {
      if (*(char *)(v10 + 23) < 0) {
        std::string::size_type v73 = *(void *)(v10 + 8);
      }
      else {
        std::string::size_type v73 = *(unsigned __int8 *)(v10 + 23);
      }
      if (v9 <= v73)
      {
        std::string::size_type v73 = v9;
      }
      else
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        std::string::size_type v74 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          Censor::global_plaintext(&__p, v10);
          std::string::size_type v75 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 134218498;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v9;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          std::string::size_type v106 = v75;
          _os_log_impl(&dword_20CD80000, v74, OS_LOG_TYPE_ERROR, "Invalid sentence range: [%zu, %zu) in text '%s'", (uint8_t *)&buf, 0x20u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        Censor::global_plaintext(&buf, v10);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(3, "Invalid sentence range: [%zu, %zu) in text '%s'", v76, v13, v9, p_buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (v73 < v13) {
          std::string::size_type v13 = v73;
        }
      }
      *((void *)this + 49) = v13;
      std::string::basic_string(&buf, (const std::string *)v10, v13, v73 - v13, (std::allocator<char> *)&v104);
      if (*((char *)this + 207) < 0) {
        operator delete(*v72);
      }
      *(_OWORD *)std::string::size_type v72 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *((void *)this + 25) = *((void *)&buf.__r_.__value_.__l + 2);
    }
  }
  else
  {
    *((unsigned char *)this + 8) = 1;
  }
  if (!*((unsigned char *)this + 8))
  {
    memset(&buf, 0, sizeof(buf));
    int v78 = *((char *)this + 207);
    if (v78 >= 0) {
      int64_t v79 = (char *)this + 184;
    }
    else {
      int64_t v79 = (char *)*((void *)this + 23);
    }
    if (v78 >= 0) {
      uint64_t v80 = *((unsigned __int8 *)this + 207);
    }
    else {
      uint64_t v80 = *((void *)this + 24);
    }
    for (; v80; --v80)
    {
      int v81 = *v79;
      if (v81 <= 12)
      {
        if (v81 == 9)
        {
          std::string::size_type v82 = "\\t";
          goto LABEL_197;
        }
        std::string::size_type v82 = "\\n";
        if (v81 == 10) {
          goto LABEL_197;
        }
      }
      else
      {
        switch(v81)
        {
          case 13:
            std::string::size_type v82 = "\\r";
            goto LABEL_197;
          case 92:
            std::string::size_type v82 = "\\\\"";
            goto LABEL_197;
          case 27:
            std::string::size_type v82 = "\\e";
LABEL_197:
            std::string::append(&buf, v82);
            goto LABEL_198;
        }
      }
      std::string::push_back(&buf, v81);
LABEL_198:
      ++v79;
    }
    (*(void (**)(std::string *__return_ptr))(***((void ***)this + 13) + 24))(&__p);
    long long v83 = (void **)((char *)this + 344);
    if (*((char *)this + 367) < 0) {
      operator delete(*v83);
    }
    *(_OWORD *)long long v83 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)this + 45) = *((void *)&__p.__r_.__value_.__l + 2);
    UTFString::remove_invalid_utf8_codes(&__p, (uint8_t *)v98);
    if (*((char *)this + 319) < 0) {
      operator delete(v98->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v98->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)this + 39) = *((void *)&__p.__r_.__value_.__l + 2);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v84 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      Censor::global_plaintext(&__p, (uint64_t)&buf);
      long long v85 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v104.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v104.__r_.__value_.__r.__words + 4) = (std::string::size_type)v85;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    Censor::global_plaintext(&__p, (uint64_t)&buf);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v87 = &__p;
    }
    else {
      int v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v88 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      Censor::global_plaintext(&__p, (uint64_t)v98);
      std::string::size_type v89 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v104.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v104.__r_.__value_.__r.__words + 4) = (std::string::size_type)v89;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    Censor::global_plaintext(&__p, (uint64_t)v98);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v91 = &__p;
    }
    else {
      long long v91 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v92 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      Censor::global_plaintext(&__p, (uint64_t)v83);
      std::string::size_type v93 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v104.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v104.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
      _os_log_impl(&dword_20CD80000, v92, OS_LOG_TYPE_DEFAULT, "Phonemes : %s", (uint8_t *)&v104, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    Censor::global_plaintext(&__p, (uint64_t)v83);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v95 = &__p;
    }
    else {
      uint64_t v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    Diagnostics::log(5, "Phonemes : %s", v94, v95);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  if (v99) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v99);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
}

void sub_20D3E0290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::string __p = v33;
  std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  std::string __p = &a25;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

__n128 Agglomerate::set<TokenExtractionItem>(uint64_t a1, uint64_t *a2)
{
  v6[0] = (uint64_t *)&v9;
  if (!v3) {
    operator new();
  }
  Agglomerate::ItemHolder<TokenExtractionItem>::ItemHolder(v6, a2);
  *(uint64_t **)(v3 + 8) = v6[1];
  unint64_t v4 = (void **)(v3 + 16);
  if (*(char *)(v3 + 39) < 0) {
    operator delete(*v4);
  }
  __n128 result = v7;
  *(void *)(v3 + 32) = v8;
  *(__n128 *)unint64_t v4 = result;
  return result;
}

void sub_20D3E048C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1093C401FB1DE5ELL);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, char a2, const void **a3)
{
  if (*((char *)a3 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v5 = (size_t)a3[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a1, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    __n128 v7 = (unsigned char *)result;
  }
  else {
    __n128 v7 = *(unsigned char **)result;
  }
  unsigned char *v7 = a2;
  uint64_t v8 = v7 + 1;
  if (v5)
  {
    if (*((char *)a3 + 23) >= 0) {
      std::string::size_type v9 = a3;
    }
    else {
      std::string::size_type v9 = *a3;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  *((unsigned char *)v8 + v5) = 0;
  return result;
}

void *Agglomerate::ItemHolder<TokenExtractionItem>::ItemHolder(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = off_26C206238;
  a1[1] = v3;
  unint64_t v4 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)a2[1], a2[2]);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 1);
    v4->__r_.__value_.__r.__words[2] = a2[3];
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void Agglomerate::ItemHolder<TokenExtractionItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206238;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenExtractionItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206238;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void ExtractFeaturesImpl::pron(ExtractFeaturesImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 391) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 46), *((void *)this + 47));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 23);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 48);
  }
}

void ExtractFeaturesImpl::norm_text(ExtractFeaturesImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 343) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 40), *((void *)this + 41));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 20);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 42);
  }
}

void ExtractFeaturesImpl::norm_labels(ExtractFeaturesImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 295) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 34), *((void *)this + 35));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 17);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 36);
  }
}

uint64_t ExtractFeaturesImpl::norm_label_count(ExtractFeaturesImpl *this)
{
  return *((unsigned int *)this + 60);
}

BOOL ExtractFeaturesImpl::process_tokens(ExtractFeaturesImpl *this)
{
  return *((unsigned char *)this + 8) == 0;
}

void ExtractFeaturesImpl::generate_tokens(ExtractFeaturesImpl *this)
{
  uint64_t v185 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 712);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 712));
  (*(void (**)(ExtractFeaturesImpl *))(*(void *)this + 96))(this);
  if (*((unsigned char *)this + 8))
  {
    std::recursive_mutex::unlock(v2);
    return;
  }
  uint64_t v3 = 0;
  unint64_t v4 = (uint64_t *)((char *)this + 472);
  *((void *)this + 84) = 1;
  while (1)
  {
    do
    {
      (*(void (**)(std::string *__return_ptr))(**((void **)this + 2) + 16))(&v174);
      long long v5 = *(_OWORD *)&v174.__r_.__value_.__l.__data_;
      *(_OWORD *)&v174.__r_.__value_.__l.__data_ = 0uLL;
      unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 60);
      *(_OWORD *)unint64_t v4 = v5;
      if (v6)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        __n128 v7 = (ExtractFeaturesImpl *)*v4;
        if (v174.__r_.__value_.__l.__size_)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v174.__r_.__value_.__l.__size_);
          if (!v7) {
            goto LABEL_137;
          }
          __n128 v7 = (ExtractFeaturesImpl *)*v4;
          goto LABEL_12;
        }
      }
      else
      {
        __n128 v7 = (ExtractFeaturesImpl *)v5;
      }
      if (!v7) {
        goto LABEL_137;
      }
LABEL_12:
      ++v3;
      std::string::size_type v9 = (void *)((char *)v7 + 8);
      if ((void *)((char *)v7 + 8) == v8)
      {
        *((void *)this + 61) = 0;
        goto LABEL_125;
      }
      uint64_t v10 = v8[5];
      int v12 = *(_DWORD *)(v10 + 8);
      int v11 = v12;
      *((void *)this + 61) = v10 + 8;
      if (v12 > 1885892461)
      {
        BOOL v13 = v11 == 1952807028 || v11 == 1885892462;
        if (!v13) {
          goto LABEL_125;
        }
        if (v9 == v14) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v14[5] + 8;
        }
        uint64_t v18 = *(void *)(*(void *)(v10 + 56) + 16);
        long long v180 = 0u;
        long long v181 = 0u;
        long long v178 = 0u;
        long long v179 = 0u;
        long long v176 = 0u;
        long long v177 = 0u;
        memset(v175, 0, sizeof(v175));
        std::string::size_type v19 = *(void *)(v10 + 16);
        std::string::size_type v20 = *(void *)(v10 + 24);
        if (*(char *)(v18 + 23) < 0) {
          std::string::size_type v21 = *(void *)(v18 + 8);
        }
        else {
          std::string::size_type v21 = *(unsigned __int8 *)(v18 + 23);
        }
        if (v20 + v19 <= v21)
        {
          std::string::basic_string(&buf, (const std::string *)v18, v19, v20, (std::allocator<char> *)&v182);
          if (SHIBYTE(v175[1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v175[1].__r_.__value_.__l.__data_);
          }
          v175[1] = buf;
        }
        else
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v22 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = *((void *)this + 61);
            std::string::size_type v25 = *(void *)(v23 + 8);
            uint64_t v24 = *(void *)(v23 + 16);
            Censor::global_plaintext(&v182, v18);
            int v26 = (v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v182
                : (std::string *)v182.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 134218498;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v25;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v24 + v25;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
            std::string::size_type v184 = v26;
            _os_log_impl(&dword_20CD80000, v22, OS_LOG_TYPE_ERROR, "Invalid word range: [%lu, %lu) in text: '%s'", (uint8_t *)&buf, 0x20u);
            if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v182.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v27 = *((void *)this + 61);
          uint64_t v28 = *(void *)(v27 + 8);
          uint64_t v29 = *(void *)(v27 + 16);
          Censor::global_plaintext(&buf, v18);
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          Diagnostics::log(3, "Invalid word range: [%lu, %lu) in text: '%s'", v30, v28, v29 + v28, p_buf);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          MEMORY[0x210558E70](&v175[1], &byte_20D5A22AE);
        }
        memset(&buf, 0, sizeof(buf));
        uint64_t v32 = *v4;
        if ((void *)(v32 + 8) != v33 && !*(unsigned char *)(v33[5] + 9))
        {
          ExtractFeaturesImpl::punctuation(&v182, (uint64_t)this, v3);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          std::string buf = v182;
          uint64_t v34 = *((void *)this + 61);
          if (*(_DWORD *)v34 != 1952807028 || *(void *)(v34 + 16))
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v34 + 24), (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v182);
            if (SHIBYTE(v175[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v175[0].__r_.__value_.__l.__data_);
            }
            v175[0] = v182;
          }
        }
        LODWORD(v174.__r_.__value_.__r.__words[1]) = *(void *)v15;
        uint64_t v35 = *((void *)this + 61);
        if (*(char *)(v35 + 47) < 0) {
          uint64_t v36 = *(void *)(v35 + 32);
        }
        else {
          LODWORD(v36) = *(unsigned __int8 *)(v35 + 47);
        }
        *(std::string::size_type *)((char *)&v174.__r_.__value_.__r.__words[1] + 4) = v36;
        v174.__r_.__value_.__r.__words[0] = __PAIR64__(*(void *)(v35 + 16), *(_DWORD *)(v35 + 8) - *((_DWORD *)this + 98));
        uint64_t v37 = *((void *)this + 59);
        if ((void *)(v37 + 8) == v38)
        {
          *((void *)this + 62) = 0;
        }
        else
        {
          *((void *)this + 62) = v38[5] + 8;
          (*(void (**)(std::string *__return_ptr))(***((void ***)this + 13) + 24))(&v182);
          uint64_t v39 = (void **)(v15 + 8);
          if (*(char *)(v15 + 31) < 0) {
            operator delete(*v39);
          }
          long long v40 = *(_OWORD *)&v182.__r_.__value_.__l.__data_;
          *(void *)(v15 + 24) = *((void *)&v182.__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v39 = v40;
          std::string::operator=((std::string *)&v176, (const std::string *)(v15 + 8));
          uint64_t v41 = *((void *)this + 61);
          if (*(_DWORD *)v41 != 1952807028 || *(void *)(v41 + 16))
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(*((void *)this + 62) + 24), (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v182);
            if (SHIBYTE(v175[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v175[0].__r_.__value_.__l.__data_);
            }
            v175[0] = v182;
          }
        }
        uint64_t v42 = *v4;
        if ((void *)(v42 + 8) != v43) {
          std::string::operator=((std::string *)((char *)&v177 + 8), (const std::string *)(v43[5] + 8));
        }
        uint64_t v44 = *(void *)(*((void *)this + 61) + 48);
        std::string::size_type v45 = (const std::string *)(v44 + 40);
        uint64_t v46 = *(unsigned __int8 *)(v44 + 63);
        size_t v47 = *(void *)(v44 + 48);
        if ((v46 & 0x80u) == 0) {
          uint64_t v48 = *(unsigned __int8 *)(v44 + 63);
        }
        else {
          uint64_t v48 = *(void *)(v44 + 48);
        }
        uint64_t v49 = *((unsigned __int8 *)this + 183);
        int v50 = (char)v49;
        if ((v49 & 0x80u) != 0) {
          uint64_t v49 = *((void *)this + 21);
        }
        if (v48 == v49)
        {
          if (v50 >= 0) {
            int v51 = (unsigned __int8 *)this + 160;
          }
          else {
            int v51 = (unsigned __int8 *)*((void *)this + 20);
          }
          if ((v46 & 0x80) != 0)
          {
            if (memcmp(v45->__r_.__value_.__l.__data_, v51, v47)) {
              goto LABEL_94;
            }
          }
          else if (v46)
          {
            std::string::size_type v52 = v45;
            while (v52->__r_.__value_.__s.__data_[0] == *v51)
            {
              std::string::size_type v52 = (const std::string *)((char *)v52 + 1);
              ++v51;
              if (!--v46) {
                goto LABEL_95;
              }
            }
            goto LABEL_94;
          }
        }
        else
        {
LABEL_94:
          std::string::operator=((std::string *)((char *)&v180 + 8), v45);
        }
LABEL_95:
        uint64_t v58 = *v4;
        if ((void *)(v58 + 8) == v59)
        {
          *((void *)this + 74) = 0;
        }
        else
        {
          uint64_t v60 = v59[5];
          uint64_t v61 = *(void *)(v60 + 8);
          *((void *)this + 74) = v60 + 8;
          if (v61)
          {
            (*(void (**)(ExtractFeaturesImpl *, std::string *))(*(void *)this + 152))(this, &v174);
            *((void *)this + 84) += **((void **)this + 74);
          }
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        goto LABEL_113;
      }
      if (v11 != 1635083369)
      {
        if (v11 == 1651664235 && ExtractFeaturesImpl::pause_duration(v7)) {
          ++*((void *)this + 84);
        }
        goto LABEL_125;
      }
      *((void *)this + 74) = 0;
      if (v9 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = (uint64_t *)(v16[5] + 8);
      }
      if (v9 == v53) {
        goto LABEL_125;
      }
      uint64_t v54 = v53[5];
      long long v180 = 0u;
      long long v181 = 0u;
      long long v178 = 0u;
      long long v179 = 0u;
      long long v176 = 0u;
      long long v177 = 0u;
      memset(v175, 0, sizeof(v175));
      if (*(_DWORD *)(v54 + 32) == 0x7FFFFFFF)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf, 60, (const void **)(v54 + 40));
        std::string::push_back(&buf, 62);
        v182.__r_.__value_.__r.__words[0] = buf.__r_.__value_.__l.__size_;
        std::string::size_type v55 = buf.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)v182.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7);
        char v56 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        memset(&buf, 0, sizeof(buf));
        if ((SHIBYTE(v175[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v175[0].__r_.__value_.__r.__words[0] = v55;
          v175[0].__r_.__value_.__l.__size_ = v182.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v175[0].__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v182.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v175[0].__r_.__value_.__s + 23) = v56;
          if (v17) {
            goto LABEL_109;
          }
          goto LABEL_92;
        }
        operator delete(v175[0].__r_.__value_.__l.__data_);
        v175[0].__r_.__value_.__r.__words[0] = v55;
        v175[0].__r_.__value_.__l.__size_ = v182.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v175[0].__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v182.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v175[0].__r_.__value_.__s + 23) = v56;
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_108:
          if (v17) {
            goto LABEL_109;
          }
          goto LABEL_92;
        }
      }
      else
      {
        StringFormatter::StringFormatter((StringFormatter *)&buf, "<#%04d>", *(_DWORD *)(v54 + 32));
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v62 = &buf;
        }
        else {
          unint64_t v62 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = buf.__r_.__value_.__l.__size_;
        }
        MEMORY[0x210558E80](v175, v62, size);
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_108;
        }
      }
      operator delete(buf.__r_.__value_.__l.__data_);
      if (v17)
      {
LABEL_109:
        uint64_t v57 = *v17;
        goto LABEL_110;
      }
LABEL_92:
      LODWORD(v57) = 0;
LABEL_110:
      unsigned int v64 = HIBYTE(v175[0].__r_.__value_.__r.__words[2]);
      if ((v175[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v64 = v175[0].__r_.__value_.__r.__words[1];
      }
      LODWORD(v174.__r_.__value_.__r.__words[1]) = v57;
      *(std::string::size_type *)((char *)&v174.__r_.__value_.__r.__words[1] + 4) = v64;
      v174.__r_.__value_.__r.__words[0] = __PAIR64__(*(void *)(*((void *)this + 61) + 16), *(_DWORD *)(*((void *)this + 61) + 8) - *((_DWORD *)this + 98));
      (*(void (**)(ExtractFeaturesImpl *, std::string *))(*(void *)this + 152))(this, &v174);
LABEL_113:
      if (SHIBYTE(v181) < 0) {
        operator delete(*((void **)&v180 + 1));
      }
      if (SBYTE7(v180) < 0) {
        operator delete((void *)v179);
      }
      if (SHIBYTE(v178) < 0) {
        operator delete(*((void **)&v177 + 1));
      }
      if (SBYTE7(v177) < 0) {
        operator delete((void *)v176);
      }
      if (SHIBYTE(v175[1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175[1].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v175[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175[0].__r_.__value_.__l.__data_);
      }
LABEL_125:
      if (*((unsigned char *)this + 233))
      {
        (*(void (**)(std::string *__return_ptr))(**((void **)this + 2) + 16))(&v174);
        std::string::size_type v65 = v174.__r_.__value_.__r.__words[0];
        if (v174.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v174.__r_.__value_.__l.__size_);
        }
        if (!v65) {
          *((unsigned char *)this + 920) = 1;
        }
      }
      uint64_t v66 = *v4;
    }
    while ((void *)(v66 + 8) == v67);
    uint64_t v68 = v67[5];
    if (*(unsigned char *)(v68 + 9)) {
      break;
    }
    if (*(unsigned char *)(v68 + 8)) {
      ++*((void *)this + 84);
    }
  }
LABEL_137:
  (*(void (**)(ExtractFeaturesImpl *))(*(void *)this + 104))(this);
  unint64_t v69 = (std::__shared_weak_count *)*((void *)this + 71);
  long long v70 = 0uLL;
  *((_OWORD *)this + 35) = 0u;
  if (v69)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
    long long v70 = 0uLL;
  }
  int v71 = (std::__shared_weak_count *)*((void *)this + 73);
  *((_OWORD *)this + 36) = v70;
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  uint64_t v170 = (std::string *)((char *)this + 400);
  std::string::size_type v168 = (char *)this + 448;
  *(_OWORD *)((char *)this + 600) = 0u;
  long long v166 = (std::string *)((char *)this + 536);
  std::string::size_type v167 = (std::string *)((char *)this + 424);
  char v72 = 1;
  while (1)
  {
    while (1)
    {
      (*(void (**)(std::string *__return_ptr))(**((void **)this + 2) + 16))(&v174);
      int64x2_t silence = *(int64x2_t *)&v174.__r_.__value_.__l.__data_;
      *(_OWORD *)&v174.__r_.__value_.__l.__data_ = 0uLL;
      std::string::size_type v74 = (std::__shared_weak_count *)*((void *)this + 60);
      *(int64x2_t *)unint64_t v4 = silence;
      if (v74)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
        uint64_t v75 = *v4;
        if (v174.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v174.__r_.__value_.__l.__size_);
        }
        if (!v75) {
          goto LABEL_300;
        }
      }
      else if (!silence.i64[0])
      {
        goto LABEL_300;
      }
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
      uint64_t v76 = *((void *)this + 59);
      int v78 = (std::string *)(v76 + 8);
      if ((void *)(v76 + 8) != v77) {
        break;
      }
      *((void *)this + 61) = 0;
    }
    *((void *)this + 61) = v77[5] + 8;
    unint64_t v171 = v79;
    if (v78 == v79)
    {
      unint64_t v169 = 0;
    }
    else
    {
      uint64_t v80 = (void *)v79[1].__r_.__value_.__r.__words[2];
      uint64_t v81 = v80[4];
      if (v81 != *((void *)this + 72))
      {
        uint64_t v82 = v80[5];
        if (v82) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
        }
        *((void *)this + 72) = v81;
        long long v83 = (std::__shared_weak_count *)*((void *)this + 73);
        *((void *)this + 73) = v82;
        if (v83)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v83);
          uint64_t v81 = *((void *)this + 72);
        }
        if ((void *)(v81 + 8) == v84) {
          uint64_t v85 = 0;
        }
        else {
          uint64_t v85 = v84[5] + 8;
        }
        *((void *)this + 76) = v85;
        *((void *)this + 79) = -1;
      }
      unint64_t v169 = (std::string *)(v80 + 1);
      uint64_t v86 = v80[2];
      if (v86 != *((void *)this + 70))
      {
        uint64_t v87 = v80[3];
        if (v87) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
        }
        *((void *)this + 70) = v86;
        uint64_t v88 = (std::__shared_weak_count *)*((void *)this + 71);
        *((void *)this + 71) = v87;
        if (v88)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v88);
          uint64_t v86 = *((void *)this + 70);
        }
        if ((void *)(v86 + 8) == v89) {
          uint64_t v90 = 0;
        }
        else {
          uint64_t v90 = v89[5] + 8;
        }
        *((void *)this + 75) = v90;
        *((void *)this + 80) = 0;
        *((void *)this + 82) = 0;
        ++*((void *)this + 79);
      }
    }
    if (v72) {
      ExtractFeaturesImpl::extract_silence(this, 50);
    }
    long long v91 = (const std::string *)*((void *)this + 61);
    std::string::pointer data = v91[2].__r_.__value_.__l.__data_;
    if (data != *((std::string::pointer *)this + 63))
    {
      std::string::size_type v93 = v91[2].__r_.__value_.__l.__size_;
      if (v93) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::size_type v94 = (std::__shared_weak_count *)*((void *)this + 64);
      *((void *)this + 63) = data;
      *((void *)this + 64) = v93;
      if (v94) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v94);
      }
      v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
      v174.__r_.__value_.__l.__size_ = (std::string::size_type)&v174;
      uint64_t v95 = v91[2].__r_.__value_.__l.__data_;
      if (v95)
      {
        int64_t v172 = v91;
        std::string::size_type v96 = 0;
        BOOL v97 = &v174;
        do
        {
          int64_t v98 = (std::string *)operator new(0x18uLL);
          v98->__r_.__value_.__l.__size_ = (std::string::size_type)v97;
          v98->__r_.__value_.__r.__words[2] = (std::string::size_type)v95;
          v98->__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
          v97->__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
          v174.__r_.__value_.__l.__size_ = (std::string::size_type)v98;
          ++v96;
          BOOL v97 = v98;
          uint64_t v95 = (void *)*v95;
        }
        while (v95);
        v174.__r_.__value_.__r.__words[2] = v96;
        uint64_t v99 = 100;
        uint64_t v100 = 80;
        uint64_t v101 = 100;
        long long v91 = v172;
        do
        {
          std::string::size_type v102 = v98->__r_.__value_.__r.__words[2];
          int v103 = *(_DWORD *)(v102 + 216);
          switch(v103)
          {
            case 0:
            case 3:
            case 4:
            case 5:
              break;
            case 1:
              uint64_t v101 = 100;
              break;
            case 2:
              uint64_t v101 = (int)(float)(*(float *)(v102 + 220) * (float)(int)v101);
              break;
            default:
              uint64_t v101 = dword_20D6C7484[v103 - 6];
              break;
          }
          int v104 = *(_DWORD *)(v102 + 232);
          switch(v104)
          {
            case 0:
            case 3:
            case 5:
              break;
            case 1:
              uint64_t v99 = 100;
              break;
            case 2:
              float v105 = *(float *)(v102 + 236);
              float v106 = (float)(int)v99;
              goto LABEL_190;
            case 4:
              float v105 = *(float *)(v102 + 236);
              float v106 = 100.0;
LABEL_190:
              uint64_t v99 = (int)(float)(v105 * v106);
              break;
            default:
              uint64_t v99 = dword_20D6C7484[v104 - 6];
              break;
          }
          switch(*(_DWORD *)(v102 + 240))
          {
            case 0:
            case 3:
            case 4:
              break;
            case 1:
              uint64_t v100 = 80;
              break;
            case 2:
              uint64_t v100 = (int)(float)(*(float *)(v102 + 244) * (float)(int)v100);
              break;
            case 5:
              uint64_t v100 = 0;
              break;
            default:
              uint64_t v100 = dword_20D6C7498[v104 - 6];
              break;
          }
          int64_t v98 = (std::string *)v98->__r_.__value_.__l.__size_;
        }
        while (v98 != &v174);
      }
      else
      {
        v174.__r_.__value_.__r.__words[2] = 0;
        uint64_t v100 = 80;
        uint64_t v101 = 100;
        uint64_t v99 = 100;
      }
      if (v101 != *((_DWORD *)this + 130))
      {
        (*(void (**)(ExtractFeaturesImpl *, uint64_t))(*(void *)this + 192))(this, v101);
        *((_DWORD *)this + 130) = v101;
      }
      if (v99 != *((_DWORD *)this + 131))
      {
        (*(void (**)(ExtractFeaturesImpl *, uint64_t))(*(void *)this + 200))(this, v99);
        *((_DWORD *)this + 131) = v99;
      }
      if (v100 != *((_DWORD *)this + 132))
      {
        (*(void (**)(ExtractFeaturesImpl *, uint64_t))(*(void *)this + 208))(this, v100);
        *((_DWORD *)this + 132) = v100;
      }
      std::string::pointer v107 = v91[2].__r_.__value_.__l.__data_;
      uint64_t v108 = (const void **)(v107 + 296);
      uint64_t v109 = v107[319];
      size_t v110 = *((void *)v107 + 38);
      if ((v109 & 0x80u) == 0) {
        uint64_t v111 = v107[319];
      }
      else {
        uint64_t v111 = *((void *)v107 + 38);
      }
      uint64_t v112 = *((unsigned __int8 *)this + 559);
      int v113 = (char)v112;
      if ((v112 & 0x80u) != 0) {
        uint64_t v112 = *((void *)this + 68);
      }
      if (v111 == v112)
      {
        if (v113 >= 0) {
          char v114 = (unsigned __int8 *)this + 536;
        }
        else {
          char v114 = (unsigned __int8 *)v166->__r_.__value_.__r.__words[0];
        }
        if ((v109 & 0x80) == 0)
        {
          if (v109)
          {
            std::string v115 = v108;
            while (*(unsigned __int8 *)v115 == *v114)
            {
              std::string v115 = (const void **)((char *)v115 + 1);
              ++v114;
              if (!--v109) {
                goto LABEL_222;
              }
            }
            goto LABEL_221;
          }
LABEL_222:
          std::__list_imp<char *>::clear(&v174);
          long long v91 = (const std::string *)*((void *)this + 61);
          goto LABEL_223;
        }
        if (!memcmp(*v108, v114, v110)) {
          goto LABEL_222;
        }
      }
LABEL_221:
      (*(void (**)(ExtractFeaturesImpl *, const void **))(*(void *)this + 216))(this, v108);
      std::string::operator=(v166, (const std::string *)(v91[2].__r_.__value_.__r.__words[0] + 296));
      goto LABEL_222;
    }
LABEL_223:
    std::string::operator=(v170, v91 + 1);
    uint64_t v116 = *v4;
    if ((void *)(v116 + 8) == v117) {
      MEMORY[0x210558E70](v167, "null");
    }
    else {
      std::string::operator=(v167, (const std::string *)(v117[5] + 8));
    }
    MEMORY[0x210558E70](v168, "null");
    if (v78 != v171 && !v169->__r_.__value_.__s.__data_[1])
    {
      ExtractFeaturesImpl::punctuation(&v174, (uint64_t)this, 0);
      char v129 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v131 = (void *)v174.__r_.__value_.__r.__words[0];
        if (v174.__r_.__value_.__l.__size_ != 1)
        {
LABEL_297:
          operator delete(v131);
          goto LABEL_228;
        }
        int v130 = *v174.__r_.__value_.__l.__data_;
      }
      else
      {
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) != 1) {
          goto LABEL_228;
        }
        int v130 = v174.__r_.__value_.__s.__data_[0];
      }
      if (v130 <= 57)
      {
        long long v132 = "exclamation";
        if (v130 == 33) {
          goto LABEL_294;
        }
        if (v130 == 46)
        {
          long long v132 = "period";
          goto LABEL_294;
        }
      }
      else
      {
        switch(v130)
        {
          case ':':
            long long v132 = "colon";
            goto LABEL_294;
          case ';':
            long long v132 = "semicolon";
            goto LABEL_294;
          case '?':
            long long v132 = "question";
            goto LABEL_294;
        }
      }
      long long v132 = "comma";
      if (v130 != 44)
      {
LABEL_295:
        if ((v129 & 0x80) == 0) {
          goto LABEL_228;
        }
        uint64_t v131 = (void *)v174.__r_.__value_.__r.__words[0];
        goto LABEL_297;
      }
LABEL_294:
      MEMORY[0x210558E70](v168, v132);
      char v129 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
      goto LABEL_295;
    }
LABEL_228:
    uint64_t v118 = *v4;
    if ((void *)(v118 + 8) != v119)
    {
      uint64_t v120 = v119[5];
      *((void *)this + 62) = v120 + 8;
      std::string::operator=(v170, (const std::string *)(v120 + 32));
      uint64_t v121 = (uint64_t **)*((void *)this + 62);
      long long v123 = *v121;
      uint64_t v122 = v121[1];
      unint64_t v173 = v122;
      while (v123 != v122)
      {
        (*(void (**)(ExtractFeaturesImpl *))(*(void *)this + 112))(this);
        *((void *)this + 81) = 0;
        uint64_t v124 = *v123;
        uint64_t v125 = v123[1];
        BOOL v13 = v125 == *v123;
        *((void *)this + 77) = (v125 - *v123) >> 6;
        if (!v13)
        {
          do
          {
            *((_DWORD *)this + 176) = *((_DWORD *)this + 175);
            *((_DWORD *)this + 175) = *(_DWORD *)(v124 + 4);
            *((unsigned char *)this + 696) = *(_DWORD *)v124 > 0;
            *((void *)this + 83) = 0;
            uint64_t v126 = *(void *)(v124 + 16);
            uint64_t v127 = *(void *)(v124 + 24);
            for (*((void *)this + 78) = 0xAAAAAAAAAAAAAAABLL * ((v127 - v126) >> 3); v126 != v127; v126 += 24)
            {
              if (*(char *)(v124 + 63) < 0) {
                std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)(v124 + 40), *(void *)(v124 + 48));
              }
              else {
                std::string v174 = *(std::string *)(v124 + 40);
              }
              (*(void (**)(ExtractFeaturesImpl *, uint64_t, void, std::string *))(*(void *)this + 160))(this, v126, 0, &v174);
              if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v174.__r_.__value_.__l.__data_);
              }
              ++*((void *)this + 83);
            }
            *(int64x2_t *)((char *)this + 648) = vaddq_s64(*(int64x2_t *)((char *)this + 648), vdupq_n_s64(1uLL));
            ++*((void *)this + 86);
            v124 += 64;
          }
          while (v124 != v125);
        }
        (*(void (**)(ExtractFeaturesImpl *))(*(void *)this + 120))(this);
        ++*((void *)this + 80);
        ++*((void *)this + 85);
        v123 += 3;
        uint64_t v122 = v173;
      }
      goto LABEL_260;
    }
    *((void *)this + 62) = 0;
    int v128 = **((_DWORD **)this + 61);
    if (v128 <= 1835102826) {
      break;
    }
    if (v128 != 1835102827)
    {
      if (v128 != 1886547312) {
        goto LABEL_260;
      }
      goto LABEL_251;
    }
    (*(void (**)(ExtractFeaturesImpl *))(*(void *)this + 136))(this);
LABEL_260:
    if (*((char *)this + 423) < 0)
    {
      **((unsigned char **)this + 50) = 0;
      *((void *)this + 51) = 0;
    }
    else
    {
      *((unsigned char *)this + 400) = 0;
      *((unsigned char *)this + 423) = 0;
    }
    if (*((char *)this + 447) < 0)
    {
      **((unsigned char **)this + 53) = 0;
      *((void *)this + 54) = 0;
    }
    else
    {
      *((unsigned char *)this + 424) = 0;
      *((unsigned char *)this + 447) = 0;
    }
    if (v78 == v171) {
      goto LABEL_285;
    }
    if (v169->__r_.__value_.__s.__data_[1])
    {
      uint64_t v139 = 180;
      goto LABEL_299;
    }
    (*(void (**)(std::string *__return_ptr))(**((void **)this + 2) + 16))(&v174);
    if (v174.__r_.__value_.__r.__words[0]
      && ExtractFeaturesImpl::is_paragraph_break((uint64_t)v174.__r_.__value_.__l.__data_))
    {
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
      int64x2_t silence = ExtractFeaturesImpl::extract_silence(this, 500);
      int v133 = 0;
      int v134 = 3;
    }
    else
    {
      int v134 = 0;
      int v133 = 1;
    }
    if (v174.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v174.__r_.__value_.__l.__size_);
    }
    if (v133)
    {
      if (v169->__r_.__value_.__s.__data_[0])
      {
        uint64_t v135 = *((void *)this + 61);
        char v136 = (char *)(v135 + 24);
        int v137 = *(char *)(v135 + 47);
        if (v137 < 0)
        {
          if (*(void *)(v135 + 32) != 1) {
            goto LABEL_283;
          }
          char v136 = *(char **)v136;
        }
        else if (v137 != 1)
        {
LABEL_283:
          uint64_t v138 = 120;
          goto LABEL_284;
        }
        if (!memchr("()\"", *v136, 4uLL)) {
          goto LABEL_283;
        }
        uint64_t v138 = 2;
LABEL_284:
        int64x2_t silence = ExtractFeaturesImpl::extract_silence(this, v138);
      }
LABEL_285:
      int v134 = 0;
    }
    char v72 = 0;
    if (v134) {
      goto LABEL_300;
    }
  }
  if (v128 == 1635083369)
  {
LABEL_251:
    (*(void (**)(ExtractFeaturesImpl *))(*(void *)this + 144))(this);
    goto LABEL_260;
  }
  if (v128 != 1651664235) {
    goto LABEL_260;
  }
  if (!ExtractFeaturesImpl::is_paragraph_break(v118))
  {
    (*(void (**)(ExtractFeaturesImpl *))(*(void *)this + 128))(this);
    goto LABEL_260;
  }
  uint64_t v139 = 500;
LABEL_299:
  int64x2_t silence = ExtractFeaturesImpl::extract_silence(this, v139);
LABEL_300:
  uint64_t v140 = *((void *)this + 98);
  uint64_t v141 = *((void *)this + 97);
  unint64_t v142 = 0x84BDA12F684BDA13 * ((v140 - v141) >> 3);
  if (v142 >= 2)
  {
    unint64_t v143 = 0;
    LODWORD(v144) = 0;
    uint64_t v145 = 1;
    do
    {
      unint64_t v146 = v145;
      if (*(_DWORD *)(v141 + 216 * v143 + 172))
      {
        if (v143 >= (int)v144)
        {
          uint64_t v144 = (int)v144;
          int v147 = *(_DWORD *)(v141 + 216 * v145 + 60);
          long long v148 = (_DWORD *)(v141 + 64 + 216 * (int)v144);
          do
          {
            _DWORD *v148 = v147;
            v148 += 54;
            ++v144;
          }
          while (v146 != v144);
        }
        LODWORD(v144) = v146;
      }
      uint64_t v145 = v146 + 1;
      unint64_t v143 = v146;
    }
    while (v146 + 1 != v142);
  }
  if (v141 != v140) {
    *(_DWORD *)(v140 - 152) = 0;
  }
  (*(void (**)(ExtractFeaturesImpl *, int64x2_t))(*(void *)this + 176))(this, silence);
  (*(void (**)(ExtractFeaturesImpl *))(*(void *)this + 168))(this);
  (*(void (**)(ExtractFeaturesImpl *))(*(void *)this + 184))(this);
  *((_DWORD *)this + 60) += *((_DWORD *)this + 59);
  if (*((char *)this + 295) < 0)
  {
    if (*((void *)this + 35)) {
LABEL_312:
    }
      std::string::append((std::string *)((char *)this + 272), " ");
  }
  else if (*((unsigned char *)this + 295))
  {
    goto LABEL_312;
  }
  int v149 = *((char *)this + 271);
  if (v149 >= 0) {
    size_t v150 = (char *)this + 248;
  }
  else {
    size_t v150 = (const std::string::value_type *)*((void *)this + 31);
  }
  if (v149 >= 0) {
    std::string::size_type v151 = *((unsigned __int8 *)this + 271);
  }
  else {
    std::string::size_type v151 = *((void *)this + 32);
  }
  std::string::append((std::string *)((char *)this + 272), v150, v151);
  if (*((char *)this + 343) < 0)
  {
    if (*((void *)this + 41)) {
LABEL_321:
    }
      std::string::append((std::string *)((char *)this + 320), " ");
  }
  else if (*((unsigned char *)this + 343))
  {
    goto LABEL_321;
  }
  int v152 = *((char *)this + 319);
  if (v152 >= 0) {
    char v153 = (char *)this + 296;
  }
  else {
    char v153 = (const std::string::value_type *)*((void *)this + 37);
  }
  if (v152 >= 0) {
    std::string::size_type v154 = *((unsigned __int8 *)this + 319);
  }
  else {
    std::string::size_type v154 = *((void *)this + 38);
  }
  std::string::append((std::string *)((char *)this + 320), v153, v154);
  if (*((char *)this + 391) < 0)
  {
    uint64_t v155 = *((void *)this + 47);
    if (v155)
    {
      std::string::size_type v156 = (char *)*((void *)this + 46);
      goto LABEL_337;
    }
  }
  else
  {
    uint64_t v155 = *((unsigned __int8 *)this + 391);
    if (*((unsigned char *)this + 391))
    {
      std::string::size_type v156 = (char *)this + 368;
LABEL_337:
      unint64_t v157 = &v156[v155];
      uint64_t v158 = v156;
      unint64_t v159 = v157;
      do
      {
        if (*v158 == 115)
        {
          uint64_t v160 = 1u;
          while (v160 != 3)
          {
            if (&v158[v160] == v157) {
              goto LABEL_347;
            }
            int v161 = v158[v160];
            int v162 = aSil_2[v160++];
            if (v161 != v162) {
              goto LABEL_339;
            }
          }
          unint64_t v159 = v158;
        }
LABEL_339:
        ++v158;
      }
      while (v158 != v157);
LABEL_347:
      if (v159 != v157 && v159 - v156 != -1) {
        std::string::erase((std::string *)((char *)this + 368), v159 - v156, 3uLL);
      }
    }
  }
  int v163 = *((char *)this + 367);
  if (v163 >= 0) {
    int v164 = (char *)this + 344;
  }
  else {
    int v164 = (const std::string::value_type *)*((void *)this + 43);
  }
  if (v163 >= 0) {
    std::string::size_type v165 = *((unsigned __int8 *)this + 367);
  }
  else {
    std::string::size_type v165 = *((void *)this + 44);
  }
  std::string::append((std::string *)((char *)this + 368), v164, v165);
}

void sub_20D3E1F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ExtractFeaturesImpl::punctuation(std::string *this, uint64_t a2, uint64_t a3)
{
  do
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 16) + 16))(&v13);
    uint64_t v6 = v13;
    if (!v13
    {
      int v11 = 3;
    }
    else
    {
      uint64_t v9 = v7[5];
      if (*(_DWORD *)(v9 + 8) == 1886809699)
      {
        if (*(char *)(v9 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(v9 + 32), *(void *)(v9 + 40));
        }
        else
        {
          long long v10 = *(_OWORD *)(v9 + 32);
          this->__r_.__value_.__r.__words[2] = *(void *)(v9 + 48);
          *(_OWORD *)&this->__r_.__value_.__l.__data_ = v10;
        }
        int v11 = 1;
      }
      else
      {
        if (v8 == v12) {
          int v11 = 2;
        }
        else {
          int v11 = 3;
        }
        if (v8 == v12) {
          ++a3;
        }
      }
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  while (v11 == 2);
  if (v11 != 1) {
    std::string::basic_string[abi:ne180100]<0>(this, &byte_20D5A22AE);
  }
}

void sub_20D3E2184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL ExtractFeaturesImpl::is_paragraph_break(uint64_t a1)
{
  if ((void *)(a1 + 8) == v2) {
    return 0;
  }
  if (*(_DWORD *)(v2[5] + 8) != 1651664235) {
    return 0;
  }
  return (void *)(a1 + 8) != v3 && *(_DWORD *)(v3[5] + 12) == 1;
}

void WordFeatures::~WordFeatures(void **this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

void ExtractFeaturesImpl::clear(ExtractFeaturesImpl *this)
{
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 712);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 712));
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 65) = 0x6400000064;
  *((_DWORD *)this + 132) = 80;
  if (*((char *)this + 559) < 0)
  {
    **((unsigned char **)this + 67) = 0;
    *((void *)this + 68) = 0;
  }
  else
  {
    *((unsigned char *)this + 536) = 0;
    *((unsigned char *)this + 559) = 0;
  }
  uint64_t v3 = (void *)((char *)this + 504);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 64);
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    long long v5 = (std::__shared_weak_count *)*((void *)this + 64);
    *uint64_t v3 = 0;
    *((void *)this + 64) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    *uint64_t v3 = 0;
    *((void *)this + 64) = 0;
  }
  *((_DWORD *)this + 60) = 0;
  if (*((char *)this + 295) < 0)
  {
    **((unsigned char **)this + 34) = 0;
    *((void *)this + 35) = 0;
  }
  else
  {
    *((unsigned char *)this + 272) = 0;
    *((unsigned char *)this + 295) = 0;
  }
  if (*((char *)this + 343) < 0)
  {
    **((unsigned char **)this + 40) = 0;
    *((void *)this + 41) = 0;
  }
  else
  {
    *((unsigned char *)this + 320) = 0;
    *((unsigned char *)this + 343) = 0;
  }
  if (*((char *)this + 391) < 0)
  {
    **((unsigned char **)this + 46) = 0;
    *((void *)this + 47) = 0;
  }
  else
  {
    *((unsigned char *)this + 368) = 0;
    *((unsigned char *)this + 391) = 0;
  }
  *(_OWORD *)((char *)this + 600) = 0u;
  FrontendModule::clear(this);
  std::recursive_mutex::unlock(v2);
}

void sub_20D3E23C8(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'ExtractFeaturesToTarget::set_output(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 - 928) + 24))(a1 - 928);
  *(void *)(a1 + 8) = a2;
  return result;
}

uint64_t ExtractFeaturesToTarget::set_output(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[117] = a2;
  return result;
}

void ExtractFeaturesToTarget::end_sentence(ExtractFeaturesToTarget *this)
{
  fwrite("#GOODBYE\n", 9uLL, 1uLL, (FILE *)*MEMORY[0x263EF8358]);
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 712));
}

uint64_t ExtractFeaturesToTarget::generate_sentence_footer(ExtractFeaturesToTarget *this)
{
  return FeatureExtractorTarget::add_comment(this, "#\n# PRE_SYL_BND          : NONE(0) SYLL(1) WORD(2) PHRS(3)\n#\n# POST_SYL_BND         : NONE(0) SYLL(1) WORD(2) PHRS(3)\n#\n# PROM                 : NONE(0) SECONDARY(1) PRIMARY(2) SENT_ACC(3)\n#\n# SYL_POS_IN_WORD      : INITIAL(1) MIDDLE(2) FINAL(3)\n#\n# WRD_POS_IN_PHRS      : SENT_AND_PHRS_INITIAL(1) MIDDLE(2) SENT_MIDDLE_AND_PHRS_INITIAL(3) SENT_MIDDLE_AND_PHRS_FINAL(4) SENTALND_PHRS_FINAL(5)\n#\n# BND                  : NONE(0) SYLL(1) WORD(2) PHRS(3)\n#\n# SYL_POS_IN_SENT      : INITIAL(1) MIDDLE(2) FINAL(3)\n#\n# PHRS_POS_IN_SENT     : FINAL(1) MIDDLE(2)\n#\n"
           "# FINE_SYL_POS_IN_PHRS : FIRST(0) SECOND(1) FINAL(2) INITIAL(3) LAST(4) MIDDLE(5) PENULT(6) SILENCE(7)\n"
           "#\n"
           "# SYL_POS              : PHRS_INITIAL(0) PHRS_FINAL(1) PHRS_SINGLE(2) SENT_FINAL(3) WORD_INITIAL(4) WORD_MEDI"
           "AL(5) WORD_FINAL(6) PHRS_MEDIAL(7)\n"
           "#\n"
           "# SYL_TYPE             : UNSTR(0) STR(1) PA(2) FIRST_SENT_PA(3) FIRST_PHRS_PA(4) LAST_PHRS_PA(5) LAST_SENT_PA"
           "(6) 2NDSTR(7)\n"
           "#\n"
           "# SYL_WORD             : NO_ACC(0) BEF_ACC(1) ON_ACC(2) POST_ACC(3) POST_POST_ACC(4)\n"
           "#\n"
           "# WORD_PHRS            : PHRS_INITIAL(0) PHRS_MEDIAL(1) PHRS_FINAL(2) SENT_INITIAL(3) SENT_FINAL(4)\n"
           "#\n"
           "# PHON_POS_SYL         : WRD_INITIAL(0) SYL_INITIAL(1) SYL_MEDIAL(2) SYL_FINAL(3) WRD_FINAL(4)\n"
           "#\n"
           "# SENT_TYPE            : MONOWORD(0) QUESTION(1) STATEMENT(2) WORD(3) MAX(4)\n"
           "#\n"
           "# WORD_PRM             : UNACC(0) DEACC(1) ACC(2) EMPH(3) UNKNOWN(4)\n"
           "#\n"
           "# PHRASE_TYPE          : P(0) T(1) Y(2) UNKNOWN(3)\n"
           "#\n");
}

uint64_t ExtractFeaturesToTarget::extract_phon_pronunciation(uint64_t a1, std::string *__str, int a3)
{
  unint64_t v4 = __str;
  uint64_t v51 = *MEMORY[0x263EF8340];
  int v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__str->__r_.__value_.__l.__size_) {
      goto LABEL_15;
    }
    __n128 v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    __n128 v7 = __str;
    if (!*((unsigned char *)&__str->__r_.__value_.__s + 23)) {
      goto LABEL_15;
    }
  }
  int v8 = v7->__r_.__value_.__s.__data_[0];
  if ((v8 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v8 + 60) & 0x400) != 0)
  {
    unsigned __int8 v9 = std::stoi(__str, 0, 10);
    goto LABEL_26;
  }
  if ((v6 & 0x80) == 0)
  {
    if (v6 != 1) {
      goto LABEL_15;
    }
LABEL_14:
    unsigned __int8 v9 = v4->__r_.__value_.__s.__data_[0];
    goto LABEL_26;
  }
  if (__str->__r_.__value_.__l.__size_ == 1)
  {
    unint64_t v4 = (std::string *)__str->__r_.__value_.__r.__words[0];
    goto LABEL_14;
  }
LABEL_15:
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v12 = v4;
    }
    else {
      int v12 = (std::string *)v4->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    int v50 = v12;
  }
  if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = v4;
  }
  else {
    uint64_t v13 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }
  unsigned __int8 v9 = -1;
LABEL_26:
  uint64_t v14 = (FILE **)MEMORY[0x263EF8358];
  fputc(32, (FILE *)*MEMORY[0x263EF8358]);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", v9);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", *(void *)(a1 + 664) == *(void *)(a1 + 624) - 1);
  fprintf(*v14, " %5u", *(void *)(a1 + 664) == 0);
  fprintf(*v14, " %5u", 0);
  uint64_t v15 = *(void *)(a1 + 648);
  if (v15) {
    int v16 = 2;
  }
  else {
    int v16 = 1;
  }
  if (v15 == *(void *)(a1 + 616) - 1) {
    int v17 = 3;
  }
  else {
    int v17 = v16;
  }
  fprintf(*v14, " %5u", v17);
  uint64_t v18 = *(void *)(a1 + 600);
  if (v18 && (uint64_t v19 = *(void *)(a1 + 640), v19 != *(void *)(v18 + 16) - 1))
  {
    if (v19)
    {
      int v21 = 2;
    }
    else if (*(void *)(a1 + 632) || (uint64_t v48 = *(void *)(a1 + 608)) == 0 || *(void *)(v48 + 24) == 1)
    {
      int v21 = 3;
    }
    else
    {
      int v21 = 1;
    }
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 608);
    if (v20 && *(void *)(a1 + 632) != *(void *)(v20 + 24) - 1) {
      int v21 = 4;
    }
    else {
      int v21 = 5;
    }
  }
  fprintf(*v14, " %5u", v21);
  if (*(void *)(a1 + 664) == *(void *)(a1 + 624) - 1)
  {
    if (*(void *)(a1 + 648) == *(void *)(a1 + 616) - 1)
    {
      uint64_t v22 = *(void *)(a1 + 600);
      if (v22 && *(void *)(a1 + 640) != *(void *)(v22 + 16) - 1) {
        int v23 = 2;
      }
      else {
        int v23 = 3;
      }
    }
    else
    {
      int v23 = 1;
    }
  }
  else
  {
    int v23 = 0;
  }
  fprintf(*v14, " %5u", v23);
  uint64_t v24 = *(void *)(a1 + 608);
  if ((!v24 || *(void *)(a1 + 632) == *(void *)(v24 + 24) - 1)
    && ((uint64_t v25 = *(void *)(a1 + 600)) == 0 || *(void *)(a1 + 640) == *(void *)(v25 + 16) - 1)
    && *(void *)(a1 + 648) == *(void *)(a1 + 616) - 1)
  {
    int v26 = 3;
  }
  else if (*(void *)(a1 + 632) || *(void *)(a1 + 640) || *(void *)(a1 + 648))
  {
    int v26 = 2;
  }
  else
  {
    int v26 = 1;
  }
  fprintf(*v14, " %5u", v26);
  uint64_t v27 = *(void *)(a1 + 600);
  if (v27) {
    LODWORD(v27) = *(_DWORD *)(v27 + 8);
  }
  fprintf(*v14, " %5u", v27);
  uint64_t v28 = *(void *)(a1 + 608);
  BOOL v29 = v28 && *(void *)(a1 + 632) != *(void *)(v28 + 24) - 1;
  fprintf(*v14, " %5u", v29);
  uint64_t v30 = *(void *)(a1 + 600);
  if (v30 && (uint64_t v31 = *(void *)(a1 + 656), v32 = *(void *)(v30 + 8), v31 != v32 - 1))
  {
    if (v31 == v32 - 2)
    {
      int v33 = 6;
    }
    else
    {
      if (v31 == 1) {
        int v44 = 1;
      }
      else {
        int v44 = 5;
      }
      if (v31) {
        int v33 = v44;
      }
      else {
        int v33 = 0;
      }
    }
  }
  else
  {
    int v33 = 4;
  }
  fprintf(*v14, " %5u", v33);
  uint64_t v34 = *(void *)(a1 + 600);
  if (v34 && ((v35 = *(void *)(a1 + 616), (uint64_t v36 = *(void *)(v34 + 16) - 1) != 0) || v35 != 1))
  {
    uint64_t v42 = *(void *)(a1 + 648);
    if (v42 == v35 - 1)
    {
      if (*(void *)(a1 + 640) == v36)
      {
        uint64_t v43 = *(void *)(a1 + 608);
        if (v43 && *(void *)(a1 + 632) != *(void *)(v43 + 24) - 1) {
          LODWORD(v37) = 1;
        }
        else {
          LODWORD(v37) = 3;
        }
      }
      else
      {
        LODWORD(v37) = 6;
      }
    }
    else if (v42)
    {
      LODWORD(v37) = 5;
    }
    else
    {
      uint64_t v37 = *(void *)(a1 + 640);
      if (v37) {
        LODWORD(v37) = 4;
      }
    }
  }
  else
  {
    LODWORD(v37) = 2;
  }
  fprintf(*v14, " %5u", v37);
  fprintf(*v14, " %5u", *(unsigned __int8 *)(a1 + 696));
  fprintf(*v14, " %5u", 0);
  uint64_t v38 = *(void *)(a1 + 600);
  if (v38 && (uint64_t v39 = *(void *)(a1 + 640), v39 != *(void *)(v38 + 16) - 1))
  {
    if (v39)
    {
      int v41 = 1;
    }
    else if (*(void *)(a1 + 632))
    {
      int v41 = 0;
    }
    else
    {
      int v41 = 3;
    }
  }
  else
  {
    uint64_t v40 = *(void *)(a1 + 608);
    if (v40 && *(void *)(a1 + 632) != *(void *)(v40 + 24) - 1) {
      int v41 = 2;
    }
    else {
      int v41 = 4;
    }
  }
  fprintf(*v14, " %5u", v41);
  uint64_t v45 = *(void *)(a1 + 664);
  if (v45 == *(void *)(a1 + 624) - 1)
  {
    if (*(void *)(a1 + 648) == *(void *)(a1 + 616) - 1) {
      int v46 = 4;
    }
    else {
      int v46 = 3;
    }
  }
  else if (v45)
  {
    int v46 = 2;
  }
  else
  {
    int v46 = *(void *)(a1 + 648) != 0;
  }
  fprintf(*v14, " %5u", v46);
  fprintf(*v14, " %5u", *(void *)(a1 + 624));
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", a3);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", *(_DWORD *)(a1 + 700));
  return fputc(10, *v14);
}

size_t ExtractFeaturesToTarget::extract_word_features(ExtractFeaturesToTarget *this, const WordFeatures *a2)
{
  return FeatureExtractorTarget::add_word(a2, a2);
}

uint64_t ExtractFeaturesToTarget::start_sentence(ExtractFeaturesToTarget *this)
{
  uint64_t v1 = (FeatureExtractorTarget *)FeatureExtractorTarget::add_comment(this, "#HELLO\n#\n");
  uint64_t v2 = (FeatureExtractorTarget *)FeatureExtractorTarget::add_comment(v1, "0:PHONEMES  1:MARKERS  2:USPHONEMES  3:PLOSIVES  4:USMARKERS  5:PRE_SYL_BND  6:POST_SYL_BND  7:PROM  8:SYL_POS_IN_WORD  9:WRD_POS_IN_PHRS  10:BND  11:SYL_POS_IN_SENT  12:NR_SYL_IN_PHRS  13:PHRS_POS_IN_SENT  14:FINE_SYL_POS_IN_PHRS  15:SYL_POS  16:SYL_TYPE  17:SYL_WORD  18:WORD_PHRS  19:PHON_POS_SYL  20:PHON_CNT_SYL  21:PITCH_MEAN  22:PITCH_MEAN_SCALED  23:PITCH_STDV  24:DUR_MEAN  25:DUR_STDV  26:SENT_TYPE  27:WORD_PRM  28:PHRASE_TYPE 29:TONE \n");
  return FeatureExtractorTarget::add_comment(v2, "#     0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29\n");
}

void ExtractFeaturesToTarget::extract_sentence_text(std::string **this)
{
  ExtractFeaturesImpl::extract_sentence_text((ExtractFeaturesImpl *)this);
  if (!*((unsigned char *)this + 8))
  {
    if (*((char *)this + 207) < 0)
    {
      uint64_t v2 = (std::string::value_type *)this[23];
      std::string::size_type v3 = (std::string::size_type)this[24];
    }
    else
    {
      uint64_t v2 = (std::string::value_type *)(this + 23);
      std::string::size_type v3 = *((unsigned __int8 *)this + 207);
    }
    FeatureExtractorOriginalText::set_original_text(this[14], v2, v3, 0);
    unint64_t v4 = this[14];
    if (*((char *)this + 319) < 0)
    {
      long long v5 = (std::string::value_type *)this[37];
      uint64_t v6 = (uint64_t)this[38];
    }
    else
    {
      long long v5 = (std::string::value_type *)(this + 37);
      uint64_t v6 = *((unsigned __int8 *)this + 319);
    }
    FeatureExtractorOriginalText::set_normalized_text(v4, v5, v6);
  }
}

void ExtractFeaturesToTarget::~ExtractFeaturesToTarget(ExtractFeaturesToTarget *this)
{
  ExtractFeaturesImpl::~ExtractFeaturesImpl(this);
  JUMPOUT(0x2105595E0);
}

void ExtractFeaturesImpl::~ExtractFeaturesImpl(ExtractFeaturesImpl *this)
{
  *(void *)this = off_26C2027B0;
  if (*((char *)this + 919) < 0) {
    operator delete(*((void **)this + 112));
  }
  if (*((char *)this + 895) < 0) {
    operator delete(*((void **)this + 109));
  }
  if (*((char *)this + 871) < 0) {
    operator delete(*((void **)this + 106));
  }
  int v8 = (void **)((char *)this + 824);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v8);
  int v8 = (void **)((char *)this + 800);
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](&v8);
  int v8 = (void **)((char *)this + 776);
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 712));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::string::size_type v3 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  if (*((char *)this + 343) < 0) {
    operator delete(*((void **)this + 40));
  }
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }
  if (*((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  __n128 v7 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  FrontendModule::~FrontendModule((void **)this);
}

void ExtractFeaturesToTable::end_sentence(ExtractFeaturesToTable *this)
{
}

uint64_t ExtractFeaturesToTable::extract_phon_pronunciation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *(void **)(a1 + 936);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v5 = *(void *)(v2 + 8);
  }
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, a2, v5);
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v42, 1);
  __n128 v7 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v42, 1);
  int v8 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v42, 1);
  unsigned __int8 v9 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v42, 1);
  std::ostream::operator<<();
  long long v10 = *(void **)(a1 + 936);
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v42, 1);
  int v11 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v42, 1);
  int v12 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v42, 1);
  std::ostream::operator<<();
  uint64_t v13 = *(void **)(a1 + 936);
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v42, 1);
  uint64_t v14 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v42, 1);
  std::ostream::operator<<();
  uint64_t v15 = *(void **)(a1 + 936);
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v42, 1);
  int v16 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v42, 1);
  std::ostream::operator<<();
  int v17 = *(void **)(a1 + 936);
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v42, 1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v42, 1);
  uint64_t v19 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v42, 1);
  uint64_t v20 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v42, 1);
  int v21 = *(char *)(v2 + 23);
  if (v21 < 0)
  {
    if (*(void *)(v2 + 8) != 3)
    {
LABEL_13:
      goto LABEL_14;
    }
    uint64_t v2 = *(void *)v2;
  }
  else if (v21 != 3)
  {
    goto LABEL_13;
  }
  if (*(_WORD *)v2 != 26995 || *(unsigned char *)(v2 + 2) != 108) {
    goto LABEL_13;
  }
LABEL_14:
  int v23 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v42, 1);
  uint64_t v24 = (void *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v42, 1);
  int v26 = *(char *)(a1 + 447);
  if (v26 >= 0) {
    uint64_t v27 = a1 + 424;
  }
  else {
    uint64_t v27 = *(void *)(a1 + 424);
  }
  if (v26 >= 0) {
    uint64_t v28 = *(unsigned __int8 *)(a1 + 447);
  }
  else {
    uint64_t v28 = *(void *)(a1 + 432);
  }
  BOOL v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
  LOBYTE(v42.__locale_) = 32;
  uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)&v42, 1);
  int v31 = *(char *)(a1 + 423);
  if (v31 >= 0) {
    uint64_t v32 = a1 + 400;
  }
  else {
    uint64_t v32 = *(void *)(a1 + 400);
  }
  if (v31 >= 0) {
    uint64_t v33 = *(unsigned __int8 *)(a1 + 423);
  }
  else {
    uint64_t v33 = *(void *)(a1 + 408);
  }
  uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
  LOBYTE(v42.__locale_) = 32;
  uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)&v42, 1);
  int v36 = *(char *)(a1 + 471);
  if (v36 >= 0) {
    uint64_t v37 = a1 + 448;
  }
  else {
    uint64_t v37 = *(void *)(a1 + 448);
  }
  if (v36 >= 0) {
    uint64_t v38 = *(unsigned __int8 *)(a1 + 471);
  }
  else {
    uint64_t v38 = *(void *)(a1 + 456);
  }
  uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24)));
  uint64_t v40 = std::locale::use_facet(&v42, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20D3E3414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t ExtractFeaturesToTable::start_sentence(uint64_t this)
{
  if (!*(void *)(this + 680))
  {
    uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(this + 936), (uint64_t)"phone stress tone syllcount wordcount si sf sm wbi wbf phrsi phrsf senti sentf prom senttype duration pos word punc", 115);
    std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(void *)(*v1 - 24)));
    uint64_t v2 = std::locale::use_facet(&v3, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
    std::locale::~locale(&v3);
    std::ostream::put();
    return std::ostream::flush();
  }
  return this;
}

void sub_20D3E34E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void ExtractFeaturesToTable::~ExtractFeaturesToTable(ExtractFeaturesToTable *this)
{
  ExtractFeaturesImpl::~ExtractFeaturesImpl(this);
  JUMPOUT(0x2105595E0);
}

void ExtractFeaturesToPipeline::update_effect(void *a1, const std::string *a2)
{
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, 26);
  uint64_t v6 = 0x7FFFFFFF00000008;
  std::string::operator=((std::string *)__p, a2);
  *(_OWORD *)&v8[1] = *(_OWORD *)(a1[61] + 8);
  std::locale v3 = a1 + 116;
  unint64_t v4 = a1[117];
  if (v4 >= a1[118])
  {
    uint64_t v5 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v3, (uint64_t)&v6);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v3, (uint64_t)&v6);
    uint64_t v5 = v4 + 56;
  }
  a1[117] = v5;
  if (SHIBYTE(v8[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D3E35D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ExtractFeaturesToPipeline::update_volume(ExtractFeaturesToPipeline *this, int a2)
{
  long long v8 = 0u;
  memset(v9, 0, 26);
  if (a2 >= 200) {
    int v3 = 200;
  }
  else {
    int v3 = a2;
  }
  v7[0] = 6;
  v7[1] = v3 & ~(v3 >> 31);
  *(_OWORD *)&v9[1] = *(_OWORD *)(*((void *)this + 61) + 8);
  unint64_t v4 = (uint64_t *)((char *)this + 928);
  unint64_t v5 = *((void *)this + 117);
  if (v5 >= *((void *)this + 118))
  {
    uint64_t result = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v4, (uint64_t)v7);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v4, (uint64_t)v7);
    uint64_t result = v5 + 56;
  }
  *((void *)this + 117) = result;
  return result;
}

uint64_t ExtractFeaturesToPipeline::update_rate(ExtractFeaturesToPipeline *this, int a2)
{
  long long v8 = 0u;
  memset(v9, 0, 26);
  if (a2 >= 400) {
    int v3 = 400;
  }
  else {
    int v3 = a2;
  }
  if (v3 <= 50) {
    int v3 = 50;
  }
  v7[0] = 5;
  v7[1] = v3;
  *(_OWORD *)&v9[1] = *(_OWORD *)(*((void *)this + 61) + 8);
  unint64_t v4 = (uint64_t *)((char *)this + 928);
  unint64_t v5 = *((void *)this + 117);
  if (v5 >= *((void *)this + 118))
  {
    uint64_t result = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v4, (uint64_t)v7);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v4, (uint64_t)v7);
    uint64_t result = v5 + 56;
  }
  *((void *)this + 117) = result;
  return result;
}

uint64_t ExtractFeaturesToPipeline::update_pitch(ExtractFeaturesToPipeline *this, int a2)
{
  long long v9 = 0u;
  memset(v10, 0, 26);
  if (a2 >= 200) {
    int v3 = 200;
  }
  else {
    int v3 = a2;
  }
  if (v3 <= 50) {
    int v3 = 50;
  }
  if (a2 >= 400) {
    int v4 = 400;
  }
  else {
    int v4 = a2;
  }
  if (v4 <= 1) {
    int v4 = 1;
  }
  if (*((unsigned char *)this + 232)) {
    int v3 = v4;
  }
  v8[0] = 4;
  v8[1] = v3;
  *(_OWORD *)&v10[1] = *(_OWORD *)(*((void *)this + 61) + 8);
  unint64_t v5 = (uint64_t *)((char *)this + 928);
  unint64_t v6 = *((void *)this + 117);
  if (v6 >= *((void *)this + 118))
  {
    uint64_t result = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v5, (uint64_t)v8);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v5, (uint64_t)v8);
    uint64_t result = v6 + 56;
  }
  *((void *)this + 117) = result;
  return result;
}

void ExtractFeaturesToPipeline::end_sentence(ExtractFeaturesToPipeline *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = (ExtractFeaturesToPipeline *)((char *)this + 776);
  int v3 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_26C215FA8;
  FrontendFeature::FrontendFeature((FrontendFeature *)&v3[1], v2);
  v13[0] = v4;
  v13[1] = (unint64_t)v3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    int v7 = LOBYTE(v3[7].__vftable);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_INFO, "End of stream: %d", buf, 8u);
  }
  Diagnostics::log(6, "End of stream: %d", v6, LOBYTE(v3[7].__vftable));
  long long v8 = (char *)operator new(0x50uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = off_26C215720;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((void *)v8 + 9) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  *(void *)std::string buf = v8 + 24;
  uint64_t v15 = v8;
  std::string::operator=((std::string *)v8 + 1, (const std::string *)((char *)this + 208));
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 712));
  long long v9 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v9 + 8) = 0u;
  *(void *)long long v9 = off_26C215330;
  *((_OWORD *)v9 + 2) = 0u;
  *((void *)v9 + 3) = v9 + 32;
  Agglomerate::set<std::shared_ptr<FrontendInput>>((uint64_t)(v9 + 24), (unint64_t *)buf);
  Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v9 + 24), v13);
  uint64_t v10 = *(void *)(*((void *)this + 15) + 112);
  int v11 = v9 + 24;
  int v12 = (std::__shared_weak_count *)v9;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, char **))(*(void *)v10 + 32))(v10, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_20D3E39EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void ExtractFeaturesToPipeline::extract_phon_pronunciation(uint64_t a1, const std::string *a2, unsigned int a3, std::string *__str)
{
  memset(&v50, 0, sizeof(v50));
  BOOL v51 = 0;
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  long long v52 = v7;
  long long v53 = v7;
  unint64_t v54 = 0x8000000080000000;
  long long v55 = 0u;
  *(_OWORD *)char v56 = 0u;
  long long v57 = 0u;
  memset(&__p, 0, sizeof(__p));
  long long v59 = v7;
  *(_OWORD *)uint64_t v60 = v7;
  int v62 = 0x7FFFFFFF;
  *(_OWORD *)&v60[16] = v7;
  long long v61 = v7;
  std::string::operator=(&__p, __str);
  std::vector<MarkerRecord>::__vdeallocate((uint64_t *)&v55);
  long long v55 = *(_OWORD *)(a1 + 928);
  v56[0] = *(void **)(a1 + 944);
  *(void *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  std::vector<MarkerRecord>::__clear[abi:ne180100]((uint64_t *)(a1 + 928));
  *(void *)&long long v52 = a3;
  DWORD2(v52) = *(unsigned __int8 *)(a1 + 696);
  uint64_t v8 = *(void *)(a1 + 664);
  if (v8 == *(void *)(a1 + 624) - 1)
  {
    if (*(void *)(a1 + 648) == *(void *)(a1 + 616) - 1) {
      int v9 = 4;
    }
    else {
      int v9 = 3;
    }
  }
  else if (v8)
  {
    int v9 = 2;
  }
  else
  {
    int v9 = *(void *)(a1 + 648) != 0;
  }
  HIDWORD(v52) = v9;
  uint64_t v10 = *(void *)(a1 + 600);
  if (v10 && ((uint64_t v11 = *(void *)(a1 + 616), (v12 = *(void *)(v10 + 16) - 1) != 0) || v11 != 1))
  {
    uint64_t v24 = *(void *)(a1 + 648);
    if (v24 == v11 - 1)
    {
      if (*(void *)(a1 + 640) == v12)
      {
        uint64_t v25 = *(void *)(a1 + 608);
        if (v25 && *(void *)(a1 + 632) != *(void *)(v25 + 24) - 1) {
          LODWORD(v13) = 1;
        }
        else {
          LODWORD(v13) = 3;
        }
      }
      else
      {
        LODWORD(v13) = 6;
      }
    }
    else if (v24)
    {
      LODWORD(v13) = 5;
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 640);
      if (v13) {
        LODWORD(v13) = 4;
      }
    }
  }
  else
  {
    LODWORD(v13) = 2;
  }
  LODWORD(v53) = v13;
  unsigned int v14 = *(_DWORD *)(*(void *)(*(void *)(a1 + 488) + 48) + 276) - 7;
  if (v14 > 2) {
    int v15 = 1;
  }
  else {
    int v15 = dword_20D6C7678[v14];
  }
  DWORD1(v53) = v15;
  std::string::operator=(&v50, a2);
  int v16 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v16 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 3)
    {
LABEL_26:
      BOOL v18 = 0;
      goto LABEL_27;
    }
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else if (v16 != 3)
  {
    goto LABEL_26;
  }
  BOOL v18 = LOWORD(a2->__r_.__value_.__l.__data_) == 26995 && a2->__r_.__value_.__s.__data_[2] == 108;
LABEL_27:
  BOOL v51 = v18;
  uint64_t v19 = *(void *)(a1 + 648);
  uint64_t v20 = *(void *)(a1 + 640);
  *(void *)&long long v59 = __PAIR64__(v20, v19);
  *(_DWORD *)uint64_t v60 = 0;
  *((void *)&v59 + 1) = DWORD2(v52) != 0;
  if (v18)
  {
    BOOL v21 = 0;
    BOOL v22 = 0;
    *(_DWORD *)&v60[28] = 0;
    memset(&v60[4], 0, 20);
LABEL_58:
    BOOL v32 = 0;
    LODWORD(v61) = 0;
    uint64_t v30 = *(void *)(a1 + 600);
    goto LABEL_59;
  }
  uint64_t v23 = *(void *)(a1 + 664);
  *(_DWORD *)&v60[4] = v23 == 0;
  if (v23)
  {
    BOOL v22 = 0;
  }
  else
  {
    BOOL v22 = v19 == 0;
    HIDWORD(v59) = v22;
  }
  uint64_t v26 = *(void *)(a1 + 624) - 1;
  *(_DWORD *)&v60[12] = v23 == v26;
  if (v23 == v26)
  {
    BOOL v21 = v19 == *(void *)(a1 + 616) - 1;
    *(_DWORD *)uint64_t v60 = v21;
  }
  else
  {
    BOOL v21 = 0;
  }
  if (v23) {
    BOOL v27 = v23 == v26;
  }
  else {
    BOOL v27 = 1;
  }
  int v28 = !v27;
  *(_DWORD *)&v60[8] = v28;
  *(_DWORD *)&v60[16] = 0;
  if (v19)
  {
    BOOL v29 = 0;
    *(_DWORD *)&v60[28] = 0;
  }
  else
  {
    *(_DWORD *)&v60[28] = v20 == 0;
    if (v20) {
      BOOL v29 = 0;
    }
    else {
      BOOL v29 = *(void *)(a1 + 632) == 0;
    }
  }
  *(_DWORD *)&v60[20] = v29;
  if (v19 != *(void *)(a1 + 616) - 1) {
    goto LABEL_58;
  }
  uint64_t v30 = *(void *)(a1 + 600);
  if (v30)
  {
    uint64_t v31 = *(void *)(v30 + 16) - 1;
    LODWORD(v61) = v20 == v31;
    if (v20 != v31)
    {
      *(_DWORD *)&v60[24] = 0;
      goto LABEL_61;
    }
  }
  else
  {
    LODWORD(v61) = 1;
  }
  uint64_t v48 = *(void *)(a1 + 608);
  if (v48) {
    BOOL v32 = *(void *)(a1 + 632) == *(void *)(v48 + 24) - 1;
  }
  else {
    BOOL v32 = 1;
  }
LABEL_59:
  *(_DWORD *)&v60[24] = v32;
  if (!v30)
  {
    char v33 = 1;
LABEL_64:
    uint64_t v34 = *(void *)(a1 + 608);
    if (v34 && *(void *)(a1 + 632) != *(void *)(v34 + 24) - 1) {
      int v35 = 4;
    }
    else {
      int v35 = 5;
    }
    DWORD1(v61) = v35;
    if (!v20) {
      goto LABEL_79;
    }
    if (v33)
    {
LABEL_74:
      LODWORD(v20) = 2;
      goto LABEL_79;
    }
    uint64_t v31 = *(void *)(v30 + 16) - 1;
    goto LABEL_73;
  }
  uint64_t v31 = *(void *)(v30 + 16) - 1;
LABEL_61:
  if (v20 == v31)
  {
    char v33 = 0;
    goto LABEL_64;
  }
  if (!v20)
  {
    if (*(void *)(a1 + 632) || (uint64_t v49 = *(void *)(a1 + 608)) == 0 || *(void *)(v49 + 24) == 1) {
      int v36 = 3;
    }
    else {
      int v36 = 1;
    }
    LODWORD(v20) = 0;
    DWORD1(v61) = v36;
    goto LABEL_79;
  }
  DWORD1(v61) = 2;
LABEL_73:
  if (v20 == v31) {
    goto LABEL_74;
  }
  LODWORD(v20) = 1;
LABEL_79:
  *((void *)&v61 + 1) = __PAIR64__(v22, v20);
  int v62 = v21;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v50.__r_.__value_.__l.__size_ != 3) {
      goto LABEL_88;
    }
    uint64_t v37 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) != 3) {
      goto LABEL_88;
    }
    uint64_t v37 = &v50;
  }
  data_int low = LOWORD(v37->__r_.__value_.__l.__data_);
  int v39 = v37->__r_.__value_.__s.__data_[2];
  if (data_low == 26995 && v39 == 108)
  {
    int v44 = 3;
    goto LABEL_94;
  }
LABEL_88:
  uint64_t v41 = *(void *)(a1 + 576);
  if ((void *)(v41 + 8) == v42
    || (uint64_t v43 = *(void *)(a1 + 608)) != 0 && *(void *)(a1 + 632) != *(void *)(v43 + 24) - 1)
  {
    int v44 = 0;
  }
  else
  {
    int v44 = *(_DWORD *)(v42[5] + 8);
  }
LABEL_94:
  int v45 = *(_DWORD *)(a1 + 700);
  *((void *)&v53 + 1) = __PAIR64__(*(_DWORD *)(a1 + 704), v44);
  LODWORD(v54) = v45;
  std::string::operator=((std::string *)&v56[1], &v50);
  unint64_t v46 = *(void *)(a1 + 784);
  if (v46 >= *(void *)(a1 + 792))
  {
    uint64_t v47 = std::vector<PhoneFeature>::__push_back_slow_path<PhoneFeature const&>((uint64_t *)(a1 + 776), (const PhoneFeature *)&v50);
  }
  else
  {
    PhoneFeature::PhoneFeature(*(std::string **)(a1 + 784), (const PhoneFeature *)&v50);
    uint64_t v47 = v46 + 216;
    *(void *)(a1 + 784) = v46 + 216;
  }
  *(void *)(a1 + 784) = v47;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[1]);
  }
  uint64_t v63 = (void **)&v55;
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v63);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
}

void sub_20D3E3FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *(void *)(v9 + 784) = v10;
  PhoneFeature::~PhoneFeature(&a9);
  _Unwind_Resume(a1);
}

void ExtractFeaturesToPipeline::extract_word_features(ExtractFeaturesToPipeline *this, const std::string *a2)
{
  long long v21 = 0u;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)int v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)int v16 = 0u;
  v14[0] = *((void *)this + 84);
  unint64_t v4 = (_DWORD *)*((void *)this + 74);
  if (v4) {
    LODWORD(v4) = *v4;
  }
  v14[1] = v4;
  std::string::size_type v15 = a2->__r_.__value_.__r.__words[0];
  std::string::operator=((std::string *)v16, a2 + 3);
  std::string::operator=((std::string *)&v17[1], a2 + 1);
  std::string::operator=((std::string *)v19, a2 + 4);
  std::string::operator=(&__p, a2 + 6);
  unint64_t v5 = *((void *)this + 101);
  unint64_t v6 = *((void *)this + 102);
  if (v5 >= v6)
  {
    uint64_t v8 = *((void *)this + 100);
    unint64_t v9 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - v8) >> 3);
    if (v9 + 1 > 0x1E1E1E1E1E1E1E1) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v6 - v8) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0xF0F0F0F0F0F0F0) {
      unint64_t v12 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v12 = v11;
    }
    BOOL v27 = (char *)this + 816;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<WordFeature>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v23 = v12;
    uint64_t v24 = v12 + 136 * v9;
    uint64_t v25 = v24;
    unint64_t v26 = v12 + 136 * v13;
    WordFeature::WordFeature(v24, (uint64_t)v14);
    v25 += 136;
    std::vector<WordFeature>::__swap_out_circular_buffer((uint64_t *)this + 100, &v23);
    unint64_t v7 = *((void *)this + 101);
    std::__split_buffer<WordFeature>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    WordFeature::WordFeature(*((void *)this + 101), (uint64_t)v14);
    unint64_t v7 = v5 + 136;
    *((void *)this + 101) = v7;
  }
  *((void *)this + 101) = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[1]);
  }
  if (SHIBYTE(v20[0]) < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[1]);
  }
  if (SHIBYTE(v17[0]) < 0) {
    operator delete(v16[0]);
  }
}

void sub_20D3E41D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  std::__split_buffer<WordFeature>::~__split_buffer(v9 - 72);
  WordFeature::~WordFeature(&a9);
  _Unwind_Resume(a1);
}

void ExtractFeaturesToPipeline::extract_prompt(ExtractFeaturesToPipeline *this)
{
  uint64_t v2 = *((void *)this + 59);
  unint64_t v4 = v3;
  if ((void *)(v2 + 8) == v3)
  {
    if (v4 != v8)
    {
      uint64_t v9 = v8[5];
      *(_OWORD *)uint64_t v43 = 0u;
      memset(v44, 0, 26);
      uint64_t v42 = 0x7FFFFFFF00000009;
      std::string::operator=((std::string *)v43, (const std::string *)(v9 + 8));
      v44[24] = *(unsigned char *)(v9 + 37);
      HIDWORD(v42) = -1;
      *(_OWORD *)&v44[8] = *(_OWORD *)(*((void *)this + 61) + 8);
      unint64_t v10 = (uint64_t *)((char *)this + 928);
      unint64_t v11 = *((void *)this + 117);
      if (v11 >= *((void *)this + 118))
      {
        uint64_t v12 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v10, (uint64_t)&v42);
      }
      else
      {
        std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v10, (uint64_t)&v42);
        uint64_t v12 = v11 + 56;
      }
      *((void *)this + 117) = v12;
      if ((v44[7] & 0x80000000) != 0)
      {
        uint64_t v34 = v43[0];
LABEL_57:
        operator delete(v34);
      }
    }
  }
  else
  {
    uint64_t v5 = v3[5];
    if ((void *)(v2 + 8) == v6) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6[5] + 8;
    }
    int v45 = 0;
    unint64_t v46 = 0;
    *(void *)&v44[24] = 0;
    memset(v44, 0, 18);
    v43[1] = 0;
    uint64_t v42 = 1749801491 * ((*((void *)this + 98) - *((void *)this + 97)) >> 3);
    LODWORD(v43[0]) = *(_DWORD *)(v5 + 32);
    std::string::operator=((std::string *)&v43[1], (const std::string *)(v5 + 40));
    if (v7) {
      BOOL v13 = *(unsigned char *)(v7 + 29) != 0;
    }
    else {
      BOOL v13 = 0;
    }
    v44[16] = v13;
    v44[17] = *(unsigned char *)(v5 + 8);
    unsigned int v14 = *(_DWORD *)(v5 + 24);
    if (v14 < *(_DWORD *)(v5 + 28))
    {
      std::string::size_type v15 = v45;
      do
      {
        if (v15 >= v46)
        {
          int v17 = *(char **)&v44[24];
          uint64_t v18 = (uint64_t)&v15[-*(void *)&v44[24]] >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = (uint64_t)&v46[-*(void *)&v44[24]];
          if ((uint64_t)&v46[-*(void *)&v44[24]] >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            BOOL v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v46, v21);
            int v17 = *(char **)&v44[24];
            std::string::size_type v15 = v45;
          }
          else
          {
            BOOL v22 = 0;
          }
          unint64_t v23 = &v22[4 * v18];
          *(_DWORD *)unint64_t v23 = v14;
          int v16 = v23 + 4;
          while (v15 != v17)
          {
            int v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          *(void *)&v44[24] = v23;
          int v45 = v16;
          unint64_t v46 = &v22[4 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(_DWORD *)std::string::size_type v15 = v14;
          int v16 = v15 + 4;
        }
        int v45 = v16;
        ++v14;
        std::string::size_type v15 = v16;
      }
      while (v14 < *(_DWORD *)(v5 + 28));
    }
    unint64_t v25 = *((void *)this + 104);
    unint64_t v26 = *((void *)this + 105);
    if (v25 >= v26)
    {
      uint64_t v28 = *((void *)this + 103);
      unint64_t v29 = 0x8E38E38E38E38E39 * ((uint64_t)(v25 - v28) >> 3);
      if (v29 + 1 > 0x38E38E38E38E38ELL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v30 = 0x8E38E38E38E38E39 * ((uint64_t)(v26 - v28) >> 3);
      uint64_t v31 = 2 * v30;
      if (2 * v30 <= v29 + 1) {
        uint64_t v31 = v29 + 1;
      }
      if (v30 >= 0x1C71C71C71C71C7) {
        unint64_t v32 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v32 = v31;
      }
      *((void *)&v41[0] + 1) = (char *)this + 840;
      if (v32) {
        unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v32);
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v39 = v32;
      v40[0] = (void *)(v32 + 72 * v29);
      v40[1] = v40[0];
      *(void *)&v41[0] = v32 + 72 * v33;
      std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>((uint64_t)v40[0], &v42);
      v40[1] = (char *)v40[0] + 72;
      std::vector<Prompt>::__swap_out_circular_buffer((uint64_t *)this + 103, &v39);
      unint64_t v27 = *((void *)this + 104);
      std::__split_buffer<Prompt>::~__split_buffer((uint64_t)&v39);
    }
    else
    {
      std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(*((void *)this + 104), &v42);
      unint64_t v27 = v25 + 72;
      *((void *)this + 104) = v27;
    }
    *((void *)this + 104) = v27;
    memset(v41, 0, 26);
    *(_OWORD *)uint64_t v40 = 0u;
    uint64_t v39 = 0x7FFFFFFF00000009;
    std::string::operator=((std::string *)v40, (const std::string *)(v5 + 40));
    if (v7) {
      BOOL v35 = *(unsigned char *)(v7 + 29) != 0;
    }
    else {
      BOOL v35 = 0;
    }
    BYTE8(v41[1]) = v35;
    BYTE9(v41[1]) = *(unsigned char *)(v5 + 8);
    HIDWORD(v39) = *(_DWORD *)(v5 + 32);
    *(_OWORD *)((char *)v41 + 8) = *(_OWORD *)(*((void *)this + 61) + 8);
    int v36 = (uint64_t *)((char *)this + 928);
    unint64_t v37 = *((void *)this + 117);
    if (v37 >= *((void *)this + 118))
    {
      uint64_t v38 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v36, (uint64_t)&v39);
    }
    else
    {
      std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v36, (uint64_t)&v39);
      uint64_t v38 = v37 + 56;
    }
    *((void *)this + 117) = v38;
    if (SBYTE7(v41[0]) < 0) {
      operator delete(v40[0]);
    }
    if (*(void *)&v44[24])
    {
      int v45 = *(char **)&v44[24];
      operator delete(*(void **)&v44[24]);
    }
    if ((v44[15] & 0x80000000) != 0)
    {
      uint64_t v34 = v43[1];
      goto LABEL_57;
    }
  }
}

void sub_20D3E4658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

void *std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)a2[2], a2[3]);
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  __int16 v6 = *((_WORD *)a2 + 20);
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 48), (const void *)a2[6], a2[7], (a2[7] - a2[6]) >> 2);
}

void sub_20D3E4750(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void Prompt::~Prompt(Prompt *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

uint64_t std::vector<Prompt>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Prompt>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

void ExtractFeaturesToPipeline::extract_mark(ExtractFeaturesToPipeline *this)
{
  *(_OWORD *)std::string __p = 0u;
  memset(v7, 0, 26);
  uint64_t v5 = 0x7FFFFFFF0000000ALL;
  std::string::operator=((std::string *)__p, (const std::string *)(*((void *)this + 61) + 24));
  *(_OWORD *)&v7[1] = *(_OWORD *)(*((void *)this + 61) + 8);
  uint64_t v2 = (uint64_t *)((char *)this + 928);
  unint64_t v3 = *((void *)this + 117);
  if (v3 >= *((void *)this + 118))
  {
    uint64_t v4 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v2, (uint64_t)&v5);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v2, (uint64_t)&v5);
    uint64_t v4 = v3 + 56;
  }
  *((void *)this + 117) = v4;
  if (SHIBYTE(v7[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D3E48C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double ExtractFeaturesToPipeline::extract_pause(ExtractFeaturesImpl **this)
{
  uint64_t v2 = ExtractFeaturesImpl::pause_duration(this[59]);
  if (v2)
  {
    uint64_t v4 = v2;
    *(_OWORD *)&v10[10] = 0u;
    long long v9 = 0u;
    *(_OWORD *)unint64_t v10 = 0u;
    v8[0] = 7;
    v8[1] = v2;
    *(_OWORD *)&v10[8] = *(_OWORD *)((char *)this[61] + 8);
    uint64_t v5 = (uint64_t *)(this + 116);
    uint64_t v6 = this[117];
    if (v6 >= this[118])
    {
      uint64_t v7 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v5, (uint64_t)v8);
    }
    else
    {
      std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v5, (uint64_t)v8);
      uint64_t v7 = (uint64_t)v6 + 56;
    }
    this[117] = (ExtractFeaturesImpl *)v7;
    *(void *)&double result = ExtractFeaturesImpl::extract_silence((ExtractFeaturesImpl *)this, v4).u64[0];
  }
  return result;
}

uint64_t ExtractFeaturesToPipeline::start_word_pronunciation(ExtractFeaturesToPipeline *this)
{
  long long v11 = 0u;
  memset(v12, 0, 26);
  uint64_t v10 = 0x7FFFFFFF00000003;
  uint64_t v2 = *((void *)this + 62);
  if (v2)
  {
    unint64_t v3 = (void *)(v2 + 48);
    uint64_t v4 = (uint64_t *)(v2 + 56);
  }
  else
  {
    uint64_t v5 = *((void *)this + 61);
    unint64_t v3 = (void *)(v5 + 8);
    uint64_t v4 = (uint64_t *)(v5 + 16);
  }
  uint64_t v6 = *v4;
  v12[1] = *v3;
  uint64_t v12[2] = v6;
  uint64_t v7 = (uint64_t *)((char *)this + 928);
  unint64_t v8 = *((void *)this + 117);
  if (v8 >= *((void *)this + 118))
  {
    uint64_t result = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v7, (uint64_t)&v10);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v7, (uint64_t)&v10);
    uint64_t result = v8 + 56;
  }
  *((void *)this + 117) = result;
  return result;
}

void ExtractFeaturesToPipeline::extract_sentence_text(void **this)
{
  long long v19 = 0u;
  uint64_t v2 = this + 97;
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v16 = 0u;
  std::vector<PhoneFeature>::__vdeallocate(this + 97);
  this[99] = 0;
  _OWORD *v2 = 0u;
  memset(v13, 0, sizeof(v13));
  std::vector<WordFeature>::__vdeallocate(this + 100);
  this[101] = 0;
  this[100] = 0;
  this[102] = 0;
  memset(v14, 0, sizeof(v14));
  std::vector<Prompt>::__vdeallocate(this + 103);
  this[104] = 0;
  this[103] = 0;
  this[105] = 0;
  memset(v15, 0, sizeof(v15));
  unint64_t v3 = (std::string *)(this + 106);
  if (*((char *)this + 871) < 0) {
    operator delete(v3->__r_.__value_.__l.__data_);
  }
  v3->__r_.__value_.__r.__words[0] = 0;
  this[107] = 0;
  this[108] = 0;
  BYTE7(v17[0]) = 0;
  LOBYTE(v16) = 0;
  uint64_t v4 = this + 109;
  if (*((char *)this + 895) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)((char *)v17 + 8);
  this[111] = (void *)*((void *)&v17[1] + 1);
  HIBYTE(v17[1]) = 0;
  BYTE8(v17[0]) = 0;
  uint64_t v5 = this + 112;
  if (*((char *)this + 919) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)uint64_t v5 = v18;
  this[114] = (void *)v19;
  BYTE7(v19) = 0;
  LOBYTE(v18) = 0;
  *((unsigned char *)this + 920) = 0;
  uint64_t v20 = (void **)v15;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)v14;
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v20 = (void **)v13;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v20);
  ExtractFeaturesImpl::extract_sentence_text((ExtractFeaturesImpl *)this);
  if (!*((unsigned char *)this + 8))
  {
    uint64_t v6 = (const std::string *)(this + 23);
    std::string::operator=((std::string *)(this + 109), (const std::string *)(this + 23));
    uint64_t v7 = (const std::string *)(this + 37);
    unint64_t v8 = std::string::operator=(v3, v7);
    long long v9 = (GryphonAnalysis *)GryphonAnalysis::Storage((GryphonAnalysis *)v8);
    if (*(unsigned char *)v9)
    {
      uint64_t v10 = (std::string *)GryphonAnalysis::Storage(v9);
      long long v11 = std::string::operator=(v10 + 2, v6);
      uint64_t v12 = (std::string *)GryphonAnalysis::Storage((GryphonAnalysis *)v11);
      std::string::operator=(v12 + 3, v7);
    }
  }
}

void ExtractFeaturesToPipeline::clear(ExtractFeaturesToPipeline *this)
{
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 712);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 712));
  std::vector<MarkerRecord>::__clear[abi:ne180100]((uint64_t *)this + 116);
  long long v6 = 0u;
  memset(v7, 0, 26);
  uint64_t v5 = 0x7FFFFFFF00000001;
  v7[1] = *((void *)this + 49);
  unint64_t v3 = *((void *)this + 117);
  if (v3 >= *((void *)this + 118))
  {
    uint64_t v4 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>((uint64_t *)this + 116, (uint64_t)&v5);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)this + 928, (uint64_t)&v5);
    uint64_t v4 = v3 + 56;
  }
  *((void *)this + 117) = v4;
  ExtractFeaturesImpl::clear(this);
  std::recursive_mutex::unlock(v2);
}

void sub_20D3E4C88(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ExtractFeaturesToPipeline::~ExtractFeaturesToPipeline(ExtractFeaturesToPipeline *this)
{
  *(void *)this = off_26C203F18;
  uint64_t v2 = (void **)((char *)this + 928);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v2);
  ExtractFeaturesImpl::~ExtractFeaturesImpl(this);
  JUMPOUT(0x2105595E0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = off_26C203F18;
  uint64_t v2 = (void **)((char *)this + 928);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v2);
  ExtractFeaturesImpl::~ExtractFeaturesImpl(this);
}

void ExtractFeaturesPersistentModule::~ExtractFeaturesPersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x2105595E0);
}

uint64_t ExtractFeaturesImpl::ExtractFeaturesImpl(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, const std::string *a4)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = off_26C200A98;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
    *(void *)a1 = off_26C200F88;
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(void *)a1 = off_26C200F88;
  }
  *(void *)a1 = off_26C2027B0;
  uint64_t v7 = FeatureExtractorTarget::retrieve();
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = a4;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  MEMORY[0x210559270]();
  *(unsigned char *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(void *)(a1 + 104) = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>((uint64_t)a4);
  std::string::operator=((std::string *)(a1 + 160), a4);
  uint64_t size = a4[5].__r_.__value_.__l.__size_;
  std::string::size_type v9 = a4[5].__r_.__value_.__r.__words[2];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = size;
  *(void *)(a1 + 152) = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    uint64_t size = *(void *)(a1 + 144);
  }
  SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v24, size);
  BOOL v11 = v24;
  if (v24) {
    BOOL v11 = *(_DWORD *)(v24 + 60) == 3;
  }
  *(unsigned char *)(a1 + 232) = v11;
  SharedObjectPool::get<VoiceConfig>(&v38, *(long long ***)(a1 + 144));
  if (v38)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v38 + 72))(&v36);
    if ((_BYTE)v36)
    {
      uint64_t v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v36, "pipeline");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v12);
      unint64_t v29 = v34;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      unint64_t v33 = 0x8000000000000000;
      if (v34[0])
      {
        if (v34[0] == 2)
        {
          uint64_t v31 = *v35;
        }
        else if (v34[0] == 1)
        {
          uint64_t v30 = *v35;
        }
        else
        {
          unint64_t v33 = 0;
        }
      }
      else
      {
        unint64_t v33 = 1;
      }
      while (1)
      {
        uint64_t v27 = 0;
        *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = 0uLL;
        v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        unint64_t v28 = 0x8000000000000000;
        if (v34[0] == 2)
        {
          v26.__r_.__value_.__r.__words[2] = v35[1];
        }
        else if (v34[0] == 1)
        {
          v26.__r_.__value_.__l.__size_ = (std::string::size_type)(v35 + 1);
        }
        else
        {
          unint64_t v28 = 1;
        }
        BOOL v15 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v29, (unsigned __int8 **)&v26);
        if (v15) {
          break;
        }
        long long v16 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v29);
        int v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v16, "id");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v17, &v26);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v26.__r_.__value_.__l.__size_ == 22)
          {
            BOOL v22 = *(void *)v26.__r_.__value_.__l.__data_ != 0x72665F656772656DLL
               || *(void *)(v26.__r_.__value_.__r.__words[0] + 8) != 0x665F646E65746E6FLL
               || *(void *)(v26.__r_.__value_.__r.__words[0] + 14) != 0x657275746165665FLL;
            operator delete(v26.__r_.__value_.__l.__data_);
            if (!v22) {
              break;
            }
          }
          else
          {
            operator delete(v26.__r_.__value_.__l.__data_);
          }
        }
        else if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) == 22)
        {
          BOOL v18 = v26.__r_.__value_.__r.__words[0] == 0x72665F656772656DLL
             && v26.__r_.__value_.__l.__size_ == 0x665F646E65746E6FLL;
          if (v18 && *(std::string::size_type *)((char *)&v26.__r_.__value_.__r.__words[1] + 6) == 0x657275746165665FLL) {
            break;
          }
        }
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(&v29);
      }
      BOOL v13 = !v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v35, v34[0]);
      int v14 = v36;
    }
    else
    {
      int v14 = 0;
      BOOL v13 = 0;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v14);
  }
  else
  {
    BOOL v13 = 0;
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  *(unsigned char *)(a1 + 233) = v13;
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  return a1;
}

void sub_20D3E5278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, std::recursive_mutex *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v31 = *(std::__shared_weak_count **)(v29 - 96);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  FrontendFeature::~FrontendFeature(v28);
  std::recursive_mutex::~recursive_mutex(a13);
  uint64_t v32 = *(std::__shared_weak_count **)(v26 + 584);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  unint64_t v33 = *(std::__shared_weak_count **)(v26 + 568);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (*(char *)(v26 + 559) < 0) {
    operator delete(*a11);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v26 + 512);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  BOOL v35 = *(std::__shared_weak_count **)(v26 + 480);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (*(char *)(v26 + 471) < 0) {
    operator delete(*(void **)(v26 + 448));
  }
  if (*(char *)(v26 + 447) < 0) {
    operator delete(*(void **)(v26 + 424));
  }
  if (*(char *)(v26 + 423) < 0) {
    operator delete(v27[30]);
  }
  if (*(char *)(v26 + 391) < 0) {
    operator delete(*(void **)(v26 + 368));
  }
  if (*(char *)(v26 + 367) < 0) {
    operator delete(*(void **)(v26 + 344));
  }
  if (*(char *)(v26 + 343) < 0) {
    operator delete(*(void **)(v26 + 320));
  }
  if (*(char *)(v26 + 319) < 0) {
    operator delete(*(void **)(v26 + 296));
  }
  if (*(char *)(v26 + 295) < 0) {
    operator delete(*(void **)(v26 + 272));
  }
  if (*(char *)(v26 + 271) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v26 + 231) < 0) {
    operator delete(*(void **)(v26 + 208));
  }
  if (*(char *)(v26 + 207) < 0) {
    operator delete(*(void **)(v26 + 184));
  }
  if (*(char *)(v26 + 183) < 0) {
    operator delete(*v27);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(v26 + 152);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  unint64_t v37 = *(std::__shared_weak_count **)(v26 + 136);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  FrontendModule::~FrontendModule((void **)v26);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ExtractFeaturesToPipeline>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ExtractFeaturesToPipeline>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ExtractFeaturesToPipeline>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *ExtractFeaturesToTarget::ExtractFeaturesToTarget(void *a1, uint64_t a2, std::__shared_weak_count *a3, const std::string *a4)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ExtractFeaturesImpl::ExtractFeaturesImpl((uint64_t)a1, a2, a3, a4);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = off_26C2038F0;
  a1[116] = &off_26C2039E8;
  a1[117] = MEMORY[0x263F8C100];
  return a1;
}

void sub_20D3E556C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<ExtractFeaturesToTarget>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ExtractFeaturesToTarget>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ExtractFeaturesToTarget>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ExtractFeaturesToTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ExtractFeaturesToTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ExtractFeaturesToTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FrontendImpl::set_backend_pipeline(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 120);
  *(void *)(v2 + 112) = v4;
  *(void *)(v2 + 120) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void FrontendImpl::build_pipeline(FrontendImpl *this)
{
  uint64_t v2 = FrontendModuleBroker::instance(this);
  std::string::size_type v3 = *((void *)this + 5);
  if (*(char *)(v3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v3 + 48), *(void *)(v3 + 56));
    std::string::size_type v3 = *((void *)this + 5);
  }
  else
  {
    std::string v12 = *(std::string *)(v3 + 48);
  }
  uint64_t v10 = 0;
  BOOL v11 = 0;
  FrontendModuleBroker::create(&v13, v2, (const char *)&v12, &v10, v3);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  long long v4 = v13;
  if (*((void *)&v13 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
  *(_OWORD *)((char *)this + 24) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v8 = v4;
  if (*((void *)&v4 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  FrontendModule::head(&v9, &v8);
  long long v6 = v9;
  if (*((void *)&v9 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_20D3E5814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FrontendImpl::register_resource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    long long v6 = (uint64_t **)(a1 + 136);
    if (a1 + 144 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 136, (const void **)a2))
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v7 = *(std::string *)a2;
      }
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string __p = *(std::string *)a3;
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v6, (const void **)&v7.__r_.__value_.__l.__data_, (uint64_t)&v7);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v7.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_20D3E5928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FrontendImpl::add_pls_dictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 128);
  long long v4 = (std::recursive_mutex *)(v3 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(v3 + 56));
  uint64_t v5 = v3 + 32;
  {
    long long v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_26C2160C0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_26C201270;
    v10[0] = (unint64_t)&v6[1];
    v10[1] = (unint64_t)v6;
    Agglomerate::set<std::shared_ptr<PLSHandler>>(v5, v10);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v9 = *(void (****)(void, uint64_t))(*(void *)v7 + 8);
  long long v8 = *(std::__shared_weak_count **)(*(void *)v7 + 16);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
  (**v9)(v9, a2);
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_20D3E5A9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void FrontendImpl::unload_resource(void *a1, uint64_t a2)
{
  if (a1[11])
  {
    uint64_t v3 = a1[7];
    long long v4 = (std::__shared_weak_count *)a1[8];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      PersistentModuleFactory::get_persistent_module_from_pool<NashvilleFEPersistentModule>(v5, v3);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    else
    {
      PersistentModuleFactory::get_persistent_module_from_pool<NashvilleFEPersistentModule>(v5, v3);
    }
    NashvilleFEPersistentModule::unload_resource(*(void **)v5, *(void **)a2, *(std::__shared_weak_count **)(a2 + 8));
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_20D3E5B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void PersistentModuleFactory::get_persistent_module_from_pool<NashvilleFEPersistentModule>(void *a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3 && (uint64_t v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    long long v6 = v5;
    uint64_t v7 = *(void *)(a2 + 16);
    if (v7)
    {
      PersistentModuleFactory::get_persistent_module<NashvilleFEPersistentModule>(a1, *(void **)(v7 + 24));
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void PersistentModuleFactory::get_persistent_module<NashvilleFEPersistentModule>(void *a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    while (1)
    {
      long long v4 = (const void *)v3[5];
      if (v4)
      {
        if (v5) {
          break;
        }
      }
      uint64_t v3 = (void *)*v3;
      if (!v3) {
        goto LABEL_6;
      }
    }
    long long v6 = (std::__shared_weak_count *)v3[6];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      *a1 = v5;
      a1[1] = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    else
    {
      *a1 = v5;
      a1[1] = 0;
    }
  }
  else
  {
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
  }
}

void FrontendImpl::load_resource(void *a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!a1[19])
  {
    uint64_t v12 = a1[5];
    uint64_t v13 = *(void *)(v12 + 96);
    int v14 = *(std::__shared_weak_count **)(v12 + 104);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v15 = Frontend::check_hydra_fe(v13);
    BOOL v16 = v15;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (!v16) {
        goto LABEL_2;
      }
    }
    else if (!v15)
    {
      goto LABEL_2;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v19) = 0;
      _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_ERROR, "Hydra FE doesn't support loading resource from memory", (uint8_t *)&v19, 2u);
    }
    Diagnostics::log(3, "Hydra FE doesn't support loading resource from memory", v18);
    goto LABEL_19;
  }
LABEL_2:
  if (!a1[11])
  {
LABEL_19:
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    return;
  }
  uint64_t v10 = a1[7];
  BOOL v11 = (std::__shared_weak_count *)a1[8];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    PersistentModuleFactory::get_persistent_module_from_pool<NashvilleFEPersistentModule>(&v19, v10);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  else
  {
    PersistentModuleFactory::get_persistent_module_from_pool<NashvilleFEPersistentModule>(&v19, v10);
  }
  NashvilleFEPersistentModule::load_voice_resource((std::__shared_weak_count **)a5, v19, a2, a3, a4);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_20D3E5E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

BOOL Frontend::check_hydra_fe(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v15);
  if ((_BYTE)v15)
  {
    uint64_t v1 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v15, "pipeline");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v1, &v14);
    int64_t size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    int v3 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
    long long v4 = (void *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      uint64_t v5 = &v14;
    }
    else
    {
      int64_t size = v14.__r_.__value_.__l.__size_;
      uint64_t v5 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    long long v6 = (char *)v5 + size;
    if (size >= 12)
    {
      uint64_t v7 = v5;
      do
      {
        long long v8 = (char *)memchr(v7, 112, size - 11);
        if (!v8) {
          break;
        }
        if (*(void *)v8 == 0x636E756F6E6F7270 && *((_DWORD *)v8 + 2) == 1852727141) {
          goto LABEL_15;
        }
        uint64_t v7 = (std::string *)(v8 + 1);
        int64_t size = v6 - (char *)v7;
      }
      while (v6 - (char *)v7 > 11);
    }
    long long v8 = v6;
LABEL_15:
    BOOL v11 = v8 != v6 && v8 - (char *)v5 != -1;
    if (v3 < 0) {
      operator delete(v4);
    }
    int v12 = v15;
  }
  else
  {
    int v12 = 0;
    BOOL v11 = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v12);
  return v11;
}

void sub_20D3E5FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v13 + 8), a13);
  _Unwind_Resume(a1);
}

void *FrontendImpl::load_resource@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = result;
  v28[19] = *MEMORY[0x263EF8340];
  int v7 = *(char *)(a3 + 23);
  if (v7 < 0)
  {
    if (*(void *)(a3 + 8) != 19) {
      goto LABEL_13;
    }
    long long v8 = *(uint64_t **)a3;
  }
  else
  {
    long long v8 = (uint64_t *)a3;
    if (v7 != 19) {
      goto LABEL_13;
    }
  }
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = *(uint64_t *)((char *)v8 + 11);
  if (v9 != 0x746163696C707061 || v10 != 0x2B736C702F6E6F69 || v11 != 0x6C6D782B736C702FLL)
  {
LABEL_13:
    if (result[11])
    {
      uint64_t v14 = result[7];
      uint64_t v15 = (std::__shared_weak_count *)result[8];
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        PersistentModuleFactory::get_persistent_module_from_pool<NashvilleFEPersistentModule>(&v26, v14);
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      else
      {
        PersistentModuleFactory::get_persistent_module_from_pool<NashvilleFEPersistentModule>(&v26, v14);
      }
      NashvilleFEPersistentModule::load_voice_resource((uint64_t)a4, v26, (uint64_t *)a2);
    }
    goto LABEL_35;
  }
  std::ifstream::basic_ifstream(&v26);
  if ((v27[*(void *)(v26 - 24) + 16] & 5) != 0)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    BOOL v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v18 = a2;
      }
      else {
        uint64_t v18 = *(void *)a2;
      }
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = v18;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = *(void *)a2;
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  std::ostream::operator<<();
  std::stringbuf::str();
  (*(void (**)(void *, void **))(*v5 + 72))(v5, &__p);
  if (v21 < 0) {
    operator delete(__p);
  }
  *(void *)&buf[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)buf + *(void *)(*(void *)&buf[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&buf[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (v24 < 0) {
    operator delete(v23);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x210559500](&v25);
  uint64_t v26 = *MEMORY[0x263F8C2A8];
  *(void *)&v27[*(void *)(v26 - 24)] = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x210558FE0](v27);
  std::istream::~istream();
  uint64_t result = (void *)MEMORY[0x210559500](v28);
LABEL_35:
  *a4 = 0;
  a4[1] = 0;
  return result;
}

void sub_20D3E63DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  std::ifstream::~ifstream(&a49);
  _Unwind_Resume(a1);
}

uint64_t FrontendImpl::set_disable_prompts(FrontendImpl *this, char a2)
{
  uint64_t v3 = *((void *)this + 5);
  uint64_t v4 = v3 + 160;
  {
    int v7 = &v6;
    operator new();
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t FrontendImpl::stop(FrontendImpl *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  *((unsigned char *)this + 104) = 1;
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v4();
  }
  return result;
}

void FrontendImpl::synthesize(uint64_t a1, std::string *a2)
{
  uint64_t v3 = a1;
  uint64_t v126 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(v4 + 96);
  long long v6 = *(std::__shared_weak_count **)(v4 + 104);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v7 = Frontend::check_hydra_fe(v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
  BOOL v9 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT);
  uint64_t v112 = v3;
  if (v7)
  {
    if (v9)
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v8, OS_LOG_TYPE_DEFAULT, "Detected Scalable FE in runtime.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Detected Scalable FE in runtime.", v10);
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v113, *(void *)(v3 + 56));
    uint64_t v11 = *(long long **)(v3 + 112);
    uint64_t v111 = *(long long **)(v3 + 120);
    if (v11 == v111)
    {
      BOOL v23 = 0;
    }
    else
    {
      do
      {
        if (*((char *)v11 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v12 = *v11;
          buf.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v12;
        }
        uint64_t v13 = (char *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
        if ((char)v13 >= 0) {
          std::string::size_type v14 = (std::string::size_type)a2;
        }
        else {
          std::string::size_type v14 = a2->__r_.__value_.__r.__words[0];
        }
        int v15 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
        BOOL v16 = (void *)buf.__r_.__value_.__r.__words[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t size = buf.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          uint64_t v19 = a2;
          if ((char)v13 < 0) {
            uint64_t v13 = (char *)a2->__r_.__value_.__l.__size_;
          }
          uint64_t v20 = &v13[v14];
          if ((uint64_t)v13 >= size)
          {
            int v24 = p_buf->__r_.__value_.__s.__data_[0];
            uint64_t v25 = (void *)v14;
            do
            {
              uint64_t v26 = &v13[-size];
              if (v26 == (char *)-1) {
                break;
              }
              uint64_t v27 = (char *)memchr(v25, v24, (size_t)(v26 + 1));
              if (!v27) {
                break;
              }
              char v21 = v27;
              if (!memcmp(v27, p_buf, size)) {
                goto LABEL_28;
              }
              uint64_t v25 = v21 + 1;
              uint64_t v13 = (char *)(v20 - (v21 + 1));
            }
            while ((uint64_t)v13 >= size);
          }
          char v21 = v20;
LABEL_28:
          if (v21 == v20) {
            uint64_t v22 = -1;
          }
          else {
            uint64_t v22 = (uint64_t)&v21[-v14];
          }
          uint64_t v3 = v112;
          a2 = v19;
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v3 = v112;
        }
        BOOL v23 = v22 != -1;
        if (v15 < 0) {
          operator delete(v16);
        }
        if (v22 != -1) {
          break;
        }
        uint64_t v11 = (long long *)((char *)v11 + 24);
      }
      while (v11 != v111);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "fallback list");
    if (v23)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      unint64_t v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        p_p = &__p;
        if (v117 < 0) {
          p_p = __p;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        _os_log_impl(&dword_20CD80000, v28, OS_LOG_TYPE_DEBUG, "Fallback for %s", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v31 = &__p;
      if (v117 < 0) {
        uint64_t v31 = __p;
      }
      Diagnostics::log(7, "Fallback for %s", v29, v31);
      if (!*(void *)(v3 + 88))
      {
        uint64_t v43 = *(std::__shared_weak_count **)(v112 + 32);
        *(void *)(v112 + 24) = 0;
        *(void *)(v112 + 32) = 0;
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        int v44 = *(std::__shared_weak_count **)(v112 + 16);
        *(void *)(v112 + 8) = 0;
        *(void *)(v112 + 16) = 0;
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        int v45 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v47 = &__p;
          if (v117 < 0) {
            uint64_t v47 = __p;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
          _os_log_impl(&dword_20CD80000, v45, OS_LOG_TYPE_DEBUG, "Fallback pipeline initialized for %s", (uint8_t *)&buf, 0xCu);
        }
        uint64_t v48 = &__p;
        if (v117 < 0) {
          uint64_t v48 = __p;
        }
        Diagnostics::log(7, "Fallback pipeline initialized for %s", v46, v48);
        uint64_t v49 = *(std::__shared_weak_count **)(v112 + 64);
        uint64_t v120 = *(void *)(v112 + 56);
        uint64_t v121 = v49;
        if (v49) {
          atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        GryphonPipelineFactory::nashvilleFE_backend_pipeline((uint64_t **)&buf, &v120);
        std::string v50 = *(std::__shared_weak_count **)(v112 + 96);
        *(_OWORD *)(v112 + 88) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        if (v50) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        }
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
        if (*(void *)(v112 + 88))
        {
          BOOL v51 = *(void **)(v112 + 136);
          if (v51 != (void *)(v112 + 144))
          {
            long long v52 = (void *)(v112 + 160);
            do
            {
              (*(void (**)(long long *__return_ptr, uint64_t, void *, void *))(*(void *)v112 + 48))(&v122, v112, v51 + 4, v51 + 7);
              long long v53 = *(void **)(v112 + 168);
              unint64_t v54 = *(void *)(v112 + 176);
              if ((unint64_t)v53 >= v54)
              {
                uint64_t v58 = ((uint64_t)v53 - *v52) >> 4;
                unint64_t v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 60) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v60 = v54 - *v52;
                if (v60 >> 3 > v59) {
                  unint64_t v59 = v60 >> 3;
                }
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v61 = v59;
                }
                uint64_t v125 = v112 + 176;
                int v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v61);
                uint64_t v63 = &v62[16 * v58];
                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
                buf.__r_.__value_.__l.__size_ = (std::string::size_type)v63;
                uint64_t v124 = &v62[16 * v64];
                uint64_t v65 = *((void *)&v122 + 1);
                *(_OWORD *)uint64_t v63 = v122;
                if (v65) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
                }
                buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v63 + 16);
                std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer(v52, &buf);
                uint64_t v57 = v112;
                char v56 = *(void **)(v112 + 168);
                std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)&buf);
              }
              else
              {
                *long long v53 = v122;
                uint64_t v55 = *((void *)&v122 + 1);
                v53[1] = *((void *)&v122 + 1);
                if (v55) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
                }
                char v56 = v53 + 2;
                uint64_t v57 = v112;
                *(void *)(v112 + 168) = v53 + 2;
              }
              *(void *)(v57 + 168) = v56;
              if (*((void *)&v122 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v122 + 1));
              }
              uint64_t v66 = (void *)v51[1];
              if (v66)
              {
                do
                {
                  unint64_t v67 = v66;
                  uint64_t v66 = (void *)*v66;
                }
                while (v66);
              }
              else
              {
                do
                {
                  unint64_t v67 = (void *)v51[2];
                  BOOL v68 = *v67 == (void)v51;
                  BOOL v51 = v67;
                }
                while (!v68);
              }
              BOOL v51 = v67;
            }
            while (v67 != (void *)(v112 + 144));
          }
        }
      }
      uint64_t v32 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v32 + 8) = 0u;
      *(void *)uint64_t v32 = off_26C215330;
      *((_OWORD *)v32 + 2) = 0u;
      *((void *)v32 + 3) = v32 + 32;
      unint64_t v33 = (char *)operator new(0x50uLL);
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = 0;
      *(void *)unint64_t v33 = off_26C215720;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *((void *)v33 + 9) = 0;
      *(_OWORD *)(v33 + 24) = 0u;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v33 + 24);
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
      std::string::operator=((std::string *)v33 + 1, a2);
      Agglomerate::set<std::shared_ptr<FrontendInput>>((uint64_t)(v32 + 24), (unint64_t *)&buf);
      uint64_t v34 = *(void *)(v112 + 88);
      *(void *)&long long v122 = v32 + 24;
      *((void *)&v122 + 1) = v32;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v32 + 1, 1uLL, memory_order_relaxed);
      (*(void (**)(uint64_t, long long *))(*(void *)v34 + 32))(v34, &v122);
      if (*((void *)&v122 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v122 + 1));
      }
      uint64_t v3 = v112;
      do
      {
        (*(void (**)(long long *__return_ptr))(**(void **)(v112 + 88) + 56))(&v119);
        uint64_t v35 = v119;
        if (*((void *)&v119 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119 + 1));
        }
      }
      while (v35);
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33);
    }
    else
    {
      if (!*(void *)(v3 + 24))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v38 = &__p;
          if (v117 < 0) {
            uint64_t v38 = __p;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
          _os_log_impl(&dword_20CD80000, v36, OS_LOG_TYPE_DEBUG, "Reinit normal pipeline for leaving %s", (uint8_t *)&buf, 0xCu);
        }
        uint64_t v39 = &__p;
        if (v117 < 0) {
          uint64_t v39 = __p;
        }
        uint64_t v40 = (FrontendModuleBroker *)Diagnostics::log(7, "Reinit normal pipeline for leaving %s", v37, v39);
        uint64_t v41 = FrontendModuleBroker::instance(v40);
        uint64_t v3 = v112;
        std::string::size_type v42 = *(void *)(v112 + 40);
        if (*(char *)(v42 + 71) < 0)
        {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v42 + 48), *(void *)(v42 + 56));
          uint64_t v3 = v112;
          std::string::size_type v42 = *(void *)(v112 + 40);
        }
        else
        {
          std::string buf = *(std::string *)(v42 + 48);
        }
        uint64_t v120 = 0;
        uint64_t v121 = 0;
        FrontendModuleBroker::create(&v122, v41, (const char *)&buf, &v120, v42);
        if (v121) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v121);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        long long v69 = v122;
        if (*((void *)&v122 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v122 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        long long v70 = *(std::__shared_weak_count **)(v3 + 32);
        *(_OWORD *)(v3 + 24) = v69;
        if (v70) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v70);
        }
        long long v118 = v69;
        if (*((void *)&v69 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        FrontendModule::head(&v119, &v118);
        long long v71 = v119;
        if (*((void *)&v119 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v119 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        char v72 = *(std::__shared_weak_count **)(v3 + 16);
        *(_OWORD *)(v3 + 8) = v71;
        if (v72) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v72);
        }
        if (*((void *)&v71 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71 + 1));
        }
        if (*((void *)&v118 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v118 + 1));
        }
        if (*((void *)&v69 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
        }
      }
      if (*(void *)(v3 + 88))
      {
        std::string::size_type v73 = *(void **)(v3 + 160);
        for (unint64_t i = *(void **)(v3 + 168); v73 != i; v73 += 2)
        {
          *(void *)&long long v122 = *v73;
          uint64_t v75 = v73[1];
          *((void *)&v122 + 1) = v75;
          if (v75) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, long long *))(*(void *)v3 + 64))(v3, &v122);
          if (*((void *)&v122 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v122 + 1));
          }
        }
        std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100]((uint64_t *)(v3 + 160));
      }
      uint64_t v32 = *(char **)(v3 + 96);
      *(void *)(v3 + 88) = 0;
      *(void *)(v3 + 96) = 0;
      if (!v32)
      {
LABEL_150:
        if (v117 < 0) {
          operator delete(__p);
        }
        uint64_t v76 = (uint64_t **)v113;
        if (v23)
        {
          if (v113)
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 4;
            Observable::emit((uint64_t **)v113, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, &buf);
          }
        }
        else if (v113)
        {
          LOBYTE(__p) = 1;
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          unint64_t v77 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_20CD80000, v77, OS_LOG_TYPE_DEFAULT, "Emitting tts.feature.hydra_frontend event", (uint8_t *)&buf, 2u);
          }
          Diagnostics::log(5, "Emitting tts.feature.hydra_frontend event", v78);
          Observable::emit(v76, "tts.feature.hydra_frontend", &__p);
        }
        if (v114) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v114);
        }
        if (v23) {
          return;
        }
        goto LABEL_164;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32);
    goto LABEL_150;
  }
  if (v9)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v8, OS_LOG_TYPE_DEFAULT, "Detected Hybrid FE in runtime.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Detected Hybrid FE in runtime.", v10);
LABEL_164:
  (*(void (**)(void))(**(void **)(v3 + 24) + 24))(*(void *)(v3 + 24));
  (*(void (**)(void, std::string *))(**(void **)(v3 + 8) + 56))(*(void *)(v3 + 8), a2);
  *(unsigned char *)(v3 + 104) = 0;
  if ((*(unsigned int (**)(void))(**(void **)(v3 + 24) + 56))())
  {
    uint64_t v79 = 0;
    while (1)
    {
      if (*(unsigned char *)(v3 + 104)) {
        return;
      }
      memset(&buf, 0, sizeof(buf));
      uint64_t v80 = (void *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v3 + 40) + 112) + 64))(*(void *)(*(void *)(v3 + 40) + 112));
      if (v80[1] != *v80) {
        break;
      }
LABEL_209:
      std::string __p = &buf;
      std::vector<TTSSynthesizer::Marker>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (((*(uint64_t (**)(void))(**(void **)(v3 + 24) + 56))(*(void *)(v3 + 24)) & 1) == 0) {
        return;
      }
    }
    (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(v3 + 40) + 112) + 56))(&__p);
    uint64_t v81 = (char *)__p;
    if (!__p)
    {
LABEL_207:
      uint64_t v3 = v112;
      if (v116) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v116);
      }
      goto LABEL_209;
    }
    if (v81 + 8 == v82)
    {
      p_int64_t size = buf.__r_.__value_.__l.__size_;
    }
    else
    {
      long long v83 = *(long long ***)(*((void *)v82 + 5) + 8);
      uint64_t v85 = *v83;
      int v84 = v83[1];
      unint64_t v86 = 0x6DB6DB6DB6DB6DB7 * (((char *)v84 - (char *)*v83) >> 3);
      uint64_t v87 = buf.__r_.__value_.__r.__words[2];
      uint64_t v88 = (std::string *)buf.__r_.__value_.__r.__words[0];
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__r.__words[0]) >> 3) >= v86)
      {
        std::string::size_type v97 = buf.__r_.__value_.__l.__size_;
        if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3) >= v86)
        {
          if (v85 == v84)
          {
            p_int64_t size = buf.__r_.__value_.__r.__words[0];
          }
          else
          {
            do
            {
              int v103 = v88;
              long long v105 = *v85;
              long long v106 = v85[1];
              int v104 = (const std::string *)(v85 + 2);
              *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v105;
              *(_OWORD *)&v88->__r_.__value_.__r.__words[2] = v106;
              std::string::pointer v107 = (std::string *)((char *)v88 + 32);
              std::string::operator=(v107, v104);
              uint64_t v85 = (long long *)&v104[1];
              uint64_t v88 = v107 + 1;
            }
            while (v85 != v84);
            p_int64_t size = (std::string::size_type)&v103[2].__r_.__value_.__l.__size_;
            std::string::size_type v97 = buf.__r_.__value_.__l.__size_;
          }
          while (v97 != p_size)
          {
            if (*(char *)(v97 - 1) < 0) {
              operator delete(*(void **)(v97 - 24));
            }
            v97 -= 56;
          }
          buf.__r_.__value_.__l.__size_ = p_size;
          goto LABEL_202;
        }
        int64_t v98 = (long long *)((char *)v85
                         + 8 * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3));
        if (buf.__r_.__value_.__l.__size_ != buf.__r_.__value_.__r.__words[0])
        {
          do
          {
            long long v100 = *v85;
            long long v101 = v85[1];
            uint64_t v99 = (const std::string *)(v85 + 2);
            *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v100;
            *(_OWORD *)&v88->__r_.__value_.__r.__words[2] = v101;
            std::string::size_type v102 = (std::string *)((char *)v88 + 32);
            std::string::operator=(v102, v99);
            uint64_t v85 = (long long *)&v99[1];
            uint64_t v88 = v102 + 1;
          }
          while (v85 != v98);
          uint64_t v88 = (std::string *)buf.__r_.__value_.__l.__size_;
        }
        std::string::size_type v95 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*>((uint64_t)&buf.__r_.__value_.__r.__words[2], v98, v84, (uint64_t)v88);
      }
      else
      {
        if (buf.__r_.__value_.__r.__words[0])
        {
          std::string::size_type v89 = buf.__r_.__value_.__l.__size_;
          uint64_t v90 = (void *)buf.__r_.__value_.__r.__words[0];
          if (buf.__r_.__value_.__l.__size_ != buf.__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v89 - 1) < 0) {
                operator delete(*(void **)(v89 - 24));
              }
              v89 -= 56;
            }
            while ((std::string *)v89 != v88);
            uint64_t v90 = (void *)buf.__r_.__value_.__r.__words[0];
          }
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)v88;
          operator delete(v90);
          uint64_t v87 = 0;
          memset(&buf, 0, sizeof(buf));
        }
        if (v86 > 0x492492492492492) {
          goto LABEL_211;
        }
        unint64_t v91 = 0x6DB6DB6DB6DB6DB7 * (v87 >> 3);
        uint64_t v92 = 2 * v91;
        if (2 * v91 <= v86) {
          uint64_t v92 = v86;
        }
        unint64_t v93 = v91 >= 0x249249249249249 ? 0x492492492492492 : v92;
        if (v93 > 0x492492492492492) {
LABEL_211:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v93);
        buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
        buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[0] + 56 * v94;
        std::string::size_type v95 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*>((uint64_t)&buf.__r_.__value_.__r.__words[2], v85, v84, (uint64_t)buf.__r_.__value_.__l.__data_);
      }
      p_int64_t size = v95;
      buf.__r_.__value_.__l.__size_ = v95;
    }
LABEL_202:
    for (std::string::size_type j = buf.__r_.__value_.__r.__words[0]; j != p_size; j += 56)
      *(void *)(j + 24) += v79;
    uint64_t v109 = (char *)__p;
    if (v109 + 8 != v110) {
      v79 += (uint64_t)(*(void *)(*(void *)(*((void *)v110 + 5) + 8) + 64)
    }
                     - *(void *)(*(void *)(*((void *)v110 + 5) + 8) + 56)) >> 2;
    goto LABEL_207;
  }
}

void sub_20D3E7438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<TTSSynthesizer::Marker>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<TTSSynthesizer::Marker>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<TTSSynthesizer::Marker>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  uint64_t v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    long long v6 = a2 + 2;
    do
    {
      long long v7 = *(v6 - 1);
      *(_OWORD *)uint64_t v4 = *(v6 - 2);
      *(_OWORD *)(v4 + 16) = v7;
      long long v8 = (std::string *)(v4 + 32);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v15;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 48) = *((void *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      uint64_t v10 = v6 - 2;
      v4 += 56;
      uint64_t v15 = v4;
      long long v6 = (long long *)((char *)v6 + 56);
    }
    while ((long long *)((char *)v10 + 56) != a3);
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_20D3E76BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 56;
    }
  }
  return a1;
}

uint64_t FrontendImpl::get_ve_instance(FrontendImpl *this)
{
  return *((void *)this + 3);
}

void FrontendImpl::~FrontendImpl(FrontendImpl *this)
{
  FrontendImpl::~FrontendImpl(this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void **v11;

  *(void *)this = off_26C1FFE88;
  uint64_t v2 = *((void *)this + 7);
  std::recursive_mutex::lock((std::recursive_mutex *)(v2 + 56));
  std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 56));
  uint64_t v3 = *((void *)this + 5);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 136);
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 136) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v11 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 136, *((void **)this + 18));
  uint64_t v11 = (void **)((char *)this + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v7 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_20D3E7878(void *a1)
{
  std::recursive_mutex::unlock(v1);
  __clang_call_terminate(a1);
}

BOOL Frontend::should_use(char *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x38uLL);
  v2->__shared_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)off_26C2163D0;
  uint64_t v3 = v2 + 1;
  v2->__shared_weak_owners_ = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)off_26C201700;
  v2[1].__shared_owners_ = 0;
  v2[1].__shared_weak_owners_ = 0;
  v2[2].__vftable = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a1);
  ((void (*)(std::__shared_weak_count *, std::string *))v3->__vftable[2].~__shared_weak_count)(v3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ((void (*)(std::string *__return_ptr, std::__shared_weak_count *, uint64_t, uint64_t))v3->__on_zero_shared)(&__p, v3, 1717790311, 2);
  std::string::size_type v4 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (v4)
  {
    BOOL is_fe_module = 1;
  }
  else
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    ((void (*)(uint64_t *__return_ptr, std::__shared_weak_count *, uint64_t, uint64_t))v3->__vftable[1].__on_zero_shared_weak)(&v21, v3, 1734567527, 2);
    long long v6 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v19, (uint64_t)&v21);
    char has_sane_pipeline = GryphonPipelineFactory::has_sane_pipeline(v6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
    if (has_sane_pipeline)
    {
      long long v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v21, "pipeline");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v17, (uint64_t)v8);
      if (v17[0])
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v15 = 0;
        unint64_t v16 = 0x8000000000000000;
        if (v17[0] == 2)
        {
          __p.__r_.__value_.__r.__words[2] = *v18;
        }
        else if (v17[0] == 1)
        {
          __p.__r_.__value_.__l.__size_ = *v18;
        }
        else
        {
          unint64_t v16 = 0;
        }
        uint64_t v10 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__p);
        uint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v10, "id");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v11, &v13);
        BOOL is_fe_module = GryphonPipelineFactory::is_fe_module(&v13);
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v13.__r_.__value_.__l.__data_);
        }
        int v9 = v17[0];
      }
      else
      {
        int v9 = 0;
        BOOL is_fe_module = 0;
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v18, v9);
    }
    else
    {
      BOOL is_fe_module = 0;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return is_fe_module;
}

void sub_20D3E7B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, unsigned __int8 a20,uint64_t *a21)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a21, a20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v22 - 40), *(unsigned __int8 *)(v22 - 48));
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

BOOL Frontend::has_forced_hydraFE(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v7);
  if ((_BYTE)v7)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "force_hydra_fe");
    unsigned __int8 v4 = 0;
    BOOL v1 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)&v7, (const void **)__p, &v4);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    int v2 = v7;
  }
  else
  {
    int v2 = 0;
    BOOL v1 = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v2);
  return v1;
}

void sub_20D3E7C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned __int8 a16, uint64_t *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a17, a16);
  _Unwind_Resume(a1);
}

void Frontend::adapt_pipeline_for_nashvilleFE(unsigned __int8 *a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "pipeline");
  if (*a1 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v17 = *a1;
    if (v17 > 9) {
      uint64_t v18 = "number";
    }
    else {
      uint64_t v18 = off_2641152A0[v17];
    }
    std::string::basic_string[abi:ne180100]<0>(&v38, v18);
    uint64_t v19 = std::string::insert(&v38, 0, "cannot use at() with ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    int v45 = (long long *)v19->__r_.__value_.__r.__words[2];
    long long v44 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(304, (uint64_t)&v44, exception);
  }
  uint64_t v2 = std::map<std::string,std::string>::at(*((void *)a1 + 1), (const void **)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v28, v2);
  if (SHIBYTE(p_p) < 0) {
    operator delete(__p);
  }
  if (v28[0] == 2) {
    uint64_t v3 = (unsigned char *)*v29;
  }
  else {
    uint64_t v3 = 0;
  }
  v38.__r_.__value_.__l.__size_ = 0;
  v38.__r_.__value_.__s.__data_[0] = 3;
  v38.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v38.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38;
  char v39 = 1;
  uint64_t v41 = 0;
  v40[0] = 3;
  uint64_t v41 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>("prompt_be");
  std::string::size_type v42 = v40;
  char v43 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v44, (uint64_t)&v38, 2, 1, 2);
  int v45 = &v44;
  char v46 = 1;
  uint64_t v31 = 0;
  LOBYTE(__p) = 3;
  uint64_t v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  char v33 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v24, 0, 0, 0, 1);
  v34[0] = v24[0];
  unsigned __int8 v4 = v25;
  v24[0] = 0;
  uint64_t v25 = 0;
  uint64_t v35 = v4;
  uint64_t v36 = v34;
  char v37 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v47, (uint64_t)&__p, 2, 1, 2);
  uint64_t v48 = v47;
  char v49 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v26, (uint64_t)&v44, 2, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(v23, v28, (uint64_t)v28, v3, (uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
  for (uint64_t i = 0; i != -64; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v47[i + 8], v47[i]);
  for (uint64_t j = 0; j != -8; j -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v35)[j], v34[j * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
  for (uint64_t k = 0; k != -8; k -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v41)[k], v40[k * 8]);
  if (v28[0] == 2) {
    long long v8 = (unsigned char *)*v29;
  }
  else {
    long long v8 = 0;
  }
  v38.__r_.__value_.__l.__size_ = 0;
  v38.__r_.__value_.__s.__data_[0] = 3;
  v38.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v38.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38;
  char v39 = 1;
  uint64_t v41 = 0;
  v40[0] = 3;
  uint64_t v41 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>("nashville_fe");
  std::string::size_type v42 = v40;
  char v43 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v44, (uint64_t)&v38, 2, 1, 2);
  int v45 = &v44;
  char v46 = 1;
  uint64_t v31 = 0;
  LOBYTE(__p) = 3;
  uint64_t v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  char v33 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v24, 0, 0, 0, 1);
  v34[0] = v24[0];
  int v9 = v25;
  v24[0] = 0;
  uint64_t v25 = 0;
  uint64_t v35 = v9;
  uint64_t v36 = v34;
  char v37 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v47, (uint64_t)&__p, 2, 1, 2);
  uint64_t v48 = v47;
  char v49 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v26, (uint64_t)&v44, 2, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(v23, v28, (uint64_t)v28, v8, (uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
  for (uint64_t m = 0; m != -64; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v47[m + 8], v47[m]);
  for (uint64_t n = 0; n != -8; n -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v35)[n], v34[n * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
  for (iuint64_t i = 0; ii != -8; ii -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v41)[ii], v40[ii * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v21, (uint64_t)v28);
  std::string v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "pipeline");
  int v14 = *(unsigned __int8 *)v13;
  *(unsigned char *)std::string v13 = v21[0];
  v21[0] = v14;
  uint64_t v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v22;
  uint64_t v22 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
}

void sub_20D3E81E8(_Unwind_Exception *a1, uint64_t a2, unsigned __int8 a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unsigned __int8 v4 = va_arg(va1, uint64_t *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)va, a3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)va1, v15);
  _Unwind_Resume(a1);
}

void sub_20D3E8428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20D3E84C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      if (SHIBYTE(a25) < 0) {
        operator delete(a23);
      }
      JUMPOUT(0x20D3E85A8);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

void sub_20D3E8528(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20D3E8538(_Unwind_Exception *a1)
{
}

void sub_20D3E8540(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_8:
      if (SHIBYTE(a25) < 0) {
        operator delete(a23);
      }
      JUMPOUT(0x20D3E85A8);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

void SharedObjectPool::inject<FrontendEnvironment>(_OWORD *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  uint64_t v12 = &v14;
  if (!v7) {
    operator new();
  }
  unint64_t v8 = *a3;
  unint64_t v9 = a3[1];
  uint64_t v12 = (char ***)off_26C2065D8;
  *(void *)&long long v13 = v8;
  *((void *)&v13 + 1) = v9;
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    long long v10 = v13;
  }
  else
  {
    long long v10 = v8;
  }
  long long v13 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(v7 + 16);
  *(_OWORD *)(v7 + 8) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    uint64_t v12 = (char ***)off_26C2065D8;
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  *a1 = *(_OWORD *)a3;
  *a3 = 0;
  a3[1] = 0;
  std::recursive_mutex::unlock(v6);
}

void sub_20D3E8738(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<std::shared_ptr<FrontendEnvironment>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2065D8;
  BOOL v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<FrontendEnvironment>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2065D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<FrontendEnvironment>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<FrontendEnvironment>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FrontendEnvironment>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void PronounceLetter::pronounce(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = a1[1];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0;
LABEL_6:
  unint64_t v9 = (std::__shared_weak_count *)a1[4];
  if (!v9)
  {
    long long v10 = 0;
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>((void *)a3, &byte_20D5A22AE);
    goto LABEL_20;
  }
  long long v10 = std::__shared_weak_count::lock(v9);
  if (!v10) {
    goto LABEL_19;
  }
  if (!v8) {
    goto LABEL_19;
  }
  uint64_t v11 = a1[3];
  if (!v11) {
    goto LABEL_19;
  }
  UTFString_Impl::to_upper((UTFString_Impl *)&v45, a2);
  uint64_t v12 = std::string::append(&v45, "_");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "NN");
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void **))(*(void *)v8 + 24))(&v45, v8, &__str, &__p);
  if ((char)v44 < 0) {
    operator delete(__p);
  }
  std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v45.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    int v15 = *(char *)(a2 + 23);
    BOOL v16 = v15 < 0;
    std::string::size_type v17 = *(void *)a2;
    if (v15 >= 0) {
      std::string::size_type v17 = a2;
    }
    uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
    if (v16) {
      uint64_t v18 = *(void *)(a2 + 8);
    }
    v41.__r_.__value_.__r.__words[0] = v17;
    v41.__r_.__value_.__l.__size_ = v18 << 32;
    unsigned int v19 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v41);
    UTFString::decompose_codepoint((uint64_t *)&__p, v19);
    if ((v44 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v44 & 0x80u) == 0) {
      int v21 = v44;
    }
    else {
      int v21 = v43;
    }
    if ((*p_p & 0xFC00) == 0xD800) {
      int v22 = 2;
    }
    else {
      int v22 = 1;
    }
    if (v22 != v21)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      if (v21)
      {
        uint64_t v37 = v11;
        uint64_t v23 = 0;
        do
        {
          int v24 = (unsigned __int16)p_p[(int)v23];
          if ((v24 & 0xFC00) == 0xD800) {
            int v24 = *(unsigned __int16 *)((char *)p_p + (((v23 << 32) + 0x100000000) >> 31)) + (v24 << 10) - 56613888;
          }
          memset(&v41, 0, sizeof(v41));
          if (((1 << u_charType(v24)) & 0x1C0) != 0)
          {
            MEMORY[0x210558E70](&v41, "_");
            UTFString::push_back_codepoint<std::string>(&v41, v24);
          }
          else
          {
            UTFString::push_back_codepoint<std::string>(&v41, v24);
            std::string::push_back(&v41, 95);
          }
          std::string::basic_string[abi:ne180100]<0>(v38, "NN");
          (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void **))(*(void *)v8 + 24))(&v40, v8, &v41, v38);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v41.__r_.__value_.__l.__data_);
          }
          std::string v41 = v40;
          *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
          v40.__r_.__value_.__s.__data_[0] = 0;
          if (v39 < 0) {
            operator delete(v38[0]);
          }
          std::string::size_type v25 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          char v26 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          std::string::size_type v27 = v41.__r_.__value_.__l.__size_;
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v28 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v28 = v41.__r_.__value_.__l.__size_;
          }
          if (v28)
          {
            uint64_t v29 = *(unsigned __int8 *)(a3 + 23);
            if ((v29 & 0x80u) != 0) {
              uint64_t v29 = *(void *)(a3 + 8);
            }
            if (v29)
            {
              std::string::append((std::string *)a3, " . ");
              std::string::size_type v25 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
              std::string::size_type v27 = v41.__r_.__value_.__l.__size_;
              char v26 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
            }
            if (v26 >= 0) {
              uint64_t v30 = &v41;
            }
            else {
              uint64_t v30 = (std::string *)v41.__r_.__value_.__r.__words[0];
            }
            if (v26 >= 0) {
              std::string::size_type v31 = v25;
            }
            else {
              std::string::size_type v31 = v27;
            }
            std::string::append((std::string *)a3, (const std::string::value_type *)v30, v31);
            char v26 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          }
          if (v26 < 0) {
            operator delete(v41.__r_.__value_.__l.__data_);
          }
          if ((p_p[(int)v23] & 0xFC00) == 0xD800) {
            int v32 = 2;
          }
          else {
            int v32 = 1;
          }
          unsigned int v33 = v32 + v23;
          uint64_t v23 = v33;
        }
        while (v33 != v21);
        int v34 = *(char *)(a3 + 23);
        uint64_t v35 = *(unsigned __int8 *)(a3 + 23);
        if (v34 < 0) {
          uint64_t v35 = *(void *)(a3 + 8);
        }
        if (v35)
        {
          std::string::operator=((std::string *)a2, &__str);
LABEL_90:
          if ((char)v44 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v45.__r_.__value_.__l.__data_);
          }
          goto LABEL_94;
        }
        uint64_t v11 = v37;
        if (v34 < 0) {
          operator delete(*(void **)a3);
        }
      }
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v41 = *(std::string *)a2;
    }
    std::string::basic_string[abi:ne180100]<0>(v38, "NN");
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void **))(*(void *)v11 + 24))(&v40, v11, &v41, v38);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    std::string v45 = v40;
    *((unsigned char *)&v40.__r_.__value_.__s + 23) = 0;
    v40.__r_.__value_.__s.__data_[0] = 0;
    if (v39 < 0) {
      operator delete(v38[0]);
    }
    std::string::size_type v36 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v36 = v45.__r_.__value_.__l.__size_;
    }
    if (v36) {
      std::string::operator=((std::string *)a2, &__str);
    }
    *(std::string *)a3 = v45;
    memset(&v45, 0, sizeof(v45));
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    goto LABEL_90;
  }
  std::string::operator=((std::string *)a2, &__str);
  *(std::string *)a3 = v45;
LABEL_94:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_20:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_20D3E8DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (*(char *)(v39 + 23) < 0) {
    operator delete(*(void **)v39);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  _Unwind_Resume(exception_object);
}

void PronounceLetter::~PronounceLetter(PronounceLetter *this)
{
  PronounceLetter::~PronounceLetter(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = off_26C2013B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void PronounceSpell::pronounce(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  __dst[3] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v5);
    if (v7 && *(void *)(a1 + 8))
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      memset(&v10, 0, sizeof(v10));
      memset(v9, 0, sizeof(v9));
      v8.__r_.__value_.__r.__words[0] = (std::string::size_type)"_";
      v8.__r_.__value_.__l.__size_ = (std::string::size_type)"";
      boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)&v8);
      boost::algorithm::split<std::vector<std::string>,std::string&,boost::algorithm::detail::is_any_ofF<char>>((int)v9, a2, __dst, 1);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(a3, &byte_20D5A22AE);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_20D3E9278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (*(void *)(v45 - 96) >= 0x11uLL)
  {
    uint64_t v47 = *(void *)(v45 - 112);
    if (v47) {
      MEMORY[0x2105595C0](v47, 0x1000C8077774924);
    }
  }
  a21 = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a43 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v44 + 23) < 0) {
    operator delete(*(void **)v44);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  _Unwind_Resume(a1);
}

void PronounceSpell::~PronounceSpell(PronounceSpell *this)
{
  *(void *)this = off_26C200CF8;
  BOOL v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = off_26C200CF8;
  BOOL v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

const std::error_category *VoiceConfigImpl::add_search_dir(VoiceConfigImpl *this, const std::__fs::filesystem::path *a2)
{
  __ec.__val_ = 0;
  uint64_t result = std::system_category();
  __ec.__cat_ = result;
  std::string::size_type size = HIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__pn_.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t result = (const std::error_category *)std::__fs::filesystem::__status(a2, &__ec);
    if ((_BYTE)__p)
    {
      __ec.__val_ = 0;
      uint64_t result = std::system_category();
      __ec.__cat_ = result;
      if ((_BYTE)__p)
      {
        if (__p != 255) {
          operator new();
        }
      }
    }
  }
  return result;
}

void sub_20D3E98B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,int a24,__int16 a25,char a26,char a27)
{
  std::string::size_type v31 = *(std::__shared_weak_count **)(v28 + 16);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  MEMORY[0x2105595E0](v28, 0x10F3C4013766346);
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  _Unwind_Resume(a1);
}

void VoiceConfig::add_search_dir(VoiceConfig *this, const std::__fs::filesystem::path *a2)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  StringFormatter::StringFormatter((StringFormatter *)v3, "add_search_dir only makes sense for VoiceConfig");
  MEMORY[0x210558D40](exception, v3);
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_20D3E99FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void VoiceConfigEyrie::get_json(VoiceConfigEyrie *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  sectiouint64_t n = VoiceConfigEyrie::get_section(a1, a2);
  if (!HIDWORD(section))
  {
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    return;
  }
  uint64_t v7 = (unsigned __int8 *)(*((void *)a1 + 3) + HIDWORD(section));
  v24[0] = 0;
  std::string::size_type v25 = 0;
  long long v20 = (unsigned __int8 *)v24;
  *(_OWORD *)int v21 = 0u;
  long long v22 = 0u;
  __int16 v23 = 256;
  int v15 = v7;
  int v16 = &v7[v6];
  long long v17 = xmmword_20D60CCA0;
  char v18 = 1;
  unsigned int v19 = &v20;
  if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal((uint64_t)&v15, 1) & 1) == 0)goto LABEL_17; {
  uint64_t v8 = ++*((void *)&v17 + 1);
  }
  if (v15 != v16)
  {
    uint64_t v9 = *v15++;
    *(void *)&long long v17 = v9;
    uint64_t v10 = (uint64_t)v19;
    BYTE2(__str.__vftable) = 0;
    LOWORD(__str.__vftable) = 0;
    snprintf((char *)&__str, 3uLL, "%.2hhX", v9);
    std::string::basic_string[abi:ne180100]<0>(v34, (char *)&__str);
    unint64_t v11 = *((void *)&v17 + 1);
    BYTE2(__p[0]) = 0;
    LOWORD(__p[0]) = 0;
    snprintf((char *)__p, 3uLL, "%.2hhX", v17);
    std::string::basic_string[abi:ne180100]<0>(&v28, (char *)__p);
    uint64_t v12 = std::string::insert(&v28, 0, "expected end of input; last byte: 0x");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v12->__r_.__value_.__r.__words[2];
    long long v29 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "value");
    nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(&v31, (uint64_t)&v29, (uint64_t)__p);
    nlohmann::detail::parse_error::create((nlohmann::detail::exception *)&__str, 110, v11, (uint64_t)&v31);
    int v14 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(v10, v8, (uint64_t)v34, (uint64_t)&__str);
    __str.__vftable = (std::exception_vtbl *)off_26C211368;
    MEMORY[0x210558DD0](&v33);
    std::exception::~exception(&__str);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)v29);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (v35 < 0)
    {
      operator delete(v34[0]);
      if (v14) {
        goto LABEL_15;
      }
    }
    else if (v14)
    {
      goto LABEL_15;
    }
LABEL_17:
    *(unsigned char *)a3 = 9;
    *(void *)(a3 + 8) = 0;
    goto LABEL_18;
  }
LABEL_15:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a3, (uint64_t)v24);
LABEL_18:
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
}

void sub_20D3E9CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v36, a23);
  _Unwind_Resume(a1);
}

uint64_t VoiceConfigEyrie::get_section(VoiceConfigEyrie *this, unsigned int a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  unsigned int v2 = bswap32(a2);
  unsigned int v41 = v2;
  int v42 = 0;
  unsigned __int8 v4 = (unsigned int *)*((void *)this + 8);
  uint64_t v3 = (unsigned int *)*((void *)this + 9);
  if (v3 == v4) {
    goto LABEL_34;
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v3 - v4);
  do
  {
    unint64_t v8 = v7 >> 1;
    uint64_t v9 = &v4[3 * (v7 >> 1)];
    unsigned int v11 = *v9;
    uint64_t v10 = v9 + 3;
    v7 += ~(v7 >> 1);
    if (bswap32(v11) < a2) {
      unsigned __int8 v4 = v10;
    }
    else {
      unint64_t v7 = v8;
    }
  }
  while (v7);
  if (v4 == v3 || v2 != *v4)
  {
LABEL_34:
    unsigned __int8 v4 = &v41;
    return *(void *)v4;
  }
  unsigned int v12 = *((unsigned __int8 *)v4 + 11);
  if (v12 >= 0xF0)
  {
    int v13 = v4 - *((_DWORD *)this + 6);
    uint64_t v14 = (v13 + 4);
    int v42 = v13 + 4;
    uint64_t v15 = v12 & 0xF;
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      name_from_id(&v40, a2);
      int v17 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
      std::string::size_type v18 = v40.__r_.__value_.__r.__words[0];
      symbol_name_from_id(&__p, a2);
      unsigned int v19 = &v40;
      if (v17 < 0) {
        unsigned int v19 = (std::string *)v18;
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      int v21 = (void *)((char *)this + 40);
      if (*((char *)this + 63) < 0) {
        int v21 = (void *)*v21;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v44 = v21;
      __int16 v45 = 1024;
      int v46 = v14;
      __int16 v47 = 1024;
      int v48 = v15;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
    }
    p_std::string buf = &buf;
    name_from_id(&buf, a2);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    symbol_name_from_id(&v40, a2);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v24 = &v40;
    }
    else {
      int v24 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v25 = (void *)((char *)this + 40);
    if (*((char *)this + 63) < 0) {
      std::string::size_type v25 = (void *)*v25;
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    goto LABEL_34;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  char v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id(&v40, a2);
    int v28 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
    std::string::size_type v29 = v40.__r_.__value_.__r.__words[0];
    symbol_name_from_id(&__p, a2);
    std::string::size_type v30 = &v40;
    if (v28 < 0) {
      std::string::size_type v30 = (std::string *)v29;
    }
    std::string v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v31 = &__p;
    }
    int v32 = (void *)((char *)this + 40);
    if (*((char *)this + 63) < 0) {
      int v32 = (void *)*v32;
    }
    unsigned int v33 = v4[1];
    unsigned int v34 = v4[2];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v31;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v44 = v32;
    __int16 v45 = 1024;
    int v46 = v33;
    __int16 v47 = 1024;
    int v48 = v34;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  char v35 = &buf;
  name_from_id(&buf, a2);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v35 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  symbol_name_from_id(&v40, a2);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v37 = &v40;
  }
  else {
    uint64_t v37 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  uint64_t v38 = (void *)((char *)this + 40);
  if (*((char *)this + 63) < 0) {
    uint64_t v38 = (void *)*v38;
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  return *(void *)v4;
}

void sub_20D3EA1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(uint64_t a1, int a2)
{
  if (a2)
  {
    ++*(void *)(a1 + 24);
    uint64_t v3 = *(unsigned __int8 **)a1;
    if (*(void *)a1 == *(void *)(a1 + 8))
    {
      std::string::size_type v4 = -1;
    }
    else
    {
      std::string::size_type v4 = *v3;
      *(void *)a1 = v3 + 1;
    }
    *(void *)(a1 + 16) = v4;
  }
  else
  {
    std::string::size_type v4 = *(void *)(a1 + 16);
  }
  switch(v4)
  {
    case 0xFFFFFFFFFFFFFFFFLL:
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof((void *)a1, "value");
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
      int v17 = *(uint64_t **)(a1 + 40);
      v61.__r_.__value_.__r.__words[0] = v4;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(v17, (uint64_t *)&v61);
      return 1;
    case 0x18uLL:
      LOBYTE(__p) = 0;
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>((unsigned __int8 **)a1, &__p);
      if (!cbor_binary) {
        return cbor_binary;
      }
      std::string::size_type v36 = *(uint64_t **)(a1 + 40);
      std::string::size_type v37 = __p;
      goto LABEL_71;
    case 0x19uLL:
      LOWORD(__p) = 0;
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>((unsigned __int8 **)a1, &__p);
      if (!cbor_binary) {
        return cbor_binary;
      }
      std::string::size_type v36 = *(uint64_t **)(a1 + 40);
      std::string::size_type v37 = (unsigned __int16)__p;
      goto LABEL_71;
    case 0x1AuLL:
      LODWORD(__p) = 0;
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>((unsigned __int8 **)a1, &__p);
      if (!cbor_binary) {
        return cbor_binary;
      }
      std::string::size_type v36 = *(uint64_t **)(a1 + 40);
      std::string::size_type v37 = __p;
      goto LABEL_71;
    case 0x1BuLL:
      std::string __p = 0;
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>((unsigned __int8 **)a1, &__p);
      if (!cbor_binary) {
        return cbor_binary;
      }
      std::string::size_type v36 = *(uint64_t **)(a1 + 40);
      std::string::size_type v37 = (std::string::size_type)__p;
LABEL_71:
      v61.__r_.__value_.__r.__words[0] = v37;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(v36, (uint64_t *)&v61);
      return cbor_binary;
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
      int v16 = *(uint64_t **)(a1 + 40);
      v61.__r_.__value_.__r.__words[0] = (char)(31 - v4);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(v16, (uint64_t *)&v61);
      return 1;
    case 0x38uLL:
      LOBYTE(__p) = 0;
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>((unsigned __int8 **)a1, &__p);
      if (!cbor_binary) {
        return cbor_binary;
      }
      unsigned int v33 = *(uint64_t **)(a1 + 40);
      unint64_t v34 = __p;
      goto LABEL_78;
    case 0x39uLL:
      LOWORD(__p) = 0;
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>((unsigned __int8 **)a1, &__p);
      if (!cbor_binary) {
        return cbor_binary;
      }
      unsigned int v33 = *(uint64_t **)(a1 + 40);
      unint64_t v34 = (unsigned __int16)__p;
      goto LABEL_78;
    case 0x3AuLL:
      LODWORD(__p) = 0;
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>((unsigned __int8 **)a1, &__p);
      if (!cbor_binary) {
        return cbor_binary;
      }
      unsigned int v33 = *(uint64_t **)(a1 + 40);
      unint64_t v34 = __p;
      goto LABEL_78;
    case 0x3BuLL:
      std::string __p = 0;
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>((unsigned __int8 **)a1, &__p);
      if (!cbor_binary) {
        return cbor_binary;
      }
      unsigned int v33 = *(uint64_t **)(a1 + 40);
      unint64_t v34 = (unint64_t)__p;
LABEL_78:
      v61.__r_.__value_.__r.__words[0] = ~v34;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(v33, (uint64_t *)&v61);
      return cbor_binary;
    case 0x40uLL:
    case 0x41uLL:
    case 0x42uLL:
    case 0x43uLL:
    case 0x44uLL:
    case 0x45uLL:
    case 0x46uLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x4AuLL:
    case 0x4BuLL:
    case 0x4CuLL:
    case 0x4DuLL:
    case 0x4EuLL:
    case 0x4FuLL:
    case 0x50uLL:
    case 0x51uLL:
    case 0x52uLL:
    case 0x53uLL:
    case 0x54uLL:
    case 0x55uLL:
    case 0x56uLL:
    case 0x57uLL:
    case 0x58uLL:
    case 0x59uLL:
    case 0x5AuLL:
    case 0x5BuLL:
    case 0x5FuLL:
      std::string __p = 0;
      uint64_t v58 = 0;
      __int16 v60 = 0;
      uint64_t v59 = 0;
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_binary((unsigned __int8 **)a1, (uint64_t)&__p);
      if (!cbor_binary) {
        goto LABEL_38;
      }
      int v6 = *(unsigned __int8 ***)(a1 + 40);
      unint64_t v7 = v6[2];
      if (v6[1] == v7)
      {
        v61.__r_.__value_.__s.__data_[0] = 0;
        v61.__r_.__value_.__l.__size_ = 0;
        nlohmann::detail::external_constructor<(nlohmann::detail::value_t)8>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)&v61, (uint64_t)&__p);
        unsigned int v19 = *v6;
LABEL_29:
        int v20 = *v19;
        unsigned __int8 *v19 = v61.__r_.__value_.__s.__data_[0];
        v61.__r_.__value_.__s.__data_[0] = v20;
        std::string::size_type v21 = *((void *)v19 + 1);
        *((void *)v19 + 1) = v61.__r_.__value_.__l.__size_;
        v61.__r_.__value_.__l.__size_ = v21;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v61.__r_.__value_.__l.__size_, v20);
        goto LABEL_38;
      }
      uint64_t v8 = *((void *)v7 - 1);
      if (*(unsigned char *)v8 != 2)
      {
        v61.__r_.__value_.__s.__data_[0] = 0;
        v61.__r_.__value_.__l.__size_ = 0;
        nlohmann::detail::external_constructor<(nlohmann::detail::value_t)8>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)&v61, (uint64_t)&__p);
        unsigned int v19 = v6[4];
        goto LABEL_29;
      }
      uint64_t v9 = *(uint64_t **)(v8 + 8);
      unint64_t v10 = v9[1];
      unint64_t v11 = v9[2];
      if (v10 >= v11)
      {
        uint64_t v22 = (uint64_t)(v10 - *v9) >> 4;
        if ((unint64_t)(v22 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v11 - *v9;
        uint64_t v24 = v23 >> 3;
        if (v23 >> 3 <= (unint64_t)(v22 + 1)) {
          uint64_t v24 = v22 + 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        uint64_t v63 = v9 + 2;
        char v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v9 + 2), v25);
        std::string::size_type v27 = (std::string::size_type)&v26[16 * v22];
        v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        v61.__r_.__value_.__l.__size_ = v27;
        v61.__r_.__value_.__r.__words[2] = v27;
        int v62 = &v26[16 * v28];
        *(unsigned char *)std::string::size_type v27 = 0;
        *(void *)(v27 + 8) = 0;
        nlohmann::detail::external_constructor<(nlohmann::detail::value_t)8>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v27, (uint64_t)&__p);
        v61.__r_.__value_.__r.__words[2] += 16;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v9, &v61);
        unint64_t v12 = v9[1];
        std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v61);
      }
      else
      {
        *(unsigned char *)unint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        nlohmann::detail::external_constructor<(nlohmann::detail::value_t)8>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)&__p);
        unint64_t v12 = v10 + 16;
        v9[1] = v12;
      }
      v9[1] = v12;
LABEL_38:
      int v13 = __p;
      if (__p)
      {
        uint64_t v58 = __p;
LABEL_40:
        operator delete(v13);
      }
      return cbor_binary;
    case 0x60uLL:
    case 0x61uLL:
    case 0x62uLL:
    case 0x63uLL:
    case 0x64uLL:
    case 0x65uLL:
    case 0x66uLL:
    case 0x67uLL:
    case 0x68uLL:
    case 0x69uLL:
    case 0x6AuLL:
    case 0x6BuLL:
    case 0x6CuLL:
    case 0x6DuLL:
    case 0x6EuLL:
    case 0x6FuLL:
    case 0x70uLL:
    case 0x71uLL:
    case 0x72uLL:
    case 0x73uLL:
    case 0x74uLL:
    case 0x75uLL:
    case 0x76uLL:
    case 0x77uLL:
    case 0x78uLL:
    case 0x79uLL:
    case 0x7AuLL:
    case 0x7BuLL:
    case 0x7FuLL:
      memset(&v61, 0, sizeof(v61));
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_string((unsigned __int8 **)a1, &v61);
      if (cbor_binary) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(*(uint64_t **)(a1 + 40), (uint64_t)&v61);
      }
      goto LABEL_14;
    case 0x80uLL:
    case 0x81uLL:
    case 0x82uLL:
    case 0x83uLL:
    case 0x84uLL:
    case 0x85uLL:
    case 0x86uLL:
    case 0x87uLL:
    case 0x88uLL:
    case 0x89uLL:
    case 0x8AuLL:
    case 0x8BuLL:
    case 0x8CuLL:
    case 0x8DuLL:
    case 0x8EuLL:
    case 0x8FuLL:
    case 0x90uLL:
    case 0x91uLL:
    case 0x92uLL:
    case 0x93uLL:
    case 0x94uLL:
    case 0x95uLL:
    case 0x96uLL:
    case 0x97uLL:
      unint64_t v14 = v4 & 0x1F;
      goto LABEL_17;
    case 0x98uLL:
      v61.__r_.__value_.__s.__data_[0] = 0;
      uint64_t cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>((unsigned __int8 **)a1, &v61))return cbor_binary; {
      data_int low = v61.__r_.__value_.__s.__data_[0];
      }
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array((unsigned __int8 **)a1, data_low);
    case 0x99uLL:
      LOWORD(v61.__r_.__value_.__l.__data_) = 0;
      uint64_t cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>((unsigned __int8 **)a1, &v61))return cbor_binary; {
      data_int low = LOWORD(v61.__r_.__value_.__l.__data_);
      }
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array((unsigned __int8 **)a1, data_low);
    case 0x9AuLL:
      LODWORD(v61.__r_.__value_.__l.__data_) = 0;
      uint64_t cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>((unsigned __int8 **)a1, &v61))return cbor_binary; {
      data_int low = LODWORD(v61.__r_.__value_.__l.__data_);
      }
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array((unsigned __int8 **)a1, data_low);
    case 0x9BuLL:
      v61.__r_.__value_.__r.__words[0] = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>((unsigned __int8 **)a1, &v61))return 0; {
      data_int low = v61.__r_.__value_.__r.__words[0];
      }
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array((unsigned __int8 **)a1, data_low);
    case 0x9FuLL:
      unint64_t v14 = -1;
LABEL_17:
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array((unsigned __int8 **)a1, v14);
    case 0xA0uLL:
    case 0xA1uLL:
    case 0xA2uLL:
    case 0xA3uLL:
    case 0xA4uLL:
    case 0xA5uLL:
    case 0xA6uLL:
    case 0xA7uLL:
    case 0xA8uLL:
    case 0xA9uLL:
    case 0xAAuLL:
    case 0xABuLL:
    case 0xACuLL:
    case 0xADuLL:
    case 0xAEuLL:
    case 0xAFuLL:
    case 0xB0uLL:
    case 0xB1uLL:
    case 0xB2uLL:
    case 0xB3uLL:
    case 0xB4uLL:
    case 0xB5uLL:
    case 0xB6uLL:
    case 0xB7uLL:
      unint64_t v18 = v4 & 0x1F;
      goto LABEL_24;
    case 0xB8uLL:
      v61.__r_.__value_.__s.__data_[0] = 0;
      uint64_t cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>((unsigned __int8 **)a1, &v61))return cbor_binary; {
      unint64_t v32 = v61.__r_.__value_.__s.__data_[0];
      }
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(a1, v32);
    case 0xB9uLL:
      LOWORD(v61.__r_.__value_.__l.__data_) = 0;
      uint64_t cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>((unsigned __int8 **)a1, &v61))return cbor_binary; {
      unint64_t v32 = LOWORD(v61.__r_.__value_.__l.__data_);
      }
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(a1, v32);
    case 0xBAuLL:
      LODWORD(v61.__r_.__value_.__l.__data_) = 0;
      uint64_t cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>((unsigned __int8 **)a1, &v61))return cbor_binary; {
      unint64_t v32 = LODWORD(v61.__r_.__value_.__l.__data_);
      }
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(a1, v32);
    case 0xBBuLL:
      v61.__r_.__value_.__r.__words[0] = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>((unsigned __int8 **)a1, &v61))return 0; {
      unint64_t v32 = v61.__r_.__value_.__r.__words[0];
      }
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(a1, v32);
    case 0xBFuLL:
      unint64_t v18 = -1;
LABEL_24:
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(a1, v18);
    case 0xF4uLL:
      uint64_t v49 = *(uint64_t **)(a1 + 40);
      v61.__r_.__value_.__s.__data_[0] = 0;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(v49, (unsigned __int8 *)&v61);
      return 1;
    case 0xF5uLL:
      char v35 = *(uint64_t **)(a1 + 40);
      uint64_t cbor_binary = 1;
      v61.__r_.__value_.__s.__data_[0] = 1;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(v35, (unsigned __int8 *)&v61);
      return cbor_binary;
    case 0xF6uLL:
      uint64_t v38 = *(uint64_t **)(a1 + 40);
      v61.__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(v38);
      return 1;
    case 0xF9uLL:
      ++*(void *)(a1 + 24);
      unsigned int v41 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        uint64_t v42 = -1;
      }
      else
      {
        uint64_t v42 = *v41;
        *(void *)a1 = v41 + 1;
      }
      *(void *)(a1 + 16) = v42;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof((void *)a1, "number"))return 0; {
      ++*(void *)(a1 + 24);
      }
      int v43 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        uint64_t v44 = -1;
      }
      else
      {
        uint64_t v44 = *v43;
        *(void *)a1 = v43 + 1;
      }
      *(void *)(a1 + 16) = v44;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof((void *)a1, "number"))return 0; {
      double v45 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(BOOL)::{lambda(void)#1}::operator()(v44 | (v42 << 8));
      }
      int v46 = *(uint64_t **)(a1 + 40);
      if ((v42 & 0x80) != 0) {
        double v47 = -v45;
      }
      else {
        double v47 = v45;
      }
      std::string::basic_string[abi:ne180100]<0>(&v61, &byte_20D5A22AE);
      std::string __p = *(void **)&v47;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(v46, (uint64_t *)&__p);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      return 1;
    case 0xFAuLL:
      LODWORD(v56.__r_.__value_.__l.__data_) = 0;
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>((unsigned __int8 **)a1, &v56);
      if (!cbor_binary) {
        return cbor_binary;
      }
      std::string::size_type v29 = *(uint64_t **)(a1 + 40);
      double v30 = *(float *)&v56.__r_.__value_.__l.__data_;
      std::string::basic_string[abi:ne180100]<0>(&v61, &byte_20D5A22AE);
      std::string __p = *(void **)&v30;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(v29, (uint64_t *)&__p);
      goto LABEL_14;
    case 0xFBuLL:
      v56.__r_.__value_.__r.__words[0] = 0;
      uint64_t cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>((unsigned __int8 **)a1, &v56);
      if (!cbor_binary) {
        return cbor_binary;
      }
      uint64_t v39 = *(uint64_t **)(a1 + 40);
      std::string v40 = (void *)v56.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v61, &byte_20D5A22AE);
      std::string __p = v40;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(v39, (uint64_t *)&__p);
LABEL_14:
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return cbor_binary;
      }
      int v13 = (void *)v61.__r_.__value_.__r.__words[0];
      goto LABEL_40;
    default:
      nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_token_string(&__p, v4);
      uint64_t v50 = *(void *)(a1 + 40);
      unint64_t v51 = *(void *)(a1 + 24);
      std::operator+<char>();
      std::string::basic_string[abi:ne180100]<0>(v52, "value");
      nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(&v56, (uint64_t)&v54, (uint64_t)v52);
      nlohmann::detail::parse_error::create((nlohmann::detail::exception *)&v61, 112, v51, (uint64_t)&v56);
      uint64_t cbor_binary = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(v50, v51, (uint64_t)&__p, (uint64_t)&v61);
      nlohmann::detail::exception::~exception((std::exception *)&v61);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (v53 < 0) {
        operator delete(v52[0]);
      }
      if (v55 < 0) {
        operator delete(v54);
      }
      if ((SHIBYTE(v59) & 0x80000000) == 0) {
        return cbor_binary;
      }
      int v13 = __p;
      goto LABEL_40;
  }
}

void sub_20D3EA9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 65) < 0) {
    operator delete(*(void **)(v32 - 88));
  }
  _Unwind_Resume(exception_object);
}

void *nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_token_string(void *a1, unsigned __int8 a2)
{
  char v5 = 0;
  *(_WORD *)std::exception __str = 0;
  snprintf(__str, 3uLL, "%.2hhX", a2);
  return std::string::basic_string[abi:ne180100]<0>(a1, __str);
}

void nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(std::string *a1, uint64_t a2, uint64_t a3)
{
  int v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v24, "syntax error while parsing ");
  std::string::append(v6, "CBOR");
  if ((v25 & 0x80u) == 0) {
    size_t v7 = v25;
  }
  else {
    size_t v7 = (size_t)v24[1];
  }
  uint64_t v8 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v7 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v8 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if ((v25 & 0x80u) == 0) {
      uint64_t v9 = v24;
    }
    else {
      uint64_t v9 = (void **)v24[0];
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 32;
  int v10 = *(char *)(a3 + 23);
  if (v10 >= 0) {
    unint64_t v11 = (const std::string::value_type *)a3;
  }
  else {
    unint64_t v11 = *(const std::string::value_type **)a3;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a3 + 8);
  }
  int v13 = std::string::append(&v21, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = std::string::append(&v22, ": ");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v17 = *(char *)(a2 + 23);
  if (v17 >= 0) {
    unint64_t v18 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v18 = *(const std::string::value_type **)a2;
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v19 = *(void *)(a2 + 8);
  }
  int v20 = std::string::append(&v23, v18, v19);
  *a1 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
}

void sub_20D3EB0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::create(nlohmann::detail::exception *a1, int a2, unint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v27, "parse_error");
  nlohmann::detail::exception::name(a2, &v29);
  uint64_t v8 = std::string::append(&v29, "parse error");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (a3)
  {
    std::to_string(&v24, a3);
    int v10 = std::string::insert(&v24, 0, " at byte ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    int64_t v26 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  }
  if (v26 >= 0) {
    std::string::size_type v12 = __p;
  }
  else {
    std::string::size_type v12 = (void **)__p[0];
  }
  if (v26 >= 0) {
    std::string::size_type v13 = HIBYTE(v26);
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  long long v14 = std::string::append(&v30, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  long long v16 = std::string::append(&v31, ": ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = *(char *)(a4 + 23);
  if (v18 >= 0) {
    std::string::size_type v19 = (const std::string::value_type *)a4;
  }
  else {
    std::string::size_type v19 = *(const std::string::value_type **)a4;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a4 + 8);
  }
  std::string v21 = std::string::append(&v32, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  int64_t v34 = v21->__r_.__value_.__r.__words[2];
  long long v33 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  if (a3 && SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v34 >= 0) {
    std::string v23 = (const char *)&v33;
  }
  else {
    std::string v23 = (const char *)v33;
  }
  nlohmann::detail::exception::exception(a1, a2, v23);
  *(void *)a1 = off_26C2112C0;
  *((void *)a1 + 4) = a3;
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
}

void sub_20D3EB348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(void *a1, char *a2)
{
  if (a1[2] != -1) {
    return 1;
  }
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[3];
  std::string::basic_string[abi:ne180100]<0>(v15, "<end of file>");
  unint64_t v8 = a1[3];
  std::string::basic_string[abi:ne180100]<0>(v11, "unexpected end of input");
  std::string::basic_string[abi:ne180100]<0>(v9, a2);
  nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(&__p, (uint64_t)v11, (uint64_t)v9);
  nlohmann::detail::parse_error::create((nlohmann::detail::exception *)v14, 110, v8, (uint64_t)&__p);
  uint64_t v2 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(v6, v7, (uint64_t)v15, (uint64_t)v14);
  nlohmann::detail::exception::~exception(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return v2;
}

void sub_20D3EB514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28)
{
  nlohmann::detail::exception::~exception(&a28);
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>(unsigned __int8 **a1, unsigned char *a2)
{
  ++a1[3];
  std::string::size_type v4 = *a1;
  if (*a1 == a1[1])
  {
    uint64_t v5 = -1;
  }
  else
  {
    uint64_t v5 = *v4;
    *a1 = v4 + 1;
  }
  a1[2] = (unsigned __int8 *)v5;
  uint64_t result = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "number");
  if (result) {
    *a2 = a1[2];
  }
  return result;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>(unsigned __int8 **a1, _DWORD *a2)
{
  BOOL v4 = 0;
  unint64_t v5 = 0;
  for (uint64_t i = 3; ; --i)
  {
    ++a1[3];
    uint64_t v7 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v8 = -1;
    }
    else
    {
      uint64_t v8 = *v7;
      *a1 = v7 + 1;
    }
    a1[2] = (unsigned __int8 *)v8;
    if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "number"))break; {
    if (*((unsigned char *)a1 + 32))
    }
      unint64_t v9 = i;
    else {
      unint64_t v9 = v5;
    }
    *((unsigned char *)&v11 + v9) = a1[2];
    BOOL v4 = v5 > 2;
    if (++v5 == 4)
    {
      *a2 = v11;
      return 1;
    }
  }
  return v4;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>(unsigned __int8 **a1, void *a2)
{
  BOOL v4 = 0;
  unint64_t v5 = 0;
  v11[1] = *MEMORY[0x263EF8340];
  for (uint64_t i = 7; ; --i)
  {
    ++a1[3];
    uint64_t v7 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v8 = -1;
    }
    else
    {
      uint64_t v8 = *v7;
      *a1 = v7 + 1;
    }
    a1[2] = (unsigned __int8 *)v8;
    if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "number"))break; {
    if (*((unsigned char *)a1 + 32))
    }
      unint64_t v9 = i;
    else {
      unint64_t v9 = v5;
    }
    *((unsigned char *)v11 + v9) = a1[2];
    BOOL v4 = v5 > 6;
    if (++v5 == 8)
    {
      *a2 = v11[0];
      return 1;
    }
  }
  return v4;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned char>(unsigned __int8 **a1, int a2, std::string *a3)
{
  if (a2)
  {
    int v5 = a2 + 1;
    int v6 = 1;
    do
    {
      ++a1[3];
      uint64_t v7 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v8 = -1;
      }
      else
      {
        uint64_t v8 = *v7;
        *a1 = v7 + 1;
      }
      a1[2] = (unsigned __int8 *)v8;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "string") & 1) == 0)int v6 = 0; {
      std::string::push_back(a3, *((unsigned char *)a1 + 16));
      }
      --v5;
    }
    while (v5 > 1);
  }
  else
  {
    int v6 = 1;
  }
  return v6 != 0;
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>(unsigned __int8 **a1, _WORD *a2)
{
  uint64_t v4 = 0;
  char v5 = 1;
  while (1)
  {
    char v6 = v5;
    ++a1[3];
    uint64_t v7 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v8 = -1;
    }
    else
    {
      uint64_t v8 = *v7;
      *a1 = v7 + 1;
    }
    a1[2] = (unsigned __int8 *)v8;
    uint64_t result = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "number");
    if (!result) {
      break;
    }
    char v5 = 0;
    *((unsigned char *)&v10 + (v4 ^ *((unsigned __int8 *)a1 + 32))) = a1[2];
    uint64_t v4 = 1;
    if ((v6 & 1) == 0)
    {
      *a2 = v10;
      return result;
    }
  }
  return result;
}

void nlohmann::detail::external_constructor<(nlohmann::detail::value_t)8>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 8;
  std::string __p = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  __int16 v7 = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>((uint64_t)&__p);
  if (__p)
  {
    char v5 = __p;
    operator delete(__p);
  }
}

void sub_20D3EB9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned char>(unsigned __int8 **a1, int a2, unint64_t *a3)
{
  unint64_t v9 = a3;
  if (a2)
  {
    int v4 = a2 + 1;
    int v5 = 1;
    do
    {
      ++a1[3];
      uint64_t v6 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v7 = -1;
      }
      else
      {
        uint64_t v7 = *v6;
        *a1 = v6 + 1;
      }
      a1[2] = (unsigned __int8 *)v7;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "binary") & 1) == 0)int v5 = 0; {
      std::back_insert_iterator<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>>::operator=[abi:ne180100](&v9, *((unsigned char *)a1 + 16));
      }
      --v4;
    }
    while (v4 > 1);
  }
  else
  {
    int v5 = 1;
  }
  return v5 != 0;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned int>(unsigned __int8 **a1, int a2, unint64_t *a3)
{
  unint64_t v9 = a3;
  if (a2)
  {
    int v3 = a2;
    int v5 = 1;
    do
    {
      ++a1[3];
      uint64_t v6 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v7 = -1;
      }
      else
      {
        uint64_t v7 = *v6;
        *a1 = v6 + 1;
      }
      a1[2] = (unsigned __int8 *)v7;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "binary") & 1) == 0)int v5 = 0; {
      std::back_insert_iterator<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>>::operator=[abi:ne180100](&v9, *((unsigned char *)a1 + 16));
      }
      --v3;
    }
    while (v3);
  }
  else
  {
    int v5 = 1;
  }
  return v5 != 0;
}

unint64_t **std::back_insert_iterator<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>>::operator=[abi:ne180100](unint64_t **a1, char a2)
{
  int v4 = *a1;
  uint64_t v6 = (unsigned char *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    unint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = (char *)(v13 + v12);
    v9[v13] = a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      long long v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      uint64_t v6 = (unsigned char *)*v4;
    }
    *int v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned int>(unsigned __int8 **a1, int a2, std::string *a3)
{
  if (a2)
  {
    int v4 = a2;
    int v6 = 1;
    do
    {
      ++a1[3];
      uint64_t v7 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v8 = -1;
      }
      else
      {
        uint64_t v8 = *v7;
        *a1 = v7 + 1;
      }
      a1[2] = (unsigned __int8 *)v8;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "string") & 1) == 0)int v6 = 0; {
      std::string::push_back(a3, *((unsigned char *)a1 + 16));
      }
      --v4;
    }
    while (v4);
  }
  else
  {
    int v6 = 1;
  }
  return v6 != 0;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_binary(unsigned __int8 **a1, uint64_t a2)
{
  if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "binary"))return 0; {
  int v4 = a1[2];
  }
  if ((unint64_t)(v4 - 64) >= 0x18)
  {
    switch((unint64_t)v4)
    {
      case 'X':
        LOBYTE(__p) = 0;
        uint64_t v6 = 0;
        if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>(a1, &__p))
        {
          BOOL v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned char>(a1, __p, (unint64_t *)a2);
          goto LABEL_57;
        }
        break;
      case 'Y':
        LOWORD(__p) = 0;
        uint64_t v6 = 0;
        if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>(a1, &__p))
        {
          BOOL v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned char>(a1, (unsigned __int16)__p, (unint64_t *)a2);
          goto LABEL_57;
        }
        break;
      case 'Z':
        LODWORD(__p) = 0;
        uint64_t v6 = 0;
        if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>(a1, &__p))
        {
          BOOL v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned int>(a1, (int)__p, (unint64_t *)a2);
          goto LABEL_57;
        }
        break;
      case '[':
        std::string __p = 0;
        if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>(a1, &__p))return 0; {
        BOOL v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned long long>(a1, (uint64_t)__p, (unint64_t *)a2);
        }
LABEL_57:
        uint64_t v6 = v7;
        break;
      case '_':
        while (1)
        {
          ++a1[3];
          uint64_t v8 = *a1;
          if (*a1 == a1[1])
          {
            a1[2] = (unsigned __int8 *)-1;
          }
          else
          {
            unsigned int v9 = *v8;
            *a1 = v8 + 1;
            a1[2] = (unsigned __int8 *)v9;
            if (v9 == 255) {
              return 1;
            }
          }
          std::string __p = 0;
          double v45 = 0;
          __int16 v47 = 0;
          uint64_t v46 = 0;
          char cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_binary(a1, &__p);
          if (cbor_binary)
          {
            unint64_t v11 = (char *)__p;
            uint64_t v12 = v45 - (unsigned char *)__p;
            if (v45 - (unsigned char *)__p >= 1)
            {
              long long v14 = *(char **)(a2 + 8);
              uint64_t v13 = *(void *)(a2 + 16);
              if (v13 - (uint64_t)v14 >= v12)
              {
                if (v12 <= 0)
                {
                  std::string v21 = v45;
                  long long v22 = *(unsigned char **)(a2 + 8);
                  std::string v23 = &v22[-v12];
                  std::string v24 = v22;
                  if (&v22[-v12] < v14)
                  {
                    uint64_t v25 = v45 - (unsigned char *)__p - (v12 & ~(v12 >> 63));
                    std::string v24 = *(unsigned char **)(a2 + 8);
                    do
                    {
                      char v26 = *v23++;
                      *v24++ = v26;
                      --v25;
                    }
                    while (v25);
                  }
                  *(void *)(a2 + 8) = v24;
                  if (v22 != &v14[v12]) {
                    memmove(&v14[v12], v14, v22 - &v14[v12]);
                  }
                  if (v21 != v11) {
                    memmove(v14, v11, v21 - v11);
                  }
                }
                else
                {
                  int64_t v20 = v45 - (unsigned char *)__p;
                  if (v45 != __p) {
                    memmove(*(void **)(a2 + 8), __p, v45 - (unsigned char *)__p);
                  }
                  *(void *)(a2 + 8) = &v14[v20];
                }
              }
              else
              {
                long long v15 = &v14[-*(void *)a2];
                unint64_t v16 = (unint64_t)&v15[v12];
                if ((uint64_t)&v15[v12] < 0) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v17 = v13 - *(void *)a2;
                if (2 * v17 > v16) {
                  unint64_t v16 = 2 * v17;
                }
                if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v18 = v16;
                }
                if (v18) {
                  std::string::size_type v19 = operator new(v18);
                }
                else {
                  std::string::size_type v19 = 0;
                }
                std::string::size_type v27 = &v15[(void)v19];
                uint64_t v28 = &v15[(void)v19 + v12];
                std::string v29 = v27;
                do
                {
                  char v30 = *v11++;
                  *v29++ = v30;
                  --v12;
                }
                while (v12);
                unint64_t v31 = *(void *)a2;
                if (*(char **)a2 == v14)
                {
                  int64_t v34 = v14;
                }
                else
                {
                  std::string v32 = v14;
                  do
                  {
                    char v33 = *--v32;
                    *--std::string::size_type v27 = v33;
                  }
                  while (v32 != (char *)v31);
                  int64_t v34 = *(char **)(a2 + 8);
                }
                uint64_t v35 = v34 - v14;
                if (v34 != v14) {
                  memmove(v28, v14, v34 - v14);
                }
                std::string::size_type v36 = *(void **)a2;
                *(void *)a2 = v27;
                *(void *)(a2 + 8) = &v28[v35];
                *(void *)(a2 + 16) = (char *)v19 + v18;
                if (v36) {
                  operator delete(v36);
                }
              }
            }
          }
          if (__p)
          {
            double v45 = __p;
            operator delete(__p);
          }
          if ((cbor_binary & 1) == 0) {
            return 0;
          }
        }
      default:
        BYTE2(__p) = 0;
        LOWORD(__p) = 0;
        snprintf((char *)&__p, 3uLL, "%.2hhX", v4);
        std::string::basic_string[abi:ne180100]<0>(v48, (char *)&__p);
        uint64_t v37 = (uint64_t)a1[5];
        unint64_t v38 = (unint64_t)a1[3];
        std::operator+<char>();
        std::string::basic_string[abi:ne180100]<0>(v39, "binary");
        nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(&v43, (uint64_t)&v41, (uint64_t)v39);
        nlohmann::detail::parse_error::create((nlohmann::detail::exception *)&__p, 113, v38, (uint64_t)&v43);
        uint64_t v6 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(v37, v38, (uint64_t)v48, (uint64_t)&__p);
        std::string __p = off_26C211368;
        MEMORY[0x210558DD0](&v46);
        std::exception::~exception((std::exception *)&__p);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (v40 < 0) {
          operator delete(v39[0]);
        }
        if (v42 < 0) {
          operator delete(v41);
        }
        if (v49 < 0) {
          operator delete(v48[0]);
        }
        break;
    }
    return v6;
  }
  else
  {
    return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned int>(a1, v4 & 0x1F, (unint64_t *)a2);
  }
}

void sub_20D3EC188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29)
{
  nlohmann::detail::exception::~exception((std::exception *)&a28);
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v29 - 81) < 0) {
    operator delete(*(void **)(v29 - 104));
  }
  _Unwind_Resume(a1);
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_string(unsigned __int8 **a1, std::string *a2)
{
  if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "string"))return 0; {
  int v4 = a1[2];
  }
  if ((unint64_t)(v4 - 96) >= 0x18)
  {
    switch((unint64_t)v4)
    {
      case 'x':
        LOBYTE(__p) = 0;
        uint64_t v6 = 0;
        if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>(a1, &__p))
        {
          BOOL v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned char>(a1, __p, a2);
          goto LABEL_15;
        }
        break;
      case 'y':
        LOWORD(__p) = 0;
        uint64_t v6 = 0;
        if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>(a1, &__p))
        {
          BOOL v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned char>(a1, (unsigned __int16)__p, a2);
          goto LABEL_15;
        }
        break;
      case 'z':
        LODWORD(__p) = 0;
        uint64_t v6 = 0;
        if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>(a1, &__p))
        {
          BOOL v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned int>(a1, (int)__p, a2);
          goto LABEL_15;
        }
        break;
      case '{':
        std::string __p = 0;
        if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>(a1, &__p))return 0; {
        BOOL v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned long long>(a1, (uint64_t)__p, a2);
        }
LABEL_15:
        uint64_t v6 = v7;
        break;
      case '\x7F':
        while (1)
        {
          ++a1[3];
          uint64_t v8 = *a1;
          if (*a1 == a1[1])
          {
            a1[2] = (unsigned __int8 *)-1;
          }
          else
          {
            unsigned int v9 = *v8;
            *a1 = v8 + 1;
            a1[2] = (unsigned __int8 *)v9;
            if (v9 == 255) {
              return 1;
            }
          }
          std::string __p = 0;
          std::string::size_type v21 = 0;
          uint64_t v22 = 0;
          char cbor_string = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_string(a1, &__p);
          if (cbor_string)
          {
            if (v22 >= 0) {
              p_p = (const std::string::value_type *)&__p;
            }
            else {
              p_p = (const std::string::value_type *)__p;
            }
            if (v22 >= 0) {
              std::string::size_type v12 = HIBYTE(v22);
            }
            else {
              std::string::size_type v12 = v21;
            }
            std::string::append(a2, p_p, v12);
          }
          if (SHIBYTE(v22) < 0)
          {
            operator delete(__p);
            if ((cbor_string & 1) == 0) {
              return 0;
            }
          }
          else if ((cbor_string & 1) == 0)
          {
            return 0;
          }
        }
      default:
        BYTE2(__p) = 0;
        LOWORD(__p) = 0;
        snprintf((char *)&__p, 3uLL, "%.2hhX", v4);
        std::string::basic_string[abi:ne180100]<0>(v23, (char *)&__p);
        uint64_t v13 = (uint64_t)a1[5];
        unint64_t v14 = (unint64_t)a1[3];
        std::operator+<char>();
        std::string::basic_string[abi:ne180100]<0>(v15, "string");
        nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(&v19, (uint64_t)&v17, (uint64_t)v15);
        nlohmann::detail::parse_error::create((nlohmann::detail::exception *)&__p, 113, v14, (uint64_t)&v19);
        uint64_t v6 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(v13, v14, (uint64_t)v23, (uint64_t)&__p);
        std::string __p = off_26C211368;
        MEMORY[0x210558DD0](&v22);
        std::exception::~exception((std::exception *)&__p);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        if (v18 < 0) {
          operator delete(v17);
        }
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        break;
    }
    return v6;
  }
  else
  {
    return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned int>(a1, v4 & 0x1F, a2);
  }
}

void sub_20D3EC558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  nlohmann::detail::exception::~exception((std::exception *)&a28);
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array(unsigned __int8 **a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t result = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array((uint64_t *)a1[5], a2);
  if (result)
  {
    if (v2 == -1)
    {
      while (1)
      {
        ++a1[3];
        unint64_t v5 = *a1;
        if (*a1 == a1[1])
        {
          a1[2] = (unsigned __int8 *)v2;
        }
        else
        {
          unsigned int v6 = *v5;
          *a1 = v5 + 1;
          a1[2] = (unsigned __int8 *)v6;
          if (v6 == 255) {
            goto LABEL_12;
          }
        }
        if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(a1, 0) & 1) == 0)return 0; {
      }
        }
    }
    if (v2)
    {
      while ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(a1, 1) & 1) != 0)
      {
        if (!--v2) {
          goto LABEL_12;
        }
      }
      return 0;
    }
    else
    {
LABEL_12:
      *((void *)a1[5] + 2) -= 8;
      return 1;
    }
  }
  return result;
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(*(uint64_t **)(a1 + 40), a2))return 0; {
  memset(&__p, 0, sizeof(__p));
  }
  if (v2 == -1)
  {
    while (1)
    {
      ++*(void *)(a1 + 24);
      unsigned int v6 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        *(void *)(a1 + 16) = -1;
      }
      else
      {
        uint64_t v7 = *v6;
        *(void *)a1 = v6 + 1;
        *(void *)(a1 + 16) = v7;
        if (v7 == 255) {
          goto LABEL_4;
        }
      }
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_string((unsigned __int8 **)a1, &__p))break; {
      uint64_t v8 = *(void *)(a1 + 40);
      }
      unsigned int v9 = *(uint64_t ***)(*(void *)(*(void *)(v8 + 16) - 8) + 8);
      p_p = &__p;
      *(void *)(v8 + 32) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p)+ 7;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(a1, 1))break; {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      }
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      }
    }
  }
  else
  {
    if (!v2)
    {
LABEL_4:
      *(void *)(*(void *)(a1 + 40) + 16) -= 8;
      uint64_t v4 = 1;
      goto LABEL_5;
    }
    while (1)
    {
      ++*(void *)(a1 + 24);
      unint64_t v10 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        uint64_t v11 = -1;
      }
      else
      {
        uint64_t v11 = *v10;
        *(void *)a1 = v10 + 1;
      }
      *(void *)(a1 + 16) = v11;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_string((unsigned __int8 **)a1, &__p))break; {
      uint64_t v12 = *(void *)(a1 + 40);
      }
      uint64_t v13 = *(uint64_t ***)(*(void *)(*(void *)(v12 + 16) - 8) + 8);
      p_p = &__p;
      *(void *)(v12 + 32) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p)+ 7;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(a1, 1))break; {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      }
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      }
      if (!--v2) {
        goto LABEL_4;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_5:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_20D3EC8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(BOOL)::{lambda(void)#1}::operator()(unsigned int a1)
{
  int v1 = (a1 >> 10) & 0x1F;
  unsigned int v2 = a1 & 0x3FF;
  if (v1 == 31)
  {
    double result = NAN;
    if ((a1 & 0x3FF) == 0) {
      return INFINITY;
    }
  }
  else if (v1)
  {
    return ldexp((double)(v2 | 0x400), v1 - 25);
  }
  else
  {
    return ldexp((double)v2, -24);
  }
  return result;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned long long>(unsigned __int8 **a1, uint64_t a2, std::string *a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    int v6 = 1;
    do
    {
      ++a1[3];
      uint64_t v7 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v8 = -1;
      }
      else
      {
        uint64_t v8 = *v7;
        *a1 = v7 + 1;
      }
      a1[2] = (unsigned __int8 *)v8;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "string") & 1) == 0)int v6 = 0; {
      std::string::push_back(a3, *((unsigned char *)a1 + 16));
      }
      --v4;
    }
    while (v4);
  }
  else
  {
    int v6 = 1;
  }
  return v6 != 0;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned long long>(unsigned __int8 **a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v9 = a3;
  if (a2)
  {
    uint64_t v3 = a2;
    int v5 = 1;
    do
    {
      ++a1[3];
      int v6 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v7 = -1;
      }
      else
      {
        uint64_t v7 = *v6;
        *a1 = v6 + 1;
      }
      a1[2] = (unsigned __int8 *)v7;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "binary") & 1) == 0)int v5 = 0; {
      std::back_insert_iterator<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>>::operator=[abi:ne180100](&v9, *((unsigned char *)a1 + 16));
      }
      --v3;
    }
    while (v3);
  }
  else
  {
    int v5 = 1;
  }
  return v5 != 0;
}

void name_from_id(std::string *a1, int a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::push_back(a1, SHIBYTE(a2));
  std::string::push_back(a1, (a2 << 8) >> 24);
  std::string::push_back(a1, SBYTE1(a2));
  std::string::push_back(a1, a2);
}

void sub_20D3ECAD8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void symbol_name_from_id(std::string *a1, unsigned int a2)
{
  v222[3] = *MEMORY[0x263EF8340];
  {
    uint64_t v11 = a1;
    unsigned int v8 = a2;
    a2 = v8;
    int v10 = v9;
    a1 = v11;
    if (v10)
    {
      unsigned int v13 = 1768842360;
      std::string::basic_string[abi:ne180100]<0>(v14, "kFeatureIndex");
      int v15 = 1937011316;
      std::string::basic_string[abi:ne180100]<0>(v16, "kStringTable");
      int v17 = 1633968500;
      std::string::basic_string[abi:ne180100]<0>(v18, "kAudioData");
      int v19 = 1886220907;
      std::string::basic_string[abi:ne180100]<0>(v20, "kPitchmarkData");
      int v21 = 1714450030;
      std::string::basic_string[abi:ne180100]<0>(v22, "kF0NeuralNet");
      int v23 = 1685417582;
      std::string::basic_string[abi:ne180100]<0>(v24, "kDurNeuralNet");
      int v25 = 1885889131;
      std::string::basic_string[abi:ne180100]<0>(v26, "kPhoneBook");
      int v27 = 1885893488;
      std::string::basic_string[abi:ne180100]<0>(v28, "kPhoneSpec");
      int v29 = 1852797549;
      std::string::basic_string[abi:ne180100]<0>(v30, "kNorms");
      int v31 = 1835298404;
      std::string::basic_string[abi:ne180100]<0>(v32, "kMDNDirectory");
      int v33 = 1835298423;
      std::string::basic_string[abi:ne180100]<0>(v34, "kMDNWeights");
      int v35 = 1835298414;
      std::string::basic_string[abi:ne180100]<0>(v36, "kMDNInputNormalizer");
      int v37 = 1835298415;
      std::string::basic_string[abi:ne180100]<0>(v38, "kMDNOutputDenormalizer");
      int v39 = 1835298409;
      std::string::basic_string[abi:ne180100]<0>(v40, "kMDNInputSelectionDims");
      int v41 = 1835298406;
      std::string::basic_string[abi:ne180100]<0>(v42, "kMDNSingleFileFormat");
      int v43 = 1919839846;
      std::string::basic_string[abi:ne180100]<0>(v44, "kRNNSingleFileFormat");
      int v45 = 1952543344;
      std::string::basic_string[abi:ne180100]<0>(v46, "kTAPAndRAPFile");
      int v47 = 1886547316;
      std::string::basic_string[abi:ne180100]<0>(v48, "kPromptData");
      int v49 = 1735422573;
      std::string::basic_string[abi:ne180100]<0>(v50, "kGeneratedPromptData");
      int v51 = 2003135842;
      std::string::basic_string[abi:ne180100]<0>(v52, "kNormWordEmbedding");
      int v53 = 1852990316;
      std::string::basic_string[abi:ne180100]<0>(v54, "kNormClassifier");
      int v55 = 1852991854;
      std::string::basic_string[abi:ne180100]<0>(v56, "kNormInput");
      int v57 = 1852992627;
      std::string::basic_string[abi:ne180100]<0>(v58, "kNormLabelSymbols");
      int v59 = 1852994668;
      std::string::basic_string[abi:ne180100]<0>(v60, "kNormTokenLabels");
      int v61 = 1852977512;
      std::string::basic_string[abi:ne180100]<0>(v62, "kNormOneHotFeat");
      int v63 = 1852994156;
      std::string::basic_string[abi:ne180100]<0>(v64, "kNormRules");
      int v65 = 1852990320;
      std::string::basic_string[abi:ne180100]<0>(v66, "kNormComplexClasses");
      int v67 = 1870033522;
      std::string::basic_string[abi:ne180100]<0>(v68, "kOverrideRules");
      int v69 = 1886352237;
      std::string::basic_string[abi:ne180100]<0>(v70, "kPartOfSpeechModel");
      int v71 = 1886545272;
      std::string::basic_string[abi:ne180100]<0>(v72, "kPronExceptions");
      int v73 = 1885892461;
      std::string::basic_string[abi:ne180100]<0>(v74, "kPhonemeMap");
      int v75 = 1886547821;
      std::string::basic_string[abi:ne180100]<0>(v76, "kPronModel");
      int v77 = 1885893228;
      std::string::basic_string[abi:ne180100]<0>(v78, "kPhonemeRules");
      int v79 = 1885893235;
      std::string::basic_string[abi:ne180100]<0>(v80, "kPhrasingModel");
      int v81 = 1885893234;
      std::string::basic_string[abi:ne180100]<0>(v82, "kPhrasingRules");
      int v83 = 1651664996;
      std::string::basic_string[abi:ne180100]<0>(v84, "kBrokerHeader");
      int v85 = 1650550884;
      std::string::basic_string[abi:ne180100]<0>(v86, "kBrokerHeaderAsset");
      int v87 = 1885564279;
      std::string::basic_string[abi:ne180100]<0>(v88, "kPCMWave");
      int v89 = 1935831659;
      std::string::basic_string[abi:ne180100]<0>(v90, "kSentenceBreakExceptions");
      int v91 = 1717790311;
      std::string::basic_string[abi:ne180100]<0>(v92, "kFrontendConfig");
      int v93 = 1734567527;
      std::string::basic_string[abi:ne180100]<0>(v94, "kGryphonConfig");
      int v95 = 1734700644;
      std::string::basic_string[abi:ne180100]<0>(v96, "kGenderRules");
      int v97 = 1735292269;
      std::string::basic_string[abi:ne180100]<0>(v98, "kGrammaticalNumberRules");
      int v99 = 1835361122;
      std::string::basic_string[abi:ne180100]<0>(v100, "kMeCabResource");
      int v101 = 1835233389;
      std::string::basic_string[abi:ne180100]<0>(v102, "kMeCabPOSMapping");
      int v103 = 1718903655;
      std::string::basic_string[abi:ne180100]<0>(v104, "kFilterTextConfig");
      int v105 = 1953657708;
      std::string::basic_string[abi:ne180100]<0>(v106, "kTransliterateConfig");
      int v107 = 1920234092;
      std::string::basic_string[abi:ne180100]<0>(v108, "kReplaceRules");
      int v109 = 1920231009;
      std::string::basic_string[abi:ne180100]<0>(v110, "kReplaceFSTArchive");
      int v111 = 1731358822;
      std::string::basic_string[abi:ne180100]<0>(v112, "kG2PFSTArchive");
      int v113 = 1718776943;
      std::string::basic_string[abi:ne180100]<0>(v114, "kFRTokenArchive");
      int v115 = 1718776677;
      std::string::basic_string[abi:ne180100]<0>(v116, "kFRSentArchive");
      int v117 = 1718775913;
      std::string::basic_string[abi:ne180100]<0>(v118, "kFRPitchArchive");
      int v119 = 1852139109;
      std::string::basic_string[abi:ne180100]<0>(v120, "kNeuralFEConfig");
      int v121 = 1852138085;
      std::string::basic_string[abi:ne180100]<0>(v122, "kNeuralBEConfig");
      int v123 = 1953395557;
      std::string::basic_string[abi:ne180100]<0>(v124, "kTNSEQ2SEQ");
      int v125 = 1953395570;
      std::string::basic_string[abi:ne180100]<0>(v126, "kTNSEQ2SEQRULE");
      int v127 = 1731358835;
      std::string::basic_string[abi:ne180100]<0>(v128, "kG2PSEQ2SEQ");
      int v129 = 1731358831;
      std::string::basic_string[abi:ne180100]<0>(v130, "kG2PSEQ2SEQOLD");
      int v131 = 1751477859;
      std::string::basic_string[abi:ne180100]<0>(v132, "kHydraG2PEncoder");
      int v133 = 1751410019;
      std::string::basic_string[abi:ne180100]<0>(v134, "kHydraG2PDecoder");
      int v135 = 1953395813;
      std::string::basic_string[abi:ne180100]<0>(v136, "kTTSNLPTokEnc");
      int v137 = 1953395812;
      std::string::basic_string[abi:ne180100]<0>(v138, "kTTSNLPTokDec");
      int v139 = 1953390956;
      std::string::basic_string[abi:ne180100]<0>(v140, "kTTSNLPAligner");
      int v141 = 1731358834;
      std::string::basic_string[abi:ne180100]<0>(v142, "kG2PSEQ2SEQRULE");
      int v143 = 1887007858;
      std::string::basic_string[abi:ne180100]<0>(v144, "kG2PPYTRULE");
      int v145 = 2020827506;
      std::string::basic_string[abi:ne180100]<0>(v146, "kG2PXSAMPARULE");
      int v147 = 1818783858;
      std::string::basic_string[abi:ne180100]<0>(v148, "kG2PLHPRULE");
      int v149 = 1768846450;
      std::string::basic_string[abi:ne180100]<0>(v150, "kG2PINTERNALRULE");
      int v151 = 1886352244;
      std::string::basic_string[abi:ne180100]<0>(v152, "kG2PPOSTRULE");
      int v153 = 1852731506;
      std::string::basic_string[abi:ne180100]<0>(v154, "kNNPreRule");
      int v155 = 1919252338;
      std::string::basic_string[abi:ne180100]<0>(v156, "kRewriteArchive");
      int v157 = 1886417510;
      std::string::basic_string[abi:ne180100]<0>(v158, "kPreprocessArchive");
      int v159 = 1752523875;
      std::string::basic_string[abi:ne180100]<0>(v160, "kHydraUserDctList");
      int v161 = 1752523890;
      std::string::basic_string[abi:ne180100]<0>(v162, "kHydraUserDctRule");
      int v163 = 1634100856;
      std::string::basic_string[abi:ne180100]<0>(v164, "kAffixRules");
      int v165 = 1852138092;
      std::string::basic_string[abi:ne180100]<0>(v166, "kNeuralFallbackDeprecated");
      int v167 = 1852139116;
      std::string::basic_string[abi:ne180100]<0>(v168, "kNeuralFallbacklist");
      int v169 = 1634624611;
      std::string::basic_string[abi:ne180100]<0>(v170, "kAnetecDecoder");
      int v171 = 1634628452;
      std::string::basic_string[abi:ne180100]<0>(v172, "kAnetecStreamingDecoder");
      int v173 = 1885435758;
      std::string::basic_string[abi:ne180100]<0>(v174, "kParallelWaveNet");
      int v175 = 1885430125;
      std::string::basic_string[abi:ne180100]<0>(v176, "kParallelAM");
      int v177 = 1952539503;
      std::string::basic_string[abi:ne180100]<0>(v178, "kTacotron");
      int v179 = 2003988078;
      std::string::basic_string[abi:ne180100]<0>(v180, "kWaveRNN");
      int v181 = 1853318509;
      std::string::basic_string[abi:ne180100]<0>(v182, "kNeuralWordEmbedding");
      int v183 = 1885890164;
      std::string::basic_string[abi:ne180100]<0>(v184, "kPhonemeFeatures");
      int v185 = 1717662576;
      std::string::basic_string[abi:ne180100]<0>(v186, "kFastSpeech");
      int v187 = 1852139122;
      std::string::basic_string[abi:ne180100]<0>(v188, "kNeuralFrontend");
      int v189 = 1684630631;
      std::string::basic_string[abi:ne180100]<0>(v190, "kDialog");
      int v191 = 1954050162;
      std::string::basic_string[abi:ne180100]<0>(v192, "kTextProcessing");
      int v193 = 1936946287;
      std::string::basic_string[abi:ne180100]<0>(v194, "kSoundStorm");
      int v195 = 1936613746;
      std::string::basic_string[abi:ne180100]<0>(v196, "kS1NAR");
      int v197 = 1717662579;
      std::string::basic_string[abi:ne180100]<0>(v198, "kFS2S1");
      int v199 = 1920427373;
      std::string::basic_string[abi:ne180100]<0>(v200, "kRobertaWordEmbedding");
      int v201 = 1920431214;
      std::string::basic_string[abi:ne180100]<0>(v202, "kRobertaWordEmbTokenizer");
      int v203 = 1987015801;
      std::string::basic_string[abi:ne180100]<0>(v204, "kVoiceType");
      int v205 = 1701737593;
      std::string::basic_string[abi:ne180100]<0>(v206, "kEngineType");
      int v207 = 1818324583;
      std::string::basic_string[abi:ne180100]<0>(v208, "kLanguage");
      int v209 = 1987538035;
      std::string::basic_string[abi:ne180100]<0>(v210, "kVowels");
      int v211 = 1684629094;
      std::string::basic_string[abi:ne180100]<0>(v212, "kDifferentiatorPhones");
      int v213 = 1937011315;
      std::string::basic_string[abi:ne180100]<0>(v214, "kStressablePhones");
      int v215 = 1684368485;
      std::string::basic_string[abi:ne180100]<0>(v216, "kUnwantedPhones");
      int v217 = 1702389364;
      std::string::basic_string[abi:ne180100]<0>(v218, "kExcludedFeatures");
      int v219 = 1885893222;
      std::string::basic_string[abi:ne180100]<0>(v220, "kPhrasingFeat");
      int v221 = 1936288870;
      std::string::basic_string[abi:ne180100]<0>(v222, "kSilenceDurationFactor");
      std::map<unsigned int,std::string>::map[abi:ne180100](&v12, &v13, 105);
      NeverDestructed<std::map<unsigned int,std::string>>::NeverDestructed<>();
    }
  }
  uint64_t v2 = *(void *)(symbol_name_from_id::symbol_map + 8);
  if (!v2) {
    goto LABEL_13;
  }
  uint64_t v3 = symbol_name_from_id::symbol_map + 8;
  do
  {
    unsigned int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      int v6 = (uint64_t *)v2;
    }
    else {
      int v6 = (uint64_t *)(v2 + 8);
    }
    if (v5) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 != symbol_name_from_id::symbol_map + 8 && *(_DWORD *)(v3 + 32) <= a2)
  {
    if (*(char *)(v3 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(v3 + 40), *(void *)(v3 + 48));
    }
    else
    {
      long long v7 = *(_OWORD *)(v3 + 40);
      a1->__r_.__value_.__r.__words[2] = *(void *)(v3 + 56);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
  }
}

void sub_20D3ED9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, char a13)
{
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(a11);
  uint64_t v14 = 3360;
  while (1)
  {
    if (*(&a13 + v14 - 1) < 0) {
      operator delete(*(void **)(&a13 + v14 - 24));
    }
    v14 -= 32;
    if (!v14)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t *std::map<unsigned int,std::string>::map[abi:ne180100](uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  unsigned int v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::string> const&>(a1, v4, *a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_20D3EDC5C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void NeverDestructed<std::map<unsigned int,std::string>>::NeverDestructed<>()
{
}

void sub_20D3EDD30(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*(char **)(v1 + 8));
  MEMORY[0x2105595E0](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::string> const&>(uint64_t *result, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  BOOL v5 = result;
  uint64_t v6 = result + 1;
  if (result + 1 == a2 || (unsigned int v7 = *((_DWORD *)a2 + 8), v7 > a3))
  {
    uint64_t v8 = *a2;
    if ((uint64_t *)*result == a2)
    {
      int v10 = a2;
LABEL_16:
      if (v8) {
        unsigned int v13 = v10;
      }
      else {
        unsigned int v13 = a2;
      }
      if (v8) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = a2;
      }
      goto LABEL_22;
    }
    if (v8)
    {
      int v9 = (uint64_t *)*a2;
      do
      {
        int v10 = v9;
        int v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v15 = a2;
      do
      {
        int v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        int v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 8) < a3) {
      goto LABEL_16;
    }
    uint64_t v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v13 = (uint64_t *)v17;
          unsigned int v18 = *(_DWORD *)(v17 + 32);
          if (v18 <= a3) {
            break;
          }
          uint64_t v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }
LABEL_51:
      uint64_t v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3) {
      return result;
    }
    uint64_t v11 = a2 + 1;
    uint64_t v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        uint64_t v11 = v12;
        uint64_t v12 = (uint64_t *)*v12;
        unsigned int v13 = v11;
        uint64_t v14 = v11;
      }
      while (v12);
    }
    else
    {
      uint64_t v14 = a2;
      do
      {
        int v19 = v14;
        uint64_t v14 = (uint64_t *)v14[2];
      }
      while ((uint64_t *)*v14 != v19);
      unsigned int v13 = a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 8) > a3)
    {
LABEL_22:
      uint64_t v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }
    uint64_t v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v13 = (uint64_t *)v20;
          unsigned int v21 = *(_DWORD *)(v20 + 32);
          if (v21 <= a3) {
            break;
          }
          uint64_t v20 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v21 >= a3) {
          goto LABEL_51;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }
  unsigned int v13 = result + 1;
LABEL_44:
  uint64_t v22 = (char *)operator new(0x40uLL);
  *((_DWORD *)v22 + 8) = *(_DWORD *)a4;
  int v23 = (std::string *)(v22 + 40);
  if (*(char *)(a4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 8);
    *((void *)v22 + 7) = *(void *)(a4 + 24);
  }
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = v13;
  *uint64_t v6 = (uint64_t)v22;
  uint64_t v24 = *(void *)*v5;
  if (v24)
  {
    uint64_t *v5 = v24;
    uint64_t v22 = (char *)*v6;
  }
  double result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], (uint64_t *)v22);
  ++v5[2];
  return result;
}

void sub_20D3EDFCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void VoiceConfig::get_subconfig(uint64_t a1@<X1>, int a2@<W2>, void *a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2 != 2)
  {
    if (*(char *)(a1 + 23) >= 0) {
      BOOL v5 = (const char *)a1;
    }
    else {
      BOOL v5 = *(const char **)a1;
    }
    if (!a2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      uint64_t v11 = __p;
      if (v13 < 0) {
        uint64_t v11 = (void **)__p[0];
      }
      StringFormatter::StringFormatter((StringFormatter *)buf, "%s", (const char *)v11);
      MEMORY[0x210558D40](exception, buf);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = __p;
      if (v13 < 0) {
        uint64_t v8 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      int v15 = v8;
      _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }
    int v9 = __p;
    if (v13 < 0) {
      int v9 = (void **)__p[0];
    }
    Diagnostics::log(3, "%s", v7, v9);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  *a3 = 0;
  a3[1] = 0;
}

void sub_20D3EE1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_6:
      if (a15 < 0) {
        operator delete(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void VoiceConfig::get_locale_prefix_path(unsigned int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, void *a5@<X8>)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v8 = (const char *)a2;
  }
  else {
    uint64_t v8 = *(const char **)a2;
  }
  if (*(char *)(a3 + 23) >= 0) {
    int v9 = (const char *)a3;
  }
  else {
    int v9 = *(const char **)a3;
  }
  StringFormatter::StringFormatter((StringFormatter *)__p, "%s][%s", v8, v9);
  VoiceConfig::report_error(a1, a4, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
}

void sub_20D3EE284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VoiceConfig::report_error(unsigned int a1, int a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (a2 == 2) {
    return;
  }
  if (a2 == 1)
  {
    {
      operator new();
    }
    for (uint64_t i = *(uint64_t **)(ignore_if_missing_set(void)::ignore + 8); i; uint64_t i = (uint64_t *)*i)
    {
      unsigned int v7 = *((_DWORD *)i + 7);
      if (v7 <= a1)
      {
        if (v7 >= a1) {
          return;
        }
        ++i;
      }
    }
  }
  file_name_from_id(&v37, a1);
  memset(&v36, 0, sizeof(v36));
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v37.__r_.__value_.__l.__size_)
    {
      uint64_t v8 = (std::string *)v37.__r_.__value_.__r.__words[0];
      goto LABEL_14;
    }
LABEL_25:
    name_from_id(&v35, a1);
    int v15 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
    std::string::size_type v16 = v35.__r_.__value_.__r.__words[0];
    symbol_name_from_id(&__p, a1);
    uint64_t v17 = &v35;
    if (v15 < 0) {
      uint64_t v17 = (std::string *)v16;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v39 & 0x80u) == 0) {
      p_long long buf = &buf;
    }
    else {
      p_long long buf = (long long *)buf;
    }
    if ((v39 & 0x80u) == 0) {
      uint64_t v14 = v39;
    }
    else {
      uint64_t v14 = *((void *)&buf + 1);
    }
    goto LABEL_36;
  }
  if (!*((unsigned char *)&v37.__r_.__value_.__s + 23)) {
    goto LABEL_25;
  }
  uint64_t v8 = &v37;
LABEL_14:
  name_from_id(&v35, a1);
  int v9 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  std::string::size_type v10 = v35.__r_.__value_.__r.__words[0];
  symbol_name_from_id(&__p, a1);
  char v11 = &v35;
  if (v9 < 0) {
    char v11 = (std::string *)v10;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &__p;
  }
  else {
    uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v39 & 0x80u) == 0) {
    p_long long buf = &buf;
  }
  else {
    p_long long buf = (long long *)buf;
  }
  if ((v39 & 0x80u) == 0) {
    uint64_t v14 = v39;
  }
  else {
    uint64_t v14 = *((void *)&buf + 1);
  }
LABEL_36:
  MEMORY[0x210558E80](&v36, p_buf, v14);
  if ((char)v39 < 0) {
    operator delete((void *)buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  uint64_t v19 = *(unsigned __int8 *)(a3 + 23);
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(a3 + 8);
  }
  if (v19)
  {
    unsigned int v21 = &v36;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v21 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    while (size)
    {
      int v23 = v21->__r_.__value_.__s.__data_[--size];
      if (v23 == 46)
      {
        std::string::size_type v24 = size;
        goto LABEL_53;
      }
    }
    std::string::size_type v24 = -1;
LABEL_53:
    if (v20 >= 0) {
      int v25 = (const char *)a3;
    }
    else {
      int v25 = *(const char **)a3;
    }
    StringFormatter::StringFormatter((StringFormatter *)&buf, ": %s", v25);
    if ((v39 & 0x80u) == 0) {
      char v26 = (const std::string::value_type *)&buf;
    }
    else {
      char v26 = (const std::string::value_type *)buf;
    }
    if ((v39 & 0x80u) == 0) {
      std::string::size_type v27 = v39;
    }
    else {
      std::string::size_type v27 = *((void *)&buf + 1);
    }
    std::string::replace(&v36, v24, 2uLL, v26, v27);
    if ((char)v39 < 0) {
      operator delete((void *)buf);
    }
  }
  if (!a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v33 = &v36;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v33 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)&buf, "%s", (const char *)v33);
    MEMORY[0x210558D40](exception, &buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    char v30 = &v36;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v30 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v30;
    _os_log_impl(&dword_20CD80000, v28, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
  }
  int v31 = &v36;
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v31 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(3, "%s", v29, v31);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_20D3EE700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
}

void file_name_from_id(std::string *a1, unsigned int a2)
{
  void v168[3] = *MEMORY[0x263EF8340];
  {
    char v11 = a1;
    unsigned int v8 = a2;
    a2 = v8;
    int v10 = v9;
    a1 = v11;
    if (v10)
    {
      unsigned int v13 = 1768842360;
      std::string::basic_string[abi:ne180100]<0>(v14, &byte_20D5A22AE);
      int v15 = 1937011316;
      std::string::basic_string[abi:ne180100]<0>(v16, &byte_20D5A22AE);
      int v17 = 1633968500;
      std::string::basic_string[abi:ne180100]<0>(v18, &byte_20D5A22AE);
      int v19 = 1886220907;
      std::string::basic_string[abi:ne180100]<0>(v20, &byte_20D5A22AE);
      int v21 = 1714450030;
      std::string::basic_string[abi:ne180100]<0>(v22, &byte_20D5A22AE);
      int v23 = 1685417582;
      std::string::basic_string[abi:ne180100]<0>(v24, &byte_20D5A22AE);
      int v25 = 1885889131;
      std::string::basic_string[abi:ne180100]<0>(v26, &byte_20D5A22AE);
      int v27 = 1885893488;
      std::string::basic_string[abi:ne180100]<0>(v28, &byte_20D5A22AE);
      int v29 = 1852797549;
      std::string::basic_string[abi:ne180100]<0>(v30, &byte_20D5A22AE);
      int v31 = 1835298404;
      std::string::basic_string[abi:ne180100]<0>(v32, &byte_20D5A22AE);
      int v33 = 1835298423;
      std::string::basic_string[abi:ne180100]<0>(v34, &byte_20D5A22AE);
      int v35 = 1835298414;
      std::string::basic_string[abi:ne180100]<0>(v36, &byte_20D5A22AE);
      int v37 = 1835298415;
      std::string::basic_string[abi:ne180100]<0>(v38, &byte_20D5A22AE);
      int v39 = 1835298409;
      std::string::basic_string[abi:ne180100]<0>(v40, &byte_20D5A22AE);
      int v41 = 1835298406;
      std::string::basic_string[abi:ne180100]<0>(v42, &byte_20D5A22AE);
      int v43 = 1919839846;
      std::string::basic_string[abi:ne180100]<0>(v44, &byte_20D5A22AE);
      int v45 = 1952543344;
      std::string::basic_string[abi:ne180100]<0>(v46, &byte_20D5A22AE);
      int v47 = 1886547316;
      std::string::basic_string[abi:ne180100]<0>(v48, &byte_20D5A22AE);
      int v49 = 1735422573;
      std::string::basic_string[abi:ne180100]<0>(v50, "generated_prompts");
      int v51 = 2003135842;
      std::string::basic_string[abi:ne180100]<0>(v52, "norm_embedding");
      int v53 = 1852990316;
      std::string::basic_string[abi:ne180100]<0>(v54, "norm_classify_model");
      int v55 = 1852991854;
      std::string::basic_string[abi:ne180100]<0>(v56, "norm_input");
      int v57 = 1852992627;
      std::string::basic_string[abi:ne180100]<0>(v58, "norm_labsym");
      int v59 = 1852994668;
      std::string::basic_string[abi:ne180100]<0>(v60, "norm_toklab");
      int v61 = 1852977512;
      std::string::basic_string[abi:ne180100]<0>(v62, "norm_onehot_feat");
      int v63 = 1852994156;
      std::string::basic_string[abi:ne180100]<0>(v64, "norm_rules");
      int v65 = 1852990320;
      std::string::basic_string[abi:ne180100]<0>(v66, "norm_complex");
      int v67 = 1870033522;
      std::string::basic_string[abi:ne180100]<0>(v68, "override_rules");
      int v69 = 1886352237;
      std::string::basic_string[abi:ne180100]<0>(v70, "pos_model");
      int v71 = 1886545272;
      std::string::basic_string[abi:ne180100]<0>(v72, "pron_dict.db");
      int v73 = 1885892461;
      std::string::basic_string[abi:ne180100]<0>(v74, "phon_map.db");
      int v75 = 1886547821;
      std::string::basic_string[abi:ne180100]<0>(v76, "pron_nnmt_model.nnet");
      int v77 = 1885893228;
      std::string::basic_string[abi:ne180100]<0>(v78, "phoneme_rules");
      int v79 = 1885893235;
      std::string::basic_string[abi:ne180100]<0>(v80, "phrasing_model");
      int v81 = 1885893234;
      std::string::basic_string[abi:ne180100]<0>(v82, "phrasing_rules");
      int v83 = 1651664996;
      std::string::basic_string[abi:ne180100]<0>(v84, "broker.hdr");
      int v85 = 1650550884;
      std::string::basic_string[abi:ne180100]<0>(v86, "broker.hdr.asset");
      int v87 = 1885564279;
      std::string::basic_string[abi:ne180100]<0>(v88, "PCMWave");
      int v89 = 1935831659;
      std::string::basic_string[abi:ne180100]<0>(v90, "sentence_break_exceptions");
      int v91 = 1717790311;
      std::string::basic_string[abi:ne180100]<0>(v92, "frontend.cfg");
      int v93 = 1734567527;
      std::string::basic_string[abi:ne180100]<0>(v94, "gryphon.cfg");
      int v95 = 1734700644;
      std::string::basic_string[abi:ne180100]<0>(v96, "gender");
      int v97 = 1735292269;
      std::string::basic_string[abi:ne180100]<0>(v98, "plural");
      int v99 = 1835361122;
      std::string::basic_string[abi:ne180100]<0>(v100, "mecab_dir/");
      int v101 = 1835233389;
      std::string::basic_string[abi:ne180100]<0>(v102, "mecab_dir/pos_mapping.json");
      int v103 = 1718903655;
      std::string::basic_string[abi:ne180100]<0>(v104, "filter_text.json");
      int v105 = 1953657708;
      std::string::basic_string[abi:ne180100]<0>(v106, "transliterate.json");
      int v107 = 1920234092;
      std::string::basic_string[abi:ne180100]<0>(v108, "replace_rules.json");
      int v109 = 1920231009;
      std::string::basic_string[abi:ne180100]<0>(v110, "replace.far");
      int v111 = 1731358822;
      std::string::basic_string[abi:ne180100]<0>(v112, "g2p_rules.far");
      int v113 = 1718776943;
      std::string::basic_string[abi:ne180100]<0>(v114, "g2p_token_fr.dat");
      int v115 = 1718776677;
      std::string::basic_string[abi:ne180100]<0>(v116, "g2p_sent_fr.dat");
      int v117 = 1718775913;
      std::string::basic_string[abi:ne180100]<0>(v118, "g2p_pitch_fr.dat");
      int v119 = 1852139109;
      std::string::basic_string[abi:ne180100]<0>(v120, "neural_fe_config.json");
      int v121 = 1852138085;
      std::string::basic_string[abi:ne180100]<0>(v122, "neural_be_config.json");
      int v123 = 1953395557;
      std::string::basic_string[abi:ne180100]<0>(v124, "tn_seq2seq.bin");
      int v125 = 1953395570;
      std::string::basic_string[abi:ne180100]<0>(v126, "tn_seq2seq_rule.dat");
      int v127 = 1731358835;
      std::string::basic_string[abi:ne180100]<0>(v128, "g2p/g2p.mdl.bin");
      int v129 = 1731358831;
      std::string::basic_string[abi:ne180100]<0>(v130, "g2p_seq2seq.bin");
      int v131 = 1751477859;
      std::string::basic_string[abi:ne180100]<0>(v132, "tts_nlp/tts-nlp-encoder.json");
      int v133 = 1751410019;
      std::string::basic_string[abi:ne180100]<0>(v134, "tts_nlp/tts-nlp-decoder.json");
      int v135 = 1953395813;
      std::string::basic_string[abi:ne180100]<0>(v136, "tts_nlp/tok_encoder.dat");
      int v137 = 1953395812;
      std::string::basic_string[abi:ne180100]<0>(v138, "tts_nlp/tok_decoder.dat");
      int v139 = 1953390956;
      std::string::basic_string[abi:ne180100]<0>(v140, "tts_nlp/aligner.dat");
      int v141 = 1731358834;
      std::string::basic_string[abi:ne180100]<0>(v142, "g2p_seq2seq_rule.dat");
      int v143 = 1887007858;
      std::string::basic_string[abi:ne180100]<0>(v144, "g2p_pyt_rule.dat");
      int v145 = 2020827506;
      std::string::basic_string[abi:ne180100]<0>(v146, "g2p_xsampa_rule.dat");
      int v147 = 1818783858;
      std::string::basic_string[abi:ne180100]<0>(v148, "g2p_lhp_rule.dat");
      int v149 = 1768846450;
      std::string::basic_string[abi:ne180100]<0>(v150, "g2p_internal_rule.dat");
      int v151 = 1886352244;
      std::string::basic_string[abi:ne180100]<0>(v152, "g2p_post_rule.dat");
      int v153 = 1852731506;
      std::string::basic_string[abi:ne180100]<0>(v154, "tn_prefix_rule.dat");
      int v155 = 1919252338;
      std::string::basic_string[abi:ne180100]<0>(v156, "rewrite_rule.dat");
      int v157 = 1886417510;
      std::string::basic_string[abi:ne180100]<0>(v158, "preprocess_rule.dat");
      int v159 = 1752523875;
      std::string::basic_string[abi:ne180100]<0>(v160, "hydra_udct.json");
      int v161 = 1752523890;
      std::string::basic_string[abi:ne180100]<0>(v162, "hydra_udct_pp.dat");
      int v163 = 1634100856;
      std::string::basic_string[abi:ne180100]<0>(v164, "affix_rules");
      int v165 = 1852138092;
      std::string::basic_string[abi:ne180100]<0>(v166, "neural_blacklist.json");
      int v167 = 1852139116;
      std::string::basic_string[abi:ne180100]<0>(v168, "neural_fallbacklist.json");
      std::map<unsigned int,std::string>::map[abi:ne180100](&v12, &v13, 78);
      NeverDestructed<std::map<unsigned int,std::string>>::NeverDestructed<>();
    }
  }
  uint64_t v2 = *(void *)(file_name_from_id::name_map + 8);
  if (!v2) {
    goto LABEL_13;
  }
  uint64_t v3 = file_name_from_id::name_map + 8;
  do
  {
    unsigned int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      uint64_t v6 = (uint64_t *)v2;
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (v5) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 != file_name_from_id::name_map + 8 && *(_DWORD *)(v3 + 32) <= a2)
  {
    if (*(char *)(v3 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(v3 + 40), *(void *)(v3 + 48));
    }
    else
    {
      long long v7 = *(_OWORD *)(v3 + 40);
      a1->__r_.__value_.__r.__words[2] = *(void *)(v3 + 56);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
  }
}

void sub_20D3EF350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, char a14)
{
  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(a12);
  uint64_t v15 = 2496;
  while (1)
  {
    if (*(&a14 + v15 - 1) < 0) {
      operator delete(*(void **)(&a14 + v15 - 24));
    }
    v15 -= 32;
    if (!v15)
    {
      _Unwind_Resume(a1);
    }
  }
}

void VoiceConfig::get_locale_path(unsigned int a1@<W1>, int a2@<W3>, void *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  VoiceConfig::report_error(a1, a2, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_20D3EF574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VoiceConfig::get_prefix_path(unsigned int a1@<W1>, uint64_t a2@<X2>, int a3@<W3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

void VoiceConfig::get_path(unsigned int a1@<W1>, int a2@<W2>, void *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  VoiceConfig::report_error(a1, a2, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_20D3EF634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double VoiceConfig::get_broker_data@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unint64_t VoiceConfigEyrie::get_resource@<X0>(VoiceConfigEyrie *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = VoiceConfigEyrie::get_section(a1, a2);
  if (HIDWORD(result))
  {
    return (unint64_t)MemoryMap::subrange((void *)a3, (void *)a1 + 1, HIDWORD(result), v6);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

void VoiceConfigEyrie::~VoiceConfigEyrie(void **this)
{
  VoiceConfigEyrie::~VoiceConfigEyrie(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;

  *this = off_26C201C50;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void VoiceConfigEyrie_1::get_json(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  char v7 = *(_DWORD **)(a1 + 64);
  unsigned int v6 = *(_DWORD **)(a1 + 72);
  if (v7 != v6)
  {
    unsigned int v8 = bswap32(a2);
    while (*v7 != v8)
    {
      v7 += 2;
      if (v7 == v6) {
        goto LABEL_35;
      }
    }
  }
  if (v7 == v6 || !v7[1])
  {
LABEL_35:
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    return;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id((std::string *)&v33, a2);
    value_int high = SHIBYTE(v33.__end_cap_.__value_);
    std::vector<std::string>::pointer begin = v33.__begin_;
    symbol_name_from_id(&__p, a2);
    uint64_t v12 = (std::string *)&v33;
    if (value_high < 0) {
      uint64_t v12 = begin;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    uint64_t v14 = (std::string *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
    }
    int v15 = v7[1];
    LODWORD(buf.__first_) = 136315906;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v12;
    WORD2(buf.__begin_) = 2080;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__begin_ + 6) = p_p;
    HIWORD(buf.__end_) = 2080;
    buf.__end_cap_.__value_ = v14;
    LOWORD(buf.__end_cap_.__value_) = 1024;
    *(_DWORD *)((char *)&buf.__end_cap_.__value_ + 2) = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__end_cap_.__value_) < 0) {
      operator delete(v33.__begin_);
    }
  }
  p_std::__split_buffer<std::string> buf = (std::__split_buffer<std::string>::pointer)&buf;
  name_from_id((std::string *)&buf, a2);
  if (SHIBYTE(buf.__end_) < 0) {
    p_std::__split_buffer<std::string> buf = buf.__first_;
  }
  symbol_name_from_id((std::string *)&v33, a2);
  if (SHIBYTE(v33.__end_cap_.__value_) >= 0) {
    unsigned int v18 = &v33;
  }
  else {
    unsigned int v18 = v33.__begin_;
  }
  int v19 = (void *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    int v19 = (void *)*v19;
  }
  if (SHIBYTE(v33.__end_cap_.__value_) < 0) {
    operator delete(v33.__begin_);
  }
  if (SHIBYTE(buf.__end_) < 0) {
    operator delete(buf.__first_);
  }
  int v20 = (char *)(*(void *)(a1 + 24) + v7[1]);
  if (a2 <= 1936288869)
  {
    if (a2 != 1701737593)
    {
      int v21 = 1818324583;
      goto LABEL_38;
    }
LABEL_59:
    std::string::basic_string[abi:ne180100]<0>(&buf, v20);
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)a3 = 3;
    int v31 = operator new(0x18uLL);
    *(_OWORD *)int v31 = *(_OWORD *)&buf.__first_;
    v31[2] = buf.__end_;
    *(void *)(a3 + 8) = v31;
    return;
  }
  if (a2 == 1936288870) {
    goto LABEL_59;
  }
  int v21 = 1987015801;
LABEL_38:
  if (a2 == v21) {
    goto LABEL_59;
  }
  memset(&v33, 0, sizeof(v33));
  if (*v20)
  {
    std::vector<std::string>::pointer end = 0;
    do
    {
      if (end >= v33.__end_cap_.__value_)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v33.__begin_) >> 3);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3) > v24) {
          unint64_t v24 = 0x5555555555555556 * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v25 = v24;
        }
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v33.__end_cap_;
        if (v25) {
          char v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v33.__end_cap_, v25);
        }
        else {
          char v26 = 0;
        }
        buf.__first_ = v26;
        buf.__begin_ = v26 + v23;
        buf.__end_ = buf.__begin_;
        buf.__end_cap_.__value_ = &v26[v25];
        std::string::basic_string[abi:ne180100]<0>(buf.__begin_->__r_.__value_.__r.__words, v20);
        ++buf.__end_;
        std::vector<std::string>::__swap_out_circular_buffer(&v33, &buf);
        std::vector<std::string>::pointer end = v33.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&buf);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(end++, v20);
      }
      v33.__end_ = end;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = end[-1].__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = HIBYTE(end[-1].__r_.__value_.__r.__words[2]);
      }
      uint64_t v28 = &v20[size];
      int v29 = v28[1];
      int v20 = v28 + 1;
    }
    while (v29);
    std::vector<std::string>::pointer v30 = v33.__begin_;
  }
  else
  {
    std::vector<std::string>::pointer end = 0;
    std::vector<std::string>::pointer v30 = 0;
  }
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)a3 = 2;
  *(void *)(a3 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((uint64_t)v30, (uint64_t)end);
  buf.__first_ = (std::__split_buffer<std::string>::pointer)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
}

void sub_20D3EFBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  a13 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = operator new(0x18uLL);
  BOOL v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *unsigned int v4 = 0;
  if (a2 != a1)
  {
    std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](v4, 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3));
    uint64_t v10 = v5[1];
    uint64_t v11 = v10;
    v8[0] = v5 + 2;
    v8[1] = &v10;
    _DWORD v8[2] = &v11;
    char v9 = 0;
    uint64_t v6 = v10;
    do
    {
      *(void *)(v6 + 8) = 0;
      *(unsigned char *)uint64_t v6 = 3;
      *(void *)(v6 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a1);
      a1 += 24;
      uint64_t v6 = v11 + 16;
      v11 += 16;
    }
    while (a1 != a2);
    char v9 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
    v5[1] = v6;
  }
  return v5;
}

void sub_20D3EFD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void VoiceConfig::get_resource(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 32))(v17);
  unint64_t v7 = v18;
  unsigned __int8 v8 = v18;
  if ((v18 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v17[1];
  }
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if (v7)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
    MemoryMap::MemoryMap(&v12, (uint64_t)v17);
    uint64_t v10 = v12;
    char v9 = v13;
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v11 = v13;
      *(void *)a4 = v10;
      *(void *)(a4 + 8) = v9;
      *(_OWORD *)(a4 + 16) = v14;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
    else
    {
      *(void *)a4 = v12;
      *(void *)(a4 + 8) = 0;
      *(_OWORD *)(a4 + 16) = v14;
    }
    if (!*(void *)a4) {
      VoiceConfig::report_error(a2, a3, (uint64_t)__p);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    unsigned __int8 v8 = v18;
  }
  if ((v8 & 0x80) != 0) {
    operator delete(v17[0]);
  }
}

void sub_20D3EFE48(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  unint64_t v7 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v7 + 16))(v7);
    MEMORY[0x210558E70](va, v8);
  }
  __cxa_end_catch();
  JUMPOUT(0x20D3EFDFCLL);
}

void sub_20D3EFE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  char v26 = *(std::__shared_weak_count **)(v24 + 8);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void VoiceConfigEyrie_1::~VoiceConfigEyrie_1(void **this)
{
  VoiceConfigEyrie_1::~VoiceConfigEyrie_1(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;

  *this = off_26C202648;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void VoiceConfig::get_json(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint8_t v28[4] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 16))(&v7);
  if (v7)
  {
    uint64_t v3 = v9;
    uint64_t v4 = v10;
    void v11[3] = 0;
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v11);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v28, (uint64_t)v12);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v28);
    int v14 = 0;
    v15[0] = v3;
    v15[1] = v3 + v4;
    v15[2] = -1;
    char v16 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v21 = 0;
    int v22 = &byte_20D5A22AE;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    BOOL v5 = localeconv();
    if (v5->decimal_point) {
      uint64_t v6 = *v5->decimal_point;
    }
    else {
      uint64_t v6 = 46;
    }
    uint64_t v26 = v6;
    char v27 = 1;
    int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan((uint64_t)v15);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v28);
    nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::parse((uint64_t)v13, (unsigned __int8 *)a2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::~lexer((uint64_t)v15);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v13);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v12);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v11);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_20D3F0110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  uint64_t v9 = v8;
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::~lexer(v9);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v7, *v6);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::parse(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 24))
  {
    char v15 = *(unsigned char *)(a1 + 184);
    char v72 = a2;
    long long v73 = 0u;
    long long v74 = 0u;
    char v75 = 0;
    char v76 = v15;
    memset(&v70, 0, sizeof(v70));
    while (1)
    {
      switch(*(_DWORD *)(a1 + 32))
      {
        case 1:
          LOBYTE(v67.__vftable) = 1;
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>((uint64_t *)&v72, (unsigned __int8 *)&v67);
          goto LABEL_58;
        case 2:
          LOBYTE(v67.__vftable) = 0;
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>((uint64_t *)&v72, (unsigned __int8 *)&v67);
          goto LABEL_58;
        case 3:
          v67.__vftable = 0;
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>((uint64_t *)&v72);
          goto LABEL_58;
        case 4:
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>((uint64_t *)&v72, a1 + 120);
          goto LABEL_58;
        case 5:
          v67.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>((uint64_t *)&v72, (uint64_t *)&v67);
          goto LABEL_58;
        case 6:
          v67.__vftable = *(std::exception_vtbl **)(a1 + 152);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>((uint64_t *)&v72, (uint64_t *)&v67);
          goto LABEL_58;
        case 7:
          if ((*(void *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            uint64_t v54 = *(void *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v64, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            int v55 = std::string::insert(&v64, 0, "number overflow parsing '");
            long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v56;
            v55->__r_.__value_.__l.__size_ = 0;
            v55->__r_.__value_.__r.__words[2] = 0;
            v55->__r_.__value_.__r.__words[0] = 0;
            int v57 = std::string::append(&__p, "'");
            long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
            v66.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v58;
            v57->__r_.__value_.__l.__size_ = 0;
            v57->__r_.__value_.__r.__words[2] = 0;
            v57->__r_.__value_.__r.__words[0] = 0;
            nlohmann::detail::out_of_range::create(406, (uint64_t)&v66, (nlohmann::detail::exception *)&v67);
            nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v54, (uint64_t)&v69, (uint64_t)&v67);
            nlohmann::detail::exception::~exception(&v67);
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v66.__r_.__value_.__l.__data_);
            }
            goto LABEL_102;
          }
          v67.__vftable = *(std::exception_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>((uint64_t *)&v72, (uint64_t *)&v67);
          goto LABEL_58;
        case 8:
          if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array((uint64_t *)&v72, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_108; {
          int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
          }
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 == 10) {
            goto LABEL_53;
          }
          LOBYTE(v67.__vftable) = 1;
          std::vector<BOOL>::push_back((uint64_t)&v70, &v67);
          continue;
        case 9:
          if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object((uint64_t *)&v72, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_108; {
          int v17 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
          }
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 == 11)
          {
LABEL_53:
            *((void *)&v73 + 1) -= 8;
LABEL_58:
            std::string::size_type size = v70.__r_.__value_.__l.__size_;
            if (!v70.__r_.__value_.__l.__size_)
            {
LABEL_108:
              if (v70.__r_.__value_.__r.__words[0]) {
                operator delete(v70.__r_.__value_.__l.__data_);
              }
              int v37 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
              *(_DWORD *)(a1 + 32) = v37;
              if (v37 != 15)
              {
                uint64_t v38 = *(void *)(a1 + 72);
                nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v70, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                std::string v69 = *(std::string *)(a1 + 72);
                std::string::basic_string[abi:ne180100]<0>(&__p, "value");
                nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&v66, a1, 0xFu, (uint64_t)&__p);
                nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&v66, (nlohmann::detail::exception *)&v67);
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v38, (uint64_t)&v70, (uint64_t)&v67);
                v67.__vftable = (std::exception_vtbl *)off_26C211368;
                MEMORY[0x210558DD0](v68);
                std::exception::~exception(&v67);
                if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v66.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v70.__r_.__value_.__l.__data_);
                }
              }
              if (v75)
              {
                int v39 = *a2;
                *a2 = 9;
                uint64_t v40 = (uint64_t *)*((void *)a2 + 1);
                *((void *)a2 + 1) = 0;
                int v59 = v40;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v59, v39);
              }
              if ((void)v73)
              {
                *((void *)&v73 + 1) = v73;
                operator delete((void *)v73);
              }
              return;
            }
            while (1)
            {
              if ((*(void *)(v70.__r_.__value_.__r.__words[0] + (((size - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (size - 1)))
              {
                int v19 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
                *(_DWORD *)(a1 + 32) = v19;
                if (v19 == 13) {
                  goto LABEL_70;
                }
                if (v19 != 10)
                {
                  uint64_t v42 = *(void *)(a1 + 72);
                  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                  std::string v66 = *(std::string *)(a1 + 72);
                  std::string::basic_string[abi:ne180100]<0>(&v64, "array");
                  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xAu, (uint64_t)&v64);
                  nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
                  nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v42, (uint64_t)&v69, (uint64_t)&v67);
                  goto LABEL_130;
                }
              }
              else
              {
                int v20 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
                *(_DWORD *)(a1 + 32) = v20;
                if (v20 == 13)
                {
                  int v21 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
                  *(_DWORD *)(a1 + 32) = v21;
                  if (v21 == 4)
                  {
                    int v22 = *(uint64_t ***)(*(void *)(*((void *)&v73 + 1) - 8) + 8);
                    v67.__vftable = (std::exception_vtbl *)(a1 + 120);
                    *((void *)&v74 + 1) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (const void **)(a1 + 120), (uint64_t)&std::piecewise_construct, (long long **)&v67)+ 7;
                    int v23 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
                    *(_DWORD *)(a1 + 32) = v23;
                    if (v23 == 12)
                    {
LABEL_70:
                      int v24 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
                      goto LABEL_71;
                    }
LABEL_129:
                    uint64_t v48 = *(void *)(a1 + 72);
                    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                    std::string v66 = *(std::string *)(a1 + 72);
                    std::string::basic_string[abi:ne180100]<0>(&v64, "object separator");
                    nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xCu, (uint64_t)&v64);
                    nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
                    nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v48, (uint64_t)&v69, (uint64_t)&v67);
LABEL_130:
                    nlohmann::detail::exception::~exception(&v67);
LABEL_102:
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v64.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v69.__r_.__value_.__l.__data_);
                    }
                    goto LABEL_108;
                  }
LABEL_128:
                  uint64_t v47 = *(void *)(a1 + 72);
                  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                  std::string v66 = *(std::string *)(a1 + 72);
                  std::string::basic_string[abi:ne180100]<0>(&v64, "object key");
                  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 4u, (uint64_t)&v64);
                  nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
                  nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v47, (uint64_t)&v69, (uint64_t)&v67);
                  goto LABEL_130;
                }
                if (v20 != 11)
                {
                  uint64_t v46 = *(void *)(a1 + 72);
                  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                  std::string v66 = *(std::string *)(a1 + 72);
                  std::string::basic_string[abi:ne180100]<0>(&v64, "object");
                  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xBu, (uint64_t)&v64);
                  nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
                  nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v46, (uint64_t)&v69, (uint64_t)&v67);
                  goto LABEL_130;
                }
              }
              *((void *)&v73 + 1) -= 8;
              std::string::size_type size = --v70.__r_.__value_.__l.__size_;
              if (!v70.__r_.__value_.__l.__size_) {
                goto LABEL_108;
              }
            }
          }
          if (v17 != 4) {
            goto LABEL_128;
          }
          uint64_t v25 = *(uint64_t ***)(*(void *)(*((void *)&v73 + 1) - 8) + 8);
          v67.__vftable = (std::exception_vtbl *)(a1 + 120);
          *((void *)&v74 + 1) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, (const void **)(a1 + 120), (uint64_t)&std::piecewise_construct, (long long **)&v67)+ 7;
          int v26 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v26;
          if (v26 != 12) {
            goto LABEL_129;
          }
          LOBYTE(v67.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v70, &v67);
          int v24 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
LABEL_71:
          *(_DWORD *)(a1 + 32) = v24;
          break;
        case 0xE:
          uint64_t v35 = *(void *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          std::string v66 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v64, "value");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0, (uint64_t)&v64);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v35, (uint64_t)&v69, (uint64_t)&v67);
          goto LABEL_101;
        default:
          uint64_t v36 = *(void *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          std::string v66 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v64, "value");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0x10u, (uint64_t)&v64);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v36, (uint64_t)&v69, (uint64_t)&v67);
LABEL_101:
          v67.__vftable = (std::exception_vtbl *)off_26C211368;
          MEMORY[0x210558DD0](v68);
          std::exception::~exception(&v67);
          goto LABEL_102;
      }
    }
  }
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v71, a1);
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v72, (uint64_t)a2, (uint64_t)v71, *(unsigned char *)(a1 + 184));
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v71);
  memset(&v70, 0, sizeof(v70));
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v67.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>((uint64_t *)&v72, (unsigned __int8 *)&v67, 0);
        goto LABEL_20;
      case 2:
        LOBYTE(v67.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>((uint64_t *)&v72, (unsigned __int8 *)&v67, 0);
        goto LABEL_20;
      case 3:
        v67.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>((uint64_t *)&v72, (uint64_t)&v67, 0);
        goto LABEL_20;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>((uint64_t *)&v72, a1 + 120, 0);
        goto LABEL_20;
      case 5:
        v67.__vftable = *(std::exception_vtbl **)(a1 + 160);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>((uint64_t *)&v72, (uint64_t **)&v67, 0);
        goto LABEL_20;
      case 6:
        v67.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>((uint64_t *)&v72, (uint64_t **)&v67, 0);
        goto LABEL_20;
      case 7:
        if ((*(void *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v67.__vftable = *(std::exception_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>((uint64_t *)&v72, (uint64_t **)&v67, 0);
          goto LABEL_20;
        }
        uint64_t v49 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v64, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        uint64_t v50 = std::string::insert(&v64, 0, "number overflow parsing '");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        long long v52 = std::string::append(&__p, "'");
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)&v66, (nlohmann::detail::exception *)&v67);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v49, (uint64_t)&v69, (uint64_t)&v67);
        nlohmann::detail::exception::~exception(&v67);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        goto LABEL_78;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array((uint64_t *)&v72, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_84; {
        int v4 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
        }
        *(_DWORD *)(a1 + 32) = v4;
        if (v4 == 10)
        {
          char v5 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(&v72);
          goto LABEL_14;
        }
        LOBYTE(v67.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v70, &v67);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object((uint64_t *)&v72, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_84; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 != 11)
        {
          if (v6 != 4) {
            goto LABEL_124;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(&v72, (long long *)(a1 + 120)))goto LABEL_84; {
          int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
          }
          *(_DWORD *)(a1 + 32) = v14;
          if (v14 != 12) {
            goto LABEL_125;
          }
          LOBYTE(v67.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v70, &v67);
          int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
LABEL_36:
          *(_DWORD *)(a1 + 32) = v13;
          continue;
        }
        char v5 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(&v72);
LABEL_14:
        if ((v5 & 1) == 0) {
          goto LABEL_84;
        }
LABEL_20:
        std::string::size_type v7 = v70.__r_.__value_.__l.__size_;
        if (!v70.__r_.__value_.__l.__size_) {
          goto LABEL_84;
        }
        while (2)
        {
          if ((*(void *)(v70.__r_.__value_.__r.__words[0] + (((v7 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v7 - 1)))
          {
            int v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
            *(_DWORD *)(a1 + 32) = v8;
            if (v8 == 13) {
              goto LABEL_35;
            }
            if (v8 != 10)
            {
              uint64_t v41 = *(void *)(a1 + 72);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              std::string v66 = *(std::string *)(a1 + 72);
              std::string::basic_string[abi:ne180100]<0>(&v64, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xAu, (uint64_t)&v64);
              nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
              nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v41, (uint64_t)&v69, (uint64_t)&v67);
              goto LABEL_126;
            }
            char v9 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(&v72);
LABEL_28:
            if ((v9 & 1) == 0) {
              goto LABEL_84;
            }
            std::string::size_type v7 = --v70.__r_.__value_.__l.__size_;
            if (!v70.__r_.__value_.__l.__size_) {
              goto LABEL_84;
            }
            continue;
          }
          break;
        }
        int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
        *(_DWORD *)(a1 + 32) = v10;
        if (v10 != 13)
        {
          if (v10 != 11)
          {
            uint64_t v43 = *(void *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            std::string v66 = *(std::string *)(a1 + 72);
            std::string::basic_string[abi:ne180100]<0>(&v64, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xBu, (uint64_t)&v64);
            nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v43, (uint64_t)&v69, (uint64_t)&v67);
            goto LABEL_126;
          }
          char v9 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(&v72);
          goto LABEL_28;
        }
        int v11 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 4)
        {
LABEL_124:
          uint64_t v44 = *(void *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          std::string v66 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v64, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 4u, (uint64_t)&v64);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v44, (uint64_t)&v69, (uint64_t)&v67);
          goto LABEL_126;
        }
        if (nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(&v72, (long long *)(a1 + 120)))
        {
          int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v12;
          if (v12 == 12)
          {
LABEL_35:
            int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
            goto LABEL_36;
          }
LABEL_125:
          uint64_t v45 = *(void *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          std::string v66 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v64, "object separator");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xCu, (uint64_t)&v64);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v45, (uint64_t)&v69, (uint64_t)&v67);
LABEL_126:
          nlohmann::detail::exception::~exception(&v67);
LABEL_78:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v69.__r_.__value_.__l.__data_);
          }
        }
LABEL_84:
        if (v70.__r_.__value_.__r.__words[0]) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        int v29 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
        *(_DWORD *)(a1 + 32) = v29;
        if (v29 != 15)
        {
          uint64_t v30 = *(void *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v70, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          std::string v69 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&__p, "value");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&v66, a1, 0xFu, (uint64_t)&__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&v66, (nlohmann::detail::exception *)&v67);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v30, (uint64_t)&v70, (uint64_t)&v67);
          v67.__vftable = (std::exception_vtbl *)off_26C211368;
          MEMORY[0x210558DD0](v68);
          std::exception::~exception(&v67);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
        }
        if (v77)
        {
          int v31 = (uint64_t **)&v63;
          int v32 = *a2;
          *a2 = 9;
          char v62 = v32;
          uint64_t v33 = *((void *)a2 + 1);
          *((void *)a2 + 1) = 0;
          uint64_t v63 = v33;
          goto LABEL_97;
        }
        if (*a2 == 9)
        {
          int v31 = (uint64_t **)&v61;
          *a2 = 0;
          char v60 = 9;
          uint64_t v34 = *((void *)a2 + 1);
          *((void *)a2 + 1) = 0;
          uint64_t v61 = v34;
          int v32 = 9;
LABEL_97:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v31, v32);
        }
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v72);
        return;
      case 0xE:
        uint64_t v27 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        std::string v66 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v64, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0, (uint64_t)&v64);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v27, (uint64_t)&v69, (uint64_t)&v67);
        goto LABEL_77;
      default:
        uint64_t v28 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v69, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        std::string v66 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v64, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0x10u, (uint64_t)&v64);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v66, (uint64_t)&__p, (nlohmann::detail::exception *)&v67);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v72, v28, (uint64_t)&v69, (uint64_t)&v67);
LABEL_77:
        v67.__vftable = (std::exception_vtbl *)off_26C211368;
        MEMORY[0x210558DD0](v68);
        std::exception::~exception(&v67);
        goto LABEL_78;
    }
  }
}

void sub_20D3F13BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,std::exception a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  nlohmann::detail::exception::~exception(&a35);
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a46) {
    operator delete(a46);
  }
  uint64_t v54 = *(void **)(v52 - 232);
  if (v54)
  {
    *(void *)(v52 - 224) = v54;
    operator delete(v54);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::~lexer(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 32))
  {
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1) != 239)
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::unget(a1);
      goto LABEL_7;
    }
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1) != 187
      || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1) != 191)
    {
      uint64_t v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
      goto LABEL_138;
    }
  }
  do
  {
LABEL_7:
    while (2)
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3 > 31)
      {
        if (v3 > 90)
        {
          if (v3 <= 109)
          {
            if (v3 == 91)
            {
              return 8;
            }
            else
            {
              if (v3 != 93)
              {
                if (v3 == 102)
                {
                  uint64_t v13 = 0;
                  while (aFalse_2[v13 + 1] == nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1))
                  {
                    if (++v13 == 4) {
                      return 2;
                    }
                  }
                }
                goto LABEL_132;
              }
              return 10;
            }
          }
          else
          {
            if (v3 <= 122)
            {
              if (v3 == 110)
              {
                LODWORD(v29) = 1819047278;
                uint64_t v21 = 1;
                while (*((unsigned __int8 *)&v29 + v21) == nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1))
                {
                  if (++v21 == 4) {
                    return 3;
                  }
                }
              }
              else if (v3 == 116)
              {
                LODWORD(v29) = 1702195828;
                uint64_t v12 = 1;
                while (*((unsigned __int8 *)&v29 + v12) == nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1))
                {
                  if (++v12 == 4) {
                    return 1;
                  }
                }
              }
              goto LABEL_132;
            }
            if (v3 == 123)
            {
              return 9;
            }
            else
            {
              if (v3 != 125) {
                goto LABEL_132;
              }
              return 11;
            }
          }
        }
        switch(v3)
        {
          case ' ':
            continue;
          case '""':
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::reset(a1);
            while (2)
            {
              uint64_t v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1)
                  + 1;
              uint64_t result = 4;
              uint64_t v2 = "invalid string: missing closing quote";
              switch(v15)
              {
                case 0:
                  goto LABEL_138;
                case 1:
                  uint64_t v2 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
                  goto LABEL_138;
                case 2:
                  uint64_t v2 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
                  goto LABEL_138;
                case 3:
                  uint64_t v2 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
                  goto LABEL_138;
                case 4:
                  uint64_t v2 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
                  goto LABEL_138;
                case 5:
                  uint64_t v2 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
                  goto LABEL_138;
                case 6:
                  uint64_t v2 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
                  goto LABEL_138;
                case 7:
                  uint64_t v2 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
                  goto LABEL_138;
                case 8:
                  uint64_t v2 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
                  goto LABEL_138;
                case 9:
                  uint64_t v2 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
                  goto LABEL_138;
                case 10:
                  uint64_t v2 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
                  goto LABEL_138;
                case 11:
                  uint64_t v2 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
                  goto LABEL_138;
                case 12:
                  uint64_t v2 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
                  goto LABEL_138;
                case 13:
                  uint64_t v2 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
                  goto LABEL_138;
                case 14:
                  uint64_t v2 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
                  goto LABEL_138;
                case 15:
                  uint64_t v2 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
                  goto LABEL_138;
                case 16:
                  uint64_t v2 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
                  goto LABEL_138;
                case 17:
                  uint64_t v2 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
                  goto LABEL_138;
                case 18:
                  uint64_t v2 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
                  goto LABEL_138;
                case 19:
                  uint64_t v2 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
                  goto LABEL_138;
                case 20:
                  uint64_t v2 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
                  goto LABEL_138;
                case 21:
                  uint64_t v2 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
                  goto LABEL_138;
                case 22:
                  uint64_t v2 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
                  goto LABEL_138;
                case 23:
                  uint64_t v2 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
                  goto LABEL_138;
                case 24:
                  uint64_t v2 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
                  goto LABEL_138;
                case 25:
                  uint64_t v2 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
                  goto LABEL_138;
                case 26:
                  uint64_t v2 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
                  goto LABEL_138;
                case 27:
                  uint64_t v2 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
                  goto LABEL_138;
                case 28:
                  uint64_t v2 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
                  goto LABEL_138;
                case 29:
                  uint64_t v2 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
                  goto LABEL_138;
                case 30:
                  uint64_t v2 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
                  goto LABEL_138;
                case 31:
                  uint64_t v2 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
                  goto LABEL_138;
                case 32:
                  uint64_t v2 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
                  goto LABEL_138;
                case 33:
                case 34:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                  LOBYTE(v16) = *(unsigned char *)(a1 + 16);
                  goto LABEL_59;
                case 35:
                  return result;
                case 93:
                  uint64_t v18 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
                  uint64_t v2 = "invalid string: forbidden character after backslash";
                  if (v18 <= 97)
                  {
                    switch(v18)
                    {
                      case '""':
                        LOBYTE(v16) = 34;
                        break;
                      case '/':
                        LOBYTE(v16) = 47;
                        break;
                      case '\\':
                        LOBYTE(v16) = 92;
                        break;
                      default:
                        goto LABEL_138;
                    }
LABEL_59:
                    std::string::push_back((std::string *)(a1 + 80), v16);
                    continue;
                  }
                  break;
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                case 224:
                  long long v29 = xmmword_20D6B4AB0;
                  char byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 2);
                  goto LABEL_62;
                case 225:
                  long long v29 = xmmword_20D6C77D0;
                  long long v30 = unk_20D6C77E0;
                  char byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 4);
                  goto LABEL_62;
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 239:
                case 240:
                  long long v29 = xmmword_20D6C77F0;
                  long long v30 = unk_20D6C7800;
                  char byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 4);
                  goto LABEL_62;
                case 238:
                  long long v29 = xmmword_20D6C7810;
                  long long v30 = unk_20D6C7820;
                  char byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 4);
                  goto LABEL_62;
                case 241:
                  long long v29 = xmmword_20D6C7830;
                  long long v30 = unk_20D6C7840;
                  long long v31 = xmmword_20D6C7850;
                  char byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 6);
                  goto LABEL_62;
                case 242:
                case 243:
                case 244:
                  long long v29 = xmmword_20D6C7860;
                  long long v30 = unk_20D6C7870;
                  long long v31 = xmmword_20D6C7880;
                  char byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 6);
                  goto LABEL_62;
                case 245:
                  long long v29 = xmmword_20D6C7890;
                  long long v30 = unk_20D6C78A0;
                  long long v31 = xmmword_20D6C78B0;
                  char byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 6);
LABEL_62:
                  if ((byte_in_range & 1) == 0) {
                    return 14;
                  }
                  continue;
                default:
                  uint64_t v2 = "invalid string: ill-formed UTF-8 byte";
                  goto LABEL_138;
              }
              break;
            }
            switch(v18)
            {
              case 'n':
                LOBYTE(v16) = 10;
                goto LABEL_59;
              case 'o':
              case 'p':
              case 'q':
              case 's':
                goto LABEL_138;
              case 'r':
                LOBYTE(v16) = 13;
                goto LABEL_59;
              case 't':
                LOBYTE(v16) = 9;
                goto LABEL_59;
              case 'u':
                unsigned int codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_codepoint(a1);
                unsigned int v16 = codepoint;
                if (codepoint == -1) {
                  goto LABEL_174;
                }
                if ((codepoint & 0xFFFFFC00) == 0xD800)
                {
                  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1) != 92
                    || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1) != 117)
                  {
                    goto LABEL_175;
                  }
                  unsigned int v20 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_codepoint(a1);
                  if (v20 == -1)
                  {
LABEL_174:
                    uint64_t v2 = "invalid string: '\\u' must be followed by 4 hex digits";
                    goto LABEL_138;
                  }
                  if (v20 >> 10 != 55)
                  {
LABEL_175:
                    uint64_t v2 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                    goto LABEL_138;
                  }
                  unsigned int v16 = v20 + (v16 << 10) - 56613888;
                }
                else
                {
                  if ((codepoint & 0xFFFFFC00) == 0xDC00)
                  {
                    uint64_t v2 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
                    goto LABEL_138;
                  }
                  if ((int)codepoint <= 127) {
                    goto LABEL_59;
                  }
                  if (codepoint <= 0x7FF)
                  {
                    std::string::push_back((std::string *)(a1 + 80), (codepoint >> 6) | 0xC0);
                    goto LABEL_91;
                  }
                  if (!HIWORD(codepoint))
                  {
                    std::string::push_back((std::string *)(a1 + 80), (codepoint >> 12) | 0xE0);
                    std::string::push_back((std::string *)(a1 + 80), (v16 >> 6) & 0x3F | 0x80);
                    LOBYTE(v16) = v16 & 0x3F | 0x80;
                    goto LABEL_59;
                  }
                }
                std::string::push_back((std::string *)(a1 + 80), (v16 >> 18) | 0xF0);
                std::string::push_back((std::string *)(a1 + 80), (v16 >> 12) & 0x3F | 0x80);
                std::string::push_back((std::string *)(a1 + 80), (v16 >> 6) & 0x3F | 0x80);
LABEL_91:
                LOBYTE(v16) = v16 & 0x3F | 0x80;
                goto LABEL_59;
              default:
                if (v18 == 98)
                {
                  LOBYTE(v16) = 8;
                }
                else
                {
                  if (v18 != 102) {
                    goto LABEL_138;
                  }
                  LOBYTE(v16) = 12;
                }
                goto LABEL_59;
            }
          case ',':
            return 13;
          case '-':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::reset(a1);
            uint64_t v6 = *(void *)(a1 + 16);
            if ((unint64_t)(v6 - 49) < 9)
            {
              int v7 = 5;
LABEL_18:
              int v8 = (std::string *)(a1 + 80);
              while (1)
              {
                std::string::push_back((std::string *)(a1 + 80), v6);
                uint64_t v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
                if ((unint64_t)(v9 - 48) >= 0xA) {
                  break;
                }
                uint64_t v6 = *(void *)(a1 + 16);
              }
              if (v9 != 46)
              {
                if (v9 == 69 || v9 == 101) {
                  goto LABEL_24;
                }
LABEL_122:
                nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::unget(a1);
                *(void *)&long long v29 = 0;
                *__error() = 0;
                if (v7 == 6)
                {
                  uint64_t v27 = (const char *)(a1 + 80);
                  if (*(char *)(a1 + 103) < 0) {
                    uint64_t v27 = *(const char **)v27;
                  }
                  uint64_t v28 = strtoll(v27, (char **)&v29, 10);
                  if (!*__error())
                  {
                    *(void *)(a1 + 112) = v28;
                    return 6;
                  }
                }
                else
                {
                  uint64_t v25 = (const char *)(a1 + 80);
                  if (*(char *)(a1 + 103) < 0) {
                    uint64_t v25 = *(const char **)v25;
                  }
                  unint64_t v26 = strtoull(v25, (char **)&v29, 10);
                  if (!*__error())
                  {
                    *(void *)(a1 + 120) = v26;
                    return 5;
                  }
                }
LABEL_119:
                int v24 = (const char *)(a1 + 80);
                if (*(char *)(a1 + 103) < 0) {
                  int v24 = *(const char **)v24;
                }
                *(double *)(a1 + 128) = strtod(v24, (char **)&v29);
                return 7;
              }
              goto LABEL_113;
            }
            if (v6 == 48)
            {
              std::string::push_back((std::string *)(a1 + 80), 48);
              int v7 = 5;
            }
            else
            {
              if (v6 == 45) {
                std::string::push_back((std::string *)(a1 + 80), 45);
              }
              uint64_t v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
              if ((unint64_t)(v14 - 49) < 9)
              {
                uint64_t v6 = *(void *)(a1 + 16);
                int v7 = 6;
                goto LABEL_18;
              }
              if (v14 != 48)
              {
                uint64_t v2 = "invalid number; expected digit after '-'";
                goto LABEL_138;
              }
              std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 16));
              int v7 = 6;
            }
            uint64_t v22 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
            if (v22 == 101 || v22 == 69)
            {
              int v8 = (std::string *)(a1 + 80);
              goto LABEL_24;
            }
            if (v22 != 46) {
              goto LABEL_122;
            }
            int v8 = (std::string *)(a1 + 80);
LABEL_113:
            std::string::push_back(v8, *(unsigned char *)(a1 + 136));
            if ((unint64_t)(nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1)
                                  - 48) > 9)
            {
              uint64_t v2 = "invalid number; expected digit after '.'";
              goto LABEL_138;
            }
            int v8 = (std::string *)(a1 + 80);
            do
            {
              std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 16));
              uint64_t v23 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
            }
            while ((unint64_t)(v23 - 48) < 0xA);
            if (v23 != 101 && v23 != 69)
            {
LABEL_118:
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::unget(a1);
              *(void *)&long long v29 = 0;
              *__error() = 0;
              goto LABEL_119;
            }
LABEL_24:
            std::string::push_back(v8, *(unsigned char *)(a1 + 16));
            uint64_t v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
            if ((unint64_t)(v10 - 48) >= 0xA)
            {
              if (v10 != 45 && v10 != 43)
              {
                uint64_t v2 = "invalid number; expected '+', '-', or digit after exponent";
                goto LABEL_138;
              }
              int v11 = (std::string *)(a1 + 80);
              std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 16));
              if ((unint64_t)(nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1)
                                    - 48) >= 0xA)
              {
                uint64_t v2 = "invalid number; expected digit after exponent sign";
                goto LABEL_138;
              }
            }
            else
            {
              int v11 = (std::string *)(a1 + 80);
            }
            std::string::push_back(v11, *(unsigned char *)(a1 + 16));
            while ((unint64_t)(nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1)
                                     - 48) <= 9)
              std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 16));
            goto LABEL_118;
          case ':':
            return 12;
          default:
            goto LABEL_132;
        }
      }
      break;
    }
  }
  while ((unint64_t)(v3 - 9) < 2 || v3 == 13);
  if ((unint64_t)(v3 + 1) < 2) {
    return 15;
  }
LABEL_132:
  uint64_t v2 = "invalid literal";
LABEL_138:
  *(void *)(a1 + 104) = v2;
  return 14;
}

void sub_20D3F2200(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(std::string *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    int v4 = a2;
    do
    {
      unsigned int v6 = *v4;
      if (v6 > 0x1F)
      {
        std::string::push_back(this, v6);
      }
      else
      {
        char v8 = 0;
        *(void *)std::exception __str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v6);
        std::string::append(this, __str);
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_20D3F2738(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(std::string *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(a1, "syntax error ");
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v38, " ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v40 = v9->__r_.__value_.__r.__words[2];
    long long v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      int v11 = (const std::string::value_type *)&v39;
    }
    else {
      int v11 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v12 = HIBYTE(v40);
    }
    else {
      std::string::size_type v12 = *((void *)&v39 + 1);
    }
    std::string::append(a1, v11, v12);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  std::string::append(a1, "- ");
  uint64_t v13 = *(unsigned int *)(a2 + 32);
  if (v13 == 14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, *(char **)(a2 + 144));
    uint64_t v14 = std::string::append(&v36, "; last read: '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&__p, *(unsigned __int8 **)(a2 + 96), *(unsigned __int8 **)(a2 + 104));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    unsigned int v20 = std::string::append(&v38, "'");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t v40 = v20->__r_.__value_.__r.__words[2];
    long long v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v22 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v22 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v23 = HIBYTE(v40);
    }
    else {
      std::string::size_type v23 = *((void *)&v39 + 1);
    }
    std::string::append(a1, v22, v23);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      int v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_52;
    }
LABEL_49:
    if (!a3) {
      return;
    }
    goto LABEL_53;
  }
  if (v13 > 0x10) {
    uint64_t v25 = "unknown token";
  }
  else {
    uint64_t v25 = off_264113E30[v13];
  }
  std::string::basic_string[abi:ne180100]<0>(&v38, v25);
  unint64_t v26 = std::string::insert(&v38, 0, "unexpected ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t v40 = v26->__r_.__value_.__r.__words[2];
  long long v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    uint64_t v28 = (const std::string::value_type *)&v39;
  }
  else {
    uint64_t v28 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v29 = HIBYTE(v40);
  }
  else {
    std::string::size_type v29 = *((void *)&v39 + 1);
  }
  std::string::append(a1, v28, v29);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_49;
  }
  int v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_52:
  operator delete(v24);
  if (!a3) {
    return;
  }
LABEL_53:
  if (a3 > 0x10) {
    long long v30 = "unknown token";
  }
  else {
    long long v30 = off_264113E30[a3];
  }
  std::string::basic_string[abi:ne180100]<0>(&v38, v30);
  long long v31 = std::string::insert(&v38, 0, "; expected ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t v40 = v31->__r_.__value_.__r.__words[2];
  long long v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    uint64_t v33 = (const std::string::value_type *)&v39;
  }
  else {
    uint64_t v33 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v34 = HIBYTE(v40);
  }
  else {
    std::string::size_type v34 = *((void *)&v39 + 1);
  }
  std::string::append(a1, v33, v34);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_20D3F2AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get(unsigned __int8 **a1)
{
  *((int64x2_t *)a1 + 2) = vaddq_s64(*((int64x2_t *)a1 + 2), vdupq_n_s64(1uLL));
  if (*((unsigned char *)a1 + 24))
  {
    *((unsigned char *)a1 + 24) = 0;
    uint64_t v2 = (uint64_t)a1[2];
  }
  else
  {
    uint64_t v3 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v2 = -1;
    }
    else
    {
      uint64_t v2 = *v3;
      *a1 = v3 + 1;
    }
    a1[2] = (unsigned __int8 *)v2;
  }
  if (v2 == -1) {
    return -1;
  }
  char v5 = a1[8];
  unint64_t v4 = (unint64_t)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    int v7 = a1 + 7;
    unint64_t v8 = (unint64_t)a1[7];
    uint64_t v9 = &v5[-v8];
    uint64_t v10 = (uint64_t)&v5[-v8 + 1];
    if (v10 < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v4 - v8;
    if (2 * v11 > v10) {
      uint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (unsigned __int8 *)operator new(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[v12];
    v9[(void)v13] = v2;
    uint64_t v6 = (uint64_t)&v9[(void)v13 + 1];
    if (v5 == (unsigned __int8 *)v8)
    {
      uint64_t v13 = &v9[(void)v13];
    }
    else
    {
      long long v15 = &v5[~v8];
      do
      {
        unsigned __int8 v16 = *--v5;
        (v15--)[(void)v13] = v16;
      }
      while (v5 != (unsigned __int8 *)v8);
      char v5 = *v7;
    }
    a1[7] = v13;
    a1[8] = (unsigned __int8 *)v6;
    a1[9] = v14;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    unsigned __int8 *v5 = v2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[8] = (unsigned __int8 *)v6;
  uint64_t result = (uint64_t)a1[2];
  if (result == 10)
  {
    uint64_t v18 = (uint64_t)(a1[6] + 1);
    a1[5] = 0;
    a1[6] = (unsigned __int8 *)v18;
  }
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::reset(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    **(unsigned char **)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 103) = 0;
  }
  uint64_t v2 = *(unsigned char **)(a1 + 56);
  *(void *)(a1 + 64) = v2;
  char v3 = *(unsigned char *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 72);
  if ((unint64_t)v2 >= v4)
  {
    unint64_t v6 = v4 - (void)v2;
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v8 = v7;
    }
    uint64_t v9 = operator new(v8);
    unsigned char *v9 = v3;
    char v5 = v9 + 1;
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v9 + 1;
    *(void *)(a1 + 72) = &v9[v8];
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    unsigned char *v2 = v3;
    char v5 = v2 + 1;
  }
  *(void *)(a1 + 64) = v5;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::unget(uint64_t result)
{
  uint64_t v1 = (void *)(result + 40);
  uint64_t v2 = *(void *)(result + 40);
  *(unsigned char *)(result + 24) = 1;
  --*(void *)(result + 32);
  if (v2 || (v1 = (void *)(result + 48), (uint64_t v2 = *(void *)(result + 48)) != 0)) {
    void *v1 = v2 - 1;
  }
  if (*(void *)(result + 16) != -1) {
    --*(void *)(result + 64);
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_codepoint(uint64_t a1)
{
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v8 = xmmword_20D609300;
  while (1)
  {
    int v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
    uint64_t v5 = *(void *)(a1 + 16);
    if ((unint64_t)(v5 - 48) >= 0xA) {
      break;
    }
    int v6 = -48;
LABEL_8:
    uint64_t v3 = (((v6 + v5) << v4) + v3);
    v2 += 4;
    if (v2 == 16) {
      return v3;
    }
  }
  if ((unint64_t)(v5 - 65) < 6)
  {
    int v6 = -55;
    goto LABEL_8;
  }
  if ((unint64_t)(v5 - 97) <= 5)
  {
    int v6 = -87;
    goto LABEL_8;
  }
  return 0xFFFFFFFFLL;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  int v6 = (std::string *)(a1 + 80);
  std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 16));
  if (!a3) {
    return 1;
  }
  uint64_t v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
    unint64_t v8 = *(void *)(a1 + 16);
    if (*a2 > v8 || v8 > a2[1]) {
      break;
    }
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7) {
      return 1;
    }
  }
  uint64_t result = 0;
  *(void *)(a1 + 104) = "invalid string: ill-formed UTF-8 byte";
  return result;
}

void VoiceConfigDirectory::get_subconfig(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, v7, &v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  std::__fs::filesystem::__status(&v12, &__ec);
  if (__p.__r_.__value_.__s.__data_[0] != 2) {
    goto LABEL_8;
  }
  unint64_t v8 = (std::__shared_weak_count *)operator new(0x38uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_26C2163D0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)off_26C201700;
  v8[1].__shared_owners_ = 0;
  v8[1].__shared_weak_owners_ = 0;
  v8[2].__vftable = 0;
  *a4 = v8 + 1;
  a4[1] = v8;
  VoiceConfigImpl::add_search_dir((VoiceConfigImpl *)&v8[1], &v12);
  ((void (*)(std::string *__return_ptr, std::__shared_weak_count *, uint64_t, void))v8[1].__on_zero_shared)(&__p, &v8[1], 1717790311, 0);
  std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (!v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_8:
    VoiceConfig::get_subconfig((uint64_t)a2, a3, a4);
  }
  if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_20D3F30F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<VoiceConfigImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<VoiceConfigImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2163D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<VoiceConfigImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2163D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void VoiceConfigDirectory::get_locale_prefix_path(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string::size_type a3@<X2>, const void **a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10) {
    goto LABEL_33;
  }
  if (*((char *)a4 + 23) >= 0) {
    size_t v12 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v12 = (size_t)a4[1];
  }
  if (v12)
  {
    uint64_t v13 = &v51;
    std::string::basic_string[abi:ne180100]((uint64_t)&v51, v12 + 1);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v13 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v14 = a4;
    }
    else {
      uint64_t v14 = *a4;
    }
    memmove(v13, v14, v12);
    *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 95;
    int v15 = *(char *)(a3 + 23);
    if (v15 >= 0) {
      unsigned __int8 v16 = (const std::string::value_type *)a3;
    }
    else {
      unsigned __int8 v16 = *(const std::string::value_type **)a3;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(a3 + 8);
    }
    uint64_t v18 = std::string::append(&v51, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
  }
  else if (v11 < 0)
  {
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    std::string v49 = *(std::string *)a3;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v51, (char *)&v49);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v51, a1 + 8, &v48);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status(&v48, &__ec);
  if (!v51.__r_.__value_.__s.__data_[0]
    || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), !v51.__r_.__value_.__s.__data_[0])
    || v51.__r_.__value_.__s.__data_[0] == 255)
  {
    if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
LABEL_33:
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unsigned int v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      name_from_id(&v49, a2);
      long long v21 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v49
          : (std::string *)v49.__r_.__value_.__r.__words[0];
      std::string::size_type v22 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
      std::string::size_type v23 = *((char *)a4 + 23) >= 0 ? (std::string *)a4 : (std::string *)*a4;
      LODWORD(v51.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      WORD2(v51.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = v22;
      HIWORD(v51.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v52 = v23;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
    }
    name_from_id(&v51, a2);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v25 = &v51;
    }
    else {
      uint64_t v25 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a3 + 23) >= 0) {
      std::string::size_type v26 = a3;
    }
    else {
      std::string::size_type v26 = *(void *)a3;
    }
    if (*((char *)a4 + 23) >= 0) {
      long long v27 = a4;
    }
    else {
      long long v27 = *a4;
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    a5->__r_.__value_.__r.__words[0] = 0;
    a5->__r_.__value_.__l.__size_ = 0;
    a5->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id(&v47, a2);
    int v29 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
    std::string::size_type v30 = v47.__r_.__value_.__r.__words[0];
    int v31 = *(char *)(a3 + 23);
    std::string::size_type v32 = *(void *)a3;
    symbol_name_from_id(&__p, a2);
    if (v31 >= 0) {
      std::string::size_type v33 = a3;
    }
    else {
      std::string::size_type v33 = v32;
    }
    uint64_t v34 = &v47;
    if (v29 < 0) {
      uint64_t v34 = (std::string *)v30;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::string v36 = &v48;
    if ((v48.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v36 = (std::__fs::filesystem::path *)v48.__pn_.__r_.__value_.__r.__words[0];
    }
    LODWORD(v51.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
    WORD2(v51.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = v33;
    HIWORD(v51.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v52 = p_p;
    __int16 v53 = 2080;
    uint64_t v54 = v36;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
  }
  name_from_id(&v51, a2);
  int v37 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
  std::string::size_type v38 = v51.__r_.__value_.__r.__words[0];
  int v39 = *(char *)(a3 + 23);
  std::string::size_type v40 = *(void *)a3;
  symbol_name_from_id(&v47, a2);
  if (v39 >= 0) {
    std::string::size_type v42 = a3;
  }
  else {
    std::string::size_type v42 = v40;
  }
  uint64_t v43 = &v51;
  if (v37 < 0) {
    uint64_t v43 = (std::string *)v38;
  }
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v44 = &v47;
  }
  else {
    uint64_t v44 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  uint64_t v45 = &v48;
  if ((v48.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v45 = (std::__fs::filesystem::path *)v48.__pn_.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a5, v48.__pn_.__r_.__value_.__l.__data_, v48.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::__fs::filesystem::path *)a5 = v48;
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
}

void sub_20D3F3718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void VoiceConfigDirectory::get_locale_path(uint64_t a1@<X0>, unsigned int a2@<W1>, const void **a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  file_name_from_id(&__s, a2);
  std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __s.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
LABEL_33:
    name_from_id(&v59, a2);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    std::string __s = v59;
    std::string::size_type v16 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v16 = __s.__r_.__value_.__l.__size_;
    }
    if (!v16) {
      goto LABEL_94;
    }
    if (*((char *)a3 + 23) >= 0) {
      size_t v17 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v17 = (size_t)a3[1];
    }
    if (v17)
    {
      uint64_t v18 = &v59;
      std::string::basic_string[abi:ne180100]((uint64_t)&v59, v17 + 1);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v18 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if (*((char *)a3 + 23) >= 0) {
        long long v19 = a3;
      }
      else {
        long long v19 = *a3;
      }
      memmove(v18, v19, v17);
      *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 95;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_s = &__s;
      }
      else {
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = __s.__r_.__value_.__l.__size_;
      }
      std::string::size_type v22 = std::string::append(&v59, (const std::string::value_type *)p_s, v21);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
    }
    else if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, __s.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
    }
    else
    {
      std::string v61 = __s;
    }
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v59, (char *)&v61);
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v59, a1 + 8, &v56);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::__status(&v56, &__ec);
    if (!v59.__r_.__value_.__s.__data_[0]
      || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), !v59.__r_.__value_.__s.__data_[0])
      || v59.__r_.__value_.__s.__data_[0] == 255)
    {
      if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
LABEL_94:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      std::string v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        name_from_id(&v59, a2);
        int v37 = (v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v59
            : (std::string *)v59.__r_.__value_.__r.__words[0];
        std::string::size_type v38 = *((char *)a3 + 23) >= 0 ? (std::string::size_type)a3 : (std::string::size_type)*a3;
        LODWORD(v61.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
        WORD2(v61.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v61.__r_.__value_.__r.__words[1] + 6) = v38;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
      }
      name_from_id(&v59, a2);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v40 = &v59;
      }
      else {
        std::string::size_type v40 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v41 = a3;
      }
      else {
        uint64_t v41 = *a3;
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      a4->__r_.__value_.__r.__words[0] = 0;
      a4->__r_.__value_.__l.__size_ = 0;
      a4->__r_.__value_.__r.__words[2] = 0;
      goto LABEL_114;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::string::size_type v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      name_from_id(&v55, a2);
      int v43 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
      std::string::size_type v44 = v55.__r_.__value_.__r.__words[0];
      symbol_name_from_id(&__p, a2);
      uint64_t v45 = &v55;
      if (v43 < 0) {
        uint64_t v45 = (std::string *)v44;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      std::string v47 = &v56;
      if ((v56.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v47 = (std::__fs::filesystem::path *)v56.__pn_.__r_.__value_.__r.__words[0];
      }
      LODWORD(v59.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
      WORD2(v59.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
      HIWORD(v59.__r_.__value_.__r.__words[2]) = 2080;
      char v60 = v47;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
    }
    name_from_id(&v59, a2);
    int v48 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
    std::string::size_type v49 = v59.__r_.__value_.__r.__words[0];
    symbol_name_from_id(&v55, a2);
    std::string v51 = &v59;
    if (v48 < 0) {
      std::string v51 = (std::string *)v49;
    }
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v52 = &v55;
    }
    else {
      uint64_t v52 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    __int16 v53 = &v56;
    if ((v56.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v53 = (std::__fs::filesystem::path *)v56.__pn_.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_143;
    }
LABEL_144:
    std::string::__init_copy_ctor_external(a4, v56.__pn_.__r_.__value_.__l.__data_, v56.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__pn_.__r_.__value_.__l.__data_);
    }
    goto LABEL_146;
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v9 = (size_t)a3[1];
  }
  if (v9)
  {
    uint64_t v10 = &v59;
    std::string::basic_string[abi:ne180100]((uint64_t)&v59, v9 + 1);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v10 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a3 + 23) >= 0) {
      int v11 = a3;
    }
    else {
      int v11 = *a3;
    }
    memmove(v10, v11, v9);
    *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 95;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v12 = &__s;
    }
    else {
      size_t v12 = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = __s.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = std::string::append(&v59, (const std::string::value_type *)v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  else if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v61, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else
  {
    std::string v61 = __s;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v59, (char *)&v61);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v59, a1 + 8, &v56);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status(&v56, &__ec);
  if (!v59.__r_.__value_.__s.__data_[0]
    || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), !v59.__r_.__value_.__s.__data_[0])
    || v59.__r_.__value_.__s.__data_[0] == 255)
  {
    if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    goto LABEL_33;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v24 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id(&v55, a2);
    int v25 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
    std::string::size_type v26 = v55.__r_.__value_.__r.__words[0];
    symbol_name_from_id(&__p, a2);
    long long v27 = &v55;
    if (v25 < 0) {
      long long v27 = (std::string *)v26;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = &__p;
    }
    else {
      uint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v29 = &v56;
    if ((v56.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v29 = (std::__fs::filesystem::path *)v56.__pn_.__r_.__value_.__r.__words[0];
    }
    LODWORD(v59.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
    WORD2(v59.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
    HIWORD(v59.__r_.__value_.__r.__words[2]) = 2080;
    char v60 = v29;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
  }
  name_from_id(&v59, a2);
  int v30 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
  std::string::size_type v31 = v59.__r_.__value_.__r.__words[0];
  symbol_name_from_id(&v55, a2);
  std::string::size_type v33 = &v59;
  if (v30 < 0) {
    std::string::size_type v33 = (std::string *)v31;
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v34 = &v55;
  }
  else {
    uint64_t v34 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  uint64_t v35 = &v56;
  if ((v56.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v35 = (std::__fs::filesystem::path *)v56.__pn_.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_144;
  }
LABEL_143:
  *(std::__fs::filesystem::path *)a4 = v56;
LABEL_146:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
LABEL_114:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_20D3F4000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void VoiceConfigDirectory::get_prefix_path(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string::size_type a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (!v8) {
    goto LABEL_11;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)a3);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, a1 + 8, &v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status(&v29, &__ec);
  if (!__p.__r_.__value_.__s.__data_[0]
    || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), !__p.__r_.__value_.__s.__data_[0])
    || __p.__r_.__value_.__s.__data_[0] == 255)
  {
    if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__pn_.__r_.__value_.__l.__data_);
    }
LABEL_11:
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  size_t v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id(&v28, a2);
    int v10 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = v28.__r_.__value_.__r.__words[0];
    int v12 = *(char *)(a3 + 23);
    std::string::size_type v13 = *(void *)a3;
    symbol_name_from_id(&v27, a2);
    if (v12 >= 0) {
      std::string::size_type v14 = a3;
    }
    else {
      std::string::size_type v14 = v13;
    }
    long long v15 = &v28;
    if (v10 < 0) {
      long long v15 = (std::string *)v11;
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = &v27;
    }
    else {
      std::string::size_type v16 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    size_t v17 = &v29;
    if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v17 = (std::__fs::filesystem::path *)v29.__pn_.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v14;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v32 = v16;
    __int16 v33 = 2080;
    uint64_t v34 = v17;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  name_from_id(&__p, a2);
  int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
  int v20 = *(char *)(a3 + 23);
  std::string::size_type v21 = *(void *)a3;
  symbol_name_from_id(&v28, a2);
  if (v20 >= 0) {
    std::string::size_type v23 = a3;
  }
  else {
    std::string::size_type v23 = v21;
  }
  p_p = &__p;
  if (v18 < 0) {
    p_p = (std::string *)v19;
  }
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v25 = &v28;
  }
  else {
    int v25 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v26 = &v29;
  if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v26 = (std::__fs::filesystem::path *)v29.__pn_.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a4, v29.__pn_.__r_.__value_.__l.__data_, v29.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::__fs::filesystem::path *)a4 = v29;
  }
}

void sub_20D3F4408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VoiceConfigDirectory::get_path(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  file_name_from_id(&v34, a2);
  std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v34.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&buf, (char *)&v34);
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&buf, a1 + 8, &v33);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::__status(&v33, &__ec);
    if (buf.__r_.__value_.__s.__data_[0])
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      if (buf.__r_.__value_.__s.__data_[0])
      {
        if (buf.__r_.__value_.__s.__data_[0] != 255)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          std::string::size_type v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            name_from_id(&__p, a2);
            int v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
            symbol_name_from_id(&v31, a2);
            p_p = &__p;
            if (v20 < 0) {
              p_p = (std::string *)v21;
            }
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v23 = &v31;
            }
            else {
              std::string::size_type v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
            }
            int v24 = &v33;
            if ((v33.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v24 = (std::__fs::filesystem::path *)v33.__pn_.__r_.__value_.__r.__words[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v23;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
            int v37 = v24;
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v31.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          name_from_id(&buf, a2);
          int v25 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
          std::string::size_type v26 = buf.__r_.__value_.__r.__words[0];
          symbol_name_from_id(&__p, a2);
          p_std::string buf = &buf;
          if (v25 < 0) {
            p_std::string buf = (std::string *)v26;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::__fs::filesystem::path v29 = &__p;
          }
          else {
            std::__fs::filesystem::path v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v30 = &v33;
          if ((v33.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v30 = (std::__fs::filesystem::path *)v33.__pn_.__r_.__value_.__r.__words[0];
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            *(std::__fs::filesystem::path *)a3 = v33;
            goto LABEL_21;
          }
          goto LABEL_78;
        }
      }
    }
    if (SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__pn_.__r_.__value_.__l.__data_);
    }
  }
  name_from_id(&__p, a2);
  std::string buf = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&buf, a1 + 8, &v33);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status(&v33, &__ec);
  if (!buf.__r_.__value_.__s.__data_[0]
    || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), !buf.__r_.__value_.__s.__data_[0])
    || buf.__r_.__value_.__s.__data_[0] == 255)
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_19;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id(&__p, a2);
    int v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
    symbol_name_from_id(&v31, a2);
    int v10 = &__p;
    if (v8 < 0) {
      int v10 = (std::string *)v9;
    }
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v11 = &v31;
    }
    else {
      std::string::size_type v11 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    int v12 = &v33;
    if ((v33.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v12 = (std::__fs::filesystem::path *)v33.__pn_.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    int v37 = v12;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  name_from_id(&buf, a2);
  int v13 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  std::string::size_type v14 = buf.__r_.__value_.__r.__words[0];
  symbol_name_from_id(&__p, a2);
  std::string::size_type v16 = &buf;
  if (v13 < 0) {
    std::string::size_type v16 = (std::string *)v14;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v17 = &__p;
  }
  else {
    size_t v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v18 = &v33;
  if ((v33.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v18 = (std::__fs::filesystem::path *)v33.__pn_.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *(std::__fs::filesystem::path *)a3 = v33;
    goto LABEL_19;
  }
LABEL_78:
  std::string::__init_copy_ctor_external(a3, v33.__pn_.__r_.__value_.__l.__data_, v33.__pn_.__r_.__value_.__l.__size_);
LABEL_19:
  if (SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__pn_.__r_.__value_.__l.__data_);
  }
LABEL_21:
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_20D3F49B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

double VoiceConfigDirectory::get_broker_data@<D0>(VoiceConfigDirectory *this@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v24, (char *)this + 8);
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  memset(&__dst, 0, sizeof(__dst));
  std::string::append[abi:ne180100]<char const*,0>(&__dst, "broker.hdr", "");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v24, &v22);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status(&v22, &__ec);
  if (__dst.__r_.__value_.__s.__data_[0])
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    if (__dst.__r_.__value_.__s.__data_[0])
    {
      if (__dst.__r_.__value_.__s.__data_[0] != 255) {
        goto LABEL_16;
      }
    }
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(&__p.__pn_, "broker.hdr.asset");
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&v24, (std::__fs::filesystem::path *)&__dst);
  if (SHIBYTE(v22.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__pn_.__r_.__value_.__l.__data_);
  }
  v22.__pn_ = __dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status(&v22, &__ec);
  if (__dst.__r_.__value_.__s.__data_[0])
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    if (__dst.__r_.__value_.__s.__data_[0])
    {
      if (__dst.__r_.__value_.__s.__data_[0] != 255)
      {
LABEL_16:
        if (SHIBYTE(v22.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&pn, v22.__pn_.__r_.__value_.__l.__data_, v22.__pn_.__r_.__value_.__l.__size_);
        }
        else {
          puint64_t n = v22.__pn_;
        }
        goto LABEL_59;
      }
    }
  }
  MEMORY[0x210559330](&v19, &v24, 0, 0);
  uint64_t v3 = v19;
  int v4 = v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = v20;
    v18.__imp_.__ptr_ = v3;
    v18.__imp_.__cntrl_ = v4;
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    v18.__imp_.__ptr_ = v19;
    v18.__imp_.__cntrl_ = 0;
  }
  while (v18.__imp_.__ptr_)
  {
    int v6 = std::__fs::filesystem::directory_iterator::__dereference(&v18);
    if (SHIBYTE(v6->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p.__pn_, v6->__p_.__pn_.__r_.__value_.__l.__data_, v6->__p_.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      __p.__pn_ = (std::__fs::filesystem::path::string_type)v6->__p_;
    }
    std::__fs::filesystem::path::__string_view v7 = std::__fs::filesystem::path::__extension(&__p);
    if (v7.__size_ >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v7.__size_ >= 0x17)
    {
      std::basic_string_view<_CharT, _Traits>::size_type v9 = (v7.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7.__size_ | 7) != 0x17) {
        std::basic_string_view<_CharT, _Traits>::size_type v9 = v7.__size_ | 7;
      }
      std::basic_string_view<_CharT, _Traits>::size_type v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v7.__size_;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_30:
      memmove(p_dst, v7.__data_, v7.__size_);
      goto LABEL_31;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7.__size_;
    p_dst = &__dst;
    if (v7.__size_) {
      goto LABEL_30;
    }
LABEL_31:
    p_dst->__r_.__value_.__s.__data_[v7.__size_] = 0;
    v17.__pn_ = __dst;
    memset(&__dst, 0, sizeof(__dst));
    std::string::append[abi:ne180100]<char const*,0>(&__dst, ".hdr", "");
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v11.__data_ = (const std::string_view::value_type *)&__dst;
    }
    else {
      v11.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v11.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      v11.__size_ = __dst.__r_.__value_.__l.__size_;
    }
    int v12 = std::__fs::filesystem::path::__compare(&v17, v11);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__pn_.__r_.__value_.__l.__data_);
    }
    if (!v12)
    {
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        puint64_t n = __p.__pn_;
      }
      if (v18.__imp_.__cntrl_) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18.__imp_.__cntrl_);
      }
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      goto LABEL_59;
    }
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::directory_iterator::__increment(&v18, 0);
  }
  if (v18.__imp_.__cntrl_) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18.__imp_.__cntrl_);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  memset(&pn, 0, sizeof(pn));
LABEL_59:
  if (SHIBYTE(v22.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  std::string::size_type size = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  char v14 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = pn.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    MemoryMap::MemoryMap((std::__shared_weak_count **)a2, (uint64_t)&pn);
    if ((*((unsigned char *)&pn.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_67;
    }
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    if (v14 < 0) {
LABEL_67:
    }
      operator delete(pn.__r_.__value_.__l.__data_);
  }
  return result;
}

void sub_20D3F4E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v39 - 105) < 0) {
    operator delete(*(void **)(v39 - 128));
  }
  _Unwind_Resume(exception_object);
}