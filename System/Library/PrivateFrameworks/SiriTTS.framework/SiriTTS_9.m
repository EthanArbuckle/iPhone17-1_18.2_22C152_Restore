uint64_t *BET3FLT__rand31pmc_seedi(uint64_t *result, unint64_t a2)
{
  uint64_t v2;

  if (a2 <= 1) {
    v2 = 1;
  }
  else {
    v2 = a2;
  }
  *result = v2;
  return result;
}

float rand31pmc_ranf(unint64_t *a1)
{
  unint64_t v1 = ((1101463552 * (*a1 >> 16)) & 0x7FFF0000)
     + 16807 * (unsigned __int16)*a1
     + ((16807 * (*a1 >> 16)) >> 15);
  if (v1 >> 31) {
    v1 -= 0x7FFFFFFFLL;
  }
  *a1 = v1;
  return (float)v1;
}

uint64_t BET3FLT__MFVSyn__setVolumeBoost(uint64_t a1, float a2)
{
  if (a2 >= 0.0)
  {
    BOOL v3 = a2 == 2.0;
    BOOL v2 = a2 >= 2.0;
  }
  else
  {
    BOOL v2 = 1;
    BOOL v3 = 0;
  }
  if (!v3 && v2) {
    return 2164269071;
  }
  uint64_t result = 0;
  *(float *)(a1 + 56) = a2;
  return result;
}

uint64_t BET3FLT__MFVSyn__setMVFBoost(uint64_t a1, float a2)
{
  if (a2 >= 0.0)
  {
    BOOL v3 = a2 == 2.0;
    BOOL v2 = a2 >= 2.0;
  }
  else
  {
    BOOL v2 = 1;
    BOOL v3 = 0;
  }
  if (!v3 && v2) {
    return 2164269071;
  }
  uint64_t result = 0;
  *(float *)(a1 + 52) = a2;
  return result;
}

uint64_t MFVSyn__setRateTtsEg(uint64_t a1, int a2)
{
  uint64_t v2 = 2164269071;
  if (a2 >= 400) {
    int v3 = 400;
  }
  else {
    int v3 = a2;
  }
  if (v3 <= 50) {
    int v4 = 50;
  }
  else {
    int v4 = v3;
  }
  if ((a2 - 401) >= 0xFFFFFEA1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 2164269071;
  }
  float v6 = 100.0 / (float)v4;
  float v7 = 0.01;
  if (v6 >= 0.01)
  {
    float v7 = 100.0 / (float)v4;
    if (v6 > 4.0) {
      float v7 = 4.0;
    }
  }
  if (v7 > 0.0 && v7 <= 4.0)
  {
    *(float *)(a1 + 60) = v7;
    return v5;
  }
  return v2;
}

float BET3FLT__MFVSyn__setPitchLevelPercent(uint64_t a1, float result)
{
  if (result >= 50.0 && result <= 200.0)
  {
    uint64_t result = result / 100.0;
    *(float *)(a1 + 64) = result;
  }
  return result;
}

uint64_t *BET3FLT__MFVSyn__construct(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 604) = 0;
  *(void *)(a1 + 584) = 0;
  uint64_t result = BET3FLT__rand_num_init((uint64_t *)(a1 + 88));
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 74))
  {
    *(void *)(a1 + 688) = 0;
    *(void *)(a1 + 664) = 0;
    *(void *)(a1 + 640) = 0;
    *(void *)(a1 + 616) = 0;
  }
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 416) = 0;
  return result;
}

void *BET3FLT__MFVSyn__deconstruct(uint64_t a1)
{
  BET3FLT__vect_t__deleteVect((void *)(a1 + 760));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 720));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 520));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 576));
  BET3FLT__MFVSyn__mlsa_filter_deinit(a1);
  BET3FLT__vect_t__deleteVect((void *)(a1 + 176));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 216));
  if (!*(unsigned char *)(a1 + 74))
  {
    BET3FLT__vect_t__deleteVect((void *)(a1 + 608));
    BET3FLT__vect_t__deleteVect((void *)(a1 + 632));
  }
  BET3FLT__vect_t__deleteVect((void *)(a1 + 656));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 680));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 144));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 96));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 120));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 408));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 432));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 456));
  return BET3FLT__vect_t__deleteVect((void *)(a1 + 488));
}

uint64_t BET3FLT__MFVSyn__init__MVF_Synthesis(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, int a5, int a6, float a7, float a8, float a9)
{
  *(void *)a2 = a1;
  long long v14 = *a3;
  long long v15 = a3[1];
  *(_OWORD *)(a2 + 68) = a3[2];
  *(_OWORD *)(a2 + 52) = v15;
  *(_OWORD *)(a2 + 36) = v14;
  *(_DWORD *)(a2 + 200) = a6;
  *(_DWORD *)(a2 + 204) = a6;
  v16 = (float *)(a2 + 32);
  BET3FLT__wave_t__setSampleRateHz((float *)(a2 + 32), a9);
  BET3FLT__MFVSyn__construct(a2);
  *(float *)(a2 + 68) = BET3FLT__wave_t__convertFromMsecToTp(v16, (float)a5);
  if (*(unsigned char *)(a2 + 74))
  {
    uint64_t ExcTable = BET3FLT__MFVSyn__loadExcTable(a2, a4);
    if ((ExcTable & 0x80000000) != 0) {
      return ExcTable;
    }
  }
  *(_DWORD *)(a2 + 600) = 0;
  double v18 = BET3FLT__wave_t__convertFromF0ToTp(v16, 250.0);
  *(_DWORD *)(a2 + 512) = (int)*(float *)&v18;
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 520, 4);
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  v_set(*(float **)(a2 + 528), *(_DWORD *)(a2 + 540), 1.0);
  v_scale(*(float **)(a2 + 528), *(_DWORD *)(a2 + 540), (float)*(int *)(a2 + 512));
  *(_DWORD *)(a2 + 544) = 0;
  *(_DWORD *)(a2 + 168) = (int)BET3FLT__wave_t__sampleRateHz((uint64_t)v16);
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 576, 5);
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  if (*(unsigned char *)(a2 + 74))
  {
    unsigned int v19 = *(unsigned __int16 *)(a2 + 796);
    if (v19 <= *(unsigned __int16 *)(a2 + 800)) {
      unsigned int v19 = *(unsigned __int16 *)(a2 + 800);
    }
  }
  else
  {
    *(void *)(a2 + 808) = 0;
    *(_DWORD *)(a2 + 8) = 0;
    unsigned int v19 = 89;
  }
  *(_DWORD *)(a2 + 172) = v19;
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 176, *(_DWORD *)(a2 + 200) + 1);
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  uint64_t v20 = *(void *)(*(void *)a2 + 8);
  int v21 = *(_DWORD *)(a2 + 172);
  if (*(unsigned char *)(a2 + 74))
  {
    uint64_t ExcTable = BET3FLT__vect_t__createVect(v20, a2 + 656, v21);
    if ((ExcTable & 0x80000000) == 0)
    {
      *(_DWORD *)(a2 + 672) = 0;
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 680, *(_DWORD *)(a2 + 172));
      if ((ExcTable & 0x80000000) == 0)
      {
        *(_DWORD *)(a2 + 136) = 0;
        goto LABEL_14;
      }
    }
    return ExcTable;
  }
  uint64_t ExcTable = BET3FLT__vect_t__createVect(v20, a2 + 608, v21);
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 632, *(_DWORD *)(a2 + 172));
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 656, *(_DWORD *)(a2 + 172));
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 680, *(_DWORD *)(a2 + 172));
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  uint64_t ExcTable = MFVSyn__setDispersion(a2, *(_DWORD *)(a2 + 168));
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
LABEL_14:
  *(_DWORD *)(a2 + 556) = 0;
  *(_DWORD *)(a2 + 564) = 0;
  *(_DWORD *)(a2 + 572) = 0;
  *(_DWORD *)(a2 + 784) = 0;
  int v22 = (int)*(float *)(a2 + 68);
  *(_DWORD *)(a2 + 480) = v22;
  switch(*(_DWORD *)(a2 + 76))
  {
    case 1:
      int v23 = *(_DWORD *)(a2 + 200);
      if (v23 < 4) {
        int v24 = 1;
      }
      else {
        int v24 = v23 >> 2;
      }
      *(_DWORD *)(a2 + 240) = v24;
      *(unsigned char *)(a2 + 244) = 1;
      *(_DWORD *)(a2 + 208) = v22 >> 1;
      *(_DWORD *)(a2 + 80) = 0;
      goto LABEL_32;
    case 2:
      int v25 = *(_DWORD *)(a2 + 200);
      if (v25 <= 24) {
        int v25 = 24;
      }
      int v24 = v25 >> 1;
      *(_DWORD *)(a2 + 240) = v24;
      *(unsigned char *)(a2 + 244) = 0;
      if (v22 <= 67) {
        int v26 = v22 >> 2;
      }
      else {
        int v26 = 16;
      }
      *(_DWORD *)(a2 + 208) = v26;
      *(_DWORD *)(a2 + 80) = 1;
LABEL_32:
      int v27 = 3;
      goto LABEL_36;
    case 3:
      int v24 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a2 + 240) = v24;
      *(unsigned char *)(a2 + 244) = 0;
      *(_DWORD *)(a2 + 208) = 1;
      *(_DWORD *)(a2 + 80) = 2;
      int v27 = 4;
      goto LABEL_36;
    case 4:
      int v24 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a2 + 240) = v24;
      *(unsigned char *)(a2 + 244) = 0;
      *(_DWORD *)(a2 + 208) = 1;
      *(_DWORD *)(a2 + 80) = 3;
      goto LABEL_35;
    default:
      int v24 = *(_DWORD *)(a2 + 240);
LABEL_35:
      int v27 = 5;
LABEL_36:
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 216, v24 + 1);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      uint64_t ExcTable = BET3FLT__MFVSyn__mlsa_filter_init(a2, v27, a7, a8);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      if (*(float *)(a2 + 1628) == 0.0) {
        *(_DWORD *)(a2 + 80) = 0;
      }
      uint64_t ExcTable = MFVSyn__init__postFilter((_DWORD *)a2);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      int v28 = *(_DWORD *)(a2 + 172);
      if (v28 <= 2 * *(_DWORD *)(a2 + 40)) {
        int v28 = 2 * *(_DWORD *)(a2 + 40);
      }
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 432, 2 * v28);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      int v29 = *(_DWORD *)(a2 + 172);
      if (v29 <= *(_DWORD *)(a2 + 40)) {
        int v29 = *(_DWORD *)(a2 + 40);
      }
      int v30 = *(_DWORD *)(a2 + 480) <= v29 ? v29 : *(_DWORD *)(a2 + 480);
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 408, v30);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      int v31 = *(_DWORD *)(a2 + 172);
      if (v31 <= 2 * *(_DWORD *)(a2 + 40)) {
        int v31 = 2 * *(_DWORD *)(a2 + 40);
      }
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 456, 2 * v31);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      int v32 = *(_DWORD *)(a2 + 40);
      if (v32 <= *(_DWORD *)(a2 + 480)) {
        int v32 = *(_DWORD *)(a2 + 480);
      }
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 488, *(_DWORD *)(a2 + 136) + v32 + 1);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      float v33 = (float)*(int *)(a2 + 512);
      *(float *)(a2 + 744) = v33;
      *(float *)(a2 + 752) = v33;
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 760, *(_DWORD *)(a2 + 200) + 1);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      uint64_t Vect = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 720, *(_DWORD *)(a2 + 200) + 1);
      if ((Vect & 0x80000000) == 0)
      {
        BET3FLT__MFVSyn__mc2mlsa(a2, *(void *)(a2 + 768), *(void *)(a2 + 768));
        *(_DWORD *)(a2 + 748) = 0;
      }
      break;
  }
  return Vect;
}

uint64_t BET3FLT__MFVSyn__reset__MVF_Synthesis(uint64_t a1)
{
  if (!a1) {
    return 2164269063;
  }
  BET3FLT__rand_num_init((uint64_t *)(a1 + 88));
  *(_DWORD *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 604) = 0;
  *(_DWORD *)(a1 + 556) = 0;
  v_zap(*(void **)(a1 + 128), *(_DWORD *)(a1 + 140));
  v_zap(*(void **)(a1 + 1656), *(_DWORD *)(a1 + 1668));
  v_zap(*(void **)(a1 + 384), *(_DWORD *)(a1 + 396));
  *(float *)(a1 + 744) = (float)*(int *)(a1 + 512);
  *(_DWORD *)(a1 + 752) = 0;
  v_zap(*(void **)(a1 + 768), *(_DWORD *)(a1 + 776));
  BET3FLT__MFVSyn__mc2mlsa(a1, *(void *)(a1 + 768), *(void *)(a1 + 768));
  v_zap(*(void **)(a1 + 440), *(_DWORD *)(a1 + 452));
  v_zap(*(void **)(a1 + 416), *(_DWORD *)(a1 + 428));
  v_zap(*(void **)(a1 + 664), *(_DWORD *)(a1 + 676));
  v_zap(*(void **)(a1 + 688), *(_DWORD *)(a1 + 700));
  v_zap(*(void **)(a1 + 464), *(_DWORD *)(a1 + 476));
  v_zap(*(void **)(a1 + 224), *(_DWORD *)(a1 + 236));
  v_set(*(float **)(a1 + 528), *(_DWORD *)(a1 + 540), 1.0);
  v_scale(*(float **)(a1 + 528), *(_DWORD *)(a1 + 540), (float)*(int *)(a1 + 512));
  *(_DWORD *)(a1 + 544) = 0;
  v_zap(*(void **)(a1 + 584), *(_DWORD *)(a1 + 596));
  uint64_t result = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  return result;
}

void MFVSyn__deinit__MVF_Synthesis(void *a1)
{
  BET3FLT__MFVSyn__releaseExcTable(a1);
  MFVSyn__deinit__postFilter((uint64_t)a1);
  BET3FLT__MFVSyn__deconstruct((uint64_t)a1);
  bzero(a1, 0x6B8uLL);
}

uint64_t MFVSyn__disperse(uint64_t a1, uint64_t a2, int a3, signed int a4)
{
  uint64_t v8 = *(int *)(a1 + 160);
  v_equ((void *)(*(void *)(a1 + 104) + 4 * v8), (const void *)(*(void *)(a2 + 8) + 4 * a3), a4);
  v_equ(*(void **)(a1 + 104), *(const void **)(a1 + 128), v8);
  v_equ(*(void **)(a1 + 128), (const void *)(*(void *)(a1 + 104) + 4 * a4), v8);
  uint64_t v9 = *(void *)(a1 + 104) + 4 * v8;
  v10 = *(float **)(a1 + 152);
  uint64_t v11 = *(void *)(a2 + 8) + 4 * a3;
  return zerflt(v9, v10, v11, v8, a4);
}

uint64_t MFVSyn__setDispersion(uint64_t a1, int a2)
{
  int v3 = &dispersion_22kHz;
  if (a2 == 22050)
  {
    int v4 = 179;
  }
  else
  {
    int v3 = &dispersion_16kHz;
    int v4 = 129;
  }
  if (a2 == 11025) {
    uint64_t v5 = &dispersion_8kHz;
  }
  else {
    uint64_t v5 = v3;
  }
  if (a2 == 11025) {
    int v4 = 65;
  }
  if (a2 == 8000) {
    float v6 = &dispersion_8kHz;
  }
  else {
    float v6 = v5;
  }
  if (a2 == 8000) {
    int v7 = 65;
  }
  else {
    int v7 = v4;
  }
  uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), a1 + 144, v7);
  if ((result & 0x80000000) == 0)
  {
    v_equ(*(void **)(a1 + 152), v6, v7);
    int v9 = *(_DWORD *)(a1 + 40);
    if (v9 <= v7) {
      int v9 = v7;
    }
    uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), a1 + 96, v9 + 5 * v7);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v10 = *(void *)(*(void *)a1 + 8);
      return BET3FLT__vect_t__createVect(v10, a1 + 120, v7);
    }
  }
  return result;
}

void *MFVSyn__pickLowPassFilter(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  int v7 = *(_DWORD *)(a1 + 24);
  uint64_t v8 = (void **)(a2 + 8);
  int v9 = *(_DWORD *)(a2 + 16);
  v_zap(*(void **)(a2 + 8), *(_DWORD *)(a2 + 20));
  uint64_t v11 = *(void **)(a3 + 8);
  uint64_t v10 = (void **)(a3 + 8);
  uint64_t result = v_zap(v11, *((_DWORD *)v10 + 3));
  float v13 = ceilf(a4 / 250.0) * 250.0;
  if (v13 < 1000.0) {
    goto LABEL_4;
  }
  int v14 = *(_DWORD *)(a1 + 168);
  if ((double)v14 * 0.5 + -1000.0 < v13)
  {
    uint64_t v10 = v8;
LABEL_4:
    *((_DWORD *)*v10 + (v9 >> 1)) = 1065353216;
    return result;
  }
  int v15 = v7 - 1;
  uint64_t v16 = *(unsigned int *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 16);
  if ((int)v16 < 1)
  {
LABEL_10:
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = 0;
    float v19 = v13 / (float)v14;
    uint64_t v20 = (float *)(v17 + 20);
    while (*v20 < v19)
    {
      ++v18;
      v20 += 10;
      if (v16 == v18) {
        goto LABEL_10;
      }
    }
  }
  v_equ(*v8, *(const void **)(v17 + 40 * v18), *(_DWORD *)(v17 + 40 * v18 + 16));
  uint64_t v21 = *(unsigned int *)(a1 + 24);
  uint64_t v22 = *(void *)(a1 + 16);
  if ((int)v21 >= 1)
  {
    uint64_t v23 = 0;
    int v24 = (float *)(v22 + 20);
    while (*v24 < (float)(0.5 - (float)(v13 / (float)*(int *)(a1 + 168))))
    {
      ++v23;
      v24 += 10;
      if (v21 == v23) {
        goto LABEL_17;
      }
    }
    int v15 = v23;
  }
LABEL_17:
  uint64_t result = v_equ(*v10, *(const void **)(v22 + 40 * v15), *(_DWORD *)(v22 + 40 * v15 + 16));
  uint64_t v25 = *(unsigned int *)(*(void *)(a1 + 16) + 40 * v15 + 16);
  if ((int)v25 >= 1)
  {
    int v26 = (float *)*v10;
    float v27 = 1.0;
    do
    {
      *int v26 = v27 * *v26;
      ++v26;
      if (v27 == 1.0) {
        float v27 = -1.0;
      }
      else {
        float v27 = 1.0;
      }
      --v25;
    }
    while (v25);
  }
  return result;
}

void MFVSyn__lowPassFilterCoeffGenerator(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6)
{
  uint64_t v11 = (void *)(a2 + 8);
  uint64_t v12 = *(unsigned int *)(a2 + 16);
  uint64_t v13 = ((int)v12 >> 1);
  v_zap(*(void **)(a2 + 8), *(_DWORD *)(a2 + 20));
  int v15 = *(void **)(a3 + 8);
  int v14 = (void *)(a3 + 8);
  v_zap(v15, *((_DWORD *)v14 + 3));
  if (a4 <= 600.0) {
    goto LABEL_17;
  }
  int v16 = *(_DWORD *)(a1 + 168);
  if (v16 >= 0) {
    int v17 = *(_DWORD *)(a1 + 168);
  }
  else {
    int v17 = v16 + 1;
  }
  if ((float)((v17 >> 1) - 600) <= a4)
  {
    int v14 = v11;
LABEL_17:
    *(_DWORD *)(*v14 + 4 * (int)v13) = 1065353216;
    return;
  }
  if ((int)v12 >= 1)
  {
    uint64_t v18 = 0;
    float v19 = a4 / (float)v16;
    double v20 = a5;
    double v21 = (float)(v19 * 6.2832);
    uint64_t v22 = *v11;
    do
    {
      uint64_t v23 = ((int)v12 >> 1);
      double v24 = v21 / 3.14159265 * v20;
      if (v13 != v18)
      {
        double v24 = sin(v21 * (double)((int)v18 - (int)v13)) * (1.0 / ((double)((int)v18 - (int)v13) * 3.14159265) * v20);
        uint64_t v23 = v18;
      }
      float v25 = v24;
      *(float *)(v22 + 4 * v23) = v25;
      ++v18;
    }
    while (v12 != v18);
    uint64_t v26 = 0;
    float v27 = v19 * -6.28318531 + 3.14159265;
    double v28 = a6;
    double v29 = v27;
    float v30 = (float)(v27 / 3.1416) * a6;
    uint64_t v31 = *v14;
    do
    {
      uint64_t v32 = ((int)v12 >> 1);
      float v33 = v30;
      if (v13 != v26)
      {
        long double v34 = pow(-1.0, (double)(int)v26) * v28;
        float v33 = v34 * (sin(v29 * (double)((int)v26 - (int)v13)) * (1.0 / (float)((float)(v26 - v13) * 3.1416)));
        uint64_t v32 = v26;
      }
      *(float *)(v31 + 4 * v32) = v33;
      ++v26;
    }
    while (v12 != v26);
  }
}

void MFVSyn__fillExcPulse(uint64_t a1, uint64_t a2, int a3, int a4, float a5, float a6)
{
  int v11 = *(unsigned __int8 *)(a1 + 72);
  if (*(unsigned char *)(a1 + 72))
  {
    if (v11 != 2)
    {
      if (v11 == 1)
      {
        vect_t__fillZero(a2);
        **(float **)(a2 + 8) = sqrtf(a5);
      }
      return;
    }
    double v23 = a6;
    if (a6 > 1.0) {
      double v23 = 1.0;
    }
    if (v23 >= 0.0) {
      double v24 = 1.0 - v23;
    }
    else {
      double v24 = 1.0;
    }
    vect_t__fillZero(a2);
    if (a4)
    {
      float v25 = v24;
      if (v25 >= 0.1)
      {
        if (v25 > 0.8) {
          float v25 = 0.8;
        }
      }
      else
      {
        float v25 = 0.3;
      }
      double v29 = sqrt(a5);
      float v30 = v29;
      uint64_t v31 = *(float **)(a2 + 8);
      *uint64_t v31 = v30;
      float v32 = v30 + 0.0;
      if (a3 >= 2)
      {
        float v33 = v31 + 1;
        uint64_t v34 = a3 - 1;
        do
        {
          float v30 = v25 * v30;
          *v33++ = v30;
          float v32 = v32 + v30;
          --v34;
        }
        while (v34);
      }
      float v35 = v29 / v32;
      v_scale(v31, a3, v35);
      return;
    }
    uint64_t v26 = (unint64_t *)(a1 + 88);
    float v27 = *(float **)(a2 + 8);
    float v28 = *(float *)(a1 + 44) * 1.25 + *(float *)(a1 + 44) * 1.25;
    goto LABEL_21;
  }
  vect_t__fillZero(a2);
  if (a6 <= 0.3)
  {
    uint64_t v26 = (unint64_t *)(a1 + 88);
    float v27 = *(float **)(a2 + 8);
    float v28 = 2.25;
LABEL_21:
    rand_num(v26, v27, a3, v28);
    return;
  }
  double v12 = sqrt(a5);
  float v13 = v12;
  int v14 = *(float **)(a2 + 8);
  *int v14 = v13;
  float v15 = v13 + 0.0;
  if (a3 >= 2)
  {
    int v16 = (unint64_t *)(a1 + 88);
    float v17 = fmin((float)(1.0 - a6) * 10.0, 1.0);
    uint64_t v18 = 1;
    do
    {
      float v36 = 0.0;
      rand_num(v16, &v36, 1, 2.0);
      double v19 = v13 * 0.4;
      float v20 = v19 * (v36 * 0.1 + 1.0);
      *(float *)(*(void *)(a2 + 8) + v18 * 4) = v20;
      rand_num(v16, &v36, 1, 2.0);
      float v13 = v19 * (float)((float)(v17 * v36) + 1.0);
      int v14 = *(float **)(a2 + 8);
      float v15 = v15 + v14[v18++];
    }
    while (a3 != v18);
  }
  float v21 = v12 / v15;
  v_scale(v14, a3, v21);
}

float *MFVSyn__filterExcitationWithShapingFilterHQ(uint64_t a1, signed int a2, int a3, uint64_t a4, float a5, float a6, float a7)
{
  float v13 = *(float *)(a1 + 552);
  if (v13 > 0.0)
  {
    float v14 = *(float *)(a1 + 556);
    if (v14 > 0.0) {
      float v13 = (float)((float)(1.0 - a6) * v14) + (float)(a6 * v13);
    }
  }
  if (*(_DWORD *)(a1 + 8))
  {
    MFVSyn__pickLowPassFilter(a1, a1 + 608, a1 + 632, v13);
  }
  else
  {
    float v15 = (float)((float)(1.0 - a6) * *(float *)(a1 + 564)) + (float)(a6 * *(float *)(a1 + 560));
    float v16 = (float)((float)(1.0 - a6) * *(float *)(a1 + 572)) + (float)(a6 * *(float *)(a1 + 568));
    if (v13 > 0.0)
    {
      float v17 = (float)(int)(float)(v13 / BET3FLT__wave_t__convertFromTpToF0((float *)(a1 + 32), a5));
      float v18 = BET3FLT__wave_t__convertFromTpToF0((float *)(a1 + 32), a5) * v17;
      float v13 = v18 + (float)(BET3FLT__wave_t__convertFromTpToF0((float *)(a1 + 32), a5) * 0.5);
    }
    MFVSyn__lowPassFilterCoeffGenerator(a1, a1 + 608, a1 + 632, v13, v15, v16);
  }
  vect_t__mulByHanning(a1 + 608);
  vect_t__mulByHanning(a1 + 632);
  v_zap(*(void **)(a4 + 8), *(_DWORD *)(a4 + 20));
  v_zap(*(void **)(a1 + 464), *(_DWORD *)(a1 + 476));
  MFVSyn__fillExcPulse(a1, a4, a2, a3, a5, a7);
  v_equ((void *)(*(void *)(a1 + 464) + 4 * *(int *)(a1 + 172)), *(const void **)(a4 + 8), a2);
  v_equ(*(void **)(a1 + 464), *(const void **)(a1 + 664), *(_DWORD *)(a1 + 172));
  v_equ(*(void **)(a1 + 664), (const void *)(*(void *)(a1 + 464) + 4 * a2), *(_DWORD *)(a1 + 172));
  uint64_t v19 = *(void *)(a1 + 464) + 4 * *(int *)(a1 + 172);
  zerflt(v19, *(float **)(a1 + 616), v19, *(_DWORD *)(a1 + 624), a2);
  v_equ(*(void **)(a4 + 8), (const void *)(*(void *)(a1 + 464) + 4 * *(int *)(a1 + 172)), a2);
  v_zap(*(void **)(a1 + 464), *(_DWORD *)(a1 + 476));
  rand_num((unint64_t *)(a1 + 88), (float *)(*(void *)(a1 + 464) + 4 * *(int *)(a1 + 172)), a2, *(float *)(a1 + 44) * 1.15);
  v_equ(*(void **)(a1 + 464), *(const void **)(a1 + 688), *(_DWORD *)(a1 + 172));
  v_equ(*(void **)(a1 + 688), (const void *)(*(void *)(a1 + 464) + 4 * a2), *(_DWORD *)(a1 + 172));
  uint64_t v20 = *(void *)(a1 + 464) + 4 * *(int *)(a1 + 172);
  zerflt(v20, *(float **)(a1 + 640), v20, *(_DWORD *)(a1 + 648), a2);
  v_equ(*(void **)(a1 + 464), (const void *)(*(void *)(a1 + 464) + 4 * *(int *)(a1 + 172)), a2);
  v_add(*(float **)(a4 + 8), *(float **)(a1 + 464), a2);
  float v21 = *(float **)(a4 + 8);
  float v22 = *(float *)(a1 + 56);
  return v_scale(v21, a2, v22);
}

uint64_t BET3FLT__MFVSyn__mc2mlsa(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(result + 200);
  float v4 = *(float *)(result + 1624);
  *(_DWORD *)(a3 + 4 * v3) = *(_DWORD *)(a2 + 4 * v3);
  if ((int)v3 >= 1)
  {
    unint64_t v3 = v3;
    float v5 = -v4;
    do
    {
      float v6 = *(float *)(a3 + 4 * v3);
      BOOL v7 = v3-- > 1;
      *(float *)(a3 + 4 * v3) = *(float *)(a2 + 4 * v3) + (float)(v5 * v6);
    }
    while (v7);
  }
  return result;
}

void MFVSyn__postFilter(uint64_t a1, float *a2, float *a3)
{
  int v3 = *(_DWORD *)(a1 + 80);
  if (v3)
  {
    double v7 = 1.0;
    if (v3 != 1)
    {
      v_equ(*(void **)(a1 + 264), a2, *(_DWORD *)(a1 + 200) + 1);
      MFVSyn__freqt__postFilter(a1);
      MFVSyn__c2ir__postFilter(a1);
      uint64_t v8 = *(unsigned int *)(a1 + 400);
      if ((int)v8 < 1)
      {
        double v7 = 0.0;
      }
      else
      {
        int v9 = *(float **)(a1 + 312);
        float v10 = 0.0;
        do
        {
          float v11 = *v9++;
          float v10 = v10 + (float)(v11 * v11);
          --v8;
        }
        while (v8);
        double v7 = v10;
      }
    }
    a3[1] = a3[1] - (float)(*(float *)(a1 + 1632) * a2[2]);
    uint64_t v12 = *(unsigned int *)(a1 + 200);
    if ((int)v12 > 1)
    {
      float v13 = a3 + 2;
      uint64_t v14 = v12 - 1;
      do
      {
        *float v13 = *v13 * (float)(*(float *)(a1 + 1628) + 1.0);
        ++v13;
        --v14;
      }
      while (v14);
    }
    if (*(_DWORD *)(a1 + 80) >= 2u)
    {
      float v15 = *(float *)(a1 + 1624);
      uint64_t v16 = *(void *)(a1 + 264);
      float v17 = a3[(int)v12];
      *(float *)(v16 + 4 * (int)v12) = v17;
      if ((int)v12 >= 1)
      {
        unint64_t v18 = v12 + 1;
        do
        {
          float v19 = a3[(v18 - 2)];
          *(float *)(v16 + 4 * (v18-- - 2)) = v19 + (float)(v15 * v17);
          float v17 = v19;
        }
        while (v18 > 1);
      }
      MFVSyn__freqt__postFilter(a1);
      MFVSyn__c2ir__postFilter(a1);
      uint64_t v20 = *(unsigned int *)(a1 + 400);
      if ((int)v20 < 1)
      {
        double v24 = 0.0;
      }
      else
      {
        float v21 = *(float **)(a1 + 312);
        float v22 = 0.0;
        do
        {
          float v23 = *v21++;
          float v22 = v22 + (float)(v23 * v23);
          --v20;
        }
        while (v20);
        double v24 = v22;
      }
      float v25 = *a3;
      float v26 = log(v7);
      float v27 = log(v24);
      *a3 = v25 + (float)((float)(v26 - v27) * 0.5);
    }
  }
}

uint64_t MFVSyn__init__postFilter(_DWORD *a1)
{
  uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), (uint64_t)(a1 + 94), a1[50] + 1);
  if ((result & 0x80000000) == 0)
  {
    unsigned int v3 = a1[20];
    if (v3 >= 2)
    {
      int v4 = v3 == 2 ? 32 : 64;
      a1[100] = v4;
      uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), (uint64_t)(a1 + 70), v4);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), (uint64_t)(a1 + 64), a1[50] + 1);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), (uint64_t)(a1 + 76), a1[100]);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), (uint64_t)(a1 + 82), a1[100]);
            if ((result & 0x80000000) == 0)
            {
              uint64_t v5 = *(void *)(*(void *)a1 + 8);
              int v6 = a1[100];
              return BET3FLT__vect_t__createVect(v5, (uint64_t)(a1 + 88), v6);
            }
          }
        }
      }
    }
  }
  return result;
}

void *MFVSyn__deinit__postFilter(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) >= 2u)
  {
    BET3FLT__vect_t__deleteVect((void *)(a1 + 280));
    BET3FLT__vect_t__deleteVect((void *)(a1 + 256));
    BET3FLT__vect_t__deleteVect((void *)(a1 + 304));
    BET3FLT__vect_t__deleteVect((void *)(a1 + 328));
    BET3FLT__vect_t__deleteVect((void *)(a1 + 352));
  }
  return BET3FLT__vect_t__deleteVect((void *)(a1 + 376));
}

void BET3FLT__MFVSyn__mlsa_filter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(float **)(a1 + 184);
    v61 = *(float **)(a1 + 224);
    unint64_t v6 = *(unsigned int *)(a1 + 1644);
    uint64_t v7 = *(void *)(a1 + 1656);
    uint64_t v8 = (int)v6 + 1;
    int v9 = (float *)(v7 + 4 * v8);
    uint64_t v57 = v8;
    LODWORD(v8) = 2 * v8;
    uint64_t v10 = *(unsigned int *)(a1 + 200);
    uint64_t v11 = v7 + 4 * (int)v8;
    uint64_t v12 = a1 + 1688;
    uint64_t v13 = (v10 + 1);
    uint64_t v58 = a4;
    uint64_t v14 = v7 + 4 * (int)v8 + 4 * v13;
    uint64_t v15 = v7 + 4 * v10 + 4 * (int)v8;
    uint64_t v56 = v13 - 2;
    do
    {
      uint64_t v63 = v4;
      float v16 = *(float *)(a2 + 4 * v4);
      float v17 = exp(*v5);
      float v18 = fminf(fmaxf(v16 * v17, -32768.0), 32767.0);
      if ((int)v6 <= 0)
      {
        *int v9 = v18;
        float v31 = 0.0;
        float v29 = v18 + 0.0;
        float v30 = (float *)(v11 + 4 * *(int *)(v12 + 4 * v57));
      }
      else
      {
        float v19 = *(float *)(a1 + 1624);
        float v20 = *(float *)(a1 + 1672);
        float v21 = 0.0;
        unint64_t v22 = v6;
        uint64_t v23 = *(void *)(a1 + 1680);
        do
        {
          float v24 = (float)(v19 * *(float *)(v7 + 4 * v22)) + (float)(v20 * v9[(v22 - 1)]);
          *(float *)(v7 + 4 * v22) = v24;
          float v25 = v24 * v5[1];
          v9[v22] = v25;
          float v26 = v25 * *(float *)(v23 + 4 * v22);
          float v27 = -v26;
          if (v22) {
            float v27 = v26;
          }
          float v18 = v18 + v27;
          float v21 = v21 + v26;
          BOOL v28 = v22-- > 1;
        }
        while (v28);
        *int v9 = v18;
        float v29 = v21 + v18;
        float v30 = (float *)(v11 + 4 * *(int *)(v12 + 4 * v57));
        float v31 = 0.0;
        uint64_t v32 = v6;
        do
        {
          float v33 = v30[(v32 - 1)];
          uint64_t v34 = *(int *)(v12 + 4 * v32);
          float v35 = (float *)(v11 + 4 * v34);
          float v36 = (float)(v19 * v35[1]) + (float)(v20 * v33);
          *float v35 = v33;
          v35[1] = v36;
          float v37 = 0.0;
          if ((int)v10 > 1)
          {
            float v38 = v35[2];
            v39 = (float *)(v11 + 12 + 4 * v34);
            uint64_t v40 = v56;
            v41 = v5 + 2;
            do
            {
              float v42 = *v39;
              float v36 = v38 + (float)(v19 * (float)(*v39 - v36));
              *(v39 - 1) = v36;
              float v43 = *v41++;
              float v37 = v37 + (float)(v36 * v43);
              ++v39;
              float v38 = v42;
              --v40;
            }
            while (v40);
          }
          if ((int)v10 >= 1)
          {
            v44 = (_DWORD *)(v14 + 4 * v34);
            int v45 = v10 + 2;
            v46 = (int *)(v15 + 4 * v34);
            do
            {
              int v47 = *v46--;
              *v44-- = v47;
              --v45;
            }
            while (v45 > 2);
          }
          v30[v32] = v37;
          float v48 = v37 * *(float *)(v23 + 4 * v32);
          float v49 = -v48;
          if (v32) {
            float v49 = v48;
          }
          float v29 = v29 + v49;
          float v31 = v31 + v48;
          BOOL v28 = v32-- <= 1;
        }
        while (!v28);
      }
      *float v30 = v29;
      *(float *)(a3 + 4 * v63) = fminf(fmaxf(v31 + v29, -32768.0), 32767.0);
      if (v61)
      {
        int v50 = *(_DWORD *)(a1 + 84) - 1;
        *(_DWORD *)(a1 + 84) = v50;
        if (!v50)
        {
          uint64_t v51 = *(unsigned int *)(a1 + 240);
          if ((v51 & 0x80000000) == 0)
          {
            uint64_t v52 = v51 + 1;
            v53 = v5;
            v54 = v61;
            do
            {
              float v55 = *v54++;
              float *v53 = *v53 + v55;
              ++v53;
              --v52;
            }
            while (v52);
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 208);
        }
      }
      uint64_t v4 = v63 + 1;
    }
    while (v63 + 1 != v58);
  }
}

uint64_t BET3FLT__MFVSyn__mlsa_filter_init(uint64_t a1, int a2, float a3, float a4)
{
  *(float *)(a1 + 1624) = a3;
  *(float *)(a1 + 1628) = a4;
  int v4 = *(_DWORD *)(a1 + 200);
  if (v4 < 4) {
    return 0;
  }
  *(_DWORD *)(a1 + 1644) = a2;
  uint64_t Vect = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), a1 + 1648, (v4 + 5) * a2 + 3);
  if ((Vect & 0x80000000) == 0)
  {
    v_zap(*(void **)(a1 + 1656), *(_DWORD *)(a1 + 1668));
    float v7 = *(float *)(a1 + 1624);
    *(float *)(a1 + 1636) = -v7;
    *(float *)(a1 + 1632) = v7 * *(float *)(a1 + 1628);
    float v8 = 1.0 - (float)(v7 * v7);
    *(float *)(a1 + 1672) = v8;
    *(float *)(a1 + 1676) = v8;
    int v9 = *(_DWORD *)(a1 + 1644);
    *(void *)(a1 + 1680) = (char *)&g_pade + 24 * v9;
    if (v9 >= -1)
    {
      int v10 = *(_DWORD *)(a1 + 200);
      int v11 = v9 + 2;
      uint64_t v12 = (int *)(a1 + 4 * (v9 + 1) + 1688);
      int v13 = v9 * (v10 + 2);
      int v14 = -2 - v10;
      do
      {
        *v12-- = v13;
        --v11;
        v13 += v14;
      }
      while (v11 > 0);
    }
  }
  return Vect;
}

void *BET3FLT__MFVSyn__mlsa_filter_deinit(uint64_t a1)
{
  return BET3FLT__vect_t__deleteVect((void *)(a1 + 1648));
}

void *MFVSyn__freqt__postFilter(uint64_t a1)
{
  float v2 = *(float *)(a1 + 1636);
  float v3 = *(float *)(a1 + 1676);
  int v4 = *(_DWORD *)(a1 + 200);
  uint64_t v5 = *(unsigned int *)(a1 + 400);
  uint64_t v6 = *(void *)(a1 + 264);
  float v7 = *(void **)(a1 + 288);
  if ((int)v5 >= 1) {
    bzero(*(void **)(a1 + 360), 4 * v5);
  }
  if (v4 < 0)
  {
    int v9 = *(float **)(a1 + 360);
  }
  else
  {
    int v8 = -v4;
    int v9 = *(float **)(a1 + 360);
    int v10 = *(float **)(a1 + 336);
    do
    {
      int v11 = v8;
      float *v10 = *v9;
      int v12 = *((_DWORD *)v9 + 1);
      *int v9 = *(float *)(v6 + 4 * -v8) + (float)(v2 * *v9);
      *((_DWORD *)v10 + 1) = v12;
      v9[1] = (float)(v2 * v9[1]) + (float)(v3 * *v10);
      if ((int)v5 >= 3)
      {
        uint64_t v13 = v5 - 2;
        int v14 = v9 + 2;
        uint64_t v15 = v10 + 2;
        do
        {
          *uint64_t v15 = *v14;
          *int v14 = *(v15 - 1) + (float)(v2 * (float)(*v14 - *(v14 - 1)));
          ++v14;
          ++v15;
          --v13;
        }
        while (v13);
      }
      int v8 = v11 + 1;
    }
    while (v11);
  }
  return v_equ(v7, v9, v5);
}

float MFVSyn__c2ir__postFilter(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 400);
  float v2 = *(float **)(a1 + 288);
  float v3 = *(float **)(a1 + 312);
  float result = exp(*v2);
  *float v3 = result;
  if ((int)v1 >= 2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = v3;
    do
    {
      uint64_t v7 = 0;
      float v8 = 0.0;
      int v9 = v6;
      do
      {
        float v10 = *v9--;
        float v8 = v8 + (float)((float)(v2[v7 + 1] * (float)(v7 + 1)) * v10);
        ++v7;
      }
      while (v5 != v7);
      float result = v8 * g_oneOver[v5];
      v3[v5++] = result;
      ++v6;
    }
    while (v5 != v1);
  }
  return result;
}

float v_add(float *a1, float *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      float v5 = *a2++;
      float result = v5 + *a1;
      *a1++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *v_equ(void *a1, const void *a2, unsigned int a3)
{
  return memcpy(a1, a2, 4 * a3);
}

double v_sum(float *a1, int a2)
{
  if (a2 < 1) {
    return 0.0;
  }
  uint64_t v2 = a2;
  double result = 0.0;
  do
  {
    float v4 = *a1++;
    *(float *)&double result = *(float *)&result + v4;
    --v2;
  }
  while (v2);
  return result;
}

float *v_scale(float *result, int a2, float a3)
{
  if (a3 != 1.0 && a2 >= 1)
  {
    uint64_t v4 = a2;
    float v5 = result;
    do
    {
      *float v5 = *v5 * a3;
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

float *v_set(float *result, int a2, float a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = a2;
    uint64_t v4 = result;
    do
    {
      *v4++ = a3;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *v_zap(void *a1, int a2)
{
  if (a2 >= 1) {
    bzero(a1, 4 * a2);
  }
  return a1;
}

uint64_t zerflt(uint64_t result, float *a2, uint64_t a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = a5;
    uint64_t v6 = result + 4 * a5 - 4;
    do
    {
      float v7 = 0.0;
      if (a4 >= 1)
      {
        uint64_t v8 = a4;
        int v9 = a2;
        float v10 = (float *)v6;
        do
        {
          float v11 = *v10--;
          float v12 = v11;
          float v13 = *v9++;
          float v7 = v7 + (float)(v12 * v13);
          --v8;
        }
        while (v8);
      }
      *(float *)(a3 + 4 * (v5 - 1)) = v7;
      v6 -= 4;
    }
    while (v5-- > 1);
  }
  return result;
}

double BET3FLT__wave_t__convertFromF0ToTp(float *a1, float a2)
{
  if (a2 == 0.0) {
    return 0.0;
  }
  *(float *)&double result = (float)(1.0 / a2) * *a1;
  return result;
}

float BET3FLT__wave_t__convertFromTpToF0(float *a1, float a2)
{
  return (float)(1.0 / a2) * *a1;
}

float BET3FLT__wave_t__convertFromMsecToTp(float *a1, float a2)
{
  return (float)(a2 * 0.001) * *a1;
}

float BET3FLT__wave_t__sampleRateHz(uint64_t a1)
{
  return *(float *)a1;
}

float *BET3FLT__wave_t__setSampleRateHz(float *result, float a2)
{
  if (result)
  {
    if (a2 > 0.0) {
      *double result = a2;
    }
  }
  return result;
}

double wave_t__convertFromF0ToTp__SR(float a1, float a2)
{
  if (a2 == 0.0) {
    return 0.0;
  }
  double result = 1.0 / a2 * a1;
  *(float *)&double result = result;
  return result;
}

uint64_t BET3FLT__MFVSyn__loadExcTable(uint64_t a1, uint64_t a2)
{
  v32[300] = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 792) = v4;
  int v5 = *(unsigned __int16 *)(a2 + 52);
  *(_WORD *)(a1 + 796) = v5;
  *(_WORD *)(a1 + 798) = *(_WORD *)(a2 + 54);
  int v6 = *(unsigned __int16 *)(a2 + 56);
  *(_WORD *)(a1 + 800) = v6;
  *(_WORD *)(a1 + 802) = *(_WORD *)(a2 + 58);
  *(_WORD *)(a1 + 804) = *(_WORD *)(a2 + 60);
  *(_WORD *)(a1 + 806) = *(_WORD *)(a2 + 62);
  uint64_t v7 = heap_Alloc(*(void *)(*(void *)a1 + 8), 4 * ((v6 + v5) * v4));
  *(void *)(a1 + 808) = v7;
  uint64_t v8 = *(unsigned int *)(a1 + 792);
  if ((int)v8 > 1)
  {
    uint64_t v9 = *(unsigned __int16 *)(a1 + 796);
    float v10 = (void *)(a1 + 832);
    uint64_t v11 = v8 - 1;
    uint64_t v12 = v9;
    do
    {
      void *v10 = v7 + 4 * v12;
      v10 += 3;
      v12 += v9;
      --v11;
    }
    while (v11);
  }
  if ((int)v8 >= 1)
  {
    uint64_t v13 = 0;
    int v14 = (double *)(a2 + 64);
    uint64_t v15 = a1 + 808;
    uint64_t v16 = *(unsigned __int16 *)(a1 + 800);
    uint64_t v17 = *(unsigned __int16 *)(a1 + 796);
    float v18 = (void *)(a1 + 816);
    uint64_t v19 = v8;
    do
    {
      *float v18 = *(void *)(a1 + 808 + 24 * (v8 - 1)) + 4 * v13 + 4 * v17;
      v18 += 3;
      v13 += v16;
      --v19;
    }
    while (v19);
    uint64_t v20 = 0;
    uint64_t v21 = *(unsigned __int16 *)(a1 + 796);
    do
    {
      __memcpy_chk();
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          float v23 = *(double *)&v32[i];
          *(float *)(*(void *)(v15 + 24 * v20) + 4 * i) = v23;
        }
      }
      float v24 = &v14[v21];
      uint64_t v25 = *(unsigned __int16 *)(a1 + 800);
      __memcpy_chk();
      if (v25)
      {
        for (uint64_t j = 0; j != v25; ++j)
        {
          float v27 = *(double *)&v32[j];
          *(float *)(*(void *)(v15 + 24 * v20 + 8) + 4 * j) = v27;
        }
      }
      BOOL v28 = &v24[v25];
      double v29 = *v28;
      int v14 = v28 + 1;
      float v30 = v29;
      *(float *)(v15 + 24 * v20++ + 16) = v30;
    }
    while (v20 != v8);
  }
  return 0;
}

void *BET3FLT__MFVSyn__releaseExcTable(void *result)
{
  uint64_t v1 = result[101];
  if (v1)
  {
    uint64_t v2 = result;
    double result = heap_Free(*(void **)(*result + 8), v1);
    v2[101] = 0;
  }
  return result;
}

uint64_t BET3FXD__LoadTreesFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  unsigned __int16 v30 = 0;
  uint64_t v9 = *a4;
  if (a4[4] - v9 >= 8 && *(unsigned char *)(*((void *)a4 + 1) + v9) == 48)
  {
    *a4 = v9 + 2;
    uint64_t v12 = a3;
    uint64_t v13 = (_WORD *)(a2 + 2 * a3 + 184);
    if (BET3FLT__xfread_BET3(v13, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3(&v30, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3((void *)(a2 + 2 * v12), 2u, 1, a4) == 1)
    {
      int v14 = BET3FLT__xfread2ptr_BET3((void *)(a2 + 8 * v12 + 24), 1u, v30, a4);
      if (v14 == v30)
      {
        if (*a4) {
          ++*a4;
        }
        uint64_t v15 = heap_Calloc(*(void **)(v8 + 8), 16, (unsigned __int16)*v13);
        uint64_t v21 = a2 + 8 * v12;
        *(void *)(v21 + 104) = v15;
        unint64_t v22 = (uint64_t *)(v21 + 104);
        if (!v15)
        {
          BET3FXD__log_select_Error(v8, 55000, (uint64_t)"LoadTreesFile : out of memory for type %s\n", v16, v17, v18, v19, v20);
          return 2229280778;
        }
        if (!*v13) {
          return 0;
        }
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        while (BET3FLT__xfread_BET3((void *)(v15 + v23), 2u, 1, a4) == 1)
        {
          if (BET3FLT__xfread_BET3((void *)(*v22 + v23 + 2), 2u, 1, a4) != 1) {
            break;
          }
          int v25 = BET3FLT__xfread2ptr_BET3((void *)(*v22 + v23 + 8), 2u, 3 * *(unsigned __int16 *)(*v22 + v23 + 2), a4);
          uint64_t v15 = *v22;
          if (v25 != 3 * *(unsigned __int16 *)(*v22 + v23 + 2)) {
            break;
          }
          uint64_t v26 = 0;
          ++v24;
          v23 += 16;
          if (v24 >= (unsigned __int16)*v13) {
            return v26;
          }
        }
        uint64_t v26 = 2229280772;
        float v27 = "LoadTreesFile : corrupt tree nodes for type %s, state %u\n";
        a1 = v8;
        uint64_t v28 = 55015;
      }
      else
      {
        uint64_t v26 = 2229280772;
        float v27 = "LoadTreesFile : corrupt tree questions for type %s\n";
        a1 = v8;
        uint64_t v28 = 55013;
      }
    }
    else
    {
      uint64_t v26 = 2229280772;
      float v27 = "LoadTreesFile : corrupt tree header for type %s\n";
      a1 = v8;
      uint64_t v28 = 55012;
    }
  }
  else
  {
    uint64_t v26 = 2229280772;
    float v27 = "LoadTreesFile : invalid tree data version for type %s\n";
    uint64_t v28 = 55011;
  }
  BET3FXD__log_select_Error(a1, v28, (uint64_t)v27, (uint64_t)a4, a5, a6, a7, a8);
  return v26;
}

uint64_t BET3FXD__TreeSearch(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  LOWORD(v5) = 0;
  uint64_t v6 = a3 + 8 * a4;
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(v6 + 104) + 16 * a5 + 8);
  uint64_t v9 = a2 + 2;
  uint64_t v10 = a2 + 1;
  while (2)
  {
    uint64_t v11 = -(uint64_t)(__int16)v5;
    uint64_t v12 = (unsigned __int16 *)(v8 + 6 * (int)v11);
    uint64_t v13 = (unsigned __int8 *)(v7 + *v12);
    uint64_t v14 = *v13;
    int v15 = v13[1];
    uint64_t v5 = v12[1];
    switch(*v13)
    {
      case 0xFCu:
        if (a2 < 2) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + (a2 - 2));
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFDu:
        if (a2 < 1) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + (a2 - 1));
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFEu:
        if ((int)v10 >= *(__int16 *)(a1 + 10)) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + v10);
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFFu:
        if ((int)v9 >= *(__int16 *)(a1 + 10))
        {
LABEL_20:
          unsigned __int8 v16 = -1;
          if (v13[1]) {
            goto LABEL_24;
          }
        }
        else
        {
          unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + v9);
          if (v13[1]) {
            goto LABEL_24;
          }
        }
        goto LABEL_39;
      default:
        if (v14 == 3)
        {
          unsigned int v17 = *(unsigned __int16 *)(*(void *)(a1 + 1784) + 2 * a2);
          BOOL v18 = v17 > 0x19;
          unsigned __int8 v16 = 10 * v17;
          if (v18) {
            unsigned __int8 v16 = -1;
          }
          if (!v13[1]) {
            goto LABEL_39;
          }
        }
        else
        {
          uint64_t v19 = *(void *)(a1 + 8 * v14 + 16);
          if (!v19) {
            goto LABEL_39;
          }
          unsigned __int8 v16 = *(unsigned char *)(v19 + a2);
          if (!v13[1]) {
            goto LABEL_39;
          }
        }
LABEL_24:
        uint64_t v20 = v13 + 2;
        if (v15 == 255)
        {
          if (*v20 <= v16 && v13[3] >= v16) {
            goto LABEL_30;
          }
        }
        else
        {
          int v21 = v15 - 1;
          if (v21)
          {
            int v22 = 0;
            while (1)
            {
              int v23 = v21 + v22;
              if (v21 + v22 < 0 != __OFADD__(v21, v22)) {
                ++v23;
              }
              int v24 = v23 >> 1;
              unsigned int v25 = v20[v24];
              if (v25 == v16) {
                break;
              }
              if (v16 < v25) {
                int v21 = v24 - 1;
              }
              else {
                int v22 = v24 + 1;
              }
              if (v22 > v21) {
                goto LABEL_39;
              }
            }
LABEL_30:
            uint64_t v5 = *(unsigned __int16 *)(v8 + 6 * (int)v11 + 4);
            goto LABEL_39;
          }
          if (*v20 == v16) {
            goto LABEL_30;
          }
        }
LABEL_39:
        if ((v5 & 0x8000) != 0) {
          continue;
        }
        return v5;
    }
  }
}

uint64_t BET3FXD__select_bet3_FeatureExtractObjOpen(_WORD *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v16 = 0;
  *a5 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v9 = (void *)heap_Calloc(*(void **)(v16 + 8), 1, 24);
    if (v9)
    {
      *uint64_t v9 = v16;
      v9[1] = a3;
      v9[2] = a4;
      *a5 = v9;
    }
    else
    {
      log_OutPublic(*(void *)(v16 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v10, v11, v12, v13, v15);
      return 2229280778;
    }
  }
  return inited;
}

uint64_t BET3FXD__select_bet3_FeatureExtractProcessStart(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6)
{
  __s1 = 0;
  bzero(a5, 0xE48uLL);
  *a5 = a2;
  if ((paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
    && !strcmp(__s1, "bet3"))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(a1[2] + 272))(a3, a4, 128, 3, 0, 0);
  }
  return usextract_ProcessStart(*a1, (uint64_t)"SELECT_BET3", a1[2], a3, a4, (uint64_t)a5, a6);
}

uint64_t BET3FXD__select_bet3_FeatureExtractProcess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, uint64_t *a11, _DWORD *a12)
{
  uint64_t v14 = a1;
  uint64_t v113 = *MEMORY[0x263EF8340];
  uint64_t v15 = *a1;
  if (a11) {
    BOOL v16 = a12 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = !v16;
  int v106 = v17;
  if (!v16)
  {
    *a11 = 0;
    *a12 = 0;
  }
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = *(__int16 *)(a10 + 10);
  do
  {
    if (*(unsigned char *)(*(void *)a10 + 2748 + v18) == 1) {
      ++v19;
    }
    ++v18;
  }
  while (v18 != 218);
  uint64_t v21 = heap_Calloc(*(void **)(v15 + 8), (v19 * v20), 1);
  if (!v21) {
    goto LABEL_118;
  }
  uint64_t v26 = v21;
  uint64_t v108 = a3;
  v109 = v14;
  for (uint64_t i = 0; i != 218; ++i)
  {
    uint64_t v28 = *(void *)a10;
    int v29 = *(unsigned __int8 *)(*(void *)a10 + i + 2748);
    if (*(unsigned char *)(*(void *)a10 + i + 2748))
    {
      if (v29 == 2)
      {
        uint64_t v30 = heap_Calloc(*(void **)(v15 + 8), v20, 2);
        *(void *)(a10 + 8 * i + 1760) = v30;
        if (!v30) {
          goto LABEL_43;
        }
      }
      else if (v29 == 1)
      {
        *(void *)(a10 + 8 * i + 16) = v26;
        v26 += v20;
      }
      else
      {
        switch((int)i)
        {
          case '.':
            uint64_t v31 = heap_Calloc(*(void **)(v15 + 8), v20, 9);
            *(void *)(a10 + 3560) = v31;
            if (!v31) {
              goto LABEL_43;
            }
            continue;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_28;
          case '3':
            int v33 = *(unsigned __int16 *)(v28 + 2966);
            if (v33)
            {
              uint64_t v34 = heap_Calloc(*(void **)(v15 + 8), (v33 * v20), 4);
              *(void *)(a10 + 3568) = v34;
              if (!v34) {
                goto LABEL_43;
              }
            }
            continue;
          case '4':
            int v35 = *(unsigned __int16 *)(v28 + 2966);
            if (v35)
            {
              uint64_t v36 = heap_Calloc(*(void **)(v15 + 8), (v35 * v20), 4);
              *(void *)(a10 + 3576) = v36;
              if (!v36) {
                goto LABEL_43;
              }
            }
            continue;
          case '5':
            int v37 = *(unsigned __int16 *)(v28 + 3360);
            if (v37)
            {
              uint64_t v38 = heap_Calloc(*(void **)(v15 + 8), (v37 * v20), 4);
              *(void *)(a10 + 3584) = v38;
              if (!v38) {
                goto LABEL_43;
              }
            }
            continue;
          case '6':
            int v39 = *(unsigned __int16 *)(v28 + 3360);
            if (v39)
            {
              uint64_t v40 = heap_Calloc(*(void **)(v15 + 8), (v39 * v20), 4);
              *(void *)(a10 + 3592) = v40;
              if (!v40) {
                goto LABEL_43;
              }
            }
            continue;
          case '8':
            int v41 = *(unsigned __int16 *)(v28 + 2966);
            if (v41)
            {
              uint64_t v42 = heap_Calloc(*(void **)(v15 + 8), (v41 * v20), 1);
              *(void *)(a10 + 3600) = v42;
              if (!v42) {
                goto LABEL_43;
              }
            }
            continue;
          default:
            if (i == 24)
            {
              uint64_t v32 = heap_Calloc(*(void **)(v15 + 8), v20, 8);
              *(void *)(a10 + 3552) = v32;
              if (!v32)
              {
LABEL_43:
                int v43 = -2065686518;
                log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v102);
                goto LABEL_44;
              }
            }
            else
            {
LABEL_28:
              log_OutPublic(*(void *)(*v14 + 32), (uint64_t)"SELECT_BET3", 55007, "%s%u", v22, v23, v24, v25, "feature");
            }
            break;
        }
      }
    }
  }
  unsigned int v44 = *(unsigned __int16 *)(*(void *)a10 + 3578);
  if (v44 >= 4)
  {
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, "Invalid number of states per phoneme", v22, v23, v24, v25, "%s%u");
    int v43 = -2065686513;
    goto LABEL_120;
  }
  int v45 = (void *)heap_Calloc(*(void **)(v15 + 8), v44 * v20, 4);
  *(void *)(a10 + 3608) = v45;
  if (!v45)
  {
    int v43 = -2065686518;
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v46, v47, v48, v49, v102);
    goto LABEL_120;
  }
  if (*(unsigned __int16 *)(*(void *)a10 + 3578) * v20) {
    memset(v45, 255, 4 * *(unsigned __int16 *)(*(void *)a10 + 3578) * v20);
  }
  int GenericFeatureLayers = usextract_allocateGenericFeatureLayers(*v14, (uint64_t)"SELECT_BET3", (void *)a10, v20);
  if (GenericFeatureLayers < 0)
  {
    int v43 = GenericFeatureLayers;
    goto LABEL_120;
  }
  int v43 = usextract_Process(*v14, (uint64_t)"SELECT_BET3", v14[2], a3, a4, a10, v51, v52);
  if ((v43 & 0x80000000) == 0)
  {
    uint64_t v104 = a4;
    if (*(void *)(a10 + 3504))
    {
      uint64_t v53 = *(void *)a10;
      v54 = **(const char ***)(*(void *)a10 + 3336);
      if (v54)
      {
        uint64_t v55 = 0;
        unsigned int v56 = 1;
        do
        {
          if (!strncmp(v54, "INNO_", 5uLL))
          {
            unsigned int v58 = atoi(v54 + 5) + 79;
            if (v58 <= 0x5E) {
              *(void *)(a10 + 8 * v58 + 16) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
            }
          }
          else
          {
            unsigned int Index = usextract_getIndex(*(const char ***)(*(void *)(v53 + 3344) + 8 * v55), "FEATIDX", (unint64_t)"");
            if (Index == -1)
            {
              uint64_t v53 = *(void *)a10;
              v59 = *(const char **)(*(void *)(*(void *)a10 + 3336) + 8 * v55);
              if (!strcmp(v59, "POS"))
              {
                *(void *)(a10 + 504) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
              }
              else if (!strcmp(v59, "PHR"))
              {
                *(void *)(a10 + 512) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
              }
            }
            else
            {
              uint64_t v53 = *(void *)a10;
              *(void *)(a10
                        + 8
                        * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)a10 + 3352) + 8 * v55) + Index)
                        + 16) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
            }
          }
          uint64_t v55 = v56;
          v54 = *(const char **)(*(void *)(v53 + 3336) + 8 * v56++);
        }
        while (v54);
      }
    }
    int v103 = *(__int16 *)(a10 + 10);
    unsigned int v60 = v103 & ~(v103 >> 31);
    if (BET3FLT__log_select_GetLogLevel(*(void *)(v15 + 32)) >= 6)
    {
      LH_itoa(0x4Eu, (char *)v112, 0xAu);
      for (uint64_t j = 0; j != 218; ++j)
      {
        v62 = "application/x-realspeak-usplosives;version=4.0";
        switch((int)j)
        {
          case 2:
            char v111 = 5;
            char v110 = 0;
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v111,
              1u,
              0);
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              *(void *)(a10 + 8 * j + 16),
              v60,
              0);
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v110,
              1u,
              0);
            continue;
          case 3:
            v62 = "application/x-realspeak-usdurs;version=4.0";
            goto LABEL_71;
          case 4:
            goto LABEL_71;
          case 5:
            v62 = "application/x-realspeak-usmarkers-u16;version=4.0";
LABEL_71:
            int v63 = *(unsigned __int8 *)(*(void *)a10 + j + 2748);
            if (v63 == 2)
            {
              log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)v62, *(void *)(a10 + 8 * j + 1760), 2 * v60, 0);
            }
            else if (v63 == 1)
            {
              log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)v62, *(void *)(a10 + 8 * j + 16), v60, 0);
            }
            break;
          default:
            continue;
        }
      }
    }
    unsigned int v105 = v103 & ~(v103 >> 31);
    unint64_t v64 = *(unsigned int *)(a10 + 3520);
    if (v64)
    {
      uint64_t v65 = 0;
      for (unint64_t k = 0; k < v64; ++k)
      {
        if (*(_DWORD *)(*(void *)(a10 + 3512) + v65) == 25)
        {
          v112[0] = 0;
          paramc_ParamGetUInt(*(void *)(v15 + 40), (uint64_t)"finalsentencefound", v112);
          unsigned int v67 = *(_DWORD *)(*(void *)(a10 + 3512) + v65 + 24);
          *a9 = v67;
          int v43 = paramc_ParamSetInt(*(void *)(v15 + 40), (uint64_t)"waitfactor", v67);
          if (v43 < 0)
          {
            log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%d%s%x", v68, v69, v70, v71, "parameter");
            goto LABEL_134;
          }
          unint64_t v64 = *(unsigned int *)(a10 + 3520);
        }
        v65 += 32;
      }
    }
    featextract_adjustSilAudioOrder(a10);
    a3 = v108;
    uint64_t v14 = v109;
    LODWORD(v72) = v103 & ~(v103 >> 31);
    if (!v106 || (int v73 = *(_DWORD *)(a10 + 3520), v74 = v73 + v105, *a12 = v74, !(v73 + v105)))
    {
LABEL_97:
      if (v103 < 1)
      {
        a4 = v104;
      }
      else
      {
        uint64_t v90 = 0;
        uint64_t v91 = (unsigned __int16)v72;
        if (v72 <= 1) {
          uint64_t v72 = 1;
        }
        else {
          uint64_t v72 = v72;
        }
        uint64_t v92 = v91 - 1;
        uint64_t v93 = a2;
        do
        {
          uint64_t v94 = *(void *)(a10 + 248);
          if (!*(unsigned char *)(v94 + v90)) {
            *(unsigned char *)(v94 + v90) = -1;
          }
          uint64_t v95 = *(void *)(a10 + 192);
          if (*(unsigned char *)(*(void *)(a10 + 32) + v90) == 35) {
            char v96 = 1;
          }
          else {
            char v96 = 2 * *(unsigned char *)(v95 + v90);
          }
          *(unsigned char *)(v95 + v90) = v96;
          uint64_t v97 = *(void *)(a10 + 32);
          if (v92 == v90 && *(unsigned char *)(v97 + v90) == 35)
          {
            v112[0] = 0;
            paramc_ParamGetUInt(*(void *)(v15 + 40), (uint64_t)"finalsentencefound", v112);
            int v98 = 0;
            uint64_t v99 = *(void *)(a10 + 1784);
            if (v112[0] != 1) {
              int v98 = *(unsigned __int16 *)(v99 + 2 * v90) + 200 * *a9;
            }
            if (v98 <= 1) {
              int v98 = 1;
            }
            if (v98 >= 0xFFFF) {
              LOWORD(v98) = -1;
            }
            *(_WORD *)(v99 + 2 * v90) = v98;
            uint64_t v97 = *(void *)(a10 + 32);
            uint64_t v93 = a2;
          }
          *(unsigned char *)(v97 + v90) = *(unsigned char *)(v93 + *(unsigned __int8 *)(v97 + v90) + 7356);
          ++v90;
        }
        while (v72 != v90);
LABEL_134:
        a4 = v104;
LABEL_44:
        a3 = v108;
        uint64_t v14 = v109;
      }
      goto LABEL_120;
    }
    uint64_t v75 = heap_Calloc(*(void **)(v15 + 8), v74, 32);
    *a11 = v75;
    a4 = v104;
    if (v75)
    {
      v76 = (void *)heap_Calloc(*(void **)(v15 + 8), *(__int16 *)(a10 + 10), 2);
      if (v76)
      {
        uint64_t v77 = (uint64_t)v76;
        memcpy(v76, *(const void **)(a10 + 1800), 2 * *(__int16 *)(a10 + 10));
        LODWORD(v72) = v103 & ~(v103 >> 31);
        if (*a12)
        {
          uint64_t v78 = 0;
          unint64_t v79 = 0;
          unsigned int v80 = 0;
          unint64_t v81 = 0;
          while (v81 < *(unsigned int *)(a10 + 3520))
          {
            if (v80 >= v105)
            {
              v87 = (_OWORD *)(*a11 + v78);
              v88 = (_OWORD *)(*(void *)(a10 + 3512) + 32 * v81);
              long long v89 = v88[1];
              _OWORD *v87 = *v88;
              v87[1] = v89;
              ++v81;
              goto LABEL_95;
            }
            uint64_t v82 = v80;
            if (!*(_WORD *)(v77 + 2 * v80)) {
              goto LABEL_93;
            }
            v83 = (_OWORD *)(*a11 + v78);
            v84 = (_OWORD *)(*(void *)(a10 + 3512) + 32 * v81);
            long long v85 = v84[1];
            _OWORD *v83 = *v84;
            v83[1] = v85;
            ++v81;
            --*(_WORD *)(v77 + 2 * v80);
LABEL_95:
            ++v79;
            v78 += 32;
            if (v79 >= *a12) {
              goto LABEL_96;
            }
          }
          uint64_t v82 = v80;
LABEL_93:
          v86 = (_DWORD *)(*a11 + v78);
          _DWORD *v86 = 33;
          v86[6] = *(unsigned __int8 *)(*(void *)(a10 + 32) + v82);
          ++v80;
          goto LABEL_95;
        }
LABEL_96:
        heap_Free(*(void **)(v15 + 8), v77);
        goto LABEL_97;
      }
    }
LABEL_118:
    int v43 = -2065686518;
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v102);
  }
LABEL_120:
  if (a12 && a11 && v43 < 0 && *a11)
  {
    heap_Free(*(void **)(v15 + 8), *a11);
    *a11 = 0;
    *a12 = 0;
  }
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(v14[2] + 64))(a3, a4);
  if ((int)result >= 0 || v43 <= -1) {
    return v43;
  }
  else {
    return result;
  }
}

uint64_t BET3FXD__select_bet3_FeatureExtractProcessEnd(uint64_t *a1, void *a2)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = usextract_ProcessEnd(*a1, (uint64_t)"SELECT_BET3", (uint64_t)a2);
  usextract_freeGenericFeatureLayers((void *)*a1, (uint64_t)"SELECT_BET3", a2);
  uint64_t v10 = 0;
  int v11 = 1;
  do
  {
    int v12 = *(unsigned __int8 *)(*a2 + v10 + 2748);
    if (*(unsigned char *)(*a2 + v10 + 2748))
    {
      if (v12 == 2)
      {
        uint64_t v14 = a2[v10 + 220];
        if (v14) {
LABEL_11:
        }
          heap_Free(*(void **)(v4 + 8), v14);
      }
      else if (v12 == 1)
      {
        if (v11)
        {
          uint64_t v13 = a2[v10 + 2];
          if (v13) {
            heap_Free(*(void **)(v4 + 8), v13);
          }
          int v11 = 0;
        }
      }
      else
      {
        switch((int)v10)
        {
          case '.':
            uint64_t v14 = a2[445];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_20;
          case '3':
            uint64_t v14 = a2[446];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '4':
            uint64_t v14 = a2[447];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '5':
            uint64_t v14 = a2[448];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '6':
            uint64_t v14 = a2[449];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '8':
            uint64_t v14 = a2[450];
            if (v14) {
              goto LABEL_11;
            }
            break;
          default:
            if (v10 == 24)
            {
              uint64_t v14 = a2[444];
              if (v14) {
                goto LABEL_11;
              }
            }
            else
            {
LABEL_20:
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"SELECT_BET3", 55010, "%s%u", v6, v7, v8, v9, "feature");
            }
            break;
        }
      }
    }
    ++v10;
  }
  while (v10 != 218);
  uint64_t v15 = a2[451];
  if (v15) {
    heap_Free(*(void **)(v4 + 8), v15);
  }
  *a2 = 0;
  return v5;
}

uint64_t BET3FXD__mul_int32_Q8_24_to_int32(int a1, int a2)
{
  return ((a2 * a1) >> 24);
}

uint64_t BET3FXD__mul_int32_Q8_24_to_Q8_24(int a1, int a2)
{
  return (a2 * a1);
}

uint64_t BET3FXD__mul_Q18_14_Q1_15_to_Q18_14(uint64_t result, int a2)
{
  if (a2 == 0x7FFF) {
    return result;
  }
  else {
    return ((unint64_t)(a2 * (uint64_t)(int)result) >> 15);
  }
}

uint64_t BET3FXD__div_int32_int32_to_Q8_24(int a1, int a2)
{
  return (((a1 << 16) / a2) << 8);
}

uint64_t BET3FXD__div_Q8_24_Q12_20_to_Q8_24(int a1, int a2)
{
  return ((a1 / (a2 >> 8)) << 12);
}

uint64_t BET3FXD__div_Q18_14_Q18_14_to_Q18_14(int a1, int a2)
{
  return ((16 * a1 / (a2 >> 4)) << 6);
}

uint64_t BET3FXD__Q8_24_to_int32(int a1)
{
  return (a1 >> 24);
}

uint64_t BET3FXD__Q10_22_to_Q8_24(int a1)
{
  return (4 * a1);
}

uint64_t BET3FXD__int32_to_Q8_24(int a1)
{
  return (a1 << 24);
}

uint64_t BET3FXD__int32_to_Q12_20(int a1)
{
  return (a1 << 20);
}

uint64_t BET3FXD__int32_to_Q18_14(int a1)
{
  return (a1 << 14);
}

uint64_t BET3FXD__Q18_14_to_Q1_15(__int16 a1)
{
  return (__int16)(2 * a1);
}

uint64_t BET3FXD__LoadModelFile(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2[a3 + 120])
  {
    uint64_t result = loadQuantizedDurFile(a1, (uint64_t)(a2 + 42), a4, 0xFu);
    if (result) {
      return result;
    }
    *a2 = a2[43];
  }
  uint64_t v13 = &a2[a3];
  if (v13[130])
  {
    uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), (*(_DWORD *)(a6 + 268) - 1), 4);
    *((void *)a2 + 53) = v14;
    if (!v14) {
      return 2229280778;
    }
    uint64_t result = loadVQQuantizedCepFile(a1, (unsigned __int16 *)a2 + 196, a4);
    if (result) {
      return result;
    }
    *a2 = *((unsigned __int16 *)a2 + 199);
    a2[a3 + 1] = *((unsigned __int16 *)a2 + 198) + *((unsigned __int16 *)a2 + 198) * *((unsigned __int16 *)a2 + 201);
    uint64_t result = loadCodebookSet(a1, (uint64_t)(a2 + 116), a5, 0x10u);
    if (result) {
      return result;
    }
  }
  if (!v13[140]) {
    return 0;
  }
  uint64_t v15 = (uint64_t *)&a2[2 * a3 + 78];
  if (*v15) {
    heap_Free(*(void **)(a1 + 8), *v15);
  }
  uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), 1, 128);
  *uint64_t v15 = v16;
  if (!v16) {
    return 2229280778;
  }
  int v17 = *(_DWORD *)(a6 + 4 * a3 + 224);
  if (v17 == 2)
  {
    int v18 = 3774880;
    unsigned int v19 = 20;
  }
  else if (v17 == 3)
  {
    int v18 = 1310720;
    unsigned int v19 = 18;
  }
  else
  {
    unsigned int v19 = 0;
    int v18 = 0;
  }
  uint64_t result = loadQuantizedMsdFile(a1, v16, *a2, a4, v19, v18);
  if (!result) {
    a2[a3 + 1] = *(_DWORD *)(*v15 + 8);
  }
  return result;
}

uint64_t BET3FXD__FindDurPDF(uint64_t a1, int *a2, int a3, int a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  if (*a2 < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = (uint64_t)(a2 + 42);
  int v12 = v4 - 1;
  while (1)
  {
    uint64_t v20 = 0;
    uint64_t result = dequantDur(v11, v12, v9, (_DWORD *)&v20 + 1, &v20, 15);
    if ((result & 0x80000000) != 0) {
      break;
    }
    int v14 = HIDWORD(v20);
    int v15 = BET3FXD__mul_Q18_14_Q1_15_to_Q18_14(((int)v20 >> 1), a3);
    unsigned int v16 = (v15 + (v14 >> 1)) & ~((v15 + (v14 >> 1)) >> 31);
    if (a2[151])
    {
      if (v16 >= 0x3E7F060) {
        int v10 = 65532000;
      }
      else {
        int v10 = (v15 + (v14 >> 1)) & ~((v15 + (v14 >> 1)) >> 31);
      }
    }
    else if (v16 <= 0x3E7F060)
    {
      int v10 = (v15 + (v14 >> 1)) & ~((v15 + (v14 >> 1)) >> 31);
    }
    else
    {
      v10 >>= 1;
    }
    int v17 = a4 + ((v10 + 0x2000) >> 14);
    uint64_t v18 = *(void *)(a1 + 16) + 4 * v9;
    *(_DWORD *)(v18 + 8) = v17;
    *(_DWORD *)(a1 + 24) += v17;
    a4 = (v10 + 0x2000 - (*(_DWORD *)(v18 + 8) << 14)) >> 14;
    uint64_t v19 = v9 + 2;
    ++v9;
    if (v19 > *a2) {
      return 0;
    }
  }
  return result;
}

uint64_t BET3FXD__FindContPDF(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  unint64_t v35 = 0;
  int v10 = a1;
  int v11 = *a8;
  int v12 = *a8 * *(unsigned __int16 *)(a4 + 396);
  LODWORD(v13) = *(unsigned __int16 *)(a4 + 402);
  int v14 = v12 + v12 * v13;
  if (*(_WORD *)(a4 + 396))
  {
    uint64_t v31 = a3;
    uint64_t v32 = a8;
    unsigned int v16 = 0;
    int v17 = *(_DWORD *)(*(void *)(a3 + 8 * a1 + 72) + 4 * a2);
    uint64_t v18 = (unsigned __int16 *)(a4 + 392);
    uint64_t v19 = a4 + 464;
    int v20 = v14 + 1;
    int v33 = v12 + v12 * v13;
    while (1)
    {
      uint64_t result = dequantEnergy(v18, a2, (unsigned __int16)v17, v16, (_DWORD *)&v35 + 1, &v35, 0x10u);
      if ((result & 0x80000000) != 0) {
        break;
      }
      int v22 = v16 + v16 * v13 + v14;
      LODWORD(v35) = (int)v35 >> 4;
      int v23 = v35;
      HIDWORD(v35) <<= 8;
      *(_DWORD *)(a6 + 4 * v22) = HIDWORD(v35);
      *(_DWORD *)(a7 + 4 * v22) = v23;
      LODWORD(v13) = *(unsigned __int16 *)(a4 + 402);
      if (*(_WORD *)(a4 + 402))
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v25 = *(int *)(*(void *)(a4 + 424) + 4 * v24);
          uint64_t result = deVQSpectrum(v18, v19, a2, (unsigned __int16)v17, v25, v24 - *(unsigned __int16 *)(*(void *)(a4 + 416) + 2 * v25), v16, (_DWORD *)&v35 + 1, &v35, 0x10u);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          int v26 = v20 + v24 + v16 + v16 * v13;
          unsigned int v27 = HIDWORD(v35) << 8;
          int v28 = (int)v35 >> 4;
          *(_DWORD *)(a6 + 4 * v26) = HIDWORD(v35) << 8;
          unint64_t v35 = __PAIR64__(v27, v28);
          *(_DWORD *)(a7 + 4 * v26) = v28;
          ++v24;
          unint64_t v13 = *(unsigned __int16 *)(a4 + 402);
        }
        while (v24 < v13);
      }
      ++v16;
      int v14 = v33;
      if (v16 >= *(unsigned __int16 *)(a4 + 396))
      {
        a3 = v31;
        a8 = v32;
        int v11 = *v32;
        int v10 = a1;
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t result = 0;
LABEL_11:
    uint64_t v29 = a3 + 8 * v10;
    *(void *)(*(void *)(v29 + 152) + 8 * a2) = a6 + 4 * v14;
    *(void *)(*(void *)(v29 + 232) + 8 * a2) = a7 + 4 * v14;
    *a8 = v11 + 1;
  }
  return result;
}

uint64_t BET3FXD__FindMsdPDF(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = 0;
  int v38 = 0;
  uint64_t v5 = a5 + 4 * a1;
  int v8 = *(_DWORD *)(v5 + 224);
  uint64_t v7 = (_DWORD *)(v5 + 224);
  int v6 = v8;
  if (v8 == 3) {
    unsigned int v9 = 18;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v6 == 2) {
    uint64_t v10 = 20;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t v11 = a4 + 4 * a1;
  int v13 = *(_DWORD *)(v11 + 4);
  int v12 = (int *)(v11 + 4);
  if (v13 < 1) {
    return 0;
  }
  uint64_t v14 = a3;
  uint64_t v15 = 0;
  uint64_t v16 = a2;
  int v17 = (uint64_t *)(a4 + 8 * a1 + 312);
  uint64_t v18 = (void *)(a3 + 8 * a1);
  uint64_t v19 = (a2 - 2);
  int v37 = *(_DWORD *)(v18[9] + 4 * a2) - 1;
  char v20 = 24 - v10;
  uint64_t v36 = v18 + 19;
  char v35 = v10 - 12;
  int v33 = (int *)(a5 + 4 * a1 + 2104);
  uint64_t v34 = v18 + 29;
  uint64_t v32 = v12;
  do
  {
    uint64_t v21 = dequantMsd(*v17, v19, v37, v15, (_DWORD *)&v39 + 1, &v39, &v38, v10);
    if ((v21 & 0x80000000) != 0) {
      break;
    }
    v38 <<= v20;
    *(_DWORD *)(*(void *)(*v36 + 8 * v16) + 4 * v15 + 4) = HIDWORD(v39) << v20;
    if ((*v7 & 0xFFFFFFFE) == 2) {
      *(_DWORD *)(*(void *)(*v34 + 8 * v16) + 4 * v15 + 4) = (int)v39 >> v35;
    }
    if (!v15)
    {
      uint64_t v22 = v10;
      uint64_t v23 = v19;
      unint64_t v24 = v17;
      if (*v7 == 2) {
        *(_DWORD *)(*(void *)(v14 + 320) + 4 * v16) = v38;
      }
      uint64_t v25 = v14;
      int v26 = v38;
      int v27 = BET3FXD__Q10_22_to_Q8_24(*v33);
      uint64_t v28 = 1 << *v7;
      if (v26 <= v27)
      {
        uint64_t v14 = v25;
        uint64_t v29 = *(void *)(v25 + 312);
        char v30 = *(unsigned char *)(v29 + v16) & ~(_BYTE)v28;
      }
      else
      {
        uint64_t v14 = v25;
        uint64_t v29 = *(void *)(v25 + 312);
        char v30 = *(unsigned char *)(v29 + v16) | v28;
      }
      *(unsigned char *)(v29 + v16) = v30;
      int v17 = v24;
      uint64_t v19 = v23;
      uint64_t v10 = v22;
      int v12 = v32;
    }
    ++v15;
  }
  while (v15 < *v12);
  return v21;
}

void BET3FXD__DeInitModelSet(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[59];
  if (v4)
  {
    heap_Free(*(void **)(a1 + 8), v4);
    a2[59] = 0;
  }
  for (uint64_t i = 39; i != 49; ++i)
  {
    uint64_t v6 = a2[i];
    if (v6)
    {
      if (*(void *)(v6 + 120))
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(v6 + 120));
        *(void *)(a2[i] + 120) = 0;
        uint64_t v6 = a2[i];
      }
      heap_Free(*(void **)(a1 + 8), v6);
      a2[i] = 0;
    }
  }
  if (*((_WORD *)a2 + 198))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = a2[54];
    uint64_t v10 = v9;
    do
    {
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + v7 + 8);
        if (v11)
        {
          heap_Free(*(void **)(a1 + 8), v11);
          uint64_t v9 = a2[54];
          *(void *)(v9 + v7 + 8) = 0;
        }
        uint64_t v12 = *(void *)(v9 + v7 + 24);
        if (v12)
        {
          heap_Free(*(void **)(a1 + 8), v12);
          uint64_t v9 = a2[54];
          *(void *)(v9 + v7 + 24) = 0;
        }
        uint64_t v13 = *(void *)(v9 + v7 + 32);
        uint64_t v10 = v9;
        if (v13)
        {
          heap_Free(*(void **)(a1 + 8), v13);
          uint64_t v9 = a2[54];
          *(void *)(v9 + v7 + 32) = 0;
          uint64_t v10 = v9;
        }
      }
      ++v8;
      v7 += 40;
    }
    while (v8 < 2 * (unint64_t)*((unsigned __int16 *)a2 + 198));
  }
  uint64_t v14 = a2[52];
  if (v14)
  {
    heap_Free(*(void **)(a1 + 8), v14);
    a2[52] = 0;
  }
  uint64_t v15 = a2[53];
  if (v15)
  {
    heap_Free(*(void **)(a1 + 8), v15);
    a2[53] = 0;
  }
  uint64_t v16 = a2[54];
  if (v16)
  {
    heap_Free(*(void **)(a1 + 8), v16);
    a2[54] = 0;
  }
  uint64_t v17 = a2[56];
  if (v17)
  {
    a2[56] = v17 + 32;
    heap_Free(*(void **)(a1 + 8), v17 + 32);
  }
  bzero(a2, 0x260uLL);
}

uint64_t BET3FXD__InitUttModel(uint64_t a1, char *a2, int *a3, unsigned int a4)
{
  uint64_t v8 = 2229280778;
  bzero(a2, 0x240uLL);
  *(void *)a2 = a1;
  *((void *)a2 + 1) = a3;
  *((_DWORD *)a2 + 138) = a4;
  *((_DWORD *)a2 + 141) = *a3 * a4;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), a4, 528);
  *((void *)a2 + 68) = v9;
  if (v9)
  {
    uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
    *((void *)a2 + 4) = v10;
    if (v10)
    {
      uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 1);
      *((void *)a2 + 41) = v11;
      if (v11)
      {
        uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
        *((void *)a2 + 42) = v12;
        if (v12)
        {
          int v13 = a3[150];
          if (v13 >= 1)
          {
            uint64_t v14 = 0;
            uint64_t v15 = a2 + 168;
            uint64_t v16 = a3;
            do
            {
              if (!v16[120])
              {
                uint64_t v17 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
                *(v15 - 10) = v17;
                if (!v17) {
                  return v8;
                }
                uint64_t v18 = *(void **)(a1 + 8);
                int v19 = *((_DWORD *)a2 + 138);
                char v20 = v16[140]
                    ? BET3FLT__ddcalloc(v18, 2 * v19 * *a3, v16[1] + 1)
                    : (void *)heap_Calloc(v18, (2 * v19 * *a3), 8);
                *uint64_t v15 = v20;
                if (!v20) {
                  return v8;
                }
                v15[10] = &v20[*a3 * *((_DWORD *)a2 + 138)];
                int v13 = a3[150];
              }
              ++v14;
              ++v16;
              ++v15;
            }
            while (v14 < v13);
          }
          uint64_t v21 = *((unsigned int *)a2 + 138);
          if ((int)v21 >= 1)
          {
            uint64_t v22 = 0;
            uint64_t v23 = *a3;
            uint64_t v24 = 152;
            do
            {
              uint64_t v25 = *((void *)a2 + 68);
              uint64_t v26 = v25 + 528 * v22;
              *(_DWORD *)uint64_t v26 = v22;
              uint64_t v27 = v22 * v23;
              uint64_t v28 = *((void *)a2 + 41) + v22 * v23;
              uint64_t v29 = *((void *)a2 + 42) + 4 * v22 * v23;
              *(void *)(v26 + 16) = *((void *)a2 + 4) + 4 * v22 * v23 - 8;
              *(void *)(v26 + 312) = v28 - 2;
              *(void *)(v26 + 320) = v29 - 8;
              if (v13 >= 1)
              {
                char v30 = (uint64_t *)(v25 + v24);
                uint64_t v31 = a2 + 168;
                uint64_t v32 = v13;
                int v33 = a3 + 120;
                do
                {
                  if (!*v33++)
                  {
                    uint64_t v35 = *(v31 - 10) + 4 * v27;
                    *(v30 - 10) = v35;
                    uint64_t v36 = *v31 + 8 * v27;
                    *char v30 = v36;
                    uint64_t v37 = v31[10] + 8 * v27;
                    *(v30 - 10) = v35 - 8;
                    *char v30 = v36 - 16;
                    v30[10] = v37 - 16;
                  }
                  ++v30;
                  ++v31;
                  --v32;
                }
                while (v32);
              }
              ++v22;
              v24 += 528;
            }
            while (v22 != v21);
          }
          return 0;
        }
      }
    }
  }
  return v8;
}

void *BET3FXD__DeInitUttModel(void *result)
{
  uint64_t v1 = result;
  if (*result && result[68])
  {
    uint64_t v2 = result[1];
    uint64_t v3 = result[4];
    if (v3)
    {
      heap_Free(*(void **)(*result + 8), v3);
      v1[4] = 0;
    }
    uint64_t v4 = v1[41];
    if (v4)
    {
      heap_Free(*(void **)(*v1 + 8), v4);
      v1[41] = 0;
    }
    uint64_t v5 = v1[42];
    if (v5)
    {
      heap_Free(*(void **)(*v1 + 8), v5);
      v1[42] = 0;
    }
    if (*(int *)(v2 + 600) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        if (!*(_DWORD *)(v2 + 480 + 4 * v6))
        {
          uint64_t v7 = &v1[v6];
          uint64_t v8 = v7[11];
          if (v8)
          {
            heap_Free(*(void **)(*v1 + 8), v8);
            v7[11] = 0;
          }
          uint64_t v9 = v7[21];
          if (v9)
          {
            heap_Free(*(void **)(*v1 + 8), v9);
            v7[21] = 0;
          }
        }
        ++v6;
      }
      while (v6 < *(int *)(v2 + 600));
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v1[68]);
  }
  v1[68] = 0;
  *((_DWORD *)v1 + 138) = 0;
  *uint64_t v1 = 0;
  return result;
}

void *BET3FXD__DeInitMSDUttModel(void *result, int a2)
{
  uint64_t v2 = result[1];
  if (!*(_DWORD *)(v2 + 4 * a2 + 480))
  {
    uint64_t v3 = result;
    uint64_t v4 = a2;
    uint64_t v5 = &result[a2];
    uint64_t v6 = v5[11];
    if (v6)
    {
      uint64_t result = heap_Free(*(void **)(*result + 8), v6);
      v5[11] = 0;
    }
    uint64_t v9 = (void *)v5[21];
    uint64_t v8 = (uint64_t **)(v5 + 21);
    uint64_t v7 = v9;
    if (v9)
    {
      if (*(_DWORD *)(v2 + 4 * v4 + 560))
      {
        *v7 += 4;
        uint64_t result = BET3FLT__dd_free(*(void **)(*v3 + 8), *v8);
      }
      else
      {
        uint64_t result = heap_Free(*(void **)(*v3 + 8), (uint64_t)v7);
      }
      *uint64_t v8 = 0;
    }
  }
  return result;
}

uint64_t BET3FXD__InitModelSet(int a1, char *a2, _DWORD *a3)
{
  bzero(a2, 0x260uLL);
  int v5 = a3[33];
  *((_DWORD *)a2 + 150) = v5;
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 536;
    uint64_t v8 = a2;
    do
    {
      *((_DWORD *)v8 + 32) = a3[86];
      uint64_t v9 = a2 + 480;
      if (v7 != 536)
      {
        if (a3[536]) {
          uint64_t v9 = &a2[4 * v6 + 560];
        }
        else {
          uint64_t v9 = v8 + 520;
        }
      }
      ++a3;
      *(_DWORD *)uint64_t v9 = 1;
      ++v6;
      uint64_t v10 = v7 - 535;
      ++v7;
      v8 += 4;
    }
    while (v10 < *((int *)a2 + 150));
  }
  return 0;
}

uint64_t BET3FXD__meancpy(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16);
  if (v1 >= 1)
  {
    uint64_t v2 = 0;
    LODWORD(v3) = *(_DWORD *)(result + 20);
    do
    {
      if ((int)v3 >= 1)
      {
        uint64_t v4 = 0;
        uint64_t v5 = *(void *)(result + 72);
        uint64_t v6 = *(void *)(result + 40);
        do
        {
          *(_DWORD *)(*(void *)(v6 + 8 * v4) + 4 * v2) = *(_DWORD *)(*(void *)(v5 + 8 * v4) + 4 * v2);
          ++v4;
          uint64_t v3 = *(int *)(result + 20);
        }
        while (v4 < v3);
        int v1 = *(_DWORD *)(result + 16);
      }
      ++v2;
    }
    while (v2 < v1);
  }
  return result;
}

uint64_t BET3FXD__ConstW_Calc_R_and_r(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 20);
  int v4 = a2 + 2 * v2;
  uint64_t v5 = a2;
  uint64_t v6 = *(void **)(a1 + 72);
  uint64_t v7 = *(void **)(a1 + 80);
  uint64_t v8 = v7[1];
  uint64_t v9 = *(int *)(*v7 + 4 * a2);
  int v10 = v2 + a2;
  uint64_t v11 = *(int *)(v8 + 4 * v10);
  uint64_t v12 = v6[1];
  int v13 = *(_DWORD *)(*v6 + 4 * a2);
  uint64_t v14 = v10;
  uint64_t v15 = ((int)((unint64_t)(-2147483392 * v11) >> 32) * (uint64_t)*(int *)(v12 + 4 * v10)) >> 12;
  uint64_t v16 = *(void ***)(a1 + 96);
  uint64_t v17 = *(void **)(a1 + 104);
  uint64_t v18 = v15 + ((v13 * (uint64_t)(int)v9) >> 12);
  uint64_t v19 = v4;
  uint64_t v20 = *(int *)(*v7 + 4 * v4);
  uint64_t v21 = (uint64_t)(0xFFFFFFFE00000200 * v20) >> 32;
  uint64_t v22 = v18 + (((int)v21 * (uint64_t)*(int *)(*v6 + 4 * v4)) >> 12);
  int v23 = *(_DWORD *)(v8 + 4 * v4);
  uint64_t result = v23;
  int v25 = *(_DWORD *)(v12 + 4 * v4);
  *uint64_t v17 = v22 + ((v25 * (uint64_t)v23) >> 12);
  uint64_t v26 = *v16;
  uint64_t v27 = (0xFFFFFFLL * v23) >> 12;
  *uint64_t v26 = ((0x3FFFFF * v11) >> 12) + (v9 << 12) + ((67108860 * v20) >> 12) + v27;
  v26[1] = ((-33554430 * v23) >> 12) + (v21 << 12);
  v26[2] = v27 + ((-4194303 * v11) >> 12);
  if (v3 < 3)
  {
    int v48 = v25;
    LODWORD(v28) = 1;
  }
  else
  {
    uint64_t v28 = (v3 - 1);
    uint64_t v29 = v16 + 1;
    char v30 = v17 + 1;
    uint64_t v31 = v7 + 2;
    uint64_t v32 = v6 + 2;
    uint64_t v33 = v28 - 1;
    do
    {
      uint64_t v34 = *(int *)(v8 + 4 * v5);
      uint64_t v35 = *(v31 - 2);
      uint64_t v36 = *(int *)(v35 + 4 * v14);
      uint64_t v37 = *(v32 - 2);
      uint64_t v38 = (((int)((unint64_t)(2147483392 * v36) >> 32) * (uint64_t)*(int *)(v37 + 4 * v14)) >> 12)
          + ((*(int *)(v12 + 4 * v5) * (uint64_t)(int)v34) >> 12);
      uint64_t v39 = *v31++;
      uint64_t v8 = v39;
      uint64_t v40 = *(int *)(v39 + 4 * v14);
      uint64_t v41 = *v32++;
      uint64_t v12 = v41;
      uint64_t v42 = *(int *)(v35 + 4 * v19);
      uint64_t v43 = v38
          + (((int)((unint64_t)(-2147483392 * (int)v40) >> 32) * (uint64_t)*(int *)(v41 + 4 * v14)) >> 12)
          + ((*(int *)(v37 + 4 * v19) * (uint64_t)(int)v42) >> 12);
      uint64_t v44 = (uint64_t)(0xFFFFFFFE00000200 * v23) >> 32;
      uint64_t v45 = v43 + (((int)v44 * (uint64_t)v25) >> 12);
      uint64_t v46 = *(int *)(v8 + 4 * v19);
      int v25 = *(_DWORD *)(v41 + 4 * v19);
      *v30++ = v45 + ((v25 * (uint64_t)(int)v46) >> 12);
      uint64_t v47 = *v29++;
      *uint64_t v47 = ((0x3FFFFF * v40) >> 12)
           + ((0x3FFFFF * v36) >> 12)
           + ((67108860 * v23) >> 12)
           + ((v42 + v34 + v46) << 12);
      v47[1] = ((-33554430 * (int)v46) >> 12) + (v44 << 12);
      v47[2] = ((0xFFFFFF * v46) >> 12) + ((-4194303 * v40) >> 12);
      int v23 = v46;
      --v33;
    }
    while (v33);
    uint64_t v8 = v7[v28];
    uint64_t v12 = v6[v28];
    uint64_t result = *(int *)(v8 + 4 * v19);
    int v48 = *(_DWORD *)(v12 + 4 * v19);
  }
  uint64_t v49 = *(int *)(v8 + 4 * v5);
  uint64_t v50 = v7[(int)v28 - 1];
  uint64_t v51 = *(int *)(v50 + 4 * v14);
  uint64_t v52 = v6[(int)v28 - 1];
  uint64_t v53 = *(int *)(v50 + 4 * v19);
  v17[v28] = (((int)((unint64_t)(2147483392 * v51) >> 32) * (uint64_t)*(int *)(v52 + 4 * v14)) >> 12)
                         + ((*(int *)(v12 + 4 * v5) * (uint64_t)(int)v49) >> 12)
                         + ((*(int *)(v52 + 4 * v19) * (uint64_t)(int)v53) >> 12)
                         + (((int)((0xFFFFFFFE00000200 * result) >> 32) * (uint64_t)v48) >> 12);
  v54 = v16[v28];
  v54[1] = 0;
  v54[2] = 0;
  void *v54 = ((v53 + v49) << 12) + ((0x3FFFFF * v51) >> 12) + ((67108860 * result) >> 12);
  return result;
}

uint64_t BET3FXD__ConstW_Cholesky(uint64_t result)
{
  int v1 = *(uint64_t ***)(result + 96);
  int v3 = *v1;
  int v2 = v1[1];
  uint64_t v4 = **v1;
  uint64_t v5 = v4 >> 4;
  if ((unint64_t)v4 < 0x10) {
    uint64_t v5 = 1;
  }
  uint64_t v6 = ((*v1)[1] << 16) / v5;
  uint64_t v7 = 16 * ((v3[2] << 16) / v5);
  v3[1] = 16 * v6;
  v3[2] = v7;
  uint64_t v8 = v2[1];
  uint64_t v9 = *v2 - ((uint64_t)(((unint64_t)(((16 * v6) >> 3) * ((16 * v6) >> 3)) >> 21) * (v4 >> 3)) >> 18);
  *int v2 = v9;
  uint64_t v10 = v8 - (((((v3[2] >> 3) * (v3[1] >> 3)) >> 21) * (*v3 >> 3)) >> 18);
  if ((unint64_t)v9 < 0x10) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v9 >> 4;
  }
  uint64_t v12 = 16 * ((v10 << 16) / v11);
  uint64_t v13 = 16 * ((v2[2] << 16) / v11);
  v2[1] = v12;
  v2[2] = v13;
  uint64_t v14 = *(unsigned int *)(result + 20);
  if ((int)v14 >= 3)
  {
    uint64_t v15 = v1 + 2;
    uint64_t v16 = v14 - 2;
    do
    {
      uint64_t v17 = *v15;
      uint64_t v18 = (*v15)[1];
      uint64_t v19 = **v15 - ((uint64_t)(((unint64_t)((v12 >> 3) * (v12 >> 3)) >> 21) * (v9 >> 3)) >> 18);
      *uint64_t v17 = v19;
      uint64_t v9 = v19
         - ((uint64_t)(((unint64_t)(((*(v15 - 2))[2] >> 3) * ((*(v15 - 2))[2] >> 3)) >> 21) * (**(v15 - 2) >> 3)) >> 18);
      *uint64_t v17 = v9;
      uint64_t v20 = v18 - (((((v2[2] >> 3) * (v2[1] >> 3)) >> 21) * (*v2 >> 3)) >> 18);
      if ((unint64_t)v9 < 0x10) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v9 >> 4;
      }
      uint64_t v12 = 16 * ((v20 << 16) / v21);
      uint64_t v22 = 16 * ((v17[2] << 16) / v21);
      v17[1] = v12;
      v17[2] = v22;
      ++v15;
      int v2 = v17;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t BET3FXD__ConstW_Cholesky_forward(uint64_t result)
{
  int v1 = *(uint64_t **)(result + 96);
  int v2 = *(uint64_t **)(result + 104);
  int v3 = *(uint64_t **)(result + 88);
  uint64_t v4 = *v2;
  *int v3 = *v2;
  uint64_t v5 = *v1;
  uint64_t v6 = v2[1] - ((*(void *)(*v1 + 8) * v4) >> 24);
  v3[1] = v6;
  uint64_t v7 = *(unsigned int *)(result + 20);
  if ((int)v7 >= 3)
  {
    uint64_t v8 = v1 + 1;
    uint64_t v9 = v3 + 2;
    uint64_t v10 = v2 + 2;
    uint64_t v11 = v7 - 2;
    do
    {
      uint64_t v13 = *v8++;
      uint64_t v12 = v13;
      uint64_t v14 = ((v6 >> 3) * (*(uint64_t *)(v13 + 8) >> 3)) >> 18;
      uint64_t v15 = *v10++;
      uint64_t v6 = v15 - (v14 + (((*(v9 - 2) >> 3) * (*(uint64_t *)(v5 + 16) >> 3)) >> 18));
      *v9++ = v6;
      uint64_t v5 = v12;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t BET3FXD__ConstW_Cholesky_backward(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 20);
  int v3 = v2 - 1;
  uint64_t v4 = *(void *)(result + 88);
  uint64_t v5 = *(void *)(result + 96);
  uint64_t v6 = **(void **)(v5 + 8 * (v2 - 1));
  if ((unint64_t)v6 <= 1) {
    uint64_t v6 = 1;
  }
  uint64_t v7 = (*(void *)(v4 + 8 * v3) << 24) / v6;
  uint64_t v8 = *(void *)(result + 40);
  *(_DWORD *)(*(void *)(v8 + 8 * v3) + 4 * a2) = v7;
  int v9 = v2 - 2;
  uint64_t v10 = *(uint64_t **)(v5 + 8 * v9);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  if ((unint64_t)v12 < 0x10) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12 >> 4;
  }
  *(_DWORD *)(*(void *)(v8 + 8 * v9) + 4 * a2) = 16 * ((*(void *)(v4 + 8 * v9) << 16) / v13)
                                                     - ((unint64_t)(v11 * (int)v7) >> 24);
  int v14 = *(_DWORD *)(result + 20);
  if (v14 >= 3)
  {
    uint64_t v15 = 8 * (v14 - 3);
    uint64_t v16 = v8 + 16;
    do
    {
      uint64_t v17 = *(uint64_t **)(v5 + v15);
      if ((unint64_t)*v17 < 0x10) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = *v17 >> 4;
      }
      uint64_t result = *(void *)(v16 + v15 - 16);
      *(_DWORD *)(result + 4 * a2) = 16 * ((*(void *)(v4 + v15) << 16) / v18)
                                     - (((unint64_t)(v17[1] * *(int *)(*(void *)(v16 + v15 - 8) + 4 * a2)) >> 24)
                                      + ((unint64_t)(v17[2] * *(int *)(*(void *)(v16 + v15) + 4 * a2)) >> 24));
      v15 -= 8;
    }
    while (v15 != -8);
  }
  return result;
}

uint64_t BET3FXD__mlpg2(uint64_t a1, int a2)
{
  if (*(int *)(a1 + 20) < 2)
  {
    return BET3FXD__meancpy(a1);
  }
  else
  {
    BET3FXD__ConstW_Calc_R_and_r(a1, a2);
    BET3FXD__ConstW_Cholesky(a1);
    BET3FXD__ConstW_Cholesky_forward(a1);
    return BET3FXD__ConstW_Cholesky_backward(a1, a2);
  }
}

uint64_t BET3FXD__log_select_Diag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a3 - 1;
  do
    int v4 = *(unsigned __int8 *)++v3;
  while (v4 == 10);
  return log_VOutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", (a2 + 2), 0, v3);
}

uint64_t BET3FXD__log_select_Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", a2, 0, a5, a6, a7, a8, v9);
}

void *BET3FXD__ddcalloc_64(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if ((int)a2 >= 1 && a3 >= 1)
  {
    uint64_t v7 = a2;
    uint64_t v3 = (void *)heap_Calloc(a1, a2, 8);
    if (v3)
    {
      uint64_t v8 = heap_Calloc(a1, a3 * a2, 8);
      *uint64_t v3 = v8;
      if (v8)
      {
        if (a2 >= 2)
        {
          uint64_t v9 = 1;
          uint64_t v10 = v8 + 8 * a3;
          do
          {
            v3[v9] = v10;
            v10 += 8 * a3;
            ++v9;
          }
          while (v7 != v9);
        }
      }
      else
      {
        heap_Free(a1, (uint64_t)v3);
        return 0;
      }
    }
  }
  return v3;
}

uint64_t BET3FXD__LoadDWinFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  uint64_t v5 = (unsigned int *)(a2 + 40 * a3);
  if (!*v5) {
    return 0;
  }
  uint64_t v9 = 2229280778;
  uint64_t v10 = BET3FLT__ddcalloc(*(void **)(a1 + 8), *v5, 2);
  uint64_t v11 = a2 + 40 * a3;
  *(void *)(v11 + 8) = v10;
  uint64_t v12 = (int ***)(v11 + 8);
  if (v10)
  {
    uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), *v5, 8);
    uint64_t v14 = a2 + 40 * a3;
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = (uint64_t **)(v14 + 16);
    if (v13)
    {
      *(void *)**uint64_t v12 = 0;
      **uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1, 4);
      uint64_t v16 = (_DWORD *)**v15;
      if (v16)
      {
        _DWORD *v16 = 1;
        LODWORD(v17) = *v5;
        if ((int)*v5 <= 1)
        {
LABEL_9:
          uint64_t v27 = a2 + 40 * a3;
          *(_DWORD *)(v27 + 24) = 0;
          uint64_t v28 = (_DWORD *)(v27 + 24);
          v28[1] = 0;
          if ((int)v17 < 1)
          {
            int v30 = 0;
          }
          else
          {
            int v29 = 0;
            int v30 = 0;
            uint64_t v31 = *v12;
            uint64_t v17 = v17;
            do
            {
              uint64_t v32 = *v31;
              int v33 = **v31;
              if (v30 > v33)
              {
                *uint64_t v28 = v33;
                int v30 = v33;
              }
              int v34 = v32[1];
              if (v29 < v34)
              {
                v28[1] = v34;
                int v29 = v34;
              }
              ++v31;
              --v17;
            }
            while (v17);
            if (v30 < v29)
            {
              uint64_t v9 = 0;
              *(_DWORD *)(a2 + 40 * a3 + 32) = v29;
              return v9;
            }
          }
          uint64_t v9 = 0;
          *(_DWORD *)(a2 + 40 * a3 + 32) = v30;
          return v9;
        }
        uint64_t v18 = 1;
        uint64_t v19 = 1;
        while (1)
        {
          unsigned int v20 = BET3FLT__xfread2ptr_BET3(&(*v15)[v19], 4u, 0xFFFFFFFFLL, a4);
          if (!v20) {
            break;
          }
          (*v15)[v19] += 4 * (v20 >> 1);
          uint64_t v26 = (*v12)[v19];
          *uint64_t v26 = -(v20 >> 1);
          v26[1] = (v20 & 1) + (v20 >> 1) - 1;
          ++v18;
          uint64_t v17 = (int)*v5;
          ++v19;
          a4 += 6;
          if (v18 >= v17) {
            goto LABEL_9;
          }
        }
        BET3FXD__log_select_Error(a1, 55019, (uint64_t)"InitDWin: illegal data\n", v21, v22, v23, v24, v25);
        return 2229280772;
      }
    }
  }
  return v9;
}

uint64_t BET3FXD__InitPStreamSM(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (a2
    && *(void *)(a2 + 24)
    && *((_DWORD *)a1 + 3) == *(_DWORD *)(a2 + 12)
    && *((_DWORD *)a1 + 5) == *(_DWORD *)(a2 + 16)
    && *((_DWORD *)a1 + 6) == *(_DWORD *)(a2 + 20))
  {
    uint64_t result = 0;
    long long v6 = *(_OWORD *)(a2 + 48);
    long long v8 = *(_OWORD *)a2;
    long long v7 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a1 + 6) = v6;
    *((_OWORD *)a1 + 3) = v8;
    *((_OWORD *)a1 + 4) = v7;
LABEL_12:
    *((_DWORD *)a1 + 14) = 1;
    return result;
  }
  a1[6] = v4;
  uint64_t v9 = (long long *)(a1 + 6);
  int v10 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 14) = 0;
  *((_DWORD *)a1 + 15) = v10;
  uint64_t v11 = *(uint64_t *)((char *)a1 + 20);
  a1[8] = v11;
  uint64_t v12 = BET3FLT__ddcalloc(*(void **)(v4 + 8), 2 * (int)v11, v10);
  a1[9] = (uint64_t)v12;
  if (v12
    && (int v13 = *((_DWORD *)a1 + 6),
        uint64_t v14 = *((int *)a1 + 5),
        a1[10] = (uint64_t)&v12[v14],
        uint64_t v15 = BET3FXD__ddcalloc_64(*(void **)(v4 + 8), v14, v13),
        (a1[12] = (uint64_t)v15) != 0)
    && (uint64_t v16 = heap_Calloc(*(void **)(v4 + 8), (2 * *((_DWORD *)a1 + 5)), 8), (a1[11] = v16) != 0))
  {
    a1[13] = v16 + 8 * *((int *)a1 + 5);
    if (a2)
    {
      BET3FLT__FreeSMatrices(a2);
      uint64_t result = 0;
      long long v17 = *v9;
      long long v18 = *((_OWORD *)a1 + 4);
      long long v19 = *((_OWORD *)a1 + 6);
      *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 5);
      *(_OWORD *)(a2 + 48) = v19;
      *(_OWORD *)a2 = v17;
      *(_OWORD *)(a2 + 16) = v18;
      goto LABEL_12;
    }
    return 0;
  }
  else
  {
    BET3FLT__FreeSMatrices((uint64_t)(a1 + 6));
    return 2229280778;
  }
}

uint64_t BET3FXD__InitPStreamParam(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *((_DWORD *)a1 + 6) = (2 * *(_DWORD *)(a1[4] + 32)) | 1;
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 40);
    if (v5)
    {
      if (*((_DWORD *)a1 + 5) == *(_DWORD *)(a2 + 20) && *((_DWORD *)a1 + 4) == *(_DWORD *)(a2 + 16))
      {
        a1[5] = v5;
        long long v6 = a1 + 1;
LABEL_12:
        uint64_t result = 0;
        *long long v6 = 1;
        return result;
      }
    }
  }
  *((_DWORD *)a1 + 2) = 0;
  long long v6 = a1 + 1;
  long long v7 = BET3FLT__ddcalloc(*(void **)(v4 + 8), *((_DWORD *)a1 + 5), *((_DWORD *)a1 + 4));
  a1[5] = (uint64_t)v7;
  if (v7) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 2229280778;
  }
  if (a2 && v7)
  {
    BET3FLT__FreePStreamParam((void *)a2);
    long long v9 = *(_OWORD *)a1;
    long long v10 = *((_OWORD *)a1 + 1);
    long long v11 = *((_OWORD *)a1 + 3);
    *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 2);
    *(_OWORD *)(a2 + 48) = v11;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v10;
    long long v12 = *((_OWORD *)a1 + 4);
    long long v13 = *((_OWORD *)a1 + 5);
    long long v14 = *((_OWORD *)a1 + 6);
    *(void *)(a2 + 112) = a1[14];
    *(_OWORD *)(a2 + 80) = v13;
    *(_OWORD *)(a2 + 96) = v14;
    *(_OWORD *)(a2 + 64) = v12;
    goto LABEL_12;
  }
  return result;
}

uint64_t select_bet3_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2229280769;
  }
  uint64_t result = 0;
  *a2 = &ISelect_Bet3_0;
  return result;
}

uint64_t select_bet3_ClassOpen_0(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2229280775;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 25957;
  }
  return result;
}

uint64_t select_bet3_ClassClose_0()
{
  return 0;
}

uint64_t select_bet3_ObjOpen_0(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  unsigned int v50 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v5 = 2229280775;
  memset(v51, 0, sizeof(v51));
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a3, a4, &v49);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else if ((safeh_HandleCheck(a1, a2, 25957, 408) & 0x80000000) != 0)
    {
      return 2229280776;
    }
    else
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      log_OutText(*(void *)(v49 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjOpen", v12, v13, v14, v43);
      uint64_t v15 = (void *)heap_Calloc(*(void **)(v49 + 8), 1, 6608);
      if (v15)
      {
        unsigned int v20 = v15;
        *uint64_t v15 = a3;
        v15[1] = a4;
        uint64_t v21 = v49;
        v15[2] = v49;
        v15[3] = a1;
        uint64_t Object = objc_GetObject(*(void *)(v21 + 48), (uint64_t)"SYNTHSTREAM", &v48);
        if ((Object & 0x80000000) != 0
          || (v20[4] = *(void *)(v48 + 8),
              uint64_t Object = objc_GetObject(*(void *)(v49 + 48), (uint64_t)"LINGDB", &v48),
              (Object & 0x80000000) != 0))
        {
          uint64_t v5 = Object;
          log_OutPublic(*(void *)(v20[2] + 32), (uint64_t)"SELECT_BET3", 55001, 0, v23, v24, v25, v26, v44);
        }
        else
        {
          uint64_t v27 = *(void *)(v48 + 8);
          v20[5] = v27;
          uint64_t ObjOpen = BET3FXD__select_bet3_FeatureExtractObjOpen(a3, a4, v20[4], v27, v20 + 7);
          if ((ObjOpen & 0x80000000) != 0) {
            goto LABEL_27;
          }
          uint64_t ObjOpen = select_bet3_loc_CreateDataBrkString(v49, (char *)v51);
          if ((ObjOpen & 0x80000000) != 0) {
            goto LABEL_27;
          }
          uint64_t v29 = v20[3];
          if (!v29 || (uint64_t v30 = *(void *)(v29 + 48)) == 0) {
            uint64_t v30 = *(void *)(v20[2] + 48);
          }
          uint64_t ObjOpen = objc_GetAddRefCountedObject(v30, (uint64_t)v51, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))select_bet3_loc_ObjcVoiceOpen_0, (void (*)(void, void, long long *))select_bet3_loc_ObjcVoiceClose_0, v49, &v48);
          if ((ObjOpen & 0x80000000) != 0
            || (uint64_t v31 = v49,
                uint64_t v32 = *(void *)(v48 + 32),
                v20[6] = v32,
                uint64_t ObjOpen = select_bet3_loc_SetSynthParams_0(v31, v32),
                (ObjOpen & 0x80000000) != 0))
          {
LABEL_27:
            uint64_t v5 = ObjOpen;
          }
          else
          {
            uint64_t v33 = *(void *)(v49 + 40);
            uint64_t v46 = v20;
            long long v45 = xmmword_26C21F758;
            long long v47 = xmmword_26C21F758;
            uint64_t v34 = paramc_ListenerAdd(v33, "frequencyhz", &v46);
            if ((v34 & 0x80000000) == 0)
            {
              uint64_t v39 = 0;
              while (1)
              {
                uint64_t v40 = off_2641119C8[v39];
                if ((paramc_ParamGetInt(*(void *)(v49 + 40), (uint64_t)v40, (int *)&v50) & 0x80000000) != 0)
                {
                  unsigned int v50 = dword_20D69FD80[v39];
                  uint64_t v34 = paramc_ParamSetInt(*(void *)(v49 + 40), (uint64_t)v40, v50);
                  if ((v34 & 0x80000000) != 0) {
                    break;
                  }
                }
                uint64_t v34 = select_bet3_loc_ParamSet_0((uint64_t)v20, v40, v50);
                if ((v34 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v41 = *(void *)(v49 + 40);
                uint64_t v46 = v20;
                long long v47 = v45;
                uint64_t v5 = paramc_ListenerAdd(v41, v40, &v46);
                if ((v5 & 0x80000000) != 0) {
                  goto LABEL_32;
                }
                if (++v39 == 3)
                {
                  *(void *)a5 = v20;
                  *(_DWORD *)(a5 + 8) = 25958;
                  goto LABEL_29;
                }
              }
            }
            uint64_t v5 = v34;
LABEL_32:
            log_OutPublic(*(void *)(v20[2] + 32), (uint64_t)"SELECT_BET3", 55002, "%s%s", v35, v36, v37, v38, "param");
          }
        }
        *(void *)a5 = v20;
        *(_DWORD *)(a5 + 8) = 25958;
        select_bet3_ObjClose_0(v20, *(void *)(a5 + 8));
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
      }
      else
      {
        log_OutPublic(*(void *)(v49 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v16, v17, v18, v19, v44);
        uint64_t v5 = 2229280778;
      }
LABEL_29:
      log_OutText(*(void *)(v49 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjOpen: %x", v36, v37, v38, v5);
    }
  }
  return v5;
}

uint64_t select_bet3_ObjClose_0(void *a1, int a2)
{
  int v3 = safeh_HandleCheck((uint64_t)a1, a2, 25958, 6608);
  if (v3 < 0) {
    return 2229280776;
  }
  LODWORD(v7) = v3;
  uint64_t v8 = a1[2];
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjClose", v4, v5, v6, v30);
  uint64_t v9 = 0;
  long long v31 = xmmword_26C21F758;
  do
  {
    long long v10 = off_2641119E8[v9];
    uint64_t v11 = *(void *)(v8 + 40);
    uint64_t v32 = a1;
    long long v33 = v31;
    int v12 = paramc_ListenerRemove(v11, v10, (long long *)&v32);
    if ((int)v7 > -1 && v12 < 0) {
      uint64_t v7 = v12;
    }
    else {
      uint64_t v7 = v7;
    }
    ++v9;
  }
  while (v9 != 4);
  uint64_t v14 = a1[6];
  if (v14)
  {
    uint64_t v15 = a1[3];
    if (!v15 || (uint64_t v16 = *(void *)(v15 + 48)) == 0) {
      uint64_t v16 = *(void *)(a1[2] + 48);
    }
    int v17 = objc_ReleaseObject(v16, v14);
    a1[6] = 0;
    if ((int)v7 > -1 && v17 < 0) {
      uint64_t v7 = v17;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  uint64_t v19 = a1[7];
  if (v19)
  {
    int ObjClose = BET3FLT__select_bet3_FeatureExtractObjClose(v19);
    if ((int)v7 > -1 && ObjClose < 0) {
      uint64_t v7 = ObjClose;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  if (a1[5])
  {
    int v22 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"LINGDB");
    if ((int)v7 > -1 && v22 < 0) {
      uint64_t v7 = v22;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  if (a1[4])
  {
    int v24 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if ((int)v7 > -1 && v24 < 0) {
      uint64_t v7 = v24;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  heap_Free(*(void **)(v8 + 8), (uint64_t)a1);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjClose: %x", v26, v27, v28, v7);
  return v7;
}

uint64_t select_bet3_ObjReopen_0(void *a1, int a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  memset(v21, 0, sizeof(v21));
  if ((safeh_HandleCheck((uint64_t)a1, a2, 25958, 6608) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v6 = a1[2];
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjReopen", v3, v4, v5, v19);
  uint64_t DataBrkString = select_bet3_loc_CreateDataBrkString(v6, (char *)v21);
  if ((DataBrkString & 0x80000000) == 0)
  {
    uint64_t v11 = a1[3];
    if (!v11 || (uint64_t v12 = *(void *)(v11 + 48)) == 0) {
      uint64_t v12 = *(void *)(a1[2] + 48);
    }
    uint64_t DataBrkString = objc_GetAddRefCountedObject(v12, (uint64_t)v21, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))select_bet3_loc_ObjcVoiceOpen_0, (void (*)(void, void, long long *))select_bet3_loc_ObjcVoiceClose_0, v6, &v20);
    if ((DataBrkString & 0x80000000) == 0)
    {
      uint64_t v13 = a1[6];
      if (v13)
      {
        uint64_t v14 = a1[3];
        if (!v14 || (uint64_t v15 = *(void *)(v14 + 48)) == 0) {
          uint64_t v15 = *(void *)(a1[2] + 48);
        }
        objc_ReleaseObject(v15, v13);
      }
      uint64_t v16 = *(void *)(v20 + 32);
      a1[6] = v16;
      uint64_t DataBrkString = select_bet3_loc_SetSynthParams_0(v6, v16);
    }
  }
  uint64_t v17 = DataBrkString;
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjReopen: %x", v8, v9, v10, DataBrkString);
  return v17;
}

uint64_t select_bet3_ProcessStart_0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 25958, 6608) & 0x80000000) != 0) {
    return 2229280776;
  }
  synstrmaux_InitStreamOpener(a1 + 72, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-cspp-sptchk;version=4.0",
    1,
    a1 + 928);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-cspp-sgt;version=4.0", 1, a1 + 944);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-bet3-speech-frames;version=5.0",
    a1 + 896);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 912);
  uint64_t v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 72), *(void *)(a1 + 32), a3, a4);
  if ((v8 & 0x80000000) != 0) {
    select_bet3_ProcessEnd_0(a1, a2);
  }
  *(_DWORD *)(a1 + 6600) = 0;
  return v8;
}

uint64_t select_bet3_Process_0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v60 = 0;
  if ((safeh_HandleCheck(a1, a2, 25958, 6608) & 0x80000000) != 0) {
    return 2229280776;
  }
  *a5 = 1;
  uint64_t v9 = (_DWORD *)(a1 + 6568);
  int v10 = *(_DWORD *)(a1 + 6568);
  if (*(void *)(a1 + 4616))
  {
    if (!v10)
    {
      uint64_t v11 = BET3FXD__ParamGenFrames(a1 + 4616, (int *)(*(void *)(a1 + 48) + 8112), (_DWORD *)(a1 + 6568));
      if ((v11 & 0x80000000) != 0)
      {
        uint64_t v25 = v11;
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 6576);
        if (!v12) {
          goto LABEL_65;
        }
        uint64_t v13 = *(unsigned int *)(a1 + 6588);
        unsigned int v14 = *(_DWORD *)(a1 + 6584);
        if (v14 <= v13) {
          goto LABEL_65;
        }
        uint64_t v15 = v12 + 32 * v13;
        int v16 = *(_DWORD *)(a1 + 5228);
        int v17 = *(_DWORD *)(a1 + 5232);
        if (v17 >= v16)
        {
          int v23 = 0;
          uint64_t v20 = (_DWORD *)(v12 + 32 * v13);
        }
        else
        {
          int v18 = 0;
          unsigned int v19 = *(_DWORD *)(a1 + 6600);
          uint64_t v20 = (_DWORD *)(v12 + 32 * v13);
          do
          {
            if (*v20 == 33)
            {
              unsigned int v21 = *(_DWORD *)(a1 + 6596);
              int v22 = *(_DWORD *)(*(void *)(a1 + 5216) + 528 * v17 + 24);
              v20[4] = v22;
              *(_DWORD *)(a1 + 6596) = v22 + v21;
              *(_DWORD *)(a1 + 5232) = ++v17;
            }
            else
            {
              if (*v20 == 8)
              {
                unsigned int v19 = v20[6] / *(_DWORD *)(*(void *)(a1 + 48) + 152);
                *(_DWORD *)(a1 + 6600) = v19;
              }
              unsigned int v21 = *(_DWORD *)(a1 + 6596);
              v20[4] = 0;
            }
            if (v19 > v21)
            {
              *(_DWORD *)(a1 + 6600) = v21;
              unsigned int v19 = v21;
            }
            v20[3] = v21 - v19;
            v20 += 8;
            int v23 = v18 + 1;
            if (v17 >= v16) {
              break;
            }
            unsigned int v24 = v13 + 1 + v18++;
          }
          while (v24 < v14);
        }
        if (*v9)
        {
          unsigned int v44 = v23 + v13;
          if (v23 + (int)v13 < v14)
          {
            int v45 = *(_DWORD *)(a1 + 6596);
            uint64_t v46 = v20 + 4;
            do
            {
              *(v46 - 1) = v45;
              _DWORD *v46 = 0;
              v46 += 8;
              ++v44;
            }
            while (v44 < v14);
            int v23 = v14 - v13;
          }
        }
        if (!v23)
        {
LABEL_65:
          uint64_t v59 = a1 + 4616;
          uint64_t v25 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t))(*(void *)(a1 + 32) + 104))(*(void *)(a1 + 896), *(void *)(a1 + 904), &v59, 8);
          if ((v25 & 0x80000000) != 0)
          {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, "%s%s%s%x", v52, v53, v54, v55, "contentType");
          }
          else if (*v9)
          {
            int ProcessEnd = BET3FXD__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
            if (ProcessEnd >= 0) {
              uint64_t v25 = v25;
            }
            else {
              uint64_t v25 = ProcessEnd;
            }
            uint64_t v57 = *(void *)(a1 + 6576);
            if (v57)
            {
              heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v57);
              *(void *)(a1 + 6576) = 0;
              *(void *)(a1 + 6584) = 0;
              *(_DWORD *)(a1 + 6592) = 0;
            }
            int v43 = 1;
            goto LABEL_75;
          }
          goto LABEL_74;
        }
        uint64_t v47 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 32) + 104))(*(void *)(a1 + 912), *(void *)(a1 + 920), v15, (32 * v23));
        if ((v47 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 6588) += v23;
          goto LABEL_65;
        }
        uint64_t v25 = v47;
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, "%s%s%s%x", v48, v49, v50, v51, "contentType");
        *(_DWORD *)(a1 + 6588) += v23;
      }
LABEL_74:
      int v43 = 2;
      goto LABEL_75;
    }
  }
  else if (!v10)
  {
    goto LABEL_22;
  }
  BET3FXD__DeInitVStream((int *)(a1 + 4616));
  *uint64_t v9 = 0;
LABEL_22:
  uint64_t v25 = BET3FXD__select_bet3_FeatureExtractProcessStart(*(uint64_t **)(a1 + 56), *(void *)(a1 + 48) + 9328, a3, a4, (void *)(a1 + 960), &v60);
  if ((v25 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55005, "%s%x", v26, v27, v28, v29, "lhError");
  }
  else if (*(__int16 *)(a1 + 970) > 1)
  {
    *(_DWORD *)(a1 + 6588) = 0;
    uint64_t inited = BET3FXD__InitVStream(*(void *)(a1 + 16), (char *)(a1 + 4616), (_DWORD *)(*(void *)(a1 + 48) + 128));
    if ((inited & 0x80000000) != 0
      || (*(void *)(a1 + 4624) = a1 + 960,
          uint64_t inited = BET3FXD__LoadVStream(a1 + 4616, *(void *)(a1 + 48) + 8112, *(void *)(a1 + 48) + 128),
          (inited & 0x80000000) != 0)
      || (uint64_t inited = BET3FXD__select_bet3_FeatureExtractProcess(*(uint64_t **)(a1 + 56), *(void *)(a1 + 48) + 128, a3, a4, *(void *)(a1 + 928), *(void *)(a1 + 936), *(void *)(a1 + 944), *(void *)(a1 + 952), (unsigned int *)(a1 + 64), a1 + 960, (uint64_t *)(a1 + 6576), (_DWORD *)(a1 + 6584)), (inited & 0x80000000) != 0))
    {
      uint64_t v25 = inited;
    }
    else
    {
      uint64_t v25 = BET3FXD__ParamGenStart(a1 + 4616, (int *)(*(void *)(a1 + 48) + 8112), *(void *)(a1 + 48) + 128);
      if ((v25 & 0x80000000) == 0)
      {
        int v43 = 4;
LABEL_75:
        *a5 = v43;
        return v25;
      }
    }
    BET3FXD__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
    BET3FXD__DeInitVStream((int *)(a1 + 4616));
  }
  else
  {
    int v30 = v60;
    if (v60)
    {
      if (*(void *)(a1 + 912))
      {
        if (*(_DWORD *)(a1 + 4480))
        {
          LODWORD(v25) = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 104))();
          if ((v25 & 0x80000000) != 0) {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, "%s%s%s%x", v31, v32, v33, v34, "contentType");
          }
        }
      }
      int v35 = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 72), *(void *)(a1 + 32));
      if (v35 < 0 && (int)v25 > -1) {
        LODWORD(v25) = v35;
      }
      int v30 = 1;
    }
    *a5 = v30;
    int v37 = BET3FXD__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
    if (v37 >= 0 || (int)v25 <= -1) {
      int v39 = v25;
    }
    else {
      int v39 = v37;
    }
    int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4);
    if (v39 > -1 && v40 < 0) {
      return v40;
    }
    else {
      return v39;
    }
  }
  return v25;
}

uint64_t select_bet3_ProcessEnd_0(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 25958, 6608) & 0x80000000) != 0) {
    return 2229280776;
  }
  BET3FXD__DeInitVStream((int *)(a1 + 4616));
  *(_DWORD *)(a1 + 6568) = 0;
  BET3FXD__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
  uint64_t v3 = *(void *)(a1 + 6576);
  if (v3)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v3);
    *(void *)(a1 + 6576) = 0;
    *(void *)(a1 + 6584) = 0;
    *(_DWORD *)(a1 + 6592) = 0;
  }
  *(_DWORD *)(a1 + 6596) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  return synstrmaux_CloseStreams((_WORD *)(a1 + 72), v4);
}

uint64_t select_bet3_loc_ObjcVoiceOpen_0(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  __src = 0;
  memset(__dst, 0, 408);
  uint64_t inited = InitRsrcFunction(a1, a2, &__src);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  memcpy(__dst, __src, 0x198uLL);
  __dst[2] = *(_OWORD *)(a5 + 32);
  unsigned int v44 = 0;
  *(void *)(a4 + 32) = 0;
  int v11 = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "FIX3", 1031, (uint64_t *)&v44);
  if (v11 < 0) {
    return (v11 & 0x1FFFu) - 2065686528;
  }
  uint64_t v16 = heap_Calloc(*((void **)&__dst[0] + 1), 1, 37944);
  if (v16)
  {
    __strcpy_chk();
    __strcpy_chk();
    *(void *)&long long v17 = -1;
    *((void *)&v17 + 1) = -1;
    *(_OWORD *)(v16 + 11472) = v17;
    *(_OWORD *)(v16 + 11488) = v17;
    *(_OWORD *)(v16 + 11504) = v17;
    *(_OWORD *)(v16 + 11520) = v17;
    *(_OWORD *)(v16 + 11536) = v17;
    *(_OWORD *)(v16 + 11552) = v17;
    *(_OWORD *)(v16 + 11568) = v17;
    *(_OWORD *)(v16 + 11584) = v17;
    *(_OWORD *)(v16 + 11600) = v17;
    *(_OWORD *)(v16 + 11616) = v17;
    *(_OWORD *)(v16 + 11632) = v17;
    *(_OWORD *)(v16 + 11648) = v17;
    *(_OWORD *)(v16 + 11664) = v17;
    *(_OWORD *)(v16 + 11680) = v17;
    *(_OWORD *)(v16 + 11696) = v17;
    *(_OWORD *)(v16 + 11712) = v17;
    *(_OWORD *)(v16 + 12644) = v17;
    *(_OWORD *)(v16 + 12376) = v17;
    *(_OWORD *)(v16 + 12392) = v17;
    *(_OWORD *)(v16 + 12408) = v17;
    *(_OWORD *)(v16 + 12424) = v17;
    *(_OWORD *)(v16 + 12440) = v17;
    *(_OWORD *)(v16 + 12456) = v17;
    *(_OWORD *)(v16 + 12472) = v17;
    *(_OWORD *)(v16 + 12488) = v17;
    *(_OWORD *)(v16 + 12504) = v17;
    *(_OWORD *)(v16 + 12520) = v17;
    *(_OWORD *)(v16 + 12536) = v17;
    *(_OWORD *)(v16 + 12552) = v17;
    *(_OWORD *)(v16 + 12568) = v17;
    *(_OWORD *)(v16 + 12584) = v17;
    *(_OWORD *)(v16 + 12600) = v17;
    *(_OWORD *)(v16 + 12616) = v17;
    *(_OWORD *)(v16 + 12632) = v17;
    *(_OWORD *)(v16 + 12720) = v17;
    *(_OWORD *)(v16 + 12704) = v17;
    *(_DWORD *)(v16 + 11852) = 1;
    BET3FLT__InitVParam((_DWORD *)(v16 + 128));
    *(void *)&long long v18 = -1;
    *((void *)&v18 + 1) = -1;
    *(_OWORD *)(v16 + 8092) = v18;
    *(_OWORD *)(v16 + 8080) = v18;
    *(_OWORD *)(v16 + 8064) = v18;
    *(_OWORD *)(v16 + 8048) = v18;
    *(_OWORD *)(v16 + 8032) = v18;
    *(_OWORD *)(v16 + 8016) = v18;
    *(_OWORD *)(v16 + 8000) = v18;
    *(_OWORD *)(v16 + 7984) = v18;
    *(_OWORD *)(v16 + 7968) = v18;
    *(_OWORD *)(v16 + 7952) = v18;
    *(_OWORD *)(v16 + 7936) = v18;
    *(_OWORD *)(v16 + 7920) = v18;
    *(_OWORD *)(v16 + 7904) = v18;
    *(_OWORD *)(v16 + 7888) = v18;
    *(_OWORD *)(v16 + 7872) = v18;
    *(_OWORD *)(v16 + 7856) = v18;
    *(_OWORD *)(v16 + 7840) = v18;
    *(_OWORD *)(v16 + 7824) = v18;
    *(_OWORD *)(v16 + 7808) = v18;
    strcpy((char *)(v16 + 7792), "mlsa");
    memset(v46, 0, sizeof(v46));
    uint64_t v20 = select_bet3_ParseRiff_0((uint64_t)__dst, v16, (uint64_t)v44, 0, (const char *)v46, 0, 0, v19);
    if ((v20 & 0x80000000) != 0)
    {
      uint64_t VData = v20;
      char v45 = 0;
      if (LOBYTE(v46[0]))
      {
        int v39 = 0;
        do
        {
          __strcat_chk();
          __strcat_chk();
          ++v39;
        }
        while (*((unsigned char *)v46 + 5 * (unsigned __int16)v39));
      }
      log_OutPublic(*(uint64_t *)&__dst[2], (uint64_t)"SELECT_BET3", 55003, "%s%s%s%s%s%x", v21, v22, v23, v24, "file");
    }
    else if (*(unsigned char *)(v16 + 7519) && *(int *)(v16 + 260) > 0)
    {
      uint64_t v25 = *(uint64_t **)(v16 + 11792);
      if (v25)
      {
        uint64_t v26 = *v25;
        if (v26)
        {
          uint64_t v27 = 0;
          int v28 = 0;
          do
          {
            *(void *)(v16 + 8 * v27 + 5432) = v26;
            uint64_t v27 = (unsigned __int16)++v28;
            uint64_t v26 = *(void *)(*(void *)(v16 + 11792) + 8 * (unsigned __int16)v28);
          }
          while (v26);
        }
      }
      uint64_t v29 = BET3FXD__InitVData((uint64_t)__dst, (void *)(v16 + 8112), (_DWORD *)(v16 + 128));
      if ((v29 & 0x80000000) != 0)
      {
        uint64_t VData = v29;
      }
      else
      {
        uint64_t VData = BET3FXD__LoadVData((uint64_t)__dst, (_DWORD *)(v16 + 8112), v16 + 128);
        if ((VData & 0x80000000) == 0)
        {
          *(_WORD *)(v16 + 12906) = 1;
          *(void *)&long long v38 = 0x100000001;
          *((void *)&v38 + 1) = 0x100000001;
          *(_OWORD *)(v16 + 12496) = v38;
          *(_OWORD *)(v16 + 12512) = v38;
          *(void *)(v16 + 12528) = 0x100000001;
          *(_DWORD *)(v16 + 12540) = 1;
          *(_OWORD *)(v16 + 12556) = v38;
          *(_OWORD *)(v16 + 12572) = v38;
          *(_OWORD *)(v16 + 12588) = v38;
          *(_OWORD *)(v16 + 12604) = v38;
          *(_OWORD *)(v16 + 12620) = v38;
          *(_DWORD *)(v16 + 12636) = 1;
          *(void *)(v16 + 12640) = 0x100000001;
          *(_DWORD *)(v16 + 12078) = 33620481;
          *(unsigned char *)(v16 + 12105) = 1;
          *(void *)(v16 + 12083) = 0x101010101010101;
          *(_DWORD *)(v16 + 12127) = -1;
          *(_WORD *)(v16 + 12131) = -255;
          *(void *)(v16 + 12141) = 0x101010101010101;
          *(void *)(v16 + 12091) = 0x101010101010101;
          *(void *)(v16 + 12146) = 0x101010101010101;
          *(void *)(v16 + 12249) = 0x101010101010101;
          *(void *)(v16 + 12257) = 0x101010101010101;
          *(void *)(v16 + 12265) = 0x101010101010101;
          if ((*(_DWORD *)(v16 + 12432) & 0x80000000) == 0) {
            *(_WORD *)(v16 + 12107) = 257;
          }
          if ((*(_DWORD *)(v16 + 12448) & 0x80000000) == 0) {
            *(unsigned char *)(v16 + 12109) = 1;
          }
          if ((*(_DWORD *)(v16 + 12464) & 0x80000000) == 0) {
            *(unsigned char *)(v16 + 12110) = 1;
          }
          if ((*(_DWORD *)(v16 + 12468) & 0x80000000) == 0) {
            *(unsigned char *)(v16 + 12111) = 1;
          }
          if ((*(_DWORD *)(v16 + 12472) & 0x80000000) == 0) {
            *(unsigned char *)(v16 + 12112) = 1;
          }
          if ((*(_DWORD *)(v16 + 12476) & 0x80000000) == 0) {
            *(unsigned char *)(v16 + 12113) = 1;
          }
          if ((*(_DWORD *)(v16 + 12396) & 0x80000000) == 0) {
            *(_WORD *)(v16 + 12101) = 257;
          }
          if ((*(_DWORD *)(v16 + 12720) & 0x80000000) == 0 || (*(_DWORD *)(v16 + 12724) & 0x80000000) == 0) {
            *(unsigned char *)(v16 + 12100) = 8;
          }
          if ((*(_DWORD *)(v16 + 12400) & 0x80000000) == 0) {
            *(_WORD *)(v16 + 12103) = 257;
          }
          if (*(_DWORD *)(v16 + 11888)) {
            *(unsigned char *)(v16 + 12122) = 9;
          }
          if ((*(_DWORD *)(v16 + 12496) & 0x80000000) == 0) {
            *(unsigned char *)(v16 + 12141) = 1;
          }
          if ((*(_DWORD *)(v16 + 12500) & 0x80000000) == 0) {
            *(unsigned char *)(v16 + 12142) = 1;
          }
          if ((*(_DWORD *)(v16 + 12504) & 0x80000000) == 0) {
            *(unsigned char *)(v16 + 12143) = 1;
          }
          *(_WORD *)(v16 + 12152) = 257;
          *(_DWORD *)(v16 + 12144) = 16843009;
          *(_DWORD *)(v16 + 12147) = 16843009;
        }
      }
    }
    else
    {
      uint64_t VData = 2229280772;
      log_OutPublic(*(uint64_t *)&__dst[2], (uint64_t)"SELECT_BET3", 55006, "%s%s", v21, v22, v23, v24, "file");
    }
  }
  else
  {
    log_OutPublic(*(uint64_t *)&__dst[2], (uint64_t)"SELECT_BET3", 55000, 0, v12, v13, v14, v15, v41);
    uint64_t VData = 2229280778;
  }
  if (v44)
  {
    ssftriff_reader_ObjClose(v44, v30, v31, v32, v33, v34, v35, v36);
    unsigned int v44 = 0;
  }
  if ((VData & 0x80000000) != 0)
  {
    if ((VData & 0x7FF01FFF) == 0xA200014) {
      uint64_t VData = 2229280772;
    }
    else {
      uint64_t VData = VData;
    }
    select_bet3_loc_VoiceClose_0(__dst, v16);
  }
  else
  {
    *(void *)(a4 + 32) = v16;
  }
  return VData;
}

uint64_t select_bet3_loc_ObjcVoiceClose_0(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v6);
  if ((inited & 0x80000000) == 0) {
    select_bet3_loc_VoiceClose_0(v6, *(void *)(a3 + 32));
  }
  return inited;
}

uint64_t select_bet3_loc_ParamCheckChange_0(uint64_t a1, char *__s1, const char *a3, _DWORD *a4)
{
  *a4 = 1;
  if (!strcmp(__s1, "frequencyhz"))
  {
    if (*(void *)(a1 + 896))
    {
      uint64_t result = 2229280785;
      goto LABEL_7;
    }
  }
  else if (!strcmp(__s1, "waitfactor") && (LH_atoi(a3) & 0x80000000) != 0)
  {
    uint64_t result = 2229280783;
LABEL_7:
    *a4 = 0;
    return result;
  }
  return 0;
}

uint64_t select_bet3_loc_ParamLearnChange_0(uint64_t a1, char *__s1, const char *a3)
{
  if (!strcmp(__s1, "frequencyhz"))
  {
    if (*(void *)(a1 + 896)) {
      return 2229280785;
    }
    else {
      return 0;
    }
  }
  if (!strcmp(__s1, "rate") || !strcmp(__s1, "waitfactor"))
  {
    unsigned int v11 = 0;
    if (strcmp(__s1, "waitfactor")
      || (paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"finalsentencefound", &v11), v11 != 1))
    {
      uint64_t v7 = (uint64_t)LH_atoi(a3);
      uint64_t v8 = a1;
      uint64_t v9 = __s1;
      return select_bet3_loc_ParamSet_0(v8, v9, v7);
    }
    return 0;
  }
  if (strcmp(__s1, "finalsentencefound")) {
    return 0;
  }
  if ((unsigned __int16)LH_atou(a3) != 1)
  {
    unsigned int v10 = 0;
    paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", &v10);
    uint64_t v7 = v10;
    uint64_t v9 = "waitfactor";
    uint64_t v8 = a1;
    return select_bet3_loc_ParamSet_0(v8, v9, v7);
  }
  paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", *(_DWORD *)(a1 + 64));
  return select_bet3_loc_ParamSet_0(a1, "waitfactor", 0);
}

uint64_t select_bet3_loc_SetSynthParams_0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2 + 7808;
  uint64_t result = select_bet3_loc_SetSynthParamString(a1, (uint64_t)"synth_type", (char *)(a2 + 7792));
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamSetPermanent(*(void *)(a1 + 40), (uint64_t)"mrcc_synthparam_ref_ptr", &v5, 8uLL);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voicealpha", *(_DWORD *)(a2 + 128));
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voicebeta", *(_DWORD *)(a2 + 132));
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voicevol", *(_DWORD *)(a2 + 164));
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voicevuvrelamp", *(_DWORD *)(a2 + 140));
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voicemvfboost", *(_DWORD *)(a2 + 168));
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = select_bet3_loc_SetSynthParamString(a1, (uint64_t)"bet2voicevsynthinit", *(char **)(a2 + 7776));
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voiceframesize", *(_DWORD *)(a2 + 152));
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voiceorder", *(_DWORD *)(a2 + 144));
                    if ((result & 0x80000000) == 0)
                    {
                      uint64_t result = select_bet3_loc_SetSynthParamArrayOfBet3_int32_0(a1, *(void **)(a2 + 7784), *(_DWORD *)(a2 + 144) + 1);
                      if ((result & 0x80000000) == 0) {
                        return select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"voicepitchavghz", *(_DWORD *)(a2 + 184));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t select_bet3_loc_ParamSet_0(uint64_t a1, char *__s1, uint64_t a3)
{
  if (strcmp(__s1, "waitfactor")) {
    return 0;
  }
  if ((a3 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 64) = a3;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Set wait factor %d", v5, v6, v7, a3);
    return 0;
  }
  return 2229280783;
}

uint64_t select_bet3_ParseRiff_0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v245 = a7;
  uint64_t v10 = a3;
  uint64_t v12 = 0;
  uint64_t v259 = *MEMORY[0x263EF8340];
  __s = (char *)(a2 + 9930);
  int v255 = 0;
  unsigned __int8 v254 = 0;
  *(_DWORD *)__src = 0;
  __dst = (char *)&a5[5 * a4];
  v237 = (void *)(a2 + 7484);
  v239 = (void *)(a2 + 11828);
  v241 = (void *)(a2 + 7784);
  __s1 = (char *)(a5 + 5);
  v228 = (uint64_t *)(a2 + 11800);
  v229 = (uint64_t *)(a2 + 11792);
  v232 = (uint64_t *)(a2 + 12664);
  v231 = (uint64_t *)(a2 + 12672);
  v230 = (uint64_t *)(a2 + 12680);
  v233 = (unsigned char *)(a2 + 11728);
  v234 = (unsigned char *)(a2 + 10701);
  v235 = (unsigned char *)(a2 + 10958);
  v236 = (unsigned char *)(a2 + 10444);
  v238 = (unsigned char *)(a2 + 10187);
  v242 = (_WORD *)(a2 + 37936);
  while ((v12 & 0x80000000) == 0)
  {
    uint64_t v13 = ssftriff_reader_OpenChunk(v10, __src, (unsigned int *)&v255, 0, (uint64_t)a5, a6, a7, a8);
    LODWORD(v14) = v13;
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v12 = v13;
      break;
    }
    strcpy(__dst, __src);
    if (a4 == 1)
    {
      if (!strcmp(a5, "FEEX"))
      {
        if (!(*(_DWORD *)__src ^ 0x54414356 | v254))
        {
          *(void *)v256 = 0;
          if (a6)
          {
            *(void *)v256 = a6 + ssftriff_reader_GetPosition(v10) - v245;
          }
          else
          {
            uint64_t ChunkData = ssftriff_reader_GetChunkData(v10, v255, v256, v21, v22, v23, v24, v25);
            if ((ChunkData & 0x80000000) != 0) {
              return ChunkData;
            }
          }
          uint64_t v20 = a1;
          uint64_t v41 = a2;
          uint64_t v42 = v10;
          uint64_t v43 = 2;
          goto LABEL_602;
        }
        if (!(*(_DWORD *)__src ^ 0x504F4256 | v254))
        {
          *(void *)v256 = 0;
          if (a6)
          {
            int v37 = (const void *)(a6 + ssftriff_reader_GetPosition(a3) - v245);
            uint64_t v10 = a3;
            *(void *)v256 = v37;
          }
          else
          {
            uint64_t v10 = a3;
            uint64_t v14 = ssftriff_reader_GetChunkData(a3, v255, v256, v21, v22, v23, v24, v25);
            if ((v14 & 0x80000000) != 0) {
              return v14;
            }
            int v37 = *(const void **)v256;
          }
          if (v255 >= 0xF8) {
            size_t v178 = 248;
          }
          else {
            size_t v178 = v255;
          }
          v179 = v239;
LABEL_626:
          memcpy(v179, v37, v178);
          goto LABEL_711;
        }
        if (*(_DWORD *)__src ^ 0x33455250 | v254)
        {
          if (*(_DWORD *)__src ^ 0x33415254 | v254)
          {
            if (!(*(_DWORD *)__src ^ 0x334D4850 | v254))
            {
              *(void *)v256 = 0;
              if (a6)
              {
                int v37 = (const void *)(a6 + ssftriff_reader_GetPosition(a3) - v245);
                uint64_t v10 = a3;
                *(void *)v256 = v37;
              }
              else
              {
                uint64_t v10 = a3;
                uint64_t v14 = ssftriff_reader_GetChunkData(a3, v255, v256, v21, v22, v23, v24, v25);
                if ((v14 & 0x80000000) != 0) {
                  return v14;
                }
                int v37 = *(const void **)v256;
              }
              if (v255 >= 0x100) {
                size_t v178 = 256;
              }
              else {
                size_t v178 = v255;
              }
              v179 = v237;
              goto LABEL_626;
            }
            goto LABEL_707;
          }
          *(void *)v256 = 0;
          if (a6)
          {
            *(void *)v256 = a6 + ssftriff_reader_GetPosition(a3) - v245;
          }
          else
          {
            uint64_t v14 = ssftriff_reader_GetChunkData(a3, v255, v256, v21, v22, v23, v24, v25);
            if ((v14 & 0x80000000) != 0) {
              return v14;
            }
          }
          unsigned int v205 = v255;
          if (v255 >= 2)
          {
            unsigned __int16 v206 = 0;
            do
            {
              if (*(unsigned __int16 *)(*(void *)v256 + 2 * v206) < 8u)
              {
                *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)(*(void *)v256 + 2 * v206) + 12704) = 1;
              }
              else
              {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown transition feature: %u for %s", v173, v174, v175, *(unsigned __int16 *)(*(void *)v256 + 2 * v206));
                unsigned int v205 = v255;
              }
              ++v206;
            }
            while (v205 >> 1 > v206);
          }
        }
        else
        {
          *(void *)v256 = 0;
          if (a6)
          {
            *(void *)v256 = a6 + ssftriff_reader_GetPosition(a3) - v245;
          }
          else
          {
            uint64_t v14 = ssftriff_reader_GetChunkData(a3, v255, v256, v21, v22, v23, v24, v25);
            if ((v14 & 0x80000000) != 0) {
              return v14;
            }
          }
          unsigned int v201 = v255;
          if (v255 >= 2)
          {
            unsigned __int16 v202 = 0;
            do
            {
              if (*(unsigned __int16 *)(*(void *)v256 + 2 * v202) < 0x47u)
              {
                *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)(*(void *)v256 + 2 * v202) + 12376) = 1;
              }
              else
              {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown preselection feature: %u for %s", v158, v159, v160, *(unsigned __int16 *)(*(void *)v256 + 2 * v202));
                unsigned int v201 = v255;
              }
              ++v202;
            }
            while (v201 >> 1 > v202);
          }
        }
        goto LABEL_710;
      }
      if (!strcmp(a5, "STM3"))
      {
        v257[0] = 0;
        uint64_t v38 = *(int *)(a2 + 260);
        if (!(*(_DWORD *)__src ^ 0x33435453 | v254))
        {
          LODWORD(v251) = 0;
          *(void *)v258 = 0;
          if (a6)
          {
            uint64_t v153 = a6 + ssftriff_reader_GetPosition(a3) - v245;
            *(void *)v258 = v153;
          }
          else
          {
            uint64_t v180 = ssftriff_reader_GetChunkData(a3, v255, v258, v26, v27, v28, v29, v30);
            LODWORD(v14) = v180;
            if ((v180 & 0x80000000) != 0)
            {
              int v157 = 1;
              uint64_t v12 = v180;
              unsigned int v240 = v180;
              goto LABEL_724;
            }
            uint64_t v153 = *(void *)v258;
          }
          unsigned int v181 = v257[0];
          v182 = (_DWORD *)(a2 + 4 * v38);
          v182[88] = *(_DWORD *)(v153 + v257[0]);
          v257[0] = v181 + 4;
          uint64_t v183 = *(unsigned int *)(v153 + v181 + 4);
          v182[98] = v183;
          v257[0] = v181 + 8;
          v184 = v182 + 98;
          v182[568] = *(unsigned char *)(v153 + v181 + 8) != 0;
          v257[0] = v181 + 9;
          v182[558] = *(_DWORD *)(v153 + v181 + 9);
          unsigned int v185 = v181 + 13;
          v257[0] = v181 + 13;
          if ((int)v183 >= 1)
          {
            uint64_t v186 = heap_Calloc(*(void **)(a1 + 8), v183, 8);
            uint64_t v187 = a2 + 8 * v38;
            *(void *)(v187 + 2472) = v186;
            if (!v186) {
              LODWORD(v14) = -2065686518;
            }
            if ((v14 & 0x80000000) != 0) {
              goto LABEL_692;
            }
            uint64_t v188 = heap_Calloc(*(void **)(a1 + 8), *v184, 8);
            *(void *)(v187 + 2312) = v188;
            LODWORD(v14) = -2065686518;
            if (!v188) {
              goto LABEL_692;
            }
            uint64_t v153 = *(void *)v258;
            unsigned int v185 = v257[0];
          }
          v256[0] = 0;
          LODWORD(v251) = 256;
          LODWORD(v14) = ssftriff_reader_ReadStringZ(a3, v153, v255, v185, v256, (unsigned int *)&v251);
          if ((v14 & 0x80000000) == 0)
          {
            v189 = BET3FLT__heap_StrDup(*(void **)(a1 + 8), v256);
            v190 = (void *)(a2 + 8 * v38);
            v190[34] = v189;
            if (!v189)
            {
              int v157 = 3;
              uint64_t v12 = 2229280778;
              goto LABEL_724;
            }
            v257[0] += v251;
            if (*v184 >= 1)
            {
              uint64_t v191 = 0;
              v192 = v190 + 309;
              v193 = v190 + 289;
              while (1)
              {
                v256[0] = 0;
                LODWORD(v251) = 256;
                int StringZ = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v258, v255, v257[0], v256, (unsigned int *)&v251);
                if (StringZ < 0) {
                  break;
                }
                *(void *)(*v192 + 8 * v191) = BET3FLT__heap_StrDup(*(void **)(a1 + 8), v256);
                if (!*(void *)(*v192 + 8 * v191)) {
                  goto LABEL_718;
                }
                v257[0] += v251;
                v256[0] = 0;
                LODWORD(v251) = 256;
                LODWORD(v14) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v258, v255, v257[0], v256, (unsigned int *)&v251);
                if ((v14 & 0x80000000) != 0) {
                  goto LABEL_692;
                }
                *(void *)(*v193 + 8 * v191) = BET3FLT__heap_StrDup(*(void **)(a1 + 8), v256);
                if (!*(void *)(*v193 + 8 * v191))
                {
LABEL_718:
                  LODWORD(v14) = -2065686518;
                  goto LABEL_692;
                }
                v257[0] += v251;
                if (++v191 >= *v184) {
                  goto LABEL_692;
                }
              }
              LODWORD(v14) = StringZ;
            }
          }
          goto LABEL_692;
        }
        uint64_t v39 = a6;
        if (*(_DWORD *)__src ^ 0x33455254 | v254)
        {
          if (*(_DWORD *)__src ^ 0x33464450 | v254)
          {
            if (*(_DWORD *)__src ^ 0x334E4957 | v254)
            {
              if (*(_DWORD *)__src ^ 0x334B4243 | v254)
              {
                int v40 = 0;
LABEL_693:
                uint64_t v10 = a3;
                if (v40) {
                  goto LABEL_711;
                }
LABEL_707:
                int v215 = 0;
                v256[0] = 0;
                do
                {
                  __strcat_chk();
                  __strcat_chk();
                  ++v215;
                }
                while (a4 >= (unsigned __int16)v215);
                log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown data: %s for %s", v216, v217, v218, (uint64_t)v256);
LABEL_710:
                uint64_t v10 = a3;
                goto LABEL_711;
              }
              uint64_t v161 = a2 + 24 * (int)v38 + 5192;
            }
            else
            {
              uint64_t v199 = a2 + 128 + 4 * v38;
              int v200 = *(_DWORD *)(v199 + 304);
              uint64_t v161 = a2 + 128 + 120 * (int)v38 + 24 * v200 + 3864;
              *(_DWORD *)(v199 + 304) = v200 + 1;
            }
          }
          else
          {
            *(void *)v258 = 0;
            if (a6)
            {
              uint64_t v176 = a3;
              uint64_t v177 = a6 + ssftriff_reader_GetPosition(a3) - v245;
              *(void *)v258 = v177;
            }
            else
            {
              uint64_t v207 = ssftriff_reader_GetChunkData(a3, v255, v258, v26, v27, v28, v29, v30);
              if ((v207 & 0x80000000) != 0)
              {
                uint64_t v12 = v207;
                int v157 = 1;
                unsigned int v240 = v207;
                goto LABEL_724;
              }
              uint64_t v177 = *(void *)v258;
              uint64_t v176 = a3;
            }
            v257[0] = 256;
            LODWORD(v14) = ssftriff_reader_ReadStringZ(v176, v177, v255, 0, v256, v257);
            if ((v14 & 0x80000000) != 0)
            {
              uint64_t v161 = 0;
            }
            else
            {
              v208 = BET3FLT__heap_StrDup(*(void **)(a1 + 8), v256);
              uint64_t v209 = a2 + 128 + 4 * v38;
              uint64_t v210 = *(int *)(v209 + 344);
              *(void *)(a2 + 128 + 40 * (int)v38 + 8 * v210 + 1304) = v208;
              if ((v257[0] & 3) != 0) {
                v257[0] -= v257[0] | 0xFFFFFFFC;
              }
              uint64_t v161 = a2 + 120 * (int)v38 + 24 * (int)v210 + 2792;
              *(_DWORD *)(v209 + 344) = v210 + 1;
            }
            uint64_t v39 = a6;
          }
        }
        else
        {
          uint64_t v161 = a2 + 24 * (int)v38 + 2552;
        }
        int v40 = 1;
        if ((v14 & 0x80000000) != 0 || !v161) {
          goto LABEL_693;
        }
        *(void *)v256 = 0;
        if (v39)
        {
          uint64_t v211 = v39 + ssftriff_reader_GetPosition(a3) - v245;
        }
        else
        {
          uint64_t v212 = ssftriff_reader_GetChunkData(a3, v255, v256, v26, v27, v28, v29, v30);
          LODWORD(v14) = v212;
          if ((v212 & 0x80000000) != 0)
          {
            int v157 = 1;
            unsigned int v240 = v212;
            uint64_t v12 = v212;
            goto LABEL_724;
          }
          uint64_t v211 = *(void *)v256;
        }
        unsigned int v213 = v257[0];
        *(void *)(v161 + 8) = v211 + v257[0];
        *(_DWORD *)(v161 + 16) = v255 - v213;
LABEL_692:
        int v40 = 1;
        goto LABEL_693;
      }
      if (*(_DWORD *)__src ^ 0x434E5953 | v254) {
        goto LABEL_707;
      }
      v257[0] = 0;
      *(void *)v258 = 0;
      if (a6)
      {
        uint64_t v31 = a6 + ssftriff_reader_GetPosition(v10) - v245;
        *(void *)v258 = v31;
      }
      else
      {
        uint64_t v154 = ssftriff_reader_GetChunkData(v10, v255, v258, v26, v27, v28, v29, v30);
        if ((v154 & 0x80000000) != 0)
        {
          uint64_t v12 = v154;
          int v157 = 1;
          unsigned int v240 = v154;
          goto LABEL_724;
        }
        uint64_t v31 = *(void *)v258;
      }
      v256[0] = 0;
      v257[0] = 256;
      uint64_t v12 = ssftriff_reader_ReadStringZ(v10, v31, v255, 0, v256, v257);
      if ((v12 & 0x80000000) != 0) {
        goto LABEL_584;
      }
      if (*(void *)v256 == 0x59545F48544E5953 && *(void *)&v256[3] == 0x455059545F4854)
      {
        unsigned int v156 = v257[0];
        v257[0] = 256;
        uint64_t v12 = ssftriff_reader_ReadStringZ(v10, *(uint64_t *)v258, v255, v156, v256, v257);
        if ((v12 & 0x80000000) != 0)
        {
LABEL_584:
          int v157 = 3;
          goto LABEL_724;
        }
        __strcpy_chk();
      }
      LODWORD(v14) = v12;
    }
    else
    {
      if (a4)
      {
        if (strcmp(a5, "FEEX") || strcmp(__s1, "VCAT")) {
          goto LABEL_707;
        }
        *(void *)v256 = 0;
        if (a6)
        {
          *(void *)v256 = a6 + ssftriff_reader_GetPosition(a3) - v245;
        }
        else
        {
          uint64_t v14 = ssftriff_reader_GetChunkData(a3, v255, v256, v32, v33, v34, v35, v36);
          if ((v14 & 0x80000000) != 0) {
            return v14;
          }
        }
        if (*(_DWORD *)__src ^ 0x48504C41 | v254)
        {
          uint64_t v10 = a3;
          if (!(*(_DWORD *)__src ^ 0x43494F56 | v254))
          {
            *(_DWORD *)v258 = 257;
            uint64_t v195 = *(void *)v256;
            unsigned int v196 = v255;
            uint64_t v197 = a3;
            v198 = v238;
LABEL_705:
            int RiffGenericFeatureMap = ssftriff_reader_ReadStringZ(v197, v195, v196, 0, v198, (unsigned int *)v258);
            goto LABEL_706;
          }
          if (!(*(_DWORD *)__src ^ 0x4F564F43 | v254))
          {
            *(_DWORD *)v258 = 257;
            uint64_t v195 = *(void *)v256;
            unsigned int v196 = v255;
            uint64_t v197 = a3;
            v198 = v236;
            goto LABEL_705;
          }
          if (!(*(_DWORD *)__src ^ 0x45464153 | v254))
          {
            *(_DWORD *)v258 = 257;
            uint64_t v195 = *(void *)v256;
            unsigned int v196 = v255;
            uint64_t v197 = a3;
            v198 = v235;
            goto LABEL_705;
          }
          if (!(*(_DWORD *)__src ^ 0x534F4C50 | v254))
          {
            *(_DWORD *)v258 = 257;
            uint64_t v195 = *(void *)v256;
            unsigned int v196 = v255;
            uint64_t v197 = a3;
            v198 = v234;
            goto LABEL_705;
          }
          if (!(*(_DWORD *)__src ^ 0x46464944 | v254))
          {
            *(_DWORD *)v258 = 64;
            uint64_t v195 = *(void *)v256;
            unsigned int v196 = v255;
            uint64_t v197 = a3;
            v198 = v233;
            goto LABEL_705;
          }
          if (!(*(_DWORD *)__src ^ 0x464E4547 | v254))
          {
            int RiffGenericFeatureMap = select_bet3_LoadRiffGenericFeatureMap(a1, a3, *(unsigned __int16 **)v256, v255, v232, v231, v230);
            goto LABEL_706;
          }
          if (!(*(_DWORD *)__src ^ 0x41474154 | v254))
          {
            v221 = *(_WORD **)v256;
            int v222 = v255;
            uint64_t v223 = a1;
            uint64_t v224 = a3;
            v225 = v229;
            goto LABEL_723;
          }
          if (!(*(_DWORD *)__src ^ 0x414F5442 | v254))
          {
            v221 = *(_WORD **)v256;
            int v222 = v255;
            uint64_t v223 = a1;
            uint64_t v224 = a3;
            v225 = v228;
LABEL_723:
            int RiffGenericFeatureMap = uselect_LoadRiffStringTable(v223, v224, v221, v222, v225);
LABEL_706:
            LODWORD(v14) = RiffGenericFeatureMap;
            goto LABEL_711;
          }
          goto LABEL_707;
        }
        *(_DWORD *)v258 = 257;
        LODWORD(v14) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v256, v255, 0, __s, (unsigned int *)v258);
        if ((v14 & 0x80000000) == 0)
        {
          *((_WORD *)__s + 947) = 255;
          if (*__s)
          {
            unsigned int v163 = 0;
            size_t v164 = 0;
            int v165 = 0;
            unsigned int v166 = 255;
            do
            {
              v167 = (unsigned __int8 *)(a2 + v164 + 9930);
              unsigned int v168 = *v167;
              if (v168 >= v166)
              {
                unsigned int v170 = *v167;
                v169 = __s;
              }
              else
              {
                v169 = __s;
                __s[1894] = v168;
                unsigned int v170 = *v167;
                unsigned int v166 = v168;
              }
              if (v170 <= v163)
              {
                unsigned int v171 = v170;
              }
              else
              {
                v169[1895] = v170;
                unsigned int v171 = *v167;
                unsigned int v163 = v170;
              }
              *(unsigned char *)(a2 + v171 + 11472) = v165;
              size_t v164 = (v165 + 1);
              size_t v172 = strlen(v169);
              int v165 = v164;
            }
            while (v172 > v164);
          }
        }
        goto LABEL_692;
      }
      if (!(*(_DWORD *)__src ^ 0x47464356 | v254))
      {
        unsigned int v252 = 0;
        *(void *)v250 = 0;
        v251 = 0;
        if (a6)
        {
          *(void *)v250 = a6 + ssftriff_reader_GetPosition(a3) - v245;
        }
        else
        {
          uint64_t v44 = ssftriff_reader_GetChunkData(a3, v255, v250, v15, v16, v17, v18, v19);
          LODWORD(v14) = v44;
          if ((v44 & 0x80000000) != 0)
          {
            int v157 = 1;
            uint64_t v12 = v44;
            goto LABEL_665;
          }
        }
        char v45 = BET3FLT__heap_StrDup(*(void **)(a1 + 8), "PHRASE");
        *(void *)(a2 + 208) = v45;
        if (!v45) {
          goto LABEL_664;
        }
        *(_DWORD *)(a2 + 216) = 1000;
        unsigned int v46 = v255;
        if (v255)
        {
          unsigned int v47 = 0;
          do
          {
            v256[0] = 0;
            v258[0] = 0;
            unsigned int v252 = 64;
            LODWORD(v14) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v250, v46, v47, v258, &v252);
            if ((v14 & 0x80000000) == 0 && v47 < v255)
            {
              v47 += v252;
              unsigned int v252 = 256;
              LODWORD(v14) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v250, v255, v47, v256, &v252);
            }
            if ((v14 & 0x80000000) != 0) {
              break;
            }
            unsigned int v48 = v252;
            strcpy((char *)v257, "bet3voiceoverride.");
            __strcat_chk();
            if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v257, &v251) & 0x80000000) != 0
              || (uint64_t v49 = v251) == 0
              || !*v251)
            {
              uint64_t v49 = v256;
              v251 = v256;
            }
            if (*(_DWORD *)v258 == 1213221953 && *(unsigned __int16 *)&v258[4] == 65) {
              *(_DWORD *)(a2 + 128) = LH_atoi(v49);
            }
            if (!(*(_DWORD *)v258 ^ 0x41544542 | v258[4])) {
              *(_DWORD *)(a2 + 132) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x5F4C45525F565556 && *(unsigned int *)&v258[8] == 5262657) {
              *(_DWORD *)(a2 + 140) = LH_atoi(v251);
            }
            if (*(_DWORD *)v258 == 5001046) {
              *(_DWORD *)(a2 + 164) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x534F4F425F46564DLL && *(unsigned __int16 *)&v258[8] == 84) {
              *(_DWORD *)(a2 + 168) = LH_atoi(v251);
            }
            if (!(*(unsigned __int16 *)v258 ^ 0x5346 | v258[2])) {
              *(_DWORD *)(a2 + 136) = LH_atoi(v251);
            }
            if (*(_DWORD *)v258 == 1162105423 && *(unsigned __int16 *)&v258[4] == 82) {
              *(_DWORD *)(a2 + 144) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x49535F454D415246 && *(void *)&v258[3] == 0x455A49535F454DLL) {
              *(_DWORD *)(a2 + 152) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x465F484345455053 && *(void *)&v258[7] == 0x4E41454D5F3046) {
              *(_DWORD *)(a2 + 184) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x495241565F464450
              && *(void *)&v258[8] == 0x5059545F45434E41
              && *(unsigned __int16 *)&v258[16] == 69)
            {
              *(_DWORD *)(a2 + 200) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x52454B41455242)
            {
              uint64_t v58 = *(void *)(a2 + 208);
              uint64_t v59 = a1;
              if (v58)
              {
                heap_Free(*(void **)(a1 + 8), v58);
                uint64_t v59 = a1;
              }
              int v60 = BET3FLT__heap_StrDup(*(void **)(v59 + 8), v251);
              *(void *)(a2 + 208) = v60;
              if (!v60)
              {
                LODWORD(v14) = -2065686518;
                break;
              }
            }
            if (*(void *)v258 == 0x474E454C5F4B5242 && *(void *)&v258[3] == 0x4854474E454C5FLL) {
              *(_DWORD *)(a2 + 216) = LH_atoi(v251);
            }
            if (*(_DWORD *)v258 == 1598771778 && *(_DWORD *)&v258[3] == 4412511) {
              *(_DWORD *)(a2 + 220) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x4441505A5F4B5242 | v258[8])) {
              *(_DWORD *)(a2 + 224) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x54535F4E474C41) {
              *(_DWORD *)(a2 + 240) = LH_atoi(v251) != 0;
            }
            if (*(void *)v258 == 0x48505F4E474C41) {
              *(_DWORD *)(a2 + 244) = LH_atoi(v251) != 0;
            }
            if (*(_DWORD *)v258 == 1314476886 && *(_DWORD *)&v258[3] == 4740174) {
              *(void *)(a2 + 7776) = BET3FLT__heap_StrDup(*(void **)(a1 + 8), v251);
            }
            if (*(_DWORD *)v258 == 1398031942 && *(unsigned __int16 *)&v258[4] == 90) {
              *(_DWORD *)(a2 + 7808) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4E41454D5F4E45) {
              *(_DWORD *)(a2 + 7812) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x5F4E455F44454546
              && *(void *)&v258[8] == 0x4F4F4C5F4E41454DLL
              && *(void *)&v258[15] == 0x44414548414B4FLL)
            {
              *(_DWORD *)(a2 + 7820) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x56555F544E554F43
              && *(void *)&v258[8] == 0x434E41545349445FLL
              && *(unsigned __int16 *)&v258[16] == 69)
            {
              *(_DWORD *)(a2 + 7816) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x525F454C504D4153 && *(unsigned int *)&v258[8] == 4543553) {
              *(_DWORD *)(a2 + 7824) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x455F524150504D41 && *(void *)&v258[6] == 0x594752454E455FLL) {
              *(_DWORD *)(a2 + 7828) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x535F524150504D41 && *(unsigned int *)&v258[8] == 4545097) {
              *(_DWORD *)(a2 + 7832) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x465F524150435053 && *(void *)&v258[8] == 0x50524157514552) {
              *(_DWORD *)(a2 + 7836) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x455F524150504D41
              && *(void *)&v258[8] == 0x415F45434E41484ELL
              && *(void *)&v258[13] == 0x4148504C415F45)
            {
              *(_DWORD *)(a2 + 7840) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x455F524150504D41
              && *(void *)&v258[8] == 0x415F45434E41484ELL
              && *(void *)&v258[16] == 0x564E555F4148504CLL
              && *(void *)&v258[22] == 0x444543494F564ELL)
            {
              *(_DWORD *)(a2 + 7844) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x49535F454D415246 && *(void *)&v258[8] == 0x4343524D5F455ALL) {
              *(_DWORD *)(a2 + 7848) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x5F5348505F4E5953
              && *(void *)&v258[8] == 0x555F504152545845
              && *(void *)&v258[11] == 0x4553555F504152)
            {
              *(_DWORD *)(a2 + 7852) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x53494F4E5F4E5953
              && *(void *)&v258[8] == 0x545F514552465F45
              && *(unsigned __int16 *)&v258[16] == 72)
            {
              *(_DWORD *)(a2 + 7856) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x514552465F4E5953
              && *(void *)&v258[8] == 0x53555F4553494F4ELL
              && *(unsigned __int16 *)&v258[16] == 69)
            {
              *(_DWORD *)(a2 + 7860) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x514552465F4E5953
              && *(void *)&v258[8] == 0x564D5F4553494F4ELL
              && *(void *)&v258[14] == 0x4553555F46564DLL)
            {
              *(_DWORD *)(a2 + 7864) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x514552465F4E5953 | *(void *)&v258[8] ^ 0x4F4C5F4553494F4ELL | v258[16])) {
              *(_DWORD *)(a2 + 7868) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x514552465F4E5953 | *(void *)&v258[8] ^ 0x49485F4553494F4ELL | v258[16])) {
              *(_DWORD *)(a2 + 7872) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4E5855415F4E5953
              && *(void *)&v258[8] == 0x494E555F4553494FLL
              && *(void *)&v258[13] == 0x4D524F46494E55)
            {
              *(_DWORD *)(a2 + 7876) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x4E5855415F4E5953 | *(void *)&v258[8] ^ 0x4553555F4553494FLL | v258[16])) {
              *(_DWORD *)(a2 + 7880) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4E5855415F4E5953
              && *(void *)&v258[8] == 0x46564D5F4553494FLL
              && *(void *)&v258[13] == 0x4553555F46564DLL)
            {
              *(_DWORD *)(a2 + 7884) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4E5855415F4E5953
              && *(void *)&v258[8] == 0x58494D5F4553494FLL
              && *(void *)&v258[16] == 0x4F4C5F4D524148)
            {
              *(_DWORD *)(a2 + 7888) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4E5855415F4E5953
              && *(void *)&v258[8] == 0x58494D5F4553494FLL
              && *(void *)&v258[16] == 0x49485F4D524148)
            {
              *(_DWORD *)(a2 + 7892) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4E5855415F4E5953
              && *(void *)&v258[8] == 0x5345525F4553494FLL
              && *(_DWORD *)&v258[16] == 5196895)
            {
              *(_DWORD *)(a2 + 7896) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4E5855415F4E5953
              && *(void *)&v258[8] == 0x5345525F4553494FLL
              && *(_DWORD *)&v258[16] == 4802655)
            {
              *(_DWORD *)(a2 + 7900) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x47494C415F4E5953
              && *(void *)&v258[8] == 0x46464F5455435F4ELL
              && *(void *)&v258[14] == 0x514552465F4646)
            {
              *(_DWORD *)(a2 + 7904) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x554245445F4E5953
              && *(void *)&v258[8] == 0x45434F52505F5A5ALL
              && *(void *)&v258[15] == 0x46564D5F535345)
            {
              *(_DWORD *)(a2 + 7908) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x415F524150504D41
              && *(void *)&v258[8] == 0x455441554E455454
              && *(_DWORD *)&v258[16] == 5657951)
            {
              *(_DWORD *)(a2 + 7912) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x50494B535F4E5953 | *(void *)&v258[8] ^ 0x41485F4B4145575FLL | *(void *)&v258[16] ^ 0x4F495441525F4D52 | v258[24])) {
              *(_DWORD *)(a2 + 7916) = LH_atoi(v251);
            }
            if (!strcmp(v258, "SYN_DEBUZZ_PROCESS_MVF_SMOOTH_WIN")) {
              *(_DWORD *)(a2 + 7940) = LH_atoi(v251);
            }
            if (!strcmp(v258, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_THR")) {
              *(_DWORD *)(a2 + 7944) = LH_atoi(v251);
            }
            if (!strcmp(v258, "SYN_DEBUZZ_PROCESS_MVF_RATIO_EN_THR")) {
              *(_DWORD *)(a2 + 7948) = LH_atoi(v251);
            }
            if (!strcmp(v258, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_MVF_THR")) {
              *(_DWORD *)(a2 + 7952) = LH_atoi(v251);
            }
            if (!strcmp(v258, "SYN_DEBUZZ_PROCESS_MVF_BY_LOW_EN")) {
              *(_DWORD *)(a2 + 7956) = LH_atoi(v251);
            }
            if (!strcmp(v258, "SYN_DEBUZZ_PROCESS_MVF_BY_RATIO_EN")) {
              *(_DWORD *)(a2 + 7960) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x554245445F4E5953 | *(void *)&v258[8] ^ 0x45434F52505F5A5ALL | *(void *)&v258[16] ^ 0x305F46564D5F5353 | v258[24])) {
              *(_DWORD *)(a2 + 7964) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x554245445F4E5953 | *(void *)&v258[8] ^ 0x45434F52505F5A5ALL | *(void *)&v258[16] ^ 0x315F46564D5F5353 | v258[24])) {
              *(_DWORD *)(a2 + 7968) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x554245445F4E5953 | *(void *)&v258[8] ^ 0x45434F52505F5A5ALL | *(void *)&v258[16] ^ 0x325F46564D5F5353 | v258[24])) {
              *(_DWORD *)(a2 + 7972) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x554245445F4E5953 | *(void *)&v258[8] ^ 0x45434F52505F5A5ALL | *(void *)&v258[16] ^ 0x335F46564D5F5353 | v258[24])) {
              *(_DWORD *)(a2 + 7976) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x425F524150504D41 && *(_DWORD *)&v258[8] == 5461065) {
              *(_DWORD *)(a2 + 7980) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x555F524150534850 && *(void *)&v258[3] == 0x4553555F524150) {
              *(_DWORD *)(a2 + 7984) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x555F524150504D41 && *(void *)&v258[3] == 0x4553555F524150) {
              *(_DWORD *)(a2 + 7988) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x32474F4C5F455355 | v258[8])) {
              *(_DWORD *)(a2 + 7992) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x455F524150504D41
              && *(void *)&v258[8] == 0x505F45434E41484ELL
              && *(void *)&v258[14] == 0x435053574F505FLL)
            {
              *(_DWORD *)(a2 + 7996) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4E5855415F4E5953
              && *(void *)&v258[8] == 0x5454415F4553494FLL
              && *(void *)&v258[15] == 0x455441554E4554)
            {
              *(_DWORD *)(a2 + 8000) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4E5855415F4E5953
              && *(void *)&v258[8] == 0x5454415F4553494FLL
              && *(void *)&v258[16] == 0x4C5F455441554E45
              && *(unsigned __int16 *)&v258[24] == 79)
            {
              *(_DWORD *)(a2 + 8004) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4E5855415F4E5953
              && *(void *)&v258[8] == 0x5454415F4553494FLL
              && *(void *)&v258[16] == 0x485F455441554E45
              && *(unsigned __int16 *)&v258[24] == 73)
            {
              *(_DWORD *)(a2 + 8008) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4C5050415F4E5953 && *(void *)&v258[8] == 0x504D4545445F59) {
              *(_DWORD *)(a2 + 8012) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x525F49485F4E5953 | *(void *)&v258[8] ^ 0x4E47494C415F5345 | v258[16])) {
              *(_DWORD *)(a2 + 8016) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x545341465F4E5953
              && *(void *)&v258[8] == 0x5241485F5855415FLL
              && *(unsigned __int16 *)&v258[16] == 77)
            {
              *(_DWORD *)(a2 + 8020) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x5F5849465F4E5953 && *(_DWORD *)&v258[8] == 4279375) {
              *(_DWORD *)(a2 + 8024) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x475F43445F4E5953
              && *(void *)&v258[8] == 0x494F565F44524155
              && *(_DWORD *)&v258[16] == 4474179)
            {
              *(_DWORD *)(a2 + 8028) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x475F43445F4E5953
              && *(void *)&v258[8] == 0x564E555F44524155
              && *(void *)&v258[14] == 0x444543494F564ELL)
            {
              *(_DWORD *)(a2 + 8032) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x5551594E5F4E5953
              && *(void *)&v258[8] == 0x524155475F545349
              && *(unsigned __int16 *)&v258[16] == 68)
            {
              *(_DWORD *)(a2 + 8036) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x535F524150534850 && *(unsigned int *)&v258[8] == 4545097) {
              *(_DWORD *)(a2 + 8040) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x465F524150534850 && *(unsigned int *)&v258[8] == 5261644) {
              *(_DWORD *)(a2 + 8044) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x455F524150504D41
              && *(void *)&v258[8] == 0x4F4E5F594752454ELL
              && *(void *)&v258[14] == 0x48545F4D524F4ELL)
            {
              *(_DWORD *)(a2 + 8048) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x465F524150435053
              && *(void *)&v258[8] == 0x5F50524157514552
              && *(void *)&v258[14] == 0x4148504C415F50)
            {
              *(_DWORD *)(a2 + 8052) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x5F5348505F4E5953 | *(void *)&v258[8] ^ 0x49575F4E47494C41 | *(void *)&v258[16] ^ 0x54534E4F435F4854 | v258[24])) {
              *(_DWORD *)(a2 + 8056) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x4E5855415F4E5953 | *(void *)&v258[8] ^ 0x524F4E5F4553494FLL | *(void *)&v258[16] ^ 0x4C41424F4C475F4DLL | v258[24])) {
              *(_DWORD *)(a2 + 8060) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4D4545445F4E5953 && *(void *)&v258[7] == 0x46454F435F504DLL) {
              *(_DWORD *)(a2 + 8064) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x5F4553555F4E5953 | *(void *)&v258[8] ^ 0x4F4D5F4553494F4ELL | *(void *)&v258[16] ^ 0x4E4F4954414C5544 | v258[24])) {
              *(_DWORD *)(a2 + 8068) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x53494F4E5F4E5953
              && *(void *)&v258[8] == 0x414C55444F4D5F45
              && *(void *)&v258[16] == 0x4341465F4E4F4954
              && *(_DWORD *)&v258[24] == 5394260)
            {
              *(_DWORD *)(a2 + 8072) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4D4152465F58414DLL && *(void *)&v258[7] == 0x455A49535F454DLL) {
              *(_DWORD *)(a2 + 8076) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x4D4152465F4E494DLL && *(void *)&v258[7] == 0x455A49535F454DLL) {
              *(_DWORD *)(a2 + 8080) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x5F5446465F4E494DLL && *(void *)&v258[5] == 0x455A49535F5446) {
              *(_DWORD *)(a2 + 8084) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x49535F454D415246
              && *(void *)&v258[8] == 0x4E5F434E495F455ALL
              && *(void *)&v258[11] == 0x4D554E5F434E49)
            {
              *(_DWORD *)(a2 + 8088) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x49535F454D415246
              && *(void *)&v258[8] == 0x4E5F4345445F455ALL
              && *(void *)&v258[11] == 0x4D554E5F434544)
            {
              *(_DWORD *)(a2 + 8092) = LH_atoi(v251);
            }
            if (*(void *)v258 == 0x5446465F4C414E41 && *(void *)&v258[6] == 0x455A49535F5446) {
              *(_DWORD *)(a2 + 8096) = LH_atoi(v251);
            }
            if (!(*(void *)v258 ^ 0x455A49535F544646 | v258[8])) {
              *(_DWORD *)(a2 + 8100) = LH_atoi(v251);
            }
            v47 += v48;
            unsigned int v46 = v255;
          }
          while (v47 < v255);
        }
        *(_WORD *)(a2 + 160) = 0;
        *(_WORD *)(a2 + 172) = 0;
        *(void *)(a2 + 176) = 0;
        strcpy((char *)v257, "bet3voiceoverride.");
        __strcat_chk();
        if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v257, &v251) & 0x80000000) == 0)
        {
          uint64_t v203 = *(void *)(a2 + 208);
          if (v203)
          {
            heap_Free(*(void **)(a1 + 8), v203);
            *(void *)(a2 + 208) = 0;
          }
          v204 = BET3FLT__heap_StrDup(*(void **)(a1 + 8), v251);
          *(void *)(a2 + 208) = v204;
          if (!v204)
          {
LABEL_664:
            int v157 = 3;
            LODWORD(v14) = v240;
            uint64_t v12 = 2229280778;
LABEL_665:
            unsigned int v240 = v14;
LABEL_724:
            if (v157 != 3) {
              return v240;
            }
            break;
          }
        }
        strcpy((char *)v257, "bet3voiceoverride.");
        __strcat_chk();
        if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v257, &v251) & 0x80000000) == 0) {
          *(_DWORD *)(a2 + 216) = LH_atoi(v251);
        }
        goto LABEL_710;
      }
      if (!(*(_DWORD *)__src ^ 0x41555145 | v254))
      {
        LODWORD(v14) = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * (unsigned __int16)*v242 + 37728), v241, v15, v16, v17, v18, v19);
        if ((v14 & 0x80000000) == 0) {
          ++*v242;
        }
        goto LABEL_710;
      }
      if (!(*(_DWORD *)__src ^ 0x58454546 | v254))
      {
        uint64_t v10 = a3;
        uint64_t v20 = a1;
        goto LABEL_39;
      }
      uint64_t v10 = a3;
      if (*(_DWORD *)__src ^ 0x334D5453 | v254)
      {
        if (!(*(_DWORD *)__src ^ 0x544E5953 | v254))
        {
          uint64_t v20 = a1;
LABEL_39:
          uint64_t v41 = a2;
          uint64_t v42 = v10;
          uint64_t v43 = 1;
LABEL_602:
          LODWORD(v14) = select_bet3_ParseRiff_0(v20, v41, v42, v43, a5, 0, 0);
          goto LABEL_711;
        }
        goto LABEL_707;
      }
      uint64_t Position = ssftriff_reader_GetPosition(a3);
      *(void *)v256 = 0;
      int v152 = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * (unsigned __int16)*v242 + 37728), v256, v147, v148, v149, v150, v151);
      if (v152 < 0)
      {
        LODWORD(v14) = v152;
      }
      else
      {
        ++*v242;
        LODWORD(v14) = select_bet3_ParseRiff_0(a1, a2, a3, 1, a5, *(void *)v256, Position);
        ++*(_DWORD *)(a2 + 260);
      }
      uint64_t v10 = a3;
    }
LABEL_711:
    int v219 = ssftriff_reader_CloseChunk(v10);
    if ((int)v14 > -1 && v219 < 0) {
      uint64_t v12 = v219;
    }
    else {
      uint64_t v12 = v14;
    }
  }
  if ((v12 & 0x1FFF) == 0x14) {
    uint64_t v226 = 0;
  }
  else {
    uint64_t v226 = v12;
  }
  uint64_t v14 = v12;
  if ((v226 & 0x80000000) == 0)
  {
    char *__dst = 0;
    return v226;
  }
  return v14;
}

void *select_bet3_loc_VoiceClose_0(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = *(uint64_t **)(a2 + 11792);
    if (v4 && *v4)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 1;
      do
      {
        *(void *)(a2 + 8 * v5 + 5432) = 0;
        uint64_t v4 = *(uint64_t **)(a2 + 11792);
        uint64_t v5 = v6;
      }
      while (v4[v6++]);
    }
    uselect_FreeRiffStringTable(result, v4);
    uselect_FreeRiffStringTable((void *)v3, *(uint64_t **)(a2 + 11800));
    uint64_t v8 = *(uint64_t **)(a2 + 12664);
    uint64_t v9 = *(uint64_t ***)(a2 + 12672);
    uint64_t v10 = *(uint64_t **)(a2 + 12680);
    if (v8)
    {
      uint64_t v11 = *v8;
      if (*v8)
      {
        int v12 = 0;
        do
        {
          heap_Free(*(void **)(v3 + 8), v11);
          uint64_t v11 = v8[(unsigned __int16)++v12];
        }
        while (v11);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v8);
    }
    if (v9)
    {
      uint64_t v13 = *v9;
      if (*v9)
      {
        int v14 = 0;
        uint64_t v15 = v9;
        do
        {
          uint64_t v16 = *v13;
          if (*v13)
          {
            int v17 = 0;
            do
            {
              heap_Free(*(void **)(v3 + 8), v16);
              ++v17;
              uint64_t v13 = *v15;
              uint64_t v16 = (*v15)[(unsigned __int16)v17];
            }
            while (v16);
          }
          heap_Free(*(void **)(v3 + 8), (uint64_t)v13);
          uint64_t v15 = &v9[(unsigned __int16)++v14];
          uint64_t v13 = *v15;
        }
        while (*v15);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v9);
    }
    if (v10)
    {
      uint64_t v18 = *v10;
      if (*v10)
      {
        int v19 = 0;
        do
        {
          heap_Free(*(void **)(v3 + 8), v18);
          uint64_t v18 = v10[(unsigned __int16)++v19];
        }
        while (v18);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v10);
    }
    BET3FXD__DeInitVData(v3, a2 + 8112);
    BET3FLT__DeInitVParam(v3, (void *)(a2 + 128));
    uint64_t v27 = (_WORD *)(a2 + 37936);
    if (*(_WORD *)(a2 + 37936))
    {
      unint64_t v28 = 0;
      do
        ssftriff_reader_ReleaseChunkData(*(void **)(a2 + 37728 + 8 * v28++), v20, v21, v22, v23, v24, v25, v26);
      while (v28 < (unsigned __int16)*v27);
    }
    *uint64_t v27 = 0;
    *(unsigned char *)a2 = 0;
    uint64_t v29 = *(void **)(v3 + 8);
    return heap_Free(v29, a2);
  }
  return result;
}

uint64_t select_bet3_loc_SetSynthParamString(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v8 = paramc_ParamSetStr(*(void *)(a1 + 40), a2, a3);
  if ((v8 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%s%s%x", v4, v5, v6, v7, "parameter");
  }
  return v8;
}

uint64_t select_bet3_loc_SetSynthParamInt_0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = paramc_ParamSetInt(*(void *)(a1 + 40), a2, a3);
  if ((v8 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%d%s%x", v4, v5, v6, v7, "parameter");
  }
  return v8;
}

uint64_t select_bet3_loc_SetSynthParamArrayOfBet3_int32_0(uint64_t a1, void *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = paramc_ParamSet(*(void *)(a1 + 40), (uint64_t)"bet3cepstralequalizer", a2, (4 * a3));
  if ((v8 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%p%s%d%s%d", v4, v5, v6, v7, "parameter");
  }
  return v8;
}

uint64_t BET3FXD__ParamGenStart(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = (char *)(a1 + 56);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 632);
  if (v8)
  {
    heap_Free(*(void **)(v7 + 8), v8);
    *(void *)(a1 + 632) = 0;
  }
  uint64_t v9 = *(void *)(a1 + 640);
  if (v9)
  {
    heap_Free(*(void **)(v7 + 8), v9);
    *(void *)(a1 + 640) = 0;
  }
  uint64_t result = BET3FXD__InitUttModel(v7, v6, a2, *(__int16 *)(*(void *)(a1 + 8) + 10));
  if ((result & 0x80000000) != 0) {
    return result;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a3 + 32);
  int v16 = *(_DWORD *)(a3 + 28);
  if (v16 >= 1 && v16 < *(_DWORD *)(a1 + 620))
  {
    BET3FXD__log_select_Error(v7, 55018, (uint64_t)"Specified length of generated speech is too short (this sentence is composed from %d states), specify more than %d milliseconds\n", v11, v12, v13, v14, v15);
    return 2229280775;
  }
  if (*(int *)(a1 + 608) < 1) {
    goto LABEL_73;
  }
  uint64_t v17 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v81 = *(void *)(*(void *)(a1 + 8) + 1784);
  uint64_t v93 = (uint64_t)(a2 + 152);
  int v18 = *(_DWORD *)(a1 + 32);
  uint64_t v79 = v7;
  uint64_t v80 = a3 + 1304;
  int v78 = -8388608;
  uint64_t v84 = a3;
  uint64_t v89 = (uint64_t)a2;
  do
  {
    uint64_t v19 = *(void *)(a1 + 600);
    uint64_t v20 = (int *)(v19 + 528 * v17);
    uint64_t v88 = v19;
    uint64_t v94 = v20;
    if (v18 >= 1)
    {
      uint64_t v21 = 0;
      uint64_t v22 = v80;
      do
      {
        uint64_t v23 = *(unsigned int *)(a3 + 4 * v21 + 344);
        if ((int)v23 < 1)
        {
          LODWORD(v24) = 0;
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v25 = (const char **)(a3 + 8 * *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8) + 248) + *v20) + 5304);
          while (1)
          {
            uint64_t v26 = *(const char **)(v22 + 8 * v24);
            if (v26)
            {
              if (*v25 && !strcmp(v26, *v25)) {
                break;
              }
            }
            if (v23 == ++v24)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
          uint64_t v19 = v88;
          uint64_t v20 = v94;
        }
        *(_DWORD *)(v19 + 528 * v17 + 4 * v21++ + 32) = v24;
        v22 += 40;
      }
      while (v21 < *(int *)(a1 + 32));
    }
    BET3FXD__log_select_Diag(v7, 21, (uint64_t)"[phoneme %d]\n");
    uint64_t v82 = v17;
    if (v81)
    {
      if (*(_DWORD *)(a3 + 116))
      {
        *(_DWORD *)(v88 + 528 * v17 + 8) = BET3FXD__TreeSearch(*(void *)(a1 + 8), v17, v93, 0, 0);
        BET3FXD__log_select_Diag(v7, 6, (uint64_t)"DUR pdf id %d\n");
        uint64_t result = BET3FXD__FindDurPDF((uint64_t)v94, a2, *(__int16 *)(a1 + 16), 0);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        int v32 = BET3FXD__div_int32_int32_to_Q8_24(*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 8) + 1784) + 2 * *v94), *(_DWORD *)(a3 + 24));
        if (v32)
        {
          int v33 = v32;
          if (*a2 < 1)
          {
            int v34 = 0;
          }
          else
          {
            int v34 = 0;
            uint64_t v35 = 2;
            do
            {
              v34 += BET3FXD__int32_to_Q12_20(*(_DWORD *)(*(void *)(v88 + 528 * v82 + 16) + 4 * v35));
              BOOL v36 = v35++ <= *a2;
            }
            while (v36);
          }
          int v38 = v33 + v78;
          int v39 = BET3FXD__div_Q8_24_Q12_20_to_Q8_24(v33 + v78, v34);
          uint64_t v40 = v88 + 528 * v82;
          *(_DWORD *)(v40 + 24) = 0;
          uint64_t v41 = (_DWORD *)(v40 + 24);
          if (*a2 < 1)
          {
            int v51 = 0;
          }
          else
          {
            int v42 = v39;
            uint64_t v43 = v88 + 528 * v82;
            uint64_t v46 = *(void *)(v43 + 16);
            char v45 = (uint64_t *)(v43 + 16);
            uint64_t v44 = v46;
            uint64_t v47 = 2;
            do
            {
              int v48 = BET3FXD__mul_int32_Q8_24_to_Q8_24(*(_DWORD *)(v44 + 4 * v47), v42);
              int v49 = BET3FXD__Q8_24_to_int32(v48 + 0x7FFFFF);
              if (v49 <= 1) {
                int v50 = 1;
              }
              else {
                int v50 = v49;
              }
              uint64_t v44 = *v45;
              *(_DWORD *)(*v45 + 4 * v47) = v50;
              int v51 = *v41 + v50;
              _DWORD *v41 = v51;
              BOOL v36 = v47++ <= *a2;
            }
            while (v36);
            int v38 = v33 + v78;
          }
          int v78 = v38 - BET3FXD__int32_to_Q8_24(v51);
          uint64_t v17 = v82;
        }
        uint64_t v37 = v88;
        *(_DWORD *)(a1 + 624) += *(_DWORD *)(v88 + 528 * v17 + 24);
        goto LABEL_49;
      }
      if (*(_DWORD *)(a3 + 112))
      {
        BET3FXD__log_select_Error(v7, 55017, (uint64_t)"State level segmentation is not currently supported\n", v27, v28, v29, v30, v31);
        uint64_t v37 = v88;
        goto LABEL_49;
      }
    }
    *(_DWORD *)(v88 + 528 * v17 + 8) = BET3FXD__TreeSearch(*(void *)(a1 + 8), v17, v93, 0, 0);
    BET3FXD__log_select_Diag(v7, 6, (uint64_t)"DUR pdf id %d\n");
    if (!*(_DWORD *)(a3 + 28))
    {
      uint64_t result = BET3FXD__FindDurPDF((uint64_t)v94, a2, *(__int16 *)(a1 + 16), 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      SetSilenceDuration_0(a1, a2, a3, v94);
      *(_DWORD *)(a1 + 624) += *(_DWORD *)(v88 + 528 * v17 + 24);
    }
    uint64_t v37 = v88;
LABEL_49:
    int v18 = *(_DWORD *)(a1 + 32);
    if (v18 >= 1)
    {
      for (uint64_t i = 0; i < v18; ++i)
      {
        uint64_t v53 = *(void *)(a1 + 24);
        if (!*(_DWORD *)(v53 + 312 * i + 264))
        {
          if (*(_DWORD *)(v53 + 312 * i + 272))
          {
            uint64_t v54 = a1 + 8 * i;
            int v55 = *a2 * v82;
            uint64_t v85 = *(void *)(*(void *)(v54 + 304) + 8 * v55);
            uint64_t v86 = *(void *)(*(void *)(v54 + 224) + 8 * v55);
          }
          unsigned int v56 = (char *)a2 + 2 * i;
          if (*((_WORD *)v56 + 396))
          {
            uint64_t v57 = v7;
            uint64_t v58 = 0;
            unint64_t v59 = 0;
            uint64_t v92 = (unsigned __int16 *)(v56 + 792);
            uint64_t v60 = v37 + 528 * v82;
            v61 = (void *)(v60 + 8 * i);
            uint64_t v91 = &a2[2 * i + 178];
            uint64_t v90 = v61 + 9;
            v83 = &a2[i + 1];
            v62 = v61 + 19;
            int v63 = v61 + 29;
            v87 = (unsigned int *)(v60 + 4 * i + 32);
            while (1)
            {
              uint64_t v64 = *(unsigned __int16 *)(*(void *)v91 + v58);
              *(_DWORD *)(*v90 + 4 * v64) = BET3FXD__TreeSearch(*(void *)(a1 + 8), *v94, v93, i, v59);
              BET3FXD__log_select_Diag(v57, 6, (uint64_t)"%s pdf state %d id %d\n");
              uint64_t v65 = *(void *)(a1 + 24);
              if (*(_DWORD *)(v65 + 312 * i + 272))
              {
                int v66 = v64 - 2 + (v64 - 2) * *v83;
                *(void *)(*v62 + 8 * v64) = v86 + 4 * v66;
                *(void *)(*v62 + 8 * v64) -= 4;
                *(void *)(*v63 + 8 * v64) = v85 + 4 * v66;
                *(void *)(*v63 + 8 * v64) -= 4;
                uint64_t result = BET3FXD__FindMsdPDF(i, v64, (uint64_t)v94, v89, v84);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
              }
              else if (*(_DWORD *)(v65 + 312 * i + 268))
              {
                uint64_t v67 = *(void *)(a1 + 632);
                uint64_t v68 = *(void *)(a1 + 640);
                if (!v67)
                {
                  if (v68)
                  {
                    uint64_t v67 = 0;
                  }
                  else
                  {
                    int v69 = *(_DWORD *)(a1 + 608) * *v92 * *(unsigned __int16 *)(v89 + 396);
                    uint64_t v70 = v69 + v69 * *(unsigned __int16 *)(v89 + 402);
                    uint64_t v71 = heap_Calloc(*(void **)(v57 + 8), v70, 4);
                    *(void *)(a1 + 632) = v71;
                    if (!v71) {
                      return 2229280778;
                    }
                    uint64_t v72 = heap_Calloc(*(void **)(v79 + 8), v70, 4);
                    *(void *)(a1 + 640) = v72;
                    if (!v72) {
                      return 2229280778;
                    }
                    uint64_t v68 = v72;
                    *(_DWORD *)(a1 + 648) = 0;
                    uint64_t v67 = *(void *)(a1 + 632);
                  }
                }
                uint64_t result = BET3FXD__FindContPDF(i, v64, (uint64_t)v94, v89, *v87, v67, v68, (_DWORD *)(a1 + 648));
                if ((result & 0x80000000) != 0) {
                  return result;
                }
              }
              ++v59;
              v58 += 16;
              if (v59 >= *v92)
              {
                int v18 = *(_DWORD *)(a1 + 32);
                a3 = v84;
                uint64_t v37 = v88;
                a2 = (int *)v89;
                uint64_t v7 = v57;
                break;
              }
            }
          }
        }
      }
    }
    uint64_t v17 = v82 + 1;
  }
  while (v82 + 1 < *(int *)(a1 + 608));
  int v16 = *(_DWORD *)(a3 + 28);
LABEL_73:
  if (v16 < 1
    || (int v73 = BET3FXD__int32_to_Q18_14(v16),
        __int16 v74 = BET3FXD__div_Q18_14_Q18_14_to_Q18_14(v73, 0),
        *(_WORD *)(a1 + 16) = BET3FXD__Q18_14_to_Q1_15(v74),
        *(int *)(a1 + 608) < 1))
  {
LABEL_78:
    if (BET3FLT__log_select_GetLogLevel(*(void *)(v7 + 32)) >= 0x15) {
      OutLabel_0(a1);
    }
    BET3FXD__log_select_Diag(v7, 2, (uint64_t)">> tree search done\n");
    AddBreakMarks_0(a1, a2, a3);
    return ParamGenLT_0(a1, a2);
  }
  else
  {
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    while (1)
    {
      uint64_t v77 = (int *)(*(void *)(a1 + 600) + v75);
      uint64_t result = BET3FXD__FindDurPDF((uint64_t)v77, a2, *(__int16 *)(a1 + 16), 0);
      if ((result & 0x80000000) != 0) {
        break;
      }
      SetSilenceDuration_0(a1, a2, a3, v77);
      *(_DWORD *)(a1 + 624) += v77[6];
      ++v76;
      v75 += 528;
      if (v76 >= *(int *)(a1 + 608)) {
        goto LABEL_78;
      }
    }
  }
  return result;
}

uint64_t SetSilenceDuration_0(uint64_t result, int *a2, uint64_t a3, int *a4)
{
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *a4;
  if (*(unsigned char *)(*(void *)(v4 + 32) + v5) == 1)
  {
    int v8 = *(unsigned __int16 *)(*(void *)(v4 + 1784) + 2 * v5) / *(int *)(a3 + 24);
    LODWORD(v4) = *a2;
    if (v8 <= *a2)
    {
      if ((int)v4 >= 1)
      {
        uint64_t v14 = *((void *)a4 + 2);
        uint64_t v15 = 2;
        do
        {
          *(_DWORD *)(v14 + 4 * v15) = 1;
          BOOL v11 = v15++ <= *a2;
        }
        while (v11);
        LODWORD(v4) = *a2;
      }
      a4[6] = v4;
    }
    else
    {
      if (v8 >= a4[6])
      {
        if ((int)v4 < 1)
        {
          int v12 = 0;
          int v13 = 0;
        }
        else
        {
          int v13 = 0;
          int v12 = 0;
          uint64_t v16 = *((void *)a4 + 2);
          uint64_t v17 = 2;
          do
          {
            int v18 = *(_DWORD *)(v16 + 4 * v17);
            if (v18 <= 0)
            {
              int v18 = 1;
              *(_DWORD *)(v16 + 4 * v17) = 1;
              LODWORD(v4) = *a2;
            }
            BOOL v19 = v17 == 2 || v17 == v4 + 1;
            if (v19) {
              int v20 = 0;
            }
            else {
              int v20 = v18;
            }
            v12 += v20;
            if (!v19) {
              int v18 = 0;
            }
            v13 += v18;
            BOOL v11 = v17++ <= (int)v4;
          }
          while (v11);
        }
      }
      else
      {
        if ((int)v4 >= 1)
        {
          uint64_t v9 = *((void *)a4 + 2);
          uint64_t v10 = 2;
          do
          {
            *(_DWORD *)(v9 + 4 * v10) = 1;
            uint64_t v4 = *a2;
            BOOL v11 = v10++ <= v4;
          }
          while (v11);
        }
        int v12 = v4 - 2;
        int v13 = 2;
      }
      uint64_t result = BET3FXD__div_int32_int32_to_Q8_24(v8 - v13, v12);
      a4[6] = v13;
      LODWORD(v21) = *a2;
      if (*a2 >= 3)
      {
        int v22 = result;
        uint64_t v23 = 3;
        do
        {
          if (v23 >= (int)v21) {
            uint64_t result = (v8 - v13);
          }
          else {
            uint64_t result = BET3FXD__mul_int32_Q8_24_to_int32(*(_DWORD *)(*((void *)a4 + 2) + 4 * v23), v22);
          }
          if ((int)result <= 1) {
            int v24 = 1;
          }
          else {
            int v24 = result;
          }
          *(_DWORD *)(*((void *)a4 + 2) + 4 * v23) = v24;
          int v13 = a4[6] + v24;
          a4[6] = v13;
          uint64_t v21 = *a2;
          BOOL v11 = v23++ < v21;
        }
        while (v11);
      }
    }
  }
  return result;
}

uint64_t OutLabel_0(uint64_t result)
{
  if (*(int *)(result + 608) >= 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v1 + 600) + v2;
      uint64_t result = BET3FXD__log_select_Diag(*(void *)v1, 21, (uint64_t)"%d %d %d [%d]\n");
      v4 += *(_DWORD *)(v5 + 24);
      ++v3;
      v2 += 528;
    }
    while (v3 < *(int *)(v1 + 608));
  }
  return result;
}

uint64_t AddBreakMarks_0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = *(const char **)(a3 + 80);
  uint64_t result = strcmp(v6, "PHRASE_TIME");
  if (result)
  {
    uint64_t result = strcmp(v6, "PHRASE");
    if (result)
    {
      uint64_t result = strcmp(v6, "WORD");
      if (result)
      {
        uint64_t result = strcmp(v6, "SYLLABLE");
        if (result)
        {
          uint64_t result = strcmp(v6, "TIME");
          if (result)
          {
            uint64_t result = strcmp(v6, "NONE");
            if (result)
            {
              uint64_t v13 = *(void *)a1;
              return BET3FXD__log_select_Error(v13, 55036, (uint64_t)"valid breaker is required\n", v8, v9, v10, v11, v12);
            }
          }
          else
          {
            uint64_t v40 = *(unsigned int *)(a1 + 608);
            if ((int)v40 >= 1)
            {
              uint64_t v41 = 0;
              int v42 = 0;
              int v43 = *(_DWORD *)(a3 + 88);
              int v44 = *a2;
              uint64_t v45 = *(void *)(a1 + 600);
              int v46 = v43;
              int v47 = 0;
              do
              {
                if (v44 >= 1)
                {
                  uint64_t result = *(void *)(v45 + 528 * v41 + 16) + 8;
                  uint64_t v48 = (v44 + 2) - 2;
                  int v47 = v42;
                  do
                  {
                    int v49 = *(_DWORD *)result;
                    result += 4;
                    v47 += v49;
                    --v48;
                  }
                  while (v48);
                }
                if (v47 > v46)
                {
                  int v46 = v42 + v43;
                  uint64_t v50 = v45 + 528 * v41;
                  uint64_t result = *(_DWORD *)(v50 + 4) | 2u;
                  *(_DWORD *)(v50 + 4) = result;
                }
                ++v41;
                int v42 = v47;
              }
              while (v41 != v40);
            }
          }
        }
        else
        {
          int v36 = *(_DWORD *)(a1 + 608);
          if (v36 >= 3)
          {
            uint64_t v37 = (v36 - 2);
            int v38 = *(int **)(a1 + 600);
            uint64_t v39 = *(void *)(*(void *)(a1 + 8) + 112);
            do
            {
              if (*(unsigned char *)(v39 + *v38)) {
                v38[133] |= 2u;
              }
              v38 += 132;
              --v37;
            }
            while (v37);
          }
        }
      }
      else
      {
        int v32 = *(_DWORD *)(a1 + 608);
        if (v32 >= 3)
        {
          uint64_t v33 = (v32 - 2);
          int v34 = *(int **)(a1 + 600);
          uint64_t v35 = *(void *)(*(void *)(a1 + 8) + 112);
          do
          {
            if ((*(unsigned char *)(v35 + *v34) & 0xFE) == 2) {
              v34[133] |= 2u;
            }
            v34 += 132;
            --v33;
          }
          while (v33);
        }
      }
    }
    else
    {
      int v28 = *(_DWORD *)(a1 + 608);
      if (v28 >= 3)
      {
        uint64_t v29 = (v28 - 2);
        uint64_t v30 = *(int **)(a1 + 600);
        uint64_t v31 = *(void *)(*(void *)(a1 + 8) + 112);
        do
        {
          if (*(unsigned char *)(v31 + *v30) == 3) {
            v30[133] |= 2u;
          }
          v30 += 132;
          --v29;
        }
        while (v29);
      }
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a1 + 608);
    if ((int)v14 >= 1)
    {
      uint64_t v15 = 0;
      int v16 = 0;
      uint64_t v17 = *(void *)(a1 + 600);
      int v18 = *a2;
      int v19 = *(_DWORD *)(a3 + 88);
      uint64_t v20 = *(void *)(*(void *)(a1 + 8) + 112);
      uint64_t v21 = v14 - 2;
      uint64_t v22 = *(unsigned int *)(a1 + 608);
      do
      {
        if (v18 < 1)
        {
          int v23 = 0;
        }
        else
        {
          int v23 = 0;
          int v24 = (int *)(*(void *)(v17 + 528 * v15 + 16) + 8);
          uint64_t v25 = (v18 + 2) - 2;
          do
          {
            int v26 = *v24++;
            v23 += v26;
            --v25;
          }
          while (v25);
        }
        v16 += v23;
        if (v16 > v19)
        {
          *(_DWORD *)(v17 + 528 * v15 + 4) |= 2u;
          int v16 = v23;
        }
        uint64_t result = v17 + 528 * v15;
        if (*(unsigned char *)(v20 + *(int *)result) == 3 && v15 < v21)
        {
          int v16 = 0;
          *(_DWORD *)(result + 532) |= 2u;
        }
        ++v15;
      }
      while (v15 != v22);
    }
  }
  return result;
}

uint64_t ParamGenLT_0(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)a1;
  unsigned int v67 = -2065686518;
  memset(v71, 0, sizeof(v71));
  memset(v70, 0, sizeof(v70));
  memset(v72, 0, sizeof(v72));
  uint64_t v73 = 0;
  BET3FLT__InitSMatrices(v4, v71);
  BET3FLT__InitSMatrices(v4, v70);
  uint64_t v5 = heap_Calloc(*(void **)(v4 + 8), (*(_DWORD *)(a1 + 624) + 1), 1);
  *(void *)(a1 + 48) = v5;
  if (!v5) {
    return v67;
  }
  uint64_t v6 = heap_Calloc(*(void **)(v4 + 8), (*(_DWORD *)(a1 + 624) + 1), 4);
  *(void *)(a1 + 40) = v6;
  if (!v6) {
    return v67;
  }
  int v7 = *(_DWORD *)(a1 + 608);
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    LODWORD(v10) = *a2;
    do
    {
      if ((int)v10 >= 1)
      {
        uint64_t v11 = *(void *)(a1 + 600) + 528 * v8;
        uint64_t v14 = *(void *)(v11 + 16);
        uint64_t v12 = (uint64_t *)(v11 + 16);
        uint64_t v13 = v14;
        uint64_t v15 = v12 + 37;
        uint64_t v16 = 2;
        do
        {
          if (*(int *)(v13 + 4 * v16) >= 1)
          {
            int v17 = 0;
            uint64_t v18 = v9;
            do
            {
              *(unsigned char *)(*(void *)(a1 + 48) + v18) = *(unsigned char *)(*v15 + v16);
              *(_DWORD *)(*(void *)(a1 + 40) + 4 * v18++) = *(_DWORD *)(v12[38] + 4 * v16);
              uint64_t v13 = *v12;
              ++v17;
            }
            while (v17 < *(_DWORD *)(*v12 + 4 * v16));
            v9 += v17;
          }
          uint64_t v19 = *(unsigned int *)(a1 + 32);
          if ((int)v19 >= 1)
          {
            uint64_t v20 = *(_DWORD **)(a1 + 24);
            do
            {
              if (v20[68] && ((1 << v20[3]) & (unint64_t)*(unsigned __int8 *)(*v15 + v16)) >> v20[3]) {
                v20[11] += *(_DWORD *)(v13 + 4 * v16);
              }
              v20 += 78;
              --v19;
            }
            while (v19);
          }
          uint64_t v10 = *a2;
          BOOL v21 = v16++ <= v10;
        }
        while (v21);
        int v7 = *(_DWORD *)(a1 + 608);
      }
      ++v8;
    }
    while (v8 < v7);
  }
  if (*(int *)(a1 + 32) < 1)
  {
    unsigned int v67 = 0;
    goto LABEL_64;
  }
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  unsigned int v67 = 0;
  while (1)
  {
    uint64_t v24 = *(void *)(a1 + 24);
    uint64_t v25 = v24 + 312 * v22;
    if (*(_DWORD *)(v25 + 272)) {
      break;
    }
LABEL_60:
    if (++v22 >= *(int *)(a1 + 32)) {
      goto LABEL_64;
    }
  }
  if (!*(_DWORD *)(v24 + 312 * v22 + 44))
  {
LABEL_59:
    BET3FXD__DeInitMSDUttModel((void *)(a1 + 56), v22);
    goto LABEL_60;
  }
  int v26 = (uint64_t *)(v25 + 24);
  unsigned int inited = BET3FXD__InitPStreamParam((uint64_t *)(v25 + 24), 0);
  if ((inited & 0x80000000) == 0)
  {
    int v66 = v26;
    unsigned int v67 = BET3FXD__InitPStreamSM(v26, (uint64_t)v71);
    if ((v67 & 0x80000000) != 0) {
      goto LABEL_64;
    }
    int v28 = *(_DWORD *)(a1 + 608);
    if (v28 < 1) {
      goto LABEL_57;
    }
    uint64_t v29 = 0;
    int v30 = 0;
    int v31 = 0;
    uint64_t v68 = *(void *)(a1 + 600);
    uint64_t v32 = v24 + 312 * v22;
    uint64_t v33 = v32 + 56;
    int v34 = (void *)(v32 + 96);
    uint64_t v35 = (void *)(v32 + 104);
    int v36 = *a2;
    do
    {
      if (v36 >= 1)
      {
        uint64_t v69 = v29;
        uint64_t v37 = v68 + 528 * v29;
        uint64_t v38 = *(void *)(v37 + 16);
        uint64_t v39 = v37 + 8 * v22;
        uint64_t v40 = (void *)(v39 + 152);
        uint64_t v41 = (void *)(v39 + 232);
        uint64_t v42 = 2;
        do
        {
          int v43 = *(_DWORD *)(v38 + 4 * v42);
          if (v43 >= 1)
          {
            uint64_t v44 = *(void *)(a1 + 24) + 312 * v22;
            int v47 = *(_DWORD *)(v44 + 36);
            uint64_t v45 = (int *)(v44 + 36);
            LODWORD(v46) = v47;
            uint64_t v48 = v45 - 6;
            uint64_t v49 = *(void *)(a1 + 48);
            uint64_t v50 = v31;
            int v51 = 1;
            do
            {
              if ((int)v46 >= 1)
              {
                uint64_t v52 = 0;
                uint64_t v53 = *(void *)(*(void *)v33 + 8);
                do
                {
                  int v54 = *v48;
                  uint64_t v55 = 1 << *v48;
                  v23 |= v55;
                  unsigned int v56 = *(int **)(v53 + 8 * v52);
                  int v57 = *v56;
                  int v58 = v56[1];
                  if (v57 <= v58)
                  {
                    int v59 = v58 - v57 + 1;
                    unsigned int v60 = v31 + v57;
                    do
                    {
                      uint64_t v61 = v55 ^ 0xFFLL;
                      if ((v60 & 0x80000000) == 0)
                      {
                        uint64_t v61 = v55 ^ 0xFFLL;
                        if (*(_DWORD *)(a1 + 624) >= (signed int)v60) {
                          uint64_t v61 = *(unsigned __int8 *)(v49 + v60);
                        }
                      }
                      v23 &= v61;
                      ++v60;
                      --v59;
                    }
                    while (v59);
                  }
                  if ((unint64_t)(v55 & *(unsigned char *)(v49 + v50)) >> v54)
                  {
                    if (!v52 || (v55 & v23) >> v54)
                    {
                      uint64_t v63 = 4 * v52 + 4;
                      *(_DWORD *)(*(void *)(*v34 + 8 * v30) + 4 * v52) = *(_DWORD *)(*(void *)(*v40 + 8 * v42)
                                                                                       + v63);
                      int v62 = *(_DWORD *)(*(void *)(*v41 + 8 * v42) + v63);
                    }
                    else
                    {
                      int v62 = 0;
                      *(_DWORD *)(*(void *)(*v34 + 8 * v30) + 4 * v52) = 0;
                    }
                    *(_DWORD *)(*(void *)(*v35 + 8 * v30) + 4 * v52) = v62;
                  }
                  ++v52;
                  uint64_t v46 = *v45;
                }
                while (v52 < v46);
                int v43 = *(_DWORD *)(v38 + 4 * v42);
              }
              if (((1 << *v48) & (unint64_t)*(unsigned __int8 *)(v49 + v50)) >> *v48) {
                ++v30;
              }
              ++v50;
              ++v31;
              BOOL v21 = v51++ < v43;
            }
            while (v21);
            int v36 = *a2;
            int v31 = v50;
          }
          BOOL v21 = v42++ <= v36;
        }
        while (v21);
        int v28 = *(_DWORD *)(a1 + 608);
        uint64_t v29 = v69;
      }
      ++v29;
    }
    while (v29 < v28);
    if (v30 < 1)
    {
LABEL_57:
      uint64_t v64 = (uint64_t)v66;
    }
    else
    {
      (**(void (***)(uint64_t *, void))(*(void *)(a1 + 24) + 312 * v22 + 288))(v66, 0);
      uint64_t v64 = (uint64_t)v66;
    }
    BET3FLT__FreePStreamSM(v64);
    goto LABEL_59;
  }
  unsigned int v67 = inited;
LABEL_64:
  BET3FLT__FreePStreamParam(v72);
  BET3FLT__FreeSMatrices((uint64_t)v71);
  BET3FLT__FreeSMatrices((uint64_t)v70);
  return v67;
}

uint64_t BET3FXD__ParamGenFrames(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v5 = *(void *)a1;
  memset(v114, 0, sizeof(v114));
  memset(v113, 0, sizeof(v113));
  *a3 = 0;
  memset(v115, 0, sizeof(v115));
  uint64_t v116 = 0;
  BET3FLT__InitSMatrices(v5, v114);
  uint64_t v98 = v5;
  BET3FLT__InitSMatrices(v5, v113);
  uint64_t v109 = a1;
  int v6 = *(_DWORD *)(a1 + 612);
  uint64_t v7 = *(void *)(a1 + 600) + 528 * v6;
  *(_DWORD *)(v7 + 4) &= ~2u;
  int v8 = *(_DWORD *)(a1 + 608);
  BOOL v9 = __OFSUB__(v8, v6);
  int v10 = v8 - v6;
  if ((v10 < 0) ^ v9 | (v10 == 0))
  {
    LODWORD(v12) = 0;
    unsigned int v11 = 0;
  }
  else
  {
    unsigned int v11 = 0;
    LODWORD(v12) = 0;
    while ((*(unsigned char *)(v7 + 4) & 2) == 0)
    {
      uint64_t v13 = *a2;
      if ((int)v13 >= 1)
      {
        uint64_t v14 = (int *)(*(void *)(v7 + 16) + 8);
        do
        {
          int v15 = *v14++;
          LODWORD(v12) = v15 + v12;
          --v13;
        }
        while (v13);
      }
      v7 += 528;
      if (++v11 == v10)
      {
        unsigned int v11 = v10;
        break;
      }
    }
  }
  BET3FXD__log_select_Diag(v5, 2, (uint64_t)"| processing %d models %d frames <=> ");
  uint64_t v16 = a1;
  if (*(int *)(a1 + 32) < 1)
  {
    unsigned int inited = 0;
LABEL_83:
    signed int v93 = *(_DWORD *)(v16 + 612) + v11;
    *(_DWORD *)(v16 + 612) = v93;
    if (v93 >= *(_DWORD *)(v16 + 608)) {
      *a3 = 1;
    }
LABEL_85:
    uint64_t v92 = inited;
    goto LABEL_86;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  unsigned int inited = 0;
  uint64_t v97 = -(uint64_t)v11;
  unsigned int v95 = v11;
  while (1)
  {
    uint64_t v22 = *(void *)(v16 + 24);
    if (*(_DWORD *)(v22 + 312 * v17 + 268)) {
      break;
    }
LABEL_79:
    if (++v17 >= *(int *)(v16 + 32)) {
      goto LABEL_83;
    }
  }
  uint64_t v23 = v22 + 312 * v17;
  v101 = (uint64_t *)(v23 + 64);
  uint64_t v108 = v17;
  char v111 = (uint64_t *)(v23 + 24);
  if (*(void *)(v23 + 64))
  {
    uint64_t v24 = v20;
    BET3FLT__FreePStreamParam((void *)(v23 + 24));
    uint64_t v20 = v24;
    uint64_t v17 = v108;
    uint64_t v16 = v109;
    uint64_t v25 = *(void *)(v109 + 24);
  }
  else
  {
    uint64_t v25 = *(void *)(v16 + 24);
  }
  uint64_t v26 = v25 + 312 * v17;
  int v27 = *(_DWORD *)(v26 + 280);
  uint64_t v105 = *(unsigned int *)(v26 + 284);
  int v28 = *(_DWORD *)(v16 + 612);
  int v29 = *(_DWORD *)(v16 + 608);
  if ((int)(v18 + v11 + v28) < v29 && v19 < v27)
  {
    int v30 = *a2;
    uint64_t v31 = v7;
    do
    {
      if (v30 >= 1)
      {
        uint64_t v32 = (int *)(*(void *)(v31 + 16) + 8);
        uint64_t v33 = (v30 + 2) - 2;
        do
        {
          int v34 = *v32++;
          v19 += v34;
          --v33;
        }
        while (v33);
      }
      v31 += 528;
      uint64_t v18 = (v18 + 1);
      BOOL v35 = (int)(v18 + v11 + v28) < v29 && v19 < v27;
    }
    while (v35);
  }
  if (v28 > (int)v20 && v21 < v27)
  {
    uint64_t v36 = v7 + 528 * v97;
    int v37 = *a2;
    do
    {
      if (v37 >= 1)
      {
        uint64_t v38 = (int *)(*(void *)(v36 - 512) + 8);
        uint64_t v39 = (v37 + 2) - 2;
        do
        {
          int v40 = *v38++;
          v21 += v40;
          --v39;
        }
        while (v39);
      }
      uint64_t v20 = (v20 + 1);
      if (v28 <= (int)v20) {
        break;
      }
      v36 -= 528;
    }
    while (v21 < v27);
  }
  uint64_t v102 = v7;
  uint64_t v107 = v20;
  BET3FXD__log_select_Diag(v98, 3, (uint64_t)"L: %d %d  R: %d %d\n");
  uint64_t v41 = v22 + 312 * v108;
  *(_DWORD *)(v41 + 164) = v105 + v12 + v19 + v21 + v105;
  int v106 = (int *)(v41 + 164);
  *(_DWORD *)(v41 + 44) = v12;
  int v103 = (int *)(v41 + 44);
  unsigned int inited = BET3FXD__InitPStreamParam(v111, 0);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_85;
  }
  uint64_t v99 = v18;
  uint64_t v42 = v22 + 312 * v108;
  int v45 = *(_DWORD *)(v42 + 40);
  uint64_t v44 = (int *)(v42 + 40);
  int v43 = v45;
  uint64_t v17 = v108;
  if (v45 < 1)
  {
    uint64_t v16 = v109;
    uint64_t v18 = v99;
    uint64_t v20 = v107;
LABEL_78:
    uint64_t v7 = v102;
    goto LABEL_79;
  }
  uint64_t v46 = 0;
  int v47 = v101 + 10;
  uint64_t v48 = v22 + 312 * v108;
  unsigned int v49 = v11;
  uint64_t v50 = (int **)(v48 + 176);
  int v51 = (void *)(v48 + 216);
  uint64_t v52 = (void *)(v48 + 224);
  uint64_t v20 = v107;
  int v112 = v99 + v49 + v107;
  v100 = (void *)(v48 + 184);
  uint64_t v16 = v109;
  char v110 = v101 + 10;
  while (*(_DWORD *)(*(void *)(*(void *)(v16 + 24) + 312 * v17 + 304) + 4 * v46) != 1)
  {
LABEL_75:
    if (++v46 >= v43)
    {
      unsigned int v11 = v95;
      uint64_t v18 = v99;
      goto LABEL_78;
    }
  }
  uint64_t v53 = v47;
  uint64_t v54 = BET3FXD__InitPStreamParam(v47, (uint64_t)v115);
  if ((v54 & 0x80000000) == 0)
  {
    uint64_t v54 = BET3FXD__InitPStreamSM(v53, (uint64_t)v113);
    if ((v54 & 0x80000000) == 0)
    {
      unsigned int inited = v54;
      if ((int)v105 < 1)
      {
        LODWORD(v12) = 0;
        uint64_t v56 = v108;
        uint64_t v55 = v109;
        int v57 = v106;
        int v58 = v107;
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v56 = v108;
        uint64_t v55 = v109;
        int v57 = v106;
        int v58 = v107;
        while (v12 < *v106)
        {
          int v59 = *v50;
          if (**v50 >= 1)
          {
            uint64_t v60 = 0;
            uint64_t v61 = *(void *)(*v51 + 8 * v12);
            uint64_t v62 = *(void *)(*v52 + 8 * v12);
            do
            {
              *(_DWORD *)(v61 + 4 * v60) = 0;
              *(_DWORD *)(v62 + 4 * v60++) = 4095;
            }
            while (v60 < *v59);
          }
          if (++v12 == v105)
          {
            LODWORD(v12) = v105;
            break;
          }
        }
      }
      if (v112 >= 1)
      {
        int v63 = 0;
        uint64_t v64 = *(void *)(v55 + 600);
        int v65 = *a2;
        do
        {
          int v66 = v63 - v58 + *(_DWORD *)(v55 + 612);
          if (v65 >= 1)
          {
            uint64_t v67 = v64 + 528 * v66;
            uint64_t v68 = *(void *)(v67 + 16);
            uint64_t v69 = v67 + 8 * v56;
            uint64_t v70 = (void *)(v69 + 152);
            uint64_t v71 = (void *)(v69 + 232);
            uint64_t v72 = 2;
            do
            {
              int v73 = *(_DWORD *)(v68 + 4 * v72);
              if (v73 >= 1)
              {
                __int16 v74 = *v50;
                uint64_t v12 = (int)v12;
                LODWORD(v75) = **v50;
                int v76 = 1;
                do
                {
                  if ((int)v75 >= 1)
                  {
                    uint64_t v77 = 0;
                    uint64_t v78 = *(void *)(*v70 + 8 * v72);
                    uint64_t v79 = *(void *)(*v51 + 8 * v12);
                    uint64_t v80 = *(void *)(*v71 + 8 * v72);
                    uint64_t v81 = *(void *)(*v52 + 8 * v12);
                    do
                    {
                      int v82 = v46 + *v44 * v77;
                      *(_DWORD *)(v79 + 4 * v77) = *(_DWORD *)(v78 + 4 * v82);
                      *(_DWORD *)(v81 + 4 * v77++) = *(_DWORD *)(v80 + 4 * v82);
                      uint64_t v75 = *v74;
                    }
                    while (v77 < v75);
                    int v73 = *(_DWORD *)(v68 + 4 * v72);
                  }
                  ++v12;
                  BOOL v35 = v76++ < v73;
                }
                while (v35);
                int v65 = *a2;
              }
              BOOL v35 = v72++ <= v65;
            }
            while (v35);
          }
          ++v63;
        }
        while (v63 != v112);
        uint64_t v102 = v64 + 528 * v66;
        int v57 = v106;
      }
      int v83 = *v57;
      if ((int)v12 < *v57)
      {
        uint64_t v84 = *v50;
        uint64_t v12 = (int)v12;
        LODWORD(v85) = **v50;
        do
        {
          if ((int)v85 >= 1)
          {
            uint64_t v86 = 0;
            uint64_t v87 = *(void *)(*v51 + 8 * v12);
            uint64_t v88 = *(void *)(*v52 + 8 * v12);
            do
            {
              *(_DWORD *)(v87 + 4 * v86) = 0;
              *(_DWORD *)(v88 + 4 * v86++) = 4095;
              uint64_t v85 = *v84;
            }
            while (v86 < v85);
            int v83 = *v57;
          }
          ++v12;
        }
        while (v12 < v83);
      }
      (*(void (**)(void *, void))(*(void *)(*(void *)(v55 + 24) + 312 * v56 + 288) + 8 * v46))(v110, 0);
      if (*v103 >= 1)
      {
        uint64_t v89 = 0;
        uint64_t v90 = *v101;
        uint64_t v91 = *v100 + 8 * (v21 + (int)v105);
        do
        {
          *(_DWORD *)(*(void *)(v90 + 8 * v89) + 4 * v46) = **(_DWORD **)(v91 + 8 * v89);
          ++v89;
        }
        while (v89 < *v103);
      }
      BET3FLT__FreePStreamSM((uint64_t)v110);
      BET3FLT__FreePStreamParam(v110);
      uint64_t v16 = v109;
      int v47 = v101 + 10;
      int v43 = *v44;
      uint64_t v20 = v107;
      uint64_t v17 = v108;
      goto LABEL_75;
    }
  }
  uint64_t v92 = v54;
LABEL_86:
  BET3FLT__FreePStreamParam(v115);
  BET3FLT__FreeSMatrices((uint64_t)v114);
  BET3FLT__FreeSMatrices((uint64_t)v113);
  return v92;
}

uint64_t BET3FXD__InitVData(uint64_t a1, void *a2, _DWORD *a3)
{
  bzero(a2, 0x4C0uLL);
  uint64_t result = BET3FXD__InitModelSet(a1, (char *)a2, a3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = BET3FLT__InitTreeSet(a1, (_OWORD *)a2 + 38);
    if ((result & 0x80000000) == 0)
    {
      return BET3FLT__InitDWinSet(a1, (_OWORD *)a2 + 51, (uint64_t)a3);
    }
  }
  return result;
}

void BET3FXD__DeInitVData(uint64_t a1, uint64_t a2)
{
  BET3FXD__DeInitModelSet(a1, (void *)a2);
  BET3FLT__DeInitTreeSet(a1, (_OWORD *)(a2 + 608));
  BET3FLT__DeInitDWinSet(a1, (_OWORD *)(a2 + 816));
  bzero((void *)a2, 0x4C0uLL);
}

uint64_t BET3FXD__LoadVData(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if ((int)a2[150] < 1) {
    return 0;
  }
  uint64_t v4 = a2;
  uint64_t v6 = 0;
  uint64_t v7 = (uint64_t)(a2 + 152);
  int v8 = a2 + 204;
  uint64_t v9 = a3 + 2664;
  uint64_t v10 = a3 + 5064;
  do
  {
    uint64_t ModelFile = BET3FXD__LoadModelFile(a1, v4, v6, v9, v10, a3);
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    uint64_t ModelFile = BET3FXD__LoadTreesFile(a1, v7, v6, (unsigned int *)(v10 - 2640), a3, v12, v13, v14);
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    uint64_t ModelFile = BET3FXD__LoadDWinFile(a1, (uint64_t)v8, v6, (unsigned int *)(v9 + 1200));
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    ++v6;
    uint64_t v20 = (int)v4[150];
    v9 += 120;
    v10 += 24;
  }
  while (v6 < v20);
  uint64_t v21 = v4[150];
  if ((int)v20 < 1) {
    return 0;
  }
  uint64_t v22 = a3 + 144;
  uint64_t v23 = v4 + 178;
  while (1)
  {
    if (!*v23)
    {
      uint64_t v24 = 2229280775;
      uint64_t v26 = "%s tree is required\n";
      uint64_t v27 = a1;
      uint64_t v28 = 55032;
      goto LABEL_19;
    }
    if ((v4[130] || v4[140]) && v4[1] % *v8) {
      break;
    }
    v22 += 8;
    ++v23;
    v8 += 10;
    ++v4;
    if (!--v21) {
      return 0;
    }
  }
  uint64_t v24 = 2229280775;
  uint64_t v26 = "The number of dynamic windows for %s is not correct %d %d\n";
  uint64_t v27 = a1;
  uint64_t v28 = 55035;
LABEL_19:
  BET3FXD__log_select_Error(v27, v28, (uint64_t)v26, v15, v16, v17, v18, v19);
  return v24;
}

uint64_t BET3FXD__InitVStream(uint64_t a1, char *a2, _DWORD *a3)
{
  bzero(a2, 0x7A0uLL);
  *(void *)a2 = a1;
  uint64_t v6 = a3[33];
  *((_DWORD *)a2 + 8) = v6;
  uint64_t v7 = heap_Calloc(*(void **)(a1 + 8), v6, 312);
  *((void *)a2 + 3) = v7;
  if (!v7) {
    return 2229280778;
  }
  if (*((int *)a2 + 8) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a2 + 672;
    do
    {
      *uint64_t v9 = 0;
      uint64_t v10 = *(const char **)&a3[2 * v8 + 36];
      if (*v10) {
        uint64_t v9 = strcpy(v9, v10);
      }
      ++v8;
      uint64_t v11 = *((int *)a2 + 8);
      v9 += 128;
    }
    while (v8 < v11);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *((void *)a2 + 3);
      int v14 = a3[18];
      uint64_t v15 = 312 * *((unsigned int *)a2 + 8);
      do
      {
        uint64_t v16 = v13 + v12;
        *(_DWORD *)(v16 + 12) = a3[56];
        *(void *)(v16 + 24) = a1;
        *(void *)(v16 + 144) = a1;
        if (v12)
        {
          if (a3[536]) {
            *(_DWORD *)(v13 + v12 + 272) = 1;
          }
          else {
            *(_DWORD *)(v13 + v12 + 268) = 1;
          }
        }
        else
        {
          *(_DWORD *)(v13 + 264) = 1;
        }
        if (v14 == 1) {
          *(_DWORD *)(v13 + v12 + 276) = 1;
        }
        ++a3;
        v12 += 312;
      }
      while (v15 != v12);
    }
  }
  uint64_t result = 0;
  *((_DWORD *)a2 + 162) = 0;
  *(_OWORD *)(a2 + 632) = 0u;
  return result;
}

uint64_t BET3FXD__LoadVStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a1 + 32) < 1) {
    return 0;
  }
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v6 = 0;
  uint64_t v7 = 2229280775;
  uint64_t v8 = a2 + 816;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v44 = a2 + 816;
  while (1)
  {
    uint64_t v10 = (_DWORD *)(v8 + 40 * v6);
    uint64_t v11 = v9 + 312 * v6;
    *(void *)(v11 + 56) = v10;
    int v12 = *(_DWORD *)(v11 + 268);
    if (v12) {
      *(void *)(v9 + 312 * v6 + 176) = v10;
    }
    if (*(_DWORD *)(v9 + 312 * v6 + 264))
    {
      if (v12) {
        goto LABEL_7;
      }
      goto LABEL_8;
    }
    uint64_t v14 = v4 + 4 * v6;
    uint64_t v15 = v9 + 312 * v6;
    *(_DWORD *)(v15 + 36) = *(_DWORD *)(v14 + 4);
    uint64_t v16 = (*(_DWORD *)(v14 + 4) / *v10);
    *(_DWORD *)(v15 + 40) = v16;
    *(void *)(v15 + 280) = *(void *)(v3 + 92);
    uint64_t v17 = heap_Calloc(*(void **)(*(void *)a1 + 8), v16, 8);
    uint64_t v18 = *(void *)(a1 + 24);
    *(void *)(v18 + 312 * v6 + 288) = v17;
    if (!v17) {
      return 2229280778;
    }
    LODWORD(v19) = *(_DWORD *)(v18 + 312 * v6 + 40);
    if ((int)v19 >= 1) {
      break;
    }
LABEL_15:
    uint64_t v27 = heap_Calloc(*(void **)(*(void *)a1 + 8), v19, 4);
    uint64_t v28 = *(void *)(a1 + 24);
    *(void *)(v28 + 312 * v6 + 304) = v27;
    if (!v27) {
      return 2229280778;
    }
    uint64_t v29 = v28 + 312 * v6;
    int v31 = *(_DWORD *)(v29 + 40);
    int v30 = (int *)(v29 + 40);
    if (v31 >= 1)
    {
      uint64_t v32 = v27;
      uint64_t v33 = 0;
      uint64_t v34 = *(void *)(a3 + 8 * v6 + 2344);
      while (1)
      {
        BOOL v35 = *(const char **)(v34 + 8 * v33);
        if (!strcmp(v35, "OFF"))
        {
          int v41 = 0;
        }
        else
        {
          if (strcmp(v35, "ON"))
          {
            BET3FXD__log_select_Error(*(void *)a1, 55036, (uint64_t)"valid breaker setting is required for stream %d\n", v36, v37, v38, v39, v40);
            return 2229280775;
          }
          int v41 = 1;
        }
        *(_DWORD *)(v32 + 4 * v33++) = v41;
        if (v33 >= *v30)
        {
          uint64_t v7 = 2229280775;
          break;
        }
      }
    }
    uint64_t v3 = a3;
    uint64_t v4 = a2;
    BET3FXD__log_select_Diag(*(void *)a1, 1, (uint64_t)"%s: vSize = %d, order = %d, nLayer = %d\n");
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = v44;
    if (*(_DWORD *)(v9 + 312 * v6 + 268))
    {
LABEL_7:
      uint64_t v13 = v9 + 312 * v6;
      *(_DWORD *)(v13 + 156) = *(_DWORD *)(v4 + 4 * v6 + 4);
      *(_DWORD *)(v13 + 160) = 1;
    }
LABEL_8:
    if (++v6 >= *(int *)(a1 + 32)) {
      return 0;
    }
  }
  uint64_t v20 = 0;
  uint64_t v21 = (void *)(v3 + 8 * v6 + 2184);
  while (!strcmp(*(const char **)(*v21 + 8 * v20), "MLPG2"))
  {
    *(void *)(*(void *)(v18 + 312 * v6 + 288) + 8 * v20++) = BET3FXD__mlpg2;
    uint64_t v18 = *(void *)(a1 + 24);
    uint64_t v19 = *(int *)(v18 + 312 * v6 + 40);
    if (v20 >= v19) {
      goto LABEL_15;
    }
  }
  BET3FXD__log_select_Error(*(void *)a1, 55036, (uint64_t)"invalid solver for stream %d: %s\n", v22, v23, v24, v25, v26);
  return v7;
}

void BET3FXD__DeInitVStream(int *a1)
{
  if (a1 && *(void *)a1)
  {
    if (a1[8] >= 1)
    {
      uint64_t v2 = 0;
      uint64_t v3 = *((void *)a1 + 3);
      uint64_t v4 = 304;
      do
      {
        if (!v3) {
          break;
        }
        BET3FLT__FreePStreamSM(v3 + v4 - 280);
        BET3FLT__FreePStreamParam((void *)(*((void *)a1 + 3) + v4 - 280));
        BET3FLT__FreePStreamSM(*((void *)a1 + 3) + v4 - 160);
        BET3FLT__FreePStreamParam((void *)(*((void *)a1 + 3) + v4 - 160));
        uint64_t v3 = *((void *)a1 + 3);
        uint64_t v5 = *(void *)(v3 + v4 - 16);
        if (v5)
        {
          heap_Free(*(void **)(*(void *)a1 + 8), v5);
          uint64_t v3 = *((void *)a1 + 3);
          *(void *)(v3 + v4 - 16) = 0;
        }
        uint64_t v6 = *(void *)(v3 + v4);
        if (v6)
        {
          heap_Free(*(void **)(*(void *)a1 + 8), v6);
          uint64_t v3 = *((void *)a1 + 3);
          *(void *)(v3 + v4) = 0;
        }
        ++v2;
        v4 += 312;
      }
      while (v2 < a1[8]);
    }
    uint64_t v7 = *((void *)a1 + 6);
    if (v7)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v7);
      *((void *)a1 + 6) = 0;
    }
    uint64_t v8 = *((void *)a1 + 5);
    if (v8)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v8);
      *((void *)a1 + 5) = 0;
    }
    uint64_t v9 = *((void *)a1 + 3);
    if (v9)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v9);
      *((void *)a1 + 3) = 0;
    }
    uint64_t v10 = *((void *)a1 + 79);
    if (v10)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v10);
      *((void *)a1 + 79) = 0;
    }
    uint64_t v11 = *((void *)a1 + 80);
    if (v11)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v11);
      *((void *)a1 + 80) = 0;
    }
    BET3FXD__DeInitUttModel((void *)a1 + 7);
    bzero(a1, 0x7A0uLL);
  }
}

uint64_t dequantDur(uint64_t a1, int a2, int a3, _DWORD *a4, _DWORD *a5, int a6)
{
  uint64_t v10 = *(int *)(a1 + 4);
  uint64_t v11 = *(void *)(a1 + 128) + *(unsigned int *)(a1 + 136) + (2 * a2 * *(_DWORD *)a1 * v10);
  if (*(_DWORD *)a1 == 1)
  {
    int v12 = *(unsigned __int8 *)(v11 + a3);
    int v13 = *(unsigned __int8 *)(v11 + v10 + a3);
  }
  else
  {
    int v12 = *(unsigned __int16 *)(v11 + 2 * a3);
    int v13 = *(unsigned __int16 *)(v11 + 2 * ((int)v10 + a3));
  }
  *a4 = dequantValueToU32(v12, *(_DWORD *)(a1 + 12 + 4 * a3), *(unsigned __int16 *)(a1 + 68), *(unsigned __int16 *)(a1 + 70 + 2 * a3), *(unsigned __int16 *)(a1 + 98 + 2 * a3), a6);
  *a5 = dequantValueToU32(v13, *(_DWORD *)(a1 + 12 + 4 * (*(_DWORD *)(a1 + 4) + a3)), *(unsigned __int16 *)(a1 + 68), *(unsigned __int16 *)(a1 + 70 + 2 * (*(_DWORD *)(a1 + 4) + a3)), *(unsigned __int16 *)(a1 + 98 + 2 * (*(_DWORD *)(a1 + 4) + a3)), a6);
  return 0;
}

uint64_t dequantValueToU32(int a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  __int16 v8 = a6 + 2 - a4;
  if (a6 + 2 > a4)
  {
    char v9 = a6 + 2 - a4;
  }
  else
  {
    __int16 v8 = 0;
    char v9 = 0;
  }
  unsigned int v10 = (unsigned __int16)(a6 - v8);
  char v11 = a6 - v8 + 16 - a4;
  if (v10 + 16 <= a4)
  {
    __int16 v13 = a4 - v10;
    int v12 = a5;
  }
  else
  {
    a1 <<= v11;
    int v12 = a5;
    __int16 v13 = 16;
  }
  int v14 = fxd_S32ShMultRndS32S32(a1, v12, v13);
  if (v10 >= a3)
  {
    uint64_t v16 = 0x7FFFFFFFLL;
    if (0x7FFFFFFFu >> (v10 - a3) <= a2) {
      return v16;
    }
    unsigned int v15 = a2 << (v10 - a3);
  }
  else
  {
    unsigned int v15 = a2 >> (a3 - v10);
  }
  unsigned int v17 = v15 + v14;
  if (v17 >= 0x7FFFFFFFu >> v9) {
    return 0x7FFFFFFFLL;
  }
  else {
    return v17 << v9;
  }
}

uint64_t dequantMsd(uint64_t a1, int a2, int a3, int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, unsigned int a8)
{
  int v12 = (unsigned __int8 *)(*(void *)(a1 + 112)
                          + *(unsigned int *)(*(void *)(a1 + 120) + 4 * a2)
                          + *(unsigned __int16 *)(a1 + 12) * (uint64_t)a3
                          + 3 * a4 * *(_DWORD *)a1);
  if (*(_DWORD *)a1 == 1)
  {
    int v13 = *v12;
    int v14 = v12[1];
    int v15 = v12[2];
  }
  else
  {
    int v13 = *(unsigned __int16 *)v12;
    int v14 = *((unsigned __int16 *)v12 + 1);
    int v15 = *((unsigned __int16 *)v12 + 2);
  }
  uint64_t v16 = a1 + 12 * a4;
  unsigned int v17 = (unsigned __int16 *)(a1 + 6 * a4);
  *a5 = dequantValueToS32(v13, *(_DWORD *)(v16 + 64), *(unsigned __int16 *)(a1 + 100), v17[14], v17[23], a8);
  *a6 = dequantValueToS32(v14, *(_DWORD *)(v16 + 68), *(unsigned __int16 *)(a1 + 100), v17[15], v17[24], a8);
  *a7 = dequantValueToU32(v15, *(_DWORD *)(v16 + 72), *(unsigned __int16 *)(a1 + 100), v17[16], v17[25], a8);
  return 0;
}

uint64_t dequantValueToS32(int a1, int a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6)
{
  if (a6 + 16 <= a4)
  {
    __int16 v10 = a4 - a6;
    int v9 = a5;
  }
  else
  {
    a1 <<= a6 + 16 - a4;
    int v9 = a5;
    __int16 v10 = 16;
  }
  int v11 = fxd_S32ShMultRndS32S32(a1, v9, v10);
  unsigned int v12 = v11 + (a2 << (a6 - a3));
  if ((int)(0x7FFFFFFFu >> (a6 - a3)) <= a2) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  if (a3 > a6) {
    return (v11 + (a2 >> (a3 - a6)));
  }
  else {
    return v12;
  }
}

uint64_t dequantEnergy(unsigned __int16 *a1, int a2, int a3, __int16 a4, _DWORD *a5, _DWORD *a6, unsigned int a7)
{
  uint64_t result = 2229280793;
  int v11 = *((_DWORD *)a1 + 16);
  if (v11)
  {
    if (v11 != 1) {
      return result;
    }
    uint64_t v12 = *((void *)a1 + 7) + 16 * a2;
    uint64_t v13 = *(void *)v12 + *(unsigned int *)(v12 + 8);
    int v14 = *a1;
    int v15 = a1[1] + a1[2] * v14;
    int v16 = 2 * a3 - 2;
  }
  else
  {
    uint64_t v17 = *((void *)a1 + 7) + 16 * a2;
    uint64_t v13 = *(void *)v17 + *(unsigned int *)(v17 + 8);
    int v15 = a3 - 1;
    int v14 = *a1;
    int v16 = a1[1] + 2 * v14 * a1[2];
  }
  uint64_t v18 = v13 + (v16 * v15);
  if (v18)
  {
    unsigned __int16 v19 = 2 * a4;
    uint64_t v20 = (unsigned __int16)(2 * a4);
    if (v14 == 1) {
      int v21 = *(unsigned __int8 *)(v18 + v20);
    }
    else {
      int v21 = *(unsigned __int16 *)(v18 + 2 * v20);
    }
    uint64_t v22 = *((void *)a1 + 5) + 40 * (unsigned __int16)(2 * a4);
    *a5 = dequantValueToS32(v21, **(_DWORD **)(v22 + 8), *(unsigned __int16 *)(v22 + 16), **(unsigned __int16 **)(v22 + 24), **(unsigned __int16 **)(v22 + 32), a7);
    if (a6)
    {
      uint64_t v23 = v19 | 1u;
      if (*a1 == 1) {
        int v24 = *(unsigned __int8 *)(v18 + v23);
      }
      else {
        int v24 = *(unsigned __int16 *)(v18 + 2 * v23);
      }
      uint64_t v25 = *((void *)a1 + 5) + 40 * (v19 | 1u);
      int v26 = dequantValueToS32(v24, **(_DWORD **)(v25 + 8), *(unsigned __int16 *)(v25 + 16), **(unsigned __int16 **)(v25 + 24), **(unsigned __int16 **)(v25 + 32), a7);
      uint64_t result = 0;
      *a6 = v26;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t deVQSpectrum(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, __int16 a7, _DWORD *a8, _DWORD *a9, unsigned __int16 a10)
{
  unsigned __int16 v12 = a1[4];
  uint64_t v13 = (unsigned __int16)(v12 * a7);
  int v14 = a1[2];
  unsigned __int16 v15 = (v14 + a7) * v12;
  int v16 = *((_DWORD *)a1 + 16);
  if (v16)
  {
    if (v16 == 1)
    {
      uint64_t v17 = *((void *)a1 + 7) + 16 * a3;
      uint64_t v18 = *(void *)v17
          + *(unsigned int *)(v17 + 8)
          + (2 * a4 - 2) * (*a1 * v14 + a1[1])
          + 2 * *a1 * v14;
      uint64_t v19 = v13 + a5;
      int v20 = *(unsigned __int16 *)(v18 + 2 * v19);
      uint64_t v21 = v15 + (uint64_t)a5;
      int v22 = *(unsigned __int16 *)(v18 + 2 * v21);
    }
    else
    {
      int v20 = 0;
      int v22 = 0;
      uint64_t v19 = (int)v13 + a5;
      uint64_t v21 = a5 + v15;
    }
  }
  else
  {
    uint64_t v23 = *((void *)a1 + 7) + 16 * a3;
    uint64_t v24 = *(void *)v23
        + *(unsigned int *)(v23 + 8)
        + 2 * v14 * *a1
        + (a1[1] + 2 * v14 * *a1) * (a4 - 1);
    uint64_t v19 = v13 + a5;
    int v20 = *(unsigned __int8 *)(v24 + v19);
    uint64_t v21 = v15 + (uint64_t)a5;
    int v22 = *(unsigned __int8 *)(v24 + v21);
  }
  dequantCbkVectorElem((unsigned __int16 *)(*(void *)(a2 + 8) + 168 * v19), v20, a6, a8, a10);
  dequantCbkVectorElem((unsigned __int16 *)(*(void *)(a2 + 8) + 168 * v21), v22, a6, a9, a10);
  return 0;
}

uint64_t dequantCbkVectorElem(unsigned __int16 *a1, int a2, int a3, _DWORD *a4, unsigned int a5)
{
  int v6 = a1[2];
  uint64_t v7 = *((void *)a1 + 18) + *((unsigned int *)a1 + 38) + *a1 * (uint64_t)(v6 * a2);
  if (v6 == 1) {
    int v8 = *(unsigned __int8 *)(v7 + a3);
  }
  else {
    int v8 = *(unsigned __int16 *)(v7 + 2 * a3);
  }
  uint64_t result = dequantValueToS32(v8, *(_DWORD *)&a1[2 * a3 + 38], a1[36], a1[a3 + 4], a1[a3 + 20], a5);
  *a4 = result;
  return result;
}

uint64_t loadQuantizedDurFile(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int v34 = 0;
  BET3FLT__xfread_BET3((char *)&v34 + 2, 2u, 1, (unsigned int *)a3);
  if (HIWORD(v34) != 1)
  {
    uint64_t v12 = 2229280772;
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = "LoadQuantizedDurFile: invalid quantization format";
    goto LABEL_7;
  }
  BET3FLT__xfread_BET3((char *)&v34 + 2, 2u, 1, (unsigned int *)a3);
  BET3FLT__xfread_BET3((char *)&v34 + 2, 2u, 1, (unsigned int *)a3);
  int v11 = HIWORD(v34);
  *(_DWORD *)a2 = HIWORD(v34);
  if ((v11 - 3) <= 0xFFFFFFFD)
  {
    uint64_t v12 = 2229280772;
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = "LoadQuantizedDurFile: invalid value for code length";
LABEL_7:
    log_OutText(v13, (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)v14, v8, v9, v10, v33);
    return v12;
  }
  BET3FLT__xfread_BET3((char *)&v34 + 2, 2u, 1, (unsigned int *)a3);
  int v15 = HIWORD(v34);
  *(_DWORD *)(a2 + 4) = HIWORD(v34);
  if ((v15 - 8) <= 0xFFFFFFF8)
  {
    uint64_t v12 = 2229280772;
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = "LoadDurFile : the number of HMM states is illegal";
    goto LABEL_7;
  }
  uint64_t v17 = 0;
  int v18 = 4 - (*(_DWORD *)a3 & 3);
  if ((*(_DWORD *)a3 & 3) == 0) {
    int v18 = 0;
  }
  unsigned int v19 = v18 + *(_DWORD *)a3;
  if (v19 >= *(_DWORD *)(a3 + 16)) {
    unsigned int v19 = *(_DWORD *)(a3 + 16);
  }
  *(_DWORD *)a3 = v19;
  uint64_t v20 = a2 + 70;
  do
  {
    BET3FLT__xfread_BET3((void *)v20, 2u, 1, (unsigned int *)a3);
    BET3FLT__xfread_BET3((void *)(v20 + 28), 2u, 1, (unsigned int *)a3);
    ++v17;
    v20 += 2;
  }
  while (v17 < 2 * *(int *)(a2 + 4));
  BET3FLT__xfread_BET3(&v34, 2u, 1, (unsigned int *)a3);
  int v21 = 4 - (*(_DWORD *)a3 & 3);
  if ((*(_DWORD *)a3 & 3) == 0) {
    int v21 = 0;
  }
  unsigned int v22 = v21 + *(_DWORD *)a3;
  if (v22 >= *(_DWORD *)(a3 + 16)) {
    unsigned int v22 = *(_DWORD *)(a3 + 16);
  }
  *(_DWORD *)a3 = v22;
  if (*(int *)(a2 + 4) >= 1)
  {
    uint64_t v23 = &v35;
    uint64_t v24 = 3;
    do
    {
      BET3FLT__xfread_BET3(v23, 2u, 1, (unsigned int *)a3);
      unsigned int v25 = *(unsigned __int16 *)v23;
      v23 += 2;
      unsigned int v26 = v25 >> (v34 - a4);
      int v27 = v25 << (a4 - v34);
      if ((unsigned __int16)v34 <= a4) {
        unsigned int v28 = v27;
      }
      else {
        unsigned int v28 = v26;
      }
      *(_DWORD *)(a2 + 4 * v24) = v28;
      uint64_t v29 = v24 - 2;
      ++v24;
    }
    while (v29 < 2 * *(int *)(a2 + 4));
  }
  *(_WORD *)(a2 + 68) = a4;
  BET3FLT__xfread_BET3((char *)&v34 + 2, 2u, 1, (unsigned int *)a3);
  uint64_t v12 = 0;
  unsigned int v30 = *(_DWORD *)a3;
  int v31 = 4 - (*(_DWORD *)a3 & 3);
  *(_DWORD *)(a2 + 8) = HIWORD(v34);
  if ((v30 & 3) == 0) {
    int v31 = 0;
  }
  unsigned int v32 = v31 + v30;
  if (v32 >= *(_DWORD *)(a3 + 16)) {
    unsigned int v32 = *(_DWORD *)(a3 + 16);
  }
  *(_DWORD *)a3 = v32;
  *(void *)(a2 + 128) = *(void *)(a3 + 8);
  *(_DWORD *)(a2 + 136) = v32;
  return v12;
}

uint64_t loadQuantizedMsdFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  int v47 = 0;
  uint64_t v12 = 2229280772;
  unsigned __int16 v46 = 0;
  *(_DWORD *)(a2 + 4) = a3;
  BET3FLT__xfread_BET3((char *)&v47 + 2, 2u, 1, (unsigned int *)a4);
  if (HIWORD(v47) != 1)
  {
    uint64_t v17 = "LoadQuantizedFreqFile: invalid quantization format";
    goto LABEL_5;
  }
  BET3FLT__xfread_BET3((char *)&v47 + 2, 2u, 1, (unsigned int *)a4);
  BET3FLT__xfread_BET3((char *)&v47 + 2, 2u, 1, (unsigned int *)a4);
  int v16 = HIWORD(v47);
  *(_DWORD *)(a2 + 8) = HIWORD(v47);
  if ((v16 - 4) < 0xFFFFFFFD)
  {
    uint64_t v17 = "LoadQuantizedFreqFile: invalid value for number of streams";
LABEL_5:
    log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)v17, v13, v14, v15, v45);
    return v12;
  }
  BET3FLT__xfread_BET3((char *)&v47 + 2, 2u, 1, (unsigned int *)a4);
  int v19 = HIWORD(v47);
  *(_DWORD *)a2 = HIWORD(v47);
  if ((v19 - 3) < 0xFFFFFFFE)
  {
    uint64_t v17 = "LoadQuantizedFreqFile: invalid value for code length";
    goto LABEL_5;
  }
  int v20 = 4 - (*(_DWORD *)a4 & 3);
  if ((*(_DWORD *)a4 & 3) == 0) {
    int v20 = 0;
  }
  unsigned int v21 = v20 + *(_DWORD *)a4;
  if (v21 >= *(_DWORD *)(a4 + 16)) {
    unsigned int v21 = *(_DWORD *)(a4 + 16);
  }
  *(_DWORD *)a4 = v21;
  BET3FLT__xfread_BET3((void *)(a2 + 14), 2u, a3, (unsigned int *)a4);
  int v22 = 4 - (*(_DWORD *)a4 & 3);
  if ((*(_DWORD *)a4 & 3) == 0) {
    int v22 = 0;
  }
  unsigned int v23 = v22 + *(_DWORD *)a4;
  if (v23 >= *(_DWORD *)(a4 + 16)) {
    unsigned int v23 = *(_DWORD *)(a4 + 16);
  }
  *(_DWORD *)a4 = v23;
  if (*(int *)(a2 + 8) >= 1)
  {
    uint64_t v24 = 0;
    uint64_t v25 = a2;
    do
    {
      uint64_t v26 = -6;
      do
      {
        BET3FLT__xfread_BET3((void *)(v25 + v26 + 34), 2u, 1, (unsigned int *)a4);
        BET3FLT__xfread_BET3((void *)(v25 + v26 + 52), 2u, 1, (unsigned int *)a4);
        v26 += 2;
      }
      while (v26);
      ++v24;
      v25 += 6;
    }
    while (v24 < *(int *)(a2 + 8));
  }
  BET3FLT__xfread_BET3(&v46, 2u, 1, (unsigned int *)a4);
  int v30 = 4 - (*(_DWORD *)a4 & 3);
  if ((*(_DWORD *)a4 & 3) == 0) {
    int v30 = 0;
  }
  unsigned int v31 = v30 + *(_DWORD *)a4;
  if (v31 >= *(_DWORD *)(a4 + 16)) {
    unsigned int v31 = *(_DWORD *)(a4 + 16);
  }
  *(_DWORD *)a4 = v31;
  if (*(int *)(a2 + 8) >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = a2 + 64;
    do
    {
      for (uint64_t i = 0; i != 12; i += 4)
      {
        BET3FLT__xfread_BET3(&v47, 2u, 1, (unsigned int *)a4);
        if (v46 <= a5) {
          int v35 = (__int16)v47 << (a5 - v46);
        }
        else {
          int v35 = (__int16)v47 >> (v46 - a5);
        }
        *(_DWORD *)(v33 + i) = v35;
      }
      ++v32;
      v33 += 12;
    }
    while (v32 < *(int *)(a2 + 8));
  }
  *(_WORD *)(a2 + 100) = a5;
  uint64_t v36 = *(unsigned int *)(a2 + 64);
  if ((int)v36 >= a6) {
    a6 = (13 * ((int)v36 >> 2)) >> 2;
  }
  else {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"LoadQuantizedFreqFile : minimum Log pitch value is too small (%d in Q%d), clamping to minimum (%d)\n", v27, v28, v29, v36);
  }
  *(_DWORD *)(a2 + 104) = a6;
  *(void *)(a2 + 112) = *(void *)(a4 + 8);
  uint64_t v37 = heap_Calloc(*(void **)(a1 + 8), a3, 4);
  *(void *)(a2 + 120) = v37;
  if (!v37) {
    return 2229280778;
  }
  int v38 = *(_DWORD *)(a2 + 4);
  int v39 = (-3 * *(_DWORD *)a2 * *(_DWORD *)(a2 + 8)) & 3;
  int v40 = v39 + 3 * *(_DWORD *)a2 * *(_DWORD *)(a2 + 8);
  *(_WORD *)(a2 + 12) = ((-3 * *(_WORD *)a2 * *(_WORD *)(a2 + 8)) & 3) + 3 * *(_WORD *)a2 * *(_WORD *)(a2 + 8);
  if (v38 >= 1)
  {
    uint64_t v41 = 0;
    int v42 = *(_DWORD *)a4;
    do
    {
      int v43 = 4 - (v42 & 3);
      if ((v42 & 3) == 0) {
        int v43 = 0;
      }
      unsigned int v44 = v43 + v42;
      if (v44 >= *(_DWORD *)(a4 + 16)) {
        unsigned int v44 = *(_DWORD *)(a4 + 16);
      }
      *(_DWORD *)a4 = v44;
      *(_DWORD *)(v37 + 4 * v41) = v44;
      int v42 = *(_DWORD *)a4 - v39 + (unsigned __int16)v40 * *(unsigned __int16 *)(a2 + 14 + 2 * v41);
      *(_DWORD *)a4 = v42;
      ++v41;
    }
    while (v41 < *(int *)(a2 + 4));
  }
  return 0;
}

uint64_t loadVQQuantizedCepFile(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  __int16 v63 = 0;
  *((_DWORD *)a2 + 16) = 0;
  BET3FLT__xfread_BET3(&v63, 2u, 1, (unsigned int *)a3);
  if (v63 != 1)
  {
    if (v63 != 2)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"LoadVQQuantizedCepFile: invalid quantization format", v6, v7, v8, v59);
      return 2229280772;
    }
    *((_DWORD *)a2 + 16) = 1;
  }
  BET3FLT__xfread_BET3(&v63, 2u, 1, (unsigned int *)a3);
  BET3FLT__xfread_BET3(a2 + 3, 2u, 1, (unsigned int *)a3);
  BET3FLT__xfread_BET3(a2 + 2, 2u, 1, (unsigned int *)a3);
  unsigned __int16 v9 = a2[2];
  BET3FLT__xfread_BET3(a2 + 5, 2u, 1, (unsigned int *)a3);
  a2[6] = a2[5] + 1;
  *((_DWORD *)a2 + 4) = 2;
  BET3FLT__xfread_BET3(&v63, 2u, 1, (unsigned int *)a3);
  uint64_t v10 = 2229280772;
  if (v63 == 1)
  {
    uint64_t v10 = 2229280778;
    unsigned __int16 v11 = 2 * v9;
    BET3FLT__xfread_BET3(a2 + 1, 2u, 1, (unsigned int *)a3);
    BET3FLT__xfread_BET3(a2, 2u, 1, (unsigned int *)a3);
    int v12 = 4 - (*(_DWORD *)a3 & 3);
    if ((*(_DWORD *)a3 & 3) == 0) {
      int v12 = 0;
    }
    unsigned int v13 = v12 + *(_DWORD *)a3;
    if (v13 >= *(_DWORD *)(a3 + 16)) {
      unsigned int v13 = *(_DWORD *)(a3 + 16);
    }
    *(_DWORD *)a3 = v13;
    uint64_t v62 = v11;
    uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), v11, 40);
    *((void *)a2 + 5) = v14;
    if (v14)
    {
      uint64_t v60 = a2 + 5;
      if (v11)
      {
        uint64_t v15 = 0;
        uint64_t v61 = a1;
        do
        {
          uint64_t v16 = *((void *)a2 + 5);
          uint64_t v17 = v16 + 40 * v15;
          int v18 = (_WORD *)(v17 + 2);
          BET3FLT__xfread_BET3((void *)(v17 + 2), 2u, 1, (unsigned int *)a3);
          uint64_t v19 = heap_Calloc(*(void **)(a1 + 8), *(unsigned __int16 *)(v17 + 2), 4);
          *(void *)(v17 + 8) = v19;
          int v20 = (void **)(v17 + 8);
          if (!v19) {
            return 2229280778;
          }
          uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), (unsigned __int16)*v18, 2);
          uint64_t v22 = v16 + 40 * v15;
          *(void *)(v22 + 24) = v21;
          unsigned int v23 = (void *)(v22 + 24);
          if (!v21) {
            return 2229280778;
          }
          uint64_t v24 = heap_Calloc(*(void **)(a1 + 8), (unsigned __int16)*v18, 2);
          uint64_t v28 = v16 + 40 * v15;
          *(void *)(v28 + 32) = v24;
          uint64_t v29 = (void *)(v28 + 32);
          if (!v24) {
            return 2229280778;
          }
          if (!*v18)
          {
            log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"ReadQuantDescr: number of streams is wrong\n", v25, v26, v27, v59);
            return 2229280772;
          }
          uint64_t v30 = 0;
          unint64_t v31 = 0;
          int v32 = 4 - (*(_DWORD *)a3 & 3);
          if ((*(_DWORD *)a3 & 3) == 0) {
            int v32 = 0;
          }
          unsigned int v33 = v32 + *(_DWORD *)a3;
          if (v33 >= *(_DWORD *)(a3 + 16)) {
            unsigned int v33 = *(_DWORD *)(a3 + 16);
          }
          *(_DWORD *)a3 = v33;
          do
          {
            BET3FLT__xfread_BET3((void *)(*v23 + v30), 2u, 1, (unsigned int *)a3);
            BET3FLT__xfread_BET3((void *)(*v29 + v30), 2u, 1, (unsigned int *)a3);
            ++v31;
            v30 += 2;
          }
          while (v31 < (unsigned __int16)*v18);
          BET3FLT__xfread_BET3((void *)(v16 + 40 * v15 + 16), 2u, 1, (unsigned int *)a3);
          int v34 = 4 - (*(_DWORD *)a3 & 3);
          if ((*(_DWORD *)a3 & 3) == 0) {
            int v34 = 0;
          }
          unsigned int v35 = v34 + *(_DWORD *)a3;
          if (v35 >= *(_DWORD *)(a3 + 16)) {
            unsigned int v35 = *(_DWORD *)(a3 + 16);
          }
          *(_DWORD *)a3 = v35;
          BET3FLT__xfread_BET3(*v20, 4u, (unsigned __int16)*v18, (unsigned int *)a3);
          ++v15;
          a1 = v61;
        }
        while (v15 != v62);
      }
      BET3FLT__xfread_BET3(a2 + 4, 2u, 1, (unsigned int *)a3);
      uint64_t v36 = (void *)heap_Calloc(*(void **)(a1 + 8), a2[4], 2);
      *((void *)a2 + 3) = v36;
      if (!v36) {
        return 2229280778;
      }
      int v37 = 4 - (*(_DWORD *)a3 & 3);
      if ((*(_DWORD *)a3 & 3) == 0) {
        int v37 = 0;
      }
      unsigned int v38 = v37 + *(_DWORD *)a3;
      if (v38 >= *(_DWORD *)(a3 + 16)) {
        unsigned int v38 = *(_DWORD *)(a3 + 16);
      }
      *(_DWORD *)a3 = v38;
      BET3FLT__xfread_BET3(v36, 2u, a2[4], (unsigned int *)a3);
      uint64_t v39 = (unsigned __int16)*v60;
      uint64_t v10 = 2229280778;
      if (*v60)
      {
        uint64_t v40 = 0;
        int v41 = 0;
        int v42 = a2[4];
        uint64_t v43 = *((void *)a2 + 4);
        do
        {
          unint64_t v44 = v40 + 1;
          if (v41 + 1 < v42 && v44 > *(unsigned __int16 *)(*((void *)a2 + 3) + 2 * (v41 + 1))) {
            ++v41;
          }
          *(_DWORD *)(v43 + 4 * v40++) = v41;
        }
        while (v39 != v44);
      }
      int v45 = 4 - (*(_DWORD *)a3 & 3);
      if ((*(_DWORD *)a3 & 3) == 0) {
        int v45 = 0;
      }
      unsigned int v46 = v45 + *(_DWORD *)a3;
      if (v46 >= *(_DWORD *)(a3 + 16)) {
        unsigned int v46 = *(_DWORD *)(a3 + 16);
      }
      *(_DWORD *)a3 = v46;
      BET3FLT__xfread2ptr_BET3((void *)a2 + 6, 2u, a2[3], (unsigned int *)a3);
      *((void *)a2 + 6) -= 4;
      uint64_t v47 = heap_Calloc(*(void **)(a1 + 8), a2[3], 16);
      *((void *)a2 + 7) = v47;
      if (v47)
      {
        unsigned int v48 = *(_DWORD *)a3;
        int v49 = 4 - (*(_DWORD *)a3 & 3);
        if ((*(_DWORD *)a3 & 3) == 0) {
          int v49 = 0;
        }
        *((void *)a2 + 7) = v47 - 32;
        unsigned int v50 = v49 + v48;
        unsigned int v51 = *(_DWORD *)(a3 + 16);
        if (v50 >= v51) {
          unsigned int v50 = *(_DWORD *)(a3 + 16);
        }
        *(_DWORD *)a3 = v50;
        if (a2[3])
        {
          uint64_t v52 = *(void *)(a3 + 8);
          int v53 = *((_DWORD *)a2 + 16);
          uint64_t v54 = -(uint64_t)a2[3];
          uint64_t v55 = (unsigned int *)(v47 + 8);
          uint64_t v56 = 2;
          do
          {
            int v57 = 4 - (v50 & 3);
            if ((v50 & 3) == 0) {
              int v57 = 0;
            }
            v50 += v57;
            if (v50 >= v51) {
              unsigned int v50 = v51;
            }
            *((void *)v55 - 1) = v52;
            *uint64_t v55 = v50;
            if (v53)
            {
              if (v53 == 1) {
                v50 += 2 * *(unsigned __int16 *)(*((void *)a2 + 6) + 2 * v56) * (a2[1] + a2[2] * *a2);
              }
            }
            else
            {
              v50 += (a2[1] + 2 * *a2 * a2[2]) * *(unsigned __int16 *)(*((void *)a2 + 6) + 2 * v56);
            }
            ++v56;
            v55 += 4;
          }
          while (v54 + v56 != 2);
          uint64_t v10 = 0;
          *(_DWORD *)a3 = v50;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v10;
}

uint64_t loadCodebookSet(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v8 = 2229280772;
  memset(v51, 0, 512);
  v52[1] = 0;
  BET3FLT__xfread_BET3(&v52[1], 2u, 1, (unsigned int *)a3);
  if (v52[1] != 1)
  {
    unsigned int v13 = "ReadQCodeBookSetHdr: invalid quantization format";
    goto LABEL_5;
  }
  BET3FLT__xfread_BET3(&v52[1], 2u, 1, (unsigned int *)a3);
  BET3FLT__xfread_BET3(v51, 2u, 1, (unsigned int *)a3);
  uint64_t v12 = LOWORD(v51[0]);
  if (LOWORD(v51[0]) >= 0x97u)
  {
    unsigned int v13 = "ReadQCodeBookSetHdr : Number of codebooks is too high, aborting\n";
LABEL_5:
    log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)v13, v9, v10, v11, v46);
    return v8;
  }
  int v15 = 4 - (*(_DWORD *)a3 & 3);
  if ((*(_DWORD *)a3 & 3) == 0) {
    int v15 = 0;
  }
  unsigned int v16 = v15 + *(_DWORD *)a3;
  if (v16 >= *(_DWORD *)(a3 + 16)) {
    unsigned int v16 = *(_DWORD *)(a3 + 16);
  }
  *(_DWORD *)a3 = v16;
  BET3FLT__xfread_BET3((char *)v51 + 4, 4u, v12, (unsigned int *)a3);
  __int16 v17 = v51[0];
  uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), LOWORD(v51[0]), 168);
  *(void *)(a2 + 8) = v18;
  if (!v18) {
    return 2229280778;
  }
  *(_WORD *)(a2 + 2) = v17;
  *(_WORD *)a2 = 0;
  __int16 v19 = v51[0];
  if (LOWORD(v51[0]))
  {
    unsigned __int16 v49 = a4;
    uint64_t v47 = a1;
    uint64_t v48 = a2;
    unint64_t v20 = 0;
    uint64_t v21 = 40;
    uint64_t v22 = 76;
    while (1)
    {
      uint64_t v23 = *(void *)(a2 + 8);
      uint64_t v24 = (_WORD *)(v23 + 168 * v20);
      *(_DWORD *)uint64_t v52 = 0;
      BET3FLT__xfread_BET3(v24, 2u, 1, (unsigned int *)a3);
      if ((unsigned __int16)*v24 > 0x10u)
      {
        int v45 = "LoadQuantizedCodebook: invalid value for codebook vector length\n";
        goto LABEL_49;
      }
      uint64_t v28 = v23 + 168 * v20;
      BET3FLT__xfread_BET3((void *)(v28 + 2), 2u, 1, (unsigned int *)a3);
      uint64_t v29 = (unsigned __int16 *)(v28 + 4);
      BET3FLT__xfread_BET3((void *)(v28 + 4), 2u, 1, (unsigned int *)a3);
      if (*(unsigned __int16 *)(v28 + 4) - 3 < 0xFFFFFFFE) {
        break;
      }
      unsigned int v50 = (unsigned __int16 *)(v28 + 2);
      int v30 = 4 - (*(_DWORD *)a3 & 3);
      if ((*(_DWORD *)a3 & 3) == 0) {
        int v30 = 0;
      }
      unsigned int v31 = v30 + *(_DWORD *)a3;
      if (v31 >= *(_DWORD *)(a3 + 16)) {
        unsigned int v31 = *(_DWORD *)(a3 + 16);
      }
      *(_DWORD *)a3 = v31;
      if (*v24)
      {
        unint64_t v32 = 0;
        unsigned int v33 = (char *)(v23 + v21);
        do
        {
          BET3FLT__xfread_BET3(v33 - 32, 2u, 1, (unsigned int *)a3);
          BET3FLT__xfread_BET3(v33, 2u, 1, (unsigned int *)a3);
          ++v32;
          v33 += 2;
        }
        while (v32 < (unsigned __int16)*v24);
      }
      BET3FLT__xfread_BET3(&v52[1], 2u, 1, (unsigned int *)a3);
      int v34 = 4 - (*(_DWORD *)a3 & 3);
      if ((*(_DWORD *)a3 & 3) == 0) {
        int v34 = 0;
      }
      unsigned int v35 = *(_DWORD *)(a3 + 16);
      if (v34 + *(_DWORD *)a3 >= v35) {
        unsigned int v36 = *(_DWORD *)(a3 + 16);
      }
      else {
        unsigned int v36 = v34 + *(_DWORD *)a3;
      }
      *(_DWORD *)a3 = v36;
      if (*v24)
      {
        unint64_t v37 = 0;
        unsigned __int16 v38 = v49;
        do
        {
          BET3FLT__xfread_BET3(v52, 2u, 1, (unsigned int *)a3);
          unsigned int v39 = (unsigned __int16)v52[1];
          if ((unsigned __int16)v52[1] <= v38)
          {
            if ((unsigned __int16)v52[1] + 16 < v38) {
              unsigned __int16 v38 = v52[1] + 16;
            }
            int v40 = v52[0] << (v38 - LOBYTE(v52[1]));
          }
          else
          {
            int v40 = v52[0];
          }
          *(_DWORD *)(v23 + v22 + 4 * v37++) = v40;
          unint64_t v41 = (unsigned __int16)*v24;
        }
        while (v37 < v41);
        unsigned int v36 = *(_DWORD *)a3;
        unsigned int v35 = *(_DWORD *)(a3 + 16);
        a2 = v48;
      }
      else
      {
        LODWORD(v41) = 0;
        unsigned int v39 = (unsigned __int16)v52[1];
        unsigned __int16 v38 = v49;
      }
      int v42 = 4 - (v36 & 3);
      if ((v36 & 3) == 0) {
        int v42 = 0;
      }
      if (v39 <= v38) {
        LOWORD(v39) = v38;
      }
      uint64_t v43 = v23 + 168 * v20;
      *(_WORD *)(v43 + 72) = v39;
      unsigned int v44 = v42 + v36;
      if (v42 + v36 >= v35) {
        unsigned int v44 = v35;
      }
      *(void *)(v43 + 144) = *(void *)(a3 + 8);
      *(_DWORD *)(v43 + 152) = v44;
      *(_DWORD *)a3 = v44 + v41 * *v29 * *v50;
      ++v20;
      __int16 v19 = v51[0];
      v21 += 168;
      v22 += 168;
      if (v20 >= LOWORD(v51[0])) {
        goto LABEL_45;
      }
    }
    int v45 = "LoadQuantizedCodebook: invalid value for code length\n";
LABEL_49:
    log_OutText(*(void *)(v47 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)v45, v25, v26, v27, v47);
    return 2229280772;
  }
  else
  {
LABEL_45:
    uint64_t v8 = 0;
    *(_WORD *)a2 = v19;
  }
  return v8;
}

uint64_t synth_bet3_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2164269057;
  }
  uint64_t result = 0;
  *a2 = &ISynth_Bet3_0;
  return result;
}

uint64_t synth_bet3_ObjOpen_0(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Object = 2164269063;
  uint64_t v46 = 0;
  uint64_t v45 = 0;
  int v44 = 0;
  __s1 = 0;
  long long v41 = xmmword_26C21F768;
  int v42 = off_26C21F778;
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a3, a4, &v46);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    log_OutText(*(void *)(v46 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjOpen", v10, v11, v12, v38);
    unsigned int v13 = (void *)heap_Calloc(*(void **)(v46 + 8), 1, 1344);
    if (!v13)
    {
      log_OutPublic(*(void *)(v46 + 32), (uint64_t)"SYNTH_BET3", 56000, 0, v14, v15, v16, v17, v39);
      uint64_t Object = 2164269066;
LABEL_27:
      log_OutText(*(void *)(v46 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjOpen: %x", v27, v28, v29, Object);
      log_OutEvent(*(uint64_t ***)(v46 + 32), 22, &byte_20D5A22AE, v32, v33, v34, v35, v36, v40);
      return Object;
    }
    uint64_t v18 = (uint64_t)v13;
    *unsigned int v13 = a3;
    v13[1] = a4;
    uint64_t v19 = v46;
    v13[2] = v46;
    if ((critsec_ObjOpen(*(void *)(v19 + 16), *(void **)(v19 + 8), v13 + 3) & 0x80000000) == 0)
    {
      *(void *)&long long v41 = v18;
      if ((synth_bet3_loc_ParamGetListen_0(v18, "volume", 0, 100, 0x50u, &v41, &v44) & 0x80000000) == 0
        && (synth_bet3_loc_ParamGetListen_0(v18, "rate", 50, 400, 0x64u, &v41, &v44) & 0x80000000) == 0
        && (synth_bet3_loc_ParamGetListen_0(v18, "rate_baseline", 50, 400, 0x64u, &v41, &v44) & 0x80000000) == 0
        && (synth_bet3_loc_ParamGetListen_0(v18, "pitch", 50, 200, 0x64u, &v41, &v44) & 0x80000000) == 0
        && (synth_bet3_loc_ParamGetListen_0(v18, "pitch_baseline", 50, 200, 0x64u, &v41, &v44) & 0x80000000) == 0
        && (synth_bet3_loc_ParamGetListen_0(v18, "audiooutputbufsamples", 1, 0x7FFFFFFF, 0x100u, &v41, &v44) & 0x80000000) == 0)
      {
        *(_DWORD *)(v18 + 40) = v44;
      }
    }
    if ((paramc_ParamGetStr(*(void *)(v46 + 40), (uint64_t)"synth_type", &__s1) & 0x80000000) == 0)
    {
      unint64_t v20 = __s1;
      if (!strcmp(__s1, "rcc"))
      {
        log_OutText(*(void *)(v46 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Setting up MRCC synthesizer", v21, v22, v23, v39);
        *(_DWORD *)(v18 + 1036) = 1;
        uint64_t v30 = synth_bet3_loc_SynthInit_MRCC(v18);
LABEL_22:
        uint64_t Object = v30;
        if ((v30 & 0x80000000) == 0)
        {
          uint64_t Object = objc_GetObject(*(void *)(v46 + 48), (uint64_t)"SYNTHSTREAM", &v45);
          if ((Object & 0x80000000) == 0)
          {
            *(void *)(v18 + 32) = *(void *)(v45 + 8);
            *(void *)a5 = v18;
            *(_DWORD *)(a5 + 8) = 9346;
            goto LABEL_27;
          }
          log_OutPublic(*(void *)(*(void *)(v18 + 16) + 32), (uint64_t)"SYNTH_BET3", 56001, 0, v31, v27, v28, v29, v39);
        }
        *(void *)a5 = v18;
        *(_DWORD *)(a5 + 8) = 9346;
        synth_bet3_ObjClose_0(v18, *(void *)(a5 + 8));
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        goto LABEL_27;
      }
      if (strcmp(v20, "mlsa") && strcmp(v20, "mfs"))
      {
        log_OutText(*(void *)(v46 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Unknown synthesizer: %s", v24, v25, v26, (uint64_t)v20);
        return 7;
      }
      log_OutText(*(void *)(v46 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Setting up MLSA synthesizer", v24, v25, v26, v39);
    }
    *(_DWORD *)(v18 + 1036) = 0;
    uint64_t v30 = synth_bet3_loc_SynthInit_MLSA_0(v18);
    goto LABEL_22;
  }
  return Object;
}

uint64_t synth_bet3_ObjClose_0(uint64_t a1, int a2)
{
  int v3 = safeh_HandleCheck(a1, a2, 9346, 1344);
  if (v3 < 0) {
    return 2164269064;
  }
  LODWORD(v7) = v3;
  uint64_t v8 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjClose", v4, v5, v6, v36);
  uint64_t v9 = *(void *)(v8 + 40);
  uint64_t v38 = a1;
  long long v37 = *(long long *)((char *)&xmmword_26C21F768 + 8);
  long long v39 = *(long long *)((char *)&xmmword_26C21F768 + 8);
  int v10 = paramc_ListenerRemove(v9, "volume", (long long *)&v38);
  uint64_t v11 = *(void *)(v8 + 40);
  if (v10 < 0) {
    LODWORD(v7) = v10;
  }
  uint64_t v38 = a1;
  long long v39 = v37;
  int v12 = paramc_ListenerRemove(v11, "rate", (long long *)&v38);
  uint64_t v13 = *(void *)(v8 + 40);
  if (v12 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v12;
  }
  uint64_t v38 = a1;
  long long v39 = v37;
  int v15 = paramc_ListenerRemove(v13, "rate_baseline", (long long *)&v38);
  uint64_t v16 = *(void *)(v8 + 40);
  if (v15 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v15;
  }
  uint64_t v38 = a1;
  long long v39 = v37;
  int v18 = paramc_ListenerRemove(v16, "pitch", (long long *)&v38);
  uint64_t v19 = *(void *)(v8 + 40);
  if (v18 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v18;
  }
  uint64_t v38 = a1;
  long long v39 = v37;
  int v21 = paramc_ListenerRemove(v19, "pitch_baseline", (long long *)&v38);
  uint64_t v22 = *(void *)(v8 + 40);
  if (v21 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v21;
  }
  uint64_t v38 = a1;
  long long v39 = v37;
  int v24 = paramc_ListenerRemove(v22, "audiooutputbufsamples", (long long *)&v38);
  if (v24 >= 0 || (int)v7 <= -1) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = v24;
  }
  if (*(void *)(a1 + 32))
  {
    int v26 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if (v26 >= 0 || (int)v7 <= -1) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v26;
    }
  }
  int v28 = *(_DWORD *)(a1 + 1036);
  if (v28 == 1)
  {
    RccSyn__deinit_Synthesis(a1 + 1048);
  }
  else if (!v28)
  {
    MFVSyn__denit__MVF_Synthesis((void **)(a1 + 64));
  }
  uint64_t v29 = *(void *)(a1 + 24);
  if (v29)
  {
    int v30 = critsec_ObjClose(v29);
    if ((int)v7 > -1 && v30 < 0) {
      uint64_t v7 = v30;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  heap_Free(*(void **)(v8 + 8), a1);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjClose: %x", v32, v33, v34, v7);
  return v7;
}

uint64_t synth_bet3_ObjReopen_0(uint64_t a1, int a2)
{
  __s1 = 0;
  if ((safeh_HandleCheck(a1, a2, 9346, 1344) & 0x80000000) != 0) {
    return 2164269064;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjReopen", v3, v4, v5, v20);
  if ((paramc_ParamGetStr(*(void *)(v6 + 40), (uint64_t)"synth_type", &__s1) & 0x80000000) != 0) {
    goto LABEL_10;
  }
  uint64_t v7 = __s1;
  if (!strcmp(__s1, "rcc"))
  {
    log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Setting up MRCC synthesizer", v8, v9, v10, v21);
    MFVSyn__denit__MVF_Synthesis((void **)(a1 + 64));
    *(_DWORD *)(a1 + 1036) = 1;
    uint64_t inited = synth_bet3_loc_SynthInit_MRCC(a1);
LABEL_11:
    uint64_t v14 = inited;
    log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjReopen: %x", v16, v17, v18, inited);
    return v14;
  }
  if (!strcmp(v7, "mlsa") || !strcmp(v7, "mfs"))
  {
    log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Setting up MLSA synthesizer", v11, v12, v13, v21);
LABEL_10:
    RccSyn__deinit_Synthesis(a1 + 1048);
    *(_DWORD *)(a1 + 1036) = 0;
    uint64_t inited = synth_bet3_loc_SynthInit_MLSA_0(a1);
    goto LABEL_11;
  }
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Unknown synthesizer: %s", v11, v12, v13, (uint64_t)v7);
  return 7;
}

uint64_t synth_bet3_ProcessStart_0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 9346, 1344) & 0x80000000) != 0) {
    return 2164269064;
  }
  synstrmaux_InitStreamOpener(a1 + 128, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3");
  if (synstrmaux_BuildAudioContentType("audio/L16;rate=", *(_DWORD *)(a1 + 48), (char *)(a1 + 80), 0x30uLL) > 0x2F) {
    return 9;
  }
  synstrmaux_RegisterInStream((_WORD *)(a1 + 128), (uint64_t)"application/x-realspeak-bet3-speech-frames;version=5.0",
    0,
    a1 + 952);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 128), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 968);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 128), a1 + 80, a1 + 984);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 128), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    a1 + 1000);
  uint64_t v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 128), *(void *)(a1 + 32), a3, a4);
  if ((v8 & 0x80000000) != 0)
  {
    *(_DWORD *)(a1 + 1016) = 0;
    *(void *)(a1 + 1028) = 0;
LABEL_12:
    synth_bet3_ProcessEnd_0(a1, a2);
    return v8;
  }
  int v9 = *(_DWORD *)(a1 + 1036);
  if (v9)
  {
    if (v9 != 1)
    {
      *(_DWORD *)(a1 + 1016) = 0;
      *(void *)(a1 + 1028) = 0;
      return v8;
    }
    RccSyn__reset_Synthesis(a1 + 1048);
    uint64_t inited = synth_bet3_loc_SynthInit_MRCC(a1);
  }
  else
  {
    uint64_t inited = BET3FXD__MFVSyn__reset__MVF_Synthesis((uint64_t *)(a1 + 64));
  }
  uint64_t v8 = inited;
  *(_DWORD *)(a1 + 1016) = 0;
  *(void *)(a1 + 1028) = 0;
  if ((inited & 0x80000000) != 0) {
    goto LABEL_12;
  }
  return v8;
}

uint64_t synth_bet3_Process_0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  v228[25] = *MEMORY[0x263EF8340];
  int v8 = -2130698234;
  int v9 = safeh_HandleCheck(a1, a2, 9346, 1344);
  if (v9 < 0) {
    return 2164269064;
  }
  uint64_t v10 = 1;
  if (v9 || !a1) {
    return v10;
  }
  if (*(_DWORD *)(a1 + 1036) == 1)
  {
    LODWORD(v221) = 0;
    size_t __n = 0;
    v228[0] = 0;
    __dst = 0;
    __src = 0;
    uint64_t v223 = 0;
    if ((safeh_HandleCheck(a1, a2, 9346, 1344) & 0x80000000) == 0)
    {
      *a5 = 1;
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      unsigned int v12 = *(_DWORD *)(a1 + 44);
      if (v11 >= v12)
      {
        if (v12) {
          v12 *= v11 / v12;
        }
        else {
          unsigned int v12 = *(_DWORD *)(a1 + 40);
        }
      }
      uint64_t v10 = (*(uint64_t (**)(void, void, uint64_t *, size_t *))(*(void *)(a1 + 32) + 144))(*(void *)(a1 + 952), *(void *)(a1 + 960), &v221, &__n);
      if ((v10 & 0x80000000) == 0)
      {
        if (v221)
        {
          uint64_t v20 = (*(uint64_t (**)(void, void, void *, uint64_t *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 952), *(void *)(a1 + 960), v228, &v221);
          if ((v20 & 0x80000000) == 0)
          {
            uint64_t v10 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 968), *(void *)(a1 + 976), &__src, (char *)&__n + 4);
            if ((v10 & 0x80000000) == 0)
            {
              if (v221 < 8) {
                return v10;
              }
              uint64_t v29 = (*(uint64_t (**)(void, void, void **, void))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 984), *(void *)(a1 + 992), &v223, 2 * v12);
              if ((v29 & 0x80000000) == 0)
              {
                if (!HIDWORD(__n)
                  || (uint64_t v34 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), &__dst), (v34 & 0x80000000) == 0))
                {
                  uint64_t v10 = critsec_Enter(*(void **)(a1 + 24));
                  if ((v10 & 0x80000000) != 0) {
                    return v10;
                  }
                  uint64_t v36 = *(void *)v228[0];
                  uint64_t v222 = 0;
                  unsigned int v226 = 0;
                  uint64_t v215 = *(void *)(v36 + 48);
                  LOWORD(v220) = 0;
                  if (HIDWORD(__n) && __src && __dst)
                  {
                    memcpy(__dst, __src, HIDWORD(__n));
                    HIDWORD(__n) >>= 5;
                  }
                  uint64_t v37 = *(unsigned int *)(v36 + 32);
                  if ((int)v37 < 1) {
                    goto LABEL_338;
                  }
                  uint64_t v38 = 0;
                  long long v39 = 0;
                  unsigned int v40 = 0;
                  int v213 = *(_DWORD *)(a1 + 1324);
                  long long v41 = *(int **)(v36 + 24);
                  do
                  {
                    int v42 = v41[3];
                    if (v42 == 1) {
                      uint64_t v43 = v41;
                    }
                    else {
                      uint64_t v43 = v40;
                    }
                    if (v42 == 2)
                    {
                      uint64_t v43 = v40;
                      int v44 = v41;
                    }
                    else
                    {
                      int v44 = v39;
                    }
                    if (v42 == 3) {
                      uint64_t v38 = v41;
                    }
                    v41 += 78;
                    if (v42 != 3)
                    {
                      unsigned int v40 = v43;
                      long long v39 = v44;
                    }
                    --v37;
                  }
                  while (v37);
                  uint64_t v45 = v215;
                  if (!v40 || !v39 || !v38)
                  {
LABEL_338:
                    int v209 = critsec_Leave(*(void **)(a1 + 24));
                    if (v209 >= 0 || v8 <= -1) {
                      return v8;
                    }
                    else {
                      return v209;
                    }
                  }
                  int v46 = *(_DWORD *)(a1 + 1016);
                  if (v46 >= v40[11])
                  {
                    *(void *)(a1 + 1028) = 0;
                    if ((v10 & 0x80000000) != 0)
                    {
                      int v8 = v10;
                      goto LABEL_338;
                    }
                    BOOL v106 = 0;
                    LODWORD(v48) = 0;
                    int v8 = v10;
                    goto LABEL_324;
                  }
                  int v47 = 0;
                  LODWORD(v48) = 0;
                  uint64_t v211 = a1 + 1096;
                  int v8 = v10;
                  while (1)
                  {
                    if (*(_DWORD *)(a1 + 52) && *(_DWORD *)(a1 + 44) + v47 > v12)
                    {
LABEL_144:
                      *(void *)(a1 + 1028) = 0;
                      if ((v8 & 0x80000000) == 0)
                      {
                        if (v47)
                        {
                          int v8 = (*(uint64_t (**)(void, void, void, __n128))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 984), *(void *)(a1 + 992), (2 * v47), v35);
                          if (v8 < 0)
                          {
                            uint64_t v208 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_337:
                            log_OutPublic(v208, (uint64_t)"SYNTH_BET3", 56007, "%s%s%s%x", v102, v103, v104, v105, "stream");
                            goto LABEL_338;
                          }
                        }
                      }
                      BOOL v106 = v48 != 0;
                      if ((v8 & 0x80000000) == 0 && v48)
                      {
                        int v8 = (*(uint64_t (**)(void, void, void, __n128))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), (32 * v48), v35);
                        if ((v8 & 0x80000000) == 0)
                        {
                          BOOL v106 = 1;
                          goto LABEL_324;
                        }
                        uint64_t v208 = *(void *)(*(void *)(a1 + 16) + 32);
                        goto LABEL_337;
                      }
                      if (v8 < 0) {
                        goto LABEL_338;
                      }
LABEL_324:
                      if (*(_DWORD *)(a1 + 1016) < v40[11])
                      {
                        int v202 = 2;
                        goto LABEL_330;
                      }
                      int v8 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 952), *(void *)(a1 + 960), 8);
                      if (v8 < 0)
                      {
                        uint64_t v207 = *(void *)(*(void *)(a1 + 16) + 32);
                      }
                      else
                      {
                        *(_DWORD *)(a1 + 1016) = 0;
                        if (v221 <= 8) {
                          int v202 = 1;
                        }
                        else {
                          int v202 = 2;
                        }
LABEL_330:
                        *a5 = v202;
                        if (!v106) {
                          goto LABEL_338;
                        }
                        int v8 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 968), *(void *)(a1 + 976), (32 * v48));
                        if ((v8 & 0x80000000) == 0) {
                          goto LABEL_338;
                        }
                        uint64_t v207 = *(void *)(*(void *)(a1 + 16) + 32);
                      }
                      log_OutPublic(v207, (uint64_t)"SYNTH_BET3", 56006, "%s%s%s%x", v203, v204, v205, v206, "contentType");
                      goto LABEL_338;
                    }
                    unsigned __int16 v49 = (char *)__dst;
                    unsigned int v50 = HIDWORD(__n);
                    if (__dst) {
                      BOOL v51 = v48 >= HIDWORD(__n);
                    }
                    else {
                      BOOL v51 = 1;
                    }
                    int v217 = v47;
                    if (!v51)
                    {
                      unint64_t v48 = v48;
                      uint64_t v52 = (32 * v48) | 0x18;
                      do
                      {
                        if (*(_DWORD *)&v49[v52 - 12] > *(_DWORD *)(a1 + 1020)) {
                          break;
                        }
                        switch(*(_DWORD *)&v49[v52 - 24])
                        {
                          case 0x10:
                            critsec_Leave(*(void **)(a1 + 24));
                            uint64_t v53 = *(void *)(*(void *)(a1 + 16) + 40);
                            unsigned int v54 = *(_DWORD *)((char *)__dst + v52);
                            uint64_t v55 = "pitch";
                            goto LABEL_61;
                          case 0x11:
                            critsec_Leave(*(void **)(a1 + 24));
                            uint64_t v53 = *(void *)(*(void *)(a1 + 16) + 40);
                            unsigned int v54 = *(_DWORD *)((char *)__dst + v52);
                            uint64_t v55 = "timbre";
                            goto LABEL_61;
                          case 0x12:
                            critsec_Leave(*(void **)(a1 + 24));
                            uint64_t v53 = *(void *)(*(void *)(a1 + 16) + 40);
                            unsigned int v54 = *(_DWORD *)((char *)__dst + v52);
                            uint64_t v55 = "rate";
                            goto LABEL_61;
                          case 0x18:
                            critsec_Leave(*(void **)(a1 + 24));
                            uint64_t v53 = *(void *)(*(void *)(a1 + 16) + 40);
                            unsigned int v54 = *(_DWORD *)((char *)__dst + v52);
                            uint64_t v55 = "volume";
LABEL_61:
                            paramc_ParamSetUInt(v53, (uint64_t)v55, v54);
                            critsec_Enter(*(void **)(a1 + 24));
                            unsigned int v50 = HIDWORD(__n);
                            break;
                          default:
                            break;
                        }
                        unsigned __int16 v49 = (char *)__dst;
                        if (v48 < v50 && *(_DWORD *)((char *)__dst + v52 - 24) == 8)
                        {
                          int v56 = *(_DWORD *)(a1 + 1016);
                          *(_DWORD *)(a1 + 1028) = v56;
                          *(_DWORD *)(a1 + 1032) = *(_DWORD *)&v49[v52 + 24] + v56;
                        }
                        int v57 = &v49[v52];
                        *((_DWORD *)v57 - 3) = *(_DWORD *)(a1 + 1024);
                        *((_DWORD *)v57 - 2) = *(_DWORD *)(a1 + 44)
                                             * *(_DWORD *)&v49[v52 - 8]
                                             * *(unsigned __int16 *)(a1 + 1340)
                                             / 0x64;
                        ++v48;
                        if (!v49) {
                          break;
                        }
                        unsigned int v50 = HIDWORD(__n);
                        v52 += 32;
                      }
                      while (v48 < HIDWORD(__n));
                      int v46 = *(_DWORD *)(a1 + 1016);
                    }
                    unsigned int v226 = 0;
                    __int16 v212 = *(_WORD *)(a1 + 1340);
                    if (v46 >= *(_DWORD *)(a1 + 1028) && v46 <= *(_DWORD *)(a1 + 1032)) {
                      *(_WORD *)(a1 + 1340) = 100;
                    }
                    int v58 = *v40;
                    int v59 = *(unsigned __int8 *)(v45 + *v40);
                    if ((v59 & 4) != 0)
                    {
                      int v62 = *v39;
                      int v63 = v39[11];
                      if (*v39 >= v63)
                      {
                        int v62 = v63 - 1;
                        int *v39 = v63 - 1;
                      }
                      int v64 = exp_S7_25(2 * **(_DWORD **)(*((void *)v39 + 8) + 8 * v62), &v220);
                      uint64_t v65 = 1374389535 * (v64 >> (24 - v220)) * *(_DWORD *)(a1 + 1328);
                      int v60 = (v65 >> 37) + ((unint64_t)v65 >> 63);
                      ++*v39;
                      int v58 = *v40;
                      uint64_t v61 = *v40;
                      int v59 = *(unsigned __int8 *)(v45 + v61);
                    }
                    else
                    {
                      int v60 = 0;
                      uint64_t v61 = v58;
                    }
                    if ((v59 & 8) != 0)
                    {
                      int v67 = *v38;
                      int v68 = v38[11];
                      if (*v38 >= v68)
                      {
                        int v67 = v68 - 1;
                        *uint64_t v38 = v68 - 1;
                      }
                      int v69 = exp_S7_25(2 * **(_DWORD **)(*((void *)v38 + 8) + 8 * v67), &v220);
                      int v66 = *(_DWORD **)(a1 + 1056);
                      if (v66)
                      {
                        int v70 = v69 >> ~(__int16)v220;
                        if (v70)
                        {
                          int v71 = v66[1];
                          BOOL v72 = __OFSUB__(v70, v71);
                          int v73 = v70 - v71;
                          if (v73 < 0 != v72)
                          {
                            LODWORD(v66) = v66[3];
                          }
                          else if (v66[2] >= v70)
                          {
                            LODWORD(v66) = v66[3] + *v66 * v73;
                          }
                          else
                          {
                            LODWORD(v66) = v66[4];
                          }
                        }
                        else
                        {
                          LODWORD(v66) = 0;
                        }
                      }
                      ++*v38;
                      int v58 = *v40;
                      uint64_t v61 = *v40;
                      int v59 = *(unsigned __int8 *)(v45 + v61);
                    }
                    else
                    {
                      LODWORD(v66) = 0;
                    }
                    if ((~v59 & 0xC) != 0)
                    {
                      int v78 = 0;
                      *(void *)(a1 + 1332) = 0;
                    }
                    else
                    {
                      int v74 = v40[11];
                      int v75 = *(_DWORD *)(a1 + 1332) + 1;
                      *(_DWORD *)(a1 + 1332) = v75;
                      int v76 = *(_DWORD *)(a1 + 1336);
                      if (v76)
                      {
                        int v77 = v76 - 1;
                      }
                      else
                      {
                        BOOL v72 = __OFSUB__(v74, v58);
                        int v77 = v74 - v58;
                        if ((v77 < 0) ^ v72 | (v77 == 0))
                        {
                          int v77 = 0;
                        }
                        else
                        {
                          uint64_t v79 = 0;
                          uint64_t v80 = v45 + v61;
                          while ((~*(unsigned __int8 *)(v80 + v79) & 0xC) == 0)
                          {
                            if (v77 == ++v79) {
                              goto LABEL_101;
                            }
                          }
                          int v77 = v79;
                        }
                      }
LABEL_101:
                      *(_DWORD *)(a1 + 1336) = v77;
                      if (v77 >= v75) {
                        int v78 = v75;
                      }
                      else {
                        int v78 = v77;
                      }
                    }
                    if ((*(unsigned char *)(v45 + *v40) & 0xC) != 0xC)
                    {
                      int v60 = 0;
                      LODWORD(v66) = 0;
                    }
                    *(_DWORD *)(a1 + 1136) = v78;
                    *(_DWORD *)(a1 + 1140) = 0;
                    *(_DWORD *)(a1 + 1124) = v66;
                    *(_DWORD *)(a1 + 1120) = 0;
                    *(_DWORD *)(a1 + 1128) = (42949673 * (unint64_t)(*(unsigned __int16 *)(a1 + 1340) << 10)) >> 32;
                    MrccInput_AllocateData(v211, v40[10]);
                    *(_DWORD *)(a1 + 1116) = v60;
                    if (v213)
                    {
                      *(void *)(a1 + 1104) = *(void *)(*((void *)v40 + 8) + 8 * *v40);
                    }
                    else
                    {
                      int Data = MrccInput_AllocateData(v211, v40[10]);
                      if (Data < 0)
                      {
                        int v8 = Data;
                        goto LABEL_338;
                      }
                      uint64_t v82 = *(unsigned int *)(a1 + 1112);
                      if ((int)v82 >= 1)
                      {
                        int v83 = *(int **)(*((void *)v40 + 8) + 8 * *(int *)(a1 + 1016));
                        uint64_t v84 = *(unsigned int **)(a1 + 1104);
                        do
                        {
                          int v86 = *v83++;
                          unsigned int v85 = v86;
                          BOOL v87 = v86 < 0;
                          if (v86 < 0) {
                            unsigned int v85 = -v85;
                          }
                          unsigned int v88 = v85 + 14506 * (v85 >> 15) + ((14506 * (v85 & 0x7FFF) + 0x4000) >> 15);
                          if (v87) {
                            unsigned int v88 = -v88;
                          }
                          *v84++ = v88;
                          --v82;
                        }
                        while (v82);
                      }
                    }
                    int v8 = RccSyn__SynthesisOneFrame(a1 + 1048, &v226, &v222);
                    if (v8 < 0) {
                      goto LABEL_338;
                    }
                    v35.n128_f64[0] = RrInput_Reset(a1 + 1208);
                    int v46 = *(_DWORD *)(a1 + 1016);
                    if (v46 >= *(_DWORD *)(a1 + 1028) && v46 <= *(_DWORD *)(a1 + 1032)) {
                      *(_WORD *)(a1 + 1340) = v212;
                    }
                    unsigned int v89 = v226;
                    int v47 = v217;
                    if (!v226)
                    {
                      BOOL v98 = 0;
                      goto LABEL_141;
                    }
                    ++*(_DWORD *)(a1 + 1020);
                    *(_DWORD *)(a1 + 1024) += v89;
                    if (v89 + v217 <= v12) {
                      break;
                    }
                    if (v217)
                    {
                      int v90 = (*(uint64_t (**)(void, void, void, __n128))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 984), *(void *)(a1 + 992), (2 * v217), v35);
                      if (v90 < 0)
                      {
                        int v8 = v90;
LABEL_139:
                        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, "%s%s%s%x", v91, v92, v93, v94, "stream");
                        int v47 = 0;
                        BOOL v98 = *(_DWORD *)(a1 + 52) != 0;
                        goto LABEL_140;
                      }
                      unsigned int v89 = v226;
                    }
                    if (v89 <= v12) {
                      unsigned int v95 = v12;
                    }
                    else {
                      unsigned int v95 = v89;
                    }
                    if (!*(_DWORD *)(a1 + 52)) {
                      unsigned int v89 = v95;
                    }
                    int v8 = (*(uint64_t (**)(void, void, void **, void, __n128))(*(void *)(a1 + 32)
                                                                                            + 112))(*(void *)(a1 + 984), *(void *)(a1 + 992), &v223, 2 * v89, v35);
                    if (v8 < 0) {
                      goto LABEL_139;
                    }
                    int v47 = 0;
                    int v96 = 0;
                    unsigned int v97 = 0;
                    BOOL v98 = *(_DWORD *)(a1 + 52) != 0;
                    unsigned int v89 = v226;
                    uint64_t v99 = (__int16 *)v223;
                    if (v226) {
                      goto LABEL_135;
                    }
LABEL_137:
                    vol_ScaleToLevel(&v99[v96], v97, *(unsigned __int16 *)(a1 + 60));
                    int v47 = v226 + v96;
                    uint64_t v45 = v215;
LABEL_140:
                    ++*v40;
                    int v46 = *(_DWORD *)(a1 + 1016) + 1;
                    *(_DWORD *)(a1 + 1016) = v46;
LABEL_141:
                    if (v8 < 0 || v98 || v46 >= v40[11]) {
                      goto LABEL_144;
                    }
                  }
                  BOOL v98 = 0;
                  uint64_t v99 = (__int16 *)v223;
LABEL_135:
                  uint64_t v100 = 0;
                  int v96 = v47;
                  uint64_t v101 = v222;
                  unsigned int v97 = v89;
                  do
                  {
                    v99[(v96 + v100)] = *(_WORD *)(v101 + 2 * v100);
                    ++v100;
                  }
                  while (v89 != v100);
                  goto LABEL_137;
                }
                goto LABEL_219;
              }
LABEL_195:
              uint64_t v10 = v29;
              uint64_t v132 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_220:
              log_OutPublic(v132, (uint64_t)"SYNTH_BET3", 56007, "%s%s%s%x", v30, v31, v32, v33, "stream");
              return v10;
            }
LABEL_193:
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, "%s%s%s%x", v25, v26, v27, v28, "contentType");
            return v10;
          }
LABEL_186:
          uint64_t v10 = v20;
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, "%s%s%s%x", v21, v22, v23, v24, "contentType");
          return v10;
        }
        if (__n)
        {
          if (*(void *)(a1 + 1000))
          {
            uint64_t v10 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 968), *(void *)(a1 + 976), &__src, (char *)&__n + 4);
            if ((v10 & 0x80000000) != 0)
            {
              log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, "%s%s%s%x", v107, v108, v109, v110, "contentType");
            }
            else if (HIDWORD(__n))
            {
              uint64_t v10 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), &__dst);
              if ((v10 & 0x80000000) != 0) {
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, "%s%s%s%x", v111, v112, v113, v114, "stream");
              }
            }
            if ((v10 & 0x80000000) == 0 && HIDWORD(__n) && __src && __dst)
            {
              memcpy(__dst, __src, HIDWORD(__n));
              unsigned int v133 = HIDWORD(__n);
              HIDWORD(__n) >>= 5;
              if (v133 >= 0x20)
              {
                uint64_t v134 = 0;
                unint64_t v135 = 0;
                int v136 = *(_DWORD *)(a1 + 1024);
                v137 = (char *)__dst;
                do
                {
                  v138 = &v137[v134];
                  *((_DWORD *)v138 + 3) = v136;
                  *((_DWORD *)v138 + 4) = 0;
                  ++v135;
                  v134 += 32;
                }
                while (v135 < HIDWORD(__n));
                goto LABEL_216;
              }
              goto LABEL_211;
            }
LABEL_212:
            if ((v10 & 0x80000000) != 0) {
              return v10;
            }
            return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 128), *(void *)(a1 + 32));
          }
          return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 128), *(void *)(a1 + 32));
        }
        goto LABEL_194;
      }
LABEL_185:
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56004, "%s%x", v16, v17, v18, v19, "lhError");
      return v10;
    }
    return 2164269064;
  }
  size_t __n = 0;
  unsigned int v226 = 0;
  __dst = 0;
  __src = 0;
  uint64_t v222 = 0;
  uint64_t v223 = 0;
  if ((safeh_HandleCheck(a1, a2, 9346, 1344) & 0x80000000) != 0) {
    return 2164269064;
  }
  *a5 = 1;
  unsigned int v13 = *(_DWORD *)(a1 + 40);
  unsigned int v14 = *(_DWORD *)(a1 + 44);
  if (v13 >= v14)
  {
    if (v14) {
      v14 *= v13 / v14;
    }
    else {
      unsigned int v14 = *(_DWORD *)(a1 + 40);
    }
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, char *, unsigned int *))(*(void *)(a1 + 32) + 144))(*(void *)(a1 + 952), *(void *)(a1 + 960), (char *)&__n + 4, &v226);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_185;
  }
  if (!HIDWORD(__n))
  {
    if (v226)
    {
      if (*(void *)(a1 + 1000))
      {
        uint64_t v10 = (*(uint64_t (**)(void, void, void **, size_t *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 968), *(void *)(a1 + 976), &__dst, &__n);
        if ((v10 & 0x80000000) != 0)
        {
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, "%s%s%s%x", v124, v125, v126, v127, "contentType");
        }
        else if (__n)
        {
          uint64_t v10 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), &v223);
          if ((v10 & 0x80000000) != 0) {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, "%s%s%s%x", v128, v129, v130, v131, "stream");
          }
        }
        if ((v10 & 0x80000000) == 0 && __n && __dst && v223)
        {
          memcpy(v223, __dst, __n);
          unsigned int v139 = __n;
          LODWORD(__n) = __n >> 5;
          if (v139 >= 0x20)
          {
            uint64_t v134 = 0;
            unint64_t v140 = 0;
            int v141 = *(_DWORD *)(a1 + 1024);
            v142 = (char *)v223;
            do
            {
              v143 = &v142[v134];
              *((_DWORD *)v143 + 3) = v141;
              *((_DWORD *)v143 + 4) = 0;
              ++v140;
              v134 += 32;
            }
            while (v140 < __n);
LABEL_216:
            uint64_t v34 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), v134);
            if ((v34 & 0x80000000) == 0)
            {
              uint64_t v144 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 968), *(void *)(a1 + 976), v134);
              if ((v144 & 0x80000000) != 0)
              {
                uint64_t v10 = v144;
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56006, "%s%s%s%x", v145, v146, v147, v148, "contentType");
                return v10;
              }
              return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 128), *(void *)(a1 + 32));
            }
LABEL_219:
            uint64_t v10 = v34;
            uint64_t v132 = *(void *)(*(void *)(a1 + 16) + 32);
            goto LABEL_220;
          }
LABEL_211:
          uint64_t v134 = 0;
          goto LABEL_216;
        }
        goto LABEL_212;
      }
      return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 128), *(void *)(a1 + 32));
    }
LABEL_194:
    *a5 = 0;
    return v10;
  }
  uint64_t v20 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 952), *(void *)(a1 + 960), &__src, (char *)&__n + 4);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_186;
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, void **, size_t *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 968), *(void *)(a1 + 976), &__dst, &__n);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_193;
  }
  if (HIDWORD(__n) < 8) {
    return v10;
  }
  uint64_t v29 = (*(uint64_t (**)(void, void, uint64_t *, void))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 984), *(void *)(a1 + 992), &v222, 2 * v14);
  if ((v29 & 0x80000000) != 0) {
    goto LABEL_195;
  }
  if (__n)
  {
    uint64_t v34 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), &v223);
    if ((v34 & 0x80000000) != 0) {
      goto LABEL_219;
    }
  }
  uint64_t v10 = critsec_Enter(*(void **)(a1 + 24));
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v115 = *(void *)__src;
  uint64_t v221 = 0;
  unsigned int v220 = 0;
  __int16 v219 = 0;
  uint64_t v216 = *(void *)(v115 + 48);
  if (__n && __dst && v223)
  {
    memcpy(v223, __dst, __n);
    LODWORD(__n) = __n >> 5;
  }
  uint64_t v116 = *(unsigned int *)(v115 + 32);
  if ((int)v116 < 1)
  {
    v119 = 0;
    v118 = 0;
    v117 = 0;
  }
  else
  {
    v117 = 0;
    v118 = 0;
    v119 = 0;
    v120 = *(int **)(v115 + 24);
    do
    {
      int v121 = v120[3];
      if (v121 == 1) {
        v122 = v120;
      }
      else {
        v122 = v119;
      }
      if (v121 == 2)
      {
        v122 = v119;
        v123 = v120;
      }
      else
      {
        v123 = v118;
      }
      if (v121 == 3) {
        v117 = v120;
      }
      v120 += 78;
      if (v121 != 3)
      {
        v119 = v122;
        v118 = v123;
      }
      --v116;
    }
    while (v116);
  }
  if (v117) {
    BOOL v149 = v118 == 0;
  }
  else {
    BOOL v149 = 1;
  }
  if (v149 || v119 == 0) {
    int v151 = -2130698234;
  }
  else {
    int v151 = v10;
  }
  if (v151 < 0)
  {
    LODWORD(v10) = v151;
    goto LABEL_317;
  }
  if (*(_DWORD *)(a1 + 1016) >= v119[11])
  {
    BOOL v192 = 0;
    LODWORD(v153) = 0;
    goto LABEL_302;
  }
  unsigned int v152 = 0;
  LODWORD(v153) = 0;
  while (!*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 44) + v152 <= v14)
  {
    uint64_t v154 = (char *)v223;
    if (v223) {
      BOOL v155 = v153 >= __n;
    }
    else {
      BOOL v155 = 1;
    }
    if (!v155)
    {
      unsigned int v156 = v152;
      unint64_t v153 = v153;
      uint64_t v157 = (32 * v153) | 0x18;
      do
      {
        uint64_t v158 = &v154[v157];
        if (*((_DWORD *)v158 - 3) > *(_DWORD *)(a1 + 1020)) {
          break;
        }
        switch(*((_DWORD *)v158 - 6))
        {
          case 0x10:
            critsec_Leave(*(void **)(a1 + 24));
            uint64_t v159 = *(void *)(*(void *)(a1 + 16) + 40);
            unsigned int v160 = *(_DWORD *)((char *)v223 + v157);
            uint64_t v161 = "pitch";
            goto LABEL_248;
          case 0x11:
            critsec_Leave(*(void **)(a1 + 24));
            uint64_t v159 = *(void *)(*(void *)(a1 + 16) + 40);
            unsigned int v160 = *(_DWORD *)((char *)v223 + v157);
            uint64_t v161 = "timbre";
            goto LABEL_248;
          case 0x12:
            critsec_Leave(*(void **)(a1 + 24));
            uint64_t v159 = *(void *)(*(void *)(a1 + 16) + 40);
            unsigned int v160 = *(_DWORD *)((char *)v223 + v157);
            uint64_t v161 = "rate";
            goto LABEL_248;
          case 0x18:
            critsec_Leave(*(void **)(a1 + 24));
            uint64_t v159 = *(void *)(*(void *)(a1 + 16) + 40);
            unsigned int v160 = *(_DWORD *)((char *)v223 + v157);
            uint64_t v161 = "volume";
LABEL_248:
            paramc_ParamSetUInt(v159, (uint64_t)v161, v160);
            critsec_Enter(*(void **)(a1 + 24));
            break;
          default:
            break;
        }
        uint64_t v154 = (char *)v223;
        v162 = (char *)v223 + v157;
        *((_DWORD *)v162 - 3) = *(_DWORD *)(a1 + 1024);
        *((_DWORD *)v162 - 2) *= (*(_DWORD *)(*(void *)(a1 + 64) + 40) * *(_DWORD *)(a1 + 44)) >> 14;
        ++v153;
        if (!v154) {
          break;
        }
        v157 += 32;
      }
      while (v153 < __n);
      unsigned int v152 = v156;
    }
    unsigned int v220 = 0;
    char v163 = *(unsigned char *)(v216 + *v119);
    unsigned int v218 = v152;
    if ((v163 & 4) != 0)
    {
      int v165 = exp_S7_25(2 * **(_DWORD **)(*((void *)v118 + 8) + 8 * *v118), &v219);
      int v164 = v165 >> (25 - v219);
      ++*v118;
      char v163 = *(unsigned char *)(v216 + *v119);
    }
    else
    {
      LOWORD(v164) = 0;
    }
    if ((v163 & 8) != 0)
    {
      int v167 = exp_S7_25(2 * **(_DWORD **)(*((void *)v117 + 8) + 8 * *v117), &v219);
      int v166 = v167 >> ~(_BYTE)v219;
      ++*v117;
    }
    else
    {
      LOWORD(v166) = 0;
    }
    uint64_t v168 = *(void *)(a1 + 64);
    if ((*(_DWORD *)(v168 + 120) & 0x80000000) == 0)
    {
      uint64_t v169 = 0;
      uint64_t v170 = *(void *)(*((void *)v119 + 8) + 8 * *(int *)(a1 + 1016));
      do
      {
        *((_DWORD *)v228 + v169) = *(int *)(v170 + 4 * v169) >> 2;
        uint64_t v171 = *(int *)(v168 + 120);
        BOOL v87 = v169++ < v171;
      }
      while (v87);
      if ((v171 & 0x80000000) == 0)
      {
        uint64_t v172 = *(void *)(a1 + 72);
        if (v172)
        {
          uint64_t v173 = 0;
          do
          {
            *((_DWORD *)v228 + v173) += *(_DWORD *)(v172 + 4 * v173);
            BOOL v87 = v173++ < *(int *)(v168 + 120);
          }
          while (v87);
        }
      }
    }
    LODWORD(v10) = BET3FXD__MFVSyn__SynthesisOneFrame(v168, (unsigned __int16)v164, v228, v166, (int *)&v220, &v221);
    BOOL v174 = 0;
    if ((v10 & 0x80000000) != 0)
    {
      unsigned int v152 = v218;
      goto LABEL_287;
    }
    unsigned int v175 = v220;
    unsigned int v152 = v218;
    if (!v220) {
      goto LABEL_287;
    }
    ++*(_DWORD *)(a1 + 1020);
    *(_DWORD *)(a1 + 1024) += v175;
    if (v175 + v218 <= v14)
    {
      BOOL v214 = 0;
      uint64_t v184 = v222;
LABEL_281:
      unsigned int v185 = v152;
      uint64_t v186 = 0;
      unsigned int v182 = v185;
      uint64_t v187 = v221;
      unsigned int v183 = v175;
      do
      {
        *(_WORD *)(v184 + 2 * (v182 + v186)) = *(_WORD *)(v187 + 2 * v186);
        ++v186;
      }
      while (v175 != v186);
      goto LABEL_283;
    }
    if (v218)
    {
      int v176 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 984), *(void *)(a1 + 992), 2 * v218);
      if (v176 < 0)
      {
        LODWORD(v10) = v176;
LABEL_285:
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, "%s%s%s%x", v177, v178, v179, v180, "stream");
        unsigned int v152 = 0;
        BOOL v174 = *(_DWORD *)(a1 + 52) != 0;
        goto LABEL_286;
      }
      unsigned int v175 = v220;
    }
    if (v175 <= v14) {
      unsigned int v181 = v14;
    }
    else {
      unsigned int v181 = v175;
    }
    if (!*(_DWORD *)(a1 + 52)) {
      unsigned int v175 = v181;
    }
    LODWORD(v10) = (*(uint64_t (**)(void, void, uint64_t *, void))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 984), *(void *)(a1 + 992), &v222, 2 * v175);
    if ((v10 & 0x80000000) != 0) {
      goto LABEL_285;
    }
    unsigned int v152 = 0;
    unsigned int v182 = 0;
    unsigned int v183 = 0;
    BOOL v214 = *(_DWORD *)(a1 + 52) != 0;
    unsigned int v175 = v220;
    uint64_t v184 = v222;
    if (v220) {
      goto LABEL_281;
    }
LABEL_283:
    vol_ScaleToLevel((__int16 *)(v184 + 2 * v182), v183, *(unsigned __int16 *)(a1 + 60));
    unsigned int v152 = v220 + v182;
    BOOL v174 = v214;
LABEL_286:
    ++*v119;
    ++*(_DWORD *)(a1 + 1016);
LABEL_287:
    if ((v10 & 0x80000000) != 0 || v174 || *(_DWORD *)(a1 + 1016) >= v119[11]) {
      break;
    }
  }
  if ((v10 & 0x80000000) == 0)
  {
    if (v152)
    {
      LODWORD(v10) = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 984), *(void *)(a1 + 992), 2 * v152);
      if ((v10 & 0x80000000) != 0)
      {
        uint64_t v199 = *(void *)(*(void *)(a1 + 16) + 32);
        goto LABEL_316;
      }
    }
  }
  BOOL v192 = v153 != 0;
  if ((v10 & 0x80000000) != 0 || !v153)
  {
    if ((v10 & 0x80000000) != 0) {
      goto LABEL_317;
    }
LABEL_302:
    if (*(_DWORD *)(a1 + 1016) >= v119[11])
    {
      LODWORD(v10) = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 952), *(void *)(a1 + 960), 8);
      if ((v10 & 0x80000000) != 0)
      {
        uint64_t v198 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_312:
        log_OutPublic(v198, (uint64_t)"SYNTH_BET3", 56006, "%s%s%s%x", v194, v195, v196, v197, "contentType");
        goto LABEL_317;
      }
      *(_DWORD *)(a1 + 1016) = 0;
      if (HIDWORD(__n) <= 8) {
        int v193 = 1;
      }
      else {
        int v193 = 2;
      }
    }
    else
    {
      int v193 = 2;
    }
    *a5 = v193;
    if (!v192) {
      goto LABEL_317;
    }
    LODWORD(v10) = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 968), *(void *)(a1 + 976), (32 * v153));
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_317;
    }
    uint64_t v198 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_312;
  }
  LODWORD(v10) = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), (32 * v153));
  if ((v10 & 0x80000000) == 0)
  {
    BOOL v192 = 1;
    goto LABEL_302;
  }
  uint64_t v199 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_316:
  log_OutPublic(v199, (uint64_t)"SYNTH_BET3", 56007, "%s%s%s%x", v188, v189, v190, v191, "stream");
LABEL_317:
  int v200 = critsec_Leave(*(void **)(a1 + 24));
  if (v200 >= 0 || (int)v10 <= -1) {
    return v10;
  }
  else {
    return v200;
  }
}

uint64_t synth_bet3_ProcessEnd_0(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 9346, 1344) & 0x80000000) != 0) {
    return 2164269064;
  }
  *(void *)(a1 + 1020) = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  return synstrmaux_CloseStreams((_WORD *)(a1 + 128), v3);
}

uint64_t synth_bet3_loc_ParamCheckChange_0(int a1, char *__s1, const char *a3, _DWORD *a4)
{
  if (!strcmp(__s1, "audiooutputbufsamples"))
  {
    if ((int)LH_atoi(a3) <= 0) {
      uint64_t result = 2164269071;
    }
    else {
      uint64_t result = 0;
    }
  }
  else if (!strcmp(__s1, "volume"))
  {
    if (LH_atoi(a3) <= 0x64) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 2164269071;
    }
  }
  else
  {
    if (!strcmp(__s1, "rate"))
    {
      BOOL v8 = __CFADD__(LH_atoi(a3) - 401, 351);
    }
    else
    {
      if (!strcmp(__s1, "ratewpm"))
      {
        uint64_t result = 2164269057;
        goto LABEL_19;
      }
      if (strcmp(__s1, "pitch"))
      {
        uint64_t result = 0;
        goto LABEL_19;
      }
      BOOL v8 = __CFADD__(LH_atoi(a3) - 201, 151);
    }
    if (v8) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 2164269071;
    }
  }
LABEL_19:
  *a4 = (int)result >= 0;
  return result;
}

uint64_t synth_bet3_loc_ParamLearnChange_0(uint64_t a1, char *__s1, const char *a3)
{
  if (strcmp(__s1, "audiooutputbufsamples")
    && strcmp(__s1, "volume")
    && strcmp(__s1, "rate")
    && strcmp(__s1, "rate_baseline")
    && strcmp(__s1, "pitch_baseline")
    && strcmp(__s1, "ratewpm")
    && strcmp(__s1, "pitch"))
  {
    return 0;
  }
  unsigned int v7 = LH_atoi(a3);
  return synth_bet3_loc_ParamSet_0(a1, __s1, v7);
}

uint64_t synth_bet3_loc_ParamGetListen_0(uint64_t a1, unsigned char *a2, signed int a3, signed int a4, unsigned int a5, long long *a6, int *a7)
{
  if ((paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)a2, a7) & 0x80000000) != 0
    || (a5 = a3, *a7 < a3)
    || (a5 = a4, *a7 > a4))
  {
    uint64_t v14 = paramc_ParamSetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)a2, a5);
    *a7 = a5;
    if ((v14 & 0x80000000) != 0)
    {
      uint64_t v20 = v14;
      uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 32);
      uint64_t v25 = "parameter";
      uint64_t v23 = "%s%s";
      uint64_t v22 = 56009;
      goto LABEL_8;
    }
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 16) + 40);
  long long v26 = *a6;
  uint64_t v27 = *((void *)a6 + 2);
  uint64_t v20 = paramc_ListenerAdd(v19, a2, &v26);
  if ((v20 & 0x80000000) != 0)
  {
    uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 32);
    uint64_t v22 = 56010;
    uint64_t v23 = 0;
LABEL_8:
    log_OutPublic(v21, (uint64_t)"SYNTH_BET3", v22, v23, v15, v16, v17, v18, v25);
  }
  return v20;
}

uint64_t synth_bet3_loc_SynthInit_MRCC(uint64_t a1)
{
  uint64_t v19 = 0;
  __s1 = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 1332) = 0;
  *(_WORD *)(a1 + 1340) = 100;
  uint64_t v3 = a1 + 1048;
  RccSyn__deinit_Synthesis(a1 + 1048);
  int v22 = 0;
  uint64_t v21 = 0;
  uint64_t inited = paramc_ParamGet(*(void *)(v2 + 40), (uint64_t)"mrcc_synthparam_ref_ptr", &v21, &v22);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v5 = *v21;
    *(_DWORD *)(v5 + 128) = 4000;
    *(_OWORD *)(v5 + 112) = xmmword_20D69FD90;
    *(void *)(a1 + 1056) = v5 + 112;
    *(void *)(a1 + 1320) = 0;
    uint64_t inited = RccSyn__init_Synthesis(v2, v3, (_DWORD *)v5);
    if ((inited & 0x80000000) == 0)
    {
      int v6 = *(_DWORD *)(v5 + 16);
      if (v6 == 22000)
      {
        int v6 = 22050;
        *(_DWORD *)(v5 + 16) = 22050;
      }
      *(_DWORD *)(a1 + 48) = v6;
      BOOL v7 = (paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
        && strcmp(__s1, "bet3") == 0;
      *(_DWORD *)(a1 + 52) = v7;
      uint64_t Int = paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"bet2voiceframesize", (int *)&v19);
      if ((Int & 0x80000000) != 0)
      {
        uint64_t Str = Int;
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56008, "%s%s", v9, v10, v11, v12, "parameter");
        return Str;
      }
      *(_DWORD *)(a1 + 44) = (int)v19 * *(_DWORD *)(a1 + 48) / 0x3E8u;
      uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicevol", &__s1);
      if ((Str & 0x80000000) != 0 || !__s1 || !*__s1)
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 26011, "%s%s", v13, v14, v15, v16, "parameter");
        return Str;
      }
      *(_DWORD *)(a1 + 56) = LH_atoi(__s1);
      paramc_ParamRelease(*(void *)(v2 + 40));
      uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"volume", (int *)&v19 + 1);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t inited = synth_bet3_loc_ParamSet_0(a1, "volume", HIDWORD(v19));
        if ((inited & 0x80000000) == 0)
        {
          uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", (int *)&v19 + 1);
          if ((inited & 0x80000000) == 0)
          {
            uint64_t inited = synth_bet3_loc_ParamSet_0(a1, "rate", HIDWORD(v19));
            if ((inited & 0x80000000) == 0)
            {
              uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate_baseline", (int *)&v19 + 1);
              if ((inited & 0x80000000) == 0)
              {
                uint64_t inited = synth_bet3_loc_ParamSet_0(a1, "rate_baseline", HIDWORD(v19));
                if ((inited & 0x80000000) == 0)
                {
                  uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch_baseline", (int *)&v19 + 1);
                  if ((inited & 0x80000000) == 0)
                  {
                    uint64_t inited = synth_bet3_loc_ParamSet_0(a1, "pitch_baseline", HIDWORD(v19));
                    if ((inited & 0x80000000) == 0)
                    {
                      uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", (int *)&v19 + 1);
                      if ((inited & 0x80000000) == 0) {
                        return synth_bet3_loc_ParamSet_0(a1, "pitch", HIDWORD(v19));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return inited;
}

uint64_t synth_bet3_loc_SynthInit_MLSA_0(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v44 = 0;
  __s1 = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v43 = 0;
  unsigned int v40 = 0;
  uint64_t v38 = 0;
  long long v39 = 0;
  uint64_t Int = paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"frequencyhz", (int *)&v44 + 1);
  if ((Int & 0x80000000) != 0)
  {
    uint64_t Str = Int;
    uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_37:
    log_OutPublic(v11, (uint64_t)"SYNTH_BET3", 56008, "%s%s", v4, v5, v6, v7, "parameter");
    return Str;
  }
  BOOL v8 = (uint64_t *)(a1 + 64);
  MFVSyn__denit__MVF_Synthesis((void **)(a1 + 64));
  *(_DWORD *)(a1 + 48) = HIDWORD(v44);
  BOOL v9 = (paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
    && strcmp(__s1, "bet3") == 0;
  *(_DWORD *)(a1 + 52) = v9;
  HIDWORD(v41[0]) = 0;
  uint64_t v42 = 0;
  v41[1] = xmmword_20D69FDA0;
  LODWORD(v41[0]) = wave_t__convertFromF0ToTp_SR(0xAF00u, SHIDWORD(v44)) >> 6;
  *(void *)((char *)v41 + 4) = wave_t__convertFromF0ToTp_SR(0xA00u, SHIDWORD(v44)) >> 6;
  uint64_t v12 = paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"bet2voiceframesize", (int *)&v43 + 1);
  if ((v12 & 0x80000000) != 0)
  {
    uint64_t Str = v12;
    uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_37;
  }
  *(_DWORD *)(a1 + 44) = HIDWORD(v43) * *(_DWORD *)(a1 + 48) / 0x3E8u;
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicevol", &__s1);
  if ((Str & 0x80000000) != 0
    || !__s1
    || !*__s1
    || (*(_DWORD *)(a1 + 56) = LH_atoi(__s1),
        paramc_ParamRelease(*(void *)(v2 + 40)),
        uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicemvfboost", &__s1),
        (Str & 0x80000000) != 0)
    || !__s1
    || !*__s1)
  {
    uint64_t v27 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_35:
    log_OutPublic(v27, (uint64_t)"SYNTH_BET3", 26011, "%s%s", v13, v14, v15, v16, "parameter");
    return Str;
  }
  unsigned int v17 = LH_atoi(__s1);
  paramc_ParamRelease(*(void *)(v2 + 40));
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicealpha", &__s1);
  if ((Str & 0x80000000) != 0 || !__s1 || !*__s1)
  {
    uint64_t v27 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_35;
  }
  int v18 = LH_atoi(__s1);
  paramc_ParamRelease(*(void *)(v2 + 40));
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicevuvrelamp", &__s1);
  if ((Str & 0x80000000) != 0 || !__s1 || !*__s1)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_37;
  }
  unsigned int v19 = LH_atoi(__s1);
  paramc_ParamRelease(*(void *)(v2 + 40));
  uint64_t v20 = paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"bet2voiceorder", (int *)&v43);
  if ((v20 & 0x80000000) != 0
    || (uint64_t v20 = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicevsynthinit", &v39), (v20 & 0x80000000) != 0))
  {
    uint64_t Str = v20;
    uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_37;
  }
  int v21 = 1;
  if ((paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2cpupower", &__s1) & 0x80000000) == 0 && __s1 && *__s1)
  {
    unsigned int v22 = LH_atoi(__s1);
    if (v22 >= 5) {
      int v21 = 1;
    }
    else {
      int v21 = v22;
    }
    paramc_ParamRelease(*(void *)(v2 + 40));
  }
  if (!paramc_ParamGet(*(void *)(v2 + 40), (uint64_t)"bet3cepstralequalizer", (void *)(a1 + 72), &v40)
    && v43 + 1 != v40 >> 2)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56008, "%s%s", v23, v24, v25, v26, "parameter");
    return 0;
  }
  strcpy(__s, "synth");
  if ((paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicequality", &__s1) & 0x80000000) == 0 && __s1 && *__s1)
  {
    __strcat_chk();
    __strcat_chk();
    paramc_ParamRelease(*(void *)(v2 + 40));
  }
  else
  {
    __strcat_chk();
  }
  __strcat_chk();
  __strcat_chk();
  size_t v29 = strlen(__s);
  LH_itoa(SHIDWORD(v44) / 1000, &__s[v29], 0xAu);
  uint64_t v30 = ssftriff_reader_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), 0, __s, "HMEX", 1031, (uint64_t *)&v38);
  if ((v30 & 0x80000000) != 0) {
    return v30;
  }
  uint64_t Str = BET3FXD__MFVSyn__init__MVF_Synthesis((uint64_t *)(a1 + 64), *(void *)(a1 + 16), v41, (uint64_t)v38, SHIDWORD(v43), v43, v18, HIDWORD(v44), v21, v39);
  if ((Str & 0x80000000) == 0)
  {
    if (!v38 || (uint64_t Str = ssftriff_reader_ObjClose(v38, v31, v32, v33, v34, v35, v36, v37), (Str & 0x80000000) == 0))
    {
      if (MFVSyn__setRelativeUVBoost((_DWORD *)*v8, v19)) {
        LODWORD(Str) = -2130698240;
      }
      if ((Str & 0x80000000) == 0 && BET3FXD__MFVSyn__setMVFBoost(*v8, v17)) {
        LODWORD(Str) = -2130698240;
      }
      uint64_t Str = BET3FXD__MFVSyn__setVolumeBoost(*(_DWORD **)(a1 + 64), *(_DWORD *)(a1 + 56))
          ? 2164269056
          : Str;
      if ((Str & 0x80000000) == 0)
      {
        uint64_t v30 = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"volume", (int *)&v44);
        if ((v30 & 0x80000000) == 0)
        {
          uint64_t v30 = synth_bet3_loc_ParamSet_0(a1, "volume", v44);
          if ((v30 & 0x80000000) == 0)
          {
            uint64_t v30 = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate_baseline", (int *)&v44);
            if ((v30 & 0x80000000) == 0)
            {
              uint64_t v30 = synth_bet3_loc_ParamSet_0(a1, "rate_baseline", v44);
              if ((v30 & 0x80000000) == 0)
              {
                uint64_t v30 = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", (int *)&v44);
                if ((v30 & 0x80000000) == 0)
                {
                  uint64_t v30 = synth_bet3_loc_ParamSet_0(a1, "rate", v44);
                  if ((v30 & 0x80000000) == 0)
                  {
                    uint64_t v30 = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch_baseline", (int *)&v44);
                    if ((v30 & 0x80000000) == 0)
                    {
                      uint64_t v30 = synth_bet3_loc_ParamSet_0(a1, "pitch_baseline", v44);
                      if ((v30 & 0x80000000) == 0)
                      {
                        uint64_t v30 = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", (int *)&v44);
                        if ((v30 & 0x80000000) == 0) {
                          return synth_bet3_loc_ParamSet_0(a1, "pitch", v44);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return v30;
      }
    }
  }
  return Str;
}

uint64_t synth_bet3_loc_ParamSet_0(uint64_t a1, const char *a2, unsigned int a3)
{
  if (!strcmp(a2, "audiooutputbufsamples"))
  {
    uint64_t v6 = 0;
    if (a3 <= 1) {
      int v15 = 1;
    }
    else {
      int v15 = a3;
    }
    *(_DWORD *)(a1 + 40) = v15;
  }
  else
  {
    uint64_t v6 = critsec_Enter(*(void **)(a1 + 24));
    if ((v6 & 0x80000000) == 0)
    {
      if (!strcmp(a2, "volume"))
      {
        if (a3 <= 0x64)
        {
          *(_WORD *)(a1 + 60) = a3;
          goto LABEL_23;
        }
      }
      else if (!strcmp(a2, "rate_baseline"))
      {
        if (a3 - 401 >= 0xFFFFFEA1)
        {
          unsigned int v26 = 0;
          *(_DWORD *)(a1 + 1040) = a3;
          uint64_t v16 = "rate";
          paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", (int *)&v26);
          uint64_t v17 = v26;
          goto LABEL_22;
        }
      }
      else
      {
        if (strcmp(a2, "rate"))
        {
          if (!strcmp(a2, "ratewpm"))
          {
            uint64_t v11 = 2164269057;
            goto LABEL_27;
          }
          if (strcmp(a2, "pitch_baseline"))
          {
            if (!strcmp(a2, "pitch"))
            {
              uint64_t v7 = MapProsodyValue_Scaling(50, 100, 200, *(_DWORD *)(a1 + 1044), a3);
              uint64_t v11 = 2164269071;
              if ((v7 - 201) < 0xFFFFFF69) {
                goto LABEL_27;
              }
              if (*(_DWORD *)(a1 + 52))
              {
                int v12 = v7;
                log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 3, 0, (uint64_t)"Set pitch %d (synth %d)", v8, v9, v10, v7);
                int v13 = *(_DWORD *)(a1 + 1036);
                if (v13 != 1)
                {
                  uint64_t v11 = v6;
                  if (!v13)
                  {
                    int v14 = BET3FXD__MFVSyn__setPitchLevelPercent(*(void *)(a1 + 64), v12);
                    goto LABEL_35;
                  }
                  goto LABEL_27;
                }
                *(_DWORD *)(a1 + 1328) = v12;
              }
            }
            goto LABEL_23;
          }
          uint64_t v11 = 2164269071;
          if (a3 - 201 < 0xFFFFFF69) {
            goto LABEL_27;
          }
          unsigned int v25 = 0;
          *(_DWORD *)(a1 + 1044) = a3;
          uint64_t v16 = "pitch";
          paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", (int *)&v25);
          uint64_t v17 = v25;
LABEL_22:
          synth_bet3_loc_ParamSet_0(a1, v16, v17);
          goto LABEL_23;
        }
        uint64_t v18 = MapProsodyValue_Scaling(50, 100, 400, *(_DWORD *)(a1 + 1040), a3);
        if (v18)
        {
          int v22 = ((int)v18 + 9999) / (int)v18;
          if (((v22 << 16) - 13107201) >= 0xFF50FFFF)
          {
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 3, 0, (uint64_t)"Set rate %d", v19, v20, v21, v18);
            int v24 = *(_DWORD *)(a1 + 1036);
            if (v24 != 1)
            {
              uint64_t v11 = v6;
              if (!v24)
              {
                int v14 = BET3FXD__MFVSyn__setRate(*(void *)(a1 + 64), (__int16)v22);
LABEL_35:
                if (v14) {
                  uint64_t v11 = 2164269071;
                }
                else {
                  uint64_t v11 = v6;
                }
              }
LABEL_27:
              critsec_Leave(*(void **)(a1 + 24));
              return v11;
            }
            uint64_t v11 = 2164269071;
            if ((unsigned __int16)v22 - 25 > 0xAF) {
              goto LABEL_27;
            }
            *(_WORD *)(a1 + 1340) = v22;
LABEL_23:
            uint64_t v11 = v6;
            goto LABEL_27;
          }
        }
      }
      uint64_t v11 = 2164269071;
      goto LABEL_27;
    }
  }
  return v6;
}

unsigned int *rand_num_qs(unsigned int *result, _WORD *a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    unsigned int v4 = *result;
    uint64_t v5 = a4;
    do
    {
      unsigned int v6 = ((1101463552 * HIWORD(v4)) & 0x7FFF0000)
         + 16807 * (unsigned __int16)v4
         + ((16807 * HIWORD(v4)) >> 15);
      unsigned int v4 = (v6 + (v6 >> 31)) & 0x7FFFFFFF;
      *a2++ = (((int)(0x40000000 - v4) >> 16) * (__int16)(a3 >> 2)) >> 14;
      --v5;
    }
    while (v5);
    *uint64_t result = v4;
  }
  return result;
}

_DWORD *BET3FXD__rand_num_init(_DWORD *result)
{
  *uint64_t result = 1;
  return result;
}

void BET3FXD__MFVSyn__constructExcitationShapingFilter(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 56) >= *(_DWORD *)(a1 + 384))
  {
    uint64_t v3 = *(void *)(a1 + 368);
    if (a2)
    {
      uint64_t v4 = *(int *)(a1 + 376) - 1;
      *(_WORD *)(v3 + 2 * v4) = a2;
      memmove((void *)v3, (const void *)(v3 + 2), 2 * v4);
      uint64_t v5 = *(void *)(a1 + 368);
      int v6 = *(_DWORD *)(a1 + 376);
      int v7 = *(__int16 *)(v5 + 2 * (v6 - 2));
      BOOL v8 = v7 <= 0;
      BOOL v9 = v7 > 0;
      int v10 = 4 * v7;
      int v11 = 4 * v9;
      if (v8) {
        int v10 = 0;
      }
      int v12 = *(__int16 *)(v5 + 2 * (v6 - 3));
      int v13 = (4 * v9) | 2;
      int v14 = 2 * v12;
      if (v12 <= 0) {
        int v14 = 0;
      }
      else {
        int v11 = v13;
      }
      int v15 = *(__int16 *)(v5 + 2 * (v6 - 4));
      a2 = ((v14 + v10 + (v15 & ~(v15 >> 31))) * g_invDiv[v11 | (v15 > 0)]) >> 16;
    }
    else
    {
      bzero((void *)v3, 2 * *(unsigned int *)(a1 + 380));
      a2 = 0;
    }
  }
  unsigned int v16 = *(_DWORD *)(a1 + 12);
  if (v16 >= (*(_DWORD *)(a1 + 48) * a2) >> 14) {
    LOWORD(v16) = (*(_DWORD *)(a1 + 48) * a2) >> 14;
  }
  *(_WORD *)(a1 + 352) = v16;
}

uint64_t MFVSyn__filterExcitationWithShapingFilter(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  unsigned int v7 = *(_DWORD *)(a1 + 16) * a3;
  if (v7 < 0x7AE149)
  {
    bzero(*(void **)(a4 + 8), 2 * *(unsigned int *)(a4 + 16));
    uint64_t result = (uint64_t)rand_num_qs((unsigned int *)(v6 + 60), *(_WORD **)(v6 + 208), *(_DWORD *)(v6 + 32), a2);
    *(void *)(v6 + 508) = 0xFFFFFFFFLL;
    goto LABEL_46;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 472);
  if ((int)v8 < 1)
  {
LABEL_6:
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = (unsigned int *)(*(void *)(a1 + 480) + 16);
    while (1)
    {
      unsigned int v11 = *v10;
      v10 += 6;
      if (v11 >= v7) {
        break;
      }
      if (v8 == ++v9) {
        goto LABEL_6;
      }
    }
  }
  if (*(_DWORD *)(a1 + 504) == a2)
  {
    int v12 = *(__int16 *)(a1 + 500);
    LOWORD(a1) = *(_WORD *)(a1 + 500);
    *(_DWORD *)(v6 + 504) = a2;
  }
  else
  {
    LODWORD(a1) = fxd_U16SqrtS32(a2 << 6);
    int v14 = *(unsigned __int16 *)(v6 + 500);
    *(_DWORD *)(v6 + 504) = a2;
    int v12 = (__int16)a1;
    if (a1 != v14) {
      goto LABEL_16;
    }
  }
  if (v9 != *(_DWORD *)(v6 + 508))
  {
LABEL_16:
    if (*(__int16 *)(v6 + 488) >= 1)
    {
      __int16 v46 = a1;
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(v6 + 480) + 24 * v9;
      int v21 = (((unsigned __int16)((((unsigned __int16)*(_DWORD *)(v6 + 28) * *(__int16 *)(v20 + 20)) >> 14)
                               + 4 * *(_WORD *)(v20 + 20) * HIWORD(*(_DWORD *)(v6 + 28)))
            * v12) >> 14)
          + 4
          * v12
          * (((((unsigned __int16)*(_DWORD *)(v6 + 28) * *(__int16 *)(v20 + 20)) >> 14)
            + 4 * *(__int16 *)(v20 + 20) * (*(int *)(v6 + 28) >> 16)) >> 16);
      uint64_t v22 = *(void *)v20;
      uint64_t v23 = 2 * *(unsigned __int16 *)(v6 + 488);
      do
      {
        int v24 = fxd_S32ShMultRndS32S16(v21, *(__int16 *)(v22 + v19), 7);
        if (v24 <= -32768) {
          int v25 = -32768;
        }
        else {
          int v25 = v24;
        }
        if (v25 >= 0x7FFF) {
          LOWORD(v25) = 0x7FFF;
        }
        *(_WORD *)(*(void *)(a4 + 8) + v19) = v25;
        *(_WORD *)(*(void *)(v6 + 528) + v19) = v25;
        v19 += 2;
      }
      while (v23 != v19);
      LOWORD(a1) = v46;
    }
    goto LABEL_25;
  }
  if (*(__int16 *)(v6 + 488) >= 1)
  {
    uint64_t v15 = *(unsigned __int16 *)(v6 + 488);
    unsigned int v16 = *(__int16 **)(v6 + 528);
    uint64_t v17 = *(_WORD **)(a4 + 8);
    do
    {
      __int16 v18 = *v16++;
      *v17++ = v18;
      --v15;
    }
    while (v15);
  }
LABEL_25:
  *(_WORD *)(v6 + 500) = a1;
  int v26 = *(_DWORD *)(v6 + 264);
  if (v26 >= 1)
  {
    if (v26 >= a2) {
      int v27 = a2;
    }
    else {
      int v27 = *(_DWORD *)(v6 + 264);
    }
    if (*(_DWORD *)(a4 + 16) >= v27) {
      int v28 = v27;
    }
    else {
      int v28 = *(_DWORD *)(a4 + 16);
    }
    if (v28 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *(void *)(a4 + 8);
      do
      {
        __int16 v31 = fxd_S16SatAddS16S16(*(__int16 *)(v30 + v29), *(__int16 *)(*(void *)(v6 + 256) + v29));
        uint64_t v30 = *(void *)(a4 + 8);
        *(_WORD *)(v30 + v29) = v31;
        v29 += 2;
      }
      while (2 * v28 != v29);
      int v26 = *(_DWORD *)(v6 + 264);
    }
    BOOL v32 = __OFSUB__(v26, v28);
    int v33 = v26 - v28;
    if (!((v33 < 0) ^ v32 | (v33 == 0)))
    {
      memmove(*(void **)(v6 + 256), (const void *)(*(void *)(v6 + 256) + 2 * v28), 2 * v33);
      *(_DWORD *)(v6 + 264) = (*(_DWORD *)(v6 + 264) - v28) & ~((*(_DWORD *)(v6 + 264) - v28) >> 31);
    }
  }
  bzero(*(void **)(v6 + 256), 2 * *(unsigned int *)(v6 + 268));
  int v34 = *(__int16 *)(v6 + 488);
  BOOL v32 = __OFSUB__(v34, a2);
  int v35 = v34 - a2;
  if ((v35 < 0) ^ v32 | (v35 == 0))
  {
    uint64_t v36 = a2;
  }
  else
  {
    uint64_t v36 = a2;
    memmove(*(void **)(v6 + 256), (const void *)(*(void *)(a4 + 8) + 2 * a2), 2 * v35);
    int v37 = *(__int16 *)(v6 + 488) - a2;
    if (v37 <= *(_DWORD *)(v6 + 264)) {
      int v37 = *(_DWORD *)(v6 + 264);
    }
    *(_DWORD *)(v6 + 264) = v37;
  }
  uint64_t v38 = *(__int16 *)(v6 + 492);
  int v39 = *(__int16 *)(*(void *)(v6 + 480) + 24 * v9 + 22);
  rand_num_qs((unsigned int *)(v6 + 60), (_WORD *)(*(void *)(v6 + 208) + 2 * v38), (((unsigned __int16)*(_DWORD *)(v6 + 32) * v39) >> 14) + 4 * v39 * (*(int *)(v6 + 32) >> 16), a2);
  memmove(*(void **)(v6 + 208), *(const void **)(v6 + 280), 2 * v38);
  memmove(*(void **)(v6 + 280), (const void *)(*(void *)(v6 + 208) + 2 * v36), 2 * v38);
  zerflt_qs(*(void *)(v6 + 208) + 2 * v38, *(__int16 **)(*(void *)(v6 + 480) + 24 * v9 + 8), *(void *)(v6 + 208) + 2 * v38, *(__int16 *)(v6 + 492), a2);
  uint64_t result = (uint64_t)memmove(*(void **)(v6 + 208), (const void *)(*(void *)(v6 + 208) + 2 * v38), 2 * a2);
  int v40 = *(_DWORD *)(v6 + 512);
  int v41 = *(_DWORD *)(v6 + 516);
  BOOL v32 = __OFSUB__(v40, v41);
  int v42 = v40 - v41;
  if (!((v42 < 0) ^ v32 | (v42 == 0))) {
    *(_DWORD *)(v6 + 512) = v42;
  }
  *(_DWORD *)(v6 + 508) = v9;
LABEL_46:
  if (a2 >= 1)
  {
    uint64_t v43 = 0;
    uint64_t v44 = *(void *)(a4 + 8);
    uint64_t v45 = 2 * a2;
    do
    {
      uint64_t result = fxd_S16SatAddS16S16(*(__int16 *)(v44 + v43), *(__int16 *)(*(void *)(v6 + 208) + v43));
      uint64_t v44 = *(void *)(a4 + 8);
      *(_WORD *)(v44 + v43) = result;
      v43 += 2;
    }
    while (v45 != v43);
  }
  return result;
}

uint64_t MFVSyn__MVFExcitation_construct(uint64_t a1)
{
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 504) = 0xFFFFFFFF00000004;
  *(_WORD *)(a1 + 500) = 2;
  *(void *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 516) = BET3FXD__wave_t__convertFromMsecToTp((_DWORD *)(a1 + 8), 4);
  return 0;
}

uint64_t MFVSyn__createMVFExcitation_(uint64_t a1)
{
  if (*(__int16 *)(a1 + 488) <= *(__int16 *)(a1 + 492)) {
    unsigned int v2 = *(__int16 *)(a1 + 492);
  }
  else {
    unsigned int v2 = *(__int16 *)(a1 + 488);
  }
  *(_DWORD *)(a1 + 68) = v2;
  if (vect_t__createVect_qs(*(void *)(*(void *)a1 + 8), a1 + 248, v2)) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 264) = 0;
  if (vect_t__createVect_qs(*(void *)(*(void *)a1 + 8), a1 + 272, *(_DWORD *)(a1 + 68))) {
    return 0xFFFFFFFFLL;
  }
  if (vect_t__createVect_qs(*(void *)(*(void *)a1 + 8), a1 + 520, *(_DWORD *)(a1 + 68))) {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t MFVSyn__deleteMVFExcitation_(uint64_t a1)
{
  int v2 = vect_t__deleteVect_qs(a1 + 248);
  int v3 = vect_t__deleteVect_qs(a1 + 272);
  if (vect_t__deleteVect_qs(a1 + 520) | v3 | v2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t vect_t__createVect_qs(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a1;
  uint64_t v5 = (void *)heap_Alloc(a1, 2 * a3);
  *(void *)(a2 + 8) = v5;
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a2 + 16) = a3;
  *(_DWORD *)(a2 + 20) = a3;
  bzero(v5, 2 * a3);
  return 0;
}

uint64_t vect_t__deleteVect_qs(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = (void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  heap_Free(*(void **)a1, v1);
  uint64_t result = 0;
  *int v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t BET3FXD__vect_t__createVect(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a1;
  uint64_t v5 = (void *)heap_Alloc(a1, 4 * a3);
  *(void *)(a2 + 8) = v5;
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a2 + 16) = a3;
  *(_DWORD *)(a2 + 20) = a3;
  bzero(v5, 4 * a3);
  return 0;
}

uint64_t exp_S7_25(int a1, _WORD *a2)
{
  int v2 = a1 >> 10;
  uint64_t result = 0x40000000;
  int v4 = 1;
  for (uint64_t i = 10; i != 32; ++i)
  {
    if (v2)
    {
      uint64_t result = (exp_mantissa_lut[i] * (((int)result + 0x4000) >> 15));
      v4 += exp_scale_lut[i];
      if ((int)result <= 1073733631)
      {
        uint64_t result = (2 * result);
        --v4;
      }
    }
    v2 >>= 1;
  }
  if ((int)result <= 0x3FFFFFFF)
  {
    do
    {
      uint64_t result = (2 * result);
      LOWORD(v4) = v4 - 1;
    }
    while ((int)result < 0x40000000);
  }
  *a2 = v4;
  return result;
}

uint64_t BET3FXD__MFVSyn__SynthesisOneFrame(uint64_t a1, int a2, void *__src, __int16 a4, int *a5, void *a6)
{
  *a5 = 0;
  *a6 = 0;
  int v9 = *(_DWORD *)(a1 + 396);
  BOOL v10 = a2 == 0;
  if (v9 != 1) {
    BOOL v10 = 0;
  }
  if (v9) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = a2 != 0;
  }
  *(_DWORD *)(a1 + 392) = v11 || v10;
  if (a2)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 36) * a2;
    unsigned int v13 = v12 >> 25;
    unsigned int v14 = HIWORD(v12);
    if (v13 < 5) {
      unsigned int v14 = 2560;
    }
  }
  else
  {
    unsigned int v14 = 0;
  }
  *(_DWORD *)(a1 + 396) = v14 != 0;
  int v15 = *(_DWORD *)(a1 + 296);
  int v16 = *(_DWORD *)(a1 + 300);
  *a5 = v15;
  int v17 = *(_DWORD *)(a1 + 40);
  if (v17 != 0x4000)
  {
    int v15 = (*(_DWORD *)(a1 + 296) * v17 + 0x2000) >> 14;
    int v16 = (unsigned __int16)(0x10000u / (unsigned __int16)v15);
    *a5 = v15;
  }
  if (!v14 || (int v18 = (*(_DWORD *)(a1 + 8) << 12) / v14, (*(_WORD *)(a1 + 400) = v18) == 0)) {
    *(_WORD *)(a1 + 400) = *(_WORD *)(a1 + 344);
  }
  memmove(*(void **)(a1 + 416), __src, 4 * (*(_DWORD *)(a1 + 120) + 1));
  *(_WORD *)(a1 + 402) = a4;
  BET3FXD__MFVSyn__mc2mlsa(a1, *(void *)(a1 + 416), *(int32x2_t **)(a1 + 576));
  memmove(*(void **)(a1 + 416), *(const void **)(a1 + 576), 4 * (*(_DWORD *)(a1 + 120) + 1));
  BET3FXD__MFVSyn__constructExcitationShapingFilter(a1, *(unsigned __int16 *)(a1 + 402));
  int v19 = *(unsigned __int16 *)(a1 + 400);
  if (*(_DWORD *)(a1 + 392)) {
    goto LABEL_20;
  }
  int v20 = v19 - *(unsigned __int16 *)(a1 + 432);
  if (v20 < 0) {
    int v20 = *(unsigned __int16 *)(a1 + 432) - v19;
  }
  if (v20 >= *(_DWORD *)(a1 + 340)) {
LABEL_20:
  }
    *(_WORD *)(a1 + 432) = v19;
  LODWORD(v21) = *(_DWORD *)(a1 + 120);
  if ((v21 & 0x80000000) != 0)
  {
    int v24 = *(_DWORD **)(a1 + 448);
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = *(void *)(a1 + 416);
    int v24 = *(_DWORD **)(a1 + 448);
    uint64_t v25 = *(void *)(a1 + 136);
    do
    {
      *(_DWORD *)(v25 + 4 * v22) = ((*(_DWORD *)(v23 + 4 * v22) - v24[v22]) >> 16) * (__int16)v16
                                 + (((unsigned __int16)(*(_WORD *)(v23 + 4 * v22) - LOWORD(v24[v22])) * (__int16)v16
                                   + 0x8000) >> 16);
      uint64_t v21 = *(int *)(a1 + 120);
    }
    while (v22++ < v21);
  }
  memmove(*(void **)(a1 + 80), v24, 4 * (v21 + 1));
  uint64_t v27 = 0;
  uint64_t v28 = *(void *)(a1 + 448);
  uint64_t v29 = *(void *)(a1 + 104);
  do
  {
    *(_WORD *)(v29 + 2 * v27) = *(_DWORD *)(v28 + 4 * v27) >> 10;
    ++v27;
  }
  while (v27 != 5);
  for (uint64_t i = 0; i != 6; ++i)
    *(_WORD *)(v29 + 10 + 2 * i) = *(_DWORD *)(v28 + 20 + 4 * i) >> 9;
  int v31 = *(_DWORD *)(a1 + 120);
  if (v31 >= 11)
  {
    BOOL v32 = (unsigned int *)(v28 + 44);
    int v33 = (_WORD *)(v29 + 22);
    uint64_t v34 = (v31 - 10);
    do
    {
      unsigned int v35 = *v32++;
      *v33++ = v35 >> 8;
      --v34;
    }
    while (v34);
  }
  uint64_t v36 = *(unsigned int *)(a1 + 464);
  if ((int)v36 >= 1)
  {
    int v37 = *(void **)(a1 + 184);
    uint64_t v38 = *(const void **)(a1 + 160);
    if ((int)v36 <= v15)
    {
      memmove(v37, v38, 2 * v36);
      BET3FXD__MFVSyn__mlsa_filter((void *)a1, *(void *)(a1 + 184), *(void *)(a1 + 232), *(_DWORD *)(a1 + 464));
    }
    else
    {
      memmove(v37, v38, 2 * v15);
      BET3FXD__MFVSyn__mlsa_filter((void *)a1, *(void *)(a1 + 184), *(void *)(a1 + 232), v15);
      memmove(*(void **)(a1 + 160), (const void *)(*(void *)(a1 + 160) + 2 * v15), 2 * (*(_DWORD *)(a1 + 464) - v15));
    }
  }
  for (int j = *(_DWORD *)(a1 + 464); j < v15; *(_DWORD *)(a1 + 464) = j)
  {
    int v40 = j * v16;
    unsigned int v41 = *(unsigned __int16 *)(a1 + 400);
    if (*(_DWORD *)(a1 + 56) >= 3u) {
      unsigned int v41 = (v40 * v41 + (0x10000 - v40) * *(unsigned __int16 *)(a1 + 432)) >> 16;
    }
    signed int v42 = v41 >> 6;
    if (v42 <= *(_DWORD *)(a1 + 20)) {
      signed int v42 = *(_DWORD *)(a1 + 20);
    }
    if (v42 >= *(_DWORD *)(a1 + 24)) {
      int v43 = *(_DWORD *)(a1 + 24);
    }
    else {
      int v43 = v42;
    }
    unsigned int v44 = *(unsigned __int16 *)(a1 + 352);
    if (*(_WORD *)(a1 + 352) && *(_WORD *)(a1 + 354)) {
      unsigned int v44 = (v40 * v44 + (0x10000 - v40) * *(unsigned __int16 *)(a1 + 354)) >> 16;
    }
    MFVSyn__filterExcitationWithShapingFilter(a1, v43, v44, a1 + 176);
    uint64_t v45 = *(int *)(a1 + 464);
    int v46 = v45 + v43;
    if ((int)v45 + v43 >= v15) {
      int v46 = v15;
    }
    BET3FXD__MFVSyn__mlsa_filter((void *)a1, *(void *)(a1 + 184), *(void *)(a1 + 232) + 2 * v45, v46 - v45);
    int v47 = *(_DWORD *)(a1 + 464);
    int j = v47 + v43;
    if (v47 + v43 > v15)
    {
      memmove(*(void **)(a1 + 160), (const void *)(*(void *)(a1 + 184) + 2 * (v15 - v47)), 2 * (v43 - (v15 - v47)));
      int j = *(_DWORD *)(a1 + 464) + v43;
    }
  }
  *(_WORD *)(a1 + 354) = *(_WORD *)(a1 + 352);
  *(_DWORD *)(a1 + 432) = *(_DWORD *)(a1 + 400);
  memmove(*(void **)(a1 + 448), *(const void **)(a1 + 416), 4 * (*(_DWORD *)(a1 + 120) + 1));
  *(_DWORD *)(a1 + 464) -= v15;
  *a6 = *(void *)(a1 + 232);
  return 0;
}

uint64_t BET3FXD__MFVSyn__setVolumeBoost(_DWORD *a1, unsigned int a2)
{
  if (a2 > 0xC8) {
    return 0xFFFFFFFFLL;
  }
  if (a2 == 100) {
    int v3 = 0x4000;
  }
  else {
    int v3 = 164 * a2;
  }
  a1[7] = v3;
  int v4 = fxd_S32ShMultRndS32S32(v3, 4 * a1[11], 16);
  uint64_t result = 0;
  a1[8] = v4;
  return result;
}

uint64_t MFVSyn__setRelativeUVBoost(_DWORD *a1, unsigned int a2)
{
  if (a2 > 0xC8) {
    return 0xFFFFFFFFLL;
  }
  int v2 = 164 * a2;
  if (a2 == 100) {
    int v2 = 0x4000;
  }
  a1[11] = v2;
  BET3FXD__MFVSyn__setVolumeBoost(a1, (100 * a1[7]) >> 14);
  return 0;
}

uint64_t BET3FXD__MFVSyn__setMVFBoost(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xC8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  int v4 = 164 * a2;
  if (a2 == 100) {
    int v4 = 0x4000;
  }
  *(_DWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t BET3FXD__MFVSyn__setPitchLevelPercent(uint64_t a1, int a2)
{
  if ((a2 - 50) > 0x96) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 36) = (a2 << 16) / 0x64u;
  return result;
}

uint64_t BET3FXD__MFVSyn__setRate(uint64_t a1, int a2)
{
  if ((a2 - 11) > 0xBD) {
    return 0xFFFFFFFFLL;
  }
  if (a2 == 100) {
    int v3 = 0x4000;
  }
  else {
    int v3 = fxd_S32ShMultRndS32S32(10737418, a2, 16);
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 40) = v3;
  return result;
}

uint64_t BET3FXD__MFVSyn__construct(uint64_t a1)
{
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 396) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 232) = 0;
  BET3FXD__rand_num_init((_DWORD *)(a1 + 60));
  MFVSyn__mlsa_filter_construct((void *)a1);
  MFVSyn__MVFExcitation_construct(a1);
  *(_DWORD *)(a1 + 20) = BET3FXD__wave_t__convertFromF0ToTp((_DWORD *)(a1 + 8), 0xAF00u) >> 6;
  *(_DWORD *)(a1 + 24) = BET3FXD__wave_t__convertFromF0ToTp((_DWORD *)(a1 + 8), 0xA00u) >> 6;
  *(_WORD *)(a1 + 52) = BET3FXD__wave_t__convertFromMsecToTp((_DWORD *)(a1 + 8), 4) >> 6;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 40) = 0x4000;
  *(_DWORD *)(a1 + 28) = 0x4000;
  *(_DWORD *)(a1 + 32) = fxd_S32ShMultRndS32S32(0x4000, 4 * *(_DWORD *)(a1 + 44), 16);
  *(void *)(a1 + 44) = 0x400000004000;
  BET3FXD__MFVSyn__setVolumeBoost((_DWORD *)a1, (100 * *(_DWORD *)(a1 + 28)) >> 14);
  *(_DWORD *)(a1 + 36) = 0x10000;
  return 0;
}

uint64_t BET3FXD__MFVSyn__deconstruct(_DWORD *a1)
{
  int v2 = vect_t__deleteVect_qs((uint64_t)(a1 + 110));
  if (vect_t__deleteVect_qs((uint64_t)(a1 + 102)) | v2) {
    unsigned int v3 = -1;
  }
  else {
    unsigned int v3 = 0;
  }
  unsigned int v4 = a1[14];
  if (v4 >= a1[84])
  {
    if (vect_t__deleteVect_qs((uint64_t)(a1 + 76))) {
      unsigned int v3 = -1;
    }
    unsigned int v4 = a1[14];
  }
  if (v4 >= a1[96] && vect_t__deleteVect_qs((uint64_t)(a1 + 90))) {
    unsigned int v3 = -1;
  }
  int v5 = BET3FXD__MFVSyn__mlsa_filter_deinit((uint64_t)a1);
  int v6 = vect_t__deleteVect_qs((uint64_t)(a1 + 18));
  int v7 = vect_t__deleteVect_qs((uint64_t)(a1 + 32));
  int v8 = vect_t__deleteVect_qs((uint64_t)(a1 + 38));
  int v9 = vect_t__deleteVect_qs((uint64_t)(a1 + 44));
  int v10 = vect_t__deleteVect_qs((uint64_t)(a1 + 50));
  int v11 = vect_t__deleteVect_qs((uint64_t)(a1 + 56));
  if (MFVSyn__deleteMVFExcitation(a1) | v11 | v10 | v9 | v8 | v7 | v6 | v5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3;
  }
}

uint64_t BET3FXD__MFVSyn__reset__MVF_Synthesis(uint64_t *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0xFFFFFFFFLL;
  }
  BET3FXD__rand_num_init((_DWORD *)(v1 + 60));
  *(_DWORD *)(v1 + 464) = 0;
  *(_DWORD *)(v1 + 396) = 0;
  *(_WORD *)(v1 + 354) = 0;
  bzero(*(void **)(v1 + 552), 4 * *(unsigned int *)(v1 + 564));
  bzero(*(void **)(v1 + 576), 4 * *(unsigned int *)(v1 + 588));
  *(_WORD *)(v1 + 432) = *(_WORD *)(v1 + 344);
  *(_WORD *)(v1 + 434) = 0;
  bzero(*(void **)(v1 + 448), 4 * *(unsigned int *)(v1 + 456));
  BET3FXD__MFVSyn__mc2mlsa(v1, *(void *)(v1 + 448), *(int32x2_t **)(v1 + 448));
  bzero(*(void **)(v1 + 184), 2 * *(unsigned int *)(v1 + 196));
  bzero(*(void **)(v1 + 160), 2 * *(unsigned int *)(v1 + 172));
  bzero(*(void **)(v1 + 256), 2 * *(unsigned int *)(v1 + 268));
  bzero(*(void **)(v1 + 280), 2 * *(unsigned int *)(v1 + 292));
  bzero(*(void **)(v1 + 208), 2 * *(unsigned int *)(v1 + 220));
  bzero(*(void **)(v1 + 528), 2 * *(unsigned int *)(v1 + 540));
  *(_DWORD *)(v1 + 512) = 0;
  *(void *)(v1 + 504) = 0xFFFFFFFF00000004;
  *(_WORD *)(v1 + 500) = 2;
  bzero(*(void **)(v1 + 136), 4 * *(unsigned int *)(v1 + 148));
  v_set_qs(*(_WORD **)(v1 + 312), *(_WORD *)(v1 + 344), *(_DWORD *)(v1 + 324));
  uint64_t result = 0;
  if (*(_DWORD *)(v1 + 56) >= *(_DWORD *)(v1 + 384))
  {
    bzero(*(void **)(v1 + 368), 2 * *(unsigned int *)(v1 + 380));
    return 0;
  }
  return result;
}

uint64_t BET3FXD__MFVSyn__init__MVF_Synthesis(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, int a9, unsigned char *a10)
{
  uint64_t v18 = heap_Calloc(*(void **)(a2 + 8), 1, 704);
  uint64_t v38 = (void *)v18;
  *a1 = v18;
  if (!v18) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v19 = v18;
  long long v36 = 0uLL;
  int v37 = 0;
  *(void *)uint64_t v18 = a2;
  long long v20 = *a3;
  int v21 = *((_DWORD *)a3 + 8);
  *(_OWORD *)(v18 + 36) = a3[1];
  *(_OWORD *)(v18 + 20) = v20;
  *(_DWORD *)(v18 + 52) = v21;
  *(_DWORD *)(v18 + 56) = a9;
  *(_DWORD *)(v18 + 120) = a6;
  *(_DWORD *)(v18 + 124) = a6;
  if ((int)a8 > 15999)
  {
    if (a8 == 22050) {
      goto LABEL_8;
    }
    int v22 = 16000;
  }
  else
  {
    if (a8 == 8000) {
      goto LABEL_8;
    }
    int v22 = 11025;
  }
  if (a8 != v22) {
    goto LABEL_16;
  }
LABEL_8:
  BET3FXD__wave_t__setSampleRateHz((_DWORD *)(v18 + 8), a8);
  if (BET3FXD__MFVSyn__construct(v19)) {
    goto LABEL_16;
  }
  *(_DWORD *)(v19 + 28) = 0x4000;
  *(_DWORD *)(v19 + 32) = fxd_S32ShMultRndS32S32(0x4000, 4 * *(_DWORD *)(v19 + 44), 16);
  *(_DWORD *)(v19 + 40) = 0x4000;
  if ((int)a8 > 15999)
  {
    if (a8 != 22050)
    {
      int v23 = 16000;
LABEL_14:
      if (a8 != v23) {
        goto LABEL_16;
      }
    }
  }
  else if (a8 != 8000)
  {
    int v23 = 11025;
    goto LABEL_14;
  }
  *(_WORD *)(v19 + 52) = BET3FXD__wave_t__convertFromMsecToTp((_DWORD *)(v19 + 8), a5) >> 6;
  if (!BET3FXD__MFVSyn__loadExcTable(v19, a4, v24, v25, v26, v27, v28, v29))
  {
    *(_DWORD *)(v19 + 392) = 0;
    *(_WORD *)(v19 + 344) = BET3FXD__wave_t__convertFromF0ToTp((_DWORD *)(v19 + 8), 0x3E80u);
    *(_DWORD *)(v19 + 340) = BET3FXD__wave_t__convertFromF0ToTp((_DWORD *)(v19 + 8), 0xF00u);
    *(_DWORD *)(v19 + 336) = 3;
    if (*(_DWORD *)(v19 + 56) >= 3u)
    {
      if (vect_t__createVect_qs(*(void *)(*(void *)v19 + 8), v19 + 304, 4u)) {
        goto LABEL_16;
      }
      v_set_qs(*(_WORD **)(v19 + 312), *(_WORD *)(v19 + 344), *(_DWORD *)(v19 + 324));
      *(_DWORD *)(v19 + 332) = 0x10000 / *(_DWORD *)(v19 + 320);
      *(_DWORD *)(v19 + 328) = 0;
    }
    *(_DWORD *)(v19 + 64) = kaldi::QuantizedMatrixBase<short>::NumRows((unsigned int *)(v19 + 8));
    *(_DWORD *)(v19 + 384) = 3;
    if ((*(_DWORD *)(v19 + 56) < 3u
       || !vect_t__createVect_qs(*(void *)(*(void *)v19 + 8), v19 + 360, 5u))
      && !MFVSyn__createMVFExcitation(v19)
      && !BET3FXD__vect_t__createVect(*(void *)(*(void *)v19 + 8), v19 + 72, *(_DWORD *)(v19 + 120) + 1))
    {
      *(_WORD *)(v19 + 354) = 0;
      *(_DWORD *)(v19 + 464) = 0;
      unsigned int v31 = *(unsigned __int16 *)(v19 + 52);
      *(_DWORD *)(v19 + 296) = v31;
      *(_DWORD *)(v19 + 300) = (unsigned __int16)(0x10000 / v31);
      if (v31)
      {
        if ((unsigned __int16)(0x10000 / v31))
        {
          uint64_t v32 = *(int *)(v19 + 56);
          if (v32 <= 4)
          {
            int v33 = dword_20D69FF7C[v32];
            if (!BET3FXD__vect_t__createVect(*(void *)(*(void *)v19 + 8), v19 + 128, *(_DWORD *)(v19 + 120) + 1))
            {
              *(_DWORD *)(v19 + 516) = BET3FXD__wave_t__convertFromMsecToTp((_DWORD *)(v19 + 8), v33) >> 6;
              if (!MFVSyn__mlsa_filter_consult(v19, *(_DWORD *)(v19 + 56), a8, a7, a10, (uint64_t)&v36))
              {
                long long v34 = v36;
                int v35 = v37;
                if (!BET3FXD__MFVSyn__mlsa_filter_init(v19, (uint64_t)&v34)
                  && !vect_t__createVect_qs(*(void *)(*(void *)v19 + 8), v19 + 176, *(_DWORD *)(v19 + 296) + *(_DWORD *)(v19 + 68) + *(_DWORD *)(v19 + 24) + 1)&& !vect_t__createVect_qs(*(void *)(*(void *)v19 + 8), v19 + 152, *(_DWORD *)(v19 + 296) + *(_DWORD *)(v19 + 68) + *(_DWORD *)(v19 + 24) + 1)&& !vect_t__createVect_qs(*(void *)(*(void *)v19 + 8), v19 + 200, *(_DWORD *)(v19 + 296) + *(_DWORD *)(v19 + 68) + *(_DWORD *)(v19 + 24) + 1)&& !vect_t__createVect_qs(*(void *)(*(void *)v19 + 8), v19 + 224, 2 * *(_DWORD *)(v19 + 296)))
                {
                  *(_WORD *)(v19 + 432) = *(_WORD *)(v19 + 344);
                  *(_WORD *)(v19 + 434) = 0;
                  if (!BET3FXD__vect_t__createVect(*(void *)(*(void *)v19 + 8), v19 + 440, *(_DWORD *)(v19 + 120) + 1)&& !BET3FXD__vect_t__createVect(*(void *)(*(void *)v19 + 8), v19 + 408, *(_DWORD *)(v19 + 120) + 1))
                  {
                    BET3FXD__MFVSyn__mc2mlsa(v19, *(void *)(v19 + 448), *(int32x2_t **)(v19 + 448));
                    return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_16:
  MFVSyn__denit__MVF_Synthesis(&v38);
  *a1 = 0;
  return 0xFFFFFFFFLL;
}

uint64_t MFVSyn__denit__MVF_Synthesis(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = BET3FXD__MFVSyn__releaseExcTable(*a1);
  if (BET3FXD__MFVSyn__deconstruct(v2) | v3) {
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(void *)v2) {
    heap_Free(*(void **)(*(void *)v2 + 8), (uint64_t)v2);
  }
  *a1 = 0;
  return v4;
}

uint64_t getAlpha(int a1)
{
  if (a1 > 11999)
  {
    switch(a1)
    {
      case 12000:
        return 6207570;
      case 22050:
        return 7381975;
      case 16000:
        return 7046431;
    }
  }
  else
  {
    switch(a1)
    {
      case 8000:
        return 5200937;
      case 10000:
        return 5872026;
      case 11025:
        return 6039798;
    }
  }
  return 0;
}

int32x2_t BET3FXD__MFVSyn__mc2mlsa(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  unint64_t v3 = *(int *)(a1 + 120);
  int v4 = *(_DWORD *)(a1 + 608);
  a3->i32[v3] = *(_DWORD *)(a2 + 4 * v3);
  if ((int)v3 >= 1)
  {
    unint64_t v3 = v3;
    int v5 = (__int16)(v4 >> 8);
    do
      a3->i32[(v3 - 1)] = *(_DWORD *)(a2 + 4 * (v3 - 1))
                                      - ((a3->i32[v3] >> 16) * v5
                                       + (((unsigned __int16)a3->i32[v3] * v5 + 0x8000) >> 16));
    while (v3-- > 1);
  }
  int32x2_t result = vmin_s32(vmax_s32(*a3, (int32x2_t)0xFF09999A00000000), (int32x2_t)0xF6666601F9999ALL);
  *a3 = result;
  return result;
}

uint64_t MFVSyn__mlsadf_fxd(uint64_t a1, int a2, __int16 *a3)
{
  int v5 = 0;
  uint64_t v6 = *(void *)(a1 + 552);
  int v128 = *(_DWORD *)(a1 + 120);
  int v7 = *(__int16 *)(a1 + 616);
  int v133 = *(__int16 *)(a1 + 618);
  int v8 = *(__int16 **)(a1 + 600);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 621);
  int v10 = (int *)(v6 + 4 * v9 + 4);
  uint64_t v127 = v6;
  int v11 = (int *)(v6 + 8 * v9);
  uint64_t v12 = v6;
  do
  {
    int v13 = *v11--;
    int v14 = fxd_S32ShMultRndS32S16(v13, v133, 14);
    int v15 = fxd_S32ShMultRndS32S16(*(_DWORD *)(v12 + 4 * v9), v7, 14);
    *(_DWORD *)(v12 + 4 * v9) = v15 + v14;
    unsigned int v16 = (((v15 + v14) >> 12) & 0xFFFFFFF0) * a3[1] + (((unsigned __int16)(v15 + v14) * a3[1]) >> 12);
    v10[v9] = v16;
    if (v9 == 3) {
      int v17 = (v10[3] * v8[3]) >> 16;
    }
    else {
      int v17 = (int)(v16 * v8[v9]) >> 18;
    }
    if ((v9-- & 1) == 0) {
      int v19 = -v17;
    }
    else {
      int v19 = v17;
    }
    a2 += 2 * v19;
    v5 += v17;
  }
  while ((unint64_t)(v9 + 1) > 3);
  int v20 = fxd_S32ShMultRndS32S16(v10[1], v133, 14);
  int v21 = fxd_S32ShMultRndS32S16(*(_DWORD *)(v127 + 8), v7, 14);
  *(_DWORD *)(v127 + 8) = v21 + v20;
  int v22 = (((v21 + v20) >> 12) & 0xFFFFFFF0) * a3[1] + (((unsigned __int16)(v21 + v20) * a3[1]) >> 12);
  v10[2] = v22;
  int v23 = fxd_S32ShMultRndS32S16(v22, v8[2], 15);
  int v24 = a2 - 2 * v23;
  int v25 = v23 + v5;
  unsigned int v26 = (*v10 >> 14) & 0xFFFFFFFC;
  int v27 = (unsigned __int16)*v10 * v133 + 0x2000;
  int v28 = fxd_S32ShMultRndS32S16(*(_DWORD *)(v127 + 4), v7, 14);
  int v29 = v28 + v26 * v133 + (v27 >> 14);
  *(_DWORD *)(v127 + 4) = v29;
  int v30 = (((unsigned __int16)(v28 + v26 * v133 + (v27 >> 14)) * a3[1]) >> 12) + 16 * a3[1] * (v29 >> 16);
  v10[1] = v30;
  int v31 = fxd_S32ShMultRndS32S16(v30, v8[1], 15);
  int v32 = v31 + (v24 >> 1);
  int *v10 = v32;
  int v130 = v25 + v31 + v32;
  int v131 = 0;
  uint64_t v33 = a1;
  uint64_t v34 = *(unsigned __int8 *)(a1 + 620);
  uint64_t v119 = *(unsigned __int16 *)(a1 + 642);
  uint64_t v35 = v127 + 4 * v119;
  long long v36 = (int *)(v35 + 4 * *(unsigned __int16 *)(a1 + 2 * v34 + 624));
  int v37 = a3 + 2;
  uint64_t v125 = v35;
  uint64_t v126 = a3 + 5;
  if (v128 <= 11) {
    uint64_t v38 = 11;
  }
  else {
    uint64_t v38 = v128;
  }
  uint64_t v122 = (v38 + 1);
  v123 = (int *)(v35 + 4 * *(unsigned __int16 *)(a1 + 2 * v34 + 624));
  uint64_t v121 = v35 + 44;
  uint64_t v118 = v38;
  uint64_t v120 = v38 - 10;
  uint64_t v132 = a3 + 11;
  do
  {
    uint64_t v39 = v34;
    uint64_t v40 = *(unsigned __int16 *)(v33 + 2 * v34 + 622);
    unsigned int v41 = (int *)(v125 + 4 * v40);
    uint64_t v129 = v34 - 1;
    int v42 = v36[v34 - 1];
    int *v41 = v42;
    int v43 = fxd_S32ShMultRndS32S16(v42, v133, 14);
    uint64_t v44 = 0;
    int v45 = 0;
    v41[1] = fxd_S32ShMultRndS32S16(v41[1], v7, 14) + v43;
    int v46 = v37;
    do
    {
      int v47 = v41[v44 + 2];
      int v48 = fxd_S32ShMultRndS32S16(v41[v44 + 3] - v41[v44 + 1], v7, 14);
      v41[v44 + 2] = v48 + v47;
      int v49 = *v46++;
      v45 += (((v48 + v47) >> 12) & 0xFFFFFFF0) * v49 + (((unsigned __int16)(v48 + v47) * v49 + 2048) >> 12);
      ++v44;
    }
    while (v44 != 3);
    uint64_t v50 = 0;
    BOOL v51 = v126;
    do
    {
      int v52 = v41[v50 + 5] + (((v41[v50 + 6] - v41[v50 + 4]) * v7) >> 14);
      v41[v50 + 5] = v52;
      int v53 = *v51++;
      v45 += ((v52 >> 13) & 0xFFFFFFF8) * v53 + (((unsigned __int16)v52 * v53 + 4096) >> 13);
      ++v50;
    }
    while (v50 != 6);
    unsigned int v54 = v41 + 12;
    uint64_t v55 = v120;
    int v56 = (int *)(v121 + 4 * v40);
    int v57 = v132;
    do
    {
      int v58 = *v56 + (((*v54 - *(v54 - 2)) * v7) >> 14);
      *v56++ = v58;
      int v59 = *v57++;
      v45 += fxd_S32ShMultRndS32S16(v58, v59, 14);
      ++v54;
      --v55;
    }
    while (v55);
    int v60 = v54 - 2;
    uint64_t v61 = v122;
    long long v36 = v123;
    do
    {
      int v62 = *v60--;
      v41[v61] = v62;
      BOOL v63 = v61-- <= 2;
    }
    while (!v63);
    v123[v39] = v45;
    uint64_t v33 = a1;
    int v64 = v132;
    if (v39 == 3)
    {
      int v65 = v123[3];
      int v66 = *(__int16 *)(*(void *)(a1 + 592) + 6);
      char v67 = 16;
    }
    else
    {
      int v66 = *(__int16 *)(*(void *)(a1 + 592) + 2 * v39);
      int v65 = v45;
      char v67 = 18;
    }
    int v68 = fxd_S32ShMultRndS32S16(v65, v66, v67);
    uint64_t v34 = v129;
    if (v39) {
      int v69 = v68;
    }
    else {
      int v69 = -v68;
    }
    v130 += v69;
    v131 += v68;
  }
  while (v39 > 3);
  uint64_t v70 = *(unsigned __int16 *)(a1 + 626);
  int v71 = (int *)(v125 + 4 * v70);
  int v72 = v123[1];
  *int v71 = v72;
  int v73 = fxd_S32ShMultRndS32S16(v72, v133, 14);
  int v74 = fxd_S32ShMultRndS32S16(v71[1], v7, 14);
  uint64_t v75 = 0;
  int v76 = 0;
  int v77 = v74 + v73;
  v71[1] = v74 + v73;
  int v78 = v37;
  do
  {
    int v77 = v71[v75 + 2] + (((v71[v75 + 3] - v77) * v7) >> 14);
    v71[v75 + 2] = v77;
    int v79 = *v78++;
    v76 += (v77 * v79) >> 12;
    ++v75;
  }
  while (v75 != 3);
  uint64_t v80 = 0;
  uint64_t v81 = v126;
  do
  {
    int v82 = v71[v80 + 5] + (((v71[v80 + 6] - v71[v80 + 4]) * v7) >> 14);
    v71[v80 + 5] = v82;
    int v83 = *v81++;
    v76 += (v82 * v83) >> 13;
    ++v80;
  }
  while (v80 != 6);
  uint64_t v84 = 4 * v70;
  unsigned int v85 = (int *)(4 * v70 + 4 * v119 + v127 + 44);
  uint64_t v86 = v118 - 10;
  BOOL v87 = v71 + 12;
  do
  {
    int v88 = *v85 + (((*v87 - *(v87 - 2)) * v7) >> 14);
    *v85++ = v88;
    int v89 = *v64++;
    v76 += fxd_S32ShMultRndS32S16(v88, v89, 14);
    ++v87;
    --v86;
  }
  while (v86);
  uint64_t v90 = v118 + 3;
  uint64_t v91 = (_DWORD *)(v84 + 4 * v119 + 4 * v118 + v127 + 4);
  uint64_t v92 = v87 - 2;
  do
  {
    *uint64_t v91 = *v92;
    *(v91 - 1) = *(v92 - 1);
    v90 -= 2;
    v91 -= 2;
    v92 -= 2;
  }
  while (v90 > 3);
  v123[2] = v76;
  int v93 = fxd_S32ShMultRndS32S16(v76, *(__int16 *)(*(void *)(a1 + 592) + 4), 15);
  uint64_t v94 = *(unsigned __int16 *)(a1 + 624);
  unsigned int v95 = (int *)(v125 + 4 * v94);
  int v96 = *v123;
  *unsigned int v95 = *v123;
  int v97 = fxd_S32ShMultRndS32S16(v96, v133, 14);
  int v98 = fxd_S32ShMultRndS32S16(v95[1], v7, 14);
  uint64_t v99 = 0;
  int v100 = 0;
  int v101 = v98 + v97;
  v95[1] = v98 + v97;
  uint64_t v102 = v132;
  do
  {
    int v101 = v95[v99 + 2] + (((v95[v99 + 3] - v101) * v7) >> 14);
    v95[v99 + 2] = v101;
    int v103 = *v37++;
    v100 += (v101 * v103) >> 12;
    ++v99;
  }
  while (v99 != 3);
  uint64_t v104 = 0;
  uint64_t v105 = v126;
  do
  {
    int v106 = v95[v104 + 5] + (((v95[v104 + 6] - v95[v104 + 4]) * v7) >> 14);
    v95[v104 + 5] = v106;
    int v107 = *v105++;
    v100 += (v106 * v107) >> 13;
    ++v104;
  }
  while (v104 != 6);
  uint64_t v108 = (int *)(4 * v94 + 4 * v119 + v127 + 44);
  uint64_t v109 = v118 - 10;
  uint64_t v110 = v95 + 12;
  do
  {
    int v111 = *v108 + (((*v110 - *(v110 - 2)) * v7) >> 14);
    *v108++ = v111;
    int v112 = *v102++;
    v100 += fxd_S32ShMultRndS32S16(v111, v112, 14);
    ++v110;
    --v109;
  }
  while (v109);
  uint64_t v113 = v110 - 2;
  uint64_t v114 = v122;
  do
  {
    int v115 = *v113--;
    v95[v114] = v115;
    BOOL v63 = v114-- <= 2;
  }
  while (!v63);
  v123[1] = v100;
  int v116 = fxd_S32ShMultRndS32S16(v100, *(__int16 *)(*(void *)(a1 + 592) + 2), 15);
  int *v123 = v116 + v130 - v93;
  return (v131 + v116 + v116 + v130);
}

void *BET3FXD__MFVSyn__mlsa_filter(void *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v5 = (uint64_t)result;
    int v6 = 0;
    uint64_t v7 = result[17];
    int v8 = (__int16 *)result[13];
    uint64_t v9 = result[10];
    uint64_t v10 = v9 + 20;
    do
    {
      int v11 = *(__int16 *)(a2 + 2 * v6);
      int32x2_t result = (void *)MFVSyn__mlsadf_fxd(v5, ((((unsigned __int16)g_expTable[**(__int16 **)(v5 + 104) >> 7] * v11) >> 12)+ 16 * v11 * (g_expTable[**(__int16 **)(v5 + 104) >> 7] >> 16)) >> 14, v8);
      for (uint64_t i = 0; i != 5; ++i)
      {
        unsigned int v13 = *(_DWORD *)(v7 + 4 * i) + *(_DWORD *)(v9 + 4 * i);
        *(_DWORD *)(v9 + 4 * i) = v13;
        v8[i] = v13 >> 10;
      }
      if (*v8 < 0) {
        *int v8 = 0;
      }
      for (uint64_t j = 0; j != 6; ++j)
      {
        unsigned int v15 = *(_DWORD *)(v7 + 20 + 4 * j) + *(_DWORD *)(v10 + 4 * j);
        *(_DWORD *)(v10 + 4 * j) = v15;
        v8[j + 5] = v15 >> 9;
      }
      uint64_t v16 = 11;
      do
      {
        unsigned int v17 = *(_DWORD *)(v7 + 4 * v16) + *(_DWORD *)(v9 + 4 * v16);
        *(_DWORD *)(v9 + 4 * v16) = v17;
        v8[v16] = v17 >> 8;
        BOOL v18 = v16++ < *(int *)(v5 + 120);
      }
      while (v18);
      if ((result + 62258) > 0x1E664)
      {
        int v19 = result + 59638 + (((int)result + 59638) >> 2);
        int v20 = (v19 >> 1) - 59638;
        BOOL v18 = v19 > 0xFFFFEB85;
        int v21 = (((v19 >> 1) + 2621 + (((v19 >> 1) + 2621) >> 2)) >> 2) - 62259;
        if (v18) {
          int v21 = v20;
        }
        if (v21 <= -65536) {
          int v21 = -65536;
        }
        unsigned int v22 = result - 59638 + ((result - 59638) >> 2);
        if (v22 >> 2 >= 0x51F) {
          int v23 = (((v22 >> 1) - 2621 + (((v22 >> 1) - 2621) >> 2)) >> 2) + 62259;
        }
        else {
          int v23 = (v22 >> 1) + 59638;
        }
        if (v23 >= 0xFFFF) {
          int v23 = 0xFFFF;
        }
        if ((int)result >= 59639) {
          int v21 = v23;
        }
        *(_WORD *)(a3 + 2 * v6) = v21 >> 1;
      }
      else
      {
        *(_WORD *)(a3 + 2 * v6++) = result >> 1;
        if (v6 < a4) {
          continue;
        }
      }
      ++v6;
    }
    while (v6 < a4);
  }
  return result;
}

void *MFVSyn__mlsa_filter_construct(void *result)
{
  result[69] = 0;
  result[72] = 0;
  result[13] = 0;
  return result;
}

uint64_t BET3FXD__MFVSyn__mlsa_filter_init(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!*(_DWORD *)(a1 + 120)) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 608) = *(_DWORD *)a2;
  int v4 = kaldi::QuantizedMatrixBase<short>::NumRows((unsigned int *)(a1 + 8));
  int Alpha = getAlpha(v4);
  *(_DWORD *)(a1 + 608) = Alpha;
  int v6 = fxd_S32ShMultRndS32S32(Alpha, Alpha, 24);
  *(_DWORD *)(a1 + 612) = 0x1000000 - v6;
  unsigned int v7 = *(_DWORD *)(a1 + 608);
  *(_WORD *)(a1 + 616) = v7 >> 10;
  *(_WORD *)(a1 + 618) = (0x1000000 - v6) >> 10;
  if (!v7) {
    return 0xFFFFFFFFLL;
  }
  if (vect_t__createVect_qs(*(void *)(*(void *)a1 + 8), a1 + 96, *(_DWORD *)(a1 + 120) + 1)) {
    return 0xFFFFFFFFLL;
  }
  if (*(int *)(a1 + 120) < 4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + 4);
  *(unsigned char *)(a1 + 621) = v8;
  *(unsigned char *)(a1 + 620) = *(unsigned char *)(a2 + 5);
  *(_WORD *)(a1 + 642) = 2 * v8 + 2;
  if (MFVSyn__mlsa_pickPadeApproximation(a1, *(_DWORD *)(a2 + 8), v8, *(unsigned __int8 *)(a2 + 16), (char **)(a1 + 600))|| MFVSyn__mlsa_pickPadeApproximation(a1, *(_DWORD *)(a2 + 12), *(unsigned __int8 *)(a1 + 620), *(unsigned __int8 *)(a2 + 17), (char **)(a1 + 592))|| BET3FXD__vect_t__createVect(*(void *)(*(void *)a1 + 8), a1 + 544, *(unsigned __int8 *)(a1 + 620)+ 2 * *(unsigned __int8 *)(a1 + 621)+ (*(_DWORD *)(a1 + 120) + 2) * *(unsigned __int8 *)(a1 + 620)+ 3)|| BET3FXD__vect_t__createVect(*(void *)(*(void *)a1 + 8), a1 + 568, *(_DWORD *)(a1 + 120) + 1))
  {
    return 0xFFFFFFFFLL;
  }
  __int16 v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = *(unsigned __int8 *)(a1 + 620);
  int v13 = *(_DWORD *)(a1 + 120);
  __int16 v14 = v13 + 2;
  uint64x2_t v15 = (uint64x2_t)vdupq_n_s64(v12 + 1);
  __int16 v16 = v12 * (v13 + 2);
  __int16 v17 = -4 - 2 * v13;
  __int16 v18 = (v12 - 1) * v14;
  uint64_t v19 = ((_WORD)v12 + 3) & 0x1FE;
  int v20 = (_WORD *)(a1 + 2 * *(unsigned __int8 *)(a1 + 620) + 624);
  do
  {
    int32x2_t v21 = vmovn_s64((int64x2_t)vcgeq_u64(v15, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v11), (int8x16_t)xmmword_20D6072C0)));
    if (v21.i8[0]) {
      *int v20 = v16 + v10;
    }
    if (v21.i8[4]) {
      *(v20 - 1) = v18 + v10;
    }
    uint64_t result = 0;
    v11 += 2;
    v20 -= 2;
    v10 += v17;
  }
  while (v19 != v11);
  return result;
}

uint64_t BET3FXD__MFVSyn__mlsa_filter_deinit(uint64_t a1)
{
  int v2 = vect_t__deleteVect_qs(a1 + 96);
  int v3 = vect_t__deleteVect_qs(a1 + 544);
  if (vect_t__deleteVect_qs(a1 + 568) | v3 | v2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t MFVSyn__mlsa_pickPadeApproximation(uint64_t a1, int a2, unsigned int a3, int a4, char **a5)
{
  if (a2 == 1)
  {
    if (a3 - 2 <= 5)
    {
      uint64_t result = 0xFFFFFFFFLL;
      switch(a4)
      {
        case 2:
          unsigned int v7 = (char *)&g_ChebyPade_R2;
          goto LABEL_15;
        case 3:
          unsigned int v7 = (char *)&g_ChebyPade_R3;
          goto LABEL_15;
        case 4:
          unsigned int v7 = (char *)&g_ChebyPade_R4;
          goto LABEL_15;
        case 5:
          unsigned int v7 = (char *)&g_ChebyPade_R5;
          goto LABEL_15;
        case 6:
          unsigned int v7 = (char *)&g_ChebyPade_R6;
          goto LABEL_15;
        case 8:
          unsigned int v7 = (char *)&g_ChebyPade_R8;
LABEL_15:
          uint64_t v5 = &v7[16 * a3];
          goto LABEL_16;
        default:
          return result;
      }
    }
    return 0;
  }
  else if (a2 || a3 - 3 > 2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v5 = (char *)&g_pade_0 + 12 * a3;
LABEL_16:
    uint64_t result = 0;
    *a5 = v5;
  }
  return result;
}

uint64_t MFVSyn__mlsa_filter_mlp_fill(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = 0;
  uint64_t v17 = *MEMORY[0x263EF8340];
  do
  {
    int v8 = *(unsigned __int8 *)(a5 + v7);
    v16[v7++] = v8;
  }
  while (v8);
  qmemcpy(v15, "XLMHU", 5);
  *(_DWORD *)a6 = a4;
  if (!v16[0]) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = 0;
  while (v16[++v9])
    ;
  if (v9 != 80) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = 0;
  while (v16[v11] != *((unsigned char *)v15 + a2))
  {
    v11 += 16;
    if (v11 == 80) {
      return 0;
    }
  }
  int v13 = &v16[v11];
  *((unsigned char *)v13 + 14) = 0;
  *((unsigned char *)v13 + 12) = 0;
  *((unsigned char *)v13 + 10) = 0;
  *((unsigned char *)v13 + 8) = 0;
  *((unsigned char *)v13 + 6) = 0;
  *((unsigned char *)v13 + 4) = 0;
  *((unsigned char *)v13 + 2) = 0;
  *(_DWORD *)(a6 + 8) = LH_atoi(&v16[v11 + 7]);
  *(_DWORD *)(a6 + 12) = LH_atoi(v13 + 13);
  *(unsigned char *)(a6 + 4) = LH_atoi(v13 + 3);
  *(unsigned char *)(a6 + 5) = LH_atoi(v13 + 9);
  *(unsigned char *)(a6 + 16) = LH_atoi(v13 + 5);
  unsigned __int8 v14 = LH_atoi(v13 + 11);
  uint64_t result = 0;
  *(unsigned char *)(a6 + 17) = v14;
  return result;
}

uint64_t MFVSyn__mlsa_filter_consult(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned char *a5, uint64_t a6)
{
  if (!a1 || !*(_DWORD *)(a1 + 120)) {
    return 0xFFFFFFFFLL;
  }
  if (a5 && *a5) {
    return MFVSyn__mlsa_filter_mlp_fill(a1, a2, a3, a4, (uint64_t)a5, a6);
  }
  int v7 = 0;
  int v8 = 1;
  char v9 = 3;
  char v10 = 5;
  switch(a2)
  {
    case 0u:
      int v8 = 0;
      int v7 = 1;
      char v9 = 2;
      goto LABEL_9;
    case 2u:
      char v10 = 4;
      goto LABEL_15;
    case 3u:
LABEL_15:
      uint64_t result = 0;
      *(_DWORD *)a6 = a4;
      *(void *)(a6 + 8) = 0;
      *(unsigned char *)(a6 + 4) = 3;
      *(unsigned char *)(a6 + 5) = v10;
      __int16 v12 = 2056;
      goto LABEL_17;
    case 4u:
      uint64_t result = 0;
      *(_DWORD *)a6 = a4;
      *(void *)(a6 + 8) = 0x100000001;
      *(_WORD *)(a6 + 4) = 1795;
      __int16 v12 = 1284;
LABEL_17:
      *(_WORD *)(a6 + 16) = v12;
      return result;
    default:
LABEL_9:
      *(_DWORD *)a6 = a4;
      *(void *)(a6 + 8) = 0x100000001;
      if (a3 == 8000) {
        char v11 = 4;
      }
      else {
        char v11 = 5;
      }
      *(unsigned char *)(a6 + 4) = 3;
      *(unsigned char *)(a6 + 5) = v9;
      uint64_t result = 0;
      if (v8)
      {
        *(unsigned char *)(a6 + 16) = 4;
      }
      else
      {
        if (!v7) {
          return result;
        }
        *(unsigned char *)(a6 + 16) = 4;
      }
      *(unsigned char *)(a6 + 17) = v11;
      break;
  }
  return result;
}

unint64_t zerflt_qs(unint64_t result, __int16 *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = (_WORD *)(a3 + 2 * (a5 - 1));
  unint64_t v6 = result + 2 * (a5 - 1);
  do
  {
    uint64_t v7 = 0;
    LOWORD(v8) = 0;
    char v9 = a2;
    do
    {
      int v10 = *v9++;
      int v8 = ((*(__int16 *)(v6 + v7) * v10) >> 16) + (__int16)v8;
      v7 -= 2;
    }
    while (v9 < &a2[a4]);
    v6 -= 2;
    *v5-- = v8;
  }
  while (v6 >= result);
  return result;
}

_WORD *v_set_qs(_WORD *result, __int16 a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      *result++ = a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t BET3FXD__wave_t__convertFromF0ToTp(_DWORD *a1, unsigned int a2)
{
  if (a2) {
    return (unsigned __int16)((*a1 << 12) / a2);
  }
  else {
    LOWORD(v2) = 0;
  }
  return (unsigned __int16)v2;
}

uint64_t wave_t__convertFromF0ToTp_SR(unsigned int a1, int a2)
{
  if (a1) {
    return (unsigned __int16)((a2 << 12) / a1);
  }
  else {
    LOWORD(v2) = 0;
  }
  return (unsigned __int16)v2;
}

uint64_t BET3FXD__wave_t__convertFromMsecToTp(_DWORD *a1, int a2)
{
  return (unsigned __int16)((1049 * a2 * *a1) >> 14);
}

uint64_t BET3FXD__wave_t__setSampleRateHz(_DWORD *a1, uint64_t a2)
{
  if (!a1 || (int)a2 < 1) {
    return a2;
  }
  *a1 = a2;
  a1[1] = a2 >> 1;
  if ((int)a2 <= 11999)
  {
    if (a2 == 8000)
    {
      int v2 = 268435;
      goto LABEL_15;
    }
    if (a2 != 11025) {
      return a2;
    }
    unsigned __int16 v3 = -1825;
LABEL_13:
    int v2 = v3 | 0x20000;
    goto LABEL_15;
  }
  switch(a2)
  {
    case 0x2EE0:
      unsigned __int16 v3 = -17651;
      goto LABEL_13;
    case 0x3E80:
      unsigned __int16 v3 = 3146;
      goto LABEL_13;
    case 0x5622:
      int v2 = 97392;
LABEL_15:
      a1[2] = v2;
      break;
  }
  return a2;
}

uint64_t BET3FXD__MFVSyn__loadExcTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  unsigned __int8 v49 = 0;
  int v47 = 0;
  int v48 = 0;
  memset(__dst, 0, sizeof(__dst));
  __src = 0;
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    if ((ssftriff_reader_OpenChunk(a2, &v48, (unsigned int *)&v47, &__src, a5, a6, a7, a8) & 0x80000000) == 0
      && !(v48 ^ 0x44485845 | v49))
    {
      unsigned int v46 = 64;
      if ((ssftriff_reader_ReadStringZ(a2, (uint64_t)__src, v47, 0, __dst, &v46) & 0x80000000) == 0
        && (unint64_t)v46 + 16 >= v47)
      {
        char v11 = (char *)__src + v46;
        __src = v11;
        *(_DWORD *)(a1 + 472) = *(_DWORD *)v11;
        __src = v11 + 4;
        *(_WORD *)(a1 + 488) = *((_WORD *)v11 + 2);
        __src = v11 + 6;
        *(_WORD *)(a1 + 490) = *((_WORD *)v11 + 3);
        __src = v11 + 8;
        *(_WORD *)(a1 + 492) = *((_WORD *)v11 + 4);
        __src = v11 + 10;
        *(_WORD *)(a1 + 494) = *((_WORD *)v11 + 5);
        __src = v11 + 12;
        *(_WORD *)(a1 + 496) = *((_WORD *)v11 + 6);
        __src = v11 + 14;
        *(_WORD *)(a1 + 498) = *((_WORD *)v11 + 7);
        __src = v11 + 16;
        if ((ssftriff_reader_CloseChunk(a2) & 0x80000000) == 0
          && (ssftriff_reader_OpenChunk(a2, &v48, (unsigned int *)&v47, &__src, v12, v13, v14, v15) & 0x80000000) == 0
          && !(v48 ^ 0x54445845 | v49))
        {
          if (*(_WORD *)(a1 + 498))
          {
            uint64_t v17 = heap_Calloc(*(void **)(*(void *)a1 + 8), *(unsigned int *)(a1 + 472), 24);
            *(void *)(a1 + 480) = v17;
            if (v17)
            {
              uint64_t v18 = heap_Calloc(*(void **)(*(void *)a1 + 8), ((*(__int16 *)(a1 + 492) + *(__int16 *)(a1 + 488)) * *(_DWORD *)(a1 + 472)), 2);
              uint64_t v19 = *(uint64_t **)(a1 + 480);
              *uint64_t v19 = v18;
              if (v18)
              {
                uint64_t v20 = *(unsigned int *)(a1 + 472);
                if ((int)v20 > 1)
                {
                  uint64_t v21 = 2 * *(__int16 *)(a1 + 488);
                  uint64_t v22 = v18 + v21;
                  int v23 = v19 + 3;
                  uint64_t v24 = v20 - 1;
                  do
                  {
                    *int v23 = v22;
                    v23 += 3;
                    v22 += v21;
                    --v24;
                  }
                  while (v24);
                }
                if ((int)v20 < 1) {
                  return ((int)ssftriff_reader_CloseChunk(a2) >> 31);
                }
                uint64_t v25 = v19[3 * (v20 - 1)] + 2 * *(__int16 *)(a1 + 488);
                uint64_t v26 = 2 * *(__int16 *)(a1 + 492);
                int v27 = v19 + 1;
                do
                {
                  *int v27 = v25;
                  v27 += 3;
                  v25 += v26;
                  --v20;
                }
                while (v20);
                uint64_t v28 = 0;
                int v29 = (char *)__src;
LABEL_24:
                memmove(*(void **)(*(void *)(a1 + 480) + 24 * v28), v29, 2 * (*(_WORD *)(a1 + 488) & 0x7FFF));
                __int16 v30 = *(_WORD *)(a1 + 488);
                int v31 = (char *)__src + 2 * (v30 & 0x7FFF);
                __src = v31;
                for (int i = v30 & 0x7FFF; ; int i = v33)
                {
                  unsigned int v33 = i - 1;
                  if (i == 1)
                  {
                    __int16 v35 = 0;
                    uint64_t v34 = *(void *)(*(void *)(a1 + 480) + 24 * v28);
                  }
                  else
                  {
                    if (!i)
                    {
                      memmove(*(void **)(*(void *)(a1 + 480) + 24 * v28 + 8), v31, 2 * (*(_WORD *)(a1 + 492) & 0x7FFF));
                      __int16 v36 = *(_WORD *)(a1 + 492);
                      int v37 = (char *)__src + 2 * (v36 & 0x7FFF);
                      __src = v37;
                      for (int j = v36 & 0x7FFF; ; int j = v39)
                      {
                        unsigned int v39 = j - 1;
                        if (j == 1)
                        {
                          __int16 v41 = 0;
                          uint64_t v40 = *(void *)(*(void *)(a1 + 480) + 24 * v28 + 8);
                        }
                        else
                        {
                          if (!j)
                          {
                            int v42 = *(_DWORD *)v37;
                            __src = v37 + 4;
                            uint64_t v43 = *(void *)(a1 + 480) + 24 * v28;
                            *(_DWORD *)(v43 + 16) = v42;
                            *(_WORD *)(v43 + 20) = *((_WORD *)v37 + 2);
                            uint64_t v44 = __src;
                            __src = (char *)__src + 2;
                            *(_WORD *)(*(void *)(a1 + 480) + 24 * v28 + 22) = v44[1];
                            int v29 = (char *)__src + 2;
                            __src = (char *)__src + 2;
                            if (++v28 >= *(int *)(a1 + 472)) {
                              return ((int)ssftriff_reader_CloseChunk(a2) >> 31);
                            }
                            goto LABEL_24;
                          }
                          uint64_t v40 = *(void *)(*(void *)(a1 + 480) + 24 * v28 + 8);
                          __int16 v41 = *(_WORD *)(v40 + 2 * (j - 2));
                        }
                        *(_WORD *)(v40 + 2 * v39) ^= v41;
                      }
                    }
                    uint64_t v34 = *(void *)(*(void *)(a1 + 480) + 24 * v28);
                    __int16 v35 = *(_WORD *)(v34 + 2 * (i - 2));
                  }
                  *(_WORD *)(v34 + 2 * v33) ^= v35;
                }
              }
            }
          }
          else
          {
            uint64_t v16 = **(void **)(a1 + 480);
            if (v16)
            {
              heap_Free(0, v16);
              heap_Free(0, *(void *)(a1 + 480));
            }
          }
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t BET3FXD__MFVSyn__releaseExcTable(void *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = (uint64_t *)a1[60];
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  if (*v2)
  {
    heap_Free(*(void **)(*a1 + 8), *v2);
    int v2 = (uint64_t *)a1[60];
  }
  heap_Free(*(void **)(*a1 + 8), (uint64_t)v2);
  return 0;
}

uint64_t RccSyn__init_Synthesis(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v5 = 2164269062;
  long long v12 = xmmword_26C21F790;
  long long v13 = xmmword_26C21F780;
  *(void *)a2 = a1;
  if (!PRMBLK_CreateFromMRCC_Param(a1, 2, (void *)(a2 + 32), (uint64_t)&v13, (uint64_t)&v12, 0, a3, 1))
  {
    unint64_t v6 = *(uint64_t **)(a2 + 32);
    uint64_t v7 = *(uint64_t **)(a2 + 40);
    *uint64_t v7 = a1;
    *unint64_t v6 = a1;
    uint64_t v8 = v7[1];
    if (!Mrcc2Rr_InitByProps(0, v6) && !Rr2Pcm_InitByProps(0, v7))
    {
      MrccInput_Init(a1, a2 + 48);
      int v9 = *(_DWORD *)(v8 + 24);
      if (v9 <= *(_DWORD *)(v8 + 28)) {
        int v9 = *(_DWORD *)(v8 + 28);
      }
      *(_DWORD *)(a2 + 260) = v9;
      RrInput_Init(a1, a2 + 160);
      *(_DWORD *)(a2 + 256) = *(_DWORD *)(v8 + 24);
      uint64_t v10 = heap_Alloc(*(void *)(a1 + 8), 2 * *(unsigned int *)(a2 + 260));
      *(void *)(a2 + 264) = v10;
      if (v10) {
        return 0;
      }
      else {
        return 2164269062;
      }
    }
  }
  return v5;
}

uint64_t *Mrcc2Rr_alloc_callback(uint64_t a1, uint64_t a2)
{
  return Mrcc2Rr_AllocateAndInit(a1, a2, 1);
}

uint64_t *Rr2Pcm_alloc_callback(uint64_t a1, int *a2)
{
  return Rr2Pcm_AllocateAndInit(a1, a2, 1);
}

uint64_t Mrcc2Rr_set_callback(int a1, uint64_t a2, char *__s1, const char *a4, unsigned char *a5)
{
  return Mrcc2Rr_SetProperty(*(_DWORD **)(a2 + 8), __s1, a4, a5);
}

BOOL Rr2Pcm_set_callback(int a1, uint64_t a2, char *a3, const char *a4)
{
  return Rr2Pcm_SetProperty(a1, *(void *)(a2 + 8), a3, a4);
}

uint64_t RccSyn__SynthesisOneFrame(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v7 = *(void **)(a1 + 32);
  unint64_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = a1 + 160;
  RrInput_Reset(a1 + 160);
  if (Mrcc2Rr_ProcessFrame(v7, a1 + 48, v9)) {
    return 7;
  }
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(v8 + 24);
  if (Rr2Pcm_ProcessFrame(v6, v9, a1 + 248)) {
    return 10;
  }
  uint64_t result = 2164269062;
  if (a2)
  {
    if (a3)
    {
      uint64_t result = 0;
      *a2 = *(_DWORD *)(a1 + 256);
      *a3 = *(void *)(a1 + 264);
    }
  }
  return result;
}

void *RccSyn__deinit_Synthesis(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    Mrcc2Rr_Deallocate(v2);
    *(void *)(a1 + 32) = 0;
  }
  unsigned __int16 v3 = *(void **)(a1 + 40);
  if (v3)
  {
    Rr2Pcm_Deallocate(v3);
    *(void *)(a1 + 40) = 0;
  }
  RrInput_DeallocateData((int *)(a1 + 160));
  MrccInput_DeallocateData((void *)(a1 + 48));
  uint64_t result = MrccInput_DeallocateData((void *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 264);
  if (v5)
  {
    uint64_t result = heap_Free(*(void **)(*(void *)a1 + 8), v5);
    *(void *)(a1 + 264) = 0;
  }
  return result;
}

double RccSyn__reset_Synthesis(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  Rr2Pcm_Reset(*(void *)(a1 + 40));
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1).n128_u64[0];
  return result;
}

uint64_t PRMBLK_ReadParameters(uint64_t a1, void *a2, int a3, _DWORD *a4)
{
  if (a3 != 2) {
    return 3;
  }
  uint64_t v85 = v4;
  uint64_t v86 = v5;
  uint64_t v9 = *(_DWORD **)(*a2 + 8);
  int v10 = a4[4];
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t result = 1;
    if (v10 <= 11024)
    {
      if (!v10)
      {
        v9[2] = 0;
        v9[4] = 0;
        goto LABEL_22;
      }
      if (v10 == 8000)
      {
LABEL_13:
        int v10 = v9[4];
        if (v10 <= 0)
        {
          int v10 = 256;
LABEL_20:
          v9[4] = v10;
        }
LABEL_22:
        v9[5] = (v10 >> 1) + 1;
        goto LABEL_23;
      }
      if (v10 != 11000) {
        return result;
      }
    }
    else
    {
      if (v10 > 21999)
      {
        if (v10 != 22050 && v10 != 22000) {
          return result;
        }
        v9[2] = 22000;
LABEL_18:
        int v10 = v9[4];
        if (v10 <= 0)
        {
          int v10 = 512;
          goto LABEL_20;
        }
        goto LABEL_22;
      }
      if (v10 != 11025)
      {
        if (v10 != 16000) {
          return result;
        }
        goto LABEL_18;
      }
    }
    v9[2] = 11000;
    goto LABEL_13;
  }
LABEL_23:
  unsigned int v12 = a4[73];
  if ((v12 & 0x80000000) == 0 && Mrcc2Rr_SetSampleRateDependentParams(v9, v9[2], v12)) {
    return 1;
  }
  int v13 = a4[6];
  if ((v13 & 0x80000000) == 0) {
    v9[3] = v13;
  }
  int v14 = a4[43];
  if ((v14 & 0x80000000) == 0) {
    v9[14] = v14;
  }
  int v15 = a4[44];
  if ((v15 & 0x80000000) == 0) {
    v9[6] = v15;
  }
  int v16 = a4[45];
  if ((v16 & 0x80000000) == 0) {
    v9[7] = v16;
  }
  int v17 = a4[5];
  if ((v17 & 0x80000000) == 0) {
    v9[8] = v17;
  }
  int v18 = a4[46];
  if ((v18 & 0x80000000) == 0) {
    v9[15] = v18;
  }
  int v19 = a4[8];
  if ((v19 & 0x80000000) == 0) {
    v9[9] = v19;
  }
  int v20 = a4[9];
  if ((v20 & 0x80000000) == 0) {
    v9[10] = v20;
  }
  int v21 = a4[47];
  if ((v21 & 0x80000000) == 0) {
    v9[11] = v21;
  }
  int v22 = a4[26];
  if ((v22 & 0x80000000) == 0) {
    v9[12] = v22;
  }
  int v23 = a4[7];
  if ((v23 & 0x80000000) == 0) {
    v9[13] = v23;
  }
  uint64_t v24 = *(void *)(a2[1] + 8);
  int v25 = a4[4];
  if (v25 < 0) {
    goto LABEL_84;
  }
  uint64_t result = 1;
  if (v25 > 15999)
  {
    int v26 = 16000;
    if (v25 == 16000)
    {
      *(_DWORD *)(v24 + 8) = 16000;
      int v27 = *(_DWORD *)(v24 + 12);
      int v28 = 512;
      if (v27 > 0)
      {
        int v29 = 0;
        int v30 = 160;
        int v31 = 80;
        goto LABEL_70;
      }
      int v29 = 0;
      *(_DWORD *)(v24 + 12) = 512;
      int v30 = 160;
      int v31 = 80;
    }
    else
    {
      if (v25 != 22050 && v25 != 22000) {
        return result;
      }
      int v26 = 22000;
      *(_DWORD *)(v24 + 8) = 22000;
      int v27 = *(_DWORD *)(v24 + 12);
      int v28 = 512;
      if (v27 > 0)
      {
        int v29 = 1;
        int v30 = 220;
        int v31 = 110;
        goto LABEL_70;
      }
      *(_DWORD *)(v24 + 12) = 512;
      int v29 = 1;
      int v30 = 220;
      int v31 = 110;
    }
    int v27 = 512;
    goto LABEL_70;
  }
  int v26 = 8000;
  if (v25 == 8000)
  {
    *(_DWORD *)(v24 + 8) = 8000;
    int v27 = *(_DWORD *)(v24 + 12);
    int v28 = 256;
    if (v27 > 0)
    {
      int v29 = 0;
      int v30 = 80;
      int v31 = 40;
      goto LABEL_70;
    }
    int v29 = 0;
    *(_DWORD *)(v24 + 12) = 256;
    int v30 = 80;
    int v31 = 40;
LABEL_67:
    int v27 = 256;
    goto LABEL_70;
  }
  int v26 = 11000;
  if (v25 != 11000 && v25 != 11025) {
    return result;
  }
  *(_DWORD *)(v24 + 8) = 11000;
  int v27 = *(_DWORD *)(v24 + 12);
  int v28 = 256;
  if (v27 <= 0)
  {
    int v29 = 0;
    *(_DWORD *)(v24 + 12) = 256;
    int v30 = 110;
    int v31 = 55;
    goto LABEL_67;
  }
  int v29 = 0;
  int v30 = 110;
  int v31 = 55;
LABEL_70:
  *(_DWORD *)(v24 + 44) = v30;
  unsigned int v32 = v27 >> 1;
  int v33 = *(_DWORD *)(v24 + 32);
  if (*(_DWORD *)(v24 + 28) < (signed int)(v27 >> 1)) {
    unsigned int v32 = *(_DWORD *)(v24 + 28);
  }
  *(_DWORD *)(v24 + 24) = v31;
  *(_DWORD *)(v24 + 28) = v32;
  if (v31 >= v33) {
    int v34 = v33;
  }
  else {
    int v34 = v31;
  }
  *(_DWORD *)(v24 + 32) = v34;
  if (*(_DWORD *)(v24 + 16) < v27) {
    int v27 = *(_DWORD *)(v24 + 16);
  }
  *(_DWORD *)(v24 + 16) = v27;
  *(_DWORD *)(v24 + 20) = v28;
  if (v29) {
    int v35 = 4;
  }
  else {
    int v35 = 0;
  }
  if (v29) {
    int v36 = 968;
  }
  else {
    int v36 = 1024;
  }
  *(_DWORD *)(v24 + 168) = v35;
  *(_DWORD *)(v24 + 172) = v36;
  Rr2Pcm_ProcessMvf_SetHbThr(v24 + 200, *(_DWORD *)(v24 + 136), v26);
LABEL_84:
  int v37 = *(_DWORD *)(v24 + 12);
  *(int8x8_t *)(v24 + 168) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(_DWORD *)(v24 + 8) == 22000), 0x1FuLL)), (int8x8_t)0x3C800000004, (int8x8_t)0x40000000000);
  *(_DWORD *)(v24 + 44) = 2 * *(_DWORD *)(v24 + 24);
  if (v37 >= 0) {
    int v38 = v37;
  }
  else {
    int v38 = v37 + 1;
  }
  *(_DWORD *)(v24 + 288) = v38 >> 1;
  *(_DWORD *)(v24 + 284) = PositiveShortLog2((__int16)v37);
  int v39 = *(_DWORD *)(v24 + 12);
  *(_DWORD *)(v24 + 292) = v39;
  *(_DWORD *)(v24 + 296) = 440 * v39 / *(_DWORD *)(v24 + 44) / 256;
  Rr2Pcm_SetDerivedParams((int *)v24);
  uint64_t v40 = *(int *)(v24 + 8);
  uint64_t v41 = *(int *)(v24 + 12);
  *(_DWORD *)(v24 + 300) = 32 * v40 / v41;
  *(_DWORD *)(v24 + 304) = (v41 << 20) / (32 * v40);
  *(_DWORD *)(v24 + 308) = ((int)v40 + 860160 * *(_DWORD *)(v24 + 24)) / (2 * (int)v40);
  Rr2Pcm_ProcessMvf_SetHbThr(v24 + 200, *(_DWORD *)(v24 + 136), v40);
  int v42 = a4[10];
  if ((v42 & 0x80000000) == 0)
  {
    *(_DWORD *)(v24 + 24) = v42;
    Rr2Pcm_SetDerivedParams((int *)v24);
  }
  int v43 = a4[72];
  if ((v43 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 20) = v43;
  }
  int v44 = a4[11];
  if ((v44 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 184) = v44;
  }
  int v45 = a4[25];
  if ((v45 & 0x80000000) == 0)
  {
    *(_DWORD *)(v24 + 196) = v45;
    if (v45)
    {
      if (!*(_DWORD *)(v24 + 248))
      {
        __sprintf_chk(v84, 0, 3uLL, "%d", 3);
        if (Rr2Pcm_ProcessMvf_SetProperty(a1, v24 + 200, "SYN_DEBUZZ_PROCESS_MVF_SMOOTH_WIN", v84)) {
          return 2;
        }
      }
    }
  }
  int v46 = a4[74];
  if ((v46 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 64) = v46;
  }
  int v47 = a4[13];
  if ((v47 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 76) = v47;
  }
  int v48 = a4[18];
  if ((v48 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 80) = v48;
  }
  int v49 = a4[17];
  if ((v49 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 84) = v49;
  }
  int v50 = a4[14];
  if ((v50 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 96) = v50;
  }
  int v51 = a4[19];
  if ((v51 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 100) = v51;
  }
  int v52 = a4[22];
  if ((v52 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 104) = 32 * v52;
  }
  int v53 = a4[23];
  if ((v53 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 108) = 32 * v53;
  }
  int v54 = a4[20];
  if ((v54 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 112) = 32 * v54;
  }
  int v55 = a4[21];
  if ((v55 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 116) = 32 * v55;
  }
  int v56 = a4[48];
  if ((v56 & 0x80000000) == 0)
  {
    *(_DWORD *)(v24 + 120) = v56;
    *(_DWORD *)(v24 + 124) = v56;
  }
  int v57 = a4[49];
  if ((v57 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 120) = v57;
  }
  int v58 = a4[50];
  if ((v58 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 124) = v58;
  }
  int v59 = a4[15];
  if ((v59 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 128) = v59;
  }
  int v60 = a4[16];
  if ((v60 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 132) = v60;
  }
  int v61 = a4[12];
  if ((v61 & 0x80000000) == 0)
  {
    *(_DWORD *)(v24 + 136) = v61;
    Rr2Pcm_ProcessMvf_SetHbThr(v24 + 200, v61, *(_DWORD *)(v24 + 8));
  }
  int v62 = a4[51];
  if ((v62 & 0x80000000) == 0)
  {
    *(_DWORD *)(v24 + 156) = v62;
    if (v62) {
      *(_WORD *)(v24 + 164) = 31785;
    }
  }
  int v63 = a4[52];
  if ((v63 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 268) = v63;
  }
  int v64 = a4[53];
  if ((v64 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 272) = v64;
  }
  int v65 = a4[46];
  if ((v65 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 280) = v65;
  }
  int v66 = a4[54];
  if ((v66 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 160) = v66;
  }
  int v67 = a4[55];
  if ((v67 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 144) = *(int *)(v24 + 12) * (uint64_t)v67 / (32 * *(int *)(v24 + 8));
  }
  int v68 = a4[56];
  if ((v68 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 148) = *(int *)(v24 + 12) * (uint64_t)v68 / (32 * *(int *)(v24 + 8));
  }
  int v69 = a4[57];
  if ((v69 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 140) = *(int *)(v24 + 12) * (uint64_t)v69 / (32 * *(int *)(v24 + 8));
  }
  int v70 = a4[24];
  if ((v70 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 60) = v70;
  }
  int v71 = a4[27];
  if ((v71 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 276) = v71;
  }
  if ((a4[33] & 0x80000000) == 0)
  {
    uint64_t v72 = *(void *)(v24 + 232);
    if (v72)
    {
      heap_Free(*(void **)(a1 + 8), v72);
      *(void *)(v24 + 232) = 0;
    }
    uint64_t v73 = heap_Alloc(*(void *)(a1 + 8), 12);
    *(void *)(v24 + 232) = v73;
    if (!v73) {
      return 2;
    }
    *(_DWORD *)(v73 + 8) = 0;
    *(void *)uint64_t v73 = 0;
    *(_DWORD *)(v24 + 248) = 3;
  }
  int v74 = a4[34];
  if ((v74 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 220) = v74;
  }
  int v75 = a4[35];
  if ((v75 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 216) = v75;
  }
  int v76 = a4[36];
  if ((v76 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 208) = v76;
  }
  int v77 = a4[37];
  if ((v77 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 252) = v77;
  }
  int v78 = a4[38];
  if ((v78 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 256) = v78;
  }
  int v79 = a4[67];
  if ((v79 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 28) = v79;
  }
  int v80 = a4[68];
  if ((v80 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 32) = v80;
  }
  int v81 = a4[69];
  if ((v81 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 16) = v81;
  }
  int v82 = a4[70];
  if ((v82 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 36) = v82;
  }
  int v83 = a4[71];
  uint64_t result = 0;
  if ((v83 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 40) = v83;
  }
  return result;
}

uint64_t PRMBLK_CreateFromMRCC_Param(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(void, _DWORD *), _DWORD *a7, int a8)
{
  uint64_t v9 = a3;
  if (a2 <= 0)
  {
    return PRMBLK_ReadParameters(a1, a3, a2, a7);
  }
  else
  {
    unint64_t v15 = 0;
    uint64_t v16 = 8 * a2;
    uint64_t v17 = a2;
    do
    {
      uint64_t v18 = (*(uint64_t (**)(uint64_t, _DWORD *))(a4 + v15))(a1, a7);
      v9[v15 / 8] = v18;
      if (!v18) {
        return 4;
      }
      v15 += 8;
    }
    while (v16 != v15);
    uint64_t result = PRMBLK_ReadParameters(a1, v9, a2, a7);
    if (a6)
    {
      do
      {
        int v20 = (*a6)(*v9, a7);
        if (v20) {
          BOOL v21 = a8 == 0;
        }
        else {
          BOOL v21 = 0;
        }
        if (v21) {
          return 3;
        }
        ++v9;
        ++a6;
        --v17;
      }
      while (v17);
      if (v20) {
        return 3;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t Mrcc2Rr_SetProperty(_DWORD *a1, char *__s1, const char *a3, unsigned char *a4)
{
  if (!strcmp(__s1, "PROD_CODE"))
  {
    int v8 = atoi(a3);
    if (Mrcc2Rr_SetSampleRateDependentParams(a1, v8, a1[4])) {
      return 1;
    }
  }
  uint64_t result = 0;
  *a4 = 0;
  return result;
}

uint64_t Mrcc2Rr_SetSampleRateDependentParams(_DWORD *a1, int a2, unsigned int a3)
{
  uint64_t v3 = 1;
  if (a2 <= 11024)
  {
    if (!a2)
    {
      unsigned int v7 = 0;
      a1[2] = 0;
LABEL_20:
      uint64_t v3 = 0;
      a1[4] = v7;
      a1[5] = (v7 >> 1) + 1;
      return v3;
    }
    if (a2 == 8000)
    {
      a1[2] = 8000;
      goto LABEL_16;
    }
    if (a2 != 11000) {
      return v3;
    }
LABEL_9:
    a1[2] = 11000;
LABEL_16:
    BOOL v5 = __OFSUB__(a3, 1);
    BOOL v4 = (int)(a3 - 1) < 0;
    int v6 = 256;
LABEL_17:
    if (v4 != v5) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = a3;
    }
    goto LABEL_20;
  }
  if (a2 <= 21999)
  {
    if (a2 != 11025)
    {
      if (a2 == 16000)
      {
        a1[2] = 16000;
LABEL_13:
        BOOL v5 = __OFSUB__(a3, 1);
        BOOL v4 = (int)(a3 - 1) < 0;
        int v6 = 512;
        goto LABEL_17;
      }
      return v3;
    }
    goto LABEL_9;
  }
  if (a2 == 22050 || a2 == 22000)
  {
    a1[2] = 22000;
    goto LABEL_13;
  }
  return v3;
}

uint64_t *Mrcc2Rr_AllocateAndInit(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (uint64_t *)heap_Calloc(*(void **)(a1 + 8), 1, 32);
  if (v6)
  {
    Mrcc2Rr_Init(a1, a2, v6, a3);
    if (v7)
    {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v6);
      return 0;
    }
  }
  return v6;
}

void Mrcc2Rr_Init(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  *a3 = a1;
  int v8 = (_OWORD *)heap_Alloc(*(void *)(a1 + 8), 64);
  a3[1] = (uint64_t)v8;
  if (v8)
  {
    v8[2] = 0u;
    v8[3] = 0u;
    *int v8 = 0u;
    v8[1] = 0u;
    uint64_t v9 = (_OWORD *)heap_Alloc(*(void *)(a1 + 8), 64);
    a3[2] = (uint64_t)v9;
    if (v9)
    {
      v9[2] = 0u;
      v9[3] = 0u;
      *uint64_t v9 = 0u;
      v9[1] = 0u;
      int v10 = (_OWORD *)heap_Alloc(*(void *)(a1 + 8), 176);
      a3[3] = (uint64_t)v10;
      if (v10)
      {
        v10[9] = 0u;
        v10[10] = 0u;
        v10[7] = 0u;
        v10[8] = 0u;
        v10[5] = 0u;
        v10[6] = 0u;
        v10[3] = 0u;
        v10[4] = 0u;
        v10[1] = 0u;
        v10[2] = 0u;
        _OWORD *v10 = 0u;
        Mrcc2Rr_InitProps((uint64_t)v10, a2, a3[1]);
        if (!(v11 | a4))
        {
          unsigned int v12 = (int *)a3[1];
          Mrcc2Rr_InitByProps(v12, a3);
        }
      }
    }
  }
}

double Mrcc2Rr_InitProps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    LODWORD(a2) = *(_DWORD *)(a2 + 16);
  }
  if (!Mrcc2Rr_SetSampleRateDependentParams((_DWORD *)a3, a2, 0))
  {
    *(_DWORD *)(a3 + 12) = -1;
    *(_OWORD *)(a3 + 24) = xmmword_20D6A0810;
    *(_OWORD *)(a3 + 40) = xmmword_20D6A0820;
    *(void *)&double result = 0x100000018;
    *(void *)(a3 + 56) = 0x100000018;
  }
  return result;
}

uint64_t Mrcc2Rr_InitByProps(int *a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    a2[1] = (uint64_t)a1;
  }
  else
  {
    uint64_t v3 = (int *)a2[1];
  }
  uint64_t v4 = a2[2];
  BOOL v5 = (int *)a2[3];
  if (!v3[7] && !v3[6]) {
    return 1;
  }
  if (!Init_SinTable(*a2, a2[2], 0)) {
    Init_MelTable(*a2, v4 + 32, 0, v3[2]);
  }
  if (!v3[7]) {
    return 0;
  }
  uint64_t result = Mrcc_InitByProps(*a2, v5, v4, (uint64_t)v3, 0);
  if (!result) {
    return 0;
  }
  return result;
}

double MrccInput_Init(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  double result = 0.0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_20D6072C0;
  *(_OWORD *)(a2 + 32) = xmmword_20D6A0830;
  return result;
}

uint64_t MrccInput_AllocateData(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2) {
    BOOL v3 = v2 < (int)a2;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v6);
    *(void *)(a1 + 8) = 0;
  }
  int v7 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), 4 * a2);
  *(void *)(a1 + 8) = v7;
  if (!v7) {
    return 2;
  }
  bzero(v7, 4 * a2);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 16) = a2;
  return result;
}

void *MrccInput_DeallocateData(void *result)
{
  if (*((_DWORD *)result + 12))
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t result = heap_Free(*(void **)(*result + 8), v2);
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t Mrcc2Rr_ProcessFrame(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (_DWORD *)a1[1];
  int v7 = (int *)a1[3];
  int v8 = v6[7];
  int v9 = v6[3];
  if (v9 < 1)
  {
    if (v8) {
      goto LABEL_12;
    }
    return 1;
  }
  int v10 = *(_DWORD *)(a2 + 16);
  if (v10 != v9 && v10 > 0 || v8 == 0) {
    return 1;
  }
LABEL_12:
  int v14 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a3 + 76) = v14;
  *(_DWORD *)(a3 + 64) = -1;
  int v15 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a3 + 44) = v15;
  *(_DWORD *)(a3 + 48) = v15;
  uint64_t v16 = *(void *)(a2 + 24);
  *(void *)(a3 + 56) = v16;
  *(_DWORD *)(a3 + 80) = *(_DWORD *)(a2 + 32);
  if (v15)
  {
    int v17 = v6[6];
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v17;
    if (v16)
    {
      int v18 = v6[2];
      int v19 = v18 + (((v15 + 2097152000) / (2 * v15)) << 6);
LABEL_18:
      int v20 = v19 / (2 * v18);
      goto LABEL_19;
    }
LABEL_17:
    int v18 = v6[2];
    int v19 = v18 + (v15 << 9);
    goto LABEL_18;
  }
  int v17 = v6[6] & *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a3 + 8) = 1;
  *(_DWORD *)(a3 + 12) = v17;
  if (!v16) {
    goto LABEL_17;
  }
  int v20 = 0;
LABEL_19:
  BOOL v21 = *(_DWORD **)(a2 + 8);
  int v22 = *(_DWORD *)(a2 + 16);
  int v23 = *(_DWORD *)(a2 + 36);
  v7[7] = v14;
  v7[8] = v23;
  uint64_t result = Mrcc_PutHarmFrqs((uint64_t)v7, v20, 0x4000, v6[13]);
  if (result) {
    return result;
  }
  uint64_t result = Mrcc_PutCoefs(v7, v21, v22, 0);
  if (result) {
    return result;
  }
  uint64_t v24 = *(void *)(a3 + 24);
  if (v24)
  {
    if (*(_DWORD *)(a3 + 72) >= v7[26]) {
      goto LABEL_27;
    }
    heap_Free(*(void **)(*a1 + 8), v24);
    *(void *)(a3 + 24) = 0;
  }
  int v25 = (void *)heap_Alloc(*(void *)(*a1 + 8), 4 * v7[23]);
  *(void *)(a3 + 24) = v25;
  if (!v25) {
    return 2;
  }
  bzero(v25, 4 * v7[23]);
  *(_DWORD *)(a3 + 72) = v7[23];
LABEL_27:
  if (!v17)
  {
    *(_DWORD *)(a3 + 40) = v7[26];
    Mrcc_Enhance((uint64_t)v7);
    goto LABEL_37;
  }
  uint64_t v26 = *(void *)(a3 + 32);
  if (v26)
  {
    int v27 = v7[26];
    if (*(_DWORD *)(a3 + 68) >= v27) {
      goto LABEL_33;
    }
    heap_Free(*(void **)(*a1 + 8), v26);
    *(void *)(a3 + 32) = 0;
  }
  int v28 = (void *)heap_Alloc(*(void *)(*a1 + 8), 4 * v7[23]);
  *(void *)(a3 + 32) = v28;
  if (!v28) {
    return 2;
  }
  bzero(v28, 4 * v7[23]);
  *(_DWORD *)(a3 + 68) = v7[23];
  int v27 = v7[26];
LABEL_33:
  *(_DWORD *)(a3 + 40) = v27;
  Mrcc_Enhance((uint64_t)v7);
  if (*(_DWORD *)(a2 + 44))
  {
LABEL_37:
    int v29 = 0;
    goto LABEL_38;
  }
  int v29 = 2;
LABEL_38:
  return Mrcc_Solve_AmpPhase((uint64_t)v7, (void **)a3, v29, 1);
}

void Mrcc2Rr_Deallocate(void *a1)
{
  Mrcc2Rr_Clear(a1);
  if (a1)
  {
    uint64_t v2 = *(void **)(*a1 + 8);
    heap_Free(v2, (uint64_t)a1);
  }
}

void Mrcc2Rr_Clear(void *a1)
{
  if (*(_DWORD *)(a1[1] + 28)) {
    Mrcc_Clear((void *)*a1, (void *)a1[3]);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(*a1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(*a1);
  uint64_t v2 = a1[1];
  if (v2)
  {
    heap_Free(*(void **)(*a1 + 8), v2);
    a1[1] = 0;
  }
  uint64_t v3 = a1[2];
  if (v3)
  {
    heap_Free(*(void **)(*a1 + 8), v3);
    a1[2] = 0;
  }
  uint64_t v4 = a1[3];
  if (v4)
  {
    heap_Free(*(void **)(*a1 + 8), v4);
    a1[3] = 0;
  }
}

uint64_t Init_MelTable(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(_DWORD *)(a2 + 24) = 0;
  if (a3) {
    int v4 = a3 + 1;
  }
  else {
    int v4 = 1025;
  }
  *(_DWORD *)(a2 + 16) = v4;
  unsigned int v5 = a3 & 0xFFFFFBFF;
  if ((a3 & 0xFFFFFBFF) == 0 && a4 == 22000)
  {
    uint64_t v6 = &alMelFrq_Q15_22000_1024;
LABEL_16:
    uint64_t result = 0;
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = &alNrmFrq_Q15_1024;
    *(_DWORD *)(a2 + 20) = 16;
    return result;
  }
  if (!v5 && a4 == 11000)
  {
    uint64_t v6 = &alMelFrq_Q15_11000_1024;
    goto LABEL_16;
  }
  if (!v5 && a4 == 16000)
  {
    uint64_t v6 = &alMelFrq_Q15_16000_1024;
    goto LABEL_16;
  }
  uint64_t result = 7;
  if (!v5 && a4 == 8000)
  {
    uint64_t v6 = &alMelFrq_Q15_8000_1024;
    goto LABEL_16;
  }
  return result;
}

uint64_t Get_MelValues(uint64_t result, int *a2, _DWORD *a3, int a4)
{
  *(_DWORD *)(result + 24) = 0;
  int v4 = (_DWORD *)(result + 24);
  if (a4 >= 1)
  {
    uint64_t v7 = result;
    uint64_t v8 = a4;
    do
    {
      int v9 = *a2++;
      uint64_t result = GetInterpolatedValue(*(void *)(v7 + 8), *(unsigned int **)v7, *(_DWORD *)(v7 + 16), v9, v4, 0);
      *a3++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t Mrcc_InitByProps(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int a5)
{
  a2[40] = *(_DWORD *)(a4 + 60);
  if (a5) {
    return 1;
  }
  unsigned int v7 = *(_DWORD *)(a4 + 32);
  unsigned int v8 = *(_DWORD *)(a4 + 52);
  a2[42] = *(_DWORD *)(a4 + 56);
  long long v9 = *(_OWORD *)(a4 + 36);
  uint64_t v10 = *(unsigned int *)(a4 + 20);
  unsigned int v12 = *(_DWORD *)(a4 + 8);
  int v11 = *(_DWORD *)(a4 + 12);
  *((void *)a2 + 16) = a3;
  *((void *)a2 + 17) = a3 + 32;
  *a2 = v11;
  if (v11 < 1) {
    return 8;
  }
  *(void *)&double v14 = v11 | 0xFFFFFFFF00000000;
  HIDWORD(v15) = 1;
  LODWORD(v15) = v11 - 2;
  if (v7 != 3) {
    *(void *)&double v15 = (v11 - 1);
  }
  if (v7) {
    double v14 = v15;
  }
  *(double *)(a2 + 1) = v14;
  a2[6] = v7;
  *(_OWORD *)(a2 + 9) = v9;
  a2[13] = 5;
  signed int v16 = 2 * v10 - 2;
  a2[23] = v10;
  a2[24] = v16;
  a2[25] = PositiveShortLog2((__int16)(2 * v10 - 2));
  int v17 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * *a2);
  *((void *)a2 + 2) = v17;
  if (!v17) {
    return 2;
  }
  bzero(v17, 4 * *a2);
  int v18 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * v10);
  *((void *)a2 + 7) = v18;
  if (!v18) {
    return 2;
  }
  bzero(v18, 4 * v10);
  int v19 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * v10);
  *((void *)a2 + 8) = v19;
  if (!v19) {
    return 2;
  }
  bzero(v19, 4 * v10);
  int v20 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * v10);
  *((void *)a2 + 9) = v20;
  if (!v20) {
    return 2;
  }
  bzero(v20, 4 * v10);
  BOOL v21 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * v10);
  *((void *)a2 + 10) = v21;
  if (!v21) {
    return 2;
  }
  bzero(v21, 4 * v10);
  int v22 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * (a2[24] + 2));
  *((void *)a2 + 18) = v22;
  if (!v22) {
    return 2;
  }
  bzero(v22, 4 * (a2[24] + 2));
  int v23 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * (a2[24] + 2));
  *((void *)a2 + 19) = v23;
  if (!v23) {
    return 2;
  }
  bzero(v23, 4 * (a2[24] + 2));
  a2[28] = v12;
  a2[29] = 0x4000;
  a2[30] = v8;
  a2[31] = 0x8000;
  uint64_t v24 = (int *)*((void *)a2 + 10);
  if ((int)v10 >= 1)
  {
    int v25 = 0;
    uint64_t v26 = (_DWORD *)*((void *)a2 + 10);
    uint64_t v27 = v10;
    do
    {
      *v26++ = v25;
      v25 += ((int)v10 + 0x7FFF) / v16;
      --v27;
    }
    while (v27);
  }
  warpFreqs((uint64_t)a2, v24, *((_DWORD **)a2 + 9), v10, a2 + 22);
  return 0;
}

uint64_t Mrcc_PutCoefs(int *a1, _DWORD *a2, int a3, int a4)
{
  uint64_t result = 6;
  if (a2 && a3 >= 1)
  {
    int v6 = *a1;
    if (*a1 < 1 || v6 == a3)
    {
      if (a4)
      {
        if (v6 >= 1)
        {
          uint64_t v8 = 0;
          uint64_t v9 = *((void *)a1 + 2);
          do
          {
            *(_DWORD *)(v9 + 4 * v8) = -a2[v8];
            ++v8;
          }
          while (v8 < *a1);
        }
      }
      else
      {
        memcpy(*((void **)a1 + 2), a2, 4 * v6);
      }
      uint64_t v20 = 0;
      int v10 = a1[42];
      LODWORD(v11) = a1[2];
      char v12 = v10 - 13;
      if (v10 >= 13 && (v11 & 0x80000000) == 0)
      {
        uint64_t v13 = 0;
        char v14 = v10 - 12;
        uint64_t v15 = *((void *)a1 + 2);
        uint64_t v16 = 1 << v12;
        do
        {
          uint64_t v17 = *(int *)(v15 + 4 * v13);
          if ((v16 & v17) != 0) {
            int v18 = ((int)v17 >> v14) + 1;
          }
          else {
            int v18 = (int)v17 >> v14;
          }
          *(_DWORD *)(v15 + 4 * v13) = v18;
          uint64_t v11 = a1[2];
        }
        while (v13++ < v11);
      }
      ScaleTo16BitSignedRange((int *)(*((void *)a1 + 2) + 4 * (int)v11 + 4), a1[1], (int *)&v20 + 1, (int *)&v20, 0, 0);
      uint64_t result = 0;
      a1[41] = v20 - HIDWORD(v20);
    }
    else
    {
      return 5;
    }
  }
  return result;
}

uint64_t warpFreqs(uint64_t result, int *a2, _DWORD *a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v6 = result;
  unsigned int v7 = *(_DWORD *)(result + 92);
  if ((int)v7 >= (int)a4) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = v7;
  }
  if (a2)
  {
    if (a3) {
      goto LABEL_6;
    }
  }
  else
  {
    a2 = *(int **)(result + 56);
    if (a3) {
      goto LABEL_6;
    }
  }
  a3 = *(_DWORD **)(result + 64);
LABEL_6:
  if (*(_DWORD *)(result + 120) == 1)
  {
    uint64_t v9 = *(void *)(result + 136);
    int v10 = *(_DWORD *)(v6 + 116);
    if (v10 < 0x4000)
    {
      if ((int)v8 < 1)
      {
        LODWORD(v8) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        while (a2[v11] <= v10)
        {
          if (v8 == ++v11) {
            goto LABEL_19;
          }
        }
        LODWORD(v8) = v11;
      }
    }
LABEL_19:
    uint64_t result = Get_MelValues(v9, a2, a3, v8);
    if (a5) {
      goto LABEL_20;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    if (a5) {
LABEL_20:
    }
      *a5 = v8;
  }
  return result;
}

uint64_t Mrcc_PutHarmFrqs(uint64_t a1, int a2, int a3, int a4)
{
  if (a2)
  {
    int v5 = *(_DWORD *)(a1 + 92) - 1;
    if (v5 >= a3 / a2 + 1) {
      int v6 = a3 / a2 + 1;
    }
    else {
      int v6 = *(_DWORD *)(a1 + 92) - 1;
    }
    *(_DWORD *)(a1 + 108) = v6;
    if (v5 >= 0x4000 / a2 + 1) {
      int v5 = 0x4000 / a2 + 1;
    }
    *(_DWORD *)(a1 + 104) = v5;
    *(_DWORD *)(a1 + 116) = a3;
    *(_DWORD *)(a1 + 120) = a4;
    unsigned int v7 = *(_DWORD **)(a1 + 56);
    *unsigned int v7 = 0;
    LODWORD(v8) = *(_DWORD *)(a1 + 104);
    if ((int)v8 >= 2)
    {
      uint64_t v9 = 1;
      int v10 = a2;
      do
      {
        v7[v9++] = v10;
        uint64_t v8 = *(int *)(a1 + 104);
        v10 += a2;
      }
      while (v9 < v8);
    }
    warpFreqs(a1, 0, 0, v8, (_DWORD *)(a1 + 108));
  }
  else
  {
    if (a3 == 0x4000)
    {
      int v11 = *(_DWORD *)(a1 + 92);
      int v12 = v11;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 92);
      int v13 = 2 * a3 * (v11 - 1) + 0x7FFF;
      if (((a3 * (v11 - 1)) & 0x40000000) == 0) {
        int v13 = 2 * a3 * (v11 - 1);
      }
      int v12 = (v13 >> 15) + 1;
    }
    *(_DWORD *)(a1 + 104) = v11;
    *(_DWORD *)(a1 + 108) = v12;
    *(_DWORD *)(a1 + 116) = a3;
    *(_DWORD *)(a1 + 120) = a4;
    memcpy(*(void **)(a1 + 56), *(const void **)(a1 + 80), 4 * v11);
    memcpy(*(void **)(a1 + 64), *(const void **)(a1 + 72), 4 * *(int *)(a1 + 88));
  }
  return 0;
}

void *Mrcc_Clear(void *result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2[2];
    if (v4)
    {
      uint64_t result = heap_Free((void *)result[1], v4);
      a2[2] = 0;
    }
    uint64_t v5 = a2[8];
    if (v5)
    {
      uint64_t result = heap_Free((void *)v3[1], v5);
      a2[8] = 0;
    }
    uint64_t v6 = a2[9];
    if (v6)
    {
      uint64_t result = heap_Free((void *)v3[1], v6);
      a2[9] = 0;
    }
    uint64_t v7 = a2[10];
    if (v7)
    {
      uint64_t result = heap_Free((void *)v3[1], v7);
      a2[10] = 0;
    }
    uint64_t v8 = a2[7];
    if (v8)
    {
      uint64_t result = heap_Free((void *)v3[1], v8);
      a2[7] = 0;
    }
    uint64_t v9 = a2[18];
    if (v9)
    {
      uint64_t result = heap_Free((void *)v3[1], v9);
      a2[18] = 0;
    }
    uint64_t v10 = a2[19];
    if (v10)
    {
      uint64_t result = heap_Free((void *)v3[1], v10);
      a2[19] = 0;
    }
  }
  return result;
}

uint64_t Mrcc_Enhance(uint64_t result)
{
  if (*(_DWORD *)(result + 104) >= *(_DWORD *)(result + 92)) {
    uint64_t v1 = 40;
  }
  else {
    uint64_t v1 = 36;
  }
  if (*(_DWORD *)(result + 24))
  {
    uint64_t v2 = *(int *)(result + 8);
    if (*(_DWORD *)(result + 36) != 0x8000 && *(int *)(result + 4) >= 1)
    {
      uint64_t v3 = 0;
      int v4 = *(_DWORD *)(result + v1);
      if (v4 >= 0) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = -v4;
      }
      int v6 = v5 & 0x7FFF;
      unsigned int v7 = v5 >> 15;
      uint64_t v8 = *(void *)(result + 16) + 4 * v2 + 4;
      signed int v9 = 0x8000;
      do
      {
        if (v9 >= 0) {
          unsigned int v10 = v9;
        }
        else {
          unsigned int v10 = -v9;
        }
        int v11 = (v9 >> 31) | 1;
        if (v4 < 0) {
          int v11 = -v11;
        }
        signed int v9 = ((v10 >> 15) * v6 + (((v10 & 0x7FFF) * v6 + 0x4000) >> 15) + v10 * v7) * v11;
        int v12 = *(_DWORD *)(v8 + 4 * v3);
        if (v12 >= 0) {
          unsigned int v13 = *(_DWORD *)(v8 + 4 * v3);
        }
        else {
          unsigned int v13 = -v12;
        }
        int v14 = (v12 >> 31) | 1;
        if (v9 >= 0) {
          unsigned int v15 = v9;
        }
        else {
          unsigned int v15 = -v9;
        }
        if (v9 < 0) {
          int v14 = -v14;
        }
        *(_DWORD *)(v8 + 4 * v3++) = ((v13 >> 15) * (v15 & 0x7FFF)
                                    + (((v13 & 0x7FFF) * (v15 & 0x7FFF) + 0x4000) >> 15)
                                    + v13 * (v15 >> 15))
                                   * v14;
      }
      while (v3 < *(int *)(result + 4));
    }
    if (*(_DWORD *)(result + 44) != 0x8000 && *(int *)(result + 4) >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(result + 16) + 4 * v2 + 4;
      do
      {
        int v18 = *(_DWORD *)(v17 + 4 * v16);
        if (v18 >= 0) {
          unsigned int v19 = *(_DWORD *)(v17 + 4 * v16);
        }
        else {
          unsigned int v19 = -v18;
        }
        int v20 = (v18 >> 31) | 1;
        int v21 = *(_DWORD *)(result + 44);
        BOOL v22 = v21 < 0;
        if (v21 < 0) {
          int v21 = -v21;
        }
        if (v22) {
          int v20 = -v20;
        }
        *(_DWORD *)(v17 + 4 * v16++) = ((v21 & 0x7FFF) * (v19 >> 15)
                                      + (((v21 & 0x7FFF) * (v19 & 0x7FFF) + 0x4000) >> 15)
                                      + v19 * (v21 >> 15))
                                     * v20;
      }
      while (v16 < *(int *)(result + 4));
    }
    int v23 = *(_DWORD *)(result + 48);
    if (v23 != 0x8000)
    {
      int v24 = *(_DWORD *)(result + 104);
      int v25 = *(_DWORD *)(result + 92);
      int v26 = *(_DWORD *)(result + 28);
      if (v26 < 1 || (int v27 = *(_DWORD *)(result + 52), v26 > v27) || v24 == v25)
      {
        if (v24 != v25) {
          int v23 = 0x8000;
        }
      }
      else
      {
        v23 += v26 * (0x8000 - v23) / (v27 + 1);
      }
      *(_DWORD *)(result + 32) = v23;
    }
  }
  return result;
}

uint64_t Mrcc_Solve_AmpPhase(uint64_t a1, void **a2, int a3, int a4)
{
  signed int v7 = *((_DWORD *)a2 + 10);
  if (a3 == 1) {
    int v8 = 0;
  }
  else {
    int v8 = *(_DWORD *)(a1 + 24);
  }
  unsigned int v9 = *(_DWORD *)(a1 + 108);
  if ((int)v9 >= v7) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t result = 1;
  if (a4 && (v8 & 0xFFFFFFFD) == 1)
  {
    int v12 = (int *)a2[3];
    uint64_t v14 = *(int *)(a1 + 4);
    uint64_t v13 = *(int *)(a1 + 8);
    if (*(_DWORD *)(a1 + 104) < v7) {
      signed int v7 = *(_DWORD *)(a1 + 104);
    }
    size_t v15 = 4 * v7;
    if (!a3 || (bzero(a2[4], 4 * v7), a3 != 1)) {
      bzero(v12, v15);
    }
    uint64_t result = 1;
    *((_DWORD *)a2 + 4) = 1;
    if (v8 != 2)
    {
      int v16 = ipow2(**(_DWORD **)(a1 + 16) / 2);
      if (v16 >= 0) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = -v16;
      }
      int v18 = *(_DWORD *)(a1 + 32);
      BOOL v19 = v18 < 0;
      if (v18 < 0) {
        int v18 = -v18;
      }
      if (v19) {
        int v20 = -((v16 >> 31) | 1);
      }
      else {
        int v20 = (v16 >> 31) | 1;
      }
      *((_DWORD *)a2 + 16) = ((v18 & 0x7FFF) * (v17 >> 15)
                            + (((v18 & 0x7FFF) * (v17 & 0x7FFF) + 0x4000) >> 15)
                            + v17 * (v18 >> 15))
                           * v20;
      if (*(_DWORD *)(a1 + 104) == *(_DWORD *)(a1 + 92))
      {
        int v21 = *(_DWORD **)(a1 + 144);
        *int v21 = 0;
        memcpy(v21 + 1, (const void *)(*(void *)(a1 + 16) + 4 * v13 + 4), 4 * *(int *)(a1 + 4));
        bzero((void *)(*(void *)(a1 + 144) + 4 * (v14 + 1)), 4 * (*(_DWORD *)(a1 + 96) - ((int)v14 + 1)));
        BOOL v22 = (__int16 *)call_cfsv_construct((uint64_t)*a2, *(void *)(a1 + 144), *(_WORD *)(a1 + 96), 15);
        if (v22)
        {
          int v23 = (unsigned __int16 *)v22;
          call_cfsv_rfft(v22, *(__int16 *)(a1 + 96));
          call_cfsv_changeOutputSampleOrder(v23, *(_DWORD **)(a1 + 152));
          call_cfsv_destruct(*a2, (uint64_t)v23);
        }
        uint64_t v24 = *(void *)(a1 + 144);
        *(_DWORD *)(v24 + 4 * *(int *)(a1 + 96)) = *(_DWORD *)(v24 + 4);
        if ((int)v10 < 1) {
          return 0;
        }
        int v25 = *(int **)(a1 + 64);
        uint64_t v26 = v10;
        int v27 = v12;
        do
        {
          uint64_t v28 = *v25++;
          *v27++ = 2
                 * *(_DWORD *)(v24
                             + 4
                             * (int)(2
                                   * (((1 << (14 - *(_DWORD *)(a1 + 100))) + v28) >> (15 - *(_DWORD *)(a1 + 100)))));
          --v26;
        }
        while (v26);
        int v29 = *(_DWORD *)(a1 + 168) + *(_DWORD *)(a1 + 164) - 12;
        if (v29 >= 1)
        {
          uint64_t v30 = 1 << (*(unsigned char *)(a1 + 168) + *(unsigned char *)(a1 + 164) - 13);
          do
          {
            *int v12 = (v30 + *v12) >> v29;
            ++v12;
            --v10;
          }
          while (v10);
          return 0;
        }
        int v74 = 12 - (*(_DWORD *)(a1 + 168) + *(_DWORD *)(a1 + 164));
        uint64_t result = 0;
        do
        {
          *v12++ <<= v74;
          --v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v31 = *(int *)(a1 + 8);
        LODWORD(v32) = *((_DWORD *)a2 + 10);
        int v34 = (int *)a2[3];
        int v33 = (unsigned int *)a2[4];
        int v35 = *(_DWORD *)(a1 + 108);
        if (v35 >= (int)v32) {
          uint64_t v32 = v32;
        }
        else {
          uint64_t v32 = v35;
        }
        int v36 = *(_DWORD *)(a1 + 164) + *(_DWORD *)(a1 + 168);
        int v37 = v36 - 12;
        if (a3 == 2)
        {
          if ((int)v32 >= 1)
          {
            uint64_t v52 = 0;
            uint64_t v53 = *(void *)(a1 + 64);
            uint64_t v54 = 4 * v31 + 4;
            do
            {
              v34[v52] = 0;
              if (*(int *)(a1 + 4) >= 1)
              {
                uint64_t v55 = 0;
                int v56 = *(_DWORD *)(v53 + 4 * v52);
                uint64_t v57 = *(void *)(a1 + 128);
                uint64_t v58 = *(void *)(a1 + 16) + v54;
                int v59 = v56;
                do
                {
                  int v60 = (((v59 >> 5) & 1) + (v59 >> 6)) & *(_DWORD *)(v57 + 24);
                  int v61 = *(_DWORD *)(v57 + 16);
                  int v62 = v60 - v61;
                  if (v60 >= v61)
                  {
                    int v63 = -*(__int16 *)(*(void *)v57 + 2 * v62);
                    int v64 = -*(__int16 *)(*(void *)(v57 + 8) + 2 * v62);
                  }
                  else
                  {
                    int v63 = *(__int16 *)(*(void *)v57 + 2 * v60);
                    int v64 = *(__int16 *)(*(void *)(v57 + 8) + 2 * v60);
                  }
                  if (v63 == 0x7FFF) {
                    int v63 = 0x8000;
                  }
                  if (v64 == 0x7FFF) {
                    int v64 = 0x8000;
                  }
                  v33[v52] -= (*(_DWORD *)(v58 + 4 * v55) * v63) >> 14;
                  v34[v52] += (*(_DWORD *)(v58 + 4 * v55) * v64) >> 14;
                  v59 += v56;
                  ++v55;
                }
                while (v55 < *(int *)(a1 + 4));
              }
              ++v52;
            }
            while (v52 != v32);
          }
        }
        else if (!a3 && (int)v32 >= 1)
        {
          uint64_t v38 = 0;
          uint64_t v39 = *(void *)(a1 + 64);
          uint64_t v40 = 4 * v31 + 4;
          do
          {
            v34[v38] = 0;
            if (*(int *)(a1 + 4) >= 1)
            {
              uint64_t v41 = 0;
              int v42 = 0;
              int v43 = *(_DWORD *)(v39 + 4 * v38);
              uint64_t v44 = *(void *)(a1 + 128);
              uint64_t v45 = *(void *)(a1 + 16) + v40;
              int v46 = v43;
              do
              {
                int v47 = (((v46 >> 5) & 1) + (v46 >> 6)) & *(_DWORD *)(v44 + 24);
                int v48 = *(_DWORD *)(v44 + 16);
                BOOL v49 = __OFSUB__(v47, v48);
                int v50 = v47 - v48;
                if (v50 < 0 != v49) {
                  int v51 = *(__int16 *)(*(void *)(v44 + 8) + 2 * v47);
                }
                else {
                  int v51 = -*(__int16 *)(*(void *)(v44 + 8) + 2 * v50);
                }
                v42 += (*(_DWORD *)(v45 + 4 * v41) * v51) >> 14;
                v34[v38] = v42;
                v46 += v43;
                ++v41;
              }
              while (v41 < *(int *)(a1 + 4));
            }
            ++v38;
          }
          while (v38 != v32);
        }
        int v65 = v36 - 9;
        if (v37 < 1)
        {
          if ((int)v32 >= 1)
          {
            uint64_t v67 = v32;
            do
            {
              *v34++ <<= 12 - v36;
              --v67;
            }
            while (v67);
          }
        }
        else if ((int)v32 >= 1)
        {
          uint64_t v66 = v32;
          do
          {
            *int v34 = ((1 << (v36 - 13)) + *v34) >> v37;
            ++v34;
            --v66;
          }
          while (v66);
        }
        if (v65 >= 1)
        {
          if ((int)v32 >= 1)
          {
            uint64_t v68 = 1 << (v36 - 10);
            do
            {
              unsigned int v69 = *v33;
              if ((*v33 & 0x80000000) != 0) {
                unsigned int v69 = -v69;
              }
              signed int v70 = 3615 * (v69 >> 15) + ((3615 * (v69 & 0x7FFF) + 0x4000) >> 15);
              if ((*v33 & 0x80000000) != 0) {
                signed int v70 = -v70;
              }
              *v33++ = (v68 + v70) >> v65;
              --v32;
            }
            while (v32);
          }
          return 0;
        }
        if ((int)v32 < 1) {
          return 0;
        }
        char v71 = 9 - v36;
        do
        {
          uint64_t result = 0;
          unsigned int v72 = *v33;
          if ((*v33 & 0x80000000) != 0) {
            unsigned int v72 = -v72;
          }
          unsigned int v73 = 3615 * (v72 >> 15) + ((3615 * (v72 & 0x7FFF) + 0x4000) >> 15);
          if ((*v33 & 0x80000000) != 0) {
            unsigned int v73 = -v73;
          }
          *v33++ = v73 << v71;
          --v32;
        }
        while (v32);
      }
    }
  }
  return result;
}

uint64_t Rr2Pcm_SetHarmonicInfo(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5 = a5;
  uint64_t v6 = a4;
  int v9 = *(unsigned __int16 *)(a3 + 48);
  uint64_t v10 = *(_DWORD **)(a3 + 248);
  if (a5 && v10)
  {
    uint64_t v11 = *(void *)(a3 + 16);
    int v12 = *(_DWORD *)(a3 + 40);
    int v13 = a1[3] / **(_DWORD **)(a4 + 64);
  }
  else
  {
    uint64_t v11 = *(void *)(a3 + 8);
    int v12 = *(_DWORD *)(a3 + 32);
    if (v10)
    {
      if (!*v10) {
        return 1;
      }
      int v13 = a1[3] / *v10;
    }
    else
    {
      int v13 = 1;
    }
  }
  uint64_t v14 = *(void *)(a3 + 64);
  uint64_t v15 = *(unsigned int *)(v14 + 64);
  uint64_t v16 = *(unsigned int *)(v14 + 40);
  if (!v9)
  {
    if (((int)v16 - 1) / v13 >= v12) {
      int v26 = v12;
    }
    else {
      int v26 = ((int)v16 - 1) / v13;
    }
    if (*(_DWORD *)(v14 + 8) && !*(_DWORD *)(v14 + 12) && *(_DWORD *)(v14 + 16))
    {
      int v27 = 0;
      if (a1[70] && v26 >= 1)
      {
        int v106 = *(_DWORD *)(v14 + 64);
        uint64_t v28 = 4 * v13;
        int v29 = (_DWORD *)(*(void *)(v14 + 24) + v28);
        uint64_t v30 = (unsigned int *)(*(void *)(a3 + 8) + 8);
        int v31 = v26;
        do
        {
          unsigned int v32 = *v29 + (*(_DWORD *)(a3 + 196) << 12);
          *uint64_t v30 = v32;
          unsigned int v33 = ipow2(v32);
          *(v30 - 1) = v33;
          v30[1] = v33;
          v30[2] = 0;
          int v29 = (_DWORD *)((char *)v29 + v28);
          v30 += 9;
          --v31;
        }
        while (v31);
        int v27 = v26;
        uint64_t v6 = a4;
        LODWORD(v15) = v106;
      }
      if (v27 < v12)
      {
        int v34 = (void *)(v11 + 36 * v27 + 4);
        do
        {
          *int v34 = 0;
          v34[1] = 0;
          int v34 = (void *)((char *)v34 + 36);
          ++v27;
        }
        while (v12 > v27);
      }
      scaleHarmEnergy(a3, v6, v15, 0, v5);
      goto LABEL_107;
    }
    return 1;
  }
  int v111 = 0;
  if (a1[25]) {
    unsigned int v17 = (int *)(a3 + 56);
  }
  else {
    unsigned int v17 = a1 + 34;
  }
  int v18 = *(_DWORD *)(v14 + 16);
  int v19 = a1[17];
  if (v18) {
    BOOL v20 = v19 == 1;
  }
  else {
    BOOL v20 = 0;
  }
  int v21 = v20;
  if (a5)
  {
    BOOL v22 = *(_DWORD **)(a3 + 16);
    int v24 = *(_DWORD *)(a3 + 40);
    int v23 = *(_DWORD *)(a3 + 44);
    int v25 = (int *)(*(void *)(a4 + 64) + 36);
  }
  else
  {
    BOOL v22 = *(_DWORD **)(a3 + 8);
    int v24 = *(_DWORD *)(a3 + 32);
    int v23 = *(_DWORD *)(a3 + 36);
    if (v10) {
      int v25 = v10 + 9;
    }
    else {
      int v25 = a1 + 75;
    }
  }
  if (v19) {
    int v35 = v21;
  }
  else {
    int v35 = 1;
  }
  if (v35 != 1 || !*(_WORD *)(a3 + 50) || !v18 || !*(_DWORD *)(v14 + 8) || !a1[70]) {
    return 1;
  }
  int v96 = *v17;
  uint64_t v98 = *(void *)(a3 + 72);
  int v105 = *v25;
  int v99 = *(unsigned __int16 *)(a3 + 50);
  int v101 = v23;
  if (*(_DWORD *)(a3 + 100))
  {
    LODWORD(v36) = 0;
    if (v24 >= 1 && (int)v16 >= 2)
    {
      uint64_t v36 = 0;
      int v37 = v22 + 4;
      int v38 = 1;
      do
      {
        if (*(v37 - 4))
        {
          int v39 = *(_DWORD *)(v14 + 12);
          int v40 = *(_DWORD *)(*(void *)(a3 + 152) + 4 * v38 - 4);
          *(v37 - 3) = v40;
          if (v39)
          {
            v37[4] = *(_DWORD *)(*(void *)(v14 + 32) + 4 * v38);
          }
          else
          {
            *(v37 - 1) = v40;
            *int v37 = 0;
          }
          ++v38;
        }
        if (++v36 >= (unint64_t)v24) {
          break;
        }
        v37 += 9;
      }
      while (v38 < (int)v16);
    }
  }
  else if (v24 < 1)
  {
    LODWORD(v36) = 0;
  }
  else
  {
    uint64_t v41 = 0;
    int v42 = v22 + 4;
    int v43 = 1;
    unsigned int v107 = v15;
    while (1)
    {
      uint64_t v44 = *(void *)(a3 + 64);
      if (v43 >= *(_DWORD *)(v44 + 40)) {
        break;
      }
      if (*(v42 - 4))
      {
        uint64_t v45 = v22;
        uint64_t v46 = v6;
        int v47 = *(_DWORD *)(v44 + 12);
        unsigned int v48 = *(_DWORD *)(*(void *)(v44 + 24) + 4 * v43) + (*(_DWORD *)(a3 + 196) << 12);
        *(v42 - 2) = v48;
        int v49 = ipow2(v48);
        *(v42 - 3) = v49;
        if (v47)
        {
          v42[4] = *(_DWORD *)(*(void *)(*(void *)(a3 + 64) + 32) + 4 * v43);
        }
        else
        {
          *(v42 - 1) = v49;
          *int v42 = 0;
        }
        uint64_t v6 = v46;
        BOOL v22 = v45;
        ++v43;
        int v5 = a5;
        uint64_t v15 = v107;
      }
      ++v41;
      v42 += 9;
      if (v24 == v41) {
        goto LABEL_75;
      }
    }
    LODWORD(v36) = v41;
  }
  if ((int)v36 < v24)
  {
    int v50 = &v22[9 * v36 + 1];
    do
    {
      if (*((_DWORD *)v50 - 1))
      {
        *int v50 = 0;
        v50[1] = 0;
      }
      LODWORD(v36) = v36 + 1;
      int v50 = (void *)((char *)v50 + 36);
    }
    while (v24 > (int)v36);
  }
LABEL_75:
  uint64_t v51 = a2;
  if (v24 == v101) {
    goto LABEL_76;
  }
  if (a1[17] != 1 || a1[23]) {
    return 1;
  }
  if ((int)v16 > 1)
  {
    uint64_t v79 = v16 - 1;
    int v80 = (unsigned int *)v98;
    unsigned int v81 = (13440 * v99) >> 15;
    do
    {
      *v80++ = v81;
      v81 += (13440 * v99) >> 15;
      --v79;
    }
    while (v79);
  }
  signed int v100 = (13440 * v99) >> 15;
  if (v24 >= 1)
  {
    int v82 = 32 * v96;
    int v97 = v16 - 1;
    uint64_t v83 = v24;
    unsigned int v108 = v15;
    do
    {
      int v84 = v22[7] * v105 / 16;
      if (v84 >= v82)
      {
        uint64_t v85 = v15;
        uint64_t v110 = v22;
        int VoicedAmpAttenuation = GetVoicedAmpAttenuation(a1, v82, v22[7] * v105 / 16);
        BOOL v22 = v110;
        int v87 = VoicedAmpAttenuation;
        if (*v110)
        {
          v110[1] = (v110[1] * VoicedAmpAttenuation) >> 10;
          uint64_t v15 = v85;
        }
        else
        {
          int InterpolatedValue = GetInterpolatedValue(v98, (unsigned int *)(*(void *)(*(void *)(a3 + 64) + 24) + 4), v97, v84, &v111, 0);
          int v102 = ipow2(InterpolatedValue + (*(_DWORD *)(a3 + 196) << 12));
          v110[2] = v102;
          signed int AuxUvHarmResolution = GetAuxUvHarmResolution(a1, v82, v84);
          uint64_t v90 = v51;
          if (AuxUvHarmResolution >= v100)
          {
            int v92 = 1024;
          }
          else
          {
            if (a1[21]) {
              signed int v91 = 0;
            }
            else {
              signed int v91 = AuxUvHarmResolution;
            }
            int v92 = (AuxUvHarmResolution << 10) / (v100 - v91);
          }
          unsigned int v93 = v87 * v87;
          int NoiseAttenuation = GetNoiseAttenuation(a1, v82, v84);
          if (NoiseAttenuation * NoiseAttenuation <= v93) {
            int v95 = 0;
          }
          else {
            int v95 = (int)(sqroot5((int *)(a3 + 220), ((int)(NoiseAttenuation * NoiseAttenuation - v93) / 4 * v92 / 256) >> 8)* v102) >> 10;
          }
          uint64_t v51 = v90;
          uint64_t v15 = v108;
          BOOL v22 = v110;
          v110[1] = v95;
        }
      }
      v22 += 9;
      --v83;
    }
    while (v83);
  }
LABEL_76:
  scaleHarmEnergy(a3, v6, v15, 1, v5);
  uint64_t v53 = *(void *)(a3 + 8);
  uint64_t v54 = *(int *)(a3 + 32);
  if (*(_WORD *)(a3 + 48))
  {
    if (v54)
    {
      uint64_t v55 = 36 * v54;
      do
      {
        if (*(_DWORD *)v53)
        {
          int v56 = *(_DWORD *)(v51 + 32) & *(_DWORD *)(v53 + 32);
          int v57 = *(_DWORD *)(v51 + 24);
          BOOL v58 = __OFSUB__(v56, v57);
          int v59 = v56 - v57;
          if (v59 < 0 != v58)
          {
            v52.i16[0] = *(_WORD *)(*(void *)(v51 + 16) + 2 * v56);
            v52.i16[2] = *(_WORD *)(*(void *)(v51 + 8) + 2 * v56);
            int32x2_t v60 = vshr_n_s32(vshl_n_s32(v52, 0x10uLL), 0x10uLL);
          }
          else
          {
            v52.i16[0] = *(_WORD *)(*(void *)(v51 + 16) + 2 * v59);
            v52.i16[2] = *(_WORD *)(*(void *)(v51 + 8) + 2 * v59);
            int32x2_t v60 = vneg_s32(vshr_n_s32(vshl_n_s32(v52, 0x10uLL), 0x10uLL));
          }
          int v61 = *(_DWORD *)(v53 + 4);
          if (v61 >= 0) {
            unsigned int v62 = *(_DWORD *)(v53 + 4);
          }
          else {
            unsigned int v62 = -v61;
          }
          if (v61 >= 0) {
            unsigned int v63 = -1;
          }
          else {
            unsigned int v63 = 1;
          }
          int8x8_t v64 = (int8x8_t)vabs_s32(v60);
          int32x2_t v65 = (int32x2_t)vand_s8(v64, (int8x8_t)0x7F0000007FLL);
          int32x2_t v52 = vmul_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmla_s32(vmul_s32(vdup_n_s32(v62), (int32x2_t)vshr_n_u32((uint32x2_t)v64, 0xFuLL)), vdup_n_s32(v62 >> 15), v65), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v62 & 0x7FFF), v65), 0xFuLL), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v60), (int8x8_t)vdup_n_s32(v63), (int8x8_t)vdup_n_s32((v61 >> 31) | 1u)));
          *(int32x2_t *)(v53 + 12) = v52;
        }
        v53 += 36;
        v55 -= 36;
      }
      while (v55);
    }
  }
  else if (v54)
  {
    int v67 = *(_DWORD *)(v51 + 32);
    int v68 = *(_DWORD *)(v51 + 24);
    uint64_t v69 = 36 * v54;
    signed int v70 = (_DWORD *)(v53 + 32);
    do
    {
      int v71 = *v70 & v67;
      int v72 = v71 - v68;
      if (v71 >= v68)
      {
        v52.i16[0] = *(_WORD *)(*(void *)(v51 + 16) + 2 * v72);
        v52.i16[2] = *(_WORD *)(*(void *)(v51 + 8) + 2 * v72);
        int32x2_t v73 = vneg_s32(vshr_n_s32(vshl_n_s32(v52, 0x10uLL), 0x10uLL));
      }
      else
      {
        v52.i16[0] = *(_WORD *)(*(void *)(v51 + 16) + 2 * v71);
        v52.i16[2] = *(_WORD *)(*(void *)(v51 + 8) + 2 * v71);
        int32x2_t v73 = vshr_n_s32(vshl_n_s32(v52, 0x10uLL), 0x10uLL);
      }
      int v74 = *(v70 - 7);
      if (v74 >= 0) {
        unsigned int v75 = *(v70 - 7);
      }
      else {
        unsigned int v75 = -v74;
      }
      if (v74 >= 0) {
        unsigned int v76 = -1;
      }
      else {
        unsigned int v76 = 1;
      }
      int8x8_t v77 = (int8x8_t)vabs_s32(v73);
      int32x2_t v78 = (int32x2_t)vand_s8(v77, (int8x8_t)0x7F0000007FLL);
      int32x2_t v52 = vmul_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmla_s32(vmul_s32(vdup_n_s32(v75), (int32x2_t)vshr_n_u32((uint32x2_t)v77, 0xFuLL)), vdup_n_s32(v75 >> 15), v78), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v75 & 0x7FFF), v78), 0xFuLL), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v73), (int8x8_t)vdup_n_s32(v76), (int8x8_t)vdup_n_s32((v74 >> 31) | 1u)));
      *(int32x2_t *)(v70 - 5) = v52;
      v70 += 9;
      v69 -= 36;
    }
    while (v69);
  }
LABEL_107:
  FilterHarmonics(a1, a3, v6, v5);
  return 0;
}

uint64_t scaleHarmEnergy(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  uint64_t v38 = 0;
  if (a5)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    int v9 = *(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a2 + 64);
    if (*(_WORD *)(a1 + 48)) {
      int v11 = 1;
    }
    else {
      int v11 = *(_DWORD *)(v10 + 52);
    }
    uint64_t v15 = (int *)(v10 + 56);
    int v13 = (int *)(a1 + 216);
    uint64_t v14 = (int *)(a1 + 212);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 248);
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 32);
    int v13 = (int *)(a1 + 208);
    uint64_t v14 = (int *)(a1 + 204);
    if (v12)
    {
      if (*(_WORD *)(a1 + 48)) {
        int v11 = 1;
      }
      else {
        int v11 = *(_DWORD *)(v12 + 52);
      }
      uint64_t v15 = (int *)(v12 + 56);
    }
    else
    {
      if (*(_WORD *)(a1 + 48)) {
        int v11 = 1;
      }
      else {
        int v11 = *(_DWORD *)(a1 + 92);
      }
      uint64_t v15 = (int *)(a1 + 96);
    }
  }
  int v37 = 0;
  int v16 = *v15;
  uint64_t v17 = v9;
  if ((int)a3 <= 0)
  {
    uint64_t result = ScaleTo16BitSignedRangeWithSkip(v8 + 4, v9, 36, (int *)&v38 + 1, (int *)&v38, *(_DWORD *)(a1 + 200));
    int v21 = HIDWORD(v38) - (v38 + *(_DWORD *)(a1 + 196));
    if (v11 > 1)
    {
      if (v17)
      {
        uint64_t v22 = 36 * v17;
        int v23 = (int *)(v8 + 4);
        do
        {
          *int v23 = (*v23 * v11) >> v16;
          v23 += 9;
          v22 -= 36;
        }
        while (v22);
      }
      v21 += v16;
    }
    if (v21 >= 1)
    {
      *v13 += v21;
      return result;
    }
    int v24 = *v14 - v21;
    goto LABEL_61;
  }
  unsigned int v18 = CalcSquareNormWthSkip(v8 + 4, v9, 36, 2896, &v37, a4);
  uint64_t result = sqroot5(0, v18 >> 8);
  if (!result) {
    return result;
  }
  if (a4) {
    int v20 = v37;
  }
  else {
    int v20 = 0;
  }
  while ((int)result > (int)(a3 + (a3 >> 1)))
  {
    uint64_t result = ((int)result >> 1);
    ++v20;
  }
  if (!v20)
  {
    if ((int)result >= (int)(a3 >> 1))
    {
      int v20 = 0;
    }
    else
    {
      int v20 = 0;
      do
      {
        uint64_t result = (2 * result);
        --v20;
      }
      while ((int)result < (int)(a3 >> 1));
    }
  }
  int v25 = (int)(a3 << 10) / (int)result;
  int v26 = 15 - v16;
  if (v11 <= 1) {
    int v26 = 10;
  }
  int v27 = v26 + v20;
  if (v11 <= 1) {
    char v28 = 0;
  }
  else {
    char v28 = v16 - 5;
  }
  if (v27 < 0)
  {
    int v33 = -v27;
    if (!v17)
    {
      signed int v31 = -1;
      goto LABEL_59;
    }
    uint64_t v34 = 36 * v17;
    int v35 = (int *)(v8 + 4);
    signed int v31 = -1;
    do
    {
      int v36 = (((*v35 * v25) >> v28) * v11) << v33;
      *int v35 = v36;
      v35 += 9;
      if (v36 > v31) {
        signed int v31 = v36;
      }
      v34 -= 36;
    }
    while (v34);
  }
  else
  {
    if (!v17)
    {
      signed int v31 = -1;
      int v33 = v27;
      goto LABEL_59;
    }
    uint64_t v29 = 36 * v17;
    uint64_t v30 = (int *)(v8 + 4);
    signed int v31 = -1;
    do
    {
      int v32 = ((*v30 * v25) >> v28) * v11;
      *uint64_t v30 = v32;
      v30 += 9;
      if (v32 > v31) {
        signed int v31 = v32;
      }
      v29 -= 36;
    }
    while (v29);
    int v33 = v27;
  }
  if (!a4 || v31 < 0x4000)
  {
LABEL_59:
    uint64_t result = ScaleTo16BitSignedRangeWithSkip(v8 + 4, v17, 36, v13, v14, v31);
    if (v27 < 0) {
      return result;
    }
    goto LABEL_60;
  }
  if ((v27 & 0x80000000) == 0)
  {
LABEL_60:
    int v24 = *v14 + v33;
LABEL_61:
    *uint64_t v14 = v24;
  }
  return result;
}

_DWORD *FilterHarmonics(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = v4 + 36 * *(int *)(a2 + 40);
    uint64_t v6 = *(_DWORD **)(a3 + 64);
LABEL_4:
    int v7 = v6[4] - v6[6];
    uint64_t v8 = v6 + 8;
    int v9 = v6 + 7;
    goto LABEL_5;
  }
  uint64_t v6 = *(_DWORD **)(a2 + 248);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = v4 + 36 * *(int *)(a2 + 32);
  if (v6) {
    goto LABEL_4;
  }
  int v7 = result[72] - result[35];
  uint64_t v8 = result + 37;
  int v9 = result + 36;
LABEL_5:
  if (*(_WORD *)(a2 + 48)) {
    uint64_t v8 = v9;
  }
  int v10 = *v8;
  if (*(_DWORD *)(v4 + 20) > *v8 || v4 == v5)
  {
    uint64_t v12 = v4;
  }
  else
  {
    do
    {
      uint64_t v12 = v4 + 36;
      *(void *)(v4 + 12) = 0;
      *(void *)(v4 + 4) = 0;
      BOOL v13 = *(_DWORD *)(v4 + 56) > v10 || v12 == v5;
      v4 += 36;
    }
    while (!v13);
  }
  do
  {
    uint64_t v14 = v12 + 36;
    BOOL v15 = *(_DWORD *)(v12 + 20) >= v7 || v12 == v5;
    v12 += 36;
  }
  while (!v15);
  for (uint64_t i = v14 - 36; i != v5; i += 36)
  {
    *(void *)(i + 12) = 0;
    *(void *)(i + 4) = 0;
  }
  return result;
}

uint64_t NormRand_create(uint64_t a1)
{
  *(void *)(a1 + 96) = RandNormTable();
  return 0;
}

uint64_t WindowTrans_Create_Base(void *a1, _DWORD *a2, int a3, int a4, int a5)
{
  if (a3 == 3 && a4 == 128 && a5 == 80)
  {
    LODWORD(v5) = 9;
LABEL_5:
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm160;
LABEL_21:
    *a1 = v6;
    *a2 = v5;
    return 0;
  }
  BOOL v7 = a3 == 6 && a4 == 256;
  char v8 = v7;
  if (v7 && a5 == 80)
  {
    LODWORD(v5) = 9;
LABEL_16:
    uint64_t v6 = &asHannTransSamples_B13_Fft512_Frm80;
    goto LABEL_21;
  }
  if (a3 == 11 && a4 == 512 && a5 == 80)
  {
    LODWORD(v5) = 9;
    uint64_t v6 = &asHannTransSamples_B23_Fft512_Frm40;
    goto LABEL_21;
  }
  if (a3 == 6 && a4 == 512 && a5 == 160)
  {
    LODWORD(v5) = 8;
    goto LABEL_16;
  }
  BOOL v10 = a3 == 3 && a4 == 256;
  char v11 = v10;
  if (v10 && a5 == 160)
  {
    LODWORD(v5) = 8;
    goto LABEL_5;
  }
  BOOL v12 = a3 == 3 && a4 == 512;
  char v13 = v12;
  if (v12 && a5 == 320)
  {
    LODWORD(v5) = 7;
    goto LABEL_5;
  }
  if (a3 == 4 && a4 == 512 && a5 == 220)
  {
    LODWORD(v5) = 8;
LABEL_51:
    uint64_t v6 = &asHannTransSamples_B9_Fft512_Frm110;
    goto LABEL_21;
  }
  BOOL v14 = a3 == 2 && a4 == 256;
  char v15 = v14;
  if (v14 && a5 == 220)
  {
    LODWORD(v5) = 8;
LABEL_72:
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm110;
    goto LABEL_21;
  }
  BOOL v16 = a3 == 2 && a4 == 512;
  char v17 = v16;
  if (v16 && a5 == 440)
  {
    LODWORD(v5) = 7;
    goto LABEL_72;
  }
  if (a3 == 8 && a4 == 512 && a5 == 110)
  {
    LODWORD(v5) = 9;
    uint64_t v6 = &asHannTransSamples_B17_Fft512_Frm55;
    goto LABEL_21;
  }
  BOOL v18 = a3 == 4 && a4 == 256;
  char v19 = v18;
  if (v18 && a5 == 110)
  {
    LODWORD(v5) = 9;
    goto LABEL_51;
  }
  if (a3 == 2 && a4 == 128 && a5 == 110)
  {
    LODWORD(v5) = 9;
    goto LABEL_72;
  }
  if (a3 == 8 && a4 == 256 && a5 == 54)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B17_Fft256_Frm27;
    goto LABEL_21;
  }
  if (a4 == 256 && a3 == 7 && a5 == 62)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B15_Fft256_Frm31;
    goto LABEL_21;
  }
  if (a5 == 70) {
    char v20 = v8;
  }
  else {
    char v20 = 0;
  }
  if (v20)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B13_Fft256_Frm35;
    goto LABEL_21;
  }
  if (a5 != 78) {
    char v8 = 0;
  }
  if (v8)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B13_Fft256_Frm39;
    goto LABEL_21;
  }
  BOOL v21 = a3 == 5 && a4 == 256;
  char v22 = v21;
  if (v21 && a5 == 88)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B11_Fft256_Frm44;
    goto LABEL_21;
  }
  if (a5 != 96) {
    char v22 = 0;
  }
  if (v22)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B11_Fft256_Frm48;
    goto LABEL_21;
  }
  if (a5 == 104) {
    char v23 = v19;
  }
  else {
    char v23 = 0;
  }
  if (v23)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B9_Fft256_Frm52;
    goto LABEL_21;
  }
  if (a5 == 112) {
    char v24 = v19;
  }
  else {
    char v24 = 0;
  }
  if (v24)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B9_Fft256_Frm56;
    goto LABEL_21;
  }
  if (a5 == 120) {
    char v25 = v19;
  }
  else {
    char v25 = 0;
  }
  if (v25)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B9_Fft256_Frm60;
    goto LABEL_21;
  }
  if (a5 == 128) {
    char v26 = v11;
  }
  else {
    char v26 = 0;
  }
  if (v26)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm64;
    goto LABEL_21;
  }
  if (a5 == 138) {
    char v27 = v11;
  }
  else {
    char v27 = 0;
  }
  if (v27)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm69;
    goto LABEL_21;
  }
  if (a5 == 146) {
    char v28 = v11;
  }
  else {
    char v28 = 0;
  }
  if (v28)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm73;
    goto LABEL_21;
  }
  if (a5 == 154) {
    char v29 = v11;
  }
  else {
    char v29 = 0;
  }
  if (v29)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm77;
    goto LABEL_21;
  }
  if (a5 == 162) {
    char v30 = v11;
  }
  else {
    char v30 = 0;
  }
  if (v30)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm81;
    goto LABEL_21;
  }
  if (a5 != 170) {
    char v11 = 0;
  }
  if (v11)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm85;
    goto LABEL_21;
  }
  if (a5 == 178) {
    char v31 = v15;
  }
  else {
    char v31 = 0;
  }
  if (v31)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm89;
    goto LABEL_21;
  }
  if (a5 == 186) {
    char v32 = v15;
  }
  else {
    char v32 = 0;
  }
  if (v32)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm93;
    goto LABEL_21;
  }
  if (a5 == 196) {
    char v33 = v15;
  }
  else {
    char v33 = 0;
  }
  if (v33)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm98;
    goto LABEL_21;
  }
  if (a5 == 204) {
    char v34 = v15;
  }
  else {
    char v34 = 0;
  }
  if (v34)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm102;
    goto LABEL_21;
  }
  if (a5 == 212) {
    char v35 = v15;
  }
  else {
    char v35 = 0;
  }
  if (v35)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm106;
    goto LABEL_21;
  }
  if (a5 == 242) {
    char v36 = v15;
  }
  else {
    char v36 = 0;
  }
  if (v36)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm121;
    goto LABEL_21;
  }
  if (a5 == 264) {
    char v37 = v13;
  }
  else {
    char v37 = 0;
  }
  if (v37)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm132;
    goto LABEL_21;
  }
  if (a5 == 286) {
    char v38 = v13;
  }
  else {
    char v38 = 0;
  }
  if (v38)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm143;
    goto LABEL_21;
  }
  if (a5 == 308) {
    char v39 = v13;
  }
  else {
    char v39 = 0;
  }
  if (v39)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm154;
    goto LABEL_21;
  }
  if (a5 == 330) {
    char v40 = v13;
  }
  else {
    char v40 = 0;
  }
  if (v40)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm165;
    goto LABEL_21;
  }
  if (a5 != 352) {
    char v13 = 0;
  }
  if (v13)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm176;
    goto LABEL_21;
  }
  if (a5 == 374) {
    char v41 = v17;
  }
  else {
    char v41 = 0;
  }
  if (v41)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B5_Fft512_Frm187;
    goto LABEL_21;
  }
  if (a5 == 396) {
    char v42 = v17;
  }
  else {
    char v42 = 0;
  }
  if (v42)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B5_Fft512_Frm198;
    goto LABEL_21;
  }
  char v43 = v17 ^ 1;
  uint64_t v5 = 7;
  if (a5 != 418) {
    char v43 = 1;
  }
  if ((v43 & 1) == 0)
  {
    uint64_t v6 = &asHannTransSamples_B5_Fft512_Frm209;
    goto LABEL_21;
  }
  return v5;
}

uint64_t WindowTrans_Create(uint64_t a1, int *a2)
{
  return WindowTrans_Create_Base((void *)(a1 + 40), (_DWORD *)(a1 + 64), a2[74], a2[3], a2[11]);
}

uint64_t DeempFreqResponse_Create(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = &alDeemphFilterFreqResponse;
  int v3 = *(_DWORD *)(a2 + 156) != 0;
  if (!*(_DWORD *)(a2 + 156)) {
    uint64_t v2 = 0;
  }
  *(void *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 68) = v3 << 8;
  return 0;
}

uint64_t Window_Create_Base(void *a1, int a2)
{
  uint64_t v2 = 7;
  if (a2 > 109)
  {
    if (a2 > 164)
    {
      if (a2 > 197)
      {
        if (a2 == 198)
        {
          int v3 = &asHannSamples_397;
          goto LABEL_69;
        }
        if (a2 == 209)
        {
          int v3 = &asHannSamples_419;
          goto LABEL_69;
        }
        if (a2 != 220) {
          return v2;
        }
        int v3 = &asHannSamples_441;
      }
      else
      {
        if (a2 == 165)
        {
          int v3 = &asHannSamples_331;
          goto LABEL_69;
        }
        if (a2 == 176)
        {
          int v3 = &asHannSamples_353;
          goto LABEL_69;
        }
        if (a2 != 187) {
          return v2;
        }
        int v3 = &asHannSamples_375;
      }
    }
    else if (a2 > 142)
    {
      if (a2 == 143)
      {
        int v3 = &asHannSamples_287;
        goto LABEL_69;
      }
      if (a2 == 154)
      {
        int v3 = &asHannSamples_309;
        goto LABEL_69;
      }
      if (a2 != 160) {
        return v2;
      }
      int v3 = &asHannSamples_321;
    }
    else
    {
      if (a2 == 110)
      {
        int v3 = &asHannSamples_221;
        goto LABEL_69;
      }
      if (a2 == 121)
      {
        int v3 = &asHannSamples_243;
        goto LABEL_69;
      }
      if (a2 != 132) {
        return v2;
      }
      int v3 = &asHannSamples_265;
    }
LABEL_69:
    uint64_t v2 = 0;
    *a1 = v3;
    return v2;
  }
  if (a2 <= 68)
  {
    if (a2 > 47)
    {
      switch(a2)
      {
        case '0':
          int v3 = &asHannSamples_97;
          goto LABEL_69;
        case '1':
        case '2':
        case '3':
        case '5':
        case '6':
          return v2;
        case '4':
          int v3 = &asHannSamples_105;
          goto LABEL_69;
        case '7':
          int v3 = &asHannSamples_111;
          goto LABEL_69;
        case '8':
          int v3 = &asHannSamples_113;
          goto LABEL_69;
        default:
          if (a2 == 60)
          {
            int v3 = &asHannSamples_121;
          }
          else
          {
            if (a2 != 64) {
              return v2;
            }
            int v3 = &asHannSamples_129;
          }
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case '#':
          int v3 = &asHannSamples_71;
          goto LABEL_69;
        case '$':
        case '%':
        case '&':
        case ')':
        case '*':
        case '+':
          return v2;
        case '\'':
          int v3 = &asHannSamples_79;
          goto LABEL_69;
        case '(':
        case ',':
          int v3 = &asHannSamples_89;
          goto LABEL_69;
        default:
          if (a2 == 27)
          {
            int v3 = &asHannSamples_55;
          }
          else
          {
            if (a2 != 31) {
              return v2;
            }
            int v3 = &asHannSamples_63;
          }
          break;
      }
    }
    goto LABEL_69;
  }
  if (a2 <= 88)
  {
    switch(a2)
    {
      case 'M':
        int v3 = &asHannSamples_155;
        goto LABEL_69;
      case 'N':
      case 'O':
      case 'R':
      case 'S':
      case 'T':
        return v2;
      case 'P':
        int v3 = &asHannSamples_161;
        goto LABEL_69;
      case 'Q':
        int v3 = &asHannSamples_163;
        goto LABEL_69;
      case 'U':
        int v3 = &asHannSamples_171;
        goto LABEL_69;
      default:
        if (a2 == 69)
        {
          int v3 = &asHannSamples_139;
        }
        else
        {
          if (a2 != 73) {
            return v2;
          }
          int v3 = &asHannSamples_147;
        }
        break;
    }
    goto LABEL_69;
  }
  if (a2 <= 97)
  {
    if (a2 == 89)
    {
      int v3 = &asHannSamples_179;
      goto LABEL_69;
    }
    if (a2 == 93)
    {
      int v3 = &asHannSamples_187;
      goto LABEL_69;
    }
  }
  else
  {
    switch(a2)
    {
      case 'b':
        int v3 = &asHannSamples_197;
        goto LABEL_69;
      case 'f':
        int v3 = &asHannSamples_205;
        goto LABEL_69;
      case 'j':
        int v3 = &asHannSamples_213;
        goto LABEL_69;
    }
  }
  return v2;
}

uint64_t Window_Create(uint64_t a1, uint64_t a2)
{
  return Window_Create_Base((void *)(a1 + 48), *(_DWORD *)(a2 + 24));
}

double RrInput_Init(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = a1;
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 44) = xmmword_20D6AB840;
  *(_OWORD *)(a2 + 60) = xmmword_20D6AB850;
  *(void *)(a2 + 8) = 1;
  *(void *)&double result = 0x400FFFFFFFFLL;
  *(void *)(a2 + 76) = 0x400FFFFFFFFLL;
  return result;
}

double RrInput_Reset(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 64) = -1;
  *(void *)(a1 + 8) = 1;
  *(void *)&double result = 0x400FFFFFFFFLL;
  *(void *)(a1 + 76) = 0x400FFFFFFFFLL;
  return result;
}

int *RrInput_DeallocateData(int *result)
{
  uint64_t v1 = result;
  if (result[18] >= 1)
  {
    uint64_t v2 = *((void *)result + 3);
    if (!v2) {
      goto LABEL_5;
    }
    double result = (int *)heap_Free(*(void **)(*(void *)result + 8), v2);
  }
  *((void *)v1 + 3) = 0;
LABEL_5:
  if (v1[17] < 1)
  {
LABEL_8:
    *((void *)v1 + 4) = 0;
    goto LABEL_9;
  }
  uint64_t v3 = *((void *)v1 + 4);
  if (v3)
  {
    double result = (int *)heap_Free(*(void **)(*(void *)v1 + 8), v3);
    goto LABEL_8;
  }
LABEL_9:
  v1[17] = 0;
  v1[18] = 0;
  return result;
}

uint64_t Rr2Pcm_ProcessPhases(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v24 = 0;
  int v8 = *(_DWORD *)(*(void *)(a3 + 64) + 12);
  ComparePitches(a1, a3, a4, &v24);
  if (*(_DWORD *)(a1 + 52)) {
    int PhaseAlignment = findPhaseAlignment((void **)a1, a2, a3, a4);
  }
  else {
    int PhaseAlignment = 0;
  }
  if (*(_WORD *)(a3 + 48))
  {
    unsigned __int16 v12 = v24;
    if (!*(_DWORD *)(a1 + 56)) {
      unsigned __int16 v12 = 0;
    }
    *(_WORD *)(a3 + 52) = v12;
    if (PhaseAlignment)
    {
      __int16 v13 = *(_WORD *)(a3 + 84);
      LOWORD(v14) = v13 + *(_WORD *)(a4 + 20) + v12;
    }
    else
    {
      __int16 v13 = 0;
      int v14 = (*(_DWORD *)(a3 + 80) * v12 + *(_DWORD *)(a4 + 24) * *(unsigned __int16 *)(a4 + 20)) / *(_DWORD *)(a3 + 80);
    }
    *(_WORD *)(a3 + 52) = v14;
    *(_WORD *)(a3 + 86) = v13;
    AddLinearPhase(a2, a3, (unsigned __int16)v14, 0, v9, v10);
    AddRandomPhase(a2, a3, 0, v21, v22);
    char v20 = (_WORD *)(a3 + 84);
  }
  else
  {
    if (v8 && (uint64_t v15 = *(void *)(a3 + 64), v16 = *(unsigned int *)(v15 + 40), (int)v16 >= 2))
    {
      char v17 = (_DWORD *)(*(void *)(v15 + 32) + 4);
      uint64_t v18 = v16 - 1;
      while (!*v17++)
      {
        if (!--v18) {
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      AddRandomPhase(a2, a3, 0, v9, v10);
    }
    *(_WORD *)(a3 + 86) = 0;
    char v20 = (_WORD *)(a3 + 52);
  }
  *char v20 = 0;
  return 0;
}

uint64_t AddLinearPhase(uint64_t result, uint64_t a2, int a3, int a4, double a5, double a6)
{
  uint64_t v6 = 40;
  if (!a4) {
    uint64_t v6 = 32;
  }
  uint64_t v7 = 16;
  if (!a4) {
    uint64_t v7 = 8;
  }
  if (a3)
  {
    uint64_t v8 = *(void *)(a2 + v7);
    uint64_t v9 = *(int *)(a2 + v6);
    int v10 = ((a3 >> 6) & 1) + (a3 >> 7);
    if (*(_WORD *)(a2 + 48))
    {
      if (v9)
      {
        uint64_t v11 = 36 * v9;
        unsigned __int16 v12 = (int *)(v8 + 32);
        int v13 = 1;
        do
        {
          if (*(v12 - 8))
          {
            int v14 = *v12 + v13 * v10;
            *unsigned __int16 v12 = v14;
            int v15 = *(_DWORD *)(result + 32) & v14;
            int v16 = *(_DWORD *)(result + 24);
            BOOL v17 = __OFSUB__(v15, v16);
            int v18 = v15 - v16;
            if (v18 < 0 != v17)
            {
              LOWORD(a6) = *(_WORD *)(*(void *)(result + 16) + 2 * v15);
              WORD2(a6) = *(_WORD *)(*(void *)(result + 8) + 2 * v15);
              int32x2_t v19 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a6, 0x10uLL), 0x10uLL);
            }
            else
            {
              LOWORD(a6) = *(_WORD *)(*(void *)(result + 16) + 2 * v18);
              WORD2(a6) = *(_WORD *)(*(void *)(result + 8) + 2 * v18);
              int32x2_t v19 = vneg_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a6, 0x10uLL), 0x10uLL));
            }
            int v20 = *(v12 - 7);
            if (v20 >= 0) {
              unsigned int v21 = *(v12 - 7);
            }
            else {
              unsigned int v21 = -v20;
            }
            if (v20 >= 0) {
              unsigned int v22 = -1;
            }
            else {
              unsigned int v22 = 1;
            }
            int8x8_t v23 = (int8x8_t)vabs_s32(v19);
            int32x2_t v24 = (int32x2_t)vand_s8(v23, (int8x8_t)0x7F0000007FLL);
            a6 = COERCE_DOUBLE(vmul_s32(vmla_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmul_s32(vdup_n_s32(v21 >> 15), v24), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v21 & 0x7FFF), v24), 0xFuLL), vdup_n_s32(v21), (int32x2_t)vshr_n_u32((uint32x2_t)v23, 0xFuLL)), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v19), (int8x8_t)vdup_n_s32(v22), (int8x8_t)vdup_n_s32((v20 >> 31) | 1u))));
            *(double *)(v12 - 5) = a6;
            ++v13;
          }
          v12 += 9;
          v11 -= 36;
        }
        while (v11);
      }
    }
    else if (v9)
    {
      int v25 = *(_DWORD *)(result + 32);
      int v26 = *(_DWORD *)(result + 24);
      uint64_t v27 = 36 * v9;
      char v28 = (int *)(v8 + 32);
      int v29 = ((a3 >> 6) & 1) + (a3 >> 7);
      do
      {
        int v30 = v29 + *v28;
        *char v28 = v30;
        int v31 = v25 & v30;
        int v32 = (v25 & v30) - v26;
        if (v31 >= v26)
        {
          LOWORD(a6) = *(_WORD *)(*(void *)(result + 16) + 2 * v32);
          WORD2(a6) = *(_WORD *)(*(void *)(result + 8) + 2 * v32);
          int32x2_t v33 = vneg_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a6, 0x10uLL), 0x10uLL));
        }
        else
        {
          LOWORD(a6) = *(_WORD *)(*(void *)(result + 16) + 2 * v31);
          WORD2(a6) = *(_WORD *)(*(void *)(result + 8) + 2 * v31);
          int32x2_t v33 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a6, 0x10uLL), 0x10uLL);
        }
        int v34 = *(v28 - 7);
        if (v34 >= 0) {
          unsigned int v35 = *(v28 - 7);
        }
        else {
          unsigned int v35 = -v34;
        }
        if (v34 >= 0) {
          unsigned int v36 = -1;
        }
        else {
          unsigned int v36 = 1;
        }
        int8x8_t v37 = (int8x8_t)vabs_s32(v33);
        int32x2_t v38 = (int32x2_t)vand_s8(v37, (int8x8_t)0x7F0000007FLL);
        a6 = COERCE_DOUBLE(vmul_s32(vmla_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmul_s32(vdup_n_s32(v35 >> 15), v38), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v35 & 0x7FFF), v38), 0xFuLL), vdup_n_s32(v35), (int32x2_t)vshr_n_u32((uint32x2_t)v37, 0xFuLL)), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v33), (int8x8_t)vdup_n_s32(v36), (int8x8_t)vdup_n_s32((v34 >> 31) | 1u))));
        *(double *)(v28 - 5) = a6;
        v28 += 9;
        v29 += v10;
        v27 -= 36;
      }
      while (v27);
    }
  }
  return result;
}

uint64_t AddRandomPhase(uint64_t result, uint64_t a2, int a3, double a4, double a5)
{
  uint64_t v5 = 32;
  if (a3) {
    uint64_t v5 = 40;
  }
  uint64_t v6 = 16;
  if (!a3) {
    uint64_t v6 = 8;
  }
  uint64_t v7 = *(void *)(a2 + v6);
  uint64_t v8 = *(int *)(a2 + v5);
  if (*(_WORD *)(a2 + 48))
  {
    uint64_t v9 = 44;
    if (!a3) {
      uint64_t v9 = 36;
    }
    if (v8 != *(_DWORD *)(a2 + v9) && v8 != 0)
    {
      uint64_t v11 = 36 * v8;
      do
      {
        if (!*(_DWORD *)v7)
        {
          unsigned int v12 = 1664525 * *(_DWORD *)a2 + 1013904223;
          *(_DWORD *)a2 = v12;
          int v13 = (v12 + (v12 >> 11)) & *(_DWORD *)(result + 32);
          int v14 = *(_DWORD *)(result + 24);
          BOOL v15 = __OFSUB__(v13, v14);
          int v16 = v13 - v14;
          if (v16 < 0 != v15)
          {
            LOWORD(a5) = *(_WORD *)(*(void *)(result + 16) + 2 * v13);
            WORD2(a5) = *(_WORD *)(*(void *)(result + 8) + 2 * v13);
            int32x2_t v17 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a5, 0x10uLL), 0x10uLL);
          }
          else
          {
            LOWORD(a5) = *(_WORD *)(*(void *)(result + 16) + 2 * v16);
            WORD2(a5) = *(_WORD *)(*(void *)(result + 8) + 2 * v16);
            int32x2_t v17 = vneg_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a5, 0x10uLL), 0x10uLL));
          }
          *(_DWORD *)(v7 + 32) = v13;
          int v18 = *(_DWORD *)(v7 + 4);
          if (v18 >= 0) {
            unsigned int v19 = *(_DWORD *)(v7 + 4);
          }
          else {
            unsigned int v19 = -v18;
          }
          if (v18 >= 0) {
            unsigned int v20 = -1;
          }
          else {
            unsigned int v20 = 1;
          }
          int8x8_t v21 = (int8x8_t)vabs_s32(v17);
          int32x2_t v22 = (int32x2_t)vand_s8(v21, (int8x8_t)0x7F0000007FLL);
          a5 = COERCE_DOUBLE(vmul_s32(vmla_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmul_s32(vdup_n_s32(v19 >> 15), v22), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v19 & 0x7FFF), v22), 0xFuLL), vdup_n_s32(v19), (int32x2_t)vshr_n_u32((uint32x2_t)v21, 0xFuLL)), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v17), (int8x8_t)vdup_n_s32(v20), (int8x8_t)vdup_n_s32((v18 >> 31) | 1u))));
          *(double *)(v7 + 12) = a5;
        }
        v7 += 36;
        v11 -= 36;
      }
      while (v11);
    }
  }
  else if (v8)
  {
    uint64_t v23 = 36 * v8;
    int32x2_t v24 = (int *)(v7 + 32);
    do
    {
      unsigned int v25 = 1664525 * *(_DWORD *)a2 + 1013904223;
      *(_DWORD *)a2 = v25;
      int v26 = (v25 + (v25 >> 11)) & *(_DWORD *)(result + 32);
      int v27 = *(_DWORD *)(result + 24);
      BOOL v15 = __OFSUB__(v26, v27);
      int v28 = v26 - v27;
      if (v28 < 0 != v15)
      {
        LOWORD(a5) = *(_WORD *)(*(void *)(result + 16) + 2 * v26);
        WORD2(a5) = *(_WORD *)(*(void *)(result + 8) + 2 * v26);
        int32x2_t v29 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a5, 0x10uLL), 0x10uLL);
      }
      else
      {
        LOWORD(a5) = *(_WORD *)(*(void *)(result + 16) + 2 * v28);
        WORD2(a5) = *(_WORD *)(*(void *)(result + 8) + 2 * v28);
        int32x2_t v29 = vneg_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a5, 0x10uLL), 0x10uLL));
      }
      *int32x2_t v24 = v26;
      int v30 = *(v24 - 7);
      if (v30 >= 0) {
        unsigned int v31 = *(v24 - 7);
      }
      else {
        unsigned int v31 = -v30;
      }
      if (v30 >= 0) {
        unsigned int v32 = -1;
      }
      else {
        unsigned int v32 = 1;
      }
      int8x8_t v33 = (int8x8_t)vabs_s32(v29);
      int32x2_t v34 = (int32x2_t)vand_s8(v33, (int8x8_t)0x7F0000007FLL);
      a5 = COERCE_DOUBLE(vmul_s32(vmla_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmul_s32(vdup_n_s32(v31 >> 15), v34), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v31 & 0x7FFF), v34), 0xFuLL), vdup_n_s32(v31), (int32x2_t)vshr_n_u32((uint32x2_t)v33, 0xFuLL)), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v29), (int8x8_t)vdup_n_s32(v32), (int8x8_t)vdup_n_s32((v30 >> 31) | 1u))));
      *(double *)(v24 - 5) = a5;
      v24 += 9;
      v23 -= 36;
    }
    while (v23);
  }
  return result;
}

uint64_t *Rr2Pcm_AllocateAndInit(uint64_t a1, int *a2, int a3)
{
  uint64_t v6 = (uint64_t *)heap_Calloc(*(void **)(a1 + 8), 1, 40);
  if (v6 && Rr2Pcm_Init(a1, a2, v6, a3))
  {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v6);
    return 0;
  }
  return v6;
}

uint64_t Rr2Pcm_Init(uint64_t a1, int *a2, uint64_t *a3, int a4)
{
  *a3 = a1;
  uint64_t v8 = (_OWORD *)heap_Alloc(*(void *)(a1 + 8), 320);
  a3[1] = (uint64_t)v8;
  if (!v8) {
    return 2;
  }
  v8[18] = 0u;
  v8[19] = 0u;
  v8[16] = 0u;
  v8[17] = 0u;
  v8[14] = 0u;
  v8[15] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  *uint64_t v8 = 0u;
  v8[1] = 0u;
  uint64_t v9 = heap_Alloc(*(void *)(a1 + 8), 104);
  a3[2] = v9;
  if (!v9) {
    return 2;
  }
  *(void *)(v9 + 96) = 0;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  int v10 = (_OWORD *)heap_Alloc(*(void *)(a1 + 8), 256);
  a3[3] = (uint64_t)v10;
  if (!v10) {
    return 2;
  }
  v10[14] = 0u;
  v10[15] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[10] = 0u;
  v10[11] = 0u;
  v10[8] = 0u;
  v10[9] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  _OWORD *v10 = 0u;
  v10[1] = 0u;
  uint64_t v11 = heap_Alloc(*(void *)(a1 + 8), 72);
  a3[4] = v11;
  if (!v11) {
    return 2;
  }
  *(void *)(v11 + 64) = 0;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  uint64_t result = Rr2Pcm_InitProps(a1, a2, a3[1]);
  if (!(result | a4))
  {
    int v13 = (int *)a3[1];
    return Rr2Pcm_InitByProps(v13, a3);
  }
  return result;
}

uint64_t Rr2Pcm_InitProps(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)a3 = a1;
  if (a2)
  {
    uint64_t v5 = a2;
    LODWORD(a2) = a2[4];
    int v6 = v5[10];
    int v7 = *v5;
    *(_DWORD *)(a3 + 312) = v5[1];
    *(_DWORD *)(a3 + 16) = 256;
    *(void *)(a3 + 28) = 0x1B000000DCLL;
    if (v7 > 0) {
      int v8 = -1;
    }
    else {
      int v8 = v7;
    }
  }
  else
  {
    int v6 = 0;
    *(_DWORD *)(a3 + 312) = 0;
    *(_DWORD *)(a3 + 16) = 256;
    *(void *)(a3 + 28) = 0x1B000000DCLL;
    int v8 = -1;
  }
  *(void *)(a3 + 36) = 0x140000000ALL;
  if (Rr2Pcm_SetSampleRateDependentParams(a3, (int)a2, v8)) {
    return 1;
  }
  if (v6 != *(_DWORD *)(a3 + 24))
  {
    int v10 = *(_DWORD *)(a3 + 12);
    if (v10 >= *(_DWORD *)(a3 + 28)) {
      int v10 = *(_DWORD *)(a3 + 28);
    }
    *(_DWORD *)(a3 + 24) = v6;
    *(_DWORD *)(a3 + 28) = v10;
    *(_DWORD *)(a3 + 32) = v6 / 4;
    Rr2Pcm_SetDerivedParams((int *)a3);
  }
  *(_OWORD *)(a3 + 48) = xmmword_20D6AB8A0;
  *(_OWORD *)(a3 + 64) = xmmword_20D6AB8B0;
  *(void *)(a3 + 80) = 0x100000001;
  *(_OWORD *)(a3 + 96) = xmmword_20D6AB8C0;
  *(_OWORD *)(a3 + 112) = xmmword_20D6AB8D0;
  *(void *)(a3 + 128) = 0x40000000333;
  *(_DWORD *)(a3 + 136) = 4200;
  *(_WORD *)(a3 + 164) = 0;
  *(void *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 184) = xmmword_20D6AB8E0;
  uint64_t result = Rr2Pcm_initProcessMvf(a1, a3 + 200, 0);
  if (result) {
    return 2;
  }
  *(_DWORD *)(a3 + 280) = 1;
  *(_DWORD *)(a3 + 160) = 1;
  *(void *)(a3 + 264) = 0;
  *(void *)(a3 + 272) = 0;
  return result;
}

uint64_t Rr2Pcm_InitByProps(int *a1, uint64_t *a2)
{
  uint64_t v3 = a2[3];
  if (a1)
  {
    uint64_t v4 = a1;
    a2[1] = (uint64_t)a1;
  }
  else
  {
    uint64_t v4 = (int *)a2[1];
  }
  uint64_t v5 = (uint64_t *)a2[2];
  uint64_t v6 = a2[4];
  *(_DWORD *)uint64_t v3 = 12345;
  int v7 = v4[72];
  int v8 = 2 * v7;
  int v9 = v7 + 32 * v4[2] / (2 * v4[27]);
  if (v8 > v9) {
    int v9 = v8;
  }
  *(_DWORD *)(v3 + 104) = v9;
  int v10 = (void *)heap_Alloc(*(void *)(*a2 + 8), 36 * v9);
  *(void *)(v3 + 8) = v10;
  if (!v10) {
    return 2;
  }
  bzero(v10, 36 * *(unsigned int *)(v3 + 104));
  uint64_t v11 = (void *)heap_Alloc(*(void *)(*a2 + 8), 36 * *(unsigned int *)(v3 + 104));
  *(void *)uint64_t v6 = v11;
  if (!v11) {
    return 2;
  }
  bzero(v11, 36 * *(unsigned int *)(v3 + 104));
  unsigned int v12 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * *(unsigned int *)(v3 + 104));
  *(void *)(v3 + 24) = v12;
  if (!v12) {
    return 2;
  }
  bzero(v12, 4 * *(unsigned int *)(v3 + 104));
  if (*(int *)(v3 + 104) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(v3 + 24);
    do
    {
      *(_DWORD *)(v14 + 4 * v13) = v13;
      ++v13;
    }
    while (v13 < *(int *)(v3 + 104));
  }
  Init_SqrtSearch((void *)(v3 + 220));
  uint64_t v15 = *a2;
  *uint64_t v5 = *a2;
  uint64_t result = Init_SinTable(v15, (uint64_t)(v5 + 1), 0);
  if (!result)
  {
    uint64_t result = WindowTrans_Create((uint64_t)v5, v4);
    if (!result)
    {
      uint64_t result = Window_Create((uint64_t)v5, (uint64_t)v4);
      if (!result)
      {
        uint64_t result = NormRand_create((uint64_t)v5);
        if (!result)
        {
          int32x2_t v17 = (void *)heap_Alloc(*(void *)(*a2 + 8), 8 * (v4[3] / 2 + 1));
          *(void *)(v3 + 112) = v17;
          if (!v17) {
            return 2;
          }
          bzero(v17, 8 * (v4[3] / 2 + 1));
          int v18 = (void *)heap_Alloc(*(void *)(*a2 + 8), 8 * (v4[3] / 2 + 1));
          *(void *)(v3 + 176) = v18;
          if (!v18) {
            return 2;
          }
          bzero(v18, 8 * (v4[3] / 2 + 1));
          int v19 = *(_DWORD *)(v3 + 104) + 2;
          if (v19 <= 3 * v4[72]) {
            int v19 = 3 * v4[72];
          }
          unsigned int v20 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * v19);
          *(void *)(v3 + 152) = v20;
          if (!v20) {
            return 2;
          }
          int v21 = *(_DWORD *)(v3 + 104) + 2;
          if (v21 <= 3 * v4[72]) {
            int v21 = 3 * v4[72];
          }
          bzero(v20, 4 * v21);
          int32x2_t v22 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * *(unsigned int *)(v3 + 104));
          *(void *)(v3 + 136) = v22;
          if (!v22) {
            return 2;
          }
          bzero(v22, 4 * *(unsigned int *)(v3 + 104));
          uint64_t v23 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * *(unsigned int *)(v3 + 104));
          *(void *)(v3 + 144) = v23;
          if (!v23) {
            return 2;
          }
          bzero(v23, 4 * *(unsigned int *)(v3 + 104));
          int32x2_t v24 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * (2 * *(_DWORD *)(v3 + 104)));
          *(void *)(v6 + 32) = v24;
          if (!v24) {
            return 2;
          }
          bzero(v24, 4 * (2 * *(_DWORD *)(v3 + 104)));
          unsigned int v25 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * *(unsigned int *)(v3 + 104));
          *(void *)(v6 + 40) = v25;
          if (!v25) {
            return 2;
          }
          bzero(v25, 4 * *(unsigned int *)(v3 + 104));
          int v26 = v4[73];
          if (v26 <= *(_DWORD *)(v3 + 104)) {
            int v26 = *(_DWORD *)(v3 + 104);
          }
          int v27 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * (v26 + 2));
          *(void *)(v3 + 160) = v27;
          if (!v27) {
            return 2;
          }
          int v28 = v4[73];
          if (v28 <= *(_DWORD *)(v3 + 104)) {
            int v28 = *(_DWORD *)(v3 + 104);
          }
          bzero(v27, 4 * (v28 + 2));
          uint64_t result = DeempFreqResponse_Create((uint64_t)v5, (uint64_t)v4);
          if (!result)
          {
            int v29 = v4[72];
            int v31 = v4[2];
            int v30 = v4[3];
            if (v31 >= 0) {
              int v32 = v4[2];
            }
            else {
              int v32 = v31 + 1;
            }
            int v33 = (v30 * v4[15] + (v32 >> 1)) / v31;
            if (v29 < v33) {
              int v33 = v4[72];
            }
            *(_DWORD *)(v3 + 192) = v33;
            if (v4[10] + v4[9] < 1)
            {
              *(void *)(v3 + 16) = 0;
              *(void *)(v3 + 120) = 0;
              *(void *)(v3 + 240) = 0;
              *(void *)(v3 + 248) = 0;
              *(void *)(v6 + 64) = 0;
            }
            else
            {
              uint64_t result = FrameRateModificationSupport(v4, a2);
              if (result) {
                return result;
              }
              int v30 = v4[3];
              int v29 = v4[72];
            }
            int32x2_t v34 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * (v30 + v29 + 2));
            *(void *)(v3 + 184) = v34;
            if (!v34) {
              return 2;
            }
            bzero(v34, 4 * (v4[3] + v4[72] + 2));
            *(void *)(v3 + 184) += 8;
            if (v4[38] && v4[42])
            {
              uint64_t v35 = heap_Alloc(*(void *)(*a2 + 8), 56);
              v5[10] = v35;
              if (!v35) {
                return 2;
              }
              *(void *)(v35 + 48) = 0;
              *(_OWORD *)(v35 + 16) = 0u;
              *(_OWORD *)(v35 + 32) = 0u;
              *(_OWORD *)uint64_t v35 = 0u;
              unsigned int v36 = (_OWORD *)v5[10];
              *unsigned int v36 = TD_HP_FILTER_CASCADE_22;
              *(_OWORD *)((char *)v36 + 12) = *(long long *)((char *)&TD_HP_FILTER_CASCADE_22 + 12);
              uint64_t v37 = v5[10];
              *(_OWORD *)(v37 + 28) = unk_20D6AB90C;
              *(_OWORD *)(v37 + 40) = unk_20D6AB918;
            }
            int32x2_t v38 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * *(unsigned int *)(v3 + 104));
            *(void *)(v3 + 72) = v38;
            if (v38)
            {
              bzero(v38, 4 * *(unsigned int *)(v3 + 104));
              *(_WORD *)(v3 + 52) = 0;
              *(void *)(v3 + 80) = 1;
              *(_WORD *)(v6 + 20) = 0;
              *(_DWORD *)(v6 + 24) = 1;
              *(_WORD *)(v3 + 88) = 1024;
              int v39 = 10 * v4[2] * v4[3] / (474 * v4[5]);
              *(_DWORD *)(v3 + 92) = v39;
              int v40 = PositiveShortLog2((__int16)v39);
              *(_DWORD *)(v3 + 96) = v40;
              if (*(_DWORD *)(v3 + 92) > 1 << v40) {
                *(_DWORD *)(v3 + 96) = v40 + 1;
              }
              uint64_t result = 0;
              *(void *)(v6 + 8) = 0;
              *(_DWORD *)(v6 + 28) = 0;
              *(_DWORD *)(v6 + 56) = 0;
              *(_DWORD *)(v6 + 48) = 0;
              *(_DWORD *)(v3 + 228) = 0;
              return result;
            }
            return 2;
          }
        }
      }
    }
  }
  return result;
}

BOOL Rr2Pcm_SetProperty(int a1, uint64_t a2, char *__s1, const char *a4)
{
  BOOL result = 0;
  if (!strcmp(__s1, "PROD_CODE"))
  {
    int v7 = atoi(a4);
    if (Rr2Pcm_SetSampleRateDependentParams(a2, v7, *(_DWORD *)(a2 + 12))) {
      return 1;
    }
  }
  return result;
}

uint64_t Rr2Pcm_SetSampleRateDependentParams(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = 1;
  if (a2 <= 11024)
  {
    if (a2)
    {
      int v5 = 8000;
      if (a2 == 8000)
      {
        int v6 = 0;
        *(_DWORD *)(a1 + 8) = 8000;
        *(void *)(a1 + 20) = 0x2800000100;
        *(_DWORD *)(a1 + 44) = 80;
        if (a3 < 1) {
          a3 = 256;
        }
        int v7 = 40;
        goto LABEL_23;
      }
      if (a2 != 11000) {
        return v4;
      }
      goto LABEL_11;
    }
    int v6 = 0;
    int v5 = 0;
    int v7 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 44) = 0;
    a3 &= ~(a3 >> 31);
    *(void *)(a1 + 28) = 0;
    *(void *)(a1 + 20) = 0;
  }
  else
  {
    if (a2 <= 21999)
    {
      if (a2 != 11025)
      {
        int v5 = 16000;
        if (a2 != 16000) {
          return v4;
        }
        int v6 = 0;
        *(_DWORD *)(a1 + 8) = 16000;
        *(void *)(a1 + 20) = 0x5000000200;
        *(_DWORD *)(a1 + 44) = 160;
        if (a3 < 1) {
          a3 = 512;
        }
        int v7 = 80;
        goto LABEL_23;
      }
LABEL_11:
      int v6 = 0;
      int v5 = 11000;
      *(_DWORD *)(a1 + 8) = 11000;
      *(void *)(a1 + 20) = 0x3700000100;
      *(_DWORD *)(a1 + 44) = 110;
      if (a3 < 1) {
        a3 = 256;
      }
      int v7 = 55;
      goto LABEL_23;
    }
    int v5 = 22000;
    if (a2 != 22000 && a2 != 22050) {
      return v4;
    }
    *(_DWORD *)(a1 + 8) = 22000;
    *(void *)(a1 + 20) = 0x6E00000200;
    *(_DWORD *)(a1 + 44) = 220;
    if (a3 < 1) {
      a3 = 512;
    }
    int v7 = 110;
    int v6 = 1;
  }
LABEL_23:
  *(_DWORD *)(a1 + 12) = a3;
  unsigned int v8 = a3 >> 1;
  if (*(_DWORD *)(a1 + 28) < (signed int)(a3 >> 1)) {
    unsigned int v8 = *(_DWORD *)(a1 + 28);
  }
  if (v7 >= *(_DWORD *)(a1 + 32)) {
    int v7 = *(_DWORD *)(a1 + 32);
  }
  *(_DWORD *)(a1 + 28) = v8;
  *(_DWORD *)(a1 + 32) = v7;
  if (a3)
  {
    if (*(_DWORD *)(a1 + 16) < a3) {
      a3 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = a3;
  }
  if (v6) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  if (v6) {
    int v10 = 968;
  }
  else {
    int v10 = 1024;
  }
  *(_DWORD *)(a1 + 168) = v9;
  *(_DWORD *)(a1 + 172) = v10;
  if (a2) {
    Rr2Pcm_ProcessMvf_SetHbThr(a1 + 200, *(_DWORD *)(a1 + 136), v5);
  }
  return 0;
}

uint64_t Rr2Pcm_SetDerivedParams(int *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = 32 * a1[2];
  a1[35] = 3200 * (int)v2 / v3;
  a1[36] = 1280 * v2 / v3;
  a1[37] = 9600 * (int)v2 / v3;
  a1[11] = 2 * a1[6];
  if ((int)v2 >= 0) {
    int v4 = v2;
  }
  else {
    int v4 = v2 + 1;
  }
  a1[72] = v4 >> 1;
  uint64_t result = PositiveShortLog2((__int16)v2);
  a1[71] = result;
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  a1[73] = v6;
  a1[74] = (440 * (int)v6 + (a1[11] << 7)) / (a1[11] << 8);
  a1[75] = 32 * v7 / v6;
  a1[76] = (v6 << 20) / (32 * v7);
  a1[77] = ((int)v7 + 860160 * a1[6]) / (2 * (int)v7);
  return result;
}

uint64_t FrameRateModificationSupport(int *a1, void *a2)
{
  uint64_t v4 = a2[3];
  unsigned int v5 = 1;
  *(_DWORD *)(v4 + 232) = 1;
  int v6 = a1[6];
  if (a1[7] > v6)
  {
    unsigned int v5 = a1[9] + 1;
    *(_DWORD *)(v4 + 232) = v5;
  }
  if (a1[8] < v6)
  {
    v5 += a1[10];
    *(_DWORD *)(v4 + 232) = v5;
  }
  uint64_t v7 = (void *)heap_Alloc(*(void *)(*a2 + 8), 88 * v5);
  *(void *)(v4 + 240) = v7;
  if (!v7) {
    return 2;
  }
  bzero(v7, 88 * *(unsigned int *)(v4 + 232));
  unint64_t v8 = a1[10];
  uint64_t v9 = *(void *)(v4 + 240);
  if ((v8 & 0x80000000) == 0)
  {
    int v10 = a1[8];
    int v11 = ((2 * v10) | 1) * v8;
    int v12 = a1[6];
    int v13 = 2 * v8;
    uint64_t v14 = (v8 + 2) & 0x1FFFFFFFELL;
    uint64x2_t v15 = (uint64x2_t)vdupq_n_s64(v8);
    int v16 = (int *)(v9 + 92);
    int v17 = 4 * v12 - 4 * v10;
    int v18 = 2 * v12 - 2 * v10;
    int64x2_t v19 = (int64x2_t)xmmword_20D6072C0;
    int64x2_t v20 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v21 = vmovn_s64((int64x2_t)vcgeq_u64(v15, (uint64x2_t)v19));
      if (v21.i8[0]) {
        *(v16 - 22) = v11 / v13;
      }
      if (v21.i8[4]) {
        int *v16 = (v18 + v11) / v13;
      }
      int64x2_t v19 = vaddq_s64(v19, v20);
      v16 += 44;
      v11 += v17;
      v14 -= 2;
    }
    while (v14);
  }
  int v59 = a2;
  uint64_t v22 = a1[9];
  if ((int)v22 >= 1)
  {
    unint64_t v23 = 0;
    int v24 = a1[6];
    int v25 = a1[7];
    int v26 = ((2 * v24) | 1) * v22;
    int v27 = 2 * v22;
    uint64x2_t v28 = (uint64x2_t)vdupq_n_s64(v22 - 1);
    int v29 = 2 * v25 - 2 * v24;
    int v30 = 4 * v25 - 4 * v24;
    int v31 = (int *)(v9 + 88 * (int)v8 + 180);
    do
    {
      int32x2_t v32 = vmovn_s64((int64x2_t)vcgeq_u64(v28, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v23), (int8x16_t)xmmword_20D6072C0)));
      if (v32.i8[0]) {
        *(v31 - 22) = (v29 + v26) / v27;
      }
      if (v32.i8[4]) {
        *int v31 = (v30 + v26) / v27;
      }
      v23 += 2;
      v31 += 44;
      v26 += v30;
    }
    while (((v22 + 1) & 0x1FFFFFFFELL) != v23);
  }
  if ((int)v8 + (int)v22 < 0)
  {
    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v33 = 0;
    while (1)
    {
      int v34 = a1[3];
      uint64_t v35 = v9 + 88 * v33;
      int v37 = *(_DWORD *)(v35 + 4);
      unsigned int v36 = (_DWORD *)(v35 + 4);
      for (int i = 2 * v37; v34 >= i; v34 /= 2)
        ;
      int v39 = 2 * v34;
      if (v39 <= a1[4]) {
        int v39 = a1[4];
      }
      int v40 = (int *)(v9 + 88 * v33);
      *int v40 = v39;
      uint64_t v41 = 32 * a1[2];
      v40[6] = 3200 * v39 / v41;
      v40[7] = 1280 * v39 / v41;
      v40[8] = 9600 * v39 / v41;
      v40[2] = i;
      int v42 = v39 >= 0 ? v39 : v39 + 1;
      v40[4] = v42 >> 1;
      v40[3] = PositiveShortLog2((__int16)v39);
      uint64_t v43 = *v40;
      v40[5] = (440 * (int)v43 + (v40[2] << 7)) / (v40[2] << 8);
      uint64_t v44 = a1[2];
      v40[9] = 32 * v44 / v43;
      v40[10] = (v43 << 20) / (32 * v44);
      v40[11] = ((int)v44 + 860160 * *v36) / (2 * (int)v44);
      uint64_t v45 = *(void *)(v4 + 240) + 88 * v33;
      uint64_t Base = WindowTrans_Create_Base((void *)(v45 + 64), (_DWORD *)(v45 + 80), *(_DWORD *)(v45 + 20), *(_DWORD *)v45, *(_DWORD *)(v45 + 8));
      uint64_t v9 = *(void *)(v4 + 240);
      if (Base) {
        break;
      }
      uint64_t Base = Window_Create_Base((void *)(v9 + 88 * v33 + 72), *(_DWORD *)(v9 + 88 * v33 + 4));
      uint64_t v9 = *(void *)(v4 + 240);
      if (Base) {
        break;
      }
      uint64_t v47 = 88 * v33;
      unsigned int v48 = (_DWORD *)(v9 + 88 * v33);
      int v49 = v48[4];
      int v50 = a1[2];
      if (v50 >= 0) {
        int v51 = a1[2];
      }
      else {
        int v51 = v50 + 1;
      }
      if (v49 >= (*v48 * a1[15] + (v51 >> 1)) / v50) {
        int v49 = (*v48 * a1[15] + (v51 >> 1)) / v50;
      }
      int v52 = 10 * *v48 * v50 / (474 * a1[5]);
      v48[12] = v49;
      v48[13] = v52;
      int v53 = PositiveShortLog2((__int16)v52);
      uint64_t v9 = *(void *)(v4 + 240);
      *(_DWORD *)(v9 + v47 + 56) = v53;
      if (*(_DWORD *)(v9 + v47 + 52) > 1 << v53) {
        *(_DWORD *)(v9 + v47 + 56) = v53 + 1;
      }
      if (v33++ >= a1[10] + (uint64_t)a1[9])
      {
        uint64_t v55 = 0;
        goto LABEL_41;
      }
    }
    uint64_t v55 = Base;
LABEL_41:
    LODWORD(v8) = a1[10];
  }
  *(void *)(v4 + 248) = v9 + 88 * (int)v8;
  int v56 = (void *)heap_Alloc(*(void *)(*v59 + 8), 36 * *(unsigned int *)(v4 + 104));
  *(void *)(v4 + 16) = v56;
  if (!v56) {
    return 2;
  }
  bzero(v56, 36 * *(unsigned int *)(v4 + 104));
  int v57 = (void *)heap_Alloc(*(void *)(*v59 + 8), ((4 * a1[3]) & 0x3FFFFFFF8) + 8);
  *(void *)(v4 + 120) = v57;
  if (!v57) {
    return 2;
  }
  bzero(v57, ((4 * a1[3]) & 0x3FFFFFFF8) + 8);
  return v55;
}

void *Rr2Pcm_Deallocate(void *a1)
{
  uint64_t result = Rr2Pcm_Clear(a1);
  if (a1)
  {
    uint64_t v3 = *(void **)(*a1 + 8);
    return heap_Free(v3, (uint64_t)a1);
  }
  return result;
}

void *Rr2Pcm_Clear(void *a1)
{
  uint64_t v3 = (_DWORD *)a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = (void *)a1[3];
  unsigned int v5 = (uint64_t *)a1[4];
  uint64_t v6 = v4[9];
  if (v6)
  {
    heap_Free(*(void **)(*a1 + 8), v6);
    v4[9] = 0;
  }
  uint64_t v7 = v4[3];
  if (v7)
  {
    heap_Free(*(void **)(*a1 + 8), v7);
    v4[3] = 0;
  }
  uint64_t v8 = v4[1];
  if (v8)
  {
    heap_Free(*(void **)(*a1 + 8), v8);
    v4[1] = 0;
  }
  if (*v5)
  {
    heap_Free(*(void **)(*a1 + 8), *v5);
    *unsigned int v5 = 0;
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(*a1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  uint64_t v9 = v4[14];
  if (v9)
  {
    heap_Free(*(void **)(*a1 + 8), v9);
    v4[14] = 0;
  }
  uint64_t v10 = v4[22];
  if (v10)
  {
    heap_Free(*(void **)(*a1 + 8), v10);
    v4[22] = 0;
  }
  uint64_t v11 = v4[19];
  if (v11)
  {
    heap_Free(*(void **)(*a1 + 8), v11);
    v4[19] = 0;
  }
  uint64_t v12 = v4[17];
  if (v12)
  {
    heap_Free(*(void **)(*a1 + 8), v12);
    v4[17] = 0;
  }
  uint64_t v13 = v4[18];
  if (v13)
  {
    heap_Free(*(void **)(*a1 + 8), v13);
    v4[18] = 0;
  }
  uint64_t v14 = v5[4];
  if (v14)
  {
    heap_Free(*(void **)(*a1 + 8), v14);
    v5[4] = 0;
  }
  uint64_t v15 = v5[5];
  if (v15)
  {
    heap_Free(*(void **)(*a1 + 8), v15);
    v5[5] = 0;
  }
  uint64_t v16 = v4[20];
  if (v16)
  {
    heap_Free(*(void **)(*a1 + 8), v16);
    v4[20] = 0;
  }
  if (v3[10] + v3[9] > 0)
  {
    uint64_t v17 = v4[2];
    if (v17)
    {
      heap_Free(*(void **)(*a1 + 8), v17);
      v4[2] = 0;
    }
    uint64_t v18 = v4[15];
    if (v18)
    {
      heap_Free(*(void **)(*a1 + 8), v18);
      v4[15] = 0;
    }
    uint64_t v19 = v4[30];
    if (v19)
    {
      heap_Free(*(void **)(*a1 + 8), v19);
      v4[30] = 0;
    }
  }
  uint64_t v20 = v4[23];
  if (v20)
  {
    v4[23] = v20 - 8;
    heap_Free(*(void **)(*a1 + 8), v20 - 8);
    v4[23] = 0;
  }
  if (v3[38])
  {
    if (v3[42])
    {
      uint64_t v21 = *(void *)(v2 + 80);
      if (v21)
      {
        heap_Free(*(void **)(*a1 + 8), v21);
        *(void *)(v2 + 80) = 0;
      }
    }
  }
  uint64_t result = Rr2Pcm_clearProcessMvf((void *)*a1, a1[1] + 200);
  uint64_t v23 = a1[1];
  if (v23)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v23);
    a1[1] = 0;
  }
  uint64_t v24 = a1[2];
  if (v24)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v24);
    a1[2] = 0;
  }
  uint64_t v25 = a1[3];
  if (v25)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v25);
    a1[3] = 0;
  }
  uint64_t v26 = a1[4];
  if (v26)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v26);
    a1[4] = 0;
  }
  return result;
}

double Rr2Pcm_Reset(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  *(_WORD *)(v1 + 84) = 0;
  *(_WORD *)(v1 + 52) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(_DWORD *)(v1 + 86) = 0x4000000;
  *(_DWORD *)(v1 + 80) = 1;
  *(void *)(v2 + 8) = 0;
  *(void *)&double result = 1;
  *(void *)(v2 + 24) = 1;
  *(_DWORD *)(v2 + 56) = 0;
  return result;
}

uint64_t Rr2Pcm_ProcessFrame(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = (_DWORD *)a1[1];
  uint64_t v8 = a1[2];
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9 != 1)
  {
    if (v9) {
      goto LABEL_18;
    }
    int v10 = *(_DWORD *)(a2 + 48);
    if (v10)
    {
      if (v10 >= 7040)
      {
        if (v10 <= 0xD200) {
          unint64_t v11 = (40904451 * (unint64_t)(((v10 & 0x1FFFF) << 6) | 0x34u)) >> 32;
        }
        else {
          LOWORD(v11) = 0x8000;
        }
      }
      else
      {
        LOWORD(v11) = 4291;
      }
      *(_WORD *)(v5 + 50) = v11;
      *(_WORD *)(v5 + 48) = ((unsigned __int16)v11 | 0x10C30000u) / (2 * (unsigned __int16)v11);
      goto LABEL_18;
    }
LABEL_9:
    *(_DWORD *)(v5 + 48) = 0;
    goto LABEL_18;
  }
  int v12 = *(_DWORD *)(a2 + 48);
  if (!v12) {
    goto LABEL_9;
  }
  if (v12 <= 18618)
  {
    if (v12 >= 2439) {
      unsigned int v13 = (55 * ((v12 << 15) / 0x1F40u)) >> 7;
    }
    else {
      LOWORD(v13) = 4291;
    }
  }
  else
  {
    LOWORD(v13) = 0x8000;
  }
  *(_WORD *)(v5 + 48) = v13;
  *(_WORD *)(v5 + 50) = ((unsigned __int16)v13 | 0x10C30000u) / (2 * (unsigned __int16)v13);
LABEL_18:
  *(void *)(v5 + 64) = a2;
  uint64_t v14 = *(int **)(a2 + 24);
  uint64_t v15 = *(unsigned int *)(a2 + 40);
  *(void *)(v5 + 212) = 0;
  *(void *)(v5 + 204) = 0;
  int v16 = -50;
  if ((int)v15 >= 1)
  {
    do
    {
      int v18 = *v14++;
      int v17 = v18;
      if (v18 > v16) {
        int v16 = v17;
      }
      --v15;
    }
    while (v15);
  }
  uint64_t v19 = 77824 - v16;
  if (v19 < 0) {
    uint64_t v19 = 81919 - v16;
  }
  unint64_t v20 = (unint64_t)v19 >> 12;
  *(_DWORD *)(v5 + 196) = v20;
  *(_DWORD *)(v5 + 200) = ipow2(v16 + (v20 << 12));
  int v21 = v7[9];
  int v22 = v7[10];
  if (v21 + v22 >= 1)
  {
    int v23 = *(_DWORD *)(a2 + 80);
    int v24 = v23 - 1024;
    if (v23 < 1024)
    {
      int v28 = v7[6];
      int v29 = v28 - v7[8];
      if (v29) {
        int v29 = ((v29 << 10) + 2 * v22 * (1024 - v23) * v28) / (v29 << 11);
      }
      if (v29 >= v22) {
        int v29 = v7[10];
      }
      uint64_t v27 = *(void *)(v5 + 240) + 88 * v22 - 88 * v29;
    }
    else
    {
      int v25 = v7[6];
      int v26 = v7[7] - v25;
      if (v26) {
        int v26 = ((v26 << 10) + 2 * v21 * v24 * v25) / (v26 << 11);
      }
      if (v26 < v21) {
        int v21 = v26;
      }
      uint64_t v27 = *(void *)(v5 + 240) + 88 * v22 + 88 * v21;
    }
    *(void *)(v5 + 248) = v27;
  }
  if (v7[49])
  {
    *(_DWORD *)(v5 + 56) = Rr2Pcm_processMvf((uint64_t)v7, v5, *(void *)(v5 + 152), (_DWORD *)(v5 + 100));
  }
  else
  {
    int v30 = *(_DWORD *)(a2 + 60);
    if (v30)
    {
      if (*(_WORD *)(v5 + 48))
      {
        if (v30 >= v7[34]) {
          int v30 = v7[34];
        }
      }
      else
      {
        int v30 = 0;
      }
    }
    *(_DWORD *)(v5 + 56) = v30;
    *(_DWORD *)(v5 + 100) = 0;
  }
  Rr2Pcm_PrepareHarmonicInfo(v7, v8, v5, v6, 0);
  uint64_t result = Rr2Pcm_SetHarmonicInfo(v7, v8, v5, v6, 0);
  if (!result)
  {
    uint64_t result = Rr2Pcm_ProcessPhases((uint64_t)v7, v8, v5, v6);
    if (!result)
    {
      int32x2_t v32 = *(_DWORD **)(v5 + 248);
      if (v32)
      {
        uint64_t v33 = *(_DWORD **)(v6 + 64);
        if (v33)
        {
          if (*v32 == *v33)
          {
            memcpy(*(void **)(v5 + 16), *(const void **)(v5 + 8), 36 * *(unsigned int *)(v5 + 32));
            *(void *)(v5 + 40) = *(void *)(v5 + 32);
          }
          else
          {
            Rr2Pcm_PrepareHarmonicInfo(v7, v8, v5, v6, 1);
            unint64_t v34 = *(unsigned int *)(v5 + 40);
            uint64_t v35 = *(unsigned int *)(v5 + 32);
            if (*(void *)(v5 + 40) == *(void *)(v5 + 32))
            {
              if ((int)v34 >= 1)
              {
                unsigned int v36 = (_DWORD *)(*(void *)(v5 + 16) + 32);
                int v37 = (_DWORD *)(*(void *)(v5 + 8) + 32);
                do
                {
                  *((_OWORD *)v36 - 2) = *((_OWORD *)v37 - 2);
                  *(v36 - 4) = *(v37 - 4);
                  int v38 = *v37;
                  v37 += 9;
                  *unsigned int v36 = v38;
                  v36 += 9;
                  --v34;
                }
                while (v34);
              }
            }
            else if (*(_WORD *)(v5 + 48))
            {
              if ((int)v34 >= 1 && (int)v35 >= 1)
              {
                unint64_t v39 = 0;
                int v40 = 0;
                uint64_t v41 = *(void *)(v5 + 16);
                do
                {
                  int v42 = *(_DWORD *)(v41 + 36 * v39);
                  if (v42)
                  {
                    uint64_t v43 = v40;
                    uint64_t v44 = (int *)(*(void *)(v5 + 8) + 36 * v40--);
                    do
                    {
                      ++v40;
                      if (v43 >= v35) {
                        break;
                      }
                      int v45 = *v44;
                      v44 += 9;
                      ++v43;
                    }
                    while (!v45);
                  }
                  if (v40 < (int)v35 && (uint64_t v46 = *(void *)(v5 + 8), *(_DWORD *)(v46 + 36 * v40) == v42))
                  {
                    uint64_t v47 = v46 + 36 * v40;
                    uint64_t v48 = v41 + 36 * v39;
                    *(_OWORD *)(v48 + 4) = *(_OWORD *)(v47 + 4);
                    *(_DWORD *)(v48 + 32) = *(_DWORD *)(v47 + 32);
                    ++v40;
                  }
                  else
                  {
                    uint64_t v49 = v41 + 36 * v39;
                    *(void *)(v49 + 12) = 0;
                    *(void *)(v49 + 4) = 0;
                  }
                  ++v39;
                }
                while (v39 < v34 && v40 < (int)v35);
              }
            }
            else
            {
              int v50 = **(_DWORD **)(v6 + 64);
              int v51 = **(_DWORD **)(v5 + 248);
              BOOL v52 = v50 <= v51;
              int v53 = v51 / v50;
              int v54 = v50 / v51;
              if (v52) {
                int v55 = 1;
              }
              else {
                int v55 = v54;
              }
              if (v52) {
                int v56 = v53;
              }
              else {
                int v56 = 1;
              }
              if (v55 <= (int)v34 && v56 <= (int)v35)
              {
                int v57 = v56 - 1;
                uint64_t v58 = v56;
                uint64_t v59 = v55;
                uint64_t v60 = v55 + (uint64_t)(v55 - 1);
                int v61 = (_DWORD *)(*(void *)(v5 + 8) + 36 * (v56 - 1) + 32);
                uint64_t v62 = 36 * v56;
                unsigned int v63 = (_DWORD *)(*(void *)(v5 + 16) + 36 * (v55 - 1) + 16);
                uint64_t v64 = 36 * v55;
                uint64_t v65 = v58 + v57;
                do
                {
                  *((_OWORD *)v63 - 1) = *((_OWORD *)v61 - 2);
                  *unsigned int v63 = *(v61 - 4);
                  v63[4] = *v61;
                  if (v60 >= (int)v34) {
                    break;
                  }
                  v60 += v59;
                  int v61 = (_DWORD *)((char *)v61 + v62);
                  unsigned int v63 = (_DWORD *)((char *)v63 + v64);
                  BOOL v52 = v65 < (int)v35;
                  v65 += v58;
                }
                while (v52);
              }
            }
          }
          *(void *)(v5 + 212) = *(void *)(v5 + 204);
        }
      }
      Rr2Pcm_EnvLineSpectrumToPcm(v7, v8, v5, v6, a3);
      Rr2Pcm_UpdateState(v5, v6);
      return 0;
    }
  }
  return result;
}

double Rr2Pcm_UpdateState(uint64_t a1, uint64_t a2)
{
  memcpy(*(void **)a2, *(const void **)(a1 + 8), 36 * *(unsigned int *)(a1 + 32));
  double result = *(double *)(a1 + 32);
  *(double *)(a2 + 8) = result;
  *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 48);
  *(_DWORD *)(a2 + 18) = *(_DWORD *)(a1 + 50);
  int v5 = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 228);
  *(_DWORD *)(a2 + 52) = v5;
  *(void *)(a2 + 64) = *(void *)(a1 + 248);
  return result;
}

_DWORD *Rr2Pcm_PrepareHarmonicInfo(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5 = *(_DWORD *)(a3 + 56);
  uint64_t v6 = (void *)(a4 + 64);
  if (!a5) {
    uint64_t v6 = (void *)(a3 + 248);
  }
  uint64_t v7 = (_DWORD *)*v6;
  if (v7) {
    BOOL v8 = a5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = 8;
  if (!v8) {
    uint64_t v9 = 16;
  }
  int v10 = *(_DWORD *)(a3 + 56);
  if (!result[24]) {
    int v10 = result[34];
  }
  if (!result[25]) {
    int v5 = result[34];
  }
  uint64_t v11 = *(void *)(a3 + v9);
  int v12 = v7 + 3;
  unsigned int v13 = v7 + 9;
  uint64_t v14 = v7 + 10;
  BOOL v15 = v7 == 0;
  if (v7) {
    int v16 = v7 + 4;
  }
  else {
    int v16 = result + 72;
  }
  if (v15) {
    int v17 = result + 71;
  }
  else {
    int v17 = v12;
  }
  if (v15) {
    int v18 = result + 75;
  }
  else {
    int v18 = v13;
  }
  int v19 = *v16;
  if (v15) {
    unint64_t v20 = result + 76;
  }
  else {
    unint64_t v20 = v14;
  }
  if (*(_WORD *)(a3 + 48))
  {
    int v21 = *(unsigned __int16 *)(a3 + 50);
    int v22 = 9 - *v17;
    int v23 = (int)(((420 * v21) >> v22) + 2 * result[2]) / (4 * result[2]);
    int v24 = v19 - 1;
    unint64_t v25 = (unint64_t)(v23 + 8) >> 4;
    if (v19 - 1 <= (int)v25 || v19 < 1)
    {
      int v33 = 0;
      int v32 = 0;
      goto LABEL_31;
    }
    int v31 = 0;
    int v32 = 0;
    int v33 = 0;
    int v34 = 32 * v10;
    int v35 = 32 * v5;
    int v57 = *v20;
    int v36 = *v18;
    int v37 = *(unsigned __int16 *)(a3 + 50);
    int v38 = (int)(((420 * v21) >> v22) + 2 * result[2]) / (4 * result[2]);
    while (1)
    {
      v11 += 36;
      v37 += v21;
      unsigned int v39 = 420 * v37;
      int v40 = v32 + 1;
      while (1)
      {
        int v32 = v40;
        int v41 = v38 - 16 * v25 + 8;
        BOOL v42 = v41 == 16;
        if (v38 - 16 * v25 == 8) {
          int v41 = 0;
        }
        if (v42) {
          LODWORD(v25) = v25 + 1;
        }
        *(_DWORD *)(v11 - 16) = v25;
        *(_DWORD *)(v11 - 12) = v41;
        *(void *)(v11 - 36) = 0x7FFF00000001;
        *(_DWORD *)(v11 - 8) = v38;
        *(_DWORD *)(v11 - 4) = 0;
        *(void *)(v11 - 24) = 0x7FFFLL;
        int v38 = (int)((v39 >> v22) + 2 * result[2]) / (4 * result[2]);
        if (result[19])
        {
          int v43 = v38 * v36 / 16;
          if (v43 < v34) {
            goto LABEL_58;
          }
          int v44 = result[33];
          int v45 = 32 * result[34];
          if (v45 > v43)
          {
            if (v45 >= v34) {
              int v46 = v34;
            }
            else {
              int v46 = 32 * result[34];
            }
            int v44 = (((v43 - v46) << 10) / (v45 - v46) * v44 + (1024 - ((v43 - v46) << 10) / (v45 - v46)) * result[32])
                / 1024;
          }
          if (v44)
          {
            unsigned int v47 = 1664525 * *(_DWORD *)a3 + 1013904223;
            *(_DWORD *)a3 = v47;
            int v44 = (*(_DWORD *)(*(void *)(a2 + 96) + 4 * (v47 + (v47 >> 11))) * v44) >> 14;
            if (v44 >= 501) {
              int v44 = 501;
            }
            if (v44 <= -501) {
              int v44 = -501;
            }
          }
          v38 += (v44 * v23) >> 10;
        }
        if (!result[20])
        {
          ++v33;
          goto LABEL_82;
        }
        if (*(_DWORD *)(v11 - 8) * v36 / 16 >= v35) {
          break;
        }
LABEL_58:
        unint64_t v25 = (unint64_t)(v38 + 8) >> 4;
        v11 += 36;
        v39 += 420 * v21;
        v37 += v21;
        int v40 = v32 + 1;
        ++v33;
        if (v24 <= (int)v25 || v32 >= v19) {
          goto LABEL_31;
        }
      }
      int v49 = v38 * v36 / 16;
      int v50 = 32 * result[34];
      if (v50 >= v35) {
        int v51 = v35;
      }
      else {
        int v51 = 32 * result[34];
      }
      if (v49 >= v51)
      {
        int v52 = result[27];
        if (v50 > v49) {
          int v52 = (((v49 - v51) << 10) / (v50 - v51) * v52 + (1024 - ((v49 - v51) << 10) / (v50 - v51)) * result[26])
        }
              / 1024;
      }
      else
      {
        int v52 = 0;
      }
      int v53 = result[21];
      if (v31) {
        BOOL v54 = v53 == 0;
      }
      else {
        BOOL v54 = 1;
      }
      if (v54) {
        int v55 = *(_DWORD *)(v11 - 8) * v36 / 16;
      }
      else {
        int v55 = v31;
      }
      if (!v53) {
        v49 -= 7 * v52 / 8;
      }
      ++v33;
      if (v55 + v52 < v49)
      {
        int v56 = v57 * (v55 + v52);
        int v31 = v55;
        do
        {
          *(_DWORD *)(v11 + 20) = (v56 / 0x10000 + 8) >> 4;
          *(_DWORD *)(v11 + 24) = 8;
          *(void *)uint64_t v11 = 0x7FFF00000000;
          *(_DWORD *)(v11 + 28) = v56 / 0x10000;
          *(_DWORD *)(v11 + 32) = 0;
          *(void *)(v11 + 12) = 0x7FFFLL;
          v11 += 36;
          ++v33;
          v31 += v52;
          v56 += v57 * v52;
        }
        while (v52 + v31 < v49);
      }
LABEL_82:
      unint64_t v25 = (unint64_t)(v38 + 8) >> 4;
      if (v24 <= (int)v25 || v32 >= v19)
      {
LABEL_31:
        if (a5)
        {
          *(_DWORD *)(a3 + 40) = v33;
          *(_DWORD *)(a3 + 44) = v32;
        }
        else
        {
          *(_DWORD *)(a3 + 32) = v33;
          *(_DWORD *)(a3 + 36) = v32;
        }
        return result;
      }
    }
  }
  if (v19 >= 2)
  {
    uint64_t v27 = (_DWORD *)(v11 + 32);
    int v28 = 1;
    int v29 = 16;
    do
    {
      *(v27 - 3) = v28;
      *(v27 - 2) = 8;
      *(v27 - 1) = v29;
      *uint64_t v27 = 0;
      *((void *)v27 - 4) = 0x7FFF00000000;
      ++v28;
      *(void *)(v27 - 5) = 0x7FFFLL;
      v27 += 9;
      v29 += 16;
    }
    while (v19 != v28);
  }
  int v30 = v19 - 1;
  if (a5)
  {
    *(_DWORD *)(a3 + 40) = v30;
    *(_DWORD *)(a3 + 44) = 0;
  }
  else
  {
    *(_DWORD *)(a3 + 32) = v30;
    *(_DWORD *)(a3 + 36) = 0;
  }
  return result;
}

uint64_t GetAuxUvHarmResolution(_DWORD *a1, int a2, int a3)
{
  int v3 = 32 * a1[34];
  if (v3 >= a2) {
    int v4 = a2;
  }
  else {
    int v4 = 32 * a1[34];
  }
  if (a3 < v4) {
    return 0;
  }
  uint64_t result = a1[27];
  if (v3 > a3) {
    return ((((a3 - v4) << 10) / (v3 - v4) * (int)result + (1024 - ((a3 - v4) << 10) / (v3 - v4)) * a1[26])
  }
                        / 1024);
  return result;
}

uint64_t GetVoicedAmpAttenuation(_DWORD *a1, int a2, int a3)
{
  int v3 = 32 * a1[34];
  if (v3 >= a2) {
    int v4 = a2;
  }
  else {
    int v4 = 32 * a1[34];
  }
  if (a3 < v4) {
    return 1;
  }
  uint64_t result = a1[29];
  if (v3 > a3) {
    return ((((a3 - v4) << 10) / (v3 - v4) * (int)result + (1024 - ((a3 - v4) << 10) / (v3 - v4)) * a1[28])
  }
                        / 1024);
  return result;
}

uint64_t GetNoiseAttenuation(_DWORD *a1, int a2, int a3)
{
  int v3 = 32 * a1[34];
  if (v3 >= a2) {
    int v4 = a2;
  }
  else {
    int v4 = 32 * a1[34];
  }
  if (a3 < v4) {
    return 1;
  }
  uint64_t result = a1[31];
  if (v3 > a3) {
    return ((((a3 - v4) << 10) / (v3 - v4) * (int)result + (1024 - ((a3 - v4) << 10) / (v3 - v4)) * a1[30])
  }
                        / 1024);
  return result;
}

uint64_t Rr2Pcm_ProcessMvf_SetProperty(uint64_t a1, uint64_t a2, char *__s1, char *a4)
{
  if (!strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_SMOOTH_WIN"))
  {
    int v9 = atoi(a4);
    if (v9 < 1)
    {
      *(void *)(a2 + 32) = 0;
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 32);
      if (v10)
      {
        heap_Free(*(void **)(a1 + 8), v10);
        *(void *)(a2 + 32) = 0;
      }
      uint64_t v11 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * v9);
      *(void *)(a2 + 32) = v11;
      if (!v11) {
        return 2;
      }
      bzero(v11, 4 * v9);
    }
    uint64_t result = 0;
    *(_DWORD *)(a2 + 48) = v9;
    return result;
  }
  int v15 = 0;
  if (!strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_THR"))
  {
    uint64_t result = string2fixed(a1, a4, 1024, &v15);
    if (!result) {
      *(_DWORD *)(a2 + 20) = v15;
    }
  }
  else if (!strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_RATIO_EN_THR"))
  {
    uint64_t result = string2fixed(a1, a4, 1024, &v15);
    if (!result) {
      *(_DWORD *)(a2 + 16) = v15;
    }
  }
  else if (!strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_MVF_THR"))
  {
    int v12 = atoi(a4);
    uint64_t result = 0;
    *(_DWORD *)(a2 + 8) = v12;
  }
  else if (!strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_BY_LOW_EN"))
  {
    int v13 = atoi(a4);
    uint64_t result = 0;
    *(_DWORD *)(a2 + 52) = v13 != 0;
  }
  else if (!strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_BY_RATIO_EN"))
  {
    int v14 = atoi(a4);
    uint64_t result = 0;
    *(_DWORD *)(a2 + 56) = v14 != 0;
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t Rr2Pcm_initProcessMvf(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a2 + 16) = 0x33300000133;
  *(_OWORD *)a2 = xmmword_20D6AB940;
  *(_DWORD *)(a2 + 28) = 768;
  if (a3 < 1)
  {
    *(void *)(a2 + 32) = 0;
    goto LABEL_5;
  }
  int v5 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * a3);
  *(void *)(a2 + 32) = v5;
  if (v5)
  {
    bzero(v5, 4 * a3);
LABEL_5:
    uint64_t result = 0;
    *(void *)(a2 + 40) = 0xFFFFFFFFLL;
    *(_DWORD *)(a2 + 48) = a3;
    *(void *)(a2 + 52) = 0x100000001;
    return result;
  }
  return 2;
}

void *Rr2Pcm_clearProcessMvf(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 32);
    if (v3)
    {
      uint64_t result = heap_Free((void *)result[1], v3);
      *(void *)(a2 + 32) = 0;
    }
  }
  return result;
}

uint64_t Rr2Pcm_ProcessMvf_SetHbThr(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 24) = (a2 << 11) / a3;
  return result;
}

uint64_t Rr2Pcm_processMvf(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(unsigned int *)(v4 + 60);
  *a4 = 0;
  int v6 = *(_DWORD *)(a1 + 200);
  if ((int)v5 <= v6) {
    return v5;
  }
  int v8 = *(_DWORD *)(a1 + 204);
  if ((int)v5 >= v8) {
    return v5;
  }
  uint64_t v11 = v5;
  if (*(_DWORD *)(a1 + 252))
  {
    int v12 = *(_DWORD *)(v4 + 64);
    uint64_t v11 = v5;
    if (v12 >= 1)
    {
      int v13 = v12 << 10;
      int v14 = *(_DWORD *)(a1 + 312);
      uint64_t v11 = v5;
      if (v13 < *(_DWORD *)(a1 + 220) * v14)
      {
        int v15 = *(_DWORD *)(a1 + 208);
        uint64_t v11 = *(unsigned int *)(a1 + 200);
        if ((int)v5 < v15) {
          return v11;
        }
        uint64_t v11 = (v6
                           + (((((int)v5 - v15) << 10)
                             / (v8 - v15)
                             * ((((int)v5 - v15) << 10)
                              / (v8 - v15))
                             * (v13
                              / v14)) >> 20)
                           * *(_DWORD *)(a1 + 212)
                           / 1024);
      }
    }
  }
  if (!*(_DWORD *)(a1 + 256)) {
    return v11;
  }
  if (*(_DWORD *)(v4 + 8) && *(_DWORD *)(v4 + 16))
  {
    *a4 = 1;
    if (*(_DWORD *)(a1 + 280) && *(int *)(v4 + 40) >= 2)
    {
      uint64_t v16 = 0;
      do
      {
        unsigned int v17 = *(_DWORD *)(*(void *)(v4 + 24) + 4 * v16 + 4) + (*(_DWORD *)(a2 + 196) << 12);
        *(_DWORD *)(a3 + 4 * v16) = v17;
        *(_DWORD *)(a3 + 4 * v16) = ipow2(v17);
        uint64_t v18 = v16 + 2;
        ++v16;
      }
      while (v18 < *(int *)(*(void *)(a2 + 64) + 40));
    }
  }
  else
  {
    a3 = *(void *)(v4 + 24) + 4;
  }
  int v20 = *(_DWORD *)(v4 + 40) - 1;
  int v21 = v20 * *(_DWORD *)(a1 + 224);
  if (v21 < 1024)
  {
    LODWORD(v23) = 0;
    int v22 = 0;
  }
  else
  {
    int v22 = 0;
    uint64_t v23 = v21 >> 10;
    uint64_t v24 = v23;
    unint64_t v25 = (int *)a3;
    do
    {
      int v26 = *v25++;
      v22 += v26;
      --v24;
    }
    while (v24);
  }
  if ((int)v23 >= v20)
  {
    uint64_t v28 = 0;
    if (v22) {
      goto LABEL_30;
    }
    return v11;
  }
  int v27 = 0;
  uint64_t v23 = v23;
  do
    v27 += *(_DWORD *)(a3 + 4 * v23++);
  while (v20 > (int)v23);
  uint64_t v28 = (uint64_t)v27 << 10;
  if (!v22) {
    return v11;
  }
LABEL_30:
  uint64_t v29 = *(void *)(a1 + 232);
  uint64_t v30 = v28 / v22;
  if (v29)
  {
    int v31 = *(_DWORD *)(a1 + 248);
    int v32 = *(_DWORD *)(a1 + 240);
    if (v32 < 0)
    {
      int v34 = *(_DWORD *)(a1 + 244);
      int v36 = v30;
    }
    else
    {
      int v33 = 1;
      int v34 = *(_DWORD *)(a1 + 240);
      int v35 = v30;
      while (v33 == 1 || v34 != *(_DWORD *)(a1 + 244))
      {
        v35 += *(_DWORD *)(v29 + 4 * v34);
        int v34 = (v34 + 1) % v31;
        ++v33;
      }
      int v36 = v35 / v33;
    }
    if (v32 == v34) {
      *(_DWORD *)(a1 + 240) = (v32 + 1) % v31;
    }
    *(_DWORD *)(v29 + 4 * v34) = v30;
    int v37 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)(a1 + 244) = (*(_DWORD *)(a1 + 244) + 1) % v31;
    if (v37 < 0) {
      *(_DWORD *)(a1 + 240) = 0;
    }
  }
  else
  {
    int v36 = v30;
  }
  if (v36 > *(_DWORD *)(a1 + 216))
  {
    int v38 = 0x100000 / v36;
    if (0x100000 / v36 >= *(_DWORD *)(a1 + 228)) {
      int v38 = *(_DWORD *)(a1 + 228);
    }
    LODWORD(v5) = *(_DWORD *)(a1 + 200)
                + (((((int)v5 - *(_DWORD *)(a1 + 200)) << 10)
                  / *(_DWORD *)(a1 + 212)
                  * ((((int)v5 - *(_DWORD *)(a1 + 200)) << 10)
                   / *(_DWORD *)(a1 + 212))
                  * v38) >> 20)
                * *(_DWORD *)(a1 + 212)
                / 1024;
  }
  if ((int)v5 >= (int)v11) {
    return v11;
  }
  else {
    return v5;
  }
}

uint64_t FindBestRationalFactor(uint64_t result, int a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v4 = 0;
  int v5 = 0x7FFFFFFF;
  do
  {
    int v6 = (int *)((char *)&aiRationalFactors + 4 * v4);
    int v7 = *v6;
    int v8 = v6[1];
    int v9 = v7 * result - v8 * a2;
    if (v9 < 0) {
      int v9 = v8 * a2 - v7 * result;
    }
    if ((v7 * (int)result + (v9 << 12)) / (2 * v7 * (int)result) < v5)
    {
      *a3 = v7;
      *a4 = v8;
      int v5 = (v7 * (int)result + (v9 << 12)) / (2 * v7 * (int)result);
    }
    BOOL v10 = v4 >= 0x14;
    v4 += 2;
  }
  while (!v10);
  return result;
}

void *Rr2Pcm_EnvLineSpectrumToPcm(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a3;
  int v8 = (void **)a1;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  unint64_t v11 = *(unsigned int *)(a3 + 32);
  unint64_t v12 = *(unsigned int *)(a3 + 40);
  uint64_t v175 = 0;
  int v13 = *(int **)(a3 + 248);
  if (!v13)
  {
    int v18 = 0;
    int v16 = 0;
    int v15 = a1[3];
    int v17 = *(_DWORD *)(a2 + 64);
    goto LABEL_8;
  }
  int v14 = *(int **)(a4 + 64);
  int v15 = *v13;
  if (!v14)
  {
    int v18 = 0;
    int v16 = 0;
    int v17 = v13[20];
    goto LABEL_8;
  }
  int v16 = *v14;
  if (v15 == *v14)
  {
    int v17 = v13[20];
    if (v13[1] == v14[1])
    {
      int v18 = 0;
      int v16 = 0;
LABEL_8:
      int v19 = -14;
      goto LABEL_11;
    }
  }
  else
  {
    int v17 = v13[20];
  }
  int v19 = v14[20] - 14;
  int v18 = 1;
LABEL_11:
  if (*(_WORD *)(a3 + 48))
  {
    ReconstructDftFromHarmonies(a1, a2, a3, a4, v11 - 1, 0);
    *(_DWORD *)(v6 + 204) = v17 + *(_DWORD *)(v6 + 204) - 14;
    if (!v18) {
      goto LABEL_35;
    }
    ReconstructDftFromHarmonies(v8, a2, v6, a4, v12 - 1, 1);
    goto LABEL_34;
  }
  int v20 = *(int **)(a3 + 112);
  *(void *)int v20 = 0;
  int v21 = 2;
  if ((int)v11 >= 1 && v15 >= 2)
  {
    int v22 = (_DWORD *)(v9 + 16);
    uint64_t v23 = v20 + 3;
    int v24 = 4;
    unint64_t v25 = 1;
    do
    {
      *(v23 - 1) = *(v22 - 1);
      *uint64_t v23 = *v22;
      int v26 = v24 + 2;
      if (v25 >= v11) {
        break;
      }
      v22 += 9;
      ++v25;
      v23 += 2;
      BOOL v89 = v15 < v24;
      v24 += 2;
    }
    while (!v89);
    int v21 = v26 - 2;
  }
  int v27 = v15 + 2;
  if (v21 < v15 + 2) {
    bzero(&v20[v21], 4 * (v15 - v21 + 1) + 4);
  }
  ScaleTo16BitSignedRange(v20, v27, (int *)&v175 + 1, (int *)&v175, 0, 0);
  int v28 = *(_DWORD *)(v6 + 208) + HIDWORD(v175);
  *(_DWORD *)(v6 + 204) += v175;
  *(_DWORD *)(v6 + 208) = v28;
  if (v18)
  {
    uint64_t v29 = *(int **)(v6 + 120);
    *(void *)uint64_t v29 = 0;
    int v30 = 2;
    if ((int)v12 >= 1 && v16 >= 2)
    {
      int v31 = (_DWORD *)(v10 + 16);
      int v32 = v29 + 3;
      int v33 = 4;
      unint64_t v34 = 1;
      do
      {
        *(v32 - 1) = *(v31 - 1);
        *int v32 = *v31;
        int v35 = v33 + 2;
        if (v34 >= v12) {
          break;
        }
        v31 += 9;
        ++v34;
        v32 += 2;
        BOOL v89 = v16 < v33;
        v33 += 2;
      }
      while (!v89);
      int v30 = v35 - 2;
    }
    if (v30 < v16 + 2) {
      bzero(&v29[v30], 4 * (v16 - v30 + 1) + 4);
    }
    ScaleTo16BitSignedRange(v29, v16 + 2, (int *)&v175 + 1, (int *)&v175, 0, 0);
    int v19 = v175;
    *(_DWORD *)(v6 + 216) += HIDWORD(v175);
LABEL_34:
    *(_DWORD *)(v6 + 212) += v19;
  }
LABEL_35:
  int v36 = *(int **)(v6 + 112);
  int v37 = *(int **)(v6 + 248);
  int v174 = v18;
  uint64_t v173 = a2;
  if (v18)
  {
    int v38 = *(int **)(a4 + 64);
    int v39 = v38[1];
    int v170 = *v38;
    int v40 = *(_DWORD **)(v6 + 120);
    uint64_t v160 = *((void *)v38 + 9);
    int v18 = *(_DWORD *)(v6 + 216);
    int v163 = *(_DWORD *)(v6 + 212);
  }
  else
  {
    int v40 = 0;
    int v170 = 0;
    int v39 = 0;
    int v163 = 0;
    uint64_t v160 = 0;
  }
  uint64_t v164 = a5;
  int v41 = *(_WORD **)(a5 + 16);
  __dst = *(_DWORD **)(v6 + 184);
  int v167 = *(_DWORD *)(v6 + 208);
  int v168 = *(_DWORD *)(v6 + 204);
  BOOL v42 = v37 + 2;
  int v43 = v37 + 18;
  BOOL v44 = v37 == 0;
  if (v37)
  {
    int v45 = (unsigned int *)(v37 + 1);
  }
  else
  {
    int v37 = (int *)v8 + 3;
    int v45 = (unsigned int *)(v8 + 3);
  }
  if (v44) {
    int v46 = (int *)v8 + 11;
  }
  else {
    int v46 = v42;
  }
  if (v44) {
    unsigned int v47 = (int *)(v173 + 48);
  }
  else {
    unsigned int v47 = v43;
  }
  uint64_t v48 = *(void *)v47;
  int v161 = *v46;
  uint64_t v169 = *v45;
  uint64_t v49 = *v37;
  v36[1] = v36[v49];
  int v50 = (unsigned __int16 *)call_cfsv_construct((uint64_t)*v8, (uint64_t)v36, v49, 15);
  if (v50)
  {
    int v51 = (__int16 *)v50;
    call_cfsv_changeInputSampleOrder(v50, *(void *)(v6 + 176));
    call_cfsv_rifft(v51, (__int16)v49);
    int v50 = (unsigned __int16 *)v51;
  }
  uint64_t v171 = v49;
  int v52 = v167 - v168;
  uint64_t v166 = (uint64_t)v50;
  if (v174)
  {
    v40[1] = v40[v170];
    int v53 = (unsigned __int16 *)call_cfsv_construct((uint64_t)*v8, (uint64_t)v40, v170, 15);
    if (v53)
    {
      uint64_t v54 = *(void *)(v6 + 176);
      uint64_t v159 = v6;
      int v55 = v8;
      int v56 = v36;
      int v57 = (__int16 *)v53;
      call_cfsv_changeInputSampleOrder(v53, v54);
      call_cfsv_rifft(v57, (__int16)v170);
      int v53 = (unsigned __int16 *)v57;
      int v36 = v56;
      int v8 = v55;
      uint64_t v6 = v159;
    }
    v18 -= v163;
    uint64_t v162 = (uint64_t)v53;
    if (*(_WORD *)(v6 + 48))
    {
      uint64_t v58 = v164;
      uint64_t v59 = a4;
      uint64_t v60 = __dst;
      uint64_t v62 = v169;
      int v61 = v170;
LABEL_70:
      if (v52 < 1)
      {
        uint64_t v74 = v171;
        if (v167 != v168 && (v62 & 0x80000000) == 0)
        {
          uint64_t v82 = v62 + 1;
          uint64_t v83 = v36;
          do
          {
            *v83++ >>= v168 - v167;
            --v82;
          }
          while (v82);
        }
      }
      else
      {
        uint64_t v74 = v171;
        if ((v62 & 0x80000000) == 0)
        {
          uint64_t v75 = v62 + 1;
          unsigned int v76 = v36;
          do
          {
            *v76++ <<= v52;
            --v75;
          }
          while (v75);
        }
      }
      if (v18 < 1)
      {
        if (v18 && v39 >= 1)
        {
          uint64_t v85 = v61 - v39;
          do
          {
            v40[v85] = (int)v40[v85] >> -(char)v18;
            ++v85;
          }
          while (v85 < v61);
        }
      }
      else if (v39 >= 1)
      {
        uint64_t v84 = v61 - v39;
        do
          v40[v84++] <<= v18;
        while (v84 < v61);
      }
      int v80 = v174;
      goto LABEL_97;
    }
    int v61 = v170;
    if (v39 >= 2)
    {
      uint64_t v63 = v39 - 1;
      uint64_t v64 = (__int16 *)(v160 + 2);
      uint64_t v65 = &v40[v170 - v39 + 1];
      do
      {
        int v66 = *v64++;
        *uint64_t v65 = (*v65 * v66) >> 15;
        ++v65;
        --v63;
      }
      while (v63);
    }
    bzero(v40, 4 * (v171 - v39 + 1));
    uint64_t v67 = (int)v169;
    if ((int)v169 > 1)
    {
      uint64_t v68 = 2 * v169 - 2;
      uint64_t v69 = v36 + 1;
      do
      {
        *uint64_t v69 = (*v69 * *(__int16 *)(v48 + v68)) >> 15;
        ++v69;
        v68 -= 2;
      }
      while (v68);
      uint64_t v67 = v169;
    }
    unsigned int v70 = v171 - v169;
    uint64_t v58 = v164;
  }
  else
  {
    uint64_t v62 = v169;
    if (*(_WORD *)(v6 + 48))
    {
      uint64_t v162 = 0;
      uint64_t v58 = v164;
      uint64_t v59 = a4;
      uint64_t v60 = __dst;
      int v61 = v170;
      goto LABEL_75;
    }
    uint64_t v67 = (int)v169;
    if ((int)v169 > 1)
    {
      uint64_t v71 = 2 * v169 - 2;
      int v72 = v36 + 1;
      uint64_t v73 = 2;
      do
      {
        v72[(int)v49 - (int)v169] = (v72[(int)v49 - (int)v169] * *(__int16 *)(v48 + v73)) >> 15;
        *int v72 = (*v72 * *(__int16 *)(v48 + v71)) >> 15;
        ++v72;
        v73 += 2;
        v71 -= 2;
      }
      while (v71);
      uint64_t v67 = v169;
    }
    uint64_t v162 = 0;
    unsigned int v70 = v49 - 2 * v169 + 1;
    uint64_t v58 = v164;
    int v61 = v170;
  }
  bzero(&v36[v67], 4 * v70);
  uint64_t v59 = a4;
  uint64_t v60 = __dst;
  uint64_t v62 = v169;
  if (v174) {
    goto LABEL_70;
  }
LABEL_75:
  if (v52 < 1)
  {
    if ((v52 & 0x80000000) == 0)
    {
      int v80 = v174;
      uint64_t v74 = v171;
      if (!*((_DWORD *)v8 + 40)) {
        goto LABEL_134;
      }
      goto LABEL_114;
    }
    char v154 = v168 - v167;
    *v36 >>= v168 - v167;
    int v80 = v174;
    uint64_t v74 = v171;
    if ((int)v62 >= 1)
    {
      BOOL v155 = v36;
      uint64_t v156 = v62;
      uint64_t v157 = v36;
      do
      {
        int v158 = v157[1];
        *++uint64_t v157 = v158 >> v154;
        v155[(int)v171 - (int)v62] >>= v154;
        BOOL v155 = v157;
        --v156;
      }
      while (v156);
    }
  }
  else
  {
    *v36 <<= v52;
    if ((int)v62 < 1)
    {
      int v80 = v174;
      uint64_t v74 = v171;
    }
    else
    {
      uint64_t v74 = v171;
      int8x8_t v77 = v36;
      uint64_t v78 = v62;
      uint64_t v79 = v36;
      int v80 = v174;
      do
      {
        int v81 = v79[1];
        *++uint64_t v79 = v81 << v52;
        v77[(int)v171 - (int)v62] <<= v52;
        int8x8_t v77 = v79;
        --v78;
      }
      while (v78);
    }
  }
LABEL_97:
  if (*((_DWORD *)v8 + 40))
  {
    if (v80)
    {
      LODWORD(v86) = v61 - v39;
      int v87 = v40[v61 - v39];
      int v88 = v36[(int)v169];
      BOOL v89 = (v87 - 6) >= 0xFFFFFFF5 && v88 <= 5;
      if (v89 && v88 > -6)
      {
LABEL_130:
        if (v39 >= 2)
        {
          uint64_t v112 = v39 - 1;
          uint64_t v113 = v60 + 1;
          uint64_t v114 = &v40[(int)v86 + 1];
          do
          {
            int v115 = *v114++;
            *v113++ += v115;
            --v112;
          }
          while (v112);
        }
        goto LABEL_138;
      }
      int v91 = (v88 - v87) << 10;
      int v92 = v87 << 10;
      int v93 = v91 / (v39 + (int)v62 - 1);
      if (v39 >= 1)
      {
        uint64_t v86 = (int)v86;
        unint64_t v94 = v92 + 512;
        do
        {
          v40[v86++] -= v94 >> 10;
          v92 += v93;
          v94 += v93;
        }
        while (v86 < v61);
      }
      if ((v62 & 0x80000000) == 0)
      {
        uint64_t v95 = v92;
        uint64_t v96 = v62 + 1;
        unint64_t v97 = v95 + 512;
        uint64_t v98 = v36;
        do
        {
          *v98++ -= v97 >> 10;
          v97 += v93;
          --v96;
        }
        while (v96);
      }
      goto LABEL_128;
    }
LABEL_114:
    LODWORD(v99) = v74 - v62;
    int v100 = v36[(int)v74 - (int)v62];
    int v101 = v36[(int)v169];
    if ((v100 - 6) >= 0xFFFFFFF5 && v101 <= 5 && v101 > -6) {
      goto LABEL_134;
    }
    int v104 = (v101 - v100) << 10;
    int v105 = v100 << 10;
    int v106 = v104 / (v161 - 1);
    if ((int)v62 >= 1)
    {
      uint64_t v99 = (int)v99;
      unint64_t v107 = v105 + 512;
      do
      {
        v36[v99++] -= v107 >> 10;
        v105 += v106;
        v107 += v106;
      }
      while (v99 < v74);
    }
    if ((v62 & 0x80000000) == 0)
    {
      uint64_t v108 = v105;
      uint64_t v109 = v62 + 1;
      unint64_t v110 = v108 + 512;
      int v111 = v36;
      do
      {
        *v111++ -= v110 >> 10;
        v110 += v106;
        --v109;
      }
      while (v109);
    }
  }
LABEL_128:
  if (v80)
  {
    LODWORD(v86) = v61 - v39;
    goto LABEL_130;
  }
LABEL_134:
  if ((int)v62 >= 2)
  {
    uint64_t v116 = v62 - 1;
    v117 = v60 + 1;
    uint64_t v118 = &v36[(int)v74 - (int)v62 + 1];
    do
    {
      int v119 = *v118++;
      *v117++ += v119;
      --v116;
    }
    while (v116);
  }
  int v39 = v62;
LABEL_138:
  *(_DWORD *)(v58 + 8) = v39;
  uint64_t v120 = *(int **)(v6 + 184);
  int v121 = *((__int16 *)v8 + 82);
  int v122 = *((_DWORD *)v8 + 42);
  if (*((_WORD *)v8 + 82))
  {
    int v123 = *(_DWORD *)(v59 + 56);
    if (v39 >= 1)
    {
      uint64_t v124 = v39;
      uint64_t v125 = *(int **)(v6 + 184);
      do
      {
        int v123 = *v125 + ((v123 * v121) >> 15);
        *v125++ = v123;
        --v124;
      }
      while (v124);
    }
    *(_DWORD *)(v59 + 56) = v123;
  }
  else
  {
    *(_DWORD *)(v59 + 56) = v120[v39 - 1];
  }
  if (!*((_DWORD *)v8 + 38) || !*((_DWORD *)v8 + 42)) {
    goto LABEL_171;
  }
  if (v122 > 1)
  {
    uint64_t v126 = 0;
    LODWORD(v127) = v122 >> 1;
    uint64_t v128 = *(void *)(v173 + 80);
    if ((int)v127 <= 1) {
      uint64_t v127 = 1;
    }
    else {
      uint64_t v127 = v127;
    }
    do
    {
      uint64_t v129 = (unsigned char *)(v128 + 28 * v126);
      if ((*(_DWORD *)v129 & 0x80000000) != 0)
      {
        if (v39 >= 1)
        {
          int v133 = (unsigned int *)v120;
          uint64_t v134 = v39;
          do
          {
            unsigned int v135 = *v133;
            if ((int)*v133 < 1) {
              unsigned int v136 = -(-v135 >> -*v129);
            }
            else {
              unsigned int v136 = v135 >> -*v129;
            }
            *v133++ = v136;
            --v134;
          }
          while (v134);
        }
      }
      else
      {
        if (*(_DWORD *)v129) {
          BOOL v130 = v39 < 1;
        }
        else {
          BOOL v130 = 1;
        }
        if (!v130)
        {
          int v131 = v120;
          uint64_t v132 = v39;
          do
          {
            *v131++ <<= *(_DWORD *)v129;
            --v132;
          }
          while (v132);
        }
      }
      uint64_t v137 = v128 + 28 * v126;
      v138 = (_DWORD *)(v137 + 12);
      *(v120 - 1) = *(_DWORD *)(v137 + 12);
      int v140 = *(_DWORD *)(v137 + 16);
      unsigned int v139 = (_DWORD *)(v137 + 16);
      *(v120 - 2) = v140;
      if (v39 >= 1)
      {
        int v141 = v139 + 1;
        int v143 = v139[1];
        int v142 = v139[2];
        uint64_t v144 = v120;
        uint64_t v145 = v39;
        do
        {
          int v146 = v142 - 2 * v143;
          int v143 = *v144;
          *uint64_t v144 = v146 + *v144 - (*(v144 - 1) * *(v139 - 3) + *(v144 - 2) * *(v139 - 2)) / 0x4000;
          ++v144;
          int v142 = *v141;
          *int v141 = v143;
          v139[2] = v142;
          --v145;
        }
        while (v145);
      }
      _DWORD *v138 = v120[v39 - 1];
      *unsigned int v139 = v120[v39 - 2];
      ++v126;
    }
    while (v126 != v127);
  }
  if (v39 >= 1)
  {
    uint64_t v147 = v39;
    uint64_t v148 = v120;
    do
    {
      *uint64_t v148 = *v148 * *((_DWORD *)v8 + 43) / 1024;
      ++v148;
      --v147;
    }
    while (v147);
LABEL_171:
    if (v39 >= 1)
    {
      uint64_t v149 = v39;
      do
      {
        int v151 = *v120++;
        __int16 v150 = v151;
        int v152 = (v151 >> 31) + 0x7FFF;
        if (((v151 >> 15) + 1) >= 2) {
          __int16 v150 = v152;
        }
        *v41++ = v150;
        --v149;
      }
      while (v149);
    }
  }
  *(_DWORD *)(v58 + 8) = v39;
  memcpy(v60, v36, 4 * v62);
  uint64_t result = call_cfsv_destruct(*v8, v166);
  if (v80) {
    return call_cfsv_destruct(*v8, v162);
  }
  return result;
}

int *ReconstructDftFromHarmonies(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v74 = 0;
  if (a6)
  {
    uint64_t v10 = *(void *)(a4 + 64);
    unint64_t v11 = (uint64_t *)(v10 + 64);
    unint64_t v12 = (int *)(v10 + 20);
    int v13 = (int *)(v10 + 16);
    uint64_t v14 = *(void *)(a3 + 16);
    int v15 = *(int32x2_t **)(a3 + 120);
  }
  else
  {
    uint64_t v16 = *(void *)(a3 + 248);
    uint64_t v14 = *(void *)(a3 + 8);
    int v15 = *(int32x2_t **)(a3 + 112);
    int v17 = (int *)(v16 + 20);
    int v18 = (uint64_t *)(v16 + 64);
    BOOL v19 = v16 == 0;
    if (v16) {
      int v13 = (int *)(v16 + 16);
    }
    else {
      int v13 = a1 + 72;
    }
    if (v19) {
      unint64_t v12 = a1 + 74;
    }
    else {
      unint64_t v12 = v17;
    }
    if (v19) {
      unint64_t v11 = (uint64_t *)(a2 + 40);
    }
    else {
      unint64_t v11 = v18;
    }
  }
  uint64_t v20 = *v11;
  int v21 = *v12;
  int v22 = *v13;
  bzero(v15, 8 * (*v13 + 1));
  unsigned int v23 = 0;
  int v24 = a1[69];
  if (v24 >= 1 && (a5 & 0x80000000) == 0)
  {
    unsigned int v23 = 0;
    uint64_t v25 = (a5 + 1);
    int v26 = (int *)(v14 + 4);
    do
    {
      int v28 = *v26;
      v26 += 9;
      unsigned int v27 = v28;
      if ((int)v23 <= v28) {
        unsigned int v23 = v27;
      }
      --v25;
    }
    while (v25);
  }
  if ((a5 & 0x80000000) == 0)
  {
    int v29 = 0;
    int v30 = 2 * v21;
    signed int v31 = (v23 >> 15) * (a1[69] & 0x7FFF) + (((v23 & 0x7FFF) * (a1[69] & 0x7FFF) + 0x4000) >> 15) + v23 * (a1[69] >> 15);
    int v32 = v21 + 1;
    do
    {
      if (v24 < 1 || *(_DWORD *)(v14 + 4) >= v31)
      {
        int v33 = *(_DWORD *)(v14 + 20);
        int v34 = v33 - v21;
        int v35 = (v21 - v33) & ((v33 - v21) >> 31);
        int v36 = v33 + v21;
        if (v33 + v21 >= v22) {
          int v37 = v22 + ~(v33 + v21);
        }
        else {
          int v37 = 0;
        }
        int32x2_t v38 = *(int32x2_t *)(v14 + 12);
        uint64_t v39 = v20 + 2 * *(_DWORD *)(v14 + 24) * ((2 * v21) | 1);
        int8x8_t v40 = (int8x8_t)vcltz_s32(v38);
        if (v35 <= v37 + v30)
        {
          int v41 = v35 + v34;
          BOOL v42 = &v15[v35 + v34];
          int v43 = (__int16 *)(v39 + 2 * v35);
          int8x8_t v44 = (int8x8_t)vabs_s32(v38);
          int32x2_t v45 = (int32x2_t)vshr_n_u32((uint32x2_t)v44, 0xFuLL);
          int32x2_t v46 = (int32x2_t)vand_s8(v44, (int8x8_t)0x7F0000007FLL);
          int32x2_t v47 = vshl_n_s32(v45, 0x10uLL);
          int v48 = v32 + v37 + v33 - v41;
          do
          {
            int v50 = *v43++;
            int v49 = v50;
            BOOL v51 = v50 < 0;
            if (v50 >= 0) {
              unsigned int v52 = v49;
            }
            else {
              unsigned int v52 = -v49;
            }
            if (v51) {
              unsigned int v53 = 1;
            }
            else {
              unsigned int v53 = -1;
            }
            int32x2_t v54 = vdup_n_s32(v52 & 0x7FFF);
            int32x2_t v55 = vdup_n_s32(v52 >> 15);
            int32x2_t v56 = vmla_s32(vmul_s32(v55, v46), v54, v45);
            *BOOL v42 = vmla_s32(*v42, (int32x2_t)vsra_n_u32((uint32x2_t)vmla_s32(vadd_s32(v56, v56), v47, v55), (uint32x2_t)vmla_s32((int32x2_t)0x200000002000, v54, v46), 0xEuLL), (int32x2_t)vbsl_s8(v40, (int8x8_t)vdup_n_s32(v53), (int8x8_t)vdup_n_s32((v49 >> 31) | 1u)));
            ++v42;
            --v48;
          }
          while (v48);
        }
        if (v35 < 0 && v36 <= v30)
        {
          int v57 = (__int16 *)(v39 + 2 * v36);
          int8x8_t v58 = (int8x8_t)vabs_s32(v38);
          int32x2_t v59 = (int32x2_t)vand_s8(v58, (int8x8_t)0x7F0000007FLL);
          int32x2_t v60 = (int32x2_t)vshr_n_u32((uint32x2_t)v58, 0xFuLL);
          int32x2_t v61 = vshl_n_s32(v60, 0x10uLL);
          int v62 = v32 - v33;
          uint64_t v63 = v15;
          do
          {
            int v65 = *v57++;
            int v64 = v65;
            BOOL v66 = v65 < 0;
            if (v65 >= 0) {
              unsigned int v67 = v64;
            }
            else {
              unsigned int v67 = -v64;
            }
            if (v66) {
              int v68 = 1;
            }
            else {
              int v68 = -1;
            }
            int32x2_t v69 = vdup_n_s32(v67 & 0x7FFF);
            int32x2_t v70 = vdup_n_s32(v67 >> 15);
            int32x2_t v71 = vmla_s32(vmul_s32(v70, v59), v69, v60);
            *uint64_t v63 = vmla_s32(*v63, (int32x2_t)vsra_n_u32((uint32x2_t)vmla_s32(vadd_s32(v71, v71), v61, v70), (uint32x2_t)vmla_s32((int32x2_t)0x200000002000, v69, v59), 0xEuLL), (int32x2_t)vbsl_s8(v40, (int8x8_t)__PAIR64__((v64 >> 31) | 1u, v68), (int8x8_t)vrev64_s32((int32x2_t)__PAIR64__((v64 >> 31) | 1u, v68))));
            ++v63;
            --v62;
          }
          while (v62);
        }
      }
      v14 += 36;
      BOOL v19 = v29++ == a5;
    }
    while (!v19);
  }
  uint64_t result = ScaleTo16BitSignedRange((int *)v15, a1[3] + 2, (int *)&v74 + 1, (int *)&v74, 0, 0);
  if (a6)
  {
    *(_DWORD *)(a3 + 216) += HIDWORD(v74);
    uint64_t v73 = (_DWORD *)(a3 + 212);
  }
  else
  {
    *(_DWORD *)(a3 + 208) += HIDWORD(v74);
    uint64_t v73 = (_DWORD *)(a3 + 204);
  }
  *v73 += v74;
  return result;
}

uint64_t findPhaseAlignment(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(char **)(a4 + 32);
  int v5 = *(char **)(a4 + 40);
  int v8 = *(int **)(a3 + 136);
  int v7 = *(int **)(a3 + 144);
  uint64_t v9 = *(int *)(a4 + 28);
  uint64_t v10 = *(void *)(a3 + 8);
  int v11 = *(_DWORD *)(a3 + 32);
  unint64_t v12 = *(_DWORD **)(a3 + 248);
  int v13 = *(void **)(a3 + 160);
  int v107 = 0;
  int v14 = *(_DWORD *)(a3 + 192);
  if (v14 <= *(_DWORD *)(a4 + 52)) {
    int v14 = *(_DWORD *)(a4 + 52);
  }
  if (v12) {
    int v14 = *v12 * v14 / *((_DWORD *)a1 + 3);
  }
  int v15 = *((_DWORD *)a1 + 71);
  int v16 = *((_DWORD *)a1 + 73);
  uint64_t v17 = *(void *)(a2 + 72);
  uint64_t v18 = *(void *)(a3 + 24);
  uint64_t v106 = *(int *)(a3 + 80);
  uint64_t v19 = *(int *)(a4 + 24);
  int v20 = *(unsigned __int16 *)(a4 + 16);
  *(_WORD *)(a3 + 84) = 0;
  if (!*(_WORD *)(a3 + 48)) {
    return 0;
  }
  int v105 = v13;
  __dst = v6;
  int v103 = v5;
  int v100 = v20;
  if (v11 != *(_DWORD *)(a3 + 36))
  {
    if (v11)
    {
      int v22 = 0;
      LODWORD(v21) = 0;
      int v28 = 0;
      uint64_t v29 = 36 * v11;
      int v30 = (int *)(v10 + 20);
      do
      {
        if (*v30 > v14) {
          break;
        }
        if (*(v30 - 5))
        {
          *(_DWORD *)(v18 + 4 * (int)v21) = v28;
          v8[(int)v21] = *(v30 - 2);
          int v31 = *(v30 - 1);
          v7[(int)v21] = v31;
          int v32 = v8[(int)v21];
          if (v32 < 0) {
            int v32 = -v32;
          }
          if (v22 > v32) {
            int v32 = v22;
          }
          if (v31 < 0) {
            int v31 = -v31;
          }
          if (v32 <= v31) {
            int v22 = v31;
          }
          else {
            int v22 = v32;
          }
          LODWORD(v21) = v21 + 1;
        }
        ++v28;
        v30 += 9;
        v29 -= 36;
      }
      while (v29);
      goto LABEL_39;
    }
LABEL_38:
    LODWORD(v21) = 0;
    int v22 = 0;
    goto LABEL_39;
  }
  if (!v11) {
    goto LABEL_38;
  }
  uint64_t v21 = 0;
  int v22 = 0;
  uint64_t v23 = 36 * v11;
  int v24 = (int *)(v10 + 20);
  while (*v24 <= v14)
  {
    v8[v21] = *(v24 - 2);
    int v25 = *(v24 - 1);
    v7[v21] = v25;
    int v26 = v8[v21];
    if (v26 < 0) {
      int v26 = -v26;
    }
    if (v22 > v26) {
      int v26 = v22;
    }
    if (v25 < 0) {
      int v25 = -v25;
    }
    if (v26 <= v25) {
      int v22 = v25;
    }
    else {
      int v22 = v26;
    }
    ++v21;
    v24 += 9;
    v23 -= 36;
    if (!v23)
    {
      LODWORD(v21) = v11;
      break;
    }
  }
LABEL_39:
  uint64_t v96 = v18;
  int v97 = v11;
  uint64_t v98 = v10;
  ScaleTo16BitSignedRange(v8, v21, &v107, 0, 0, v22);
  ScaleTo16BitSignedRange(v7, v21, &v107, 0, 0, v22);
  if (!v100)
  {
    memcpy(__dst, v8, 4 * v21);
    memcpy(v103, v7, 4 * v21);
    uint64_t result = 0;
    *(_DWORD *)(a4 + 28) = v21;
    *(_DWORD *)(a3 + 228) = 0;
    return result;
  }
  int v101 = v7;
  uint64_t v33 = (uint64_t)v105;
  int v34 = v106;
  *int v105 = 0;
  unint64_t v35 = *((unsigned int *)a1 + 73);
  BOOL v36 = (int)v35 >= 4 && (int)v106 <= (int)v21;
  char v38 = !v36 || (int)v19 > (int)v9;
  if (v17)
  {
    if ((v38 & 1) == 0)
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = *(void *)(a3 + 8);
      unint64_t v42 = v35 >> 1;
      int v43 = (_DWORD *)v105 + 3;
      uint64_t v44 = 4 * v106 - 4;
      uint64_t v45 = v96 + v44;
      int32x2_t v46 = (char *)v8 + v44;
      int32x2_t v47 = (char *)v101 + v44;
      uint64_t v48 = 4 * v19 - 4;
      int v49 = &__dst[v48];
      int v50 = &v103[v48];
      uint64_t v51 = 2;
      do
      {
        signed int v52 = *(_DWORD *)(v41 + 36 * *(int *)(v45 + 4 * v39) + 20) * (0x100u >> (v15 - 1));
        unint64_t v53 = v51;
        *(v43 - 1) = ((*(_DWORD *)&v49[4 * v40] * *(_DWORD *)&v46[4 * v39]
                     + *(_DWORD *)&v50[4 * v40] * *(_DWORD *)&v47[4 * v39]) >> 15)
                   * *(_DWORD *)(v17 + 4 * v52);
        int v34 = v106;
        *int v43 = ((*(_DWORD *)&v49[4 * v40] * *(_DWORD *)&v47[4 * v39]
               - *(_DWORD *)&v50[4 * v40] * *(_DWORD *)&v46[4 * v39]) >> 15)
             * *(_DWORD *)(v17 + 4 * v52);
        ++v51;
        if (v53 >= v42) {
          break;
        }
        if (2 * v106 + v39 > (int)v21) {
          break;
        }
        uint64_t v54 = 2 * v19 + v40;
        v40 += v19;
        v43 += 2;
        v39 += v106;
      }
      while (v54 <= v9);
      unsigned int v55 = v51 - 1;
      uint64_t v33 = (uint64_t)v105;
      goto LABEL_64;
    }
LABEL_58:
    unsigned int v55 = 1;
    goto LABEL_64;
  }
  if (v38) {
    goto LABEL_58;
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  unsigned int v58 = v35 >> 1;
  int32x2_t v59 = (int *)v105 + 3;
  uint64_t v60 = 4 * v106 - 4;
  int32x2_t v61 = (char *)v8 + v60;
  int v62 = (char *)v101 + v60;
  uint64_t v63 = 4 * v19 - 4;
  int v64 = &__dst[v63];
  int v65 = &v103[v63];
  uint64_t v66 = 2;
  do
  {
    *(v59 - 1) = (*(_DWORD *)&v64[4 * v57] * *(_DWORD *)&v61[4 * v56]
                + *(_DWORD *)&v65[4 * v57] * *(_DWORD *)&v62[4 * v56]) >> 15;
    unint64_t v67 = v66;
    int *v59 = (*(_DWORD *)&v64[4 * v57] * *(_DWORD *)&v62[4 * v56] - *(_DWORD *)&v65[4 * v57] * *(_DWORD *)&v61[4 * v56]) >> 15;
    ++v66;
    if (v67 >= v58) {
      break;
    }
    if (2 * v106 + v56 > (int)v21) {
      break;
    }
    uint64_t v68 = 2 * v19 + v57;
    v57 += v19;
    v59 += 2;
    v56 += v106;
  }
  while (v68 <= v9);
  unsigned int v55 = v66 - 1;
LABEL_64:
  if (v16 >= (int)(2 * v55))
  {
    do
    {
      LOBYTE(v15) = v15 - 1;
      if (v16 >= 0) {
        int v69 = v16;
      }
      else {
        int v69 = v16 + 1;
      }
      int v16 = v69 >> 1;
    }
    while (v69 >> 1 >= (int)(2 * v55));
  }
  if (v16 <= 16) {
    unsigned int v70 = 16;
  }
  else {
    unsigned int v70 = v16;
  }
  if (v16 >= 16) {
    char v71 = v15;
  }
  else {
    char v71 = 4;
  }
  if (v16 >= 16) {
    uint64_t v72 = (2 * v16);
  }
  else {
    uint64_t v72 = 32;
  }
  if (v70 >= v55)
  {
    bzero((void *)(v33 + 8 * v55), 8 * (v70 - v55) + 8);
    uint64_t v33 = (uint64_t)v105;
  }
  *(_DWORD *)(v33 + 4) = *(_DWORD *)(v33 + 8 * v70);
  uint64_t v73 = (unsigned __int16 *)call_cfsv_construct((uint64_t)*a1, v33, v72, 15);
  uint64_t v74 = (__int16 *)v73;
  if (v73)
  {
    call_cfsv_changeInputSampleOrder(v73, *(void *)(a3 + 176));
    call_cfsv_rifft(v74, (__int16)v72);
  }
  int v75 = *(_DWORD *)v105;
  if ((int)v72 < 2)
  {
    int v77 = 0;
    int v76 = 0;
    int v79 = *(_DWORD *)v105;
  }
  else
  {
    int v76 = 0;
    int v77 = 0;
    uint64_t v78 = 1;
    int v79 = *(_DWORD *)v105;
    do
    {
      int v80 = *((_DWORD *)v105 + v78);
      if (v80 >= v79) {
        int v81 = v76;
      }
      else {
        int v81 = v78;
      }
      if (v80 >= v79) {
        int v82 = v79;
      }
      else {
        int v82 = *((_DWORD *)v105 + v78);
      }
      BOOL v83 = v80 <= v75;
      if (v80 <= v75)
      {
        int v76 = v81;
      }
      else
      {
        int v77 = v78;
        int v75 = *((_DWORD *)v105 + v78);
      }
      if (v83) {
        int v79 = v82;
      }
      ++v78;
    }
    while (v72 != v78);
  }
  if (v75 <= -v79) {
    int v84 = v76;
  }
  else {
    int v84 = v77;
  }
  if (v75 <= -v79) {
    int v85 = -v79;
  }
  else {
    int v85 = v75;
  }
  int v86 = *((_DWORD *)a1 + 16);
  if (!*(_DWORD *)(a4 + 48))
  {
    if (v84 == v76 && v86 == 0)
    {
      int v76 = v84;
    }
    else
    {
      int v76 = v84;
      int v84 = v77;
      if (v86 * v85 >= (v85 - v75) << 10) {
        goto LABEL_116;
      }
    }
LABEL_123:
    *(_DWORD *)(a3 + 228) = 1;
    int v92 = v8;
    int v93 = v101;
    if ((int)v21 >= 1)
    {
      uint64_t v94 = v21;
      do
      {
        *int v92 = -*v92;
        ++v92;
        *int v93 = -*v93;
        ++v93;
        --v94;
      }
      while (v94);
    }
    for (int i = *(_DWORD **)(a3 + 8); i != (_DWORD *)(v98 + 36 * v97); i += 9)
    {
      if (*i) {
        i[8] += *((_DWORD *)a1 + 72);
      }
    }
    goto LABEL_117;
  }
  BOOL v87 = v84 == v77 && v86 == 0;
  if (!v87 && v86 * v85 >= (v85 + v79) << 10) {
    goto LABEL_123;
  }
LABEL_116:
  *(_DWORD *)(a3 + 228) = 0;
  int v76 = v84;
LABEL_117:
  char v89 = 15 - v71;
  if (v34 == 1)
  {
    int v90 = v76 << v89;
  }
  else
  {
    int v91 = ((v76 << v89) + (v34 << 16) - 0x10000) / v34;
    BOOL v36 = v76 <= (int)(v72 >> 1);
    int v90 = ((unsigned __int16)v76 << v89) / (unsigned __int16)v34;
    if (!v36) {
      LOWORD(v90) = v91;
    }
  }
  *(_WORD *)(a3 + 84) = v90;
  call_cfsv_destruct(*a1, (uint64_t)v74);
  memcpy(__dst, v8, 4 * v21);
  memcpy(v103, v101, 4 * v21);
  *(_DWORD *)(a4 + 28) = v21;
  return 1;
}

uint64_t ComparePitches(uint64_t result, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t v7 = *(void *)(a3 + 64);
  if (v7) {
    int v8 = (int *)(v7 + 44);
  }
  else {
    int v8 = (int *)(result + 308);
  }
  if (*(_WORD *)(a2 + 48) && *(_WORD *)(a3 + 16))
  {
    int v9 = *v8;
    uint64_t v13 = 0;
    uint64_t result = FindBestRationalFactor(*(unsigned __int16 *)(a3 + 18), *(unsigned __int16 *)(a2 + 50), (_DWORD *)&v13 + 1, &v13);
    int v11 = v13;
    int v10 = HIDWORD(v13);
    *(_DWORD *)(a3 + 24) = HIDWORD(v13);
    *(_DWORD *)(a2 + 80) = v11;
    unsigned int v12 = ((v10 * *(unsigned __int16 *)(a3 + 18) + v11 * *(unsigned __int16 *)(a2 + 50)) * v9 + (v11 << 9))
        / (v11 << 10);
  }
  else
  {
    LOWORD(v12) = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a2 + 80) = 1;
  }
  *a4 = v12;
  return result;
}

void *RandNormTable()
{
  return &alfNormalNoise;
}

uint64_t Init_SinTable(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    int v3 = a3;
  }
  else {
    int v3 = 512;
  }
  if (v3 >= 0) {
    int v4 = v3;
  }
  else {
    int v4 = v3 + 1;
  }
  int v5 = v4 >> 1;
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v3;
  *(_DWORD *)(a2 + 24) = v3 - 1;
  HIDWORD(v6) = v5;
  LODWORD(v6) = v5 - 32;
  switch((v6 >> 5))
  {
    case 0u:
      uint64_t v7 = &asCos32;
      int v8 = &asSin32;
      goto LABEL_13;
    case 1u:
      uint64_t v7 = &asCos64;
      int v8 = &asSin64;
      goto LABEL_13;
    case 3u:
      uint64_t v7 = &asCos128;
      int v8 = &asSin128;
      goto LABEL_13;
    case 7u:
      uint64_t v7 = &asCos256;
      int v8 = &asSin256;
LABEL_13:
      *(void *)a2 = v8;
      *(void *)(a2 + 8) = v7;
      break;
    default:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      break;
  }
  return 0;
}

uint64_t PositiveShortLog2(int a1)
{
  if (a1 < 2) {
    return 0;
  }
  int v2 = a1;
  if ((a1 & 0x4000) != 0) {
    return 14;
  }
  LODWORD(result) = 14;
  do
  {
    uint64_t result = (result - 1);
    if (!result) {
      break;
    }
    __int16 v3 = v2;
    v2 *= 2;
  }
  while ((v3 & 0x2000) == 0);
  return result;
}

uint64_t ipow2(unsigned int a1)
{
  if ((a1 & 0x80000000) != 0) {
    return a1 > 0xFFFFEFFF;
  }
  if (a1 >> 12 > 0x1E) {
    return 0x7FFFFFFFLL;
  }
  unsigned int v2 = a1 & 0xFFF;
  if ((a1 & 0xFFF) != 0)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    LODWORD(v5) = 0x8000;
    do
    {
      unint64_t v5 = ((unint64_t)(ipow2Table[v3 + (v2 & 0xF)] * v5) + 0x4000) >> 15;
      if (v4 > 1) {
        break;
      }
      ++v4;
      v3 += 16;
      BOOL v6 = v2 > 0xF;
      v2 >>= 4;
    }
    while (v6);
  }
  else
  {
    LODWORD(v5) = 0x8000;
  }
  int v7 = 15 - (a1 >> 12);
  if (a1 >= 0xF000) {
    LOBYTE(v7) = 0;
  }
  unsigned int v8 = v5 >> v7;
  int v9 = (a1 >> 12) - 15;
  if (!HIWORD(a1)) {
    LOBYTE(v9) = 0;
  }
  return v8 << v9;
}

uint64_t string2fixed(uint64_t a1, char *__s, int a3, _DWORD *a4)
{
  __lasts = 0;
  size_t v8 = strlen(__s) + 1;
  int v9 = (char *)heap_Alloc(*(void *)(a1 + 8), v8);
  if (!v9) {
    return 2;
  }
  int v10 = v9;
  bzero(v9, v8);
  int v11 = strcpy(v10, __s);
  unsigned int v12 = strtok_r(v11, " \t\r\n", &__lasts);
  if (!v12) {
    return 1;
  }
  uint64_t v13 = v12;
  int v14 = strchr(v12, 46);
  if (v14)
  {
    int v15 = v14;
    *int v14 = 0;
    int v16 = atol(v13);
    int v19 = v15[1];
    uint64_t v18 = (unsigned __int8 *)(v15 + 1);
    int v17 = v19;
    int v20 = 0;
    if ((v19 - 48) <= 9)
    {
      BOOL v22 = __OFSUB__(a3, 1);
      BOOL v21 = a3 - 1 < 0;
    }
    else
    {
      BOOL v22 = 0;
      BOOL v21 = 1;
    }
    if (v21 != v22)
    {
      int v29 = 1;
    }
    else
    {
      int v28 = 10 * a3;
      int v29 = 1;
      do
      {
        int v20 = v17 + 10 * v20 - 48;
        v29 *= 10;
        int v30 = *++v18;
        int v17 = v30;
        if ((v30 - 48) <= 9)
        {
          BOOL v32 = __OFSUB__(v29, v28);
          BOOL v31 = v29 - v28 < 0;
        }
        else
        {
          BOOL v32 = 0;
          BOOL v31 = 0;
        }
      }
      while (v31 != v32);
    }
    do
    {
      int v34 = *v18++;
      int v33 = v34;
    }
    while ((v34 - 48) < 0xA);
    if ((v33 | 0x20) == 0x65)
    {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v10);
      return 1;
    }
    LODWORD(v27) = (int)(v20 * a3 + (v29 >> 1)) / v29 + v16 * a3;
  }
  else
  {
    uint64_t v24 = atol(v13);
    uint64_t v25 = 2 * a3 * v24;
    unint64_t v26 = v25 + 2;
    if (((a3 * v24) & 0x4000000000000000) == 0) {
      unint64_t v26 = v25 | 1;
    }
    unint64_t v27 = v26 >> 1;
  }
  heap_Free(*(void **)(a1 + 8), (uint64_t)v10);
  uint64_t result = 0;
  *a4 = v27;
  return result;
}

int *ScaleTo16BitSignedRange(int *result, int a2, int *a3, int *a4, char a5, int a6)
{
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a2)
  {
    if (a6 > 0) {
      goto LABEL_37;
    }
    if (a2 < 1)
    {
      a6 = -1;
LABEL_28:
      if (a3)
      {
        int v13 = *a3;
        do
        {
          unsigned int v14 = HIWORD(a6);
          a6 >>= 1;
          ++v13;
        }
        while (v14);
        *a3 = v13;
        if (v13 - 1 >= 0 && a2 >= 1)
        {
          uint64_t v15 = a2;
          do
          {
            *result++ >>= *a3 + a5;
            --v15;
          }
          while (v15);
        }
      }
      return result;
    }
    uint64_t v9 = a2;
    a6 = -1;
    int v10 = result;
    do
    {
      int v12 = *v10++;
      int v11 = v12;
      if (v12 < 0) {
        int v11 = -v11;
      }
      if (v11 > a6) {
        a6 = v11;
      }
      --v9;
    }
    while (v9);
    if (a6)
    {
LABEL_37:
      if (!(a6 >> 15))
      {
        if (a4)
        {
          int v6 = *a4;
          if (!(a6 >> 14))
          {
            do
            {
              ++v6;
              BOOL v7 = a6 >= 0x2000;
              a6 *= 2;
            }
            while (!v7);
            *a4 = v6;
          }
          if (v6 >= 1 && a2 >= 1)
          {
            uint64_t v8 = a2;
            do
            {
              *result++ <<= *a4;
              --v8;
            }
            while (v8);
          }
        }
        return result;
      }
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t ScaleTo16BitSignedRangeWithSkip(uint64_t result, int a2, int a3, int *a4, int *a5, unsigned int a6)
{
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (a2)
  {
    uint64_t v6 = a3 * a2;
    if (a6) {
      goto LABEL_37;
    }
    if (!a3)
    {
      a6 = -1;
LABEL_28:
      if (a4)
      {
        int v12 = *a4;
        do
        {
          unsigned int v13 = HIWORD(a6);
          a6 = (int)a6 >> 1;
          ++v12;
        }
        while (v13);
        *a4 = v12;
        if (v12 - 1 >= 0)
        {
          if (a3)
          {
            uint64_t v14 = 0;
            do
            {
              *(_DWORD *)(result + v14) = ((1 << (*a4 - 1)) + *(int *)(result + v14)) >> *a4;
              v14 += a3;
            }
            while (v6 != v14);
          }
        }
      }
      return result;
    }
    uint64_t v10 = 0;
    a6 = -1;
    do
    {
      int v11 = *(_DWORD *)(result + v10);
      if (v11 < 0) {
        int v11 = -v11;
      }
      if (v11 > (int)a6) {
        a6 = v11;
      }
      v10 += a3;
    }
    while (v6 != v10);
    if (a6)
    {
LABEL_37:
      if (!(a6 >> 15))
      {
        if (a5)
        {
          int v7 = *a5;
          if (!(a6 >> 14))
          {
            do
            {
              ++v7;
              BOOL v8 = a6 >= 0x2000;
              a6 *= 2;
            }
            while (!v8);
            *a5 = v7;
          }
          if (v7 >= 1 && a3)
          {
            uint64_t v9 = 0;
            do
            {
              *(_DWORD *)(result + v9) <<= *a5;
              v9 += a3;
            }
            while (v6 != v9);
          }
        }
        return result;
      }
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t CalcSquareNormWthSkip(uint64_t a1, int a2, int a3, int a4, _DWORD *a5, int a6)
{
  int v6 = a3 * a2;
  if (a3 * a2)
  {
    uint64_t v7 = 0;
    LODWORD(v8) = 0;
    int v9 = -1;
    do
    {
      int v10 = *(_DWORD *)(a1 + v7);
      if (v10 > v9) {
        int v9 = *(_DWORD *)(a1 + v7);
      }
      uint64_t v8 = (v8 + v10 * v10);
      v7 += a3;
    }
    while (v6 != v7);
    if (v9 <= a4)
    {
      int v11 = 0;
    }
    else
    {
      if (v9 < 46341)
      {
        int v11 = 0;
      }
      else
      {
        int v11 = 0;
        do
        {
          ++v11;
          BOOL v12 = v9 > 0x16A09;
          int v9 = v9 >> 1;
        }
        while (v12);
      }
      uint64_t v13 = 0;
      unsigned int v14 = 0;
      do
      {
        int v15 = (*(int *)(a1 + v13) >> v11) * (*(int *)(a1 + v13) >> v11);
        BOOL v16 = (int)(v15 + v14) < 0;
        BOOL v17 = __CFADD__(v15, v14);
        v14 += v15;
        int v18 = v17 || v16;
        v11 += v18;
        if (v18) {
          unsigned int v14 = (v14 >> 2) | 0x40000000;
        }
        v13 += a3;
      }
      while (v6 != v13);
      uint64_t v19 = 0;
      LODWORD(v8) = 0;
      do
      {
        uint64_t v20 = *(int *)(a1 + v19);
        if (((1 << (v11 - 1)) & v20) != 0) {
          int v21 = ((int)v20 >> v11) + 1;
        }
        else {
          int v21 = (int)v20 >> v11;
        }
        if (!a6) {
          *(_DWORD *)(a1 + v19) = v21;
        }
        uint64_t v8 = (v8 + v21 * v21);
        v19 += a3;
      }
      while (v6 != v19);
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v8 = 0;
  }
  *a5 = v11;
  return v8;
}

uint64_t sqroot5(int *a1, unsigned int a2)
{
  if (!a1)
  {
    if (a2 >= 0x800000)
    {
      uint64_t v6 = 1023;
      return *((unsigned int *)&astSqrtTbl + 2 * v6 + 1);
    }
    if (!a2)
    {
      uint64_t v6 = 0;
      return *((unsigned int *)&astSqrtTbl + 2 * v6 + 1);
    }
    LODWORD(v3) = 0;
    goto LABEL_11;
  }
  int v2 = a1[1];
  uint64_t v3 = *a1;
  if (*((_DWORD *)&astSqrtTbl + 2 * v3) > a2) {
    LODWORD(v3) = 0;
  }
  unsigned int v4 = *((_DWORD *)&astSqrtTbl + 2 * v2);
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      if (*((_DWORD *)&astSqrtTbl + 2 * (int)v3) >= a2)
      {
LABEL_29:
        uint64_t v6 = (int)v3;
        *a1 = v3;
        return *((unsigned int *)&astSqrtTbl + 2 * v6 + 1);
      }
      goto LABEL_15;
    }
    uint64_t v6 = v2;
LABEL_28:
    a1[1] = v2;
    return *((unsigned int *)&astSqrtTbl + 2 * v6 + 1);
  }
  if (a2 >= 0x800000)
  {
    uint64_t v6 = 1023;
    int v2 = 1023;
    goto LABEL_28;
  }
  if (*((_DWORD *)&astSqrtTbl + 2 * (int)v3) >= a2) {
    goto LABEL_29;
  }
LABEL_11:
  int v2 = 1023;
LABEL_15:
  if (v2 - (int)v3 < 2)
  {
LABEL_21:
    if (a1)
    {
      *a1 = v3;
      a1[1] = v2;
    }
    uint64_t v6 = (int)v3;
    if (a2 - *((_DWORD *)&astSqrtTbl + 2 * (int)v3) >= *((_DWORD *)&astSqrtTbl + 2 * v2) - a2) {
      uint64_t v6 = v2;
    }
  }
  else
  {
    while (1)
    {
      uint64_t v6 = (uint64_t)(int)(v2 + v3 + (v2 + (int)v3 < 0)) >> 1;
      unsigned int v5 = *((_DWORD *)&astSqrtTbl + 2 * ((v2 + (int)v3) / 2));
      if (v5 == a2) {
        break;
      }
      if (v5 > a2) {
        int v2 = (v2 + (int)v3) / 2;
      }
      else {
        LODWORD(v3) = (v2 + (int)v3) / 2;
      }
      if (v2 - (int)v3 <= 1) {
        goto LABEL_21;
      }
    }
  }
  return *((unsigned int *)&astSqrtTbl + 2 * v6 + 1);
}

double Init_SqrtSearch(void *a1)
{
  *(void *)&double result = 0x3FF00000000;
  *a1 = 0x3FF00000000;
  return result;
}

uint64_t GetInterpolatedValue(uint64_t a1, unsigned int *a2, int a3, int a4, _DWORD *a5, int a6)
{
  if (a5) {
    LODWORD(v6) = *a5;
  }
  else {
    LODWORD(v6) = 0;
  }
  if ((int)v6 >= a3) {
    goto LABEL_16;
  }
  uint64_t v6 = (int)v6;
  while (*(_DWORD *)(a1 + 4 * v6) <= a4)
  {
    if (a3 == ++v6)
    {
      LODWORD(v6) = a3;
      goto LABEL_16;
    }
  }
  if ((int)v6 < 1)
  {
LABEL_16:
    if (v6)
    {
      uint64_t result = a2[a3 - 1];
      if (!a5) {
        return result;
      }
    }
    else
    {
      uint64_t result = *a2;
      if (!a5) {
        return result;
      }
    }
    goto LABEL_20;
  }
  int v7 = *(_DWORD *)(a1 + 4 * (v6 - 1));
  unsigned int v8 = a2[(v6 - 1)];
  uint64_t v9 = v6;
  int v10 = *(_DWORD *)(a1 + v9 * 4);
  unsigned int v11 = a2[v9];
  int v12 = a4 - v7;
  if (!a6)
  {
    uint64_t result = ((int)((v12 << 12) / (v10 - v7) * v11 + (4096 - (v12 << 12) / (v10 - v7)) * v8) / 4096);
    if (!a5) {
      return result;
    }
    goto LABEL_20;
  }
  if (v12 <= v10 - a4) {
    uint64_t result = v8;
  }
  else {
    uint64_t result = v11;
  }
  if (a5) {
LABEL_20:
  }
    *a5 = v6;
  return result;
}

uint64_t FixedRFFT(uint64_t result, int a2)
{
  uint64_t v2 = result;
  if (a2 <= 127)
  {
    if (a2 == 32)
    {
      int v69 = (char *)&RFFT_table_32;
      int v3 = 5;
    }
    else
    {
      if (a2 != 64) {
        return result;
      }
      int v69 = (char *)&RFFT_table_64;
      int v3 = 6;
    }
  }
  else
  {
    switch(a2)
    {
      case 128:
        int v69 = (char *)&RFFT_table_128;
        int v3 = 7;
        break;
      case 256:
        int v69 = (char *)&RFFT_table_256;
        int v3 = 8;
        break;
      case 512:
        int v69 = (char *)&RFFT_table_512;
        int v3 = 9;
        break;
      default:
        return result;
    }
  }
  int v67 = v3;
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = (a2 - 1);
  do
  {
    if (v4 < v5)
    {
      int v7 = *(_DWORD *)(result + 4 * v5);
      *(_DWORD *)(result + 4 * v5) = *(_DWORD *)(result + 4 * v4);
      *(_DWORD *)(result + 4 * v4) = v7;
    }
    int v8 = a2;
    do
    {
      int v9 = v5;
      int v10 = v8 >> 1;
      BOOL v11 = __OFSUB__(v5, v8 >> 1);
      v5 -= v8 >> 1;
      v8 >>= 1;
    }
    while (v5 < 0 == v11);
    int v5 = v9 + v10;
    ++v4;
  }
  while (v4 != v6);
  int v12 = 0;
  uint64_t v13 = (unsigned __int16)a2;
  int v14 = 4;
  do
  {
    if (v12 < a2)
    {
      uint64_t v15 = v12;
      BOOL v16 = (int *)(result + 4 + 4 * v12);
      do
      {
        int v17 = *(v16 - 1) + *v16;
        int v18 = v17 - 2 * *v16;
        *(v16 - 1) = v17;
        int *v16 = v18;
        v15 += v14;
        v16 += v14;
      }
      while (v15 < (unsigned __int16)a2);
    }
    int v12 = 2 * v14 - 2;
    v14 *= 4;
  }
  while (v12 < (int)v6);
  int v19 = 2;
  int v68 = 1;
  uint64_t v105 = result;
  uint64_t v94 = (unsigned __int16)a2;
  do
  {
    int v75 = v19;
    int v20 = 2 * v19;
    int v83 = (2 * v19) >> 2;
    int v81 = (2 * v19) >> 3;
    int v70 = 4 * v19;
    int v73 = 2 * v19;
    int v21 = 0;
    int v22 = 4 * v19;
    uint64_t v88 = 2 * v83 + v81;
    do
    {
      uint64_t v23 = v21;
      uint64_t v24 = v22;
      uint64_t v103 = 4 * v81 + 4 * v21;
      uint64_t v25 = 4 * v22;
      uint64_t v101 = v83 + (uint64_t)v81 + v21;
      uint64_t v99 = v88 + v21;
      uint64_t v26 = 8 * v83 + 4 * v21;
      uint64_t v97 = v88 + v83 + v21;
      uint64_t v27 = v2;
      uint64_t v28 = v21;
      uint64_t v29 = 12 * v83 + 4 * v21;
      uint64_t v95 = v22;
      uint64_t v92 = v25;
      do
      {
        int v30 = *(_DWORD *)(v27 + v29) - *(_DWORD *)(v27 + v26);
        *(_DWORD *)(v27 + v29) = v30;
        int v31 = *(_DWORD *)(v27 + 4 * v23) - (v30 + 2 * *(_DWORD *)(v27 + v26));
        *(_DWORD *)(v27 + v26) = v31;
        *(_DWORD *)(v27 + 4 * v23) = 2 * *(_DWORD *)(v27 + 4 * v23) - v31;
        if (v20 != 4)
        {
          int v32 = QMul31(*(_DWORD *)(v27 + 4 * v99) - *(_DWORD *)(v27 + 4 * v97), 1518500250);
          int v33 = *(_DWORD *)(v27 + 4 * v101);
          uint64_t result = QMul31(*(_DWORD *)(v27 + 4 * v97) + *(_DWORD *)(v27 + 4 * v99), 1518500250);
          uint64_t v25 = v92;
          uint64_t v13 = v94;
          uint64_t v24 = v95;
          int v20 = v73;
          *(_DWORD *)(v27 + 4 * v97) = v33 - result;
          *(_DWORD *)(v27 + 4 * v99) = v33 - result - 2 * *(_DWORD *)(v27 + 4 * v101);
          *(_DWORD *)(v27 + 4 * v101) = *(_DWORD *)(v27 + v103) - v32;
          *(_DWORD *)(v27 + v103) += v32;
        }
        v28 += v24;
        v27 += v25;
      }
      while (v28 < v13);
      int v21 = 2 * (v24 - v75);
      int v22 = 4 * v24;
      uint64_t v2 = v105;
    }
    while (v21 < a2);
    if (v20 >= 16)
    {
      if (v81 <= 2) {
        uint64_t v34 = 2;
      }
      else {
        uint64_t v34 = v81;
      }
      uint64_t v71 = v34;
      int v35 = 2 * v83 - 1;
      int v36 = v35 + v83;
      int v37 = 4 * v83 - 1;
      int v38 = v83 - 1;
      uint64_t v78 = 4;
      uint64_t v79 = v83 + 1;
      uint64_t v72 = 1;
      uint64_t v77 = (2 * v83) | 1;
      uint64_t v76 = v79 + 2 * v83;
      do
      {
        int v39 = 0;
        uint64_t v40 = (int *)&v69[16 * (v72 << (v67 + ~(_BYTE)v68)) - 16];
        int v41 = *v40;
        int v42 = v70;
        int v86 = v35;
        int v85 = v36;
        int v84 = v37;
        int v80 = *v40;
        int v82 = v38;
        do
        {
          uint64_t v43 = v39;
          uint64_t v96 = v42;
          uint64_t v93 = v78 + 4 * v39;
          uint64_t v90 = v79 + v39;
          uint64_t v91 = 4 * v42;
          uint64_t v44 = v2;
          uint64_t v87 = v76 + v39;
          uint64_t v89 = v77 + v39;
          do
          {
            int v104 = v38 + v43;
            unsigned int v102 = v35 + v43;
            int v45 = v36 + v43;
            int v46 = v37 + v43;
            int v47 = QMul31(*(_DWORD *)(v44 + 4 * v89), v41);
            int v48 = *(_DWORD *)(v2 + 4 * v45);
            int v49 = v40[1];
            int v100 = QMul31(v48, v49) + v47;
            int v50 = QMul31(*(_DWORD *)(v105 + 4 * v45), v41);
            int v98 = v50 - QMul31(*(_DWORD *)(v44 + 4 * v89), v49);
            int v51 = v40[2];
            int v52 = QMul31(*(_DWORD *)(v44 + 4 * v87), v51);
            int v53 = v40[3];
            int v54 = QMul31(*(_DWORD *)(v105 + 4 * v46), v53) + v52;
            int v55 = QMul31(*(_DWORD *)(v105 + 4 * v46), v51);
            int v56 = QMul31(*(_DWORD *)(v44 + 4 * v87), v53);
            int v38 = v82;
            int v37 = v84;
            uint64_t v13 = v94;
            int v57 = v55 - v56;
            int v58 = v55 - v56 + v98;
            uint64_t result = v102;
            int v59 = *(_DWORD *)(v105 + 4 * (int)v102);
            int v60 = v58 + v59;
            *(_DWORD *)(v44 + 4 * v89) = v58 - v59;
            int v61 = v54 + v100;
            *(_DWORD *)(v105 + 4 * v46) = v60;
            int v62 = v100 - v54;
            uint64_t v2 = v105;
            int v63 = *(_DWORD *)(v44 + 4 * v90);
            *(_DWORD *)(v105 + 4 * v45) = -v63 - v62;
            *(_DWORD *)(v44 + 4 * v87) = v63 - v62;
            int v36 = v85;
            int v64 = *(_DWORD *)(v44 + v93);
            *(_DWORD *)(v105 + 4 * (int)v102) = v64 - v61;
            *(_DWORD *)(v44 + v93) = v64 + v61;
            int v35 = v86;
            int v65 = v98 - v57;
            int v41 = v80;
            int v66 = *(_DWORD *)(v105 + 4 * v104);
            *(_DWORD *)(v105 + 4 * v104) = v66 - v65;
            *(_DWORD *)(v44 + 4 * v90) = v66 + v65;
            v43 += v96;
            v44 += v91;
          }
          while (v43 < v94);
          int v39 = 2 * (v96 - v75);
          int v42 = 4 * v96;
        }
        while (v39 < a2);
        v78 += 4;
        ++v79;
        ++v76;
        ++v77;
        int v35 = v86 - 1;
        int v36 = v85 - 1;
        int v37 = v84 - 1;
        int v38 = v82 - 1;
        ++v72;
      }
      while (v72 != v71);
    }
    int v19 = v73;
    ++v68;
  }
  while (v68 != v67);
  return result;
}

int *FixedIRFFT(int *result, int a2)
{
  uint64_t v2 = result;
  if (a2 <= 127)
  {
    if (a2 == 32)
    {
      uint64_t v74 = (char *)&RFFT_table_32;
      int v3 = 5;
    }
    else
    {
      if (a2 != 64) {
        return result;
      }
      uint64_t v74 = (char *)&RFFT_table_64;
      int v3 = 6;
    }
  }
  else
  {
    switch(a2)
    {
      case 128:
        uint64_t v74 = (char *)&RFFT_table_128;
        int v3 = 7;
        break;
      case 256:
        uint64_t v74 = (char *)&RFFT_table_256;
        int v3 = 8;
        break;
      case 512:
        uint64_t v74 = (char *)&RFFT_table_512;
        int v3 = 9;
        break;
      default:
        return result;
    }
  }
  int v4 = 2 * a2;
  uint64_t result = (int *)a2;
  int v73 = 1;
  uint64_t v113 = v2;
  int v78 = a2;
  unsigned int v102 = (int *)a2;
  int v72 = v3;
  do
  {
    unsigned int v79 = v4 >> 1;
    uint64_t v5 = v4 >> 3;
    unsigned int v84 = v4;
    uint64_t v82 = v4 >> 4;
    uint64_t v71 = (a2 - 1);
    int v6 = 0;
    uint64_t v95 = v82 + v5;
    uint64_t v93 = v82 + 2 * v5;
    uint64_t v91 = 8 * v5;
    uint64_t v89 = 12 * v5;
    uint64_t v87 = 3 * v5 + v82;
    uint64_t v98 = v5;
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = v4;
      uint64_t v114 = 4 * v82 + 4 * v6;
      uint64_t v9 = 4 * v4;
      uint64_t v111 = v95 + v6;
      uint64_t v10 = v5 + v6;
      uint64_t v109 = v93 + v6;
      uint64_t v11 = v91 + 4 * v6;
      uint64_t v103 = v87 + v6;
      uint64_t v12 = v6;
      uint64_t v13 = v89 + 4 * v6;
      uint64_t v105 = v9;
      uint64_t v107 = v4;
      uint64_t v100 = v6;
      do
      {
        int v14 = v2[v7];
        int v15 = *(int *)((char *)v2 + v11);
        v2[v7] = v15 + v14;
        v2[v10] *= 2;
        int v16 = v14 - v15;
        *(int *)((char *)v2 + v11) = v16 - 2 * *(int *)((char *)v2 + v13);
        *(int *)((char *)v2 + v13) = v16 + 2 * *(int *)((char *)v2 + v13);
        if (v5 != 1)
        {
          int v17 = QMul31(v2[v111] - *(int *)((char *)v2 + v114), 1518500250);
          int v18 = QMul31(v2[v109] + v2[v103], 1518500250);
          uint64_t v5 = v98;
          uint64_t v7 = v100;
          uint64_t v9 = v105;
          uint64_t v8 = v107;
          *(int *)((char *)v2 + v114) += v2[v111];
          v2[v111] = v2[v103] - v2[v109];
          v2[v109] = -2 * (v18 + v17);
          int v19 = v17 - v18;
          uint64_t result = v102;
          v2[v103] = 2 * v19;
        }
        v12 += v8;
        uint64_t v2 = (int *)((char *)v2 + v9);
      }
      while (v12 < (uint64_t)result);
      int v6 = 2 * v8 - v79;
      int v4 = 4 * v8;
      a2 = v78;
      uint64_t v2 = v113;
    }
    while (v6 < v78);
    if (v84 >= 0x20)
    {
      int v86 = 0;
      int v75 = v84 & 0x7FFFFFFE;
      if (v82 <= 2) {
        uint64_t v20 = 2;
      }
      else {
        uint64_t v20 = v82;
      }
      uint64_t v76 = v20;
      int v21 = 2 * v5 - 1;
      int v22 = v21 + v5;
      int v23 = 4 * v5 - 1;
      int v24 = v5 - 1;
      uint64_t v83 = 4;
      uint64_t v85 = v5 + 1;
      uint64_t v77 = 1;
      uint64_t v80 = v5 + 1 + 2 * v5;
      uint64_t v81 = (2 * v5) | 1;
      int v94 = v21;
      int v92 = v21 + v5;
      int v90 = v23;
      int v88 = v5 - 1;
      do
      {
        int v25 = 0;
        uint64_t v26 = (int *)&v74[16 * (v77 << (v73 - 1)) - 16];
        int v27 = *v26;
        int v28 = v75;
        int v112 = *v26;
        do
        {
          uint64_t v29 = v25;
          uint64_t v104 = v28;
          uint64_t v99 = 4 * v28;
          uint64_t v101 = v83 + 4 * v25;
          uint64_t v96 = v81 + v25;
          uint64_t v97 = v85 + v25;
          int v30 = v86 + v25;
          int v31 = v2;
          uint64_t v115 = v80 + v25;
          do
          {
            int v32 = v21 + v30;
            int v108 = v22 + v30;
            int v110 = v23 + v30;
            int v33 = *(int *)((char *)v31 + v101);
            int v34 = v2[v21 + v30];
            int v35 = v33 - v34;
            *(int *)((char *)v31 + v101) = v34 + v33;
            int v36 = v2[v24 + v30];
            int v37 = v31[v97];
            int v38 = v36 - v37;
            v2[v24 + v30] = v37 + v36;
            int v39 = v2[v110];
            int v40 = v31[v96];
            int v41 = v40 + v39;
            v2[v32] = v39 - v40;
            int v42 = v31[v115];
            int v43 = v2[v108];
            v31[v97] = v42 - v43;
            int v44 = v35 - (v43 + v42);
            int v106 = v43 + v42 + v35;
            int v45 = v38 - v41;
            int v46 = v41 + v38;
            int v47 = QMul31(v44, v27);
            int v48 = v26;
            int v49 = v26[1];
            v31[v96] = QMul31(v45, v49) + v47;
            int v50 = QMul31(v45, v112);
            int v51 = v49;
            uint64_t v26 = v48;
            v113[v108] = QMul31(v44, v51) - v50;
            int v52 = v48[2];
            int v53 = QMul31(v106, v52);
            int v54 = v48[3];
            v31[v115] = v53 - QMul31(v46, v54);
            int v55 = QMul31(v46, v52);
            uint64_t v2 = v113;
            int v56 = QMul31(v106, v54);
            int v27 = v112;
            int v24 = v88;
            int v23 = v90;
            int v22 = v92;
            int v21 = v94;
            v113[v110] = v56 + v55;
            uint64_t result = v102;
            v29 += v104;
            int v31 = (int *)((char *)v31 + v99);
            v30 += v104;
          }
          while (v29 < (uint64_t)v102);
          int v25 = 2 * v104 - v79;
          int v28 = 4 * v104;
          a2 = v78;
        }
        while (v25 < v78);
        v83 += 4;
        ++v85;
        ++v80;
        ++v81;
        --v86;
        ++v77;
      }
      while (v77 != v76);
    }
    int v4 = v79;
    ++v73;
  }
  while (v73 != v72);
  int v57 = 0;
  int v58 = 4;
  do
  {
    if (v57 < a2)
    {
      uint64_t v59 = v57;
      int v60 = &v2[v57 + 1];
      do
      {
        int v61 = *(v60 - 1) + *v60;
        int v62 = v61 - 2 * *v60;
        *(v60 - 1) = v61;
        *int v60 = v62;
        v59 += v58;
        v60 += v58;
      }
      while (v59 < (uint64_t)result);
    }
    int v57 = 2 * v58 - 2;
    v58 *= 4;
  }
  while (v57 < (int)v71);
  uint64_t v63 = 0;
  int v64 = 0;
  do
  {
    if (v63 < v64)
    {
      int v65 = v2[v64];
      v2[v64] = v2[v63];
      v2[v63] = v65;
    }
    int v66 = a2;
    do
    {
      int v67 = v64;
      int v68 = v66 >> 1;
      BOOL v69 = __OFSUB__(v64, v66 >> 1);
      v64 -= v66 >> 1;
      v66 >>= 1;
    }
    while (v64 < 0 == v69);
    int v64 = v67 + v68;
    ++v63;
  }
  while (v63 != v71);
  uint64_t v70 = a2;
  do
  {
    *v2++ >>= v72;
    --v70;
  }
  while (v70);
  return result;
}

uint64_t QMul31(int a1, int a2)
{
  if (a1 >= 0) {
    unsigned int v2 = a1;
  }
  else {
    unsigned int v2 = -a1;
  }
  int v3 = (a1 >> 31) | 1;
  if (a2 >= 0) {
    unsigned int v4 = a2;
  }
  else {
    unsigned int v4 = -a2;
  }
  if (a2 < 0) {
    int v3 = -v3;
  }
  return ((((v4 & 0x7FFF) * (v2 >> 15) + (v4 >> 15) * (v2 & 0x7FFF)) >> 16) + (((v4 >> 15) * (v2 >> 15)) >> 1)) * v3;
}

uint64_t c_abs(uint64_t result)
{
  if ((int)result >= 0) {
    return result;
  }
  else {
    return -(int)result;
  }
}

uint64_t call_cfsv_construct(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4)
{
  uint64_t result = heap_Calloc(*(void **)(a1 + 8), 24, 1);
  if (result)
  {
    *(_WORD *)uint64_t result = a3;
    *(void *)(result + 8) = a2;
    *(_DWORD *)(result + 16) = 0;
    *(_WORD *)(result + 20) = a4;
  }
  return result;
}

void *call_cfsv_destruct(void *result, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a2 + 8)) {
      return heap_Free((void *)result[1], a2);
    }
  }
  return result;
}

uint64_t call_cfsv_rfft(__int16 *a1, int a2)
{
  if (*a1 < a2) {
    return 0;
  }
  uint64_t result = 0;
  if (a2 <= 127)
  {
    if (a2 != 32 && a2 != 64) {
      return result;
    }
  }
  else if (a2 != 128 && a2 != 512 && a2 != 256)
  {
    return result;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  __int16 v7 = 0;
  uint64_t v8 = (unsigned __int16)a2;
  do
  {
    int v9 = ((int)c_abs(*(unsigned int *)(*((void *)a1 + 1) + 4 * v5)) >> v7) + v6;
    if (v9 <= 0x3FFFFFFF) {
      __int16 v10 = v7;
    }
    else {
      __int16 v10 = v7 + 1;
    }
    __int16 v7 = v10;
    unsigned int v6 = v9 >> (v9 > 0x3FFFFFFF);
    ++v5;
  }
  while (v8 != v5);
  if (v10 >= 1) {
    call_cfsv_setScale((unsigned __int16 *)a1, (__int16)(a1[10] - v10));
  }
  FixedRFFT(*((void *)a1 + 1), a2);
  return 1;
}

unsigned __int16 *call_cfsv_setScale(unsigned __int16 *result, int a2)
{
  int v2 = result[10];
  if (v2 != (unsigned __int16)a2)
  {
    int v3 = (__int16)v2;
    uint64_t v4 = *result;
    char v5 = v3 - a2;
    if (v3 >= a2)
    {
      if ((__int16)v4 >= 1)
      {
        uint64_t v8 = (int *)*((void *)result + 1);
        do
        {
          *v8++ >>= v5;
          --v4;
        }
        while (v4);
      }
    }
    else if ((__int16)v4 >= 1)
    {
      char v6 = a2 - v3;
      __int16 v7 = (_DWORD *)*((void *)result + 1);
      do
      {
        *v7++ <<= v6;
        --v4;
      }
      while (v4);
    }
    result[10] = a2;
  }
  return result;
}

uint64_t call_cfsv_rifft(__int16 *a1, int a2)
{
  if (*a1 < a2) {
    return 0;
  }
  uint64_t result = 0;
  if (a2 <= 127)
  {
    if (a2 != 32 && a2 != 64) {
      return result;
    }
  }
  else if (a2 != 128 && a2 != 512 && a2 != 256)
  {
    return result;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  __int16 v7 = 0;
  uint64_t v8 = (unsigned __int16)a2;
  do
  {
    int v9 = ((int)c_abs(*(unsigned int *)(*((void *)a1 + 1) + 4 * v5)) >> v7) + v6;
    if (v9 <= 0x3FFFFFFF) {
      __int16 v10 = v7;
    }
    else {
      __int16 v10 = v7 + 1;
    }
    __int16 v7 = v10;
    unsigned int v6 = v9 >> (v9 > 0x3FFFFFFF);
    ++v5;
  }
  while (v8 != v5);
  if (v10 >= 1) {
    call_cfsv_setScale((unsigned __int16 *)a1, (__int16)(a1[10] - v10));
  }
  FixedIRFFT(*((int **)a1 + 1), a2);
  return 1;
}

uint64_t call_cfsv_changeInputSampleOrder(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  LODWORD(v3) = (int)((v2 + (v2 >> 15)) << 16) >> 17;
  if ((__int16)v2 <= 1)
  {
    uint64_t v3 = (int)v3;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = (int)v3;
    uint64_t v5 = (_DWORD *)(*((void *)a1 + 1) + 36);
    unsigned int v6 = (_DWORD *)(a2 + 16);
    __int16 v7 = (_DWORD *)(a2 + 4 * v2 - 16);
    do
    {
      *(v6 - 4) = *(v5 - 9);
      *(v6 - 3) = *(v5 - 7);
      *(v6 - 2) = *(v5 - 5);
      *(v6 - 1) = *(v5 - 3);
      *unsigned int v6 = *(v5 - 1);
      v6[1] = v5[1];
      v6[2] = v5[3];
      v6[3] = v5[5];
      v7[3] = *(v5 - 6);
      v7[2] = *(v5 - 4);
      v7[1] = *(v5 - 2);
      *__int16 v7 = *v5;
      *(v7 - 1) = v5[2];
      *(v7 - 2) = v5[4];
      *(v7 - 3) = v5[6];
      if ((int)v4 + 7 < (int)v3 - 1) {
        *(v7 - 4) = v5[8];
      }
      v4 += 8;
      v5 += 16;
      v6 += 8;
      v7 -= 8;
    }
    while (v4 < (int)v3);
  }
  uint64_t v8 = *((void *)a1 + 1);
  *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)(v8 + 4);
  if ((__int16)v2 >= 1)
  {
    unint64_t v9 = 0;
    __int16 v10 = (_DWORD *)(a2 + 16);
    uint64_t v11 = (_DWORD *)(v8 + 16);
    do
    {
      *(v11 - 4) = *(v10 - 4);
      *(v11 - 3) = *(v10 - 3);
      *(v11 - 2) = *(v10 - 2);
      *(v11 - 1) = *(v10 - 1);
      *uint64_t v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v9 += 8;
      v10 += 8;
      v11 += 8;
    }
    while (v9 < v2);
  }
  return 1;
}

uint64_t call_cfsv_changeOutputSampleOrder(unsigned __int16 *a1, _DWORD *a2)
{
  unint64_t v2 = *a1;
  LODWORD(v3) = (int)((v2 + (v2 >> 15)) << 16) >> 17;
  if ((__int16)v2 <= 1)
  {
    uint64_t v3 = (int)v3;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)a1 + 1);
    uint64_t v3 = (int)v3;
    unsigned int v6 = a2 + 9;
    __int16 v7 = (_DWORD *)(v5 + 16);
    uint64_t v8 = (_DWORD *)(v5 + 4 * v2 - 16);
    do
    {
      *(v6 - 9) = *(v7 - 4);
      *(v6 - 7) = *(v7 - 3);
      *(v6 - 5) = *(v7 - 2);
      *(v6 - 3) = *(v7 - 1);
      *(v6 - 1) = *v7;
      v6[1] = v7[1];
      v6[3] = v7[2];
      v6[5] = v7[3];
      *(v6 - 6) = v8[3];
      *(v6 - 4) = v8[2];
      *(v6 - 2) = v8[1];
      *unsigned int v6 = *v8;
      v6[2] = *(v8 - 1);
      v6[4] = *(v8 - 2);
      v6[6] = *(v8 - 3);
      if ((int)v4 + 7 < (int)v3 - 1) {
        v6[8] = *(v8 - 4);
      }
      v7 += 8;
      v8 -= 8;
      v4 += 8;
      v6 += 16;
    }
    while (v4 < (int)v3);
  }
  uint64_t v9 = *((void *)a1 + 1);
  a2[1] = *(_DWORD *)(v9 + 4 * v3);
  if ((__int16)v2 >= 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = a2 + 4;
    uint64_t v12 = (_DWORD *)(v9 + 16);
    do
    {
      *(v12 - 4) = *(v11 - 4);
      *(v12 - 3) = *(v11 - 3);
      *(v12 - 2) = *(v11 - 2);
      *(v12 - 1) = *(v11 - 1);
      *uint64_t v12 = *v11;
      v12[1] = v11[1];
      v12[2] = v11[2];
      v12[3] = v11[3];
      v10 += 8;
      v11 += 8;
      v12 += 8;
    }
    while (v10 < v2);
  }
  return 1;
}

uint64_t featex_bet5_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = 2229280774;
  if ((safeh_HandleCheck(a1, a2, 415, 248) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 152);
    uint64_t v5 = (const char *)(v4 + 152);
    if (v6) {
      __int16 v7 = v5;
    }
    else {
      __int16 v7 = 0;
    }
  }
  else
  {
    __int16 v7 = 0;
  }
  uint64_t Voice = select_bet5_loadVoice(*(void *)(a1 + 24), *(void *)(a1 + 16), v7, (uint64_t)&v14, 0);
  if ((Voice & 0x80000000) != 0) {
    return Voice;
  }
  if (v14)
  {
    USuint64_t Voice = select_bet5_GetUSVoice(v14, v15);
    *(void *)(a1 + 32) = USVoice;
    if (!USVoice) {
      return v3;
    }
  }
  else if (!*(void *)(a1 + 32))
  {
    return v3;
  }
  uint64_t VParam = select_bet5_GetVParam(v14, v15);
  *(void *)(a1 + 40) = VParam;
  if (VParam)
  {
    NNFeatexint Data = select_bet5_GetNNFeatexData(v14, v15);
    *(void *)(a1 + 104) = NNFeatexData;
    if (NNFeatexData)
    {
      *(void *)(a1 + 112) = select_bet5_GetTransWeightRulesDiph(v14, v15, (_DWORD *)(a1 + 128));
      *(void *)(a1 + 120) = select_bet5_GetTransWeightRulesPhon(v14, v15, (_DWORD *)(a1 + 132));
      nnfeatex_DeInit((uint64_t *)(a1 + 88));
      int v12 = nnfeatex_Init(a1 + 88, *(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 104), *(void *)(a1 + 16));
      if (v12) {
        return v12 | 0x84E02000;
      }
      else {
        return 0;
      }
    }
  }
  return v3;
}

uint64_t featex_bet5_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 415, 248);
  if ((v7 & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v8 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 56) + 64))(a3, a4, 78, "application/x-realspeak-cspp-sptchk;version=4.0",
    0,
    0,
    a1 + 136);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 56) + 64))(a3, a4, 78, "application/x-realspeak-cspp-sgt;version=4.0",
         0,
         0,
         a1 + 152);
  unint64_t v10 = 0;
  uint64_t v11 = a1 + 168;
  do
  {
    switch((int)v10)
    {
      case 0:
        uint64_t v12 = *(void *)(a1 + 56);
        uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(v12 + 64);
        uint64_t v14 = szOUTPUT_STREAMS_0[v10];
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(v12 + 152))(v9);
        uint64_t v9 = v13(a3, a4, 207, v14, v15, 1, v11);
        goto LABEL_6;
      case 1:
      case 2:
      case 3:
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, void, uint64_t, uint64_t))(*(void *)(a1 + 56) + 64))(a3, a4, 207, szOUTPUT_STREAMS_0[v10], 0, 1, v11);
LABEL_6:
        uint64_t v8 = v9;
        break;
      default:
        break;
    }
    if ((v8 & 0x80000000) != 0) {
      break;
    }
    v11 += 16;
  }
  while (v10++ < 3);
  if ((v8 & 0x80000000) != 0)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(a1 + 56);
    do
    {
      uint64_t v19 = *(void *)(a1 + v17 + 168);
      if (v19) {
        (*(void (**)(uint64_t, void))(v18 + 72))(v19, *(void *)(a1 + v17 + 176));
      }
      v17 += 16;
    }
    while (v17 != 64);
  }
  return v8;
}

uint64_t featex_bet5_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v51 = 0;
  int v49 = 0;
  uint64_t v9 = safeh_HandleCheck(a1, a2, 415, 248);
  if ((v9 & 0x80000000) != 0) {
    return 2229280776;
  }
  *a5 = 1;
  if (!*(void *)(a1 + 168)) {
    return v9;
  }
  unsigned int v50 = 0;
  unint64_t v10 = *(unsigned __int16 **)(a1 + 240);
  bzero(v10, 0xE48uLL);
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)unint64_t v10 = v11;
  if (!v11)
  {
    int v13 = 0;
    int v14 = -2065686522;
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)(a1 + 48) + 272))(a3, a4, 128, 3, 0, 0);
  int v12 = nnfeatex_ProcessStart((uint64_t *)(a1 + 88), a3, a4, v10, &v49);
  if (v12)
  {
    int v13 = 0;
    int v14 = v12 | 0x84E02000;
    goto LABEL_9;
  }
  int v14 = UNICORN__select_bet5_FeatureExtractProcessStart(*(uint64_t **)(a1 + 80), *(void *)(a1 + 32), a3, a4, v10, &v49);
  if (v14 < 0)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FEATEX_BET5", 55005, "%s%x", v27, v28, v29, v30, "lhError");
    int v13 = 0;
    goto LABEL_9;
  }
  if ((__int16)v10[5] > 1)
  {
    int Process = UNICORN__select_bet5_FeatureExtractProcess(*(uint64_t **)(a1 + 80), *(void *)(a1 + 40), a3, a4, *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), (_DWORD *)(a1 + 232), (uint64_t)v10, (uint64_t *)(a1 + 64), (unsigned int *)(a1 + 72));
    int v13 = 1;
    if (Process < 0) {
      goto LABEL_60;
    }
    int v37 = nnfeatex_Process((uint64_t *)(a1 + 88), a3, a4, (uint64_t)v10, (uint64_t)&v49, 0, &v51, &v50, 1);
    if (v37)
    {
      int v14 = v37 | 0x84E02000;
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FEATEX_BET5", 70001, "%x", v38, v39, v40, v41, v37 | 0x84E02000);
      goto LABEL_9;
    }
    featex_bet5_loc_ApplyTransWeightRules(*(void *)(a1 + 112), *(_DWORD *)(a1 + 128), *(void *)(a1 + 120), *(_DWORD *)(a1 + 132), *(void *)(a1 + 32), (uint64_t)v10);
    if (log_GetLogLevel(*(void *)(*(void *)(a1 + 16) + 32)) >= 6) {
      featex_bet5_loc_logFeatures(*(void *)(a1 + 16), (uint64_t)v10);
    }
    featex_bet5_removeRAPColumns((void *)*(unsigned int *)(*(void *)(a1 + 32) + 3580), (uint64_t)v10, v51, v50);
    int Process = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 56) + 104))(*(void *)(a1 + 168), *(void *)(a1 + 176), *(void *)(a1 + 64), (32 * *(_DWORD *)(a1 + 72)));
    if (Process < 0
      || (int Process = featex_bet5_serializeFeatures(*(void *)(a1 + 16), *(void *)(a1 + 56), *(void *)(a1 + 184), *(void *)(a1 + 192), (uint64_t *)v10), Process < 0))
    {
LABEL_60:
      int v14 = Process;
      goto LABEL_9;
    }
    uint64_t v42 = *(void *)(a1 + 32);
    unsigned __int16 v43 = v10[5];
    if (!*(_DWORD *)(v42 + 3580)) {
      v43 *= *(_WORD *)(v42 + 3578);
    }
    int v14 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 56) + 104))(*(void *)(a1 + 200), *(void *)(a1 + 208), v51, 4 * v43 * v50);
    if (v14 < 0
      || (uint64_t v48 = *(void *)(*(void *)(a1 + 240) + 3608)) != 0
      && (int v14 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 56) + 104))(*(void *)(a1 + 216), *(void *)(a1 + 224), v48, 4 * v10[5] * *(unsigned __int16 *)(*(void *)(a1 + 32) + 3578)), v14 < 0))
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FEATEX_BET5", 70002, "%s%s%s%x", v44, v45, v46, v47, "contentType");
      goto LABEL_9;
    }
  }
  else
  {
    int v31 = v49;
    if (v49)
    {
      if (*(void *)(a1 + 168))
      {
        if (*((_DWORD *)v10 + 880))
        {
          int v14 = (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 104))();
          if (v14 < 0) {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FEATEX_BET5", 55008, "%s%s%s%x", v32, v33, v34, v35, "contentType");
          }
        }
      }
      int v31 = 1;
    }
    *a5 = v31;
  }
  int v13 = 1;
  if (v14 < 0 || v49)
  {
LABEL_9:
    for (uint64_t i = 0; i != 64; i += 16)
    {
      uint64_t v17 = a1 + i;
      uint64_t v18 = *(void *)(a1 + i + 168);
      if (v18)
      {
        int v19 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 56) + 72))(v18, *(void *)(v17 + 176));
        *(void *)(v17 + 168) = 0;
        if (v14 > -1 && v19 < 0) {
          int v14 = v19;
        }
      }
    }
  }
  if (v13 && (v14 & 0x80000000) == 0)
  {
    int ProcessEnd = UNICORN__select_bet5_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 80), v10);
    if (ProcessEnd >= 0) {
      int v22 = v14;
    }
    else {
      int v22 = ProcessEnd;
    }
    int v23 = nnfeatex_ProcessEnd((uint64_t *)(a1 + 88), &v51, &v50);
    if (v23) {
      int v14 = v23 | 0x84E02000;
    }
    else {
      int v14 = v22;
    }
  }
  int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 48) + 64))(a3, a4);
  if (v14 > -1 && v24 < 0) {
    uint64_t v15 = v24;
  }
  else {
    uint64_t v15 = v14;
  }
  if (*(_DWORD *)(a1 + 72))
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(a1 + 64));
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
  }
  return v15;
}

BOOL featex_bet5_loc_ApplyTransWeightRules(BOOL result, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (*(__int16 *)(a6 + 10) >= 1)
  {
    uint64_t v9 = result;
    int v10 = 0;
    int v19 = *(unsigned __int16 *)(a6 + 10);
    uint64_t v17 = (float *)(a3 + 8);
    uint64_t v18 = (float *)(result + 8);
    do
    {
      if (a2)
      {
        uint64_t v11 = 0;
        int v12 = v18;
        do
        {
          uint64_t result = featex_bet5_loc_TransRulesMatch(a5, v9, a6, (__int16)v10, v11);
          if (result)
          {
            unsigned int v13 = *((unsigned __int8 *)v12 - 1) + v10 * *(unsigned __int16 *)(*(void *)a6 + 3360);
            *(_DWORD *)(*(void *)(a6 + 3584) + 4 * v13) = (float)((float)(*v12
                                                                                          * (float)*(unsigned int *)(*(void *)(a6 + 3584) + 4 * v13))
                                                                                  + 0.5);
          }
          ++v11;
          v12 += 3;
        }
        while (a2 != v11);
      }
      if (a4)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v17;
        do
        {
          uint64_t result = featex_bet5_loc_TransRulesMatch(a5, a3, a6, (__int16)v10, v14);
          if (result)
          {
            unsigned int v16 = *((unsigned __int8 *)v15 - 1) + v10 * *(unsigned __int16 *)(*(void *)a6 + 3360);
            *(_DWORD *)(*(void *)(a6 + 3592) + 4 * v16) = (float)((float)(*v15
                                                                                          * (float)*(unsigned int *)(*(void *)(a6 + 3592) + 4 * v16))
                                                                                  + 0.5);
          }
          ++v14;
          v15 += 3;
        }
        while (a4 != v14);
      }
      ++v10;
    }
    while (v10 != v19);
  }
  return result;
}

uint64_t featex_bet5_loc_logFeatures(uint64_t result, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(__int16 *)(a2 + 10) >= 1)
  {
    uint64_t v3 = result;
    LH_itoa(0xCFu, v18, 0xAu);
    for (uint64_t i = 0; i != 5; ++i)
    {
      uint64_t v5 = dword_20D6AEDA4[i];
      uint64_t v6 = a2 + 8 * v5;
      uint64_t v8 = *(void *)(v6 + 16);
      uint64_t v7 = (uint64_t *)(v6 + 16);
      uint64_t v9 = "application/x-realspeak-u8-feat-";
      if (!v8)
      {
        uint64_t v9 = "application/x-realspeak-u16-feat-";
        if (!*(void *)(a2 + 8 * v5 + 1760)) {
          continue;
        }
      }
      strncpy(__dst, v9, 0x100uLL);
      size_t v10 = strlen(__dst);
      LH_itoa(v5, &__dst[v10], 0xAu);
      uint64_t v11 = *v7;
      if (!*v7) {
        uint64_t v11 = *(void *)(a2 + 8 * v5 + 1760);
      }
      log_OutBinary(*(void *)(v3 + 32), (uint64_t)"FEATEX_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, v11, *(unsigned __int16 *)(a2 + 10) << (*v7 == 0), 0);
    }
    LH_itoa(0x4Eu, v18, 0xAu);
    if (*(void *)(a2 + 504))
    {
      strncpy(__dst, "application/x-realspeak-u8-feat-", 0x100uLL);
      size_t v12 = strlen(__dst);
      LH_itoa(0x3Du, &__dst[v12], 0xAu);
      log_OutBinary(*(void *)(v3 + 32), (uint64_t)"SELECT_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, *(void *)(a2 + 504), *(unsigned __int16 *)(a2 + 10), 0);
    }
    if (*(void *)(a2 + 512))
    {
      strncpy(__dst, "application/x-realspeak-u8-feat-", 0x100uLL);
      size_t v13 = strlen(__dst);
      LH_itoa(0x3Eu, &__dst[v13], 0xAu);
      log_OutBinary(*(void *)(v3 + 32), (uint64_t)"SELECT_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, *(void *)(a2 + 512), *(unsigned __int16 *)(a2 + 10), 0);
    }
    for (uint64_t j = 97; j != 123; ++j)
    {
      if (*(void *)(a2 + 8 * j))
      {
        strncpy(__dst, "application/x-realspeak-u8-feat-", 0x100uLL);
        size_t v15 = strlen(__dst);
        LH_itoa(j - 2, &__dst[v15], 0xAu);
        log_OutBinary(*(void *)(v3 + 32), (uint64_t)"SELECT_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, *(void *)(a2 + 8 * j), *(unsigned __int16 *)(a2 + 10), 0);
      }
    }
    strncpy(__dst, "application/x-realspeak-u32-feat-", 0x100uLL);
    size_t v16 = strlen(__dst);
    LH_itoa(0x35u, &__dst[v16], 0xAu);
    log_OutBinary(*(void *)(v3 + 32), (uint64_t)"FEATEX_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, *(void *)(a2 + 3584), 4 * *(unsigned __int16 *)(a2 + 10) * *(unsigned __int16 *)(*(void *)a2 + 3360), 0);
    strncpy(__dst, "application/x-realspeak-u32-feat-", 0x100uLL);
    size_t v17 = strlen(__dst);
    LH_itoa(0x36u, &__dst[v17], 0xAu);
    return log_OutBinary(*(void *)(v3 + 32), (uint64_t)"FEATEX_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, *(void *)(a2 + 3592), 4 * *(unsigned __int16 *)(a2 + 10) * *(unsigned __int16 *)(*(void *)a2 + 3360), 0);
  }
  return result;
}

void *featex_bet5_removeRAPColumns(void *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v31 = (int)result;
  int v4 = *(__int16 *)(a2 + 10);
  if (v4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    int v8 = 0;
    do
    {
      int v9 = (__int16)v4;
      int v10 = (__int16)v4 - 1;
      if (v10 <= (int)v7)
      {
        unsigned __int16 v12 = v7;
        signed int v11 = v7;
      }
      else
      {
        signed int v11 = v7;
        unsigned __int16 v12 = v7;
        do
        {
          if (*(_DWORD *)(*(void *)(a2 + 3608) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 3578)) != -2) {
            break;
          }
          signed int v11 = (__int16)++v12;
        }
        while (v10 > (__int16)v12);
      }
      if (v7 != v12)
      {
        unsigned int v13 = (unsigned __int16)(v4 - v11);
        if (v9 <= v11) {
          size_t v14 = 0;
        }
        else {
          size_t v14 = v13;
        }
        if (v8 >= v11)
        {
          uint64_t v16 = (__int16)v12;
        }
        else
        {
          uint64_t v15 = *(void *)(a2 + 1800);
          uint64_t v16 = (__int16)v12;
          int v17 = *(unsigned __int16 *)(v15 + 2 * (__int16)v12);
          uint64_t v18 = v11;
          int v19 = (unsigned __int16 *)(v15 + v6);
          do
          {
            int v20 = *v19++;
            v17 += v20;
            *(_WORD *)(v15 + 2 * (__int16)v12) = v17;
            --v18;
          }
          while (v7 != v18);
        }
        if (v16 <= v7)
        {
          LOWORD(v4) = *(_WORD *)(a2 + 10);
        }
        else
        {
          int v33 = v8;
          if (v31)
          {
            int v21 = (void *)(a3 + 4 * v7 * a4);
            int v22 = (const void *)(a3 + 4 * v12 * a4);
            size_t v23 = a4 * (unint64_t)(4 * v14);
          }
          else
          {
            uint64_t v24 = *(unsigned __int16 *)(*(void *)a2 + 3578);
            int v21 = (void *)(a3 + 4 * v24 * a4 * v7);
            int v22 = (const void *)(a3 + 4 * v24 * a4 * v12);
            size_t v23 = a4 * (unint64_t)(4 * v14) * v24;
          }
          memmove(v21, v22, v23);
          for (uint64_t i = 0; i != 1728; i += 8)
          {
            uint64_t v26 = *(void *)(a2 + i + 32);
            if (v26) {
              memmove((void *)(v26 + v7), (const void *)(v26 + v16), v14);
            }
            uint64_t v27 = *(void *)(a2 + i + 1776);
            if (v27) {
              memmove((void *)(v27 + 2 * v7), (const void *)(v27 + 2 * v16), (2 * v14));
            }
          }
          uint64_t v28 = *(void *)(a2 + 3552);
          if (v28) {
            memmove((void *)(v28 + 8 * v7), (const void *)(v28 + 8 * v16), (8 * v14));
          }
          uint64_t v29 = *(void *)(a2 + 3560);
          if (v29) {
            memmove((void *)(v29 + 9 * v7), (const void *)(v29 + 9 * v16), (9 * v14));
          }
          memmove((void *)(*(void *)(a2 + 3568) + 4 * v33 * *(unsigned __int16 *)(*(void *)a2 + 2966)), (const void *)(*(void *)(a2 + 3568) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 2966)), (4 * v14) * (unint64_t)*(unsigned __int16 *)(*(void *)a2 + 2966));
          memmove((void *)(*(void *)(a2 + 3576) + 4 * v33 * *(unsigned __int16 *)(*(void *)a2 + 2966)), (const void *)(*(void *)(a2 + 3576) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 2966)), (4 * v14) * (unint64_t)*(unsigned __int16 *)(*(void *)a2 + 2966));
          memmove((void *)(*(void *)(a2 + 3584) + 4 * v33 * *(unsigned __int16 *)(*(void *)a2 + 3360)), (const void *)(*(void *)(a2 + 3584) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 3360)), (4 * v14) * (unint64_t)*(unsigned __int16 *)(*(void *)a2 + 3360));
          memmove((void *)(*(void *)(a2 + 3592) + 4 * v33 * *(unsigned __int16 *)(*(void *)a2 + 3360)), (const void *)(*(void *)(a2 + 3592) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 3360)), (4 * v14) * (unint64_t)*(unsigned __int16 *)(*(void *)a2 + 3360));
          memmove((void *)(*(void *)(a2 + 3600) + *(unsigned __int16 *)(*(void *)a2 + 2966) * (uint64_t)v33), (const void *)(*(void *)(a2 + 3600) + *(unsigned __int16 *)(*(void *)a2 + 2966) * (uint64_t)v11), *(unsigned __int16 *)(*(void *)a2 + 2966) * (unint64_t)v14);
          uint64_t result = memmove((void *)(*(void *)(a2 + 3608) + 4 * v33 * *(unsigned __int16 *)(*(void *)a2 + 3578)), (const void *)(*(void *)(a2 + 3608) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 3578)), (4 * v14) * (unint64_t)*(unsigned __int16 *)(*(void *)a2 + 3578));
          LOWORD(v4) = v7 - v12 + *(_WORD *)(a2 + 10);
          *(_WORD *)(a2 + 10) = v4;
        }
      }
      ++v7;
      v6 += 2;
      int v8 = v7;
    }
    while (v7 < (__int16)v4);
  }
  return result;
}

uint64_t featex_bet5_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 415, 248);
  if ((v3 & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v4 = v3;
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 56);
  do
  {
    uint64_t v7 = *(void *)(a1 + v5 + 168);
    if (v7) {
      (*(void (**)(uint64_t, void))(v6 + 72))(v7, *(void *)(a1 + v5 + 176));
    }
    v5 += 16;
  }
  while (v5 != 64);
  return v4;
}

uint64_t featex_bet5_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2229280769;
  }
  uint64_t result = 0;
  *a2 = &IFeatextract_0;
  return result;
}

BOOL featex_bet5_loc_TransRulesMatch(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t v8 = *(void *)(a1 + 3424);
  int v9 = (unsigned __int8 *)(a2 + 12 * a5);
  uint64_t v10 = *(void *)(a3 + 32);
  BOOL result = 0;
  if (strchr(*(char **)(v8 + 8 * *v9), *(unsigned __int8 *)(v10 + a4)))
  {
    uint64_t v11 = a4 + 1;
    if (strchr(*(char **)(v8 + 8 * v9[1]), *(unsigned __int8 *)(v10 + v11)))
    {
      int v12 = a4 ? *(unsigned __int8 *)(a4 + v10 - 1) : 35;
      if (strchr(*(char **)(v8 + 8 * v9[2]), v12))
      {
        int v13 = *(__int16 *)(a3 + 10) - 2 == a4 ? 35 : *(unsigned __int8 *)(a4 + v10 + 2);
        if (strchr(*(char **)(v8 + 8 * v9[3]), v13))
        {
          if ((*(_DWORD *)(a1 + 3092) & 0x80000000) != 0) {
            return 1;
          }
          uint64_t v14 = *(void *)(a1 + 3432);
          uint64_t v15 = *(char **)(v14 + 8 * v9[4]);
          if (!v15 || strchr(v15, *(unsigned __int8 *)(*(void *)(a3 + 248) + a4) + 48))
          {
            uint64_t v16 = *(char **)(v14 + 8 * v9[5]);
            if (!v16 || strchr(v16, *(unsigned __int8 *)(*(void *)(a3 + 248) + v11) + 48)) {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t featex_bet5_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2229280775;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 416;
  }
  return result;
}

uint64_t featex_bet5_ClassClose()
{
  return 0;
}

uint64_t featex_bet5_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v32);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v10 = (void *)heap_Calloc(*(void **)(v32 + 8), 1, 248);
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v15 = v10;
  void *v10 = a3;
  v10[1] = a4;
  uint64_t v16 = v32;
  v10[2] = v32;
  v10[3] = a1;
  v10[6] = 0;
  int v17 = v10 + 6;
  v10[4] = 0;
  v10[7] = 0;
  uint64_t v18 = heap_Calloc(*(void **)(v16 + 8), 1, 3656);
  v15[30] = v18;
  if (v18)
  {
    uint64_t v28 = 0;
    LODWORD(v29) = 0;
    uint64_t Voice = select_bet5_loadVoice(v15[3], v15[2], 0, (uint64_t)&v28, 0);
    if ((Voice & 0x80000000) != 0)
    {
LABEL_16:
      featex_bet5_ObjClose(*(void **)a5, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      return Voice;
    }
    USuint64_t Voice = select_bet5_GetUSVoice(v28, v29);
    v15[4] = USVoice;
    if (USVoice)
    {
      uint64_t VParam = select_bet5_GetVParam(v28, v29);
      v15[5] = VParam;
      if (VParam)
      {
        NNFeatexint Data = select_bet5_GetNNFeatexData(v28, v29);
        v15[13] = NNFeatexData;
        if (NNFeatexData)
        {
          v15[14] = select_bet5_GetTransWeightRulesDiph(v28, v29, (_DWORD *)v15 + 32);
          v15[15] = select_bet5_GetTransWeightRulesPhon(v28, v29, (_DWORD *)v15 + 33);
          uint64_t Object = objc_GetObject(*(void *)(v32 + 48), (uint64_t)"LINGDB", &v30);
          if ((Object & 0x80000000) != 0
            || (*int v17 = *(void *)(v30 + 8),
                uint64_t Object = objc_GetObject(*(void *)(v32 + 48), (uint64_t)"SYNTHSTREAM", &v31),
                (Object & 0x80000000) != 0)
            || (uint64_t v24 = *(void *)(v31 + 8),
                v15[7] = v24,
                uint64_t Object = UNICORN__select_bet5_FeatureExtractObjOpen(a3, a4, v24, v15[6], v15 + 10),
                (Object & 0x80000000) != 0))
          {
            uint64_t Voice = Object;
          }
          else
          {
            int v25 = nnfeatex_Init((uint64_t)(v15 + 11), v15[6], v15[4], v15[13], v15[2]);
            if (!v25)
            {
              uint64_t Voice = 0;
              *(void *)a5 = v15;
              *(_DWORD *)(a5 + 8) = 415;
              return Voice;
            }
            uint64_t Voice = v25 | 0x84E02000;
          }
          goto LABEL_16;
        }
      }
    }
  }
  else
  {
LABEL_13:
    uint64_t Voice = 2229280778;
    log_OutPublic(*(void *)(v32 + 32), (uint64_t)"FEATEX_BET5", 31000, 0, v11, v12, v13, v14, v27);
  }
  return Voice;
}

uint64_t featex_bet5_ObjClose(void *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 415, 248);
  if ((v3 & 0x80000000) != 0) {
    return 2229280776;
  }
  if (!a1) {
    return v3;
  }
  nnfeatex_DeInit(a1 + 11);
  uint64_t ObjClose = BET3FLT__select_bet3_FeatureExtractObjClose(a1[10]);
  if (a1[6]) {
    objc_ReleaseObject(*(void *)(a1[2] + 48), (uint64_t)"LINGDB");
  }
  if (a1[7]) {
    objc_ReleaseObject(*(void *)(a1[2] + 48), (uint64_t)"SYNTHSTREAM");
  }
  uint64_t v5 = a1[4];
  if (v5)
  {
    uint64_t v6 = a1[3];
    if (!v6 || (uint64_t v7 = *(void *)(v6 + 48)) == 0) {
      uint64_t v7 = *(void *)(a1[2] + 48);
    }
    objc_ReleaseObject(v7, v5 + 152);
  }
  uint64_t v8 = a1[30];
  if (v8) {
    heap_Free(*(void **)(a1[2] + 8), v8);
  }
  heap_Free(*(void **)(a1[2] + 8), (uint64_t)a1);
  return ObjClose;
}

uint64_t featex_bet5_serializeFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = *a5;
  __dst = 0;
  uint64_t v12 = v11 + 2748;
  do
  {
    int v13 = *(unsigned __int8 *)(v12 + v9);
    if (*(unsigned char *)(v12 + v9))
    {
      if (v13 == 2)
      {
        v10 += 2;
      }
      else if (v13 == 1)
      {
        ++v10;
      }
      else if ((unsigned __int16)v9 - 53 <= 1)
      {
        v10 += 4 * *(unsigned __int16 *)(v11 + 3360);
      }
    }
    ++v9;
  }
  while (v9 != 218);
  uint64_t v14 = *(void **)(v11 + 3336);
  if (v14 && *v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v14 + 1;
    while (v16[v15++])
      ;
    v10 += v15;
  }
  else
  {
    LODWORD(v15) = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void **, void))(a2 + 112))(a3, a4, &__dst, v10 * *((unsigned __int16 *)a5 + 5));
  if ((result & 0x80000000) == 0)
  {
    uint64_t v29 = a4;
    uint64_t v19 = 0;
    int v20 = (char *)__dst;
    uint64_t v21 = v11 + 2748;
    while (1)
    {
      int v22 = *(unsigned __int8 *)(v21 + v19);
      if (*(unsigned char *)(v21 + v19))
      {
        if (v22 == 2)
        {
          uint64_t v25 = *((unsigned __int16 *)a5 + 5);
          memcpy(v20, (const void *)a5[v19 + 220], 2 * v25);
          v20 += 2 * v25;
        }
        else
        {
          if (v22 == 1)
          {
            size_t v23 = *((unsigned __int16 *)a5 + 5);
            uint64_t v24 = (const void *)a5[v19 + 2];
LABEL_28:
            memcpy(v20, v24, v23);
            v20 += v23;
            goto LABEL_29;
          }
          if ((unsigned __int16)v19 - 53 <= 1)
          {
            size_t v23 = 4 * *((unsigned __int16 *)a5 + 5) * *(unsigned __int16 *)(v11 + 3360);
            if (v19 == 53) {
              uint64_t v26 = 448;
            }
            else {
              uint64_t v26 = 449;
            }
            uint64_t v24 = (const void *)a5[v26];
            goto LABEL_28;
          }
        }
      }
LABEL_29:
      if (++v19 == 218)
      {
        if (v15)
        {
          int v27 = 0;
          do
          {
            size_t v28 = *((unsigned __int16 *)a5 + 5);
            memcpy(v20, *(const void **)(a5[438] + 8 * (unsigned __int16)v27), v28);
            v20 += v28;
            ++v27;
          }
          while (v15 > (unsigned __int16)v27);
        }
        return (*(uint64_t (**)(uint64_t, uint64_t, void))(a2 + 120))(a3, v29, v10 * *((unsigned __int16 *)a5 + 5));
      }
    }
  }
  return result;
}

uint64_t UnicornAddon_Init(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(_DWORD *)(a5 + 24) = a4;
  if (!*(_DWORD *)(*(void *)(a2 + 568) + 6692) || !*(_DWORD *)(*(void *)(a3 + 568) + 6692)) {
    return 0;
  }
  uint64_t v9 = 2229280778;
  unsigned int v10 = *(_DWORD *)(a2 + 2452);
  unsigned int v11 = *(_DWORD *)(a3 + 2452);
  if (v10 >= v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v10;
  }
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), *(unsigned int *)(a3 + 2448), 4);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * *(unsigned int *)(a3 + 2448));
    if (v15)
    {
      uint64_t v16 = (uint64_t)v15;
      uint64_t v17 = *(unsigned int *)(a3 + 2448);
      if (v17) {
        memset_pattern16(v15, &unk_20D6AEDC0, 4 * v17);
      }
      uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), *(unsigned int *)(a2 + 2448), 4);
      if (v18)
      {
        uint64_t v19 = v18;
        int v20 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * *(unsigned int *)(a2 + 2448));
        if (v20)
        {
          uint64_t v21 = (uint64_t)v20;
          uint64_t v22 = *(unsigned int *)(a2 + 2448);
          if (v22) {
            memset_pattern16(v20, &unk_20D6AEDC0, 4 * v22);
          }
          unint64_t v23 = *(unsigned int *)(a3 + 2448);
          if (v23)
          {
            unint64_t v24 = 0;
            LODWORD(v25) = v22;
            do
            {
              if (v25)
              {
                unint64_t v26 = 0;
                uint64_t v27 = *(void *)(a3 + 2440);
                uint64_t v28 = *(void *)(a2 + 2440);
                do
                {
                  if (v12)
                  {
                    uint64_t v29 = (float *)(v28 + 4 * (*(_DWORD *)(a2 + 2452) * v26));
                    uint64_t v30 = (float *)(v27 + 4 * (v24 * *(_DWORD *)(a3 + 2452)));
                    float v31 = 0.0;
                    uint64_t v32 = v12;
                    do
                    {
                      float v33 = *v30++;
                      float v34 = v33;
                      float v35 = *v29++;
                      float v31 = v31 + (float)((float)(v34 - v35) * (float)(v34 - v35));
                      --v32;
                    }
                    while (v32);
                  }
                  else
                  {
                    float v31 = 0.0;
                  }
                  if (v31 < *(float *)(v16 + 4 * v24))
                  {
                    *(_DWORD *)(v14 + 4 * v24) = v26;
                    *(float *)(v16 + 4 * v24) = v31;
                  }
                  if (v31 < *(float *)(v21 + 4 * v26))
                  {
                    *(_DWORD *)(v19 + 4 * v26) = v24;
                    *(float *)(v21 + 4 * v26) = v31;
                  }
                  ++v26;
                  unint64_t v25 = *(unsigned int *)(a2 + 2448);
                }
                while (v26 < v25);
                unint64_t v23 = *(unsigned int *)(a3 + 2448);
              }
              ++v24;
            }
            while (v24 < v23);
          }
          *(void *)(a5 + 32) = v19;
          *(void *)(a5 + 40) = v14;
          heap_Free(*(void **)(a1 + 8), v16);
          heap_Free(*(void **)(a1 + 8), v21);
          return 0;
        }
      }
    }
  }
  return v9;
}

void *UnicornAddon_Deinit(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4) {
    uint64_t result = heap_Free((void *)result[1], v4);
  }
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = (void *)v3[1];
    return heap_Free(v6, v5);
  }
  return result;
}

uint64_t UnicornAddon_UID2AddonId(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a3 != -1 && a2 >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (unsigned int *)(a1 + 24);
    do
    {
      unsigned int v7 = *v6;
      v6 += 12;
      if (v7 > a3) {
        break;
      }
      ++v5;
    }
    while (v5 < a2);
    return (v5 - 1);
  }
  return result;
}

void *UnicornPipelineFactory_Create(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = heap_Calloc(*(void **)(a2 + 8), 1, 112);
  uint64_t v9 = (void *)v8;
  if (v8)
  {
    *(void *)(v8 + 8) = a2;
    if (a1 == 1)
    {
      uint64_t v26 = heap_Calloc(*(void **)(a2 + 8), 1, 240);
      if (v26)
      {
        uint64_t v11 = v26;
        int v27 = UnicornPipelineMT_Create(v26, a2, a3, a4);
        uint64_t v13 = UnicornPipelineMT_isMultiThreaded;
        uint64_t v14 = UnicornPipelineMT_isDone;
        uint64_t v15 = UnicornPipelineMT_SetSIMDCallbacks;
        uint64_t v16 = UnicornPipelineMT_SetForcedEEEnabled;
        uint64_t v17 = UnicornPipelineMT_GetForcedEEEnabled;
        uint64_t v18 = UnicornPipelineMT_GetStream;
        uint64_t v19 = UnicornPipelineMT_GetPreparedCount;
        int v20 = UnicornPipelineMT_SynthesizeDummy;
        uint64_t v21 = UnicornPipelineMT_ProcessPhoneme;
        uint64_t v22 = UnicornPipelineMT_Destroy;
        unint64_t v23 = UnicornPipelineMT_Release;
        unint64_t v24 = UnicornPipelineMT_Init;
        if ((v27 & 0x80000000) == 0)
        {
          unint64_t v25 = "Unicorn Pipeline is MULTITHREAD";
          goto LABEL_11;
        }
      }
    }
    else if (!a1)
    {
      uint64_t v10 = heap_Calloc(*(void **)(a2 + 8), 1, 200);
      if (v10)
      {
        uint64_t v11 = v10;
        int v12 = UnicornPipeline_Create(v10, a2, a3, a4);
        uint64_t v13 = UnicornPipeline_isMultiThreaded;
        uint64_t v14 = UnicornPipeline_isDone;
        uint64_t v15 = UnicornPipeline_SetSIMDCallbacks;
        uint64_t v16 = UnicornPipeline_SetForcedEEEnabled;
        uint64_t v17 = UnicornPipeline_GetForcedEEEnabled;
        uint64_t v18 = UnicornPipeline_GetStream;
        uint64_t v19 = UnicornPipeline_GetPreparedCount;
        int v20 = UnicornPipeline_SynthesizeDummy;
        uint64_t v21 = UnicornPipeline_ProcessPhoneme;
        uint64_t v22 = UnicornPipeline_Destroy;
        unint64_t v23 = UnicornPipeline_Release;
        unint64_t v24 = UnicornPipeline_Init;
        if ((v12 & 0x80000000) == 0)
        {
          unint64_t v25 = "Unicorn Pipeline is STANDARD SINGLETHREAD";
LABEL_11:
          v9[2] = v24;
          v9[3] = v23;
          v9[4] = v22;
          v9[5] = v21;
          v9[6] = v20;
          v9[7] = v19;
          v9[8] = v18;
          v9[9] = v17;
          v9[10] = v16;
          v9[11] = v15;
          v9[12] = v14;
          v9[13] = v13;
          *uint64_t v9 = v11;
          UNICORN__log_select_Diag(a2, 3, (uint64_t)v25);
          return v9;
        }
      }
    }
    return 0;
  }
  return v9;
}

uint64_t UnicornPipelineClass_Init(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1[2];
  uint64_t v14 = *a1;
  return v13(v14, a3, a4, a5, a6, a7);
}

uint64_t UnicornPipelineClass_Release(uint64_t *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v3 = (uint64_t (*)(uint64_t))a1[3];
  uint64_t v4 = *a1;
  return v3(v4);
}

uint64_t UnicornPipelineClass_Destroy(uint64_t a1, int a2)
{
  unint64_t v2 = (uint64_t *)a1;
  int v3 = safeh_HandleCheck(a1, a2, 135969, 112);
  if (v3 < 0) {
    unint64_t v2 = 0;
  }
  if (v3 < 0) {
    return 2229280776;
  }
  uint64_t v4 = ((uint64_t (*)(uint64_t))v2[4])(*v2);
  if (*v2) {
    heap_Free(*(void **)(v2[1] + 8), *v2);
  }
  *unint64_t v2 = 0;
  heap_Free(*(void **)(v2[1] + 8), (uint64_t)v2);
  return v4;
}

uint64_t UnicornPipelineClass_ProcessPhoneme(uint64_t *a1, int a2, uint64_t a3)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 2229280776;
  }
  unint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))a1[5];
  uint64_t v6 = *a1;
  return v5(v6, a3);
}

uint64_t UnicornPipelineClass_SynthesizeDummy(uint64_t *a1, int a2, uint64_t a3)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 2229280776;
  }
  unint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))a1[6];
  uint64_t v6 = *a1;
  return v5(v6, a3);
}

uint64_t UnicornPipelineClass_GetPreparedCount(uint64_t *a1, int a2)
{
  safeh_HandleCheck((uint64_t)a1, a2, 135969, 112);
  int v3 = (uint64_t (*)(uint64_t))a1[7];
  uint64_t v4 = *a1;
  return v3(v4);
}

uint64_t UnicornPipelineClass_GetStream(uint64_t *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 0;
  }
  int v3 = (uint64_t (*)(uint64_t))a1[8];
  uint64_t v4 = *a1;
  return v3(v4);
}

uint64_t UnicornPipelineClass_GetForcedEEEnabled(uint64_t *a1, int a2)
{
  safeh_HandleCheck((uint64_t)a1, a2, 135969, 112);
  int v3 = (uint64_t (*)(uint64_t))a1[9];
  uint64_t v4 = *a1;
  return v3(v4);
}

uint64_t UnicornPipelineClass_SetForcedEEEnabled(uint64_t *a1, int a2, uint64_t a3)
{
  safeh_HandleCheck((uint64_t)a1, a2, 135969, 112);
  unint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))a1[10];
  uint64_t v6 = *a1;
  return v5(v6, a3);
}

uint64_t UnicornPipelineClass_SetSIMDCallbacks(uint64_t *a1, int a2, uint64_t a3)
{
  safeh_HandleCheck((uint64_t)a1, a2, 135969, 112);
  unint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))a1[11];
  uint64_t v6 = *a1;
  return v5(v6, a3);
}

uint64_t UnicornPipelineClass_isDone(uint64_t *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 0;
  }
  int v3 = (uint64_t (*)(uint64_t))a1[12];
  uint64_t v4 = *a1;
  return v3(v4);
}

float UNICORN__mfsLLCost(float a1, float a2)
{
  return (float)(a1 * a2) * (float)(a1 * a2);
}

float UNICORN__mfsLogLikelihood(float a1, float a2)
{
  float v3 = -(float)(a1 * a1);
  float v4 = BET3FLT__bet3_finv(a2);
  return -(float)(logf(v4) - (float)(v3 * a2));
}

void UNICORN__mfs_InitParam(uint64_t a1)
{
  unint64_t v2 = (_OWORD *)(a1 + 6132);
  bzero((void *)a1, 0x2D88uLL);
  *(void *)(a1 + 11520) = 0;
  *(_DWORD *)(a1 + 11544) = 100000;
  *(void *)(a1 + 11536) = 0;
  *(_DWORD *)(a1 + 11488) = 0;
  *(_DWORD *)(a1 + 5048) = 0;
  *(void *)(a1 + 5548) = -4294965296;
  *(_DWORD *)(a1 + 5592) = 0;
  *(void *)(a1 + 5556) = 0x3F8000003F800000;
  *(_DWORD *)(a1 + 5564) = 2000;
  *(_OWORD *)(a1 + 5504) = xmmword_20D6AEDE0;
  *(void *)(a1 + 6120) = 0x3C00000001;
  *(_DWORD *)(a1 + 6128) = 1112014848;
  *unint64_t v2 = xmmword_20D6AEDF0;
  *(void *)(a1 + 6148) = 0x7530000000C8;
  *(_DWORD *)(a1 + 6156) = 1056964608;
  *(void *)(a1 + 6160) = 0x4248000040600000;
  *(void *)(a1 + 6664) = 0x186A0FFFFFFFFLL;
  *(void *)(a1 + 6192) = 3212836864;
  *(_DWORD *)(a1 + 6200) = 0;
  *(_OWORD *)(a1 + 6616) = 0u;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *(_OWORD *)(a1 + 6584) = v3;
  *(_OWORD *)(a1 + 6600) = v3;
  *(_OWORD *)(a1 + 6552) = v3;
  *(_OWORD *)(a1 + 6568) = v3;
  *(_OWORD *)(a1 + 6520) = v3;
  *(_OWORD *)(a1 + 6536) = v3;
  *(_OWORD *)(a1 + 6488) = v3;
  *(_OWORD *)(a1 + 6504) = v3;
  *(_OWORD *)(a1 + 6456) = v3;
  *(_OWORD *)(a1 + 6472) = v3;
  *(_OWORD *)(a1 + 6424) = v3;
  *(_OWORD *)(a1 + 6440) = v3;
  *(_OWORD *)(a1 + 6392) = v3;
  *(_OWORD *)(a1 + 6408) = v3;
  *(_OWORD *)(a1 + 6360) = v3;
  *(_OWORD *)(a1 + 6376) = v3;
  *(_OWORD *)(a1 + 6328) = v3;
  *(_OWORD *)(a1 + 6344) = v3;
  *(_OWORD *)(a1 + 6296) = v3;
  *(_OWORD *)(a1 + 6312) = v3;
  *(_OWORD *)(a1 + 6264) = v3;
  *(_OWORD *)(a1 + 6280) = v3;
  *(_OWORD *)(a1 + 6232) = v3;
  *(_OWORD *)(a1 + 6248) = v3;
  *(_DWORD *)(a1 + 6632) = 200;
  *(_OWORD *)(a1 + 6636) = xmmword_20D6AEE00;
  *(_DWORD *)(a1 + 6652) = 1084647014;
  *(void *)(a1 + 6656) = 0x40A6666640BCCCCDLL;
  *(void *)(a1 + 5980) = 0;
  *(void *)(a1 + 5992) = 1;
  *(void *)(a1 + 6000) = 0x4000000000000000;
  v2[34] = xmmword_20D6AEE10;
  *(_DWORD *)(a1 + 6692) = 0;
  *(void *)(a1 + 6696) = 0x300000000;
  *(void *)(a1 + 6704) = 0;
  *(_DWORD *)(a1 + 6712) = 0;
  *(_DWORD *)(a1 + 6672) = 1123942400;
  *(void *)(a1 + 6744) = 0;
  *(_OWORD *)(a1 + 6728) = 0u;
  *(_DWORD *)(a1 + 6764) = 0;
  *(_DWORD *)(a1 + 6772) = 3;
  *(void *)(a1 + 6776) = 1056964608;
  *(void *)(a1 + 6784) = 1065353216;
  *(_DWORD *)(a1 + 5568) = 1084227584;
  *(void *)(a1 + 5576) = 0x447A0000000003B6;
  *(void *)(a1 + 5584) = 0x4120000000000000;
  v2[335] = xmmword_20D6AEE20;
  *(_DWORD *)(a1 + 11508) = 4000;
  *(void *)(a1 + 11512) = 0x7D000000FA0;
  *(_DWORD *)(a1 + 5924) = 9;
  *(void *)(a1 + 5928) = 0x1400000001;
  UNICORN__InitVParam((_DWORD *)a1);
  unint64_t v4 = 0;
  *(_DWORD *)(a1 + 5072) = 7562861;
  *(_DWORD *)(a1 + 5524) = 1056964608;
  *(_DWORD *)(a1 + 10464) = 1065353216;
  unint64_t v5 = (float *)(a1 + 10472);
  v6.i64[0] = 255;
  v6.i64[1] = 255;
  do
  {
    int32x2_t v7 = vmovn_s64((int64x2_t)vcgtq_u64(v6, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v4), (int8x16_t)xmmword_20D6072C0)));
    if (v7.i8[0]) {
      *(v5 - 1) = 1.0 / (float)(v4 + 1);
    }
    if (v7.i8[4]) {
      *unint64_t v5 = 1.0 / (float)(v4 + 2);
    }
    v4 += 2;
    v5 += 2;
  }
  while (v4 != 256);
}

void UNICORN__mfs_DeInitParam(uint64_t a1, void *a2)
{
  UNICORN__DeInitVParam(a1, a2);
  uint64_t v4 = a2[677];
  if (v4)
  {
    heap_Free(*(void **)(a1 + 8), v4);
    a2[677] = 0;
  }
  uint64_t v5 = a2[1301];
  if (v5)
  {
    heap_Free(*(void **)(a1 + 8), v5);
    a2[1301] = 0;
  }
  uint64_t v6 = a2[1302];
  if (v6)
  {
    heap_Free(*(void **)(a1 + 8), v6);
    a2[1302] = 0;
  }
  uint64_t v7 = a2[1303];
  if (v7)
  {
    heap_Free(*(void **)(a1 + 8), v7);
    a2[1303] = 0;
  }
  uint64_t v8 = a2[1304];
  if (v8)
  {
    heap_Free(*(void **)(a1 + 8), v8);
    a2[1304] = 0;
  }
  uint64_t v9 = a2[1305];
  if (v9)
  {
    heap_Free(*(void **)(a1 + 8), v9);
    a2[1305] = 0;
  }
  uint64_t v10 = a2[1306];
  if (v10)
  {
    heap_Free(*(void **)(a1 + 8), v10);
    a2[1306] = 0;
  }
  uint64_t v11 = a2[1307];
  if (v11)
  {
    heap_Free(*(void **)(a1 + 8), v11);
    a2[1307] = 0;
  }
  uint64_t v12 = a2[776];
  if (v12)
  {
    heap_Free(*(void **)(a1 + 8), v12);
    a2[776] = 0;
  }
  uint64_t v13 = a2[777];
  if (v13)
  {
    heap_Free(*(void **)(a1 + 8), v13);
    a2[777] = 0;
  }
  uint64_t v14 = a2[778];
  if (v14) {
    heap_Free(*(void **)(a1 + 8), v14);
  }
  bzero(a2, 0x2D88uLL);
}

uint64_t BET5_Param_GetType(int a1)
{
  uint64_t v1 = 0;
  unint64_t v2 = &dword_264111A40;
  while (1)
  {
    int v3 = *v2;
    v2 += 4;
    if (v3 == a1) {
      break;
    }
    if (++v1 == 7)
    {
      uint64_t v1 = 7;
      return *((unsigned int *)&auxTableParamInfo + 4 * v1 + 3);
    }
  }
  return *((unsigned int *)&auxTableParamInfo + 4 * v1 + 3);
}

float BET5_Param_GetGlobalValue(uint64_t a1, int a2, _DWORD *a3)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = 6168;
      goto LABEL_9;
    case 2:
      uint64_t v3 = 6172;
      goto LABEL_9;
    case 3:
      uint64_t v3 = 6776;
      goto LABEL_9;
    case 4:
      uint64_t v3 = 6176;
      goto LABEL_9;
    case 5:
      uint64_t v3 = 6180;
      goto LABEL_9;
    case 6:
      uint64_t v3 = 6184;
      goto LABEL_9;
    case 7:
      uint64_t v3 = 6188;
LABEL_9:
      uint64_t v4 = (float *)(a1 + v3);
      float result = *v4;
      *a3 = *(_DWORD *)v4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t select_bet5_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2229280769;
  }
  uint64_t result = 0;
  *a2 = &ISelect_Bet5;
  return result;
}

uint64_t select_bet5_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2229280775;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 135967;
  }
  return result;
}

uint64_t select_bet5_ClassClose()
{
  return 0;
}

uint64_t select_bet5_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t *a5)
{
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  *a5 = 0;
  *((_DWORD *)a5 + 2) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v25);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v8 = heap_Calloc(*(void **)(v25 + 8), 1, 1304);
  uint64_t v13 = v25;
  if (!v8)
  {
    log_OutPublic(*(void *)(v25 + 32), (uint64_t)"SELECT_BET5", 31000, 0, v9, v10, v11, v12, v20[0]);
    return 2229280778;
  }
  uint64_t v14 = v8;
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = v13;
  *(_DWORD *)(v8 + 1296) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  uint64_t v21 = 0;
  LODWORD(v22) = 0;
  uint64_t Voice = select_bet5_loadVoice(a1, v25, 0, (uint64_t)&v21, 0);
  if ((Voice & 0x80000000) != 0) {
    goto LABEL_14;
  }
  uint64_t Voice = safeh_HandleCheck(v21, v22, 117, 43432);
  if ((Voice & 0x80000000) != 0) {
    goto LABEL_14;
  }
  *(void *)(v14 + 16) = v21;
  uint64_t Voice = select_bet5_loc_CreateAddonListParamName(v14);
  if ((Voice & 0x80000000) != 0) {
    goto LABEL_14;
  }
  uint64_t Voice = paramc_ParamSetStr(*(void *)(*(void *)(v14 + 8) + 40), *(void *)(v14 + 40), &byte_20D5A22AE);
  if ((Voice & 0x80000000) != 0) {
    goto LABEL_14;
  }
  uint64_t v16 = *(void *)(*(void *)(v14 + 8) + 40);
  uint64_t v17 = *(unsigned char **)(v14 + 40);
  v20[0] = v14;
  v20[1] = select_bet5_loc_CheckParamChange;
  v20[2] = select_bet5_loc_LearnParamChange;
  uint64_t Voice = paramc_ListenerAdd(v16, v17, v20);
  if ((Voice & 0x80000000) != 0
    || (uint64_t Voice = objc_GetObject(*(void *)(v25 + 48), (uint64_t)"LINGDB", &v23), (Voice & 0x80000000) != 0)
    || (*(void *)(v14 + 24) = *(void *)(v23 + 8),
        uint64_t Voice = objc_GetObject(*(void *)(v25 + 48), (uint64_t)"SYNTHSTREAM", &v24),
        (Voice & 0x80000000) != 0))
  {
LABEL_14:
    uint64_t UnicornPipeline = Voice;
LABEL_15:
    select_bet5_ObjClose(*a5, a5[1]);
    *a5 = 0;
    *((_DWORD *)a5 + 2) = 0;
    return UnicornPipeline;
  }
  *(void *)(v14 + 64) = *(void *)(v24 + 8);
  paramc_ParamSetInt(*(void *)(v25 + 40), (uint64_t)"bet2voiceframesize", *(_DWORD *)(*(void *)(*(void *)(v14 + 16) + 12480) + 24));
  *a5 = v14;
  *((_DWORD *)a5 + 2) = 135968;
  if ((select_bet5_RegisterObject(v14, a5[1], v25) & 0x80000000) == 0) {
    *(_DWORD *)(v14 + 1296) = 1;
  }
  uint64_t UnicornPipeline = select_bet5_loc_CreateUnicornPipeline((void *)v14);
  if ((UnicornPipeline & 0x80000000) != 0) {
    goto LABEL_15;
  }
  return UnicornPipeline;
}

uint64_t select_bet5_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 135968, 1304);
  if ((v3 & 0x80000000) != 0) {
    return 2229280776;
  }
  if (!a1) {
    return v3;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = UnicornPipelineClass_Destroy(*(void *)(a1 + 1232), *(void *)(a1 + 1240));
  if (*(void *)(a1 + 24)) {
    objc_ReleaseObject(*(void *)(v4 + 48), (uint64_t)"LINGDB");
  }
  if (*(void *)(a1 + 64)) {
    objc_ReleaseObject(*(void *)(v4 + 48), (uint64_t)"SYNTHSTREAM");
  }
  if (*(_DWORD *)(a1 + 1296) == 1) {
    objc_UnregisterObject(*(void *)(v4 + 48), (uint64_t)"SELECTBET5");
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = select_bet5_loc_CheckParamChange;
  uint64_t v13 = select_bet5_loc_LearnParamChange;
  paramc_ListenerRemove(v6, v7, &v12);
  select_bet5_loc_LearnParamChange(a1, *(char **)(a1 + 40), &byte_20D5A22AE);
  select_bet5_loc_FreeUnicornAddons(*(void **)(a1 + 8), *(void *)(a1 + 1248), *(_DWORD *)(a1 + 56));
  heap_Free(*(void **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    if (!*(void *)a1 || (uint64_t v9 = *(void *)(*(void *)a1 + 48)) == 0) {
      uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 48);
    }
    objc_ReleaseObject(v9, v8);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    heap_Free(*(void **)(v4 + 8), v10);
  }
  *(void *)(a1 + 32) = 0;
  heap_Free(*(void **)(v4 + 8), a1);
  return v5;
}

uint64_t select_bet5_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v18 = 0u;
  if ((safeh_HandleCheck(a1, a2, 135968, 1304) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(v3 + 14536)) {
    strncpy(__dst, (const char *)(v3 + 14536), 0x100uLL);
  }
  uint64_t Voice = select_bet5_loadVoice(*(void *)a1, *(void *)(a1 + 8), __dst, (uint64_t)&v15, 0);
  if ((Voice & 0x80000000) != 0) {
    return Voice;
  }
  if ((safeh_HandleCheck(v15, v16, 117, 43432) & 0x80000000) == 0) {
    *(void *)(a1 + 16) = v15;
  }
  UnicornPipelineClass_Destroy(*(void *)(a1 + 1232), *(void *)(a1 + 1240));
  uint64_t UnicornPipeline = select_bet5_loc_CreateUnicornPipeline((void *)a1);
  if (strcmp(__dst, (const char *)(*(void *)(a1 + 16) + 14536)))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 40);
    uint64_t v7 = *(unsigned char **)(a1 + 40);
    *(void *)&long long v12 = a1;
    *((void *)&v12 + 1) = select_bet5_loc_CheckParamChange;
    uint64_t v13 = select_bet5_loc_LearnParamChange;
    uint64_t v14 = 0;
    paramc_ListenerRemove(v6, v7, &v12);
    if (*(_DWORD *)(a1 + 56))
    {
      select_bet5_loc_LearnParamChange(a1, *(char **)(a1 + 40), &byte_20D5A22AE);
      select_bet5_loc_FreeUnicornAddons(*(void **)(a1 + 8), *(void *)(a1 + 1248), *(_DWORD *)(a1 + 56));
    }
    uint64_t Voice = select_bet5_loc_CreateAddonListParamName(a1);
    if ((Voice & 0x80000000) != 0) {
      return Voice;
    }
    paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), *(void *)(a1 + 40), &v14);
    if (v14) {
      uint64_t v8 = select_bet5_loc_LearnParamChange(a1, *(char **)(a1 + 40), v14);
    }
    else {
      uint64_t v8 = paramc_ParamSetStr(*(void *)(*(void *)(a1 + 8) + 40), *(void *)(a1 + 40), &byte_20D5A22AE);
    }
    uint64_t UnicornPipeline = v8;
    if ((v8 & 0x80000000) == 0)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 40);
      uint64_t v10 = *(unsigned char **)(a1 + 40);
      *(void *)&long long v12 = a1;
      *((void *)&v12 + 1) = select_bet5_loc_CheckParamChange;
      uint64_t v13 = select_bet5_loc_LearnParamChange;
      return paramc_ListenerAdd(v9, v10, &v12);
    }
  }
  return UnicornPipeline;
}

uint64_t select_bet5_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 2229280776;
  if ((safeh_HandleCheck(a1, a2, 135968, 1304) & 0x80000000) == 0)
  {
    synstrmaux_InitStreamOpener(a1 + 376, *(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5");
    uint64_t v8 = heap_Calloc(*(void **)(*(void *)(a1 + 8) + 8), 1, 3656);
    *(void *)(a1 + 32) = v8;
    if (v8)
    {
      uint64_t v13 = 0;
      *(void *)(a1 + 1200) = 0;
      *(_DWORD *)(a1 + 1208) = 0;
      *(void *)(a1 + 1272) = 0;
      *(void *)(a1 + 1288) = 0;
      *(void *)(a1 + 1280) = 0;
      do
      {
        uint64_t v14 = 0;
        while (s_select_Bet5_SynthStreamInfo[v14] != v13)
        {
          v14 += 6;
          if (v14 == 114) {
            goto LABEL_11;
          }
        }
        uint64_t v15 = *(const char **)&s_select_Bet5_SynthStreamInfo[v14 + 2];
        if (!strcmp(v15, "application/x-realspeak-markers-pp;version=4.0"))
        {
          uint64_t v16 = (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 152))();
          synstrmaux_RegisterStream((_WORD *)(a1 + 376), (uint64_t)v15, 0, v16, (unint64_t)(v13 - 3) < 4, a1 + 16 * v13 + 72);
        }
        else
        {
          synstrmaux_RegisterInStream((_WORD *)(a1 + 376), (uint64_t)v15, (unint64_t)(v13 - 3) < 4, a1 + 16 * v13 + 72);
        }
LABEL_11:
        ++v13;
      }
      while (v13 != 7);
      for (uint64_t i = 0; i != 12; ++i)
      {
        uint64_t v18 = 0;
        while (s_select_Bet5_SynthStreamInfo[v18 + 1] != i)
        {
          v18 += 6;
          if (v18 == 114) {
            goto LABEL_20;
          }
        }
        long long v19 = *(const char **)&s_select_Bet5_SynthStreamInfo[v18 + 2];
        if (!strcmp(v19, "application/x-realspeak-markers-pp;version=4.0"))
        {
          uint64_t v20 = (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 152))();
          synstrmaux_RegisterStream((_WORD *)(a1 + 376), (uint64_t)v19, 1, v20, 0, a1 + 16 * i + 184);
        }
        else
        {
          synstrmaux_RegisterOutStream((_WORD *)(a1 + 376), (uint64_t)v19, a1 + 16 * i + 184);
        }
LABEL_20:
        ;
      }
      uint64_t v21 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 376), *(void *)(a1 + 64), a3, a4);
      if ((v21 & 0x80000000) != 0)
      {
        uint64_t v7 = v21;
LABEL_26:
        synstrmaux_CloseStreams((_WORD *)(a1 + 376), *(void *)(a1 + 64));
        return v7;
      }
      uint64_t v7 = UnicornPipelineClass_SetForcedEEEnabled(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), 1);
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_26;
      }
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 31000, 0, v9, v10, v11, v12, v23);
      return 2229280778;
    }
  }
  return v7;
}

uint64_t select_bet5_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  uint64_t v7 = 2229280778;
  uint64_t v143 = 0;
  int v142 = 0;
  int v141 = 0;
  if ((safeh_HandleCheck(a1, a2, 135968, 1304) & 0x80000000) != 0) {
    return 2229280776;
  }
  *a5 = 1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = (*(uint64_t (**)(void, void, char *, uint64_t *))(v9 + 144))(*(void *)(a1 + 88), *(void *)(a1 + 96), (char *)&v145 + 4, &v144);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  *(_DWORD *)(a1 + 1200) |= v144;
  uint64_t v10 = (*(uint64_t (**)(void, void, uint64_t *, char *))(v9 + 144))(*(void *)(a1 + 104), *(void *)(a1 + 112), &v145, (char *)&v143 + 4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  *(_DWORD *)(a1 + 1204) |= HIDWORD(v143);
  uint64_t v11 = (*(uint64_t (**)(void, void, char *, uint64_t *))(v9 + 144))(*(void *)(a1 + 72), *(void *)(a1 + 80), (char *)&v144 + 4, &v143);
  if ((v11 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 1208) |= v143;
    if (!HIDWORD(v145) || !v145 || !HIDWORD(v144))
    {
LABEL_122:
      uint64_t v97 = *(void *)(a1 + 32);
      if (v97 && *(__int16 *)(v97 + 10) <= 1)
      {
        uint64_t Stream = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
        if (Stream) {
          select_bet5_FreeTuningData(*(void **)(a1 + 8), (uint64_t *)(Stream + 1768));
        }
        UnicornPipelineClass_Release(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
        select_bet5_loc_deInitFeatures(a1);
        if (*(_DWORD *)(a1 + 1204) || *(_DWORD *)(a1 + 1200) || *(_DWORD *)(a1 + 1208))
        {
          int v99 = *(_DWORD *)(*(void *)(a1 + 32) + 3520);
          if (v99)
          {
            uint64_t v11 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 64) + 104))(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 1256) + 32 * *(unsigned int *)(a1 + 1268), (32 * v99));
            if ((v11 & 0x80000000) != 0) {
              log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 58008, "%s%s%s%x", v100, v101, v102, v103, "contentType");
            }
          }
          goto LABEL_136;
        }
        goto LABEL_162;
      }
      if (UnicornPipelineClass_isDone(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240)))
      {
        if (*(_DWORD *)(a1 + 1204) || *(_DWORD *)(a1 + 1200) || *(_DWORD *)(a1 + 1208))
        {
LABEL_136:
          synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 376), v9);
          int v104 = 1;
LABEL_137:
          *a5 = v104;
          return v11;
        }
LABEL_162:
        *a5 = 0;
        return v11;
      }
      uint64_t v105 = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
      uint64_t v11 = UnicornPipelineClass_ProcessPhoneme(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), (uint64_t)&v142);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      int PreparedCount = UnicornPipelineClass_GetPreparedCount(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
      int v107 = *(_DWORD *)(a1 + 1280);
      uint64_t v108 = (PreparedCount - v107);
      if (PreparedCount == v107)
      {
        int v117 = 0;
        goto LABEL_153;
      }
      uint64_t v109 = *(void *)(a1 + 16);
      unsigned int v110 = *(_DWORD *)(v109 + 11912);
      unsigned int v111 = *(_DWORD *)(a1 + 1276) + v108;
      unsigned int v112 = *(_DWORD *)(*(void *)(v109 + 12480) + 5924);
      LODWORD(v151[0]) = 0;
      LODWORD(v150) = 0;
      unsigned int v113 = v111 / v110;
      select_bet5_GetEEMode(a1, v151, &v150);
      if (!UnicornPipelineClass_GetForcedEEEnabled(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240))
        || v113 < v112
        || (uint64_t v11 = UnicornPipelineClass_SetForcedEEEnabled(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), 0),
            (v11 & 0x80000000) == 0))
      {
        if (v142) {
          goto LABEL_144;
        }
        uint64_t v140 = v105;
        int v124 = (int)v151[0];
        int v125 = UnicornPipelineClass_GetPreparedCount(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
        if (v124)
        {
          if (v125 >= (int)v110)
          {
            int v127 = *(_DWORD *)(a1 + 1280);
            uint64_t v105 = v140;
            while (1)
            {
              uint64_t v128 = (v125 - v127);
              if (v125 <= v127)
              {
LABEL_181:
                char v126 = 1;
                goto LABEL_182;
              }
              int v129 = (v125 - 1) / (int)v110;
              BOOL v130 = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 32) + v129) == 1 && v129 * v110 + 1 == v125;
              if (v130) {
                break;
              }
              int v131 = v125--;
              if (v131 <= (int)v110) {
                goto LABEL_181;
              }
            }
            char v126 = 0;
            *(_DWORD *)(a1 + 1292) = v110 - 1;
            uint64_t v108 = v128;
LABEL_182:
            BOOL v134 = v113 >= v112 && v108 != 0 || v150 == 0;
            int v117 = 0;
            if ((v126 & 1) == 0 && v134)
            {
              if (!v108)
              {
                int v117 = 0;
                goto LABEL_145;
              }
LABEL_144:
              log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Sent to synth: %d", v114, v115, v116, v108);
              int v117 = 1;
LABEL_145:
              unsigned int v118 = *(_DWORD *)(a1 + 1280) + v108;
              uint64_t v10 = select_bet5_ProcessAndWriteMarkers(a1, v118);
              if ((v10 & 0x80000000) == 0)
              {
                uint64_t v10 = select_bet5_WriteAll(v8, a1 + 184, v9, v105, *(_DWORD *)(a1 + 1280), v118, *(_DWORD *)(a1 + 1288), *(_DWORD *)(a1 + 1292), *(_DWORD *)(a1 + 1284), v142, *(_DWORD *)(a1 + 1208));
                if ((v10 & 0x80000000) == 0)
                {
                  *(int32x2_t *)(a1 + 1276) = vadd_s32(*(int32x2_t *)(a1 + 1276), vdup_n_s32(v108));
                  uint64_t v11 = UnicornPipelineClass_SynthesizeDummy(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), v108);
                  if ((v11 & 0x80000000) != 0) {
                    return v11;
                  }
                  if (LODWORD(v151[0]))
                  {
                    int v119 = *(_DWORD *)(a1 + 1292);
                    *(_DWORD *)(a1 + 1284) += v119 + *(_DWORD *)(a1 + 1288);
                    *(void *)(a1 + 1288) = v110 - v119;
                  }
                  goto LABEL_153;
                }
              }
              return v10;
            }
LABEL_153:
            if (v142)
            {
              uint64_t v121 = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
              if (v121) {
                select_bet5_FreeTuningData(*(void **)(a1 + 8), (uint64_t *)(v121 + 1768));
              }
              if (*(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 12480) + 6800) == 9
                && BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(a1 + 8) + 32)) >= 3)
              {
                if (v121)
                {
                  unsigned int v122 = *(_DWORD *)(*(void *)(a1 + 16) + 11912) * *(__int16 *)(*(void *)(a1 + 32) + 10);
                  if (v122)
                  {
                    *(_DWORD *)(v121 + 1948) /= v122;
                    *(_DWORD *)(v121 + 1952) /= v122;
                    *(_DWORD *)(v121 + 1956) /= v122;
                    *(_DWORD *)(v121 + 1960) /= v122;
                    *(_DWORD *)(v121 + 1964) /= v122;
                    *(_DWORD *)(v121 + 1968) /= v122;
                    *(_DWORD *)(v121 + 1972) /= v122;
                    UNICORN__log_select_Diag(*(void *)(a1 + 8), 3, (uint64_t)"average counts: initCluster:%d searchStage1:%d searchStage2Casc1:%d searchStage2Casc2:%d searchStage2Casc3:%d vitInnerLoop:%d(%d)");
                  }
                }
              }
              UnicornPipelineClass_Release(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
              select_bet5_loc_deInitFeatures(a1);
              BOOL v123 = v142 == 0;
            }
            else
            {
              BOOL v123 = 1;
            }
            if (v117) {
              BOOL v123 = 1;
            }
            if (v123) {
              int v104 = 2;
            }
            else {
              int v104 = 0;
            }
            goto LABEL_137;
          }
          char v126 = 1;
        }
        else
        {
          char v126 = 0;
          uint64_t v108 = v108 + v125 / v110 * v110 - v125;
        }
        uint64_t v105 = v140;
        goto LABEL_182;
      }
      return v11;
    }
    *(_DWORD *)(a1 + 1264) = HIDWORD(v144) >> 5;
    v151[0] = 0;
    LODWORD(v150) = 0;
    uint64_t v12 = (*(uint64_t (**)(void, void, const void **, uint64_t *))(*(void *)(a1 + 64) + 88))(*(void *)(a1 + 72), *(void *)(a1 + 80), v151, &v150);
    uint64_t v17 = *(void *)(a1 + 8);
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v49 = v12;
      log_OutPublic(*(void *)(v17 + 32), (uint64_t)"SELECT_BET5", 21008, "%s%x", v13, v14, v15, v16, "lhError");
      return v49;
    }
    else
    {
      uint64_t v18 = (void *)heap_Calloc(*(void **)(v17 + 8), 1, v150);
      if (v18)
      {
        uint64_t v19 = (uint64_t)v18;
        uint64_t v20 = memcpy(v18, v151[0], v150);
        if (v150 >= 0x20)
        {
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          while (1)
          {
            uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)(a1 + 64) + 152))(v20);
            uint64_t v20 = (void *)(*(uint64_t (**)(char *, void, uint64_t))(v23 + 8))((char *)v151[0] + v21, *(void *)(*(void *)(a1 + 8) + 8), v19 + v21);
            if (!v20) {
              break;
            }
            ++v22;
            v21 += 32;
            if (v22 >= (unint64_t)v150 >> 5) {
              goto LABEL_14;
            }
          }
          heap_Free(*(void **)(*(void *)(a1 + 8) + 8), v19);
          return v7;
        }
LABEL_14:
        uint64_t v24 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 72), *(void *)(a1 + 80));
        if ((v24 & 0x80000000) != 0)
        {
          uint64_t v51 = v24;
          heap_Free(*(void **)(*(void *)(a1 + 8) + 8), v19);
          log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 2571, "%s%x", v52, v53, v54, v55, "lhError");
          return v51;
        }
        else
        {
          *(void *)(a1 + 1256) = v19;
          uint64_t v25 = *(void *)(a1 + 32);
          LODWORD(v150) = 0;
          v151[0] = 0;
          uint64_t v26 = *(void *)(a1 + 64);
          uint64_t v27 = *(void *)(a1 + 8);
          uint64_t v28 = *(void *)(a1 + 16);
          int v29 = *(unsigned __int16 *)(v28 + 42808);
          *(void *)uint64_t v25 = v28 + 14384;
          if ((select_bet5_deserializeFeatures(v27, v26, *(void *)(a1 + 88), *(void *)(a1 + 96), (uint64_t *)v25) & 0x80000000) != 0) {
            goto LABEL_27;
          }
          float v34 = (_WORD *)(v28 + 17962);
          int v35 = *(_DWORD *)(v28 + 17964);
          unsigned __int16 v36 = *(_WORD *)(v25 + 10);
          if (!v35) {
            v36 *= *v34;
          }
          uint64_t v139 = a1 + 72;
          uint64_t DirectStart = select_bet5_ReadDirectStart(v27, a1 + 72, v26, 2u, "application/x-realspeak-nn-ufeats", (uint64_t)v151, (uint64_t)&v150);
          uint64_t v31 = v150;
          if (v150 != 4 * v36 * v29)
          {
LABEL_27:
            uint64_t v7 = 2229280789;
            uint64_t v50 = 71001;
          }
          else
          {
            uint64_t v11 = DirectStart;
            if ((DirectStart & 0x80000000) != 0)
            {
              select_bet5_ReadDirectEnd(v27, v139, v26, 2u, "application/x-realspeak-nn-ufeats", v150);
              return v11;
            }
            if (VectBlock_Create(v27, a1 + 1216, v150, v150 / v36))
            {
              StartPtr_LH_F32 = (void *)VectBlock_Get_StartPtr_LH_F32(a1 + 1216);
              memcpy(StartPtr_LH_F32, v151[0], v150);
              select_bet5_ReadDirectEnd(v27, v139, v26, 2u, "application/x-realspeak-nn-ufeats", v150);
              uint64_t v150 = 0;
              v151[0] = 0;
              uint64_t v148 = 0;
              uint64_t v149 = 0;
              uint64_t v39 = *(void *)(a1 + 8);
              uint64_t v40 = *(void *)(a1 + 16);
              uint64_t v41 = *(void *)(a1 + 64);
              uint64_t v147 = 0;
              int v146 = 0;
              int v141 = 0;
              uint64_t v138 = v41;
              int v42 = select_bet5_ReadDirectStart(v39, v139, v41, 3u, "application/x-realspeak-tapids;version=4.0",
                      (uint64_t)&v146,
                      (uint64_t)&v148 + 4);
              unsigned int v47 = HIDWORD(v148);
              if (v42 < 0 || !HIDWORD(v148))
              {
                int v146 = 0;
              }
              else if (HIDWORD(v148) != 4 {
                                       * *(unsigned __int16 *)(*(void *)(a1 + 32) + 10)
              }
                                       * (unint64_t)*(unsigned __int16 *)(v40 + 17962))
              {
                log_OutPublic(*(void *)(v39 + 32), (uint64_t)"SELECT_BET5", 71001, 0, v43, v44, v45, v46, v136);
                uint64_t v48 = 0;
                uint64_t v11 = 2229280789;
                goto LABEL_116;
              }
              unsigned int v56 = HIDWORD(v148) >> 2;
              if ((select_bet5_ReadDirectStart(v39, v139, v138, 4u, "application/x-realspeak-usfrozen;version=4.0",
                      (uint64_t)v151,
                      (uint64_t)&v148) & 0x80000000) != 0
                || !v148)
              {
                v151[0] = 0;
              }
              else
              {
                if (v47 >= 4)
                {
                  BOOL v130 = v56 == v148 >> 2;
                  unsigned int v56 = v148 >> 2;
                  uint64_t v57 = a1 + 72;
                  if (!v130) {
                    goto LABEL_57;
                  }
LABEL_44:
                  if ((select_bet5_ReadDirectStart(v39, v57, v138, 6u, "application/x-realspeak-usnoreusebias;version=4.0",
                          (uint64_t)&v150,
                          (uint64_t)&v147 + 4) & 0x80000000) != 0
                    || !HIDWORD(v147))
                  {
                    uint64_t v150 = 0;
                  }
                  else
                  {
                    if (v56)
                    {
                      BOOL v130 = v56 == HIDWORD(v147) / 0x1F8;
                      unsigned int v56 = HIDWORD(v147) / 0x1F8;
                      uint64_t v57 = a1 + 72;
                      if (!v130) {
                        goto LABEL_57;
                      }
LABEL_53:
                      uint64_t v58 = select_bet5_ReadDirectStart(v39, v57, v138, 5u, "application/x-realspeak-usprosodybias;version=4.0",
                              (uint64_t)&v149,
                              (uint64_t)&v147);
                      if ((v58 & 0x80000000) != 0 || !v147)
                      {
                        uint64_t v11 = 0;
                        uint64_t v149 = 0;
                      }
                      else
                      {
                        uint64_t v11 = v58;
                        if (v56)
                        {
                          BOOL v130 = v56 == v147 >> 3;
                          unsigned int v56 = v147 >> 3;
                          uint64_t v57 = a1 + 72;
                          if (!v130)
                          {
LABEL_57:
                            uint64_t v48 = 0;
                            uint64_t v11 = 2229280768;
LABEL_117:
                            select_bet5_ReadDirectEnd(v39, v57, v138, 3u, "application/x-realspeak-tapids;version=4.0",
                              HIDWORD(v148));
                            select_bet5_ReadDirectEnd(v39, v57, v138, 4u, "application/x-realspeak-usfrozen;version=4.0",
                              v148);
                            select_bet5_ReadDirectEnd(v39, v57, v138, 6u, "application/x-realspeak-usnoreusebias;version=4.0",
                              HIDWORD(v147));
                            select_bet5_ReadDirectEnd(v39, v57, v138, 5u, "application/x-realspeak-usprosodybias;version=4.0",
                              v147);
                            if ((v11 & 0x80000000) != 0)
                            {
                              select_bet5_FreeTuningData((void *)v39, (uint64_t *)&v141);
                              return v11;
                            }
                            uint64_t v11 = UnicornPipelineClass_Init(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), *(void *)(a1 + 32), a1 + 1216, v48, *(void *)(a1 + 1248), *(unsigned int *)(a1 + 56));
                            if ((v11 & 0x80000000) != 0) {
                              return v11;
                            }
                            UnicornPipelineClass_SetSIMDCallbacks(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), 1);
                            uint64_t v96 = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
                            if (v96) {
                              *(_DWORD *)(v96 + 1976) = 1;
                            }
                            *(_DWORD *)(a1 + 1268) = 0;
                            *(_OWORD *)(a1 + 1280) = 0u;
                            goto LABEL_122;
                          }
LABEL_61:
                          if (!v56)
                          {
                            if (!v146)
                            {
                              uint64_t v48 = 0;
                              goto LABEL_117;
                            }
                            int v70 = *(unsigned __int16 *)(v40 + 17962) * *(__int16 *)(*(void *)(a1 + 32) + 10);
                            if (v70 >= 1 && *v146 == -1)
                            {
                              unsigned __int16 v135 = 0;
                              do
                                int v71 = ++v135;
                              while (v70 > v135 && v146[v135] == -1);
                            }
                            else
                            {
                              int v71 = 0;
                            }
                            uint64_t v48 = 0;
                            unsigned int v56 = (unsigned __int16)v70;
                            if (!(_WORD)v70 || v70 == v71) {
                              goto LABEL_117;
                            }
                          }
                          uint64_t v59 = (uint64_t *)heap_Calloc(*(void **)(v39 + 8), 1, 32);
                          uint64_t v48 = (uint64_t)v59;
                          int v141 = v59;
                          if (!v59
                            || (*((_DWORD *)v59 + 2) = v56,
                                uint64_t v137 = v56,
                                uint64_t v64 = heap_Calloc(*(void **)(v39 + 8), v56, 48),
                                (*(void *)uint64_t v48 = v64) == 0))
                          {
LABEL_115:
                            log_OutPublic(*(void *)(v39 + 32), (uint64_t)"SELECT_BET5", 19000, 0, v60, v61, v62, v63, v136);
                            uint64_t v11 = 2229280778;
LABEL_116:
                            uint64_t v57 = a1 + 72;
                            goto LABEL_117;
                          }
                          int v65 = 50;
                          *(_DWORD *)(v48 + 20) = 50;
                          int v66 = (int *)(v48 + 20);
                          if ((paramc_ParamGetUInt(*(void *)(v39 + 40), (uint64_t)"uselectweightdurationbias", (unsigned int *)(v48 + 20)) & 0x80000000) == 0)
                          {
                            if (*v66 < 0x65) {
                              goto LABEL_68;
                            }
                            int v65 = 100;
                          }
                          *int v66 = v65;
LABEL_68:
                          int v67 = 50;
                          *(_DWORD *)(v48 + 24) = 50;
                          int v68 = (int *)(v48 + 24);
                          Uuint64_t Int = paramc_ParamGetUInt(*(void *)(v39 + 40), (uint64_t)"uselectweightpitchbias", (unsigned int *)(v48 + 24));
                          if ((UInt & 0x80000000) != 0)
                          {
                            uint64_t v11 = 0;
                          }
                          else
                          {
                            uint64_t v11 = UInt;
                            if (*v68 < 0x65)
                            {
LABEL_81:
                              uint64_t v72 = 0;
                              uint64_t v73 = 4;
                              uint64_t v74 = *(void *)v48;
                              uint64_t v75 = v56;
                              while (1)
                              {
                                uint64_t v76 = v72;
                                *(unsigned char *)(v74 + 48 * v72 + 28) = 0;
                                if (!v150) {
                                  break;
                                }
                                int v77 = *(_DWORD *)(v150 + 504 * v72);
                                if (!v77) {
                                  break;
                                }
                                uint64_t v48 = (uint64_t)v141;
                                int v78 = (_DWORD *)(*v141 + 48 * v72);
                                *int v78 = 1;
                                v78[6] = v77;
                                uint64_t v79 = heap_Calloc(*(void **)(v39 + 8), (v77 + 1), 4);
                                uint64_t v74 = *(void *)v48;
                                *(void *)(*(void *)v48 + 48 * v76 + 8) = v79;
                                if (!v79) {
                                  goto LABEL_115;
                                }
                                uint64_t v81 = v74 + 48 * v76;
                                int v83 = *(_DWORD *)(v81 + 24);
                                uint64_t v82 = (unsigned int *)(v81 + 24);
                                if (v83)
                                {
                                  unint64_t v84 = 0;
                                  uint64_t v85 = v150 + v73;
                                  uint64_t v75 = v137;
                                  do
                                  {
                                    *(_DWORD *)(v79 + 4 * v84) = *(_DWORD *)(v85 + 4 * v84);
                                    ++v84;
                                  }
                                  while (v84 < *v82);
                                }
                                else
                                {
                                  LODWORD(v84) = 0;
                                  uint64_t v75 = v137;
                                }
                                uint64_t v89 = (_DWORD *)(v79 + 4 * v84);
LABEL_101:
                                *uint64_t v89 = -1;
                                uint64_t v90 = v149;
                                if (!v149) {
                                  goto LABEL_113;
                                }
                                uint64_t v91 = v149 + 8 * v76;
                                int v92 = *(unsigned __int8 *)(v91 + 6);
                                int v93 = *(unsigned __int8 *)(v91 + 4);
                                if (!(v92 | v93)) {
                                  goto LABEL_113;
                                }
                                if (v93 == 1)
                                {
                                  float v94 = 100.0;
                                }
                                else
                                {
                                  if (v93 != 2) {
                                    goto LABEL_108;
                                  }
                                  float v94 = -100.0;
                                }
                                *(_DWORD *)(v48 + 16) = 1;
                                LOBYTE(v80) = *(unsigned char *)(v90 + 8 * v76 + 5);
                                float v80 = (float)LODWORD(v80);
                                *(float *)(v74 + 48 * v76 + 20) = v80 / v94;
LABEL_108:
                                if (v92 == 1)
                                {
                                  float v95 = 100.0;
                                  goto LABEL_112;
                                }
                                if (v92 == 2)
                                {
                                  float v95 = -100.0;
LABEL_112:
                                  *(_DWORD *)(v48 + 12) = 1;
                                  LOBYTE(v80) = *(unsigned char *)(v90 + 8 * v76 + 7);
                                  *(float *)(v74 + 48 * v76 + 16) = (float)LODWORD(v80) / v95;
                                }
LABEL_113:
                                uint64_t v72 = v76 + 1;
                                v73 += 504;
                                if (v76 + 1 == v75)
                                {
                                  *(_DWORD *)(v74 + 48 * v76) = 4;
                                  goto LABEL_116;
                                }
                              }
                              int v86 = (_DWORD *)heap_Calloc(*(void **)(v39 + 8), 2, 4);
                              uint64_t v48 = (uint64_t)v141;
                              uint64_t v74 = *v141;
                              *(void *)(*v141 + 48 * v76 + 8) = v86;
                              if (!v86) {
                                goto LABEL_115;
                              }
                              *(_DWORD *)(v74 + 48 * v76 + 24) = 1;
                              if (!v151[0] || *((_DWORD *)v151[0] + v76) == -1)
                              {
                                if (!v146 || v146[v76] == -1)
                                {
                                  *(_DWORD *)(v74 + 48 * v76) = 2;
                                  _DWORD *v86 = 0;
                                  goto LABEL_98;
                                }
                                log_OutText(*(void *)(v39 + 32), (uint64_t)"SELECT_BET5", 5, 0, (uint64_t)"%s: %u", v61, v62, v63, (uint64_t)"Locked unit");
                                uint64_t v74 = *(void *)v48;
                                uint64_t v87 = *(void *)v48 + 48 * v76;
                                *(_DWORD *)uint64_t v87 = 0;
                                int v88 = v146;
                              }
                              else
                              {
                                log_OutText(*(void *)(v39 + 32), (uint64_t)"SELECT_BET5", 5, 0, (uint64_t)"%s: %u", v61, v62, v63, (uint64_t)"Locked unit");
                                uint64_t v74 = *(void *)v48;
                                uint64_t v87 = *(void *)v48 + 48 * v76;
                                *(_DWORD *)uint64_t v87 = 0;
                                int v88 = v151[0];
                              }
                              int v86 = *(_DWORD **)(v87 + 8);
                              _DWORD *v86 = v88[v76];
LABEL_98:
                              uint64_t v89 = v86 + 1;
                              goto LABEL_101;
                            }
                            int v67 = 100;
                          }
                          *int v68 = v67;
                          goto LABEL_81;
                        }
                        unsigned int v56 = v147 >> 3;
                      }
                      uint64_t v57 = a1 + 72;
                      goto LABEL_61;
                    }
                    unsigned int v56 = HIDWORD(v147) / 0x1F8;
                  }
                  uint64_t v57 = a1 + 72;
                  goto LABEL_53;
                }
                unsigned int v56 = v148 >> 2;
              }
              uint64_t v57 = a1 + 72;
              goto LABEL_44;
            }
            uint64_t v50 = 71000;
          }
          log_OutPublic(*(void *)(v27 + 32), (uint64_t)"SELECT_BET5", v50, 0, v30, v31, v32, v33, v136);
        }
      }
    }
    return v7;
  }
  return v11;
}

uint64_t select_bet5_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  if ((safeh_HandleCheck(a1, a2, 135968, 1304) & 0x80000000) != 0) {
    return 2229280776;
  }
  *(void *)(a1 + 1272) = 0;
  *(void *)(a1 + 1200) = 0;
  *(_DWORD *)(a1 + 1208) = 0;
  uint64_t v3 = synstrmaux_CloseStreams((_WORD *)(a1 + 376), *(void *)(a1 + 64));
  if (!UnicornPipelineClass_isDone(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240)))
  {
    uint64_t Stream = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
    if (Stream) {
      uint64_t v5 = *(void *)(Stream + 1768);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v7 = v5;
    UnicornPipelineClass_Release(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
    select_bet5_FreeTuningData(*(void **)(a1 + 8), &v7);
  }
  if (*(void *)(a1 + 32))
  {
    select_bet5_loc_deInitFeatures(a1);
    heap_Free(*(void **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 32));
  }
  *(void *)(a1 + 32) = 0;
  return v3;
}

uint64_t select_bet5_GetAlphabetInformation(uint64_t a1, int a2, char *a3)
{
  uint64_t v5 = safeh_HandleCheck(a1, a2, 135968, 1304);
  if ((v5 & 0x80000000) != 0) {
    return 2229280776;
  }
  if (!*(void *)(a1 + 16)) {
    return 2229280785;
  }
  uint64_t v6 = v5;
  bzero(a3, 0x985uLL);
  uint64_t v7 = 0;
  int v8 = 0;
  do
  {
    if (*(unsigned __int8 *)(*(void *)(a1 + 16) + v7 + 16528) != 255)
    {
      uint64_t v9 = &a3[(unsigned __int16)v8];
      *uint64_t v9 = v7;
      v9[514] = *(unsigned char *)(*(void *)(a1 + 16) + *(unsigned __int8 *)(*(void *)(a1 + 16) + v7 + 16528) + 15500);
      v9[257] = *(unsigned char *)(*(void *)(a1 + 16) + *(unsigned __int8 *)(*(void *)(a1 + 16) + v7 + 16528) + 15243);
      v9[771] = *(unsigned char *)(*(void *)(a1 + 16) + *(unsigned __int8 *)(*(void *)(a1 + 16) + v7 + 16528) + 15757);
      v9[1028] = *(unsigned char *)(*(void *)(a1 + 16) + *(unsigned __int8 *)(*(void *)(a1 + 16) + v7 + 16528) + 16014);
      ++v8;
    }
    ++v7;
  }
  while (v7 != 256);
  __strcpy_chk();
  uint64_t v10 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v10 + 17504) == 1)
  {
    for (uint64_t i = 0; i != 5; ++i)
    {
      int v12 = a12345[i];
      if (!strchr(a3 + 1285, v12) && !strchr(a3, v12)) {
        __strncat_chk();
      }
    }
    uint64_t v10 = *(void *)(a1 + 16);
  }
  uint64_t v13 = *(const char ***)(v10 + 16848);
  if (v13)
  {
    uint64_t v14 = *v13;
    if (*v13)
    {
      int v15 = 0;
      uint64_t v16 = a3 + 1413;
      do
      {
        uint64_t v17 = strcat(v16, v14);
        *(_WORD *)&v16[strlen(v17)] = 32;
        uint64_t v14 = *(const char **)(*(void *)(*(void *)(a1 + 16) + 16848) + 8 * (unsigned __int16)++v15);
      }
      while (v14);
    }
  }
  return v6;
}

uint64_t select_bet5_QueryCapability(uint64_t a1, int a2, const char *a3, _DWORD *a4)
{
  uint64_t v7 = 2229280768;
  uint64_t v8 = safeh_HandleCheck(a1, a2, 135968, 1304);
  if ((v8 & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return 2229280785;
  }
  uint64_t v10 = v8;
  if (!strcmp(a3, "PRM") || !strcmp(a3, "BND"))
  {
    *a4 = 1;
    return v10;
  }
  if (!strcmp(a3, "max-PRM"))
  {
    LOBYTE(v11) = 3;
    goto LABEL_12;
  }
  if (!strcmp(a3, "units-per-phoneme"))
  {
    int v11 = *(_DWORD *)(v9 + 11912);
LABEL_12:
    *(unsigned char *)a4 = v11;
    return v10;
  }
  return v7;
}

uint64_t select_bet5_loc_CreateAddonListParamName(uint64_t a1)
{
  __s = 0;
  uint64_t v13 = 0;
  __s2 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"voice", &v13);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"voiceoperatingpoint", &__s);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v3 = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"vopversion", &__s2);
  if ((v3 & 0x80000000) == 0)
  {
    unsigned int v4 = strlen(__s);
    if (__s2) {
      uint64_t v5 = strlen(__s2);
    }
    else {
      uint64_t v5 = 0;
    }
    unsigned int v7 = strlen(v13);
    uint64_t v8 = (char *)heap_Realloc(*(uint64_t **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 40), v5 + v4 + v7 + 16);
    *(void *)(a1 + 40) = v8;
    if (v8)
    {
      strcpy(v8, "voiceaddons.");
      uint64_t v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        do
        {
          *(unsigned char *)(*(void *)(a1 + 40) + v10 + 12) = __tolower(v13[v10]);
          ++v10;
        }
        while (v9 != v10);
      }
      *(unsigned char *)(v9 + *(void *)(a1 + 40) + 12) = 0;
      *(_WORD *)(*(void *)(a1 + 40) + strlen(*(const char **)(a1 + 40))) = 46;
      strcat(*(char **)(a1 + 40), __s);
      if (__s2)
      {
        *(_WORD *)(*(void *)(a1 + 40) + strlen(*(const char **)(a1 + 40))) = 46;
        strcat(*(char **)(a1 + 40), __s2);
      }
    }
    else
    {
      return 2229280778;
    }
  }
  return v3;
}

uint64_t select_bet5_loc_CheckParamChange()
{
  return 0;
}

uint64_t select_bet5_loc_LearnParamChange(uint64_t a1, char *__s1, const char *a3)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  if (strcmp(__s1, *(const char **)(a1 + 40))) {
    return 0;
  }
  v46[0] = 0;
  v46[1] = 0;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  *(_OWORD *)__s = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v48 = 0u;
  memset(v47, 0, sizeof(v47));
  unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 16) + 11804);
  if (*(_DWORD *)(a1 + 56))
  {
    unint64_t v7 = 0;
    do
    {
      if (!*(void *)a1 || (uint64_t v8 = *(void *)(*(void *)a1 + 48)) == 0) {
        uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 48);
      }
      objc_ReleaseObject(v8, *(void *)(*(void *)(a1 + 48) + 8 * v7++));
      unint64_t v9 = *(unsigned int *)(a1 + 56);
    }
    while (v7 < v9);
  }
  else
  {
    LODWORD(v9) = 0;
  }
  select_bet5_loc_FreeUnicornAddons(*(void **)(a1 + 8), *(void *)(a1 + 1248), v9);
  *(_DWORD *)(a1 + 56) = 0;
  if (!a3 || !*a3)
  {
    heap_Free(*(void **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 48));
    uint64_t v5 = 0;
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    return v5;
  }
  size_t v45 = 0;
  if (betX_GetVAOName(a3, &v45, __s, 0x100uLL))
  {
    uint64_t v5 = 2229280778;
    uint64_t v10 = "voiceaddon";
    uint64_t v44 = a3;
    do
    {
      uint64_t Voice = paramc_ParamSetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)v10, __s);
      if ((Voice & 0x80000000) != 0) {
        return Voice;
      }
      uint64_t Voice = select_bet5_loadVoice(*(void *)a1, *(void *)(a1 + 8), 0, (uint64_t)v46, 1);
      if ((Voice & 0x80000000) != 0) {
        return Voice;
      }
      uint64_t v12 = v46[0];
      uint64_t v13 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 48), 8 * (*(_DWORD *)(a1 + 56) + 1));
      *(void *)(a1 + 48) = v13;
      if (!v13) {
        return v5;
      }
      uint64_t v17 = *(unsigned int *)(a1 + 56);
      *(void *)(v13 + 8 * v17) = v12;
      uint64_t v18 = *(void *)(a1 + 16);
      if (!v18) {
        return 2229280774;
      }
      int v19 = *(_DWORD *)(v18 + 11912);
      uint64_t v20 = *(void *)(v18 + 12480);
      int v21 = *(_DWORD *)(v20 + 24);
      uint64_t v22 = *(void *)(v12 + 12480);
      int v23 = *(_DWORD *)(v22 + 24);
      int v24 = *(_DWORD *)(v20 + 11520);
      int v25 = *(_DWORD *)(v22 + 11520);
      if (v19 != *(_DWORD *)(v12 + 11912) || v21 != v23 || v24 != v25)
      {
        log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 1, 0, (uint64_t)"Unable to load VAO data %s: expected #states=%d frame_size=%d psola_mode=%d found #states=%d frame_size=%d psola_mode=%d", v14, v15, v16, v12);
        return 2229280793;
      }
      *(_DWORD *)(a1 + 56) = v17 + 1;
      strcpy((char *)v47, "voiceaddonoffset.");
      if (__s[0])
      {
        unsigned int v26 = v6;
        uint64_t v27 = v10;
        uint64_t v28 = 0;
        unsigned int v29 = 1;
        do
        {
          *((unsigned char *)&v47[1] + v28 + 1) = __tolower(__s[v28]);
          uint64_t v28 = v29;
        }
        while (strlen(__s) > v29++);
        int v19 = *(_DWORD *)(v12 + 11912);
        uint64_t v10 = v27;
        unsigned int v6 = v26;
        a3 = v44;
      }
      unsigned int v31 = v6 + v19 - 1;
      uint64_t Voice = paramc_ParamSetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)v47, v31);
      if ((Voice & 0x80000000) != 0) {
        return Voice;
      }
      unsigned int v6 = *(_DWORD *)(v12 + 11804) + v31;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      memset(v47, 0, sizeof(v47));
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      *(_OWORD *)__s = 0u;
    }
    while (betX_GetVAOName(a3, &v45, __s, 0x100uLL));
  }
  uint64_t v32 = *(unsigned int *)(a1 + 56);
  if (v32)
  {
    uint64_t v33 = *(void *)(a1 + 8);
    uint64_t v34 = *(void *)(a1 + 16);
    int v35 = *(uint64_t **)(a1 + 48);
    int v36 = *(_DWORD *)(v34 + 11804);
    uint64_t v37 = heap_Calloc(*(void **)(v33 + 8), *(unsigned int *)(a1 + 56), 48);
    if (!v37) {
      return 2229280778;
    }
    uint64_t v38 = v37;
    uint64_t v39 = 0;
    uint64_t v40 = v34 + 11912;
    while (1)
    {
      int v41 = v36 + *(_DWORD *)(*v35 + 11912) - 1;
      uint64_t Voice = UnicornAddon_Init(v33, v40, *v35 + 11912, v41, v38 + v39);
      if ((Voice & 0x80000000) != 0) {
        return Voice;
      }
      uint64_t v42 = *v35++;
      int v36 = *(_DWORD *)(v42 + 11804) + v41;
      v39 += 48;
      if (48 * v32 == v39) {
        goto LABEL_38;
      }
    }
  }
  uint64_t v38 = 0;
LABEL_38:
  uint64_t v5 = 0;
  *(void *)(a1 + 1248) = v38;
  return v5;
}

uint64_t select_bet5_RegisterObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *((void *)&v4 + 1) = &ISelect_Bet5;
  *(void *)&long long v4 = 1;
  uint64_t v5 = a1;
  uint64_t v6 = a2;
  uint64_t v7 = 0;
  return objc_RegisterObject(*(void *)(a3 + 48), (uint64_t)"SELECTBET5", &v4);
}

uint64_t select_bet5_loc_CreateUnicornPipeline(void *a1)
{
  uint64_t v10 = 0;
  uint64_t v2 = a1[1];
  paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet5multithreadenabled", &v10);
  if (v10 && *v10 && memchr("nNfF0", (char)*v10, 6uLL))
  {
    uint64_t v3 = UnicornPipelineFactory_Create(0, v2, a1[2] + 11912, *(void *)(a1[2] + 12480));
    a1[154] = v3;
    a1[155] = v4;
  }
  else
  {
    uint64_t v3 = UnicornPipelineFactory_Create(*(void *)(v2 + 400) != 0, v2, a1[2] + 11912, *(void *)(a1[2] + 12480));
    a1[154] = v3;
    a1[155] = v4;
    if (!*(void *)(v2 + 400))
    {
      log_OutText(*(void *)(a1[1] + 32), (uint64_t)"SELECT_BET5", 1, 0, (uint64_t)"Impossible to use MultiThread implementation because no external service was found to support this. Fallback to standard implementation.", v5, v6, v7, v9);
      uint64_t v3 = (void *)a1[154];
      uint64_t v4 = a1[155];
    }
  }
  return safeh_HandleCheck((uint64_t)v3, v4, 135969, 0);
}

void *select_bet5_loc_FreeUnicornAddons(void *result, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 48 * a3;
    do
    {
      UnicornAddon_Deinit(v4, a2 + v5);
      v5 += 48;
    }
    while (v6 != v5);
    uint64_t v7 = (void *)v4[1];
    return heap_Free(v7, a2);
  }
  return result;
}

void *select_bet5_FreeTuningData(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (v3)
    {
      uint64_t v4 = result;
      uint64_t v5 = *(void *)v3;
      if (*(void *)v3)
      {
        if (*(_DWORD *)(v3 + 8))
        {
          unint64_t v6 = 0;
          uint64_t v7 = 8;
          do
          {
            if (*(void *)(*(void *)v3 + v7))
            {
              heap_Free((void *)v4[1], *(void *)(*(void *)v3 + v7));
              uint64_t v3 = *a2;
            }
            ++v6;
            v7 += 48;
          }
          while (v6 < *(unsigned int *)(v3 + 8));
          uint64_t v5 = *(void *)v3;
        }
        heap_Free((void *)v4[1], v5);
        uint64_t v3 = *a2;
      }
      uint64_t result = heap_Free((void *)v4[1], v3);
      *a2 = 0;
    }
  }
  return result;
}

void *select_bet5_loc_deInitFeatures(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  VectBlock_Destroy(v2, (uint64_t *)(a1 + 1216));
  uint64_t result = select_bet5_deserializeFeatures_Free(v2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 1256);
  if (v4)
  {
    if (*(_DWORD *)(a1 + 1264))
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)(a1 + 64) + 152))(result);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void))(v7 + 16))(*(void *)(a1 + 1256) + v5, v2[1]);
        ++v6;
        v5 += 32;
      }
      while (v6 < *(unsigned int *)(a1 + 1264));
      uint64_t v4 = *(void *)(a1 + 1256);
    }
    uint64_t result = heap_Free((void *)v2[1], v4);
    *(void *)(a1 + 1256) = 0;
  }
  return result;
}

uint64_t select_bet5_GetEEMode(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6 = 0;
  *a2 = 1;
  *a3 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"bet5earlyemissionallowed", &v6);
  if ((result & 0x80000000) == 0 && v6 && *v6)
  {
    uint64_t result = (uint64_t)memchr("yYtT1", (char)*v6, 6uLL);
    if (result)
    {
      *a3 = 1;
      *a2 = 0;
    }
  }
  return result;
}

uint64_t select_bet5_ProcessAndWriteMarkers(uint64_t a1, unsigned int a2)
{
  if (!*(void *)(a1 + 1256) || *(_DWORD *)(a1 + 1268) >= *(_DWORD *)(a1 + 1264)) {
    return 0;
  }
  uint64_t Stream = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
  uint64_t v8 = Stream;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 16) + 11912);
  unsigned int v10 = a2 / v9;
  uint64_t v11 = *(void *)(a1 + 1256);
  uint64_t v12 = *(unsigned int *)(a1 + 1268);
  uint64_t v13 = (int *)(v11 + 32 * v12);
  unsigned int v14 = *(_DWORD *)(Stream + 400);
  if (v14 < a2 / v9)
  {
    int v15 = 0;
    int v16 = 0;
    unsigned int v17 = *(_DWORD *)(a1 + 1264);
    BOOL v18 = v17 >= v12;
    int v19 = v17 - v12;
    if (!v18) {
      int v19 = 0;
    }
    int v20 = *(_DWORD *)(Stream + 400);
    int v21 = (_DWORD *)(v11 + 32 * v12);
    do
    {
      if (v16 == v19) {
        break;
      }
      v21[4] = 0;
      if (*v21 == 33)
      {
        int v22 = 0;
        unsigned int v23 = v20 * v9;
        uint64_t v24 = v9;
        do
        {
          uint64_t v5 = *(unsigned int *)(*(void *)(v8 + 1800) + 40 * v23 + 8);
          v22 += v5;
          ++v23;
          --v24;
        }
        while (v24);
        v21[4] = v22;
        ++v15;
      }
      v21 += 8;
      ++v16;
      int v20 = v14 + v15;
    }
    while (v14 + v15 < v10);
  }
  if (*(_DWORD *)(a1 + 1288))
  {
    int v25 = *(_DWORD *)(a1 + 1280);
    if (v25)
    {
      unsigned int v26 = *(_DWORD *)(a1 + 1264);
      unsigned int v27 = v12;
      if (v12 < v26)
      {
        while (1)
        {
          int v28 = *v13;
          v13 += 8;
          if (v28 == 33) {
            break;
          }
          if (v26 == ++v27)
          {
            unsigned int v27 = *(_DWORD *)(a1 + 1264);
            break;
          }
        }
      }
      if (v27 == v26) {
        uint64_t v29 = v12;
      }
      else {
        uint64_t v29 = v27;
      }
      uint64_t v30 = v11 + 32 * v29;
      unsigned int v32 = *(_DWORD *)(v30 + 16);
      unsigned int v31 = (unsigned int *)(v30 + 16);
      unsigned int v33 = *(_DWORD *)(*(void *)(v8 + 1800) + 40 * (v25 - 1) + 8);
      BOOL v18 = v32 >= v33;
      unsigned int v34 = v32 - v33;
      if (v18) {
        *unsigned int v31 = v34;
      }
    }
  }
  if (v14 >= v10)
  {
    uint64_t v35 = 0;
  }
  else
  {
    LODWORD(v35) = 0;
    unsigned int v36 = *(_DWORD *)(a1 + 1264);
    BOOL v18 = v36 >= v12;
    LODWORD(v37) = v36 - v12;
    if (v18) {
      uint64_t v37 = v37;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v38 = (_DWORD *)(v11 + 32 * v12 + 16);
    while (v37 != v35)
    {
      int v39 = *(_DWORD *)(a1 + 1272);
      *(v38 - 1) = v39;
      if (*(v38 - 4) == 33)
      {
        *(_DWORD *)(a1 + 1272) = *v38 + v39;
        *(_DWORD *)(v8 + 400) = ++v14;
      }
      uint64_t v35 = (v35 + 1);
      v38 += 8;
      if (v14 >= v10) {
        goto LABEL_38;
      }
    }
    uint64_t v35 = v37;
  }
LABEL_38:
  log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"About to write %d markers, starting with index %d", v5, v6, v7, v35);
  unint64_t v44 = *(unsigned int *)(a1 + 1268);
  if (v44 < (int)v44 + (int)v35)
  {
    uint64_t v45 = 32 * v44;
    do
    {
      marker_logOutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET5", 3, (uint64_t)"Outputting marker ", *(void *)(a1 + 1256) + v45);
      ++v44;
      v45 += 32;
    }
    while (v44 < (*(_DWORD *)(a1 + 1268) + v35));
    LODWORD(v44) = *(_DWORD *)(a1 + 1268);
  }
  if (v35)
  {
    uint64_t v40 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 64) + 104))(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 1256) + 32 * v44, (32 * v35));
    if ((v40 & 0x80000000) != 0) {
      log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 58008, "%s%s%s%x", v46, v41, v42, v43, "contentType");
    }
  }
  else
  {
    uint64_t v40 = 0;
  }
  *(_DWORD *)(a1 + 1268) += v35;
  if (*(_DWORD *)(a1 + 1292))
  {
    long long v49 = 0u;
    long long v50 = 0u;
    DWORD2(v50) = 35;
    int v47 = *(_DWORD *)(a1 + 1272);
    LODWORD(v49) = 33;
    HIDWORD(v49) = v47;
    LODWORD(v50) = *(_DWORD *)(*(void *)(v8 + 1800) + 40 * (a2 - 1) + 8);
    *(_DWORD *)(a1 + 1272) = v50 + v47;
    log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Outputting             trailSilMrk:tag=%d u32Value=%d posCur=%d lenCur=%d", v41, v42, v43, 33);
    return (*(uint64_t (**)(void, void, long long *, uint64_t))(*(void *)(a1 + 64) + 104))(*(void *)(a1 + 184), *(void *)(a1 + 192), &v49, 32);
  }
  return v40;
}

uint64_t select_bet5_WriteAll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, int a11)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  unint64_t v11 = a6 - a5 + a7 + a8;
  if (!(a6 - a5 + a7 + a8)) {
    return 0;
  }
  for (uint64_t i = 1; i != 12; ++i)
  {
    uint64_t v16 = 0;
    while (s_select_Bet5_SynthStreamInfo[v16 + 1] != i)
    {
      v16 += 6;
      if (v16 == 114)
      {
        LODWORD(v17) = 0;
        goto LABEL_8;
      }
    }
    uint64_t v17 = *(void *)&s_select_Bet5_SynthStreamInfo[v16 + 4];
LABEL_8:
    uint64_t v22 = (*(uint64_t (**)(void, void, char *, void))(a3 + 112))(*(void *)(a2 + 16 * i), *(void *)(a2 + 16 * i + 8), (char *)&v80 + 8 * i, (v11 * v17));
    if ((v22 & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET5", 71003, "%s%s%s%x", v18, v19, v20, v21, "contentType");
      return v22;
    }
  }
  if (a7)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *(void *)(a4 + 1800);
    uint64_t v25 = *((void *)&v80 + 1);
    long long v26 = v81;
    uint64_t v27 = *((void *)&v82 + 1);
    long long v28 = v83;
    long long v30 = v84;
    uint64_t v29 = v85;
    unsigned int v31 = (_DWORD *)(v82 + 4);
    uint64_t v32 = *((void *)&v85 + 1);
    do
    {
      *(v31 - 1) = 0;
      *unsigned int v31 = a9 + a5 + v23;
      if (v24)
      {
        *(_DWORD *)(v25 + 4 * v23) = -1;
        *(_DWORD *)(v26 + 4 * v23) = 0;
        *(_DWORD *)(*((void *)&v26 + 1) + 4 * v23) = 0;
        *(_DWORD *)(v27 + 4 * v23) = 0;
        *(_DWORD *)(v28 + 4 * v23) = 0;
        *(_DWORD *)(*((void *)&v28 + 1) + 4 * v23) = 0;
        *(_DWORD *)(v30 + 4 * v23) = 0;
        *(_DWORD *)(*((void *)&v30 + 1) + 4 * v23) = 0;
        *(_DWORD *)(v29 + 4 * v23) = 0;
        *(_DWORD *)(v32 + 4 * v23) = 0;
      }
      ++v23;
      v31 += 2;
    }
    while (a7 != v23);
  }
  uint64_t v33 = a8;
  unint64_t v34 = v11 - a8;
  if (v34 > a7)
  {
    uint64_t v35 = 0;
    uint64_t v36 = *((void *)&v85 + 1) + 4 * a7;
    uint64_t v37 = v85 + 4 * a7;
    if (a11) {
      int v38 = 3;
    }
    else {
      int v38 = 1;
    }
    uint64_t v39 = *((void *)&v84 + 1) + 4 * a7;
    uint64_t v40 = v84 + 4 * a7;
    uint64_t v41 = *((void *)&v83 + 1) + 4 * a7;
    uint64_t v42 = v83 + 4 * a7;
    uint64_t v43 = *((void *)&v82 + 1) + 4 * a7;
    uint64_t v44 = *((void *)&v81 + 1) + 4 * a7;
    uint64_t v45 = v81 + 4 * a7;
    uint64_t v46 = *(void *)(a4 + 1800);
    unint64_t v47 = ~(unint64_t)a8 + v11 - a7;
    long long v48 = (_DWORD *)(v82 + 8 * a7 + 4);
    uint64_t v49 = *((void *)&v80 + 1) + 4 * a7;
    do
    {
      if (v47 != v35 || a10 == 0) {
        int v51 = 0;
      }
      else {
        int v51 = v38;
      }
      *(v48 - 1) = v51;
      *long long v48 = a9 + a7 + a5 + v35;
      if (v46)
      {
        long long v52 = (_DWORD *)(v46 + 40 * (a5 + v35));
        *(_DWORD *)(v49 + 4 * v35) = *v52;
        *(_DWORD *)(v45 + 4 * v35) = v52[1];
        *(_DWORD *)(v44 + 4 * v35) = v52[2];
        *(_DWORD *)(v43 + 4 * v35) = v52[3];
        *(_DWORD *)(v42 + 4 * v35) = v52[4];
        *(_DWORD *)(v41 + 4 * v35) = v52[5];
        *(_DWORD *)(v40 + 4 * v35) = v52[6];
        *(_DWORD *)(v39 + 4 * v35) = v52[7];
        *(_DWORD *)(v37 + 4 * v35) = v52[8];
        *(_DWORD *)(v36 + 4 * v35) = v52[9];
      }
      ++v35;
      v48 += 2;
    }
    while ((unint64_t)a7 + v35 < v34);
  }
  if (v34 < v11)
  {
    uint64_t v53 = 0;
    uint64_t v54 = 4 * v11 - 4 * v33;
    uint64_t v55 = *((void *)&v85 + 1) + v54;
    uint64_t v56 = v85 + v54;
    uint64_t v57 = *((void *)&v84 + 1) + v54;
    uint64_t v58 = v84 + v54;
    uint64_t v59 = *((void *)&v83 + 1) + v54;
    uint64_t v60 = v83 + v54;
    uint64_t v61 = *((void *)&v82 + 1) + v54;
    uint64_t v62 = *((void *)&v81 + 1) + v54;
    uint64_t v63 = v81 + v54;
    uint64_t v64 = *((void *)&v80 + 1) + v54;
    uint64_t v65 = *(void *)(a4 + 1800);
    long long v66 = (_DWORD *)(v82 - 8 * v33 + 8 * v11 + 4);
    do
    {
      *(v66 - 1) = 0;
      *long long v66 = a9 + a7 + a6 + v53;
      if (v65)
      {
        *(_DWORD *)(v64 + 4 * v53) = -1;
        *(_DWORD *)(v63 + 4 * v53) = 0;
        *(_DWORD *)(v62 + 4 * v53) = 0;
        *(_DWORD *)(v61 + 4 * v53) = 0;
        *(_DWORD *)(v60 + 4 * v53) = 0;
        *(_DWORD *)(v59 + 4 * v53) = 0;
        *(_DWORD *)(v58 + 4 * v53) = 0;
        *(_DWORD *)(v57 + 4 * v53) = 0;
        *(_DWORD *)(v56 + 4 * v53) = 0;
        *(_DWORD *)(v55 + 4 * v53) = 0;
      }
      ++v53;
      v66 += 2;
    }
    while (v33 != v53);
  }
  for (uint64_t j = 1; j != 12; ++j)
  {
    if (*((void *)&v80 + j))
    {
      uint64_t v68 = 0;
      while (s_select_Bet5_SynthStreamInfo[v68 + 1] != j)
      {
        v68 += 6;
        if (v68 == 114)
        {
          LODWORD(v69) = 0;
          goto LABEL_41;
        }
      }
      uint64_t v69 = *(void *)&s_select_Bet5_SynthStreamInfo[v68 + 4];
LABEL_41:
      uint64_t v22 = (*(uint64_t (**)(void, void, void))(a3 + 120))(*(void *)(a2 + 16 * j), *(void *)(a2 + 16 * j + 8), (v11 * v69));
      if ((v22 & 0x80000000) != 0) {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET5", 71003, "%s%s%s%x", v70, v71, v72, v73, "contentType");
      }
    }
  }
  return v22;
}

uint64_t select_bet5_ReadDirectStart(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = 0;
  while (s_select_Bet5_SynthStreamInfo[v13] != a4)
  {
    v13 += 6;
    if (v13 == 114) {
      return 2229280788;
    }
  }
  int v15 = *(const char **)&s_select_Bet5_SynthStreamInfo[v13 + 2];
  uint64_t v16 = (uint64_t *)(a2 + 16 * a4);
  uint64_t NullHandle = safeh_GetNullHandle();
  BOOL v19 = safeh_HandlesEqual(*v16, v16[1], NullHandle, v18);
  if (a4 - 3 <= 3 && v19) {
    return 0;
  }
  if (!strcmp(v15, a5))
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 88))(*v16, v16[1], a6, a7);
    if ((v14 & 0x80000000) == 0) {
      return v14;
    }
  }
  else
  {
    uint64_t v14 = 2229280788;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET5", 71001, "%s%s", v20, v21, v22, v23, "layer");
  return v14;
}

uint64_t select_bet5_ReadDirectEnd(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6)
{
  uint64_t v10 = result;
  uint64_t v11 = 0;
  while (s_select_Bet5_SynthStreamInfo[v11] != a4)
  {
    v11 += 6;
    if (v11 == 114) {
      return result;
    }
  }
  uint64_t v12 = *(const char **)&s_select_Bet5_SynthStreamInfo[v11 + 2];
  uint64_t v13 = (uint64_t *)(a2 + 16 * a4);
  uint64_t NullHandle = safeh_GetNullHandle();
  uint64_t result = safeh_HandlesEqual(*v13, v13[1], NullHandle, v15);
  if (a4 - 3 > 3 || !result)
  {
    if (strcmp(v12, a5)) {
      return log_OutPublic(*(void *)(v10 + 32), (uint64_t)"SELECT_BET5", 71001, "%s%s", v16, v17, v18, v19, "layer");
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 96))(*v13, v13[1], a6);
    if ((result & 0x80000000) != 0) {
      return log_OutPublic(*(void *)(v10 + 32), (uint64_t)"SELECT_BET5", 71001, "%s%s", v16, v17, v18, v19, "layer");
    }
  }
  return result;
}

uint64_t PredictPipeline_ProcessStart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 1072);
  uint64_t v4 = (void *)*(unsigned int *)(a1 + 392);
  v8[1] = a2;
  v8[2] = a3;
  v8[0] = a1;
  uint64_t v5 = *(uint64_t (***)(void, void *))(a1 + 1760);
  if (((*v5)(v5, v8) & 0x80000000) != 0)
  {
    uint64_t v7 = "PredictPipeline, Error, self->Open\n";
  }
  else
  {
    if ((v5[1](v5, v4) & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v7 = "PredictPipeline, Error, self->Set\n";
  }
  UNICORN__log_select_Diag(v3, 0, (uint64_t)v7);
  return 2229280778;
}

uint64_t PredictPipeline_Create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[1] = a2;
  v6[2] = a3;
  v6[0] = 0;
  uint64_t v4 = UnicornPredict_Create(a1, (uint64_t)v6);
  if (!v4) {
    UNICORN__log_select_Diag(a1, 0, (uint64_t)"PredictPipeline, Error, UnicornPredict_Create\n");
  }
  return v4;
}

uint64_t PredictPipeline_Process(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 224) + 1072);
  if (((*(uint64_t (**)(void))(a1 + 16))() & 0x80000000) == 0) {
    return 0;
  }
  UNICORN__log_select_Diag(v1, 0, (uint64_t)"PredictPipeline, Error, self->Process\n");
  return 2229280778;
}

uint64_t PredictPipeline_Destroy(uint64_t a1)
{
  return 0;
}

uint64_t PredictPipeline_GetNProcessedPhonemes(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(result + 40))();
  }
  return result;
}

uint64_t Search_NoPrune(void *a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8, signed int a9, int a10)
{
  uint64_t v11 = a1[14];
  uint64_t v10 = a1[15];
  if (*(_DWORD *)(v11 + 5992) == 1)
  {
    uint64_t v14 = a2;
    uint64_t v15 = a3;
    int v16 = *(_DWORD *)(*(void *)(a5 + 8 * a2 + 56) + 4 * a3);
    uint64_t v17 = a1[13];
    uint64_t v18 = v17 + 768;
    uint64_t v36 = (void *)(v17 + 768 + 8 * a2 + 40);
    uint64_t v37 = *(unsigned int *)(*(void *)(*(void *)(v17 + 768 + 8 * a2) + 8 * a3) + 40 * v16);
    uint64_t v38 = v17;
    int v19 = *(_DWORD *)(*(void *)(v17 + 848)
                    + 4 * (*(_DWORD *)(*v36 + 4 * v37) / *(_DWORD *)(*(void *)(v17 + 568) + 5992)));
    IndexPtr_LH_F32 = (float *)VectBlock_Get_IndexPtr_LH_F32(v10 + 1848, a9);
    uint64_t v20 = a8[2] + 32 * a9;
    uint64_t v40 = v14;
    uint64_t v39 = v18;
    uint64_t v21 = *(void *)(*(void *)(v18 + 8 * v14) + 8 * v15);
    int v22 = v16;
    unsigned int v23 = *(_DWORD *)(v21 + 40 * v16 + 4);
    int v24 = *(_DWORD *)(v20 + 16);
    if (*(_DWORD *)(v20 + 20) < v23)
    {
      uint64_t result = UNICORN__mfs_CostList_Resize(a8, a9, v23);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned int v23 = *(_DWORD *)(*(void *)(*(void *)(v39 + 8 * v40) + 8 * v15) + 40 * v16 + 4);
    }
    if (v23) {
      BOOL v26 = v24 - a6 >= a7;
    }
    else {
      BOOL v26 = 1;
    }
    if (!v26)
    {
      unint64_t v27 = 0;
      do
      {
        uint64_t v28 = a7;
        unsigned int v29 = *(_DWORD *)(*v36 + 4 * (v37 + v27));
        float v30 = mfs_bnfData_Distance(v38, IndexPtr_LH_F32, v29);
        if (a10)
        {
          uint64_t v31 = a8[9];
          *(_DWORD *)(a8[8] + 4 * ((v29 / *(_DWORD *)(v11 + 5992)) >> 5)) |= 1 << (v29 / *(_DWORD *)(v11 + 5992));
          int v32 = v19 + v27;
          *(float *)(v31 + 4 * (v19 + v27)) = v30;
        }
        else
        {
          int v32 = v19 + v27;
        }
        mfs_CostList_PadWithBnfOffset(a8, a9, v29, v32, v30);
        ++v27;
        a7 = v28;
      }
      while (v27 < *(unsigned int *)(*(void *)(*(void *)(v39 + 8 * v40) + 8 * v15) + 40 * v22 + 4)
           && *(_DWORD *)(a8[2] + 32 * a9 + 16) - a6 < v28);
    }
    return 0;
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(v10 + 1072), 1, (uint64_t)"CONFIG ERROR : Search is not implemented for Phoneme Substate Modeling\n");
    return 2229280768;
  }
}

uint64_t Search_PruneBNF(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8, signed int a9)
{
  uint64_t v10 = a1[14];
  uint64_t v9 = a1[15];
  if (*(_DWORD *)(v10 + 5992) == 1)
  {
    uint64_t v13 = a2;
    uint64_t v14 = (int)a3;
    int v15 = *(_DWORD *)(*(void *)(a5 + 8 * a2 + 56) + 4 * (int)a3);
    uint64_t v16 = a1[13];
    int v45 = *(unsigned __int8 *)(a4 + 1);
    int v44 = *(_DWORD *)(*(void *)(*(void *)(v16 + 768 + 8 * a2) + 8 * (int)a3) + 40 * v15);
    uint64_t IndexPtr_LH_F32 = VectBlock_Get_IndexPtr_LH_F32(v9 + 1848, a9);
    unsigned int v18 = a9;
    uint64_t v41 = (float *)IndexPtr_LH_F32;
    uint64_t v19 = a8[2] + 32 * a9;
    uint64_t v20 = v13;
    uint64_t v46 = v16 + 768;
    int v47 = v15;
    uint64_t v48 = v14;
    unsigned int v21 = *(_DWORD *)(*(void *)(*(void *)(v16 + 768 + 8 * v13) + 8 * v14) + 40 * v15 + 4);
    int v22 = *(_DWORD *)(v19 + 16);
    if (*(_DWORD *)(v19 + 20) >= v21)
    {
      int v23 = a6;
    }
    else
    {
      int v23 = a6;
      uint64_t v24 = UNICORN__mfs_CostList_Resize(a8, a9, v21);
      if ((v24 & 0x80000000) != 0) {
        return v24;
      }
      unsigned int v21 = *(_DWORD *)(*(void *)(*(void *)(v46 + 8 * v20) + 8 * v48) + 40 * v15 + 4);
      unsigned int v18 = a9;
    }
    unsigned int v43 = v18;
    if (v21) {
      BOOL v26 = v22 - v23 >= a7;
    }
    else {
      BOOL v26 = 1;
    }
    if (v26)
    {
      unsigned int v27 = *(_DWORD *)(a8[2] + 32 * a9 + 16);
    }
    else
    {
      unint64_t v29 = 1;
      do
      {
        uint64_t v30 = a7;
        uint64_t v28 = (void *)(v16 + 8 * v20 + 808);
        uint64_t v31 = *(unsigned int *)(*v28 + 4 * (v44 + v29 - 1));
        if (v45 == 1
          || (IsPhonemeDurationOutlier = UNICORN__IsPhonemeDurationOutlier(v16, *(_DWORD *)(*v28 + 4 * (v44 + v29 - 1)), *(float *)(v10 + 6160), a3, *(_DWORD *)(a5 + 24), *(_DWORD *)(a5 + 28)), float v33 = 9999.9, !IsPhonemeDurationOutlier))
        {
          float v33 = mfs_bnfData_Distance(v16, v41, v31);
        }
        float v34 = *(float *)(*(void *)(v16 + 592) + 16 * v31);
        float v35 = *(float *)(v10 + 6192);
        if (v34 < v35) {
          float v33 = v33 * (float)(v34 / v35);
        }
        if (v33 <= 0.5 || (unsigned int v27 = *(_DWORD *)(a8[2] + 32 * a9 + 16), v27 <= 0xC8))
        {
          UNICORN__mfs_CostList_Pad(a8, v43, v31, v33);
          unsigned int v27 = *(_DWORD *)(a8[2] + 32 * a9 + 16);
        }
        BOOL v26 = v29++ >= *(unsigned int *)(*(void *)(*(void *)(v46 + 8 * v20) + 8 * v48) + 40 * v47 + 4);
        a7 = v30;
      }
      while (!v26 && v27 - v23 < v30);
    }
    unsigned int v37 = *(_DWORD *)(v10 + 6144);
    if (v27 <= v37)
    {
      return 0;
    }
    else
    {
      uint64_t v25 = mfs_CostList_Select((uint64_t)a8, v43, 1, v37);
      if ((v25 & 0x80000000) == 0) {
        UNICORN__mfs_CostList_Prune(a8, v43, *(_DWORD *)(v10 + 6144));
      }
    }
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(v9 + 1072), 1, (uint64_t)"CONFIG ERROR : Search is not implemented for Phoneme Substate Modeling\n");
    return 2229280768;
  }
  return v25;
}

uint64_t Search_Diphone_PruneBNF(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, void *a8, signed int a9)
{
  uint64_t v9 = a1[15];
  if (*(_DWORD *)(a1[14] + 5992) != 1)
  {
    uint64_t v42 = 2229280768;
    uint64_t v43 = *(void *)(v9 + 1072);
    int v44 = "CONFIG ERROR : Search is not implemented for Phoneme Substate Modeling\n";
LABEL_29:
    UNICORN__log_select_Diag(v43, 1, (uint64_t)v44);
    return v42;
  }
  uint64_t v12 = a3;
  uint64_t v50 = a1[14];
  int v14 = *(_DWORD *)(*(void *)(a5 + 8 * a2 + 56) + 4 * (int)a3);
  int v51 = *(unsigned __int8 *)(a4 + 1);
  uint64_t v15 = a1[13];
  uint64_t v55 = v15 + 768;
  uint64_t v16 = *(void *)(*(void *)(v15 + 768 + 8 * a2) + 8 * (int)a3);
  int v54 = *(_DWORD *)(v16 + 40 * v14);
  uint64_t v17 = a8[2] + 32 * a9;
  unsigned int v18 = *(_DWORD *)(v16 + 40 * v14 + 4);
  int v20 = *(_DWORD *)(v17 + 16);
  if (*(_DWORD *)(v17 + 20) < v18)
  {
    uint64_t v21 = v12;
    uint64_t v22 = UNICORN__mfs_CostList_Resize(a8, a9, v18);
    uint64_t v12 = v21;
    if ((v22 & 0x80000000) != 0) {
      return v22;
    }
  }
  uint64_t v53 = a8;
  uint64_t v46 = v9;
  uint64_t v47 = v12;
  uint64_t v23 = (int)v12;
  uint64_t IndexPtr_LH_F32 = (float *)VectBlock_Get_IndexPtr_LH_F32(v9 + 1848, a9);
  int v28 = v54;
  uint64_t v52 = a2;
  uint64_t v29 = *(void *)(v55 + 8 * a2);
  unsigned int v30 = a7;
  if (*(_DWORD *)(*(void *)(v29 + 8 * v23) + 40 * v14 + 4)) {
    BOOL v31 = v20 - a6 >= a7;
  }
  else {
    BOOL v31 = 1;
  }
  if (!v31)
  {
    int v32 = (void *)(v15 + 8 * a2 + 808);
    uint64_t v33 = 0xFFFFFFFFLL;
    unint64_t v34 = 1;
    do
    {
      uint64_t v35 = *(unsigned int *)(*v32 + 4 * (v28 + v34 - 1));
      uint64_t v36 = *(void *)(v15 + 592);
      if (*(unsigned __int8 *)(v36 + 16 * v35 + 13) == *(unsigned __int8 *)(a4 + 1)
        && *(unsigned __int8 *)(v36 + 16 * v35 + 14) == *(unsigned __int8 *)(a4 + 2))
      {
        if ((v51 == 1
           || (IsPhonemeDurationOutlier = UNICORN__IsPhonemeDurationOutlier(v15, *(_DWORD *)(*v32 + 4 * (v28 + v34 - 1)), *(float *)(v50 + 6160), v47, *(_DWORD *)(a5 + 24), *(_DWORD *)(a5 + 28)), float v38 = 9999.9, !IsPhonemeDurationOutlier))&& (float v38 = mfs_bnfData_Distance(v15, IndexPtr_LH_F32, v35), v38 <= 0.5)|| *(_DWORD *)(v53[2] + 32 * a9 + 16) <= 0xC8u)
        {
          if (v35 <= v33) {
            UNICORN__mfs_CostList_Add(v38, v15, v53, a9, v35);
          }
          else {
            UNICORN__mfs_CostList_Pad(v53, a9, v35, v38);
          }
        }
        int v20 = *(_DWORD *)(v53[2] + 32 * a9 + 16);
        int v28 = v54;
        uint64_t v29 = *(void *)(v55 + 8 * v52);
        unsigned int v30 = a7;
      }
      else
      {
        uint64_t v35 = v33;
      }
      BOOL v31 = v34++ >= *(unsigned int *)(*(void *)(v29 + 8 * v23) + 40 * v14 + 4);
      BOOL v39 = v31 || v20 - a6 >= v30;
      uint64_t v33 = v35;
    }
    while (!v39);
  }
  unsigned int v40 = *(_DWORD *)(v53[2] + 32 * a9 + 16);
  uint64_t v41 = *(unsigned int *)(v50 + 6144);
  if (v40 <= v41)
  {
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v42 = mfs_CostList_Select((uint64_t)v53, a9, 1, v41);
    if ((v42 & 0x80000000) != 0) {
      return v42;
    }
    UNICORN__mfs_CostList_Prune(v53, a9, *(_DWORD *)(v50 + 6144));
    unsigned int v40 = *(_DWORD *)(v53[2] + 32 * a9 + 16);
  }
  if (!v40)
  {
    UNICORN__log_select_Error(*(void *)(v46 + 1072), 0, (uint64_t)"** ERROR no candidates found for Offline Unit Bulking: state #%d (diphone: A%02d+A%02d)\n", v41, v24, v25, v26, v27);
    return 2229280783;
  }
  if (v40 <= 0x31)
  {
    uint64_t v43 = *(void *)(v46 + 1072);
    int v44 = "** Warning too few candidates (%d) for Offline Unit Bulking: state #%d (diphone: A%02d+A%02d)\n";
    goto LABEL_29;
  }
  return v42;
}

uint64_t mfs_QuantizeLF0Frame(uint64_t a1, float a2)
{
  if (a2 <= 0.0)
  {
    if (*(_DWORD *)(a1 + 5596)) {
      return *(unsigned int *)(a1 + 5600);
    }
    else {
      return 0;
    }
  }
  else
  {
    float v2 = *(float *)(a1 + 6016);
    if (v2 > a2) {
      a2 = *(float *)(a1 + 6016);
    }
    if (a2 > *(float *)(a1 + 6036)) {
      a2 = *(float *)(a1 + 6036);
    }
    return (float)((float)((float)(a2 - v2) * *(float *)(a1 + 6056)) + 0.5);
  }
}

uint64_t mfs_UpdateTargetQuantizedTrajectory_LF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a3 + 104);
  if ((int)v3 < 1) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 568);
  unsigned int v7 = *(_DWORD *)(a2 + 1824);
  uint64_t v8 = *(float **)(a3 + 32);
  uint64_t v9 = 2229280778;
  uint64_t v10 = *(void *)(a2 + 1072);
  *(_DWORD *)(a2 + 1824) = v3 + v7;
  uint64_t v11 = heap_Realloc(*(uint64_t **)(v10 + 8), *(void *)(a2 + 1808), 2 * (v3 + v7));
  *(void *)(a2 + 1808) = v11;
  if (v11)
  {
    uint64_t v12 = heap_Realloc(*(uint64_t **)(v10 + 8), *(void *)(a2 + 1816), 4 * *(unsigned int *)(a2 + 1824));
    *(void *)(a2 + 1816) = v12;
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 1808);
      do
      {
        float v14 = *v8;
        if (*v8 <= 0.0)
        {
          unsigned int v16 = *(_DWORD *)(v6 + 5596);
          if (v16) {
            unsigned int v16 = *(_DWORD *)(v6 + 5600);
          }
        }
        else
        {
          float v15 = *(float *)(v6 + 6016);
          if (v15 > v14) {
            float v14 = *(float *)(v6 + 6016);
          }
          if (v14 > *(float *)(v6 + 6036)) {
            float v14 = *(float *)(v6 + 6036);
          }
          unsigned int v16 = (float)((float)((float)(v14 - v15) * *(float *)(v6 + 6056)) + 0.5);
        }
        *(_WORD *)(v13 + 2 * v7) = v16;
        *(_DWORD *)(v12 + 4 * v7++) = *(_DWORD *)(a3 + 120);
        ++v8;
        --v3;
      }
      while (v3);
      return 0;
    }
  }
  return v9;
}

uint64_t UnicornPredict_Create(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = heap_Calloc(*(void **)(a1 + 8), 1, 312);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if (*(void *)(v6 + 8016))
    {
      if ((ANNFactory_CreateANNLibInstance((void *)(v4 + 56), a1) & 0x80000000) != 0) {
        goto LABEL_12;
      }
    }
    else
    {
      if (!*(void *)(v6 + 9816))
      {
        UNICORN__log_select_Diag(a1, 0, (uint64_t)"%s_Create failed because the model does not contain BET5 ANN data\n");
        goto LABEL_12;
      }
      if ((ANNFactory_CreateFastInferInstance((void *)(v4 + 56), a1) & 0x80000000) != 0)
      {
LABEL_12:
        heap_Free(*(void **)(a1 + 8), v5);
        return 0;
      }
    }
    *(_DWORD *)(v5 + 144) = 20;
    uint64_t v7 = heap_Calloc(*(void **)(a1 + 8), 20, 16);
    *(void *)(v5 + 136) = v7;
    if (!v7)
    {
LABEL_10:
      (*(void (**)(void))(v5 + 128))(*(void *)(v5 + 56));
      goto LABEL_12;
    }
    *(void *)uint64_t v5 = UnicornPredict_Open;
    *(void *)(v5 + 8) = UnicornPredict_Set;
    *(void *)(v5 + 16) = UnicornPredict_Process;
    *(void *)(v5 + 24) = UnicornPredict_Reset;
    *(void *)(v5 + 32) = UnicornPredict_Close;
    *(void *)(v5 + 40) = UnicornPredict_GetNProcessedPhonemes;
    *(void *)(v5 + 48) = a1;
    if (((*(uint64_t (**)(void, void))(v5 + 64))(*(void *)(v5 + 56), *(void *)(*(void *)(a2 + 8) + 1944)) & 0x80000000) != 0)
    {
      UNICORN__log_select_Diag(a1, 0, (uint64_t)"%s_Create, Error, ANNObject Open failed\n");
      goto LABEL_10;
    }
  }
  return v5;
}

uint64_t UnicornPredict_Open(uint64_t a1, uint64_t *a2)
{
  if (!a1) {
    return 2229280778;
  }
  uint64_t v3 = a2[1];
  uint64_t v2 = a2[2];
  uint64_t v4 = *a2;
  *(void *)(a1 + 216) = v2;
  *(void *)(a1 + 224) = v4;
  *(void *)(a1 + 184) = v2;
  *(void *)(a1 + 192) = v3;
  *(void *)(a1 + 168) = v3;
  *(void *)(a1 + 176) = v4;
  int v5 = *(_DWORD *)v3;
  int v6 = *(_DWORD *)(v4 + 392);
  *(_DWORD *)(a1 + 200) = v6;
  *(_DWORD *)(a1 + 204) = v5;
  unsigned int v7 = 1;
  int v8 = *(unsigned __int8 *)(v3 + 1932);
  if (*(_DWORD *)(v2 + 6728)) {
    v8 *= 8;
  }
  *(_DWORD *)(a1 + 160) = v8;
  if (*(_DWORD *)(v2 + 5984)) {
    int v9 = 1;
  }
  else {
    int v9 = v5;
  }
  *(_DWORD *)(a1 + 208) = v6 * v9;
  *(_DWORD *)(a1 + 212) = 1;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 144);
  if (v10)
  {
    uint64_t v11 = *(void **)(a1 + 136);
    *uint64_t v11 = *(void *)(v2 + 10408);
    *(_DWORD *)(a1 + 148) = 1;
    v11[1] = UnicornPredict_CopyOutputToBNFStream;
  }
  else
  {
    unsigned int v7 = 0;
  }
  if (v7 < v10)
  {
    uint64_t v13 = (void *)(*(void *)(a1 + 136) + 16 * v7);
    *uint64_t v13 = *(void *)(v2 + 10416);
    *(_DWORD *)(a1 + 148) = ++v7;
    v13[1] = UnicornPredict_CopyOutputToLF0Stream;
  }
  if (v7 < v10)
  {
    float v14 = (void *)(*(void *)(a1 + 136) + 16 * v7);
    *float v14 = *(void *)(v2 + 10424);
    *(_DWORD *)(a1 + 148) = ++v7;
    v14[1] = UnicornPredict_CopyOutputToDURStream;
  }
  if (v7 < v10)
  {
    float v15 = (void *)(*(void *)(a1 + 136) + 16 * v7);
    *float v15 = *(void *)(v2 + 10432);
    *(_DWORD *)(a1 + 148) = ++v7;
    v15[1] = UnicornPredict_CopyOutputToSDURStream;
  }
  if (v7 < v10)
  {
    unsigned int v16 = (void *)(*(void *)(a1 + 136) + 16 * v7);
    void *v16 = *(void *)(v2 + 10440);
    *(_DWORD *)(a1 + 148) = ++v7;
    v16[1] = UnicornPredict_CopyOutputToVUVStream;
  }
  if (v7 >= v10) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v17 = (void *)(*(void *)(a1 + 136) + 16 * v7);
  *uint64_t v17 = *(void *)(v2 + 10448);
  *(_DWORD *)(a1 + 148) = v7 + 1;
  v17[1] = UnicornPredict_CopyOutputToELF0Stream;
  return v12;
}

uint64_t UnicornPredict_Set(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 200) = a2;
  uint64_t v3 = *(void *)(a1 + 216);
  uint64_t v4 = *(void *)(a1 + 224);
  if (!*(_DWORD *)(v3 + 5984)) {
    a2 *= *(_DWORD *)(a1 + 204);
  }
  *(_DWORD *)(a1 + 208) = a2;
  *(_DWORD *)(v4 + 1944) = *(_DWORD *)(v3 + 6728) != 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  int v5 = (*(uint64_t (**)(void))(a1 + 120))(*(void *)(a1 + 56));
  int v6 = *(_DWORD *)(a1 + 208);
  if (*(_DWORD *)(v4 + 1840) == 4 * (v6 * v5))
  {
    unsigned int v7 = *(_DWORD *)(a1 + 160);
    unsigned int v8 = v7 * v6;
    unsigned int v10 = (uint64_t *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 48);
    *(void *)(a1 + 152) = *(void *)(v4 + 1832);
    if (*(_DWORD *)(*(void *)(a1 + 216) + 6728))
    {
      unsigned int v11 = v8 >> 3;
      v7 >>= 3;
      uint64_t v12 = v4 + 1864;
    }
    else
    {
      uint64_t v12 = v4 + 1864;
      unsigned int v11 = v7 * v6;
    }
    if (VectBlock_Create(v9, v12, v11, v7))
    {
      *(void *)(a1 + 264) = *(void *)(v4 + 1864);
      if (VectBlock_Create(*(void *)(a1 + 48), v4 + 1848, 4 * v8, *(_DWORD *)(a1 + 160)))
      {
        *(void *)(a1 + 280) = *(void *)(v4 + 1848);
        if (VectBlock_Create(*(void *)(a1 + 48), v4 + 1880, 2 * v8 + 32, *(_DWORD *)(a1 + 160)))
        {
          *(void *)(a1 + 272) = *(void *)(v4 + 1880);
          if (VectBlock_Create(*(void *)(a1 + 48), v4 + 1928, 4 * *(_DWORD *)(a1 + 208) + 64, 1))
          {
            *(void *)(a1 + 296) = *(void *)(v4 + 1928);
            uint64_t v14 = *(void *)(a1 + 216);
            if (!*(void *)(v14 + 10448)) {
              goto LABEL_16;
            }
            if (VectBlock_Create(*(void *)(a1 + 48), v4 + 1896, 8 * *(_DWORD *)(v14 + 5992) * *(_DWORD *)(a1 + 208), 1))
            {
              *(void *)(a1 + 288) = *(void *)(v4 + 1896);
              if (VectBlock_Create(*(void *)(a1 + 48), v4 + 1912, 4 * *(_DWORD *)(*(void *)(a1 + 216) + 5992) * *(_DWORD *)(a1 + 208), 1))
              {
                *(void *)(a1 + 304) = *(void *)(v4 + 1912);
LABEL_16:
                uint64_t v15 = *(void *)(a1 + 232);
                if (v15)
                {
                  heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v15);
                  *(void *)(a1 + 232) = 0;
                }
                uint64_t v16 = *(void *)(a1 + 224);
                if (!v16) {
                  return 0;
                }
                uint64_t v17 = *(void *)(v16 + 1768);
                if (!v17) {
                  return 0;
                }
                if (*(_DWORD *)(v17 + 12) != 1) {
                  return 0;
                }
                int v18 = *(_DWORD *)(v17 + 8);
                int v19 = *(_DWORD *)(a1 + 200);
                if (v18 != *(_DWORD *)(a1 + 204) * v19) {
                  return 0;
                }
                uint64_t v20 = heap_Calloc(*(void **)(*(void *)(a1 + 48) + 8), (v19 + 4), 4);
                *(void *)(a1 + 232) = v20;
                if (v20) {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v13 = "%s_Set, Error, Out of memory\n";
    goto LABEL_25;
  }
  unsigned int v10 = (uint64_t *)(a1 + 48);
  uint64_t v13 = "%s_Set, Error, Inputs misaligned\n";
LABEL_25:
  UNICORN__log_select_Diag(*v10, 0, (uint64_t)v13);
  return 2229280778;
}

uint64_t UnicornPredict_Process(uint64_t a1, _DWORD *a2)
{
  if (a2) {
    *a2 = 0;
  }
  int v4 = *(_DWORD *)(a1 + 240);
  int v5 = v4 + 1;
  unsigned int v6 = v4 + 4;
  if (v6 >= *(_DWORD *)(a1 + 200)) {
    unsigned int v7 = *(_DWORD *)(a1 + 200);
  }
  else {
    unsigned int v7 = v6;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 256);
  *(_DWORD *)(a1 + 240) = v5;
  *(_DWORD *)(a1 + 244) = v8;
  *(_DWORD *)(a1 + 248) = v8;
  *(_DWORD *)(a1 + 252) = v8;
  if (v8 >= v7) {
    return 0;
  }
  uint64_t v9 = 0;
  unsigned int v10 = "%s_Process: Expected Output  '%s' not found in ANNObject\n";
  do
  {
    unsigned int v11 = *(_DWORD **)(a1 + 216);
    int v12 = v11[1685];
    unsigned int v13 = *(_DWORD *)(a1 + 200);
    if (v12 < 1) {
      int v12 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(a1 + 248) = v8;
    unsigned int v14 = v11[1686];
    BOOL v15 = v8 >= v14;
    unsigned int v16 = v8 - v14;
    if (v15) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = 0;
    }
    *(_DWORD *)(a1 + 244) = v17;
    unsigned int v18 = v17 + v12;
    *(_DWORD *)(a1 + 252) = v18;
    if (v18 >= v13)
    {
      *(_DWORD *)(a1 + 252) = v13;
      unsigned int v21 = v13;
    }
    else
    {
      unsigned int v19 = v11[1687];
      BOOL v15 = v18 >= v19;
      unsigned int v20 = v18 - v19;
      if (v15) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = 0;
      }
      unsigned int v13 = v18;
    }
    if (v21 > v8) {
      unsigned int v8 = v21;
    }
    *(_DWORD *)(a1 + 256) = v8;
    uint64_t v22 = *(void *)(a1 + 152);
    uint64_t v23 = v13 - v17;
    if (v11[1496])
    {
      unsigned int v24 = (*(uint64_t (**)(void))(a1 + 120))(*(void *)(a1 + 56)) * v17;
      if (!v23) {
        return v9;
      }
    }
    else
    {
      int v25 = *(_DWORD *)(a1 + 204) * v17;
      unsigned int v24 = v25 * (*(uint64_t (**)(void))(a1 + 120))(*(void *)(a1 + 56));
      uint64_t v23 = (*(_DWORD *)(a1 + 204) * v23);
      if (!v23) {
        return v9;
      }
    }
    uint64_t v26 = (*(uint64_t (**)(void, uint64_t, uint64_t))(a1 + 72))(*(void *)(a1 + 56), v22 + 4 * v24, v23);
    if ((v26 & 0x80000000) != 0) {
      goto LABEL_60;
    }
    uint64_t v27 = *(void *)(a1 + 224);
    if (v27)
    {
      int v28 = *(uint64_t **)(v27 + 1768);
      if (v28)
      {
        if (*((_DWORD *)v28 + 3) == 1)
        {
          int v29 = *(_DWORD *)(a1 + 204);
          if (*((_DWORD *)v28 + 2) == v29 * *(_DWORD *)(a1 + 200))
          {
            uint64_t v30 = *(void *)(a1 + 232);
            if (v30)
            {
              uint64_t v31 = *(void *)(a1 + 216);
              int v32 = *(void *)(v31 + 10456) ? *(char **)(v31 + 10456) : "output_pdur";
              unsigned int v33 = *(_DWORD *)(a1 + 244);
              unsigned int v34 = *(_DWORD *)(a1 + 252);
              BOOL v15 = v34 >= v33;
              unsigned int v35 = v34 - v33;
              if (v35 != 0 && v15)
              {
                uint64_t v36 = *v28;
                unsigned int v37 = v33 * v29;
                unsigned int v38 = v35;
                BOOL v39 = *(_DWORD **)(a1 + 232);
                do
                {
                  *v39++ = *(_DWORD *)(v36 + 48 * v37 + 16);
                  v37 += v29;
                  --v38;
                }
                while (v38);
              }
              else
              {
                unsigned int v35 = 0;
              }
              *(_DWORD *)(v30 + 4 * v35) = *(_DWORD *)(v31 + 11576);
              *(_DWORD *)(v30 + 4 * (v35 + 1)) = *(_DWORD *)(v31 + 11580);
              *(_DWORD *)(v30 + 4 * (v35 + 2)) = *(_DWORD *)(v31 + 11568);
              *(_DWORD *)(v30 + 4 * (v35 + 3)) = *(_DWORD *)(v31 + 11572);
              uint64_t v26 = (*(uint64_t (**)(void, char *))(a1 + 112))(*(void *)(a1 + 56), v32);
              if ((v26 & 0x80000000) != 0)
              {
LABEL_60:
                uint64_t v9 = v26;
                uint64_t v46 = *(void *)(a1 + 48);
                uint64_t v47 = "%s_Set, Error, ANNObject Set failed\n";
LABEL_58:
                UNICORN__log_select_Diag(v46, 0, (uint64_t)v47);
                return v9;
              }
            }
          }
        }
      }
    }
    uint64_t v40 = (*(uint64_t (**)(void))(a1 + 80))(*(void *)(a1 + 56));
    if ((v40 & 0x80000000) != 0)
    {
      uint64_t v9 = v40;
      uint64_t v46 = *(void *)(a1 + 48);
      uint64_t v47 = "%s_Process, Error, ANNObject Process\n";
      goto LABEL_58;
    }
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    unint64_t v41 = *(unsigned int *)(a1 + 148);
    if (v41)
    {
      uint64_t v42 = 0;
      unint64_t v43 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v44 = *(void *)(*(void *)(a1 + 136) + v42);
        if (v44)
        {
          uint64_t v45 = (*(uint64_t (**)(void, uint64_t, uint64_t *, char *, uint64_t *))(a1 + 88))(*(void *)(a1 + 56), v44, &v49, (char *)&v50 + 4, &v50);
          if ((v45 & 0x80000000) != 0)
          {
            uint64_t v9 = v45;
LABEL_57:
            uint64_t v46 = *(void *)(a1 + 48);
            uint64_t v47 = v10;
            goto LABEL_58;
          }
          uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)(a1 + 136) + v42 + 8))(a1, v49, HIDWORD(v50), v50);
          if ((v9 & 0x80000000) != 0)
          {
            unsigned int v10 = "%s_Process: Collector  '%s', Error\n";
            goto LABEL_57;
          }
          unint64_t v41 = *(unsigned int *)(a1 + 148);
        }
        ++v43;
        v42 += 16;
        if (v43 >= v41)
        {
          if ((v9 & 0x80000000) == 0) {
            goto LABEL_50;
          }
          return v9;
        }
      }
    }
    uint64_t v9 = 0;
LABEL_50:
    (*(void (**)(void))(a1 + 96))(*(void *)(a1 + 56));
    if (a2) {
      *a2 += *(_DWORD *)(a1 + 256) - *(_DWORD *)(a1 + 248);
    }
    unsigned int v8 = *(_DWORD *)(a1 + 256);
  }
  while (v8 < v7);
  return v9;
}

uint64_t UnicornPredict_Reset(uint64_t a1)
{
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  (*(void (**)(void))(a1 + 96))(*(void *)(a1 + 56));
  return 0;
}

uint64_t UnicornPredict_Close()
{
  return 0;
}

uint64_t UnicornPredict_GetNProcessedPhonemes(uint64_t a1)
{
  return *(unsigned int *)(a1 + 256);
}

void *UnicornPredict_Destroy(uint64_t a1)
{
  (*(void (**)(void))(a1 + 104))(*(void *)(a1 + 56));
  (*(void (**)(void))(a1 + 128))(*(void *)(a1 + 56));
  heap_Free(*(void **)(*(void *)(a1 + 48) + 8), *(void *)(a1 + 136));
  uint64_t v2 = *(void *)(a1 + 232);
  if (v2)
  {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v2);
    *(void *)(a1 + 232) = 0;
  }
  uint64_t v3 = *(void **)(*(void *)(a1 + 48) + 8);
  return heap_Free(v3, a1);
}

uint64_t UnicornPredict_CopyOutputToBNFStream(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = *(_DWORD *)(a1 + 200);
  if ((v5 < a3 || *(_DWORD *)(a1 + 160) != a4) && (*(_DWORD *)(a1 + 204) * v5 < a3 || *(_DWORD *)(a1 + 160) != a4))
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToBNFStream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d, nBNFOrder=%d\n");
    return 2229280775;
  }
  int v8 = *(_DWORD *)(a1 + 248);
  unsigned int v9 = (v8 - *(_DWORD *)(a1 + 244)) * a4;
  uint64_t v10 = *(void *)(a1 + 216);
  int v11 = *(_DWORD *)(v10 + 5984);
  if (!v11)
  {
    int v18 = *(_DWORD *)(a1 + 204);
    uint64_t v12 = a2 + 4 * v18 * v9;
    unsigned int v13 = (*(_DWORD *)(a1 + 256) - v8) * v18;
    unsigned int v14 = (unsigned int *)(a1 + 160);
    int v15 = v8 * a4;
    unsigned int v21 = v8 * a4 * v18;
    uint64_t v16 = *(void *)(a1 + 280) + 4 * v21;
    uint64_t v17 = *(void *)(a1 + 272) + 2 * v21;
    if (*(_DWORD *)(v10 + 6728)) {
      goto LABEL_10;
    }
LABEL_12:
    unsigned int v20 = v18 * v15;
    char v19 = 1;
    goto LABEL_13;
  }
  uint64_t v12 = a2 + 4 * v9;
  unsigned int v13 = *(_DWORD *)(a1 + 256) - v8;
  unsigned int v14 = (unsigned int *)(a1 + 160);
  int v15 = v8 * a4;
  uint64_t v16 = *(void *)(a1 + 280) + 4 * v8 * a4;
  uint64_t v17 = *(void *)(a1 + 272) + 2 * v8 * a4;
  int v18 = 1;
  if (!*(_DWORD *)(v10 + 6728)) {
    goto LABEL_12;
  }
LABEL_10:
  char v19 = 0;
  unsigned int v20 = (a4 >> 3) * v8 * v18;
LABEL_13:
  if (v11) {
    int v22 = 1;
  }
  else {
    int v22 = *(_DWORD *)(a1 + 204);
  }
  uint64_t v23 = *(void *)(a1 + 296) + 4 * (v22 * v8);
  if (v19)
  {
    if (v13)
    {
      uint64_t v24 = 0;
      unsigned int v25 = 0;
      int v26 = 0;
      uint64_t v57 = v13;
      LODWORD(v27) = *(_DWORD *)(a1 + 160);
      uint64_t v56 = *(void *)(a1 + 296) + 4 * (v22 * v8);
      do
      {
        if (v27)
        {
          unint64_t v28 = 0;
          uint64_t v58 = v24;
          float v29 = 0.0;
          do
          {
            float v30 = *(float *)(v12 + 4 * (v26 + v28));
            *(float *)(v16 + 4 * (v25 + v28)) = v30;
            float v29 = v29 + (float)(v30 * v30);
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"ANN-predicted BNF: %d,%d %f\n");
            ++v28;
            unint64_t v27 = *(unsigned int *)(a1 + 160);
          }
          while (v28 < v27);
          if (v27)
          {
            uint64_t v31 = 0;
            float v32 = sqrtf(v29);
            uint64_t v23 = v56;
            uint64_t v24 = v58;
            do
            {
              *(float *)(v16 + 4 * (v25 + v31)) = *(float *)(v16 + 4 * (v25 + v31))
                                                                / v32;
              ++v31;
            }
            while (v27 != v31);
            float v33 = 0.0;
            unint64_t v34 = v27;
            unsigned int v35 = v25;
            do
            {
              float v36 = fabsf(*(float *)(v16 + 4 * v35));
              if (v36 > v33) {
                float v33 = v36;
              }
              ++v35;
              --v34;
            }
            while (v34);
            if (v33 <= 0.0) {
              float v37 = 1.0;
            }
            else {
              float v37 = 1.0 / v33;
            }
            unint64_t v38 = v27;
            unsigned int v39 = v25;
            do
            {
              float v40 = *(float *)(v16 + 4 * v39);
              int v41 = (int)(float)((float)(v37 * 32767.0) * v40);
              *(_WORD *)(v17 + 2 * v39) = v41;
              if ((v41 + 8) <= 0x10)
              {
                BOOL v42 = v40 <= 0.0 || v40 > 8.0;
                if (!v42 || (v40 < 0.0 ? (BOOL v43 = v40 < -8.0) : (BOOL v43 = 1), !v43)) {
                  *(_WORD *)(v17 + 2 * v39) = (int)(float)((float)(v37 * (float)(v40 * 4.0)) * 32767.0);
                }
              }
              ++v39;
              --v38;
            }
            while (v38);
            v26 += v28;
          }
          else
          {
            v26 += v28;
            float v37 = 1.0;
            uint64_t v23 = v56;
            uint64_t v24 = v58;
          }
        }
        else
        {
          float v37 = 1.0;
        }
        float v44 = 1.0 / (v37 * 32767.0);
        *(float *)(v23 + 4 * v24) = v44;
        v25 += v27;
        ++v24;
      }
      while (v24 != v57);
    }
  }
  else if (v13)
  {
    uint64_t v45 = 0;
    uint64_t v46 = *(void *)(a1 + 264) + v20;
    unsigned int v47 = *v14;
    do
    {
      if (v47)
      {
        unsigned int v48 = 0;
        do
        {
          unsigned int v49 = v48 + v45 * v47;
          float v50 = *(float *)(v12 + 4 * v49);
          *(float *)(v16 + 4 * v49) = v50;
          *(_WORD *)(v17 + 2 * v49) = v50 < 0.0;
          int v51 = 1 << (~(_BYTE)v48 & 7);
          unsigned int v52 = (v47 >> 3) * v45 + (v48 >> 3);
          char v53 = *(unsigned char *)(v46 + v52);
          char v54 = v53 | v51;
          char v55 = v53 & ~(_BYTE)v51;
          if (v50 < 0.0) {
            char v55 = v54;
          }
          *(unsigned char *)(v46 + v52) = v55;
          ++v48;
          unsigned int v47 = *v14;
        }
        while (v48 < *v14);
      }
      *(_DWORD *)(v23 + 4 * v45++) = 1065353216;
    }
    while (v45 != v13);
  }
  return 0;
}

uint64_t UnicornPredict_CopyOutputToLF0Stream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v40 = *(void *)(a1 + 176);
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToLF0Stream\n");
  unsigned int v9 = *(_DWORD *)(a1 + 200);
  int v8 = *(_DWORD *)(a1 + 204);
  BOOL v10 = v9 >= a3 && 6 * v8 == a4;
  if (v10 || a4 == 6 && v8 * v9 >= a3)
  {
    unint64_t v11 = *(unsigned int *)(a1 + 248);
    int v12 = *(_DWORD *)(*(void *)(a1 + 216) + 5984);
    if (v12) {
      int v13 = 1;
    }
    else {
      int v13 = *(_DWORD *)(a1 + 204);
    }
    unsigned int v14 = (v11 - *(_DWORD *)(a1 + 244)) * a4 * v13;
    uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 176) + 32);
    if ((int)v15 < 1)
    {
      LODWORD(v16) = 0;
    }
    else
    {
      uint64_t v16 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 184) + 184 + 4 * v16) != 2)
      {
        if (v15 == ++v16)
        {
          LODWORD(v16) = *(_DWORD *)(*(void *)(a1 + 176) + 32);
          break;
        }
      }
    }
    uint64_t v17 = a2 + 4 * v14;
    if (v12)
    {
      if (v11 >= v9) {
        goto LABEL_48;
      }
      unsigned int v18 = 0;
      uint64_t v39 = v16;
      while (1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(v40 + 384) + 312 * v11 + 8 * v39;
        unsigned int v21 = (void *)(v20 + 96);
        int v22 = (void *)(v20 + 136);
        do
        {
          if ((v8 - 1) > 0xFFFFFFFC) {
            goto LABEL_32;
          }
          uint64_t v41 = v19;
          uint64_t v23 = v19 + 1;
          unint64_t v24 = 2;
          do
          {
            int v25 = 0;
            if (v11 < *(unsigned int *)(a1 + 256)) {
              int v25 = *(_DWORD *)(v17 + 4 * v18++);
            }
            *(_DWORD *)(*(void *)(*v21 + 8 * v24) + 4 * v23) = v25;
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d,%d,%d, mean %f -> %f \n");
            ++v24;
            int v8 = *(_DWORD *)(a1 + 204);
          }
          while (v24 < (v8 + 2));
          if ((v8 - 1) > 0xFFFFFFFC)
          {
            uint64_t v19 = v41;
LABEL_32:
            uint64_t v23 = v19 + 1;
            goto LABEL_33;
          }
          unint64_t v26 = 2;
          do
          {
            float v27 = 1.0;
            if (v11 < *(unsigned int *)(a1 + 256)) {
              float v27 = *(float *)(v17 + 4 * v18++);
            }
            *(float *)(*(void *)(*v22 + 8 * v26) + 4 * v23) = v27;
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d,%d,%d, var  %f -> %f \n");
            ++v26;
            int v8 = *(_DWORD *)(a1 + 204);
          }
          while (v26 < (v8 + 2));
LABEL_33:
          uint64_t v19 = v23;
        }
        while (v23 != 3);
        if (++v11 >= *(unsigned int *)(a1 + 200)) {
          goto LABEL_48;
        }
      }
    }
    if (v11 < v9)
    {
      unsigned int v28 = 0;
      uint64_t v42 = v16;
      do
      {
        if ((v8 - 1) <= 0xFFFFFFFC)
        {
          uint64_t v29 = *(void *)(v40 + 384) + 312 * v11 + 8 * v42;
          float v30 = (void *)(v29 + 96);
          uint64_t v31 = (void *)(v29 + 136);
          unint64_t v32 = 2;
          do
          {
            for (uint64_t i = 1; i != 4; ++i)
            {
              if (v11 >= *(unsigned int *)(a1 + 256))
              {
                float v36 = 1.0;
                int v35 = 0;
              }
              else
              {
                unsigned int v34 = v28 + 1;
                int v35 = *(_DWORD *)(v17 + 4 * v28);
                v28 += 2;
                float v36 = *(float *)(v17 + 4 * v34);
              }
              UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d,%d,%d, mean %f -> %f \n");
              UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d,%d,%d, var  %f -> %f \n");
              *(_DWORD *)(*(void *)(*v30 + 8 * v32) + 4 * i) = v35;
              *(float *)(*(void *)(*v31 + 8 * v32) + 4 * i) = v36;
            }
            ++v32;
            int v8 = *(_DWORD *)(a1 + 204);
          }
          while (v32 < (v8 + 2));
          unsigned int v9 = *(_DWORD *)(a1 + 200);
        }
        ++v11;
      }
      while (v11 < v9);
    }
LABEL_48:
    uint64_t v37 = 0;
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToLF0Stream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d\n");
    uint64_t v37 = 2229280775;
  }
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToLF0Stream\n");
  return v37;
}

uint64_t UnicornPredict_CopyOutputToDURStream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 176);
  int v36 = 0;
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToDurStream_Phoneme\n");
  unsigned int v9 = *(_DWORD *)(a1 + 200);
  if (a4 == 1 && v9 >= a3 || a4 == 1 && *(_DWORD *)(a1 + 204) * v9 >= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 248);
    uint64_t v11 = (v10 - *(_DWORD *)(a1 + 244));
    unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 216) + 5984);
    if (v12)
    {
      int v13 = (unsigned int *)(a1 + 256);
    }
    else
    {
      uint64_t v15 = *(unsigned int *)(a1 + 204);
      uint64_t v11 = (v15 * v11);
      uint64_t v16 = a2 + 4 * v11;
      int v13 = (unsigned int *)(a1 + 256);
      unsigned int v17 = (*(_DWORD *)(a1 + 256) - v10) * v15;
      LODWORD(v18) = v17 / v15;
      if (v17 / v15 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v18;
      }
      do
      {
        if (v15 <= v17)
        {
          uint64_t v19 = 0;
          unsigned int v20 = v12;
          do
          {
            float v21 = 0.0;
            unsigned int v22 = v20;
            uint64_t v23 = v15;
            do
            {
              float v21 = v21 + *(float *)(v16 + 4 * v22++);
              --v23;
            }
            while (v23);
            *(float *)(v16 + 4 * (v12 + v19++)) = v21 / (float)v15;
            v20 += v15;
          }
          while (v19 != v18);
        }
        ++v12;
      }
      while (v12 != 1);
    }
    *(_DWORD *)(v8 + 408) = 0;
    if (v10)
    {
      int v24 = 0;
      int v25 = (_DWORD *)(*(void *)(v8 + 384) + 24);
      unint64_t v26 = v10;
      do
      {
        v24 += *v25;
        v25 += 78;
        --v26;
      }
      while (v26);
      *(_DWORD *)(v8 + 408) = v24;
    }
    if (v10 >= v9)
    {
      uint64_t v14 = 0;
    }
    else
    {
      unsigned int v27 = 0;
      uint64_t v35 = a2 + 4 * v11;
      uint64_t v28 = 312 * v10;
      do
      {
        if (v10 >= *v13) {
          float v29 = (float)*(unsigned int *)(a1 + 204) * 0.08;
        }
        else {
          float v29 = *(float *)(v35 + 4 * v27++);
        }
        uint64_t v30 = *(void *)(v8 + 384);
        if (v29 >= 0.0) {
          float v31 = v29 * 1000.0;
        }
        else {
          float v31 = 0.0;
        }
        float v32 = v31 / (float)*(int *)(*(void *)(a1 + 184) + 24);
        *(float *)(v30 + v28 + 32) = v31;
        UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d duration scale (%f)\n");
        int v33 = *(_DWORD *)(a1 + 212);
        if (v33 == 2)
        {
          UNICORN__UniformStateDuration(v32, *(void *)(a1 + 48), v30 + v28, *(int **)(a1 + 168));
        }
        else if (v33 == 1)
        {
          UNICORN__MaxLLStateDuration(*(void *)(a1 + 48), v30 + v28, *(unsigned int **)(a1 + 168), (float *)&v36, v32);
        }
        else
        {
          UNICORN__StateDuration(v32, *(void *)(a1 + 48), v30 + v28, *(int **)(a1 + 168));
        }
        *(_DWORD *)(v8 + 408) += *(_DWORD *)(v30 + v28 + 24);
        ++v10;
        v28 += 312;
      }
      while (v10 < *(unsigned int *)(a1 + 200));
      uint64_t v14 = 0;
    }
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToDURStream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d\n");
    uint64_t v14 = 2229280775;
  }
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"-%s_CopyOutputToDurStream_Phoneme\n");
  return v14;
}

uint64_t UnicornPredict_CopyOutputToSDURStream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 176);
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToDurStream\n");
  *(_DWORD *)(v8 + 408) = 0;
  unsigned int v9 = *(_DWORD *)(a1 + 200);
  int v10 = *(_DWORD *)(a1 + 204);
  BOOL v11 = v9 >= a3 && v10 == a4;
  int v12 = a4;
  if (v11 || a4 == 1 && (int v12 = *(_DWORD *)(a1 + 204), v10 * v9 >= a3))
  {
    int v13 = *(_DWORD *)(a1 + 244);
    unint64_t v14 = *(unsigned int *)(a1 + 248);
    if (*(_DWORD *)(*(void *)(a1 + 216) + 5984)) {
      int v12 = 1;
    }
    if (v14)
    {
      int v15 = 0;
      uint64_t v16 = (_DWORD *)(*(void *)(v8 + 384) + 24);
      uint64_t v17 = *(unsigned int *)(a1 + 248);
      do
      {
        v15 += *v16;
        v16 += 78;
        --v17;
      }
      while (v17);
      *(_DWORD *)(v8 + 408) = v15;
    }
    if (v14 >= v9)
    {
      uint64_t v39 = 0;
    }
    else
    {
      unsigned int v18 = 0;
      uint64_t v44 = a2 + 4 * ((v14 - v13) * a4 * v12);
      uint64_t v41 = v8;
      do
      {
        uint64_t v19 = *(void *)(v8 + 384);
        unsigned int v20 = (int *)(v19 + 312 * v14);
        v20[6] = 0;
        float v21 = v20 + 6;
        if ((*(_DWORD *)(a1 + 204) - 1) > 0xFFFFFFFC)
        {
          int v25 = 0;
        }
        else
        {
          uint64_t v42 = (int *)(v19 + 312 * v14);
          uint64_t v43 = v19;
          unint64_t v22 = 2;
          do
          {
            if (v14 >= *(unsigned int *)(a1 + 256)) {
              float v23 = 0.08;
            }
            else {
              float v23 = *(float *)(v44 + 4 * v18++);
            }
            if (v23 < 0.0) {
              float v23 = 0.0;
            }
            if ((int)(float)((float)((float)(1000.0 / (float)*(int *)(*(void *)(a1 + 184) + 24)) * v23) + 0.5) <= 1) {
              int v24 = 1;
            }
            else {
              int v24 = (int)(float)((float)((float)(1000.0 / (float)*(int *)(*(void *)(a1 + 184) + 24)) * v23) + 0.5);
            }
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"ANN sdur %d (HMM %d)\n");
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d %d %d\n");
            *(_DWORD *)(*((void *)v42 + 2) + 4 * v22) = v24;
            int v25 = *v21 + v24;
            *float v21 = v25;
            ++v22;
          }
          while (v22 < (*(_DWORD *)(a1 + 204) + 2));
          uint64_t v8 = v41;
          unsigned int v20 = v42;
          uint64_t v19 = v43;
        }
        if (v14 < *(unsigned int *)(a1 + 256))
        {
          unint64_t v26 = *(int **)(a1 + 192);
          LODWORD(v27) = *v26;
          if ((*v26 - 4) >= 0xFFFFFFFE)
          {
            uint64_t v28 = *(void *)(*(void *)(a1 + 176) + 8);
            uint64_t v29 = *v20;
            if (*(unsigned char *)(*(void *)(v28 + 32) + v29) == 1)
            {
              int v30 = *(unsigned __int16 *)(*(void *)(v28 + 1784) + 2 * v29);
              if (v30)
              {
                uint64_t v31 = *(void *)(a1 + 184);
                if ((v30 / *(_DWORD *)(v31 + 24)) <= 1) {
                  int v32 = 1;
                }
                else {
                  int v32 = v30 / *(_DWORD *)(v31 + 24);
                }
                *float v21 = 0;
                uint64_t v33 = *(void *)(v19 + 312 * v14 + 16);
                if (v32 <= (int)v27)
                {
                  uint64_t v38 = 2;
                  do
                  {
                    *(_DWORD *)(v33 + 4 * v38) = 1;
                    int v25 = *v21 + 1;
                    *float v21 = v25;
                    BOOL v36 = v38++ <= *v26;
                  }
                  while (v36);
                }
                else
                {
                  int v25 = 0;
                  uint64_t v34 = 2;
                  do
                  {
                    int v35 = *(_DWORD *)(v33 + 4 * v34);
                    if (v35 <= 0)
                    {
                      int v35 = 1;
                      *(_DWORD *)(v33 + 4 * v34) = 1;
                      int v25 = *v21;
                      LODWORD(v27) = *v26;
                    }
                    v25 += v35;
                    *float v21 = v25;
                    BOOL v36 = v34++ <= (int)v27;
                  }
                  while (v36);
                  if (v32 < v25)
                  {
                    if ((int)v27 >= 1)
                    {
                      uint64_t v37 = 2;
                      do
                      {
                        *(_DWORD *)(v33 + 4 * v37) = 1;
                        uint64_t v27 = *v26;
                        BOOL v36 = v37++ <= v27;
                      }
                      while (v36);
                    }
                    *float v21 = v27;
                    int v25 = v27;
                  }
                  if (v32 >= v25)
                  {
                    *(_DWORD *)(v33 + 12) += v32 - v25;
                    *float v21 = v32;
                    int v25 = v32;
                  }
                }
                *(float *)(v19 + 312 * v14 + 32) = (float)v25 * (float)*(int *)(v31 + 24);
              }
            }
          }
        }
        *(_DWORD *)(v8 + 408) += v25;
        ++v14;
      }
      while (v14 < *(unsigned int *)(a1 + 200));
      uint64_t v39 = 0;
    }
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToSDURStream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d\n");
    uint64_t v39 = 2229280775;
  }
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"-%s_CopyOutputToDurStream\n");
  return v39;
}

uint64_t UnicornPredict_CopyOutputToVUVStream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 176);
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToVUVStream\n");
  unsigned int v9 = *(_DWORD *)(a1 + 200);
  int v10 = *(_DWORD *)(a1 + 204);
  BOOL v11 = v9 >= a3 && v10 == a4;
  int v12 = a4;
  if (v11 || a4 == 1 && (int v12 = *(_DWORD *)(a1 + 204), v10 * v9 >= a3))
  {
    unint64_t v13 = *(unsigned int *)(a1 + 248);
    if (*(_DWORD *)(*(void *)(a1 + 216) + 5984)) {
      int v14 = 1;
    }
    else {
      int v14 = v12;
    }
    uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 176) + 32);
    if ((int)v15 < 1)
    {
      LODWORD(v16) = 0;
    }
    else
    {
      uint64_t v16 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 184) + 184 + 4 * v16) != 2)
      {
        if (v15 == ++v16)
        {
          LODWORD(v16) = *(_DWORD *)(*(void *)(a1 + 176) + 32);
          break;
        }
      }
    }
    if (v13 >= v9)
    {
      uint64_t v29 = 0;
    }
    else
    {
      unsigned int v17 = 0;
      uint64_t v18 = a2 + 4 * ((v13 - *(_DWORD *)(a1 + 244)) * a4 * v14);
      uint64_t v19 = v16;
      do
      {
        if ((v12 - 1) <= 0xFFFFFFFC)
        {
          unsigned int v20 = (void *)(*(void *)(v8 + 384) + 312 * v13 + 176);
          unint64_t v21 = 2;
          do
          {
            float v22 = 0.0;
            if (v13 < *(unsigned int *)(a1 + 256)) {
              float v22 = *(float *)(v18 + 4 * v17++);
            }
            if (v22 < 0.0) {
              float v22 = 0.0;
            }
            char v23 = *(unsigned char *)(*v20 + v21);
            if (v22 > 1.0) {
              float v22 = 1.0;
            }
            uint64_t v24 = *(void *)(a1 + 184) + 4 * v19;
            float v25 = *(float *)(v24 + 1128);
            uint64_t v26 = 1 << *(_DWORD *)(v24 + 184);
            char v27 = v23 & ~(_BYTE)v26;
            char v28 = v23 | v26;
            if (v22 <= v25) {
              char v28 = v27;
            }
            *(unsigned char *)(*v20 + v21) = v28;
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d: vuv %f %d (HMM %d)\n");
            ++v21;
            int v12 = *(_DWORD *)(a1 + 204);
          }
          while (v21 < (v12 + 2));
          unsigned int v9 = *(_DWORD *)(a1 + 200);
        }
        ++v13;
      }
      while (v13 < v9);
      uint64_t v29 = 0;
    }
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToVUVStream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d\n");
    uint64_t v29 = 2229280775;
  }
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"-%s_CopyOutputToVUVStream\n");
  return v29;
}

uint64_t UnicornPredict_CopyOutputToELF0Stream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToELF0Stream\n");
  unsigned int v9 = *(_DWORD *)(a1 + 200);
  unsigned int v8 = *(_DWORD *)(a1 + 204);
  unsigned int v10 = 2 * v8;
  BOOL v11 = v9 >= a3 && v10 == a4;
  if (v11 || a4 == 2 && v8 * v9 >= a3)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 248);
    if (*(_DWORD *)(*(void *)(a1 + 216) + 5984)) {
      int v13 = 1;
    }
    else {
      int v13 = *(_DWORD *)(a1 + 204);
    }
    unsigned int v14 = 0;
    if (v12)
    {
      uint32x4_t v15 = (uint32x4_t)vdupq_n_s32(v12 - 1);
      int32x4_t v16 = vdupq_n_s32(v10);
      int32x4_t v17 = 0uLL;
      do
      {
        int8x16_t v18 = (int8x16_t)v17;
        int32x4_t v17 = vaddq_s32(v16, v17);
        v14 += 4;
      }
      while (((v12 + 3) & 0xFFFFFFFC) != v14);
      unsigned int v14 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v14 - 4), (int8x16_t)xmmword_20D62D9F0), v15), v18, (int8x16_t)v17));
    }
    unsigned int v19 = *(_DWORD *)(a1 + 256);
    if (v12 < v19)
    {
      unsigned int v20 = 0;
      uint64_t v21 = *(void *)(a1 + 288);
      uint64_t v28 = *(void *)(a1 + 304);
      uint64_t v22 = a2 + 4 * (v12 - *(_DWORD *)(a1 + 244)) * a4 * v13;
      unsigned int v23 = *(_DWORD *)(a1 + 204);
      do
      {
        if (v23)
        {
          unsigned int v24 = 0;
          do
          {
            *(_DWORD *)(v21 + 4 * v14) = *(_DWORD *)(v22 + 4 * v20);
            uint64_t v25 = v14;
            *(_DWORD *)(v21 + 4 * (v14 + 1)) = *(_DWORD *)(v22 + 4 * (v20 + 1));
            if (v14)
            {
              int v26 = mfs_QuantizeLF0Frame(*(void *)(a1 + 216), *(float *)(v21 + 4 * (v14 - 1)));
              *(_DWORD *)(v28 + 4 * (v24 + v12 * *(_DWORD *)(a1 + 204))) = mfs_QuantizeLF0Frame(*(void *)(a1 + 216), *(float *)(v21 + 4 * v25))- v26;
              UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"@t_(%d) L(%f,%d) - R(%f,%d) = d(%d)\n");
              unsigned int v8 = *(_DWORD *)(a1 + 204);
            }
            unsigned int v14 = v25 + 2;
            ++v24;
            v20 += 2;
          }
          while (v24 < v8);
          unsigned int v19 = *(_DWORD *)(a1 + 256);
          unsigned int v23 = v8;
        }
        ++v12;
      }
      while (v12 < v19);
    }
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"-%s_CopyOutputToELF0Stream\n");
    return 0;
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToELF0Stream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d\n");
    return 2229280775;
  }
}

void AdjustDurationForTuning(int *a1, unsigned int a2, uint64_t a3, int a4, _DWORD *a5)
{
  unsigned int v7 = a4 - 4;
  unsigned int v8 = a2 / (a4 - 4);
  if (a2 % (a4 - 4))
  {
    uint64_t v9 = a2;
    do
    {
      int v10 = *a1++;
      *a5++ = v10;
      --v9;
    }
    while (v9);
  }
  else if (a4 != 4)
  {
    unsigned int v11 = 0;
    float v12 = *(float *)(a3 + 4 * v7);
    float v13 = *(float *)(a3 + 4 * (a4 - 3));
    float v14 = *(float *)(a3 + 4 * (a4 - 1));
    uint64_t v15 = v8 - 1;
    if (v8 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v8;
    }
    unsigned int v26 = a2 / (a4 - 4);
    unsigned int v27 = a2;
    do
    {
      if (v7 <= a2)
      {
        uint64_t v18 = 0;
        unsigned int v17 = v11 + 1;
        int v29 = v11 * v8;
        do
        {
          double v19 = exp((float)(v12 + (float)(*(float *)&a1[(v29 + v18)] * v13)));
          if (v17 < v7 && v15 == v18) {
            unsigned int v21 = v11 + 1;
          }
          else {
            unsigned int v21 = v11;
          }
          if (v18) {
            BOOL v22 = 1;
          }
          else {
            BOOL v22 = v11 == 0;
          }
          float v23 = v19;
          if (!v22) {
            unsigned int v21 = v11 - 1;
          }
          double v24 = v23 + (float)(v14 * *(float *)(a3 + 4 * v21));
          if (v24 < 0.008) {
            double v24 = 0.008;
          }
          float v25 = log(v24);
          *(float *)&a5[(v29 + v18++)] = (float)(v25 - v12) / v13;
        }
        while (v16 != v18);
        unsigned int v8 = v26;
        a2 = v27;
      }
      else
      {
        unsigned int v17 = v11 + 1;
      }
      unsigned int v11 = v17;
    }
    while (v17 != v7);
  }
}

uint64_t UnicornPipeline_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 2229280778;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  uint64_t v7 = PredictPipeline_Create(a2, a3, a4);
  *(void *)(a1 + 40) = v7;
  if (v7)
  {
    uint64_t v8 = heap_Calloc(*(void **)(a2 + 8), 1, 1984);
    *(void *)(a1 + 16) = v8;
    if (v8)
    {
      uint64_t v9 = UnicornSearch_Create(a2);
      *(void *)(a1 + 48) = v9;
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        if (v10 && (uint64_t v11 = *(void *)(v10 + 568)) != 0)
        {
          BOOL v12 = *(_DWORD *)(v11 + 5928) > 1u || *(_DWORD *)(v11 + 5932) != -1;
          uint64_t v6 = 0;
          *(_DWORD *)(a1 + 180) = v12;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v6;
}

uint64_t UnicornPipeline_SetForcedEEEnabled(uint64_t a1, int a2)
{
  uint64_t v2 = 2229281037;
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 568);
      if (v4)
      {
        if (a2) {
          BOOL v5 = *(_DWORD *)(v4 + 5928) > 1u || *(_DWORD *)(v4 + 5932) != -1;
        }
        else {
          BOOL v5 = 0;
        }
        uint64_t v2 = 0;
        *(_DWORD *)(a1 + 180) = v5;
      }
    }
  }
  return v2;
}

uint64_t UnicornPipeline_Destroy(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[6];
  if (v2)
  {
    UnicornSearch_Destroy(v2);
    a1[6] = 0;
  }
  uint64_t v3 = a1[2];
  if (v3) {
    heap_Free(*(void **)(*a1 + 8), v3);
  }
  a1[2] = 0;
  uint64_t v4 = a1[5];
  if (!v4) {
    return 2229280774;
  }
  return PredictPipeline_Destroy(v4);
}

uint64_t UnicornPipeline_Init(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)a1;
  float v14 = *(_DWORD **)(v12 + 568);
  uint64_t inited = UNICORN__mfs_InitStream(*(void *)a1, (void *)v11, v14);
  if ((inited & 0x80000000) != 0)
  {
    uint64_t v26 = inited;
    unsigned int v27 = "mfs_InitStream() failed";
LABEL_11:
    UNICORN__log_select_Error(v13, v26, (uint64_t)v27, v16, v17, v18, v19, v20);
    return v26;
  }
  uint64_t Stream = UNICORN__mfs_LoadStream(v11, v12, (uint64_t)v14, a5, a6);
  if ((Stream & 0x80000000) != 0)
  {
    uint64_t v26 = Stream;
    unsigned int v27 = "mfs_LoadStream() failed";
    goto LABEL_11;
  }
  *(void *)(v11 + 1768) = a4;
  UNICORN__log_select_Diag(v13, 2, (uint64_t)">> loading vstream done\n");
  *(_DWORD *)(v11 + 1980) = *(_DWORD *)(a1 + 192);
  *(void *)(v11 + 8) = a2;
  *(_OWORD *)(v11 + 1832) = *a3;
  *(void *)(v11 + 1760) = *(void *)(a1 + 40);
  uint64_t v22 = UNICORN__mfs_ParamGenStart(v11, (int *)v12, v14);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  int v23 = *(_DWORD *)v12;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)v12;
  int v24 = *(_DWORD *)(v11 + 392);
  *(_DWORD *)(a1 + 148) = v24 * v23;
  *(_DWORD *)(a1 + 152) = v24;
  *(_DWORD *)(v11 + 1080) = v24 * v23;
  uint64_t v22 = Install_DynamicBeams_Unicorn((uint64_t)v14, (unsigned int *)v12, v11, v24 * v23);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  uint64_t v22 = TransWeights_InitCopy((uint64_t)v14, (int *)v12, v11, *(_DWORD *)(a1 + 148));
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  if (!*(_DWORD *)(*(void *)(v12 + 568) + 11520))
  {
    *(void *)(v11 + 1800) = 0;
    goto LABEL_13;
  }
  uint64_t v25 = heap_Calloc(*(void **)(v13 + 8), *(unsigned int *)(a1 + 148), 40);
  *(void *)(v11 + 1800) = v25;
  if (v25)
  {
LABEL_13:
    uint64_t v30 = v11;
    uint64_t v31 = v12;
    int v32 = v14;
    uint64_t v22 = (**(uint64_t (***)(void))(a1 + 48))();
    if ((v22 & 0x80000000) == 0)
    {
      uint64_t v22 = ViterbiEE_Init(a1 + 56, v11, v14, v12);
      if ((v22 & 0x80000000) == 0)
      {
        *(void *)(a1 + 184) = 0;
        *(void *)(a1 + 156) = 0;
        *(void *)(a1 + 172) = 0;
        *(void *)(a1 + 164) = 0;
        return BET5_GenericRules_ParamActions_AllocMemoryAndInit((uint64_t)v14, (int *)v12, v11);
      }
    }
    return v22;
  }
  return 2229280778;
}

uint64_t UnicornPipeline_Release(uint64_t *a1)
{
  ViterbiEE_Release((uint64_t)(a1 + 7));
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(v2 + 40))();
    if ((v3 & 0x80000000) != 0)
    {
      UNICORN__log_select_Diag(*a1, 0, (uint64_t)"SearchPipeline, Error, self->Close\n");
      return 2229280778;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)a1[23];
  if (v4)
  {
    UNICORN__Psola_Deinitialise(*a1, v4);
    a1[23] = 0;
    BOOL v5 = (void *)a1[2];
  }
  else
  {
    BOOL v5 = (void *)a1[2];
    if (v5)
    {
      uint64_t v6 = v5[225];
      if (v6)
      {
        heap_Free(*(void **)(*a1 + 8), v6);
        BOOL v5 = (void *)a1[2];
        v5[225] = 0;
      }
    }
  }
  BET5_GenericRules_ParamActions_FreeMemory(v5);
  UNICORN__mfs_DeInitStream(a1[2]);
  return v3;
}

uint64_t UnicornPipeline_ProcessPhoneme(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = UNICORN__mfs_ParamGenContinue(*(void *)(a1 + 16), *(void *)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 568));
  if ((v4 & 0x80000000) == 0)
  {
    int v5 = *(_DWORD *)(a1 + 160);
    if (v5 >= *(_DWORD *)(a1 + 152))
    {
      uint64_t v15 = 0;
      goto LABEL_26;
    }
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 8))();
    if ((v4 & 0x80000000) == 0)
    {
      uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 24))();
      if ((v4 & 0x80000000) == 0)
      {
        uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 32))();
        if ((v4 & 0x80000000) == 0)
        {
          uint64_t v6 = *(uint64_t **)(a1 + 16);
          char v19 = 0;
          __int16 v18 = 0;
          UNICORN__mfs_Ling_GetPhonCtxt(v6[1], *(_DWORD *)(a1 + 160), &v18);
          if (*(int *)(a1 + 144) >= 1)
          {
            int v7 = 0;
            int v8 = HIBYTE(v18);
            signed int v9 = *(_DWORD *)(a1 + 156);
            do
            {
              unsigned int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 568) + 11548);
              UNICORN__log_select_Diag(*(void *)a1, 12, (uint64_t)"Decoder at state idx %d\n");
              uint64_t v11 = v6[138];
              if (!*(_DWORD *)(v11 + 32 * v9 + 16))
              {
                uint64_t v4 = UNICORN__mfs_CostList_Add(0.0, *(void *)(a1 + 8), v6 + 136, v9, v10);
                if ((v4 & 0x80000000) != 0) {
                  return v4;
                }
                uint64_t v11 = v6[138];
              }
              BOOL v12 = *(_DWORD *)(a1 + 144) == 2 && v8 == 1;
              BOOL v13 = v12 && v7 == 0;
              int v14 = v13;
              uint64_t v4 = ViterbiEE_Decode(a1 + 56, v11 + 32 * v9, v14);
              if ((v4 & 0x80000000) != 0) {
                return v4;
              }
              mfs_CostList_FreeAt(v6 + 136, v9);
              signed int v9 = *(_DWORD *)(a1 + 156) + 1;
              *(_DWORD *)(a1 + 156) = v9;
            }
            while (++v7 < *(_DWORD *)(a1 + 144));
          }
          uint64_t v15 = UnicornPipeline_PrepareEmissionIfPossible(a1, 0);
          int v5 = *(_DWORD *)(a1 + 160) + 1;
          *(_DWORD *)(a1 + 160) = v5;
          if ((v15 & 0x80000000) != 0) {
            return v15;
          }
LABEL_26:
          int v16 = *(_DWORD *)(a1 + 164) - *(_DWORD *)(a1 + 168);
          if (v16)
          {
            uint64_t v15 = UnicornPipeline_PrepareSynth(a1, v16);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
            UNICORN__log_select_Diag(*(void *)a1, 1, (uint64_t)"Prepared: %d units\n");
            int v5 = *(_DWORD *)(a1 + 160);
          }
          *a2 = v5 >= *(_DWORD *)(a1 + 152);
          return v15;
        }
      }
    }
  }
  return v4;
}

uint64_t UnicornPipeline_PrepareSynth(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = *(_DWORD *)(a1 + 168);
  int v5 = a2 + 1;
  do
  {
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 568) + 11520))
    {
      uint64_t result = mfs_Psola_CalculateAdjustments_ByOne(*(int **)(a1 + 8), *(void *)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 1800), v4, *(_DWORD *)(a1 + 148), (int *)(a1 + 172));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      int v4 = *(_DWORD *)(a1 + 168);
    }
    *(_DWORD *)(a1 + 168) = ++v4;
    --v5;
  }
  while (v5 > 1);
  return result;
}

uint64_t UnicornPipeline_SynthesizeDummy(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 176) += a2;
  return 0;
}

BOOL UnicornPipeline_GetForcedEEEnabled(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 180) != 0;
  }
  return result;
}

uint64_t UnicornPipeline_GetPreparedCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 172);
}

uint64_t UnicornPipeline_GetStream(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

BOOL UnicornPipeline_isDone(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) >= *(_DWORD *)(a1 + 152);
}

uint64_t UnicornPipeline_isMultiThreaded()
{
  return 0;
}

uint64_t UnicornPipeline_PrepareEmissionIfPossible(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2) {
    *a2 = 0;
  }
  if (*(_DWORD *)(a1 + 160) + 1 == *(_DWORD *)(a1 + 152))
  {
    int UniquePathLength = *(_DWORD *)(a1 + 148) - *(_DWORD *)(a1 + 164);
    if (!UniquePathLength) {
      return 0;
    }
  }
  else
  {
    int UniquePathLength = ViterbiEE_GetUniquePathLength(a1 + 56, *(_DWORD *)(a1 + 164));
    if (!UniquePathLength)
    {
      if (!*(_DWORD *)(a1 + 180)) {
        return 0;
      }
      int UniquePathLength = ViterbiForcedEE_GetPathLength(a1 + 56, *(_DWORD *)(a1 + 164));
      if (!UniquePathLength) {
        return 0;
      }
    }
  }
  int v6 = *(_DWORD *)(a1 + 164);
  int v7 = v6 + UniquePathLength;
  uint64_t v8 = v4 + 1448;
  uint64_t result = ViterbiEE_Backtrack(a1 + 56, v6, v6 + UniquePathLength, *(void *)(v4 + 8), v4 + 1448, v4 + 1472, v4 + 1496);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v10 = v4 + 1552;
    uint64_t v11 = v4 + 1400;
    UNICORN__log_select_Diag(*(void *)a1, 1, (uint64_t)"Emitted: %d (+%d) units (%d decoded, debt %d)\n");
    if (*(_DWORD *)(a1 + 180)) {
      ViterbiForcedEE_KillPaths(a1 + 56, v7 - 1, *(_DWORD *)(a1 + 156) - 1, v8);
    }
    uint64_t result = mfs_UnitSequence_SequencePartial(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32), v11, v10, v6, v6 + UniquePathLength);
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 164) = v7;
      if (a2) {
        *a2 = 1;
      }
    }
  }
  return result;
}

uint64_t UnicornPipeline_SetSIMDCallbacks(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    ViterbiEE_EnableSIMD(result + 56, a2);
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v2 + 48) + 48);
    return v3();
  }
  return result;
}

uint64_t UNICORN__mfs_SegmentList_Init(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = a1;
  a3[1] = a2;
  a3[2] = 0;
  a3[3] = 0;
  return 0;
}

uint64_t mfs_SegmentList_InitPrealloc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  uint64_t v6 = heap_Alloc(*(void *)(a1 + 8), 28 * a3);
  *(void *)(a4 + 16) = v6;
  if (!v6) {
    return 2229280778;
  }
  uint64_t result = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 28) = a3;
  return result;
}

void *UNICORN__mfs_SegmentList_DeInit(void *result)
{
  uint64_t v1 = result;
  if (result[1])
  {
    uint64_t result = heap_Free(*(void **)(*result + 8), result[2]);
    v1[2] = 0;
  }
  v1[3] = 0;
  return result;
}

uint64_t UNICORN__mfs_SegmentList_Add(uint64_t a1, int a2, char a3, int a4, int a5)
{
  unsigned int v10 = *(_DWORD *)(a1 + 24);
  if (v10 >= *(_DWORD *)(a1 + 28))
  {
    uint64_t v11 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 16), 28 * (v10 + 1));
    if (!v11) {
      return 2229280778;
    }
    *(void *)(a1 + 16) = v11;
    unsigned int v10 = *(_DWORD *)(a1 + 24);
    unsigned int v12 = v10 + 1;
    *(_DWORD *)(a1 + 28) = v10 + 1;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    unsigned int v12 = v10 + 1;
  }
  uint64_t v13 = 0;
  uint64_t v14 = v11 + 28 * v10;
  *(_DWORD *)uint64_t v14 = a2;
  *(unsigned char *)(v14 + 4) = a3;
  *(_DWORD *)(v14 + 8) = a4;
  *(_DWORD *)(v14 + 12) = a5;
  *(_DWORD *)(v14 + 16) = 1;
  *(_DWORD *)(a1 + 24) = v12;
  return v13;
}

uint64_t UnicornPipelineMT_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  int v7 = (uint64_t *)(a1 + 208);
  uint64_t result = critsec_ObjOpen(*(void *)(a2 + 16), *(void **)(a2 + 8), (uint64_t *)(a1 + 208));
  if ((result & 0x80000000) == 0)
  {
    if (result)
    {
      critsec_ObjClose(*v7);
      return UnicornPipeline_Destroy((void *)(a1 + 8));
    }
    else
    {
      *(void *)(a1 + 216) = 0;
      uint64_t result = UnicornPipeline_Create(a1 + 8, *(void *)a1, a3, a4);
      *(_DWORD *)(a1 + 200) = 1;
    }
  }
  return result;
}

uint64_t UnicornPipelineMT_Destroy(uint64_t a1)
{
  critsec_ObjClose(*(void *)(a1 + 208));
  return UnicornPipeline_Destroy((void *)(a1 + 8));
}

uint64_t UnicornPipelineMT_Init(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  return UnicornPipeline_Init(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t UnicornPipelineMT_Release(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 216)) {
    goto LABEL_6;
  }
  critsec_Enter(*(void **)(a1 + 208));
  if (*(_DWORD *)(a1 + 172) < *(_DWORD *)(a1 + 156)) {
    *(_DWORD *)(a1 + 220) = 1;
  }
  critsec_Leave(*(void **)(a1 + 208));
  thread_Join(*(void **)(a1 + 232));
  thread_ObjClose(*(void *)(a1 + 232));
  *(void *)(a1 + 232) = 0;
  int v2 = semaphore_ObjectClose(*(void *)(a1 + 224));
  *(void *)(a1 + 216) = 0;
  if (v2)
  {
    uint64_t v3 = v2 | 0x84E02000;
    UnicornPipeline_Release((uint64_t *)(a1 + 8));
    return v3;
  }
  else
  {
LABEL_6:
    return UnicornPipeline_Release((uint64_t *)(a1 + 8));
  }
}

uint64_t UnicornPipelineMT_ProcessPhoneme(uint64_t a1, _DWORD *a2)
{
  if (*(_DWORD *)(a1 + 216) != 1)
  {
    int v8 = semaphore_ObjectOpen(*(void *)(*(void *)a1 + 400), *(void **)(*(void *)a1 + 8), 0, 0x7FFFLL, (uint64_t *)(a1 + 224));
    if (v8 < 0) {
      return v8 | 0x84E02000;
    }
    int v8 = thread_ObjOpen(*(void *)(*(void *)a1 + 400), *(void **)(*(void *)a1 + 8), (uint64_t *)(a1 + 232));
    if (v8 < 0) {
      return v8 | 0x84E02000;
    }
    int v8 = thread_Start(*(void **)(a1 + 232));
    if (v8) {
      return v8 | 0x84E02000;
    }
    *(_DWORD *)(a1 + 216) = 1;
  }
  uint64_t v4 = 0;
  int v19 = 0;
  int v5 = *(_DWORD *)(a1 + 168);
  if (v5 < *(_DWORD *)(a1 + 160))
  {
    if (!*(_DWORD *)(a1 + 220))
    {
      while (1)
      {
        char v21 = 0;
        __int16 v20 = 0;
        UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(*(void *)(a1 + 24) + 8), v5, &v20);
        int v10 = *(_DWORD *)(a1 + 152);
        if (v10 >= 1)
        {
          int v11 = 0;
          int v12 = HIBYTE(v20);
          while (!*(_DWORD *)(a1 + 220))
          {
            int v13 = *(_DWORD *)(a1 + 168);
            int v8 = semaphore_Acquire(*(void **)(a1 + 224));
            if (v8) {
              return v8 | 0x84E02000;
            }
            signed int v14 = v11 + v13 * v10;
            BOOL v17 = *(_DWORD *)(a1 + 152) == 2 && v12 == 1 && v11 == 0;
            uint64_t v18 = ViterbiEE_Decode(a1 + 64, *(void *)(*(void *)(a1 + 24) + 1104) + 32 * v14, v17);
            if (v18)
            {
              uint64_t v4 = v18;
              if ((v18 & 0x80000000) != 0) {
                return v4;
              }
              break;
            }
            mfs_CostList_FreeAt((void *)(*(void *)(a1 + 24) + 1088), v14);
            ++*(_DWORD *)(a1 + 164);
            ++v11;
            int v10 = *(_DWORD *)(a1 + 152);
            if (v11 >= v10) {
              break;
            }
          }
        }
        uint64_t v4 = UnicornPipeline_PrepareEmissionIfPossible(a1 + 8, &v19);
        if ((v4 & 0x80000000) != 0) {
          return v4;
        }
        int v5 = *(_DWORD *)(a1 + 168) + 1;
        *(_DWORD *)(a1 + 168) = v5;
        if (v5 >= *(_DWORD *)(a1 + 160) || *(_DWORD *)(a1 + 220) | v19) {
          goto LABEL_5;
        }
      }
    }
    uint64_t v4 = 0;
  }
LABEL_5:
  int v6 = *(_DWORD *)(a1 + 172);
  int v7 = *(_DWORD *)(a1 + 176);
  if (v6 == v7)
  {
LABEL_8:
    *a2 = v6 >= *(_DWORD *)(a1 + 156);
    return v4;
  }
  uint64_t v4 = UnicornPipeline_PrepareSynth(a1 + 8, v6 - v7);
  if ((v4 & 0x80000000) == 0)
  {
    UNICORN__log_select_Diag(*(void *)a1, 1, (uint64_t)"Prepared: %d units\n");
    int v6 = *(_DWORD *)(a1 + 172);
    goto LABEL_8;
  }
  return v4;
}

uint64_t UnicornPipelineMT_locSearch(uint64_t a1)
{
  if (*(int *)(a1 + 160) >= 1)
  {
    int v2 = 0;
    uint64_t v3 = *(void *)(a1 + 24);
    while (!*(_DWORD *)(a1 + 220))
    {
      if ((UNICORN__mfs_ParamGenContinue(v3, *(void *)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 568)) & 0x80000000) != 0
        || ((*(uint64_t (**)(void))(*(void *)(a1 + 56) + 8))() & 0x80000000) != 0
        || ((*(uint64_t (**)(void))(*(void *)(a1 + 56) + 24))() & 0x80000000) != 0
        || ((*(uint64_t (**)(void))(*(void *)(a1 + 56) + 32))() & 0x80000000) != 0)
      {
        goto LABEL_16;
      }
      int v4 = *(_DWORD *)(a1 + 152);
      if (v4 >= 1)
      {
        uint64_t v5 = 0;
        while (1)
        {
          int v6 = v2 * v4;
          if (!*(_DWORD *)(*(void *)(v3 + 1104) + 32 * (v5 + v6) + 16)
            && (UNICORN__mfs_CostList_Add(0.0, *(void *)(a1 + 16), (void *)(v3 + 1088), (int)v5 + v6, *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 568) + 11548)) & 0x80000000) != 0)
          {
            break;
          }
          if ((semaphore_Release(*(void **)(a1 + 224)) & 0x80000000) != 0) {
            break;
          }
          int v4 = *(_DWORD *)(a1 + 152);
          if ((int)++v5 >= v4) {
            goto LABEL_14;
          }
        }
LABEL_16:
        *(_DWORD *)(a1 + 220) = 1;
        break;
      }
LABEL_14:
      if (++v2 >= *(_DWORD *)(a1 + 160)) {
        break;
      }
    }
  }
  semaphore_Release(*(void **)(a1 + 224));
  return 0;
}

BOOL UnicornPipelineMT_GetForcedEEEnabled(uint64_t a1)
{
  return UnicornPipeline_GetForcedEEEnabled(a1 + 8);
}

uint64_t UnicornPipelineMT_SetForcedEEEnabled(uint64_t a1, int a2)
{
  return UnicornPipeline_SetForcedEEEnabled(a1 + 8, a2);
}

uint64_t UnicornPipelineMT_SetSIMDCallbacks(uint64_t a1, int a2)
{
  return UnicornPipeline_SetSIMDCallbacks(a1 + 8, a2);
}

BOOL UnicornPipelineMT_isDone(uint64_t a1)
{
  return UnicornPipeline_isDone(a1 + 8);
}

uint64_t UnicornPipelineMT_isMultiThreaded()
{
  return 1;
}

uint64_t UnicornPipelineMT_SynthesizeDummy(uint64_t a1, int a2)
{
  return UnicornPipeline_SynthesizeDummy(a1 + 8, a2);
}

uint64_t UnicornPipelineMT_GetPreparedCount(uint64_t a1)
{
  return UnicornPipeline_GetPreparedCount(a1 + 8);
}

uint64_t UnicornPipelineMT_GetStream(uint64_t a1)
{
  return UnicornPipeline_GetStream(a1 + 8);
}

uint64_t UNICORN__mfs_FSM_Load(uint64_t a1, uint64_t a2)
{
  uint64_t result = 2229280772;
  int v4 = *(int **)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    int v7 = *v4;
    *(_DWORD *)a1 = *v4;
    if (v5 >= 5)
    {
      uint64_t v8 = v4[1];
      *(_DWORD *)(a1 + 4) = v8;
      if (v5 >= 9)
      {
        unsigned int v9 = v4[2];
        *(_DWORD *)(a1 + 8) = v9;
        if (v5 >= 0xD)
        {
          int v10 = (char *)v4 + v5;
          int v11 = v4 + 3;
          *(void *)(a1 + 16) = v11;
          int v12 = (char *)&v11[2 * (v7 + 1)];
          if (v12 < v10)
          {
            *(void *)(a1 + 24) = v12;
            unint64_t v13 = (unint64_t)&v12[8 * v8];
            if (v13 < (unint64_t)v10)
            {
              *(void *)(a1 + 32) = v13;
              if ((char *)(v13 + 12 * v9) == v10) {
                return 0;
              }
              else {
                return 2229280772;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t UNICORN__mfs_CostList_Init(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *(void *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  uint64_t v5 = 2229280778;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  uint64_t v6 = 2229280774;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (a1 && a2)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
    uint64_t v11 = a4;
    uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), a4, 32);
    *(void *)(a3 + 16) = v12;
    if (!v12) {
      return 2229280778;
    }
    if (a4)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 32 * v11;
      do
      {
        uint64_t v15 = heap_Calloc(*(void **)(*(void *)a3 + 8), 1, 12);
        uint64_t v16 = *(void *)(a3 + 16);
        *(void *)(v16 + v13) = v15;
        if (!v15) {
          return 2229280778;
        }
        uint64_t v17 = v16 + v13;
        *(void *)(v17 + 16) = 0x100000000;
        *(_DWORD *)(v17 + 24) = a5;
        *(_DWORD *)(v17 + 28) = 1;
        v13 += 32;
      }
      while (v14 != v13);
    }
    *(_DWORD *)(a3 + 24) = a4;
    if (*(_DWORD *)(a2 + 1928) == 1)
    {
      uint64_t v18 = *(unsigned int **)(a3 + 8);
      if (v18[482] != 1) {
        return 0;
      }
      uint64_t v19 = ((*(_DWORD *)(*((void *)v18 + 71) + 11548) + 1)
           / *(_DWORD *)(*((void *)v18 + 71) + 5992)
           + 31) >> 5;
      *(_DWORD *)(a3 + 56) = -1;
      *(_DWORD *)(a3 + 60) = v19;
      *(void *)(a3 + 64) = heap_Calloc(*(void **)(*(void *)a3 + 8), v19, 4);
      uint64_t v20 = heap_Calloc(*(void **)(*(void *)a3 + 8), 4, (*(_DWORD *)(*((void *)v18 + 71) + 11548) + 101)/ *(_DWORD *)(*((void *)v18 + 71) + 5992));
      *(void *)(a3 + 72) = v20;
      if (*(void *)(a3 + 64))
      {
        if (v20)
        {
          *(_DWORD *)(a3 + 32) = -1;
          *(_DWORD *)(a3 + 80) = -1;
          if (*(_DWORD *)(*((void *)v18 + 71) + 5992) == 1) {
            goto LABEL_13;
          }
          uint64_t v28 = *(unsigned int *)(a3 + 60);
          *(_DWORD *)(a3 + 36) = v28;
          *(void *)(a3 + 40) = heap_Calloc(*(void **)(*(void *)a3 + 8), v28, 4);
          uint64_t v29 = heap_Calloc(*(void **)(*(void *)a3 + 8), 4, (*(_DWORD *)(*((void *)v18 + 71) + 11548) + 101)/ *(_DWORD *)(*((void *)v18 + 71) + 5992));
          *(void *)(a3 + 48) = v29;
          if (*(void *)(a3 + 40))
          {
            if (v29)
            {
              uint64_t v30 = *(unsigned int *)(a3 + 60);
              *(_DWORD *)(a3 + 84) = v30;
              *(void *)(a3 + 88) = heap_Calloc(*(void **)(*(void *)a3 + 8), v30, 4);
              uint64_t v31 = heap_Calloc(*(void **)(*(void *)a3 + 8), 4, (*(_DWORD *)(*((void *)v18 + 71) + 11548) + 101)/ *(_DWORD *)(*((void *)v18 + 71) + 5992));
              *(void *)(a3 + 96) = v31;
              if (*(void *)(a3 + 88))
              {
                if (v31)
                {
LABEL_13:
                  *(_DWORD *)(a3 + 220) = 1;
                  uint64_t v21 = ((v18[249] + 31) >> 5) * *v18;
                  *(_DWORD *)(a3 + 216) = v21;
                  uint64_t v22 = heap_Calloc(*(void **)(*(void *)a3 + 8), v21, 4);
                  *(void *)(a3 + 208) = v22;
                  if (v22)
                  {
                    uint64_t v23 = *v18;
                    if ((int)v23 >= 1)
                    {
                      unsigned int v24 = v18[249];
                      uint64_t v25 = (unsigned int *)v32;
                      do
                      {
                        *v25++ = v24;
                        --v23;
                      }
                      while (v23);
                    }
                    Unicorn_CostListBlock_ResetPointers(a3, (uint64_t)v32);
                    uint64_t v26 = heap_Calloc(*(void **)(*(void *)a3 + 8), v18[249], 4);
                    *(void *)(a3 + 104) = v26;
                    if (v26) {
                      return 0;
                    }
                    else {
                      return 2229280778;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return v5;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t Unicorn_CostListBlock_Set(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  if ((*(_DWORD *)v2 - 1) <= 0xFFFFFFFC)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (*(_DWORD *)v2 + 2);
    uint64_t v5 = *(void *)(v2 + 776);
    uint64_t v6 = *(void *)(a2 + 64) + 8;
    do
    {
      v9[v3] = *(_DWORD *)(*(void *)(v5 + 16 + 8 * v3) + 40 * *(unsigned int *)(v6 + 4 * v3) + 4);
      unint64_t v7 = v3 + 3;
      ++v3;
    }
    while (v7 < v4);
  }
  Unicorn_CostListBlock_ResetPointers(a1, (uint64_t)v9);
  return 0;
}

void Unicorn_CostListBlock_ResetPointers(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(int **)(a1 + 8);
    if (*v2 < 1)
    {
      size_t v8 = 0;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      uint64_t v5 = a1 + 176;
      do
      {
        uint64_t v6 = (*(_DWORD *)(a2 + 4 * v3) + 31) >> 5;
        *(void *)(v5 + 8 * v3 - 64) = *(void *)(a1 + 208) + 4 * v4;
        *(_DWORD *)(v5 + 4 * v3) = v6;
        v4 += v6;
        uint64_t v7 = v3 + 2;
        ++v3;
      }
      while (v7 <= *v2);
      size_t v8 = 4 * v4;
    }
    bzero(*(void **)(a1 + 208), v8);
  }
}

void *mfs_CostList_FreeAt(void *a1, unsigned int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = 32 * a2;
  uint64_t result = heap_Free(*(void **)(*a1 + 8), *(void *)(a1[2] + v4));
  uint64_t v6 = a1[2];
  uint64_t v7 = v6 + 32 * v3;
  *(void *)(v6 + v4) = 0;
  uint64_t v10 = *(void *)(v7 + 8);
  unsigned int v9 = (void *)(v7 + 8);
  uint64_t v8 = v10;
  if (v10)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v8);
    *unsigned int v9 = 0;
  }
  return result;
}

void *UNICORN__mfs_CostList_DeInit(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if (v2)
  {
    uint64_t result = heap_Free(*(void **)(*result + 8), v2);
    v1[5] = 0;
  }
  uint64_t v3 = v1[6];
  if (v3)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v3);
    v1[6] = 0;
  }
  uint64_t v4 = v1[8];
  if (v4)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v4);
    v1[8] = 0;
  }
  uint64_t v5 = v1[9];
  if (v5)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v5);
    v1[9] = 0;
  }
  uint64_t v6 = v1[11];
  if (v6)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v6);
    v1[11] = 0;
  }
  uint64_t v7 = v1[12];
  if (v7)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v7);
    v1[12] = 0;
  }
  uint64_t v8 = v1[26];
  if (v8)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v8);
    v1[26] = 0;
  }
  uint64_t v9 = v1[13];
  if (v9)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v9);
    v1[13] = 0;
  }
  uint64_t v10 = v1[2];
  if (v10)
  {
    if (*((_DWORD *)v1 + 6))
    {
      unsigned int v11 = 0;
      do
        mfs_CostList_FreeAt(v1, v11++);
      while (v11 < *((_DWORD *)v1 + 6));
      uint64_t v10 = v1[2];
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v10);
    v1[2] = 0;
  }
  *((_DWORD *)v1 + 6) = 0;
  return result;
}

uint64_t mfs_CostList_FindInsertionPoint(uint64_t *a1, unsigned int a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  int v3 = v2 - 1;
  if (v2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = *a1;
  while (1)
  {
    uint64_t v7 = ((v3 + (int)result) >> 1);
    unsigned int v8 = *(_DWORD *)(v6 + 12 * (int)v7);
    if (v8 >= a2)
    {
      if (v8 <= a2) {
        return v7;
      }
      int v3 = v7 - 1;
    }
    else
    {
      uint64_t result = (v7 + 1);
    }
    if ((int)result <= v3)
    {
      uint64_t v7 = ((v3 + (int)result) >> 1);
      unsigned int v9 = *(_DWORD *)(v6 + 12 * (int)v7);
      if (v9 >= a2)
      {
        if (v9 <= a2) {
          return v7;
        }
        int v3 = v7 - 1;
      }
      else
      {
        uint64_t result = (v7 + 1);
      }
      if ((int)result <= v3) {
        break;
      }
    }
LABEL_17:
    if ((int)result > v3) {
      return result;
    }
  }
  uint64_t v7 = ((v3 + (int)result) >> 1);
  unsigned int v10 = *(_DWORD *)(v6 + 12 * (int)v7);
  if (v10 < a2)
  {
    uint64_t result = (v7 + 1);
    goto LABEL_17;
  }
  if (v10 > a2)
  {
    int v3 = v7 - 1;
    goto LABEL_17;
  }
  return v7;
}

uint64_t UNICORN__mfs_CostList_Resize(void *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a1[2] + 32 * a2;
  if (*(_DWORD *)(v3 + 20) >= a3) {
    return 0;
  }
  uint64_t v5 = heap_Realloc(*(uint64_t **)(*a1 + 8), *(void *)v3, 12 * a3);
  if (!v5) {
    return 2229280778;
  }
  uint64_t v6 = v5;
  uint64_t result = 0;
  *(_DWORD *)(v3 + 20) = a3;
  *(void *)uint64_t v3 = v6;
  return result;
}

uint64_t UNICORN__mfs_CostList_Add(float a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 2229280769;
  uint64_t v6 = a3[2];
  uint64_t v7 = a4;
  uint64_t v8 = v6 + 32 * a4;
  if (!*(_DWORD *)(v8 + 24))
  {
    unsigned int InsertionPoint = mfs_CostList_FindInsertionPoint((uint64_t *)(v6 + 32 * a4), a5);
    unsigned int v13 = InsertionPoint;
    uint64_t v15 = (unsigned int *)(v8 + 16);
    unsigned int v14 = *(_DWORD *)(v8 + 16);
    uint64_t v16 = *(void *)v8;
    if (InsertionPoint < v14 && *(_DWORD *)(v16 + 12 * InsertionPoint) == a5)
    {
      return 2229280770;
    }
    else
    {
      uint64_t v17 = v6 + 32 * v7;
      int v19 = *(_DWORD *)(v17 + 20);
      uint64_t v18 = (unsigned int *)(v17 + 20);
      if (v19 == v14)
      {
        unsigned int v20 = v14 + 64;
        *uint64_t v18 = v20;
        uint64_t v21 = heap_Realloc(*(uint64_t **)(*a3 + 8), v16, 12 * v20);
        *(void *)uint64_t v8 = v21;
        if (!v21)
        {
          *v18 -= 64;
          return 2229280778;
        }
        uint64_t v16 = v21;
        unsigned int v14 = *v15;
      }
      unsigned int v22 = v13;
      unsigned int v23 = v14 - v13;
      if (v23)
      {
        memmove((void *)(v16 + 12 * (v13 + 1)), (const void *)(v16 + 12 * v13), 12 * v23);
        uint64_t v16 = *(void *)v8;
        unsigned int v13 = *v15;
      }
      uint64_t v5 = 0;
      uint64_t v24 = v16 + 12 * v22;
      *(_DWORD *)uint64_t v24 = a5;
      *(float *)(v24 + 4) = a1;
      *uint64_t v15 = v13 + 1;
    }
  }
  return v5;
}

uint64_t UNICORN__mfs_CostList_Pad(void *a1, unsigned int a2, int a3, float a4)
{
  uint64_t v4 = 2229280769;
  uint64_t v5 = a1[2] + 32 * a2;
  if (!*(_DWORD *)(v5 + 24))
  {
    uint64_t v8 = (int *)(v5 + 16);
    unsigned int v9 = *(_DWORD *)(v5 + 16);
    unsigned int v10 = (_DWORD *)(v5 + 20);
    uint64_t v11 = *(void *)v5;
    if (*(_DWORD *)(v5 + 20) == v9)
    {
      _DWORD *v10 = v9 + 64;
      uint64_t v12 = heap_Realloc(*(uint64_t **)(*a1 + 8), v11, 12 * (v9 + 64));
      *(void *)uint64_t v5 = v12;
      if (!v12)
      {
        *v10 -= 64;
        return 2229280778;
      }
      uint64_t v11 = v12;
      int v13 = *v8;
    }
    else
    {
      int v13 = *(_DWORD *)(v5 + 16);
    }
    uint64_t v4 = 0;
    uint64_t v14 = v11 + 12 * v9;
    *(_DWORD *)uint64_t v14 = a3;
    *(float *)(v14 + 4) = a4;
    *uint64_t v8 = v13 + 1;
  }
  return v4;
}

uint64_t mfs_CostList_PadWithBnfOffset(void *a1, unsigned int a2, int a3, int a4, float a5)
{
  uint64_t result = UNICORN__mfs_CostList_Pad(a1, a2, a3, a5);
  if (!result)
  {
    uint64_t v9 = a1[2] + 32 * a2;
    *(_DWORD *)(*(void *)v9 + 12 * (*(_DWORD *)(v9 + 16) - 1) + 8) = a4;
  }
  return result;
}

uint64_t mfs_ClonePrevList(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2)
  {
    if (a3)
    {
      uint64_t v5 = a3 - 1;
      uint64_t v6 = (_DWORD *)a1 + v5 + 44;
      if (*((_DWORD *)a1 + a3 + 44) == *v6)
      {
        uint64_t v8 = a1[2];
        uint64_t v9 = a2 - 1;
        uint64_t v10 = v8 + 32 * v9;
        unsigned int v12 = *(_DWORD *)(v10 + 16);
        uint64_t v11 = (unsigned int *)(v10 + 16);
        if ((UNICORN__mfs_CostList_Resize(a1, a2, v12) & 0x80000000) == 0)
        {
          int v13 = (void **)(v8 + 32 * a2);
          uint64_t v14 = a1 + 14;
          memcpy(*v13, *(const void **)(v8 + 32 * v9), 12 * *v11);
          int v15 = *v11;
          if (*v11)
          {
            uint64_t v16 = *v13;
            uint64_t v17 = *v11;
            do
            {
              ++*v16;
              v16 += 3;
              --v17;
            }
            while (v17);
          }
          uint64_t v18 = v8 + 32 * a2;
          *(_DWORD *)(v18 + 16) = v15;
          uint64_t v19 = v8 + 32 * v9;
          *(_DWORD *)(v18 + 28) = *(_DWORD *)(v19 + 28);
          *(void *)(v18 + 20) = *(void *)(v19 + 20);
          memcpy((void *)v14[a3], (const void *)v14[v5], 4 * *v6);
        }
      }
    }
  }
  return 0;
}

uint64_t mfs_CostList_QSelectUnitIDs_Faster(uint64_t result, int a2, unsigned int a3)
{
  unsigned int v3 = a2 - 1;
  if (a2 != 1)
  {
    unsigned int v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = (uint64_t *)(result + 12 * a3);
    do
    {
      uint64_t v7 = v3;
      uint64_t v8 = (uint64_t *)(result + 12 * v3);
      int v9 = *((_DWORD *)v8 + 2);
      uint64_t v10 = *v8;
      int v11 = *((_DWORD *)v6 + 2);
      *uint64_t v8 = *v6;
      *((_DWORD *)v8 + 2) = v11;
      *uint64_t v6 = v10;
      *((_DWORD *)v6 + 2) = v9;
      unsigned int v12 = v4;
      if (v4 < v3)
      {
        int v13 = (uint64_t *)(result + 12 * v4);
        uint64_t v14 = v7 - v4;
        unsigned int v12 = v4;
        do
        {
          if (*(_DWORD *)v13 < *(_DWORD *)v8)
          {
            int v15 = (uint64_t *)(result + 12 * v12);
            int v16 = *((_DWORD *)v15 + 2);
            uint64_t v17 = *v15;
            int v18 = *((_DWORD *)v13 + 2);
            *int v15 = *v13;
            *((_DWORD *)v15 + 2) = v18;
            *int v13 = v17;
            *((_DWORD *)v13 + 2) = v16;
            ++v12;
          }
          int v13 = (uint64_t *)((char *)v13 + 12);
          --v14;
        }
        while (v14);
      }
      uint64_t v19 = (uint64_t *)(result + 12 * v12);
      int v20 = *((_DWORD *)v19 + 2);
      uint64_t v21 = *v19;
      int v22 = *((_DWORD *)v8 + 2);
      *uint64_t v19 = *v8;
      *((_DWORD *)v19 + 2) = v22;
      *uint64_t v8 = v21;
      *((_DWORD *)v8 + 2) = v20;
      if (v12 == a3) {
        break;
      }
      if (v12 >= a3)
      {
        unsigned int v3 = v12 - 1;
      }
      else
      {
        unsigned int v4 = v12 + 1;
        unsigned int v3 = v7;
      }
      ++v5;
    }
    while (v5 < v3);
  }
  return result;
}

uint64_t mfs_CostList_QSelectScores_Faster(uint64_t result, int a2, int a3)
{
  unsigned int v3 = a2 - 1;
  if (a2 != 1)
  {
    unsigned int v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = a3 - 1;
    do
    {
      uint64_t v7 = (uint64_t *)(result + 12 * v3);
      int v8 = *((_DWORD *)v7 + 2);
      uint64_t v9 = *v7;
      uint64_t v10 = (uint64_t *)(result + 12 * (v3 >> 1));
      int v11 = *((_DWORD *)v10 + 2);
      unsigned int v12 = v3;
      *uint64_t v7 = *v10;
      *((_DWORD *)v7 + 2) = v11;
      uint64_t *v10 = v9;
      *((_DWORD *)v10 + 2) = v8;
      unsigned int v13 = v4;
      if (v4 < v3)
      {
        uint64_t v14 = (uint64_t *)(result + 12 * v4);
        unint64_t v15 = v3 - (unint64_t)v4;
        unsigned int v13 = v4;
        do
        {
          if (*((_DWORD *)v14 + 1) < *(_DWORD *)(result + 12 * v3 + 4))
          {
            int v16 = (uint64_t *)(result + 12 * v13);
            int v17 = *((_DWORD *)v16 + 2);
            uint64_t v18 = *v16;
            int v19 = *((_DWORD *)v14 + 2);
            uint64_t *v16 = *v14;
            *((_DWORD *)v16 + 2) = v19;
            *uint64_t v14 = v18;
            *((_DWORD *)v14 + 2) = v17;
            ++v13;
          }
          uint64_t v14 = (uint64_t *)((char *)v14 + 12);
          --v15;
        }
        while (v15);
      }
      int v20 = (uint64_t *)(result + 12 * v13);
      int v21 = *((_DWORD *)v20 + 2);
      uint64_t v22 = *v20;
      int v23 = *((_DWORD *)v7 + 2);
      *int v20 = *v7;
      *((_DWORD *)v20 + 2) = v23;
      *uint64_t v7 = v22;
      *((_DWORD *)v7 + 2) = v21;
      if (v13 == v6) {
        break;
      }
      if (v13 >= v6)
      {
        unsigned int v3 = v13 - 1;
      }
      else
      {
        unsigned int v4 = v13 + 1;
        unsigned int v3 = v12;
      }
      ++v5;
    }
    while (v5 < v3);
  }
  return result;
}

uint64_t mfs_CostList_Select(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = v4 + 32 * a2;
  if (*(_DWORD *)(v6 + 24) == a3 && *(_DWORD *)(v6 + 28)) {
    return 0;
  }
  if (!a3)
  {
    int v9 = *(_DWORD *)(v4 + 32 * a2 + 16);
    if (v9) {
      mfs_CostList_QSelectUnitIDs_Faster(*(void *)v6, v9, a4);
    }
    goto LABEL_10;
  }
  if (a3 == 1)
  {
    int v8 = *(_DWORD *)(v4 + 32 * a2 + 16);
    if (v8) {
      mfs_CostList_QSelectScores_Faster(*(void *)v6, v8, a4);
    }
LABEL_10:
    uint64_t result = 0;
    *(_DWORD *)(v4 + 32 * v5 + 28) = 0;
    return result;
  }
  return 2229280769;
}

uint64_t UNICORN__mfs_CostList_UpdateCost(uint64_t result, unsigned int a2, unsigned int a3, float a4)
{
  uint64_t v4 = *(void *)(result + 16) + 32 * a2;
  *(float *)(*(void *)v4 + 12 * a3 + 4) = a4;
  if (*(_DWORD *)(v4 + 24) == 1) {
    *(_DWORD *)(v4 + 28) = 0;
  }
  return result;
}

void *UNICORN__mfs_CostList_Prune(void *result, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = result[2] + 32 * a2;
  if (*(_DWORD *)(v4 + 16) > a3)
  {
    uint64_t v5 = result;
    *(int32x2_t *)(v4 + 16) = vdup_n_s32(a3);
    uint64_t result = (void *)heap_Realloc(*(uint64_t **)(*result + 8), *(void *)v4, 12 * a3);
    if (result) {
      *(void *)uint64_t v4 = result;
    }
    uint64_t v6 = v5[2] + 32 * v3;
    uint64_t v9 = *(void *)(v6 + 8);
    int v8 = (void *)(v6 + 8);
    uint64_t v7 = v9;
    if (v9)
    {
      uint64_t result = heap_Free(*(void **)(*v5 + 8), v7);
      *int v8 = 0;
    }
  }
  return result;
}

uint64_t UNICORN__mfs_SparseMtx_Load(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2229280772;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 16);
    if (v4)
    {
      *(void *)a1 = v3;
      float v5 = (float)v4 * 0.25;
      float v6 = sqrtf(v5);
      if ((float)(v6 - floorf(v6)) <= 0.0)
      {
        unsigned int v9 = v6;
        unsigned int v10 = v4 >> 2;
        do
        {
          unsigned int v11 = v9 * v9;
          ++v9;
        }
        while (v11 < v10);
        unsigned int v8 = v9 - 1;
      }
      else
      {
        float v7 = sqrt((v5 + -1.0) * 0.5);
        unsigned int v8 = v7;
      }
      uint64_t v2 = 0;
      *(_DWORD *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 12) = v8;
    }
  }
  return v2;
}

uint64_t mfs_FullMtx_Load(uint64_t a1, _DWORD *a2, int a3, _DWORD *a4, int *a5)
{
  if (a5) {
    *a5 = 0;
  }
  if (a2)
  {
    *(_DWORD *)(a1 + 8) = *a2;
    *(_DWORD *)(a1 + 12) = a2[1];
    float v5 = a2 + 2;
    if (a5)
    {
      int v6 = *a5 + 8;
      *a5 = v6;
      if (a3)
      {
        *a4 = a2[2];
        float v5 = a2 + 3;
        int v6 = *a5 + 4;
        *a5 = v6;
      }
      *(void *)a1 = v5;
      *a5 = v6 + 4 * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 12);
    }
    else
    {
      if (a3)
      {
        *a4 = a2[2];
        float v5 = a2 + 3;
      }
      *(void *)a1 = v5;
    }
  }
  return 0;
}

uint64_t UnicornSearch_StageTwo_TreeIndex_Sliced(uint64_t a1, uint64_t a2)
{
  unint64_t v111 = 0;
  long long v109 = 0u;
  long long v110 = 0u;
  unsigned int v3 = a2 + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 92);
  uint64_t v4 = v3 - 2;
  if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * v4))
  {
    uint64_t updated = 0;
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 136) + 16) + 32 * v4) + 4) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(*(void *)(*(void *)(a1 + 128) + 16) + 4 * a2);
    if (*(float *)(*(void *)(a1 + 112) + 6704) == 0.0)
    {
      LODWORD(updated) = 0;
    }
    else
    {
      uint64_t updated = mfs_UpdateTargetQuantizedTrajectory_LF0(*(void *)(a1 + 104), *(void *)(a1 + 120), a1 + 176);
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
    }
    unsigned int v106 = updated;
    uint64_t v7 = *(void *)(a1 + 336);
    if (v7) {
      mfs_TCost_Elf0_Manhattan_TreeIndex(*(float **)(a1 + 112), *(void *)(a1 + 120), (uint64_t *)(*(void *)(a1 + 120) + 1088), v3 - 2, a1 + 176, *(_DWORD *)(*(void *)(*(void *)(a1 + 128) + 64) + 4 * a2), a2, *(unsigned __int8 *)(a1 + 345) == 1, *(float *)(v7 + 4 * (2 * v4)), *(float *)(v7 + 4 * ((2 * v4) | 1u)));
    }
    if (*(unsigned char *)(a1 + 156) || *(unsigned char *)(a1 + 345) != 1)
    {
      uint64_t v9 = *(void *)(a1 + 112);
      uint64_t v8 = *(void *)(a1 + 120);
      unsigned int v10 = *(_DWORD *)(a1 + 100);
      unsigned int v11 = *(_DWORD *)(a1 + 380);
      unsigned int v12 = *(int **)(v8 + 1096);
      int v13 = *v12;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      unint64_t v111 = 0;
      if (v12[482] == 1)
      {
        unint64_t v111 = __PAIR64__(v11, v10);
        if (v11)
        {
          if (a2 == 2)
          {
            int v14 = 1;
          }
          else if (v13 + 1 == a2)
          {
            int v14 = 2;
          }
          else
          {
            int v14 = 4;
          }
          HIDWORD(v110) = v14;
        }
        GetBnfTargetVectorPacked(v8, v4 / *(_DWORD *)(v9 + 5992), (float *)&v109 + 2);
        if (*(int *)(v9 + 6752) >= 1)
        {
          if (v3 != 2)
          {
            if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * (v3 - 3))) {
              uint64_t BnfTargetVectorPacked = 0;
            }
            else {
              uint64_t BnfTargetVectorPacked = GetBnfTargetVectorPacked(v8, (v3 - 3) / *(_DWORD *)(v9 + 5992), (float *)&v109 + 3);
            }
            *((void *)&v107 + 1) = BnfTargetVectorPacked;
          }
          unsigned int v16 = (v3 - 1) / *(_DWORD *)(v9 + 5992);
          if (v16 < v10)
          {
            if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * (v3 - 1))) {
              uint64_t v17 = 0;
            }
            else {
              uint64_t v17 = GetBnfTargetVectorPacked(v8, v16, (float *)&v110);
            }
            *(void *)&long long v108 = v17;
          }
          if (*(int *)(v9 + 6752) >= 2)
          {
            if (v4 >= 2)
            {
              if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * (v3 - 4))) {
                uint64_t v18 = 0;
              }
              else {
                uint64_t v18 = GetBnfTargetVectorPacked(v8, (v3 - 4) / *(_DWORD *)(v9 + 5992), (float *)&v110 + 1);
              }
              *((void *)&v108 + 1) = v18;
            }
            unsigned int v19 = v3 / *(_DWORD *)(v9 + 5992);
            if (v19 < v10)
            {
              if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * v3)) {
                uint64_t v20 = 0;
              }
              else {
                uint64_t v20 = GetBnfTargetVectorPacked(v8, v19, (float *)&v110 + 2);
              }
              *(void *)&long long v109 = v20;
            }
          }
        }
      }
      switch(HIDWORD(v110))
      {
        case 4:
          uint64_t v40 = *(void **)(a1 + 120);
          uint64_t v41 = v40[137];
          if (*(_DWORD *)(v41 + 1928) == 1)
          {
            uint64_t v42 = *(_DWORD **)(a1 + 112);
            if (v42[1688])
            {
              uint64_t v43 = v40[138];
              if (*(_DWORD *)(v43 + 32 * v4 + 16))
              {
                uint64_t v44 = 0;
                unint64_t v45 = 0;
                uint64_t v46 = (uint64_t *)(v43 + 32 * v4);
                float v47 = 1.0 - *(float *)(v40[169] + 4 * v4);
                int v105 = *(_DWORD *)(*(void *)(v41 + 568) + 11548) - 1;
                uint64_t v48 = *v46;
                do
                {
                  if (v42[1496])
                  {
                    unsigned int v49 = (unsigned int *)(*v46 + v44 + 8);
                    float v50 = v49;
                  }
                  else
                  {
                    uint64_t v51 = *(void *)(v41 + 1064);
                    int v52 = *(_DWORD *)(*v46 + v44 + 8);
                    unsigned int v49 = (unsigned int *)(v51 + 4 * (2 * v52));
                    float v50 = (unsigned int *)(v51 + 4 * ((2 * v52) | 1u));
                  }
                  int v53 = *(_DWORD *)(v48 + v44);
                  uint64_t v54 = *v50;
                  if (*((void *)&v107 + 1))
                  {
                    float v55 = *(float *)(v40[164] + 4);
                    if ((*(_DWORD *)(v40[144] + 4 * (((v53 - 1) / v42[1498]) >> 5)) >> ((v53 - 1) / v42[1498]))) {
                      float v56 = *(float *)(v40[145] + 4 * *v49);
                    }
                    else {
                      float v56 = (*(float (**)(uint64_t, void, float))(a1 + 392))(v41, *(void *)(a1 + 56), *((float *)&v109 + 3));
                    }
                    float v57 = (float)(v55 * v56) + 0.0;
                  }
                  else
                  {
                    float v57 = 0.0;
                  }
                  if ((void)v108)
                  {
                    float v58 = *(float *)(v40[164] + 8);
                    if ((*(_DWORD *)(v40[144] + 4 * (((v53 + 1) / v42[1498]) >> 5)) >> ((v53 + 1) / v42[1498]))) {
                      float v59 = *(float *)(v40[145] + 4 * v54);
                    }
                    else {
                      float v59 = (*(float (**)(uint64_t, void, float))(a1 + 392))(v41, *(void *)(a1 + 56), *(float *)&v110);
                    }
                    float v57 = v57 + (float)(v58 * v59);
                  }
                  if ((int)v42[1688] >= 2)
                  {
                    if (*((void *)&v108 + 1) && v53 >= 2)
                    {
                      float v60 = *(float *)(v40[164] + 12);
                      float v57 = v57
                          + (float)(v60
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v41, *(void *)(a1 + 56), *((float *)&v110 + 1)));
                    }
                    if ((void)v109 && v53 + 2 <= v105)
                    {
                      float v61 = *(float *)(v40[164] + 16);
                      float v57 = v57
                          + (float)(v61
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v41, *(void *)(a1 + 56), *((float *)&v110 + 2)));
                    }
                  }
                  uint64_t v62 = v40[138] + 32 * v4;
                  uint64_t v48 = *(void *)v62;
                  *(float *)(*(void *)v62 + v44 + 4) = (float)(v47 * v57) + *(float *)(*(void *)v62 + v44 + 4);
                  ++v45;
                  v44 += 12;
                }
                while (v45 < *(unsigned int *)(v62 + 16));
              }
            }
          }
          break;
        case 2:
          uint64_t v63 = *(void **)(a1 + 120);
          uint64_t v64 = v63[137];
          if (*(_DWORD *)(v64 + 1928) == 1)
          {
            uint64_t v65 = *(_DWORD **)(a1 + 112);
            if (v65[1688])
            {
              uint64_t v66 = v63[138];
              if (*(_DWORD *)(v66 + 32 * v4 + 16))
              {
                uint64_t v67 = 0;
                unint64_t v68 = 0;
                uint64_t v69 = (uint64_t *)(v66 + 32 * v4);
                float v70 = 1.0 - *(float *)(v63[169] + 4 * v4);
                int v71 = *(_DWORD *)(*(void *)(v64 + 568) + 11548) - 1;
                uint64_t v72 = *v69;
                do
                {
                  if (v65[1496]) {
                    uint64_t v73 = (unsigned int *)(*v69 + v67 + 8);
                  }
                  else {
                    uint64_t v73 = (unsigned int *)(*(void *)(v64 + 1064)
                  }
                                         + 4 * (2 * *(_DWORD *)(*v69 + v67 + 8)));
                  int v74 = *(_DWORD *)(v72 + v67);
                  if (*((void *)&v107 + 1))
                  {
                    float v75 = *(float *)(v63[164] + 4);
                    if ((*(_DWORD *)(v63[144] + 4 * (((v74 - 1) / v65[1498]) >> 5)) >> ((v74 - 1) / v65[1498]))) {
                      float v76 = *(float *)(v63[145] + 4 * *v73);
                    }
                    else {
                      float v76 = (*(float (**)(uint64_t, void, float))(a1 + 392))(v64, *(void *)(a1 + 56), *((float *)&v109 + 3));
                    }
                    float v77 = (float)(v75 * v76) + 0.0;
                  }
                  else
                  {
                    float v77 = 0.0;
                  }
                  if ((void)v108 && v74 < v71)
                  {
                    float v78 = *(float *)(v63[164] + 8);
                    float v77 = v77
                        + (float)(v78
                                * (*(float (**)(uint64_t, void, float))(a1 + 392))(v64, *(void *)(a1 + 56), *(float *)&v110));
                  }
                  if ((int)v65[1688] >= 2)
                  {
                    if (*((void *)&v108 + 1) && v74 >= 2)
                    {
                      float v79 = *(float *)(v63[164] + 12);
                      float v77 = v77
                          + (float)(v79
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v64, *(void *)(a1 + 56), *((float *)&v110 + 1)));
                    }
                    if ((void)v109 && v74 + 2 <= v71)
                    {
                      float v80 = *(float *)(v63[164] + 16);
                      float v77 = v77
                          + (float)(v80
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v64, *(void *)(a1 + 56), *((float *)&v110 + 2)));
                    }
                  }
                  uint64_t v81 = v63[138] + 32 * v4;
                  uint64_t v72 = *(void *)v81;
                  *(float *)(*(void *)v81 + v67 + 4) = (float)(v70 * v77) + *(float *)(*(void *)v81 + v67 + 4);
                  ++v68;
                  v67 += 12;
                }
                while (v68 < *(unsigned int *)(v81 + 16));
              }
            }
          }
          break;
        case 1:
          int v21 = *(void **)(a1 + 120);
          uint64_t v22 = v21[137];
          if (*(_DWORD *)(v22 + 1928) == 1)
          {
            int v23 = *(_DWORD **)(a1 + 112);
            if (v23[1688])
            {
              uint64_t v24 = v21[138];
              if (*(_DWORD *)(v24 + 32 * v4 + 16))
              {
                uint64_t v25 = 0;
                unint64_t v26 = 0;
                float v27 = 1.0 - *(float *)(v21[169] + 4 * v4);
                int v103 = *(_DWORD *)(*(void *)(v22 + 568) + 11548) - 1;
                int v104 = (uint64_t *)(v24 + 32 * v4);
                uint64_t v28 = *v104;
                do
                {
                  if (v23[1496]) {
                    uint64_t v29 = (unsigned int *)(*v104 + v25 + 8);
                  }
                  else {
                    uint64_t v29 = (unsigned int *)(*(void *)(v22 + 1064) + 4 * ((2 * *(_DWORD *)(*v104 + v25 + 8)) | 1u));
                  }
                  int v30 = *(_DWORD *)(v28 + v25);
                  uint64_t v31 = *v29;
                  float v32 = 0.0;
                  if (*((void *)&v107 + 1)) {
                    BOOL v33 = v30 < 1;
                  }
                  else {
                    BOOL v33 = 1;
                  }
                  if (!v33)
                  {
                    float v34 = *(float *)(v21[164] + 4);
                    float v32 = (float)(v34
                                * (*(float (**)(uint64_t, void, float))(a1 + 392))(v22, *(void *)(a1 + 56), *((float *)&v109 + 3)))+ 0.0;
                  }
                  if ((void)v108)
                  {
                    int v35 = v30 + 1;
                    if ((*(_DWORD *)(v21[144] + 4 * ((v35 / v23[1498]) >> 5)) >> (v35 / v23[1498])))
                    {
                      float v32 = v32 + (float)(*(float *)(v21[164] + 8) * *(float *)(v21[145] + 4 * v31));
                    }
                    else
                    {
                      float v36 = (*(float (**)(uint64_t, void, float))(a1 + 392))(v22, *(void *)(a1 + 56), *(float *)&v110);
                      float v32 = v32 + (float)(*(float *)(v21[164] + 8) * v36);
                      *(_DWORD *)(v21[144] + 4 * ((v35 / v23[1498]) >> 5)) |= 1 << (v35 / v23[1498]);
                      *(float *)(v21[145] + 4 * v31) = v36;
                    }
                  }
                  if ((int)v23[1688] >= 2)
                  {
                    if (*((void *)&v108 + 1) && v30 >= 2)
                    {
                      float v37 = *(float *)(v21[164] + 12);
                      float v32 = v32
                          + (float)(v37
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v22, *(void *)(a1 + 56), *((float *)&v110 + 1)));
                    }
                    if ((void)v109 && v30 + 2 <= v103)
                    {
                      float v38 = *(float *)(v21[164] + 16);
                      float v32 = v32
                          + (float)(v38
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v22, *(void *)(a1 + 56), *((float *)&v110 + 2)));
                    }
                  }
                  uint64_t v39 = v21[138] + 32 * v4;
                  uint64_t v28 = *(void *)v39;
                  *(float *)(*(void *)v39 + v25 + 4) = (float)(v27 * v32) + *(float *)(*(void *)v39 + v25 + 4);
                  ++v26;
                  v25 += 12;
                }
                while (v26 < *(unsigned int *)(v39 + 16));
              }
            }
          }
          break;
        default:
          long long v82 = *(void **)(a1 + 120);
          uint64_t v83 = v82[137];
          if (*(_DWORD *)(v83 + 1928) == 1)
          {
            uint64_t v84 = *(void *)(a1 + 112);
            if (*(_DWORD *)(v84 + 6752))
            {
              uint64_t v85 = v82[138];
              if (*(_DWORD *)(v85 + 32 * v4 + 16))
              {
                uint64_t v86 = 0;
                unint64_t v87 = 0;
                float v88 = 1.0 - *(float *)(v82[169] + 4 * v4);
                int v89 = *(_DWORD *)(*(void *)(v83 + 568) + 11548) - 1;
                uint64_t v90 = *(void *)(v85 + 32 * v4);
                do
                {
                  int v91 = *(_DWORD *)(v90 + v86);
                  if (*((void *)&v107 + 1)) {
                    BOOL v92 = v91 < 1;
                  }
                  else {
                    BOOL v92 = 1;
                  }
                  float v93 = 0.0;
                  if (!v92)
                  {
                    float v94 = *(float *)(v82[164] + 4);
                    float v93 = (float)(v94
                                * (*(float (**)(uint64_t, void, float))(a1 + 392))(v83, *(void *)(a1 + 56), *((float *)&v109 + 3)))+ 0.0;
                  }
                  if ((void)v108) {
                    BOOL v95 = v91 < v89;
                  }
                  else {
                    BOOL v95 = 0;
                  }
                  if (v95)
                  {
                    float v96 = *(float *)(v82[164] + 8);
                    float v93 = v93
                        + (float)(v96
                                * (*(float (**)(uint64_t, void, float))(a1 + 392))(v83, *(void *)(a1 + 56), *(float *)&v110));
                  }
                  if (*(int *)(v84 + 6752) >= 2)
                  {
                    if (*((void *)&v108 + 1) && v91 >= 2)
                    {
                      float v97 = *(float *)(v82[164] + 12);
                      float v93 = v93
                          + (float)(v97
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v83, *(void *)(a1 + 56), *((float *)&v110 + 1)));
                    }
                    if ((void)v109 && v91 + 2 <= v89)
                    {
                      float v98 = *(float *)(v82[164] + 16);
                      float v93 = v93
                          + (float)(v98
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v83, *(void *)(a1 + 56), *((float *)&v110 + 2)));
                    }
                  }
                  uint64_t v99 = v82[138] + 32 * v4;
                  uint64_t v90 = *(void *)v99;
                  *(float *)(*(void *)v99 + v86 + 4) = (float)(v88 * v93) + *(float *)(*(void *)v99 + v86 + 4);
                  ++v87;
                  v86 += 12;
                }
                while (v87 < *(unsigned int *)(v99 + 16));
              }
            }
          }
          break;
      }
    }
    uint64_t v100 = *(void *)(a1 + 136);
    unsigned int v101 = *(_DWORD *)(*(void *)(a1 + 112) + 5564);
    uint64_t updated = v106;
    if (*(_DWORD *)(*(void *)(v100 + 16) + 32 * v4 + 16) > v101)
    {
      uint64_t updated = mfs_CostList_Select(v100, v4, 1, v101);
      UNICORN__mfs_CostList_Prune(*(void **)(a1 + 136), v4, *(_DWORD *)(*(void *)(a1 + 112) + 5564));
    }
    UNICORN__log_select_Diag(*(void *)(a1 + 56), 11, (uint64_t)"costlist(%d)\n");
  }
  return updated;
}

uint64_t select_bet5_loadVoice(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)__s2 = 0u;
  long long v23 = 0u;
  v19[1] = 0;
  v20[0] = a2;
  v20[1] = 1;
  v19[0] = a2;
  if (a5)
  {
    uint64_t VAOBrokerString = betX_CreateVAOBrokerString(a2, 1, __s2, 0x100uLL, 0);
    unsigned int v11 = v19;
    if ((VAOBrokerString & 0x80000000) != 0) {
      return VAOBrokerString;
    }
  }
  else
  {
    uint64_t VAOBrokerString = betX_CreateRegularBrokerString(a2, 0, __s2, 0x100uLL);
    unsigned int v11 = v20;
    if ((VAOBrokerString & 0x80000000) != 0) {
      return VAOBrokerString;
    }
  }
  if (a3)
  {
    int v12 = strcmp(a3, __s2);
    uint64_t v13 = *(void *)(a1 + 48);
    if (!v12)
    {
      uint64_t Object = objc_GetObject(v13, (uint64_t)__s2, &v21);
      uint64_t VAOBrokerString = Object;
      if (!a5 && (Object & 0x80000000) == 0)
      {
        objc_ReleaseObject(*(void *)(a1 + 48), (uint64_t)a3);
        uint64_t v16 = *(void *)(v21 + 32);
        *(void *)a4 = v16;
        *(_DWORD *)(a4 + 8) = 117;
LABEL_18:
        paramc_ParamSetStr(*(void *)(a2 + 40), (uint64_t)"voicecomponentid", (char *)(v16 + 43362));
        paramc_ParamSetInt(*(void *)(a2 + 40), (uint64_t)"bet5nstatesperphoneme", *(_DWORD *)(v16 + 11912));
        return VAOBrokerString;
      }
      goto LABEL_12;
    }
    objc_ReleaseObject(v13, (uint64_t)a3);
  }
  AddRefCounteduint64_t Object = objc_GetAddRefCountedObject(*(void *)(a1 + 48), (uint64_t)__s2, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))ObjcVoiceOpen, (void (*)(void, void, long long *))ObjcVoiceClose, (uint64_t)v11, &v21);
  uint64_t VAOBrokerString = AddRefCountedObject;
  if (a5 && (AddRefCountedObject & 0x80000000) != 0)
  {
    uint64_t v15 = betX_CreateVAOBrokerString(a2, 1, __s2, 0x100uLL, 1);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
    uint64_t VAOBrokerString = objc_GetAddRefCountedObject(*(void *)(a1 + 48), (uint64_t)__s2, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))ObjcVoiceOpen, (void (*)(void, void, long long *))ObjcVoiceClose, (uint64_t)v20, &v21);
  }
LABEL_12:
  if ((VAOBrokerString & 0x80000000) == 0)
  {
    uint64_t v16 = *(void *)(v21 + 32);
    *(void *)a4 = v16;
    *(_DWORD *)(a4 + 8) = 117;
    if (!a5) {
      goto LABEL_18;
    }
  }
  return VAOBrokerString;
}

uint64_t ObjcVoiceOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  float v50 = 0;
  uint64_t v51 = 0;
  int v9 = *((_DWORD *)a5 + 2);
  uint64_t v10 = *a5;
  __src = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &__src);
  if ((result & 0x80000000) == 0)
  {
    memcpy(__dst, __src, sizeof(__dst));
    uint64_t v13 = *(void *)(v10 + 32);
    uint64_t v12 = *(void *)(v10 + 40);
    _OWORD __dst[4] = v13;
    __dst[5] = v12;
    int v14 = ssftriff_reader_ObjOpen(a1, a2, 2 * (v9 == 0), a3, "SEL5", 1031, (uint64_t *)&v51);
    if (v14 < 0)
    {
      return (v14 & 0x1FFFu) - 2065686528;
    }
    else
    {
      uint64_t v15 = heap_Calloc((void *)__dst[1], 1, 43432);
      uint64_t v20 = v15;
      if (v15)
      {
        *(void *)(a4 + 32) = v15;
        __strcpy_chk();
        __strcpy_chk();
        *(void *)&long long v21 = -1;
        *((void *)&v21 + 1) = -1;
        *(_OWORD *)(v20 + 16528) = v21;
        *(_OWORD *)(v20 + 16544) = v21;
        *(_OWORD *)(v20 + 16560) = v21;
        *(_OWORD *)(v20 + 16576) = v21;
        *(_OWORD *)(v20 + 16592) = v21;
        *(_OWORD *)(v20 + 16608) = v21;
        *(_OWORD *)(v20 + 16624) = v21;
        *(_OWORD *)(v20 + 16640) = v21;
        *(_OWORD *)(v20 + 16656) = v21;
        *(_OWORD *)(v20 + 16672) = v21;
        *(_OWORD *)(v20 + 16688) = v21;
        *(_OWORD *)(v20 + 16704) = v21;
        *(_OWORD *)(v20 + 16720) = v21;
        *(_OWORD *)(v20 + 16736) = v21;
        *(_OWORD *)(v20 + 16752) = v21;
        *(_OWORD *)(v20 + 16768) = v21;
        *(_OWORD *)(v20 + 17700) = v21;
        *(_OWORD *)(v20 + 17432) = v21;
        *(_OWORD *)(v20 + 17448) = v21;
        *(_OWORD *)(v20 + 17464) = v21;
        *(_OWORD *)(v20 + 17480) = v21;
        *(_OWORD *)(v20 + 17496) = v21;
        *(_OWORD *)(v20 + 17512) = v21;
        *(_OWORD *)(v20 + 17528) = v21;
        *(_OWORD *)(v20 + 17544) = v21;
        *(_OWORD *)(v20 + 17560) = v21;
        *(_OWORD *)(v20 + 17576) = v21;
        *(_OWORD *)(v20 + 17592) = v21;
        *(_OWORD *)(v20 + 17608) = v21;
        *(_OWORD *)(v20 + 17624) = v21;
        *(_OWORD *)(v20 + 17640) = v21;
        *(_OWORD *)(v20 + 17656) = v21;
        *(_OWORD *)(v20 + 17672) = v21;
        *(_OWORD *)(v20 + 17688) = v21;
        *(_OWORD *)(v20 + 17776) = v21;
        *(_OWORD *)(v20 + 17760) = v21;
        *(_DWORD *)(v20 + 16908) = 1;
        *(unsigned char *)(v20 + 43362) = 0;
        UNICORN__mfs_InitParam(v20 + 256);
        memset(v52, 0, sizeof(v52));
        *(_DWORD *)(v20 + 43428) = 0;
        if ((paramc_ParamGetStr(v12, (uint64_t)"bet5odlbnf", &v50) & 0x80000000) == 0
          && v50
          && *v50
          && memchr("yYtT1", (char)*v50, 6uLL))
        {
          *(_DWORD *)(v20 + 43428) = 1;
        }
        unsigned int v23 = select_bet5_ParseRiff(__dst, v20, (uint64_t)v51, 0, (const char *)v52, 0, 0, v22);
        if ((v23 & 0x80000000) != 0)
        {
          unsigned int Data = v23;
          LOBYTE(v53[0]) = 0;
          if (LOBYTE(v52[0]))
          {
            unsigned int v43 = 1;
            do
            {
              __strcat_chk();
              __strcat_chk();
              uint64_t v44 = (char *)v52 + 5 * v43++;
            }
            while (*v44);
          }
          log_OutPublic(__dst[4], (uint64_t)"SELECT_BET5", 58003, "%s%s%s%s%s%x", v24, v25, v26, v27, "file");
        }
        else if (*(unsigned char *)(v20 + 5071) && *(int *)(v20 + 388) > 0)
        {
          long long v28 = *(uint64_t **)(v20 + 16848);
          if (v28)
          {
            uint64_t v29 = *v28;
            if (v29)
            {
              uint64_t v30 = 0;
              unsigned int v31 = 1;
              do
              {
                *(void *)(v20 + 8 * v30 + 2984) = v29;
                uint64_t v30 = v31;
                uint64_t v29 = *(void *)(*(void *)(v20 + 16848) + 8 * v31++);
              }
              while (v29);
            }
          }
          log_OutText(__dst[4], (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Memory mapped %s: %lu bytes in %lu chunks", v25, v26, v27, (uint64_t)a3);
          unsigned int inited = UNICORN__mfs_InitData((uint64_t)__dst, (void *)(v20 + 11912), (_DWORD *)(v20 + 256));
          if ((inited & 0x80000000) != 0)
          {
            unsigned int Data = inited;
          }
          else
          {
            unsigned int Data = UNICORN__mfs_LoadData((uint64_t)__dst, (uint64_t)a3, *(_DWORD *)(v20 + 43428), (int32x2_t *)(v20 + 11912), (int32x2_t *)(v20 + 256));
            if ((Data & 0x80000000) == 0)
            {
              *(_WORD *)(v20 + 17962) = *(_DWORD *)(v20 + 11912);
              *(_DWORD *)(v20 + 17964) = *(_DWORD *)(v20 + 6240);
              *(_DWORD *)(v20 + 17134) = 33620481;
              *(unsigned char *)(v20 + 17187) = 1;
              *(void *)(v20 + 17139) = 0x101010101010101;
              *(void *)(v20 + 17147) = 0x101010101010101;
              *(_DWORD *)(v20 + 17157) = 16843009;
              *(unsigned char *)(v20 + 17161) = 1;
              *(_DWORD *)(v20 + 17163) = 16843009;
              *(_DWORD *)(v20 + 17166) = 16843009;
              *(_WORD *)(v20 + 17185) = -1;
              *(unsigned char *)(v20 + 17156) = 8;
              *(unsigned char *)(v20 + 17178) = 9;
              *(void *)(v20 + 17195) = 0x101010101010101;
              *(_WORD *)(v20 + 17208) = 257;
              *(_DWORD *)(v20 + 17204) = 16843009;
              *(void *)&long long v41 = 0x101010101010101;
              *((void *)&v41 + 1) = 0x101010101010101;
              *(_OWORD *)(v20 + 17313) = v41;
              *(_OWORD *)(v20 + 17301) = v41;
              *(_OWORD *)(v20 + 17285) = v41;
              *(_OWORD *)(v20 + 17269) = v41;
              *(_OWORD *)(v20 + 17253) = v41;
              uint64_t v42 = __dst[5];
              v53[0] = 0;
              if ((paramc_ParamGetUInt(__dst[5], (uint64_t)"bet5underrunthreshold", v53) & 0x80000000) == 0) {
                *(_DWORD *)(v20 + 6180) = v53[0];
              }
              if ((paramc_ParamGetUInt(v42, (uint64_t)"bet5earlyemissionmaxhypotheses", v53) & 0x80000000) == 0) {
                *(_DWORD *)(v20 + 6184) = v53[0];
              }
              if ((paramc_ParamGetUInt(v42, (uint64_t)"bet5earlyemissionmaxphonambiguitywindow", v53) & 0x80000000) == 0) {
                *(_DWORD *)(v20 + 6188) = v53[0];
              }
            }
          }
        }
        else
        {
          log_OutPublic(__dst[4], (uint64_t)"SELECT_BET5", 71002, "%s%s", v24, v25, v26, v27, "file");
          unsigned int Data = -2065686524;
        }
      }
      else
      {
        log_OutPublic(v13, (uint64_t)"SELECT_BET5", 71000, 0, v16, v17, v18, v19, v47);
        unsigned int Data = -2065686518;
      }
      if (v51)
      {
        ssftriff_reader_ObjClose(v51, v33, v34, v35, v36, v37, v38, v39);
        uint64_t v51 = 0;
      }
      int v45 = Data & 0x7FF01FFF;
      if ((Data & 0x7FF01FFF) == 0xA200014) {
        uint64_t result = 2229280772;
      }
      else {
        uint64_t result = Data;
      }
      if (v45 == 169869332) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = v20;
      }
      if (v20)
      {
        if (v45 == 169869332)
        {
          heap_Free((void *)__dst[1], v20);
          uint64_t v46 = 0;
          uint64_t result = 2229280772;
        }
      }
      *(void *)(a4 + 32) = v46;
    }
  }
  return result;
}

uint64_t ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v39 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v39);
  uint64_t v5 = inited;
  if (a3 && (inited & 0x80000000) == 0)
  {
    uint64_t v6 = *(void *)(a3 + 32);
    uint64_t v7 = *(void **)(v6 + 16848);
    if (v7 && *v7)
    {
      uint64_t v8 = 2984;
      do
      {
        *(void *)(v6 + v8) = 0;
        uint64_t v9 = *(void *)(*(void *)(v6 + 16848) + v8 - 2976);
        v8 += 8;
      }
      while (v9);
    }
    uint64_t v10 = *(void *)(v6 + 17752);
    if (v10)
    {
      heap_Free((void *)v39[1], v10);
      *(void *)(v6 + 17752) = 0;
    }
    uselect_FreeRiffStringTable(v39, *(uint64_t **)(v6 + 5296));
    *(void *)(v6 + 5296) = 0;
    uselect_FreeRiffStringTable(v39, *(uint64_t **)(v6 + 17816));
    uselect_FreeRiffStringTable(v39, *(uint64_t **)(v6 + 17808));
    unsigned int v11 = v39;
    uint64_t v12 = *(uint64_t **)(v6 + 17720);
    uint64_t v13 = *(uint64_t ***)(v6 + 17728);
    int v14 = *(uint64_t **)(v6 + 17736);
    if (v12)
    {
      uint64_t v15 = *v12;
      if (*v12)
      {
        int v16 = 0;
        do
        {
          heap_Free((void *)v11[1], v15);
          uint64_t v15 = v12[(unsigned __int16)++v16];
        }
        while (v15);
      }
      heap_Free((void *)v11[1], (uint64_t)v12);
    }
    uint64_t v17 = (_WORD *)(v6 + 42784);
    if (v13)
    {
      uint64_t v18 = *v13;
      if (*v13)
      {
        int v19 = 0;
        uint64_t v20 = v13;
        do
        {
          uint64_t v21 = *v18;
          if (*v18)
          {
            int v22 = 0;
            do
            {
              heap_Free((void *)v11[1], v21);
              ++v22;
              uint64_t v18 = *v20;
              uint64_t v21 = (*v20)[(unsigned __int16)v22];
            }
            while (v21);
          }
          heap_Free((void *)v11[1], (uint64_t)v18);
          uint64_t v20 = &v13[(unsigned __int16)++v19];
          uint64_t v18 = *v20;
        }
        while (*v20);
      }
      heap_Free((void *)v11[1], (uint64_t)v13);
    }
    if (v14)
    {
      uint64_t v23 = *v14;
      if (*v14)
      {
        int v24 = 0;
        do
        {
          heap_Free((void *)v11[1], v23);
          uint64_t v23 = v14[(unsigned __int16)++v24];
        }
        while (v23);
      }
      heap_Free((void *)v11[1], (uint64_t)v14);
    }
    uselect_FreeRiffStringTable(v39, *(uint64_t **)(v6 + 16848));
    uselect_FreeRiffStringTable(v39, *(uint64_t **)(v6 + 16856));
    mfs_DeInitDataAndParam(v39, v6 + 11912, (void *)(v6 + 256));
    uselect_FreeRiffStringTable(v39, *(uint64_t **)(v6 + 42800));
    uint64_t v31 = *(void *)(v6 + 42792);
    if (v31)
    {
      long long v32 = v39;
      if (*v17)
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        do
        {
          uint64_t v35 = *(void *)(v6 + 42792);
          uint64_t v36 = *(void *)(v35 + v33);
          if (v36)
          {
            heap_Free((void *)v32[1], v36);
            uint64_t v35 = *(void *)(v6 + 42792);
          }
          uselect_FreeRiffStringTable(v32, *(uint64_t **)(v35 + v33 + 8));
          ++v34;
          v33 += 16;
        }
        while (v34 < (unsigned __int16)*v17);
        uint64_t v31 = *(void *)(v6 + 42792);
      }
      heap_Free((void *)v32[1], v31);
      *(void *)(v6 + 42792) = 0;
      *uint64_t v17 = 0;
    }
    if (*(_WORD *)(v6 + 43360))
    {
      unint64_t v37 = 0;
      do
        ssftriff_reader_ReleaseChunkData(*(void **)(v6 + 42848 + 8 * v37++), v31, v25, v26, v27, v28, v29, v30);
      while (v37 < *(unsigned __int16 *)(v6 + 43360));
    }
    *(_WORD *)(v6 + 43360) = 0;
    *(unsigned char *)uint64_t v6 = 0;
    heap_Free((void *)v39[1], v6);
  }
  return v5;
}

uint64_t select_bet5_GetUSVoice(uint64_t a1, int a2)
{
  if ((int)safeh_HandleCheck(a1, a2, 117, 43432) >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    return v3 + 14384;
  }
  else {
    return 0;
  }
}

uint64_t select_bet5_GetVParam(uint64_t a1, int a2)
{
  if ((int)safeh_HandleCheck(a1, a2, 117, 43432) >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    return v3 + 256;
  }
  else {
    return 0;
  }
}

uint64_t select_bet5_GetNNFeatexData(uint64_t a1, int a2)
{
  if ((int)safeh_HandleCheck(a1, a2, 117, 43432) >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    return v3 + 42784;
  }
  else {
    return 0;
  }
}

uint64_t select_bet5_GetTransWeightRulesDiph(uint64_t a1, int a2, _DWORD *a3)
{
  if ((int)safeh_HandleCheck(a1, a2, 117, 43432) >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a3 && v5)
  {
    *a3 = *(_DWORD *)(v5 + 42824);
    return *(void *)(v5 + 42816);
  }
  if (v5) {
    return *(void *)(v5 + 42816);
  }
  return 0;
}

uint64_t select_bet5_GetTransWeightRulesPhon(uint64_t a1, int a2, _DWORD *a3)
{
  if ((int)safeh_HandleCheck(a1, a2, 117, 43432) >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a3 && v5)
  {
    *a3 = *(_DWORD *)(v5 + 42840);
    return *(void *)(v5 + 42832);
  }
  if (v5) {
    return *(void *)(v5 + 42832);
  }
  return 0;
}

uint64_t select_bet5_ParseRiff(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v807 = a7;
  uint64_t v8 = a6;
  uint64_t v11 = a3;
  unsigned int v799 = 0;
  uint64_t v829 = *MEMORY[0x263EF8340];
  v797 = (unsigned __int16 *)(a2 + 42784);
  uint64_t v800 = a2 + 42844;
  int v824 = 0;
  unsigned __int8 v823 = 0;
  *(_DWORD *)__src = 0;
  uint64_t v13 = (char *)&a5[5 * a4];
  v781 = (void *)(a2 + 5036);
  __dst = (void *)(a2 + 16884);
  v808 = (float *)(a2 + 11824);
  v759 = (void *)(a2 + 8032);
  v760 = (void *)(a2 + 8632);
  v761 = (void *)(a2 + 8512);
  v762 = (void *)(a2 + 8392);
  v763 = (void *)(a2 + 9832);
  v764 = (void *)(a2 + 10552);
  v765 = (void *)(a2 + 10192);
  v766 = (void *)(a2 + 10432);
  v767 = (void *)(a2 + 9712);
  v768 = (void *)(a2 + 9592);
  v769 = (void *)(a2 + 9472);
  v770 = (void *)(a2 + 9352);
  v771 = (void *)(a2 + 9256);
  v772 = (void *)(a2 + 9232);
  v773 = (void *)(a2 + 9112);
  v774 = (void *)(a2 + 8056);
  v777 = (void *)(a2 + 10072);
  v782 = (void *)(a2 + 8272);
  v785 = (void *)(a2 + 7312);
  v788 = (void *)(a2 + 8872);
  v798 = (uint64_t *)(a2 + 5296);
  v790 = (uint64_t *)(a2 + 42800);
  v784 = (void *)(a2 + 42832);
  v787 = (void *)(a2 + 42816);
  v793 = (uint64_t *)(a2 + 17816);
  v795 = (uint64_t *)(a2 + 17808);
  v775 = (uint64_t *)(a2 + 16856);
  v776 = (uint64_t *)(a2 + 16848);
  v780 = (uint64_t *)(a2 + 17720);
  v779 = (uint64_t *)(a2 + 17728);
  v778 = (uint64_t *)(a2 + 17736);
  v783 = (unsigned char *)(a2 + 42656);
  v786 = (unsigned char *)(a2 + 16784);
  v789 = (unsigned char *)(a2 + 15757);
  v791 = (unsigned char *)(a2 + 16014);
  v794 = (unsigned char *)(a2 + 15500);
  v796 = (unsigned char *)(a2 + 15243);
  __s = (char *)(a2 + 14986);
  uint64_t v802 = a2 + 11880;
  uint64_t v801 = a2 + 11888;
  int v14 = a5 + 5;
  v805 = v13;
  v818 = a5 + 5;
  do
  {
    LODWORD(ChunkData) = ssftriff_reader_OpenChunk(v11, __src, (unsigned int *)&v824, 0, (uint64_t)a5, a6, a7, a8);
    if ((ChunkData & 0x80000000) != 0) {
      break;
    }
    strcpy(v13, __src);
    if (a4 == 1)
    {
      if (!(*(_DWORD *)__src ^ 0x47545356 | v823))
      {
        LODWORD(v820) = 0;
        *(void *)__s1 = 0;
        if (v8)
        {
          *(void *)__s1 = v8 + ssftriff_reader_GetPosition(v11) - v807;
        }
        else
        {
          uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, __s1, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) != 0) {
            return ChunkData;
          }
        }
        LOBYTE(v826[0]) = 0;
        v827[0] = 0;
        unsigned int v69 = v824;
        if (v824)
        {
          unsigned int v70 = 0;
          while (1)
          {
            LODWORD(v820) = 1024;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)__s1, v69, v70, v827, (unsigned int *)&v820);
            if ((ChunkData & 0x80000000) == 0 && v70 < v824)
            {
              v70 += v820;
              LODWORD(v820) = 1024;
              LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)__s1, v824, v70, v826, (unsigned int *)&v820);
            }
            if ((ChunkData & 0x80000000) != 0) {
              break;
            }
            int v71 = (int)v820;
            if (*(void *)v827 == 0x495255444E41454DLL && *(void *)&v827[6] == 0x534345534E4952)
            {
              float v73 = atof((const char *)v826);
              float *v808 = v73;
            }
            if (*(void *)v827 == 0x5255445645445453 && *(void *)&v827[7] == 0x534345534E4952)
            {
              float v75 = atof((const char *)v826);
              *(float *)(a2 + 11828) = v75;
            }
            if (!(*(void *)v827 ^ 0x495255444E41454DLL | *(void *)&v827[8] ^ 0x474F4C534345534ELL | v827[16]))
            {
              float v76 = atof((const char *)v826);
              *(float *)(a2 + 11832) = v76;
            }
            if (*(void *)v827 == 0x5255445645445453
              && *(void *)&v827[8] == 0x4F4C534345534E49
              && *(unsigned __int16 *)&v827[16] == 71)
            {
              float v79 = atof((const char *)v826);
              *(float *)(a2 + 11836) = v79;
            }
            if (*(void *)v827 == 0x5446454C4E41454DLL && *(void *)&v827[6] == 0x48435449505446)
            {
              float v81 = atof((const char *)v826);
              *(float *)(a2 + 11840) = v81;
            }
            if (*(void *)v827 == 0x46454C5645445453 && *(void *)&v827[7] == 0x48435449505446)
            {
              float v83 = atof((const char *)v826);
              *(float *)(a2 + 11844) = v83;
            }
            if (*(void *)v827 == 0x484749524E41454DLL && *(void *)&v827[7] == 0x48435449505448)
            {
              float v85 = atof((const char *)v826);
              *(float *)(a2 + 11848) = v85;
            }
            if (*(void *)v827 == 0x4749525645445453 && *(void *)&v827[8] == 0x48435449505448)
            {
              float v87 = atof((const char *)v826);
              *(float *)(a2 + 11852) = v87;
            }
            if (*(void *)v827 == 0x504F4C534E41454DLL && *(void *)&v827[7] == 0x48435449504550)
            {
              float v89 = atof((const char *)v826);
              *(float *)(a2 + 11856) = v89;
            }
            if (*(void *)v827 == 0x4F4C535645445453 && *(void *)&v827[8] == 0x48435449504550)
            {
              float v91 = atof((const char *)v826);
              *(float *)(a2 + 11860) = v91;
            }
            v70 += v71;
            unsigned int v69 = v824;
            int v14 = v818;
            if (v70 >= v824) {
              goto LABEL_242;
            }
          }
LABEL_241:
          int v14 = v818;
        }
LABEL_242:
        uint64_t v13 = v805;
        uint64_t v8 = a6;
        goto LABEL_2044;
      }
      if (!(*(_DWORD *)__src ^ 0x43545356 | v823))
      {
        *(void *)v827 = 0;
        if (v8)
        {
          *(void *)v827 = v8 + ssftriff_reader_GetPosition(v11) - v807;
        }
        else
        {
          uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v827, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) != 0) {
            return ChunkData;
          }
        }
        unint64_t v119 = v824;
        if (v824 < 4) {
          LODWORD(ChunkData) = -2065686524;
        }
        if ((ChunkData & 0x80000000) == 0)
        {
          uint64_t v120 = *(void *)v827 + 4;
          int v121 = **(_DWORD **)v827;
          *(_DWORD *)(a2 + 11864) = **(_DWORD **)v827;
          *(void *)v827 = v120;
          LODWORD(ChunkData) = -2065686524;
          if (v119 >= 4 * (unint64_t)(v121 + 1))
          {
            LODWORD(ChunkData) = StatValues_AllocMemoryForClusterCount((uint64_t)a1, (uint64_t)v808);
            if ((ChunkData & 0x80000000) == 0)
            {
              if (*(_DWORD *)(a2 + 11864))
              {
                unint64_t v122 = 0;
                BOOL v123 = *(_DWORD **)v827;
                do
                {
                  *(_DWORD *)(*(void *)(a2 + 11872) + 4 * v122) = *v123;
                  BOOL v123 = (_DWORD *)(*(void *)v827 + 4);
                  *(void *)v827 += 4;
                  ++v122;
                }
                while (v122 < *(unsigned int *)(a2 + 11864));
              }
            }
          }
        }
        goto LABEL_2044;
      }
      if (!(*(_DWORD *)__src ^ 0x31435356 | v823) || !(*(_DWORD *)__src ^ 0x32435356 | v823))
      {
        *(void *)v827 = 0;
        if (v8)
        {
          *(void *)v827 = v8 + ssftriff_reader_GetPosition(v11) - v807;
        }
        else
        {
          uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v827, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) != 0) {
            return ChunkData;
          }
        }
        unsigned int v92 = *(_DWORD *)(a2 + 11864);
        if (v92)
        {
          int v93 = 0;
          float v94 = *(int **)(a2 + 11872);
          uint64_t v95 = *(unsigned int *)(a2 + 11864);
          do
          {
            int v96 = *v94++;
            v93 += 4 * v96 + 4;
            --v95;
          }
          while (v95);
        }
        else
        {
          int v93 = 0;
        }
        if (v824 != v93) {
          LODWORD(ChunkData) = -2065686524;
        }
        if ((ChunkData & 0x80000000) == 0)
        {
          uint64_t v97 = *(_DWORD *)__src ^ 0x31435356 | v823 ? 11888 : 11880;
          float v98 = (uint64_t *)(*(_DWORD *)__src ^ 0x31435356 | v823 ? v801 : v802);
          LODWORD(ChunkData) = StatValues_AllocMemoryForClusterStatValues((uint64_t)a1, v98, v92, *(void *)(a2 + 11872));
          if ((ChunkData & 0x80000000) == 0)
          {
            unint64_t v99 = *(unsigned int *)(a2 + 11864);
            if (v99)
            {
              for (unint64_t i = 0; i < v99; ++i)
              {
                int v101 = *(_DWORD *)(*(void *)(a2 + 11872) + 4 * i);
                BOOL v102 = __CFADD__(v101, 1);
                unsigned int v103 = v101 + 1;
                if (!v102)
                {
                  uint64_t v104 = 0;
                  int v105 = *(_DWORD **)v827;
                  uint64_t v106 = 4 * v103;
                  do
                  {
                    *(_DWORD *)(*(void *)(*(void *)(a2 + v97) + 8 * i) + v104) = *v105;
                    int v105 = (_DWORD *)(*(void *)v827 + 4);
                    *(void *)v827 += 4;
                    v104 += 4;
                  }
                  while (v106 != v104);
                  unint64_t v99 = *(unsigned int *)(a2 + 11864);
                }
              }
            }
          }
        }
        goto LABEL_2043;
      }
      if (!strcmp(a5, "FEEX"))
      {
        if (*(_DWORD *)__src ^ 0x54414356 | v823)
        {
          if (!(*(_DWORD *)__src ^ 0x504F4256 | v823))
          {
            *(void *)v827 = 0;
            if (v8)
            {
              v642 = (const void *)(v8 + ssftriff_reader_GetPosition(v11) - v807);
              *(void *)v827 = v642;
            }
            else
            {
              uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v827, v22, v23, v24, v25, v26);
              if ((ChunkData & 0x80000000) != 0) {
                return ChunkData;
              }
              v642 = *(const void **)v827;
            }
            if (v824 >= 0xF8) {
              size_t v683 = 248;
            }
            else {
              size_t v683 = v824;
            }
            v684 = __dst;
LABEL_2019:
            memcpy(v684, v642, v683);
            goto LABEL_2044;
          }
          if (!(*(_DWORD *)__src ^ 0x33455250 | v823))
          {
            *(void *)v827 = 0;
            if (v8)
            {
              *(void *)v827 = v8 + ssftriff_reader_GetPosition(v11) - v807;
            }
            else
            {
              uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v827, v22, v23, v24, v25, v26);
              if ((ChunkData & 0x80000000) != 0) {
                return ChunkData;
              }
            }
            unsigned int v690 = v824;
            if (v824 >= 2)
            {
              unsigned __int16 v691 = 0;
              do
              {
                if (*(unsigned __int16 *)(*(void *)v827 + 2 * v691) < 0x47u)
                {
                  *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)(*(void *)v827 + 2 * v691) + 17432) = 1;
                }
                else
                {
                  log_OutText(a1[4], (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Unknown preselection feature: %u for %s", v659, v660, v661, *(unsigned __int16 *)(*(void *)v827 + 2 * v691));
                  unsigned int v690 = v824;
                }
                ++v691;
              }
              while (v690 >> 1 > v691);
            }
            goto LABEL_2043;
          }
          if (!(*(_DWORD *)__src ^ 0x33415254 | v823))
          {
            *(void *)v827 = 0;
            if (v8)
            {
              *(void *)v827 = v8 + ssftriff_reader_GetPosition(v11) - v807;
            }
            else
            {
              uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v827, v22, v23, v24, v25, v26);
              if ((ChunkData & 0x80000000) != 0) {
                return ChunkData;
              }
            }
            unsigned int v705 = v824;
            if (v824 >= 2)
            {
              unsigned __int16 v706 = 0;
              do
              {
                if (*(unsigned __int16 *)(*(void *)v827 + 2 * v706) < 8u)
                {
                  *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)(*(void *)v827 + 2 * v706) + 17760) = 1;
                }
                else
                {
                  log_OutText(a1[4], (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Unknown transition feature: %u for %s", v666, v667, v668, *(unsigned __int16 *)(*(void *)v827 + 2 * v706));
                  unsigned int v705 = v824;
                }
                ++v706;
              }
              while (v705 >> 1 > v706);
            }
            goto LABEL_2043;
          }
          if (!(*(_DWORD *)__src ^ 0x46415254 | v823))
          {
            *(void *)v827 = 0;
            if (v8)
            {
              v689 = (_DWORD *)(v8 + ssftriff_reader_GetPosition(v11) - v807);
              *(void *)v827 = v689;
            }
            else
            {
              uint64_t v643 = ssftriff_reader_GetChunkData(v11, v824, v827, v22, v23, v24, v25, v26);
              if ((v643 & 0x80000000) != 0) {
                return v643;
              }
              v689 = *(_DWORD **)v827;
            }
            *((_WORD *)__s + 1379) = *v689;
            ssftriff_reader_Seek(v11, 4u, 1);
            uint64_t v715 = heap_Calloc((void *)a1[1], 12, *((unsigned __int16 *)__s + 1379));
            *(void *)(a2 + 17752) = v715;
            if (!v715) {
              return 2229280778;
            }
            LODWORD(ChunkData) = select_bet5_ParseRiff(a1, a2, v11, 2, a5, 0, 0);
            goto LABEL_2043;
          }
          if (!(*(_DWORD *)__src ^ 0x334D4850 | v823))
          {
            *(void *)v827 = 0;
            if (v8)
            {
              v642 = (const void *)(v8 + ssftriff_reader_GetPosition(v11) - v807);
              *(void *)v827 = v642;
            }
            else
            {
              uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v827, v22, v23, v24, v25, v26);
              if ((ChunkData & 0x80000000) != 0) {
                return ChunkData;
              }
              v642 = *(const void **)v827;
            }
            if (v824 >= 0x100) {
              size_t v683 = 256;
            }
            else {
              size_t v683 = v824;
            }
            v684 = v781;
            goto LABEL_2019;
          }
          if (*(_DWORD *)__src ^ 0x52585443 | v823 && *(_DWORD *)__src ^ 0x45464E4E | v823) {
            goto LABEL_2040;
          }
        }
        else
        {
          *(void *)v827 = 0;
          if (v8)
          {
            *(void *)v827 = v8 + ssftriff_reader_GetPosition(v11) - v807;
          }
          else
          {
            uint64_t v643 = ssftriff_reader_GetChunkData(v11, v824, v827, v22, v23, v24, v25, v26);
            if ((v643 & 0x80000000) != 0) {
              return v643;
            }
          }
        }
        float v61 = a1;
        uint64_t v62 = a2;
        uint64_t v63 = v11;
        uint64_t v64 = 2;
LABEL_80:
        int RiffStringTable = select_bet5_ParseRiff(v61, v62, v63, v64, a5, 0, 0);
        goto LABEL_1986;
      }
      if (strcmp(a5, "STM3")) {
        goto LABEL_2040;
      }
      *(_DWORD *)__s1 = 0;
      uint64_t v31 = *(int *)(a2 + 388);
      if (*(_DWORD *)__src ^ 0x33435453 | v823)
      {
        if (*(_DWORD *)__src ^ 0x33455254 | v823)
        {
          if (*(_DWORD *)__src ^ 0x33464450 | v823)
          {
            if (*(_DWORD *)__src ^ 0x334E4957 | v823)
            {
              if (*(_DWORD *)__src ^ 0x34435453 | v823)
              {
                if (*(_DWORD *)__src ^ 0x34575453 | v823)
                {
                  if (*(_DWORD *)__src ^ 0x34504E55 | v823)
                  {
                    if (*(_DWORD *)__src ^ 0x34494350 | v823)
                    {
                      if (*(_DWORD *)__src ^ 0x3449434A | v823)
                      {
                        if (*(_DWORD *)__src ^ 0x3453434A | v823)
                        {
                          if (*(_DWORD *)__src ^ 0x5059544A | v823)
                          {
                            if (*(_DWORD *)__src ^ 0x4D53464A | v823)
                            {
                              if (*(_DWORD *)__src ^ 0x524D5346 | v823)
                              {
                                if (*(_DWORD *)__src ^ 0x4B42434A | v823) {
                                  goto LABEL_1937;
                                }
                                uint64_t v32 = v824;
                                uint64_t v33 = a2;
                                uint64_t v34 = v11;
                                unsigned int v35 = 24;
                              }
                              else
                              {
                                uint64_t v32 = v824;
                                uint64_t v33 = a2;
                                uint64_t v34 = v11;
                                unsigned int v35 = 16;
                              }
                            }
                            else
                            {
                              uint64_t v32 = v824;
                              uint64_t v33 = a2;
                              uint64_t v34 = v11;
                              unsigned int v35 = 9;
                            }
                          }
                          else
                          {
                            uint64_t v32 = v824;
                            uint64_t v33 = a2;
                            uint64_t v34 = v11;
                            unsigned int v35 = 14;
                          }
                        }
                        else
                        {
                          uint64_t v32 = v824;
                          uint64_t v33 = a2;
                          uint64_t v34 = v11;
                          unsigned int v35 = 7;
                        }
                      }
                      else
                      {
                        uint64_t v32 = v824;
                        uint64_t v33 = a2;
                        uint64_t v34 = v11;
                        unsigned int v35 = 6;
                      }
                      Mfsunsigned int Data = select_bet5_LoadMfsData(v33, v34, v35, v31, v32, v8, v807, 0);
                    }
                    else
                    {
                      Mfsunsigned int Data = select_bet5_ParseRiff(a1, a2, v11, 2, a5, v8, v807);
                    }
                    goto LABEL_2037;
                  }
                  if (v8)
                  {
                    int v816 = v824;
                    int v718 = *(_DWORD *)(a2 + 388);
                    int Position = ssftriff_reader_GetPosition(v11);
                    LODWORD(ChunkData) = 0;
                    uint64_t v720 = a2 + 24 * v718;
                    *(void *)(v720 + 7432) = v8 + Position - v807;
                    *(_DWORD *)(v720 + 7440) = v816;
                    int v14 = v818;
                  }
                  else
                  {
                    LODWORD(ChunkData) = -2065686527;
                  }
                }
                else
                {
                  *(void *)v815 = *(int *)(a2 + 388);
                  *(void *)v827 = 0;
                  if (v8)
                  {
                    v714 = (_DWORD *)(v8 + ssftriff_reader_GetPosition(v11) - v807);
                    *(void *)v827 = v714;
                  }
                  else
                  {
                    uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v827, v31, v27, v28, v29, v30);
                    if ((ChunkData & 0x80000000) != 0) {
                      return ChunkData;
                    }
                    v714 = *(_DWORD **)v827;
                  }
                  uint64_t v729 = a2 + 4 * *(void *)v815;
                  *(_DWORD *)(v729 + 5700) = *v714;
                  *(void *)v827 = v714 + 1;
                  *(_DWORD *)(v729 + 5720) = v714[1];
                }
LABEL_2038:
                int v141 = 1;
                goto LABEL_2039;
              }
              uint64_t v698 = *(int *)(a2 + 388);
              LODWORD(v820) = 0;
              v826[0] = 0;
              if (v8)
              {
                v699 = (int *)(v8 + ssftriff_reader_GetPosition(v11) - v807);
                v826[0] = (uint64_t)v699;
              }
              else
              {
                uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v826, v31, v27, v28, v29, v30);
                if ((ChunkData & 0x80000000) != 0) {
                  return ChunkData;
                }
                v699 = (int *)v826[0];
              }
              v722 = (int *)(a2 + 4 * v698 + 460);
              int v721 = *v722;
              v722[1305] = *v699;
              v826[0] = (uint64_t)(v699 + 1);
              v722[1320] = v699[1];
              v722[1331] = v699[2];
              v722[1461] = v699[3];
              v722[1451] = v699[4];
              v722[1456] = v699[5];
              v722[1469] = v699[6];
              v722[1474] = v699[7];
              v826[0] = (uint64_t)(v699 + 8);
              if (v721 >= 1)
              {
                v723 = (int *)(a2 + 4 * v698 + 460);
                uint64_t v724 = 0;
                v725 = (void *)(a2 + 8 * v698 + 1464);
                unsigned int v726 = *(_DWORD *)__s1;
                do
                {
                  v827[0] = 0;
                  LODWORD(v820) = 256;
                  LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, v826[0], v824, v726, v827, (unsigned int *)&v820);
                  if ((ChunkData & 0x80000000) != 0) {
                    break;
                  }
                  *(void *)(*v725 + 8 * v724) = BET3FLT__heap_StrDup((void *)a1[1], v827);
                  if (!*(void *)(*v725 + 8 * v724)) {
                    goto LABEL_2111;
                  }
                  unsigned int v726 = *(_DWORD *)__s1 + v820;
                  *(_DWORD *)__s1 += v820;
                  ++v724;
                }
                while (v724 < *v723);
              }
LABEL_291:
              int v141 = 1;
              uint64_t v13 = v805;
              uint64_t v8 = a6;
LABEL_292:
              int v14 = v818;
              goto LABEL_2039;
            }
            uint64_t v687 = a2 + 256 + 4 * v31;
            int v688 = *(_DWORD *)(v687 + 224);
            uint64_t v658 = a2 + 256 + 120 * (int)v31 + 24 * v688 + 2008;
            *(_DWORD *)(v687 + 224) = v688 + 1;
          }
          else
          {
            uint64_t v664 = *(int *)(a2 + 388);
            v826[0] = 0;
            if (v8)
            {
              uint64_t v665 = v8 + ssftriff_reader_GetPosition(v11) - v807;
              v826[0] = v665;
            }
            else
            {
              uint64_t v643 = ssftriff_reader_GetChunkData(v11, v824, v826, v31, v27, v28, v29, v30);
              if ((v643 & 0x80000000) != 0) {
                return v643;
              }
              uint64_t v665 = v826[0];
            }
            *(_DWORD *)__s1 = 256;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, v665, v824, 0, v827, (unsigned int *)__s1);
            if ((ChunkData & 0x80000000) != 0)
            {
              uint64_t v658 = 0;
            }
            else
            {
              v700 = BET3FLT__heap_StrDup((void *)a1[1], v827);
              uint64_t v701 = a2 + 256 + 4 * v664;
              uint64_t v704 = *(int *)(v701 + 244);
              v702 = (_DWORD *)(v701 + 244);
              int v703 = v704;
              *(void *)(a2 + 256 + 40 * (int)v664 + 8 * v704 + 728) = v700;
              if ((__s1[0] & 3) != 0) {
                *(_DWORD *)__s1 -= *(_DWORD *)__s1 | 0xFFFFFFFC;
              }
              uint64_t v658 = a2 + 120 * (int)v664 + 24 * v703 + 1664;
              _DWORD *v702 = v703 + 1;
            }
          }
        }
        else
        {
          uint64_t v658 = a2 + 24 * (int)v31 + 1544;
        }
        int v141 = 1;
        if ((ChunkData & 0x80000000) != 0 || !v658) {
          goto LABEL_292;
        }
        *(void *)v827 = 0;
        if (v8)
        {
          int v707 = ssftriff_reader_GetPosition(v11);
          int v708 = *(_DWORD *)__s1;
          *(void *)(v658 + 8) = v8 + v707 - v807 + *(unsigned int *)__s1;
          int v709 = v824 - v708;
          goto LABEL_2077;
        }
        unsigned int v710 = *(unsigned __int16 *)(v800 + 516);
        LODWORD(ChunkData) = -2065686524;
        if (v710 <= 0x3F)
        {
          if (*(_DWORD *)__s1)
          {
            ssftriff_reader_Seek(v11, *(unsigned int *)__s1, 1);
            unsigned int v710 = *(unsigned __int16 *)(v800 + 516);
          }
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v710 + 42848), v827, v31, v27, v28, v29, v30);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v800 + 516);
            int v711 = v824;
            *(_DWORD *)v800 += v824;
            *(void *)(v658 + 8) = *(void *)v827;
            int v709 = v711 - *(_DWORD *)__s1;
LABEL_2077:
            *(_DWORD *)(v658 + 16) = v709;
          }
        }
        int v141 = 1;
        goto LABEL_292;
      }
      *(void *)v813 = *(int *)(a2 + 388);
      LODWORD(v820) = 0;
      v826[0] = 0;
      if (v8)
      {
        uint64_t v641 = v8 + ssftriff_reader_GetPosition(v11) - v807;
        v826[0] = v641;
      }
      else
      {
        uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v826, v31, v27, v28, v29, v30);
        if ((ChunkData & 0x80000000) != 0) {
          return ChunkData;
        }
        uint64_t v641 = v826[0];
      }
      int v669 = *(_DWORD *)__s1;
      v670 = (_DWORD *)(a2 + 4 * *(void *)v813);
      v670[110] = *(_DWORD *)(v641 + *(unsigned int *)__s1);
      *(_DWORD *)__s1 = v669 + 4;
      uint64_t v671 = *(unsigned int *)(v641 + (v669 + 4));
      v670[115] = v671;
      *(_DWORD *)__s1 = v669 + 8;
      v810 = v670 + 115;
      v670[351] = *(unsigned __int8 *)(v641 + (v669 + 8)) != 0;
      *(_DWORD *)__s1 = v669 + 9;
      v670[346] = *(_DWORD *)(v641 + (v669 + 9));
      unsigned int v672 = v669 + 13;
      *(_DWORD *)__s1 = v669 + 13;
      v673 = a1;
      if ((int)v671 < 1)
      {
LABEL_2003:
        v827[0] = 0;
        LODWORD(v820) = 256;
        LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, v641, v824, v672, v827, (unsigned int *)&v820);
        if ((ChunkData & 0x80000000) != 0) {
          goto LABEL_291;
        }
        v678 = BET3FLT__heap_StrDup((void *)v673[1], v827);
        v679 = (void *)(a2 + 8 * *(void *)v813);
        v679[50] = v678;
        *(_DWORD *)__s1 += v820;
        if (v678)
        {
          if (*v810 >= 1)
          {
            uint64_t v680 = 0;
            v681 = v679 + 188;
            v814 = v679 + 178;
            while (1)
            {
              v827[0] = 0;
              LODWORD(v820) = 256;
              int StringZ = ssftriff_reader_ReadStringZ(v11, v826[0], v824, *(unsigned int *)__s1, v827, (unsigned int *)&v820);
              if (StringZ < 0) {
                break;
              }
              *(void *)(*v681 + 8 * v680) = BET3FLT__heap_StrDup((void *)v673[1], v827);
              if (!*(void *)(*v681 + 8 * v680)) {
                goto LABEL_2111;
              }
              *(_DWORD *)__s1 += v820;
              v827[0] = 0;
              LODWORD(v820) = 256;
              LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, v826[0], v824, *(unsigned int *)__s1, v827, (unsigned int *)&v820);
              if ((ChunkData & 0x80000000) == 0)
              {
                *(void *)(*v814 + 8 * v680) = BET3FLT__heap_StrDup((void *)v673[1], v827);
                if (!*(void *)(*v814 + 8 * v680)) {
                  goto LABEL_2111;
                }
                *(_DWORD *)__s1 += v820;
                if (++v680 < *v810) {
                  continue;
                }
              }
              goto LABEL_291;
            }
            LODWORD(ChunkData) = StringZ;
          }
          goto LABEL_291;
        }
      }
      else
      {
        uint64_t v674 = heap_Calloc((void *)a1[1], v671, 8);
        uint64_t v675 = a2 + 8 * *(void *)v813;
        *(void *)(v675 + 1504) = v674;
        if (!v674) {
          LODWORD(ChunkData) = -2065686518;
        }
        if ((ChunkData & 0x80000000) != 0) {
          goto LABEL_291;
        }
        uint64_t v676 = heap_Calloc((void *)a1[1], *v810, 8);
        *(void *)(v675 + 1424) = v676;
        if (!v676)
        {
          LODWORD(ChunkData) = -2065686518;
          goto LABEL_291;
        }
        uint64_t v677 = heap_Calloc((void *)a1[1], *v810, 8);
        *(void *)(a2 + 8 * *(void *)v813 + 1464) = v677;
        if (v677)
        {
          v673 = a1;
          uint64_t v641 = v826[0];
          unsigned int v672 = *(_DWORD *)__s1;
          goto LABEL_2003;
        }
      }
LABEL_2111:
      LODWORD(ChunkData) = -2065686518;
      goto LABEL_291;
    }
    if (a4)
    {
      if (strcmp(a5, "FEEX")) {
        goto LABEL_57;
      }
      if (strcmp(v14, "VCAT"))
      {
        if (!strcmp(v14, "TRAF") && !(*(_DWORD *)__src ^ 0x54414546 | v823))
        {
          *(void *)v827 = 0;
          if (v8)
          {
            v625 = (unsigned __int16 *)(v8 + ssftriff_reader_GetPosition(v11) - v807);
            *(void *)v827 = v625;
          }
          else
          {
            uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v827, v46, v47, v48, v49, v50);
            if ((ChunkData & 0x80000000) != 0) {
              return ChunkData;
            }
            v625 = *(unsigned __int16 **)v827;
          }
          unsigned int v650 = *v625;
          v648 = v625 + 1;
          unsigned int v649 = v650;
          *(void *)v827 = v648;
          if (v650 >= 8)
          {
            log_OutPublic(a1[4], (uint64_t)"SELECT_BET5", 58010, "%s%hu", v621, v622, v623, v624, "feature");
            return 2229280772;
          }
          *(_DWORD *)(a2 + 4 * v649 + 17760) = v799;
          uint64_t v651 = *(void *)(a2 + 17752) + 12 * v799;
          *(_DWORD *)uint64_t v651 = v649;
          *(_WORD *)(v651 + 8) = *v648;
          uint64_t v652 = *(void *)v827;
          *(void *)v827 += 2;
          *(_DWORD *)(*(void *)(a2 + 17752) + 12 * v799++ + 4) = *(_DWORD *)(v652 + 2);
          goto LABEL_2044;
        }
        if (!strcmp(v14, "CTXR"))
        {
          if (*(_DWORD *)__src ^ 0x464C5552 | v823)
          {
            if (*(_DWORD *)__src ^ 0x544C5552 | v823)
            {
              if (!(*(_DWORD *)__src ^ 0x34445254 | v823))
              {
                unint64_t v653 = *(unsigned __int16 *)(v800 + 516);
                if (v653 <= 0x3F)
                {
                  LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v653 + 42848), v787, v51, v52, v53, v54, v55);
                  if ((ChunkData & 0x80000000) == 0)
                  {
                    ++*(_WORD *)(v800 + 516);
                    unsigned int v654 = v824;
                    *(_DWORD *)v800 += v824;
                    *((_DWORD *)v797 + 10) = v654 / 0xC;
                  }
                  goto LABEL_2044;
                }
LABEL_2149:
                LODWORD(ChunkData) = -2065686524;
                goto LABEL_2044;
              }
              if (!(*(_DWORD *)__src ^ 0x34505254 | v823))
              {
                unint64_t v124 = *(unsigned __int16 *)(v800 + 516);
                if (v124 <= 0x3F)
                {
                  LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v124 + 42848), v784, v51, v52, v53, v54, v55);
                  if ((ChunkData & 0x80000000) == 0)
                  {
                    ++*(_WORD *)(v800 + 516);
                    unsigned int v125 = v824;
                    *(_DWORD *)v800 += v824;
                    *((_DWORD *)v797 + 14) = v125 / 0xC;
                  }
                  goto LABEL_2044;
                }
                goto LABEL_2149;
              }
LABEL_2040:
              int v692 = 0;
              v827[0] = 0;
              do
              {
                __strcat_chk();
                __strcat_chk();
                ++v692;
              }
              while (a4 >= (unsigned __int16)v692);
              log_OutText(a1[4], (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Unknown data: %s for %s", v693, v694, v695, (uint64_t)v827);
              goto LABEL_2043;
            }
            *(void *)v827 = 0;
            if (v8)
            {
              uint64_t v145 = (_WORD *)(v8 + ssftriff_reader_GetPosition(v11) - v807);
              *(void *)v827 = v145;
            }
            else
            {
              uint64_t v643 = ssftriff_reader_GetChunkData(v11, v824, v827, v51, v52, v53, v54, v55);
              if ((v643 & 0x80000000) != 0) {
                return v643;
              }
              uint64_t v145 = *(_WORD **)v827;
            }
            int v644 = v824;
            uint64_t v645 = (uint64_t)a1;
            uint64_t v646 = v11;
            v647 = v793;
          }
          else
          {
            *(void *)v827 = 0;
            if (v8)
            {
              uint64_t v145 = (_WORD *)(v8 + ssftriff_reader_GetPosition(v11) - v807);
              *(void *)v827 = v145;
            }
            else
            {
              uint64_t v643 = ssftriff_reader_GetChunkData(v11, v824, v827, v51, v52, v53, v54, v55);
              if ((v643 & 0x80000000) != 0) {
                return v643;
              }
              uint64_t v145 = *(_WORD **)v827;
            }
            int v644 = v824;
            uint64_t v645 = (uint64_t)a1;
            uint64_t v646 = v11;
            v647 = v795;
          }
LABEL_1985:
          int RiffStringTable = uselect_LoadRiffStringTable(v645, v646, v145, v644, v647);
          goto LABEL_1986;
        }
        if (strcmp(v14, "NNFE"))
        {
LABEL_57:
          if (strcmp(a5, "STM3") || strcmp(v14, "PCI4")) {
            goto LABEL_2040;
          }
          uint64_t v36 = *(unsigned int *)(a2 + 388);
          if (*(_DWORD *)__src ^ 0x49494350 | v823)
          {
            if (*(_DWORD *)__src ^ 0x4C494350 | v823) {
              goto LABEL_2040;
            }
            uint64_t v37 = v824;
            uint64_t v38 = a2;
            uint64_t v39 = v11;
            unsigned int v40 = 5;
          }
          else
          {
            uint64_t v37 = v824;
            uint64_t v38 = a2;
            uint64_t v39 = v11;
            unsigned int v40 = 4;
          }
          uint64_t v142 = v8;
          uint64_t v143 = v807;
          uint64_t v144 = 0;
          goto LABEL_295;
        }
        *(void *)v827 = 0;
        if (v8)
        {
          *(void *)v827 = v8 + ssftriff_reader_GetPosition(v11) - v807;
        }
        else
        {
          uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v827, v56, v57, v58, v59, v60);
          if ((ChunkData & 0x80000000) != 0) {
            return ChunkData;
          }
        }
        if (*(_DWORD *)__src ^ 0x544C4E4E | v823)
        {
          if (*(_DWORD *)__src ^ 0x46554E4E | v823)
          {
LABEL_1937:
            int v141 = 0;
            goto LABEL_2039;
          }
          char v126 = *(_WORD **)v827;
          v797[12] = **(_WORD **)v827;
          int v127 = v824;
          uint64_t v128 = (uint64_t)a1;
          uint64_t v129 = v11;
          BOOL v130 = v790;
LABEL_1969:
          Mfsunsigned int Data = uselect_LoadRiffStringTable(v128, v129, v126, v127, v130);
          goto LABEL_2037;
        }
        unsigned int v632 = *v797;
        LODWORD(ChunkData) = -2065686524;
        if (v632 <= 0x10)
        {
          uint64_t v633 = *(void *)v827;
          unsigned int v634 = v824;
          if (*((void *)v797 + 1)) {
            goto LABEL_1944;
          }
          uint64_t v635 = heap_Calloc((void *)a1[1], 18, 16);
          *((void *)v797 + 1) = v635;
          if (v635)
          {
            LOWORD(v632) = *v797;
LABEL_1944:
            unsigned __int16 *v797 = v632 + 1;
            LODWORD(v826[0]) = 0;
            uint64_t v812 = v633;
            int StringW = ssftriff_reader_ReadStringW(v11, v633, v634, 0, 0, (unsigned int *)v826);
            if ((StringW & 0x80000000) == 0 || (LODWORD(ChunkData) = StringW, (StringW & 0x1FFF) == 9))
            {
              v637 = (unsigned char *)heap_Alloc(a1[1], LODWORD(v826[0]));
              *(void *)(*((void *)v797 + 1) + 16 * *v797 - 16) = v637;
              if (v637)
              {
                int v638 = ssftriff_reader_ReadStringW(v11, v812, v634, 0, v637, (unsigned int *)v826);
                if ((v638 & 0x80000000) == 0) {
                  int v638 = uselect_LoadRiffStringTable((uint64_t)a1, v11, (_WORD *)(v812 + (LODWORD(v826[0]) - 1) + 2), v634 - (LODWORD(v826[0]) + 1), (uint64_t *)(*((void *)v797 + 1) + 16 * *v797 - 8));
                }
                LODWORD(ChunkData) = v638;
              }
              else
              {
                LODWORD(ChunkData) = -2065686518;
              }
              int v14 = v818;
            }
          }
          else
          {
            LODWORD(ChunkData) = -2065686518;
          }
        }
        int v141 = 1;
        uint64_t v13 = v805;
        uint64_t v8 = a6;
LABEL_2039:
        if (!v141) {
          goto LABEL_2040;
        }
        goto LABEL_2044;
      }
      *(void *)v827 = 0;
      if (v8)
      {
        *(void *)v827 = v8 + ssftriff_reader_GetPosition(v11) - v807;
      }
      else
      {
        uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v827, v41, v42, v43, v44, v45);
        if ((ChunkData & 0x80000000) != 0) {
          return ChunkData;
        }
      }
      if (*(_DWORD *)__src ^ 0x48504C41 | v823)
      {
        if (*(_DWORD *)__src ^ 0x43494F56 | v823)
        {
          if (*(_DWORD *)__src ^ 0x4F564F43 | v823)
          {
            if (*(_DWORD *)__src ^ 0x45464153 | v823)
            {
              if (*(_DWORD *)__src ^ 0x534F4C50 | v823)
              {
                if (*(_DWORD *)__src ^ 0x46464944 | v823)
                {
                  if (*(_DWORD *)__src ^ 0x4C43554E | v823)
                  {
                    if (*(_DWORD *)__src ^ 0x464E4547 | v823)
                    {
                      if (*(_DWORD *)__src ^ 0x41474154 | v823)
                      {
                        if (*(_DWORD *)__src ^ 0x414F5442 | v823) {
                          goto LABEL_1937;
                        }
                        char v126 = *(_WORD **)v827;
                        int v127 = v824;
                        uint64_t v128 = (uint64_t)a1;
                        uint64_t v129 = v11;
                        BOOL v130 = v775;
                      }
                      else
                      {
                        char v126 = *(_WORD **)v827;
                        int v127 = v824;
                        uint64_t v128 = (uint64_t)a1;
                        uint64_t v129 = v11;
                        BOOL v130 = v776;
                      }
                      goto LABEL_1969;
                    }
                    Mfsunsigned int Data = select_bet3_LoadRiffGenericFeatureMap((uint64_t)a1, v11, *(unsigned __int16 **)v827, v824, v780, v779, v778);
LABEL_2037:
                    LODWORD(ChunkData) = MfsData;
                    goto LABEL_2038;
                  }
                  LODWORD(v826[0]) = 128;
                  uint64_t v626 = *(void *)v827;
                  unsigned int v627 = v824;
                  uint64_t v628 = v11;
                  v629 = v783;
                }
                else
                {
                  LODWORD(v826[0]) = 64;
                  uint64_t v626 = *(void *)v827;
                  unsigned int v627 = v824;
                  uint64_t v628 = v11;
                  v629 = v786;
                }
              }
              else
              {
                LODWORD(v826[0]) = 257;
                uint64_t v626 = *(void *)v827;
                unsigned int v627 = v824;
                uint64_t v628 = v11;
                v629 = v789;
              }
            }
            else
            {
              LODWORD(v826[0]) = 257;
              uint64_t v626 = *(void *)v827;
              unsigned int v627 = v824;
              uint64_t v628 = v11;
              v629 = v791;
            }
          }
          else
          {
            LODWORD(v826[0]) = 257;
            uint64_t v626 = *(void *)v827;
            unsigned int v627 = v824;
            uint64_t v628 = v11;
            v629 = v794;
          }
        }
        else
        {
          LODWORD(v826[0]) = 257;
          uint64_t v626 = *(void *)v827;
          unsigned int v627 = v824;
          uint64_t v628 = v11;
          v629 = v796;
        }
        Mfsunsigned int Data = ssftriff_reader_ReadStringZ(v628, v626, v627, 0, v629, (unsigned int *)v826);
        goto LABEL_2037;
      }
      LODWORD(v826[0]) = 257;
      LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)v827, v824, 0, __s, (unsigned int *)v826);
      if ((ChunkData & 0x80000000) == 0)
      {
        *((_WORD *)__s + 947) = 255;
        if (*__s)
        {
          unsigned int v131 = 0;
          size_t v132 = 0;
          int v133 = 0;
          unsigned int v134 = 255;
          do
          {
            unsigned __int16 v135 = (unsigned __int8 *)(a2 + v132 + 14986);
            unsigned int v136 = *v135;
            if (v136 >= v134)
            {
              unsigned int v138 = *v135;
              uint64_t v137 = __s;
            }
            else
            {
              uint64_t v137 = __s;
              __s[1894] = v136;
              unsigned int v138 = *v135;
              unsigned int v134 = v136;
            }
            if (v138 <= v131)
            {
              unsigned int v139 = v138;
            }
            else
            {
              v137[1895] = v138;
              unsigned int v139 = *v135;
              unsigned int v131 = v138;
            }
            *(unsigned char *)(a2 + v139 + 16528) = v133;
            size_t v132 = (v133 + 1);
            size_t v140 = strlen(v137);
            int v133 = v132;
          }
          while (v140 > v132);
        }
      }
      goto LABEL_291;
    }
    if (!(*(_DWORD *)__src ^ 0x464E4956 | v823))
    {
      LODWORD(v820) = 0;
      *(void *)__s1 = 0;
      if (v8)
      {
        *(void *)__s1 = v8 + ssftriff_reader_GetPosition(v11) - v807;
      }
      else
      {
        uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, __s1, v16, v17, v18, v19, v20);
        if ((ChunkData & 0x80000000) != 0) {
          return ChunkData;
        }
      }
      unsigned int v66 = v824;
      if (v824)
      {
        unsigned int v67 = 0;
        do
        {
          LOBYTE(v826[0]) = 0;
          v827[0] = 0;
          LODWORD(v820) = 1024;
          LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)__s1, v66, v67, v827, (unsigned int *)&v820);
          if ((ChunkData & 0x80000000) == 0 && v67 < v824)
          {
            v67 += v820;
            LODWORD(v820) = 1024;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)__s1, v824, v67, v826, (unsigned int *)&v820);
          }
          if ((ChunkData & 0x80000000) != 0) {
            break;
          }
          if (!(*(_DWORD *)v827 ^ 0x44495547 | v827[4])
            || (*(void *)v827 == 0x6E656E6F706D6F43 ? (BOOL v68 = *(unsigned int *)&v827[8] == 4475252) : (BOOL v68 = 0), v68))
          {
            __strcpy_chk();
            break;
          }
          v67 += v820;
          unsigned int v66 = v824;
        }
        while (v67 < v824);
      }
      uint64_t v13 = v805;
      uint64_t v8 = a6;
      goto LABEL_2043;
    }
    if (!(*(_DWORD *)__src ^ 0x50525056 | v823))
    {
      LODWORD(v820) = 0;
      *(void *)__s1 = 0;
      if (v8)
      {
        *(void *)__s1 = v8 + ssftriff_reader_GetPosition(v11) - v807;
      }
      else
      {
        uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, __s1, v16, v17, v18, v19, v20);
        if ((ChunkData & 0x80000000) != 0) {
          return ChunkData;
        }
      }
      LOBYTE(v826[0]) = 0;
      v827[0] = 0;
      unsigned int v107 = v824;
      if (v824)
      {
        unsigned int v108 = 0;
        while (1)
        {
          LODWORD(v820) = 1024;
          LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)__s1, v107, v108, v827, (unsigned int *)&v820);
          if ((ChunkData & 0x80000000) == 0 && v108 < v824)
          {
            v108 += v820;
            LODWORD(v820) = 1024;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)__s1, v824, v108, v826, (unsigned int *)&v820);
          }
          if ((ChunkData & 0x80000000) != 0) {
            goto LABEL_241;
          }
          int v109 = (int)v820;
          if (*(void *)v827 == 0x4E555F544E554F43
            && *(void *)&v827[8] == 0x4C4C55465F535449
            && *(void *)&v827[16] == 0x424843454550535FLL
            && v828 == 4543297)
          {
            *(_DWORD *)(a2 + 11804) = LH_atou((const char *)v826);
          }
          if (*(void *)v827 == 0x4E555F544E554F43
            && *(void *)&v827[8] == 0x494156415F535449
            && *(void *)&v827[14] == 0x454C42414C4941)
          {
            *(_DWORD *)(a2 + 11812) = LH_atou((const char *)v826);
          }
          if (*(void *)v827 == 0x4E555F544E554F43
            && *(void *)&v827[8] == 0x564152475F535449
            && *(void *)&v827[14] == 0x44524159455641)
          {
            *(_DWORD *)(a2 + 11816) = LH_atou((const char *)v826);
          }
          if (*(void *)v827 == 0x4E555F544E554F43
            && *(void *)&v827[8] == 0x4F4D45525F535449
            && *(unsigned int *)&v827[16] == 4474198)
          {
            *(_DWORD *)(a2 + 11808) = LH_atou((const char *)v826);
          }
          v108 += v109;
          unsigned int v107 = v824;
          int v14 = v818;
          if (v108 >= v824) {
            goto LABEL_242;
          }
        }
      }
      goto LABEL_242;
    }
    if (!(*(_DWORD *)__src ^ 0x53545356 | v823)) {
      goto LABEL_79;
    }
    if (!(*(_DWORD *)__src ^ 0x47464356 | v823))
    {
      unsigned int v821 = 0;
      *(void *)v819 = 0;
      v820 = 0;
      if (v8)
      {
        *(void *)v819 = v8 + ssftriff_reader_GetPosition(v11) - v807;
      }
      else
      {
        uint64_t ChunkData = ssftriff_reader_GetChunkData(v11, v824, v819, v16, v17, v18, v19, v20);
        if ((ChunkData & 0x80000000) != 0) {
          return ChunkData;
        }
      }
      unsigned int v146 = v824;
      if (v824)
      {
        unsigned int v147 = 0;
        do
        {
          v827[0] = 0;
          __s1[0] = 0;
          unsigned int v821 = 64;
          LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)v819, v146, v147, __s1, &v821);
          if ((ChunkData & 0x80000000) == 0 && v147 < v824)
          {
            v147 += v821;
            unsigned int v821 = 256;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)v819, v824, v147, v827, &v821);
          }
          if ((ChunkData & 0x80000000) != 0) {
            break;
          }
          unsigned int v809 = v821;
          strcpy((char *)v826, "bet5voiceoverride.");
          __strcat_chk();
          if ((paramc_ParamGetStr(a1[5], (uint64_t)v826, &v820) & 0x80000000) == 0)
          {
            uint64_t v148 = v820;
            if (v820)
            {
              if (*v820) {
                goto LABEL_1920;
              }
            }
          }
          uint64_t v148 = v827;
          v820 = v827;
          if (*(void *)__s1 == 0x52454B41455242)
          {
            uint64_t v149 = BET3FLT__heap_StrDup((void *)a1[1], v148);
            *(void *)(a2 + 336) = v149;
            if (!v149) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (*(void *)__s1 == 0x474E454C5F4B5242 && *(void *)&__s1[3] == 0x4854474E454C5FLL) {
            *(_DWORD *)(a2 + 344) = LH_atoi(v820);
          }
          if (*(_DWORD *)__s1 == 1598771778 && *(_DWORD *)&__s1[3] == 4412511) {
            *(_DWORD *)(a2 + 348) = LH_atoi(v820);
          }
          if (!(*(void *)__s1 ^ 0x4441505A5F4B5242 | __s1[8])) {
            *(_DWORD *)(a2 + 352) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x54535F4E474C41) {
            *(_DWORD *)(a2 + 368) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x48505F4E474C41) {
            *(_DWORD *)(a2 + 372) = LH_atoi(v820) != 0;
          }
          if (*(_DWORD *)__s1 == 1213221953 && *(unsigned __int16 *)&__s1[4] == 65)
          {
            float v153 = atof(v820);
            *(float *)(a2 + 256) = v153;
          }
          if (!(*(_DWORD *)__s1 ^ 0x41544542 | __s1[4]))
          {
            float v154 = atof(v820);
            *(float *)(a2 + 260) = v154;
          }
          if (!(*(unsigned __int16 *)__s1 ^ 0x5346 | __s1[2])) {
            *(_DWORD *)(a2 + 264) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x434E454C49535F42 && *(void *)&__s1[8] == 0x48544E59535F45) {
            *(_DWORD *)(a2 + 5304) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x5F4C45525F565556 && *(_DWORD *)&__s1[8] == 5262657)
          {
            float v157 = atof(v820);
            *(float *)(a2 + 268) = v157;
          }
          if (*(_DWORD *)__s1 == 1162105423 && *(unsigned __int16 *)&__s1[4] == 82) {
            *(_DWORD *)(a2 + 272) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x49535F454D415246 && *(void *)&__s1[3] == 0x455A49535F454DLL) {
            *(_DWORD *)(a2 + 280) = LH_atoi(v820);
          }
          if (*(_DWORD *)__s1 == 5195858)
          {
            float v160 = atof(v820);
            *(float *)(a2 + 288) = v160;
          }
          if (*(_DWORD *)__s1 == 5001046)
          {
            float v161 = atof(v820);
            *(float *)(a2 + 292) = v161;
          }
          if (*(void *)__s1 == 0x534F4F425F46564DLL && *(unsigned __int16 *)&__s1[8] == 84)
          {
            float v163 = atof(v820);
            *(float *)(a2 + 296) = v163;
          }
          unsigned int v811 = v147;
          if (*(_DWORD *)__s1 == 1314476886 && *(_DWORD *)&__s1[3] == 4740174)
          {
            int v165 = BET3FLT__heap_StrDup((void *)a1[1], v820);
            *(void *)(a2 + 360) = v165;
            if (!v165) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (*(_DWORD *)__s1 == 1381969990 && *(_DWORD *)&__s1[3] == 5195858)
          {
            float v167 = atof(v820);
            *(float *)(a2 + 300) = v167;
          }
          if (*(_DWORD *)__s1 == 1398747206 && *(_DWORD *)&__s1[3] == 4478035)
          {
            float v169 = atof(v820);
            *(float *)(a2 + 304) = v169;
          }
          if (*(void *)__s1 == 0x4E41454D5F3046)
          {
            float v170 = atof(v820);
            *(float *)(a2 + 308) = v170;
          }
          if (*(void *)__s1 == 0x465F484345455053 && *(void *)&__s1[7] == 0x4E41454D5F3046) {
            *(_DWORD *)(a2 + 312) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x495241565F464450
            && *(void *)&__s1[8] == 0x5059545F45434E41
            && *(unsigned __int16 *)&__s1[16] == 69)
          {
            *(_DWORD *)(a2 + 328) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x5F414C4F53505F4ELL && *(void *)&__s1[5] == 0x45444F4D5F414CLL) {
            *(_DWORD *)(a2 + 11776) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x5F414C4F53505F42
            && *(void *)&__s1[8] == 0x52505F3245444F4DLL
            && *(void *)&__s1[16] == 0x4F565F544345544FLL
            && *(void *)&__s1[21] == 0x534C45574F565FLL)
          {
            *(_DWORD *)(a2 + 11780) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x454C42414E455F42
            && *(void *)&__s1[8] == 0x505F4B414552435FLL
            && *(void *)&__s1[16] == 0x4F49544345544F52
            && *(unsigned __int16 *)&__s1[24] == 78)
          {
            *(_DWORD *)(a2 + 11792) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x5F414C4F53505F4ELL
            && *(void *)&__s1[8] == 0x415255445F4E494DLL
            && *(void *)&__s1[16] == 0x5441525F4E4F4954
            && *(void *)&__s1[19] == 0x4F495441525F4ELL)
          {
            *(_DWORD *)(a2 + 11796) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x5F414C4F53505F4ELL
            && *(void *)&__s1[8] == 0x415255445F58414DLL
            && *(void *)&__s1[16] == 0x5441525F4E4F4954
            && *(void *)&__s1[19] == 0x4F495441525F4ELL)
          {
            *(_DWORD *)(a2 + 11800) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x4252455449565F4ELL
            && *(void *)&__s1[8] == 0x45444F4345445F49
            && *(void *)&__s1[16] == 0x4E41495241565F52
            && *(unsigned __int16 *)&__s1[24] == 84)
          {
            *(_DWORD *)(a2 + 11744) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x5F54534F434A5F46
            && *(void *)&__s1[8] == 0x415F544847494557
            && *(void *)&__s1[11] == 0x4A44415F544847)
          {
            float v192 = atof(v820);
            *(float *)(a2 + 5760) = v192;
          }
          if (*(void *)__s1 == 0x5F54534F434A5F46
            && *(void *)&__s1[8] == 0x535F544847494557
            && *(void *)&__s1[11] == 0x4C4C535F544847)
          {
            float v195 = atof(v820);
            *(float *)(a2 + 5848) = v195;
          }
          if (*(void *)__s1 == 0x54535F4C4C535F46 && *(void *)&__s1[3] == 0x504554535F4C4CLL)
          {
            float v197 = atof(v820);
            *(float *)(a2 + 5844) = v197;
          }
          if (*(_DWORD *)__s1 == 5332806)
          {
            float v198 = atof(v820);
            *(float *)(a2 + 5772) = v198;
          }
          if (*(void *)__s1 == 0x564E555F515F46)
          {
            float v199 = atof(v820);
            *(float *)(a2 + 5776) = v199;
          }
          if (!(*(void *)__s1 ^ 0x41515F4D59535F46 | __s1[8]))
          {
            float v200 = atof(v820);
            *(float *)(a2 + 5780) = v200;
          }
          if (*(void *)__s1 == 0x4843524145535F4ELL && *(void *)&__s1[6] == 0x45444F4D5F4843) {
            *(_DWORD *)(a2 + 7056) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x4C5F45444F4E5F4ELL && *(void *)&__s1[5] == 0x54494D494C5F45) {
            *(_DWORD *)(a2 + 5804) = LH_atoi(v820);
          }
          if (!(*(void *)__s1 ^ 0x4F4E5F564E495F4ELL | *(void *)&__s1[8] ^ 0x54494D494C5F4544 | __s1[16])) {
            *(_DWORD *)(a2 + 5808) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x5F454E5552505F46 && *(unsigned int *)&__s1[8] == 5522256)
          {
            float v204 = atof(v820);
            *(float *)(a2 + 5812) = v204;
          }
          if (*(void *)__s1 == 0x575F4D4145425F46 && *(void *)&__s1[5] == 0x48544449575F4DLL)
          {
            float v206 = atof(v820);
            *(float *)(a2 + 5824) = v206;
          }
          if (!(*(void *)__s1 ^ 0x575F4D4145425F46 | *(void *)&__s1[8] ^ 0x564E555F48544449 | __s1[16]))
          {
            float v207 = atof(v820);
            *(float *)(a2 + 5828) = v207;
          }
          if (!(*(void *)__s1 ^ 0x505F45444F4E5F46 | *(void *)&__s1[8] ^ 0x5443505F454E5552 | __s1[16]))
          {
            float v208 = atof(v820);
            *(float *)(a2 + 5816) = v208;
          }
          if (!(*(void *)__s1 ^ 0x505F45444F4E5F4ELL | *(void *)&__s1[8] ^ 0x58414D5F454E5552 | __s1[16])) {
            *(_DWORD *)(a2 + 5820) = LH_atoi(v820);
          }
          if (!(*(void *)__s1 ^ 0x5449564C49535F4ELL | __s1[8])) {
            *(_DWORD *)(a2 + 5832) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x414D5F4C4C535F46 && *(unsigned __int16 *)&__s1[8] == 88)
          {
            float v210 = atof(v820);
            *(float *)(a2 + 5836) = v210;
          }
          if (*(void *)__s1 == 0x45575F4C4C535F46 && *(void *)&__s1[5] == 0x5448474945575FLL)
          {
            float v212 = atof(v820);
            *(float *)(a2 + 5840) = v212;
          }
          if (*(void *)__s1 == 0x504452575F515F46
            && *(void *)&__s1[8] == 0x465F544E535F534FLL
            && *(void *)&__s1[13] == 0x4C414E49465F54)
          {
            float v215 = atof(v820);
            *(float *)(a2 + 5860) = v215;
          }
          if (*(void *)__s1 == 0x504452575F425F46
            && *(void *)&__s1[8] == 0x465F544E535F534FLL
            && *(void *)&__s1[13] == 0x4C414E49465F54)
          {
            float v218 = atof(v820);
            *(float *)(a2 + 5864) = v218;
          }
          if (*(void *)__s1 == 0x504452575F515F46
            && *(void *)&__s1[8] == 0x465F5248505F534FLL
            && *(void *)&__s1[13] == 0x4C414E49465F52)
          {
            float v221 = atof(v820);
            *(float *)(a2 + 5868) = v221;
          }
          if (*(void *)__s1 == 0x504452575F425F46
            && *(void *)&__s1[8] == 0x465F5248505F534FLL
            && *(void *)&__s1[13] == 0x4C414E49465F52)
          {
            float v224 = atof(v820);
            *(float *)(a2 + 5872) = v224;
          }
          if (*(void *)__s1 == 0x504452575F515F46
            && *(void *)&__s1[8] == 0x495F544E535F534FLL
            && *(unsigned int *)&__s1[16] == 5523790)
          {
            float v227 = atof(v820);
            *(float *)(a2 + 5876) = v227;
          }
          if (*(void *)__s1 == 0x504452575F425F46
            && *(void *)&__s1[8] == 0x495F544E535F534FLL
            && *(unsigned int *)&__s1[16] == 5523790)
          {
            float v230 = atof(v820);
            *(float *)(a2 + 5880) = v230;
          }
          if (*(void *)__s1 == 0x504452575F515F46
            && *(void *)&__s1[8] == 0x495F5248505F534FLL
            && *(unsigned int *)&__s1[16] == 5523790)
          {
            float v233 = atof(v820);
            *(float *)(a2 + 5884) = v233;
          }
          if (*(void *)__s1 == 0x504452575F425F46
            && *(void *)&__s1[8] == 0x495F5248505F534FLL
            && *(unsigned int *)&__s1[16] == 5523790)
          {
            float v236 = atof(v820);
            *(float *)(a2 + 5888) = v236;
          }
          if (*(void *)__s1 == 0x504452575F515F46
            && *(void *)&__s1[8] == 0x4D5F5248505F534FLL
            && *(void *)&__s1[11] == 0x44494D5F524850)
          {
            float v239 = atof(v820);
            *(float *)(a2 + 5892) = v239;
          }
          if (*(void *)__s1 == 0x504452575F425F46
            && *(void *)&__s1[8] == 0x4D5F5248505F534FLL
            && *(void *)&__s1[11] == 0x44494D5F524850)
          {
            float v242 = atof(v820);
            *(float *)(a2 + 5896) = v242;
          }
          if (*(void *)__s1 == 0x574452575F515F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x49535F544E45535FLL
            && *(void *)&__s1[21] == 0x454C474E49535FLL)
          {
            float v246 = atof(v820);
            *(float *)(a2 + 5900) = v246;
          }
          if (*(void *)__s1 == 0x574452575F425F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x49535F544E45535FLL
            && *(void *)&__s1[21] == 0x454C474E49535FLL)
          {
            float v250 = atof(v820);
            *(float *)(a2 + 5904) = v250;
          }
          if (*(void *)__s1 == 0x574452575F515F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x4E495F544E45535FLL
            && *(void *)&__s1[22] == 0x4C414954494E49)
          {
            float v254 = atof(v820);
            *(float *)(a2 + 5908) = v254;
          }
          if (*(void *)__s1 == 0x574452575F425F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x4E495F544E45535FLL
            && *(void *)&__s1[22] == 0x4C414954494E49)
          {
            float v258 = atof(v820);
            *(float *)(a2 + 5912) = v258;
          }
          if (*(void *)__s1 == 0x574452575F515F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x49465F544E45535FLL
            && *(unsigned int *)&__s1[24] == 4997454)
          {
            float v262 = atof(v820);
            *(float *)(a2 + 5916) = v262;
          }
          if (*(void *)__s1 == 0x574452575F425F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x49465F544E45535FLL
            && *(unsigned int *)&__s1[24] == 4997454)
          {
            float v266 = atof(v820);
            *(float *)(a2 + 5920) = v266;
          }
          if (*(void *)__s1 == 0x574452575F515F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x4E49535F3450495FLL
            && *(unsigned int *)&__s1[24] == 4541511)
          {
            float v270 = atof(v820);
            *(float *)(a2 + 5924) = v270;
          }
          if (*(void *)__s1 == 0x574452575F425F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x4E49535F3450495FLL
            && *(unsigned int *)&__s1[24] == 4541511)
          {
            float v274 = atof(v820);
            *(float *)(a2 + 5928) = v274;
          }
          if (*(void *)__s1 == 0x574452575F515F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x494E495F3450495FLL
            && *(void *)&__s1[21] == 0x4C414954494E49)
          {
            float v278 = atof(v820);
            *(float *)(a2 + 5932) = v278;
          }
          if (*(void *)__s1 == 0x574452575F425F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x494E495F3450495FLL
            && *(void *)&__s1[21] == 0x4C414954494E49)
          {
            float v282 = atof(v820);
            *(float *)(a2 + 5936) = v282;
          }
          if (*(void *)__s1 == 0x574452575F515F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x4E49465F3450495FLL
            && *(void *)&__s1[19] == 0x4C414E49465F34)
          {
            float v286 = atof(v820);
            *(float *)(a2 + 5940) = v286;
          }
          if (*(void *)__s1 == 0x574452575F425F46
            && *(void *)&__s1[8] == 0x504853534F504452
            && *(void *)&__s1[16] == 0x4E49465F3450495FLL
            && *(void *)&__s1[19] == 0x4C414E49465F34)
          {
            float v290 = atof(v820);
            *(float *)(a2 + 5944) = v290;
          }
          if (*(void *)__s1 == 0x504452575F515F46 && *(void *)&__s1[8] == 0x434341555F4D52)
          {
            float v292 = atof(v820);
            *(float *)(a2 + 5948) = v292;
          }
          if (*(void *)__s1 == 0x504452575F425F46 && *(void *)&__s1[8] == 0x434341555F4D52)
          {
            float v294 = atof(v820);
            *(float *)(a2 + 5952) = v294;
          }
          if (*(void *)__s1 == 0x504452575F515F46 && *(void *)&__s1[8] == 0x434341445F4D52)
          {
            float v296 = atof(v820);
            *(float *)(a2 + 5956) = v296;
          }
          if (*(void *)__s1 == 0x504452575F425F46 && *(void *)&__s1[8] == 0x434341445F4D52)
          {
            float v298 = atof(v820);
            *(float *)(a2 + 5960) = v298;
          }
          if (*(void *)__s1 == 0x504452575F515F46 && *(void *)&__s1[7] == 0x4343415F4D5250)
          {
            float v300 = atof(v820);
            *(float *)(a2 + 5964) = v300;
          }
          if (*(void *)__s1 == 0x504452575F425F46 && *(void *)&__s1[7] == 0x4343415F4D5250)
          {
            float v302 = atof(v820);
            *(float *)(a2 + 5968) = v302;
          }
          if (*(void *)__s1 == 0x504452575F515F46 && *(void *)&__s1[8] == 0x48504D455F4D52)
          {
            float v304 = atof(v820);
            *(float *)(a2 + 5972) = v304;
          }
          if (*(void *)__s1 == 0x504452575F425F46 && *(void *)&__s1[8] == 0x48504D455F4D52)
          {
            float v306 = atof(v820);
            *(float *)(a2 + 5976) = v306;
          }
          if (*(void *)__s1 == 0x504452575F515F46
            && *(void *)&__s1[8] == 0x41555F5048534D52
            && *(void *)&__s1[11] == 0x434341555F5048)
          {
            float v309 = atof(v820);
            *(float *)(a2 + 5980) = v309;
          }
          if (*(void *)__s1 == 0x504452575F425F46
            && *(void *)&__s1[8] == 0x41555F5048534D52
            && *(void *)&__s1[11] == 0x434341555F5048)
          {
            float v312 = atof(v820);
            *(float *)(a2 + 5984) = v312;
          }
          if (*(void *)__s1 == 0x504452575F515F46
            && *(void *)&__s1[8] == 0x41445F5048534D52
            && *(void *)&__s1[11] == 0x434341445F5048)
          {
            float v315 = atof(v820);
            *(float *)(a2 + 5988) = v315;
          }
          if (*(void *)__s1 == 0x504452575F425F46
            && *(void *)&__s1[8] == 0x41445F5048534D52
            && *(void *)&__s1[11] == 0x434341445F5048)
          {
            float v318 = atof(v820);
            *(float *)(a2 + 5992) = v318;
          }
          if (*(void *)__s1 == 0x504452575F515F46
            && *(void *)&__s1[8] == 0x43415F5048534D52
            && *(unsigned __int16 *)&__s1[16] == 67)
          {
            float v321 = atof(v820);
            *(float *)(a2 + 5996) = v321;
          }
          if (*(void *)__s1 == 0x504452575F425F46
            && *(void *)&__s1[8] == 0x43415F5048534D52
            && *(unsigned __int16 *)&__s1[16] == 67)
          {
            float v324 = atof(v820);
            *(float *)(a2 + 6000) = v324;
          }
          if (*(void *)__s1 == 0x504452575F515F46
            && *(void *)&__s1[8] == 0x554E5F5048534D52
            && *(unsigned __int16 *)&__s1[16] == 67)
          {
            float v327 = atof(v820);
            *(float *)(a2 + 6004) = v327;
          }
          if (*(void *)__s1 == 0x504452575F425F46
            && *(void *)&__s1[8] == 0x554E5F5048534D52
            && *(unsigned __int16 *)&__s1[16] == 67)
          {
            float v330 = atof(v820);
            *(float *)(a2 + 6008) = v330;
          }
          if (*(void *)__s1 == 0x504452575F515F46
            && *(void *)&__s1[8] == 0x4D455F5048534D52
            && *(void *)&__s1[11] == 0x48504D455F5048)
          {
            float v333 = atof(v820);
            *(float *)(a2 + 6012) = v333;
          }
          if (*(void *)__s1 == 0x504452575F425F46
            && *(void *)&__s1[8] == 0x4D455F5048534D52
            && *(void *)&__s1[11] == 0x48504D455F5048)
          {
            float v336 = atof(v820);
            *(float *)(a2 + 6016) = v336;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x5F544E535F534F50
            && *(void *)&__s1[14] == 0x4C414E49465F54)
          {
            float v339 = atof(v820);
            *(float *)(a2 + 6020) = v339;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x5F5248505F534F50
            && *(void *)&__s1[14] == 0x4C414E49465F52)
          {
            float v342 = atof(v820);
            *(float *)(a2 + 6024) = v342;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x5F544E535F534F50
            && *(void *)&__s1[13] == 0x54494E495F544ELL)
          {
            float v345 = atof(v820);
            *(float *)(a2 + 6028) = v345;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x5F5248505F534F50
            && *(void *)&__s1[13] == 0x54494E495F5248)
          {
            float v348 = atof(v820);
            *(float *)(a2 + 6032) = v348;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x5F5248505F534F50
            && *(unsigned int *)&__s1[16] == 4475213)
          {
            float v351 = atof(v820);
            *(float *)(a2 + 6036) = v351;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x4853534F50445257
            && *(void *)&__s1[16] == 0x535F544E45535F50
            && *(void *)&__s1[22] == 0x454C474E49535FLL)
          {
            float v355 = atof(v820);
            *(float *)(a2 + 6040) = v355;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x4853534F50445257
            && *(void *)&__s1[16] == 0x495F544E45535F50
            && *(void *)&__s1[23] == 0x4C414954494E49)
          {
            float v359 = atof(v820);
            *(float *)(a2 + 6044) = v359;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x4853534F50445257
            && *(void *)&__s1[16] == 0x465F544E45535F50
            && *(void *)&__s1[21] == 0x4C414E49465F54)
          {
            float v363 = atof(v820);
            *(float *)(a2 + 6048) = v363;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x4853534F50445257
            && *(void *)&__s1[16] == 0x49535F3450495F50
            && *(void *)&__s1[21] == 0x454C474E49535FLL)
          {
            float v367 = atof(v820);
            *(float *)(a2 + 6052) = v367;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x4853534F50445257
            && *(void *)&__s1[16] == 0x4E495F3450495F50
            && *(void *)&__s1[22] == 0x4C414954494E49)
          {
            float v371 = atof(v820);
            *(float *)(a2 + 6056) = v371;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x4853534F50445257
            && *(void *)&__s1[16] == 0x49465F3450495F50
            && *(unsigned int *)&__s1[24] == 4997454)
          {
            float v375 = atof(v820);
            *(float *)(a2 + 6060) = v375;
          }
          if (!(*(void *)__s1 ^ 0x4452575F41515F46 | *(void *)&__s1[8] ^ 0x434341555F4D5250 | __s1[16]))
          {
            float v376 = atof(v820);
            *(float *)(a2 + 6064) = v376;
          }
          if (!(*(void *)__s1 ^ 0x4452575F41515F46 | *(void *)&__s1[8] ^ 0x434341445F4D5250 | __s1[16]))
          {
            float v377 = atof(v820);
            *(float *)(a2 + 6068) = v377;
          }
          if (*(void *)__s1 == 0x4452575F41515F46 && *(void *)&__s1[8] == 0x4343415F4D5250)
          {
            float v379 = atof(v820);
            *(float *)(a2 + 6072) = v379;
          }
          if (!(*(void *)__s1 ^ 0x4452575F41515F46 | *(void *)&__s1[8] ^ 0x48504D455F4D5250 | __s1[16]))
          {
            float v380 = atof(v820);
            *(float *)(a2 + 6076) = v380;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x555F5048534D5250
            && *(unsigned int *)&__s1[16] == 4408129)
          {
            float v383 = atof(v820);
            *(float *)(a2 + 6080) = v383;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x445F5048534D5250
            && *(unsigned int *)&__s1[16] == 4408129)
          {
            float v386 = atof(v820);
            *(float *)(a2 + 6084) = v386;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x415F5048534D5250
            && *(void *)&__s1[11] == 0x4343415F504853)
          {
            float v389 = atof(v820);
            *(float *)(a2 + 6088) = v389;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x4E5F5048534D5250
            && *(void *)&__s1[11] == 0x43554E5F504853)
          {
            float v392 = atof(v820);
            *(float *)(a2 + 6092) = v392;
          }
          if (*(void *)__s1 == 0x4452575F41515F46
            && *(void *)&__s1[8] == 0x455F5048534D5250
            && *(_DWORD *)&__s1[16] == 4739149)
          {
            float v395 = atof(v820);
            *(float *)(a2 + 6096) = v395;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDPOS_SNT_FINAL"))
          {
            float v396 = atof(v820);
            *(float *)(a2 + 6100) = v396;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDPOS_PHR_FINAL"))
          {
            float v397 = atof(v820);
            *(float *)(a2 + 6104) = v397;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDPOS_SNT_INIT"))
          {
            float v398 = atof(v820);
            *(float *)(a2 + 6108) = v398;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDPOS_PHR_INIT"))
          {
            float v399 = atof(v820);
            *(float *)(a2 + 6112) = v399;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDPOS_PHR_MID"))
          {
            float v400 = atof(v820);
            *(float *)(a2 + 6116) = v400;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_SENT_SINGLE"))
          {
            float v401 = atof(v820);
            *(float *)(a2 + 6120) = v401;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_SENT_INITIAL"))
          {
            float v402 = atof(v820);
            *(float *)(a2 + 6124) = v402;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_SENT_FINAL"))
          {
            float v403 = atof(v820);
            *(float *)(a2 + 6128) = v403;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_IP4_SINGLE"))
          {
            float v404 = atof(v820);
            *(float *)(a2 + 6132) = v404;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_IP4_INITIAL"))
          {
            float v405 = atof(v820);
            *(float *)(a2 + 6136) = v405;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_IP4_FINAL"))
          {
            float v406 = atof(v820);
            *(float *)(a2 + 6140) = v406;
          }
          if (*(void *)__s1 == 0x5F54534F434A5F46
            && *(void *)&__s1[8] == 0x415F544847494557
            && *(void *)&__s1[16] == 0x52504452575F4A44
            && *(void *)&__s1[23] == 0x434341555F4D52)
          {
            float v410 = atof(v820);
            *(float *)(a2 + 6144) = v410;
          }
          if (*(void *)__s1 == 0x5F54534F434A5F46
            && *(void *)&__s1[8] == 0x415F544847494557
            && *(void *)&__s1[16] == 0x52504452575F4A44
            && *(void *)&__s1[23] == 0x434341445F4D52)
          {
            float v414 = atof(v820);
            *(float *)(a2 + 6148) = v414;
          }
          if (*(void *)__s1 == 0x5F54534F434A5F46
            && *(void *)&__s1[8] == 0x415F544847494557
            && *(void *)&__s1[16] == 0x52504452575F4A44
            && *(void *)&__s1[22] == 0x4343415F4D5250)
          {
            float v418 = atof(v820);
            *(float *)(a2 + 6152) = v418;
          }
          if (*(void *)__s1 == 0x5F54534F434A5F46
            && *(void *)&__s1[8] == 0x415F544847494557
            && *(void *)&__s1[16] == 0x52504452575F4A44
            && *(void *)&__s1[23] == 0x48504D455F4D52)
          {
            float v422 = atof(v820);
            *(float *)(a2 + 6156) = v422;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDPRMSHP_UACC"))
          {
            float v423 = atof(v820);
            *(float *)(a2 + 6160) = v423;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDPRMSHP_DACC"))
          {
            float v424 = atof(v820);
            *(float *)(a2 + 6164) = v424;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDPRMSHP_ACC"))
          {
            float v425 = atof(v820);
            *(float *)(a2 + 6168) = v425;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDPRMSHP_NUC"))
          {
            float v426 = atof(v820);
            *(float *)(a2 + 6172) = v426;
          }
          if (!strcmp(__s1, "F_JCOST_WEIGHT_ADJ_WRDPRMSHP_EMPH"))
          {
            float v427 = atof(v820);
            *(float *)(a2 + 6176) = v427;
          }
          if (*(void *)__s1 == 0x544E4F435F575F46 && *(unsigned int *)&__s1[8] == 5527621)
          {
            float v429 = atof(v820);
            *(float *)(a2 + 5764) = v429;
          }
          if (*(void *)__s1 == 0x454E45475F575F46
            && *(void *)&__s1[8] == 0x544E4F435F434952
            && *(unsigned int *)&__s1[16] == 5527621)
          {
            float v432 = atof(v820);
            *(float *)(a2 + 5768) = v432;
          }
          if (*(void *)__s1 == 0x4E42415441445F4ELL
            && *(void *)&__s1[8] == 0x4F5F455059545F46
            && *(void *)&__s1[16] == 0x54535F464E425F46
            && *(unsigned int *)&__s1[24] == 4541529)
          {
            *(_DWORD *)(a2 + 7012) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x564A415441445F46
            && *(void *)&__s1[8] == 0x464F5F455059545FLL
            && *(void *)&__s1[16] == 0x4C5954535F564A5FLL
            && *(unsigned __int16 *)&__s1[24] == 69)
          {
            *(_DWORD *)(a2 + 7016) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x564A415441445F42
            && *(void *)&__s1[8] == 0x52455453554C435FLL
            && *(void *)&__s1[11] == 0x44455245545355)
          {
            *(_DWORD *)(a2 + 7020) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x445F45444F4D5F46
            && *(void *)&__s1[8] == 0x444D49535F344345
            && *(void *)&__s1[15] == 0x454C5954535F44)
          {
            *(_DWORD *)(a2 + 7024) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x43494C5058455F42
            && *(void *)&__s1[8] == 0x454E4F48505F5449
            && *(void *)&__s1[15] == 0x4C45444F4D5F45)
          {
            *(_DWORD *)(a2 + 6232) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x4E4F485049445F42 && *(void *)&__s1[8] == 0x5354494E555F45) {
            *(_DWORD *)(a2 + 6236) = LH_atoi(v820) != 0;
          }
          if (!(*(void *)__s1 ^ 0x4D454E4F48505F42 | *(void *)&__s1[8] ^ 0x4154534255535F45 | *(void *)&__s1[16] ^ 0x4C45444F4D5F4554 | __s1[24])) {
            *(_DWORD *)(a2 + 6240) = LH_atoi(v820) != 0;
          }
          if (!strcmp(__s1, "B_PHONEME_SUBSTATE_DATA_OPTIMIZATION")) {
            *(_DWORD *)(a2 + 6244) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x554254494E555F42 && *(void *)&__s1[6] == 0x474E494B4C5542) {
            *(_DWORD *)(a2 + 6252) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x554254494E555F4ELL
            && *(void *)&__s1[8] == 0x45535F474E494B4CLL
            && *(void *)&__s1[16] == 0x4E494D5F48435241
            && *(_DWORD *)&__s1[24] == 4867137)
          {
            *(_DWORD *)(a2 + 6256) = LH_atou(v820);
          }
          if (!strcmp(__s1, "F_UNITBULKING_SEARCH_COST_NO_ADJACENT"))
          {
            float v450 = atof(v820);
            *(float *)(a2 + 6260) = v450;
          }
          if (*(void *)__s1 == 0x5F45544154535F42
            && *(void *)&__s1[8] == 0x554B4341425F4D4CLL
            && *(unsigned __int16 *)&__s1[16] == 80)
          {
            *(_DWORD *)(a2 + 6324) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x54535F4C4C415F42 && *(void *)&__s1[7] == 0x4D4C5F45544154) {
            *(_DWORD *)(a2 + 6328) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x464F4B4341425F42 && *(unsigned __int16 *)&__s1[8] == 70) {
            *(_DWORD *)(a2 + 6332) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x415247494E555F42
            && *(void *)&__s1[8] == 0x4A505F4E495F534DLL
            && *(void *)&__s1[16] == 0x4D5F58544D50535FLL
            && *(void *)&__s1[19] == 0x50434D5F58544DLL)
          {
            *(_DWORD *)(a2 + 6932) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x4F4245444F435F4ELL
            && *(void *)&__s1[8] == 0x4F544345565F4B4FLL
            && *(void *)&__s1[15] == 0x50434D5F53524FLL)
          {
            *(_DWORD *)(a2 + 6948) = LH_atou(v820);
          }
          if (*(void *)__s1 == 0x5845544E4F435F42
            && *(void *)&__s1[8] == 0x42444E4150584554
            && *(void *)&__s1[11] == 0x464E42444E4150)
          {
            *(_DWORD *)(a2 + 7008) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x464F455059545F4ELL
            && *(void *)&__s1[8] == 0x534F434843544950
            && *(unsigned __int16 *)&__s1[16] == 84)
          {
            *(_DWORD *)(a2 + 7028) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x4E4E494D4C4C5F46
            && *(void *)&__s1[8] == 0x5445475241544745
            && *(void *)&__s1[13] == 0x50455453544547)
          {
            float v466 = atof(v820);
            *(float *)(a2 + 6448) = v466;
          }
          if (!(*(void *)__s1 ^ 0x4155514553555F42 | *(void *)&__s1[8] ^ 0x4C4C44455A49544ELL | __s1[16])) {
            *(_DWORD *)(a2 + 6452) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x4C4C4553555F42) {
            *(_DWORD *)(a2 + 6456) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x5348435449505F46
            && *(void *)&__s1[8] == 0x4749455745504F4CLL
            && *(void *)&__s1[11] == 0x54484749455745)
          {
            float v469 = atof(v820);
            *(float *)(a2 + 7032) = v469;
          }
          if (*(void *)__s1 == 0x414D5F464E425F46 && *(void *)&__s1[5] == 0x4C415658414D5FLL)
          {
            float v471 = atof(v820);
            *(float *)(a2 + 6928) = 127.0 / v471;
          }
          if (*(void *)__s1 == 0x415247494E555F42
            && *(void *)&__s1[8] == 0x4A505F4E495F534DLL
            && *(void *)&__s1[16] == 0x4C5F58544D50535FLL
            && *(void *)&__s1[19] == 0x30464C5F58544DLL)
          {
            *(_DWORD *)(a2 + 6936) = LH_atoi(v820) != 0;
          }
          if (!(*(void *)__s1 ^ 0x4A505F4553555F42 | *(void *)&__s1[8] ^ 0x50434D5F4D53465FLL | __s1[16])) {
            *(_DWORD *)(a2 + 6940) = LH_atoi(v820) != 0;
          }
          if (!(*(void *)__s1 ^ 0x5F4D4152474E5F4ELL | *(void *)&__s1[8] ^ 0x4A505F524544524FLL | *(void *)&__s1[16] ^ 0x50434D5F4D53465FLL | __s1[24])) {
            *(_DWORD *)(a2 + 6944) = LH_atoi(v820);
          }
          if (!(*(void *)__s1 ^ 0x4A505F4553555F42 | *(void *)&__s1[8] ^ 0x30464C5F4D53465FLL | __s1[16])) {
            *(_DWORD *)(a2 + 6952) = LH_atoi(v820) != 0;
          }
          if (!(*(void *)__s1 ^ 0x5F4D4152474E5F4ELL | *(void *)&__s1[8] ^ 0x4A505F524544524FLL | *(void *)&__s1[16] ^ 0x30464C5F4D53465FLL | __s1[24])) {
            *(_DWORD *)(a2 + 6956) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x505F534149425F46
            && *(void *)&__s1[8] == 0x464C5F4D53465F4ALL
            && *(unsigned __int16 *)&__s1[16] == 48)
          {
            float v477 = atof(v820);
            *(float *)(a2 + 6960) = v477;
          }
          if (*(void *)__s1 == 0x535F534149425F4ELL
            && *(void *)&__s1[8] == 0x5F4A505F54464948
            && *(void *)&__s1[16] == 0x30464C5F4D5346)
          {
            *(_DWORD *)(a2 + 6964) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x4F5F534149425F42
            && *(void *)&__s1[8] == 0x43494F565F594C4ELL
            && *(void *)&__s1[16] == 0x53465F4A505F4445
            && *(void *)&__s1[22] == 0x30464C5F4D5346)
          {
            *(_DWORD *)(a2 + 6968) = LH_atoi(v820) != 0;
          }
          if (!(*(void *)__s1 ^ 0x5F544E4155515F42 | *(void *)&__s1[8] ^ 0x5F504D4F43455250 | *(void *)&__s1[16] ^ 0x30464C5F524D5346 | __s1[24])) {
            *(_DWORD *)(a2 + 6972) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x50534E4152545F42
            && *(void *)&__s1[8] == 0x4D5F4A505F45534FLL
            && *(void *)&__s1[11] == 0x58544D5F4A505FLL)
          {
            *(_DWORD *)(a2 + 6980) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x48435F4E4E415F4ELL
            && *(void *)&__s1[8] == 0x535F48505F4B4E55
            && *(unsigned int *)&__s1[16] == 4545097)
          {
            *(_DWORD *)(a2 + 6996) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x48435F4E4E415F4ELL
            && *(void *)&__s1[8] == 0x4F5F48505F4B4E55
            && *(void *)&__s1[16] == 0x5A49535F4C5F4C56
            && *(unsigned __int16 *)&__s1[24] == 69)
          {
            *(_DWORD *)(a2 + 7000) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x48435F4E4E415F4ELL
            && *(void *)&__s1[8] == 0x4F5F48505F4B4E55
            && *(void *)&__s1[16] == 0x5A49535F525F4C56
            && *(unsigned __int16 *)&__s1[24] == 69)
          {
            *(_DWORD *)(a2 + 7004) = LH_atoi(v820);
          }
          if (!(*(void *)__s1 ^ 0x4954494444415F42 | *(void *)&__s1[8] ^ 0x534E4152545F4556 | *(void *)&__s1[16] ^ 0x535448474945575FLL | __s1[24])) {
            *(_DWORD *)(a2 + 6392) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x454C42414E455F42 && *(void *)&__s1[5] == 0x4C43435F454C42) {
            *(_DWORD *)(a2 + 6376) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x43435F4E454C5F4ELL && *(unsigned __int16 *)&__s1[8] == 76) {
            *(_DWORD *)(a2 + 6380) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x48545F4C4C535F46 && *(_DWORD *)&__s1[8] == 5457234)
          {
            float v496 = atof(v820);
            *(float *)(a2 + 6384) = v496;
          }
          if (*(void *)__s1 == 0x454C42414E455F42
            && *(void *)&__s1[8] == 0x5248545F4C4C535FLL
            && *(void *)&__s1[11] == 0x53455248545F4CLL)
          {
            *(_DWORD *)(a2 + 6388) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x454C42414E455F42
            && *(void *)&__s1[8] == 0x5349445F464E425FLL
            && *(void *)&__s1[16] == 0x52505F45434E4154
            && *(void *)&__s1[22] == 0x474E494E555250)
          {
            *(_DWORD *)(a2 + 6396) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x52505F464E425F4ELL
            && *(void *)&__s1[8] == 0x494D5F474E494E55
            && *(void *)&__s1[16] == 0x5345444F4E5F4ELL)
          {
            *(_DWORD *)(a2 + 6400) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x494D5F464E425F4ELL && *(void *)&__s1[7] == 0x444E41435F4E49) {
            *(_DWORD *)(a2 + 6404) = LH_atou(v820);
          }
          if (*(void *)__s1 == 0x414D5F464E425F4ELL && *(void *)&__s1[7] == 0x444E41435F5841) {
            *(_DWORD *)(a2 + 6408) = LH_atou(v820);
          }
          if (*(void *)__s1 == 0x48545F464E425F4ELL && *(void *)&__s1[5] == 0x4853455248545FLL)
          {
            float v507 = atof(v820);
            *(float *)(a2 + 6412) = v507;
          }
          if (*(void *)__s1 == 0x5F454E5552505F46
            && *(void *)&__s1[8] == 0x4C54554F5F525544
            && *(void *)&__s1[16] == 0x544341465F524549
            && *(void *)&__s1[19] == 0x524F544341465FLL)
          {
            float v511 = atof(v820);
            *(float *)(a2 + 6416) = v511;
          }
          if (*(void *)__s1 == 0x5F454E5552505F46
            && *(void *)&__s1[8] == 0x4C54554F5F525544
            && *(void *)&__s1[16] == 0x58414D5F524549)
          {
            float v514 = atof(v820);
            *(float *)(a2 + 6420) = v514;
          }
          if (*(void *)__s1 == 0x5F454E5552505F46
            && *(void *)&__s1[8] == 0x4C54554F5F525544
            && *(void *)&__s1[16] == 0x545349445F524549
            && *(void *)&__s1[24] == 0x314D415241505FLL)
          {
            float v518 = atof(v820);
            *(float *)(a2 + 6424) = v518;
          }
          if (*(void *)__s1 == 0x5F454E5552505F46
            && *(void *)&__s1[8] == 0x4C54554F5F525544
            && *(void *)&__s1[16] == 0x545349445F524549
            && *(void *)&__s1[24] == 0x324D415241505FLL)
          {
            float v522 = atof(v820);
            *(float *)(a2 + 6428) = v522;
          }
          if (!strcmp(__s1, "F_PRUNE_PITCH_SLOPE_OUTLIER_DIST_PARAM1"))
          {
            float v523 = atof(v820);
            *(float *)(a2 + 6432) = v523;
          }
          if (!strcmp(__s1, "F_PRUNE_PITCH_SLOPE_OUTLIER_DIST_PARAM2"))
          {
            float v524 = atof(v820);
            *(float *)(a2 + 6436) = v524;
          }
          if (!strcmp(__s1, "F_PRUNE_PITCH_EDGE_OUTLIER_DIST_PARAM1"))
          {
            float v525 = atof(v820);
            *(float *)(a2 + 6440) = v525;
          }
          if (!strcmp(__s1, "F_PRUNE_PITCH_EDGE_OUTLIER_DIST_PARAM2"))
          {
            float v526 = atof(v820);
            *(float *)(a2 + 6444) = v526;
          }
          if (*(void *)__s1 == 0x4E525F464E425F42
            && *(void *)&__s1[8] == 0x43454A4F52505F44
            && *(void *)&__s1[13] == 0x4E4F495443454ALL)
          {
            *(_DWORD *)(a2 + 6984) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x45565F464E425F4ELL
            && *(void *)&__s1[8] == 0x5A49535F524F5443
            && *(unsigned __int16 *)&__s1[16] == 69)
          {
            *(_DWORD *)(a2 + 6988) = LH_atou(v820);
          }
          if (!(*(void *)__s1 ^ 0x464C5F464E425F4ELL | *(void *)&__s1[8] ^ 0x545F4E494F4A5F30 | *(void *)&__s1[16] ^ 0x444C4F4853455248 | __s1[24])) {
            *(_DWORD *)(a2 + 6920) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x4E525F58414D5F4ELL
            && *(void *)&__s1[8] == 0x4F4A5F30464C5F4ELL
            && *(void *)&__s1[16] == 0x41495645445F4E49
            && *(void *)&__s1[21] == 0x4E4F4954414956)
          {
            *(_DWORD *)(a2 + 6924) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x4155474E414C5F53
            && *(void *)&__s1[8] == 0x4349444E495F4547
            && *(void *)&__s1[11] == 0x53454349444E49)
          {
            *(void *)(a2 + 6464) = BET3FLT__heap_StrDup((void *)a1[1], v820);
          }
          if (*(void *)__s1 == 0x4954534555515F53
            && *(void *)&__s1[8] == 0x4349444E495F4E4FLL
            && *(void *)&__s1[11] == 0x53454349444E49)
          {
            *(void *)(a2 + 6472) = BET3FLT__heap_StrDup((void *)a1[1], v820);
          }
          if (*(void *)__s1 == 0x5F454C5954535F53 && *(void *)&__s1[8] == 0x53454349444E49) {
            *(void *)(a2 + 6480) = BET3FLT__heap_StrDup((void *)a1[1], v820);
          }
          if (*(void *)__s1 == 0x4C5F4E49414D5F4ELL
            && *(void *)&__s1[8] == 0x5F45474155474E41
            && *(void *)&__s1[14] == 0x5845444E495F45)
          {
            *(_DWORD *)(a2 + 6872) = LH_atoi(v820);
          }
          if (!(*(void *)__s1 ^ 0x4155474E414C5F46 | *(void *)&__s1[8] ^ 0x45524F43535F4547 | __s1[16]))
          {
            float v541 = atof(v820);
            *(float *)(a2 + 6876) = v541;
          }
          if (!(*(void *)__s1 ^ 0x4954534555515F46 | *(void *)&__s1[8] ^ 0x45524F43535F4E4FLL | __s1[16]))
          {
            float v542 = atof(v820);
            *(float *)(a2 + 6880) = v542;
          }
          if (*(void *)__s1 == 0x5F454C5954535F46 && *(void *)&__s1[6] == 0x45524F43535F45)
          {
            float v544 = atof(v820);
            *(float *)(a2 + 6884) = v544;
          }
          if (!(*(void *)__s1 ^ 0x505F45444F4E5F4ELL | *(void *)&__s1[8] ^ 0x4E494D5F454E5552 | __s1[16])) {
            *(_DWORD *)(a2 + 6888) = LH_atoi(v820);
          }
          if (!(*(void *)__s1 ^ 0x535F45444F4E5F46 | *(void *)&__s1[8] ^ 0x58414D5F45524F43 | __s1[16]))
          {
            float v545 = atof(v820);
            *(float *)(a2 + 6892) = v545;
          }
          if (*(void *)__s1 == 0x53315F4745425F46
            && *(void *)&__s1[8] == 0x4441435341435F54
            && *(void *)&__s1[16] == 0x4F544341465F4445
            && *(unsigned __int16 *)&__s1[24] == 82)
          {
            float v549 = atof(v820);
            *(float *)(a2 + 6896) = v549;
          }
          if (*(void *)__s1 == 0x53315F44494D5F46
            && *(void *)&__s1[8] == 0x4441435341435F54
            && *(void *)&__s1[16] == 0x4F544341465F4445
            && *(unsigned __int16 *)&__s1[24] == 82)
          {
            float v553 = atof(v820);
            *(float *)(a2 + 6900) = v553;
          }
          BOOL v556 = *(void *)__s1 == 0x53315F444E455F46
              && *(void *)&__s1[8] == 0x4441435341435F54
              && *(void *)&__s1[16] == 0x4F544341465F4445
              && *(unsigned __int16 *)&__s1[24] == 82;
          int v14 = v818;
          if (v556)
          {
            float v557 = atof(v820);
            *(float *)(a2 + 6904) = v557;
          }
          if (*(void *)__s1 == 0x4E325F4745425F46
            && *(void *)&__s1[8] == 0x4441435341435F44
            && *(void *)&__s1[16] == 0x4F544341465F4445
            && *(unsigned __int16 *)&__s1[24] == 82)
          {
            float v561 = atof(v820);
            *(float *)(a2 + 6908) = v561;
          }
          if (*(void *)__s1 == 0x4E325F44494D5F46
            && *(void *)&__s1[8] == 0x4441435341435F44
            && *(void *)&__s1[16] == 0x4F544341465F4445
            && *(unsigned __int16 *)&__s1[24] == 82)
          {
            float v565 = atof(v820);
            *(float *)(a2 + 6912) = v565;
          }
          if (*(void *)__s1 == 0x4E325F444E455F46
            && *(void *)&__s1[8] == 0x4441435341435F44
            && *(void *)&__s1[16] == 0x4F544341465F4445
            && *(unsigned __int16 *)&__s1[24] == 82)
          {
            float v569 = atof(v820);
            *(float *)(a2 + 6916) = v569;
          }
          if (*(void *)__s1 == 0x4E555F58414D5F4ELL
            && *(void *)&__s1[8] == 0x555F455341425449
            && *(void *)&__s1[13] == 0x5354494E555F45)
          {
            *(_DWORD *)(a2 + 7048) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x414F4C58414D5F4ELL && *(void *)&__s1[8] == 0x5354494E555F44) {
            *(_DWORD *)(a2 + 7052) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x4E415F4553555F42 && *(void *)&__s1[7] == 0x444552505F4E4ELL) {
            *(_DWORD *)(a2 + 6992) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x52505F4E4E415F53
            && *(void *)&__s1[8] == 0x414C54554F5F4445
            && *(void *)&__s1[16] == 0x464E425F524559)
          {
            v576 = BET3FLT__heap_StrDup((void *)a1[1], v820);
            *(void *)(a2 + 10664) = v576;
            if (!v576) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (*(void *)__s1 == 0x52505F4E4E415F53
            && *(void *)&__s1[8] == 0x414C54554F5F4445
            && *(void *)&__s1[16] == 0x30464C5F524559)
          {
            v579 = BET3FLT__heap_StrDup((void *)a1[1], v820);
            *(void *)(a2 + 10672) = v579;
            if (!v579) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (*(void *)__s1 == 0x52505F4E4E415F53
            && *(void *)&__s1[8] == 0x414C54554F5F4445
            && *(void *)&__s1[16] == 0x5255445F524559)
          {
            v582 = BET3FLT__heap_StrDup((void *)a1[1], v820);
            *(void *)(a2 + 10680) = v582;
            if (!v582) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!(*(void *)__s1 ^ 0x52505F4E4E415F53 | *(void *)&__s1[8] ^ 0x414C54554F5F4445 | *(void *)&__s1[16] ^ 0x525544535F524559 | __s1[24]))
          {
            v583 = BET3FLT__heap_StrDup((void *)a1[1], v820);
            *(void *)(a2 + 10688) = v583;
            if (!v583) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (*(void *)__s1 == 0x52505F4E4E415F53
            && *(void *)&__s1[8] == 0x414C54554F5F4445
            && *(void *)&__s1[16] == 0x5655565F524559)
          {
            v586 = BET3FLT__heap_StrDup((void *)a1[1], v820);
            *(void *)(a2 + 10696) = v586;
            if (!v586) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!(*(void *)__s1 ^ 0x52505F4E4E415F53 | *(void *)&__s1[8] ^ 0x414C54554F5F4445 | *(void *)&__s1[16] ^ 0x30464C455F524559 | __s1[24]))
          {
            v587 = BET3FLT__heap_StrDup((void *)a1[1], v820);
            *(void *)(a2 + 10704) = v587;
            if (!v587) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!(*(void *)__s1 ^ 0x52505F4E4E415F53 | *(void *)&__s1[8] ^ 0x414C54554F5F4445 | *(void *)&__s1[16] ^ 0x525544505F524559 | __s1[24]))
          {
            v588 = BET3FLT__heap_StrDup((void *)a1[1], v820);
            *(void *)(a2 + 10712) = v588;
            if (!v588) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (*(void *)__s1 == 0x555F4E494F4A5F46
            && *(void *)&__s1[8] == 0x524C59535F54494ELL
            && *(void *)&__s1[16] == 0x544341465F455441
            && *(void *)&__s1[19] == 0x524F544341465FLL)
          {
            float v592 = atof(v820);
            *(float *)(a2 + 7040) = v592;
          }
          if (*(void *)__s1 == 0x555F4E494F4A5F42
            && *(void *)&__s1[8] == 0x524C59535F54494ELL
            && *(void *)&__s1[16] == 0x4A44415F455441)
          {
            *(_DWORD *)(a2 + 7044) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x54535F4D4D485F46
            && *(void *)&__s1[8] == 0x4945575F4D414552
            && *(void *)&__s1[16] == 0x5F5255445F544847
            && *(void *)&__s1[21] == 0x454E55545F5255)
          {
            float v598 = atof(v820);
            *(float *)(a2 + 11752) = v598;
          }
          if (*(void *)__s1 == 0x575F4D4145425F46
            && *(void *)&__s1[8] == 0x4E55545F48544449
            && *(unsigned __int16 *)&__s1[16] == 69)
          {
            float v601 = atof(v820);
            *(float *)(a2 + 11748) = v601;
          }
          if (*(void *)__s1 == 0x5F54534F434A5F46
            && *(void *)&__s1[8] == 0x415F544847494557
            && *(void *)&__s1[16] == 0x454E55545F4A44)
          {
            float v604 = atof(v820);
            *(float *)(a2 + 11756) = v604;
          }
          if (*(void *)__s1 == 0x41515F4D59535F46 && *(void *)&__s1[6] == 0x454E55545F4151)
          {
            float v606 = atof(v820);
            *(float *)(a2 + 11760) = v606;
          }
          if (*(void *)__s1 == 0x4C5F45444F4E5F4ELL
            && *(void *)&__s1[8] == 0x4E55545F54494D49
            && *(unsigned __int16 *)&__s1[16] == 69)
          {
            *(_DWORD *)(a2 + 11764) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x4F4E5F564E495F4ELL
            && *(void *)&__s1[8] == 0x54494D494C5F4544
            && *(void *)&__s1[14] == 0x454E55545F5449)
          {
            *(_DWORD *)(a2 + 11768) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x505F45444F4E5F4ELL
            && *(void *)&__s1[8] == 0x58414D5F454E5552
            && *(void *)&__s1[14] == 0x454E55545F5841)
          {
            *(_DWORD *)(a2 + 11772) = LH_atoi(v820);
          }
          if (*(void *)__s1 == 0x56444558494D5F42
            && *(void *)&__s1[8] == 0x4942474E4943494FLL
            && *(void *)&__s1[14] == 0x534D4152474942)
          {
            *(_DWORD *)(a2 + 5852) = LH_atoi(v820) != 0;
          }
          if (*(void *)__s1 == 0x444F435F56555F4ELL && *(unsigned __int16 *)&__s1[8] == 69) {
            *(_DWORD *)(a2 + 5856) = LH_atou(v820);
          }
          BOOL v617 = *(void *)__s1 == 0x525245444E555F4ELL
              && *(void *)&__s1[8] == 0x53455248545F4E55
              && *(void *)&__s1[13] == 0x444C4F48534552;
          uint64_t v11 = a3;
          if (v617) {
            *(_DWORD *)(a2 + 6180) = LH_atou(v820);
          }
          if (*(void *)__s1 == 0x45594C5241455F4ELL
            && *(void *)&__s1[8] == 0x5F4E4F495353494DLL
            && *(void *)&__s1[16] == 0x4F5059485F58414DLL
            && *(void *)&__s1[23] == 0x5345534548544FLL)
          {
            *(_DWORD *)(a2 + 6184) = LH_atou(v820);
          }
          if (!strcmp(__s1, "N_EARLYEMISSION_MAX_AMBIGUITY_WINDOW")) {
            *(_DWORD *)(a2 + 6188) = LH_atou(v820);
          }
LABEL_1920:
          if ((ChunkData & 0x80000000) != 0) {
            break;
          }
          v147 += v809;
          unsigned int v146 = v824;
        }
        while (v809 + v811 < v824);
      }
      goto LABEL_242;
    }
    if (!(*(_DWORD *)__src ^ 0x58454546 | v823))
    {
LABEL_79:
      float v61 = a1;
      uint64_t v62 = a2;
      uint64_t v63 = v11;
      uint64_t v64 = 1;
      goto LABEL_80;
    }
    if (!(*(_DWORD *)__src ^ 0x34544350 | v823))
    {
      *(void *)v827 = 0;
      if (v8)
      {
        uint64_t v145 = (_WORD *)(v8 + ssftriff_reader_GetPosition(v11) - v807);
        *(void *)v827 = v145;
      }
      else
      {
        uint64_t v643 = ssftriff_reader_GetChunkData(v11, v824, v827, v16, v17, v18, v19, v20);
        if ((v643 & 0x80000000) != 0) {
          return v643;
        }
        uint64_t v145 = *(_WORD **)v827;
      }
      int v644 = v824;
      uint64_t v645 = (uint64_t)a1;
      uint64_t v646 = v11;
      v647 = v798;
      goto LABEL_1985;
    }
    if (*(_DWORD *)__src ^ 0x334D5453 | v823)
    {
      if (!(*(_DWORD *)__src ^ 0x35454A43 | v823))
      {
        unint64_t v639 = *(unsigned __int16 *)(v800 + 516);
        if (v639 > 0x3F) {
          goto LABEL_2149;
        }
        int v640 = v824;
        LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v639 + 42848), v788, v16, v17, v18, v19, v20);
        if ((ChunkData & 0x80000000) == 0)
        {
          ++*(_WORD *)(v800 + 516);
          *(_DWORD *)v800 += v640;
          *(_DWORD *)(a2 + 8880) = v640;
        }
        goto LABEL_2043;
      }
      if (!(*(_DWORD *)__src ^ 0x34444E55 | v823))
      {
        unint64_t v656 = *(unsigned __int16 *)(v800 + 516);
        if (v656 > 0x3F) {
          goto LABEL_2149;
        }
        int v657 = v824;
        LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v656 + 42848), v785, v16, v17, v18, v19, v20);
        if ((ChunkData & 0x80000000) == 0)
        {
          ++*(_WORD *)(v800 + 516);
          *(_DWORD *)v800 += v657;
          *(_DWORD *)(a2 + 7320) = v657;
        }
        goto LABEL_2043;
      }
      if (!(*(_DWORD *)__src ^ 0x504E4E41 | v823))
      {
        unint64_t v662 = *(unsigned __int16 *)(v800 + 516);
        if (v662 > 0x3F) {
          goto LABEL_2149;
        }
        int v663 = v824;
        LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v662 + 42848), v782, v16, v17, v18, v19, v20);
        if ((ChunkData & 0x80000000) == 0)
        {
          ++*(_WORD *)(v800 + 516);
          *(_DWORD *)v800 += v663;
          *(_DWORD *)(a2 + 8280) = v663;
        }
        goto LABEL_2043;
      }
      if (!(*(_DWORD *)__src ^ 0x464E4E41 | v823))
      {
        unint64_t v685 = *(unsigned __int16 *)(v800 + 516);
        if (v685 > 0x3F) {
          goto LABEL_2149;
        }
        int v686 = v824;
        LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v685 + 42848), v777, v16, v17, v18, v19, v20);
        if ((ChunkData & 0x80000000) == 0)
        {
          ++*(_WORD *)(v800 + 516);
          *(_DWORD *)v800 += v686;
          *(_DWORD *)(a2 + 10080) = v686;
        }
        goto LABEL_2043;
      }
      if (*(_DWORD *)__src ^ 0x56434E42 | v823)
      {
        if (!(*(_DWORD *)__src ^ 0x4E434E42 | v823))
        {
          unint64_t v712 = *(unsigned __int16 *)(v800 + 516);
          if (v712 > 0x3F) {
            goto LABEL_2149;
          }
          int v713 = v824;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v712 + 42848), v774, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v800 + 516);
            *(_DWORD *)v800 += v713;
            *(_DWORD *)(a2 + 8064) = v713;
          }
          goto LABEL_2043;
        }
        if (!(*(_DWORD *)__src ^ 0x4F444955 | v823))
        {
          unint64_t v716 = *(unsigned __int16 *)(v800 + 516);
          if (v716 > 0x3F) {
            goto LABEL_2149;
          }
          int v717 = v824;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v716 + 42848), v773, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v800 + 516);
            *(_DWORD *)v800 += v717;
            *(_DWORD *)(a2 + 9120) = v717;
          }
          goto LABEL_2043;
        }
        if (!(*(_DWORD *)__src ^ 0x4C304645 | v823))
        {
          unint64_t v727 = *(unsigned __int16 *)(v800 + 516);
          if (v727 > 0x3F) {
            goto LABEL_2149;
          }
          int v728 = v824;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v727 + 42848), v772, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v800 + 516);
            *(_DWORD *)v800 += v728;
            *(_DWORD *)(a2 + 9240) = v728;
          }
          goto LABEL_2043;
        }
        if (!(*(_DWORD *)__src ^ 0x52304645 | v823))
        {
          unint64_t v730 = *(unsigned __int16 *)(v800 + 516);
          if (v730 > 0x3F) {
            goto LABEL_2149;
          }
          int v731 = v824;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v730 + 42848), v771, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v800 + 516);
            *(_DWORD *)v800 += v731;
            *(_DWORD *)(a2 + 9264) = v731;
          }
          goto LABEL_2043;
        }
        if (!(*(_DWORD *)__src ^ 0x3046494D | v823))
        {
          unint64_t v732 = *(unsigned __int16 *)(v800 + 516);
          if (v732 > 0x3F) {
            goto LABEL_2149;
          }
          int v733 = v824;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v732 + 42848), v770, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v800 + 516);
            *(_DWORD *)v800 += v733;
            *(_DWORD *)(a2 + 9360) = v733;
          }
          goto LABEL_2043;
        }
        if (!(*(_DWORD *)__src ^ 0x44415246 | v823))
        {
          unint64_t v734 = *(unsigned __int16 *)(v800 + 516);
          if (v734 > 0x3F) {
            goto LABEL_2149;
          }
          int v735 = v824;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v734 + 42848), v769, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v800 + 516);
            *(_DWORD *)v800 += v735;
            *(_DWORD *)(a2 + 9480) = v735;
          }
          goto LABEL_2043;
        }
        if (!(*(_DWORD *)__src ^ 0x4C4C5343 | v823))
        {
          unint64_t v736 = *(unsigned __int16 *)(v800 + 516);
          if (v736 > 0x3F) {
            goto LABEL_2149;
          }
          int v737 = v824;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v736 + 42848), v768, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v800 + 516);
            *(_DWORD *)v800 += v737;
            *(_DWORD *)(a2 + 9600) = v737;
          }
          goto LABEL_2043;
        }
        if (!(*(_DWORD *)__src ^ 0x544E4943 | v823))
        {
          unint64_t v738 = *(unsigned __int16 *)(v800 + 516);
          if (v738 > 0x3F) {
            goto LABEL_2149;
          }
          int v739 = v824;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v738 + 42848), v767, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v800 + 516);
            *(_DWORD *)v800 += v739;
            *(_DWORD *)(a2 + 9720) = v739;
          }
          goto LABEL_2043;
        }
        if (!(*(_DWORD *)__src ^ 0x355A5546 | v823))
        {
          unint64_t v740 = *(unsigned __int16 *)(v800 + 516);
          if (v740 > 0x3F) {
            goto LABEL_2149;
          }
          int v742 = v824;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v740 + 42848), v766, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v800 + 516);
            *(_DWORD *)v800 += v742;
            *(_DWORD *)(a2 + 10440) = v742;
          }
          goto LABEL_2043;
        }
        if (*(_DWORD *)__src ^ 0x4D595343 | v823)
        {
          if (!(*(_DWORD *)__src ^ 0x35524347 | v823))
          {
            unint64_t v743 = *(unsigned __int16 *)(v800 + 516);
            if (v743 <= 0x3F)
            {
              int v744 = v824;
              LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * v743 + 42848), v764, v16, v17, v18, v19, v20);
              if ((ChunkData & 0x80000000) == 0)
              {
                ++*(_WORD *)(v800 + 516);
                *(_DWORD *)v800 += v744;
                *(_DWORD *)(a2 + 10560) = v744;
              }
              goto LABEL_2170;
            }
LABEL_2169:
            LODWORD(ChunkData) = -2065686524;
            goto LABEL_2170;
          }
          if (!(*(_DWORD *)__src ^ 0x444F4850 | v823))
          {
            unint64_t v746 = *(unsigned __int16 *)(v800 + 516);
            if (v746 <= 0x3F)
            {
              int v747 = v824;
              LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * v746 + 42848), v763, v16, v17, v18, v19, v20);
              if ((ChunkData & 0x80000000) == 0)
              {
                ++*(_WORD *)(v800 + 516);
                *(_DWORD *)v800 += v747;
                *(_DWORD *)(a2 + 9840) = v747;
              }
              goto LABEL_2170;
            }
            goto LABEL_2169;
          }
          if (!(*(_DWORD *)__src ^ 0x54464E42 | v823))
          {
            unint64_t v748 = *(unsigned __int16 *)(v800 + 516);
            if (v748 <= 0x3F)
            {
              int v749 = v824;
              LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * v748 + 42848), v762, v16, v17, v18, v19, v20);
              if ((ChunkData & 0x80000000) == 0)
              {
                ++*(_WORD *)(v800 + 516);
                *(_DWORD *)v800 += v749;
                *(_DWORD *)(a2 + 8400) = v749;
              }
              goto LABEL_2170;
            }
            goto LABEL_2169;
          }
          if (!(*(_DWORD *)__src ^ 0x44554F4C | v823))
          {
            unint64_t v750 = *(unsigned __int16 *)(v800 + 516);
            if (v750 <= 0x3F)
            {
              int v751 = v824;
              LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * v750 + 42848), v761, v16, v17, v18, v19, v20);
              if ((ChunkData & 0x80000000) == 0)
              {
                ++*(_WORD *)(v800 + 516);
                *(_DWORD *)v800 += v751;
                *(_DWORD *)(a2 + 8520) = v751;
              }
              goto LABEL_2170;
            }
            goto LABEL_2169;
          }
          if (!(*(_DWORD *)__src ^ 0x524C5953 | v823))
          {
            unint64_t v752 = *(unsigned __int16 *)(v800 + 516);
            if (v752 <= 0x3F)
            {
              int v753 = v824;
              LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * v752 + 42848), v760, v16, v17, v18, v19, v20);
              if ((ChunkData & 0x80000000) == 0)
              {
                ++*(_WORD *)(v800 + 516);
                *(_DWORD *)v800 += v753;
                *(_DWORD *)(a2 + 8640) = v753;
              }
              goto LABEL_2170;
            }
            goto LABEL_2169;
          }
          uint64_t v13 = v805;
          uint64_t v8 = a6;
          uint64_t v11 = a3;
          if (!(*(_DWORD *)__src ^ 0x44464E42 | v823))
          {
            unint64_t v21 = *(unsigned __int16 *)(v800 + 516);
            if (v21 <= 0x3F)
            {
              int v754 = v824;
              LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * v21 + 42848), v759, v16, v17, v18, v19, v20);
              if ((ChunkData & 0x80000000) == 0)
              {
                ++*(_WORD *)(v800 + 516);
                *(_DWORD *)v800 += v754;
                *(_DWORD *)(a2 + 8040) = v754;
              }
            }
            else
            {
              LODWORD(ChunkData) = -2065686524;
            }
            uint64_t v13 = v805;
            uint64_t v8 = a6;
            int v14 = v818;
            goto LABEL_2171;
          }
          goto LABEL_2040;
        }
        unint64_t v741 = *(unsigned __int16 *)(v800 + 516);
        if (v741 <= 0x3F)
        {
          int v745 = v824;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v741 + 42848), v765, v16, v17, v18, v19, v20);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v800 + 516);
            *(_DWORD *)v800 += v745;
            *(_DWORD *)(a2 + 10200) = v745;
          }
LABEL_2170:
          uint64_t v13 = v805;
          uint64_t v8 = a6;
          int v14 = v818;
LABEL_2171:
          uint64_t v11 = a3;
          goto LABEL_2044;
        }
        LODWORD(ChunkData) = -2065686524;
LABEL_2043:
        int v14 = v818;
        goto LABEL_2044;
      }
      uint64_t v37 = v824;
      uint64_t v144 = *(unsigned int *)(v800 + 584);
      uint64_t v38 = a2;
      uint64_t v39 = v11;
      unsigned int v40 = 8;
      uint64_t v36 = 0;
      uint64_t v142 = 0;
      uint64_t v143 = 0;
LABEL_295:
      int RiffStringTable = select_bet5_LoadMfsData(v38, v39, v40, v36, v37, v142, v143, v144);
LABEL_1986:
      LODWORD(ChunkData) = RiffStringTable;
      goto LABEL_2044;
    }
    *(void *)v827 = 0;
    unint64_t v630 = *(unsigned __int16 *)(v800 + 516);
    LODWORD(ChunkData) = -2065686524;
    if (v630 <= 0x3F)
    {
      int RiffStringTable = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v630 + 42848), v827, v16, v17, v18, v19, v20);
      if (RiffStringTable < 0) {
        goto LABEL_1986;
      }
      uint64_t v631 = ssftriff_reader_GetPosition(v11);
      ++*(_WORD *)(v800 + 516);
      *(_DWORD *)v800 += v824;
      LODWORD(ChunkData) = select_bet5_ParseRiff(a1, a2, v11, 1, a5, *(void *)v827, v631);
      ++*(_DWORD *)(a2 + 388);
    }
LABEL_2044:
    int v696 = ssftriff_reader_CloseChunk(v11);
    if ((int)ChunkData > -1 && v696 < 0) {
      LODWORD(ChunkData) = v696;
    }
  }
  while ((ChunkData & 0x80000000) == 0);
  if ((ChunkData & 0x1FFF) == 0x14) {
    uint64_t ChunkData = 0;
  }
  else {
    uint64_t ChunkData = ChunkData;
  }
  if ((ChunkData & 0x80000000) == 0) {
    *uint64_t v13 = 0;
  }
  v755 = *(char **)(a2 + 6464);
  if (v755) {
    ParseInternalTagString(v755, a2 + 6488);
  }
  v756 = *(char **)(a2 + 6472);
  if (v756) {
    ParseInternalTagString(v756, a2 + 6616);
  }
  v757 = *(char **)(a2 + 6480);
  if (v757) {
    ParseInternalTagString(v757, a2 + 6744);
  }
  return ChunkData;
}

uint64_t select_bet5_LoadMfsData(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v9 = a4;
  if (a6)
  {
    int v12 = a7;
    int Position = ssftriff_reader_GetPosition(a2);
    uint64_t result = 0;
    uint64_t v16 = a1 + 120 * a3 + 24 * v9;
    *(void *)(v16 + 7072) = a6 + (Position - v12);
    *(_DWORD *)(v16 + 7080) = v8;
  }
  else if (a8)
  {
    uint64_t result = 2229280769;
    if (a3 == 8 && !a4)
    {
      *(_DWORD *)(a1 + 8040) = a5;
      int v17 = ssftriff_reader_GetPosition(a2);
      uint64_t result = 0;
      *(_DWORD *)(a1 + 8044) = v17;
    }
  }
  else
  {
    unint64_t v18 = *(unsigned __int16 *)(a1 + 43360);
    if (v18 <= 0x3F)
    {
      uint64_t result = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(a1 + 8 * v18 + 42848), (void *)(a1 + 120 * a3 + 24 * (int)a4 + 7072), a4, a5, 0, a7, a8);
      if ((result & 0x80000000) == 0)
      {
        ++*(_WORD *)(a1 + 43360);
        *(_DWORD *)(a1 + 42844) += v8;
        *(_DWORD *)(a1 + 120 * a3 + 24 * v9 + 7080) = v8;
      }
    }
    else
    {
      return 2229280772;
    }
  }
  return result;
}

uint64_t ParseInternalTagString(char *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = strchr(a1, 95);
  if (v4)
  {
    unsigned __int8 v5 = 0;
    do
    {
      *uint64_t v4 = 0;
      *(unsigned char *)(a2 + v5++) = atoi(v3);
      uint64_t v3 = v4 + 1;
      uint64_t v4 = strchr(v4 + 1, 95);
    }
    while (v4);
    uint64_t v4 = (char *)v5;
  }
  uint64_t result = atoi(v3);
  v4[a2] = result;
  return result;
}

uint64_t UNICORN__mfs_ParamMap_UnMapSection(uint64_t result)
{
  uint64_t v1 = result;
  for (uint64_t i = 0; i != 80; i += 16)
  {
    uint64_t v3 = v1 + i;
    uint64_t v4 = *(void *)(v1 + i + 1592);
    if (v4)
    {
      uint64_t result = brk_DataUnmap(*(void *)(*(void *)(v1 + 1072) + 24), *(void *)(v3 + 1584), v4);
      *(void *)(v3 + 1592) = 0;
    }
  }
  return result;
}

float mfs_Stub_ParamMap_GetDecodeLF0FromJV(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int *a6, float result)
{
  if (*(void *)(a2 + 2416))
  {
    uint64_t v12 = *(void *)(a2 + 568);
    *a6 = 2;
    if (*(_DWORD *)(a3 + 1712) <= 1u)
    {
      uint64_t v13 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a3 + 1680), 208);
      *(void *)(a3 + 1680) = v13;
      if (!v13) {
        return result;
      }
      *(_DWORD *)(a3 + 1712) = *a6 + 50;
    }
    if (*(_DWORD *)(v12 + 6764))
    {
      uint64_t v14 = *(void *)(a2 + 568);
      if (*(_DWORD *)(v12 + 5984)) {
        a4 = *(_DWORD *)(*(void *)(a2 + 848) + 4 * (a4 / *(_DWORD *)(v14 + 5992)))
      }
           + *(_DWORD *)(v14 + 11564) / *(_DWORD *)a2 * (a4 % *(_DWORD *)a2);
      else {
        a4 = *(_DWORD *)(*(void *)(a2 + 848) + 4 * (a4 / *(_DWORD *)(v14 + 5992)));
      }
    }
    uint64_t v15 = (_WORD *)(*(void *)(a2 + 2416) + 24 * a4);
    LOWORD(result) = *v15;
    *(float *)&unsigned int v16 = (float)((float)LODWORD(result) / *(float *)(v12 + 6056)) + *(float *)(v12 + 6016);
    int v17 = *(float **)(a3 + 1680);
    *int v17 = *(float *)&v16;
    LOWORD(v16) = v15[1];
    uint64_t result = (float)((float)v16 / *(float *)(v12 + 6056)) + *(float *)(v12 + 6016);
    v17[*a6 - 1] = result;
    *(void *)(a5 + 16) = v17;
  }
  return result;
}

void UNICORN__mfs_Stub_ParamMap_GetAcousticVector(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int *a6, float a7)
{
  uint64_t v7 = *(void *)(a2 + 568);
  if ((*(_DWORD *)(v7 + 6772) - 5) >= 0xFFFFFFFE
    && *(void *)(a3 + 1896)
    && *(_DWORD *)(v7 + 11520) != 3)
  {
    int v9 = *(_DWORD *)(v7 + 6800);
    if (v9 == 9 || v9 == 7)
    {
      unsigned int v13 = a4;
      if (*(_DWORD *)(a2 + 1928))
      {
        mfs_Stub_ParamMap_GetDecodeLF0FromJV(a1, a2, a3, a4, a5, a6, a7);
      }
      else
      {
        unsigned int v16 = *a6;
        if (!*a6)
        {
          unsigned __int16 v33 = 0;
          mfs_GetMessageOffsetAndDur_Frames(a2, a4, 0, &v33);
          unsigned int v16 = v33;
          *a6 = v33;
        }
        if (*(_DWORD *)(a3 + 1712) < v16)
        {
          uint64_t v17 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a3 + 1680), 4 * (int)(v16 + 50));
          *(void *)(a3 + 1680) = v17;
          if (!v17) {
            return;
          }
          *(_DWORD *)(a3 + 1712) = *a6 + 50;
        }
        if (*(_DWORD *)(v7 + 6764))
        {
          uint64_t v18 = *(void *)(a2 + 568);
          if (*(_DWORD *)(v7 + 5984)) {
            unsigned int v13 = *(_DWORD *)(*(void *)(a2 + 848) + 4 * (v13 / *(_DWORD *)(v18 + 5992)))
          }
                + *(_DWORD *)(v18 + 11564) / *(_DWORD *)a2 * (v13 % *(_DWORD *)a2);
          else {
            unsigned int v13 = *(_DWORD *)(*(void *)(a2 + 848) + 4 * (v13 / *(_DWORD *)(v18 + 5992)));
          }
        }
        uint64_t v19 = (_WORD *)(*(void *)(a2 + 2416) + 24 * v13);
        LOWORD(a7) = *v19;
        *(float *)&unsigned int v20 = (float)((float)LODWORD(a7) / *(float *)(v7 + 6056)) + *(float *)(v7 + 6016);
        unint64_t v21 = *(float **)(a3 + 1680);
        *unint64_t v21 = *(float *)&v20;
        LOWORD(v20) = v19[1];
        unint64_t v22 = *a6;
        uint64_t v23 = (int)v22 - 1;
        v21[v23] = (float)((float)v20 / *(float *)(v7 + 6056)) + *(float *)(v7 + 6016);
        *(void *)(a5 + 16) = v21;
        if ((int)v22 < 4)
        {
          LODWORD(v24) = 1;
        }
        else
        {
          unint64_t v24 = v22 >> 1;
          uint64_t v25 = *(int **)(a3 + 1680);
          int v27 = *v25;
          uint64_t v26 = v25 + 1;
          int v28 = v27;
          unint64_t v29 = v24 - 1;
          do
          {
            *v26++ = v28;
            --v29;
          }
          while (v29);
        }
        if ((int)v24 < (int)v23)
        {
          uint64_t v30 = *(void *)(a3 + 1680);
          uint64_t v31 = (_DWORD *)(v30 + 4 * v24);
          unint64_t v32 = v23 - (unint64_t)v24;
          do
          {
            *v31++ = *(_DWORD *)(v30 + 4 * v23);
            --v32;
          }
          while (v32);
        }
      }
    }
  }
}

uint64_t mfs_bnfData_Init(int32x2_t *a1, int32x2_t *a2, uint64_t a3)
{
  __int32 v6 = a1[844].i32[1];
  a2[241].i32[0] = v6 == 1;
  uint64_t v7 = (__int8 *)a1[972];
  if (v7)
  {
    a2[242] = (int32x2_t)(v7 + 1);
    a2[241].i8[4] = *v7;
  }
  else
  {
    a2[242] = 0;
  }
  if (v6 != 1) {
    return 0;
  }
  unsigned int v8 = a1[846].i32[1] - 5;
  BOOL v9 = v8 < 0xFFFFFFFE;
  if (a1[775].i32[0]) {
    BOOL v10 = a1[774].i32[1] != 0;
  }
  else {
    BOOL v10 = 0;
  }
  __int32 v12 = a1[748].i32[0];
  int v13 = a2->i32[0];
  if (v12) {
    unsigned int v14 = a2->i32[0];
  }
  else {
    unsigned int v14 = 1;
  }
  a1[749].i32[0] = v14;
  if (v13 <= 0)
  {
    unsigned int v15 = 0;
    LODWORD(v18) = 0;
    a2[124].i32[1] = 0;
  }
  else
  {
    unsigned int v15 = 0;
    int32x2_t v16 = a2[5];
    if (v13 + 2 <= 3) {
      uint64_t v17 = 3;
    }
    else {
      uint64_t v17 = (v13 + 2);
    }
    uint64_t v18 = v17 - 2;
    uint64_t v19 = (unsigned int *)(*(void *)&v16 + 8);
    do
    {
      unsigned int v21 = *v19++;
      unsigned int v20 = v21;
      if (v15 <= v21) {
        unsigned int v15 = v20;
      }
      --v18;
    }
    while (v18);
    unsigned __int32 v22 = 0;
    a2[124].i32[1] = 0;
    uint64_t v23 = 2;
    do
    {
      uint64_t v24 = *(unsigned int *)(*(void *)&v16 + 4 * v23);
      if (v24)
      {
        uint64_t v25 = (unsigned __int32 *)(*(void *)(*(void *)&a2[97] + 8 * v23) + 44);
        do
        {
          unsigned __int32 v27 = *v25;
          v25 += 10;
          unsigned __int32 v26 = v27;
          if (v22 <= v27) {
            unsigned __int32 v22 = v26;
          }
          LODWORD(v18) = v26 + v18;
          --v24;
        }
        while (v24);
        a2[124].i32[1] = v22;
      }
      ++v23;
    }
    while (v23 != v17);
  }
  __int32 v28 = a1[1444].i32[1];
  if (!v28)
  {
    a1[1444].i32[1] = v18;
    unsigned __int32 v29 = a1[1443].i32[1] - v18;
    a1[1445].i32[0] = v29;
    goto LABEL_34;
  }
  if (v18 == v28)
  {
    unsigned __int32 v29 = a1[1445].u32[0];
LABEL_34:
    unsigned __int32 v30 = v29 + v18;
    a1[1445].i32[1] = v30;
    int32x2_t v31 = a1[1107];
    a2[106] = v31;
    if (!*(void *)&v31) {
      goto LABEL_117;
    }
    if (v29) {
      int v32 = 2;
    }
    else {
      int v32 = 1;
    }
    BOOL v44 = v12 == 0;
    a2[106] = (int32x2_t)(*(void *)&v31 + 4);
    uint64_t v33 = v32 + v15;
    int32x2_t v34 = a2[71];
    unsigned int v35 = *(_DWORD *)(*(void *)&v34 + 5992);
    int v36 = v29 / v35;
    if (v44) {
      int v37 = v36 + 1;
    }
    else {
      int v37 = v36;
    }
    a2[124].i32[0] = v30 / v35;
    a2[107].i32[0] = v33;
    if (v13 >= 1)
    {
      BOOL v84 = v10;
      int v38 = 0;
      uint64_t v39 = 2;
      while (1)
      {
        int v40 = *(_DWORD *)(*(void *)&a2[71] + 5984);
        uint64_t v41 = &a2[v39];
        v41[106] = (int32x2_t)heap_Calloc(*(void **)(a3 + 8), v33, 4);
        uint64_t v42 = heap_Calloc(*(void **)(a3 + 8), v33, 4);
        v41[114] = (int32x2_t)v42;
        int32x2_t v43 = v41[106];
        BOOL v44 = !*(void *)&v43 || v42 == 0;
        if (v44) {
          goto LABEL_117;
        }
        if (v40) {
          int v38 = 0;
        }
        uint64_t v45 = *(unsigned int *)(*(void *)&a2[5] + 4 * v39);
        if (v45)
        {
          uint64_t v46 = (_DWORD *)(*(void *)&v43 + 4);
          uint64_t v47 = (_DWORD *)(v42 + 4);
          uint64_t v48 = (int *)(*(void *)(*(void *)&a2[97] + 8 * v39) + 44);
          do
          {
            int v49 = *v48;
            v48 += 10;
            *v47++ = v37 + v38;
            *v46++ = v49;
            v38 += v49;
            --v45;
          }
          while (v45);
        }
        if (v39++ > a2->i32[0])
        {
          int32x2_t v34 = a2[71];
          unsigned int v14 = a1[749].u32[0];
          BOOL v10 = v84;
          BOOL v9 = v8 < 0xFFFFFFFE;
          break;
        }
      }
    }
    uint64_t v51 = heap_Calloc(*(void **)(a3 + 8), 2 * ((*(_DWORD *)(*(void *)&v34 + 11548) + 1) / v14), 4);
    a2[133] = (int32x2_t)v51;
    if (!v51)
    {
LABEL_117:
      uint64_t result = 2229280778;
      goto LABEL_118;
    }
    if (a1[1443].i32[1])
    {
      unsigned __int32 v52 = 0;
      int32x2_t v53 = a2[106];
      int32x2_t v54 = a2[71];
      __int32 v55 = a1[749].i32[0];
      do
      {
        unsigned int v56 = *(_DWORD *)(*(void *)&v54 + 5992);
        if ((int)(v52 - v55) < 0) {
          int v57 = 0;
        }
        else {
          int v57 = *(_DWORD *)(*(void *)&v53 + 4 * ((v52 - v55) / v56));
        }
        unsigned int v58 = v52 + v55;
        if (v58 >= *(_DWORD *)(*(void *)&v54 + 11548) + 1) {
          int v59 = 0;
        }
        else {
          int v59 = *(_DWORD *)(*(void *)&v53 + 4 * (v58 / v56));
        }
        int v60 = *(_DWORD *)(*(void *)&v53 + 4 * (v52 / v56));
        *(_DWORD *)(v51 + 4 * (2 * v60)) = v57;
        *(_DWORD *)(v51 + 4 * ((2 * v60) | 1u)) = v59;
        __int32 v55 = a1[749].i32[0];
        v52 += v55;
      }
      while (v52 < a1[1443].i32[1]);
    }
    int32x2_t v61 = a1[975];
    if (*(void *)&v61 && (a2[126] = (int32x2_t)(*(void *)&v61 + 16), unsigned int v62 = a1[976].i32[0] - 16, v62 > 3))
    {
      uint64_t v63 = (unsigned char *)a1[972];
      if (!v63)
      {
        unsigned int v64 = v62 >> 2;
        LODWORD(v63) = a1[841].i32[1];
LABEL_73:
        a2[190].i32[1] = 1;
        a2[125] = 0;
        int32x2_t v65 = vadd_s32(a1[973], (int32x2_t)0x10FFFFFFF0);
        a2[191] = vrev64_s32(v65);
        if (!v63)
        {
          if (v64 <= 1) {
            LODWORD(v63) = 1;
          }
          else {
            LODWORD(v63) = v64;
          }
          LOBYTE(v63) = v65.i32[0] / v63;
        }
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v63 = (unsigned char *)a1[972];
      if (!v63)
      {
        LODWORD(v63) = a1[841].i32[1];
        if (!v63)
        {
          uint64_t result = 2229280785;
          goto LABEL_118;
        }
        unsigned int v64 = 0;
        goto LABEL_73;
      }
    }
    a2[190].i32[1] = 0;
    a2[125] = (int32x2_t)(v63 + 16);
    a2[191] = 0;
    LOBYTE(v63) = *v63;
LABEL_78:
    a2[190].i8[0] = (char)v63;
    int32x2_t v66 = a1[1122];
    if (v66) {
      a2[127] = (int32x2_t)(*(void *)&v66 + 16);
    }
    int32x2_t v67 = a1[1125];
    if (v67) {
      a2[128] = (int32x2_t)(*(void *)&v67 + 16);
    }
    int32x2_t v68 = a1[1152];
    if (v68) {
      a2[129] = (int32x2_t)(*(void *)&v68 + 16);
    }
    if (v10)
    {
      int32x2_t v69 = a1[1167];
      if (v69) {
        a2[130] = (int32x2_t)(*(void *)&v69 + 16);
      }
    }
    int32x2_t v70 = a1[1182];
    if (v70) {
      a2[131] = (int32x2_t)(*(void *)&v70 + 16);
    }
    if (v8 <= 0xFFFFFFFD)
    {
      int32x2_t v71 = a1[1137];
      if (v71) {
        a2[132] = (int32x2_t)(*(void *)&v71 + 16);
      }
    }
    if (a2->i32[0] < 1)
    {
      uint64_t result = 0;
      goto LABEL_118;
    }
    uint64_t v72 = 0;
    uint64_t v73 = a2[107].u32[0];
    int v74 = (uint64_t *)&a2[134];
    while (1)
    {
      float v75 = *(void **)(a3 + 8);
      if (a2[190].i32[1]) {
        v74[58] = heap_Calloc(v75, v73, 4);
      }
      else {
        *int v74 = heap_Calloc(v75, v73, 8);
      }
      __int32 v76 = a2[190].i32[1];
      if (v76 == 1)
      {
        if (!v74[58]) {
          goto LABEL_117;
        }
      }
      else if (!v76 && !*v74)
      {
        goto LABEL_117;
      }
      if (a2[126])
      {
        uint64_t v77 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
        v74[8] = v77;
        if (!v77) {
          goto LABEL_117;
        }
      }
      if (a2[127])
      {
        uint64_t v78 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
        v74[16] = v78;
        if (!v78) {
          goto LABEL_117;
        }
      }
      if (a2[128])
      {
        uint64_t v79 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
        v74[24] = v79;
        if (!v79) {
          goto LABEL_117;
        }
      }
      if (a2[129])
      {
        uint64_t v80 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
        v74[32] = v80;
        if (!v80) {
          goto LABEL_117;
        }
      }
      if (a2[130])
      {
        uint64_t v81 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
        v74[40] = v81;
        if (!v81) {
          goto LABEL_117;
        }
      }
      if (v8 <= 0xFFFFFFFD)
      {
        if (a2[132])
        {
          uint64_t v82 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
          v74[48] = v82;
          if (!v82) {
            goto LABEL_117;
          }
        }
      }
      uint64_t v83 = v72 + 2;
      initClusterData((uint64_t)a2, (uint64_t)a1, v72 + 2, v9, v10);
      uint64_t result = 0;
      ++v72;
      ++v74;
      if (v83 > a2->i32[0]) {
        goto LABEL_118;
      }
    }
  }
  uint64_t result = 2229280768;
LABEL_118:
  a2[241].i8[4] = a2[190].i8[0];
  return result;
}

uint64_t initClusterData(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(result + 40) + 4 * a3);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 - 2;
    unsigned int v8 = (void *)(result + 8 * v7);
    BOOL v9 = v8 + 116;
    BOOL v10 = v8 + 192;
    uint64_t v11 = v8 + 134;
    __int32 v12 = v8 + 142;
    int v13 = v8 + 150;
    unsigned int v14 = v8 + 158;
    unsigned int v15 = v8 + 166;
    int32x2_t v16 = v8 + 174;
    uint64_t v17 = v8 + 182;
    do
    {
      int v18 = *(_DWORD *)(a2 + 5984);
      if (v18) {
        int v18 = *(_DWORD *)(*(void *)(result + 568) + 11564) / *(_DWORD *)result * v7;
      }
      uint64_t v19 = *(unsigned int *)(*v9 + 4 * v6 + 4);
      if (*(_DWORD *)(result + 1524)) {
        *(_DWORD *)(*v10 + 4 * v6 + 4) = v19 * *(unsigned __int8 *)(result + 1520);
      }
      else {
        *(void *)(*v11 + 8 * v6 + 8) = *(void *)(result + 1000)
      }
                                       + v19 * *(unsigned __int8 *)(result + 1520);
      uint64_t v20 = *(void *)(result + 1008);
      if (v20) {
        *(void *)(*v12 + 8 * v6 + 8) = v20 + 4 * v19;
      }
      unsigned int v21 = v18 + v19;
      uint64_t v22 = *(void *)(result + 1016);
      if (v22) {
        *(void *)(*v13 + 8 * v6 + 8) = v22 + 2 * v21;
      }
      uint64_t v23 = *(void *)(result + 1024);
      if (v23) {
        *(void *)(*v14 + 8 * v6 + 8) = v23 + 2 * v21;
      }
      uint64_t v24 = *(void *)(result + 1032);
      if (v24) {
        *(void *)(*v15 + 8 * v6 + 8) = v24 + v21;
      }
      if (a5)
      {
        uint64_t v25 = *(void *)(result + 1040);
        if (v25) {
          *(void *)(*v16 + 8 * v6 + 8) = v25 + v21;
        }
      }
      if (a4)
      {
        uint64_t v26 = *(void *)(result + 1056);
        if (v26) {
          *(void *)(*v17 + 8 * v6 + 8) = v26 + 2 * v21;
        }
      }
      ++v6;
    }
    while (v5 != v6);
  }
  return result;
}

void *mfs_bnfData_DeInit(void *result, uint64_t a2)
{
  uint64_t v2 = (int *)result;
  if (*((_DWORD *)result + 482) == 1)
  {
    if (*(int *)result >= 1)
    {
      uint64_t v4 = result + 108;
      uint64_t v5 = 1;
      do
      {
        uint64_t v6 = v4[84];
        if (v6)
        {
          heap_Free(*(void **)(a2 + 8), v6);
          v4[84] = 0;
        }
        uint64_t v7 = v4[26];
        if (v7)
        {
          heap_Free(*(void **)(a2 + 8), v7);
          v4[26] = 0;
        }
        uint64_t v8 = v4[34];
        if (v8)
        {
          heap_Free(*(void **)(a2 + 8), v8);
          v4[34] = 0;
        }
        uint64_t v9 = v4[42];
        if (v9)
        {
          heap_Free(*(void **)(a2 + 8), v9);
          v4[42] = 0;
        }
        uint64_t v10 = v4[50];
        if (v10)
        {
          heap_Free(*(void **)(a2 + 8), v10);
          v4[50] = 0;
        }
        uint64_t v11 = v4[58];
        if (v11)
        {
          heap_Free(*(void **)(a2 + 8), v11);
          v4[58] = 0;
        }
        uint64_t v12 = v4[66];
        if (v12)
        {
          heap_Free(*(void **)(a2 + 8), v12);
          v4[66] = 0;
        }
        if (*v4)
        {
          heap_Free(*(void **)(a2 + 8), *v4);
          *uint64_t v4 = 0;
        }
        uint64_t v13 = v4[8];
        if (v13)
        {
          heap_Free(*(void **)(a2 + 8), v13);
          v4[8] = 0;
        }
        uint64_t v14 = v4[74];
        if (v14)
        {
          heap_Free(*(void **)(a2 + 8), v14);
          v4[74] = 0;
        }
        ++v5;
        ++v4;
      }
      while (v5 <= *v2);
    }
    unsigned int v15 = *(void **)(a2 + 8);
    uint64_t v16 = *((void *)v2 + 133);
    return heap_Free(v15, v16);
  }
  else
  {
    *((unsigned char *)result + 1932) = 0;
    result[242] = 0;
  }
  return result;
}

float mfs_bnfData_CosineCost_F32(float *a1, float *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    float v4 = 0.0;
    float v5 = 0.0;
    float v6 = 0.0;
    do
    {
      float v7 = *a1++;
      float v8 = v7;
      float v9 = *a2++;
      float v6 = v6 + (float)(v8 * v9);
      float v5 = v5 + (float)(v8 * v8);
      float v4 = v4 + (float)(v9 * v9);
      --v3;
    }
    while (v3);
  }
  else
  {
    float v6 = 0.0;
    float v5 = 0.0;
    float v4 = 0.0;
  }
  return 1.0 - (float)(v6 / (float)(sqrtf(v5) * sqrtf(v4)));
}

float mfs_bnfData_Distance(uint64_t a1, float *a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 1932);
  if (*(unsigned char *)(a1 + 1932))
  {
    float v4 = (char *)(*(void *)(a1 + 1936) + v3 * a3);
    float v5 = 0.0;
    float v6 = 0.0;
    do
    {
      int v8 = *v4++;
      int v7 = v8;
      float v9 = (float)v8;
      float v10 = *a2++;
      float v6 = v6 + (float)(v9 * v10);
      float v5 = v5 + (float)(v7 * v7);
      --v3;
    }
    while (v3);
  }
  else
  {
    float v6 = 0.0;
    float v5 = 0.0;
  }
  float result = 1.0 - (float)(v6 / sqrtf(v5));
  uint64_t v12 = *(void *)(a1 + 1904);
  if (v12) {
    return result * *(float *)(v12 + 4 * a3);
  }
  return result;
}

uint64_t mfs_bnfData_Clusterize_Block_Distance_fxd16(uint64_t a1, uint64_t a2, __int16 *a3, unsigned int a4, int a5, uint64_t a6, float a7)
{
  uint64_t v35 = 0;
  uint64_t v11 = a5 - 2;
  uint64_t v12 = *(unsigned __int8 *)(a1 + 1520);
  uint64_t v13 = (void *)(a1 + 8 * v11);
  uint64_t v14 = a4;
  uint64_t v15 = *(unsigned int *)(v13[108] + 4 * a4);
  if (*(_DWORD *)(a1 + 1524) != 1)
  {
    uint64_t v21 = 0;
    uint64_t v35 = *(void *)(v13[134] + 8 * a4);
    if (!v15) {
      goto LABEL_11;
    }
LABEL_6:
    unsigned int v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = *(void *)(*(void *)(a1 + 8 * v11 + 1136) + 8 * v14);
    uint64_t v25 = v35;
    do
    {
      int v26 = 0;
      if (v12)
      {
        uint64_t v27 = v12;
        __int32 v28 = a3;
        unsigned __int32 v29 = (char *)(v25 + v22);
        do
        {
          int v31 = *v29++;
          int v30 = v31;
          int v32 = *v28++;
          v26 += v32 * v30;
          --v27;
        }
        while (v27);
      }
      *(float *)(a6 + 4 * v23) = (float)((float)-(float)(*(float *)(v24 + 4 * v23) * (float)v26) * a7) + 1.0;
      ++v23;
      v22 += v12;
    }
    while (v23 != v15);
    goto LABEL_11;
  }
  uint64_t v34 = a2;
  uint64_t v21 = brk_DataMap(*(void *)(a2 + 24), *(void *)(a1 + 2464), (*(_DWORD *)(v13[192] + 4 * a4) + *(_DWORD *)(a1 + 1528)), (v15 * v12), (uint64_t)&v35);
  if ((v21 & 0x80000000) != 0)
  {
    UNICORN__log_select_Error(v34, 74001, (uint64_t)"ODLBNF DataMap (%u,%u) Error %x", v16, v17, v18, v19, v20);
    return v21;
  }
  a2 = v34;
  if (v15) {
    goto LABEL_6;
  }
LABEL_11:
  if (*(_DWORD *)(a1 + 1524) == 1) {
    return brk_DataUnmap(*(void *)(a2 + 24), *(void *)(a1 + 2464), v35);
  }
  return v21;
}

uint64_t mfs_bnfData_Clusterize_Block_Distance_RandomProjection(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, int a5, uint64_t a6)
{
  uint64_t v43 = 0;
  unint64_t v10 = *(unsigned __int8 *)(a1 + 1520);
  if (*(unsigned char *)(a1 + 1520)) {
    float v11 = 3.1416 / (float)((float)v10 * 8.0);
  }
  else {
    float v11 = 0.3927;
  }
  uint64_t v12 = (void *)(a1 + 8 * (a5 - 2));
  uint64_t v13 = *(unsigned int *)(v12[108] + 4 * a4);
  if (*(_DWORD *)(a1 + 1524) != 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = a1;
    uint64_t v39 = a2;
    uint64_t v43 = *(void *)(v12[134] + 8 * a4);
    if (!v13) {
      goto LABEL_21;
    }
    goto LABEL_9;
  }
  uint64_t v14 = brk_DataMap(*(void *)(a2 + 24), *(void *)(a1 + 2464), (*(_DWORD *)(v12[192] + 4 * a4) + *(_DWORD *)(a1 + 1528)), (v13 * v10), (uint64_t)&v43);
  uint64_t v20 = v14;
  if ((v14 & 0x80000000) != 0)
  {
    UNICORN__log_select_Error(a2, 74001, (uint64_t)"ODLBNF DataMap (%u,%u) Error %x", v15, v16, v17, v18, v19);
    return v20;
  }
  uint64_t v40 = v14;
  uint64_t v41 = a1;
  uint64_t v39 = a2;
  if (v13)
  {
LABEL_9:
    unsigned int v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v43;
    uint64_t v42 = v43 + 1;
    uint64_t v24 = a3 + 1;
    do
    {
      if ((v10 & 3) != 0)
      {
        if (v10)
        {
          unsigned int v25 = 0;
          unint64_t v26 = v10;
          uint64_t v27 = a3;
          __int32 v28 = (char *)(v23 + v21);
          do
          {
            char v30 = *v27++;
            char v29 = v30;
            char v31 = *v28++;
            v25 += BitsSetTable256[(v31 ^ v29)];
            --v26;
          }
          while (v26);
          goto LABEL_20;
        }
      }
      else if (v10)
      {
        unint64_t v32 = 0;
        int v33 = 0;
        int v34 = 0;
        int v35 = 0;
        int v36 = 0;
        uint64_t v37 = v42 + v21;
        do
        {
          v36 += BitsSetTable256[(*(unsigned char *)(v37 + v32 - 1) ^ a3[v32])];
          v35 += BitsSetTable256[*(unsigned char *)(v37 + v32) ^ v24[v32]];
          v34 += BitsSetTable256[*(unsigned char *)(v37 + v32 + 1) ^ v24[v32 + 1]];
          v33 += BitsSetTable256[*(unsigned char *)(v37 + v32 + 2) ^ v24[v32 + 2]];
          v32 += 4;
        }
        while (v32 < v10);
        unsigned int v25 = v35 + v36 + v34 + v33;
        goto LABEL_20;
      }
      unsigned int v25 = 0;
LABEL_20:
      *(float *)(a6 + 4 * v22++) = 1.0 - cosf(v11 * (float)v25);
      v21 += v10;
    }
    while (v22 != v13);
  }
LABEL_21:
  uint64_t v20 = v40;
  if (*(_DWORD *)(v41 + 1524) == 1) {
    return brk_DataUnmap(*(void *)(v39 + 24), *(void *)(v41 + 2464), v43);
  }
  return v20;
}

uint64_t mfs_bnfData_Distance_Unit_ID_fxd16(uint64_t result, uint64_t a2, __int16 *a3, unsigned int a4)
{
  uint64_t v6 = result;
  uint64_t v19 = 0;
  uint64_t v7 = *(unsigned __int8 *)(result + 1520);
  if (*(_DWORD *)(result + 1524) == 1)
  {
    float result = brk_DataMap(*(void *)(a2 + 24), *(void *)(result + 2464), (*(_DWORD *)(result + 1528)+ *(_DWORD *)(*(void *)(result + 848)+ 4 * (a4 / *(_DWORD *)(*(void *)(result + 568) + 5992)))* v7), v7, (uint64_t)&v19);
    if ((result & 0x80000000) != 0) {
      return UNICORN__log_select_Error(a2, 74001, (uint64_t)"ODLBNF DataMap (%u,%u) Error %x", v8, v9, v10, v11, v12);
    }
    uint64_t v13 = v19;
  }
  else
  {
    uint64_t v13 = *(void *)(result + 1000)
        + (*(_DWORD *)(*(void *)(result + 848)
                                   + 4 * (a4 / *(_DWORD *)(*(void *)(result + 568) + 5992)))
                       * v7);
    uint64_t v19 = v13;
  }
  if (v7)
  {
    int v14 = 0;
    uint64_t v15 = (char *)v13;
    do
    {
      int v17 = *v15++;
      int v16 = v17;
      int v18 = *a3++;
      v14 += v18 * v16;
      --v7;
    }
    while (v7);
  }
  if (*(_DWORD *)(v6 + 1524) == 1) {
    return brk_DataUnmap(*(void *)(a2 + 24), *(void *)(v6 + 2464), v13);
  }
  return result;
}

void mfs_bnfData_Distance_Unit_ID_RandomProjection(uint64_t a1, uint64_t a2, char *a3, unsigned int a4)
{
  unint64_t v7 = *(unsigned __int8 *)(a1 + 1520);
  uint64_t v27 = 0;
  if (v7) {
    float v8 = 3.1416 / (float)((float)v7 * 8.0);
  }
  else {
    float v8 = 0.3927;
  }
  if (*(_DWORD *)(a1 + 1524) == 1)
  {
    if ((brk_DataMap(*(void *)(a2 + 24), *(void *)(a1 + 2464), (*(_DWORD *)(a1 + 1528)+ *(_DWORD *)(*(void *)(a1 + 848) + 4 * (a4 / *(_DWORD *)(*(void *)(a1 + 568) + 5992)))* v7), v7, (uint64_t)&v27) & 0x80000000) != 0)
    {
      UNICORN__log_select_Error(a2, 74001, (uint64_t)"ODLBNF DataMap (%u,%u) Error %x", v9, v10, v11, v12, v13);
      return;
    }
    uint64_t v14 = v27;
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 1000)
        + (*(_DWORD *)(*(void *)(a1 + 848) + 4 * (a4 / *(_DWORD *)(*(void *)(a1 + 568) + 5992)))
                       * v7);
    uint64_t v27 = v14;
  }
  if ((v7 & 3) != 0)
  {
    if (v7)
    {
      unsigned int v15 = 0;
      int v16 = (char *)v14;
      do
      {
        char v18 = *a3++;
        char v17 = v18;
        char v19 = *v16++;
        v15 += BitsSetTable256[(v19 ^ v17)];
        --v7;
      }
      while (v7);
      goto LABEL_18;
    }
  }
  else if (v7)
  {
    unint64_t v20 = 0;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    int v24 = 0;
    uint64_t v25 = v14 + 1;
    unint64_t v26 = a3 + 1;
    do
    {
      v24 += BitsSetTable256[(*(unsigned char *)(v14 + v20) ^ a3[v20])];
      v23 += BitsSetTable256[*(unsigned char *)(v25 + v20) ^ v26[v20]];
      v22 += BitsSetTable256[*(unsigned char *)(v25 + v20 + 1) ^ v26[v20 + 1]];
      v21 += BitsSetTable256[*(unsigned char *)(v25 + v20 + 2) ^ v26[v20 + 2]];
      v20 += 4;
    }
    while (v20 < v7);
    unsigned int v15 = v23 + v24 + v22 + v21;
    goto LABEL_18;
  }
  unsigned int v15 = 0;
LABEL_18:
  cosf(v8 * (float)v15);
  if (*(_DWORD *)(a1 + 1524) == 1) {
    brk_DataUnmap(*(void *)(a2 + 24), *(void *)(a1 + 2464), v14);
  }
}

uint64_t mfs_Psola_CalculateAdjustments_ByOne(int *a1, uint64_t a2, uint64_t a3, int a4, int a5, int *a6)
{
  uint64_t v11 = (uint64_t)a1;
  uint64_t v102 = *MEMORY[0x263EF8340];
  int v12 = *a1;
  uint64_t v13 = *(void *)(a2 + 1568);
  uint64_t v14 = a4;
  uint64_t v15 = *(void *)(a2 + 1536);
  int v16 = (unsigned int *)(a3 + 40 * a4);
  if (a4 <= 0) {
    char v17 = 0;
  }
  else {
    char v17 = (unsigned int *)(a3 + 40 * (a4 - 1));
  }
  unsigned int v18 = *(_DWORD *)(v13 + 28 * a4);
  uint64_t v97 = v16;
  unsigned int *v16 = v18;
  if (v18 == -1)
  {
    int v19 = 0;
  }
  else
  {
    int v19 = *(_DWORD *)(v13 + 28 * a4 + 8);
    uint64_t v15 = v13;
  }
  int v20 = *(_DWORD *)(v15 + 28 * a4 + 12);
  int v21 = (_DWORD *)(a3 + 40 * a4);
  v21[1] = v19;
  v21[2] = v20;
  v21[5] = 1000;
  if (!a4)
  {
    uint64_t v46 = a3 + 40 * a4;
    *(_DWORD *)(v46 + 32) = 0;
    *(_DWORD *)(v46 + 12) = 1000;
    goto LABEL_97;
  }
  int v96 = v12;
  BOOL v22 = *v17 + 1 == v18;
  if (*v17 + 1 == v18) {
    int v23 = 1;
  }
  else {
    int v23 = 100;
  }
  uint64_t v24 = a3 + 40 * a4;
  *(_DWORD *)(v24 + 32) = v22;
  uint64_t v25 = (_DWORD *)(v24 + 32);
  v17[9] = v22;
  *(v25 - 2) = v23;
  v17[7] = v23;
  *(v25 - 5) = 1000;
  unint64_t v26 = v25 - 5;
  v17[4] = 1000;
  int v27 = UnicornAddon_UID2AddonId(*(void *)(a2 + 1776), *(_DWORD *)(a2 + 1784), v18);
  uint64_t v28 = *(void *)(a2 + 1776);
  uint64_t v29 = v11;
  if (v27 != -1)
  {
    uint64_t v30 = v28 + 48 * v27;
    uint64_t v29 = *(void *)(v30 + 16);
    *v97 -= *(_DWORD *)(v30 + 24);
  }
  uint64_t v95 = v29;
  int v94 = v27;
  int v31 = UnicornAddon_UID2AddonId(v28, *(_DWORD *)(a2 + 1784), *v17);
  if (v31 != -1)
  {
    uint64_t v32 = *(void *)(a2 + 1776) + 48 * v31;
    uint64_t v11 = *(void *)(v32 + 16);
    *v17 -= *(_DWORD *)(v32 + 24);
  }
  int v33 = v96;
  int v34 = a4 / v96;
  int v35 = (unsigned int *)v95;
  int v36 = *(_DWORD **)(v95 + 568);
  int v37 = v36[2880];
  if ((v37 - 1) <= 1 && !*v25 && *v17 != -1)
  {
    unsigned int v47 = *v97;
    if (*v97 != -1)
    {
      int v91 = v31;
      int v92 = a5;
      uint64_t v101 = 0;
      long long v99 = 0u;
      long long v100 = 0u;
      unsigned int v98 = 0;
      UNICORN__mfs_Stub_ParamMap_GetAcousticVector(*(void *)(a2 + 1072), v95, a2, v47, (uint64_t)&v99, (int *)&v98, 0.0);
      int v93 = a6;
      if (v48 < 0 || (uint64_t v49 = v98, (int)v98 < 1))
      {
LABEL_32:
        int v52 = 1000;
      }
      else
      {
        uint64_t v50 = (float *)v100;
        while (1)
        {
          float v51 = exp(*v50);
          int v52 = (int)(v51 + 0.5);
          if (v52 >= 10) {
            break;
          }
          ++v50;
          if (!--v49) {
            goto LABEL_32;
          }
        }
      }
      unsigned int v53 = *v17;
      uint64_t v101 = 0;
      long long v99 = 0u;
      long long v100 = 0u;
      unsigned int v98 = 0;
      UNICORN__mfs_Stub_ParamMap_GetAcousticVector(*(void *)(a2 + 1072), v11, a2, v53, (uint64_t)&v99, (int *)&v98, 0.0);
      if (v54 < 0 || (uint64_t v55 = v98, (int)v98 < 1))
      {
LABEL_38:
        int v59 = 1000;
        int v60 = 1000;
        a6 = v93;
        int v31 = v91;
        a5 = v92;
        int v33 = v96;
        int v34 = a4 / v96;
        int v35 = (unsigned int *)v95;
      }
      else
      {
        uint64_t v56 = v100;
        while (1)
        {
          float v57 = exp(*(float *)(v56 + 4 * ((int)v55 - 1)));
          int v58 = (int)(v57 + 0.5);
          if (v58 > 9) {
            break;
          }
          if (!--v55) {
            goto LABEL_38;
          }
        }
        int v59 = 1000;
        a6 = v93;
        int v31 = v91;
        a5 = v92;
        int v33 = v96;
        int v34 = a4 / v96;
        int v35 = (unsigned int *)v95;
        int v60 = 1000;
        if (v52 != 1000 && v58 != 1000)
        {
          int v89 = v52 + v58;
          if (v52 + v58 < 0 != __OFADD__(v52, v58)) {
            ++v89;
          }
          int v90 = 1000 * (v89 >> 1);
          int v59 = v90 / v52;
          int v60 = v90 / v58;
        }
      }
      *unint64_t v26 = v59;
      v17[4] = v60;
      int v36 = (_DWORD *)*((void *)v35 + 71);
      int v37 = v36[2880];
    }
  }
  int v38 = a4 - v34 * v33;
  if ((v37 & 0xFFFFFFFE) == 2)
  {
    if (v38 + 1 == v33)
    {
      unint64_t v39 = *v35;
      uint64_t v40 = (int)*v35 * (uint64_t)v34;
      if ((int)*v35 < 1) {
        goto LABEL_40;
      }
      int v41 = 0;
      uint64_t v42 = (int *)(a3 + 40 * v40 + 8);
      uint64_t v43 = *v35;
      do
      {
        int v44 = *v42;
        v42 += 10;
        v41 += v44;
        --v43;
      }
      while (v43);
      if (v41 < 1) {
LABEL_40:
      }
        int v45 = 1000;
      else {
        int v45 = (int)(float)((float)(*(float *)(*(void *)(a2 + 384) + 312 * v34 + 32) * 1000.0) / (float)v41);
      }
      if (*(_DWORD *)(a3 + 40 * v40) + v39 - 1 != *(_DWORD *)(a3 + 40 * ((int)v39 - 1 + (int)v40)))
      {
        if ((int)v39 < 1) {
          goto LABEL_58;
        }
        int v61 = v36[6];
        if (*(_DWORD *)(a3 + 40 * v40 + 8) == v61)
        {
LABEL_44:
          if (v45 >= 1300) {
            int v45 = 1300;
          }
          if (v45 <= 700) {
            int v45 = 700;
          }
        }
        else
        {
          unint64_t v77 = 0;
          uint64_t v78 = (int *)(a3 + 40 * v40 + 48);
          while (v39 - 1 != v77)
          {
            int v79 = *v78;
            v78 += 10;
            ++v77;
            if (v79 == v61)
            {
              if (v77 < v39) {
                goto LABEL_44;
              }
              break;
            }
          }
        }
      }
      int v62 = v36[2886];
      if (v45 < v62) {
        int v62 = v45;
      }
      if (v45 >= v36[2885]) {
        int v63 = v62;
      }
      else {
        int v63 = v36[2885];
      }
      if ((int)v39 >= 1)
      {
        unsigned int v64 = (_DWORD *)(a3 + 40 * v40);
        do
        {
          if (*v64 != -1) {
            v64[5] = v63;
          }
          v64 += 10;
          --v39;
        }
        while (v39);
      }
    }
LABEL_58:
    if (v38 && a4 + 1 != a5) {
      goto LABEL_61;
    }
  }
  *a6 = a4;
LABEL_61:
  uint64_t v65 = *(void *)(a2 + 8);
  if (*(unsigned char *)(*(void *)(v65 + 32) + v34) == 1 && v38 == v33 - 1 && v33 - 1 <= a4)
  {
    int v66 = v34 | *(unsigned __int16 *)(*(void *)(v65 + 1784) + 2 * v34);
    if ((int)*(float *)(*(void *)(a2 + 384) + 312 * v34 + 32) > 50 && v66 == 0) {
      int v68 = 50;
    }
    else {
      int v68 = (int)*(float *)(*(void *)(a2 + 384) + 312 * v34 + 32);
    }
    uint64_t v69 = v14 - v38;
    if (v33 == 2 && *(_DWORD *)(a3 + 40 * (int)v69) == -1 && (uint64_t v70 = (int)v69 + 1, *(_DWORD *)(a3 + 40 * v70) == -1))
    {
      int v86 = v36[6];
      *(_DWORD *)(a3 + 40 * (int)v69 + 8) = v86;
      BOOL v87 = __OFSUB__(v68, v86);
      int v88 = v68 - v86;
      if ((v88 < 0) ^ v87 | (v88 == 0)) {
        *(_DWORD *)(a3 + 40 * v70 + 8) = 0;
      }
      else {
        *(_DWORD *)(a3 + 40 * v70 + 8) = v88;
      }
    }
    else
    {
      uint64_t v71 = v69 + 1;
      if (*(_DWORD *)(a3 + 40 * (v69 + 1)) == -1)
      {
        int v72 = v31;
        int v73 = a5;
        if (v33 < 1)
        {
          int v74 = 0;
        }
        else
        {
          int v74 = 0;
          uint64_t v69 = (int)v69;
          float v75 = (_DWORD *)(40 * (int)v14 - 40 * v38 + a3 + 8);
          do
          {
            if (v71 != v69) {
              v74 += *v75;
            }
            v75 += 10;
          }
          while (v69++ < v14);
        }
        if (v68 <= v74) {
          int v80 = 0;
        }
        else {
          int v80 = v68 - v74;
        }
        uint64_t v81 = a3 + 40 * v71;
        UNICORN__log_select_Diag(*(void *)(a2 + 1072), 2, (uint64_t)"PSOLA: changing dead unit duration from %d to %d ms");
        *(_DWORD *)(v81 + 8) = v80;
        a5 = v73;
        int v31 = v72;
      }
    }
  }
  if (v94 == -1) {
    int v82 = 0;
  }
  else {
    int v82 = *(_DWORD *)(*(void *)(a2 + 1776) + 48 * v94 + 24);
  }
  *v97 += v82;
  if (v31 == -1) {
    int v83 = 0;
  }
  else {
    int v83 = *(_DWORD *)(*(void *)(a2 + 1776) + 48 * v31 + 24);
  }
  *v17 += v83;
LABEL_97:
  if (a4 + 1 >= a5)
  {
    uint64_t v84 = a3 + 40 * (int)v14;
    *(_DWORD *)(v84 + 36) = 0;
    *(_DWORD *)(v84 + 16) = 1000;
    *a6 = a5;
  }
  return 0;
}

uint64_t UnicornSearch_StageTwo_TreeIndex_Cascaded(uint64_t a1, uint64_t a2)
{
  uint64_t v201 = *MEMORY[0x263EF8340];
  unsigned int v2 = a2 + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 92);
  uint64_t v3 = v2 - 2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 136) + 16);
  if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * v3))
  {
    uint64_t updated = 0;
    *(_DWORD *)(*(void *)(v4 + 32 * v3) + 4) = 0;
    return updated;
  }
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  long long v10 = *(_OWORD *)(v8 + 6640);
  __asm { FMOV            V1.2S, #1.0 }
  uint64_t v198 = *(void *)(v8 + 6656);
  uint64_t v199 = _D1;
  int v200 = 1065353216;
  long long v193 = 0u;
  long long v194 = 0u;
  long long v195 = 0u;
  memset(v196, 0, sizeof(v196));
  long long v197 = v10;
  uint64_t v15 = *(void *)(v9 + 1768);
  BOOL v16 = !v15 || !*(_DWORD *)(v15 + 16) && !*(_DWORD *)(v15 + 12);
  if (*(int *)(v8 + 6752) > 1) {
    return 2229280769;
  }
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(*(void *)(*(void *)(a1 + 128) + 16) + 4 * a2);
  if (*(float *)(v8 + 6704) == 0.0)
  {
    uint64_t updated = 0;
  }
  else
  {
    uint64_t updated = mfs_UpdateTargetQuantizedTrajectory_LF0(*(void *)(a1 + 104), v9, a1 + 176);
    if ((updated & 0x80000000) != 0) {
      return updated;
    }
  }
  BOOL v192 = v16;
  uint64_t v17 = *(void *)(a1 + 336);
  if (v17) {
    mfs_TCost_Elf0_Manhattan_TreeIndex(*(float **)(a1 + 112), *(void *)(a1 + 120), (uint64_t *)(*(void *)(a1 + 120) + 1088), v2 - 2, a1 + 176, *(_DWORD *)(*(void *)(*(void *)(a1 + 128) + 64) + 4 * a2), a2, *(unsigned __int8 *)(a1 + 345) == 1, *(float *)(v17 + 4 * (2 * v3)), *(float *)(v17 + 4 * ((2 * v3) | 1u)));
  }
  if (!*(unsigned char *)(a1 + 156) && *(unsigned char *)(a1 + 345) == 1)
  {
    float v18 = 4295000000.0;
LABEL_19:
    BOOL v19 = v192;
    goto LABEL_161;
  }
  unsigned int v20 = *(_DWORD *)(a1 + 100);
  unsigned int v21 = *(_DWORD *)(a1 + 380);
  uint64_t v23 = *(void *)(a1 + 112);
  uint64_t v22 = *(void *)(a1 + 120);
  uint64_t v24 = *(int **)(v22 + 1096);
  int v25 = *v24;
  long long v193 = 0u;
  long long v194 = 0u;
  long long v195 = 0u;
  memset(v196, 0, sizeof(v196));
  if (v24[482] == 1)
  {
    *(void *)((char *)&v196[1] + 4) = __PAIR64__(v21, v20);
    if (v21)
    {
      if (a2 == 2)
      {
        HIDWORD(v196[0]) = 1;
      }
      else
      {
        if (v25 + 1 == a2) {
          uint64_t v26 = 0x200000002;
        }
        else {
          uint64_t v26 = 0x100000004;
        }
        *(void *)((char *)v196 + 12) = v26;
      }
    }
    *(void *)&long long v193 = GetBnfTargetVectorPacked(v22, v3 / *(_DWORD *)(v23 + 5992), (float *)&v195 + 2);
    if (*(int *)(v23 + 6752) >= 1)
    {
      if (v2 != 2)
      {
        if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * (v2 - 3))) {
          uint64_t BnfTargetVectorPacked = 0;
        }
        else {
          uint64_t BnfTargetVectorPacked = GetBnfTargetVectorPacked(v22, (v2 - 3) / *(_DWORD *)(v23 + 5992), (float *)&v195 + 3);
        }
        *((void *)&v193 + 1) = BnfTargetVectorPacked;
      }
      unsigned int v28 = (v2 - 1) / *(_DWORD *)(v23 + 5992);
      if (v28 < v20)
      {
        if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * (v2 - 1))) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = GetBnfTargetVectorPacked(v22, v28, (float *)v196);
        }
        *(void *)&long long v194 = v29;
      }
      if (*(int *)(v23 + 6752) >= 2)
      {
        if (v3 >= 2)
        {
          if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * (v2 - 4))) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = GetBnfTargetVectorPacked(v22, (v2 - 4) / *(_DWORD *)(v23 + 5992), (float *)v196 + 1);
          }
          *((void *)&v194 + 1) = v30;
        }
        unsigned int v31 = v2 / *(_DWORD *)(v23 + 5992);
        if (v31 < v20)
        {
          if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * v2)) {
            uint64_t v32 = 0;
          }
          else {
            uint64_t v32 = GetBnfTargetVectorPacked(v22, v31, (float *)v196 + 2);
          }
          *(void *)&long long v195 = v32;
        }
      }
    }
  }
  float v33 = *((float *)&v197 + LODWORD(v196[1])) * (float)*(int *)(*(void *)(a1 + 112) + 5564);
  unsigned int v34 = (int)v33;
  uint64_t v35 = v4 + 32 * v3;
  int v37 = *(_DWORD *)(v35 + 16);
  int v36 = (_DWORD *)(v35 + 16);
  if (v37 > (int)v33)
  {
    uint64_t updated = mfs_CostList_Select(*(void *)(a1 + 136), v2 - 2, 1, (int)v33);
    uint64_t v38 = *(void *)(*(void *)(a1 + 136) + 16) + 32 * v3;
    unsigned int v40 = *(_DWORD *)(v38 + 16);
    unint64_t v39 = (unsigned int *)(v38 + 16);
    if (v40 > v34) {
      unsigned int *v39 = v34;
    }
  }
  if (BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(v9 + 1072) + 32)) >= 3) {
    *(_DWORD *)(v9 + 1956) += *v36;
  }
  uint64_t v188 = v36;
  uint64_t v191 = v9;
  if (HIDWORD(v196[0]) == 4)
  {
    float v57 = *(void **)(a1 + 120);
    uint64_t v58 = v57[137];
    if (*(_DWORD *)(v58 + 1928) != 1) {
      goto LABEL_117;
    }
    int v59 = *(_DWORD **)(a1 + 112);
    if (!v59[1688]) {
      goto LABEL_117;
    }
    uint64_t v60 = v57[138];
    uint64_t v61 = v60 + 32 * v3;
    int v63 = *(_DWORD *)(v61 + 16);
    int v62 = (unsigned int *)(v61 + 16);
    if (!v63) {
      goto LABEL_117;
    }
    uint64_t v64 = 0;
    unint64_t v65 = 0;
    float v66 = 1.0 - *(float *)(v57[169] + 4 * v3);
    int32x2_t v67 = (void *)(v60 + 32 * v3);
    uint64_t v68 = *v67;
    float v18 = 4295000000.0;
    unsigned int v181 = v62;
    uint64_t v185 = v57[137];
    uint64_t v178 = v67;
    while (1)
    {
      int v69 = v59[1496];
      if (v69) {
        uint64_t v70 = (unsigned int *)(v68 + v64 + 8);
      }
      else {
        uint64_t v70 = (unsigned int *)(*(void *)(v58 + 1064) + 4 * (2 * *(_DWORD *)(v68 + v64 + 8)));
      }
      int v71 = *(_DWORD *)(v68 + v64);
      uint64_t v72 = *v70;
      if (*((void *)&v193 + 1))
      {
        float v73 = *(float *)(v57[164] + 4);
        if (((*(_DWORD *)(v57[144] + 4 * (((v71 - 1) / v59[1498]) >> 5)) >> ((v71 - 1) / v59[1498])) & 1) == 0)
        {
          float v77 = (*(float (**)(uint64_t, void, float))(a1 + 392))(v185, *(void *)(a1 + 56), *((float *)&v195 + 3));
          int32x2_t v67 = v178;
          int v62 = v181;
          uint64_t v58 = v185;
          float v74 = (float)(v73 * v77) + 0.0;
          if (v59[1496]) {
            goto LABEL_88;
          }
LABEL_87:
          uint64_t v72 = *(unsigned int *)(*(void *)(v58 + 1064) + 4 * ((2 * *(_DWORD *)(*v67 + v64 + 8)) | 1u));
          goto LABEL_88;
        }
        float v74 = (float)(v73 * *(float *)(v57[145] + 4 * v72)) + 0.0;
        if (!v69) {
          goto LABEL_87;
        }
      }
      else
      {
        float v74 = 0.0;
        if (!v69) {
          goto LABEL_87;
        }
      }
LABEL_88:
      if ((void)v194)
      {
        float v75 = *(float *)(v57[164] + 8);
        if ((*(_DWORD *)(v57[144] + 4 * (((v71 + 1) / v59[1498]) >> 5)) >> ((v71 + 1) / v59[1498])))
        {
          float v76 = *(float *)(v57[145] + 4 * v72);
        }
        else
        {
          (*(void (**)(uint64_t, void, float))(a1 + 392))(v185, *(void *)(a1 + 56), *(float *)v196);
          int32x2_t v67 = v178;
          int v62 = v181;
          uint64_t v58 = v185;
        }
        float v74 = v74 + (float)(v75 * v76);
      }
      uint64_t v68 = *v67;
      uint64_t v78 = *v67 + v64;
      float v79 = *(float *)(v78 + 4);
      float v80 = (float)(v66 * v74) + v79;
      *(float *)(v78 + 4) = v80;
      if (v80 < v18) {
        float v18 = (float)(v66 * v74) + v79;
      }
      ++v65;
      v64 += 12;
      if (v65 >= *v62) {
        goto LABEL_118;
      }
    }
  }
  if (HIDWORD(v196[0]) != 2)
  {
    if (HIDWORD(v196[0]) == 1)
    {
      uint64_t v41 = *(void *)(a1 + 120);
      uint64_t v42 = *(void *)(v41 + 1096);
      if (*(_DWORD *)(v42 + 1928) == 1)
      {
        uint64_t v43 = *(void *)(a1 + 112);
        if (*(_DWORD *)(v43 + 6752))
        {
          if (*((void *)&v193 + 1))
          {
            float v44 = 1.0 - *(float *)(*(void *)(v41 + 1352) + 4 * v3);
            uint64_t v45 = *(void *)(v41 + 1104);
            uint64_t v46 = (uint64_t *)(v45 + 32 * v3);
            float v47 = 0.0;
            if (*(_DWORD *)v42 > v3
              || *(_DWORD *)(v41 + 1120) != v3 / *(_DWORD *)v42 - 1
              || !*(void *)(v41 + 1128)
              || !*(void *)(v41 + 1136))
            {
              goto LABEL_187;
            }
            float v47 = *(float *)(v43 + 6004);
            uint64_t v48 = v45 + 32 * v3;
            unint64_t v49 = *(unsigned int *)(v48 + 16);
            uint64_t v177 = *(void *)(v41 + 1104);
            uint64_t v180 = (unsigned int *)(v48 + 16);
            if (*(_DWORD *)(v48 + 16))
            {
              uint64_t v50 = 0;
              unint64_t v51 = 0;
              unsigned int v52 = 0;
              uint64_t v53 = *v46;
              do
              {
                int v54 = *(_DWORD *)(v53 + v50);
                if (v54 >= 1)
                {
                  if ((*(_DWORD *)(*(void *)(v41 + 1128) + 4 * (((v54 - 1) / *(_DWORD *)(v43 + 5992)) >> 5)) >> ((v54 - 1) / *(_DWORD *)(v43 + 5992))))
                  {
                    ++v52;
                    *(float *)(v53 + v50 + 4) = *(float *)(v53 + v50 + 4)
                                              + (float)(v44
                                                      * (float)(*(float *)(*(void *)(v41 + 1312) + 4)
                                                              * *(float *)(*(void *)(v41 + 1136)
                                                                         + 4
                                                                         * *(unsigned int *)(*(void *)(v42 + 1064)
                                                                                           + 4
                                                                                           * (2 * *(_DWORD *)(v53 + v50 + 8))))));
                  }
                  else if (*(_DWORD *)(v43 + 6000))
                  {
                    *(float *)(v53 + v50 + 4) = v47 + *(float *)(v53 + v50 + 4);
                  }
                  else
                  {
                    float v55 = *(float *)(*(void *)(v41 + 1312) + 4);
                    unsigned int v184 = v52;
                    float v56 = (*(float (**)(uint64_t, void, void, float))(a1 + 392))(v42, *(void *)(a1 + 56), *((void *)&v193 + 1), *((float *)&v195 + 3));
                    unsigned int v52 = v184;
                    uint64_t v53 = *v46;
                    *(float *)(*v46 + v50 + 4) = *(float *)(*v46 + v50 + 4) + (float)(v44 * (float)(v55 * v56));
                    unint64_t v49 = *v180;
                  }
                }
                ++v51;
                v50 += 12;
              }
              while (v51 < v49);
            }
            else
            {
              unsigned int v52 = 0;
            }
            unsigned int v152 = *(_DWORD *)(v43 + 6000);
            _CF = !v152 || v52 >= v152;
            uint64_t v45 = v177;
            if (!_CF)
            {
LABEL_187:
              uint64_t v154 = v45 + 32 * v3;
              unsigned int v157 = *(_DWORD *)(v154 + 16);
              uint64_t v156 = (unsigned int *)(v154 + 16);
              unint64_t v155 = v157;
              if (v157)
              {
                uint64_t v158 = 0;
                unint64_t v159 = 0;
                uint64_t v160 = *v46;
                do
                {
                  int v161 = *(_DWORD *)(v160 + v158);
                  if (v161 >= 1)
                  {
                    float v162 = *(float *)(*(void *)(v41 + 1312) + 4);
                    float v163 = (*(float (**)(uint64_t, void, void, void, float))(a1 + 392))(v42, *(void *)(a1 + 56), *((void *)&v193 + 1), (v161 - 1), *((float *)&v195 + 3));
                    uint64_t v160 = *v46;
                    *(float *)(*v46 + v158 + 4) = (float)(v44 * (float)(v162 * v163))
                                                + (float)(*(float *)(*v46 + v158 + 4) - v47);
                    unint64_t v155 = *v156;
                  }
                  ++v159;
                  v158 += 12;
                  float v18 = 4295000000.0;
                }
                while (v159 < v155);
                goto LABEL_118;
              }
            }
          }
        }
      }
    }
    else
    {
      UnicornSearch_TreeIndex_InnerDefault_Cascaded(a1, (void *)(*(void *)(a1 + 120) + 1088), v2 - 2, (uint64_t)&v193);
    }
LABEL_117:
    float v18 = 4295000000.0;
    goto LABEL_118;
  }
  uint64_t v81 = *(void *)(a1 + 120);
  uint64_t v82 = *(void *)(v81 + 1096);
  if (*(_DWORD *)(v82 + 1928) != 1) {
    goto LABEL_117;
  }
  uint64_t v83 = *(void *)(a1 + 112);
  if (!*(_DWORD *)(v83 + 6752) || !(void)v194) {
    goto LABEL_117;
  }
  float v84 = 1.0 - *(float *)(*(void *)(v81 + 1352) + 4 * v3);
  int v85 = *(_DWORD *)(*(void *)(v82 + 568) + 11548) - 1;
  uint64_t v86 = *(void *)(v81 + 1104);
  uint64_t v186 = (uint64_t *)(v86 + 32 * v3);
  unsigned int v87 = v3 / *(_DWORD *)v82 + 1;
  float v88 = 0.0;
  if (v87 < *(_DWORD *)(a1 + 88)
    && *(_DWORD *)(v81 + 1168) == v87
    && *(void *)(v81 + 1176)
    && *(void *)(v81 + 1184))
  {
    float v88 = *(float *)(v83 + 6004);
    uint64_t v89 = v86 + 32 * v3;
    unint64_t v90 = *(unsigned int *)(v89 + 16);
    uint64_t v176 = *(void *)(v81 + 1104);
    uint64_t v179 = (unsigned int *)(v89 + 16);
    if (*(_DWORD *)(v89 + 16))
    {
      uint64_t v91 = 0;
      unint64_t v92 = 0;
      unsigned int v93 = 0;
      uint64_t v94 = *v186;
      do
      {
        int v95 = *(_DWORD *)(v94 + v91);
        if (v95 < v85)
        {
          if ((*(_DWORD *)(*(void *)(v81 + 1176) + 4 * (((v95 + 1) / *(_DWORD *)(v83 + 5992)) >> 5)) >> ((v95 + 1) / *(_DWORD *)(v83 + 5992))))
          {
            ++v93;
            *(float *)(v94 + v91 + 4) = *(float *)(v94 + v91 + 4)
                                      + (float)(v84
                                              * (float)(*(float *)(*(void *)(v81 + 1312) + 8)
                                                      * *(float *)(*(void *)(v81 + 1184)
                                                                 + 4
                                                                 * *(unsigned int *)(*(void *)(v82 + 1064)
                                                                                   + 4
                                                                                   * ((2 * *(_DWORD *)(v94 + v91 + 8)) | 1u)))));
          }
          else if (*(_DWORD *)(v83 + 6000))
          {
            *(float *)(v94 + v91 + 4) = v88 + *(float *)(v94 + v91 + 4);
          }
          else
          {
            float v96 = *(float *)(*(void *)(v81 + 1312) + 8);
            unsigned int v182 = v93;
            float v97 = (*(float (**)(uint64_t, void, void, float))(a1 + 392))(v82, *(void *)(a1 + 56), v194, *(float *)v196);
            unsigned int v93 = v182;
            uint64_t v94 = *v186;
            *(float *)(*v186 + v91 + 4) = *(float *)(*v186 + v91 + 4) + (float)(v84 * (float)(v96 * v97));
            unint64_t v90 = *v179;
          }
        }
        ++v92;
        v91 += 12;
      }
      while (v92 < v90);
    }
    else
    {
      unsigned int v93 = 0;
    }
    unsigned int v164 = *(_DWORD *)(v83 + 6000);
    BOOL v165 = !v164 || v93 >= v164;
    uint64_t v86 = v176;
    if (v165) {
      goto LABEL_117;
    }
  }
  uint64_t v166 = v86 + 32 * v3;
  unsigned int v169 = *(_DWORD *)(v166 + 16);
  int v168 = (unsigned int *)(v166 + 16);
  unint64_t v167 = v169;
  if (!v169) {
    goto LABEL_117;
  }
  uint64_t v170 = 0;
  unint64_t v171 = 0;
  uint64_t v172 = *v186;
  do
  {
    int v173 = *(_DWORD *)(v172 + v170);
    if (v173 < v85)
    {
      float v174 = *(float *)(*(void *)(v81 + 1312) + 8);
      float v175 = (*(float (**)(uint64_t, void, void, void, float))(a1 + 392))(v82, *(void *)(a1 + 56), v194, (v173 + 1), *(float *)v196);
      uint64_t v172 = *v186;
      *(float *)(*v186 + v170 + 4) = (float)(v84 * (float)(v174 * v175)) + (float)(*(float *)(*v186 + v170 + 4) - v88);
      unint64_t v167 = *v168;
    }
    ++v171;
    v170 += 12;
    float v18 = 4295000000.0;
  }
  while (v171 < v167);
LABEL_118:
  if (HIDWORD(v196[0]) == 4)
  {
    unsigned int v98 = v188;
    uint64_t v9 = v191;
    BOOL v19 = v192;
  }
  else
  {
    float v99 = *((float *)&v197 + LODWORD(v196[1]) + 3) * (float)*(int *)(*(void *)(a1 + 112) + 5564);
    unsigned int v100 = (int)v99;
    unsigned int v98 = v188;
    uint64_t v9 = v191;
    BOOL v19 = v192;
    if (*v188 > (int)v99)
    {
      uint64_t updated = mfs_CostList_Select(*(void *)(a1 + 136), v3, 1, (int)v99);
      uint64_t v101 = *(void *)(*(void *)(a1 + 136) + 16) + 32 * v3;
      unsigned int v103 = *(_DWORD *)(v101 + 16);
      uint64_t v102 = (unsigned int *)(v101 + 16);
      if (v103 > v100) {
        *uint64_t v102 = v100;
      }
    }
  }
  if (BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(v9 + 1072) + 32)) >= 3) {
    *(_DWORD *)(v9 + 1960) += *v98;
  }
  if (HIDWORD(v196[0]) == 4) {
    goto LABEL_161;
  }
  if (HIDWORD(v196[0]) != 2)
  {
    if (HIDWORD(v196[0]) == 1)
    {
      unsigned int v189 = updated;
      uint64_t v104 = *(void **)(a1 + 120);
      uint64_t v105 = v104[137];
      if (*(_DWORD *)(v105 + 1928) == 1)
      {
        uint64_t v106 = *(_DWORD **)(a1 + 112);
        if (v106[1688])
        {
          if ((void)v194)
          {
            uint64_t v107 = v104[138];
            uint64_t v108 = v107 + 32 * v3;
            unint64_t v109 = *(unsigned int *)(v108 + 16);
            uint64_t v187 = (unsigned int *)(v108 + 16);
            if (*(_DWORD *)(v108 + 16))
            {
              uint64_t v110 = 0;
              unint64_t v111 = 0;
              float v112 = 1.0 - *(float *)(v104[169] + 4 * v3);
              unsigned int v183 = (uint64_t *)(v107 + 32 * v3);
              uint64_t v113 = *v183;
              do
              {
                if (v106[1496]) {
                  uint64_t v114 = (unsigned int *)(v113 + v110 + 8);
                }
                else {
                  uint64_t v114 = (unsigned int *)(*(void *)(v105 + 1064) + 4 * ((2 * *(_DWORD *)(v113 + v110 + 8)) | 1u));
                }
                int v115 = *(_DWORD *)(v113 + v110) + 1;
                uint64_t v116 = *v114;
                if ((*(_DWORD *)(v104[144] + 4 * ((v115 / v106[1498]) >> 5)) >> (v115 / v106[1498])))
                {
                  float v117 = *(float *)(v104[164] + 8) * *(float *)(v104[145] + 4 * v116);
                }
                else
                {
                  float v118 = (*(float (**)(uint64_t, void, void, void, float))(a1 + 392))(v105, *(void *)(a1 + 56), v194, (*(_DWORD *)(v113 + v110) + 1), *(float *)v196);
                  float v119 = *(float *)(v104[164] + 8);
                  *(_DWORD *)(v104[144] + 4 * ((v115 / v106[1498]) >> 5)) |= 1 << (v115 / v106[1498]);
                  float v117 = v118 * v119;
                  *(float *)(v104[145] + 4 * v116) = v118;
                  uint64_t v113 = *v183;
                  unint64_t v109 = *v187;
                }
                float v120 = (float)(v112 * v117) + *(float *)(v113 + v110 + 4);
                *(float *)(v113 + v110 + 4) = v120;
                if (v120 < v18) {
                  float v18 = v120;
                }
                ++v111;
                v110 += 12;
              }
              while (v111 < v109);
              uint64_t v9 = v191;
            }
          }
        }
        BOOL v19 = v192;
      }
      uint64_t updated = v189;
    }
    else
    {
      UnicornSearch_TreeIndex_InnerDefault_Cascaded(a1, (void *)(*(void *)(a1 + 120) + 1088), v3, (uint64_t)&v193);
    }
    goto LABEL_161;
  }
  int v121 = *(void **)(a1 + 120);
  uint64_t v122 = v121[137];
  if (*(_DWORD *)(v122 + 1928) == 1)
  {
    BOOL v123 = *(_DWORD **)(a1 + 112);
    if (v123[1688])
    {
      if (*((void *)&v193 + 1))
      {
        uint64_t v124 = v121[138];
        uint64_t v125 = v124 + 32 * v3;
        unsigned int v128 = *(_DWORD *)(v125 + 16);
        int v127 = (unsigned int *)(v125 + 16);
        unint64_t v126 = v128;
        if (v128)
        {
          uint64_t v129 = 0;
          unint64_t v130 = 0;
          float v131 = 1.0 - *(float *)(v121[169] + 4 * v3);
          uint64_t v190 = (uint64_t *)(v124 + 32 * v3);
          uint64_t v132 = *v190;
          do
          {
            if (v123[1496]) {
              int v133 = (unsigned int *)(v132 + v129 + 8);
            }
            else {
              int v133 = (unsigned int *)(*(void *)(v122 + 1064) + 4 * (2 * *(_DWORD *)(v132 + v129 + 8)));
            }
            if ((*(_DWORD *)(v121[144] + 4 * (((*(_DWORD *)(v132 + v129) - 1) / v123[1498]) >> 5)) >> ((*(_DWORD *)(v132 + v129) - 1) / v123[1498])))
            {
              float v134 = *(float *)(v121[164] + 4) * *(float *)(v121[145] + 4 * *v133);
            }
            else
            {
              float v135 = *(float *)(v121[164] + 4);
              float v134 = v135
                   * (*(float (**)(uint64_t, void, void, float))(a1 + 392))(v122, *(void *)(a1 + 56), *((void *)&v193 + 1), *((float *)&v195 + 3));
              uint64_t v132 = *v190;
              unint64_t v126 = *v127;
            }
            float v136 = (float)(v131 * v134) + *(float *)(v132 + v129 + 4);
            *(float *)(v132 + v129 + 4) = v136;
            if (v136 < v18) {
              float v18 = v136;
            }
            ++v130;
            v129 += 12;
          }
          while (v130 < v126);
          uint64_t v9 = v191;
        }
        goto LABEL_19;
      }
    }
  }
LABEL_161:
  uint64_t v137 = v4 + 32 * v3;
  unsigned int v140 = *(_DWORD *)(v137 + 16);
  unsigned int v139 = (_DWORD *)(v137 + 16);
  unint64_t v138 = v140;
  uint64_t v141 = *(void *)(a1 + 112);
  signed int v142 = (int)(float)*(int *)(v141 + 5564);
  float v143 = *(float *)(v141 + 6636);
  char v144 = !v19;
  if (v143 <= 0.0) {
    char v144 = 1;
  }
  if ((v144 & 1) == 0)
  {
    int v145 = 0;
    if (v138 && v142 >= 1)
    {
      int v145 = 0;
      float v146 = v18 + v143;
      unsigned int v147 = (float *)(*(void *)(v4 + 32 * v3) + 4);
      unint64_t v148 = 1;
      do
      {
        float v149 = *v147;
        v147 += 3;
        if (v149 < v146) {
          ++v145;
        }
        if (v148 >= v138) {
          break;
        }
        ++v148;
      }
      while (v145 < v142);
    }
    if (v145 >= v142) {
      int v145 = (int)(float)*(int *)(v141 + 5564);
    }
    int v150 = (int)(float)*(int *)(v141 + 6632);
    if (v145 <= v150) {
      signed int v142 = v150;
    }
    else {
      signed int v142 = v145;
    }
  }
  if ((int)v138 > v142)
  {
    uint64_t updated = mfs_CostList_Select(*(void *)(a1 + 136), v3, 1, v142);
    UNICORN__mfs_CostList_Prune(*(void **)(a1 + 136), v3, v142);
  }
  if (BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(v9 + 1072) + 32)) >= 3) {
    *(_DWORD *)(v9 + 1964) += *v139;
  }
  UNICORN__log_select_Diag(*(void *)(a1 + 56), 11, (uint64_t)"costlist(%d)\n");
  return updated;
}

void UnicornSearch_TreeIndex_InnerDefault_Cascaded(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  if (*(_DWORD *)(v4 + 1928) == 1)
  {
    if (*(_DWORD *)(*(void *)(a1 + 112) + 6752))
    {
      uint64_t v7 = a2[2];
      uint64_t v8 = v7 + 32 * a3;
      int v10 = *(_DWORD *)(v8 + 16);
      uint64_t v9 = (unsigned int *)(v8 + 16);
      if (v10)
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        float v14 = 1.0 - *(float *)(*(void *)(*(void *)(a1 + 120) + 1352) + 4 * a3);
        int v15 = *(_DWORD *)(*(void *)(v4 + 568) + 11548) - 1;
        BOOL v16 = (uint64_t *)(v7 + 32 * a3);
        uint64_t v17 = *v16;
        do
        {
          int v18 = *(_DWORD *)(v17 + v12);
          if (*(void *)(a4 + 8)) {
            BOOL v19 = v18 < 1;
          }
          else {
            BOOL v19 = 1;
          }
          float v20 = 0.0;
          if (!v19)
          {
            float v21 = *(float *)(a2[28] + 4);
            float v20 = (float)(v21
                        * (*(float (**)(uint64_t, void, float))(a1 + 392))(v4, *(void *)(a1 + 56), *(float *)(a4 + 44)))+ 0.0;
          }
          if (*(void *)(a4 + 16)) {
            BOOL v22 = v18 < v15;
          }
          else {
            BOOL v22 = 0;
          }
          if (v22)
          {
            float v23 = *(float *)(a2[28] + 8);
            float v20 = v20
                + (float)(v23
                        * (*(float (**)(uint64_t, void, float))(a1 + 392))(v4, *(void *)(a1 + 56), *(float *)(a4 + 48)));
          }
          uint64_t v17 = *v16;
          *(float *)(*v16 + v12 + 4) = (float)(v14 * v20) + *(float *)(*v16 + v12 + 4);
          ++v13;
          v12 += 12;
        }
        while (v13 < *v9);
      }
    }
  }
}

uint64_t UNICORN__mfs_TCost_Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  float v5 = (void *)(a3 + 80);
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 212) + *(_DWORD *)(a2 + 208);
  float v6 = 1.0 / (float)(*(float *)(a2 + 5428) + *(float *)(a2 + 5432));
  *(float *)(a3 + 4) = v6;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 5532);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a3 + 108) = *(_DWORD *)(a2 + 5432);
  *(_DWORD *)(a3 + 112) = *(_DWORD *)(a2 + 5428);
  float v7 = *(float *)(a2 + 5424);
  *(float *)(a3 + 116) = v7;
  *(float *)(a3 + 4) = v6 * v7;
  UNICORN__mfs_S32Vect_Init(a1, (void *)(a3 + 56));
  UNICORN__mfs_S32Vect_Init(a1, v5);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 152) = mfs_TCost_Elf0_Manhattan_Clusterize;
  return 0;
}

uint64_t mfs_TCost_EnableSIMD(uint64_t a1, int a2)
{
  if (!a1) {
    return 8;
  }
  uint64_t result = 0;
  uint64_t v4 = mfs_TCost_Elf0_Manhattan_Clusterize_SIMD;
  if (!a2) {
    uint64_t v4 = mfs_TCost_Elf0_Manhattan_Clusterize;
  }
  *(void *)(a1 + 152) = v4;
  return result;
}

uint64_t UNICORN__mfs_FillTgtVect(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  uint64_t v8 = *(void *)(a2 + 24);
  int v9 = *(_DWORD *)(v8 + 1520);
  int v10 = *(_DWORD *)(v8 + 3040);
  *(_DWORD *)(a3 + 104) = a4;
  uint64_t v11 = a3 + 56;
  UNICORN__mfs_S32Vect_Clear((void *)(a3 + 56));
  uint64_t result = UNICORN__mfs_F32Vect_Create(v11, a4);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v13 = a3 + 80;
  UNICORN__mfs_S32Vect_Clear((void *)(a3 + 80));
  uint64_t result = UNICORN__mfs_F32Vect_Create(a3 + 80, a4 + *(_DWORD *)a3 - 1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v14 = v9;
  uint64_t v15 = *(void *)(a3 + 64);
  *(void *)(a3 + 24) = *(void *)(*(void *)(v8 + 1576) + 8 * v9);
  *(void *)(a3 + 32) = v15;
  if (a4 < 1)
  {
LABEL_21:
    uint64_t v24 = *(void *)(a2 + 24);
    *(_DWORD *)(v24 + 3040) = v10;
    *(_DWORD *)(v24 + 1520) = v9;
    return result;
  }
  char v16 = 0;
  int v17 = 0;
  float v18 = -1.0;
  float v19 = 1.0;
  while ((*(unsigned char *)(*(void *)(a2 + 48) + v14) & 4) == 0)
  {
    float v20 = -1.0e10;
    float v21 = 1.0;
    if ((v16 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t result = UNICORN__mfs_F32Vect_Pad(v11, v20);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    float v23 = sqrtf(v21);
    if (v18 != v21) {
      float v19 = v23;
    }
    uint64_t result = UNICORN__mfs_F32Vect_Pad(v13, v19);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v18 != v21) {
      float v18 = v21;
    }
    ++v14;
    ++v17;
    char v16 = 1;
    if (v17 == a4)
    {
      int v9 = v14;
      goto LABEL_21;
    }
  }
  float v20 = **(float **)(*(void *)(v8 + 3096) + 8 * v10);
  float v21 = **(float **)(*(void *)(v8 + 3136) + 8 * v10++);
  if (v16) {
    goto LABEL_13;
  }
LABEL_9:
  if (*(int *)(a1 + 208) < 1) {
    goto LABEL_13;
  }
  uint64_t v22 = 0;
  while (1)
  {
    uint64_t result = UNICORN__mfs_F32Vect_Pad(v13, sqrtf(*(float *)(*(void *)(*(void *)(v8 + 1616) + 8 * v14) + 4 * v22)));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (++v22 >= *(int *)(a1 + 208)) {
      goto LABEL_13;
    }
  }
}

void *UNICORN__mfs_TCost_Clear(uint64_t a1)
{
  UNICORN__mfs_S32Vect_Clear((void *)(a1 + 56));
  return UNICORN__mfs_S32Vect_Clear((void *)(a1 + 80));
}

void mfs_TCost_BNFCandidateCostStream(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float *a5, unsigned int a6, int a7)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  float v7 = *(float **)(a1 + 32);
  uint64_t v8 = *(float **)(a3 + 16);
  uint64_t v9 = *(unsigned int *)(a1 + 104);
  a5[2] = 0.0;
  *a5 = 0.0;
  if (v9)
  {
    switch(a7)
    {
      case 1:
        float v59 = *v7;
        v58[0] = *v8;
        int v42 = v9 - 1;
        uint64_t v43 = a4 - 1;
        if ((int)v9 < 3)
        {
          float v60 = v7[v42];
          unsigned int v44 = 2;
        }
        else
        {
          float v61 = v7[v42];
          v58[2] = v8[v43];
          float v60 = *(float *)((char *)v7 + ((2 * v9) & 0x1FFFFFFFCLL));
          LODWORD(v43) = a4 >> 1;
          unsigned int v44 = 3;
        }
        v58[1] = v8[(int)v43];
        a5[2] = mfs_bnfData_CosineCost_F32(&v59, v58, v44) * *(float *)(a1 + 108);
        float v39 = *(float *)(a1 + 116);
        int v57 = v9 - a4;
        if ((int)v9 - a4 < 0) {
          int v57 = a4 - v9;
        }
        float v55 = (float)v57;
        float v56 = (float)a4;
        goto LABEL_50;
      case 2:
      case 5:
        if (*(_DWORD *)(a1 + 120) == 1)
        {
          float v14 = 0.0;
          if (a4 < 3)
          {
LABEL_13:
            float v22 = sqrtf(v14) / (float)((float)((float)a4 + -2.0) * 3.0);
            goto LABEL_35;
          }
          uint64_t v15 = v8 + 2;
          uint64_t v16 = (a4 - 1) - 1;
          while (1)
          {
            float v17 = *(v15 - 1);
            if (v17 <= 0.0)
            {
              float v21 = 1000.0;
              float v20 = 5.0;
            }
            else
            {
              float v18 = *(v15 - 2);
              float v19 = *v15;
              float v14 = v14 + UNICORN__mfsLLCost(v17 - *(float *)(a1 + 124), *(float *)(a1 + 136));
              if (v18 <= 0.0 || v19 <= 0.0) {
                goto LABEL_12;
              }
              float v14 = v14
                  + UNICORN__mfsLLCost((float)((float)(v19 * 0.5) + (float)(v18 * -0.5)) - *(float *)(a1 + 128), *(float *)(a1 + 140));
              float v20 = (float)((float)(v18 + v19) + (float)(v17 * -2.0)) - *(float *)(a1 + 132);
              float v21 = *(float *)(a1 + 144);
            }
            float v14 = v14 + UNICORN__mfsLLCost(v20, v21);
LABEL_12:
            ++v15;
            if (!--v16) {
              goto LABEL_13;
            }
          }
        }
        float v45 = 0.0;
        if (a4 >= 3)
        {
          uint64_t v46 = v8 + 1;
          uint64_t v47 = (a4 - 1) - 1;
          do
          {
            if (*v46 > 0.0) {
              float v45 = v45 + UNICORN__mfsLLCost(5.0, 1000.0);
            }
            ++v46;
            --v47;
          }
          while (v47);
        }
        float v22 = sqrtf(v45);
LABEL_35:
        if (a7 == 5)
        {
          float v48 = v8[1];
          float v49 = v7[(int)v9 - 1];
          uint64_t v50 = &v8[a4];
          float v51 = *(v50 - 2);
          if (*v7 <= v48) {
            float v52 = v8[1];
          }
          else {
            float v52 = *v7;
          }
          if (v49 <= v51) {
            float v53 = *(v50 - 2);
          }
          else {
            float v53 = v7[(int)v9 - 1];
          }
          float v22 = v22 + (float)((float)(vabds_f32(*v7, v48) / v52) + (float)(vabds_f32(v49, v51) / v53));
        }
        a5[2] = v22 * *(float *)(a1 + 108);
        float v39 = *(float *)(a1 + 116);
        int v54 = -2 - (v9 - a4);
        if ((int)v9 - a4 + 2 >= 0) {
          int v54 = v9 - a4 + 2;
        }
        float v55 = (float)v54;
        float v56 = (float)a4 + -2.0;
LABEL_50:
        float v41 = v55 / v56;
LABEL_51:
        *a5 = v41 * v39;
        break;
      case 3:
      case 4:
        float v23 = (float *)((char *)&UNICORN__tblSubUnitLRWeights + 12 * a6);
        float v24 = v7[(int)v9 - 1];
        uint64_t v25 = a4 - 1;
        float v26 = v8[v25];
        float v27 = v7[((int)v9 - 1) >> 1];
        float v28 = v8[(int)v25 >> 1];
        float v29 = vabds_f32(*v7, *v8);
        if (*v7 <= *v8) {
          float v30 = *v8;
        }
        else {
          float v30 = *v7;
        }
        float v31 = (float)(v29 / v30) * *v23;
        float v32 = vabds_f32(v24, v26);
        if (v24 <= v26) {
          float v33 = v8[v25];
        }
        else {
          float v33 = v7[(int)v9 - 1];
        }
        float v34 = v31 + (float)((float)(v32 / v33) * v23[1]);
        float v35 = vabds_f32(v27, v28);
        if (v27 <= v28) {
          float v27 = v8[(int)v25 >> 1];
        }
        float v36 = v35 / v27;
        float v37 = (float)a4;
        float v38 = v34
            + (float)((float)(v36 * v23[2])
                    * (float)((float)((float)a4 + (float)(int)v9) / (float)((float)a4 * (float)(int)v9)));
        if (a7 == 4) {
          float v38 = (float)(vabds_f32((float)(*v7 - v24) / (float)(int)v9, (float)(*v8 - v26) / v37) * *(float *)(a2 + 6776))
        }
              + (float)((float)(1.0 - *(float *)(a2 + 6776)) * v38);
        a5[2] = v38 * *(float *)(a1 + 108);
        float v39 = *(float *)(a1 + 116);
        int v40 = v9 - a4;
        if ((int)v9 - a4 < 0) {
          int v40 = a4 - v9;
        }
        float v41 = (float)v40 / v37;
        goto LABEL_51;
      default:
        return;
    }
  }
}

float mfs_TCost_BNFCandidateCostStreamElf0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float *a5, unsigned int a6, float *a7, int a8, float result)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(float **)(a3 + 16);
  int v10 = *(_DWORD *)(a1 + 104);
  a5[2] = 0.0;
  *a5 = 0.0;
  if (v10)
  {
    if ((a8 - 3) < 2)
    {
      uint64_t v16 = (float *)((char *)&UNICORN__tblSubUnitLRWeights + 12 * a6);
      float v17 = *v9;
      float v18 = a7[1];
      float v19 = &v9[a4];
      float v20 = *(v19 - 1);
      float v21 = vabds_f32(*a7, v17);
      if (*a7 <= v17) {
        float v22 = v17;
      }
      else {
        float v22 = *a7;
      }
      float v23 = (float)(v21 / v22) * *v16;
      float v24 = vabds_f32(v18, v20);
      if (v18 <= v20) {
        float v25 = *(v19 - 1);
      }
      else {
        float v25 = a7[1];
      }
      float v26 = v23 + (float)((float)(v24 / v25) * v16[1]);
      float v27 = (float)a4;
      if (a8 == 4) {
        float v26 = (float)(vabds_f32((float)(*a7 - v18) / (float)v10, (float)(v17 - v20) / (float)a4) * *(float *)(a2 + 6776))
      }
            + (float)((float)(1.0 - *(float *)(a2 + 6776)) * v26);
      a5[2] = v26 * *(float *)(a1 + 108);
      int v28 = v10 - a4;
      if (v10 - a4 < 0) {
        int v28 = a4 - v10;
      }
    }
    else
    {
      if (a8)
      {
        if (a8 != 1) {
          return result;
        }
        float v14 = a7[1];
        v30[0] = *a7;
        v29[0] = *v9;
        v30[1] = v14;
        v29[1] = v9[a4 - 1];
        float v15 = mfs_bnfData_CosineCost_F32(v30, v29, 2u) * *(float *)(a1 + 108);
      }
      else
      {
        float v15 = *(float *)(a1 + 108) * sqrtf((float)(*a7 - *v9) + (float)(a7[1] - v9[a4 - 1]));
      }
      a5[2] = v15;
      int v28 = v10 - a4;
      if (v10 - a4 < 0) {
        int v28 = a4 - v10;
      }
      float v27 = (float)a4;
    }
    uint64_t result = (float)((float)v28 / v27) * *(float *)(a1 + 116);
    *a5 = result;
  }
  return result;
}

uint64_t UNICORN__mfs_TCost_SetTarget(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v8 = UNICORN__mfs_FillTgtVect(*(void *)(a2 + 568), a3, a1, *(_DWORD *)(a4[2] + 4 * a5));
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)(a4[14] + 8 * a5) + 4);
  *(float *)(a1 + 136) = BET3FLT__bet3_finv(sqrtf(*(float *)(*(void *)(a4[19] + 8 * a5) + 4)));
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)(a4[14] + 8 * a5) + 8);
  *(float *)(a1 + 140) = BET3FLT__bet3_finv(sqrtf(*(float *)(*(void *)(a4[19] + 8 * a5) + 8)));
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)(a4[14] + 8 * a5) + 12);
  *(float *)(a1 + 144) = BET3FLT__bet3_finv(sqrtf(*(float *)(*(void *)(a4[19] + 8 * a5) + 12)));
  *(_DWORD *)(a1 + 120) = (*(unsigned __int8 *)(a4[22] + a5) >> 2) & 1;
  return v8;
}

uint64_t GetBnfTargetVectorPacked(uint64_t a1, int a2, float *a3)
{
  *a3 = VectBlock_Get_IndexElm_LH_F32(a1 + 1928, a2);
  if (*(_DWORD *)(a1 + 1944))
  {
    return VectBlock_Get_IndexPtr_LH_S8(a1 + 1864, a2);
  }
  else
  {
    return VectBlock_Get_IndexPtr_LH_S16(a1 + 1880, a2);
  }
}

uint64_t Search_TreeIndex(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, uint64_t a8, signed int a9)
{
  uint64_t v12 = *(int **)(a1 + 104);
  uint64_t v41 = *(void *)(a1 + 112);
  uint64_t v13 = &v12[2 * a2];
  uint64_t v14 = *(void *)(a1 + 120);
  float v15 = (unsigned int *)(*(void *)(*((void *)v13 + 96) + 8 * (int)a3)
                       + 40 * *(int *)(*(void *)(a5 + 8 * a2 + 56) + 4 * (int)a3));
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  uint64_t v18 = *((void *)v13 + 101);
  float v19 = *(float *)(*(void *)(v14 + 1352) + 4 * a9);
  float v20 = **(float **)(a8 + 224);
  uint64_t v21 = *(void *)(a8 + 16) + 32 * a9;
  int v22 = *v12;
  uint64_t v34 = v18;
  uint64_t v35 = v16;
  uint64_t v37 = *(int *)(*(void *)(a5 + 8 * a2 + 56) + 4 * (int)a3);
  int v36 = *(_DWORD *)(v21 + 16);
  if (*(_DWORD *)(v21 + 20) >= v17)
  {
    LODWORD(result) = 0;
  }
  else
  {
    uint64_t result = UNICORN__mfs_CostList_Resize((void *)a8, a9, v17);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  unsigned int v38 = result;
  int v24 = a9 / v22;
  float v42 = 0.0;
  uint64_t BnfTargetVectorPacked = GetBnfTargetVectorPacked(v14, a9 / *(_DWORD *)(v41 + 5992), &v42);
  if (*(_DWORD *)(v41 + 5992) == 1 || *(_DWORD *)(a8 + 56) != v24)
  {
    (*(void (**)(int *, void, uint64_t, uint64_t, uint64_t, void, float))(a1 + 384))(v12, *(void *)(a1 + 56), BnfTargetVectorPacked, v37, a3, *(void *)(a8 + 104), v42);
    *(_DWORD *)(a8 + 56) = v24;
  }
  if (v17)
  {
    uint64_t result = v38;
    if (v36 - a6 >= a7) {
      return result;
    }
    unint64_t v26 = 0;
    float v27 = (_DWORD *)(v34 + 4 * v35);
    uint64_t v28 = (int)a3 - 2;
    float v29 = (float)(1.0 - v19) * v20;
    uint64_t v30 = *(unsigned int *)(*((void *)v12 + 106)
                          + 4 * (*v27 / *(_DWORD *)(*((void *)v12 + 71) + 5992)));
    do
    {
      unsigned int v31 = v27[v26];
      float v32 = *(float *)(*(void *)(a8 + 104) + 4 * v26);
      uint64_t v33 = *(void *)(a8 + 72);
      *(_DWORD *)(*(void *)(a8 + 64) + 4 * ((v31 / *(_DWORD *)(v41 + 5992)) >> 5)) |= 1 << (v31
                                                                                              / *(_DWORD *)(v41 + 5992));
      *(float *)(v33 + 4 * v30) = v32;
      mfs_CostList_PadWithBnfOffset((void *)a8, a9, v31, v30 + v26, v29 * v32);
      *(_DWORD *)(*(void *)(a8 + 112 + 8 * v28) + 4 * (v26 >> 5)) |= 1 << v26;
      ++v26;
    }
    while (v26 < v17 && *(_DWORD *)(*(void *)(a8 + 16) + 32 * a9 + 16) - a6 < a7);
  }
  return v38;
}

uint64_t Search_PruneBNF_TreeIndex(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, uint64_t a8, signed int a9)
{
  *(void *)&v152[4] = *MEMORY[0x263EF8340];
  int v133 = *(unsigned __int8 *)(a4 + 1);
  uint64_t v12 = *(_DWORD **)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v14 = *(void *)(a1 + 120);
  unsigned int v139 = v12 + 192;
  uint64_t v140 = *(int *)(*(void *)(a5 + 8 * a2 + 56) + 4 * a3);
  float v15 = (unsigned int *)(*(void *)(*(void *)&v12[2 * a2 + 192] + 8 * a3) + 40 * (int)v140);
  unsigned int v16 = v15[1];
  float v17 = *(float *)(*(void *)(v14 + 1352) + 4 * a9);
  float v18 = **(float **)(a8 + 224);
  uint64_t v141 = *v15;
  signed int v142 = &v12[2 * a2 + 202];
  unsigned int v19 = *(_DWORD *)(*v142 + 4 * v141);
  uint64_t v132 = *(void *)(a8 + 16);
  float v143 = v12;
  int v20 = *v12;
  float v146 = 0.0;
  float v147 = 0.0;
  BET5_GenericRules_Param_GetLocalValue(v13, v14, 1u, a9, &v147);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  uint64_t v144 = v13;
  BET5_GenericRules_Param_GetLocalValue(v13, v14, 2u, a9, &v146);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  uint64_t v137 = a3;
  uint64_t v138 = a2;
  uint64_t v127 = a3 - 2;
  bzero(v151, 0x400uLL);
  if (BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(v14 + 1072) + 32)) >= 3) {
    *(_DWORD *)(v14 + 1948) += *(_DWORD *)(*(void *)(*(void *)&v139[2 * a2] + 8 * a3) + 40 * (int)v140 + 4);
  }
  uint64_t v128 = v14;
  uint64_t v22 = v13;
  uint64_t v23 = *((void *)v143 + 71);
  unsigned int v24 = v19 / *(_DWORD *)(v23 + 5992);
  int v25 = *(_DWORD *)(*((void *)v143 + 106) + 4 * v24);
  uint64_t v26 = a8;
  int v27 = *(_DWORD *)(v144 + 5984)
      ? v25 + *(_DWORD *)(v23 + 11564) / *v143 * v127
      : *(_DWORD *)(*((void *)v143 + 106) + 4 * v24);
  if (*(_DWORD *)(*(void *)(a8 + 16) + 32 * a9 + 20) < v16)
  {
    uint64_t v21 = UNICORN__mfs_CostList_Resize((void *)a8, a9, v16);
    uint64_t v22 = v144;
    uint64_t v26 = a8;
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
  }
  uint64_t v28 = *(void *)(v14 + 1768);
  if (v28
    && *(_DWORD *)(v28 + 12) == 1
    && *(_DWORD *)(v28 + 8) > a9
    && *(float *)(*(void *)v28 + 48 * a9 + 16) != 0.0)
  {
    unsigned int v29 = *(_DWORD *)(v28 + 20);
    if (v29 >= 0x64) {
      int v30 = 100;
    }
    else {
      int v30 = v29;
    }
  }
  else
  {
    int v30 = -1;
  }
  float v31 = 0.0;
  uint64_t v32 = (a9 / v20);
  int v122 = v27;
  if (v133 == 1)
  {
    int v33 = v30;
    uint64_t v129 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
LABEL_34:
    int v134 = 1;
    float v37 = 0.0;
    goto LABEL_41;
  }
  float v36 = *(float *)(v22 + 6160);
  if (v36 < *(float *)(v22 + 6164) || v30 != -1)
  {
    uint64_t v40 = *((void *)v143 + 71);
    int v41 = *(_DWORD *)(v40 + 24);
    uint64_t v34 = (v41 * *(_DWORD *)(a5 + 24));
    uint64_t v35 = (*(_DWORD *)(a5 + 28) * v41);
    if (v30)
    {
      if (v30 == -1)
      {
        int v33 = -1;
        float v37 = v36 * (float)v35;
      }
      else
      {
        int v33 = v30;
        float v42 = *(float *)(v40 + 11572) * 1000.0 * (float)(130 - v30);
        float v37 = v42 / 100.0;
      }
    }
    else
    {
      int v33 = 0;
      float v37 = 1000.0;
    }
    uint64_t v129 = (float (*)(void, uint64_t, uint64_t, uint64_t, float, float))PhonemeDurationOutlierDistance_LegacyOrTuning;
    if (BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(a1 + 56) + 32)) < 3)
    {
      int v134 = 0;
    }
    else
    {
      UNICORN__log_select_Diag(*(void *)(a1 + 56), 3, (uint64_t)"phonidx %u: dist duroutlier legacy: phondur target %u msecs, stdevdur %u msecs, threshold %u msecs\n");
      int v134 = 0;
      uint64_t v129 = (float (*)(void, uint64_t, uint64_t, uint64_t, float, float))PhonemeDurationOutlierDistance_LegacyOrTuning;
    }
    uint64_t v22 = v144;
    uint64_t v26 = a8;
    goto LABEL_41;
  }
  float v37 = v147;
  if (v147 == 0.0
    || (uint64_t v38 = *(void *)(v22 + 11624)) == 0
    || (uint64_t v39 = *(void *)(v22 + 11632)) == 0
    || v127 >= *(_DWORD *)(v22 + 11608))
  {
    int v33 = -1;
    goto LABEL_33;
  }
  int v33 = -1;
  if (v140 > *(_DWORD *)(*(void *)(v22 + 11616) + 4 * v127))
  {
LABEL_33:
    uint64_t v129 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    goto LABEL_34;
  }
  uint64_t v34 = (*(_DWORD *)(*(void *)(v38 + 8 * v127) + 4 * v140)
                     + *(_DWORD *)(*((void *)v143 + 71) + 24) * *(_DWORD *)(a5 + 24)) >> 1;
  uint64_t v125 = *(unsigned int *)(*(void *)(v39 + 8 * v127) + 4 * v140);
  float v31 = v146;
  uint64_t v129 = (float (*)(void, uint64_t, uint64_t, uint64_t, float, float))PhonemeDurationOutlierDistance;
  if (BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(a1 + 56) + 32)) < 3)
  {
    int v134 = 0;
    uint64_t v22 = v144;
    uint64_t v26 = a8;
    uint64_t v35 = v125;
  }
  else
  {
    uint64_t v35 = v125;
    UNICORN__log_select_Diag(*(void *)(a1 + 56), 3, (uint64_t)"phonidx %u: dist duroutlier: phondur target %u msecs [(predicted %u + meancluster %u)/2], stdevcluster %u msecs, param1 %.3f, param2 %.3f\n");
    uint64_t v22 = v144;
    int v134 = 0;
    uint64_t v129 = (float (*)(void, uint64_t, uint64_t, uint64_t, float, float))PhonemeDurationOutlierDistance;
    uint64_t v26 = a8;
  }
LABEL_41:
  if (*(_DWORD *)(v26 + 56) != v32)
  {
    uint64_t v21 = Search_BNFCostCache_Fill(a1, v32, *(void *)(a1 + 136) + 56);
    uint64_t v22 = v144;
    uint64_t v26 = a8;
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
  }
  if (*(_DWORD *)(*((void *)v143 + 71) + 5992) != 1)
  {
    unsigned int v43 = v32 + 1;
    if ((v32 + 1) < *(_DWORD *)(a1 + 88) && v43 != *(_DWORD *)(v26 + 80))
    {
      uint64_t v21 = Search_BNFCostCache_Fill(a1, v43, *(void *)(a1 + 136) + 80);
      uint64_t v22 = v144;
      uint64_t v26 = a8;
      if ((v21 & 0x80000000) != 0) {
        return v21;
      }
    }
  }
  uint64_t v126 = v35;
  if (a3 < 3 || *(_DWORD *)(v22 + 5992) == 1 || *(_DWORD *)(v26 + 56) != v32) {
    goto LABEL_55;
  }
  int v44 = 0;
  uint64_t v45 = (a9 - 1);
  if (a9 < 1 || *(_DWORD *)(v22 + 6200) || v33 != -1) {
    goto LABEL_56;
  }
  if (*(float *)(*(void *)(v14 + 1352) + 4 * v45) != *(float *)(*(void *)(v14 + 1352) + 4 * a9)
    || *(_DWORD *)(*(void *)(a1 + 144) + 4 * v45))
  {
    goto LABEL_55;
  }
  float v148 = 0.0;
  float v149 = 0.0;
  uint64_t v118 = v22;
  BET5_GenericRules_Param_GetLocalValue(v22, v14, 1u, a9 - 1, &v149);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  BET5_GenericRules_Param_GetLocalValue(v118, v14, 2u, v45, &v148);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  if (v149 == v147)
  {
    uint64_t v22 = v144;
    uint64_t v26 = a8;
    if (v148 != v146)
    {
LABEL_55:
      int v44 = 0;
      goto LABEL_56;
    }
    int v44 = 1;
  }
  else
  {
    int v44 = 0;
    uint64_t v22 = v144;
    uint64_t v26 = a8;
  }
LABEL_56:
  uint64_t v136 = v34;
  uint64_t v46 = *(void *)(a1 + 104);
  uint64_t v47 = *(void *)(v46 + 2376);
  if (!v47)
  {
    uint64_t List = 0;
    unsigned int v48 = 0;
    uint64_t v62 = a9;
LABEL_119:
    if (v44)
    {
      uint64_t List = mfs_ClonePrevList((void *)v26, a9, v127);
      if ((List & 0x80000000) != 0) {
        return List;
      }
      if (BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(a1 + 56) + 32)) >= 4) {
        UNICORN__log_select_Diag(*(void *)(a1 + 56), 3, (uint64_t)"[Stage1 costs cloned from previous costlist.]\n");
      }
      goto LABEL_172;
    }
    float v80 = 1.0 - v17;
    uint64_t v81 = (void *)(v132 + 32 * v62);
    if (v134)
    {
      uint64_t v82 = *(void *)&v139[2 * v138];
      if (!*(_DWORD *)(v22 + 6200))
      {
        uint64_t v83 = *(void *)(v82 + 8 * v137);
        unint64_t v84 = *(unsigned int *)(v83 + 40 * (int)v140 + 4);
        if (v84)
        {
          uint64_t v85 = 0;
          uint64_t v86 = *(void *)(v26 + 72);
          do
          {
            float v87 = *(float *)(v86 + 4 * (v25 + v85));
            double v88 = ComputeFuzzyDist(v48, (uint64_t)&v149, v25 + (int)v85);
            uint64_t v26 = a8;
            float v89 = v87 + *(float *)&v88;
            unsigned int v90 = (float)(v89 * 10.0);
            if (v90 >= 0xFF) {
              uint64_t v91 = v152;
            }
            else {
              uint64_t v91 = &v151[v90];
            }
            ++*v91;
            *(float *)(*(void *)(a8 + 104) + 4 * v85++) = v89;
          }
          while (v84 != v85);
          uint64_t v22 = v144;
LABEL_153:
          int v106 = v151[0];
          for (uint64_t i = 1; i != 256; ++i)
          {
            v106 += v151[i];
            v151[i] = v106;
          }
          unsigned int v108 = (float)(*(float *)(v22 + 6156) * 10.0);
          if (v108 - 1 <= 0xFE)
          {
            while (v151[v108 - 1] < *(_DWORD *)(v22 + 6148))
            {
              if (++v108 == 256)
              {
                unsigned int v108 = 256;
                break;
              }
            }
          }
          unint64_t v109 = v108;
          unsigned int v110 = v108 != 0;
          unint64_t v111 = &v151[v108 - 1];
          while (v109 >= 2)
          {
            if (*(v111 - 1) <= *(_DWORD *)(v22 + 6148))
            {
              unsigned int v110 = v109;
              break;
            }
            --v109;
            unsigned int v112 = *v111--;
            if (v112 <= *(_DWORD *)(v22 + 6152))
            {
              unsigned int v110 = v109 + 1;
              break;
            }
          }
          if (v84)
          {
            unint64_t v113 = 0;
            uint64_t v114 = (unsigned int *)(v132 + 32 * a9 + 16);
            do
            {
              unsigned int v115 = *v114;
              if (*v114 - a6 >= a7) {
                break;
              }
              float v116 = *(float *)(*(void *)(v26 + 104) + 4 * v113);
              if ((float)(v116 * 10.0) <= (float)v110)
              {
                uint64_t v117 = *v81 + 12 * v115;
                *(_DWORD *)uint64_t v117 = *(_DWORD *)(*v142 + 4 * (v141 + v113));
                *(float *)(v117 + 4) = (float)(v80 * v18) * v116;
                *(_DWORD *)(v117 + 8) = v25 + v113;
                *uint64_t v114 = v115 + 1;
                *(_DWORD *)(*(void *)(v26 + 112 + 8 * (int)v127) + 4 * (v113 >> 5)) |= 1 << v113;
                unint64_t v84 = *(unsigned int *)(v83 + 40 * (int)v140 + 4);
              }
              ++v113;
            }
            while (v113 < v84);
          }
          uint64_t v62 = a9;
LABEL_172:
          if (BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(v128 + 1072) + 32)) >= 3) {
            *(_DWORD *)(v128 + 1952) += *(_DWORD *)(v132 + 32 * v62 + 16);
          }
          return List;
        }
LABEL_152:
        unint64_t v84 = 0;
        goto LABEL_153;
      }
    }
    else
    {
      uint64_t v82 = *(void *)&v139[2 * v138];
    }
    uint64_t v83 = *(void *)(v82 + 8 * v137);
    if (!*(_DWORD *)(v83 + 40 * (int)v140 + 4)) {
      goto LABEL_152;
    }
    uint64_t v124 = (void *)(v132 + 32 * v62);
    unint64_t v92 = 0;
    while (1)
    {
      uint64_t v93 = *(unsigned int *)(*v142 + 4 * (v141 + v92));
      if (v134)
      {
        int v94 = v25 + v92;
        uint64_t v95 = (v25 + v92);
        float v96 = 0.0;
      }
      else
      {
        float v96 = v129(*(_DWORD *)(*((void *)v143 + 71) + 24)* *(unsigned __int8 *)(*((void *)v143 + 307) + (v25 + v92)), v136, v126, v26, v37, v31);
        if (v96 >= 9999.9)
        {
          int v94 = v25 + v92;
          goto LABEL_147;
        }
        int v94 = v25 + v92;
        uint64_t v95 = (v25 + v92);
        uint64_t v26 = a8;
      }
      float v96 = v96 + *(float *)(*(void *)(v26 + 72) + 4 * v95);
      if (*(_DWORD *)(v144 + 6200))
      {
        if (*(_DWORD *)(v144 + 6196))
        {
          int v97 = *(char *)(*((void *)v143 + 130) + (v122 + v92));
          float v98 = *(float *)(v144 + 6192);
          if (v97 < (int)v98)
          {
            float v99 = (float)v97 / v98;
LABEL_146:
            float v96 = v96 * v99;
          }
        }
        else
        {
          float v100 = *(float *)(*((void *)v143 + 74) + 16 * v93);
          float v101 = *(float *)(v144 + 6192);
          if (v100 < v101)
          {
            float v99 = v100 / v101;
            goto LABEL_146;
          }
        }
      }
LABEL_147:
      double v102 = ComputeFuzzyDist(v48, (uint64_t)&v149, v94);
      float v103 = v96 + *(float *)&v102;
      unsigned int v104 = (float)(v103 * 10.0);
      if (v104 >= 0xFF) {
        uint64_t v105 = v152;
      }
      else {
        uint64_t v105 = &v151[v104];
      }
      ++*v105;
      uint64_t v26 = a8;
      *(float *)(*(void *)(a8 + 104) + 4 * v92++) = v103;
      uint64_t v83 = *(void *)(*(void *)&v139[2 * v138] + 8 * v137);
      unint64_t v84 = *(unsigned int *)(v83 + 40 * (int)v140 + 4);
      if (v92 >= v84)
      {
        uint64_t v22 = v144;
        uint64_t v81 = v124;
        goto LABEL_153;
      }
    }
  }
  unsigned int v48 = 0;
  unsigned int v49 = 0;
  uint64_t v123 = *(void *)(a1 + 120);
  float v148 = 0.0;
  uint64_t v50 = *(unsigned int *)(v46 + 2384) + 1;
  do
  {
    if (!--v50) {
      break;
    }
    if (*(_DWORD *)(v47 + 20))
    {
      *(void *)&v150[v49] = v47;
      unsigned int v48 = ++v49;
    }
    v47 += 64;
  }
  while (v49 < 0x64);
  int v121 = v44;
  if (*(void *)(v46 + 2392))
  {
    if (v49 > 0x63)
    {
      uint64_t List = 0;
LABEL_90:
      int v120 = v25;
      unsigned int v63 = 0;
      uint64_t v64 = *(void *)(a1 + 120);
      uint64_t v65 = (v32 + 1);
      while (1)
      {
        uint64_t v66 = *(void *)&v150[v63];
        uint64_t v67 = *(unsigned int *)(v66 + 16);
        uint64_t v68 = *(void *)(v64 + 8);
        if ((v67 - 253) > 1)
        {
          uint64_t v71 = *(void *)(v68 + 8 * v67 + 16);
          if (!v71) {
            goto LABEL_104;
          }
          uint64_t v70 = (unsigned __int8 *)(v71 + v32);
          goto LABEL_100;
        }
        uint64_t v69 = *(void *)(v68 + 32);
        if (!v69) {
          goto LABEL_104;
        }
        if (v67 == 253)
        {
          if (v32)
          {
            uint64_t v70 = (unsigned __int8 *)(v69 + (v32 - 1));
LABEL_100:
            unsigned int v72 = *v70;
            goto LABEL_102;
          }
        }
        else if (v65 < *(_DWORD *)(a1 + 88))
        {
          uint64_t v70 = (unsigned __int8 *)(v69 + v65);
          goto LABEL_100;
        }
        unsigned int v72 = 1;
LABEL_102:
        LOBYTE(v150[v63]) = v72;
        if (*(_DWORD *)(v66 + 36) <= v72)
        {
LABEL_104:
          if (BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(a1 + 56) + 32)) >= 3) {
            UNICORN__log_select_Diag(*(void *)(a1 + 56), 3, (uint64_t)"\nphonidx %u: Warning : fuzzy table %s has been deactivated for target feature value %u\n");
          }
          unsigned int v73 = v63 + 1;
          if (v63 + 1 < v48)
          {
            unint64_t v74 = v48 - (unint64_t)v73;
            float v75 = &v150[v73];
            unsigned int v76 = v63;
            do
            {
              long long v77 = *v75++;
              v150[v76++] = v77;
              --v74;
            }
            while (v74);
          }
          unsigned int v49 = --v48;
          goto LABEL_110;
        }
        ++v63;
LABEL_110:
        if (v63 >= v49)
        {
          int v25 = v120;
          goto LABEL_112;
        }
      }
    }
    if (*(_DWORD *)(v46 + 2400))
    {
      unint64_t v51 = 0;
      while (1)
      {
        uint64_t v52 = *(void *)(v46 + 2392);
        uint64_t List = BET5_GenericRules_Rule_Matches(v123, (unsigned int *)(v52 + 48 * v51), v32, &v148);
        if ((List & 0x80000000) != 0) {
          return List;
        }
        if (v148 != 0.0)
        {
          uint64_t v54 = *(unsigned int *)(v52 + 48 * v51 + 16);
          if (v54)
          {
            uint64_t v55 = 0;
            uint64_t v56 = *(void *)(v52 + 48 * v51 + 24);
            do
            {
              if (*(_DWORD *)(v56 + 12 * v55) == 4)
              {
                if (v48)
                {
                  uint64_t v57 = 0;
                  uint64_t v58 = *(void *)(v46 + 2376);
                  uint64_t v59 = *(unsigned int *)(v56 + 12 * v55 + 8);
                  uint64_t v60 = v48;
                  float v61 = &v149;
                  while (*(_DWORD *)(*(void *)v61 + 16) != *(_DWORD *)(v58 + (v59 << 6) + 16))
                  {
                    ++v57;
                    v61 += 4;
                    if (v48 == v57) {
                      goto LABEL_80;
                    }
                  }
                  *(void *)float v61 = v58 + (v59 << 6);
                }
                else
                {
                  LODWORD(v57) = 0;
                }
                if (v57 == v48)
                {
                  uint64_t v58 = *(void *)(v46 + 2376);
                  uint64_t v59 = *(unsigned int *)(v56 + 12 * v55 + 8);
                  uint64_t v60 = v48;
LABEL_80:
                  *(void *)&v150[v60] = v58 + (v59 << 6);
                  ++v48;
                }
              }
              ++v55;
            }
            while (v55 != v54);
          }
        }
        if (v48 >= 0x64) {
          break;
        }
        ++v51;
        unsigned int v49 = v48;
        if (v51 >= *(unsigned int *)(v46 + 2400)) {
          goto LABEL_87;
        }
      }
      unsigned int v49 = v48;
      goto LABEL_90;
    }
  }
  uint64_t List = 0;
LABEL_87:
  if (v49) {
    goto LABEL_90;
  }
LABEL_112:
  if (BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(a1 + 56) + 32)) <= 2)
  {
    uint64_t v62 = a9;
  }
  else
  {
    uint64_t v62 = a9;
    if (v48)
    {
      uint64_t v78 = 0;
      float v79 = v150;
      do
      {
        ++v79;
        UNICORN__log_select_Diag(*(void *)(a1 + 56), 3, (uint64_t)"phonidx %u: dist fuzzy %u:%s: target feature value: %u\n");
        ++v78;
      }
      while (v48 != v78);
    }
  }
  uint64_t v22 = v144;
  uint64_t v26 = a8;
  int v44 = v121;
  if ((List & 0x80000000) == 0) {
    goto LABEL_119;
  }
  return List;
}

uint64_t Search_BNFCostCache_Fill(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  if (*(_DWORD *)(v7 + 5992) == 1)
  {
    int v8 = *(_DWORD *)v6 * a2;
    unsigned int v9 = *(_DWORD *)v6 + 2;
  }
  else
  {
    unsigned int v9 = 3;
    int v8 = a2;
  }
  uint64_t v10 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 384);
  bzero(*(void **)(a3 + 8), 4 * *(unsigned int *)(a3 + 4));
  unsigned int v29 = a2;
  if (v9 < 3)
  {
    uint64_t result = 0;
LABEL_13:
    *(_DWORD *)a3 = v29;
  }
  else
  {
    uint64_t v30 = v10;
    float v31 = 0.0;
    uint64_t v12 = (void *)(v11 + 312 * a2 + 64);
    uint64_t v13 = 2;
    while (1)
    {
      uint64_t v14 = *(unsigned int *)(*v12 + 4 * v13);
      uint64_t BnfTargetVectorPacked = GetBnfTargetVectorPacked(v30, v8, &v31);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, void, float))(a1 + 384))(v6, *(void *)(a1 + 56), BnfTargetVectorPacked, v14, v13, *(void *)(*(void *)(a1 + 136) + 104), v31);
      if ((result & 0x80000000) != 0) {
        break;
      }
      uint64_t v17 = *(void *)(*(void *)(v6 + 776) + 8 * v13);
      uint64_t v18 = v17 + 40 * (int)v14;
      int v20 = *(_DWORD *)(v18 + 4);
      unsigned int v19 = (unsigned int *)(v18 + 4);
      if (v20)
      {
        unint64_t v21 = 0;
        uint64_t v22 = *(unsigned int *)(v17 + 40 * (int)v14);
        uint64_t v23 = *(void *)(v6 + 816);
        int v24 = *(_DWORD *)(*(void *)(v6 + 848)
                        + 4 * (*(_DWORD *)(v23 + 4 * v22) / *(_DWORD *)(*(void *)(v6 + 568) + 5992)));
        uint64_t v25 = *(void *)(*(void *)(a1 + 136) + 104);
        uint64_t v26 = *(void *)(a3 + 8);
        uint64_t v27 = *(void *)(a3 + 16);
        do
        {
          unsigned int v28 = *(_DWORD *)(v23 + 4 * (v22 + v21)) / *(_DWORD *)(v7 + 5992);
          *(_DWORD *)(v26 + 4 * (v28 >> 5)) |= 1 << v28;
          *(_DWORD *)(v27 + 4 * (v24 + v21)) = *(_DWORD *)(v25 + 4 * v21);
          ++v21;
        }
        while (v21 < *v19);
      }
      ++v13;
      ++v8;
      if (v13 == v9) {
        goto LABEL_13;
      }
    }
  }
  return result;
}

double ComputeFuzzyDist(unsigned int a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v3 = a1;
  uint64_t v4 = (unsigned __int8 *)(a2 + 8);
  double result = 0.0;
  do
  {
    uint64_t v6 = *((void *)v4 - 1);
    uint64_t v7 = *(void *)(v6 + 40);
    if (v7) {
      *(float *)&double result = *(float *)&result
    }
                        + *(float *)(*(void *)(v6 + 24)
                                   + 4
                                   * (*(unsigned __int8 *)(v7
                                                         + *(unsigned __int8 *)(v6 + 49)
                                                         + *(unsigned __int8 *)(v6 + 48) * a3)
                                    + *(_DWORD *)(v6 + 36) * *v4));
    v4 += 16;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t UnicornSearch_Create(uint64_t a1)
{
  uint64_t v2 = heap_Calloc(*(void **)(a1 + 8), 1, 400);
  uint64_t v3 = v2;
  if (v2)
  {
    *(_DWORD *)(v2 + 360) = 1;
    uint64_t v4 = heap_Calloc(*(void **)(a1 + 8), 1, 16);
    *(void *)(v3 + 352) = v4;
    if (v4
      && (*(_DWORD *)(v3 + 376) = 1,
          uint64_t v5 = heap_Calloc(*(void **)(a1 + 8), 1, 16),
          (*(void *)(v3 + 368) = v5) != 0))
    {
      *(void *)uint64_t v3 = UnicornSearch_Open;
      *(void *)(v3 + 8) = UnicornSearch_Set;
      *(void *)(v3 + 16) = UnicornSearch_Process;
      *(void *)(v3 + 24) = UnicornSearch_ProcessOne;
      *(void *)(v3 + 32) = UnicornSearch_Reset;
      *(void *)(v3 + 40) = UnicornSearch_Close;
      *(void *)(v3 + 48) = UnicornSearch_SetSIMDCallback;
      *(void *)(v3 + 56) = a1;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t UnicornSearch_Open(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 2229280778;
  if (a1)
  {
    uint64_t v5 = (int *)a2[1];
    uint64_t v4 = (_DWORD *)a2[2];
    uint64_t v6 = *a2;
    *(void *)(a1 + 104) = v5;
    *(void *)(a1 + 112) = v4;
    *(void *)(a1 + 72) = v6;
    *(void *)(a1 + 80) = v4;
    *(void *)(a1 + 64) = v5;
    int v7 = *v5;
    int v8 = *(_DWORD *)(v6 + 392);
    *(_DWORD *)(a1 + 88) = v8;
    if (v4[1496]) {
      int v9 = 1;
    }
    else {
      int v9 = v7;
    }
    *(_DWORD *)(a1 + 96) = v7;
    *(_DWORD *)(a1 + 100) = v8 * v9;
    *(void *)(a1 + 120) = v6;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = v6 + 1088;
    *(unsigned char *)(a1 + 156) = 1;
    *(_DWORD *)(a1 + 160) = v4[1548];
    *(unsigned char *)(a1 + 164) = 0;
    *(_DWORD *)(a1 + 168) = v4[1693];
    uint64_t v10 = *(void *)(v6 + 1808);
    if (v10)
    {
      heap_Free(*(void **)(*(void *)(a1 + 56) + 8), v10);
      uint64_t v6 = *(void *)(a1 + 120);
      *(void *)(v6 + 1808) = 0;
    }
    uint64_t v11 = *(void *)(v6 + 1816);
    if (v11)
    {
      heap_Free(*(void **)(*(void *)(a1 + 56) + 8), v11);
      uint64_t v6 = *(void *)(a1 + 120);
      *(void *)(v6 + 1816) = 0;
    }
    *(_DWORD *)(v6 + 1824) = 0;
    *(void *)(a1 + 336) = *(void *)(v6 + 1896);
    uint64_t v12 = heap_Calloc(*(void **)(*(void *)(a1 + 56) + 8), (*(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 88)), 4);
    *(void *)(a1 + 144) = v12;
    if (v12)
    {
      int v13 = *(_DWORD *)(a1 + 88);
      int v14 = *(_DWORD *)(a1 + 96);
      uint64_t v15 = *(void *)(a1 + 120);
      if (v14 * v13)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        uint64_t v18 = *(void **)(v15 + 1768);
        do
        {
          if (v18)
          {
            if (*(_DWORD *)(*v18 + v16)) {
              BOOL v19 = 0;
            }
            else {
              BOOL v19 = **(_DWORD **)(*v18 + v16 + 8) > *(_DWORD *)(*(void *)(a1 + 112) + 11548);
            }
            *(_DWORD *)(v12 + 4 * v17) = v19;
            int v13 = *(_DWORD *)(a1 + 88);
            int v14 = *(_DWORD *)(a1 + 96);
          }
          ++v17;
          unint64_t v20 = (v14 * v13);
          v16 += 48;
        }
        while (v17 < v20);
      }
      else
      {
        LODWORD(v20) = 0;
      }
      uint64_t v21 = UNICORN__mfs_CostList_Init(*(void *)(a1 + 56), *(void *)(a1 + 104), v15 + 1088, v20, 0);
      uint64_t v22 = *(void *)(a1 + 112);
      *(void *)(*(void *)(a1 + 136) + 224) = &tblBNFContextWeights[5 * *(int *)(v22 + 6752)];
      if ((v21 & 0x80000000) != 0) {
        return v21;
      }
      uint64_t v2 = UNICORN__mfs_TCost_Init(*(void *)(a1 + 56), v22, a1 + 176);
      if ((v2 & 0x80000000) == 0)
      {
        uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 72) + 32);
        *(_DWORD *)(a1 + 152) = 0;
        if ((int)v23 >= 1)
        {
          uint64_t v24 = 0;
          uint64_t v25 = *(void *)(a1 + 80) + 184;
          do
          {
            if (*(_DWORD *)(v25 + 4 * v24) == 2) {
              break;
            }
            *(_DWORD *)(a1 + 152) = ++v24;
          }
          while (v23 != v24);
        }
        uint64_t v26 = *(_DWORD **)(a1 + 112);
        if (v26[1535])
        {
          if (v26[1495])
          {
            uint64_t v27 = *(void **)(a1 + 352);
            *uint64_t v27 = 0;
            v27[1] = Search_Diphone_PruneBNF;
            if (*(_DWORD *)(*(void *)(a1 + 104) + 1928) != 1) {
              goto LABEL_42;
            }
            goto LABEL_36;
          }
          if (*(_DWORD *)(*(void *)(a1 + 104) + 1928) == 1)
          {
            *(_DWORD *)(a1 + 380) = 1;
            unsigned int v28 = *(void **)(a1 + 352);
            unsigned int v29 = Search_PruneBNF_TreeIndex;
            goto LABEL_35;
          }
          float v31 = *(void **)(a1 + 352);
          uint64_t v32 = Search_PruneBNF;
        }
        else
        {
          if (*(_DWORD *)(*(void *)(a1 + 104) + 1928) == 1)
          {
            *(_DWORD *)(a1 + 380) = 1;
            unsigned int v28 = *(void **)(a1 + 352);
            unsigned int v29 = Search_TreeIndex;
LABEL_35:
            *unsigned int v28 = 0;
            v28[1] = v29;
LABEL_36:
            uint64_t v30 = *(void **)(a1 + 368);
            *uint64_t v30 = 0;
            v30[1] = UnicornSearch_StageTwo_TreeIndex_Sliced;
            if (v26[1688] == 1 && v26[1700] == 9) {
              v30[1] = UnicornSearch_StageTwo_TreeIndex_Cascaded;
            }
            return v2;
          }
          float v31 = *(void **)(a1 + 352);
          uint64_t v32 = Search_NoPrune;
        }
        *float v31 = 0;
        v31[1] = v32;
LABEL_42:
        int v33 = *(void **)(a1 + 368);
        *int v33 = 0;
        v33[1] = UnicornSearch_StageTwo_Default;
      }
    }
  }
  return v2;
}

uint64_t UnicornSearch_Set(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 92) = a2;
  *(void *)(a1 + 128) = *(void *)(*(void *)(a1 + 72) + 384) + 312 * a2;
  UNICORN__log_select_Diag(*(void *)(a1 + 56), 11, (uint64_t)"[Phoneme %d]\n");
  UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(*(void *)(a1 + 72) + 8), *(_DWORD *)(a1 + 92), (unsigned char *)(a1 + 344));
  UNICORN__mfs_Ling_LogPhonCtxt(*(void *)(a1 + 56), *(void *)(a1 + 80), *(void *)(*(void *)(a1 + 72) + 8), *(_DWORD *)(a1 + 92));
  if (*(_DWORD *)(a1 + 380) && *(_DWORD *)(*(void *)(a1 + 112) + 5992) != 1)
  {
    uint64_t v3 = *(void *)(a1 + 136);
    long long v7 = *(_OWORD *)(v3 + 32);
    uint64_t v8 = *(void *)(v3 + 48);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)(v3 + 56);
    *(void *)(v3 + 48) = *(void *)(v3 + 72);
    uint64_t v4 = *(void *)(a1 + 136);
    *(void *)(v4 + 72) = *(void *)(v4 + 96);
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(v4 + 80);
    uint64_t v5 = *(void *)(a1 + 136);
    *(_OWORD *)(v5 + 80) = v7;
    *(void *)(v5 + 96) = v8;
  }
  if (*(_DWORD *)(*(void *)(a1 + 104) + 1928) == 1) {
    Unicorn_CostListBlock_Set(*(void *)(a1 + 136), *(void *)(a1 + 128));
  }
  return 0;
}

uint64_t UnicornSearch_Process(uint64_t a1)
{
  if (*(int *)(a1 + 88) < 1) {
    return 0;
  }
  unsigned int v2 = 0;
  while (1)
  {
    UnicornSearch_Set(a1, v2);
    uint64_t result = UnicornSearch_ProcessOne(a1, v3);
    if ((result & 0x80000000) != 0) {
      break;
    }
    if ((signed int)++v2 >= *(_DWORD *)(a1 + 88)) {
      return 0;
    }
  }
  return result;
}

uint64_t UnicornSearch_ProcessOne(uint64_t a1, __n128 a2)
{
  int v3 = *(_DWORD *)(a1 + 96);
  if ((v3 - 1) <= 0xFFFFFFFC)
  {
    uint64_t v4 = 0;
    int v5 = v3 * *(_DWORD *)(a1 + 92);
    unint64_t v6 = 2;
    while (1)
    {
      if (*(unsigned char *)(a1 + 345) == 1)
      {
        if (!*(unsigned char *)(a1 + 156) || v6 == 3 && v3 == 3) {
          goto LABEL_18;
        }
        if (v6 == 2)
        {
          long long v7 = (unsigned char *)(a1 + 344);
          if (!*(_DWORD *)(a1 + 92)) {
            goto LABEL_18;
          }
LABEL_12:
          if (*v7 == 1) {
            goto LABEL_18;
          }
          goto LABEL_13;
        }
        if (v6 == v3 + 1)
        {
          long long v7 = (unsigned char *)(a1 + 346);
          if (*(_DWORD *)(a1 + 92) == *(_DWORD *)(a1 + 88) - 1) {
            goto LABEL_18;
          }
          goto LABEL_12;
        }
      }
LABEL_13:
      unsigned int v8 = v5 + v6 - 2;
      uint64_t v9 = *(void *)(a1 + 120);
      uint64_t v10 = *(uint64_t **)(v9 + 1768);
      if (!v10)
      {
        uint64_t v12 = (v5 + v6 - 2);
LABEL_17:
        uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, void, void, void))(*(void *)(a1 + 352) + 8))(a1, 1, v6, a1 + 344, *(void *)(a1 + 128), *(unsigned int *)(*(void *)(*(void *)(a1 + 136) + 16) + 32 * v12 + 16), *(unsigned int *)(*(void *)(a1 + 112) + 5548));
        if ((v4 & 0x80000000) != 0) {
          return v4;
        }
        goto LABEL_18;
      }
      uint64_t v11 = *v10;
      uint64_t v12 = (v5 + v6 - 2);
      if (*(_DWORD *)(v11 + 48 * v8)) {
        goto LABEL_17;
      }
      UNICORN__mfs_CostList_Add(0.0, *(void *)(a1 + 104), (void *)(v9 + 1088), v8, *(_DWORD *)(*(void *)(v11 + 48 * v12 + 8)+ 4 * (*(_DWORD *)(v11 + 48 * v12 + 24) - 1)));
LABEL_18:
      ++v6;
      int v3 = *(_DWORD *)(a1 + 96);
      unint64_t v13 = (v3 + 2);
      if (v6 >= v13)
      {
        if (v13 >= 3)
        {
          uint64_t v14 = *(void *)(a1 + 120);
          uint64_t v15 = *(void **)(v14 + 1768);
          uint64_t v16 = 2;
          a2.n128_u32[0] = 1167867904;
          do
          {
            if (v15)
            {
              uint64_t v17 = (v5 - 2 + v16);
              if (*(_DWORD *)(*v15 + 48 * v17) == 1)
              {
                uint64_t v18 = *(void *)(v14 + 1104) + 32 * v17;
                uint64_t v19 = *(unsigned int *)(v18 + 16);
                if (v19)
                {
                  uint64_t v20 = 0;
                  uint64_t v21 = *v15 + 48 * v17;
                  uint64_t v22 = *(unsigned int *)(v21 + 24);
                  uint64_t v23 = (int **)(v21 + 8);
                  do
                  {
                    if (v22)
                    {
                      uint64_t v24 = (_DWORD *)(*(void *)v18 + 12 * v20);
                      int v27 = *v24;
                      uint64_t v25 = (float *)(v24 + 1);
                      int v26 = v27;
                      unsigned int v28 = *v23;
                      uint64_t v29 = v22;
                      do
                      {
                        int v30 = *v28++;
                        if (v26 == v30) {
                          *uint64_t v25 = *v25 + 5000.0;
                        }
                        --v29;
                      }
                      while (v29);
                    }
                    ++v20;
                  }
                  while (v20 != v19);
                }
              }
            }
            ++v16;
          }
          while (v16 != v13);
        }
        goto LABEL_34;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_34:
  if ((v3 - 1) <= 0xFFFFFFFC)
  {
    uint64_t v31 = 2;
    do
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)(a1 + 368) + 8))(a1, v31, a2);
      if ((v4 & 0x80000000) != 0) {
        break;
      }
      uint64_t v31 = (v31 + 1);
    }
    while (v31 < *(_DWORD *)(a1 + 96) + 2);
  }
  return v4;
}

uint64_t UnicornSearch_Reset()
{
  return 0;
}

uint64_t UnicornSearch_Close(uint64_t a1)
{
  UNICORN__mfs_TCost_Clear(a1 + 176);
  uint64_t v2 = *(void *)(a1 + 144);
  if (v2)
  {
    heap_Free(*(void **)(*(void *)(a1 + 56) + 8), v2);
    *(void *)(a1 + 144) = 0;
  }
  return 0;
}

uint64_t UnicornSearch_SetSIMDCallback(uint64_t *a1, int a2)
{
  if (!*(_DWORD *)(a1[14] + 6728))
  {
    if (a2)
    {
      a1[48] = (uint64_t)mfs_bnfData_Clusterize_Block_Distance_fxd16_SIMD;
      uint64_t v9 = mfs_bnfData_Distance_Unit_ID_fxd16_SIMD;
    }
    else
    {
      a1[48] = (uint64_t)mfs_bnfData_Clusterize_Block_Distance_fxd16;
      uint64_t v9 = mfs_bnfData_Distance_Unit_ID_fxd16;
    }
    goto LABEL_11;
  }
  if (!a2)
  {
LABEL_13:
    a1[49] = (uint64_t)mfs_bnfData_Distance_Unit_ID_RandomProjection;
    a1[48] = (uint64_t)mfs_bnfData_Clusterize_Block_Distance_RandomProjection;
    goto LABEL_14;
  }
  HIDWORD(v4) = *(unsigned __int8 *)(a1[13] + 1520);
  LODWORD(v4) = (HIDWORD(v4) << 24) - 0x8000000;
  unsigned int v5 = (v4 >> 27);
  BOOL v6 = v5 > 7;
  int v7 = (1 << v5) & 0xAB;
  if (v6 || v7 == 0)
  {
    UNICORN__log_select_Diag(a1[7], 1, (uint64_t)"WARNING : SIMD Random Projection Search only available for BNF size of16/32/48/64 Bytes, current size %d;"
               " fallback to ANSIC implementation. \n");
    goto LABEL_13;
  }
  a1[48] = (uint64_t)mfs_bnfData_Clusterize_Block_Distance_RandomProjection_SIMD;
  uint64_t v9 = mfs_bnfData_Distance_Unit_ID_RandomProjection_SIMD;
LABEL_11:
  a1[49] = (uint64_t)v9;
LABEL_14:
  mfs_TCost_EnableSIMD((uint64_t)(a1 + 22), a2);
  return 0;
}

void *UnicornSearch_Destroy(uint64_t *a1)
{
  UNICORN__log_select_Diag(a1[7], 10, (uint64_t)"+Destroy\n");
  heap_Free(*(void **)(a1[7] + 8), a1[44]);
  a1[44] = 0;
  heap_Free(*(void **)(a1[7] + 8), a1[46]);
  a1[46] = 0;
  UNICORN__log_select_Diag(a1[7], 10, (uint64_t)"--Destroy\n");
  uint64_t v2 = *(void **)(a1[7] + 8);
  return heap_Free(v2, (uint64_t)a1);
}

uint64_t UnicornSearch_StageTwo_Default(uint64_t a1, uint64_t a2)
{
  v54[1] = *MEMORY[0x263EF8340];
  unsigned int v3 = a2 + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 92);
  uint64_t v4 = v3 - 2;
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 120);
  float v7 = *(float *)(*(void *)(v5 + 1352) + 4 * v4);
  v54[0] = 0;
  if (*(_DWORD *)(v6 + 5992) != 1)
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 56), 1, (uint64_t)"CONFIG ERROR : Search is not implemented for Phoneme Substate Modeling\n");
    return 2229280768;
  }
  uint64_t v46 = a1 + 176;
  uint64_t updated = UNICORN__mfs_TCost_SetTarget(a1 + 176, *(void *)(a1 + 104), v5, *(void **)(a1 + 128), a2);
  if ((updated & 0x80000000) == 0)
  {
    if (*(float *)(*(void *)(a1 + 112) + 6704) == 0.0
      || (uint64_t updated = mfs_UpdateTargetQuantizedTrajectory_LF0(*(void *)(a1 + 104), *(void *)(a1 + 120), v46),
          (updated & 0x80000000) == 0))
    {
      uint64_t v10 = *(void *)(a1 + 336);
      if (v10)
      {
        LODWORD(v54[0]) = *(_DWORD *)(v10 + 4 * (2 * v4));
        HIDWORD(v54[0]) = *(_DWORD *)(v10 + 4 * ((2 * v4) | 1u));
      }
      if (!*(unsigned char *)(a1 + 156) && *(unsigned char *)(a1 + 345) == 1)
      {
        uint64_t v11 = *(void *)(a1 + 136);
        LODWORD(v12) = *(_DWORD *)(*(void *)(v11 + 16) + 32 * v4 + 16);
LABEL_69:
        unsigned int v42 = *(_DWORD *)(*(void *)(a1 + 112) + 5564);
        if (v12 > v42)
        {
          uint64_t updated = mfs_CostList_Select(v11, v4, 1, v42);
          UNICORN__mfs_CostList_Prune(*(void **)(a1 + 136), v4, *(_DWORD *)(*(void *)(a1 + 112) + 5564));
        }
        goto LABEL_71;
      }
      uint64_t IndexPtr_LH_F32 = (float *)VectBlock_Get_IndexPtr_LH_F32(*(void *)(a1 + 120) + 1848, v3 - 2);
      int v13 = *(_DWORD *)(*(void *)(a1 + 112) + 6752);
      if (v13 < 1)
      {
        unsigned int v48 = 0;
      }
      else
      {
        if (v3 - 1 >= *(_DWORD *)(a1 + 100))
        {
          unsigned int v48 = 0;
        }
        else
        {
          unsigned int v48 = (float *)VectBlock_Get_IndexPtr_LH_F32(*(void *)(a1 + 120) + 1848, v3 - 1);
          int v13 = *(_DWORD *)(*(void *)(a1 + 112) + 6752);
        }
        if (v13 >= 2 && v3 < *(_DWORD *)(a1 + 100))
        {
          uint64_t v47 = (float *)VectBlock_Get_IndexPtr_LH_F32(*(void *)(a1 + 120) + 1848, v3);
          if (v3 == 2)
          {
LABEL_19:
            uint64_t v14 = 0;
            goto LABEL_27;
          }
LABEL_21:
          if (*(int *)(*(void *)(a1 + 112) + 6752) < 1) {
            uint64_t v14 = 0;
          }
          else {
            uint64_t v14 = (float *)VectBlock_Get_IndexPtr_LH_F32(*(void *)(a1 + 120) + 1848, v3 - 3);
          }
          if (v4 >= 2 && *(int *)(*(void *)(a1 + 112) + 6752) >= 2)
          {
            uint64_t v15 = (float *)VectBlock_Get_IndexPtr_LH_F32(*(void *)(a1 + 120) + 1848, v3 - 4);
LABEL_28:
            uint64_t v16 = *(void *)(a1 + 136);
            uint64_t v18 = *(void *)(v16 + 16);
            uint64_t v17 = (void *)(v16 + 16);
            if (!*(_DWORD *)(v18 + 32 * v4 + 16))
            {
LABEL_71:
              UNICORN__log_select_Diag(*(void *)(a1 + 56), 11, (uint64_t)"costlist(%d)\n");
              return updated;
            }
            uint64_t v19 = 0;
            unint64_t v20 = 0;
            float v21 = 1.0 - v7;
            BOOL v23 = (float)(1.0 - v7) > 0.0 && IndexPtr_LH_F32 != 0;
            BOOL v45 = v23;
            while (1)
            {
              uint64_t v51 = 0;
              memset(v50, 0, sizeof(v50));
              int v24 = *(unsigned char *)(a1 + 164) == 1 ? *(_DWORD *)(a1 + 280) : 0;
              unsigned int v25 = *(_DWORD *)(*(void *)(*v17 + 32 * v4) + v19);
              int v49 = v24;
              UNICORN__mfs_Stub_ParamMap_GetAcousticVector(*(void *)(a1 + 56), *(void *)(a1 + 104), *(void *)(a1 + 120), v25, (uint64_t)v50, &v49, 0.0);
              uint64_t updated = v27;
              if ((v27 & 0x80000000) != 0) {
                return updated;
              }
              uint64_t v28 = *(void *)(a1 + 112);
              unsigned int v29 = *(unsigned __int8 *)(a1 + 164);
              if (*(void *)(a1 + 336)) {
                mfs_TCost_BNFCandidateCostStreamElf0(v46, v28, (uint64_t)v50, v49, &v52, v29, (float *)v54, *(_DWORD *)(a1 + 168), v26);
              }
              else {
                mfs_TCost_BNFCandidateCostStream(v46, v28, (uint64_t)v50, v49, &v52, v29, *(_DWORD *)(a1 + 168));
              }
              if (*(unsigned char *)(a1 + 164))
              {
                float v30 = *(float *)(a1 + 180) * *(float *)(a1 + 292);
                float v52 = v30
                    * UNICORN__CandidatePhonemeDurationDistanceBasic(*(void *)(a1 + 104), v25, a2, *(_DWORD *)(*(void *)(a1 + 128) + 24));
              }
              UNICORN__mfs_ParamMap_UnMapSection(*(void *)(a1 + 120));
              float v31 = 0.0;
              if (v45)
              {
                uint64_t v32 = *(void *)(a1 + 112);
                if (*(_DWORD *)(v32 + 6140))
                {
                  float v33 = *(float *)(*(void *)(*(void *)(*(void *)(a1 + 136) + 16) + 32 * v4) + v19 + 4);
                }
                else
                {
                  float v33 = mfs_bnfData_Distance(*(void *)(a1 + 104), IndexPtr_LH_F32, v25);
                  uint64_t v32 = *(void *)(a1 + 112);
                }
                float v31 = v33 * tblBNFContextWeights[5 * *(int *)(v32 + 6752)];
              }
              if (v14 && v25 && v21 > 0.0)
              {
                float v34 = tblBNFContextWeights[5 * *(int *)(*(void *)(a1 + 112) + 6752) + 1];
                float v31 = v31 + (float)(v34 * mfs_bnfData_Distance(*(void *)(a1 + 104), v14, v25 - 1));
              }
              if (v15 && v25 >= 2 && v21 > 0.0)
              {
                float v35 = tblBNFContextWeights[5 * *(int *)(*(void *)(a1 + 112) + 6752) + 3];
                float v31 = v31 + (float)(v35 * mfs_bnfData_Distance(*(void *)(a1 + 104), v15, v25 - 2));
              }
              if (v48)
              {
                uint64_t v36 = *(void *)(a1 + 112);
                if (v25 < *(_DWORD *)(v36 + 11548) - 1 && v21 > 0.0)
                {
                  float v37 = tblBNFContextWeights[5 * *(int *)(v36 + 6752) + 2];
                  float v31 = v31 + (float)(v37 * mfs_bnfData_Distance(*(void *)(a1 + 104), v48, v25 + 1));
                }
              }
              if (v47)
              {
                uint64_t v38 = *(void *)(a1 + 112);
                if (v25 < *(_DWORD *)(v38 + 11548) - 2 && v21 > 0.0)
                {
                  float v39 = tblBNFContextWeights[5 * *(int *)(v38 + 6752) + 4];
                  float v31 = v31 + (float)(v39 * mfs_bnfData_Distance(*(void *)(a1 + 104), v47, v25 + 2));
                }
              }
              float v40 = v53;
              if (*(unsigned char *)(a1 + 345) == 1)
              {
                float v40 = v53 * 0.01;
                float v53 = v53 * 0.01;
              }
              float v41 = (float)(v7 * v40) + (float)(v21 * v31);
              UNICORN__log_select_Diag(*(void *)(a1 + 56), 11, (uint64_t)"%f = BNF(%f) LF0(%f) DUR(%f)\n");
              UNICORN__mfs_CostList_UpdateCost(*(void *)(a1 + 136), v4, v20++, v41);
              uint64_t v11 = *(void *)(a1 + 136);
              uint64_t v17 = (void *)(v11 + 16);
              unint64_t v12 = *(unsigned int *)(*(void *)(v11 + 16) + 32 * v4 + 16);
              v19 += 12;
              if (v20 >= v12) {
                goto LABEL_69;
              }
            }
          }
LABEL_27:
          uint64_t v15 = 0;
          goto LABEL_28;
        }
      }
      uint64_t v47 = 0;
      if (v3 == 2) {
        goto LABEL_19;
      }
      goto LABEL_21;
    }
  }
  return updated;
}

uint64_t select_bet5_deserializeFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = 0;
  int v11 = 0;
  unsigned int v12 = 0;
  uint64_t v13 = *a5;
  __src = 0;
  unsigned int v52 = 0;
  uint64_t v14 = v13 + 2748;
  do
  {
    int v15 = *(unsigned __int8 *)(v14 + v10);
    if (*(unsigned char *)(v14 + v10))
    {
      if (v15 == 2)
      {
        v12 += 2;
      }
      else if (v15 == 1)
      {
        ++v12;
        ++v11;
      }
      else if ((unsigned __int16)v10 - 53 <= 1)
      {
        v12 += 4 * *(unsigned __int16 *)(v13 + 3360);
      }
    }
    ++v10;
  }
  while (v10 != 218);
  uint64_t v16 = *(void **)(v13 + 3336);
  if (v16 && *v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = v16 + 1;
    while (v18[v17++])
      ;
    v12 += v17;
  }
  else
  {
    LODWORD(v17) = 0;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void **, unsigned int *))(a2 + 88))(a3, a4, &__src, &v52);
  if ((v20 & 0x80000000) != 0) {
    return v20;
  }
  if (!v12) {
    return 21;
  }
  int v21 = v52 / v12;
  if (v52 % v12) {
    return 21;
  }
  *((_WORD *)a5 + 5) = v21;
  uint64_t v51 = a1;
  uint64_t v23 = heap_Calloc(*(void **)(a1 + 8), (unsigned __int16)v21 * v11, 1);
  if (!v23) {
    return 2229280778;
  }
  int v24 = (char *)v23;
  unsigned int v47 = v20;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v25 = 0;
  float v26 = (char *)__src;
  uint64_t v27 = v13 + 2748;
  do
  {
    int v28 = *(unsigned __int8 *)(v27 + v25);
    if (!*(unsigned char *)(v27 + v25)) {
      goto LABEL_36;
    }
    if (v28 == 2)
    {
      uint64_t v30 = *((unsigned __int16 *)a5 + 5);
      float v31 = (void *)heap_Calloc(*(void **)(v51 + 8), v30, 2);
      a5[v25 + 220] = (uint64_t)v31;
      if (!v31) {
        return 2229280778;
      }
      memcpy(v31, v26, 2 * v30);
      v26 += 2 * v30;
    }
    else
    {
      if (v28 == 1)
      {
        size_t v29 = *((unsigned __int16 *)a5 + 5);
        a5[v25 + 2] = (uint64_t)v24;
        memcpy(v24, v26, v29);
        v24 += v29;
      }
      else
      {
        if ((unsigned __int16)v25 - 53 > 1) {
          goto LABEL_36;
        }
        if (v25 == 53) {
          uint64_t v32 = 448;
        }
        else {
          uint64_t v32 = 449;
        }
        int v33 = *(unsigned __int16 *)(v13 + 3360) * *((unsigned __int16 *)a5 + 5);
        float v34 = (void *)heap_Calloc(*(void **)(v51 + 8), *(unsigned __int16 *)(v13 + 3360) * (unint64_t)*((unsigned __int16 *)a5 + 5), 4);
        a5[v32] = (uint64_t)v34;
        if (!v34) {
          return 2229280778;
        }
        size_t v29 = (4 * v33);
        memcpy(v34, v26, v29);
      }
      v26 += v29;
    }
LABEL_36:
    ++v25;
  }
  while (v25 != 218);
  if (!v17) {
    goto LABEL_51;
  }
  uint64_t v35 = heap_Calloc(*(void **)(v51 + 8), v17 * *((unsigned __int16 *)a5 + 5), 1);
  if (!v35) {
    return 2229280778;
  }
  uint64_t v36 = v35;
  uint64_t v37 = heap_Calloc(*(void **)(v51 + 8), v17, 8);
  a5[438] = v37;
  uint64_t v20 = 2229280778;
  if (v37)
  {
    unsigned __int16 v38 = 0;
    float v39 = "INNO_";
    do
    {
      size_t v40 = *((unsigned __int16 *)a5 + 5);
      uint64_t v41 = v38;
      *(void *)(a5[438] + 8 * v38) = v36;
      memcpy(*(void **)(a5[438] + 8 * v38), v26, v40);
      if (!strncmp(*(const char **)(*(void *)(v13 + 3336) + 8 * v41), v39, 5uLL))
      {
        unsigned int v43 = atoi((const char *)(*(void *)(*(void *)(*a5 + 3336) + 8 * v41) + 5)) + 79;
        if (v43 <= 0x5E) {
          a5[v43 + 2] = *(void *)(a5[438] + 8 * v41);
        }
      }
      else
      {
        unsigned int Index = usextract_getIndex(*(const char ***)(*(void *)(v13 + 3344) + 8 * v41), "FEATIDX", (unint64_t)"");
        if (Index == -1)
        {
          int v44 = v39;
          BOOL v45 = *(const char **)(*(void *)(*a5 + 3336) + 8 * v41);
          if (!strcmp(v45, "POS"))
          {
            a5[63] = *(void *)(a5[438] + 8 * v41);
            float v39 = v44;
          }
          else
          {
            int v46 = strcmp(v45, "PHR");
            float v39 = v44;
            if (!v46) {
              a5[64] = *(void *)(a5[438] + 8 * v41);
            }
          }
        }
        else
        {
          a5[*(unsigned __int8 *)(*(void *)(*(void *)(*a5 + 3352) + 8 * v41) + Index) + 2] = *(void *)(a5[438] + 8 * v41);
        }
      }
      v26 += v40;
      v36 += v40;
      unsigned __int16 v38 = v41 + 1;
    }
    while (v17 > (unsigned __int16)(v41 + 1));
LABEL_51:
    (*(void (**)(uint64_t, uint64_t, void))(v48 + 96))(v49, v50, v12 * *((unsigned __int16 *)a5 + 5));
    return v47;
  }
  return v20;
}

void *select_bet5_deserializeFeatures_Free(void *result, void *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = 0;
  int v6 = 0;
  float v7 = a2;
  do
  {
    int v8 = *(unsigned __int8 *)(v2 + 2748 + v5);
    if (v8 == 2)
    {
      uint64_t v9 = v7[220];
      if (!v9) {
        goto LABEL_11;
      }
      uint64_t v10 = &a2[v5 + 220];
LABEL_10:
      uint64_t result = heap_Free((void *)v4[1], v9);
      void *v10 = 0;
      goto LABEL_11;
    }
    if (v8 != 1) {
      goto LABEL_11;
    }
    if (v6)
    {
      int v6 = 1;
      goto LABEL_11;
    }
    uint64_t v10 = v7 + 2;
    uint64_t v9 = v7[2];
    int v6 = 1;
    if (v9) {
      goto LABEL_10;
    }
LABEL_11:
    ++v5;
    ++v7;
  }
  while (v5 != 218);
  uint64_t v11 = a2[448];
  if (v11)
  {
    uint64_t result = heap_Free((void *)v4[1], v11);
    a2[448] = 0;
  }
  uint64_t v12 = a2[449];
  if (v12)
  {
    uint64_t result = heap_Free((void *)v4[1], v12);
    a2[449] = 0;
  }
  uint64_t v13 = *(void **)(v2 + 3336);
  if (v13)
  {
    if (*v13)
    {
      uint64_t v14 = (uint64_t *)a2[438];
      if (v14)
      {
        if (*v14)
        {
          heap_Free((void *)v4[1], *v14);
          *(void *)a2[438] = 0;
          uint64_t v14 = (uint64_t *)a2[438];
        }
        uint64_t result = heap_Free((void *)v4[1], (uint64_t)v14);
        a2[438] = 0;
      }
    }
  }
  return result;
}

uint64_t precomp_getGranularStep(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1080);
}

uint64_t precomp_Init(uint64_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = 2229280774;
  if (!a2) {
    return v4;
  }
  if (!a3) {
    return v4;
  }
  if (!a4) {
    return v4;
  }
  uint64_t v4 = 2229280778;
  uint64_t v9 = heap_Calloc(*(void **)(*(void *)(a2 + 1072) + 8), 1, 1120);
  *a1 = v9;
  if (!v9) {
    return v4;
  }
  uint64_t v10 = v9;
  int v11 = 100000;
  uint64_t v12 = *(void *)(a2 + 1072);
  *(void *)uint64_t v9 = v12;
  *(void *)(v9 + 8) = a4;
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = a4;
  *(void *)(v9 + 40) = a3;
  *(void *)(v9 + 48) = a4;
  *(void *)(v9 + 56) = a3;
  *(void *)(v9 + 1104) = -1;
  *(void *)(v9 + 64) = *(void *)(a2 + 1776);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(a2 + 1784);
  *(_DWORD *)(v9 + 1056) = 0;
  *(_DWORD *)(v9 + 1080) = 1;
  *(void *)(v9 + 1048) = 0;
  *(_OWORD *)(v9 + 1016) = 0u;
  *(_OWORD *)(v9 + 1032) = 0u;
  *(_OWORD *)(v9 + 1000) = 0u;
  *(_DWORD *)(v9 + 1076) = a3[2887];
  uint64_t v13 = *(void *)(a2 + 1912);
  if (v13)
  {
    int v14 = a3[1667];
    LODWORD(v13) = v14 < 100000;
    if (v14 >= 100000) {
      int v11 = 100000;
    }
    else {
      int v11 = a3[1667];
    }
  }
  *(_DWORD *)(v9 + 1068) = v13;
  *(_DWORD *)(v9 + 1060) = v11;
  *(_DWORD *)(v9 + 1064) = *(void *)(a4 + 1920) != 0;
  *(_DWORD *)(v9 + 1072) = *(void *)(a4 + 1912) != 0;
  *(_DWORD *)(v9 + 1084) = a3[1681];
  *(_DWORD *)(v9 + 1088) = a3[1679];
  *(_DWORD *)(v9 + 960) = 1;
  unsigned int v15 = *(_DWORD *)(a4 + 1652) | (*(_DWORD *)(a4 + 1652) >> 1);
  unsigned int v16 = v15 | (v15 >> 2) | ((v15 | (v15 >> 2)) >> 4);
  *(_DWORD *)(v9 + 964) = tab32[(130329821 * (v16 | (v16 >> 8) | ((v16 | (v16 >> 8)) >> 16))) >> 27] + 1;
  unsigned int v17 = *(_DWORD *)(a4 + 2436) | (*(_DWORD *)(a4 + 2436) >> 1);
  unsigned int v18 = v17 | (v17 >> 2) | ((v17 | (v17 >> 2)) >> 4);
  *(_DWORD *)(v9 + 968) = tab32[(130329821 * (v18 | (v18 >> 8) | ((v18 | (v18 >> 8)) >> 16))) >> 27] + 1;
  *(_OWORD *)(v9 + 976) = 0uLL;
  uint64_t v19 = *(uint64_t **)(v12 + 8);
  *(void *)(v10 + 992) = v19;
  int v20 = a3[1391];
  *(_DWORD *)(v10 + 988) = v20;
  *(_DWORD *)(v10 + 984) = v20;
  uint64_t v21 = heap_Realloc(v19, 0, (8 * v20));
  *(void *)(v10 + 976) = v21;
  if (!v21) {
    return v4;
  }
  unsigned int v22 = *(_DWORD *)(*(void *)(v10 + 16) + 5564);
  return precomp_AllocPreFetchLeftNodes(v10, v22);
}

uint64_t precomp_AllocPreFetchLeftNodes(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1056) >= (signed int)a2) {
    return 0;
  }
  uint64_t v4 = 2229280778;
  uint64_t v5 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 1000), 4 * a2);
  *(void *)(a1 + 1000) = v5;
  if (v5)
  {
    uint64_t v6 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 1008), 4 * a2);
    *(void *)(a1 + 1008) = v6;
    if (v6)
    {
      uint64_t v7 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 1016), 4 * a2);
      *(void *)(a1 + 1016) = v7;
      if (v7)
      {
        uint64_t v8 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 1024), 4 * a2);
        *(void *)(a1 + 1024) = v8;
        if (v8)
        {
          uint64_t v9 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 1032), 4 * a2);
          *(void *)(a1 + 1032) = v9;
          if (v9)
          {
            uint64_t v10 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 1040), 4 * a2);
            *(void *)(a1 + 1040) = v10;
            if (v10)
            {
              uint64_t v11 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 1048), 4 * a2);
              *(void *)(a1 + 1048) = v11;
              if (v11)
              {
                uint64_t v4 = 0;
                *(_DWORD *)(a1 + 1056) = a2;
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t precomp_Release(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      uint64_t v3 = *(void *)(v2 + 1000);
      if (v3)
      {
        heap_Free(*(void **)(*(void *)v2 + 8), v3);
        *(void *)(v2 + 1000) = 0;
      }
      uint64_t v4 = *(void *)(v2 + 1008);
      if (v4)
      {
        heap_Free(*(void **)(*(void *)v2 + 8), v4);
        *(void *)(v2 + 1008) = 0;
      }
      uint64_t v5 = *(void *)(v2 + 1016);
      if (v5)
      {
        heap_Free(*(void **)(*(void *)v2 + 8), v5);
        *(void *)(v2 + 1016) = 0;
      }
      uint64_t v6 = *(void *)(v2 + 1024);
      if (v6)
      {
        heap_Free(*(void **)(*(void *)v2 + 8), v6);
        *(void *)(v2 + 1024) = 0;
      }
      uint64_t v7 = *(void *)(v2 + 1032);
      if (v7)
      {
        heap_Free(*(void **)(*(void *)v2 + 8), v7);
        *(void *)(v2 + 1032) = 0;
      }
      uint64_t v8 = *(void *)(v2 + 1040);
      if (v8)
      {
        heap_Free(*(void **)(*(void *)v2 + 8), v8);
        *(void *)(v2 + 1040) = 0;
      }
      uint64_t v9 = *(void *)(v2 + 1048);
      if (v9)
      {
        heap_Free(*(void **)(*(void *)v2 + 8), v9);
        *(void *)(v2 + 1048) = 0;
      }
      *(_DWORD *)(v2 + 1056) = 0;
      if (*(_DWORD *)(v2 + 960))
      {
        uint64_t v10 = *(void *)(v2 + 976);
        if (v10)
        {
          heap_Free(*(void **)(v2 + 992), v10);
          *(void *)(v2 + 976) = 0;
          *(_DWORD *)(v2 + 988) = 0;
        }
      }
      heap_Free(*(void **)(*(void *)v2 + 8), *a1);
      *a1 = 0;
    }
  }
  return 0;
}

uint64_t precomp_SetupLeftRightData(uint64_t a1, unsigned int **a2, int a3)
{
  if (a3)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 48);
    *(void *)(a1 + 88) = *(void *)(a1 + 96);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 1104) = *(_DWORD *)(a1 + 1108);
  }
  uint64_t result = UnicornAddon_UID2AddonId(*(void *)(a1 + 64), *(_DWORD *)(a1 + 72), **a2);
  *(_DWORD *)(a1 + 1108) = result;
  if (result == -1)
  {
    int v8 = 0;
    uint64_t v7 = (uint64_t *)(a1 + 8);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 64) + 48 * (int)result;
    uint64_t v7 = (uint64_t *)(v6 + 16);
    int v8 = *(_DWORD *)(v6 + 24);
  }
  uint64_t v9 = *v7;
  uint64_t v10 = *(void *)(v9 + 2416);
  uint64_t v11 = *(void *)(v9 + 568);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 96) = v10;
  *(_DWORD *)(a1 + 80) = v8;
  if (a3)
  {
    int v12 = *(_DWORD *)(a1 + 1104);
    if (v12 == -1)
    {
      if (result != -1)
      {
        uint64_t v13 = (uint64_t *)(*(void *)(a1 + 64) + 48 * (int)result + 40);
        goto LABEL_12;
      }
    }
    else if (result == -1)
    {
      uint64_t v13 = (uint64_t *)(*(void *)(a1 + 64) + 48 * v12 + 32);
LABEL_12:
      uint64_t v14 = *v13;
LABEL_14:
      *(void *)(a1 + 104) = v14;
      return result;
    }
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  return result;
}

uint64_t precomp_SetLayer(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 1068);
  if (v2) {
    int v2 = *(_DWORD *)(*(void *)(*(void *)(result + 24) + 1912) + 4 * a2);
  }
  *(_DWORD *)(result + 112) = v2;
  uint64_t v3 = *(void *)(result + 32);
  if (v3 == *(void *)(result + 8) && *(void *)(result + 48) == v3)
  {
    *(_DWORD *)(result + 1064) = *(void *)(v3 + 1920) != 0;
    uint64_t v12 = *(void *)(v3 + 1912);
    *(_DWORD *)(result + 1072) = v12 != 0;
    uint64_t v13 = *(void *)(result + 40);
    *(_DWORD *)(result + 1084) = *(_DWORD *)(v13 + 6724);
    *(_DWORD *)(result + 1088) = *(_DWORD *)(v13 + 6716);
    if (v12) {
      return result;
    }
  }
  else
  {
    *(_DWORD *)(result + 1064) = 0;
    *(_DWORD *)(result + 1072) = 0;
    uint64_t v4 = *(void *)(result + 40);
    *(_DWORD *)(result + 1084) = *(_DWORD *)(v4 + 6724);
    *(_DWORD *)(result + 1088) = *(_DWORD *)(v4 + 6716);
  }
  uint64_t v5 = *(void *)(result + 24);
  uint64_t v6 = *(void *)(v5 + 1328);
  uint64_t v7 = *(void *)(v5 + 1336);
  int v8 = *(float **)(v6 + 8 * a2);
  uint64_t v9 = -64;
  do
  {
    uint64_t v10 = (float *)(result + 832 + v9);
    *(v10 - 32) = *(float *)(v7 + 4 * a2) * *v8;
    float v11 = *(float *)(v7 + 4 * a2) * v8[2];
    *(v10 - 16) = v11;
    float *v10 = *(float *)(v7 + 4 * a2) * v8[1];
    v10[16] = v11 * 1000.0;
    v9 += 4;
  }
  while (v9);
  return result;
}

uint64_t precomp_FetchRightNode(uint64_t result, int a2, int *a3, int *a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(void *)(result + 32);
    uint64_t v6 = *(float **)(result + 40);
    uint64_t v7 = *(void *)(v5 + 1640);
    int v8 = *(_DWORD *)(v5 + 1652);
    float v9 = v6[1504];
    float v10 = v6[1509];
    float v11 = v6[1514];
    uint64_t v12 = *(void *)(result + 56);
    float v13 = *(float *)(v12 + 6016);
    float v14 = *(float *)(v12 + 6056);
    uint64_t v15 = a5;
    uint64_t v16 = result + 448;
    unsigned int v17 = (void *)(result + 256);
    uint64_t v18 = *(void *)(result + 96);
    do
    {
      int v20 = *a3++;
      int v19 = v20;
      if (v20 == *(_DWORD *)(result + 1076)) {
        int v19 = 0;
      }
      int v21 = *a4++;
      unsigned int v22 = (unsigned __int16 *)(v18 + 24 * v21);
      *(_DWORD *)(v16 + 128) = *((_DWORD *)v22 + 1);
      unsigned int v23 = *v22;
      *(_DWORD *)(v16 - 64) = v23;
      unsigned int v24 = v22[6];
      *(_DWORD *)uint64_t v16 = v24;
      if (*(_DWORD *)(result + 1104) != *(_DWORD *)(result + 1108))
      {
        if (*(_DWORD *)(result + 1084)) {
          uint64_t v25 = 2436;
        }
        else {
          uint64_t v25 = 2432;
        }
        unsigned int v26 = *(_DWORD *)(v5 + v25) - 1;
        float v27 = v13 + (float)((float)v23 / v14);
        if (v27 < v9) {
          float v27 = v9;
        }
        if (v27 > v10) {
          float v27 = v10;
        }
        unsigned int v23 = (float)(v11 * (float)(v27 - v9));
        if (v26 < v23) {
          unsigned int v23 = v26;
        }
        *(_DWORD *)(v16 - 64) = v23;
        uint64_t v28 = *(void *)(result + 104);
        if (v28)
        {
          unsigned int v24 = *(_DWORD *)(v28 + 4 * v24);
          *(_DWORD *)uint64_t v16 = v24;
        }
      }
      if (!*(_DWORD *)(result + 1084))
      {
        *unsigned int v17 = v7 + 4 * v24 * v8;
        *(v17 - 16) = *(void *)(v5 + 2424)
                    + ((unint64_t)(*(_DWORD *)(v5 + 2436) * v23) << (2 * (*(_DWORD *)(result + 1088) == 0)));
      }
      if (*(_DWORD *)(result + 1064)) {
        int v29 = *(_DWORD *)(*(void *)(*(void *)(result + 48) + 1920) + 4 * v19);
      }
      else {
        int v29 = 0;
      }
      *(_DWORD *)(v16 + 64) = v29;
      if (*(_DWORD *)(result + 1072))
      {
        uint64_t v30 = *(void *)(*(void *)(result + 48) + 1912);
        if (v30) {
          float v31 = *(float *)(v30 + 4 * v19);
        }
        else {
          float v31 = 1.0;
        }
        float v32 = (float)((float)(v31 * 0.5) + 0.5) * *(float *)(*(void *)(result + 16) + 5516);
        int v33 = *(float **)(*(void *)(*(void *)(result + 24) + 1328) + 8 * a2);
        *(float *)(v16 + 192) = v32 * *v33;
        float v34 = v32 * v33[2];
        *(float *)(v16 + 256) = v34;
        *(float *)(v16 + 320) = v32 * v33[1];
        *(float *)(v16 + 384) = v34 * 1000.0;
      }
      v16 += 4;
      ++v17;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t precomp_FetchLeftNodes(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = a3[3];
  if ((int)v5 > *(_DWORD *)(result + 1056)) {
    uint64_t result = precomp_AllocPreFetchLeftNodes(result, a3[3]);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v6 = *(void *)(v4 + 88);
    uint64_t v7 = *(_DWORD **)(v4 + 1000);
    int v8 = *(_DWORD **)(v4 + 1008);
    float v9 = *(_DWORD **)(v4 + 1016);
    float v10 = *(_DWORD **)(v4 + 1024);
    float v11 = *(_DWORD **)(v4 + 1032);
    uint64_t v12 = *(float **)(v4 + 1048);
    float v13 = *(float **)(v4 + 1040);
    float v14 = (int *)(*(void *)a3 + 4);
    do
    {
      int v15 = *(_DWORD *)(v4 + 1076);
      uint64_t result = *(v14 - 1);
      uint64_t v16 = v6 + 24 * *v14;
      *uint64_t v7 = *(unsigned __int16 *)(v16 + 14);
      *int v8 = *(unsigned __int16 *)(v16 + 2);
      *float v9 = *(_DWORD *)(v16 + 8);
      _DWORD *v10 = *(_DWORD *)(v16 + 16);
      *float v11 = *(_DWORD *)(v16 + 20);
      *uint64_t v12 = 0.0;
      *float v13 = 0.0;
      if (*(_DWORD *)(v4 + 1064))
      {
        if ((int)result >= v15) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = result;
        }
        uint64_t v17 = *(void *)(v4 + 40);
        float v18 = *(float *)(*(void *)(*(void *)(v4 + 32) + 1920) + 4 * (int)result);
        *float v13 = v18;
        if (v18 <= 0.0) {
          float v19 = 0.0;
        }
        else {
          float v19 = 1.0 / v18;
        }
        *uint64_t v12 = v19 * *(float *)(v17 + 6784);
      }
      v14 += 6;
      ++v13;
      ++v12;
      ++v11;
      ++v10;
      ++v9;
      ++v8;
      ++v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t precomp_SetupJoinCallback(uint64_t result, int a2)
{
  if (!a2 || *(_DWORD *)(result + 1108) != -1) {
    goto LABEL_3;
  }
  int v3 = *(_DWORD *)(result + 1084);
  if (!v3)
  {
    uint64_t v4 = (_OWORD *)(result + 896);
    if (*(_DWORD *)(result + 1064))
    {
      *(void *)&long long v5 = -1;
      *((void *)&v5 + 1) = -1;
      *(_OWORD *)(result + 928) = v5;
      *(_OWORD *)(result + 944) = v5;
      *uint64_t v4 = v5;
      *(_OWORD *)(result + 912) = v5;
      uint64_t v6 = precomp_DoInnerLoop_simd_full_support;
      goto LABEL_17;
    }
LABEL_12:
    v4[2] = 0u;
    v4[3] = 0u;
    *uint64_t v4 = 0u;
    v4[1] = 0u;
    if (*(_DWORD *)(result + 1068))
    {
      if (v3)
      {
        *(void *)(result + 1096) = precomp_DoInnerLoop_T_16R_simd_nosylrate;
        int v2 = 16;
        goto LABEL_4;
      }
      uint64_t v6 = precomp_DoInnerLoop_simd_nosylrate;
    }
    else
    {
      uint64_t v6 = precomp_DoInnerLoop_simd_nosylrate_nopitchdeviation;
    }
LABEL_17:
    *(void *)(result + 1096) = v6;
    int v2 = 4;
    goto LABEL_4;
  }
  if (v3 == 1 && *(_DWORD *)(result + 1068) == 1 && !*(_DWORD *)(result + 1064))
  {
    uint64_t v4 = (_OWORD *)(result + 896);
    goto LABEL_12;
  }
LABEL_3:
  *(void *)(result + 1096) = precomp_DoInnerLoop;
  int v2 = 1;
LABEL_4:
  *(_DWORD *)(result + 1080) = v2;
  return result;
}

uint64_t precomp_DoInnerLoop(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v7 = *(void *)(a1 + 32);
  float v8 = *(float *)(*(void *)(a1 + 40) + 6720);
  int v9 = *(_DWORD *)(*(void *)(a1 + 16) + 6664);
  int v10 = *(_DWORD *)(a1 + 1060);
  uint64_t v11 = *(void *)(v7 + 1640);
  int v12 = *(_DWORD *)(v7 + 1652);
  uint64_t v13 = *a2;
  int v15 = (int *)(*a2 + 24 * a4);
  int v16 = *v15;
  int v40 = v15[1];
  int v41 = v16;
  precomp_FetchRightNode(a1, a5, &v41, &v40, 1);
  uint64_t v17 = *((unsigned int *)a3 + 3);
  if ((int)v17 < 1)
  {
    uint64_t v19 = 0;
    float v22 = 10000000.0;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = *a3;
    uint64_t v21 = 4 * v17;
    float v22 = 10000000.0;
    while (1)
    {
      float v23 = *(float *)(v20 + 12);
      if (v23 > v22) {
        break;
      }
      if (*(_DWORD *)v20 != v16 - 1)
      {
        int v24 = *(_DWORD *)(a1 + 384);
        int v25 = v24 - *(_DWORD *)(*(void *)(a1 + 1008) + v18);
        if (v25 >= 0) {
          int v26 = v24 - *(_DWORD *)(*(void *)(a1 + 1008) + v18);
        }
        else {
          int v26 = *(_DWORD *)(*(void *)(a1 + 1008) + v18) - v24;
        }
        float v27 = 0.0;
        if (v26 >= v9)
        {
          int v28 = *(_DWORD *)(a1 + 112) - v25;
          if (v28 < 0) {
            int v28 = -v28;
          }
          if (v28 <= v10)
          {
            int v30 = *(_DWORD *)(a1 + 1084);
            unsigned int v31 = *(_DWORD *)(*(void *)(a1 + 1032) + v18);
            if (*(_DWORD *)(*(void *)(a1 + 40) + 6716))
            {
              float v32 = (void *)(a1 + 128);
              if (v30)
              {
                unsigned int v31 = v24 + *(_DWORD *)(v7 + 2436) * v31;
                float v32 = (void *)(v7 + 2424);
              }
              LOBYTE(v27) = *(unsigned char *)(*v32 + v31);
              float v29 = *(float *)(*(void *)(a1 + 1024) + v18) + (float)((float)LODWORD(v27) * (float)(v8 / 255.0));
            }
            else
            {
              int v33 = (void *)(a1 + 128);
              if (v30)
              {
                unsigned int v31 = v24 + *(_DWORD *)(v7 + 2436) * v31;
                int v33 = (void *)(v7 + 2424);
              }
              float v29 = *(float *)(*v33 + 4 * v31) + *(float *)(*(void *)(a1 + 1024) + v18);
            }
          }
          else
          {
            float v29 = 1000.0;
          }
          float v27 = v29 * *(float *)(a1 + 704);
        }
        float v34 = v23 + v27;
        if (*(void *)(a1 + 32) == *(void *)(a1 + 48) || *(void *)(a1 + 104))
        {
          if (*(_DWORD *)(a1 + 1084))
          {
            unsigned int v35 = *(_DWORD *)(a1 + 448) + *(_DWORD *)(*(void *)(a1 + 1000) + v18) * v12;
            uint64_t v36 = v11;
          }
          else
          {
            uint64_t v36 = *(void *)(a1 + 256);
            unsigned int v35 = *(_DWORD *)(*(void *)(a1 + 1000) + v18);
          }
          float v34 = v34
              + (float)((float)((float)(*(float *)(v36 + 4 * v35) + *(float *)(*(void *)(a1 + 1016) + v18))
                              + *(float *)(a1 + 576))
                      * *(float *)(a1 + 768));
        }
        float v23 = v34 + *(float *)(a1 + 640);
        if (*(_DWORD *)(a1 + 1064)) {
          float v23 = v23
        }
              + (float)(*(float *)(*(void *)(a1 + 1048) + v18)
                      * vabds_f32(*(float *)(a1 + 512), *(float *)(*(void *)(a1 + 1040) + v18)));
      }
      if (v23 < v22 || v19 == 0)
      {
        uint64_t v19 = v20;
        float v22 = v23;
      }
      v18 += 4;
      v20 += 24;
      if (v21 == v18) {
        goto LABEL_39;
      }
    }
    if (!v19)
    {
      uint64_t v19 = v20;
      float v22 = *(float *)(v20 + 12);
    }
  }
LABEL_39:
  uint64_t v38 = v13 + 24 * a4;
  *(float *)(v38 + 12) = v22 + *(float *)(v38 + 12);
  *(void *)(v38 + 16) = v19;
  if (v19) {
    ++*(_DWORD *)(v19 + 8);
  }
  return 0;
}

uint64_t precomp_DoInnerLoop__AssignZeroPathCosts(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  uint64_t v4 = *((unsigned int *)a3 + 3);
  if ((int)v4 < 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a3;
    do
    {
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v7 = v5;
        if (*(float *)(v6 + 12) > 0.0) {
          break;
        }
      }
      v6 += 24;
      uint64_t v5 = v7;
      --v4;
    }
    while (v4);
  }
  uint64_t v8 = *a2 + 24 * a4;
  *(float *)(v8 + 12) = *(float *)(v8 + 12) + 0.0;
  *(void *)(v8 + 16) = v5;
  if (v5) {
    ++*(_DWORD *)(v5 + 8);
  }
  return 0;
}

uint64_t precomp_RightLayerOptimize(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(_DWORD **)(a2 + 56);
  *(void *)(a2 + 984) = v5;
  if ((v5 & 0x80000000) != 0) {
    *(_DWORD *)(a2 + 988) = v5;
  }
  uint64_t v8 = 2229280778;
  uint64_t v9 = heap_Realloc(*(uint64_t **)(a2 + 992), *(void *)(a2 + 976), (8 * v5));
  *(void *)(a2 + 976) = v9;
  if (v9)
  {
    uint64_t v10 = v9;
    if ((int)v5 >= 40 && *(_DWORD *)(a2 + 960) != 0)
    {
      uint64_t v16 = 0;
      for (int i = 0; ; ++i)
      {
        unsigned int v18 = *(_DWORD *)(*(void *)a1 + v16) - *(_DWORD *)(a2 + 80);
        if (v7[1691])
        {
          if (v7[1496]) {
            unsigned int v18 = *(_DWORD *)(*(void *)(v6 + 848) + 4 * (v18 / v7[1498]))
          }
                + v7[2891] / *(_DWORD *)v6 * (v18 % *(_DWORD *)v6);
          else {
            unsigned int v18 = *(_DWORD *)(*(void *)(v6 + 848) + 4 * (v18 / v7[1498]));
          }
        }
        int v19 = *(_DWORD *)(a2 + 988);
        if (v19 != 0x7FFFFFFF)
        {
          uint64_t v20 = (_WORD *)(*(void *)(a2 + 96) + 24 * v18);
          int v21 = (unsigned __int16)v20[6];
          int v22 = *(_DWORD *)(a2 + 968);
          LOWORD(v2) = *v20;
          if (v19 >= *(_DWORD *)(a2 + 984))
          {
            *(_DWORD *)(a2 + 984) = v19 + 1;
            uint64_t v10 = heap_Realloc(*(uint64_t **)(a2 + 992), v10, (8 * (v19 + 1)));
            *(void *)(a2 + 976) = v10;
            if (!v10) {
              return 2229280778;
            }
          }
          uint64_t v23 = v10 + 8 * *(int *)(a2 + 988);
          *(float *)uint64_t v23 = (float)v2 + (float)(v21 << (v22 + 1));
          *(_DWORD *)(v23 + 4) = i;
          ++*(_DWORD *)(a2 + 988);
        }
        v16 += 12;
        if (12 * v5 == v16)
        {
          ssft_qsort(v10, v5, 8, (uint64_t (*)(unint64_t, unint64_t))compareDiag);
          return 0;
        }
      }
    }
    if ((int)v5 >= 1)
    {
      for (int j = 0; v5 != j; ++j)
      {
        int v13 = *(_DWORD *)(a2 + 988);
        if (v13 != 0x7FFFFFFF)
        {
          if (v13 >= *(_DWORD *)(a2 + 984))
          {
            int v14 = v13 + 1;
            *(_DWORD *)(a2 + 984) = v14;
            uint64_t v10 = heap_Realloc(*(uint64_t **)(a2 + 992), v10, (8 * v14));
            *(void *)(a2 + 976) = v10;
            if (!v10) {
              return v8;
            }
          }
          int v15 = (_DWORD *)(v10 + 8 * *(int *)(a2 + 988));
          *int v15 = 0;
          v15[1] = j;
          ++*(_DWORD *)(a2 + 988);
        }
      }
    }
    return 0;
  }
  return v8;
}

uint64_t compareDiag(float *a1, float *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

uint64_t TransWeights_InitCopy(uint64_t a1, int *a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a2;
  if (*a2 >= 0) {
    int v8 = *a2;
  }
  else {
    int v8 = v7 + 1;
  }
  if ((*(_DWORD *)(a1 + 6800) - 7) >= 5) {
    float v9 = 1.0;
  }
  else {
    float v9 = 2.0;
  }
  uint64_t v10 = BET3FLT__ddcalloc(*(void **)(*(void *)(a3 + 1072) + 8), a4, 4);
  if (!v10) {
    return 2229280778;
  }
  int v12 = v10;
  v11.i32[0] = 1.0;
  if ((*(_DWORD *)(a1 + 6800) - 7) >= 5) {
    *(float *)v11.i32 = (float)(*(float *)(a1 + 5504) + *(float *)(a1 + 5488)) + *(float *)(a1 + 5492);
  }
  if (*(int *)(a3 + 392) >= 1)
  {
    uint64_t v13 = 0;
    LODWORD(v14) = 0;
    int v15 = 0;
    int v16 = v8 >> 1;
    if (v16 <= 2) {
      int v17 = 2;
    }
    else {
      int v17 = v16;
    }
    int v29 = v17 - 1;
    int v30 = v16;
    float32x4_t v31 = (float32x4_t)vdupq_lane_s32(v11, 0);
    do
    {
      uint64_t v18 = *(void *)(a3 + 384);
      if (v15)
      {
        if (v7 >= 2 && v16 < *a2)
        {
          uint64_t v14 = (int)v14;
          do
          {
            *(float *)v12[v14] = UNICORN__mfs_Ling_TransWeightsDiphADJ(*(void **)(a3 + 8), *v15)
                               * *(float *)(*(void *)(a3 + 1360) + 4 * v14);
            *(float *)(v12[v14] + 4) = UNICORN__mfs_Ling_TransWeightsDiphMCP(*(void **)(a3 + 8), *v15)
                                       * *(float *)(a1 + 5488);
            float v19 = UNICORN__mfs_Ling_TransWeightsDiphLF0(*(void **)(a3 + 8), *v15);
            uint64_t v20 = (float32x4_t *)v12[v14];
            v20->f32[2] = v19 * *(float *)(a1 + 5492);
            v20->i32[3] = 0;
            *uint64_t v20 = vdivq_f32(*v20, v31);
            ++v14;
            ++v16;
          }
          while (v16 < *a2);
          int v16 = v30;
        }
        *(float *)v12[(int)v14] = v9
                                * (float)(UNICORN__mfs_Ling_TransWeightsPhonADJ(*(void **)(a3 + 8), *v15)
                                        * *(float *)(*(void *)(a3 + 1360) + 4 * (int)v14));
        *(float *)(v12[(int)v14] + 4) = v9
                                        * (float)(UNICORN__mfs_Ling_TransWeightsPhonMCP(*(void **)(a3 + 8), *v15)
                                                * *(float *)(a1 + 5488));
        float v21 = UNICORN__mfs_Ling_TransWeightsPhonLF0(*(void **)(a3 + 8), *v15);
        int v22 = (float32x4_t *)v12[(int)v14];
        v22->f32[2] = v9 * (float)(v21 * *(float *)(a1 + 5492));
        v22->i32[3] = 0;
        *int v22 = vdivq_f32(*v22, v31);
        LODWORD(v14) = v14 + 1;
        if (v7 >= 4)
        {
          uint64_t v14 = (int)v14;
          int v23 = v29;
          do
          {
            float v24 = v9
                * (float)(UNICORN__mfs_Ling_TransWeightsDiphADJ(*(void **)(a3 + 8), *v15)
                        * *(float *)(*(void *)(a3 + 1360) + 4 * v14));
            int v25 = (float *)v12[v14];
            *int v25 = v24;
            if ((*(_DWORD *)(a1 + 6800) - 7) <= 4 && v15[6] == *a2) {
              *int v25 = v24 + 1.0;
            }
            *(float *)(v12[v14] + 4) = v9
                                       * (float)(UNICORN__mfs_Ling_TransWeightsDiphMCP(*(void **)(a3 + 8), *v15)
                                               * *(float *)(a1 + 5488));
            float v26 = UNICORN__mfs_Ling_TransWeightsDiphLF0(*(void **)(a3 + 8), *v15);
            float v27 = (float32x4_t *)v12[v14];
            v27->f32[2] = v9 * (float)(v26 * *(float *)(a1 + 5492));
            v27->i32[3] = 0;
            *float v27 = vdivq_f32(*v27, v31);
            ++v14;
            --v23;
          }
          while (v23);
          int v16 = v30;
        }
      }
      else
      {
        LODWORD(v14) = v14 + v16;
      }
      int v15 = (int *)(v18 + 312 * v13++);
    }
    while (v13 < *(int *)(a3 + 392));
  }
  uint64_t result = 0;
  *(void *)(a3 + 1328) = v12;
  return result;
}

uint64_t Install_DynamicBeams_Unicorn(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v8 = heap_Calloc(*(void **)(*(void *)(a3 + 1072) + 8), 4 * a4, 4);
  *(void *)(a3 + 1336) = v8;
  if (!v8) {
    return 2229280778;
  }
  *(void *)(a3 + 1344) = v8 + 4 * a4;
  *(void *)(a3 + 1352) = v8 + 8 * a4;
  *(void *)(a3 + 1360) = v8 + 12 * a4;
  if (*(int *)(a3 + 392) >= 1)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(a3 + 384);
      float v12 = *(float *)(a1 + 5516);
      float v13 = *(float *)(a1 + 5524);
      float v14 = *(float *)(a1 + 5504);
      switch(UNICORN__mfs_Ling_WrdPosInPhrs(*(void *)(a3 + 8), v9))
      {
        case 1u:
          if (*(float *)(a1 + 5772) != 0.0) {
            float v13 = *(float *)(a1 + 5772);
          }
          if (*(float *)(a1 + 5620) != 0.0) {
            float v12 = *(float *)(a1 + 5620);
          }
          float v15 = *(float *)(a1 + 5852);
          goto LABEL_30;
        case 2u:
          if (*(float *)(a1 + 5780) != 0.0) {
            float v13 = *(float *)(a1 + 5780);
          }
          if (*(float *)(a1 + 5636) != 0.0) {
            float v12 = *(float *)(a1 + 5636);
          }
          float v15 = *(float *)(a1 + 5860);
          goto LABEL_30;
        case 3u:
          if (*(float *)(a1 + 5776) != 0.0) {
            float v13 = *(float *)(a1 + 5776);
          }
          if (*(float *)(a1 + 5628) != 0.0) {
            float v12 = *(float *)(a1 + 5628);
          }
          float v15 = *(float *)(a1 + 5856);
          goto LABEL_30;
        case 4u:
          if (*(float *)(a1 + 5768) != 0.0) {
            float v13 = *(float *)(a1 + 5768);
          }
          if (*(float *)(a1 + 5612) != 0.0) {
            float v12 = *(float *)(a1 + 5612);
          }
          float v15 = *(float *)(a1 + 5848);
          goto LABEL_30;
        case 5u:
          if (*(float *)(a1 + 5764) != 0.0) {
            float v13 = *(float *)(a1 + 5764);
          }
          if (*(float *)(a1 + 5604) != 0.0) {
            float v12 = *(float *)(a1 + 5604);
          }
          float v15 = *(float *)(a1 + 5844);
LABEL_30:
          if (v15 != 0.0) {
            float v14 = v15;
          }
          break;
        default:
          break;
      }
      switch(UNICORN__mfs_Ling_WrdPosShpInPhrs(*(void *)(a3 + 8), v9))
      {
        case 0u:
          if (*(float *)(a1 + 5784) != 0.0) {
            float v13 = *(float *)(a1 + 5784);
          }
          if (*(float *)(a1 + 5652) != 0.0) {
            float v12 = *(float *)(a1 + 5652);
          }
          float v16 = *(float *)(a1 + 5864);
          goto LABEL_62;
        case 1u:
          if (*(float *)(a1 + 5792) != 0.0) {
            float v13 = *(float *)(a1 + 5792);
          }
          if (*(float *)(a1 + 5660) != 0.0) {
            float v12 = *(float *)(a1 + 5660);
          }
          float v16 = *(float *)(a1 + 5872);
          goto LABEL_62;
        case 2u:
          if (*(float *)(a1 + 5788) != 0.0) {
            float v13 = *(float *)(a1 + 5788);
          }
          if (*(float *)(a1 + 5652) != 0.0) {
            float v12 = *(float *)(a1 + 5652);
          }
          float v16 = *(float *)(a1 + 5868);
          goto LABEL_62;
        case 3u:
          if (*(float *)(a1 + 5796) != 0.0) {
            float v13 = *(float *)(a1 + 5796);
          }
          float v17 = *(float *)(a1 + 5668);
          goto LABEL_59;
        case 4u:
          if (*(float *)(a1 + 5804) != 0.0) {
            float v13 = *(float *)(a1 + 5804);
          }
          if (*(float *)(a1 + 5684) != 0.0) {
            float v12 = *(float *)(a1 + 5684);
          }
          float v16 = *(float *)(a1 + 5884);
          goto LABEL_62;
        case 5u:
          if (*(float *)(a1 + 5800) != 0.0) {
            float v13 = *(float *)(a1 + 5800);
          }
          float v17 = *(float *)(a1 + 5676);
LABEL_59:
          if (v17 != 0.0) {
            float v12 = v17;
          }
          float v16 = *(float *)(a1 + 5876);
LABEL_62:
          if (v16 != 0.0) {
            float v14 = v16;
          }
          break;
        default:
          break;
      }
      switch(UNICORN__mfs_Ling_WrdProminence(*(void *)(a3 + 8), v9))
      {
        case 0u:
          if (*(float *)(a1 + 5808) != 0.0) {
            float v13 = *(float *)(a1 + 5808);
          }
          if (*(float *)(a1 + 5692) != 0.0) {
            float v12 = *(float *)(a1 + 5692);
          }
          float v18 = *(float *)(a1 + 5888);
          goto LABEL_85;
        case 1u:
          if (*(float *)(a1 + 5812) != 0.0) {
            float v13 = *(float *)(a1 + 5812);
          }
          if (*(float *)(a1 + 5700) != 0.0) {
            float v12 = *(float *)(a1 + 5700);
          }
          float v18 = *(float *)(a1 + 5892);
          goto LABEL_85;
        case 2u:
          if (*(float *)(a1 + 5816) != 0.0) {
            float v13 = *(float *)(a1 + 5816);
          }
          if (*(float *)(a1 + 5708) != 0.0) {
            float v12 = *(float *)(a1 + 5708);
          }
          float v18 = *(float *)(a1 + 5896);
          goto LABEL_85;
        case 3u:
          if (*(float *)(a1 + 5820) != 0.0) {
            float v13 = *(float *)(a1 + 5820);
          }
          if (*(float *)(a1 + 5716) != 0.0) {
            float v12 = *(float *)(a1 + 5716);
          }
          float v18 = *(float *)(a1 + 5900);
LABEL_85:
          if (v18 != 0.0) {
            float v14 = v18;
          }
          break;
        default:
          break;
      }
      switch(UNICORN__mfs_Ling_WrdShpProminence(*(void *)(a3 + 8), v9))
      {
        case 0u:
          if (*(float *)(a1 + 5824) != 0.0) {
            float v13 = *(float *)(a1 + 5824);
          }
          if (*(float *)(a1 + 5724) != 0.0) {
            float v12 = *(float *)(a1 + 5724);
          }
          float v19 = *(float *)(a1 + 5904);
          goto LABEL_113;
        case 1u:
          if (*(float *)(a1 + 5828) != 0.0) {
            float v13 = *(float *)(a1 + 5828);
          }
          if (*(float *)(a1 + 5732) != 0.0) {
            float v12 = *(float *)(a1 + 5732);
          }
          float v19 = *(float *)(a1 + 5908);
          goto LABEL_113;
        case 2u:
          if (*(float *)(a1 + 5832) != 0.0) {
            float v13 = *(float *)(a1 + 5832);
          }
          if (*(float *)(a1 + 5740) != 0.0) {
            float v12 = *(float *)(a1 + 5740);
          }
          float v19 = *(float *)(a1 + 5912);
          goto LABEL_113;
        case 3u:
          if (*(float *)(a1 + 5836) != 0.0) {
            float v13 = *(float *)(a1 + 5836);
          }
          if (*(float *)(a1 + 5748) != 0.0) {
            float v12 = *(float *)(a1 + 5748);
          }
          float v19 = *(float *)(a1 + 5916);
          goto LABEL_113;
        case 4u:
          if (*(float *)(a1 + 5840) != 0.0) {
            float v13 = *(float *)(a1 + 5840);
          }
          if (*(float *)(a1 + 5756) != 0.0) {
            float v12 = *(float *)(a1 + 5756);
          }
          float v19 = *(float *)(a1 + 5920);
LABEL_113:
          if (v19 != 0.0) {
            float v14 = v19;
          }
          break;
        default:
          break;
      }
      uint64_t v20 = *a2;
      if ((int)v20 >= 1)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 4 * v10;
        uint64_t v23 = *(void *)(a3 + 1360);
        uint64_t v24 = *(void *)(v11 + 312 * v9 + 176) + 2;
        int v25 = v10 - 1;
        uint64_t v26 = *(void *)(a3 + 1344) + v22;
        uint64_t v27 = v23 + v22;
        do
        {
          float v28 = v12;
          float v29 = v13;
          float v30 = v14;
          if ((*(unsigned char *)(v24 + v21) & 4) == 0)
          {
            float v31 = *(float *)(a1 + 5520);
            if (v31 == 0.0) {
              float v32 = 1.0;
            }
            else {
              float v32 = *(float *)(a1 + 5520);
            }
            float v29 = v13 * v32;
            float v28 = v12 * v32;
            if (v31 == 0.0) {
              float v30 = v14;
            }
            else {
              float v30 = v14 * v31;
            }
          }
          if (v29 < 0.0) {
            float v29 = 0.0;
          }
          if (v29 > 1.0) {
            float v29 = 1.0;
          }
          if (v28 < 0.0) {
            float v28 = 0.0;
          }
          if (v28 > 1.0) {
            float v28 = 1.0;
          }
          *(_DWORD *)(v26 + 4 * v21) = *(_DWORD *)(a1 + 5568);
          if (v10 + v21 < 1)
          {
            *(float *)(v27 + 4 * v21) = v30;
            *(float *)(*(void *)(a3 + 1352) + v22 + 4 * v21) = v29;
            uint64_t v33 = *(void *)(a3 + 1336);
          }
          else
          {
            *(float *)(v27 + 4 * v21) = (float)(*(float *)(v23 + 4 * (v25 + v21)) * 0.6)
                                      + (float)(v30 * 0.4);
            *(float *)(*(void *)(a3 + 1352) + v22 + 4 * v21) = (float)(*(float *)(*(void *)(a3 + 1352)
                                                                                  + 4 * (v25 + v21))
                                                                       * 0.6)
                                                               + (float)(v29 * 0.4);
            uint64_t v33 = *(void *)(a3 + 1336);
            float v28 = (float)(*(float *)(v33 + 4 * (v25 + v21)) * 0.6) + (float)(v28 * 0.4);
          }
          uint64_t v34 = v21 + 1;
          *(float *)(v33 + v22 + 4 * v21) = v28;
          uint64_t v21 = v34;
        }
        while (v20 != v34);
        v10 += v34;
      }
      ++v9;
    }
    while (v9 < *(int *)(a3 + 392));
  }
  return 0;
}

uint64_t UNICORN__mfs_S32Vect_Init(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v2;
  return result;
}

void *UNICORN__mfs_S32Vect_Clear(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[1];
  if (v2)
  {
    uint64_t result = heap_Free((void *)*result, v2);
    v1[1] = 0;
  }
  v1[2] = 0;
  return result;
}

uint64_t UNICORN__mfs_S32Vect_Reserve(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 && *(_DWORD *)(a1 + 20) >= a2) {
    return 0;
  }
  uint64_t v5 = heap_Realloc(*(uint64_t **)a1, v4, 4 * a2);
  if (!v5) {
    return 2229280778;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (a2 > v7) {
    bzero((void *)(v5 + 4 * v7), 4 * (a2 - v7));
  }
  uint64_t result = 0;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 20) = a2;
  return result;
}

uint64_t UNICORN__mfs_S32Vect_Pad(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 >= *(_DWORD *)(a1 + 20)) {
    return 2229280778;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v2) = a2;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

uint64_t UNICORN__mfs_F32Vect_Create(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 16) = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v4 = 4 * a2;
  uint64_t v5 = (void *)heap_Alloc(*(void *)a1, v4);
  if (!v5) {
    return 2229280778;
  }
  uint64_t v6 = v5;
  bzero(v5, v4);
  uint64_t result = 0;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 20) = a2;
  return result;
}

uint64_t UNICORN__mfs_F32Vect_Pad(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 >= *(_DWORD *)(a1 + 20)) {
    return 2229280778;
  }
  uint64_t result = 0;
  *(float *)(*(void *)(a1 + 8) + 4 * v2) = a2;
  *(_DWORD *)(a1 + 16) = v2 + 1;
  return result;
}

uint64_t UNICORN__mfs_InitStream(uint64_t a1, void *a2, _DWORD *a3)
{
  bzero(a2, 0x7C0uLL);
  *((void *)a2 + 134) = a1;
  return UNICORN__InitVStream(a1, (char *)a2, a3);
}

void UNICORN__mfs_DeInitStream(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 1072))
  {
    UNICORN__mfs_CostList_DeInit((void *)(a1 + 1088));
    uint64_t v2 = *(void *)(a1 + 1320);
    if (v2)
    {
      heap_Free(*(void **)(*(void *)(a1 + 1072) + 8), v2);
      *(void *)(a1 + 1320) = 0;
    }
    BET3FLT__dd_free(*(void **)(*(void *)(a1 + 1072) + 8), *(uint64_t **)(a1 + 1328));
    uint64_t v3 = *(void *)(a1 + 1336);
    if (v3)
    {
      heap_Free(*(void **)(*(void *)(a1 + 1072) + 8), v3);
      *(void *)(a1 + 1336) = 0;
    }
    for (uint64_t i = 1664; i != 1704; i += 8)
    {
      uint64_t v5 = *(void *)(a1 + i);
      if (v5)
      {
        heap_Free(*(void **)(*(void *)(a1 + 1072) + 8), v5);
        *(void *)(a1 + i) = 0;
      }
    }
    uint64_t v6 = *(void *)(a1 + 1792);
    if (v6)
    {
      heap_Free(*(void **)(*(void *)(a1 + 1072) + 8), v6);
      *(void *)(a1 + 1792) = 0;
    }
    uint64_t v7 = *(void *)(a1 + 1800);
    if (v7)
    {
      heap_Free(*(void **)(*(void *)(a1 + 1072) + 8), v7);
      *(void *)(a1 + 1800) = 0;
    }
    uint64_t v8 = *(void *)(a1 + 1816);
    if (v8)
    {
      heap_Free(*(void **)(*(void *)(a1 + 1072) + 8), v8);
      *(void *)(a1 + 1816) = 0;
    }
    UNICORN__mfs_S32Vect_Clear((void *)(a1 + 1376));
    UNICORN__mfs_UnitSequence_DeInit(a1 + 1400);
    UNICORN__mfs_SegmentList_DeInit((void *)(a1 + 1520));
    UNICORN__mfs_SegmentList_DeInit((void *)(a1 + 1552));
    uint64_t v9 = *(void *)(a1 + 64);
    if (v9 && *(_DWORD *)(v9 + 244))
    {
      unint64_t v10 = 0;
      do
      {
        if (*(_DWORD *)(v9 + 4 * v10 + 224))
        {
          UNICORN__DeInitMSDUttModel((void *)(a1 + 56), v10);
          uint64_t v9 = *(void *)(a1 + 64);
        }
        ++v10;
      }
      while (v10 < *(unsigned int *)(v9 + 244));
    }
    UNICORN__DeInitVStream((int *)a1);
    for (uint64_t j = 1848; j != 1944; j += 16)
      VectBlock_Destroy(*(void **)(a1 + 1072), (uint64_t *)(a1 + j));
    bzero((void *)a1, 0x7C0uLL);
  }
}

uint64_t UNICORN__mfs_LoadStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result = UNICORN__LoadVStream(a1, a2, a3);
  if ((result & 0x80000000) == 0)
  {
    UNICORN__mfs_S32Vect_Init(*(void *)(a1 + 1072), (void *)(a1 + 1376));
    uint64_t result = UNICORN__mfs_UnitSequence_Init(*(void *)(a1 + 1072), a1 + 1400, a2, a4, a5);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = UNICORN__mfs_SegmentList_Init(*(void *)(a1 + 1072), a2, (void *)(a1 + 1520));
      if ((result & 0x80000000) == 0) {
        uint64_t result = UNICORN__mfs_SegmentList_Init(*(void *)(a1 + 1072), a2, (void *)(a1 + 1552));
      }
    }
    *(_DWORD *)(a1 + 1976) = *(_DWORD *)(a3 + 6768);
    *(void *)(a1 + 1776) = a4;
    *(_DWORD *)(a1 + 1784) = a5;
  }
  return result;
}

uint64_t BET5_GenericRules_Rule_Matches(uint64_t a1, unsigned int *a2, int a3, _DWORD *a4)
{
  unsigned int v4 = *(_DWORD *)(a1 + 392);
  *a4 = 1;
  unint64_t v5 = *a2;
  if (v5)
  {
    uint64_t v6 = 0;
    for (uint64_t i = *((void *)a2 + 1) + 5; ; i += 40)
    {
      int v8 = *(char *)(i - 1) + a3;
      if (v8 < 0 || v8 >= v4)
      {
        if ((*(_DWORD *)(i - 5) - 253) >= 2) {
          break;
        }
        unsigned int v10 = 1;
      }
      else
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8 * *(unsigned int *)(i - 5) + 16);
        if (!v9) {
          break;
        }
        unsigned int v10 = *(unsigned __int8 *)(v9 + v8);
      }
      if (((*(unsigned __int8 *)(i + ((unint64_t)v10 >> 3)) >> (v10 & 7)) & 1) == 0) {
        break;
      }
      if (++v6 >= v5) {
        return 0;
      }
    }
    *a4 = 0;
  }
  return 0;
}

uint64_t BET5_GenericRules_ParamActions_AllocMemoryAndInit(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a2[600];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)a2 + 299);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = (void *)(v4 + 40);
  uint64_t v7 = v3 + 1;
  do
  {
    if (!--v7) {
      return 0;
    }
    int v8 = *((_DWORD *)v6 - 2);
    if (v8) {
      int v8 = *v6 != 0;
    }
    v6 += 6;
  }
  while (!v8);
  uint64_t v9 = 2229280778;
  int v10 = *a2;
  int v12 = *(_DWORD *)(a3 + 392);
  uint64_t v52 = *(void *)(a3 + 1072);
  uint64_t v13 = heap_Calloc(*(void **)(v52 + 8), 8, 8);
  *(void *)(a3 + 1368) = v13;
  if (!v13) {
    return v9;
  }
  uint64_t v14 = v13;
  uint64_t v50 = a2;
  unint64_t v15 = a2[600];
  if (!v15)
  {
    unint64_t v15 = 0;
    float v19 = a2;
    goto LABEL_28;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = (v12 * v10);
  int v54 = 0;
  float v19 = v50;
  while (1)
  {
    uint64_t v20 = *((void *)v50 + 299);
    if (v20)
    {
      uint64_t v21 = v20 + 48 * v16;
      int v23 = *(_DWORD *)(v21 + 32);
      uint64_t v22 = (unsigned int *)(v21 + 32);
      if (v23)
      {
        uint64_t v24 = v20 + 48 * v16;
        uint64_t v26 = *(void *)(v24 + 40);
        int v25 = (void *)(v24 + 40);
        if (v26) {
          break;
        }
      }
    }
LABEL_24:
    if (++v16 >= v15)
    {
      if ((v17 & 0x80000000) != 0) {
        return v17;
      }
LABEL_28:
      int v49 = *v19;
      uint64_t v37 = *(unsigned int *)(a3 + 392);
      int v55 = 0;
      uint64_t v51 = v37;
      if (v37)
      {
        uint64_t v38 = 0;
        do
        {
          if (v15)
          {
            uint64_t v39 = 0;
            uint64_t v40 = *((void *)v19 + 299);
            do
            {
              if (v40)
              {
                uint64_t v41 = *(unsigned int *)(v40 + 48 * v39 + 32);
                if (v41)
                {
                  uint64_t v42 = *(void *)(v40 + 48 * v39 + 40);
                  if (v42)
                  {
                    BET5_GenericRules_Rule_Matches(a3, (unsigned int *)(v40 + 48 * v39), v38, &v55);
                    if (v55)
                    {
                      unsigned int v43 = (_DWORD *)(v42 + 12);
                      do
                      {
                        int v44 = *(v43 - 3);
                        uint64_t v45 = *(void *)(v14 + 8 * *(v43 - 2));
                        if (v44 == 9 || v44 == 7) {
                          *(_DWORD *)(v45 + 4 * (v49 * v38)) = *v43;
                        }
                        if ((v44 & 0xFFFFFFFE) == 8) {
                          *(_DWORD *)(v45 + 4 * (v49 * (v38 + 1) - 1)) = *v43;
                        }
                        v43 += 4;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                }
              }
              ++v39;
            }
            while (v39 != v15);
            float v19 = v50;
            uint64_t v47 = v38 + 1;
          }
          else
          {
            uint64_t v47 = v38 + 1;
          }
          uint64_t v38 = v47;
        }
        while (v47 != v51);
      }
      return 0;
    }
  }
  uint64_t v27 = 0;
  while (1)
  {
    uint64_t v28 = *v25 + 16 * v27;
    int v30 = *(_DWORD *)(v28 + 4);
    float v29 = (unsigned int *)(v28 + 4);
    BET5_Param_GetGlobalValue(a1, v30, &v54);
    uint64_t v17 = v31;
    if ((v31 & 0x80000000) != 0) {
      return v31;
    }
    uint64_t v14 = *(void *)(a3 + 1368);
    uint64_t v32 = *v29;
    if (!*(void *)(v14 + 8 * v32)) {
      break;
    }
LABEL_22:
    if (++v27 >= (unint64_t)*v22)
    {
      unint64_t v15 = v50[600];
      goto LABEL_24;
    }
  }
  if (BET5_Param_GetType(v32) != 1) {
    return 2229280768;
  }
  uint64_t v33 = heap_Calloc(*(void **)(v52 + 8), v18, 4);
  uint64_t v34 = *v29;
  *(void *)(*(void *)(a3 + 1368) + 8 * v34) = v33;
  uint64_t v14 = *(void *)(a3 + 1368);
  unsigned int v35 = *(_DWORD **)(v14 + 8 * v34);
  if (v35)
  {
    if (v18)
    {
      uint64_t v36 = v18;
      do
      {
        *v35++ = v54;
        --v36;
      }
      while (v36);
    }
    goto LABEL_22;
  }
  return 2229280778;
}

void *BET5_GenericRules_ParamActions_FreeMemory(void *result)
{
  if (result[171])
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    uint64_t v3 = result[134];
    do
    {
      uint64_t v4 = *(void *)(v1[171] + v2);
      if (v4) {
        heap_Free(*(void **)(v3 + 8), v4);
      }
      v2 += 8;
    }
    while (v2 != 64);
    unint64_t v5 = *(void **)(v3 + 8);
    uint64_t v6 = v1[171];
    return heap_Free(v5, v6);
  }
  return result;
}

float BET5_GenericRules_Param_GetLocalValue(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, float *a5)
{
  float result = BET5_Param_GetGlobalValue(a1, a3, a5);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(a2 + 1368);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 8 * a3);
      if (v12)
      {
        float result = *(float *)(v12 + 4 * a4);
        *a5 = result;
      }
    }
  }
  return result;
}

uint64_t UNICORN__mfs_UnitSequence_Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  uint64_t v9 = (void *)(a2 + 96);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a3;
  UNICORN__mfs_S32Vect_Init(a1, (void *)(a2 + 48));
  UNICORN__mfs_S32Vect_Init(a1, (void *)(a2 + 72));
  UNICORN__mfs_S32Vect_Init(a1, v9);
  *(void *)(a2 + 16) = a4;
  *(_DWORD *)(a2 + 24) = a5;
  return 0;
}

void *UNICORN__mfs_UnitSequence_DeInit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v2);
    *(void *)(a1 + 32) = 0;
  }
  *(_DWORD *)(a1 + 40) = 0;
  UNICORN__mfs_S32Vect_Clear((void *)(a1 + 48));
  UNICORN__mfs_S32Vect_Clear((void *)(a1 + 72));
  float result = UNICORN__mfs_S32Vect_Clear((void *)(a1 + 96));
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t mfs_UnitSequence_SequencePartial(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10 = *(void *)(a2 + 8);
  int v11 = *(_DWORD *)(*(void *)(v10 + 568) + 11548);
  uint64_t v12 = heap_Realloc(*(uint64_t **)(*(void *)a2 + 8), *(void *)(a2 + 32), 264 * *(unsigned int *)(a2 + 64));
  if (!v12) {
    return 2229280778;
  }
  *(void *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 40) = 0;
  int v13 = *(_DWORD *)(a2 + 64);
  if (v13 >= 1)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    do
    {
      if (v14 + 1 == v13
        || *(_DWORD *)(*(void *)(a2 + 56) + 4 * v14 + 4) == *(_DWORD *)(*(void *)(a2 + 56) + 4 * v14) + 1)
      {
        ++v16;
      }
      else
      {
        ++v16;
        uint64_t v18 = *(void *)(a2 + 32) + 264 * v15;
        *(_DWORD *)uint64_t v18 = v17;
        *(_DWORD *)(v18 + 4) = v16;
        *(_OWORD *)(v18 + 8) = 0uLL;
        *(_OWORD *)(v18 + 24) = 0uLL;
        *(_OWORD *)(v18 + 40) = 0uLL;
        *(_OWORD *)(v18 + 56) = 0uLL;
        *(_OWORD *)(v18 + 72) = 0uLL;
        *(_OWORD *)(v18 + 88) = 0uLL;
        *(_OWORD *)(v18 + 104) = 0uLL;
        *(_OWORD *)(v18 + 120) = 0uLL;
        *(_OWORD *)(v18 + 136) = 0uLL;
        *(_OWORD *)(v18 + 152) = 0uLL;
        *(_OWORD *)(v18 + 168) = 0uLL;
        *(_OWORD *)(v18 + 184) = 0uLL;
        *(_OWORD *)(v18 + 200) = 0uLL;
        *(_OWORD *)(v18 + 216) = 0uLL;
        *(_OWORD *)(v18 + 232) = 0uLL;
        *(_OWORD *)(v18 + 248) = 0uLL;
        unsigned int v15 = *(_DWORD *)(a2 + 40) + 1;
        *(_DWORD *)(a2 + 40) = v15;
        int v13 = *(_DWORD *)(a2 + 64);
        int v17 = v16;
      }
      ++v14;
    }
    while (v14 < v13);
    if (v16 != v17)
    {
      uint64_t v19 = *(void *)(a2 + 32) + 264 * v15;
      *(_DWORD *)uint64_t v19 = v17;
      *(_DWORD *)(v19 + 4) = v16;
      *(_OWORD *)(v19 + 8) = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *(_OWORD *)(v19 + 216) = 0u;
      *(_OWORD *)(v19 + 232) = 0u;
      *(_OWORD *)(v19 + 248) = 0u;
      ++*(_DWORD *)(a2 + 40);
    }
  }
  if (a4 >= a5) {
    return 0;
  }
  int v20 = a5 - 1;
  uint64_t v21 = 4 * a4;
  do
  {
    unsigned __int16 v28 = 0;
    int v27 = 0;
    int v22 = *(_DWORD *)(*(void *)(a2 + 56) + v21);
    int v23 = *(_DWORD *)(*(void *)(a2 + 104) + v21);
    if (v23 == -1)
    {
      mfs_GetMessageOffsetAndDur_Msecs(v10, *(_DWORD *)(*(void *)(a2 + 56) + v21), &v27, &v28);
    }
    else
    {
      mfs_GetMessageOffsetAndDur_Msecs(*(void *)(*(void *)(a2 + 16) + 48 * v23 + 16), *(_DWORD *)(*(void *)(a2 + 56) + v21), &v27, &v28);
      v22 += *(_DWORD *)(*(void *)(a2 + 16) + 48 * *(int *)(*(void *)(a2 + 104) + v21) + 24);
    }
    if (v22 == v11) {
      int v24 = -1;
    }
    else {
      int v24 = v22;
    }
    uint64_t result = UNICORN__mfs_SegmentList_Add(a3, v24, *(unsigned char *)(a1 + a4 / *(_DWORD *)v10), v27, v28);
    if ((result & 0x80000000) != 0) {
      break;
    }
    v21 += 4;
  }
  while (v20 != a4++);
  return result;
}

uint64_t mfs_TCost_Elf0_Manhattan_TreeIndex(float *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, int a8, float a9, float a10)
{
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  uint64_t v12 = a4;
  int v13 = *(_DWORD *)(a3[2] + 32 * a4 + 16);
  uint64_t v83 = 0;
  *(void *)unint64_t v84 = 0;
  int v82 = 0;
  if (!v13) {
    return 0;
  }
  BET5_GenericRules_Param_GetLocalValue((uint64_t)a1, a2, 3u, a4, &v84[1]);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  BET5_GenericRules_Param_GetLocalValue((uint64_t)a1, a2, 4u, a4, (float *)&v83);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  BET5_GenericRules_Param_GetLocalValue((uint64_t)a1, a2, 5u, a4, (float *)&v82);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  BET5_GenericRules_Param_GetLocalValue((uint64_t)a1, a2, 6u, a4, v84);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  BET5_GenericRules_Param_GetLocalValue((uint64_t)a1, a2, 7u, a4, (float *)&v83 + 1);
  uint64_t v24 = v23;
  if ((v23 & 0x80000000) == 0)
  {
    unsigned int v25 = *(_DWORD *)(*(void *)(*(void *)(v10 + 776) + 8 * (int)a7) + 40 * a6 + 4);
    uint64_t v26 = *(uint64_t **)(a2 + 1768);
    if (v26 && *((_DWORD *)v26 + 4))
    {
      unsigned int v27 = *((_DWORD *)v26 + 2);
      unsigned int v28 = -1;
      if (v27 > a4 && v25)
      {
        uint64_t v29 = v10 + 8 * (int)a7;
        int v30 = *(__int16 **)(*(void *)(v29 + 1184) + 8 * a6);
        uint64_t v31 = *(__int16 **)(*(void *)(v29 + 1248) + 8 * a6);
        float v32 = a1[1504];
        uint64_t v33 = *v26;
        float v34 = *(float *)(*v26 + 48 * v12 + 20);
        if (v34 == 0.0
          && (!a4 || *(float *)(v33 + 48 * (a4 - 1) + 20) == 0.0)
          && ((int)a4 + 1 >= v27 || *(float *)(v33 + 48 * (a4 + 1) + 20) == 0.0))
        {
          goto LABEL_37;
        }
        unsigned int v28 = *((_DWORD *)v26 + 6);
        float v35 = 0.0;
        uint64_t v36 = *(unsigned int *)(*(void *)(*(void *)(v10 + 776) + 8 * (int)a7) + 40 * a6 + 4);
        uint64_t v37 = v31;
        uint64_t v38 = v30;
        float v39 = 0.0;
        float v40 = 1.0 / a1[1514];
        do
        {
          int v41 = *v38++;
          float v42 = v32 + (float)((float)v41 * v40);
          int v43 = *v37++;
          float v39 = v39 + v42;
          float v35 = v35 + (float)(v32 + (float)((float)v43 * v40));
          --v36;
        }
        while (v36);
        float v44 = v39 / (float)v25;
        float v45 = 0.0;
        uint64_t v46 = *(unsigned int *)(*(void *)(*(void *)(v10 + 776) + 8 * (int)a7) + 40 * a6 + 4);
        float v47 = 0.0;
        float v48 = v35 / (float)v25;
        do
        {
          int v49 = *v30++;
          float v47 = v47
              + (float)((float)((float)(v32 + (float)((float)v49 * v40)) - v44)
                      * (float)((float)(v32 + (float)((float)v49 * v40)) - v44));
          int v50 = *v31++;
          float v45 = v45
              + (float)((float)((float)(v32 + (float)((float)v50 * v40)) - v48)
                      * (float)((float)(v32 + (float)((float)v50 * v40)) - v48));
          --v46;
        }
        while (v46);
        float v51 = sqrt(v47 / (double)v25);
        double v52 = sqrt(v45 / (double)v25);
        float v53 = v34;
        if (a4)
        {
          float v53 = v34;
          if (v34 == 0.0) {
            float v53 = *(float *)(v33 + 48 * (a4 - 1) + 20);
          }
        }
        float v54 = v52;
        float v55 = a9 + (float)((float)(v51 + v51) * v53);
        if (v53 == 0.0) {
          float v55 = a9;
        }
        if (v34 == 0.0 && (int)a4 + 1 < v27) {
          float v34 = *(float *)(v33 + 48 * (a4 + 1) + 20);
        }
        float v56 = a10 + (float)((float)(v54 + v54) * v34);
        if (v34 == 0.0) {
          float v57 = a10;
        }
        else {
          float v57 = v56;
        }
        a10 = 1.0;
        if (v55 <= 0.0) {
          a9 = 1.0;
        }
        else {
          a9 = v55;
        }
        if (v57 > 0.0) {
          a10 = v57;
        }
      }
LABEL_38:
      int v58 = *(_DWORD *)(*(void *)(*(void *)(v10 + 776) + 8 * (int)a7) + 40 * a6 + 4);
      float v59 = *(float *)(a5 + 108) * *(float *)(*(void *)(a2 + 1352) + 4 * v12);
      if (v28 != -1) {
        float v59 = v59 + (float)(v59 * (float)v28);
      }
      if (a8) {
        float v60 = v59 * 0.01;
      }
      else {
        float v60 = v59;
      }
      uint64_t v61 = *(unsigned int *)(a5 + 104);
      float v62 = 0.0;
      if ((v61 - 256) >= 0xFFFFFF01) {
        float v62 = (float)(a9 - a10) * a1[v61 + 2616];
      }
      if (BET3FLT__log_select_GetLogLevel(*(void *)(v11 + 32)) >= 3)
      {
        double v78 = v84[1];
        double v79 = v60;
        double v76 = v60;
        double v77 = (float)(v60 * v84[1]);
        double v74 = (float)(v60 * (float)(1.0 - v84[1]));
        double v75 = (float)(1.0 - v84[1]);
        double v72 = a10;
        double v73 = v62;
        double v70 = a1[2901];
        double v71 = a9;
        double v68 = a1[2897];
        double v69 = a1[2899];
        double v66 = a1[2898];
        double v67 = a1[2900];
        double v65 = a1[2896];
        HIDWORD(v64) = HIDWORD(a4);
        UNICORN__log_select_Diag(v11, 3, (uint64_t)"stateidx %u: dist pitch: SPEECHBASE MEAN left %.3f, right %.3f, slope %.3f; SPEECHBASE STDEV left %.3"
                   "f, right %.3f, slope %.3f; TARGET left %.3f, right %.3f, slope %.3f; WEIGHTS edge %.3f(=%.3f*%.3f), s"
                   "lope %.3f(=%.3f*%.3f)\n");
      }
      if (v58)
      {
        LODWORD(v64) = v82;
        return (*(uint64_t (**)(float *, uint64_t *, uint64_t, void, uint64_t, float, float, float, float, float, float, float, float, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double))(a5 + 152))(a1, a3, a4, a6, a7, a9, a10, v62, v60, v84[1], v84[0], *((float *)&v83 + 1), *(float *)&v83, v64, v65, v66, v67, v68, v69,
                 v70,
                 v71,
                 v72,
                 v73,
                 v74,
                 v75,
                 v76,
                 v77,
                 v78,
                 v79);
      }
      return v24;
    }
LABEL_37:
    unsigned int v28 = -1;
    goto LABEL_38;
  }
  return v24;
}

uint64_t mfs_TCost_Elf0_Manhattan_Clusterize(float *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13, float a14)
{
  uint64_t v17 = *(void *)(a2 + 8);
  int v18 = *(_DWORD *)(*(void *)(*(void *)(v17 + 776) + 8 * a5) + 40 * a4 + 4);
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 8 * a5 - 16;
    uint64_t v21 = v17 + v20;
    uint64_t v22 = *(void *)(*(void *)(v17 + v20 + 1328) + 8 * a4);
    uint64_t v23 = *(void *)(*(void *)(v21 + 1264) + 8 * a4);
    uint64_t v24 = *(void *)(*(void *)(v21 + 1200) + 8 * a4);
    uint64_t v25 = *(void *)(*(void *)(a2 + 16) + 32 * a3);
    uint64_t v26 = *(void *)(a2 + v20 + 112);
    BOOL v27 = a12 != 0.0 || a11 != 0.0;
    BOOL v28 = a12 > 0.0 && a11 > 0.0;
    int v29 = a13 != 0.0 || v27;
    BOOL v30 = a13 > 0.0;
    if (a14 != 0.0) {
      int v29 = 1;
    }
    float v31 = (float)((float)(1.0 - a10) * a9) * a12;
    if (a14 <= 0.0) {
      BOOL v30 = 0;
    }
    do
    {
      if ((*(_DWORD *)(v26 + 4 * (v19 >> 5)) >> v19))
      {
        float v32 = a1[1514];
        float v33 = a1[1504];
        float v34 = (float)((float)*(__int16 *)(v24 + 2 * v19) / v32) + v33;
        float v35 = v33 + (float)((float)*(__int16 *)(v23 + 2 * v19) / v32);
        float v36 = vabds_f32(a6, v34);
        if (v34 >= a6) {
          float v37 = v34;
        }
        else {
          float v37 = a6;
        }
        float v38 = v36 / v37;
        float v39 = vabds_f32(a7, v35);
        if (v35 >= a7) {
          float v40 = v35;
        }
        else {
          float v40 = a7;
        }
        float v41 = v34 - v35;
        float v42 = &a1[*(unsigned __int8 *)(v22 + v19)];
        float v43 = *(float *)(v25 + 4)
            + (float)(a9
                    * (float)((float)(fabsf(a8 - (float)(v41 * v42[2616])) * a10)
                            + (float)((float)(1.0 - a10) * (float)(v38 + (float)(v39 / v40)))));
        *(float *)(v25 + 4) = v43;
        if (v29)
        {
          if (v28)
          {
            if (v36 <= (float)(a1[2897] * a11)) {
              float v44 = 0.0;
            }
            else {
              float v44 = v31 * v36;
            }
            float v45 = v43 + v44;
            if (v39 <= (float)(a1[2899] * a11)) {
              float v46 = 0.0;
            }
            else {
              float v46 = v31 * v39;
            }
            float v43 = v45 + v46;
            *(float *)(v25 + 4) = v43;
          }
          if (v30)
          {
            float v47 = vabds_f32(a8, v41 * v42[2616]);
            if (v47 <= (float)(a1[2901] * a13)) {
              float v48 = 0.0;
            }
            else {
              float v48 = (float)((float)(a9 * a10) * a14) * v47;
            }
            *(float *)(v25 + 4) = v43 + v48;
          }
        }
        v25 += 12;
      }
      ++v19;
    }
    while (v18 != v19);
  }
  return 0;
}

float UNICORN__CandidatePhonemeDurationDistanceBasic(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  unsigned int v4 = *(unsigned __int8 *)(*(void *)(a1 + 2456) + a2);
  int v5 = v4 - a4;
  if ((int)(v4 - a4) < 0) {
    int v5 = a4 - v4;
  }
  return (float)v5 / (float)v4;
}

BOOL UNICORN__IsPhonemeDurationOutlier(uint64_t a1, unsigned int a2, float a3, uint64_t a4, int a5, int a6)
{
  int v6 = *(unsigned __int8 *)(*(void *)(a1 + 2456) + a2) - a5;
  if (v6 < 0) {
    int v6 = a5 - *(unsigned __int8 *)(*(void *)(a1 + 2456) + a2);
  }
  return (float)((float)a6 * a3) < (float)v6;
}

float PhonemeDurationOutlierDistance(int a1, int a2, unsigned int a3, float a4, float a5)
{
  unsigned int v5 = a1 - a2;
  if (a1 - a2 < 0) {
    unsigned int v5 = a2 - a1;
  }
  float v6 = (float)v5 * a5;
  BOOL v7 = (float)((float)a3 * a4) < (float)v5;
  float result = 0.0;
  if (v7) {
    return v6;
  }
  return result;
}

float PhonemeDurationOutlierDistance_LegacyOrTuning(int a1, int a2, float a3)
{
  unsigned int v3 = a1 - a2;
  if (a1 - a2 < 0) {
    unsigned int v3 = a2 - a1;
  }
  BOOL v4 = (float)v3 <= a3;
  float result = 9999.9;
  if (v4) {
    return 0.0;
  }
  return result;
}

void UNICORN__UniformStateDuration(float a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v4 = (int)(float)(a1 * 0.5);
  *(_DWORD *)(a3 + 24) = v4;
  if (*a4 >= 1)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = 2;
    do
      *(_DWORD *)(v5 + 4 * v6) = 0;
    while (v6++ <= *a4);
    int v4 = *(_DWORD *)(a3 + 24);
  }
  if (v4)
  {
    uint64_t v8 = *(void *)(a3 + 16);
    int v9 = 2;
    do
    {
      ++*(_DWORD *)(v8 + 4 * v9);
      if (v9 == *a4 + 1) {
        int v9 = 2;
      }
      else {
        ++v9;
      }
      --v4;
    }
    while (v4);
  }
}

void UNICORN__StateDuration(float a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v4 = *a4;
  if ((int)v4 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = (int *)(*(void *)(a3 + 16) + 8);
    do
    {
      int v7 = *v6++;
      v5 += v7;
      --v4;
    }
    while (v4);
    if (v5) {
      float v8 = a1 / (float)v5;
    }
    else {
      float v8 = 0.0;
    }
    uint64_t v9 = *(void *)(a3 + 16);
    uint64_t v10 = 2;
    do
    {
      int v11 = (int)(float)((float)(v8 * (float)*(int *)(v9 + 4 * v10)) + 0.5);
      if (v11 <= 1) {
        int v11 = 1;
      }
      *(_DWORD *)(v9 + 4 * v10) = v11;
      *(_DWORD *)(a3 + 24) += v11;
    }
    while (v10++ <= *a4);
  }
}

void UNICORN__MaxLLStateDuration(uint64_t a1, uint64_t a2, unsigned int *a3, float *a4, float a5)
{
  uint64_t v9 = *a3;
  if ((int)v9 <= 0)
  {
    float v19 = *a4 + a5;
    if (v19 >= (float)(int)v9) {
      float v15 = v19;
    }
    else {
      float v15 = (float)(int)v9;
    }
    float v18 = 0.0;
  }
  else
  {
    uint64_t v10 = (float *)(*(void *)(*(void *)(*((void *)a3 + 12) + 8 * *(int *)(a2 + 36)) + 8 * *(int *)(a2 + 8))
                  + 8);
    float v11 = 0.0;
    uint64_t v12 = *a3;
    float v13 = 0.0;
    do
    {
      float v13 = v13 + *v10;
      float v11 = v11 + v10[v9];
      ++v10;
      --v12;
    }
    while (v12);
    float v14 = *a4 + a5;
    if (v14 >= (float)(int)v9) {
      float v15 = v14;
    }
    else {
      float v15 = (float)(int)v9;
    }
    BOOL v16 = v11 == 0.0;
    float v17 = (float)(v15 - v13) / v11;
    if (v16) {
      float v18 = 0.0;
    }
    else {
      float v18 = v17;
    }
  }
  UNICORN__log_select_Diag(a1, 10, (uint64_t)"SetMaxLLPhonemeDuration %f\n");
  *(_DWORD *)(a2 + 24) = 0;
  if ((int)*a3 < 1)
  {
    float v25 = 0.0;
  }
  else
  {
    uint64_t v20 = 2;
    do
    {
      UNICORN__log_select_Diag(a1, 10, (uint64_t)"state %d before %d");
      uint64_t v21 = *(void *)(*(void *)(*((void *)a3 + 12) + 8 * *(int *)(a2 + 36)) + 8 * *(int *)(a2 + 8));
      int v22 = (int)(float)((float)(*(float *)(v21 + 4 * v20) + (float)(v18 * *(float *)(v21 + 4 * (int)(v20 + *a3))))
                       + 0.5);
      if (v22 <= 1) {
        int v22 = 1;
      }
      *(_DWORD *)(*(void *)(a2 + 16) + 4 * v20) = v22;
      UNICORN__log_select_Diag(a1, 10, (uint64_t)" after %d\n");
      int v23 = *(_DWORD *)(a2 + 24) + *(_DWORD *)(*(void *)(a2 + 16) + 4 * v20);
      *(_DWORD *)(a2 + 24) = v23;
      BOOL v24 = v20++ <= (int)*a3;
    }
    while (v24);
    float v25 = (float)v23;
  }
  float v26 = v15 - v25;
  float v27 = fabs((float)(v15 - v25));
  if (v27 >= 0.99999)
  {
    do
    {
      if (v26 <= 0.0) {
        int v28 = 1;
      }
      else {
        int v28 = -1;
      }
      if (v26 > 0.0) {
        int v29 = 1;
      }
      else {
        int v29 = -1;
      }
      LODWORD(v30) = *a3;
      if ((int)*a3 < 1) {
        break;
      }
      uint64_t v31 = 2;
      float v32 = -1.0e10;
      uint64_t v33 = 0xFFFFFFFFLL;
      do
      {
        uint64_t v34 = *(void *)(*(void *)(*((void *)a3 + 12) + 8 * *(int *)(a2 + 36)) + 8 * *(int *)(a2 + 8));
        float v35 = (float)(*(_DWORD *)(*(void *)(a2 + 16) + 4 * v31) + v29) - *(float *)(v34 + 4 * v31);
        float v36 = BET3FLT__bet3_finv(*(float *)(v34 + 4 * ((int)v31 + (int)v30)));
        float v37 = UNICORN__mfsLogLikelihood(v35, v36);
        if (v37 > v32 && *(_DWORD *)(*(void *)(a2 + 16) + 4 * v31) > v28)
        {
          float v38 = v37;
          UNICORN__log_select_Diag(a1, 10, (uint64_t)"state %d LL %f dur %d incr %d t2 %f\n");
          uint64_t v33 = v31;
          float v32 = v38;
        }
        uint64_t v30 = (int)*a3;
        BOOL v24 = v31++ <= v30;
      }
      while (v24);
      if ((int)v33 < 1) {
        break;
      }
      *(_DWORD *)(*(void *)(a2 + 16) + 4 * v33) += v29;
      *(_DWORD *)(a2 + 24) += v29;
      float v26 = v26 - (float)v29;
      float v39 = fabs(v26);
    }
    while (v39 >= 0.99999);
  }
  *a4 = v26;
}

void mfs_DeInitDataAndParam(void *a1, uint64_t a2, void *a3)
{
  UNICORN__mfs_DeInitData((uint64_t)a1, a2);
  StatValues_FreeMemory(a1, (uint64_t)(a3 + 1446));
  UNICORN__mfs_DeInitParam((uint64_t)a1, a3);
}

void UNICORN__mfs_DeInitData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 2464);
  if (v4) {
    brk_DataClose(*(void *)(a1 + 24), v4);
  }
  uint64_t v5 = 768;
  uint64_t v6 = 1624;
  do
  {
    uint64_t v7 = *(void *)(a2 + v5);
    if (v7)
    {
      *(void *)(a2 + v5) = v7 + 16;
      heap_Free(*(void **)(a1 + 8), v7 + 16);
    }
    TrieIntInit((void *)(a2 + v6));
    v5 += 8;
    v6 += 16;
  }
  while (v5 != 808);
  mfs_bnfData_DeInit((void *)a2, a1);
  UNICORN__DeInitVData(a1, (_OWORD *)a2);
  uint64_t v8 = *(void *)(a2 + 1944);
  if (v8 && *(void *)(*(void *)(a2 + 568) + 9816)) {
    free_aligned_mem(*(void **)(a1 + 8), v8);
  }
  uint64_t v9 = *(void *)(a2 + 2392);
  if (v9)
  {
    if (*(_DWORD *)(a2 + 2400))
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = (uint64_t *)(*(void *)(a2 + 2392) + v10);
        heap_Free(*(void **)(a1 + 8), v12[1]);
        heap_Free(*(void **)(a1 + 8), v12[3]);
        heap_Free(*(void **)(a1 + 8), v12[5]);
        ++v11;
        v10 += 48;
      }
      while (v11 < *(unsigned int *)(a2 + 2400));
      uint64_t v9 = *(void *)(a2 + 2392);
    }
    heap_Free(*(void **)(a1 + 8), v9);
    *(void *)(a2 + 2392) = 0;
  }
  uint64_t v13 = *(void *)(a2 + 2376);
  if (v13)
  {
    unint64_t v14 = *(unsigned int *)(a2 + 2384);
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = 56;
      do
      {
        uint64_t v17 = *(void *)(*(void *)(a2 + 2376) + v16);
        if (v17)
        {
          heap_Free(*(void **)(a1 + 8), v17);
          unint64_t v14 = *(unsigned int *)(a2 + 2384);
        }
        ++v15;
        v16 += 64;
      }
      while (v15 < v14);
      uint64_t v13 = *(void *)(a2 + 2376);
    }
    heap_Free(*(void **)(a1 + 8), v13);
    *(void *)(a2 + 2376) = 0;
  }
  heap_Free(*(void **)(a1 + 8), *(void *)(a2 + 2408));
  bzero((void *)a2, 0x9A8uLL);
}

void *StatValues_FreeMemory(void *a1, uint64_t a2)
{
  StatValues_auxFree(a1, (uint64_t *)(a2 + 56), *(_DWORD *)(a2 + 40));
  StatValues_auxFree(a1, (uint64_t *)(a2 + 64), *(_DWORD *)(a2 + 40));
  StatValues_auxFree(a1, (uint64_t *)(a2 + 72), *(_DWORD *)(a2 + 40));
  StatValues_auxFree(a1, (uint64_t *)(a2 + 80), *(_DWORD *)(a2 + 40));
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = *(void *)(a2 + 48);
  return heap_Free(v4, v5);
}

uint64_t UNICORN__mfs_InitData(uint64_t a1, void *a2, _DWORD *a3)
{
  bzero(a2, 0x9A8uLL);
  uint64_t v6 = (void *)heap_Calloc(*(void **)(a1 + 8), 1, 6416);
  *((void *)a2 + 301) = v6;
  if (!v6) {
    return 2229280778;
  }
  bzero(v6, 0x1910uLL);
  return UNICORN__InitVData(a1, a2, a3);
}

uint64_t UNICORN__mfs_LoadData(uint64_t a1, uint64_t a2, int a3, int32x2_t *a4, int32x2_t *a5)
{
  uint64_t VData = UNICORN__LoadVData(a1, (uint64_t)a4, (uint64_t)a5);
  if ((VData & 0x80000000) != 0) {
    return VData;
  }
  a4[31].i32[0] = 1;
  a4[71] = (int32x2_t)a5;
  if (a2)
  {
    if (a3 == 1)
    {
      uint64_t VData = brk_DataOpen(*(void *)(a1 + 24));
      if ((VData & 0x80000000) != 0) {
        return VData;
      }
    }
  }
  a4[72] = a5[852];
  a4[73] = a5[855];
  a4[74] = a5[882];
  if (!a5[1443].i32[1])
  {
    unsigned __int32 v11 = a5[883].u32[0];
    if (v11) {
      a5[1443].i32[1] = (v11 >> 4) - 1;
    }
  }
  a4[307] = a5[1197];
  if (a5[900])
  {
    uint64_t v12 = a5[16].u32[1];
    if ((int)v12 >= 1)
    {
      uint64_t v13 = a5 + 23;
      unint64_t v14 = a5 + 897;
      unint64_t v15 = a4 + 76;
      do
      {
        __int32 v16 = v13->i32[0];
        uint64_t v13 = (int32x2_t *)((char *)v13 + 4);
        if (v16)
        {
          v15[-1] = *v14;
          v15->i32[0] = v14[1].i32[1];
        }
        v14 += 3;
        v15 += 4;
        --v12;
      }
      while (v12);
    }
    a4[95].i32[0] = a5[901].u32[0] / (4 * (unint64_t)a5[26].u32[0]);
  }
  uint64_t v17 = 2229280778;
  int32x2_t v18 = a5[915];
  int32x2_t v19 = a5[918];
  int32x2_t v20 = a5[912];
  uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), a4->u32[0], 8);
  a4[97] = (int32x2_t)v21;
  if (v21)
  {
    a4[97] = (int32x2_t)(v21 - 16);
    uint64_t v22 = heap_Calloc(*(void **)(a1 + 8), a4->u32[0], 8);
    a4[98] = (int32x2_t)v22;
    if (v22)
    {
      a4[98] = (int32x2_t)(v22 - 16);
      uint64_t v23 = heap_Calloc(*(void **)(a1 + 8), a4->u32[0], 8);
      a4[96] = (int32x2_t)v23;
      if (v23)
      {
        a4[96] = (int32x2_t)(v23 - 16);
        uint64_t v24 = a4->u32[0];
        if ((int)v24 >= 1)
        {
          uint64_t v25 = v24 + 2;
          uint64_t v26 = 40 * a4[3].i32[0];
          uint64_t v27 = 2;
          do
          {
            *(int32x2_t *)(*(void *)&a4[97] + 8 * v27) = v18;
            *(void *)(*(void *)&a4[97] + 8 * v27) -= 40;
            *(void *)&v18 += 40 * *(int *)(*(void *)&a4[5] + 4 * v27);
            *(int32x2_t *)(*(void *)&a4[98] + 8 * v27) = v19;
            *(void *)(*(void *)&a4[98] + 8 * v27) -= 40;
            *(void *)&v19 += 40 * *(int *)(*(void *)&a4[6] + 4 * v27);
            *(int32x2_t *)(*(void *)&a4[96] + 8 * v27) = v20;
            *(void *)(*(void *)&a4[96] + 8 * v27++) -= 40;
            *(void *)&v20 += v26;
          }
          while (v25 != v27);
        }
        a4[102] = a5[930];
        a4[103] = a5[933];
        a4[101] = a5[927];
        a4[200] = a5[945];
        a4[201] = a5[1065];
        a4[202] = a5[948];
        uint64_t v28 = (uint64_t)&a4[205];
        if (a5[840].i32[1])
        {
          uint64_t VData = mfs_FullMtx_Load(v28, *(_DWORD **)&a5[960], 0, 0, 0);
          if ((VData & 0x80000000) != 0) {
            return VData;
          }
          uint64_t VData = mfs_FullMtx_Load((uint64_t)&a4[207], *(_DWORD **)&a5[963], 0, 0, 0);
          if ((VData & 0x80000000) != 0) {
            return VData;
          }
        }
        else
        {
          uint64_t VData = UNICORN__mfs_SparseMtx_Load(v28, (uint64_t)&a5[959]);
          if ((VData & 0x80000000) != 0) {
            return VData;
          }
          uint64_t VData = UNICORN__mfs_SparseMtx_Load((uint64_t)&a4[207], (uint64_t)&a5[962]);
          if ((VData & 0x80000000) != 0) {
            return VData;
          }
        }
        if (a5[990])
        {
          uint64_t VData = UNICORN__mfs_FSM_Load((uint64_t)&a4[218], (uint64_t)&a5[989]);
          if ((VData & 0x80000000) != 0) {
            return VData;
          }
        }
        if (a5[993])
        {
          uint64_t VData = UNICORN__mfs_FSM_Load((uint64_t)&a4[223], (uint64_t)&a5[992]);
          if ((VData & 0x80000000) != 0) {
            return VData;
          }
        }
        a4[238] = a5[1017];
        a4[239] = a5[1032];
        a4[240] = a5[1047];
        uint64_t VData = mfs_bnfData_Init(a5, a4, a1);
        if ((VData & 0x80000000) != 0) {
          return VData;
        }
        a4[302] = a5[1077];
        uint64_t VData = mfs_FullMtx_Load((uint64_t)&a4[303], *(_DWORD **)&a5[1098], a5[839].i32[1], &a5[840], 0);
        if ((VData & 0x80000000) != 0) {
          return VData;
        }
        uint64_t v34 = (_DWORD *)a5[1215];
        if (v34)
        {
          if (a5[836].i32[1])
          {
            uint64_t VData = mfs_FullMtx_Load((uint64_t)&a4[305], v34, 0, 0, 0);
            if ((VData & 0x80000000) != 0) {
              return VData;
            }
          }
        }
        uint64_t VData = InitializeSymbolicDataLayout(a1, (uint64_t)a4, (uint64_t)a5, v29, v30, v31, v32, v33);
        if ((VData & 0x80000000) != 0) {
          return VData;
        }
        uint64_t VData = InitializeFuzzyTables(a1, (uint64_t)a4, (uint64_t)a5, v35, v36, v37, v38, v39);
        if ((VData & 0x80000000) != 0) {
          return VData;
        }
        uint64_t VData = InitializeGenericContextRules(a1, (uint64_t)a4, (uint64_t)a5, v40, v41, v42, v43, v44);
        if ((VData & 0x80000000) != 0) {
          return VData;
        }
        StatValues_ComputeDurStatFromData((uint64_t)a4, (uint64_t)a5);
        if (!*(void *)&a5[1227])
        {
          int32x2_t v47 = a5[1002];
          if (v47) {
            a4[243] = v47;
          }
          goto LABEL_46;
        }
        float v45 = (void *)alloc_aligned_32_mem(*(void *)(a1 + 8), a5[1228].u32[0]);
        a4[243] = (int32x2_t)v45;
        if (v45)
        {
          memcpy(v45, *(const void **)&a5[1227], a5[1228].u32[0]);
LABEL_46:
          UNICORN__log_select_Diag(a1, 1, (uint64_t)"Loaded %d states from %d threshold at %d\n");
          return 0;
        }
      }
    }
  }
  return v17;
}

uint64_t InitializeSymbolicDataLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a3 + 9936);
  if (!v8)
  {
    uint64_t v8 = *(void *)(a3 + 10056);
    if (!v8)
    {
      uint64_t v9 = 0;
      *(void *)(a2 + 2368) = 0;
      *(_OWORD *)(a2 + 2352) = 0u;
      *(_OWORD *)(a2 + 2336) = 0u;
      *(_OWORD *)(a2 + 2320) = 0u;
      *(_OWORD *)(a2 + 2304) = 0u;
      *(_OWORD *)(a2 + 2288) = 0u;
      *(_OWORD *)(a2 + 2272) = 0u;
      *(_OWORD *)(a2 + 2256) = 0u;
      *(_OWORD *)(a2 + 2240) = 0u;
      *(_OWORD *)(a2 + 2224) = 0u;
      *(_OWORD *)(a2 + 2208) = 0u;
      *(_OWORD *)(a2 + 2192) = 0u;
      *(_OWORD *)(a2 + 2176) = 0u;
      *(_OWORD *)(a2 + 2160) = 0u;
      *(_OWORD *)(a2 + 2144) = 0u;
      *(_OWORD *)(a2 + 2128) = 0u;
      *(_OWORD *)(a2 + 2112) = 0u;
      *(_OWORD *)(a2 + 2096) = 0u;
      *(_OWORD *)(a2 + 2080) = 0u;
      *(_OWORD *)(a2 + 2064) = 0u;
      *(_OWORD *)(a2 + 2048) = 0u;
      *(_OWORD *)(a2 + 2032) = 0u;
      *(_OWORD *)(a2 + 2016) = 0u;
      *(_OWORD *)(a2 + 2000) = 0u;
      *(_OWORD *)(a2 + 1984) = 0u;
      *(_OWORD *)(a2 + 1968) = 0u;
      *(_OWORD *)(a2 + 1952) = 0u;
      return v9;
    }
  }
  if (*(_DWORD *)(v8 + 16) >= 0x65u)
  {
    uint64_t v9 = 2229280769;
    uint64_t v10 = "Current engine does not support version %d of the layout of symbolic data (max support %d).";
LABEL_7:
    UNICORN__log_select_Error(a1, 0, (uint64_t)v10, a4, a5, a6, a7, a8);
    return v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 20);
  *(_DWORD *)(a2 + 1952) = v11;
  if (v11 >= 0x65)
  {
    uint64_t v9 = 2229280769;
    uint64_t v10 = "Too many symbolic features (%d) !";
    goto LABEL_7;
  }
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 4 * v11;
    do
    {
      *(_DWORD *)(a2 + 1956 + v12) = *(unsigned __int8 *)(v8 + 24 + v12);
      v12 += 4;
    }
    while (v13 != v12);
    unsigned int v14 = v12 + 24;
  }
  else
  {
    unsigned int v14 = 24;
  }
  uint64_t v9 = 0;
  *(_DWORD *)(a2 + 2368) = v14;
  *(void *)(a2 + 2360) = v8 + v14;
  return v9;
}

uint64_t InitializeFuzzyTables(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a3 + 10176);
  unsigned int v51 = 0;
  BOOL v12 = *(float *)(a3 + 6620) != 0.0 || *(float *)(a3 + 6624) != 0.0 || *(float *)(a3 + 6628) != 0.0;
  *(void *)(a2 + 2376) = 0;
  *(_DWORD *)(a2 + 2384) = 0;
  if (!v11)
  {
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    if (!v12) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (*(_DWORD *)v11 < 0x65u)
  {
    unsigned int v15 = *(unsigned __int8 *)(v11 + 4);
    *(_DWORD *)(a2 + 2384) = v15;
    unsigned int v14 = (const char *)(v11 + 8);
    if (!v12)
    {
LABEL_10:
      unsigned int v16 = v15;
      if (!v15) {
        return 0;
      }
      goto LABEL_11;
    }
LABEL_8:
    unsigned int v16 = v15 + 1;
    *(_DWORD *)(a2 + 2384) = v15 + 1;
LABEL_11:
    uint64_t v13 = 2229280768;
    uint64_t v17 = heap_Calloc(*(void **)(a1 + 8), v16, 64);
    *(void *)(a2 + 2376) = v17;
    if (!v17) {
      return 2229280778;
    }
    if (v14 && v15)
    {
      uint64_t v23 = 0;
      do
      {
        uint64_t v24 = *(void *)(a2 + 2376) + v23;
        *(void *)uint64_t v24 = v14;
        uint64_t v25 = &v14[strlen(v14) + 1];
        *(void *)(v24 + 8) = v25;
        uint64_t v26 = &v25[strlen(v25)];
        *(_DWORD *)(v24 + 16) = *(_DWORD *)(v26 + 1);
        *(_DWORD *)(v24 + 20) = *(_DWORD *)(v26 + 5) != 0;
        uint64_t v27 = v26 + 9;
        uint64_t v28 = mfs_FullMtx_Load(v24 + 24, v26 + 9, 0, 0, (int *)&v51);
        if ((v28 & 0x80000000) != 0) {
          return v28;
        }
        unsigned int v14 = &v27[v51];
        v23 += 64;
      }
      while ((unint64_t)v15 << 6 != v23);
    }
    if (v12)
    {
      uint64_t v28 = AddFuzzyTableFromInternalTagSoftScoring(a1, a2, a3, v15);
      if ((v28 & 0x80000000) != 0) {
        return v28;
      }
    }
    uint64_t v29 = *(unsigned int *)(a2 + 2384);
    if (v29)
    {
      uint64_t v30 = 0;
      uint64_t v31 = *(unsigned int *)(a2 + 1952);
      do
      {
        if (v31)
        {
          uint64_t v32 = 0;
          uint64_t v33 = *(void *)(a2 + 2376);
          while (*(_DWORD *)(v33 + (v30 << 6) + 16) != *(_DWORD *)(a2 + 1956 + 4 * v32))
          {
            if (v31 == ++v32) {
              goto LABEL_29;
            }
          }
          uint64_t v34 = v33 + (v30 << 6);
          *(void *)(v34 + 40) = *(void *)(a2 + 2360);
          *(unsigned char *)(v34 + 48) = v31;
          *(unsigned char *)(v34 + 49) = v32;
        }
        else
        {
          LODWORD(v32) = 0;
        }
        if (v32 == v31)
        {
LABEL_29:
          uint64_t v35 = *(void *)(a2 + 2376) + (v30 << 6);
          if (*(_DWORD *)(v35 + 16) == 29)
          {
            *(void *)(v35 + 40) = *(void *)(a2 + 1048);
            *(_WORD *)(v35 + 48) = 1;
          }
        }
        ++v30;
      }
      while (v30 != v29);
      uint64_t v36 = *(void *)(a2 + 2376);
      uint64_t v37 = v29;
      uint64_t v38 = v36;
      do
      {
        if (!*(void *)(v38 + 40))
        {
          int v49 = "\n"
                "\n"
                "Fuzzy table %s:\n"
                "Corresponding symbolic feature %s is not available in the data.\n"
                "Please check S_FILENAME_CLUST_SYM_FEAT.\n"
                "You might also need to regenerate the symbolic data.";
LABEL_61:
          UNICORN__log_select_Error(a1, 0, (uint64_t)v49, v18, v19, v20, v21, v22);
          return v13;
        }
        v38 += 64;
        --v37;
      }
      while (v37);
      uint64_t v39 = 0;
      while (2)
      {
        int v40 = 0;
        uint64_t v41 = v29;
        uint64_t v42 = (_DWORD *)(v36 + 20);
        do
        {
          if (*(_DWORD *)(v36 + (v39 << 6) + 16) == *(v42 - 1) && *v42)
          {
            if (v40)
            {
              int v49 = "\n"
                    "\n"
                    "Following fuzzy tables are set as default fuzzy tables for feature %s:\n"
                    "%s\n"
                    "%s\n"
                    "There should be maximum one default fuzzy table per feature.";
              goto LABEL_61;
            }
            int v40 = 1;
          }
          v42 += 16;
          --v41;
        }
        while (v41);
        if (++v39 != v29) {
          continue;
        }
        break;
      }
      unint64_t v43 = *(unsigned int *)(a2 + 1952);
      if (v43)
      {
        for (unint64_t i = 0; i < v43; ++i)
        {
          uint64_t v45 = *(unsigned int *)(a2 + 2384);
          if (v45)
          {
            uint64_t v46 = 0;
            int32x2_t v47 = (int *)(*(void *)(a2 + 2376) + 16);
            while (1)
            {
              int v48 = *v47;
              v47 += 16;
              if (*(_DWORD *)(a2 + 4 * i + 1956) == v48) {
                break;
              }
              if (v45 == ++v46) {
                goto LABEL_52;
              }
            }
          }
          else
          {
            LODWORD(v46) = 0;
          }
          if (v46 == v45)
          {
LABEL_52:
            UNICORN__log_select_Diag(a1, 0, (uint64_t)"\n\nSystem contains data which is not used:\nsymbolic feature %d.  Please consider removing.\n\n");
            unint64_t v43 = *(unsigned int *)(a2 + 1952);
          }
          uint64_t v13 = 0;
        }
        return v13;
      }
    }
    return 0;
  }
  UNICORN__log_select_Error(a1, 0, (uint64_t)"Current engine does not support version %d of fuzzy tables (max support %d).", a4, a5, a6, a7, a8);
  return 2229280769;
}

uint64_t InitializeGenericContextRules(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a3 + 10296);
  *(void *)(a2 + 2392) = 0;
  *(_DWORD *)(a2 + 2400) = 0;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = a1;
  unsigned int v10 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 0x6Fu)
  {
    uint64_t v11 = "Current engine does not support version %d of context rules (max support %d).";
    uint64_t v12 = 0;
LABEL_4:
    UNICORN__log_select_Error(a1, v12, (uint64_t)v11, a4, a5, a6, a7, a8);
    return 2229280769;
  }
  uint64_t v15 = *(unsigned __int8 *)(v8 + 4);
  *(_DWORD *)(a2 + 2400) = v15;
  if (!v15) {
    return 0;
  }
  uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), v15, 48);
  *(void *)(a2 + 2392) = v16;
  if (!v16) {
    return 2229280778;
  }
  if (!*(_DWORD *)(a2 + 2400)) {
    return 0;
  }
  uint64_t v17 = 0;
  uint64_t v18 = (unsigned int *)(v8 + 8);
  while (1)
  {
    uint64_t v19 = *(void *)(a2 + 2392);
    uint64_t v20 = (unsigned int *)(v19 + 48 * v17);
    unsigned int v23 = *v18;
    uint64_t v22 = v18 + 1;
    uint64_t v21 = v23;
    *uint64_t v20 = v23;
    if (v23)
    {
      uint64_t v24 = heap_Calloc(*(void **)(v9 + 8), v21, 40);
      uint64_t v25 = v19 + 48 * v17;
      *(void *)(v25 + 8) = v24;
      uint64_t v26 = (uint64_t *)(v25 + 8);
      if (!v24) {
        return 2229280778;
      }
      if (*v20) {
        break;
      }
    }
LABEL_16:
    unsigned int v35 = *v22;
    uint64_t v18 = v22 + 1;
    uint64_t v34 = v35;
    uint64_t v36 = v19 + 48 * v17;
    *(_DWORD *)(v36 + 16) = v35;
    uint64_t v37 = (unsigned int *)(v36 + 16);
    if (v35)
    {
      uint64_t v38 = heap_Calloc(*(void **)(v9 + 8), v34, 12);
      *(void *)(v19 + 48 * v17 + 24) = v38;
      if (!v38) {
        return 2229280778;
      }
      uint64_t v39 = *v37;
      if (v39)
      {
        int v40 = (unsigned int *)(v38 + 8);
        do
        {
          *((void *)v40 - 1) = *(void *)v18;
          unsigned int v41 = v18[2];
          v18 += 3;
          *int v40 = v41;
          v40 += 3;
          --v39;
        }
        while (v39);
      }
    }
    if (v10 >= 0x6E)
    {
      unsigned int v43 = *v18++;
      uint64_t v42 = v43;
      uint64_t v44 = v19 + 48 * v17;
      *(_DWORD *)(v44 + 32) = v43;
      uint64_t v45 = (_DWORD *)(v44 + 32);
      if (v43)
      {
        uint64_t v46 = heap_Calloc(*(void **)(v9 + 8), v42, 16);
        uint64_t v47 = v19 + 48 * v17;
        *(void *)(v47 + 40) = v46;
        int v48 = (uint64_t *)(v47 + 40);
        if (!v46) {
          return 2229280778;
        }
        if (*v45)
        {
          uint64_t v54 = v9;
          uint64_t v49 = 0;
          unint64_t v50 = 0;
          while (1)
          {
            uint64_t v51 = *v48;
            uint64_t v52 = *v48 + v49 * 4;
            *(_DWORD *)uint64_t v52 = v18[v49];
            uint64_t v53 = *(void *)&v18[v49 + 1];
            *(void *)(v52 + 4) = v53;
            if (v53 > 7 || BET5_Param_GetType(v53) != 1) {
              break;
            }
            *(_DWORD *)(v51 + v49 * 4 + 12) = v18[v49 + 3];
            ++v50;
            v49 += 4;
            if (v50 >= *v45)
            {
              uint64_t v18 = (unsigned int *)((char *)v18 + v49 * 4);
              uint64_t v9 = v54;
              goto LABEL_30;
            }
          }
          uint64_t v11 = "Generic context rule param action %d not supported\n";
          a1 = v54;
          uint64_t v12 = 55010;
          goto LABEL_4;
        }
      }
    }
LABEL_30:
    uint64_t result = 0;
    if (++v17 >= (unint64_t)*(unsigned int *)(a2 + 2400)) {
      return result;
    }
  }
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  while (1)
  {
    uint64_t v29 = &v22[v27];
    uint64_t v30 = *v26;
    unsigned int v31 = v22[v27 + 1];
    *(_DWORD *)(*v26 + v27 * 4) = v22[v27];
    if (v31 != (char)v31) {
      return 2229280768;
    }
    uint64_t v32 = v30 + v27 * 4;
    *(unsigned char *)(v32 + 4) = v31;
    long long v33 = *(_OWORD *)(v29 + 2);
    *(_OWORD *)(v32 + 21) = *(_OWORD *)(v29 + 6);
    *(_OWORD *)(v32 + 5) = v33;
    ++v28;
    v27 += 10;
    if (v28 >= *v20)
    {
      uint64_t v22 = (unsigned int *)((char *)v22 + v27 * 4);
      goto LABEL_16;
    }
  }
}

void StatValues_ComputeDurStatFromData(uint64_t a1, uint64_t a2)
{
  if (*(float *)(a2 + 11576) == 0.0
    && *(float *)(a2 + 11580) == 0.0
    && *(float *)(a2 + 11568) == 0.0
    && *(float *)(a2 + 11572) == 0.0)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 11564);
    if (*(_DWORD *)(a2 + 5984)) {
      v4 >>= *(_DWORD *)(a2 + 5988) != 0;
    }
    if (v4)
    {
      unsigned int v5 = 0;
      uint64_t v6 = *(unsigned __int8 **)(a1 + 2456);
      int v7 = *(unsigned __int8 *)(a2 + 24);
      uint64_t v8 = v4;
      double v9 = 0.0;
      uint64_t v10 = v4;
      double v11 = 0.0;
      do
      {
        int v12 = *v6++;
        double v13 = (double)(v7 * v12) / 1000.0;
        if (v13 != 0.0)
        {
          double v11 = v11 + v13;
          float v14 = log(v13);
          double v9 = v9 + v14;
          ++v5;
        }
        --v10;
      }
      while (v10);
      if (v5)
      {
        double v11 = v11 / (double)v5;
        unsigned int v15 = v5;
        double v9 = v9 / (double)v5;
      }
      else
      {
        unsigned int v15 = 0;
      }
      uint64_t v18 = *(unsigned __int8 **)(a1 + 2456);
      int v19 = *(unsigned __int8 *)(a2 + 24);
      double v17 = 0.0;
      double v16 = 0.0;
      do
      {
        int v20 = *v18++;
        double v21 = (double)(v19 * v20) / 1000.0;
        if (v21 != 0.0)
        {
          double v16 = v16 + (v21 - v11) * (v21 - v11);
          float v22 = log(v21);
          double v17 = v17 + (v22 - v9) * (v22 - v9);
        }
        --v8;
      }
      while (v8);
      if (v5)
      {
        float v23 = sqrt(v16 / (double)v15);
        double v16 = v23;
        float v24 = sqrt(v17 / (double)v15);
        double v17 = v24;
      }
    }
    else
    {
      double v11 = 0.0;
      double v9 = 0.0;
      double v16 = 0.0;
      double v17 = 0.0;
    }
    float v25 = v11;
    *(float *)(a2 + 11568) = v25;
    float v26 = v16;
    *(float *)(a2 + 11572) = v26;
    float v27 = v9;
    *(float *)(a2 + 11576) = v27;
    float v28 = v17;
    *(float *)(a2 + 11580) = v28;
  }
}

void *UNICORN__mfs_GetMsgName(void *a1, unsigned int a2)
{
  if (a1 && (uint64_t v2 = a1[72]) != 0 && (v3 = a1[73]) != 0 && *(_DWORD *)(a1[71] + 11548) > a2) {
    return (void *)(v3 + *(unsigned int *)(v2 + 12 * a2));
  }
  else {
    return &UNICORN__mfs_GetMsgName_szEmpty;
  }
}

uint64_t mfs_GetMessageOffsetAndDur_Frames(uint64_t result, int a2, _DWORD *a3, _WORD *a4)
{
  uint64_t v4 = *(void *)(result + 592);
  if (v4)
  {
    uint64_t v5 = a2;
    if (a4) {
      *a4 = *(_WORD *)(v4 + 16 * a2 + 8);
    }
    if (a3)
    {
      int v6 = a2 & (a2 >> 31);
      int v7 = (unsigned __int16 *)(v4 + 16 * a2 - 6);
      while (1)
      {
        BOOL v8 = __OFSUB__(a2--, 1);
        if (a2 < 0 != v8) {
          break;
        }
        int v9 = *v7;
        v7 -= 8;
        if (v9 != *(unsigned __int16 *)(v4 + 16 * v5 + 10))
        {
          int v6 = a2 + 1;
          break;
        }
      }
      *a3 = *(_DWORD *)(v4 + 16 * v5 + 4) - *(_DWORD *)(v4 + 16 * v6 + 4);
    }
  }
  else
  {
    uint64_t v10 = *(_DWORD **)(result + 568);
    if (v10[2887] == a2)
    {
      if (a3) {
        *a3 = 0;
      }
      if (a4) {
        *a4 = 0;
      }
    }
    else
    {
      if (a3) {
        *a3 = 0;
      }
      if (a4)
      {
        int v11 = v10[1496];
        if (v11)
        {
          unsigned int v12 = v10[2891];
          unsigned int v13 = v10[1498];
          int v11 = a2 % v13 * (v12 / *(_DWORD *)result);
        }
        else
        {
          unsigned int v13 = v10[1498];
        }
        *a4 = *(unsigned __int8 *)(*(void *)(result + 1032)
                                 + (*(_DWORD *)(*(void *)(result + 848) + 4 * (a2 / v13)) + v11));
      }
    }
  }
  return result;
}

uint64_t mfs_GetMessageOffsetAndDur_Msecs(uint64_t a1, int a2, _DWORD *a3, _WORD *a4)
{
  int v9 = 0;
  __int16 v8 = 0;
  uint64_t result = mfs_GetMessageOffsetAndDur_Frames(a1, a2, &v9, &v8);
  if (a3) {
    *a3 = *(_DWORD *)(*(void *)(a1 + 568) + 24) * v9;
  }
  if (a4) {
    *a4 = v8 * *(_WORD *)(*(void *)(a1 + 568) + 24);
  }
  return result;
}

uint64_t AddFuzzyTableFromInternalTagSoftScoring(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v6 = (unsigned __int8 *)(a3 + 6232);
  uint64_t v7 = *(void *)(a2 + 2376);
  uint64_t v8 = a4;
  int v9 = (void *)(v7 + ((unint64_t)a4 << 6));
  *int v9 = "FUZZY TABLE DERIVED FROM INTERNAL TAG SOFT SCORING";
  v9[1] = "INTERNAL_TAG";
  v9[2] = 0x10000001DLL;
  LODWORD(v10) = -1;
  do
    uint64_t v10 = (v10 + 1);
  while (*(void *)(a3 + 8 * v10 + 2728));
  *(int32x2_t *)(v7 + ((unint64_t)a4 << 6) + 32) = vdup_n_s32(v10);
  uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), 4, (v10 * v10));
  if (!v11) {
    return 2229280778;
  }
  uint64_t v12 = *(void *)(a2 + 2376) + (v8 << 6);
  *(void *)(v12 + 24) = v11;
  *(void *)(v12 + 56) = v11;
  if (v10)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    do
    {
      uint64_t v15 = 0;
      double v16 = (float *)(v11 + 4 * v14);
      double v17 = v6 + 256;
      do
      {
        if (v13 + v15)
        {
          if (*(unsigned __int8 *)(a3 + v13 + 6232) != *(v17 - 256)) {
            float *v16 = *(float *)(a3 + 6620) + *v16;
          }
          if (*(unsigned __int8 *)(a3 + v13 + 6360) != *(v17 - 128)) {
            float *v16 = *(float *)(a3 + 6624) + *v16;
          }
          if (*(unsigned __int8 *)(a3 + v13 + 6488) != *v17) {
            float *v16 = *(float *)(a3 + 6628) + *v16;
          }
        }
        --v15;
        ++v16;
        ++v17;
      }
      while (-(uint64_t)v10 != v15);
      ++v13;
      v14 += v10;
    }
    while (v13 != v10);
    unsigned int v18 = 0;
    uint64_t v19 = 0;
    int v20 = *(unsigned __int8 *)(a3 + 6616);
    do
    {
      if (*(unsigned __int8 *)(a3 + v19 + 6232) == v20)
      {
        double v21 = (_DWORD *)(v11 + 4 * v18);
        uint64_t v22 = v10;
        float v23 = v6;
        do
        {
          int v24 = *v23++;
          if (v24 != v20) {
            *double v21 = 1176256410;
          }
          ++v21;
          --v22;
        }
        while (v22);
      }
      ++v19;
      v18 += v10;
    }
    while (v19 != v10);
  }
  return 0;
}

uint64_t StatValues_AllocMemoryForClusterStatValues(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = 2229280778;
  uint64_t v9 = a3;
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), a3, 8);
  *a2 = v10;
  if (v10)
  {
    if (a3)
    {
      uint64_t v11 = 0;
      while (1)
      {
        *(void *)(*a2 + 8 * v11) = heap_Calloc(*(void **)(a1 + 8), (*(_DWORD *)(a4 + 4 * v11) + 1), 4);
        if (!*(void *)(*a2 + 8 * v11)) {
          break;
        }
        if (v9 == ++v11) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

uint64_t StatValues_AllocMemoryForClusterCount(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = heap_Calloc(*(void **)(a1 + 8), *(unsigned int *)(a2 + 40), 4);
  *(void *)(a2 + 48) = v3;
  if (v3) {
    return 0;
  }
  else {
    return 2229280778;
  }
}

void *StatValues_auxFree(void *result, uint64_t *a2, unsigned int a3)
{
  uint64_t v4 = *a2;
  if (v4)
  {
    uint64_t v5 = result;
    if (a3)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 8 * a3;
      do
      {
        uint64_t v8 = *(void *)(*a2 + v6);
        if (v8) {
          heap_Free((void *)v5[1], v8);
        }
        v6 += 8;
      }
      while (v7 != v6);
      uint64_t v4 = *a2;
    }
    uint64_t result = heap_Free((void *)v5[1], v4);
    *a2 = 0;
  }
  return result;
}

uint64_t ViterbiEE_Init(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 1072);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = *(void *)(a2 + 1776);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 1784);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = *(void *)(v6 + 8);
  uint64_t result = precomp_Init((uint64_t *)(a1 + 48), a2, a3, a4);
  if ((result & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 1976);
  }
  return result;
}

uint64_t ViterbiEE_EnableSIMD(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 56) = a2;
  }
  return result;
}

uint64_t ViterbiEE_Release(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 76);
    if (v3 >= 1)
    {
      uint64_t v4 = 0;
      for (uint64_t i = 0; i < v3; ++i)
      {
        if (*(void *)(v2 + v4))
        {
          heap_Free(*(void **)(v2 + v4 + 16), *(void *)(v2 + v4));
          uint64_t v2 = *(void *)(a1 + 64);
          uint64_t v6 = v2 + v4;
          *(void *)uint64_t v6 = 0;
          *(_DWORD *)(v6 + 12) = 0;
          int v3 = *(_DWORD *)(a1 + 76);
        }
        v4 += 32;
      }
    }
    heap_Free(*(void **)(a1 + 80), v2);
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 76) = 0;
  }
  precomp_Release((uint64_t *)(a1 + 48));
  return 0;
}

uint64_t ViterbiEE_Decode(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = 2229280778;
  float v7 = *(float *)(*(void *)(a1 + 16) + 5516);
  int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 568) + 11548);
  int v9 = *(_DWORD *)(a1 + 76);
  UNICORN__log_select_Diag(*(void *)a1, 2, (uint64_t)"ViterbiEE::Decode(|%d|)\n");
  uint64_t v10 = *(uint64_t **)(*(void *)a1 + 8);
  uint64_t v11 = *(unsigned int *)(a2 + 16);
  uint64_t v12 = heap_Realloc(v10, 0, (24 * v11));
  if (!v12) {
    return v6;
  }
  uint64_t v13 = v12;
  precomp_SetupLeftRightData(*(void *)(a1 + 48), (unsigned int **)a2, v9);
  uint64_t v14 = *(void *)(a1 + 48);
  double v16 = *(unsigned int **)(v14 + 48);
  uint64_t v15 = *(_DWORD **)(v14 + 56);
  unsigned int v113 = *v16;
  unsigned int v114 = v15[2891];
  if (*(_DWORD *)(v14 + 1108) == -1) {
    double v17 = "Layer %d setup: candidates will come from main voice";
  }
  else {
    double v17 = "Layer %d setup: candidates will come from addon %d";
  }
  UNICORN__log_select_Diag(*(void *)a1, 2, (uint64_t)v17);
  uint64_t v116 = a1;
  uint64_t v18 = precomp_RightLayerOptimize(a2, *(void *)(a1 + 48));
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  int v110 = a3;
  unint64_t v111 = v10;
  int v112 = v11;
  if ((int)v11 < 1)
  {
    float v25 = (uint64_t *)a1;
  }
  else
  {
    uint64_t v19 = 0;
    int v20 = 0;
    float v21 = 1.0 - v7;
    uint64_t v22 = 24 * v11;
    float v23 = 0.0;
    uint64_t v24 = 4;
    int v115 = v114 / v113;
    float v25 = (uint64_t *)v116;
    do
    {
      uint64_t v26 = v25[6];
      uint64_t v27 = *(void *)a2 + 12 * *(int *)(*(void *)(v26 + 976) + v24);
      float v28 = *(float *)(v27 + 4);
      int v29 = *(_DWORD *)v27 - *(_DWORD *)(v26 + 80);
      *(_DWORD *)(v13 + v19) = v29;
      if (v29 == v8) {
        unsigned int v30 = 0;
      }
      else {
        unsigned int v30 = v29;
      }
      if (v15[1691])
      {
        if (v15[1496]) {
          unsigned int v30 = *(_DWORD *)(*((void *)v16 + 106) + 4 * (v30 / v15[1498])) + v30 % *v16 * v115;
        }
        else {
          unsigned int v30 = *(_DWORD *)(*((void *)v16 + 106) + 4 * (v30 / v15[1498]));
        }
      }
      float v31 = v21 * v28;
      uint64_t v32 = v13 + v19;
      *(void *)(v32 + 16) = 0;
      *(float *)(v32 + 12) = v31;
      *(_DWORD *)(v32 + 4) = v30;
      *(_DWORD *)(v32 + 8) = 0;
      if (v31 < v23 || v19 == 0) {
        float v23 = v31;
      }
      UNICORN__log_select_Diag(*v25, 12, (uint64_t)"Candidate %d : id %d target cost %.4f\n");
      float v25 = (uint64_t *)v116;
      ++v20;
      v19 += 24;
      v24 += 8;
    }
    while (v22 != v19);
  }
  UNICORN__log_select_Diag(*v25, 2, (uint64_t)"Min Viterbi target cost: %.3f\n");
  uint64_t v34 = v116;
  int v35 = *(_DWORD *)(v116 + 76);
  uint64_t v6 = 2229280778;
  if (v35 != 0x7FFFFFFF)
  {
    if (v35 < *(_DWORD *)(v116 + 72))
    {
      uint64_t v36 = *(void *)(v116 + 64);
      if (!v36) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
    int v37 = v35 + 1;
    *(_DWORD *)(v116 + 72) = v37;
    uint64_t v36 = heap_Realloc(*(uint64_t **)(v116 + 80), *(void *)(v116 + 64), (32 * v37));
    uint64_t v34 = v116;
    *(void *)(v116 + 64) = v36;
    if (v36)
    {
LABEL_29:
      uint64_t v38 = v36 + 32 * *(int *)(v34 + 76);
      *(void *)uint64_t v38 = v13;
      *(_DWORD *)(v38 + 8) = v112;
      *(_DWORD *)(v38 + 12) = v112;
      *(void *)(v38 + 16) = v111;
      *(void *)(v38 + 24) = v112;
      ++*(_DWORD *)(v34 + 76);
    }
  }
LABEL_30:
  uint64_t v39 = *(void *)(v34 + 64);
  if (v39)
  {
    uint64_t v6 = 0;
    if (v112 >= 1)
    {
      int v40 = *(_DWORD *)(v34 + 76);
      if (v40 >= 2)
      {
        int v41 = *(_DWORD *)(*(void *)(v34 + 16) + 11548);
        uint64_t v42 = (v40 - 1);
        uint64_t v43 = v39 + 32 * v42;
        uint64_t v44 = v39 + 32 * (v40 - 2);
        uint64_t v45 = v34;
        UNICORN__log_select_Diag(*(void *)v34, 2, (uint64_t)"ViterbiEE::UpdateBestPath()\n");
        ssft_qsort(*(void *)v44, *(unsigned int *)(v44 + 12), 24, (uint64_t (*)(unint64_t, unint64_t))comparePathScores);
        precomp_SetLayer(*(void *)(v45 + 48), v42);
        precomp_SetupJoinCallback(*(void *)(v45 + 48), *(_DWORD *)(v45 + 56));
        if (*(_DWORD *)(v43 + 12) == 1 && **(_DWORD **)v43 == v41) {
          BOOL v46 = 1;
        }
        else {
          BOOL v46 = *(_DWORD *)(v44 + 12) == 1 && **(_DWORD **)v44 == v41;
        }
        unsigned int LogLevel = BET3FLT__log_select_GetLogLevel(*(void *)(*(void *)(*(void *)(v116 + 24) + 1072) + 32));
        int v48 = (uint64_t *)v116;
        if (LogLevel >= 3)
        {
          uint64_t v49 = *(unsigned int *)(v44 + 12);
          uint64_t v50 = *(void *)(v116 + 24);
          *(_DWORD *)(v50 + 1972) += v49;
          if ((int)v49 >= 1)
          {
            uint64_t v51 = (float *)(*(void *)v44 + 12);
            do
            {
              if (*v51 < 10000000.0) {
                ++*(_DWORD *)(v50 + 1968);
              }
              v51 += 6;
              --v49;
            }
            while (v49);
          }
        }
        if (*(_DWORD *)(*(void *)(v116 + 16) + 5996)) {
          char v52 = v46;
        }
        else {
          char v52 = 1;
        }
        if ((v52 & 1) == 0
          && !((int)v42 % **(_DWORD **)(v116 + 8))
          && (uint64_t v53 = *(void *)(v116 + 48), *(_DWORD *)(v53 + 1104) == -1)
          && *(_DWORD *)(v53 + 1108) == -1)
        {
          LODWORD(v58) = *(_DWORD *)(v43 + 12);
          if ((int)v58 >= 1)
          {
            uint64_t v92 = 0;
            uint64_t v93 = 0;
            uint64_t v94 = *(void *)v116;
            do
            {
              uint64_t v95 = *(_DWORD **)v43;
              int v96 = *(_DWORD *)(*(void *)v43 + 24 * v92);
              int v97 = v96 - 1;
              if (v96 < 1)
              {
                UNICORN__log_select_Diag(v94, 2, (uint64_t)"ViterbiEE_DoNestedLoop_UnitBulking: Unexpected unitIDCurrent==0");
                int v48 = (uint64_t *)v116;
                int v97 = 0;
              }
              uint64_t v98 = *(unsigned int *)(v44 + 12);
              int v99 = v98 + 7;
              if ((int)v98 >= 0) {
                int v99 = *(_DWORD *)(v44 + 12);
              }
              uint64_t v100 = v99 & 0xFFFFFFF8;
              if ((int)v98 < 8)
              {
                LODWORD(v101) = 0;
              }
              else
              {
                uint64_t v101 = 0;
                double v102 = (_DWORD *)(*(void *)v44 + 96);
                while (*(v102 - 24) != v97)
                {
                  if (*(v102 - 18) == v97)
                  {
                    LODWORD(v101) = v101 + 1;
                    goto LABEL_157;
                  }
                  if (*(v102 - 12) == v97)
                  {
                    LODWORD(v101) = v101 + 2;
                    goto LABEL_157;
                  }
                  if (*(v102 - 6) == v97)
                  {
                    LODWORD(v101) = v101 + 3;
                    goto LABEL_157;
                  }
                  if (*v102 == v97)
                  {
                    LODWORD(v101) = v101 + 4;
                    goto LABEL_157;
                  }
                  if (v102[6] == v97)
                  {
                    LODWORD(v101) = v101 + 5;
                    goto LABEL_157;
                  }
                  if (v102[12] == v97)
                  {
                    LODWORD(v101) = v101 + 6;
                    goto LABEL_157;
                  }
                  if (v102[18] == v97)
                  {
                    LODWORD(v101) = v101 + 7;
                    goto LABEL_157;
                  }
                  v101 += 8;
                  v102 += 48;
                  if (v101 >= (int)v100) {
                    break;
                  }
                }
              }
              if (v101 == v100)
              {
                if ((int)v98 - (int)v100 >= 1)
                {
                  LODWORD(v101) = *(_DWORD *)(v44 + 12);
                  float v103 = (int *)(*(void *)v44 + 24 * v100);
                  while (1)
                  {
                    int v104 = *v103;
                    v103 += 6;
                    if (v104 == v97) {
                      break;
                    }
                    if (v98 == ++v100) {
                      goto LABEL_157;
                    }
                  }
                }
                LODWORD(v101) = v100;
              }
LABEL_157:
              if (v101 == v98)
              {
                if (!v93)
                {
                  uint64_t v105 = *(void *)v44;
                  do
                  {
                    if (!v93 || *(float *)(v105 + 12) < *(float *)(v93 + 12)) {
                      uint64_t v93 = v105;
                    }
                    v105 += 24;
                    --v98;
                  }
                  while (v98);
                }
                int v106 = (float *)&v95[6 * v92];
                v106[3] = v106[3] + (float)(*(float *)(v93 + 12) + 4.0);
                *((void *)v106 + 2) = v93;
                uint64_t v107 = (_DWORD *)(v93 + 8);
              }
              else
              {
                uint64_t v108 = *(void *)v44 + 24 * (int)v101;
                unint64_t v109 = (float *)&v95[6 * v92];
                v109[3] = *(float *)(v108 + 12) + v109[3];
                *((void *)v109 + 2) = v108;
                uint64_t v107 = (_DWORD *)(v108 + 8);
              }
              ++*v107;
              ++v92;
              uint64_t v58 = *(int *)(v43 + 12);
            }
            while (v92 < v58);
          }
        }
        else
        {
          int v54 = *(_DWORD *)(v43 + 12);
          if (v46)
          {
            if (v54 >= 1)
            {
              int v55 = 0;
              do
              {
                precomp_DoInnerLoop__AssignZeroPathCosts(v48[6], (void *)(v39 + 32 * v42), (uint64_t *)v44, v55);
                int v48 = (uint64_t *)v116;
                ++v55;
              }
              while (v55 < *(_DWORD *)(v43 + 12));
            }
            goto LABEL_81;
          }
          int GranularStep = precomp_getGranularStep(*(void *)(v116 + 48));
          precomp_FetchLeftNodes(*(void *)(v116 + 48), v42, (unsigned int *)v44);
          if (GranularStep < 1) {
            int GranularStep = 1;
          }
          else {
            int v54 = v54 / GranularStep * GranularStep;
          }
          int v48 = (uint64_t *)v116;
          int v57 = 0;
          if (v54 >= 1)
          {
            do
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v48[6] + 1096))(v48[6], v39 + 32 * v42, v44);
              int v48 = (uint64_t *)v116;
              v57 += GranularStep;
            }
            while (v57 < v54);
          }
          while (1)
          {
            LODWORD(v58) = *(_DWORD *)(v43 + 12);
            if (v57 >= (int)v58) {
              break;
            }
            precomp_DoInnerLoop(v48[6], (uint64_t *)(v39 + 32 * v42), (uint64_t *)v44, v57, v42);
            int v48 = (uint64_t *)v116;
            ++v57;
          }
        }
        if (v110 && (int)v58 >= 1)
        {
          unint64_t v59 = 0;
          float v60 = 0;
          uint64_t v61 = *(_DWORD **)v43;
          uint64_t v62 = v58;
          uint64_t v63 = 24 * v58;
          do
          {
            if (!v60 || *(float *)&v61[v59 / 4 + 3] < v60[3]) {
              float v60 = (float *)&v61[v59 / 4];
            }
            v59 += 24;
          }
          while (v63 != v59);
          if (v60)
          {
            uint64_t v64 = *((void *)v60 + 2);
            if (v64)
            {
              unint64_t v65 = 0;
              uint64_t v66 = 24 * v62;
              do
              {
                uint64_t v67 = *(void *)&v61[v65 / 4 + 4];
                if (v67)
                {
                  if (v67 == v64) {
                    *(_DWORD *)(v64 + 8) = 1;
                  }
                  else {
                    *(_DWORD *)(v67 + 8) = 0;
                  }
                }
                v65 += 24;
              }
              while (v66 != v65);
              _DWORD *v61 = v41;
              *((void *)v61 + 2) = v64;
              v61[3] = *((_DWORD *)v60 + 3);
              *(_DWORD *)(v43 + 12) = 1;
              *(_DWORD *)(v39 + 32 * v42 + 24) = 1;
            }
          }
        }
LABEL_81:
        if (BET3FLT__log_select_GetLogLevel(*(void *)(*v48 + 32)) >= 3)
        {
          uint64_t v68 = *(unsigned int *)(v43 + 12);
          if ((int)v68 >= 1)
          {
            double v69 = 0;
            double v70 = *(float **)v43;
            do
            {
              if (!v69 || v70[3] < v69[3]) {
                double v69 = v70;
              }
              v70 += 6;
              --v68;
            }
            while (v68);
            if (v69) {
              UNICORN__log_select_Diag(*(void *)v116, 3, (uint64_t)"Viterbi updateBestPath(): best candidate %d (cost %.3f)\n");
            }
          }
        }
        int v71 = *(_DWORD *)(v116 + 76);
        if (v71 <= 1) {
          return 0;
        }
        uint64_t v72 = *(void *)(v116 + 64);
        if (*(_DWORD *)(*(void *)(v116 + 48) + 1108) == -1)
        {
          float v73 = *(float *)(*(void *)(v116 + 16) + 5568) * 10.0;
          double v74 = (unsigned int *)(v72 + 32 * (v71 - 1));
          uint64_t v75 = v74[3];
          if ((int)v75 < 1)
          {
            uint64_t v76 = 0;
          }
          else
          {
            uint64_t v76 = 0;
            uint64_t v77 = *(void *)v74;
            uint64_t v78 = v74[3];
            do
            {
              if (!v76 || *(float *)(v77 + 12) < *(float *)(v76 + 12)) {
                uint64_t v76 = v77;
              }
              v77 += 24;
              --v78;
            }
            while (v78);
          }
          if (v73 < 40.0)
          {
            uint64_t v79 = *(void *)(*(void *)(v116 + 24) + 1768);
            if (v79)
            {
              if (*(_DWORD *)(v79 + 16) || (int)v75 < 1 || *(_DWORD *)(v79 + 12)) {
                goto LABEL_111;
              }
            }
            else if ((int)v75 < 1)
            {
              goto LABEL_111;
            }
            float v80 = (float *)(*(void *)v74 + 12);
            do
            {
              if (*v80 > (float)(v73 + *(float *)(v76 + 12))) {
                *float v80 = 10000000.0;
              }
              v80 += 6;
              --v75;
            }
            while (v75);
          }
        }
LABEL_111:
        uint64_t v81 = (uint64_t *)(v72 + 32 * (v71 - 2));
        uint64_t v82 = *((unsigned int *)v81 + 3);
        if ((int)v82 >= 1)
        {
          uint64_t v83 = 0;
          uint64_t v84 = *v81;
          uint64_t v85 = v81 + 3;
          uint64_t v86 = v81 - 1;
          do
          {
            if (!*(_DWORD *)(v84 + 24 * v83 + 8))
            {
              --*v85;
              uint64_t v87 = *(void *)(v84 + 24 * v83 + 16);
              if (v87)
              {
                double v88 = v86;
                do
                {
                  int v89 = *(_DWORD *)(v87 + 8);
                  BOOL v90 = __OFSUB__(v89--, 1);
                  *(_DWORD *)(v87 + 8) = v89;
                  if (!((v89 < 0) ^ v90 | (v89 == 0))) {
                    break;
                  }
                  --*(_DWORD *)v88;
                  v88 -= 4;
                  uint64_t v87 = *(void *)(v87 + 16);
                }
                while (v87);
              }
            }
            ++v83;
          }
          while (v83 != v82);
        }
        return 0;
      }
    }
  }
  return v6;
}

uint64_t ViterbiEE_Backtrack(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = 2229280783;
  if ((a2 & 0x80000000) == 0)
  {
    int v9 = *(_DWORD *)(a1 + 76);
    if (v9 > a2)
    {
      uint64_t v11 = (a3 - 1);
      if (a3 >= 1 && v9 >= a3)
      {
        int v12 = a3 - a2;
        if (a3 - a2 < 1)
        {
          return 2229280775;
        }
        else
        {
          uint64_t v17 = *(int *)(a5 + 16);
          int v33 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 568) + 11548);
          uint64_t result = UNICORN__mfs_S32Vect_Reserve(a5, (int)v17 + v12);
          if ((result & 0x80000000) == 0)
          {
            if (!a6 || (uint64_t result = UNICORN__mfs_S32Vect_Reserve(a6, (int)v17 + v12), (result & 0x80000000) == 0))
            {
              if (!a7 || (uint64_t result = UNICORN__mfs_S32Vect_Reserve(a7, (int)v17 + v12), (result & 0x80000000) == 0))
              {
                uint64_t BestNode = ViterbiEE_GetBestNode((uint64_t *)(*(void *)(a1 + 64) + 32 * v11), *(_DWORD *)(a1 + 76) != a3);
                if (BestNode)
                {
                  uint64_t v19 = BestNode;
                  do
                  {
                    UNICORN__log_select_Diag(*(void *)a1, 3, (uint64_t)"Unit %d, cost %.3f\n");
                    UNICORN__mfs_S32Vect_Pad(a5, *(_DWORD *)v19);
                    if (a6) {
                      UNICORN__mfs_F32Vect_Pad(a6, *(float *)(v19 + 12));
                    }
                    uint64_t v19 = *(void *)(v19 + 16);
                    if (v19) {
                      BOOL v20 = v12 <= 1;
                    }
                    else {
                      BOOL v20 = 1;
                    }
                    --v12;
                  }
                  while (!v20);
                }
                uint64_t v21 = *(int *)(a5 + 16);
                if ((int)v17 < (int)v21 - 1)
                {
                  uint64_t v22 = *(void *)(a5 + 8);
                  uint64_t v23 = v21 - 1;
                  uint64_t v24 = v17;
                  do
                  {
                    int v25 = *(_DWORD *)(v22 + 4 * v24);
                    *(_DWORD *)(v22 + 4 * v24) = *(_DWORD *)(v22 + 4 * v23);
                    *(_DWORD *)(v22 + 4 * v23) = v25;
                    if (a6)
                    {
                      uint64_t v26 = *(void *)(a6 + 8);
                      int v27 = *(_DWORD *)(v26 + 4 * v24);
                      *(_DWORD *)(v26 + 4 * v24) = *(_DWORD *)(v26 + 4 * v23);
                      *(_DWORD *)(v26 + 4 * v23) = v27;
                    }
                    ++v24;
                    --v23;
                  }
                  while (v24 < v23);
                }
                if (**(_DWORD **)(a1 + 8) == 2)
                {
                  char v35 = 0;
                  __int16 v34 = 0;
                  if ((int)v17 < *(_DWORD *)(a5 + 16))
                  {
                    uint64_t v28 = v17;
                    do
                    {
                      UNICORN__mfs_Ling_GetPhonCtxt(a4, (int)v28 / **(_DWORD **)(a1 + 8), &v34);
                      if (HIBYTE(v34) == 1) {
                        *(_DWORD *)(*(void *)(a5 + 8) + 4 * v28) = v33;
                      }
                      ++v28;
                    }
                    while (v28 < *(int *)(a5 + 16));
                  }
                }
                if (a7 && (int)v17 < *(_DWORD *)(a5 + 16))
                {
                  uint64_t v29 = 48 * v17;
                  do
                  {
                    if (*(_DWORD *)(*(void *)(a5 + 8) + 4 * v17) == v33
                      || (unsigned int v30 = *(uint64_t **)(*(void *)(a1 + 24) + 1768)) == 0
                      || (uint64_t v31 = *v30, *(_DWORD *)(v31 + v29)))
                    {
                      int v32 = -1;
                    }
                    else
                    {
                      int v32 = UnicornAddon_UID2AddonId(*(void *)(a1 + 32), *(_DWORD *)(a1 + 40), **(_DWORD **)(v31 + v29 + 8));
                    }
                    uint64_t result = 0;
                    *(_DWORD *)(*(void *)(a7 + 8) + 4 * v17++) = v32;
                    v29 += 48;
                  }
                  while (v17 < *(int *)(a5 + 16));
                }
                else
                {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ViterbiEE_GetBestNode(uint64_t *a1, int a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 3);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = *a1;
  do
  {
    if ((!a2 || *(int *)(v5 + 8) >= 1) && (!result || *(float *)(v5 + 12) < *(float *)(result + 12))) {
      uint64_t result = v5;
    }
    v5 += 24;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t ViterbiEE_GetUniquePathLength(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 76);
  if (v2 <= a2) {
    int v2 = a2;
  }
  int v3 = a2 - 1;
  uint64_t v4 = v2 - (uint64_t)a2;
  uint64_t v5 = (32 * a2) | 0x18;
  while (v4)
  {
    int v6 = *(_DWORD *)(*(void *)(a1 + 64) + v5);
    ++v3;
    --v4;
    v5 += 32;
    if (v6 >= 2) {
      return (v3 - a2);
    }
  }
  int v3 = v2;
  return (v3 - a2);
}

uint64_t ViterbiForcedEE_GetPathLength(uint64_t a1, int a2)
{
  uint64_t v2 = *(int *)(a1 + 76);
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(v3 + 5928);
  unsigned int v5 = **(_DWORD **)(a1 + 8) * *(_DWORD *)(v3 + 5932);
  uint64_t v6 = a2;
  if ((int)v2 <= a2) {
    int v7 = a2;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 76);
  }
  unsigned int v8 = ~a2 + v2;
  uint64_t v9 = (32 * a2) | 0x18;
  int v10 = a2;
  int v11 = a2;
  do
  {
    if (v7 == v6) {
      break;
    }
    if (*(_DWORD *)(*(void *)(a1 + 64) + v9) <= v4) {
      ++v10;
    }
    if (v8 > v5) {
      ++v11;
    }
    BOOL v12 = v6 < v10 || v6 < v11;
    ++v6;
    --v8;
    v9 += 32;
  }
  while (v12);
  if (v10 <= a2) {
    int v13 = v11;
  }
  else {
    int v13 = v10;
  }
  uint64_t v14 = (v13 - a2);
  if ((int)v14 >= 1)
  {
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v16 = v15 + 32 * (v2 - 1);
    uint64_t BestNode = (_DWORD *)ViterbiEE_GetBestNode((uint64_t *)(v15 + 32 * (v13 - 1)), 1);
    for (uint64_t i = 0; i != (*(_DWORD *)(v16 + 12) & ~(*(int *)(v16 + 12) >> 31)); ++i)
    {
      if (*(float *)(*(void *)v16 + 24 * i + 12) >= 10000000.0)
      {
        BOOL v21 = 0;
      }
      else
      {
        uint64_t v19 = *(void *)v16 + 24 * i;
        if ((int)v2 > v13)
        {
          int v20 = v2;
          do
          {
            uint64_t v19 = *(void *)(v19 + 16);
            --v20;
          }
          while (v20 > v13);
        }
        BOOL v21 = *(_DWORD *)v19 == *BestNode;
      }
      if (v21) {
        return v14;
      }
    }
    return 0;
  }
  return v14;
}

uint64_t ViterbiForcedEE_KillPaths(uint64_t result, int a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 64);
  int v5 = *(_DWORD *)(*(void *)(a4 + 8) + 4 * a2);
  uint64_t v6 = *(void *)(result + 8);
  if ((*(_DWORD *)v6 != 2 || v5 != *(_DWORD *)(*(void *)(v6 + 568) + 11548))
    && *(_DWORD *)(v4 + 32 * a2 + 24) != 1)
  {
    int v7 = (uint64_t *)(v4 + 32 * a3);
    uint64_t v8 = *((unsigned int *)v7 + 3);
    if ((int)v8 >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *v7;
      do
      {
        uint64_t v11 = v10 + 24 * v9;
        if (a3 > a2)
        {
          int v12 = a3;
          do
          {
            uint64_t v11 = *(void *)(v11 + 16);
            --v12;
          }
          while (v12 > a2);
        }
        if (*(_DWORD *)v11 != v5) {
          *(_DWORD *)(v10 + 24 * v9 + 12) = 1259902592;
        }
        ++v9;
      }
      while (v9 != v8);
    }
  }
  return result;
}

uint64_t comparePathScores(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 12);
  float v3 = *(float *)(a2 + 12);
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3 < v2;
  }
}

uint64_t UNICORN__mfs_Ling_GetPhonCtxt(uint64_t result, int a2, unsigned char *a3)
{
  if (a2 < 1) {
    char v3 = 0;
  }
  else {
    char v3 = *(unsigned char *)(*(void *)(result + 32) + (a2 - 1));
  }
  *a3 = v3;
  uint64_t v4 = a2 + 1;
  if ((int)v4 >= *(__int16 *)(result + 10)) {
    char v5 = 0;
  }
  else {
    char v5 = *(unsigned char *)(*(void *)(result + 32) + v4);
  }
  a3[2] = v5;
  a3[1] = *(unsigned char *)(*(void *)(result + 32) + a2);
  return result;
}

uint64_t UNICORN__mfs_Ling_LogPhonCtxt(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = BET3FLT__log_select_GetLogLevel(*(void *)(a1 + 32));
  if (result >= 3)
  {
    uint64_t v9 = *(void *)(a3 + 32);
    if (a4 >= 1)
    {
      for (uint64_t i = 0; i != 256; ++i)
      {
        if (*(unsigned __int8 *)(a2 + 4780 + i) == *(unsigned __int8 *)(v9 + (a4 - 1))) {
          break;
        }
      }
    }
    for (uint64_t j = 0; j != 256; ++j)
    {
      if (*(unsigned __int8 *)(a2 + 4780 + j) == *(unsigned __int8 *)(v9 + a4)) {
        break;
      }
    }
    uint64_t v12 = a4 + 1;
    if ((int)v12 < *(__int16 *)(a3 + 10))
    {
      uint64_t v13 = 0;
      int v14 = *(unsigned __int8 *)(v9 + v12);
      do
      {
        if (*(unsigned __int8 *)(a2 + 4780 + v13) == v14) {
          break;
        }
        ++v13;
      }
      while (v13 != 256);
    }
    return UNICORN__log_select_Diag(a1, 3, (uint64_t)"[%c-%c+%c]\n");
  }
  return result;
}

uint64_t UNICORN__mfs_Ling_WrdPosShpInPhrs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1496);
  if (v2) {
    return *(unsigned __int8 *)(v2 + a2);
  }
  else {
    return 100;
  }
}

uint64_t UNICORN__mfs_Ling_WrdPosInPhrs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (v2) {
    return *(unsigned __int8 *)(v2 + a2);
  }
  else {
    return 0;
  }
}

uint64_t UNICORN__mfs_Ling_WrdProminence(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2) {
    return *(unsigned __int8 *)(v2 + a2);
  }
  else {
    return 5;
  }
}

uint64_t UNICORN__mfs_Ling_WrdShpProminence(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1424);
  if (v2) {
    return *(unsigned __int8 *)(v2 + a2);
  }
  else {
    return 5;
  }
}

float UNICORN__mfs_Ling_TransWeightsDiphADJ(void *a1, int a2)
{
  uint64_t v2 = *(unsigned __int16 *)(*a1 + 3360);
  float result = 0.0;
  if (*(_WORD *)(*a1 + 3360))
  {
    uint64_t v4 = 0;
    char v5 = *(int **)(*a1 + 3368);
    while (1)
    {
      int v6 = *v5;
      v5 += 3;
      if (v6 == 1) {
        break;
      }
      if (-v2 == --v4) {
        return result;
      }
    }
    if ((int)v4 <= 0) {
      return (float)*(unsigned int *)(a1[448] + 4 * ((int)v2 * a2 - (int)v4)) / 100000.0;
    }
  }
  return result;
}

float UNICORN__mfs_Ling_TransWeightsDiphMCP(void *a1, int a2)
{
  uint64_t v2 = *(unsigned __int16 *)(*a1 + 3360);
  float result = 0.0;
  if (*(_WORD *)(*a1 + 3360))
  {
    uint64_t v4 = 0;
    char v5 = *(int **)(*a1 + 3368);
    while (1)
    {
      int v6 = *v5;
      v5 += 3;
      if (v6 == 3) {
        break;
      }
      if (-v2 == --v4) {
        return result;
      }
    }
    if ((int)v4 <= 0) {
      return (float)*(unsigned int *)(a1[448] + 4 * ((int)v2 * a2 - (int)v4)) / 1000.0;
    }
  }
  return result;
}

float UNICORN__mfs_Ling_TransWeightsDiphLF0(void *a1, int a2)
{
  uint64_t v2 = *(unsigned __int16 *)(*a1 + 3360);
  float result = 0.0;
  if (*(_WORD *)(*a1 + 3360))
  {
    uint64_t v4 = 0;
    char v5 = *(int **)(*a1 + 3368);
    while (1)
    {
      int v6 = *v5;
      v5 += 3;
      if (v6 == 2) {
        break;
      }
      if (-v2 == --v4) {
        return result;
      }
    }
    if ((int)v4 <= 0) {
      return (float)*(unsigned int *)(a1[448] + 4 * ((int)v2 * a2 - (int)v4)) / 1000.0;
    }
  }
  return result;
}

float UNICORN__mfs_Ling_TransWeightsPhonADJ(void *a1, int a2)
{
  uint64_t v2 = *(unsigned __int16 *)(*a1 + 3360);
  float result = 0.0;
  if (*(_WORD *)(*a1 + 3360))
  {
    uint64_t v4 = 0;
    char v5 = *(int **)(*a1 + 3368);
    while (1)
    {
      int v6 = *v5;
      v5 += 3;
      if (v6 == 1) {
        break;
      }
      if (-v2 == --v4) {
        return result;
      }
    }
    if ((int)v4 <= 0) {
      return (float)*(unsigned int *)(a1[449] + 4 * ((int)v2 * a2 - (int)v4)) / 100000.0;
    }
  }
  return result;
}

float UNICORN__mfs_Ling_TransWeightsPhonMCP(void *a1, int a2)
{
  uint64_t v2 = *(unsigned __int16 *)(*a1 + 3360);
  float result = 0.0;
  if (*(_WORD *)(*a1 + 3360))
  {
    uint64_t v4 = 0;
    char v5 = *(int **)(*a1 + 3368);
    while (1)
    {
      int v6 = *v5;
      v5 += 3;
      if (v6 == 3) {
        break;
      }
      if (-v2 == --v4) {
        return result;
      }
    }
    if ((int)v4 <= 0) {
      return (float)*(unsigned int *)(a1[449] + 4 * ((int)v2 * a2 - (int)v4)) / 1000.0;
    }
  }
  return result;
}

float UNICORN__mfs_Ling_TransWeightsPhonLF0(void *a1, int a2)
{
  uint64_t v2 = *(unsigned __int16 *)(*a1 + 3360);
  float result = 0.0;
  if (*(_WORD *)(*a1 + 3360))
  {
    uint64_t v4 = 0;
    char v5 = *(int **)(*a1 + 3368);
    while (1)
    {
      int v6 = *v5;
      v5 += 3;
      if (v6 == 2) {
        break;
      }
      if (-v2 == --v4) {
        return result;
      }
    }
    if ((int)v4 <= 0) {
      return (float)*(unsigned int *)(a1[449] + 4 * ((int)v2 * a2 - (int)v4)) / 1000.0;
    }
  }
  return result;
}

uint64_t UNICORN__mfs_ParamGenStart(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)a1;
  uint64_t inited = UNICORN__InitUttModel(*(void *)a1, a1 + 56, a2, *(__int16 *)(*(void *)(a1 + 8) + 10));
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *(_DWORD *)(a1 + 16) = a3[8];
  *(void *)(a1 + 1072) = v6;
  if (*(int *)(a1 + 392) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v62 = (uint64_t)(v4 + 64);
    uint64_t v49 = a3 + 182;
    uint64_t v50 = *(void *)(*(void *)(a1 + 8) + 1784);
    uint64_t v53 = (uint64_t)a3;
    uint64_t v58 = v4;
    uint64_t v61 = v6;
    while (1)
    {
      UNICORN__log_select_Diag(v6, 21, (uint64_t)"[phoneme %d]\n");
      uint64_t v14 = *(void *)(a1 + 384);
      uint64_t v56 = v14;
      if (*(int *)(a1 + 32) >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v49;
        do
        {
          uint64_t v17 = a3[v15 + 61];
          if ((int)v17 < 1)
          {
            LODWORD(v18) = 0;
          }
          else
          {
            uint64_t v18 = 0;
            uint64_t v19 = (const char **)&a3[2 * *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8) + 248) + v8) + 682];
            while (1)
            {
              int v20 = *(const char **)&v16[2 * v18];
              if (v20)
              {
                if (*v19 && !strcmp(v20, *v19)) {
                  break;
                }
              }
              if (v17 == ++v18)
              {
                LODWORD(v18) = 0;
                break;
              }
            }
            uint64_t v14 = v56;
          }
          *(_DWORD *)(v14 + 312 * v8 + 4 * v15++ + 36) = v18;
          v16 += 10;
        }
        while (v15 < *(int *)(a1 + 32));
      }
      uint64_t v4 = v58;
      if (v50)
      {
        if (a3[29])
        {
          uint64_t v44 = 2229280769;
          BOOL v46 = "Phoneme level segmentation is not currently supported\n";
          uint64_t v47 = v6;
          uint64_t v48 = 58016;
          goto LABEL_54;
        }
        if (a3[28]) {
          break;
        }
      }
      BOOL v21 = (int32x2_t *)(v14 + 312 * v8);
      v21[1].i32[0] = UNICORN__TreeSearch(*(void *)(a1 + 8), v8, v62, 0, 0);
      UNICORN__log_select_Diag(v6, 6, (uint64_t)"DUR pdf id %d\n");
      uint64_t inited = UNICORN__FindDurPDF(v21, v58, 0, v21[4].i32[1], 0.0);
      if ((inited & 0x80000000) != 0) {
        return inited;
      }
      *(_DWORD *)(a1 + 408) += *(_DWORD *)(v14 + 312 * v8 + 24);
      int v22 = *(_DWORD *)(a1 + 32);
      if (v22 >= 1)
      {
        for (uint64_t i = 0; i < v22; ++i)
        {
          uint64_t v24 = *(void *)(a1 + 24);
          if (!*(_DWORD *)(v24 + 1520 * i + 1472))
          {
            if (*(_DWORD *)(v24 + 1520 * i + 1480))
            {
              uint64_t v25 = a1 + 8 * i;
              int v26 = *v4 * v8;
              uint64_t v54 = *(void *)(*(void *)(v25 + 208) + 8 * v26);
              uint64_t v55 = *(void *)(*(void *)(v25 + 168) + 8 * v26);
            }
            int v27 = (char *)v4 + 2 * i;
            if (*((_WORD *)v27 + 176))
            {
              uint64_t v28 = 0;
              uint64_t v29 = v14;
              unint64_t v30 = 0;
              uint64_t v31 = v29 + 312 * v8;
              int v32 = (void *)(v31 + 8 * i);
              unint64_t v59 = (unsigned __int16 *)(v27 + 352);
              float v60 = &v4[2 * i + 78];
              int v33 = v32 + 7;
              uint64_t v34 = (uint64_t)&v4[i + 1];
              char v35 = v32 + 12;
              uint64_t v36 = a3;
              int v37 = v32 + 17;
              uint64_t v51 = &v36[i + 46];
              char v52 = (_DWORD *)v34;
              int v57 = (int *)(v31 + 4 * i + 36);
              do
              {
                uint64_t v38 = *(unsigned __int16 *)(*(void *)v60 + v28);
                *(_DWORD *)(*v33 + 4 * v38) = UNICORN__TreeSearch(*(void *)(a1 + 8), v8, v62, i, v30);
                UNICORN__log_select_Diag(v61, 6, (uint64_t)"%s pdf state %d id %d\n");
                uint64_t v39 = *(void *)(a1 + 24);
                if (*(_DWORD *)(v39 + 1520 * i + 1480))
                {
                  int v40 = v38 - 2;
                  int v41 = v40 + v40 * *v52;
                  *(void *)(*v35 + 8 * v38) = v55 + 4 * v41;
                  *(void *)(*v35 + 8 * v38) -= 4;
                  *(void *)(*v37 + 8 * v38) = v54 + 4 * v41;
                  *(void *)(*v37 + 8 * v38) -= 4;
                  uint64_t v42 = *(void **)(a1 + 1768);
                  if (v42 && *v51 == 2) {
                    uint64_t LF0PDF_PerStateRho = UNICORN__FindLF0PDF_PerStateRho(i, v38, (uint64_t)v21, (uint64_t)v58, v53, *v57, *(_DWORD *)(*(void *)(a1 + 24) + 1520 * i + 1484), *(float *)(*v42 + 48 * (v40 + *v58 * v8) + 20));
                  }
                  else {
                    uint64_t LF0PDF_PerStateRho = UNICORN__FindMsdPDF(i, v38, (uint64_t)v21, (uint64_t)v58, v53, *v57);
                  }
                  uint64_t v44 = LF0PDF_PerStateRho;
                  if ((LF0PDF_PerStateRho & 0x80000000) != 0) {
                    return v44;
                  }
                }
                else if (*(_DWORD *)(v39 + 1520 * i + 1476))
                {
                  uint64_t inited = UNICORN__FindContPDF(i, v38, (uint64_t)v21, (uint64_t)v58, *v57);
                  if ((inited & 0x80000000) != 0) {
                    return inited;
                  }
                }
                ++v30;
                v28 += 16;
              }
              while (v30 < *v59);
              int v22 = *(_DWORD *)(a1 + 32);
              a3 = (_DWORD *)v53;
              uint64_t v4 = v58;
              uint64_t v14 = v56;
            }
          }
        }
      }
      ++v8;
      uint64_t v6 = v61;
      if (v8 >= *(int *)(a1 + 392)) {
        goto LABEL_41;
      }
    }
    uint64_t v44 = 2229280769;
    BOOL v46 = "State level segmentation is not currently supported\n";
    uint64_t v47 = v6;
    uint64_t v48 = 58017;
LABEL_54:
    UNICORN__log_select_Error(v47, v48, (uint64_t)v46, v9, v10, v11, v12, v13);
    return v44;
  }
LABEL_41:
  if (BET3FLT__log_select_GetLogLevel(*(void *)(v6 + 32)) >= 0x15) {
    OutLabel_1(a1);
  }
  uint64_t inited = mfs_SegmentList_InitPrealloc(v6, (uint64_t)v4, *v4 * *(__int16 *)(*(void *)(a1 + 8) + 10), a1 + 1520);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = mfs_SegmentList_InitPrealloc(v6, (uint64_t)v4, *v4 * *(__int16 *)(*(void *)(a1 + 8) + 10), a1 + 1552);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (!a3[1684]) {
    return 2229280769;
  }
  return PredictPipeline_ProcessStart(a1, (uint64_t)v4, (uint64_t)a3);
}

uint64_t OutLabel_1(uint64_t result)
{
  if (*(int *)(result + 392) >= 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v1 + 384) + v2;
      float result = UNICORN__log_select_Diag(*(void *)v1, 21, (uint64_t)"%d %d %d [%d]\n");
      v4 += *(_DWORD *)(v5 + 24);
      ++v3;
      v2 += 312;
    }
    while (v3 < *(int *)(v1 + 392));
  }
  return result;
}

uint64_t UNICORN__mfs_ParamGenContinue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 6736)) {
    return PredictPipeline_Process(*(void *)(a1 + 1760));
  }
  else {
    return 2229280769;
  }
}

uint64_t mfs_FillModelSegmentsPartial(int *a1, uint64_t *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  LODWORD(v8) = a4;
  UNICORN__log_select_Diag(*a2, 1, (uint64_t)"  -> GetParametricSegments\n");
  if ((int)v8 < 1)
  {
    int v13 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    int v13 = 0;
    int v14 = *a1;
    do
    {
      if (v14 >= 1)
      {
        uint64_t v15 = (int *)(*(void *)(a2[48] + 312 * v12 + 16) + 8);
        uint64_t v16 = (v14 + 2) - 2;
        do
        {
          int v17 = *v15++;
          v13 += *(_DWORD *)(a3 + 24) * v17;
          --v16;
        }
        while (v16);
      }
      ++v12;
    }
    while (v12 != v8);
  }
  if ((int)v8 > a5) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v8 = (int)v8;
  int v19 = a5 + 1;
  LODWORD(v20) = *a1;
  while ((int)v20 < 1)
  {
LABEL_17:
    if (v19 == ++v8) {
      return result;
    }
  }
  uint64_t v21 = a2[48] + 312 * v8;
  uint64_t v24 = *(void *)(v21 + 16);
  uint64_t v23 = (uint64_t *)(v21 + 16);
  uint64_t v22 = v24;
  int v25 = *(_DWORD *)(a3 + 24);
  uint64_t v26 = 2;
  while (1)
  {
    uint64_t result = UNICORN__mfs_SegmentList_Add(a6, -1, *(unsigned char *)(*(void *)(a2[1] + 32) + v8), v13, v25 * *(_DWORD *)(v22 + 4 * v26));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v22 = *v23;
    int v25 = *(_DWORD *)(a3 + 24);
    v13 += v25 * *(_DWORD *)(*v23 + 4 * v26);
    uint64_t v20 = *a1;
    if (v26++ > v20) {
      goto LABEL_17;
    }
  }
}

uint64_t mfs_TCost_Elf0_Manhattan_Clusterize_SIMD(float *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, double a6, double a7, double a8, float a9, float a10, float a11, float a12, float a13, float a14)
{
  float v20 = 1.0 - a10;
  uint64_t v21 = *(void *)(a2 + 8);
  uint64_t v22 = *(void *)(*(void *)(a2 + 16) + 32 * a3);
  uint64_t v23 = 8 * a5 - 16;
  uint64_t v24 = v21 + v23;
  int v25 = *(int16x4_t **)(*(void *)(v21 + v23 + 1200) + 8 * a4);
  uint64_t v26 = *(int16x4_t **)(*(void *)(v21 + v23 + 1264) + 8 * a4);
  unsigned int v27 = *(_DWORD *)(*(void *)(*(void *)(v21 + 776) + 8 * a5) + 40 * a4 + 4);
  uint64_t v28 = *(unsigned __int8 **)(*(void *)(v24 + 1328) + 8 * a4);
  uint64_t v29 = *(unsigned __int8 **)(a2 + v23 + 112);
  float v30 = a9 * a10;
  float v31 = (float)(1.0 - a10) * a9;
  *(float *)v17.i32 = a1[2897] * a11;
  *(float *)v18.i32 = a1[2899] * a11;
  float v32 = a1[2901];
  unsigned int v33 = v27 & 0xFFFFFFF8;
  if ((v27 & 0xFFFFFFF8) != 0)
  {
    uint64_t v34 = 0;
    unsigned int v35 = 0;
    float32x4_t v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
    float32x4_t v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    float32x4_t v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
    uint64_t v39 = a1 + 1514;
    float32x4_t v40 = vld1q_dup_f32(v39);
    float32x4_t v41 = vrecpeq_f32(v40);
    float32x4_t v42 = vmulq_f32(v41, vrecpsq_f32(v40, v41));
    float32x4_t v43 = vmulq_f32(vrecpsq_f32(v40, v42), v42);
    uint64_t v44 = a1 + 1504;
    float32x4_t v45 = vld1q_dup_f32(v44);
    float32x4_t v46 = (float32x4_t)vdupq_lane_s32(v17, 0);
    float32x4_t v47 = (float32x4_t)vdupq_lane_s32(v18, 0);
    BOOL v48 = a11 != 0.0;
    if (a12 != 0.0) {
      BOOL v48 = 1;
    }
    if (a13 != 0.0) {
      BOOL v48 = 1;
    }
    if (a14 != 0.0) {
      BOOL v48 = 1;
    }
    uint64_t v49 = v29;
    while (1)
    {
      unsigned int v51 = *v49++;
      unsigned int v50 = v51;
      char v52 = (__int32 *)&v28[v34];
      if ((v51 & 0xF) == 0) {
        goto LABEL_16;
      }
      v19.i32[0] = *v52;
      float32x4_t v53 = vaddq_f32(v45, vmulq_f32(v43, vcvtq_f32_s32(vmovl_s16(*v25))));
      float32x4_t v54 = vaddq_f32(v45, vmulq_f32(v43, vcvtq_f32_s32(vmovl_s16(*v26))));
      float32x4_t v55 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v19.f32)));
      float32x4_t v56 = vrecpeq_f32(v55);
      float32x4_t v57 = vmulq_f32(v56, vrecpsq_f32(v55, v56));
      float32x4_t v58 = vmulq_f32(vrecpsq_f32(v55, v57), v57);
      float32x4_t v59 = vabdq_f32(v36, v53);
      float32x4_t v60 = vmaxq_f32(v36, v53);
      float32x4_t v61 = vrecpeq_f32(v60);
      float32x4_t v62 = vmulq_f32(v61, vrecpsq_f32(v60, v61));
      float32x4_t v63 = vmulq_f32(v59, vmulq_f32(vrecpsq_f32(v60, v62), v62));
      float32x4_t v64 = vabdq_f32(v37, v54);
      float32x4_t v65 = vmaxq_f32(v37, v54);
      float32x4_t v66 = vrecpeq_f32(v65);
      float32x4_t v67 = vmulq_f32(v66, vrecpsq_f32(v65, v66));
      float32x4_t v68 = vabdq_f32(v38, vmulq_f32(v58, vsubq_f32(v53, v54)));
      float32x4_t v19 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v68, a10), vmulq_n_f32(vaddq_f32(v63, vmulq_f32(v64, vmulq_f32(vrecpsq_f32(v65, v67), v67))), v20)), a9);
      if (v48)
      {
        float32x4_t v86 = vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vmulq_n_f32(vmulq_n_f32(v59, a12), v31), (int8x16_t)vcgtq_f32(v59, v46)), v19);
        int8x16_t v87 = (int8x16_t)vcgtq_f32(v64, v47);
        float32x4_t v19 = vaddq_f32(vaddq_f32(v86, (float32x4_t)vandq_s8((int8x16_t)vmulq_n_f32(vmulq_n_f32(v64, a12), v31), v87)), (float32x4_t)vandq_s8((int8x16_t)vmulq_n_f32(vmulq_n_f32(v68, a14), v30), v87));
        if ((v50 & 1) == 0)
        {
LABEL_12:
          if ((v50 & 2) == 0) {
            goto LABEL_13;
          }
          goto LABEL_26;
        }
      }
      else if ((v50 & 1) == 0)
      {
        goto LABEL_12;
      }
      uint64_t v88 = v22 + 12 * v35++;
      *(float *)(v88 + 4) = v19.f32[0] + *(float *)(v88 + 4);
      if ((v50 & 2) == 0)
      {
LABEL_13:
        if ((v50 & 4) == 0) {
          goto LABEL_14;
        }
        goto LABEL_27;
      }
LABEL_26:
      uint64_t v89 = v22 + 12 * v35++;
      *(float *)(v89 + 4) = v19.f32[1] + *(float *)(v89 + 4);
      if ((v50 & 4) == 0)
      {
LABEL_14:
        if ((v50 & 8) == 0) {
          goto LABEL_16;
        }
LABEL_15:
        uint64_t v69 = v22 + 12 * v35++;
        *(float *)(v69 + 4) = v19.f32[3] + *(float *)(v69 + 4);
        goto LABEL_16;
      }
LABEL_27:
      uint64_t v90 = v22 + 12 * v35++;
      *(float *)(v90 + 4) = v19.f32[2] + *(float *)(v90 + 4);
      if ((v50 & 8) != 0) {
        goto LABEL_15;
      }
LABEL_16:
      if (v50 < 0x10) {
        goto LABEL_22;
      }
      v19.i32[0] = v52[1];
      float32x4_t v70 = vaddq_f32(v45, vmulq_f32(v43, vcvtq_f32_s32(vmovl_s16(v25[1]))));
      float32x4_t v71 = vaddq_f32(v45, vmulq_f32(v43, vcvtq_f32_s32(vmovl_s16(v26[1]))));
      float32x4_t v72 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v19.f32)));
      float32x4_t v73 = vrecpeq_f32(v72);
      float32x4_t v74 = vmulq_f32(v73, vrecpsq_f32(v72, v73));
      float32x4_t v75 = vmulq_f32(vrecpsq_f32(v72, v74), v74);
      float32x4_t v76 = vabdq_f32(v36, v70);
      float32x4_t v77 = vmaxq_f32(v36, v70);
      float32x4_t v78 = vrecpeq_f32(v77);
      float32x4_t v79 = vmulq_f32(v78, vrecpsq_f32(v77, v78));
      float32x4_t v80 = vmulq_f32(v76, vmulq_f32(vrecpsq_f32(v77, v79), v79));
      float32x4_t v81 = vabdq_f32(v37, v71);
      float32x4_t v82 = vmaxq_f32(v37, v71);
      float32x4_t v83 = vrecpeq_f32(v82);
      float32x4_t v84 = vmulq_f32(v83, vrecpsq_f32(v82, v83));
      float32x4_t v85 = vabdq_f32(v38, vmulq_f32(v75, vsubq_f32(v70, v71)));
      float32x4_t v19 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v85, a10), vmulq_n_f32(vaddq_f32(v80, vmulq_f32(v81, vmulq_f32(vrecpsq_f32(v82, v84), v84))), v20)), a9);
      if (v48)
      {
        float32x4_t v91 = vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vmulq_n_f32(vmulq_n_f32(v76, a12), v31), (int8x16_t)vcgtq_f32(v76, v46)), v19);
        int8x16_t v92 = (int8x16_t)vcgtq_f32(v81, v47);
        float32x4_t v19 = vaddq_f32(vaddq_f32(v91, (float32x4_t)vandq_s8((int8x16_t)vmulq_n_f32(vmulq_n_f32(v81, a12), v31), v92)), (float32x4_t)vandq_s8((int8x16_t)vmulq_n_f32(vmulq_n_f32(v85, a14), v30), v92));
        if ((v50 & 0x10) == 0)
        {
LABEL_19:
          if ((v50 & 0x20) == 0) {
            goto LABEL_20;
          }
          goto LABEL_31;
        }
      }
      else if ((v50 & 0x10) == 0)
      {
        goto LABEL_19;
      }
      uint64_t v93 = v22 + 12 * v35++;
      *(float *)(v93 + 4) = v19.f32[0] + *(float *)(v93 + 4);
      if ((v50 & 0x20) == 0)
      {
LABEL_20:
        if ((v50 & 0x40) == 0) {
          goto LABEL_21;
        }
        goto LABEL_32;
      }
LABEL_31:
      uint64_t v94 = v22 + 12 * v35++;
      *(float *)(v94 + 4) = v19.f32[1] + *(float *)(v94 + 4);
      if ((v50 & 0x40) == 0)
      {
LABEL_21:
        if ((v50 & 0x80) != 0) {
          goto LABEL_33;
        }
        goto LABEL_22;
      }
LABEL_32:
      uint64_t v95 = v22 + 12 * v35++;
      *(float *)(v95 + 4) = v19.f32[2] + *(float *)(v95 + 4);
      if ((v50 & 0x80) != 0)
      {
LABEL_33:
        uint64_t v96 = v22 + 12 * v35++;
        *(float *)(v96 + 4) = v19.f32[3] + *(float *)(v96 + 4);
      }
LABEL_22:
      v26 += 2;
      v25 += 2;
      v34 += 8;
      if (v34 >= v33)
      {
        unsigned int v33 = ((v33 - 1) & 0xFFFFFFF8) + 8;
        v28 += v34;
        goto LABEL_35;
      }
    }
  }
  unsigned int v35 = 0;
LABEL_35:
  if (v33 < v27)
  {
    float v97 = v32 * a13;
    BOOL v98 = a11 != 0.0;
    if (a12 != 0.0) {
      BOOL v98 = 1;
    }
    if (a13 != 0.0) {
      BOOL v98 = 1;
    }
    if (a14 != 0.0) {
      BOOL v98 = 1;
    }
    float v99 = v31 * a12;
    float v100 = v30 * a14;
    do
    {
      if ((*(_DWORD *)&v29[4 * (v33 >> 5)] >> v33))
      {
        float v101 = (float)v25->i16[0];
        float v102 = 1.0 / a1[1514];
        float v103 = a1[1504];
        float v104 = (float)v26->i16[0];
        float v105 = v103 + (float)(v101 * v102);
        float v106 = v103 + (float)(v104 * v102);
        float v107 = vabds_f32(*(float *)&a6, v105);
        if (v105 >= *(float *)&a6) {
          float v108 = v105;
        }
        else {
          float v108 = *(float *)&a6;
        }
        float v109 = v107 / v108;
        float v110 = vabds_f32(*(float *)&a7, v106);
        if (v106 >= *(float *)&a7) {
          float v111 = v106;
        }
        else {
          float v111 = *(float *)&a7;
        }
        uint64_t v112 = v22 + 12 * v35;
        float v114 = *(float *)(v112 + 4);
        unsigned int v113 = (float *)(v112 + 4);
        float v115 = v114
             + (float)(a9
                     * (float)((float)(fabsf(*(float *)&a8 - (float)((float)(v105 - v106) * a1[*v28 + 2616])) * a10)
                             + (float)(v20 * (float)(v109 + (float)(v110 / v111)))));
        *unsigned int v113 = v115;
        if (v98)
        {
          float v116 = a1[1514];
          float v117 = a1[1504];
          float v118 = (float)(v101 / v116) + v117;
          float v119 = vabds_f32(*(float *)&a6, v118);
          if (v119 > *(float *)v17.i32)
          {
            float v115 = v115 + (float)(v99 * v119);
            *unsigned int v113 = v115;
            float v116 = a1[1514];
            float v117 = a1[1504];
          }
          float v120 = (float)(v104 / v116) + v117;
          float v121 = vabds_f32(*(float *)&a7, v120);
          if (v121 > *(float *)v18.i32)
          {
            float v115 = v115 + (float)(v99 * v121);
            *unsigned int v113 = v115;
          }
          float v122 = vabds_f32(*(float *)&a8, (float)(v118 - v120) * a1[*v28 + 2616]);
          if (v122 > v97) {
            *unsigned int v113 = v115 + (float)(v100 * v122);
          }
        }
        ++v35;
      }
      int v25 = (int16x4_t *)((char *)v25 + 2);
      uint64_t v26 = (int16x4_t *)((char *)v26 + 2);
      ++v28;
      ++v33;
    }
    while (v27 != v33);
  }
  return 0;
}

uint64_t mfs_bnfData_Clusterize_Block_Distance_fxd16_SIMD(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, float *a6, float a7)
{
  uint64_t v116 = 0;
  uint64_t v11 = a5 - 2;
  uint64_t v12 = (void *)(a1 + 8 * v11);
  uint64_t v13 = a4;
  uint64_t v14 = *(unsigned int *)(v12[108] + 4 * a4);
  unsigned int v15 = *(unsigned __int8 *)(a1 + 1520);
  if (*(_DWORD *)(a1 + 1524) == 1)
  {
    uint64_t v16 = a2;
    uint64_t result = brk_DataMap(*(void *)(a2 + 24), *(void *)(a1 + 2464), (*(_DWORD *)(v12[192] + 4 * a4) + *(_DWORD *)(a1 + 1528)), v14 * v15, (uint64_t)&v116);
    if ((result & 0x80000000) != 0)
    {
      uint64_t v115 = result;
      UNICORN__log_select_Error(v16, 74001, (uint64_t)"ODLBNF DataMap (%u,%u) Error %x", v18, v19, v20, v21, v22);
      return v115;
    }
    a2 = v16;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v116 = *(void *)(v12[134] + 8 * a4);
  }
  uint64_t v23 = *(float **)(*(void *)(a1 + 8 * v11 + 1136) + 8 * v13);
  if (v15 == 160)
  {
    if (v14)
    {
      uint64_t v24 = v116;
      do
      {
        int8x16_t v25 = *(int8x16_t *)(v24 + 16);
        int16x8_t v26 = vmovl_s8(*(int8x8_t *)v24);
        int16x8_t v27 = vmovl_high_s8(*(int8x16_t *)v24);
        int16x8_t v28 = *(int16x8_t *)(a3 + 16);
        int32x4_t v29 = vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)a3);
        int32x4_t v30 = vmull_high_s16(v26, *(int16x8_t *)a3);
        int32x4_t v31 = vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v28.i8);
        int32x4_t v32 = vpaddq_s32(v29, v30);
        int32x4_t v33 = vmull_high_s16(v27, v28);
        int16x8_t v34 = vmovl_s8(*(int8x8_t *)v25.i8);
        int16x8_t v35 = vmovl_high_s8(v25);
        int16x8_t v36 = *(int16x8_t *)(a3 + 32);
        int16x8_t v37 = *(int16x8_t *)(a3 + 48);
        int32x4_t v38 = vpaddq_s32(v31, v33);
        int32x4_t v39 = vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v36.i8);
        int32x4_t v40 = vmull_high_s16(v34, v36);
        int32x4_t v41 = vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v37.i8);
        int32x4_t v42 = vmull_high_s16(v35, v37);
        int32x4_t v43 = vpaddq_s32(v39, v40);
        int8x16_t v45 = *(int8x16_t *)(v24 + 32);
        int8x16_t v44 = *(int8x16_t *)(v24 + 48);
        int16x8_t v46 = vmovl_s8(*(int8x8_t *)v45.i8);
        int16x8_t v47 = vmovl_high_s8(v45);
        int16x8_t v48 = *(int16x8_t *)(a3 + 64);
        int16x8_t v49 = *(int16x8_t *)(a3 + 80);
        int32x4_t v50 = vpaddq_s32(v41, v42);
        int32x4_t v51 = vmull_s16(*(int16x4_t *)v46.i8, *(int16x4_t *)v48.i8);
        int32x4_t v52 = vmull_high_s16(v46, v48);
        int32x4_t v53 = vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v49.i8);
        int32x4_t v54 = vmull_high_s16(v47, v49);
        int16x8_t v55 = vmovl_s8(*(int8x8_t *)v44.i8);
        int32x4_t v56 = vpaddq_s32(v51, v52);
        int16x8_t v57 = vmovl_high_s8(v44);
        int16x8_t v58 = *(int16x8_t *)(a3 + 112);
        int32x4_t v59 = vpaddq_s32(v53, v54);
        int32x4_t v60 = vpaddq_s32(vmull_s16(*(int16x4_t *)v55.i8, *(int16x4_t *)(a3 + 96)), vmull_high_s16(v55, *(int16x8_t *)(a3 + 96)));
        int32x4_t v61 = vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v58.i8);
        int32x4_t v62 = vmull_high_s16(v57, v58);
        int8x16_t v63 = *(int8x16_t *)(v24 + 64);
        int8x16_t v64 = *(int8x16_t *)(v24 + 80);
        int32x4_t v65 = vpaddq_s32(v61, v62);
        int16x8_t v66 = vmovl_s8(*(int8x8_t *)v63.i8);
        int16x8_t v67 = vmovl_high_s8(v63);
        int32x4_t v68 = vaddq_s32(v43, v32);
        int32x4_t v69 = vpaddq_s32(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)(a3 + 128)), vmull_high_s16(v66, *(int16x8_t *)(a3 + 128)));
        int32x4_t v70 = vpaddq_s32(vmull_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)(a3 + 144)), vmull_high_s16(v67, *(int16x8_t *)(a3 + 144)));
        int32x4_t v71 = vaddq_s32(v50, v38);
        int16x8_t v72 = vmovl_s8(*(int8x8_t *)v64.i8);
        int16x8_t v73 = vmovl_high_s8(v64);
        int32x4_t v74 = vaddq_s32(v56, v60);
        int32x4_t v75 = vpaddq_s32(vmull_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)(a3 + 176)), vmull_high_s16(v73, *(int16x8_t *)(a3 + 176)));
        int32x4_t v76 = vaddq_s32(v59, v65);
        int8x16_t v77 = *(int8x16_t *)(v24 + 96);
        int8x16_t v78 = *(int8x16_t *)(v24 + 112);
        int16x8_t v79 = vmovl_s8(*(int8x8_t *)v77.i8);
        int16x8_t v80 = vmovl_high_s8(v77);
        int32x4_t v81 = vaddq_s32(v69, vpaddq_s32(vmull_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)(a3 + 160)), vmull_high_s16(v72, *(int16x8_t *)(a3 + 160))));
        int32x4_t v82 = vaddq_s32(v70, v75);
        int32x4_t v83 = vpaddq_s32(vmull_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)(a3 + 208)), vmull_high_s16(v80, *(int16x8_t *)(a3 + 208)));
        int16x8_t v84 = vmovl_s8(*(int8x8_t *)v78.i8);
        int16x8_t v85 = vmovl_high_s8(v78);
        int32x4_t v86 = vaddq_s32(v68, v74);
        int32x4_t v87 = vaddq_s32(v71, v76);
        int32x4_t v88 = vpaddq_s32(vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)(a3 + 240)), vmull_high_s16(v85, *(int16x8_t *)(a3 + 240)));
        int8x16_t v89 = *(int8x16_t *)(v24 + 128);
        int8x16_t v90 = *(int8x16_t *)(v24 + 144);
        int16x8_t v91 = vmovl_s8(*(int8x8_t *)v89.i8);
        int16x8_t v92 = vmovl_high_s8(v89);
        int32x4_t v93 = vaddq_s32(v86, vaddq_s32(v81, vpaddq_s32(vmull_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)(a3 + 192)), vmull_high_s16(v79, *(int16x8_t *)(a3 + 192)))));
        int32x4_t v94 = vaddq_s32(v88, vpaddq_s32(vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)(a3 + 272)), vmull_high_s16(v92, *(int16x8_t *)(a3 + 272))));
        int16x8_t v95 = vmovl_s8(*(int8x8_t *)v90.i8);
        int32x4_t v96 = vaddq_s32(v87, vaddq_s32(v82, v83));
        int16x8_t v97 = vmovl_high_s8(v90);
        int32x4_t v98 = vpaddq_s32(vaddq_s32(v93, vaddq_s32(vaddq_s32(vpaddq_s32(vmull_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)(a3 + 224)), vmull_high_s16(v84, *(int16x8_t *)(a3 + 224))), vpaddq_s32(vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)(a3 + 256)), vmull_high_s16(v91, *(int16x8_t *)(a3 + 256)))), vpaddq_s32(vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)(a3 + 288)), vmull_high_s16(v95, *(int16x8_t *)(a3 + 288))))), vaddq_s32(v96, vaddq_s32(v94, vpaddq_s32(vmull_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)(a3 + 304)),
                      vmull_high_s16(v97, *(int16x8_t *)(a3 + 304))))));
        int32x4_t v99 = vpaddq_s32(v98, v98);
        float v100 = *v23++;
        *a6++ = (float)((float)-(float)(v100 * a7) * (float)vpaddq_s32(v99, v99).i32[0]) + 1.0;
        v24 += 160;
        --v14;
      }
      while (v14);
    }
  }
  else if (v14)
  {
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    uint64_t v103 = v116;
    do
    {
      if (v15)
      {
        uint64_t v104 = 0;
        int32x4_t v105 = 0uLL;
        int32x4_t v106 = 0uLL;
        float v107 = (int16x8_t *)a3;
        do
        {
          int8x16_t v108 = *(int8x16_t *)(v103 + v101 + v104);
          int16x8_t v109 = vmovl_s8(*(int8x8_t *)v108.i8);
          int16x8_t v110 = *v107;
          int16x8_t v111 = v107[1];
          v107 += 2;
          int16x8_t v112 = vmovl_high_s8(v108);
          int32x4_t v105 = vaddq_s32(vpaddq_s32(vmull_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v110.i8), vmull_high_s16(v109, v110)), v105);
          int32x4_t v106 = vaddq_s32(vpaddq_s32(vmull_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v111.i8), vmull_high_s16(v112, v111)), v106);
          v104 += 16;
        }
        while (v104 < v15);
      }
      else
      {
        int32x4_t v106 = 0uLL;
        int32x4_t v105 = 0uLL;
      }
      int32x4_t v113 = vpaddq_s32(v105, v106);
      int32x4_t v114 = vpaddq_s32(v113, v113);
      a6[v102] = (float)((float)-(float)(v23[v102] * a7) * (float)vpaddq_s32(v114, v114).i32[0]) + 1.0;
      ++v102;
      v101 += v15;
    }
    while (v102 != v14);
  }
  if (*(_DWORD *)(a1 + 1524) == 1) {
    return brk_DataUnmap(*(void *)(a2 + 24), *(void *)(a1 + 2464), v116);
  }
  return result;
}

uint64_t mfs_bnfData_Distance_Unit_ID_fxd16_SIMD(uint64_t result, uint64_t a2, int16x8_t *a3, unsigned int a4)
{
  uint64_t v6 = result;
  uint64_t v22 = 0;
  uint64_t v7 = *(unsigned __int8 *)(result + 1520);
  if (*(_DWORD *)(result + 1524) == 1)
  {
    uint64_t result = brk_DataMap(*(void *)(a2 + 24), *(void *)(result + 2464), (*(_DWORD *)(result + 1528)+ *(_DWORD *)(*(void *)(result + 848)+ 4 * (a4 / *(_DWORD *)(*(void *)(result + 568) + 5992)))* v7), v7, (uint64_t)&v22);
    if ((result & 0x80000000) != 0) {
      return UNICORN__log_select_Error(a2, 74001, (uint64_t)"ODLBNF DataMap (%u,%u) Error %x", v8, v9, v10, v11, v12);
    }
    uint64_t v13 = v22;
  }
  else
  {
    uint64_t v13 = *(void *)(result + 1000)
        + (*(_DWORD *)(*(void *)(result + 848)
                                   + 4 * (a4 / *(_DWORD *)(*(void *)(result + 568) + 5992)))
                       * v7);
    uint64_t v22 = v13;
  }
  if (v7 && v7 != 160)
  {
    uint64_t v14 = 0;
    int32x4_t v15 = 0uLL;
    int32x4_t v16 = 0uLL;
    do
    {
      int8x16_t v17 = *(int8x16_t *)(v13 + v14);
      int16x8_t v18 = vmovl_s8(*(int8x8_t *)v17.i8);
      int16x8_t v19 = *a3;
      int16x8_t v20 = a3[1];
      a3 += 2;
      int16x8_t v21 = vmovl_high_s8(v17);
      int32x4_t v15 = vaddq_s32(vpaddq_s32(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v19.i8), vmull_high_s16(v18, v19)), v15);
      int32x4_t v16 = vaddq_s32(vpaddq_s32(vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v20.i8), vmull_high_s16(v21, v20)), v16);
      v14 += 16;
    }
    while (v14 < v7);
  }
  if (*(_DWORD *)(v6 + 1524) == 1) {
    return brk_DataUnmap(*(void *)(a2 + 24), *(void *)(v6 + 2464), v13);
  }
  return result;
}

uint64_t mfs_bnfData_Clusterize_Block_Distance_RandomProjection_SIMD(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a6;
  uint64_t v10 = a2;
  float v146 = 0;
  uint64_t v12 = *(unsigned __int8 *)(a1 + 1520);
  float v13 = 3.1416 / (float)((float)v12 * 8.0);
  if (!*(unsigned char *)(a1 + 1520)) {
    float v13 = 0.3927;
  }
  float v145 = v13;
  uint64_t v14 = (void *)(a1 + 8 * ((int)a5 - 2));
  unint64_t v15 = *(unsigned int *)(v14[108] + 4 * a4);
  if (*(_DWORD *)(a1 + 1524) == 1)
  {
    uint64_t v16 = brk_DataMap(*(void *)(a2 + 24), *(void *)(a1 + 2464), (*(_DWORD *)(v14[192] + 4 * a4) + *(_DWORD *)(a1 + 1528)), (v15 * v12), (uint64_t)&v146);
    if ((v16 & 0x80000000) != 0)
    {
      UNICORN__log_select_Error(v10, 74001, (uint64_t)"ODLBNF DataMap (%u,%u) Error %x", a4, a5, a6, a7, a8);
      return v16;
    }
  }
  else
  {
    uint64_t v16 = 0;
    float v146 = *(int8x16_t **)(v14[134] + 8 * a4);
  }
  HIDWORD(v17) = v12;
  LODWORD(v17) = v12 - 8;
  unsigned int v18 = v15 >> 2;
  switch((v17 >> 3))
  {
    case 0u:
      if (v15 >= 4)
      {
        int16x8_t v19 = v146;
        float64x2_t v20 = vld1q_dup_f64((const double *)a3);
        int16x8_t v21 = (float32x4_t *)v8;
        if (v18 <= 1) {
          unsigned int v22 = 1;
        }
        else {
          unsigned int v22 = v15 >> 2;
        }
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v123 = _Q0;
        int8x16_t v128 = (int8x16_t)v20;
        float v118 = v21;
        do
        {
          float32x4_t v140 = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v19, v128))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)((char *)v19 + 2 * v12), v128))))))), v145);
          float v133 = cosf(v140.f32[1]);
          v28.f32[0] = cosf(v140.f32[0]);
          v28.f32[1] = v133;
          float32x4_t v134 = v28;
          float v29 = cosf(v140.f32[2]);
          float32x4_t v30 = v134;
          v30.f32[2] = v29;
          float32x4_t v135 = v30;
          float v31 = cosf(v140.f32[3]);
          float32x4_t v32 = v135;
          v32.f32[3] = v31;
          *v21++ = vsubq_f32(v123, v32);
          int16x8_t v19 = (int8x16_t *)((char *)v19 + 4 * v12);
          --v22;
        }
        while (v22);
        float v146 = v19;
        uint64_t v8 = (uint64_t)v118;
      }
      float v33 = v145;
      if ((v15 & 0xFFFFFFFC) < v15)
      {
        int16x8_t v34 = (int8x8_t *)v146;
        int16x8_t v35 = (float *)(v8 + 16 * (v15 >> 2));
        int v36 = v15 - 4 * (v15 >> 2);
        do
        {
          float v37 = cosf(v33* (float)vpaddl_u32(vpaddl_u16(vpaddl_u8((uint8x8_t)vcnt_s8(veor_s8(*(int8x8_t *)a3, *v34))))));
          float v33 = v145;
          *v35++ = 1.0 - v37;
          int16x8_t v34 = (int8x8_t *)((char *)v34 + v12);
          float v146 = (int8x16_t *)v34;
          --v36;
        }
        while (v36);
      }
      goto LABEL_64;
    case 1u:
      if (v15 >= 4)
      {
        int32x4_t v38 = v146;
        uint64_t v119 = v10;
        if (v18 <= 1) {
          unsigned int v39 = 1;
        }
        else {
          unsigned int v39 = v15 >> 2;
        }
        uint64_t v40 = v8;
        int32x4_t v41 = (float32x2_t *)(v8 + 8);
        __asm { FMOV            V8.2S, #1.0 }
        do
        {
          int32x4_t v43 = v38;
          int64x2_t v44 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)a3, *v38)))));
          int64x2_t v45 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)((char *)v38 + v12), *(int8x16_t *)a3)))));
          int16x8_t v46 = (int8x16_t *)((char *)v38 + v12 + v12);
          int16x8_t v47 = &v46->i8[v12];
          int64x2_t v136 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)((char *)v46 + v12), *(int8x16_t *)a3)))));
          int64x2_t v141 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v46, *(int8x16_t *)a3)))));
          *(float32x2_t *)v44.i8 = vmul_n_f32(vcvt_f32_u32((uint32x2_t)vmovn_s64(vaddq_s64(vzip1q_s64(v44, v45), vzip2q_s64(v44, v45)))), v145);
          float v124 = *(float *)v44.i32;
          float v129 = cosf(*(float *)&v44.i32[1]);
          v48.f32[0] = cosf(v124);
          v48.f32[1] = v129;
          v41[-1] = vsub_f32(_D8, v48);
          float32x2_t v49 = vmul_n_f32(vcvt_f32_u32((uint32x2_t)vmovn_s64(vaddq_s64(vzip1q_s64(v141, v136), vzip2q_s64(v141, v136)))), v145);
          v136.i32[0] = v49.i32[0];
          v141.i32[0] = cosf(v49.f32[1]);
          v50.f32[0] = cosf(*(float *)v136.i32);
          v50.i32[1] = v141.i32[0];
          float32x2_t *v41 = vsub_f32(_D8, v50);
          v41 += 2;
          int32x4_t v38 = (int8x16_t *)&v47[v12];
          --v39;
        }
        while (v39);
        uint64_t v10 = v119;
        float v146 = (int8x16_t *)((char *)v43 + 4 * v12);
        uint64_t v8 = v40;
      }
      float v51 = v145;
      if ((v15 & 0xFFFFFFFC) >= v15) {
        goto LABEL_64;
      }
      int32x4_t v52 = v146;
      int32x4_t v53 = (float *)(v8 + 16 * (v15 >> 2));
      int v54 = v15 - 4 * (v15 >> 2);
      do
      {
        uint32x4_t v55 = vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)a3, *v52))));
        float v56 = cosf(v51 * (float)vpadalq_u32((uint64x2_t)vdupq_laneq_s64((int64x2_t)vpaddlq_u32(v55), 1), v55).u32[0]);
        float v51 = v145;
        *v53++ = 1.0 - v56;
        int32x4_t v52 = (int8x16_t *)((char *)v52 + v12);
        --v54;
      }
      while (v54);
      break;
    case 3u:
      if (v15 >= 4)
      {
        int16x8_t v57 = v146;
        uint64_t v120 = v10;
        if (v18 <= 1) {
          unsigned int v58 = 1;
        }
        else {
          unsigned int v58 = v15 >> 2;
        }
        uint64_t v59 = v8;
        int32x4_t v60 = (float32x2_t *)(v8 + 8);
        __asm { FMOV            V8.2S, #1.0 }
        do
        {
          int32x4_t v62 = v57;
          int8x16_t v63 = *(int8x16_t *)(a3 + 16);
          int8x16_t v64 = (int8x16_t *)((char *)v57 + v12 + v12);
          int32x4_t v65 = &v64->i8[v12];
          int64x2_t v66 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vcntq_s8(veorq_s8(v63, v57[1])), vcntq_s8(veorq_s8(*(int8x16_t *)a3, *v57))))));
          int64x2_t v67 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v57[1] + v12), v63)), vcntq_s8(veorq_s8(*(int8x16_t *)((char *)v57 + v12), *(int8x16_t *)a3))))));
          int64x2_t v137 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v64[1] + v12), v63)), vcntq_s8(veorq_s8(*(int8x16_t *)((char *)v64 + v12), *(int8x16_t *)a3))))));
          int64x2_t v142 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vcntq_s8(veorq_s8(v64[1], v63)), vcntq_s8(veorq_s8(*v64, *(int8x16_t *)a3))))));
          *(float32x2_t *)v66.i8 = vmul_n_f32(vcvt_f32_u32((uint32x2_t)vmovn_s64(vaddq_s64(vzip1q_s64(v66, v67), vzip2q_s64(v66, v67)))), v145);
          float v125 = *(float *)v66.i32;
          float v130 = cosf(*(float *)&v66.i32[1]);
          v68.f32[0] = cosf(v125);
          v68.f32[1] = v130;
          v60[-1] = vsub_f32(_D8, v68);
          float32x2_t v69 = vmul_n_f32(vcvt_f32_u32((uint32x2_t)vmovn_s64(vaddq_s64(vzip1q_s64(v142, v137), vzip2q_s64(v142, v137)))), v145);
          v137.i32[0] = v69.i32[0];
          v142.i32[0] = cosf(v69.f32[1]);
          v70.f32[0] = cosf(*(float *)v137.i32);
          v70.i32[1] = v142.i32[0];
          *int32x4_t v60 = vsub_f32(_D8, v70);
          v60 += 2;
          int16x8_t v57 = (int8x16_t *)&v65[v12];
          --v58;
        }
        while (v58);
        uint64_t v10 = v120;
        float v146 = (int8x16_t *)((char *)v62 + 4 * v12);
        uint64_t v8 = v59;
      }
      float v71 = v145;
      if ((v15 & 0xFFFFFFFC) >= v15) {
        goto LABEL_64;
      }
      int32x4_t v52 = v146;
      int16x8_t v72 = (float *)(v8 + 16 * (v15 >> 2));
      int v73 = v15 - 4 * (v15 >> 2);
      do
      {
        uint32x4_t v74 = vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 16), v52[1])), vcntq_s8(veorq_s8(*(int8x16_t *)a3, *v52)))));
        float v75 = cosf(v71 * (float)vpadalq_u32((uint64x2_t)vdupq_laneq_s64((int64x2_t)vpaddlq_u32(v74), 1), v74).u32[0]);
        float v71 = v145;
        *v72++ = 1.0 - v75;
        int32x4_t v52 = (int8x16_t *)((char *)v52 + v12);
        --v73;
      }
      while (v73);
      break;
    case 5u:
      if (v15 >= 4)
      {
        int32x4_t v76 = v146;
        uint64_t v121 = v10;
        if (v18 <= 1) {
          unsigned int v77 = 1;
        }
        else {
          unsigned int v77 = v15 >> 2;
        }
        uint64_t v78 = v8;
        int16x8_t v79 = (float32x2_t *)(v8 + 8);
        __asm { FMOV            V8.2S, #1.0 }
        do
        {
          int32x4_t v81 = v76;
          int8x16_t v82 = *(int8x16_t *)(a3 + 16);
          int8x16_t v83 = *(int8x16_t *)(a3 + 32);
          int64x2_t v84 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v82, v76[1])), vcntq_s8(veorq_s8(*(int8x16_t *)a3, *v76))), vcntq_s8(veorq_s8(v83, v76[2]))))));
          int64x2_t v85 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v76[1] + v12), v82)), vcntq_s8(veorq_s8(*(int8x16_t *)((char *)v76 + v12), *(int8x16_t *)a3))), vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v76[2] + v12), v83))))));
          int32x4_t v86 = (int8x16_t *)((char *)v76 + v12 + v12);
          int32x4_t v87 = &v86->i8[v12];
          int64x2_t v138 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v86[1] + v12), v82)), vcntq_s8(veorq_s8(*(int8x16_t *)((char *)v86 + v12), *(int8x16_t *)a3))), vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v86[2] + v12), v83))))));
          int64x2_t v143 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v86[1], v82)), vcntq_s8(veorq_s8(*v86, *(int8x16_t *)a3))), vcntq_s8(veorq_s8(v86[2], v83))))));
          *(float32x2_t *)v84.i8 = vmul_n_f32(vcvt_f32_u32((uint32x2_t)vmovn_s64(vaddq_s64(vzip1q_s64(v84, v85), vzip2q_s64(v84, v85)))), v145);
          float v126 = *(float *)v84.i32;
          float v131 = cosf(*(float *)&v84.i32[1]);
          v88.f32[0] = cosf(v126);
          v88.f32[1] = v131;
          v79[-1] = vsub_f32(_D8, v88);
          float32x2_t v89 = vmul_n_f32(vcvt_f32_u32((uint32x2_t)vmovn_s64(vaddq_s64(vzip1q_s64(v143, v138), vzip2q_s64(v143, v138)))), v145);
          v138.i32[0] = v89.i32[0];
          v143.i32[0] = cosf(v89.f32[1]);
          v90.f32[0] = cosf(*(float *)v138.i32);
          v90.i32[1] = v143.i32[0];
          *int16x8_t v79 = vsub_f32(_D8, v90);
          v79 += 2;
          int32x4_t v76 = (int8x16_t *)&v87[v12];
          --v77;
        }
        while (v77);
        uint64_t v10 = v121;
        float v146 = (int8x16_t *)((char *)v81 + 4 * v12);
        uint64_t v8 = v78;
      }
      float v91 = v145;
      if ((v15 & 0xFFFFFFFC) >= v15) {
        goto LABEL_64;
      }
      int32x4_t v52 = v146;
      int16x8_t v92 = (float *)(v8 + 16 * (v15 >> 2));
      int v93 = v15 - 4 * (v15 >> 2);
      do
      {
        uint32x4_t v94 = vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 16), v52[1])), vcntq_s8(veorq_s8(*(int8x16_t *)a3, *v52))), vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 32), v52[2])))));
        float v95 = cosf(v91 * (float)vpadalq_u32((uint64x2_t)vdupq_laneq_s64((int64x2_t)vpaddlq_u32(v94), 1), v94).u32[0]);
        float v91 = v145;
        *v92++ = 1.0 - v95;
        int32x4_t v52 = (int8x16_t *)((char *)v52 + v12);
        --v93;
      }
      while (v93);
      break;
    case 7u:
      if (v15 >= 4)
      {
        int32x4_t v96 = v146;
        uint64_t v122 = v10;
        if (v18 <= 1) {
          unsigned int v97 = 1;
        }
        else {
          unsigned int v97 = v15 >> 2;
        }
        uint64_t v98 = v8;
        int32x4_t v99 = (float32x2_t *)(v8 + 8);
        __asm { FMOV            V8.2S, #1.0 }
        do
        {
          unsigned int v101 = v96;
          int8x16_t v102 = *(int8x16_t *)(a3 + 16);
          int8x16_t v103 = *(int8x16_t *)(a3 + 32);
          int8x16_t v104 = *(int8x16_t *)(a3 + 48);
          int64x2_t v105 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v102, v96[1])), vcntq_s8(veorq_s8(*(int8x16_t *)a3, *v96))), vaddq_s8(vcntq_s8(veorq_s8(v103, v96[2])), vcntq_s8(veorq_s8(v104, v96[3])))))));
          int64x2_t v106 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v96[1] + v12), v102)), vcntq_s8(veorq_s8(*(int8x16_t *)((char *)v96 + v12), *(int8x16_t *)a3))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v96[2] + v12), v103)), vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v96[3] + v12), v104)))))));
          float v107 = (int8x16_t *)((char *)v96 + v12 + v12);
          int64x2_t v144 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v107[1], v102)), vcntq_s8(veorq_s8(*v107, *(int8x16_t *)a3))), vaddq_s8(vcntq_s8(veorq_s8(v107[2], v103)), vcntq_s8(veorq_s8(v107[3], v104)))))));
          int8x16_t v108 = &v107->i8[v12];
          int64x2_t v139 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v107[1] + v12), v102)), vcntq_s8(veorq_s8(*(int8x16_t *)((char *)v107 + v12), *(int8x16_t *)a3))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v107[2] + v12), v103)), vcntq_s8(veorq_s8(*(int8x16_t *)((char *)&v107[3] + v12), v104)))))));
          *(float32x2_t *)v105.i8 = vmul_n_f32(vcvt_f32_u32((uint32x2_t)vmovn_s64(vaddq_s64(vzip1q_s64(v105, v106), vzip2q_s64(v105, v106)))), v145);
          float v127 = *(float *)v105.i32;
          float v132 = cosf(*(float *)&v105.i32[1]);
          v109.f32[0] = cosf(v127);
          v109.f32[1] = v132;
          v99[-1] = vsub_f32(_D8, v109);
          float32x2_t v110 = vmul_n_f32(vcvt_f32_u32((uint32x2_t)vmovn_s64(vaddq_s64(vzip1q_s64(v144, v139), vzip2q_s64(v144, v139)))), v145);
          v139.i32[0] = v110.i32[0];
          v144.i32[0] = cosf(v110.f32[1]);
          v111.f32[0] = cosf(*(float *)v139.i32);
          v111.i32[1] = v144.i32[0];
          *int32x4_t v99 = vsub_f32(_D8, v111);
          v99 += 2;
          int32x4_t v96 = (int8x16_t *)&v108[v12];
          --v97;
        }
        while (v97);
        uint64_t v10 = v122;
        float v146 = (int8x16_t *)((char *)v101 + 4 * v12);
        uint64_t v8 = v98;
      }
      float v112 = v145;
      if ((v15 & 0xFFFFFFFC) >= v15) {
        goto LABEL_64;
      }
      int32x4_t v52 = v146;
      int32x4_t v113 = (float *)(v8 + 16 * (v15 >> 2));
      int v114 = v15 - 4 * (v15 >> 2);
      do
      {
        uint32x4_t v115 = vpaddlq_u16(vpaddlq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 16), v52[1])), vcntq_s8(veorq_s8(*(int8x16_t *)a3, *v52))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 32), v52[2])), vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 48), v52[3]))))));
        float v116 = cosf(v112 * (float)vpadalq_u32((uint64x2_t)vdupq_laneq_s64((int64x2_t)vpaddlq_u32(v115), 1), v115).u32[0]);
        float v112 = v145;
        *v113++ = 1.0 - v116;
        int32x4_t v52 = (int8x16_t *)((char *)v52 + v12);
        --v114;
      }
      while (v114);
      break;
    default:
      UNICORN__log_select_Error(v10, 74001, (uint64_t)"Unsupported BNF size %d", a4, a5, a6, a7, a8);
      return 2229280769;
  }
  float v146 = v52;
LABEL_64:
  if (*(_DWORD *)(a1 + 1524) == 1) {
    return brk_DataUnmap(*(void *)(v10 + 24), *(void *)(a1 + 2464), (uint64_t)v146);
  }
  return v16;
}

void mfs_bnfData_Distance_Unit_ID_RandomProjection_SIMD(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(unsigned __int8 *)(a1 + 1520);
  uint64_t v18 = 0;
  if (v11) {
    float v12 = 3.1416 / (float)((float)v11 * 8.0);
  }
  else {
    float v12 = 0.3927;
  }
  if (*(_DWORD *)(a1 + 1524) == 1)
  {
    if ((brk_DataMap(*(void *)(a2 + 24), *(void *)(a1 + 2464), (*(_DWORD *)(a1 + 1528)+ *(_DWORD *)(*(void *)(a1 + 848)+ 4 * (a4 / *(_DWORD *)(*(void *)(a1 + 568) + 5992)))* v11), v11, (uint64_t)&v18) & 0x80000000) != 0)
    {
      UNICORN__log_select_Error(a2, 74001, (uint64_t)"ODLBNF DataMap (%u,%u) Error %x", a4, a5, a6, a7, a8);
      return;
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 1000)
        + (*(_DWORD *)(*(void *)(a1 + 848)
                                   + 4 * (a4 / *(_DWORD *)(*(void *)(a1 + 568) + 5992)))
                       * v11);
  }
  HIDWORD(v13) = v11;
  LODWORD(v13) = v11 - 8;
  switch((v13 >> 3))
  {
    case 0u:
      uint64_t v14 = v18;
      unsigned int v15 = vpaddl_u32(vpaddl_u16(vpaddl_u8((uint8x8_t)vcnt_s8(veor_s8(*(int8x8_t *)a3, *(int8x8_t *)v18)))));
      goto LABEL_16;
    case 1u:
      uint64_t v14 = v18;
      uint8x16_t v16 = (uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)a3, *(int8x16_t *)v18));
      goto LABEL_15;
    case 3u:
      uint64_t v14 = v18;
      uint8x16_t v16 = (uint8x16_t)vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 16), *(int8x16_t *)(v18 + 16))), vcntq_s8(veorq_s8(*(int8x16_t *)a3, *(int8x16_t *)v18)));
      goto LABEL_15;
    case 5u:
      uint64_t v14 = v18;
      uint8x16_t v16 = (uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 16), *(int8x16_t *)(v18 + 16))), vcntq_s8(veorq_s8(*(int8x16_t *)a3, *(int8x16_t *)v18))), vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 32), *(int8x16_t *)(v18 + 32))));
      goto LABEL_15;
    case 7u:
      uint64_t v14 = v18;
      uint8x16_t v16 = (uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 16), *(int8x16_t *)(v18 + 16))), vcntq_s8(veorq_s8(*(int8x16_t *)a3, *(int8x16_t *)v18))), vaddq_s8(vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 32), *(int8x16_t *)(v18 + 32))), vcntq_s8(veorq_s8(*(int8x16_t *)(a3 + 48), *(int8x16_t *)(v18 + 48)))));
LABEL_15:
      uint32x4_t v17 = vpaddlq_u16(vpaddlq_u8(v16));
      unsigned int v15 = vpadalq_u32((uint64x2_t)vdupq_laneq_s64((int64x2_t)vpaddlq_u32(v17), 1), v17).u32[0];
LABEL_16:
      cosf(v12 * (float)v15);
      if (*(_DWORD *)(a1 + 1524) == 1) {
        brk_DataUnmap(*(void *)(a2 + 24), *(void *)(a1 + 2464), v14);
      }
      break;
    default:
      UNICORN__log_select_Error(a2, 74001, (uint64_t)"Unsupported BNF size %d", a4, a5, a6, a7, a8);
      break;
  }
}

uint64_t precomp_DoInnerLoop_simd_full_support(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v8 = a4;
  uint64_t v9 = (__int32 *)(*a2 + 24 * a4);
  v67.i32[0] = *v9;
  v67.i32[1] = v9[6];
  v67.i32[2] = v9[12];
  v67.i32[3] = v9[18];
  int32x4_t v65 = v67;
  v66[0] = v9[1];
  v66[1] = v9[7];
  v66[2] = v9[13];
  v66[3] = v9[19];
  precomp_FetchRightNode(a1, a5, v67.i32, v66, 4);
  int v12 = *(_DWORD *)(a1 + 1088);
  uint64_t v13 = *(void *)(a1 + 128);
  uint64_t v14 = *(void *)(a1 + 136);
  int8x16_t v15 = 0uLL;
  uint64_t v16 = *(void *)(a1 + 144);
  uint64_t v17 = *(void *)(a1 + 152);
  if (v12)
  {
    v10.i32[0] = *(_DWORD *)(*(void *)(a1 + 40) + 6720);
    v11.i32[0] = 998277249;
    uint64_t v18 = *(void *)(a1 + 152);
    uint64_t v19 = *(void *)(a1 + 144);
    uint64_t v20 = *(void *)(a1 + 136);
    uint64_t v21 = *(void *)(a1 + 128);
    float32x4_t v22 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmulq_f32(v10, v11), 0);
    uint64_t v17 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    float32x4_t v22 = 0uLL;
  }
  uint64_t v23 = *(unsigned int *)(a3 + 12);
  uint64_t v24 = *(const float **)a3;
  if ((int)v23 < 1)
  {
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x4B189680u);
  }
  else
  {
    uint64_t v25 = 0;
    v26.i64[0] = -1;
    v26.i64[1] = -1;
    int32x4_t v27 = vaddq_s32(v65, v26);
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x4B189680u);
    int8x16_t v15 = 0uLL;
    float v29 = *(const float **)a3;
    do
    {
      float32x4_t v30 = v29 + 3;
      float32x4_t v31 = vld1q_dup_f32(v30);
      int8x8_t v32 = (int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v28, v31))), 0xFuLL));
      v32.i16[0] = vminv_u16((uint16x4_t)v32);
      if (v32.i8[0]) {
        break;
      }
      uint64_t v33 = *(unsigned int *)(*(void *)(a1 + 1032) + 4 * v25);
      if (v12)
      {
        v32.i8[0] = *(unsigned char *)(v19 + v33);
        v32.i8[4] = *(unsigned char *)(v18 + v33);
        v34.i32[0] = *(unsigned __int8 *)(v21 + v33);
        v34.i32[1] = *(unsigned __int8 *)(v20 + v33);
        v34.u64[1] = (unint64_t)vand_s8(v32, (int8x8_t)0xFF000000FFLL);
        float32x4_t v35 = vmulq_f32(v22, vcvtq_f32_u32(v34));
      }
      else
      {
        v35.i32[0] = *(_DWORD *)(v13 + 4 * v33);
        v35.i32[1] = *(_DWORD *)(v14 + 4 * v33);
        v35.i32[2] = *(_DWORD *)(v16 + 4 * v33);
        v35.i32[3] = *(_DWORD *)(v17 + 4 * v33);
      }
      int v36 = (const float *)(*(void *)(a1 + 1008) + 4 * v25);
      int32x4_t v37 = (int32x4_t)vld1q_dup_f32(v36);
      int32x4_t v38 = vsubq_s32(*(int32x4_t *)(a1 + 384), v37);
      unsigned int v39 = (const float *)(*(void *)(a1 + 16) + 6664);
      int32x4_t v40 = (int32x4_t)vld1q_dup_f32(v39);
      int32x4_t v41 = vabsq_s32(v38);
      int32x4_t v42 = (const float *)(a1 + 112);
      int32x4_t v43 = (int32x4_t)vld1q_dup_f32(v42);
      int32x4_t v44 = vabsq_s32(vsubq_s32(v43, v38));
      int64x2_t v45 = (const float *)(a1 + 1060);
      int32x4_t v46 = (int32x4_t)vld1q_dup_f32(v45);
      int8x16_t v47 = (int8x16_t)vcgtq_s32(v40, v41);
      float32x2_t v48 = (const float *)(*(void *)(a1 + 1024) + 4 * v25);
      float32x4_t v49 = vld1q_dup_f32(v48);
      float32x4_t v50 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v44, v46), *(int8x16_t *)(a1 + 832), (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 704), vaddq_f32(v35, v49))), v47);
      if (*(void *)(a1 + 32) == *(void *)(a1 + 48) || *(void *)(a1 + 104))
      {
        uint64_t v51 = *(unsigned int *)(*(void *)(a1 + 1000) + 4 * v25);
        v52.i32[0] = *(_DWORD *)(*(void *)(a1 + 256) + 4 * v51);
        v52.i32[1] = *(_DWORD *)(*(void *)(a1 + 264) + 4 * v51);
        v52.i32[2] = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v51);
        v52.i32[3] = *(_DWORD *)(*(void *)(a1 + 280) + 4 * v51);
        int32x4_t v53 = (const float *)(*(void *)(a1 + 1016) + 4 * v25);
        float32x4_t v54 = vld1q_dup_f32(v53);
        float32x4_t v50 = vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 768), vaddq_f32(*(float32x4_t *)(a1 + 576), vaddq_f32(v52, v54))), v50);
      }
      int32x4_t v55 = (int32x4_t)vld1q_dup_f32(v29);
      float v56 = (const float *)(*(void *)(a1 + 1040) + 4 * v25);
      float32x4_t v57 = vld1q_dup_f32(v56);
      float32x4_t v58 = vaddq_f32(v31, (float32x4_t)vbicq_s8((int8x16_t)vaddq_f32(vaddq_f32(v50, *(float32x4_t *)(a1 + 640)), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 896), (int8x16_t)vmulq_n_f32(vabdq_f32(*(float32x4_t *)(a1 + 512), v57), *(float *)(*(void *)(a1 + 1048) + 4 * v25)))), (int8x16_t)vceqq_s32(v55, v27)));
      int8x16_t v59 = (int8x16_t)vcgtq_f32(v28, v58);
      float32x4_t v28 = (float32x4_t)vbslq_s8(v59, (int8x16_t)v58, (int8x16_t)v28);
      int8x16_t v15 = vbslq_s8(v59, (int8x16_t)vdupq_n_s32(v25++), v15);
      v29 += 6;
    }
    while (v23 != v25);
  }
  uint64_t v60 = v7 + 24 * (int)v8;
  *(float *)(v60 + 12) = v28.f32[0] + *(float *)(v60 + 12);
  *(void *)(v60 + 16) = &v24[6 * v15.i32[0]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[0] + 2]);
  }
  uint64_t v61 = v7 + 24 * (v8 + 1);
  *(float *)(v61 + 12) = v28.f32[1] + *(float *)(v61 + 12);
  *(void *)(v61 + 16) = &v24[6 * v15.i32[1]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[1] + 2]);
  }
  uint64_t v62 = v7 + 24 * (v8 + 2);
  *(float *)(v62 + 12) = v28.f32[2] + *(float *)(v62 + 12);
  *(void *)(v62 + 16) = &v24[6 * v15.i32[2]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[2] + 2]);
  }
  uint64_t v63 = v7 + 24 * (v8 + 3);
  *(float *)(v63 + 12) = v28.f32[3] + *(float *)(v63 + 12);
  *(void *)(v63 + 16) = &v24[6 * v15.i32[3]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[3] + 2]);
  }
  return 0;
}

uint64_t precomp_DoInnerLoop_simd_nosylrate(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v8 = a4;
  uint64_t v9 = (__int32 *)(*a2 + 24 * a4);
  v65.i32[0] = *v9;
  v65.i32[1] = v9[6];
  v65.i32[2] = v9[12];
  v65.i32[3] = v9[18];
  int32x4_t v63 = v65;
  v64[0] = v9[1];
  v64[1] = v9[7];
  v64[2] = v9[13];
  v64[3] = v9[19];
  precomp_FetchRightNode(a1, a5, v65.i32, v64, 4);
  int v12 = *(_DWORD *)(a1 + 1088);
  uint64_t v13 = *(void *)(a1 + 128);
  uint64_t v14 = *(void *)(a1 + 136);
  int8x16_t v15 = 0uLL;
  uint64_t v16 = *(void *)(a1 + 144);
  uint64_t v17 = *(void *)(a1 + 152);
  if (v12)
  {
    v10.i32[0] = *(_DWORD *)(*(void *)(a1 + 40) + 6720);
    v11.i32[0] = 998277249;
    uint64_t v18 = *(void *)(a1 + 152);
    uint64_t v19 = *(void *)(a1 + 144);
    uint64_t v20 = *(void *)(a1 + 136);
    uint64_t v21 = *(void *)(a1 + 128);
    float32x4_t v22 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmulq_f32(v10, v11), 0);
    uint64_t v17 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    float32x4_t v22 = 0uLL;
  }
  uint64_t v23 = *(unsigned int *)(a3 + 12);
  uint64_t v24 = *(const float **)a3;
  if ((int)v23 < 1)
  {
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x4B189680u);
  }
  else
  {
    uint64_t v25 = 0;
    v26.i64[0] = -1;
    v26.i64[1] = -1;
    int32x4_t v27 = vaddq_s32(v63, v26);
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x4B189680u);
    int8x16_t v15 = 0uLL;
    float v29 = *(const float **)a3;
    do
    {
      float32x4_t v30 = v29 + 3;
      float32x4_t v31 = vld1q_dup_f32(v30);
      int8x8_t v32 = (int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v28, v31))), 0xFuLL));
      v32.i16[0] = vminv_u16((uint16x4_t)v32);
      if (v32.i8[0]) {
        break;
      }
      uint64_t v33 = *(unsigned int *)(*(void *)(a1 + 1032) + 4 * v25);
      if (v12)
      {
        v32.i8[0] = *(unsigned char *)(v19 + v33);
        v32.i8[4] = *(unsigned char *)(v18 + v33);
        v34.i32[0] = *(unsigned __int8 *)(v21 + v33);
        v34.i32[1] = *(unsigned __int8 *)(v20 + v33);
        v34.u64[1] = (unint64_t)vand_s8(v32, (int8x8_t)0xFF000000FFLL);
        float32x4_t v35 = vmulq_f32(v22, vcvtq_f32_u32(v34));
      }
      else
      {
        v35.i32[0] = *(_DWORD *)(v13 + 4 * v33);
        v35.i32[1] = *(_DWORD *)(v14 + 4 * v33);
        v35.i32[2] = *(_DWORD *)(v16 + 4 * v33);
        v35.i32[3] = *(_DWORD *)(v17 + 4 * v33);
      }
      int v36 = (const float *)(*(void *)(a1 + 1008) + 4 * v25);
      int32x4_t v37 = (int32x4_t)vld1q_dup_f32(v36);
      int32x4_t v38 = vsubq_s32(*(int32x4_t *)(a1 + 384), v37);
      unsigned int v39 = (const float *)(*(void *)(a1 + 16) + 6664);
      int32x4_t v40 = (int32x4_t)vld1q_dup_f32(v39);
      int32x4_t v41 = vabsq_s32(v38);
      int32x4_t v42 = (const float *)(a1 + 112);
      int32x4_t v43 = (int32x4_t)vld1q_dup_f32(v42);
      int32x4_t v44 = vabsq_s32(vsubq_s32(v43, v38));
      int64x2_t v45 = (const float *)(a1 + 1060);
      int32x4_t v46 = (int32x4_t)vld1q_dup_f32(v45);
      int8x16_t v47 = (int8x16_t)vcgtq_s32(v40, v41);
      float32x2_t v48 = (const float *)(*(void *)(a1 + 1024) + 4 * v25);
      float32x4_t v49 = vld1q_dup_f32(v48);
      float32x4_t v50 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v44, v46), *(int8x16_t *)(a1 + 832), (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 704), vaddq_f32(v35, v49))), v47);
      if (*(void *)(a1 + 32) == *(void *)(a1 + 48) || *(void *)(a1 + 104))
      {
        uint64_t v51 = *(unsigned int *)(*(void *)(a1 + 1000) + 4 * v25);
        v52.i32[0] = *(_DWORD *)(*(void *)(a1 + 256) + 4 * v51);
        v52.i32[1] = *(_DWORD *)(*(void *)(a1 + 264) + 4 * v51);
        v52.i32[2] = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v51);
        v52.i32[3] = *(_DWORD *)(*(void *)(a1 + 280) + 4 * v51);
        int32x4_t v53 = (const float *)(*(void *)(a1 + 1016) + 4 * v25);
        float32x4_t v54 = vld1q_dup_f32(v53);
        float32x4_t v50 = vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 768), vaddq_f32(*(float32x4_t *)(a1 + 576), vaddq_f32(v52, v54))), v50);
      }
      int32x4_t v55 = (int32x4_t)vld1q_dup_f32(v29);
      float32x4_t v56 = vaddq_f32(v31, (float32x4_t)vbicq_s8((int8x16_t)vaddq_f32(v50, *(float32x4_t *)(a1 + 640)), (int8x16_t)vceqq_s32(v55, v27)));
      int8x16_t v57 = (int8x16_t)vcgtq_f32(v28, v56);
      float32x4_t v28 = (float32x4_t)vbslq_s8(v57, (int8x16_t)v56, (int8x16_t)v28);
      int8x16_t v15 = vbslq_s8(v57, (int8x16_t)vdupq_n_s32(v25++), v15);
      v29 += 6;
    }
    while (v23 != v25);
  }
  uint64_t v58 = v7 + 24 * (int)v8;
  *(float *)(v58 + 12) = v28.f32[0] + *(float *)(v58 + 12);
  *(void *)(v58 + 16) = &v24[6 * v15.i32[0]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[0] + 2]);
  }
  uint64_t v59 = v7 + 24 * (v8 + 1);
  *(float *)(v59 + 12) = v28.f32[1] + *(float *)(v59 + 12);
  *(void *)(v59 + 16) = &v24[6 * v15.i32[1]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[1] + 2]);
  }
  uint64_t v60 = v7 + 24 * (v8 + 2);
  *(float *)(v60 + 12) = v28.f32[2] + *(float *)(v60 + 12);
  *(void *)(v60 + 16) = &v24[6 * v15.i32[2]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[2] + 2]);
  }
  uint64_t v61 = v7 + 24 * (v8 + 3);
  *(float *)(v61 + 12) = v28.f32[3] + *(float *)(v61 + 12);
  *(void *)(v61 + 16) = &v24[6 * v15.i32[3]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[3] + 2]);
  }
  return 0;
}

uint64_t precomp_DoInnerLoop_T_16R_simd_nosylrate(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v187 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v9 + 1640);
  int v11 = *(_DWORD *)(v9 + 1652);
  int v12 = v175;
  long long v174 = 0u;
  memset(v175, 0, sizeof(v175));
  uint64_t v13 = *a2;
  int8x16_t v178 = 0u;
  int8x16_t v179 = 0u;
  int8x16_t v180 = 0u;
  int8x16_t v181 = 0u;
  memset_pattern16(&__b, &unk_20D6AF100, 0x40uLL);
  unint64_t v14 = 0;
  int8x16_t v15 = (int *)(v13 + 24 * a4 + 76);
  unint64_t v16 = -4;
  v17.i64[0] = -1;
  v17.i64[1] = -1;
  do
  {
    uint64_t v18 = &v177[v14 / 4];
    *uint64_t v18 = *(v15 - 19);
    int v19 = *(v15 - 13);
    *(v12 - 2) = v15 - 19;
    *(v12 - 1) = v15 - 13;
    v18[1] = v19;
    v18[2] = *(v15 - 7);
    int v20 = *(v15 - 1);
    *int v12 = v15 - 7;
    v12[1] = v15 - 1;
    v12 += 4;
    v18[3] = v20;
    v182[v14 / 0x10] = vaddq_s32(*(int32x4_t *)&v177[v14 / 4], v17);
    uint64_t v21 = &v176[v14 / 4];
    *uint64_t v21 = *(v15 - 18);
    v21[1] = *(v15 - 12);
    v21[2] = *(v15 - 6);
    v16 += 4;
    int v22 = *v15;
    v15 += 24;
    v21[3] = v22;
    v14 += 16;
  }
  while (v16 < 0xC);
  precomp_FetchRightNode(a1, a5, v177, v176, 16);
  int v26 = *(_DWORD *)(a1 + 1088);
  uint64_t v27 = *(void *)(v9 + 2424);
  float32x4_t v28 = *(_DWORD **)(a1 + 1032);
  int v29 = *(_DWORD *)(v9 + 2436);
  uint64_t v30 = (v29 * *v28);
  if (v26)
  {
    uint64_t v31 = 0;
    uint64_t v32 = v27 + v30;
    v23.i32[0] = *(_DWORD *)(*(void *)(a1 + 40) + 6720);
    v24.i32[0] = 998277249;
    float32x4_t v33 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmulq_f32(v23, v24), 0);
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v31 = v27 + 4 * v30;
    float32x4_t v33 = 0uLL;
  }
  unint64_t v34 = *((unsigned int *)a3 + 3);
  if ((int)v34 >= 1)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    unsigned int v39 = *(int **)(a1 + 1000);
    int v40 = *v39;
    int v41 = 255;
    int8x16_t v42 = 0uLL;
    int8x16_t v43 = 0uLL;
    int8x16_t v44 = 0uLL;
    int v45 = 255;
    int v46 = 255;
    int v47 = 255;
    int8x16_t v48 = 0uLL;
    do
    {
      if (!(v46 | v47 | v45 | v41)) {
        break;
      }
      uint64_t v49 = v36 + 1;
      int v50 = v36 + 1 >= v34 ? v36 : (int)v36 + 1;
      uint64_t v51 = (v29 * v28[v50]);
      if (v26)
      {
        uint64_t v52 = v27 + v51;
        uint64_t v38 = v32;
        uint64_t v53 = v31;
      }
      else
      {
        uint64_t v53 = v27 + 4 * v51;
        uint64_t v52 = v32;
        uint64_t v37 = v31;
      }
      uint64_t v54 = v10 + 4 * (v40 * v11);
      uint64_t v55 = *a3;
      float32x4_t v56 = (const float *)(*a3 + v35);
      int8x16_t v57 = v56 + 3;
      float32x4_t v58 = vld1q_dup_f32(v57);
      if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)__b, v58))), 0xFuLL))))
      {
        int v47 = 0;
      }
      else
      {
        int32x4_t v59 = *(int32x4_t *)(a1 + 384);
        unsigned int v60 = HIDWORD(*(void *)(a1 + 384));
        unsigned int v61 = *(void *)(a1 + 392);
        if (v26)
        {
          v25.i8[0] = *(unsigned char *)(v38 + v61);
          v25.i8[4] = *(unsigned char *)(v38 + v59.u32[3]);
          v62.i32[0] = *(unsigned __int8 *)(v38 + v59.u32[0]);
          v62.i32[1] = *(unsigned __int8 *)(v38 + v60);
          v62.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v25.i8, (int8x8_t)0xFF000000FFLL);
          float32x4_t v63 = vmulq_f32(v33, vcvtq_f32_u32(v62));
        }
        else
        {
          v63.i32[0] = *(_DWORD *)(v37 + 4 * v59.u32[0]);
          v63.i32[1] = *(_DWORD *)(v37 + 4 * v60);
          v63.i32[2] = *(_DWORD *)(v37 + 4 * v61);
          v63.i32[3] = *(_DWORD *)(v37 + 4 * v59.u32[3]);
        }
        int8x16_t v64 = (const float *)(*(void *)(a1 + 1008) + 4 * v36);
        int32x4_t v65 = (int32x4_t)vld1q_dup_f32(v64);
        int32x4_t v66 = vsubq_s32(v59, v65);
        int32x4_t v67 = (const float *)(*(void *)(a1 + 16) + 6664);
        int32x4_t v68 = (int32x4_t)vld1q_dup_f32(v67);
        int32x4_t v69 = vabsq_s32(v66);
        float32x2_t v70 = (const float *)(a1 + 112);
        int32x4_t v71 = (int32x4_t)vld1q_dup_f32(v70);
        int32x4_t v72 = vabsq_s32(vsubq_s32(v71, v66));
        int v73 = (const float *)(a1 + 1060);
        int32x4_t v74 = (int32x4_t)vld1q_dup_f32(v73);
        int8x16_t v75 = (int8x16_t)vcgtq_s32(v68, v69);
        int32x4_t v76 = (const float *)(*(void *)(a1 + 1024) + 4 * v36);
        float32x4_t v77 = vld1q_dup_f32(v76);
        float32x4_t v78 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v72, v74), *(int8x16_t *)(a1 + 832), (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 704), vaddq_f32(v63, v77))), v75);
        if (*(void *)(a1 + 32) == *(void *)(a1 + 48) || *(void *)(a1 + 104))
        {
          v79.i32[0] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 448));
          v79.i32[1] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 452));
          v79.i32[2] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 456));
          v79.i32[3] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 460));
          int16x8_t v80 = (const float *)(*(void *)(a1 + 1016) + 4 * v36);
          float32x4_t v81 = vld1q_dup_f32(v80);
          float32x4_t v78 = vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 768), vaddq_f32(*(float32x4_t *)(a1 + 576), vaddq_f32(v79, v81))), v78);
        }
        int32x4_t v82 = (int32x4_t)vld1q_dup_f32(v56);
        float32x4_t v83 = vaddq_f32(v58, (float32x4_t)vbicq_s8((int8x16_t)vaddq_f32(v78, *(float32x4_t *)(a1 + 640)), (int8x16_t)vceqq_s32(v82, v182[0])));
        int8x16_t v25 = (int8x16_t)vcgtq_f32((float32x4_t)__b, v83);
        int8x16_t __b = vbslq_s8(v25, (int8x16_t)v83, __b);
        int8x16_t v48 = vbslq_s8(v25, (int8x16_t)vdupq_n_s32(v36), v48);
        int8x16_t v178 = v48;
        int v47 = 1;
      }
      if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)v184, v58))), 0xFuLL))))
      {
        int v46 = 0;
      }
      else
      {
        int32x4_t v84 = *(int32x4_t *)(a1 + 400);
        unsigned int v85 = HIDWORD(*(void *)(a1 + 400));
        unsigned int v86 = *(void *)(a1 + 408);
        if (v26)
        {
          v25.i8[0] = *(unsigned char *)(v38 + v86);
          v25.i8[4] = *(unsigned char *)(v38 + v84.u32[3]);
          v87.i32[0] = *(unsigned __int8 *)(v38 + v84.u32[0]);
          v87.i32[1] = *(unsigned __int8 *)(v38 + v85);
          v87.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v25.i8, (int8x8_t)0xFF000000FFLL);
          float32x4_t v88 = vmulq_f32(v33, vcvtq_f32_u32(v87));
        }
        else
        {
          v88.i32[0] = *(_DWORD *)(v37 + 4 * v84.u32[0]);
          v88.i32[1] = *(_DWORD *)(v37 + 4 * v85);
          v88.i32[2] = *(_DWORD *)(v37 + 4 * v86);
          v88.i32[3] = *(_DWORD *)(v37 + 4 * v84.u32[3]);
        }
        float32x2_t v89 = (const float *)(*(void *)(a1 + 1008) + 4 * v36);
        int32x4_t v90 = (int32x4_t)vld1q_dup_f32(v89);
        int32x4_t v91 = vsubq_s32(v84, v90);
        int16x8_t v92 = (const float *)(*(void *)(a1 + 16) + 6664);
        int32x4_t v93 = (int32x4_t)vld1q_dup_f32(v92);
        int32x4_t v94 = vabsq_s32(v91);
        float v95 = (const float *)(a1 + 112);
        int32x4_t v96 = (int32x4_t)vld1q_dup_f32(v95);
        int32x4_t v97 = vabsq_s32(vsubq_s32(v96, v91));
        uint64_t v98 = (const float *)(a1 + 1060);
        int32x4_t v99 = (int32x4_t)vld1q_dup_f32(v98);
        int8x16_t v100 = (int8x16_t)vcgtq_s32(v93, v94);
        unsigned int v101 = (const float *)(*(void *)(a1 + 1024) + 4 * v36);
        float32x4_t v102 = vld1q_dup_f32(v101);
        float32x4_t v103 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v97, v99), *(int8x16_t *)(a1 + 848), (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 720), vaddq_f32(v88, v102))), v100);
        if (*(void *)(a1 + 32) == *(void *)(a1 + 48) || *(void *)(a1 + 104))
        {
          v104.i32[0] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 464));
          v104.i32[1] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 468));
          v104.i32[2] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 472));
          v104.i32[3] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 476));
          int64x2_t v105 = (const float *)(*(void *)(a1 + 1016) + 4 * v36);
          float32x4_t v106 = vld1q_dup_f32(v105);
          float32x4_t v103 = vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 784), vaddq_f32(*(float32x4_t *)(a1 + 592), vaddq_f32(v104, v106))), v103);
        }
        float v107 = (const float *)(v55 + v35);
        int32x4_t v108 = (int32x4_t)vld1q_dup_f32(v107);
        float32x4_t v109 = vaddq_f32(v58, (float32x4_t)vbicq_s8((int8x16_t)vaddq_f32(v103, *(float32x4_t *)(a1 + 656)), (int8x16_t)vceqq_s32(v108, v182[1])));
        int8x16_t v25 = (int8x16_t)vcgtq_f32((float32x4_t)v184, v109);
        int8x16_t v184 = vbslq_s8(v25, (int8x16_t)v109, v184);
        int8x16_t v44 = vbslq_s8(v25, (int8x16_t)vdupq_n_s32(v36), v44);
        int8x16_t v179 = v44;
        int v46 = 1;
      }
      int v40 = v39[v50];
      if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)v185, v58))), 0xFuLL))))
      {
        int v45 = 0;
      }
      else
      {
        int32x4_t v110 = *(int32x4_t *)(a1 + 416);
        unsigned int v111 = HIDWORD(*(void *)(a1 + 416));
        unsigned int v112 = *(void *)(a1 + 424);
        if (v26)
        {
          v25.i8[0] = *(unsigned char *)(v38 + v112);
          v25.i8[4] = *(unsigned char *)(v38 + v110.u32[3]);
          v113.i32[0] = *(unsigned __int8 *)(v38 + v110.u32[0]);
          v113.i32[1] = *(unsigned __int8 *)(v38 + v111);
          v113.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v25.i8, (int8x8_t)0xFF000000FFLL);
          float32x4_t v114 = vmulq_f32(v33, vcvtq_f32_u32(v113));
        }
        else
        {
          v114.i32[0] = *(_DWORD *)(v37 + 4 * v110.u32[0]);
          v114.i32[1] = *(_DWORD *)(v37 + 4 * v111);
          v114.i32[2] = *(_DWORD *)(v37 + 4 * v112);
          v114.i32[3] = *(_DWORD *)(v37 + 4 * v110.u32[3]);
        }
        uint32x4_t v115 = (const float *)(*(void *)(a1 + 1008) + 4 * v36);
        int32x4_t v116 = (int32x4_t)vld1q_dup_f32(v115);
        int32x4_t v117 = vsubq_s32(v110, v116);
        float v118 = (const float *)(*(void *)(a1 + 16) + 6664);
        int32x4_t v119 = (int32x4_t)vld1q_dup_f32(v118);
        int32x4_t v120 = vabsq_s32(v117);
        uint64_t v121 = (const float *)(a1 + 112);
        int32x4_t v122 = (int32x4_t)vld1q_dup_f32(v121);
        int32x4_t v123 = vabsq_s32(vsubq_s32(v122, v117));
        float v124 = (const float *)(a1 + 1060);
        int32x4_t v125 = (int32x4_t)vld1q_dup_f32(v124);
        int8x16_t v126 = (int8x16_t)vcgtq_s32(v119, v120);
        float v127 = (const float *)(*(void *)(a1 + 1024) + 4 * v36);
        float32x4_t v128 = vld1q_dup_f32(v127);
        float32x4_t v129 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v123, v125), *(int8x16_t *)(a1 + 864), (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 736), vaddq_f32(v114, v128))), v126);
        if (*(void *)(a1 + 32) == *(void *)(a1 + 48) || *(void *)(a1 + 104))
        {
          v130.i32[0] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 480));
          v130.i32[1] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 484));
          v130.i32[2] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 488));
          v130.i32[3] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 492));
          float v131 = (const float *)(*(void *)(a1 + 1016) + 4 * v36);
          float32x4_t v132 = vld1q_dup_f32(v131);
          float32x4_t v129 = vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 800), vaddq_f32(*(float32x4_t *)(a1 + 608), vaddq_f32(v130, v132))), v129);
        }
        float v133 = (const float *)(v55 + v35);
        int32x4_t v134 = (int32x4_t)vld1q_dup_f32(v133);
        float32x4_t v135 = vaddq_f32(v58, (float32x4_t)vbicq_s8((int8x16_t)vaddq_f32(v129, *(float32x4_t *)(a1 + 672)), (int8x16_t)vceqq_s32(v134, v182[2])));
        int8x16_t v25 = (int8x16_t)vcgtq_f32((float32x4_t)v185, v135);
        int8x16_t v185 = vbslq_s8(v25, (int8x16_t)v135, v185);
        int8x16_t v43 = vbslq_s8(v25, (int8x16_t)vdupq_n_s32(v36), v43);
        int8x16_t v180 = v43;
        int v45 = 1;
      }
      if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)v186, v58))), 0xFuLL))))
      {
        int v41 = 0;
      }
      else
      {
        int32x4_t v136 = *(int32x4_t *)(a1 + 432);
        unsigned int v137 = HIDWORD(*(void *)(a1 + 432));
        unsigned int v138 = *(void *)(a1 + 440);
        if (v26)
        {
          v25.i8[0] = *(unsigned char *)(v38 + v138);
          v25.i8[4] = *(unsigned char *)(v38 + v136.u32[3]);
          v139.i32[0] = *(unsigned __int8 *)(v38 + v136.u32[0]);
          v139.i32[1] = *(unsigned __int8 *)(v38 + v137);
          v139.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v25.i8, (int8x8_t)0xFF000000FFLL);
          float32x4_t v140 = vmulq_f32(v33, vcvtq_f32_u32(v139));
        }
        else
        {
          v140.i32[0] = *(_DWORD *)(v37 + 4 * v136.u32[0]);
          v140.i32[1] = *(_DWORD *)(v37 + 4 * v137);
          v140.i32[2] = *(_DWORD *)(v37 + 4 * v138);
          v140.i32[3] = *(_DWORD *)(v37 + 4 * v136.u32[3]);
        }
        int64x2_t v141 = (const float *)(*(void *)(a1 + 1008) + 4 * v36);
        int32x4_t v142 = (int32x4_t)vld1q_dup_f32(v141);
        int32x4_t v143 = vsubq_s32(v136, v142);
        int64x2_t v144 = (const float *)(*(void *)(a1 + 16) + 6664);
        int32x4_t v145 = (int32x4_t)vld1q_dup_f32(v144);
        int32x4_t v146 = vabsq_s32(v143);
        float v147 = (const float *)(a1 + 112);
        int32x4_t v148 = (int32x4_t)vld1q_dup_f32(v147);
        int32x4_t v149 = vabsq_s32(vsubq_s32(v148, v143));
        int v150 = (const float *)(a1 + 1060);
        int32x4_t v151 = (int32x4_t)vld1q_dup_f32(v150);
        int8x16_t v152 = (int8x16_t)vcgtq_s32(v145, v146);
        float v153 = (const float *)(*(void *)(a1 + 1024) + 4 * v36);
        float32x4_t v154 = vld1q_dup_f32(v153);
        float32x4_t v155 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v149, v151), *(int8x16_t *)(a1 + 880), (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 752), vaddq_f32(v140, v154))), v152);
        if (*(void *)(a1 + 32) == *(void *)(a1 + 48) || *(void *)(a1 + 104))
        {
          v156.i32[0] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 496));
          v156.i32[1] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 500));
          v156.i32[2] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 504));
          v156.i32[3] = *(_DWORD *)(v54 + 4 * *(unsigned int *)(a1 + 508));
          unsigned int v157 = (const float *)(*(void *)(a1 + 1016) + 4 * v36);
          float32x4_t v158 = vld1q_dup_f32(v157);
          float32x4_t v155 = vaddq_f32(vmulq_f32(*(float32x4_t *)(a1 + 816), vaddq_f32(*(float32x4_t *)(a1 + 624), vaddq_f32(v156, v158))), v155);
        }
        unint64_t v159 = (const float *)(v55 + v35);
        int32x4_t v160 = (int32x4_t)vld1q_dup_f32(v159);
        int8x16_t v25 = (int8x16_t)vceqq_s32(v160, v182[3]);
        float32x4_t v161 = vaddq_f32(v58, (float32x4_t)vbicq_s8((int8x16_t)vaddq_f32(v155, *(float32x4_t *)(a1 + 688)), v25));
        int8x16_t v162 = (int8x16_t)vcgtq_f32((float32x4_t)v186, v161);
        int8x16_t v186 = vbslq_s8(v162, (int8x16_t)v161, v186);
        int8x16_t v42 = vbslq_s8(v162, (int8x16_t)vdupq_n_s32(v36), v42);
        int8x16_t v181 = v42;
        int v41 = 1;
      }
      v35 += 24;
      ++v36;
      uint64_t v31 = v53;
      uint64_t v32 = v52;
    }
    while (v34 != v49);
  }
  uint64_t v163 = 0;
  uint64_t v164 = *a3;
  BOOL v165 = v175;
  unint64_t v166 = -4;
  do
  {
    long long v167 = *(long long *)((char *)&v178 + v163);
    long long v168 = *(long long *)((char *)&__b + v163);
    uint64_t v169 = *(v165 - 2);
    *(float *)(v169 + 12) = *(float *)&v168 + *(float *)(v169 + 12);
    *(void *)(v169 + 16) = v164 + 24 * (int)v167;
    if (v164) {
      ++*(_DWORD *)(v164 + 24 * (int)v167 + 8);
    }
    uint64_t v170 = *(v165 - 1);
    *(float *)(v170 + 12) = *((float *)&v168 + 1) + *(float *)(v170 + 12);
    *(void *)(v170 + 16) = v164 + 24 * SDWORD1(v167);
    if (v164) {
      ++*(_DWORD *)(v164 + 24 * SDWORD1(v167) + 8);
    }
    uint64_t v171 = *v165;
    *(float *)(v171 + 12) = *((float *)&v168 + 2) + *(float *)(*v165 + 12);
    *(void *)(v171 + 16) = v164 + 24 * SDWORD2(v167);
    if (v164) {
      ++*(_DWORD *)(v164 + 24 * SDWORD2(v167) + 8);
    }
    uint64_t v172 = v165[1];
    *(float *)(v172 + 12) = *((float *)&v168 + 3) + *(float *)(v172 + 12);
    *(void *)(v172 + 16) = v164 + 24 * SHIDWORD(v167);
    if (v164) {
      ++*(_DWORD *)(v164 + 24 * SHIDWORD(v167) + 8);
    }
    v166 += 4;
    v163 += 16;
    v165 += 4;
  }
  while (v166 < 0xC);
  return 0;
}

uint64_t precomp_DoInnerLoop_simd_nosylrate_nopitchdeviation(float32x4_t *a1, uint64_t *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v8 = a4;
  uint64_t v9 = (__int32 *)(*a2 + 24 * a4);
  v53.i32[0] = *v9;
  v53.i32[1] = v9[6];
  v53.i32[2] = v9[12];
  v53.i32[3] = v9[18];
  int32x4_t v51 = v53;
  v52[0] = v9[1];
  v52[1] = v9[7];
  v52[2] = v9[13];
  v52[3] = v9[19];
  precomp_FetchRightNode((uint64_t)a1, a5, v53.i32, v52, 4);
  __int32 v12 = a1[68].i32[0];
  uint64_t v13 = a1[8].i64[0];
  uint64_t v14 = a1[8].i64[1];
  int8x16_t v15 = 0uLL;
  uint64_t v16 = a1[9].i64[0];
  uint64_t v17 = a1[9].i64[1];
  if (v12)
  {
    v10.i32[0] = *(_DWORD *)(a1[2].i64[1] + 6720);
    v11.i32[0] = 998277249;
    uint64_t v18 = a1[9].i64[1];
    uint64_t v19 = a1[9].i64[0];
    uint64_t v20 = a1[8].i64[1];
    uint64_t v21 = a1[8].i64[0];
    float32x4_t v22 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmulq_f32(v10, v11), 0);
    uint64_t v17 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    float32x4_t v22 = 0uLL;
  }
  uint64_t v23 = *(unsigned int *)(a3 + 12);
  float32x4_t v24 = *(const float **)a3;
  if ((int)v23 < 1)
  {
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x4B189680u);
  }
  else
  {
    uint64_t v25 = 0;
    v26.i64[0] = -1;
    v26.i64[1] = -1;
    int32x4_t v27 = vaddq_s32(v51, v26);
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x4B189680u);
    int8x16_t v15 = 0uLL;
    int v29 = *(const float **)a3;
    do
    {
      uint64_t v30 = v29 + 3;
      float32x4_t v31 = vld1q_dup_f32(v30);
      int8x8_t v32 = (int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v28, v31))), 0xFuLL));
      v32.i16[0] = vminv_u16((uint16x4_t)v32);
      if (v32.i8[0]) {
        break;
      }
      uint64_t v33 = *(unsigned int *)(a1[64].i64[1] + 4 * v25);
      if (v12)
      {
        v32.i8[0] = *(unsigned char *)(v19 + v33);
        v32.i8[4] = *(unsigned char *)(v18 + v33);
        v34.i32[0] = *(unsigned __int8 *)(v21 + v33);
        v34.i32[1] = *(unsigned __int8 *)(v20 + v33);
        v34.u64[1] = (unint64_t)vand_s8(v32, (int8x8_t)0xFF000000FFLL);
        float32x4_t v35 = vmulq_f32(v22, vcvtq_f32_u32(v34));
      }
      else
      {
        v35.i32[0] = *(_DWORD *)(v13 + 4 * v33);
        v35.i32[1] = *(_DWORD *)(v14 + 4 * v33);
        v35.i32[2] = *(_DWORD *)(v16 + 4 * v33);
        v35.i32[3] = *(_DWORD *)(v17 + 4 * v33);
      }
      uint64_t v36 = (const float *)(a1[64].i64[0] + 4 * v25);
      float32x4_t v37 = vld1q_dup_f32(v36);
      float32x4_t v38 = vmulq_f32(a1[44], vaddq_f32(v35, v37));
      if (a1[2].i64[0] == a1[3].i64[0] || a1[6].i64[1])
      {
        uint64_t v39 = *(unsigned int *)(a1[62].i64[1] + 4 * v25);
        v40.i32[0] = *(_DWORD *)(a1[16].i64[0] + 4 * v39);
        v40.i32[1] = *(_DWORD *)(a1[16].i64[1] + 4 * v39);
        v40.i32[2] = *(_DWORD *)(a1[17].i64[0] + 4 * v39);
        v40.i32[3] = *(_DWORD *)(a1[17].i64[1] + 4 * v39);
        int v41 = (const float *)(a1[63].i64[1] + 4 * v25);
        float32x4_t v42 = vld1q_dup_f32(v41);
        float32x4_t v38 = vaddq_f32(v38, vmulq_f32(a1[48], vaddq_f32(a1[36], vaddq_f32(v40, v42))));
      }
      int32x4_t v43 = (int32x4_t)vld1q_dup_f32(v29);
      float32x4_t v44 = vaddq_f32(v31, (float32x4_t)vbicq_s8((int8x16_t)vaddq_f32(v38, a1[40]), (int8x16_t)vceqq_s32(v43, v27)));
      int8x16_t v45 = (int8x16_t)vcgtq_f32(v28, v44);
      float32x4_t v28 = (float32x4_t)vbslq_s8(v45, (int8x16_t)v44, (int8x16_t)v28);
      int8x16_t v15 = vbslq_s8(v45, (int8x16_t)vdupq_n_s32(v25++), v15);
      v29 += 6;
    }
    while (v23 != v25);
  }
  uint64_t v46 = v7 + 24 * (int)v8;
  *(float *)(v46 + 12) = v28.f32[0] + *(float *)(v46 + 12);
  *(void *)(v46 + 16) = &v24[6 * v15.i32[0]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[0] + 2]);
  }
  uint64_t v47 = v7 + 24 * (v8 + 1);
  *(float *)(v47 + 12) = v28.f32[1] + *(float *)(v47 + 12);
  *(void *)(v47 + 16) = &v24[6 * v15.i32[1]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[1] + 2]);
  }
  uint64_t v48 = v7 + 24 * (v8 + 2);
  *(float *)(v48 + 12) = v28.f32[2] + *(float *)(v48 + 12);
  *(void *)(v48 + 16) = &v24[6 * v15.i32[2]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[2] + 2]);
  }
  uint64_t v49 = v7 + 24 * (v8 + 3);
  *(float *)(v49 + 12) = v28.f32[3] + *(float *)(v49 + 12);
  *(void *)(v49 + 16) = &v24[6 * v15.i32[3]];
  if (v24) {
    ++LODWORD(v24[6 * v15.i32[3] + 2]);
  }
  return 0;
}

uint64_t UNICORN__InitTreeSet(uint64_t a1, _OWORD *a2)
{
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return 0;
}

double UNICORN__DeInitTreeSet(uint64_t a1, _OWORD *a2)
{
  if (a2)
  {
    for (uint64_t i = 56; i != 96; i += 8)
    {
      uint64_t v5 = *(void *)((char *)a2 + i);
      if (v5) {
        heap_Free(*(void **)(a1 + 8), v5);
      }
    }
    double result = 0.0;
    a2[5] = 0u;
    a2[6] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

uint64_t UNICORN__LoadTreesFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  unsigned __int16 v30 = 0;
  uint64_t v9 = *a4;
  if (a4[4] - v9 >= 8 && *(unsigned char *)(*((void *)a4 + 1) + v9) == 48)
  {
    *a4 = v9 + 2;
    uint64_t v12 = a3;
    uint64_t v13 = (_WORD *)(a2 + 2 * a3 + 96);
    if (BET3FLT__xfread_BET3(v13, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3(&v30, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3((void *)(a2 + 2 * v12), 2u, 1, a4) == 1)
    {
      int v14 = BET3FLT__xfread2ptr_BET3((void *)(a2 + 8 * v12 + 16), 1u, v30, a4);
      if (v14 == v30)
      {
        if (*a4) {
          ++*a4;
        }
        uint64_t v15 = heap_Calloc(*(void **)(v8 + 8), 16, (unsigned __int16)*v13);
        uint64_t v21 = a2 + 8 * v12;
        *(void *)(v21 + 56) = v15;
        float32x4_t v22 = (uint64_t *)(v21 + 56);
        if (!v15)
        {
          UNICORN__log_select_Error(v8, 55000, (uint64_t)"LoadTreesFile : out of memory for type %s\n", v16, v17, v18, v19, v20);
          return 2229280778;
        }
        if (!*v13) {
          return 0;
        }
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        while (BET3FLT__xfread_BET3((void *)(v15 + v23), 2u, 1, a4) == 1)
        {
          if (BET3FLT__xfread_BET3((void *)(*v22 + v23 + 2), 2u, 1, a4) != 1) {
            break;
          }
          int v25 = BET3FLT__xfread2ptr_BET3((void *)(*v22 + v23 + 8), 2u, 3 * *(unsigned __int16 *)(*v22 + v23 + 2), a4);
          uint64_t v15 = *v22;
          if (v25 != 3 * *(unsigned __int16 *)(*v22 + v23 + 2)) {
            break;
          }
          uint64_t v26 = 0;
          ++v24;
          v23 += 16;
          if (v24 >= (unsigned __int16)*v13) {
            return v26;
          }
        }
        uint64_t v26 = 2229280772;
        int32x4_t v27 = "LoadTreesFile : corrupt tree nodes for type %s, state %u\n";
        a1 = v8;
        uint64_t v28 = 55015;
      }
      else
      {
        uint64_t v26 = 2229280772;
        int32x4_t v27 = "LoadTreesFile : corrupt tree questions for type %s\n";
        a1 = v8;
        uint64_t v28 = 55013;
      }
    }
    else
    {
      uint64_t v26 = 2229280772;
      int32x4_t v27 = "LoadTreesFile : corrupt tree header for type %s\n";
      a1 = v8;
      uint64_t v28 = 55012;
    }
  }
  else
  {
    uint64_t v26 = 2229280772;
    int32x4_t v27 = "LoadTreesFile : invalid tree data version for type %s\n";
    uint64_t v28 = 55011;
  }
  UNICORN__log_select_Error(a1, v28, (uint64_t)v27, (uint64_t)a4, a5, a6, a7, a8);
  return v26;
}

uint64_t UNICORN__TreeSearch(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  LOWORD(v5) = 0;
  uint64_t v6 = a3 + 8 * a4;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(void *)(*(void *)(v6 + 56) + 16 * a5 + 8);
  uint64_t v9 = a2 + 2;
  uint64_t v10 = a2 + 1;
  while (2)
  {
    uint64_t v11 = -(uint64_t)(__int16)v5;
    uint64_t v12 = (unsigned __int16 *)(v8 + 6 * (int)v11);
    uint64_t v13 = (unsigned __int8 *)(v7 + *v12);
    uint64_t v14 = *v13;
    int v15 = v13[1];
    uint64_t v5 = v12[1];
    switch(*v13)
    {
      case 0xFCu:
        if (a2 < 2) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + (a2 - 2));
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFDu:
        if (a2 < 1) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + (a2 - 1));
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFEu:
        if ((int)v10 >= *(__int16 *)(a1 + 10)) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + v10);
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFFu:
        if ((int)v9 >= *(__int16 *)(a1 + 10))
        {
LABEL_20:
          unsigned __int8 v16 = -1;
          if (v13[1]) {
            goto LABEL_24;
          }
        }
        else
        {
          unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + v9);
          if (v13[1]) {
            goto LABEL_24;
          }
        }
        goto LABEL_39;
      default:
        if (v14 == 3)
        {
          unsigned int v17 = *(unsigned __int16 *)(*(void *)(a1 + 1784) + 2 * a2);
          BOOL v18 = v17 > 0x19;
          unsigned __int8 v16 = 10 * v17;
          if (v18) {
            unsigned __int8 v16 = -1;
          }
          if (!v13[1]) {
            goto LABEL_39;
          }
        }
        else
        {
          uint64_t v19 = *(void *)(a1 + 8 * v14 + 16);
          if (!v19) {
            goto LABEL_39;
          }
          unsigned __int8 v16 = *(unsigned char *)(v19 + a2);
          if (!v13[1]) {
            goto LABEL_39;
          }
        }
LABEL_24:
        uint64_t v20 = v13 + 2;
        if (v15 == 255)
        {
          if (*v20 <= v16 && v13[3] >= v16) {
            goto LABEL_30;
          }
        }
        else
        {
          int v21 = v15 - 1;
          if (v21)
          {
            int v22 = 0;
            while (1)
            {
              int v23 = v21 + v22;
              if (v21 + v22 < 0 != __OFADD__(v21, v22)) {
                ++v23;
              }
              int v24 = v23 >> 1;
              unsigned int v25 = v20[v24];
              if (v25 == v16) {
                break;
              }
              if (v16 < v25) {
                int v21 = v24 - 1;
              }
              else {
                int v22 = v24 + 1;
              }
              if (v22 > v21) {
                goto LABEL_39;
              }
            }
LABEL_30:
            uint64_t v5 = *(unsigned __int16 *)(v8 + 6 * (int)v11 + 4);
            goto LABEL_39;
          }
          if (*v20 == v16) {
            goto LABEL_30;
          }
        }
LABEL_39:
        if ((v5 & 0x8000) != 0) {
          continue;
        }
        return v5;
    }
  }
}

float UNICORN__mlpg(uint64_t a1, int a2)
{
  unint64_t v4 = *(unsigned int *)(a1 + 20);
  if ((int)v4 <= 0)
  {
    uint64_t v9 = *(float ***)(a1 + 96);
    LODWORD(v11) = *(_DWORD *)(a1 + 24);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2;
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v7 = *(void *)(a1 + 80);
    uint64_t v9 = *(float ***)(a1 + 96);
    uint64_t v10 = *(void *)(a1 + 104);
    uint64_t v11 = *(unsigned int *)(a1 + 24);
    uint64_t v12 = *(unsigned int **)(a1 + 32);
    uint64_t v13 = *v12;
    uint64_t v66 = v13;
    uint64_t v67 = a2;
    int32x4_t v68 = v9;
    do
    {
      uint64_t v14 = *(void *)(v7 + 8 * v5);
      *(float *)(v10 + 4 * v5) = *(float *)(v14 + 4 * v6) * *(float *)(*(void *)(v8 + 8 * v5) + 4 * v6);
      int v15 = v9[v5];
      *int v15 = *(float *)(v14 + 4 * v6);
      if ((int)v11 >= 2)
      {
        bzero(v15 + 1, 4 * (v11 - 1));
        uint64_t v13 = v66;
        uint64_t v6 = v67;
        uint64_t v9 = v68;
      }
      if ((int)v13 >= 2)
      {
        uint64_t v16 = *((void *)v12 + 1);
        for (uint64_t i = 1; i != v13; ++i)
        {
          BOOL v18 = *(int **)(v16 + 8 * i);
          uint64_t v19 = *v18;
          uint64_t v20 = v18[1];
          if ((int)v19 <= (int)v20)
          {
            uint64_t v21 = -4 * v19;
            uint64_t v22 = -v19;
            do
            {
              if (v19 + v5 < v4)
              {
                uint64_t v23 = *(void *)(*((void *)v12 + 2) + 8 * i);
                float v24 = *(float *)(v23 - 4 * v19);
                if (v24 != 0.0)
                {
                  int v25 = a2 + *(_DWORD *)(a1 + 16) * i;
                  uint64_t v26 = 8 * (v19 + v5);
                  float v27 = v24 * *(float *)(*(void *)(v7 + v26) + 4 * v25);
                  *(float *)(v10 + 4 * v5) = *(float *)(v10 + 4 * v5)
                                           + (float)(v27 * *(float *)(*(void *)(v8 + v26) + 4 * v25));
                  if ((int)v11 >= 1)
                  {
                    uint64_t v28 = 0;
                    uint64_t v29 = v23 + v21;
                    do
                    {
                      BOOL v30 = v22 + v28 <= v20 && v28 < (uint64_t)(v4 - v5);
                      if (v30)
                      {
                        float v31 = *(float *)(v29 + 4 * v28);
                        if (v31 != 0.0) {
                          v15[v28] = v15[v28] + (float)(v27 * v31);
                        }
                      }
                      ++v28;
                    }
                    while (v11 != v28);
                  }
                }
              }
              ++v19;
              v21 -= 4;
              --v22;
            }
            while (v20 + 1 != v19);
          }
        }
      }
      ++v5;
    }
    while (v5 != v4);
  }
  int8x8_t v32 = *v9;
  float v33 = sqrtf(**v9);
  **uint64_t v9 = v33;
  if ((int)v11 >= 2)
  {
    uint64_t v34 = v11 - 1;
    float32x4_t v35 = v32 + 1;
    do
    {
      *float32x4_t v35 = *v35 / v33;
      ++v35;
      --v34;
    }
    while (v34);
  }
  if ((int)v4 <= 1)
  {
    int32x4_t v53 = *(float **)(a1 + 88);
    float *v53 = **(float **)(a1 + 104) / v33;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v37 = 1;
    float32x4_t v38 = v9;
    do
    {
      if ((int)v11 < 2)
      {
        *v9[v37] = sqrtf(*v9[v37]);
      }
      else
      {
        uint64_t v39 = v36;
        uint64_t v40 = 1;
        do
        {
          if ((v39 & 0x8000000000000000) == 0)
          {
            float v41 = v9[v39][v40];
            *v9[v37] = *v9[v37] - (float)(v41 * v41);
          }
          ++v40;
          --v39;
        }
        while (v11 != v40);
        float32x4_t v42 = v9[v37];
        float v43 = sqrtf(*v42);
        *float32x4_t v42 = v43;
        uint64_t v44 = *(unsigned int *)(*(void *)(a1 + 32) + 32);
        uint64_t v45 = 1;
        do
        {
          uint64_t v46 = v45 + 1;
          if ((int)v44 > 0)
          {
            uint64_t v47 = v45;
            uint64_t v48 = v38;
            uint64_t v49 = v44;
            do
            {
              if (v45 != v11 - 1) {
                v42[v45] = v42[v45] - (float)((*v48)[v47] * (*v48)[v46]);
              }
              --v47;
              --v48;
              --v49;
            }
            while (v49);
          }
          v42[v45] = v42[v45] / v43;
          ++v45;
        }
        while (v46 != v11);
      }
      ++v37;
      ++v36;
      ++v38;
    }
    while (v37 != v4);
    uint64_t v50 = 0;
    int32x4_t v51 = *(float **)(a1 + 104);
    float v52 = *v51 / *v32;
    int32x4_t v53 = *(float **)(a1 + 88);
    float *v53 = v52;
    for (uint64_t j = 1; j != v4; ++j)
    {
      float v55 = 0.0;
      if ((int)v11 >= 2)
      {
        uint64_t v56 = v50;
        uint64_t v57 = 1;
        do
        {
          if ((v56 & 0x8000000000000000) == 0)
          {
            float v58 = v9[v56][v57];
            if (v58 != 0.0) {
              float v55 = v55 + (float)(v58 * v53[v56]);
            }
          }
          ++v57;
          --v56;
        }
        while (v11 != v57);
      }
      v53[j] = (float)(v51[j] - v55) / *v9[j];
      ++v50;
    }
  }
  float result = v53[(int)v4 - 1] / *v9[(int)v4 - 1];
  uint64_t v60 = *(void *)(a1 + 40);
  *(float *)(*(void *)(v60 + 8 * ((int)v4 - 1)) + 4 * a2) = result;
  if ((int)v4 >= 2)
  {
    uint64_t v61 = (v4 - 2);
    uint64_t v62 = v60 + 8 * v61;
    do
    {
      float v63 = 0.0;
      if ((int)v11 >= 2)
      {
        uint64_t v64 = 1;
        do
        {
          if (v61 + v64 < (uint64_t)v4)
          {
            float v65 = v9[v61][v64];
            if (v65 != 0.0) {
              float v63 = v63 + (float)(v65 * *(float *)(*(void *)(v62 + 8 * v64) + 4 * a2));
            }
          }
          ++v64;
        }
        while (v11 != v64);
      }
      float result = (float)(v53[v61] - v63) / *v9[v61];
      *(float *)(*(void *)(v60 + 8 * v61) + 4 * a2) = result;
      v62 -= 8;
      BOOL v30 = v61-- <= 0;
    }
    while (!v30);
  }
  return result;
}

uint64_t UNICORN__dummy_solver(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(unsigned int *)(result + 20);
    do
    {
      if ((int)v3 >= 1)
      {
        unint64_t v4 = *(uint64_t **)(result + 40);
        uint64_t v5 = v3;
        do
        {
          uint64_t v6 = *v4++;
          *(_DWORD *)(v6 + 4 * v2) = 0;
          --v5;
        }
        while (v5);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return result;
}

uint64_t UNICORN__select_bet5_FeatureExtractObjOpen(_WORD *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v16 = 0;
  *a5 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v9 = (void *)heap_Calloc(*(void **)(v16 + 8), 1, 24);
    if (v9)
    {
      *uint64_t v9 = v16;
      v9[1] = a3;
      v9[2] = a4;
      *a5 = v9;
    }
    else
    {
      log_OutPublic(*(void *)(v16 + 32), (uint64_t)"SELECT_BET5", 55000, 0, v10, v11, v12, v13, v15);
      return 2229280778;
    }
  }
  return inited;
}

uint64_t UNICORN__select_bet5_FeatureExtractProcessStart(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6)
{
  bzero(a5, 0xE48uLL);
  *a5 = a2;
  uint64_t v12 = *a1;
  uint64_t v13 = a1[2];
  return usextract_ProcessStart(v12, (uint64_t)"SELECT_BET5", v13, a3, a4, (uint64_t)a5, a6);
}

uint64_t UNICORN__select_bet5_FeatureExtractProcess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t *a11, unsigned int *a12)
{
  uint64_t v14 = a1;
  uint64_t v115 = *MEMORY[0x263EF8340];
  uint64_t v15 = *a1;
  unsigned int v113 = 0;
  if (a11) {
    BOOL v16 = a12 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = !v16;
  if (!v16)
  {
    *a11 = 0;
    *a12 = 0;
  }
  int v107 = v17;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = *(__int16 *)(a10 + 10);
  do
  {
    if (*(unsigned char *)(*(void *)a10 + 2748 + v18) == 1) {
      ++v19;
    }
    ++v18;
  }
  while (v18 != 218);
  uint64_t v21 = heap_Calloc(*(void **)(v15 + 8), (v19 * v20), 1);
  if (!v21)
  {
LABEL_137:
    int v43 = -2065686518;
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET5", 55000, 0, v22, v23, v24, v25, v104);
LABEL_138:
    if (a12) {
      goto LABEL_142;
    }
    goto LABEL_146;
  }
  uint64_t v26 = v21;
  uint64_t v109 = a3;
  int32x4_t v110 = v14;
  for (uint64_t i = 0; i != 218; ++i)
  {
    uint64_t v28 = *(void *)a10;
    int v29 = *(unsigned __int8 *)(*(void *)a10 + i + 2748);
    if (*(unsigned char *)(*(void *)a10 + i + 2748))
    {
      if (v29 == 2)
      {
        uint64_t v30 = heap_Calloc(*(void **)(v15 + 8), v20, 2);
        *(void *)(a10 + 8 * i + 1760) = v30;
        if (!v30) {
          goto LABEL_43;
        }
      }
      else if (v29 == 1)
      {
        *(void *)(a10 + 8 * i + 16) = v26;
        v26 += v20;
      }
      else
      {
        switch((int)i)
        {
          case '.':
            uint64_t v31 = heap_Calloc(*(void **)(v15 + 8), v20, 9);
            *(void *)(a10 + 3560) = v31;
            if (!v31) {
              goto LABEL_43;
            }
            continue;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_28;
          case '3':
            int v33 = *(unsigned __int16 *)(v28 + 2966);
            if (v33)
            {
              uint64_t v34 = heap_Calloc(*(void **)(v15 + 8), (v33 * v20), 4);
              *(void *)(a10 + 3568) = v34;
              if (!v34) {
                goto LABEL_43;
              }
            }
            continue;
          case '4':
            int v35 = *(unsigned __int16 *)(v28 + 2966);
            if (v35)
            {
              uint64_t v36 = heap_Calloc(*(void **)(v15 + 8), (v35 * v20), 4);
              *(void *)(a10 + 3576) = v36;
              if (!v36) {
                goto LABEL_43;
              }
            }
            continue;
          case '5':
            int v37 = *(unsigned __int16 *)(v28 + 3360);
            if (v37)
            {
              uint64_t v38 = heap_Calloc(*(void **)(v15 + 8), (v37 * v20), 4);
              *(void *)(a10 + 3584) = v38;
              if (!v38) {
                goto LABEL_43;
              }
            }
            continue;
          case '6':
            int v39 = *(unsigned __int16 *)(v28 + 3360);
            if (v39)
            {
              uint64_t v40 = heap_Calloc(*(void **)(v15 + 8), (v39 * v20), 4);
              *(void *)(a10 + 3592) = v40;
              if (!v40) {
                goto LABEL_43;
              }
            }
            continue;
          case '8':
            int v41 = *(unsigned __int16 *)(v28 + 2966);
            if (v41)
            {
              uint64_t v42 = heap_Calloc(*(void **)(v15 + 8), (v41 * v20), 1);
              *(void *)(a10 + 3600) = v42;
              if (!v42) {
                goto LABEL_43;
              }
            }
            continue;
          default:
            if (i == 24)
            {
              uint64_t v32 = heap_Calloc(*(void **)(v15 + 8), v20, 8);
              *(void *)(a10 + 3552) = v32;
              if (!v32)
              {
LABEL_43:
                int v43 = -2065686518;
                log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET5", 55000, 0, v22, v23, v24, v25, v104);
                goto LABEL_44;
              }
            }
            else
            {
LABEL_28:
              log_OutPublic(*(void *)(*v14 + 32), (uint64_t)"SELECT_BET5", 55007, "%s%u", v22, v23, v24, v25, "feature");
            }
            break;
        }
      }
    }
  }
  unsigned int v44 = *(unsigned __int16 *)(*(void *)a10 + 3578);
  if (v44 >= 4)
  {
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET5", 55000, "Invalid number of states per phoneme", v22, v23, v24, v25, "%s%u");
    int v43 = -2065686513;
    goto LABEL_141;
  }
  uint64_t v45 = (void *)heap_Calloc(*(void **)(v15 + 8), v44 * v20, 4);
  *(void *)(a10 + 3608) = v45;
  if (!v45)
  {
LABEL_140:
    int v43 = -2065686518;
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET5", 55000, 0, v46, v47, v48, v49, v104);
    goto LABEL_141;
  }
  if (*(unsigned __int16 *)(*(void *)a10 + 3578) * v20) {
    memset(v45, 255, 4 * *(unsigned __int16 *)(*(void *)a10 + 3578) * v20);
  }
  int GenericFeatureLayers = usextract_allocateGenericFeatureLayers(*v14, (uint64_t)"SELECT_BET5", (void *)a10, v20);
  if (GenericFeatureLayers < 0)
  {
    int v43 = GenericFeatureLayers;
    if (a12) {
      goto LABEL_142;
    }
    goto LABEL_146;
  }
  int v43 = usextract_Process(*v14, (uint64_t)"SELECT_BET5", v14[2], a3, a4, a10, v51, v52);
  if (v43 < 0) {
    goto LABEL_138;
  }
  uint64_t v106 = a4;
  if (*(void *)(a10 + 3504))
  {
    uint64_t v53 = *(void *)a10;
    uint64_t v54 = **(const char ***)(*(void *)a10 + 3336);
    if (v54)
    {
      uint64_t v55 = 0;
      unsigned int v56 = 1;
      do
      {
        if (!strncmp(v54, "INNO_", 5uLL))
        {
          unsigned int v58 = atoi(v54 + 5) + 79;
          if (v58 <= 0x5E) {
            *(void *)(a10 + 8 * v58 + 16) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
          }
        }
        else
        {
          unsigned int Index = usextract_getIndex(*(const char ***)(*(void *)(v53 + 3344) + 8 * v55), "FEATIDX", (unint64_t)"");
          if (Index == -1)
          {
            uint64_t v53 = *(void *)a10;
            int32x4_t v59 = *(const char **)(*(void *)(*(void *)a10 + 3336) + 8 * v55);
            if (!strcmp(v59, "POS"))
            {
              *(void *)(a10 + 504) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
            }
            else if (!strcmp(v59, "PHR"))
            {
              *(void *)(a10 + 512) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
            }
          }
          else
          {
            uint64_t v53 = *(void *)a10;
            *(void *)(a10
                      + 8 * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)a10 + 3352) + 8 * v55) + Index)
                      + 16) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
          }
        }
        uint64_t v55 = v56;
        uint64_t v54 = *(const char **)(*(void *)(v53 + 3336) + 8 * v56++);
      }
      while (v54);
    }
  }
  int v105 = *(__int16 *)(a10 + 10);
  unsigned int v60 = v105 & ~(v105 >> 31);
  if (BET3FLT__log_select_GetLogLevel(*(void *)(v15 + 32)) >= 6)
  {
    LH_itoa(0x4Eu, (char *)v114, 0xAu);
    for (uint64_t j = 0; j != 218; ++j)
    {
      uint64_t v62 = "application/x-realspeak-usplosives;version=4.0";
      switch((int)j)
      {
        case 2:
          char v112 = 5;
          char v111 = 0;
          log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET5", 99, 0, (uint64_t)v114, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
            (uint64_t)&v112,
            1u,
            0);
          log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET5", 99, 0, (uint64_t)v114, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
            *(void *)(a10 + 8 * j + 16),
            v60,
            0);
          log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET5", 99, 0, (uint64_t)v114, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
            (uint64_t)&v111,
            1u,
            0);
          continue;
        case 3:
          uint64_t v62 = "application/x-realspeak-usdurs;version=4.0";
          goto LABEL_72;
        case 4:
          goto LABEL_72;
        case 5:
          uint64_t v62 = "application/x-realspeak-usmarkers-u16;version=4.0";
LABEL_72:
          int v63 = *(unsigned __int8 *)(*(void *)a10 + j + 2748);
          if (v63 == 2)
          {
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET5", 99, 0, (uint64_t)v114, (uint64_t)v62, *(void *)(a10 + 8 * j + 1760), 2 * v60, 0);
          }
          else if (v63 == 1)
          {
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET5", 99, 0, (uint64_t)v114, (uint64_t)v62, *(void *)(a10 + 8 * j + 16), v60, 0);
          }
          break;
        default:
          continue;
      }
    }
  }
  unsigned int v64 = v105 & ~(v105 >> 31);
  paramc_ParamGetUInt(*(void *)(v15 + 40), (uint64_t)"waitfactor", &v113);
  unint64_t v65 = *(unsigned int *)(a10 + 3520);
  if (!v65)
  {
    uint64_t v14 = v110;
LABEL_87:
    featextract_adjustSilAudioOrder(a10);
    int v73 = v105;
    if (v105 < 1)
    {
      int v74 = 0;
      a4 = v106;
      if (!v107) {
        goto LABEL_115;
      }
    }
    else
    {
      int v74 = 0;
      int8x16_t v75 = *(_DWORD **)(a10 + 3608);
      if (v64 <= 1) {
        uint64_t v76 = 1;
      }
      else {
        uint64_t v76 = v64;
      }
      a4 = v106;
      do
      {
        if (*v75 == -2) {
          ++v74;
        }
        v75 += *(unsigned __int16 *)(*(void *)a10 + 3578);
        --v76;
      }
      while (v76);
      if (!v107) {
        goto LABEL_115;
      }
    }
    int v77 = v64 - v74;
    int v78 = *(_DWORD *)(a10 + 3520);
    uint64_t v79 = (v78 + v77);
    *a12 = v79;
    if (!(v78 + v77)) {
      goto LABEL_115;
    }
    uint64_t v80 = heap_Calloc(*(void **)(v15 + 8), v79, 32);
    *a11 = v80;
    if (v80)
    {
      float32x4_t v81 = (void *)heap_Calloc(*(void **)(v15 + 8), *(__int16 *)(a10 + 10), 2);
      a3 = v109;
      if (v81)
      {
        uint64_t v82 = (uint64_t)v81;
        memcpy(v81, *(const void **)(a10 + 1800), 2 * *(__int16 *)(a10 + 10));
        int v73 = v105;
        if (*a12)
        {
          unsigned int v83 = 0;
          unint64_t v84 = 0;
          unsigned int v85 = 0;
          while (v84 < *(unsigned int *)(a10 + 3520))
          {
            if (v83 >= v64)
            {
              int32x4_t v90 = (_OWORD *)(*(void *)(a10 + 3512) + 32 * v84);
              long long v91 = v90[1];
              int16x8_t v92 = (_OWORD *)(*a11 + 32 * v85);
              *int16x8_t v92 = *v90;
              v92[1] = v91;
              ++v85;
              ++v84;
            }
            else
            {
              if (!*(_WORD *)(v82 + 2 * v83)) {
                break;
              }
              unsigned int v86 = (_OWORD *)(*a11 + 32 * v85);
              uint32x4_t v87 = (_OWORD *)(*(void *)(a10 + 3512) + 32 * v84);
              long long v88 = v87[1];
              _OWORD *v86 = *v87;
              v86[1] = v88;
              ++v85;
              ++v84;
              --*(_WORD *)(v82 + 2 * v83);
            }
LABEL_113:
            if (v85 >= *a12) {
              goto LABEL_114;
            }
          }
          if (*(_DWORD *)(*(void *)(a10 + 3608) + 4 * v83 * *(unsigned __int16 *)(*(void *)a10 + 3578)) != -2)
          {
            float32x2_t v89 = (_DWORD *)(*a11 + 32 * v85);
            *float32x2_t v89 = 33;
            v89[6] = *(unsigned __int8 *)(*(void *)(a10 + 32) + v83);
            if (v85) {
              *(_DWORD *)(*a11 + 32 * v85 + 12) = *(_DWORD *)(*a11 + 32 * (v85 - 1) + 12);
            }
            ++v85;
          }
          ++v83;
          goto LABEL_113;
        }
LABEL_114:
        heap_Free(*(void **)(v15 + 8), v82);
LABEL_115:
        uint64_t v93 = a2;
        if (v73 >= 1)
        {
          uint64_t v94 = 0;
          if (v64 <= 1) {
            uint64_t v95 = 1;
          }
          else {
            uint64_t v95 = v64;
          }
          do
          {
            uint64_t v96 = *(void *)(a10 + 248);
            if (!*(unsigned char *)(v96 + v94)) {
              *(unsigned char *)(v96 + v94) = -1;
            }
            uint64_t v97 = *(void *)(a10 + 192);
            if (*(unsigned char *)(*(void *)(a10 + 32) + v94) == 35) {
              char v98 = 1;
            }
            else {
              char v98 = 2 * *(unsigned char *)(v97 + v94);
            }
            *(unsigned char *)(v97 + v94) = v98;
            uint64_t v99 = *(void *)(a10 + 32);
            if ((unsigned __int16)(v105 & ~(unsigned __int16)(v105 >> 31)) - 1 == v94 && *(unsigned char *)(v99 + v94) == 35)
            {
              signed int v100 = *(unsigned __int16 *)(*(void *)(a10 + 1784) + 2 * v94);
              v114[0] = 0;
              paramc_ParamGetUInt(*(void *)(v15 + 40), (uint64_t)"finalsentencefound", v114);
              uint64_t v93 = a2;
              if (!v100)
              {
                if (v114[0] == 1 || !v113) {
                  signed int v100 = *(_DWORD *)(a2 + 24);
                }
                else {
                  signed int v100 = 200 * v113;
                }
              }
              if (v100 >= 0xFFFF) {
                __int16 v101 = -1;
              }
              else {
                __int16 v101 = v100;
              }
              *(_WORD *)(*(void *)(a10 + 1784) + 2 * v94) = v101;
              uint64_t v99 = *(void *)(a10 + 32);
              a4 = v106;
            }
            *(unsigned char *)(v99 + v94) = *(unsigned char *)(v93 + *(unsigned __int8 *)(v99 + v94) + 4780);
            ++v94;
          }
          while (v95 != v94);
        }
        *a9 = v113;
LABEL_44:
        a3 = v109;
        uint64_t v14 = v110;
        if (a12) {
          goto LABEL_142;
        }
        goto LABEL_146;
      }
      goto LABEL_137;
    }
    goto LABEL_140;
  }
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  uint64_t v14 = v110;
  while (1)
  {
    uint64_t v68 = *(void *)(a10 + 3512);
    if (*(_DWORD *)(v68 + v66) == 25) {
      break;
    }
LABEL_82:
    ++v67;
    v66 += 32;
    if (v67 >= v65) {
      goto LABEL_87;
    }
  }
  unsigned int v113 = *(_DWORD *)(v68 + v66 + 24);
  int v43 = paramc_ParamSetUInt(*(void *)(v15 + 40), (uint64_t)"waitfactor", v113);
  if ((v43 & 0x80000000) == 0)
  {
    unint64_t v65 = *(unsigned int *)(a10 + 3520);
    goto LABEL_82;
  }
  log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET5", 55009, "%s%s%s%d%s%x", v69, v70, v71, v72, "parameter");
  a4 = v106;
LABEL_141:
  a3 = v109;
  if (a12)
  {
LABEL_142:
    if (a11 && v43 < 0 && *a11)
    {
      heap_Free(*(void **)(v15 + 8), *a11);
      *a11 = 0;
      *a12 = 0;
    }
  }
LABEL_146:
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(v14[2] + 64))(a3, a4);
  if ((int)result >= 0 || v43 <= -1) {
    return v43;
  }
  else {
    return result;
  }
}

uint64_t UNICORN__select_bet5_FeatureExtractProcessEnd(uint64_t *a1, void *a2)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = usextract_ProcessEnd(*a1, (uint64_t)"SELECT_BET5", (uint64_t)a2);
  usextract_freeGenericFeatureLayers((void *)*a1, (uint64_t)"SELECT_BET5", a2);
  uint64_t v10 = 0;
  int v11 = 1;
  do
  {
    int v12 = *(unsigned __int8 *)(*a2 + v10 + 2748);
    if (*(unsigned char *)(*a2 + v10 + 2748))
    {
      if (v12 == 2)
      {
        uint64_t v14 = a2[v10 + 220];
        if (v14) {
LABEL_11:
        }
          heap_Free(*(void **)(v4 + 8), v14);
      }
      else if (v12 == 1)
      {
        if (v11)
        {
          uint64_t v13 = a2[v10 + 2];
          if (v13) {
            heap_Free(*(void **)(v4 + 8), v13);
          }
          int v11 = 0;
        }
      }
      else
      {
        switch((int)v10)
        {
          case '.':
            uint64_t v14 = a2[445];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_20;
          case '3':
            uint64_t v14 = a2[446];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '4':
            uint64_t v14 = a2[447];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '5':
            uint64_t v14 = a2[448];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '6':
            uint64_t v14 = a2[449];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '8':
            uint64_t v14 = a2[450];
            if (v14) {
              goto LABEL_11;
            }
            break;
          default:
            if (v10 == 24)
            {
              uint64_t v14 = a2[444];
              if (v14) {
                goto LABEL_11;
              }
            }
            else
            {
LABEL_20:
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"SELECT_BET5", 55010, "%s%u", v6, v7, v8, v9, "feature");
            }
            break;
        }
      }
    }
    ++v10;
  }
  while (v10 != 218);
  uint64_t v15 = a2[451];
  if (v15) {
    heap_Free(*(void **)(v4 + 8), v15);
  }
  *a2 = 0;
  return v5;
}

uint64_t UNICORN__LoadModelFile(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a3;
  if (a2[a3 + 46])
  {
    uint64_t v10 = &a2[a3];
    unsigned int v12 = v10[18];
    int v11 = v10 + 18;
    uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), v12, 8);
    *((void *)a2 + 12) = v13;
    if (!v13) {
      return 2229280778;
    }
    if (*v11 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      BOOL v16 = a2 + 6;
      uint64_t v78 = a4;
      while (1)
      {
        int v17 = (unsigned int *)(a4 + 24 * v14);
        if (BET3FLT__xfread_BET3(a2, 4u, 1, v17) != 1 || (*a2 & 0x80000000) != 0)
        {
          uint64_t v71 = "LoadModelFile: the number of HMM states is illegal for %s %d\n";
          uint64_t v72 = a1;
          uint64_t v73 = 55020;
          goto LABEL_67;
        }
        if (BET3FLT__xfread_BET3(v16, 4u, 1, v17) != 1 || (int v23 = *v16, (*v16 & 0x80000000) != 0))
        {
          uint64_t v71 = "LoadModelFile: the number of PDFs is illegal for %s %d\n";
          uint64_t v72 = a1;
          uint64_t v73 = 55021;
          goto LABEL_67;
        }
        if (!v15)
        {
          uint64_t v24 = heap_Calloc(*(void **)(a1 + 8), (*v11 * v23), 8);
          if (!v24) {
            return 2229280778;
          }
          uint64_t v15 = v24;
          int v23 = *v16;
        }
        uint64_t v25 = v9;
        uint64_t v26 = a5;
        *(void *)(*((void *)a2 + 12) + 8 * v14) = v15 + 8 * v23 * (int)v14;
        *(void *)(*((void *)a2 + 12) + 8 * v14) -= 8;
        if (v23 >= 1) {
          break;
        }
LABEL_16:
        ++v14;
        a5 = v26;
        uint64_t v9 = v25;
        BOOL v16 = a2 + 6;
        a4 = v78;
        if (v14 >= *v11) {
          goto LABEL_17;
        }
      }
      uint64_t v27 = 0;
      int v28 = *a2;
      uint64_t v29 = 8;
      while (1)
      {
        int v30 = BET3FLT__xfread2ptr_BET3((void *)(*(void *)(*((void *)a2 + 12) + 8 * v14) + v29), 4u, (2 * v28), v17);
        int v28 = *a2;
        if (v30 != 2 * *a2) {
          break;
        }
        uint64_t v31 = *(void *)(*((void *)a2 + 12) + 8 * v14) + 8 * v27;
        *(void *)(v31 + 8) -= 8;
        ++v27;
        v29 += 8;
        if (v27 >= (int)a2[6]) {
          goto LABEL_16;
        }
      }
      uint64_t v71 = "LoadModelFile: PDF read failed for %s %d\n";
      uint64_t v72 = a1;
      uint64_t v73 = 55022;
      goto LABEL_67;
    }
  }
LABEL_17:
  uint64_t v81 = a1;
  uint64_t v32 = &a2[v9];
  if (v32[51])
  {
    int v33 = (int *)(v32 + 18);
    uint64_t v34 = heap_Calloc(*(void **)(a1 + 8), v32[18], 8);
    uint64_t v76 = v9;
    int v35 = &a2[2 * v9];
    *((void *)v35 + 13) = v34;
    uint64_t v36 = v35 + 26;
    uint64_t v37 = 2229280778;
    if (!v34) {
      return v37;
    }
    uint64_t v75 = heap_Calloc(*(void **)(v81 + 8), (*a2 * *v33), 8);
    if (!v75) {
      return v37;
    }
    uint64_t v9 = v76;
    if (*v33 >= 1)
    {
      uint64_t v38 = 0;
      int v39 = &a2[v76 + 1];
      uint64_t v40 = (uint64_t *)&a2[2 * v76 + 8];
      uint64_t v79 = a4;
      while (1)
      {
        int v41 = (unsigned int *)(a4 + 24 * v38);
        if (BET3FLT__xfread_BET3(v39, 4u, 1, v41) != 1 || *v39 < 0)
        {
          uint64_t v71 = "LoadModelFile: the vector size is illegal for %s %d\n";
          uint64_t v72 = v81;
          uint64_t v73 = 55023;
          goto LABEL_67;
        }
        int v42 = BET3FLT__xfread2ptr_BET3(v40, 4u, *a2, v41);
        if (v42 != *a2)
        {
          uint64_t v71 = "LoadModelFile: reading the number of PDFs failed for %s %d\n";
          uint64_t v72 = v81;
          uint64_t v73 = 55024;
          goto LABEL_67;
        }
        uint64_t v43 = *v40;
        *v40 -= 8;
        if (v42 > 0) {
          break;
        }
        *(void *)(*v36 + 8 * v38) = v75 + 8 * v42 * (int)v38;
        *(void *)(*v36 + 8 * v38) -= 16;
LABEL_34:
        ++v38;
        uint64_t v9 = v76;
        a4 = v79;
        if (v38 >= *v33) {
          goto LABEL_35;
        }
      }
      uint64_t v44 = 0;
      do
      {
        if ((*(_DWORD *)(v43 + 4 * v44) & 0x80000000) != 0)
        {
          uint64_t v71 = "LoadModelFile: the number of PDFs for %s at state %d is illegal\n";
          uint64_t v72 = v81;
          uint64_t v73 = 55025;
          goto LABEL_67;
        }
        ++v44;
      }
      while ((v42 + 2) - 2 != v44);
      *(void *)(*v36 + 8 * v38) = v75 + 8 * v42 * (int)v38;
      *(void *)(*v36 + 8 * v38) -= 16;
      uint64_t v45 = *v40;
      int v46 = *v39;
      uint64_t v47 = 16;
      uint64_t v48 = 2;
      while (1)
      {
        int v49 = BET3FLT__xfread2ptr_BET3((void *)(*(void *)(*v36 + 8 * v38) + v47), 4u, (2 * *(_DWORD *)(v45 + 4 * v48) * v46), v41);
        uint64_t v45 = *v40;
        int v46 = *v39;
        if (v49 != 2 * *(_DWORD *)(*v40 + 4 * v48) * *v39) {
          break;
        }
        v47 += 8;
        BOOL v50 = v48++ <= (int)*a2;
        if (!v50) {
          goto LABEL_34;
        }
      }
      uint64_t v71 = "LoadModelFile: PDF read failed for %s %d\n";
      uint64_t v72 = v81;
      uint64_t v73 = 55026;
      goto LABEL_67;
    }
  }
LABEL_35:
  if (!v32[56]) {
    return 0;
  }
  uint64_t v51 = &a2[v9];
  unsigned int v53 = v51[18];
  uint64_t v52 = v51 + 18;
  uint64_t v54 = heap_Calloc(*(void **)(v81 + 8), v53, 8);
  uint64_t v55 = v9;
  unsigned int v56 = &a2[2 * v9];
  *((void *)v56 + 18) = v54;
  uint64_t v57 = v56 + 36;
  uint64_t v37 = 2229280778;
  if (v54)
  {
    uint64_t v58 = heap_Calloc(*(void **)(v81 + 8), (*a2 * *v52), 8);
    if (v58)
    {
      if (*v52 >= 1)
      {
        uint64_t v77 = v58;
        uint64_t v80 = a4;
        uint64_t v59 = 0;
        unsigned int v60 = &a2[v55 + 1];
        uint64_t v61 = (uint64_t *)&a2[2 * v55 + 8];
        while (1)
        {
          uint64_t v62 = (unsigned int *)(a4 + 24 * v59);
          if (BET3FLT__xfread_BET3(&a2[v55 + 1], 4u, 1, v62) != 1 || *v60 < 0)
          {
            uint64_t v71 = "LoadModelFile: the vector size is illegal for %s %d\n";
            uint64_t v72 = v81;
            uint64_t v73 = 55027;
            goto LABEL_67;
          }
          int v63 = BET3FLT__xfread2ptr_BET3(&a2[2 * v55 + 8], 4u, *a2, v62);
          if (v63 != *a2)
          {
            uint64_t v71 = "LoadModelFile: reading the number of PDFs failed for %s %d\n";
            uint64_t v72 = v81;
            uint64_t v73 = 55028;
            goto LABEL_67;
          }
          uint64_t v64 = *v61;
          *v61 -= 8;
          if (v63 > 0) {
            break;
          }
          *(void *)(*v57 + 8 * v59) = v77 + 8 * v63 * (int)v59;
          *(void *)(*v57 + 8 * v59) -= 16;
LABEL_52:
          uint64_t v37 = 0;
          ++v59;
          a4 = v80;
          if (v59 >= *v52) {
            return v37;
          }
        }
        uint64_t v65 = 0;
        do
        {
          if ((*(_DWORD *)(v64 + 4 * v65) & 0x80000000) != 0)
          {
            uint64_t v71 = "LoadModelFile: the number of PDFs for %s at state %d is illegal\n";
            uint64_t v72 = v81;
            uint64_t v73 = 55029;
            goto LABEL_67;
          }
          ++v65;
        }
        while ((v63 + 2) - 2 != v65);
        *(void *)(*v57 + 8 * v59) = v77 + 8 * v63 * (int)v59;
        *(void *)(*v57 + 8 * v59) -= 16;
        uint64_t v66 = *v61;
        int v67 = *v60;
        uint64_t v68 = 16;
        uint64_t v69 = 2;
        while (1)
        {
          int v70 = BET3FLT__xfread2ptr_BET3((void *)(*(void *)(*v57 + 8 * v59) + v68), 4u, (4 * *(_DWORD *)(v66 + 4 * v69) * v67), v62);
          uint64_t v66 = *v61;
          int v67 = *v60;
          if (v70 != 4 * *(_DWORD *)(*v61 + 4 * v69) * *v60) {
            break;
          }
          v68 += 8;
          BOOL v50 = v69++ <= (int)*a2;
          if (!v50) {
            goto LABEL_52;
          }
        }
        uint64_t v71 = "LoadModelFile: PDF read failed for %s %d\n";
        uint64_t v72 = v81;
        uint64_t v73 = 55030;
LABEL_67:
        UNICORN__log_select_Error(v72, v73, (uint64_t)v71, v18, v19, v20, v21, v22);
        return 2229280772;
      }
      return 0;
    }
  }
  return v37;
}

uint64_t UNICORN__FindDurPDF(int32x2_t *a1, int *a2, int a3, int a4, float a5)
{
  uint64_t v5 = a1[1].i32[0];
  a1[3] = 0;
  a1[4].i32[0] = 0;
  LODWORD(v6) = *a2;
  if (*a2 >= 1)
  {
    uint64_t v7 = *(void *)(*(void *)(*((void *)a2 + 12) + 8 * a4) + 8 * v5);
    int32x2_t v8 = a1[2];
    uint64_t v9 = 2;
    __asm { FMOV            V3.2D, #0.5 }
    float v15 = 0.0;
    do
    {
      float v16 = *(float *)(v7 + 4 * ((int)v9 + (int)v6));
      float v17 = *(float *)(v7 + 4 * v9) + (float)(v16 * a5);
      if (v17 < 0.0) {
        float v17 = 0.0;
      }
      if (a2[62])
      {
        if (v17 > 4000.0) {
          float v17 = 4000.0;
        }
      }
      else if (v17 > 4000.0)
      {
        float v17 = v15 * 0.5;
      }
      v18.f32[0] = v17 + (float)a3;
      v18.i32[1] = sqrtf(v16);
      int32x2_t v19 = vmovn_s64(vcvtq_s64_f64(vaddq_f64(vcvtq_f64_f32(v18), _Q3)));
      *(_DWORD *)(*(void *)&v8 + 4 * v9) = v19.i32[0];
      a1[3] = vadd_s32(a1[3], v19);
      a3 += (int)(float)(v17 - (float)*(int *)(*(void *)&v8 + 4 * v9));
      uint64_t v6 = *a2;
      float v15 = v17;
    }
    while (v9++ <= v6);
  }
  return 0;
}

uint64_t UNICORN__FindContPDF(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = (void *)(a3 + 8 * a1);
  uint64_t v6 = *(int *)(a4 + 4 * a1 + 4);
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a4 + 8 * a1 + 104) + 8 * a5) + 8 * a2)
     + 4 * (2 * *(_DWORD *)(v5[7] + 4 * a2) - 2) * (int)v6;
  *(void *)(v5[12] + 8 * a2) = v7;
  *(void *)(v5[17] + 8 * a2) = v7 + 4 * v6;
  return 0;
}

uint64_t UNICORN__FindMsdPDF(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6 = a4 + 4 * a1;
  int v9 = *(_DWORD *)(v6 + 4);
  uint64_t v7 = (int *)(v6 + 4);
  int v8 = v9;
  if (v9 >= 1)
  {
    int v10 = 0;
    uint64_t v11 = a2;
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a4 + 8 * a1 + 144) + 8 * a6) + 8 * a2)
        + 4 * (4 * *(_DWORD *)(*(void *)(a3 + 8 * a1 + 56) + 4 * a2) - 4) * v8;
    uint64_t v13 = a3 + 8 * a1;
    uint64_t v14 = a5 + 4 * a1;
    float v15 = (void *)(v13 + 96);
    float v16 = (void *)(v13 + 136);
    float v17 = (int *)(v14 + 184);
    float32x2_t v18 = (float *)(v14 + 1128);
    uint64_t v19 = 1;
    do
    {
      uint64_t v20 = v12 + 4 * v10;
      uint64_t v21 = *(void *)(*v15 + 8 * v11);
      *(_DWORD *)(v21 + 4 * v19) = *(_DWORD *)v20;
      float v22 = *(float *)(v20 + 4);
      *(float *)(*(void *)(*v16 + 8 * v11) + 4 * v19) = v22;
      float v23 = *(float *)(a5 + 44);
      if (v23 != 0.0 && *v17 == 2) {
        *(float *)(v21 + 4 * v19) = *(float *)(v21 + 4 * v19) + (float)(v22 * v23);
      }
      if (v19 == 1)
      {
        int v24 = *v17;
        if (*v17 == 2) {
          *(_DWORD *)(*(void *)(a3 + 184) + 4 * v11) = *(_DWORD *)(v20 + 8);
        }
        float v25 = *(float *)(v20 + 8);
        uint64_t v26 = 1 << v24;
        uint64_t v27 = *(void *)(a3 + 176);
        if (v25 <= *v18) {
          char v28 = *(unsigned char *)(v27 + v11) & ~(_BYTE)v26;
        }
        else {
          char v28 = *(unsigned char *)(v27 + v11) | v26;
        }
        *(unsigned char *)(v27 + v11) = v28;
      }
      v10 += 4;
    }
    while (v19++ < *v7);
  }
  return 0;
}

uint64_t UNICORN__FindLF0PDF_PerStateRho(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, float a8)
{
  uint64_t v8 = a4 + 4 * a1;
  int v11 = *(_DWORD *)(v8 + 4);
  int v10 = (int *)(v8 + 4);
  int v9 = v11;
  if (v11 >= 1)
  {
    uint64_t v14 = a2;
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a4 + 8 * a1 + 144) + 8 * a6) + 8 * a2)
        + 4 * (4 * *(_DWORD *)(*(void *)(a3 + 8 * a1 + 56) + 4 * a2) - 4) * v9;
    uint64_t v16 = a3 + 8 * a1;
    uint64_t v17 = a5 + 4 * a1;
    float32x2_t v18 = (void *)(v16 + 96);
    uint64_t v19 = (void *)(v16 + 136);
    uint64_t v20 = (float *)(v17 + 1128);
    uint64_t v21 = (_DWORD *)(v17 + 184);
    uint64_t v22 = 1;
    do
    {
      float v23 = (float *)(v15 + 4 * (4 * (int)v22 - 4));
      int v24 = (float *)(*(void *)(*v18 + 8 * v14) + 4 * v22);
      *int v24 = *v23;
      float v25 = v23[1];
      *(float *)(*(void *)(*v19 + 8 * v14) + 4 * v22) = v25;
      if (a8 != 0.0)
      {
        if (a7)
        {
          float v26 = sqrtf(BET3FLT__bet3_finv(v25));
          int v24 = (float *)(*(void *)(*v18 + 8 * v14) + 4 * v22);
        }
        else
        {
          float v26 = sqrtf(v25);
        }
        *int v24 = *v24 + (float)(v26 * a8);
      }
      if (v22 == 1)
      {
        *(float *)(*(void *)(a3 + 184) + 4 * v14) = v23[2];
        uint64_t v27 = 1 << *v21;
        uint64_t v28 = *(void *)(a3 + 176);
        if (v23[2] <= *v20) {
          char v29 = *(unsigned char *)(v28 + v14) & ~(_BYTE)v27;
        }
        else {
          char v29 = *(unsigned char *)(v28 + v14) | v27;
        }
        *(unsigned char *)(v28 + v14) = v29;
      }
    }
    while (v22++ < *v10);
  }
  return 0;
}

double UNICORN__DeInitModelSet(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 244) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t **)(a2 + 144);
    uint64_t v6 = (_DWORD *)(a2 + 224);
    do
    {
      if (*(v6 - 10))
      {
        uint64_t v7 = *(void **)(a2 + 96);
        if (v7)
        {
          if (*v7)
          {
            *v7 += 8;
            heap_Free(*(void **)(a1 + 8), **(void **)(a2 + 96));
            uint64_t v7 = *(void **)(a2 + 96);
          }
          heap_Free(*(void **)(a1 + 8), (uint64_t)v7);
          *(void *)(a2 + 96) = 0;
        }
      }
      if (*(v6 - 5))
      {
        uint64_t v8 = *(v5 - 5);
        if (v8)
        {
          if (*v8)
          {
            *v8 += 16;
            heap_Free(*(void **)(a1 + 8), **(v5 - 5));
            uint64_t v8 = *(v5 - 5);
          }
          heap_Free(*(void **)(a1 + 8), (uint64_t)v8);
        }
      }
      if (*v6)
      {
        int v9 = *v5;
        if (*v5)
        {
          if (*v9)
          {
            *v9 += 16;
            heap_Free(*(void **)(a1 + 8), **v5);
            int v9 = *v5;
          }
          heap_Free(*(void **)(a1 + 8), (uint64_t)v9);
        }
      }
      ++v4;
      ++v5;
      ++v6;
    }
    while (v4 < *(int *)(a2 + 244));
  }
  double result = 0.0;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t UNICORN__InitUttModel(uint64_t a1, uint64_t a2, int *a3, unsigned int a4)
{
  *(void *)(a2 + 352) = 0;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  uint64_t v7 = 2229280778;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a3;
  int v8 = *a3 * a4;
  *(_DWORD *)(a2 + 336) = a4;
  *(_DWORD *)(a2 + 348) = v8;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), a4, 312);
  *(void *)(a2 + 328) = v9;
  if (v9)
  {
    uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *(_DWORD *)(a2 + 336)), 4);
    *(void *)(a2 + 32) = v10;
    if (v10)
    {
      uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *(_DWORD *)(a2 + 336)), 4);
      *(void *)(a2 + 208) = v11;
      if (v11)
      {
        uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *(_DWORD *)(a2 + 336)), 1);
        *(void *)(a2 + 192) = v12;
        if (v12)
        {
          uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *(_DWORD *)(a2 + 336)), 4);
          *(void *)(a2 + 200) = v13;
          if (v13)
          {
            int v14 = a3[61];
            if (v14 >= 1)
            {
              uint64_t v15 = 0;
              uint64_t v16 = a3 + 56;
              uint64_t v17 = (void *)(a2 + 112);
              do
              {
                if (!*(v16 - 10))
                {
                  uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *(_DWORD *)(a2 + 336)), 4);
                  *(v17 - 5) = v18;
                  if (!v18) {
                    return v7;
                  }
                  uint64_t v19 = *(void **)(a1 + 8);
                  int v20 = *(_DWORD *)(a2 + 336);
                  uint64_t v21 = *v16
                      ? BET3FLT__ddcalloc(v19, 2 * v20 * *a3, *(v16 - 55) + 1)
                      : (void *)heap_Calloc(v19, (2 * v20 * *a3), 8);
                  *uint64_t v17 = v21;
                  if (!v21) {
                    return v7;
                  }
                  v17[5] = &v21[*a3 * *(_DWORD *)(a2 + 336)];
                  int v14 = a3[61];
                }
                ++v15;
                ++v16;
                ++v17;
              }
              while (v15 < v14);
            }
            uint64_t v22 = *(unsigned int *)(a2 + 336);
            if ((int)v22 >= 1)
            {
              uint64_t v23 = 0;
              uint64_t v26 = *a3;
              float v25 = a3 + 46;
              uint64_t v24 = v26;
              uint64_t v27 = 96;
              do
              {
                uint64_t v28 = *(void *)(a2 + 328);
                uint64_t v29 = v28 + 312 * v23;
                *(_DWORD *)uint64_t v29 = v23;
                uint64_t v30 = v23 * v24;
                uint64_t v31 = *(void *)(a2 + 208) + 4 * v23 * v24;
                uint64_t v32 = *(void *)(a2 + 192) + v23 * v24;
                uint64_t v33 = *(void *)(a2 + 200) + 4 * v23 * v24;
                *(void *)(v29 + 16) = *(void *)(a2 + 32) + 4 * v23 * v24 - 8;
                *(void *)(v29 + 176) = v32 - 2;
                *(void *)(v29 + 184) = v33 - 8;
                *(void *)(v29 + 192) = v31 - 8;
                if (v14 >= 1)
                {
                  uint64_t v34 = (uint64_t *)(v28 + v27);
                  int v35 = (void *)(a2 + 112);
                  uint64_t v36 = v14;
                  uint64_t v37 = v25;
                  do
                  {
                    if (!*v37++)
                    {
                      uint64_t v39 = *(v35 - 5) + 4 * v30;
                      *(v34 - 5) = v39;
                      uint64_t v40 = *v35 + 8 * v30;
                      *uint64_t v34 = v40;
                      uint64_t v41 = v35[5] + 8 * v30;
                      *(v34 - 5) = v39 - 8;
                      *uint64_t v34 = v40 - 16;
                      v34[5] = v41 - 16;
                    }
                    ++v34;
                    ++v35;
                    --v36;
                  }
                  while (v36);
                }
                ++v23;
                v27 += 312;
              }
              while (v23 != v22);
            }
            return 0;
          }
        }
      }
    }
  }
  return v7;
}

void *UNICORN__DeInitUttModel(void *result)
{
  uint64_t v1 = result;
  if (*result && result[41])
  {
    uint64_t v2 = result[1];
    uint64_t v3 = result[4];
    if (v3)
    {
      heap_Free(*(void **)(*result + 8), v3);
      v1[4] = 0;
    }
    uint64_t v4 = v1[26];
    if (v4)
    {
      heap_Free(*(void **)(*v1 + 8), v4);
      v1[26] = 0;
    }
    uint64_t v5 = v1[24];
    if (v5)
    {
      heap_Free(*(void **)(*v1 + 8), v5);
      v1[24] = 0;
    }
    uint64_t v6 = v1[25];
    if (v6)
    {
      heap_Free(*(void **)(*v1 + 8), v6);
      v1[25] = 0;
    }
    if (*(int *)(v2 + 244) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        if (!*(_DWORD *)(v2 + 184 + 4 * v7))
        {
          int v8 = &v1[v7];
          uint64_t v9 = v8[9];
          if (v9)
          {
            heap_Free(*(void **)(*v1 + 8), v9);
            v8[9] = 0;
          }
          uint64_t v10 = v8[14];
          if (v10)
          {
            heap_Free(*(void **)(*v1 + 8), v10);
            v8[14] = 0;
          }
        }
        ++v7;
      }
      while (v7 < *(int *)(v2 + 244));
    }
    double result = heap_Free(*(void **)(*v1 + 8), v1[41]);
  }
  v1[41] = 0;
  *((_DWORD *)v1 + 84) = 0;
  *uint64_t v1 = 0;
  return result;
}

void *UNICORN__DeInitMSDUttModel(void *result, int a2)
{
  uint64_t v2 = result[1];
  if (!*(_DWORD *)(v2 + 4 * a2 + 184))
  {
    uint64_t v3 = result;
    uint64_t v4 = a2;
    uint64_t v5 = &result[a2];
    uint64_t v6 = v5[9];
    if (v6)
    {
      double result = heap_Free(*(void **)(*result + 8), v6);
      v5[9] = 0;
    }
    uint64_t v9 = (void *)v5[14];
    int v8 = (uint64_t **)(v5 + 14);
    uint64_t v7 = v9;
    if (*(_DWORD *)(v2 + 4 * v4 + 224))
    {
      *v7 += 4;
      double result = BET3FLT__dd_free(*(void **)(*v3 + 8), *v8);
    }
    else
    {
      if (!v7) {
        return result;
      }
      double result = heap_Free(*(void **)(*v3 + 8), (uint64_t)v7);
    }
    *int v8 = 0;
  }
  return result;
}

uint64_t UNICORN__InitModelSet(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  int v3 = a3[33];
  *(_DWORD *)(a2 + 244) = v3;
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (_DWORD *)(a2 + 204);
    uint64_t v6 = 287;
    do
    {
      *(v5 - 33) = a3[61];
      uint64_t v7 = (_DWORD *)(a2 + 184);
      if (v6 != 287)
      {
        if (a3[287]) {
          uint64_t v7 = (_DWORD *)(a2 + 4 * v4 + 224);
        }
        else {
          uint64_t v7 = v5;
        }
      }
      ++a3;
      *uint64_t v7 = 1;
      ++v4;
      uint64_t v8 = v6 - 286;
      ++v6;
      ++v5;
    }
    while (v8 < *(int *)(a2 + 244));
  }
  return 0;
}

void UNICORN__mlpg2(uint64_t a1, int a2)
{
  if (*(int *)(a1 + 20) < 2)
  {
    BET3FLT__meancpy(a1);
  }
  else
  {
    *(float *)&double v4 = BET3FLT__ConstW_Calc_R_and_r(a1, a2);
    BET3FLT__ConstW_Cholesky(a1, v4);
    BET3FLT__ConstW_Cholesky_forward(a1);
    BET3FLT__ConstW_Cholesky_backward(a1, a2);
  }
}

uint64_t UNICORN__log_select_Diag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a3 - 1;
  do
    int v4 = *(unsigned __int8 *)++v3;
  while (v4 == 10);
  return log_VOutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET5", (a2 + 2), 0, v3);
}

uint64_t UNICORN__log_select_Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET5", a2, 0, a5, a6, a7, a8, v9);
}

uint64_t UNICORN__InitDWinSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 192) = 0;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v3 = *(unsigned int *)(a3 + 132);
  if ((int)v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v5 = a3 + 4 * i;
      int v8 = *(_DWORD *)(v5 + 224);
      uint64_t v6 = (int *)(v5 + 224);
      int v7 = v8;
      if (v8 >= 1)
      {
        int v9 = 0;
        do
        {
          *(_DWORD *)(a2 + 40 * i) = v7 + 1;
          ++v9;
          int v7 = *v6;
        }
        while (v9 < *v6);
      }
    }
  }
  return 0;
}

double UNICORN__DeInitDWinSet(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = 0; i != 200; i += 40)
    {
      uint64_t v5 = a2 + i;
      BET3FLT__dd_free(*(void **)(a1 + 8), *(uint64_t **)(a2 + i + 8));
      uint64_t v6 = *(uint64_t **)(a2 + i + 16);
      if (v6)
      {
        if (!*v6
          || (heap_Free(*(void **)(a1 + 8), *v6), **(void **)(v5 + 16) = 0, (uint64_t v6 = *(uint64_t **)(v5 + 16)) != 0))
        {
          heap_Free(*(void **)(a1 + 8), (uint64_t)v6);
          *(void *)(v5 + 16) = 0;
        }
      }
    }
    *(void *)(a2 + 192) = 0;
    double result = 0.0;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t UNICORN__LoadDWinFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  uint64_t v5 = (unsigned int *)(a2 + 40 * a3);
  if (!*v5) {
    return 0;
  }
  uint64_t v9 = 2229280778;
  uint64_t v10 = BET3FLT__ddcalloc(*(void **)(a1 + 8), *v5, 2);
  uint64_t v11 = a2 + 40 * a3;
  *(void *)(v11 + 8) = v10;
  uint64_t v12 = (int ***)(v11 + 8);
  if (v10)
  {
    uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), *v5, 8);
    uint64_t v14 = a2 + 40 * a3;
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = (uint64_t **)(v14 + 16);
    if (v13)
    {
      *(void *)**uint64_t v12 = 0;
      **uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1, 4);
      uint64_t v16 = (_DWORD *)**v15;
      if (v16)
      {
        _DWORD *v16 = 1065353216;
        LODWORD(v17) = *v5;
        if ((int)*v5 <= 1)
        {
LABEL_9:
          uint64_t v27 = a2 + 40 * a3;
          *(_DWORD *)(v27 + 24) = 0;
          uint64_t v28 = (_DWORD *)(v27 + 24);
          v28[1] = 0;
          if ((int)v17 < 1)
          {
            int v30 = 0;
          }
          else
          {
            int v29 = 0;
            int v30 = 0;
            uint64_t v31 = *v12;
            uint64_t v17 = v17;
            do
            {
              uint64_t v32 = *v31;
              int v33 = **v31;
              if (v30 > v33)
              {
                *uint64_t v28 = v33;
                int v30 = v33;
              }
              int v34 = v32[1];
              if (v29 < v34)
              {
                v28[1] = v34;
                int v29 = v34;
              }
              ++v31;
              --v17;
            }
            while (v17);
            if (v30 < v29)
            {
              uint64_t v9 = 0;
              *(_DWORD *)(a2 + 40 * a3 + 32) = v29;
              return v9;
            }
          }
          uint64_t v9 = 0;
          *(_DWORD *)(a2 + 40 * a3 + 32) = v30;
          return v9;
        }
        uint64_t v18 = 1;
        uint64_t v19 = 1;
        while (1)
        {
          unsigned int v20 = BET3FLT__xfread2ptr_BET3(&(*v15)[v19], 4u, 0xFFFFFFFFLL, a4);
          if (!v20) {
            break;
          }
          (*v15)[v19] += 4 * (v20 >> 1);
          uint64_t v26 = (*v12)[v19];
          *uint64_t v26 = -(v20 >> 1);
          v26[1] = (v20 & 1) + (v20 >> 1) - 1;
          ++v18;
          uint64_t v17 = (int)*v5;
          ++v19;
          a4 += 6;
          if (v18 >= v17) {
            goto LABEL_9;
          }
        }
        UNICORN__log_select_Error(a1, 55019, (uint64_t)"InitDWin: illegal data\n", v21, v22, v23, v24, v25);
        return 2229280772;
      }
    }
  }
  return v9;
}

uint64_t UNICORN__InitPStreamSM(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (a2
    && *(void *)(a2 + 24)
    && *((_DWORD *)a1 + 3) == *(_DWORD *)(a2 + 12)
    && *((_DWORD *)a1 + 5) == *(_DWORD *)(a2 + 16)
    && *((_DWORD *)a1 + 6) == *(_DWORD *)(a2 + 20))
  {
    uint64_t result = 0;
    long long v6 = *(_OWORD *)(a2 + 48);
    long long v8 = *(_OWORD *)a2;
    long long v7 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a1 + 6) = v6;
    *((_OWORD *)a1 + 3) = v8;
    *((_OWORD *)a1 + 4) = v7;
LABEL_18:
    *((_DWORD *)a1 + 14) = 1;
    return result;
  }
  a1[6] = v4;
  uint64_t v9 = (long long *)(a1 + 6);
  int v10 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 14) = 0;
  *((_DWORD *)a1 + 15) = v10;
  uint64_t v11 = *(uint64_t *)((char *)a1 + 20);
  a1[8] = v11;
  uint64_t v12 = (uint64_t *)a1[9];
  int v13 = v11;
  if (v12)
  {
    BET3FLT__dd_free(*(void **)(v4 + 8), v12);
    a1[9] = 0;
    int v13 = *((_DWORD *)a1 + 5);
    int v10 = *((_DWORD *)a1 + 3);
  }
  uint64_t v14 = BET3FLT__ddcalloc(*(void **)(v4 + 8), 2 * v13, v10);
  a1[9] = (uint64_t)v14;
  if (!v14) {
    goto LABEL_19;
  }
  uint64_t v15 = *((int *)a1 + 5);
  a1[10] = (uint64_t)&v14[v15];
  uint64_t v16 = (uint64_t *)a1[12];
  if (v16)
  {
    BET3FLT__dd_free(*(void **)(v4 + 8), v16);
    a1[12] = 0;
    LODWORD(v15) = *((_DWORD *)a1 + 5);
  }
  uint64_t v17 = BET3FLT__ddcalloc(*(void **)(v4 + 8), v15, *((_DWORD *)a1 + 6));
  a1[12] = (uint64_t)v17;
  if (!v17) {
    goto LABEL_19;
  }
  uint64_t v18 = a1[11];
  if (v18)
  {
    heap_Free(*(void **)(v4 + 8), v18);
    a1[11] = 0;
  }
  uint64_t v19 = heap_Calloc(*(void **)(v4 + 8), (2 * *((_DWORD *)a1 + 5)), 4);
  a1[11] = v19;
  if (v19)
  {
    a1[13] = v19 + 4 * *((int *)a1 + 5);
    if (a2)
    {
      BET3FLT__FreeSMatrices(a2);
      uint64_t result = 0;
      long long v20 = *v9;
      long long v21 = *((_OWORD *)a1 + 4);
      long long v22 = *((_OWORD *)a1 + 6);
      *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 5);
      *(_OWORD *)(a2 + 48) = v22;
      *(_OWORD *)a2 = v20;
      *(_OWORD *)(a2 + 16) = v21;
      goto LABEL_18;
    }
    return 0;
  }
  else
  {
LABEL_19:
    BET3FLT__FreeSMatrices((uint64_t)(a1 + 6));
    return 2229280778;
  }
}

uint64_t UNICORN__InitPStreamParam(char *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  *((_DWORD *)a1 + 6) = (2 * *(_DWORD *)(*((void *)a1 + 4) + 32)) | 1;
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 40);
    if (v5)
    {
      if (*((_DWORD *)a1 + 5) == *(_DWORD *)(a2 + 20) && *((_DWORD *)a1 + 4) == *(_DWORD *)(a2 + 16))
      {
        *((void *)a1 + 5) = v5;
        long long v6 = a1 + 8;
LABEL_14:
        uint64_t result = 0;
        *long long v6 = 1;
        return result;
      }
    }
  }
  *((_DWORD *)a1 + 2) = 0;
  long long v6 = a1 + 8;
  long long v7 = (uint64_t *)*((void *)a1 + 5);
  if (v7)
  {
    BET3FLT__dd_free(*(void **)(v4 + 8), v7);
    *((void *)a1 + 5) = 0;
  }
  long long v8 = BET3FLT__ddcalloc(*(void **)(v4 + 8), *((_DWORD *)a1 + 5), *((_DWORD *)a1 + 4));
  *((void *)a1 + 5) = v8;
  if (v8) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 2229280778;
  }
  if (a2 && v8)
  {
    BET3FLT__FreePStreamParam((void *)a2);
    memcpy((void *)a2, a1, 0x2D8uLL);
    goto LABEL_14;
  }
  return result;
}

uint64_t UNICORN__InitVData(uint64_t a1, void *a2, _DWORD *a3)
{
  bzero(a2, 0x238uLL);
  uint64_t result = UNICORN__InitModelSet(a1, (uint64_t)a2, a3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = UNICORN__InitTreeSet(a1, (_OWORD *)a2 + 16);
    if ((result & 0x80000000) == 0)
    {
      return UNICORN__InitDWinSet(a1, (uint64_t)a2 + 368, (uint64_t)a3);
    }
  }
  return result;
}

void UNICORN__DeInitVData(uint64_t a1, _OWORD *a2)
{
  UNICORN__DeInitModelSet(a1, (uint64_t)a2);
  UNICORN__DeInitTreeSet(a1, a2 + 16);
  UNICORN__DeInitDWinSet(a1, (uint64_t)(a2 + 23));
  bzero(a2, 0x238uLL);
}

uint64_t UNICORN__LoadVData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a2 + 244) < 1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 256;
  uint64_t v8 = a2 + 368;
  uint64_t v9 = a3 + 1408;
  int v10 = (unsigned int *)(a3 + 1288);
  do
  {
    uint64_t ModelFile = UNICORN__LoadModelFile(a1, (_DWORD *)a2, v6, v9, a3);
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    uint64_t ModelFile = UNICORN__LoadTreesFile(a1, v7, v6, v10, a3, v12, v13, v14);
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    uint64_t ModelFile = UNICORN__LoadDWinFile(a1, v8, v6, (unsigned int *)(v9 + 600));
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    ++v6;
    uint64_t v20 = *(int *)(a2 + 244);
    v9 += 120;
    v10 += 6;
  }
  while (v6 < v20);
  if ((int)v20 < 1) {
    return 0;
  }
  uint64_t v21 = 0;
  while (1)
  {
    if (!*(void *)(a2 + 8 * v21 + 312))
    {
      uint64_t v31 = 2229280775;
      int v33 = "%s tree is required\n";
      uint64_t v34 = a1;
      uint64_t v35 = 55032;
      goto LABEL_37;
    }
    uint64_t v22 = a2 + 4 * v21;
    if (*(_DWORD *)(v22 + 184) && !*(void *)(a2 + 96))
    {
LABEL_38:
      uint64_t v31 = 2229280775;
      int v33 = "%s PDF is required\n";
      uint64_t v34 = a1;
      uint64_t v35 = 55033;
      goto LABEL_37;
    }
    int v23 = *(_DWORD *)(v22 + 204);
    if (v23)
    {
      if (!*(void *)(a2 + 8 * v21 + 104)) {
        goto LABEL_38;
      }
      if (!*(_DWORD *)(a2 + 4 * v21 + 224))
      {
        char v24 = 1;
        goto LABEL_19;
      }
    }
    else if (!*(_DWORD *)(a2 + 4 * v21 + 224))
    {
      goto LABEL_31;
    }
    if (!*(void *)(a2 + 8 * v21 + 144)) {
      goto LABEL_38;
    }
    char v24 = 0;
LABEL_19:
    uint64_t v25 = *(unsigned int *)(a2 + 4 * v21 + 72);
    if ((int)v25 >= 1) {
      break;
    }
LABEL_26:
    if (v23) {
      char v30 = 0;
    }
    else {
      char v30 = v24;
    }
    if ((v30 & 1) == 0 && *(_DWORD *)(a2 + 4 * v21 + 4) % *(_DWORD *)(v8 + 40 * v21))
    {
      uint64_t v31 = 2229280775;
      int v33 = "The number of dynamic windows for %s is not correct %d %d\n";
      uint64_t v34 = a1;
      uint64_t v35 = 55035;
      goto LABEL_37;
    }
LABEL_31:
    uint64_t v31 = 0;
    if (++v21 == *(_DWORD *)(a2 + 244)) {
      return v31;
    }
  }
  uint64_t v26 = 0;
  uint64_t v27 = a2 + 8 * v21;
  uint64_t v28 = (void *)(v27 + 104);
  int v29 = (void *)(v27 + 144);
  while ((!v23 || *(void *)(*v28 + 8 * v26)) && ((v24 & 1) != 0 || *(void *)(*v29 + 8 * v26)))
  {
    if (v25 == ++v26) {
      goto LABEL_26;
    }
  }
  uint64_t v31 = 2229280775;
  int v33 = "%s PDF layer %d is required\n";
  uint64_t v34 = a1;
  uint64_t v35 = 55034;
LABEL_37:
  UNICORN__log_select_Error(v34, v35, (uint64_t)v33, v15, v16, v17, v18, v19);
  return v31;
}

uint64_t UNICORN__InitVStream(uint64_t a1, char *a2, _DWORD *a3)
{
  bzero(a2, 0x430uLL);
  *(void *)a2 = a1;
  uint64_t v6 = a3[33];
  *((_DWORD *)a2 + 8) = v6;
  uint64_t v7 = heap_Calloc(*(void **)(a1 + 8), v6, 1520);
  *((void *)a2 + 3) = v7;
  if (!v7) {
    return 2229280778;
  }
  if (*((int *)a2 + 8) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a2 + 432;
    do
    {
      *uint64_t v9 = 0;
      int v10 = *(const char **)&a3[2 * v8 + 36];
      if (*v10) {
        uint64_t v9 = strcpy(v9, v10);
      }
      ++v8;
      uint64_t v11 = *((int *)a2 + 8);
      v9 += 128;
    }
    while (v8 < v11);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *((void *)a2 + 3);
      int v14 = a3[18];
      uint64_t v15 = 1520 * *((unsigned int *)a2 + 8);
      do
      {
        uint64_t v16 = v13 + v12;
        *(_DWORD *)(v16 + 4) = a3[46];
        *(void *)(v16 + 16) = a1;
        *(void *)(v16 + 744) = a1;
        if (v12)
        {
          if (a3[287]) {
            *(_DWORD *)(v13 + v12 + 1480) = 1;
          }
          else {
            *(_DWORD *)(v13 + v12 + 1476) = 1;
          }
        }
        else
        {
          *(_DWORD *)(v13 + 1472) = 1;
        }
        if (v14 == 1) {
          *(_DWORD *)(v13 + v12 + 1484) = 1;
        }
        ++a3;
        v12 += 1520;
      }
      while (v15 != v12);
    }
  }
  return 0;
}

uint64_t UNICORN__LoadVStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a1 + 32) < 1) {
    return 0;
  }
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 368;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v56 = a2 + 368;
  while (1)
  {
    uint64_t v9 = (_DWORD *)(v7 + 40 * v6);
    uint64_t v10 = v8 + 1520 * v6;
    *(void *)(v10 + 48) = v9;
    int v11 = *(_DWORD *)(v10 + 1476);
    if (v11) {
      *(void *)(v8 + 1520 * v6 + 776) = v9;
    }
    if (*(_DWORD *)(v8 + 1520 * v6 + 1472))
    {
      if (v11) {
        goto LABEL_7;
      }
      goto LABEL_8;
    }
    uint64_t v13 = v4 + 4 * v6;
    uint64_t v14 = v8 + 1520 * v6;
    *(_DWORD *)(v14 + 28) = *(_DWORD *)(v13 + 4);
    int v15 = *(_DWORD *)(v13 + 4) / *v9;
    *(_DWORD *)(v14 + 32) = v15;
    *(void *)(v14 + 1488) = *(void *)(v3 + 92);
    uint64_t v16 = heap_Calloc(*(void **)(*(void *)a1 + 8), (2 * v15), 8);
    uint64_t v17 = *(void *)(a1 + 24);
    *(void *)(v17 + 1520 * v6 + 1496) = v16;
    if (!v16) {
      return 2229280778;
    }
    uint64_t v18 = v17 + 1520 * v6;
    uint64_t v19 = *(int *)(v18 + 32);
    *(void *)(v18 + 1504) = v16 + 8 * v19;
    if ((int)v19 >= 1) {
      break;
    }
LABEL_27:
    uint64_t v42 = heap_Calloc(*(void **)(*(void *)a1 + 8), v19, 4);
    uint64_t v43 = *(void *)(a1 + 24);
    *(void *)(v43 + 1520 * v6 + 1512) = v42;
    if (!v42) {
      return 2229280778;
    }
    uint64_t v44 = v43 + 1520 * v6;
    int v46 = *(_DWORD *)(v44 + 32);
    uint64_t v45 = (int *)(v44 + 32);
    if (v46 >= 1)
    {
      uint64_t v47 = v42;
      uint64_t v48 = 0;
      uint64_t v49 = *(void *)(v3 + 8 * v6 + 1248);
      while (1)
      {
        BOOL v50 = *(const char **)(v49 + 8 * v48);
        if (!strcmp(v50, "OFF"))
        {
          int v51 = 0;
        }
        else
        {
          if (strcmp(v50, "ON"))
          {
            uint64_t v53 = *(void *)a1;
            uint64_t v54 = "valid breaker setting is required for stream %d\n";
            goto LABEL_42;
          }
          int v51 = 1;
        }
        *(_DWORD *)(v47 + 4 * v48++) = v51;
        if (v48 >= *v45)
        {
          uint64_t v3 = a3;
          break;
        }
      }
    }
    uint64_t v4 = a2;
    UNICORN__log_select_Diag(*(void *)a1, 1, (uint64_t)"%s: vSize = %d, order = %d, nLayer = %d\n");
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v7 = v56;
    if (*(_DWORD *)(v8 + 1520 * v6 + 1476))
    {
LABEL_7:
      uint64_t v12 = v8 + 1520 * v6;
      *(_DWORD *)(v12 + 756) = *(_DWORD *)(v4 + 4 * v6 + 4);
      *(_DWORD *)(v12 + 760) = 1;
    }
LABEL_8:
    if (++v6 >= *(int *)(a1 + 32)) {
      return 0;
    }
  }
  uint64_t v20 = 0;
  uint64_t v21 = v3 + 8 * v6;
  uint64_t v22 = (void *)(v21 + 1168);
  int v23 = (uint64_t *)(v21 + 1208);
  while (1)
  {
    char v24 = *(const char **)(*v22 + 8 * v20);
    int v25 = strcmp(v24, "MLPG");
    uint64_t v26 = (uint64_t (*)())UNICORN__mlpg;
    if (v25)
    {
      int v27 = strcmp(v24, "MLPG2");
      uint64_t v26 = (uint64_t (*)())UNICORN__mlpg2;
      if (v27)
      {
        int v28 = strcmp(v24, "MLPG_OPT");
        uint64_t v26 = UNICORN__mlpg_opt;
        if (v28)
        {
          int v29 = strcmp(v24, "DUMMY_SOLVER");
          uint64_t v26 = (uint64_t (*)())UNICORN__dummy_solver;
          if (v29) {
            break;
          }
        }
      }
    }
    *(void *)(*(void *)(v17 + 1520 * v6 + 1496) + 8 * v20) = v26;
    uint64_t v35 = *v23;
    if (*v23)
    {
      uint64_t v36 = *(const char **)(v35 + 8 * v20);
      if (v36)
      {
        int v37 = strcmp(*(const char **)(v35 + 8 * v20), "MLPG");
        uint64_t v38 = (uint64_t (*)())UNICORN__mlpg;
        if (v37
          && (v39 = strcmp(v36, "MLPG2"), uint64_t v38 = (uint64_t (*)())UNICORN__mlpg2, v39)
          && (v40 = strcmp(v36, "MLPG_OPT"), uint64_t v38 = UNICORN__mlpg_opt, v40)
          && (v41 = strcmp(v36, "DUMMY_SOLVER"), uint64_t v38 = (uint64_t (*)())UNICORN__dummy_solver, v41))
        {
          if (*v36)
          {
            uint64_t v53 = *(void *)a1;
            uint64_t v54 = "invalid solver 2 for stream %d: %s\n";
            goto LABEL_42;
          }
        }
        else
        {
          *(void *)(*(void *)(*(void *)(a1 + 24) + 1520 * v6 + 1504) + 8 * v20) = v38;
        }
      }
    }
    ++v20;
    uint64_t v17 = *(void *)(a1 + 24);
    uint64_t v19 = *(int *)(v17 + 1520 * v6 + 32);
    if (v20 >= v19) {
      goto LABEL_27;
    }
  }
  uint64_t v53 = *(void *)a1;
  uint64_t v54 = "invalid solver for stream %d: %s\n";
LABEL_42:
  UNICORN__log_select_Error(v53, 55036, (uint64_t)v54, v30, v31, v32, v33, v34);
  return 2229280775;
}

void UNICORN__DeInitVStream(int *a1)
{
  if (a1 && *(void *)a1)
  {
    if (a1[8] >= 1)
    {
      uint64_t v2 = 0;
      uint64_t v3 = *((void *)a1 + 3);
      uint64_t v4 = 1512;
      do
      {
        if (!v3) {
          break;
        }
        BET3FLT__FreePStreamSM(v3 + v4 - 1496);
        BET3FLT__FreePStreamParam((void *)(*((void *)a1 + 3) + v4 - 1496));
        BET3FLT__FreePStreamSM(*((void *)a1 + 3) + v4 - 768);
        BET3FLT__FreePStreamParam((void *)(*((void *)a1 + 3) + v4 - 768));
        uint64_t v3 = *((void *)a1 + 3);
        uint64_t v5 = *(void *)(v3 + v4 - 16);
        if (v5)
        {
          heap_Free(*(void **)(*(void *)a1 + 8), v5);
          uint64_t v3 = *((void *)a1 + 3);
          *(void *)(v3 + v4 - 16) = 0;
        }
        uint64_t v6 = *(void *)(v3 + v4);
        if (v6)
        {
          heap_Free(*(void **)(*(void *)a1 + 8), v6);
          uint64_t v3 = *((void *)a1 + 3);
          *(void *)(v3 + v4) = 0;
        }
        ++v2;
        v4 += 1520;
      }
      while (v2 < a1[8]);
    }
    uint64_t v7 = *((void *)a1 + 6);
    if (v7)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v7);
      *((void *)a1 + 6) = 0;
    }
    uint64_t v8 = *((void *)a1 + 5);
    if (v8)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v8);
      *((void *)a1 + 5) = 0;
    }
    uint64_t v9 = *((void *)a1 + 3);
    if (v9)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v9);
      *((void *)a1 + 3) = 0;
    }
    UNICORN__DeInitUttModel((void *)a1 + 7);
    bzero(a1, 0x430uLL);
  }
}

void UNICORN__InitVParam(_DWORD *a1)
{
  a1[32] = 1;
}

void UNICORN__DeInitVParam(uint64_t a1, void *a2)
{
  if (a2[676])
  {
    for (uint64_t i = 0; i != 20; ++i)
    {
      if (*(void *)(a2[676] + 8 * i))
      {
        for (uint64_t j = 0; j != 800; j += 8)
        {
          uint64_t v6 = *(void *)(*(void *)(a2[676] + 8 * i) + j);
          if (v6)
          {
            heap_Free(*(void **)(a1 + 8), v6);
            *(void *)(*(void *)(a2[676] + 8 * i) + j) = 0;
          }
        }
        uint64_t v7 = *(void *)(a2[676] + 8 * i);
        if (v7)
        {
          heap_Free(*(void **)(a1 + 8), v7);
          *(void *)(a2[676] + 8 * i) = 0;
        }
      }
      uint64_t v8 = *(void *)(a2[675] + 8 * i);
      if (v8)
      {
        heap_Free(*(void **)(a1 + 8), v8);
        *(void *)(a2[675] + 8 * i) = 0;
      }
      uint64_t v9 = *(void *)(a2[674] + 8 * i);
      if (v9)
      {
        heap_Free(*(void **)(a1 + 8), v9);
        *(void *)(a2[674] + 8 * i) = 0;
      }
    }
    uint64_t v10 = a2[676];
    if (v10)
    {
      heap_Free(*(void **)(a1 + 8), v10);
      a2[676] = 0;
    }
    uint64_t v11 = a2[675];
    if (v11)
    {
      heap_Free(*(void **)(a1 + 8), v11);
      a2[675] = 0;
    }
    uint64_t v12 = a2[674];
    if (v12)
    {
      heap_Free(*(void **)(a1 + 8), v12);
      a2[674] = 0;
    }
  }
  uint64_t v13 = a2[10];
  if (v13)
  {
    heap_Free(*(void **)(a1 + 8), v13);
    a2[10] = 0;
  }
  uint64_t v14 = a2[15];
  if (v14)
  {
    heap_Free(*(void **)(a1 + 8), v14);
    a2[15] = 0;
  }
  uint64_t v15 = a2[632];
  if (v15)
  {
    heap_Free(*(void **)(a1 + 8), v15);
    a2[632] = 0;
  }
  uint64_t v16 = 0;
  uint64_t v17 = a2;
  do
  {
    uint64_t v18 = (char *)&a2[v16];
    uint64_t v19 = *((void *)v18 + 18);
    if (v19)
    {
      heap_Free(*(void **)(a1 + 8), v19);
      *((void *)v18 + 18) = 0;
    }
    uint64_t v20 = *((void *)v18 + 36);
    if (v20)
    {
      heap_Free(*(void **)(a1 + 8), v20);
      *((void *)v18 + 36) = 0;
    }
    for (uint64_t k = 0; k != 5; ++k)
    {
      uint64_t v22 = &v17[k];
      uint64_t v23 = v17[k + 41];
      if (v23)
      {
        heap_Free(*(void **)(a1 + 8), v23);
        v22[41] = 0;
      }
      uint64_t v24 = v22[91];
      if (v24)
      {
        heap_Free(*(void **)(a1 + 8), v24);
        v22[91] = 0;
      }
    }
    for (uint64_t m = 116; m != 121; ++m)
    {
      uint64_t v26 = v17[m];
      if (v26)
      {
        heap_Free(*(void **)(a1 + 8), v26);
        v17[m] = 0;
      }
    }
    int v27 = (char *)a2 + 4 * v16;
    int v29 = *((_DWORD *)v27 + 51);
    int v28 = (unsigned int *)(v27 + 204);
    if (v29)
    {
      unint64_t v30 = 0;
      uint64_t v31 = (char *)&a2[v16];
      uint64_t v32 = v31 + 1248;
      uint64_t v33 = v31 + 1168;
      uint64_t v34 = v31 + 1208;
      do
      {
        if (*v32)
        {
          uint64_t v35 = *(void *)(*v32 + 8 * v30);
          if (v35)
          {
            heap_Free(*(void **)(a1 + 8), v35);
            *(void *)(*v32 + 8 * v30) = 0;
          }
        }
        if (*v33)
        {
          uint64_t v36 = *(void *)(*v33 + 8 * v30);
          if (v36)
          {
            heap_Free(*(void **)(a1 + 8), v36);
            *(void *)(*v33 + 8 * v30) = 0;
          }
        }
        if (*v34)
        {
          uint64_t v37 = *(void *)(*v34 + 8 * v30);
          if (v37)
          {
            heap_Free(*(void **)(a1 + 8), v37);
            *(void *)(*v34 + 8 * v30) = 0;
          }
        }
        ++v30;
      }
      while (v30 < *v28);
    }
    uint64_t v38 = (char *)&a2[v16];
    uint64_t v39 = *((void *)v38 + 156);
    if (v39)
    {
      heap_Free(*(void **)(a1 + 8), v39);
      *((void *)v38 + 156) = 0;
    }
    uint64_t v40 = *((void *)v38 + 146);
    if (v40)
    {
      heap_Free(*(void **)(a1 + 8), v40);
      *((void *)v38 + 146) = 0;
    }
    int v41 = (char *)&a2[v16];
    uint64_t v42 = *((void *)v41 + 151);
    if (v42)
    {
      uint64_t v43 = v41 + 1208;
      heap_Free(*(void **)(a1 + 8), v42);
      *uint64_t v43 = 0;
    }
    ++v16;
    v17 += 5;
  }
  while (v16 != 5);
  for (uint64_t n = 341; n != 597; ++n)
  {
    uint64_t v45 = a2[n];
    if (v45)
    {
      heap_Free(*(void **)(a1 + 8), v45);
      a2[n] = 0;
    }
  }
  if (a2[630])
  {
    for (iuint64_t i = 0; ii != 2048; ii += 8)
    {
      uint64_t v47 = *(void *)(a2[630] + ii);
      if (v47)
      {
        heap_Free(*(void **)(a1 + 8), v47);
        *(void *)(a2[630] + ii) = 0;
      }
    }
    heap_Free(*(void **)(a1 + 8), a2[630]);
  }
  bzero(a2, 0x1528uLL);
}

uint64_t VectBlock_Create(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = a1;
  if (a2)
  {
    uint64_t v7 = a2;
    uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), a3, 1);
    *(void *)uint64_t v7 = v8;
    if (v8)
    {
      *(_DWORD *)(v7 + 8) = a3;
      *(_DWORD *)(v7 + 12) = a4;
      return 1;
    }
    uint64_t v10 = "VectBlock_Create, Error, Out of memory\n";
    a1 = v4;
    LODWORD(a2) = 0;
  }
  else
  {
    uint64_t v10 = "VectBlock_Create, Error, NULL Ptr\n";
  }
  UNICORN__log_select_Diag(a1, a2, (uint64_t)v10);
  return 0;
}

void *VectBlock_Destroy(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (v3) {
      uint64_t result = heap_Free((void *)result[1], v3);
    }
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t VectBlock_Get_StartPtr_LH_F32(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t VectBlock_Get_IndexPtr_LH_F32(uint64_t a1, int a2)
{
  if (*(void *)a1) {
    return *(void *)a1 + 4 * (*(_DWORD *)(a1 + 12) * a2);
  }
  else {
    return 0;
  }
}

float VectBlock_Get_IndexElm_LH_F32(uint64_t a1, int a2)
{
  return *(float *)(*(void *)a1 + 4 * (*(_DWORD *)(a1 + 12) * a2));
}

uint64_t VectBlock_Get_IndexPtr_LH_S8(uint64_t a1, int a2)
{
  if (*(void *)a1) {
    return *(void *)a1 + (*(_DWORD *)(a1 + 12) * a2);
  }
  else {
    return 0;
  }
}

uint64_t VectBlock_Get_IndexPtr_LH_S16(uint64_t a1, int a2)
{
  if (*(void *)a1) {
    return *(void *)a1 + 2 * (*(_DWORD *)(a1 + 12) * a2);
  }
  else {
    return 0;
  }
}

uint64_t ANNFactory_CreateANNLibInstance(void *a1, uint64_t a2)
{
  uint64_t v3 = AnnObject_Create(a2);
  *a1 = v3;
  a1[1] = AnnObject_Open;
  a1[2] = AnnObject_Set;
  a1[3] = AnnObject_Process;
  a1[4] = AnnObject_Get;
  a1[5] = AnnObject_Reset;
  a1[6] = AnnObject_Close;
  a1[7] = AnnObject_SetLayerAdjuster;
  a1[8] = AnnObject_GetInputDimension;
  a1[9] = AnnObject_Destroy;
  if (v3) {
    return 0;
  }
  else {
    return 2229280778;
  }
}

uint64_t ANNFactory_CreateFastInferInstance(void *a1, uint64_t a2)
{
  uint64_t v3 = AnnObject_Create(a2);
  *a1 = v3;
  a1[1] = FastInferObject_Open;
  a1[2] = FastInferObject_BorrowModelInputs;
  a1[3] = FastInferObject_Process;
  a1[4] = FastInferObject_BorrowModelOutputLayer;
  a1[5] = FastInferObject_Reset;
  a1[6] = FastInferObject_Close;
  a1[7] = FastInferObject_SetLayerAdjuster;
  a1[8] = FastInferObject_GetInputDimension;
  a1[9] = FastInferObject_Destroy;
  if (v3) {
    return 0;
  }
  else {
    return 2229280778;
  }
}

void *NnetGetModel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v3 = (void *)heap_Calloc(*(void **)(a1 + 8), 1, 16);
  *(void *)(a2 + 88) = v3;
  uint64_t result = TrieIntInit(v3);
  *(void *)(a2 + 64) = NNEval;
  *(void *)(a2 + 72) = NNFree;
  *(void *)(a2 + 80) = NNReset;
  return result;
}

uint64_t NNEval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  uint64_t result = NnetForward(a1, *(uint64_t ***)(a2 + 88), *(float32x4_t **)(a2 + 104), *(_DWORD *)(a2 + 112), *(unsigned int *)(a2 + 116), a6, a7, a8);
  if (!result)
  {
    uint64_t OutputLayer = NnetGetOutputLayer(*(uint64_t ***)(a2 + 88));
    if (OutputLayer)
    {
      uint64_t v11 = OutputLayer;
      uint64_t result = 0;
      *(void *)(a2 + 120) = *(void *)(v11 + 24);
      *(void *)(a2 + 128) = *(void *)(v11 + 32);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void NNFree(uint64_t a1, uint64_t a2)
{
  NnetClear(a1, *(void *)(a2 + 88));
  uint64_t v4 = *(void *)(a2 + 88);
  if (v4)
  {
    heap_Free(*(void **)(a1 + 8), v4);
    *(void *)(a2 + 88) = 0;
  }
}

void NNReset(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(uint64_t ***)(a2 + 88);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = v2 + 1;
      do
      {
        bzero(*(void **)(v3 + 24), 4 * (*(_DWORD *)(v3 + 32) * *(_DWORD *)(v3 + 36)));
        uint64_t v5 = *v4++;
        uint64_t v3 = v5;
      }
      while (v5);
    }
  }
}

uint64_t AdapterGetModel@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), 1, 16);
  *(void *)(a4 + 88) = v8;
  uint64_t result = ModelAdapterInit(a1, v8, a2, a3);
  *(void *)(a4 + 64) = AdapterEval;
  *(void *)(a4 + 72) = AdapterFree;
  *(void *)(a4 + 80) = AdapterReset;
  return result;
}

BOOL AdapterEval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a2 + 128) = 0;
  uint64_t v8 = a2 + 128;
  *(void *)(a2 + 120) = 0;
  uint64_t v9 = ModelAdapterEval(a1, *(uint64_t **)(a2 + 88), (int *)(a2 + 128), (_DWORD *)(a2 + 132), a5, a6, a7, a8);
  *(void *)(v8 - 8) = v9;
  return v9 == 0;
}

void *AdapterFree(uint64_t a1, uint64_t a2)
{
  uint64_t result = ModelAdapterFree((void *)a1, *(uint64_t **)(a2 + 88));
  uint64_t v5 = *(void *)(a2 + 88);
  if (v5) {
    uint64_t result = heap_Free(*(void **)(a1 + 8), v5);
  }
  *(void *)(a2 + 88) = 0;
  return result;
}

void *AdapterReset(void *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 120);
  if (v3) {
    uint64_t result = heap_Free((void *)result[1], v3);
  }
  *(void *)(a2 + 120) = 0;
  return result;
}

uint64_t ModelAdapterInit(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7 = heap_Calloc(*(void **)(a1 + 8), a3, 40);
  *(void *)a2 = v7;
  if (!v7) {
    return 1;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 8) = a3;
  *(_DWORD *)(a2 + 12) = a4;
  return result;
}

void *ModelAdapterFree(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (v3) {
    uint64_t result = heap_Free((void *)result[1], v3);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t ModelAdapterSet(void *a1, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7 = *a1 + 40 * a2;
  *(void *)(v7 + 8) = a3;
  *(_DWORD *)uint64_t v7 = 0;
  *(_DWORD *)(v7 + 16) = a4;
  *(_DWORD *)(v7 + 20) = a5;
  *(_DWORD *)(v7 + 24) = a6;
  *(void *)(v7 + 32) = a7;
  return 0;
}

uint64_t ModelAdapterSetNnet(void *a1, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7 = *a1 + 40 * a2;
  *(void *)(v7 + 8) = a3;
  *(_DWORD *)uint64_t v7 = 1;
  *(_DWORD *)(v7 + 16) = a4;
  *(_DWORD *)(v7 + 20) = a5;
  *(_DWORD *)(v7 + 24) = a6;
  *(void *)(v7 + 32) = a7;
  return 0;
}

uint64_t ModelAdapterEval(uint64_t a1, uint64_t *a2, int *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)a2 + 3))
  {
    if (!*((_DWORD *)a2 + 2)) {
      return 0;
    }
  }
  else
  {
    *((_DWORD *)a2 + 3) = 0;
    uint64_t v41 = *((unsigned int *)a2 + 2);
    if (!v41) {
      return 0;
    }
    int v42 = 0;
    uint64_t v43 = *a2;
    do
    {
      uint64_t v44 = *(void *)(v43 + 8);
      if (!v44) {
        return 0;
      }
      if (*(_DWORD *)v43)
      {
        if (*(_DWORD *)v43 != 1) {
          return 0;
        }
        uint64_t v45 = (_DWORD *)(v44 + 36);
      }
      else
      {
        uint64_t v45 = (_DWORD *)(v44 + 132);
      }
      v42 += ((2 * *(_DWORD *)(v43 + 24)) | 1) * *v45;
      *((_DWORD *)a2 + 3) = v42;
      v43 += 40;
      --v41;
    }
    while (v41);
  }
  int v50 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = *a2;
  while (1)
  {
    int v12 = *(_DWORD *)(v11 + 40 * v10);
    if (v12) {
      break;
    }
    uint64_t v17 = *(void *)(v11 + 40 * v10 + 8);
    uint64_t v14 = (uint64_t *)(v17 + 120);
    uint64_t v15 = (int *)(v17 + 128);
    uint64_t v16 = (int *)(v17 + 132);
LABEL_9:
    int v56 = *v16;
    int v18 = *v15;
    uint64_t v19 = *v14;
    uint64_t v20 = v11 + 40 * v10;
    int v23 = *(_DWORD *)(v20 + 16);
    uint64_t v22 = (_DWORD *)(v20 + 16);
    int v21 = v23;
    if (v23 == -1)
    {
      int v21 = 0;
      *uint64_t v22 = 0;
    }
    uint64_t v24 = v11 + 40 * v10;
    int v27 = *(_DWORD *)(v24 + 20);
    uint64_t v26 = (_DWORD *)(v24 + 20);
    int v25 = v27;
    if (v27 == -1)
    {
      int v25 = v56 - 1;
      *uint64_t v26 = v56 - 1;
      if (v9) {
        goto LABEL_17;
      }
    }
    else if (v9)
    {
      goto LABEL_17;
    }
    *a3 = v18;
    int v28 = *((_DWORD *)a2 + 3);
    *a4 = v28;
    uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), (*a3 * v28), 4);
    if (!v9) {
      return v9;
    }
    uint64_t v11 = *a2;
    int v21 = *(_DWORD *)(*a2 + 40 * v10 + 16);
    int v25 = *(_DWORD *)(*a2 + 40 * v10 + 20);
LABEL_17:
    int v29 = v25 - v21;
    int v30 = *(_DWORD *)(v11 + 40 * v10 + 24);
    if (((2 * v30) | 1) + ((2 * v30) | 1u) * v29 + v50 > *a4)
    {
      ANNError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/modeladapter.c", 143, (uint64_t)"Error: ModelAdapterEval: Output dimension specified %d is smaller than expected %d.\n", a5, a6, a7, a8);
      return 0;
    }
    int v49 = ((2 * v30) | 1) + ((2 * v30) | 1) * v29 + v50;
    uint64_t v53 = v9;
    if ((v30 & 0x80000000) == 0)
    {
      int v31 = -v30;
      int v32 = -(v56 * v30);
      do
      {
        if (v18 >= 1)
        {
          int v33 = 0;
          int v55 = *(_DWORD *)(v11 + 40 * v10 + 20) - *(_DWORD *)(v11 + 40 * v10 + 16);
          int v54 = v50 + (v55 + 1) * (v30 + v31);
          int v51 = v32;
          do
          {
            if (v33 + v31 >= 0 && v33 + v31 < v18 && (v55 & 0x80000000) == 0)
            {
              uint64_t v34 = *a2;
              uint64_t v35 = (float *)(v53 + 4 * (v54 + *a4 * v33));
              int v36 = *(_DWORD *)(*a2 + 40 * v10 + 16) + v32;
              uint64_t v37 = (v55 + 1);
              uint64_t v38 = v35;
              do
              {
                *v38++ = *(float *)(v19 + 4 * v36++);
                --v37;
              }
              while (v37);
              if (*(void *)(v34 + 40 * v10 + 32))
              {
                uint64_t v39 = (v55 + 1);
                do
                {
                  *uint64_t v35 = (*(float (**)(float))(*a2 + 40 * v10 + 32))(*v35);
                  ++v35;
                  --v39;
                }
                while (v39);
              }
            }
            ++v33;
            v32 += v56;
          }
          while (v33 != v18);
          uint64_t v11 = *a2;
          int v32 = v51;
        }
        int v30 = *(_DWORD *)(v11 + 40 * v10 + 24);
        v32 += v56;
      }
      while (v31++ < v30);
    }
    ++v10;
    int v50 = v49;
    uint64_t v9 = v53;
    if (v10 >= *((unsigned int *)a2 + 2)) {
      return v9;
    }
  }
  if (v12 != 1) {
    return 0;
  }
  uint64_t v13 = *(void *)(v11 + 40 * v10 + 8);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)(v13 + 24);
    uint64_t v15 = (int *)(v13 + 32);
    uint64_t v16 = (int *)(v13 + 36);
    goto LABEL_9;
  }
  if (v9)
  {
    heap_Free(*(void **)(a1 + 8), v9);
    return 0;
  }
  return v9;
}

uint64_t ann_Load(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  v119[100] = *MEMORY[0x263EF8340];
  uint64_t v5 = 2229280775;
  if (!a2 || !a3) {
    goto LABEL_22;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  bzero(v119, 0x320uLL);
  NodeNumberOfChildreuint64_t n = GetNodeNumberOfChildren(a3);
  if (!NodeNumberOfChildren)
  {
    int v12 = "Error loading ANN: empty ANN tree";
    uint64_t v13 = a1;
    uint64_t v14 = 592;
    goto LABEL_21;
  }
  uint64_t v109 = (NodeNumberOfChildren - 1);
  if (v109 > 0x64)
  {
    int v12 = "Error loading ANN: too many external data references";
    uint64_t v13 = a1;
    uint64_t v14 = 595;
    goto LABEL_21;
  }
  uint64_t v15 = 0;
LABEL_8:
  if (v15 != v109)
  {
    NodeChild = (unsigned int *)GetNodeChild(a3, (int)v15 + 1);
    if (NodeChild)
    {
      uint64_t v17 = NodeChild;
      if (!GetNodeNumberOfChildren(NodeChild))
      {
        unsigned int v19 = *v17;
        int v18 = (const char *)(v17 + 1);
        uint64_t v20 = &v18[v19];
        int v21 = 2147483646;
        while (v18 < v20)
        {
          uint64_t v22 = &v18[strlen(v18) + 1];
          if (!strcmp(v18, "END"))
          {
            int v18 = v22;
LABEL_18:
            if (v18 < v20)
            {
              v119[v15++] = v18;
              if (v18) {
                goto LABEL_8;
              }
            }
            break;
          }
          if (v22 >= v20) {
            break;
          }
          int v18 = &v22[strlen(v22) + 1];
          if (!--v21) {
            goto LABEL_18;
          }
        }
      }
      int v12 = "Error loading external data";
      uint64_t v13 = a1;
      uint64_t v14 = 606;
    }
    else
    {
      int v12 = "Error loading external data";
      uint64_t v13 = a1;
      uint64_t v14 = 602;
    }
    goto LABEL_21;
  }
  uint64_t v24 = (unsigned int *)GetNodeChild(a3, 0);
  if (!v24)
  {
    int v12 = "Error loading ANN";
    uint64_t v13 = a1;
    uint64_t v14 = 612;
    goto LABEL_21;
  }
  int v25 = v24;
  NodeAttributeValue_String = GetNodeAttributeValue_String(v24, "dimInput");
  if (!NodeAttributeValue_String)
  {
    int v12 = "Error in config file. Required attribute [dimInput] missing from the root node of the ANN tree.";
    uint64_t v13 = a1;
    uint64_t v14 = 615;
    goto LABEL_21;
  }
  int v27 = atoi(NodeAttributeValue_String);
  if (v27 <= 0)
  {
    int v12 = "Error in config file. Wrong value (%d) for attribute [dimInput] of the root node of the ANN tree.";
    uint64_t v13 = a1;
    uint64_t v14 = 618;
    goto LABEL_21;
  }
  *(_DWORD *)(a2 + 12) = v27;
  unsigned int v28 = GetNodeNumberOfChildren(v25);
  if (!v28)
  {
    int v12 = "Error loading ANN: no models in stack";
    uint64_t v13 = a1;
    uint64_t v14 = 623;
    goto LABEL_21;
  }
  *(_DWORD *)(a2 + 8) = v28;
  uint64_t v29 = v28;
  uint64_t v30 = heap_Calloc(*(void **)(a1 + 8), v28, 144);
  *(void *)a2 = v30;
  if (!v30)
  {
    int v12 = "Allocation error";
    uint64_t v13 = a1;
    uint64_t v14 = 629;
    goto LABEL_21;
  }
  int v31 = (char *)v30;
  uint64_t v32 = 0;
  while (1)
  {
    int v33 = (unsigned int *)GetNodeChild(v25, v32);
    if (!v33)
    {
      int v12 = "Error loading model";
      uint64_t v13 = a1;
      uint64_t v14 = 636;
      goto LABEL_21;
    }
    uint64_t v34 = v33;
    uint64_t v35 = GetNodeAttributeValue_String(v33, "name");
    int v36 = GetNodeAttributeValue_String(v34, "type");
    if (!v35 || (uint64_t v37 = v36) == 0)
    {
      int v12 = "Error loading model %u";
      uint64_t v13 = a1;
      uint64_t v14 = 641;
      goto LABEL_21;
    }
    uint64_t v38 = GetNodeAttributeValue_String(v34, "input");
    if (!strcmp(v37, "nnet"))
    {
      uint64_t v41 = &v31[144 * v32];
      NnetGetModel(a1, (uint64_t)&v110);
      *(_OWORD *)uint64_t v41 = v110;
      long long v42 = v111;
      long long v43 = v112;
      long long v44 = v114;
      *((_OWORD *)v41 + 3) = v113;
      *((_OWORD *)v41 + 4) = v44;
      *((_OWORD *)v41 + 1) = v42;
      *((_OWORD *)v41 + 2) = v43;
      long long v45 = v115;
      long long v46 = v116;
      long long v47 = v118;
      *((_OWORD *)v41 + 7) = v117;
      *((_OWORD *)v41 + 8) = v47;
      *((_OWORD *)v41 + 5) = v45;
      *((_OWORD *)v41 + 6) = v46;
      if (!LoadNnetModel(a1, v34, *((void **)v41 + 11), (uint64_t)v119, v109)) {
        goto LABEL_83;
      }
      int v12 = "Error loading nnet model %s";
      uint64_t v13 = a1;
      uint64_t v14 = 649;
      goto LABEL_21;
    }
    if (!strcmp(v37, "nnet_cascade"))
    {
      uint64_t v48 = &v31[144 * v32];
      NnetGetModel(a1, (uint64_t)&v110);
      *(_OWORD *)uint64_t v48 = v110;
      long long v49 = v111;
      long long v50 = v112;
      long long v51 = v114;
      *((_OWORD *)v48 + 3) = v113;
      *((_OWORD *)v48 + 4) = v51;
      *((_OWORD *)v48 + 1) = v49;
      *((_OWORD *)v48 + 2) = v50;
      long long v52 = v115;
      long long v53 = v116;
      long long v54 = v118;
      *((_OWORD *)v48 + 7) = v117;
      *((_OWORD *)v48 + 8) = v54;
      *((_OWORD *)v48 + 5) = v52;
      *((_OWORD *)v48 + 6) = v53;
      if (!LoadNnetModel(a1, v34, *((void **)v48 + 11), (uint64_t)v119, v109))
      {
        int v55 = 1;
        goto LABEL_84;
      }
      int v12 = "Error loading nnet model %s";
      uint64_t v13 = a1;
      uint64_t v14 = 656;
      goto LABEL_21;
    }
    if (strcmp(v37, "adapter"))
    {
      int v12 = "Unknown model type %s";
      uint64_t v13 = a1;
      uint64_t v14 = 684;
      goto LABEL_21;
    }
    uint64_t v39 = GetNodeAttributeValue_String(v34, "dim");
    if (v39) {
      int v40 = atoi(v39);
    }
    else {
      int v40 = 0;
    }
    int v56 = &v31[144 * v32];
    unsigned int v57 = GetNodeNumberOfChildren(v34);
    AdapterGetModel(a1, v57, v40, (uint64_t)&v110);
    *(_OWORD *)int v56 = v110;
    long long v58 = v111;
    long long v59 = v112;
    long long v60 = v114;
    *((_OWORD *)v56 + 3) = v113;
    *((_OWORD *)v56 + 4) = v60;
    *((_OWORD *)v56 + 1) = v58;
    *((_OWORD *)v56 + 2) = v59;
    long long v61 = v115;
    long long v62 = v116;
    long long v63 = v118;
    *((_OWORD *)v56 + 7) = v117;
    *((_OWORD *)v56 + 8) = v63;
    *((_OWORD *)v56 + 5) = v61;
    *((_OWORD *)v56 + 6) = v62;
    uint64_t v64 = (void *)*((void *)v56 + 11);
    int v104 = GetNodeNumberOfChildren(v34);
    if (!v104) {
      goto LABEL_83;
    }
    unsigned int v65 = 0;
    uint64_t v107 = v29;
    __s1 = v31;
    uint64_t v99 = v64;
    while (1)
    {
      int v106 = v65;
      uint64_t v66 = (unsigned int *)GetNodeChild(v34, v65);
      if (!v66)
      {
        uint64_t v93 = a1;
        uint64_t v94 = 359;
LABEL_96:
        uint64_t v95 = "Error loading adapter model";
        goto LABEL_97;
      }
      uint64_t v71 = v66;
      int v105 = (char *)GetNodeAttributeValue_String(v66, "type");
      uint64_t v72 = GetNodeAttributeValue_String(v71, "model");
      if (!v72)
      {
        uint64_t v93 = a1;
        uint64_t v94 = 365;
        goto LABEL_96;
      }
      uint64_t v73 = v72;
      int v74 = GetNodeAttributeValue_String(v71, "layerIdx");
      if (v74) {
        int v100 = atoi(v74);
      }
      else {
        int v100 = -1;
      }
      uint64_t v75 = GetNodeAttributeValue_String(v71, "dimFrom");
      if (v75) {
        int v103 = atoi(v75);
      }
      else {
        int v103 = -1;
      }
      uint64_t v76 = GetNodeAttributeValue_String(v71, "dimTo");
      if (v76) {
        int v102 = atoi(v76);
      }
      else {
        int v102 = -1;
      }
      uint64_t v77 = GetNodeAttributeValue_String(v71, "ctx");
      if (v77) {
        int v101 = atoi(v77);
      }
      else {
        int v101 = 0;
      }
      uint64_t v78 = GetNodeAttributeValue_String(v71, "transform");
      if (!v32) {
        goto LABEL_80;
      }
      uint64_t v79 = v78;
      uint64_t v80 = 0;
      uint64_t v81 = (uint64_t)__s1;
      while (strcmp((const char *)v81, v73))
      {
        ++v80;
        v81 += 144;
        if (v32 == v80) {
          goto LABEL_80;
        }
      }
      if ((v80 & 0x80000000) != 0)
      {
LABEL_80:
        uint64_t v96 = a1;
        uint64_t v97 = 376;
        char v98 = "LoadAdapterModel: Unknown model specified %s";
        goto LABEL_81;
      }
      if (v79)
      {
        if (strcmp(v79, "exp"))
        {
          uint64_t v96 = a1;
          uint64_t v97 = 386;
          char v98 = "LoadAdapterModel: unknown transform %s specified";
          goto LABEL_81;
        }
        uint64_t v82 = my_expf;
      }
      else
      {
        uint64_t v82 = 0;
      }
      uint64_t v29 = v107;
      if (!v105)
      {
        int v86 = v106;
        int v87 = ModelAdapterSet(v99, v106, v81, v103, v102, v101, (uint64_t)v82);
        int v31 = __s1;
        if (v87)
        {
          uint64_t v96 = a1;
          uint64_t v97 = 392;
          char v98 = "LoadAdapterModel: error in ModelAdapterSet";
          goto LABEL_81;
        }
        goto LABEL_77;
      }
      if (strcmp(v105, "nnet")) {
        break;
      }
      uint64_t v83 = *(void *)(v81 + 88);
      unsigned int v84 = *(_DWORD *)(v83 + 8);
      int v85 = v84 - 1;
      if (v100 >= 0) {
        int v85 = v100;
      }
      if (v85 >= v84)
      {
        uint64_t v96 = a1;
        uint64_t v97 = 400;
        char v98 = "LoadAdapterModel: layerIdx out of range";
        goto LABEL_81;
      }
      int v86 = v106;
      int v31 = __s1;
      if (ModelAdapterSetNnet(v99, v106, *(void *)(*(void *)v83 + 8 * v85), v103, v102, v101, (uint64_t)v82))
      {
        uint64_t v96 = a1;
        uint64_t v97 = 402;
        char v98 = "LoadAdapterModel: error in ModelAdapterSetNnet";
LABEL_81:
        int v90 = ANNError(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/ann.c", v97, (uint64_t)v98, v67, v68, v69, v70);
        uint64_t v29 = v107;
        goto LABEL_82;
      }
LABEL_77:
      int v55 = 0;
      unsigned int v88 = v86 + 1;
      BOOL v89 = v88 == v104;
      unsigned int v65 = v88;
      uint64_t v29 = v107;
      if (v89) {
        goto LABEL_84;
      }
    }
    uint64_t v93 = a1;
    uint64_t v94 = 405;
    uint64_t v95 = "LoadAdapterModel: Unknown adapter type %s";
LABEL_97:
    int v90 = ANNError(v93, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/ann.c", v94, (uint64_t)v95, v67, v68, v69, v70);
LABEL_82:
    int v31 = __s1;
    if (v90)
    {
      int v12 = "Error loading adapter model %s";
      uint64_t v13 = a1;
      uint64_t v14 = 680;
      goto LABEL_21;
    }
LABEL_83:
    int v55 = 0;
LABEL_84:
    *(_DWORD *)&v31[144 * v32 + 136] = v55;
    __strcpy_chk();
    if (v38) {
      break;
    }
LABEL_92:
    if (++v32 == v29) {
      return 0;
    }
  }
  if (v32)
  {
    uint64_t v91 = 0;
    int16x8_t v92 = v31;
    while (strcmp(v92, v38))
    {
      ++v91;
      v92 += 144;
      if (v32 == v91) {
        goto LABEL_108;
      }
    }
    if ((v91 & 0x80000000) == 0)
    {
      *(void *)&v31[144 * v32 + 96] = v92;
      goto LABEL_92;
    }
  }
LABEL_108:
  int v12 = "Unknown models specified as input %s";
  uint64_t v13 = a1;
  uint64_t v14 = 692;
LABEL_21:
  uint64_t v5 = 2229280772;
  if (!ANNError(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/ann.c", v14, (uint64_t)v12, v8, v9, v10, v11))return 0; {
LABEL_22:
  }
  ann_Unload((void *)a1, a2);
  return v5;
}

void *ann_Unload(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)a2;
    if (v3)
    {
      uint64_t v4 = result;
      unint64_t v5 = *(unsigned int *)(a2 + 8);
      if (!v5) {
        goto LABEL_9;
      }
      uint64_t v6 = 0;
      for (unint64_t i = 0; i < v5; ++i)
      {
        uint64_t v8 = *(uint64_t (**)(void *))(*(void *)a2 + v6 + 72);
        if (v8)
        {
          uint64_t result = (void *)v8(v4);
          unint64_t v5 = *(unsigned int *)(a2 + 8);
        }
        v6 += 144;
      }
      uint64_t v3 = *(void *)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        uint64_t result = heap_Free((void *)v4[1], v3);
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t ann_Eval(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  bzero(v36, 0x320uLL);
  uint64_t v14 = 2229280775;
  if (!a2 || !a3 || !a4) {
    goto LABEL_26;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v15 = 0;
    int v35 = *(_DWORD *)(a2 + 12);
    unint64_t v16 = *(void *)a2;
    unint64_t v17 = *(void *)a2;
    uint64_t v32 = a2;
    uint64_t v33 = a5;
    uint64_t v34 = a3;
    do
    {
      uint64_t v18 = *(void *)(v17 + 96);
      if (v18)
      {
        if (*(_DWORD *)(v17 + 136))
        {
          if (v15 >= 0x64)
          {
            ANNError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/ann.c", 795, (uint64_t)"Error evaluating ANN: too many layers with stacked input features (type=nnet_cascade)", v10, v11, v12, v13);
            uint64_t v14 = 2229280783;
            goto LABEL_26;
          }
          int v19 = *(_DWORD *)(v18 + 132);
          int v20 = v19 + v35;
          uint64_t v21 = a4;
          uint64_t v22 = heap_Alloc(*(void *)(a1 + 8), 4 * ((v19 + v35) * a4));
          v36[v15] = v22;
          if (!v22) {
            goto LABEL_31;
          }
          uint64_t v23 = v22;
          if (a5)
          {
            uint64_t v24 = *(const char **)(a5 + 8);
            uint64_t v25 = *(void *)(v17 + 96);
            if (v24 && !strcmp(*(const char **)(v17 + 96), v24) && *(void *)(v33 + 16))
            {
              uint64_t v26 = heap_Calloc(*(void **)(a1 + 8), (*(_DWORD *)(v25 + 132) * *(_DWORD *)(v25 + 128)), 4);
              if (!v26)
              {
LABEL_31:
                uint64_t v14 = 2229280778;
                goto LABEL_26;
              }
              int v27 = (int *)v26;
              (*(void (**)(void, void, void, void, uint64_t))v33)(*(void *)(*(void *)(v17 + 96) + 120), (*(_DWORD *)(*(void *)(v17 + 96) + 132) * *(_DWORD *)(*(void *)(v17 + 96) + 128)), *(void *)(v33 + 16), *(unsigned int *)(v33 + 24), v26);
              stackFeats(v34, v21, v35, v27, v19, v23);
              heap_Free(*(void **)(a1 + 8), (uint64_t)v27);
              goto LABEL_20;
            }
          }
          else
          {
            uint64_t v25 = *(void *)(v17 + 96);
          }
          stackFeats(v34, v21, v35, *(int **)(v25 + 120), v19, v23);
LABEL_20:
          a5 = v33;
          ++v15;
          *(void *)(v17 + 104) = v23;
          *(_DWORD *)(v17 + 112) = *(_DWORD *)(*(void *)(v17 + 96) + 128);
          a4 = v21;
          a3 = v34;
          a2 = v32;
          goto LABEL_21;
        }
        *(void *)(v17 + 104) = *(void *)(v18 + 120);
        *(_DWORD *)(v17 + 112) = *(_DWORD *)(v18 + 128);
        int v20 = *(_DWORD *)(v18 + 132);
      }
      else
      {
        *(void *)(v17 + 104) = a3;
        *(_DWORD *)(v17 + 112) = a4;
        int v20 = v35;
      }
LABEL_21:
      *(_DWORD *)(v17 + 116) = v20;
      unsigned int v28 = *(unsigned int (**)(uint64_t, unint64_t))(v17 + 64);
      if (!v28 || v28(a1, v17))
      {
        ANNError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/ann.c", 857, (uint64_t)"NNModel evaluation error, model %d", v10, v11, v12, v13);
        uint64_t v14 = 2229280785;
        goto LABEL_26;
      }
      v17 += 144;
      v16 += 144;
    }
    while (v17 < *(void *)a2 + 144 * (unint64_t)*(unsigned int *)(a2 + 8));
  }
  uint64_t v14 = 0;
LABEL_26:
  for (uint64_t i = 0; i != 100; ++i)
  {
    uint64_t v30 = v36[i];
    if (v30)
    {
      heap_Free(*(void **)(a1 + 8), v30);
      v36[i] = 0;
    }
  }
  return v14;
}

int *stackFeats(int *result, int a2, int a3, int *a4, int a5, uint64_t a6)
{
  if (a2 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    uint64_t v8 = a2;
    int v9 = 0;
    do
    {
      if (a3 >= 1)
      {
        int v9 = a3 + v7;
        uint64_t v10 = a3;
        uint64_t v11 = result;
        uint64_t v12 = (_DWORD *)(a6 + 4 * v7);
        do
        {
          int v13 = *v11++;
          *v12++ = v13;
          --v10;
        }
        while (v10);
      }
      if (a5 >= 1)
      {
        uint64_t v14 = (_DWORD *)(a6 + 4 * v9);
        int v9 = a5 + (a3 & ~(a3 >> 31)) + v7;
        uint64_t v15 = a5;
        unint64_t v16 = a4;
        do
        {
          int v17 = *v16++;
          *v14++ = v17;
          --v15;
        }
        while (v15);
      }
      ++v6;
      result += a3;
      a4 += a5;
      int v7 = v9;
    }
    while (v6 != v8);
  }
  return result;
}

uint64_t ann_GetNNModel(uint64_t a1, char *__s2, const char **a3)
{
  uint64_t v3 = 2229280775;
  if (a1)
  {
    if (__s2)
    {
      if (a3)
      {
        *a3 = 0;
        uint64_t v6 = *(unsigned int *)(a1 + 8);
        if (v6)
        {
          uint64_t v7 = 0;
          for (uint64_t i = *(const char **)a1; strcmp(i, __s2); i += 144)
          {
            if (v6 == ++v7) {
              return v3;
            }
          }
          if ((v7 & 0x80000000) == 0 && v6 > v7)
          {
            uint64_t v3 = 0;
            *a3 = i;
          }
        }
      }
    }
  }
  return v3;
}

uint64_t ann_Reset(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)a2)
    {
      unint64_t v3 = *(unsigned int *)(a2 + 8);
      if (v3)
      {
        uint64_t v4 = result;
        uint64_t v5 = 0;
        for (unint64_t i = 0; i < v3; ++i)
        {
          uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)a2 + v5 + 80);
          if (v7)
          {
            uint64_t result = v7(v4);
            unint64_t v3 = *(unsigned int *)(a2 + 8);
          }
          v5 += 144;
        }
      }
    }
  }
  return result;
}

uint64_t GetNodeNumberOfChildren(unsigned int *a1)
{
  NodeAttributeValue_String = GetNodeAttributeValue_String(a1, "children");
  if (NodeAttributeValue_String) {
    LODWORD(NodeAttributeValue_String) = atoi(NodeAttributeValue_String);
  }
  return NodeAttributeValue_String & ~((int)NodeAttributeValue_String >> 31);
}

const char *GetNodeChild(unsigned int *a1, unsigned int a2)
{
  if (GetNodeNumberOfChildren(a1) > a2)
  {
    unsigned int v5 = *a1;
    uint64_t v4 = (const char *)(a1 + 1);
    unint64_t v6 = (unint64_t)&v4[v5];
    int v7 = -1;
    while ((unint64_t)v4 < v6)
    {
      uint64_t v8 = &v4[strlen(v4) + 1];
      if (!strcmp(v4, "END"))
      {
        uint64_t result = 0;
        if (-v7 <= 0x7FFFFFFD && (unint64_t)v8 < v6)
        {
          int v10 = 0;
          while (a2 != v10)
          {
            if ((unint64_t)(v8 + 4) >= v6) {
              return 0;
            }
            uint64_t result = 0;
            if ((v10 - v7) <= 0x7FFFFFFC)
            {
              v8 += *(unsigned int *)v8 + 4;
              ++v10;
              if ((unint64_t)v8 < v6) {
                continue;
              }
            }
            return result;
          }
          return v8;
        }
        return result;
      }
      if ((unint64_t)v8 < v6)
      {
        uint64_t v4 = &v8[strlen(v8) + 1];
        if (--v7 != -2147483647) {
          continue;
        }
      }
      return 0;
    }
  }
  return 0;
}

const char *GetNodeAttributeValue_String(unsigned int *a1, const char *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v4 = (unint64_t)a1 + v2 + 4;
    unsigned int v5 = (const char *)(a1 + 1);
    int v6 = 2147483645;
    while (strcmp(v5, "END"))
    {
      int v7 = &v5[strlen(v5) + 1];
      if ((unint64_t)v7 >= v4) {
        break;
      }
      if (!strcmp(v5, a2)) {
        return v7;
      }
      size_t v8 = strlen(v7);
      uint64_t result = 0;
      if (v6-- != 0)
      {
        unsigned int v5 = &v7[v8 + 1];
        if ((unint64_t)v5 < v4) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

uint64_t LoadNnetModel(uint64_t a1, unsigned int *a2, void *a3, uint64_t a4, unsigned int a5)
{
  NodeNumberOfChildreuint64_t n = GetNodeNumberOfChildren(a2);
  if (!NnetAlloc(a1, (uint64_t)a3, NodeNumberOfChildren))
  {
    if (!NodeNumberOfChildren) {
      return NodeNumberOfChildren;
    }
    uint64_t v19 = 0;
    uint64_t v34 = NodeNumberOfChildren;
    unsigned int v35 = a5;
    while (1)
    {
      NodeChild = (unsigned int *)GetNodeChild(a2, v19);
      if (!NodeChild)
      {
        uint64_t v15 = "Error loading nnet model";
        uint64_t v16 = a1;
        uint64_t v17 = 269;
        goto LABEL_3;
      }
      uint64_t v21 = NodeChild;
      NodeAttributeValue_String = GetNodeAttributeValue_String(NodeChild, "name");
      uint64_t v23 = GetNodeAttributeValue_String(v21, "type");
      if (!NodeAttributeValue_String || (uint64_t v24 = v23) == 0)
      {
        uint64_t v15 = "Error loading nnet model";
        uint64_t v16 = a1;
        uint64_t v17 = 274;
        goto LABEL_3;
      }
      uint64_t v25 = GetNodeAttributeValue_String(v21, "file");
      if (!v25)
      {
        uint64_t v15 = "Error in config file. Required attribute [file] missing.";
        uint64_t v16 = a1;
        uint64_t v17 = 277;
        goto LABEL_3;
      }
      unsigned int v26 = atoi(v25);
      unsigned int v27 = v26;
      if ((v26 & 0x80000000) != 0 || v26 >= a5)
      {
        uint64_t v15 = "Invalid external data buffer index %d";
        uint64_t v16 = a1;
        uint64_t v17 = 280;
        return ANNError(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/ann.c", v17, (uint64_t)v15, v11, v12, v13, v14);
      }
      unsigned int v28 = GetNodeAttributeValue_String(v21, "dir");
      uint64_t v29 = GetNodeAttributeValue_String(v21, "firstL");
      if (!strcmp(v24, "conv"))
      {
        int v31 = 0;
        int v30 = 0;
        if (!v28) {
          goto LABEL_29;
        }
      }
      else if (!strcmp(v24, "sigm"))
      {
        int v31 = 0;
        int v30 = 1;
        if (!v28) {
          goto LABEL_29;
        }
      }
      else if (!strcmp(v24, "relu"))
      {
        int v31 = 0;
        int v30 = 3;
        if (!v28) {
          goto LABEL_29;
        }
      }
      else
      {
        if (strcmp(v24, "lstm"))
        {
          uint64_t v15 = "Unknown nnet layer type %s";
          uint64_t v16 = a1;
          uint64_t v17 = 295;
          return ANNError(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/ann.c", v17, (uint64_t)v15, v11, v12, v13, v14);
        }
        int v30 = 2;
        int v31 = 1;
        if (!v28) {
          goto LABEL_29;
        }
      }
      if (strcmp(v28, "back") && strcmp(v28, "bwd"))
      {
        if (strcmp(v28, "forward") && strcmp(v28, "fwd"))
        {
          uint64_t v15 = "Unknown nnet dir %s (expected fwd/bwd)";
          uint64_t v16 = a1;
          uint64_t v17 = 301;
          return ANNError(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/ann.c", v17, (uint64_t)v15, v11, v12, v13, v14);
        }
LABEL_29:
        NodeNumberOfChildreuint64_t n = NnetReadLayerAttila(a1, (uint64_t)a3, v19, v30, *(_DWORD **)(a4 + 8 * v27));
        if (!v29) {
          goto LABEL_37;
        }
        goto LABEL_30;
      }
      uint64_t LayerAttila = NnetReadLayerAttila(a1, (uint64_t)a3, v19, v30, *(_DWORD **)(a4 + 8 * v27));
      if (!v31)
      {
        uint64_t v15 = "Unexpected dir attribute on non-recurrent layer";
        uint64_t v16 = a1;
        uint64_t v17 = 307;
        goto LABEL_3;
      }
      NodeNumberOfChildreuint64_t n = LayerAttila;
      kaldi::nnet1::AttentionBaseComponent::SetSourceVectorDimension(*(void *)(*(void *)(*a3 + 8 * v19) + 8), 1);
      if (!v29)
      {
LABEL_37:
        BOOL v32 = 0;
        if (!v31) {
          goto LABEL_32;
        }
LABEL_31:
        kaldi::nnet1::AttentionBaseComponent::SetMaxAttentions(*(void *)(*(void *)(*a3 + 8 * v19) + 8), v32);
        goto LABEL_32;
      }
LABEL_30:
      BOOL v32 = strcmp(v29, "1") == 0;
      if (v31) {
        goto LABEL_31;
      }
LABEL_32:
      if (NodeNumberOfChildren) {
        return NodeNumberOfChildren;
      }
      ++v19;
      a5 = v35;
      if (v34 == v19) {
        return 0;
      }
    }
  }
  uint64_t v15 = "Allocation error";
  uint64_t v16 = a1;
  uint64_t v17 = 263;
LABEL_3:
  return ANNError(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/ann.c", v17, (uint64_t)v15, v11, v12, v13, v14);
}

void *AnnObject_Create(uint64_t a1)
{
  uint64_t result = (void *)heap_Calloc(*(void **)(a1 + 8), 1, 72);
  if (result) {
    *uint64_t result = a1;
  }
  return result;
}

void *AnnObject_Destroy(uint64_t a1)
{
  return heap_Free(*(void **)(*(void *)a1 + 8), a1);
}

uint64_t AnnObject_GetInputDimension(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t AnnObject_Open(uint64_t a1, unsigned int *a2)
{
  if (!a1) {
    return 2229280778;
  }
  *(_DWORD *)(a1 + 36) = 0;
  uint64_t v3 = ann_Load(*(void *)a1, a1 + 8, a2);
  if ((v3 & 0x80000000) != 0) {
    UNICORN__log_select_Diag(*(void *)a1, 0, (uint64_t)"AnnObject_Open, Error loading ANN\n");
  }
  else {
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 20);
  }
  return v3;
}

uint64_t AnnObject_Close(void **a1)
{
  if (!a1) {
    return 2229280778;
  }
  AnnObject_ClearLayerAdjuster((uint64_t)a1);
  ann_Unload(*a1, (uint64_t)(a1 + 1));
  return 0;
}

double AnnObject_ClearLayerAdjuster(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    heap_Free(*(void **)(*(void *)a1 + 8), v2);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t AnnObject_Reset(uint64_t a1)
{
  if (!a1) {
    return 2229280778;
  }
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  AnnObject_ClearLayerAdjuster(a1);
  ann_Reset(*(void *)a1, a1 + 8);
  return 0;
}

uint64_t AnnObject_Process(uint64_t a1)
{
  if (!a1) {
    return 2229280778;
  }
  uint64_t v2 = ann_Eval(*(void *)a1, a1 + 8, *(int **)(a1 + 24), *(unsigned int *)(a1 + 32), a1 + 40);
  if ((v2 & 0x80000000) != 0) {
    UNICORN__log_select_Diag(*(void *)a1, 0, (uint64_t)"AnnObject_Process, Error evaluating ANN\n");
  }
  return v2;
}

uint64_t AnnObject_Set(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 2229280778;
  }
  uint64_t result = 0;
  *(void *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 32) = a3;
  return result;
}

uint64_t AnnObject_Get(uint64_t *a1, char *a2, void *a3, _DWORD *a4, _DWORD *a5)
{
  if (!a1) {
    return 2229280778;
  }
  uint64_t v12 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  uint64_t NNModel = ann_GetNNModel((uint64_t)(a1 + 1), a2, &v12);
  if ((NNModel & 0x80000000) != 0)
  {
    UNICORN__log_select_Diag(*a1, 0, (uint64_t)"AnnObject_Get, Error, Expected output '%s' not found in ANN\n");
  }
  else
  {
    int v10 = v12;
    *a3 = *((void *)v12 + 15);
    *a4 = *((_DWORD *)v10 + 32);
    *a5 = *((_DWORD *)v10 + 33);
  }
  return NNModel;
}

uint64_t AnnObject_SetLayerAdjuster(uint64_t *a1, uint64_t a2, int *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = 2229280775;
  if (a1)
  {
    AnnObject_ClearLayerAdjuster((uint64_t)a1);
    uint64_t v11 = a4;
    uint64_t v12 = (_DWORD *)heap_Calloc(*(void **)(*a1 + 8), a4, 4);
    a1[7] = (uint64_t)v12;
    if (v12)
    {
      if (a4)
      {
        do
        {
          int v13 = *a3++;
          *v12++ = v13;
          --v11;
        }
        while (v11);
      }
      uint64_t v5 = 0;
      *((_DWORD *)a1 + 16) = a4;
      a1[5] = a5;
      a1[6] = a2;
    }
    else
    {
      UNICORN__log_select_Diag(*a1, 0, (uint64_t)"AnnObject_SetLayerAdjuster, Error, Out of memory\n");
      return 2229280778;
    }
  }
  return v5;
}

void NnetClear(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)a2;
  if (*(void *)a2)
  {
    uint64_t v5 = *v3;
    if (!*v3) {
      goto LABEL_7;
    }
    do
    {
      NnetClearLayer(a1, v5);
      if (*v3) {
        heap_Free(*(void **)(a1 + 8), *v3);
      }
      *uint64_t v3 = 0;
      uint64_t v6 = v3[1];
      ++v3;
      uint64_t v5 = v6;
    }
    while (v6);
    uint64_t v3 = *(uint64_t **)a2;
    if (*(void *)a2) {
LABEL_7:
    }
      heap_Free(*(void **)(a1 + 8), (uint64_t)v3);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
}

void NnetClearLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4) {
    heap_Free(*(void **)(a1 + 8), v4);
  }
  *(void *)(a2 + 24) = 0;
  uint64_t v5 = *(void **)(a2 + 8);
  if (v5)
  {
    if (*(_DWORD *)a2 == 2)
    {
      NnetClearLstmLayerParams(a1, *(void *)(a2 + 8));
    }
    else
    {
      if (*(_DWORD *)a2) {
        goto LABEL_13;
      }
      uint64_t v6 = v5[1];
      if (v6)
      {
        heap_Free(*(void **)(a1 + 8), v6);
        v5[1] = 0;
      }
      uint64_t v7 = v5[2];
      if (v7) {
        heap_Free(*(void **)(a1 + 8), v7);
      }
      *uint64_t v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    uint64_t v5 = *(void **)(a2 + 8);
    if (!v5)
    {
LABEL_14:
      *(void *)(a2 + 8) = 0;
      return;
    }
LABEL_13:
    heap_Free(*(void **)(a1 + 8), (uint64_t)v5);
    goto LABEL_14;
  }
}

BOOL NnetAlloc(uint64_t a1, uint64_t a2, int a3)
{
  NnetClear(a1, a2);
  *(_DWORD *)(a2 + 8) = a3;
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), (a3 + 1), 8);
  *(void *)a2 = v6;
  if (!v6) {
    return 1;
  }
  *(void *)(v6 + 8 * a3) = 0;
  return *(void *)a2 == 0;
}

uint64_t NnetReadConvolutionalLayerAttila(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)a2 = 0;
  uint64_t v6 = (_DWORD *)heap_Calloc(*(void **)(a1 + 8), 1, 24);
  *(void *)(a2 + 8) = v6;
  if (v6)
  {
    unsigned int v11 = a3[2];
    unsigned int v12 = a3[3];
    if (v11 >= v12) {
      int v13 = a3[3];
    }
    else {
      int v13 = a3[2];
    }
    if (v13 == 1 && *a3 == 1)
    {
      uint64_t v18 = v6;
      int v19 = a3[1];
      if (v11 <= v12) {
        unsigned int v11 = a3[3];
      }
      *uint64_t v6 = v11;
      v6[1] = v19;
      uint64_t v20 = heap_Calloc(*(void **)(a1 + 8), v19 * v11, 4);
      *((void *)v18 + 1) = v20;
      if (v20)
      {
        uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), v18[1], 4);
        *((void *)v18 + 2) = v21;
        if (v21)
        {
          memcpy(*((void **)v18 + 1), a3 + 4, 4 * (v18[1] * *v18));
          uint64_t v22 = v18[1];
          uint64_t v23 = (v22 * *v18);
          uint64_t v24 = a3[v23 + 4];
          if (v24 == *v18 || v24 == 1)
          {
            uint64_t v26 = v24 + v23;
            if (a3[v26 + 5] == v22)
            {
              memcpy(*((void **)v18 + 2), &a3[v26 + 6], 4 * v22);
              return 0;
            }
            uint64_t v15 = "corrupt weights file";
            uint64_t v16 = a1;
            uint64_t v17 = 168;
          }
          else
          {
            uint64_t v15 = "corrupt weights file";
            uint64_t v16 = a1;
            uint64_t v17 = 154;
          }
        }
        else
        {
          uint64_t v15 = "allocation error";
          uint64_t v16 = a1;
          uint64_t v17 = 144;
        }
      }
      else
      {
        uint64_t v15 = "allocation error";
        uint64_t v16 = a1;
        uint64_t v17 = 139;
      }
    }
    else
    {
      uint64_t v15 = "corrupt weights file";
      uint64_t v16 = a1;
      uint64_t v17 = 131;
    }
  }
  else
  {
    uint64_t v15 = "allocation error";
    uint64_t v16 = a1;
    uint64_t v17 = 117;
  }
  return ANNError(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/nnet.c", v17, (uint64_t)v15, v7, v8, v9, v10);
}

uint64_t NnetReadLayerAttila(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _DWORD *a5)
{
  if (*(_DWORD *)(a2 + 8) <= a3) {
    return 1;
  }
  uint64_t v10 = a3;
  uint64_t v11 = *(void *)(*(void *)a2 + 8 * a3);
  if (v11) {
    NnetClearLayer(a1, v11);
  }
  else {
    *(void *)(*(void *)a2 + 8 * a3) = heap_Calloc(*(void **)(a1 + 8), 1, 40);
  }
  uint64_t v17 = *(void *)(*(void *)a2 + 8 * v10);
  if (a3) {
    uint64_t v18 = *(void *)(*(void *)a2 + 8 * (a3 - 1));
  }
  else {
    uint64_t v18 = 0;
  }
  *(void *)(v17 + 8) = 0;
  *(void *)(v17 + 16) = v18;
  *(void *)(v17 + 32) = 0;
  switch(a4)
  {
    case 0:
      uint64_t result = NnetReadConvolutionalLayerAttila(a1, v17, a5);
      if (!result) {
        goto LABEL_11;
      }
      break;
    case 1:
    case 3:
      *(_DWORD *)uint64_t v17 = a4;
      goto LABEL_11;
    case 2:
      uint64_t result = NnetReadLstmLayer(a1, v17, a5);
      if (!result) {
LABEL_11:
      }
        uint64_t result = 0;
      break;
    default:
      uint64_t result = ANNError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/nnet.c", 215, (uint64_t)"LoadNeuralNetFiles", v12, v13, v14, v15);
      break;
  }
  return result;
}

uint64_t NnetForward(uint64_t a1, uint64_t **a2, float32x4_t *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v26 = a5;
  int v27 = a4;
  if (a2 && (uint64_t v9 = *a2) != 0)
  {
    uint64_t v10 = a3;
    if (a3 && a4 && a5)
    {
      uint64_t v11 = *v9;
      if (!*v9) {
        return 0;
      }
      while (1)
      {
        uint64_t v12 = *(void *)(v11 + 16);
        if (v12)
        {
          uint64_t v10 = *(float32x4_t **)(v12 + 24);
          a5 = *(unsigned int *)(v12 + 36);
          int v26 = *(_DWORD *)(v12 + 36);
        }
        switch(*(_DWORD *)v11)
        {
          case 0:
            uint64_t v13 = *(void *)(v11 + 8);
            if (allocLayer(a1, v11, v27, *(_DWORD *)(v13 + 4))) {
              return 1;
            }
            ncblas_sgemm((_DWORD *)(v11 + 36), (unsigned int *)&v27, (_DWORD *)v13, *(float **)(v13 + 8), (int *)v13, v10->f32, &v26, *(void *)(v11 + 24), (int *)(v11 + 36));
            if (*(_DWORD *)(v11 + 32) * *(_DWORD *)(v11 + 36))
            {
              unint64_t v14 = *(void *)(v11 + 24);
              do
              {
                ncblas_saxpy((unsigned int *)(v11 + 36), *(void *)(v13 + 16), v14);
                uint64_t v15 = *(unsigned int *)(v11 + 36);
                v14 += 4 * v15;
              }
              while (v14 < *(void *)(v11 + 24) + 4 * (unint64_t)(*(_DWORD *)(v11 + 32) * v15));
            }
            goto LABEL_27;
          case 1:
            if (allocLayer(a1, v11, v27, a5)) {
              return 1;
            }
            if (v26 * v27)
            {
              uint64_t v16 = *(float **)(v11 + 24);
              uint64_t v17 = &v16[v26 * v27];
              do
              {
                float v18 = v10->f32[0];
                uint64_t v10 = (float32x4_t *)((char *)v10 + 4);
                *v16++ = 1.0 / (float)(expf(-v18) + 1.0);
              }
              while (v16 < v17);
            }
            goto LABEL_27;
          case 2:
            if (allocLayer(a1, v11, v27, *(_DWORD *)(*(void *)(v11 + 8) + 4))
              || NnetEvalLstmLayer(a1, v11, v10, v27, v26))
            {
              return 1;
            }
            goto LABEL_27;
          case 3:
            if (allocLayer(a1, v11, v27, a5)) {
              return 1;
            }
            if (v26 * v27)
            {
              int v19 = *(float **)(v11 + 24);
              uint64_t v20 = &v19[v26 * v27];
              do
              {
                float v21 = v10->f32[0];
                uint64_t v10 = (float32x4_t *)((char *)v10 + 4);
                *v19++ = fmaxf(v21, 0.0);
              }
              while (v19 < v20);
            }
LABEL_27:
            uint64_t v10 = *(float32x4_t **)(v11 + 24);
            a5 = *(unsigned int *)(v11 + 36);
            int v26 = *(_DWORD *)(v11 + 36);
            uint64_t v22 = v9[1];
            ++v9;
            uint64_t v11 = v22;
            if (!v22) {
              return 0;
            }
            break;
          default:
            return ANNError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/nnet.c", 309, (uint64_t)"Unexpected layer type", a5, a6, a7, a8);
        }
      }
    }
    uint64_t v24 = "Wrong input";
    uint64_t v25 = 246;
  }
  else
  {
    uint64_t v24 = "Network not initialized";
    uint64_t v25 = 244;
  }
  return ANNError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/nnet.c", v25, (uint64_t)v24, a5, a6, a7, a8);
}

uint64_t allocLayer(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = *(void *)(a2 + 24);
  if (v8)
  {
    unsigned int v9 = a4 * a3;
    if (*(_DWORD *)(a2 + 36) * *(_DWORD *)(a2 + 32) == a4 * a3)
    {
      *(_DWORD *)(a2 + 32) = a3;
      *(_DWORD *)(a2 + 36) = a4;
      return 0;
    }
    heap_Free(*(void **)(a1 + 8), v8);
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    unsigned int v9 = a4 * a3;
  }
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), v9, 4);
  *(void *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 32) = a3;
  *(_DWORD *)(a2 + 36) = a4;
  if (v10) {
    return 0;
  }
  return ANNError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/nnet.c", 234, (uint64_t)"allocation error", v11, v12, v13, v14);
}

uint64_t NnetGetOutputLayer(uint64_t **a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *a1;
  do
  {
    uint64_t result = v1;
    uint64_t v4 = *v2++;
    uint64_t v1 = v4;
  }
  while (v4);
  return result;
}

uint64_t ANNError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET5", 0, 0, a5, a6, a7, a8, v9);
  return 1;
}

uint64_t NnetReadLstmLayer(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v37 = 0;
  uint64_t v38 = a3;
  unsigned int v35 = 0;
  int v36 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  *(_DWORD *)a2 = 2;
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, 144);
  *(void *)(a2 + 8) = v6;
  if (v6)
  {
    uint64_t v11 = v6;
    *(_DWORD *)(v6 + 4) = *a3;
    uint64_t v38 = a3 + 1;
    *(_DWORD *)(v6 + 16) = 1;
    readVecBuffers(a1, &v38, 4u, &v37, (unsigned int *)&v33 + 1, (unsigned int *)&v31 + 1);
    readVecBuffers(a1, &v38, 4u, &v36, (unsigned int *)&v33, (unsigned int *)&v31);
    readVecBuffers(a1, &v38, 3u, &v35, (unsigned int *)&v32 + 1, (unsigned int *)&v30 + 1);
    readVecBuffers(a1, &v38, 4u, &v34, (unsigned int *)&v32, (unsigned int *)&v30);
    uint64_t v16 = v36;
    uint64_t v17 = v37;
    float v18 = v34;
    int v19 = v35;
    if (v37 && v36 && v35 && v34)
    {
      int v20 = *(_DWORD *)(v11 + 4);
      unsigned int v21 = HIDWORD(v33) / (4 * v20);
      *(_DWORD *)uint64_t v11 = v21;
      *(void *)(v11 + 24) = v17;
      unint64_t v22 = HIDWORD(v31);
      *(void *)(v11 + 56) = &v17[HIDWORD(v31) & 0xFFFFFFFC];
      *(void *)(v11 + 120) = &v17[4 * ((v22 >> 1) & 0x3FFFFFFF)];
      *(void *)(v11 + 88) = &v17[(3 * v22) & 0xFFFFFFFC];
      if (*(_DWORD *)(v11 + 16))
      {
        NnetTransposeMatrix(a1, v17, v21, v20);
        NnetTransposeMatrix(a1, *(_DWORD **)(v11 + 56), *(_DWORD *)v11, *(_DWORD *)(v11 + 4));
        NnetTransposeMatrix(a1, *(_DWORD **)(v11 + 120), *(_DWORD *)v11, *(_DWORD *)(v11 + 4));
        NnetTransposeMatrix(a1, *(_DWORD **)(v11 + 88), *(_DWORD *)v11, *(_DWORD *)(v11 + 4));
        BOOL v23 = *(_DWORD *)(v11 + 16) == 0;
      }
      else
      {
        BOOL v23 = 1;
      }
      *(void *)(v11 + 32) = v16;
      unint64_t v26 = v31;
      *(void *)(v11 + 64) = &v16[v31 & 0xFFFFFFFC];
      *(void *)(v11 + 128) = &v16[4 * ((v26 >> 1) & 0x3FFFFFFF)];
      *(void *)(v11 + 96) = &v16[(3 * v26) & 0xFFFFFFFC];
      if (!v23)
      {
        NnetTransposeMatrix(a1, v16, *(_DWORD *)(v11 + 4), *(_DWORD *)(v11 + 4));
        NnetTransposeMatrix(a1, *(_DWORD **)(v11 + 64), *(_DWORD *)(v11 + 4), *(_DWORD *)(v11 + 4));
        NnetTransposeMatrix(a1, *(_DWORD **)(v11 + 128), *(_DWORD *)(v11 + 4), *(_DWORD *)(v11 + 4));
        NnetTransposeMatrix(a1, *(_DWORD **)(v11 + 96), *(_DWORD *)(v11 + 4), *(_DWORD *)(v11 + 4));
      }
      uint64_t result = 0;
      int v27 = v30;
      unsigned int v28 = &v18[v30 & 0xFFFFFFFC];
      *(void *)(v11 + 136) = &v18[4 * (((unint64_t)v30 >> 1) & 0x3FFFFFFF)];
      int v29 = HIDWORD(v30);
      *(void *)(v11 + 72) = &v19[4 * (HIDWORD(v30) / 3uLL)];
      *(void *)(v11 + 80) = v28;
      *(void *)(v11 + 40) = v19;
      *(void *)(v11 + 48) = v18;
      *(void *)(v11 + 104) = &v19[4 * ((2 * v29) / 3uLL)];
      *(void *)(v11 + 112) = &v18[(3 * v27) & 0xFFFFFFFC];
    }
    else
    {
      uint64_t v25 = *(void *)(a2 + 8);
      if (v25) {
        heap_Free(*(void **)(a1 + 8), v25);
      }
      *(void *)(a2 + 8) = 0;
      if (v17) {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v17);
      }
      if (v16) {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v16);
      }
      if (v19) {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v19);
      }
      if (v18) {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v18);
      }
      return ANNError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/lstm.c", 366, (uint64_t)"error reading weights file", v12, v13, v14, v15);
    }
  }
  else
  {
    return ANNError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/lstm.c", 341, (uint64_t)"allocation error", v7, v8, v9, v10);
  }
  return result;
}

void *readVecBuffers(uint64_t a1, const void **a2, unsigned int a3, char **a4, unsigned int *a5, unsigned int *a6)
{
  *a4 = 0;
  unsigned int v10 = *(_DWORD *)*a2;
  *a5 = v10;
  *a2 = (char *)*a2 + 4;
  unsigned int v11 = ((v10 / a3 + 3) & 0xFFFFFFFC) * a3;
  *a6 = v11;
  unsigned int v12 = *a5;
  uint64_t v13 = (char *)heap_Calloc(*(void **)(a1 + 8), v11, 4);
  if (v13)
  {
    float v18 = v13;
    *a4 = v13;
    size_t v19 = 4 * (v12 / a3);
    memcpy(v13, *a2, v19);
    int v20 = (char *)*a2 + v19;
    *a2 = v20;
    if (a3 == 4)
    {
      memcpy(&v18[v11], v20, v19);
      unsigned int v21 = (char *)*a2 + v19;
      *a2 = v21;
      memcpy(&v18[4 * ((v11 >> 1) & 0x3FFFFFFE)], v21, 4 * (v12 / 4));
      unint64_t v22 = (char *)*a2 + v19;
      *a2 = v22;
      unsigned int v23 = (3 * v11) >> 2;
    }
    else
    {
      memcpy(&v18[4 * (v11 / 3uLL)], v20, v19);
      unint64_t v22 = (char *)*a2 + v19;
      *a2 = v22;
      unsigned int v23 = 2 * v11 / 3;
    }
    uint64_t result = memcpy(&v18[4 * v23], v22, v19);
    *a2 = (char *)*a2 + v19;
  }
  else
  {
    return (void *)ANNError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/lstm.c", 234, (uint64_t)"allocation error", v14, v15, v16, v17);
  }
  return result;
}

void *NnetTransposeMatrix(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  uint64_t v8 = (a4 * a3);
  uint64_t result = (void *)heap_Calloc(*(void **)(a1 + 8), (v8 + 3) & 0xFFFFFFFC, 4);
  if (result)
  {
    uint64_t v10 = (uint64_t)result;
    if ((int)v8 >= 1)
    {
      for (uint64_t i = 0; i != v8; ++i)
        *((_DWORD *)result + i) = a2[(int)i / a4 + (int)i % a4 * a3];
    }
    memcpy(a2, result, 4 * v8);
    unsigned int v12 = *(void **)(a1 + 8);
    return heap_Free(v12, v10);
  }
  return result;
}

double NnetClearLstmLayerParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    heap_Free(*(void **)(a1 + 8), v4);
    *(void *)(a2 + 24) = 0;
  }
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    heap_Free(*(void **)(a1 + 8), v5);
    *(void *)(a2 + 32) = 0;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6)
  {
    heap_Free(*(void **)(a1 + 8), v6);
    *(void *)(a2 + 40) = 0;
  }
  uint64_t v7 = *(void *)(a2 + 48);
  if (v7) {
    heap_Free(*(void **)(a1 + 8), v7);
  }
  double result = 0.0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t NnetEvalLstmLayer(uint64_t a1, uint64_t a2, float32x4_t *a3, int a4, int a5)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  memset(v36, 0, sizeof(v36));
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), (*(_DWORD *)(a2 + 36) + 3) & 0xFFFFFFFC, 4);
  uint64_t v10 = (float32x4_t *)heap_Calloc(*(void **)(a1 + 8), (*(_DWORD *)(a2 + 36) + 3) & 0xFFFFFFFC, 4);
  uint64_t v11 = 0;
  if (v10) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  do
  {
    uint64_t v14 = (*(_DWORD *)(a2 + 36) + 3) & 0xFFFFFFFC;
    uint64_t v15 = (void *)heap_Calloc(*(void **)(a1 + 8), v14, 4);
    *(void *)((char *)v36 + v11) = v15;
    if (v15) {
      bzero(v15, 4 * v14);
    }
    else {
      int v13 = 1;
    }
    v11 += 8;
  }
  while (v11 != 32);
  uint64_t v16 = (unsigned int *)heap_Calloc(*(void **)(a1 + 8), (a5 + 3) & 0xFFFFFFFC, 4);
  unsigned int v21 = v16;
  if (!v16 || v13)
  {
    if (v9) {
      heap_Free(*(void **)(a1 + 8), v9);
    }
    if (v10) {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v10);
    }
    for (uint64_t i = 0; i != 32; i += 8)
    {
      uint64_t v27 = *(void *)((char *)v36 + i);
      if (v27)
      {
        heap_Free(*(void **)(a1 + 8), v27);
        *(void *)((char *)v36 + i) = 0;
      }
    }
    if (v21) {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v21);
    }
    return ANNError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/frontend/grypholizer/code/vocalizer/ttssrc.a/tts_main/be/bet5/ann/annlib/src/lstm.c", 499, (uint64_t)"allocation error", v17, v18, v19, v20);
  }
  else
  {
    uint64_t v33 = v9;
    if (*(_DWORD *)(v8 + 8))
    {
      LstmEval(v8, (float32x4_t *)((char *)a3 + 4 * ((a4 - 1) * a5)), a5, v9, v10, *(unsigned int *)(a2 + 36), (float *)(*(void *)(a2 + 24) + 4 * (*(_DWORD *)(a2 + 36) * (a4 - 1))), (float32x4_t **)v36, v16);
      uint64_t v22 = (a4 - 2);
      if (a4 >= 2)
      {
        uint64_t v23 = v22 + 1;
        uint64_t v24 = (float32x4_t *)((char *)a3 + 4 * a5 * v22);
        do
        {
          uint64_t v25 = v23 - 1;
          LstmEval(v8, v24, a5, *(void *)(a2 + 24) + 4 * v23 * *(int *)(a2 + 36), v10, *(int *)(a2 + 36), (float *)(*(void *)(a2 + 24) + 4 * (v23 - 1) * *(int *)(a2 + 36)), (float32x4_t **)v36, v21);
          uint64_t v24 = (float32x4_t *)((char *)v24 - 4 * a5);
          uint64_t v23 = v25;
        }
        while (v25);
      }
    }
    else
    {
      LstmEval(v8, a3, a5, v9, v10, *(unsigned int *)(a2 + 36), *(float **)(a2 + 24), (float32x4_t **)v36, v16);
      if (a4 >= 2)
      {
        uint64_t v29 = 1;
        uint64_t v30 = (float32x4_t *)((char *)a3 + 4 * a5);
        do
        {
          LstmEval(v8, v30, a5, *(void *)(a2 + 24) + 4 * (v29 - 1) * *(int *)(a2 + 36), v10, *(int *)(a2 + 36), (float *)(*(void *)(a2 + 24) + 4 * v29 * *(int *)(a2 + 36)), (float32x4_t **)v36, v21);
          ++v29;
          uint64_t v30 = (float32x4_t *)((char *)v30 + 4 * a5);
        }
        while (a4 != v29);
      }
    }
    if (v33) {
      heap_Free(*(void **)(a1 + 8), v33);
    }
    if (v10) {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v10);
    }
    heap_Free(*(void **)(a1 + 8), (uint64_t)v21);
    for (uint64_t j = 0; j != 32; j += 8)
    {
      uint64_t v32 = *(void *)((char *)v36 + j);
      if (v32)
      {
        heap_Free(*(void **)(a1 + 8), v32);
        *(void *)((char *)v36 + j) = 0;
      }
    }
    return 0;
  }
}

void LstmEval(uint64_t a1, float32x4_t *a2, int a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float *a7, float32x4_t **a8, unsigned int *a9)
{
  uint64_t v16 = *a8;
  uint64_t v15 = a8[1];
  uint64_t v17 = a8[2];
  uint64_t v31 = a8[3];
  if (*(_DWORD *)(a1 + 12)) {
    ann_check_zero_SIMD(a3, a2, (uint64_t)a9);
  }
  int v34 = a3;
  uint64_t v18 = a6;
  uint64_t __n = 4 * a6;
  memcpy(v16, *(const void **)(a1 + 48), __n);
  uint64_t v19 = *(int8x16_t **)(a1 + 24);
  uint64_t v33 = (uint64_t)a2;
  if (*(_DWORD *)(a1 + 12)) {
    cblas_sgemv_CMP_4M_T_SIMD(a6, v34, v19, (uint64_t)a2, v16, a9);
  }
  else {
    cblas_sgemv_4M_T_SIMD(a6, v34, (float32x4_t *)v19, (uint64_t)a2, v16);
  }
  cblas_sgemv_4M_T_SIMD(a6, a6, *(float32x4_t **)(a1 + 32), a4, v16);
  multiply_add_SIMD(v16, *(float32x4_t **)(a1 + 40), a5, a6);
  if (a6)
  {
    uint64_t v20 = (float *)v16;
    do
    {
      *uint64_t v20 = 1.0 / (float)(expf(-*v20) + 1.0);
      ++v20;
    }
    while (v20 < &v16->f32[a6]);
  }
  memcpy(v15, *(const void **)(a1 + 80), __n);
  unsigned int v21 = *(int8x16_t **)(a1 + 56);
  if (*(_DWORD *)(a1 + 12)) {
    cblas_sgemv_CMP_4M_T_SIMD(a6, v34, v21, v33, v15, a9);
  }
  else {
    cblas_sgemv_4M_T_SIMD(a6, v34, (float32x4_t *)v21, v33, v15);
  }
  cblas_sgemv_4M_T_SIMD(a6, a6, *(float32x4_t **)(a1 + 64), a4, v15);
  multiply_add_SIMD(v15, *(float32x4_t **)(a1 + 72), a5, a6);
  if (a6)
  {
    uint64_t v22 = (float *)v15;
    do
    {
      *uint64_t v22 = 1.0 / (float)(expf(-*v22) + 1.0);
      ++v22;
    }
    while (v22 < &v15->f32[a6]);
  }
  memcpy(v31, *(const void **)(a1 + 136), __n);
  uint64_t v23 = *(int8x16_t **)(a1 + 120);
  if (*(_DWORD *)(a1 + 12)) {
    cblas_sgemv_CMP_4M_T_SIMD(a6, v34, v23, v33, v31, a9);
  }
  else {
    cblas_sgemv_4M_T_SIMD(a6, v34, (float32x4_t *)v23, v33, v31);
  }
  cblas_sgemv_4M_T_SIMD(a6, a6, *(float32x4_t **)(a1 + 128), a4, v31);
  if (a6)
  {
    uint64_t v24 = (float *)v31;
    do
    {
      *uint64_t v24 = tanhf(*v24);
      ++v24;
    }
    while (v24 < &v31->f32[a6]);
  }
  multiply_multiply_add_SIMD(a5, v15, v16, v31, a5, a6);
  memcpy(v17, *(const void **)(a1 + 112), __n);
  uint64_t v25 = *(int8x16_t **)(a1 + 88);
  if (*(_DWORD *)(a1 + 12)) {
    cblas_sgemv_CMP_4M_T_SIMD(a6, v34, v25, v33, v17, a9);
  }
  else {
    cblas_sgemv_4M_T_SIMD(a6, v34, (float32x4_t *)v25, v33, v17);
  }
  cblas_sgemv_4M_T_SIMD(a6, a6, *(float32x4_t **)(a1 + 96), a4, v17);
  multiply_add_SIMD(v17, *(float32x4_t **)(a1 + 104), a5, a6);
  if (a6)
  {
    unint64_t v26 = &v17->f32[a6];
    uint64_t v27 = (float *)v17;
    do
    {
      *uint64_t v27 = 1.0 / (float)(expf(-*v27) + 1.0);
      ++v27;
    }
    while (v27 < v26);
    do
    {
      float32_t v28 = v17->f32[0];
      uint64_t v17 = (float32x4_t *)((char *)v17 + 4);
      float v29 = v28;
      float v30 = a5->f32[0];
      a5 = (float32x4_t *)((char *)a5 + 4);
      *a7++ = v29 * tanhf(v30);
      --v18;
    }
    while (v18);
  }
}

uint64_t ncblas_saxpy(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if ((int)v3 >= 1)
  {
    if ((v3 & 0xFFFFFFFC) != 0)
    {
      unint64_t v4 = 0;
      uint64_t v5 = (float *)(a2 + 8);
      uint64_t v6 = (float *)(a3 + 8);
      do
      {
        float v7 = *(v6 - 1);
        *(v6 - 2) = *(v5 - 2) + *(v6 - 2);
        *(v6 - 1) = *(v5 - 1) + v7;
        float v8 = v6[1];
        *uint64_t v6 = *v5 + *v6;
        v6[1] = v5[1] + v8;
        v4 += 4;
        v5 += 4;
        v6 += 4;
      }
      while (v4 < (v3 & 0x7FFFFFFC));
    }
    else
    {
      LODWORD(v4) = 0;
    }
    if ((int)v4 < (int)v3)
    {
      uint64_t v9 = (float *)(a3 + 4 * v4);
      uint64_t v10 = (float *)(a2 + 4 * v4);
      uint64_t v11 = v3 - v4;
      do
      {
        float v12 = *v10++;
        *uint64_t v9 = v12 + *v9;
        ++v9;
        --v11;
      }
      while (v11);
    }
  }
  return 0;
}

uint64_t ncblas_sgemm(_DWORD *a1, unsigned int *a2, _DWORD *a3, float *a4, int *a5, float *a6, int *a7, uint64_t a8, int *a9)
{
  uint64_t v9 = *a1;
  if ((v9 & 0x80000000) == 0)
  {
    uint64_t v10 = *a2;
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t v11 = *a3;
      if ((v11 & 0x80000000) == 0)
      {
        uint64_t v12 = *a5;
        int v13 = (int)v11 <= 1 ? 1 : *a3;
        if ((int)v12 >= v13)
        {
          uint64_t v14 = *a7;
          if ((int)v14 >= v13)
          {
            int v15 = v9 <= 1 ? 1 : *a1;
            if (v10 && v9)
            {
              int v16 = *a9;
              if (*a9 >= v15 && v11 != 0)
              {
                uint64_t v18 = v9 + 1;
                uint64_t v19 = v10 + 1;
                uint64_t v20 = 4 * v12;
                uint64_t v21 = 4 * v14;
                uint64_t v22 = 1;
                do
                {
                  uint64_t v23 = a4;
                  uint64_t v24 = 1;
                  do
                  {
                    float v25 = 0.0;
                    uint64_t v26 = v11;
                    uint64_t v27 = a6;
                    float32_t v28 = v23;
                    do
                    {
                      float v29 = *v28++;
                      float v30 = v29;
                      float v31 = *v27++;
                      float v25 = v25 + (float)(v30 * v31);
                      --v26;
                    }
                    while (v26);
                    *(float *)(a8 + 4 * (v16 * ((int)v22 - 1) - 1 + (int)v24)) = v25
                                                                                 + *(float *)(a8
                                                                                            + 4
                                                                                            * (v16 * ((int)v22 - 1)
                                                                                             - 1
                                                                                             + (int)v24));
                    ++v24;
                    uint64_t v23 = (float *)((char *)v23 + v20);
                  }
                  while (v24 != v18);
                  ++v22;
                  a6 = (float *)((char *)a6 + v21);
                }
                while (v22 != v19);
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void ann_check_zero_SIMD(int a1, float32x4_t *a2, uint64_t a3)
{
  if ((int)(a1 & 0xFFFFFFFC) < 1)
  {
    LODWORD(v3) = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    __asm { FMOV            V1.4S, #1.0 }
    do
    {
      float32x4_t v9 = *a2++;
      int v10 = vaddvq_s32((int32x4_t)vandq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v9), (int8x16_t)vcgtzq_f32(v9)), (int8x16_t)xmmword_20D60CD60));
      int v11 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_f32(v9, _Q1), (int8x16_t)xmmword_20D60CD60));
      int v12 = v11 << 8;
      if ((~(v11 | ~v10) & 0xF) != 0) {
        int v12 = 0;
      }
      *(_DWORD *)(a3 + v3) = v10 | v12;
      v3 += 4;
    }
    while ((((a1 & 0xFFFFFFFC) - 4 + 3) & 0x1FFFFFFFCLL) + 4 != v3);
    uint64_t v13 = 4 * ((((a1 & 0xFFFFFFFC) - 1) >> 2) + 1);
  }
  if ((int)v3 < a1) {
    memset_pattern16((void *)(a3 + v13), &unk_20D62E130, 4 * (~v3 + a1) + 4);
  }
}

uint64_t cblas_sgemv_CMP_4M_T_SIMD(uint64_t result, int a2, int8x16_t *a3, uint64_t a4, float32x4_t *a5, unsigned int *a6)
{
  LODWORD(v6) = 0;
  if ((int)result >= 4 && a2 >= 4)
  {
    unint64_t v7 = a2 & 0xFFFFFFFC;
    if ((int)v7 >= 1)
    {
      uint64_t v8 = 0;
      int v9 = result & 0xFFFFFFFC;
      int v10 = (float *)&a3->i32[result & 0xFFFFFFFC];
      do
      {
        uint64_t v11 = result - (uint64_t)v9;
        int v12 = v10;
        uint64_t v13 = &a5->f32[v9];
        if (v9 < (int)result)
        {
          do
          {
            float v14 = *v12++;
            *uint64_t v13 = *v13 + (float)(v14 * *(float *)(a4 + 4 * v8));
            ++v13;
            --v11;
          }
          while (v11);
        }
        ++v8;
        v10 += result;
      }
      while (v8 != v7);
      unint64_t v6 = 0;
      uint64_t v15 = 16 * (int)result;
      uint64_t v16 = (uint64_t)a3->i64 + 12 * (int)result;
      uint64_t v17 = &a3->i64[(int)result];
      uint64_t v18 = a3;
      uint64_t v19 = (uint64_t)a3->i64 + 4 * (int)result;
      do
      {
        unsigned int v21 = *a6++;
        unint64_t v20 = v21;
        if (v21)
        {
          if ((v20 & 0xF00) != 0)
          {
            if (v9 >= 1)
            {
              uint64_t v22 = 0;
              int8x16_t v23 = zero_one[(v20 >> 8) & 1];
              int8x16_t v24 = zero_one[(v20 >> 9) & 1];
              int8x16_t v25 = zero_one[(v20 >> 10) & 1];
              unsigned int v26 = (v20 >> 11) & 1;
              uint64_t v27 = a5;
              float32_t v28 = v18;
              int8x16_t v29 = zero_one[v26];
              do
              {
                *uint64_t v27 = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(*v27, (float32x4_t)vandq_s8(*v28, v23)), (float32x4_t)vandq_s8(*(int8x16_t *)((char *)v28 + 4 * (int)result), v24)), (float32x4_t)vandq_s8(*(int8x16_t *)((char *)v28 + 8 * (int)result), v25)), (float32x4_t)vandq_s8(*(int8x16_t *)((char *)v28 + 12 * (int)result), v29));
                ++v27;
                v22 += 4;
                ++v28;
              }
              while (v22 < v9);
            }
          }
          else if (v9 >= 1)
          {
            unint64_t v30 = 0;
            uint64_t v31 = 0;
            uint64_t v32 = (const float *)(a4 + 4 * v6);
            float32x4_t v33 = vld1q_dup_f32(v32);
            int v34 = (const float *)(a4 + ((4 * v6) | 4));
            float32x4_t v35 = vld1q_dup_f32(v34);
            int v36 = (const float *)(a4 + ((4 * v6) | 8));
            float32x4_t v37 = vld1q_dup_f32(v36);
            uint64_t v38 = (const float *)(a4 + ((4 * v6) | 0xC));
            float32x4_t v39 = vld1q_dup_f32(v38);
            do
            {
              a5[v30 / 2] = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(a5[v30 / 2], vmulq_f32(v33, (float32x4_t)v18[v30 / 2])), vmulq_f32(v35, *(float32x4_t *)(v19 + v30 * 8))), vmulq_f32(v37, *(float32x4_t *)&v17[v30])), vmulq_f32(v39, *(float32x4_t *)(v16 + v30 * 8)));
              v31 += 4;
              v30 += 2;
            }
            while (v31 < v9);
          }
        }
        v6 += 4;
        uint64_t v18 = (int8x16_t *)((char *)v18 + v15);
        v16 += v15;
        uint64_t v17 = (uint64_t *)((char *)v17 + v15);
        v19 += v15;
      }
      while (v6 < v7);
    }
  }
  if ((int)v6 < a2)
  {
    uint64_t v40 = v6;
    uint64_t v41 = (float *)&a3->i32[(int)result * (unint64_t)v6];
    do
    {
      if ((int)result >= 1)
      {
        uint64_t v42 = result;
        long long v43 = (float *)a5;
        long long v44 = v41;
        do
        {
          float v45 = *v44++;
          *long long v43 = *v43 + (float)(v45 * *(float *)(a4 + 4 * v40));
          ++v43;
          --v42;
        }
        while (v42);
      }
      ++v40;
      v41 += (int)result;
    }
    while (v40 != a2);
  }
  return result;
}

uint64_t cblas_sgemv_4M_T_SIMD(uint64_t result, int a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  LODWORD(v5) = 0;
  if ((int)result >= 4 && a2 >= 4)
  {
    unint64_t v6 = a2 & 0xFFFFFFFC;
    if ((int)v6 >= 1)
    {
      uint64_t v7 = 0;
      int v8 = result & 0xFFFFFFFC;
      int v9 = &a3->f32[result & 0xFFFFFFFC];
      do
      {
        uint64_t v10 = result - (uint64_t)v8;
        uint64_t v11 = v9;
        int v12 = &a5->f32[v8];
        if (v8 < (int)result)
        {
          do
          {
            float v13 = *v11++;
            *int v12 = *v12 + (float)(v13 * *(float *)(a4 + 4 * v7));
            ++v12;
            --v10;
          }
          while (v10);
        }
        ++v7;
        v9 += result;
      }
      while (v7 != v6);
      unint64_t v5 = 0;
      float v14 = a3;
      do
      {
        if (v8 >= 1)
        {
          uint64_t v15 = 0;
          uint64_t v16 = (const float *)(a4 + 4 * v5);
          float32x4_t v17 = vld1q_dup_f32(v16);
          uint64_t v18 = (const float *)(a4 + ((4 * v5) | 4));
          float32x4_t v19 = vld1q_dup_f32(v18);
          unint64_t v20 = (const float *)(a4 + ((4 * v5) | 8));
          float32x4_t v21 = vld1q_dup_f32(v20);
          uint64_t v22 = (const float *)(a4 + ((4 * v5) | 0xC));
          float32x4_t v23 = vld1q_dup_f32(v22);
          int8x16_t v24 = a5;
          int8x16_t v25 = v14;
          do
          {
            *int8x16_t v24 = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(*v24, vmulq_f32(v17, *v25)), vmulq_f32(v19, *(float32x4_t *)((char *)v25 + 4 * (int)result))), vmulq_f32(v21, *(float32x4_t *)((char *)v25 + 8 * (int)result))), vmulq_f32(v23, *(float32x4_t *)((char *)v25 + 12 * (int)result)));
            ++v24;
            v15 += 4;
            ++v25;
          }
          while (v15 < v8);
        }
        v5 += 4;
        v14 += (int)result;
      }
      while (v5 < v6);
    }
  }
  if ((int)v5 < a2)
  {
    uint64_t v26 = v5;
    uint64_t v27 = &a3->f32[(int)result * (unint64_t)v5];
    do
    {
      if ((int)result >= 1)
      {
        uint64_t v28 = result;
        int8x16_t v29 = (float *)a5;
        unint64_t v30 = v27;
        do
        {
          float v31 = *v30++;
          *int8x16_t v29 = *v29 + (float)(v31 * *(float *)(a4 + 4 * v26));
          ++v29;
          --v28;
        }
        while (v28);
      }
      ++v26;
      v27 += (int)result;
    }
    while (v26 != a2);
  }
  return result;
}

float32_t multiply_multiply_add_SIMD(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, unsigned int a6)
{
  if ((a6 & 0xFFFFFFFC) != 0)
  {
    unint64_t v6 = 0;
    uint64_t v7 = a5;
    int v8 = a4;
    int v9 = a3;
    uint64_t v10 = a2;
    uint64_t v11 = a1;
    do
    {
      float32x4_t v12 = *v11++;
      float32x4_t v13 = v12;
      float32x4_t v14 = *v10++;
      float32x4_t v15 = v14;
      float32x4_t v16 = *v9++;
      float32x4_t v17 = v16;
      float32x4_t v18 = *v8++;
      float32x4_t v19 = vaddq_f32(vmulq_f32(v13, v15), vmulq_f32(v17, v18));
      *v7++ = v19;
      v6 += 4;
    }
    while (v6 < (a6 & 0xFFFFFFFC));
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v6 < a6)
  {
    unint64_t v20 = &a1->f32[v6];
    float32x4_t v21 = &a2->f32[v6];
    uint64_t v22 = &a3->f32[v6];
    float32x4_t v23 = &a4->f32[v6];
    int8x16_t v24 = &a5->i32[v6];
    unint64_t v25 = a6 - (unint64_t)v6;
    do
    {
      float v26 = *v20++;
      float v27 = v26;
      float v28 = *v21++;
      float v29 = v28;
      float v30 = *v22++;
      float v31 = v30;
      float v32 = *v23++;
      v19.f32[0] = (float)(v31 * v32) + (float)(v27 * v29);
      *v24++ = v19.i32[0];
      --v25;
    }
    while (v25);
  }
  return v19.f32[0];
}

float32_t multiply_add_SIMD(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, unsigned int a4)
{
  if ((a4 & 0xFFFFFFFC) != 0)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a3;
    unint64_t v6 = a2;
    uint64_t v7 = a1;
    do
    {
      float32x4_t v8 = *v6++;
      float32x4_t v9 = v8;
      float32x4_t v10 = *v5++;
      float32x4_t v11 = vaddq_f32(*v7, vmulq_f32(v9, v10));
      *v7++ = v11;
      v4 += 4;
    }
    while (v4 < (a4 & 0xFFFFFFFC));
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v4 < a4)
  {
    float32x4_t v12 = &a2->f32[v4];
    float32x4_t v13 = &a3->f32[v4];
    float32x4_t v14 = &a1->f32[v4];
    unint64_t v15 = a4 - (unint64_t)v4;
    do
    {
      float v16 = *v12++;
      float v17 = v16;
      float v18 = *v13++;
      v11.f32[0] = *v14 + (float)(v17 * v18);
      *v14++ = v11.f32[0];
      --v15;
    }
    while (v15);
  }
  return v11.f32[0];
}

void *FastInferObject_Destroy(uint64_t a1)
{
  return heap_Free(*(void **)(*(void *)a1 + 8), a1);
}

uint64_t FastInferObject_GetInputDimension(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t FastInferObject_Open(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2229280768;
  if (!a1) {
    return 2229280778;
  }
  *(_DWORD *)(a1 + 36) = 0;
  uint64_t v5 = fi_rsc_create(*(void **)a1, (void *)(a1 + 8));
  if (v5)
  {
    uint64_t v11 = v5;
    uint64_t v12 = *(void *)a1;
    float32x4_t v13 = "FastInfer Resource creation failed: %d";
  }
  else
  {
    uint64_t v14 = a1 + 16;
    uint64_t v15 = parse_fi_binary_model(*(uint64_t **)(a1 + 8), a2, (void *)(a1 + 16));
    if (v15)
    {
      uint64_t v11 = v15;
      uint64_t v12 = *(void *)a1;
      float32x4_t v13 = "FastInfer NN binary model parsing failed: %d";
    }
    else
    {
      if (*(_DWORD *)(*(void *)v14 + 52) == 2)
      {
        uint64_t v2 = 0;
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)v14 + 60);
        return v2;
      }
      uint64_t v12 = *(void *)a1;
      float32x4_t v13 = "FastInfer NN binary model has an invalid number of dimensions: %d";
      uint64_t v11 = 0;
    }
  }
  UNICORN__log_select_Error(v12, v11, (uint64_t)v13, v6, v7, v8, v9, v10);
  return v2;
}

uint64_t FastInferObject_Close(uint64_t a1)
{
  if (!a1) {
    return 2229280778;
  }
  FastInferObject_ClearLayerAdjuster(a1);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    fi_net_destroy(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    fi_rsc_destroy((void *)result);
    uint64_t result = 0;
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

double FastInferObject_ClearLayerAdjuster(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    heap_Free(*(void **)(*(void *)a1 + 8), v2);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t FastInferObject_Reset(uint64_t a1)
{
  if (!a1) {
    return 2229280778;
  }
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  FastInferObject_ClearLayerAdjuster(a1);
  return 0;
}

uint64_t FastInferObject_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2229280768;
  if (!a1) {
    return 2229280778;
  }
  uint64_t v17 = 0;
  uint64_t v10 = fi_net_predict_ex(*(uint64_t ***)(a1 + 16), (const void **)(a1 + 24), *(unsigned int *)(a1 + 32), &v17, (uint64_t)FastInferObject_LayerAdjusterCB, a1, 0, a8);
  if (!v10) {
    return 0;
  }
  UNICORN__log_select_Error(*(void *)a1, v10, (uint64_t)"FastInferObject_Process, Error evaluating ANN\n", v11, v12, v13, v14, v15);
  return v8;
}

uint64_t FastInferObject_LayerAdjusterCB(uint64_t a1, char *__s1, uint64_t a3, _DWORD *a4)
{
  unint64_t v4 = *(void (**)(uint64_t, void, void, void, uint64_t))(a1 + 64);
  if (v4 && !strcmp(__s1, *(const char **)(a1 + 40)))
  {
    if (*a4 == 2)
    {
      v4(a3, (a4[2] * a4[1]), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), a3);
      return 1;
    }
    UNICORN__log_select_Error(*(void *)a1, 0, (uint64_t)"FastInferObject_LayerAdjusterCB called with an invalid dimension (%d, expected 2)\n", v8, v9, v10, v11, v12);
  }
  return 0;
}

uint64_t FastInferObject_BorrowModelInputs(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 2229280778;
  }
  uint64_t result = 0;
  *(void *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 32) = a3;
  return result;
}

uint64_t FastInferObject_BorrowModelOutputLayer(uint64_t *a1, char *a2, uint64_t *a3, _DWORD *a4, unsigned __int32 *a5)
{
  uint64_t v5 = 2229280775;
  if (!a1) {
    return 2229280778;
  }
  __n128 v19 = 0uLL;
  int v20 = 0;
  fi_net_borrow_output_data(a1[2], a2, a3, &v19);
  if (v10)
  {
    UNICORN__log_select_Error(*a1, v10, (uint64_t)"fi_net_borrow_output_data failed - Expected output '%s' not found in ANN\n", v11, v12, v13, v14, v15);
    unsigned __int32 v16 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    unsigned __int32 v17 = v19.n128_u32[0];
    *a4 = v19.n128_u32[1];
    unsigned __int32 v16 = v19.n128_u32[2];
    if (v17 <= 1) {
      unsigned __int32 v16 = 0;
    }
  }
  *a5 = v16;
  return v5;
}

uint64_t FastInferObject_SetLayerAdjuster(uint64_t *a1, uint64_t a2, int *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = 2229280775;
  if (a1)
  {
    FastInferObject_ClearLayerAdjuster((uint64_t)a1);
    uint64_t v11 = a4;
    uint64_t v12 = (_DWORD *)heap_Calloc(*(void **)(*a1 + 8), a4, 4);
    a1[6] = (uint64_t)v12;
    if (v12)
    {
      if (a4)
      {
        do
        {
          int v18 = *a3++;
          *v12++ = v18;
          --v11;
        }
        while (v11);
      }
      uint64_t v5 = 0;
      a1[8] = a5;
      *((_DWORD *)a1 + 14) = a4;
      a1[5] = a2;
    }
    else
    {
      UNICORN__log_select_Error(*a1, 0, (uint64_t)"FastInferObject_SetLayerAdjuster, Error, Out of memory\n", v13, v14, v15, v16, v17);
      return 2229280778;
    }
  }
  return v5;
}

uint64_t synth_bet5_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2229280769;
  }
  uint64_t result = 0;
  *a2 = &ISynth_Bet5;
  return result;
}

uint64_t synth_bet5_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2229280775;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 9357;
  }
  return result;
}

uint64_t synth_bet5_ClassClose()
{
  return 0;
}

uint64_t synth_bet5_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Object = 2229280775;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v32 = 0;
  long long v30 = xmmword_26C21F7A0;
  float v31 = off_26C21F7B0;
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a3, a4, &v34);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      if ((safeh_HandleCheck(a1, a2, 9357, 408) & 0x80000000) == 0)
      {
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        log_OutText(*(void *)(v34 + 32), (uint64_t)"SYNTH_BET5", 4, 0, (uint64_t)"Entering synth_bet5_ObjOpen", v12, v13, v14, v28);
        uint64_t v15 = (void *)heap_Calloc(*(void **)(v34 + 8), 1, 22608);
        if (!v15)
        {
          log_OutPublic(*(void *)(v34 + 32), (uint64_t)"SYNTH_BET5", 59000, 0, v16, v17, v18, v19, v29);
          uint64_t Object = 2229280778;
          goto LABEL_20;
        }
        uint64_t v20 = (uint64_t)v15;
        *uint64_t v15 = a3;
        v15[1] = a4;
        uint64_t v21 = v34;
        _DWORD v15[2] = v34;
        v15[3] = a1;
        v15[10] = 0;
        Listeuint64_t n = critsec_ObjOpen(*(void *)(v21 + 16), *(void **)(v21 + 8), v15 + 4);
        if ((Listen & 0x80000000) != 0) {
          goto LABEL_16;
        }
        *(void *)&long long v30 = v20;
        Listeuint64_t n = synth_bet5_loc_ParamGetListen(v20, "volume", 0, 100, 0x50u, &v30, &v32);
        if ((Listen & 0x80000000) != 0
          || (Listeuint64_t n = synth_bet5_loc_ParamGetListen(v20, "rate", 50, 400, 0x64u, &v30, &v32), (Listen & 0x80000000) != 0)
          || (Listeuint64_t n = synth_bet5_loc_ParamGetListen(v20, "rate_baseline", 50, 400, 0x64u, &v30, &v32),
              (Listen & 0x80000000) != 0)
          || (Listeuint64_t n = synth_bet5_loc_ParamGetListen(v20, "waitfactor", 0, 9, 2u, &v30, &v32), (Listen & 0x80000000) != 0)
          || (Listeuint64_t n = synth_bet5_loc_ParamGetListen(v20, "pitch", 50, 200, 0x64u, &v30, &v32),
              (Listen & 0x80000000) != 0)
          || (Listeuint64_t n = synth_bet5_loc_ParamGetListen(v20, "pitch_baseline", 50, 200, 0x64u, &v30, &v32),
              (Listen & 0x80000000) != 0)
          || (Listeuint64_t n = synth_bet5_loc_SynthInit(v20), (Listen & 0x80000000) != 0))
        {
LABEL_16:
          uint64_t Object = Listen;
        }
        else
        {
          uint64_t Object = objc_GetObject(*(void *)(v34 + 48), (uint64_t)"SYNTHSTREAM", &v33);
          if ((Object & 0x80000000) == 0)
          {
            *(void *)(v20 + 21496) = *(void *)(v33 + 8);
            *(void *)a5 = v20;
            *(_DWORD *)(a5 + 8) = 9356;
LABEL_20:
            log_OutText(*(void *)(v34 + 32), (uint64_t)"SYNTH_BET5", 4, 0, (uint64_t)"synth_bet5_ObjOpen: %x", v24, v25, v26, Object);
            return Object;
          }
          log_OutPublic(*(void *)(*(void *)(v20 + 16) + 32), (uint64_t)"SYNTH_BET5", 59001, 0, v23, v24, v25, v26, v29);
        }
        *(void *)a5 = v20;
        *(_DWORD *)(a5 + 8) = 9356;
        synth_bet5_ObjClose(v20, *(void *)(a5 + 8));
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        goto LABEL_20;
      }
      return 2229280776;
    }
  }
  return Object;
}

uint64_t synth_bet5_ObjClose(uint64_t a1, int a2)
{
  int v3 = safeh_HandleCheck(a1, a2, 9356, 22608);
  if (v3 < 0) {
    return 2229280776;
  }
  int v7 = v3;
  uint64_t v8 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET5", 4, 0, (uint64_t)"Entering synth_bet5_ObjClose", v4, v5, v6, v44);
  uint64_t v9 = *(void *)(v8 + 40);
  uint64_t v46 = a1;
  long long v45 = *(long long *)((char *)&xmmword_26C21F7A0 + 8);
  long long v47 = *(long long *)((char *)&xmmword_26C21F7A0 + 8);
  int v10 = paramc_ListenerRemove(v9, "volume", (long long *)&v46);
  uint64_t v11 = *(void *)(v8 + 40);
  if (v10 >= 0) {
    int v12 = v7;
  }
  else {
    int v12 = v10;
  }
  uint64_t v46 = a1;
  long long v47 = v45;
  int v13 = paramc_ListenerRemove(v11, "rate", (long long *)&v46);
  uint64_t v14 = *(void *)(v8 + 40);
  if (v13 < 0 && v12 > -1) {
    int v12 = v13;
  }
  uint64_t v46 = a1;
  long long v47 = v45;
  int v16 = paramc_ListenerRemove(v14, "rate_baseline", (long long *)&v46);
  uint64_t v17 = *(void *)(v8 + 40);
  if (v16 < 0 && v12 > -1) {
    int v12 = v16;
  }
  uint64_t v46 = a1;
  long long v47 = v45;
  int v19 = paramc_ListenerRemove(v17, "waitfactor", (long long *)&v46);
  uint64_t v20 = *(void *)(v8 + 40);
  if (v19 < 0 && v12 > -1) {
    int v12 = v19;
  }
  uint64_t v46 = a1;
  long long v47 = v45;
  int v22 = paramc_ListenerRemove(v20, "pitch", (long long *)&v46);
  uint64_t v23 = *(void *)(v8 + 40);
  if (v22 < 0 && v12 > -1) {
    int v12 = v22;
  }
  uint64_t v46 = a1;
  long long v47 = v45;
  int v25 = paramc_ListenerRemove(v23, "pitch_baseline", (long long *)&v46);
  uint64_t v26 = *(void *)(v8 + 40);
  if (v25 < 0 && v12 > -1) {
    int v12 = v25;
  }
  uint64_t v46 = a1;
  long long v47 = v45;
  int v28 = paramc_ListenerRemove(v26, "audiooutputbufsamples", (long long *)&v46);
  BOOL v29 = v28 >= 0 || v12 <= -1;
  uint64_t v30 = *(void *)(v8 + 40);
  float v31 = *(unsigned char **)(a1 + 21424);
  if (v29) {
    LODWORD(v32) = v12;
  }
  else {
    LODWORD(v32) = v28;
  }
  uint64_t v46 = a1;
  long long v47 = v45;
  int v33 = paramc_ListenerRemove(v30, v31, (long long *)&v46);
  if ((int)v32 > -1 && v33 < 0) {
    uint64_t v32 = v33;
  }
  else {
    uint64_t v32 = v32;
  }
  synth_bet5_loc_LoadAddons((_WORD **)a1, &byte_20D5A22AE);
  heap_Free(*(void **)(v8 + 8), *(void *)(a1 + 21424));
  if (*(void *)(a1 + 21496))
  {
    int v35 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if ((int)v32 > -1 && v35 < 0) {
      uint64_t v32 = v35;
    }
    else {
      uint64_t v32 = v32;
    }
  }
  if (*(void *)(a1 + 80))
  {
    uint64_t v32 = Lookup_ObjClose((uint64_t *)(a1 + 80));
    *(void *)(a1 + 80) = 0;
  }
  uint64_t v37 = *(void *)(a1 + 32);
  if (v37)
  {
    int v38 = critsec_ObjClose(v37);
    if ((int)v32 > -1 && v38 < 0) {
      uint64_t v32 = v38;
    }
    else {
      uint64_t v32 = v32;
    }
  }
  heap_Free(*(void **)(v8 + 8), a1);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET5", 4, 0, (uint64_t)"synth_bet5_ObjClose: %x", v40, v41, v42, v32);
  return v32;
}

uint64_t synth_bet5_ObjReopen(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 9356, 22608) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET5", 4, 0, (uint64_t)"Entering synth_bet5_ObjReopen", v3, v4, v5, v12);
  uint64_t v7 = synth_bet5_loc_SynthInit(a1);
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET5", 4, 0, (uint64_t)"synth_bet5_ObjReopen: %x", v8, v9, v10, v7);
  return v7;
}

uint64_t synth_bet5_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 9356, 22608) & 0x80000000) != 0) {
    return 2229280776;
  }
  synstrmaux_InitStreamOpener(a1 + 21504, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5");
  *(_DWORD *)(a1 + 22588) = 0;
  *(_WORD *)(a1 + 22592) = -2;
  *(void *)(a1 + 22596) = 0x100000001;
  *(_DWORD *)(a1 + 22552) = 0;
  *(void *)(a1 + 22576) = 0;
  if (synstrmaux_BuildAudioContentType("audio/L16;rate=", *(_DWORD *)(a1 + 48), (char *)(a1 + 21444), 0x30uLL) > 0x2F) {
    return 9;
  }
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-unit-index-in-sentence;version=4.0",
    0,
    a1 + 22392);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-psola-f0begin;version=4.0",
    0,
    a1 + 22408);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-psola-f0end;version=4.0",
    0,
    a1 + 22424);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-psola-duration;version=4.0",
    0,
    a1 + 22440);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-psola-maxfade-l;version=4.0",
    0,
    a1 + 22456);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-psola-maxfade-r;version=4.0",
    0,
    a1 + 22472);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-psola-adjacent-l;version=4.0",
    0,
    a1 + 22488);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-psola-adjacent-r;version=4.0",
    0,
    a1 + 22504);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 22328);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-usids;version=4.0",
    0,
    a1 + 22344);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-usoffsets;version=5.0",
    0,
    a1 + 22360);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-usdurs-32;version=5.0",
    0,
    a1 + 22376);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 21504), a1 + 21444, a1 + 22520);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 21504), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    a1 + 22536);
  uint64_t v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 21504), *(void *)(a1 + 21496), a3, a4);
  if ((v8 & 0x80000000) != 0) {
    synth_bet5_ProcessEnd(a1, a2);
  }
  return v8;
}

uint64_t synth_bet5_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  DirectEnduint64_t Stream = -2065686518;
  float v147 = 0;
  if ((safeh_HandleCheck(a1, a2, 9356, 22608) & 0x80000000) == 0)
  {
    *a5 = 1;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 3, 0, (uint64_t)"SYNTH-IN   ----------------- synth_bet5_Process [enter] -----------------", v8, v9, v10, v118);
    v154[0] = 0;
    uint64_t v152 = 0;
    long long v153 = 0uLL;
    uint64_t v150 = 0;
    uint64_t v151 = 0;
    int32x4_t v148 = 0;
    uint64_t v149 = 0;
    uint64_t v145 = 0;
    uint64_t v146 = 0;
    uint64_t v143 = 0;
    uint64_t v144 = 0;
    uint64_t v142 = 0;
    uint64_t v140 = 0;
    uint64_t v141 = 0;
    uint64_t v138 = 0;
    uint64_t v139 = 0;
    uint64_t v136 = 0;
    uint64_t v137 = 0;
    uint64_t v11 = (*(uint64_t (**)(void, void, char *, void *))(*(void *)(a1 + 21496) + 144))(*(void *)(a1 + 22344), *(void *)(a1 + 22352), (char *)&v153 + 12, v154);
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v20 = v11;
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 59004, "%s%x", v12, v13, v14, v15, "lhError");
      goto LABEL_130;
    }
    uint64_t v20 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 21496) + 144))(*(void *)(a1 + 22328), *(void *)(a1 + 22336), &v149, (char *)v154 + 4);
    if ((v20 & 0x80000000) == 0)
    {
      if (!v149 && !HIDWORD(v153) && LODWORD(v154[0]) && HIDWORD(v154[0]))
      {
        uint64_t v20 = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 21504), *(void *)(a1 + 21496));
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_130;
        }
        unsigned int v21 = 0;
        unsigned int v22 = 0;
LABEL_38:
        if (!(v21 | v22) || !*a5) {
          goto LABEL_130;
        }
        if (v22)
        {
          uint64_t v41 = (*(uint64_t (**)(void, void, void **, void))(*(void *)(a1 + 21496) + 112))(*(void *)(a1 + 22536), *(void *)(a1 + 22544), &v147, 32 * v22);
          if ((v41 & 0x80000000) != 0)
          {
            uint64_t v20 = v41;
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 59007, "%s%s%s%x", v42, v43, v44, v45, "stream");
            goto LABEL_130;
          }
        }
        uint64_t v46 = critsec_Enter(*(void **)(a1 + 32));
        if ((v46 & 0x80000000) != 0)
        {
          uint64_t v20 = v46;
          goto LABEL_130;
        }
        if (v22 && v148 && v147) {
          memcpy(v147, v148, 32 * v22);
        }
        if (v21)
        {
          uint64_t v47 = v146;
          uint64_t v48 = v143;
          if (!*(_DWORD *)(v143 + 4))
          {
            *(_WORD *)(a1 + 22592) = -2;
            FreePsolaData((void *)a1);
            int v49 = UNICORN__Psola_Initialise((uint64_t *)(a1 + 22576), *(void *)(a1 + 16), *(_DWORD *)(a1 + 48));
            if (v49 < 0)
            {
              int v106 = v49;
              log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 59000, 0, v50, v51, v52, v53, v119);
              int v102 = 0;
              DirectEnduint64_t Stream = v106;
              goto LABEL_99;
            }
          }
          uint64_t v54 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), *(void *)(*(void *)(a1 + 22576) + 128), 40 * (*(_DWORD *)(*(void *)(a1 + 22576) + 120) + v21));
          *(void *)(*(void *)(a1 + 22576) + 128) = v54;
          if (v54)
          {
            long long v59 = (int *)(a1 + 22568);
            int v60 = *(_DWORD *)(a1 + 22568);
            int v61 = v60 - *(_DWORD *)(v48 + 4);
            unsigned int v62 = v21 - v61;
            int v63 = v21 - v61 + 1;
            uint64_t v64 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), *(void *)(a1 + 22560), 8 * (v63 + v60));
            *(void *)(a1 + 22560) = v64;
            if (v64)
            {
              bzero((void *)(v64 + 8 * *v59), 8 * v63);
              if (v21 == v61)
              {
                unsigned int v65 = *v59 + v62;
                *(void *)(*(void *)(a1 + 22560) + 8 * v65) = 0;
                int *v59 = v65;
                goto LABEL_54;
              }
              uint64_t v88 = 0;
              DirectEnduint64_t Stream = 0;
              if (v62 <= 1) {
                uint64_t v89 = 1;
              }
              else {
                uint64_t v89 = v62;
              }
              uint64_t v133 = v89;
              while (1)
              {
                uint64_t v90 = (v61 + v88);
                int v91 = concat_UID2AddonId(*(void *)(a1 + 21432), *(_DWORD *)(a1 + 21440), *(_DWORD *)(v47 + 4 * v90));
                concat_enableAddon(a1 + 56, v91);
                int16x8_t v92 = newPeriDesc(*(void *)(a1 + 16));
                int v93 = *v59;
                uint64_t v94 = (v88 + *v59);
                *(void *)(*(void *)(a1 + 22560) + 8 * v94) = v92;
                uint64_t v95 = *(void *)(a1 + 22560);
                uint64_t v96 = *(void **)(v95 + 8 * v94);
                if (!v96) {
                  break;
                }
                int v97 = *(_DWORD *)(v47 + 4 * v90);
                if (v97 == -1)
                {
                  *uint64_t v96 = 0;
                }
                else
                {
                  int v98 = Lookup_UnitPeriInfo(*(void **)(a1 + 88), v97 - *(_DWORD *)(a1 + 108), (uint64_t)v96);
                  if (v98 < 0)
                  {
                    DirectEnduint64_t Stream = v98;
                    goto LABEL_97;
                  }
                  DirectEnduint64_t Stream = Psola_AssignPeriRanges_0(*(unsigned __int16 **)(*(void *)(a1 + 22560)
                                                                                  + 8 * (v88 + *v59)));
                  uint64_t v95 = *(void *)(a1 + 22560);
                  int v93 = *v59;
                  uint64_t v94 = (v88 + *v59);
                }
                uint64_t v99 = *(void *)(v95 + 8 * v94);
                if (!*(_WORD *)(v99 + 4))
                {
                  __int16 v100 = *(_WORD *)(v99 + 2);
                  if (v100)
                  {
                    *(_WORD *)(v99 + 4) = 1;
                    *(_WORD *)(v99 + 2) = v100 - 1;
                  }
                }
                if (v133 == ++v88)
                {
                  unsigned int v101 = v93 + v21 - v61;
                  *(void *)(v95 + 8 * v101) = 0;
                  int *v59 = v101;
                  if ((DirectEndStream & 0x80000000) == 0) {
                    goto LABEL_54;
                  }
                  goto LABEL_97;
                }
              }
            }
            DirectEnduint64_t Stream = -2065686518;
          }
LABEL_97:
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 59000, 0, v55, v56, v57, v58, v119);
          goto LABEL_98;
        }
LABEL_54:
        *(void *)(*(void *)(a1 + 22576) + 152) = *(void *)(a1 + 22560);
        int v66 = UNICORN__concat_init(*(void *)(a1 + 16), 0, 0, (uint64_t)&byte_20D5A22AE, (uint64_t)synth_bet5_loc_WsolaOutputCB, a1, 0, 0, a1 + 56, *(_DWORD *)(a1 + 22556), 1);
        if (v66 < 0 || (int v66 = UNICORN__concat_initW(a1 + 56), v66 < 0))
        {
          DirectEnduint64_t Stream = v66;
        }
        else
        {
          synth_bet5_loc_ProceedToNextPhonemeMarkerForSynthesizing(a1, (uint64_t)v147, v22);
          synth_bet5_loc_ProceedToNextPhonemeMarkerForDelivering(a1, (uint64_t)v147, v22);
          if (!v21) {
            goto LABEL_107;
          }
          int32x4_t v125 = (uint64_t *)(a1 + 56);
          unint64_t v67 = 0;
          int8x16_t v126 = (__int16 *)(a1 + 22592);
          int32x4_t v122 = (unsigned int *)(a1 + 22600);
          uint64_t v68 = -8;
          unsigned int v123 = v22;
          float v124 = a5;
          do
          {
            uint64_t v69 = v146;
            uint64_t v71 = v144;
            uint64_t v70 = v145;
            uint64_t v127 = v142;
            uint64_t v128 = v141;
            uint64_t v129 = v140;
            uint64_t v130 = v139;
            uint64_t v131 = v138;
            uint64_t v132 = v137;
            uint64_t v134 = v136;
            uint64_t v135 = v68;
            uint64_t v72 = *(void *)(*(void *)(a1 + 16) + 32);
            uint64_t v73 = *(unsigned int *)(v146 + 4 * v67);
            UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 120), *(_DWORD *)(v144 + 4 * v67));
            log_OutText(v72, (uint64_t)"SYNTH_BET5", 3, 0, (uint64_t)"SYNTH-IN   unitId %d (phonstate %d): %d msec (= %d smp)\n", v74, v75, v76, v73);
            uint64_t v77 = *(void *)(a1 + 22576);
            uint64_t v78 = (_DWORD *)(*(void *)(v77 + 128) + 40 * *(int *)(v77 + 120));
            *uint64_t v78 = *(_DWORD *)(v69 + 4 * v67);
            v78[1] = *(_DWORD *)(v70 + 4 * v67);
            v78[2] = *(_DWORD *)(v71 + 4 * v67);
            v78[3] = *(_DWORD *)(v127 + 4 * v67);
            v78[4] = *(_DWORD *)(v128 + 4 * v67);
            v78[5] = *(_DWORD *)(v129 + 4 * v67);
            v78[6] = *(_DWORD *)(v130 + 4 * v67);
            v78[7] = *(_DWORD *)(v131 + 4 * v67);
            v78[8] = *(_DWORD *)(v132 + 4 * v67);
            v78[9] = *(_DWORD *)(v134 + 4 * v67);
            DirectEnduint64_t Stream = UNICORN__Psola_Synthesis((uint64_t)v125, v77);
            if (DirectEndStream < 0)
            {
              log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 59100, 0, v79, v80, v81, v82, v121);
              unsigned int v84 = v123;
              uint64_t v83 = v124;
              int v85 = (unsigned __int16 *)(a1 + 22584);
            }
            else
            {
              ++*v126;
              unsigned int v84 = v123;
              uint64_t v83 = v124;
              int v85 = (unsigned __int16 *)(a1 + 22584);
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 3, 0, (uint64_t)"SYNTH-OUT  generated %d samples covering %d units for phoneme [%c]", v80, v81, v82, *(unsigned int *)(a1 + 22588));
              if (*v126 == *(unsigned __int16 *)(a1 + 22584))
              {
                synth_bet5_loc_UpdatePhonemeMarkerDeliveringUnits(a1, (uint64_t)v147, v123);
                synth_bet5_loc_ProceedToNextPhonemeMarkerForDelivering(a1, (uint64_t)v147, v123);
                DirectEnduint64_t Stream = 0;
              }
            }
            if (!(++v67 % *v85)) {
              synth_bet5_loc_ProceedToNextPhonemeMarkerForSynthesizing(a1, (uint64_t)v147, v84);
            }
            uint64_t v68 = v135 + 8;
          }
          while ((DirectEndStream & 0x80000000) == 0 && v67 < v21);
          if (DirectEndStream < 0) {
            goto LABEL_98;
          }
          if (v67)
          {
            BOOL v86 = (*(_DWORD *)(v143 + v68) & 1) == 0;
            if (*(_DWORD *)(v143 + v68))
            {
              if ((UNICORN__Psola_OutputFinalSilence(v125, *(void *)(a1 + 22576)) & 0x80000000) != 0) {
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 59100, 0, v108, v109, v110, v111, v119);
              }
              synth_bet5_loc_UpdatePhonemeMarkerDeliveringUnits(a1, (uint64_t)v147, v84);
              synth_bet5_loc_ProceedToNextPhonemeMarkerForDelivering(a1, (uint64_t)v147, v84);
            }
            else if (*v122 <= 0xFFFFFFFD)
            {
              unsigned int v84 = *v122;
            }
            else
            {
              unsigned int v84 = 0;
            }
            char v107 = 0;
            _DWORD *v83 = 1;
          }
          else
          {
LABEL_107:
            unsigned int v84 = *(_DWORD *)(a1 + 22600);
            if (v84 > 0xFFFFFFFD)
            {
              DirectEnduint64_t Stream = synth_bet5_loc_ReadDirectEndStream((void *)a1, 0, 0);
              int v102 = 0;
              goto LABEL_125;
            }
            LODWORD(v67) = 0;
            char v107 = 1;
            BOOL v86 = 1;
          }
          if (!v84
            || (int v112 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 21496) + 120))(*(void *)(a1 + 22536), *(void *)(a1 + 22544), 32 * v84), (v112 & 0x80000000) == 0))
          {
            if (v107)
            {
              DirectEnduint64_t Stream = synth_bet5_loc_ReadDirectEndStream((void *)a1, 0, v84);
              int v102 = 0;
              if (!v86)
              {
LABEL_123:
                *(void *)(a1 + 22596) = 0x100000001;
                goto LABEL_99;
              }
            }
            else
            {
              int v102 = *(_DWORD *)(v143 + 8 * (v67 - 1)) & 1;
              DirectEnduint64_t Stream = synth_bet5_loc_ReadDirectEndStream((void *)a1, v67, v84);
              if (!v86) {
                goto LABEL_123;
              }
            }
LABEL_125:
            *(void *)(a1 + 22596) = -1;
LABEL_99:
            int v103 = critsec_Leave(*(void **)(a1 + 32));
            if (DirectEndStream > -1 && v103 < 0) {
              uint64_t v20 = v103;
            }
            else {
              uint64_t v20 = DirectEndStream;
            }
            if (v102)
            {
              int v105 = "SYNTH-OUT   ----------------- synth_bet5_Process [exit eos] -----------------";
LABEL_131:
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 3, 0, (uint64_t)v105, v17, v18, v19, v119);
              return v20;
            }
LABEL_130:
            int v105 = "SYNTH-OUT   ----------------- synth_bet5_Process [exit] -----------------";
            goto LABEL_131;
          }
          DirectEnduint64_t Stream = v112;
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 59007, "%s%s%s%x", v113, v114, v115, v116, "stream");
        }
LABEL_98:
        int v102 = 0;
        goto LABEL_99;
      }
      if (!HIDWORD(v153))
      {
        unsigned int v22 = 0;
        unsigned int v21 = 0;
        *a5 = 0;
        goto LABEL_38;
      }
      uint64_t v26 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 21496) + 88))(*(void *)(a1 + 22344), *(void *)(a1 + 22352), &v146, (char *)&v153 + 12);
      if ((v26 & 0x80000000) != 0)
      {
        uint64_t v20 = v26;
        uint64_t v87 = *(void *)(*(void *)(a1 + 16) + 32);
      }
      else
      {
        HIDWORD(v153) >>= 2;
        uint64_t v31 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 21496) + 88))(*(void *)(a1 + 22360), *(void *)(a1 + 22368), &v145, (char *)&v153 + 8);
        if ((v31 & 0x80000000) != 0)
        {
          uint64_t v20 = v31;
          uint64_t v87 = *(void *)(*(void *)(a1 + 16) + 32);
        }
        else
        {
          DWORD2(v153) >>= 2;
          uint64_t v32 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 21496) + 88))(*(void *)(a1 + 22376), *(void *)(a1 + 22384), &v144, (char *)&v153 + 4);
          if ((v32 & 0x80000000) != 0)
          {
            uint64_t v20 = v32;
            uint64_t v87 = *(void *)(*(void *)(a1 + 16) + 32);
          }
          else
          {
            DWORD1(v153) >>= 2;
            uint64_t v33 = (*(uint64_t (**)(void, void, uint64_t *, long long *))(*(void *)(a1 + 21496) + 88))(*(void *)(a1 + 22392), *(void *)(a1 + 22400), &v143, &v153);
            if ((v33 & 0x80000000) != 0)
            {
              uint64_t v20 = v33;
              uint64_t v87 = *(void *)(*(void *)(a1 + 16) + 32);
            }
            else
            {
              LODWORD(v153) = v153 >> 3;
              uint64_t v34 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 21496) + 88))(*(void *)(a1 + 22408), *(void *)(a1 + 22416), &v142, (char *)&v152 + 4);
              if ((v34 & 0x80000000) != 0)
              {
                uint64_t v20 = v34;
                uint64_t v87 = *(void *)(*(void *)(a1 + 16) + 32);
              }
              else
              {
                HIDWORD(v152) >>= 2;
                uint64_t v35 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 21496) + 88))(*(void *)(a1 + 22424), *(void *)(a1 + 22432), &v141, &v152);
                if ((v35 & 0x80000000) != 0)
                {
                  uint64_t v20 = v35;
                  uint64_t v87 = *(void *)(*(void *)(a1 + 16) + 32);
                }
                else
                {
                  LODWORD(v152) = v152 >> 2;
                  uint64_t v36 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 21496) + 88))(*(void *)(a1 + 22440), *(void *)(a1 + 22448), &v140, (char *)&v151 + 4);
                  if ((v36 & 0x80000000) != 0)
                  {
                    uint64_t v20 = v36;
                    uint64_t v87 = *(void *)(*(void *)(a1 + 16) + 32);
                  }
                  else
                  {
                    HIDWORD(v151) >>= 2;
                    uint64_t v37 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 21496)
                                                                                          + 88))(*(void *)(a1 + 22456), *(void *)(a1 + 22464), &v139, &v151);
                    if ((v37 & 0x80000000) != 0)
                    {
                      uint64_t v20 = v37;
                      uint64_t v87 = *(void *)(*(void *)(a1 + 16) + 32);
                    }
                    else
                    {
                      LODWORD(v151) = v151 >> 2;
                      uint64_t v38 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 21496) + 88))(*(void *)(a1 + 22472), *(void *)(a1 + 22480), &v138, (char *)&v150 + 4);
                      if ((v38 & 0x80000000) != 0)
                      {
                        uint64_t v20 = v38;
                        uint64_t v87 = *(void *)(*(void *)(a1 + 16) + 32);
                      }
                      else
                      {
                        HIDWORD(v150) >>= 2;
                        uint64_t v39 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 21496)
                                                                                              + 88))(*(void *)(a1 + 22488), *(void *)(a1 + 22496), &v137, &v150);
                        if ((v39 & 0x80000000) != 0)
                        {
                          uint64_t v20 = v39;
                          uint64_t v87 = *(void *)(*(void *)(a1 + 16) + 32);
                        }
                        else
                        {
                          LODWORD(v150) = v150 >> 2;
                          uint64_t v40 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 21496)
                                                                                             + 88))(*(void *)(a1 + 22504), *(void *)(a1 + 22512), &v136, (char *)&v149 + 4);
                          if ((v40 & 0x80000000) == 0)
                          {
                            HIDWORD(v149) >>= 2;
                            uint64_t v20 = (*(uint64_t (**)(void, void, const void **, uint64_t *))(*(void *)(a1 + 21496) + 88))(*(void *)(a1 + 22328), *(void *)(a1 + 22336), &v148, &v149);
                            if ((v20 & 0x80000000) != 0)
                            {
                              uint64_t v23 = *(void *)(*(void *)(a1 + 16) + 32);
                              int32x4_t v120 = "contentType";
                              uint64_t v24 = "%s%s%s%x";
                            }
                            else
                            {
                              unsigned int v22 = v149 >> 5;
                              LODWORD(v149) = v149 >> 5;
                              unsigned int v21 = HIDWORD(v153);
                              if (__PAIR64__(HIDWORD(v153), HIDWORD(v153)) == *(void *)((char *)&v153 + 4)
                                && HIDWORD(v153) == v153
                                && HIDWORD(v153) == HIDWORD(v152)
                                && HIDWORD(v153) == v152
                                && HIDWORD(v153) == HIDWORD(v151)
                                && HIDWORD(v153) == v151
                                && HIDWORD(v153) == HIDWORD(v150)
                                && HIDWORD(v153) == v150
                                && HIDWORD(v153) == HIDWORD(v149))
                              {
                                goto LABEL_38;
                              }
                              uint64_t v23 = *(void *)(*(void *)(a1 + 16) + 32);
                              uint64_t v20 = 2229280768;
                              LODWORD(v120) = -2065686528;
                              uint64_t v24 = "Consistency check failed when reading synthstreams";
                            }
                            uint64_t v25 = 59005;
LABEL_13:
                            log_OutPublic(v23, (uint64_t)"SYNTH_BET5", v25, v24, v16, v17, v18, v19, v120);
                            goto LABEL_130;
                          }
                          uint64_t v20 = v40;
                          uint64_t v87 = *(void *)(*(void *)(a1 + 16) + 32);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      log_OutPublic(v87, (uint64_t)"SYNTH_BET5", 59005, "%s%s%s%x", v27, v28, v29, v30, "contentType");
      goto LABEL_130;
    }
    uint64_t v23 = *(void *)(*(void *)(a1 + 16) + 32);
    int32x4_t v120 = "lhError";
    uint64_t v24 = "%s%x";
    uint64_t v25 = 59004;
    goto LABEL_13;
  }
  return 2229280776;
}

uint64_t synth_bet5_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 9356, 22608) & 0x80000000) != 0) {
    return 2229280776;
  }
  *(_DWORD *)(a1 + 22552) = 0;
  Lookup_DeInit(*(uint64_t **)(a1 + 80));
  FreePsolaData((void *)a1);
  UNICORN__concat_final_deinitW((uint64_t *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 21496);
  return synstrmaux_CloseStreams((_WORD *)(a1 + 21504), v3);
}

uint64_t synth_bet5_loc_ParamCheckChange(int a1, char *__s1, const char *a3, _DWORD *a4)
{
  if (!strcmp(__s1, "audiooutputbufsamples"))
  {
    if ((int)LH_atoi(a3) <= 0) {
      uint64_t result = 2229280783;
    }
    else {
      uint64_t result = 0;
    }
  }
  else if (!strcmp(__s1, "volume"))
  {
    if (LH_atoi(a3) <= 0x64) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 2229280783;
    }
  }
  else if (!strcmp(__s1, "rate"))
  {
    if (LH_atoi(a3) - 401 >= 0xFFFFFEA1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 2229280783;
    }
  }
  else
  {
    if (!strcmp(__s1, "rate_baseline"))
    {
      BOOL v8 = __CFADD__(LH_atoi(a3) - 401, 351);
LABEL_25:
      if (v8) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = 2229280783;
      }
      goto LABEL_28;
    }
    if (!strcmp(__s1, "ratewpm"))
    {
      uint64_t result = 2229280769;
      goto LABEL_28;
    }
    if (strcmp(__s1, "waitfactor"))
    {
      if (strcmp(__s1, "pitch_baseline") && strcmp(__s1, "pitch"))
      {
        uint64_t result = 0;
        goto LABEL_28;
      }
      BOOL v8 = __CFADD__(LH_atoi(a3) - 201, 151);
      goto LABEL_25;
    }
    if (LH_atoi(a3) <= 9) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 2229280783;
    }
  }
LABEL_28:
  *a4 = (int)result >= 0;
  return result;
}

uint64_t synth_bet5_loc_ParamLearnChange(uint64_t a1, char *__s1, const char *a3)
{
  if (!strcmp(__s1, "audiooutputbufsamples")
    || !strcmp(__s1, "volume")
    || !strcmp(__s1, "rate")
    || !strcmp(__s1, "rate_baseline")
    || !strcmp(__s1, "pitch_baseline")
    || !strcmp(__s1, "ratewpm")
    || !strcmp(__s1, "waitfactor")
    || !strcmp(__s1, "pitch"))
  {
    uint64_t v7 = LH_atoi(a3);
    return synth_bet5_loc_ParamSet(a1, __s1, (uint64_t)v7);
  }
  else if (!strcmp(__s1, *(const char **)(a1 + 21424)))
  {
    return synth_bet5_loc_LoadAddons((_WORD **)a1, a3);
  }
  else
  {
    return 0;
  }
}

uint64_t synth_bet5_loc_ParamGetListen(uint64_t a1, unsigned char *a2, signed int a3, signed int a4, unsigned int a5, long long *a6, int *a7)
{
  if ((paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)a2, a7) & 0x80000000) != 0
    || (a5 = a3, *a7 < a3)
    || (a5 = a4, *a7 > a4))
  {
    uint64_t v14 = paramc_ParamSetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)a2, a5);
    *a7 = a5;
    if ((v14 & 0x80000000) != 0)
    {
      uint64_t v20 = v14;
      uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 32);
      uint64_t v25 = "parameter";
      uint64_t v23 = "%s%s";
      uint64_t v22 = 59009;
      goto LABEL_8;
    }
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 16) + 40);
  long long v26 = *a6;
  uint64_t v27 = *((void *)a6 + 2);
  uint64_t v20 = paramc_ListenerAdd(v19, a2, &v26);
  if ((v20 & 0x80000000) != 0)
  {
    uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 32);
    uint64_t v22 = 59010;
    uint64_t v23 = 0;
LABEL_8:
    log_OutPublic(v21, (uint64_t)"SYNTH_BET5", v22, v23, v15, v16, v17, v18, v25);
  }
  return v20;
}

uint64_t synth_bet5_loc_SynthInit(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  unsigned int v33 = 0;
  uint64_t v31 = 0;
  __s2 = 0;
  uint64_t v3 = a1 + 80;
  if (*(void *)(a1 + 80))
  {
    Lookup_ObjClose((uint64_t *)(a1 + 80));
    *(void *)uint64_t v3 = 0;
  }
  Uuint64_t Int = paramc_ParamGetUInt(*(void *)(v2 + 40), (uint64_t)"frequencyhz", (unsigned int *)(a1 + 48));
  if ((UInt & 0x80000000) != 0)
  {
    uint64_t Str = UInt;
    goto LABEL_16;
  }
  uint64_t v30 = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + 48);
  uint64_t RegularBrokerString = betX_CreateRegularBrokerString(v2, 2, v34, 0x100uLL);
  if ((RegularBrokerString & 0x80000000) != 0) {
    return RegularBrokerString;
  }
  uint64_t v10 = Lookup_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), *(void *)(a1 + 24), (uint64_t)v34, (uint64_t *)v3);
  if ((v10 & 0x80000000) != 0)
  {
    uint64_t Str = v10;
    *(void *)uint64_t v3 = 0;
    return Str;
  }
  Lookup_GetComponentID(*(void *)v3, &__s2);
  if (!__s2 || !*__s2) {
    goto LABEL_18;
  }
  *(void *)&long long __s1 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"voicecomponentid", &__s1);
  if ((Str & 0x80000000) != 0)
  {
LABEL_16:
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 59008, "%s%s", v5, v6, v7, v8, "parameter");
    return Str;
  }
  if ((void)__s1 && *(unsigned char *)__s1 && strcmp((const char *)__s1, __s2))
  {
    paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"voice", &v31);
    if (v31 && *v31) {
      uint64_t v16 = *(void *)(*(void *)(a1 + 16) + 32);
    }
    else {
      uint64_t v16 = *(void *)(*(void *)(a1 + 16) + 32);
    }
    log_OutPublic(v16, (uint64_t)"SYNTH_BET5", 59013, "%s%s", v12, v13, v14, v15, "voice");
    return Str;
  }
LABEL_18:
  *(_DWORD *)(v3 + 22476) = 1;
  *(_DWORD *)(a1 + 156) = 1;
  uint64_t RegularBrokerString = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"bet5nstatesperphoneme", (int *)&v33);
  if ((RegularBrokerString & 0x80000000) != 0) {
    return RegularBrokerString;
  }
  *(_WORD *)(v3 + 22504) = v33;
  uint64_t v17 = *(char **)(a1 + 21424);
  uint64_t RegularBrokerString = betX_CreateAddonListParamName(*(void *)(a1 + 16), (char **)(a1 + 21424));
  if ((RegularBrokerString & 0x80000000) != 0) {
    return RegularBrokerString;
  }
  if (!v17)
  {
    uint64_t RegularBrokerString = paramc_ParamSetStr(*(void *)(*(void *)(a1 + 16) + 40), *(void *)(a1 + 21424), &byte_20D5A22AE);
    if ((RegularBrokerString & 0x80000000) == 0) {
      goto LABEL_29;
    }
    return RegularBrokerString;
  }
  if (!strcmp(v17, *(const char **)(a1 + 21424))) {
    goto LABEL_30;
  }
  uint64_t v27 = 0;
  if (*(_DWORD *)(v3 + 21360))
  {
    uint64_t RegularBrokerString = synth_bet5_loc_LoadAddons((_WORD **)a1, &byte_20D5A22AE);
    if ((RegularBrokerString & 0x80000000) != 0) {
      return RegularBrokerString;
    }
  }
  uint64_t v18 = *(void *)(v2 + 40);
  *(void *)&long long __s1 = a1;
  *((void *)&__s1 + 1) = synth_bet5_loc_ParamCheckChange;
  uint64_t v29 = synth_bet5_loc_ParamLearnChange;
  paramc_ListenerRemove(v18, v17, &__s1);
  paramc_ParamGetStr(*(void *)(v2 + 40), *(void *)(a1 + 21424), &v27);
  if (v27)
  {
    uint64_t RegularBrokerString = synth_bet5_loc_LoadAddons((_WORD **)a1, v27);
    if ((RegularBrokerString & 0x80000000) != 0) {
      return RegularBrokerString;
    }
  }
LABEL_29:
  uint64_t v19 = *(void *)(*(void *)(a1 + 16) + 40);
  uint64_t v20 = *(unsigned char **)(a1 + 21424);
  *(void *)&long long __s1 = a1;
  *((void *)&__s1 + 1) = synth_bet5_loc_ParamCheckChange;
  uint64_t v29 = synth_bet5_loc_ParamLearnChange;
  uint64_t RegularBrokerString = paramc_ListenerAdd(v19, v20, &__s1);
  if ((RegularBrokerString & 0x80000000) != 0) {
    return RegularBrokerString;
  }
LABEL_30:
  heap_Free(*(void **)(v2 + 8), (uint64_t)v17);
  uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"volume", (int *)&v33);
  if ((Int & 0x80000000) == 0)
  {
    uint64_t Int = synth_bet5_loc_ParamSet(a1, "volume", v33);
    if ((Int & 0x80000000) == 0)
    {
      uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate_baseline", (int *)&v33);
      if ((Int & 0x80000000) == 0)
      {
        uint64_t Int = synth_bet5_loc_ParamSet(a1, "rate_baseline", v33);
        if ((Int & 0x80000000) == 0)
        {
          uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch_baseline", (int *)&v33);
          if ((Int & 0x80000000) == 0)
          {
            uint64_t Int = synth_bet5_loc_ParamSet(a1, "pitch_baseline", v33);
            if ((Int & 0x80000000) == 0)
            {
              uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", (int *)&v33);
              if ((Int & 0x80000000) == 0)
              {
                uint64_t Int = synth_bet5_loc_ParamSet(a1, "rate", v33);
                if ((Int & 0x80000000) == 0)
                {
                  uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"waitfactor", (int *)&v33);
                  if ((Int & 0x80000000) == 0)
                  {
                    uint64_t Int = synth_bet5_loc_ParamSet(a1, "waitfactor", v33);
                    if ((Int & 0x80000000) == 0)
                    {
                      uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", (int *)&v33);
                      if ((Int & 0x80000000) == 0) {
                        uint64_t Int = synth_bet5_loc_ParamSet(a1, "pitch", v33);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t Str = Int;
  if (!Lookup_HasSupportForPsola(*(void *)v3, (_DWORD *)&v30 + 1, &v30))
  {
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 3, 0, (uint64_t)"PMK data not available, PSOLA not possible", v22, v23, v24, v26);
    return 2229280769;
  }
  return Str;
}

uint64_t synth_bet5_loc_ParamSet(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = critsec_Enter(*(void **)(a1 + 32));
  if ((v6 & 0x80000000) == 0)
  {
    if (!strcmp(a2, "volume"))
    {
      if (a3 <= 0x64)
      {
        if (a3 <= 0x50) {
          double v16 = (double)(int)a3 / 80.0;
        }
        else {
          double v16 = ((double)(int)a3 + -80.0) / 20.0 + 1.0;
        }
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 3, 0, (uint64_t)"Set volume %d (synth %f)", v7, v8, v9, a3);
        *(double *)(a1 + 21392) = v16;
        goto LABEL_19;
      }
    }
    else
    {
      if (strcmp(a2, "rate_baseline"))
      {
        uint64_t v10 = 2229280783;
        if (!strcmp(a2, "rate"))
        {
          uint64_t v17 = MapProsodyValue_Scaling(50, 100, 400, *(_DWORD *)(a1 + 44), a3);
          if ((v17 - 401) >= 0xFFFFFEA1)
          {
            double v21 = (double)(int)v17;
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 3, 0, (uint64_t)"Set rate %d (synth %f)", v18, v19, v20, v17);
            *(double *)(a1 + 21400) = v21;
            goto LABEL_19;
          }
          goto LABEL_24;
        }
        if (!strcmp(a2, "ratewpm"))
        {
          uint64_t v10 = 2229280769;
          goto LABEL_24;
        }
        if (strcmp(a2, "pitch_baseline"))
        {
          if (strcmp(a2, "pitch"))
          {
LABEL_19:
            uint64_t v10 = v6;
            goto LABEL_24;
          }
          uint64_t v11 = MapProsodyValue_Scaling(50, 100, 200, *(_DWORD *)(a1 + 40), a3);
          if ((v11 - 201) >= 0xFFFFFF69)
          {
            double v15 = (double)((int)v11 - 100) + (double)((int)v11 - 100);
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET5", 3, 0, (uint64_t)"Set pitch %d (synth %f)", v12, v13, v14, v11);
            *(double *)(a1 + 21408) = v15;
            goto LABEL_19;
          }
LABEL_24:
          critsec_Leave(*(void **)(a1 + 32));
          return v10;
        }
        if ((a3 - 201) < 0xFFFFFF69) {
          goto LABEL_24;
        }
        unsigned int v26 = 0;
        *(_DWORD *)(a1 + 40) = a3;
        uint64_t v22 = "pitch";
        paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", (int *)&v26);
        uint64_t v23 = v26;
LABEL_21:
        synth_bet5_loc_ParamSet(a1, v22, v23);
        uint64_t v10 = 0;
        goto LABEL_24;
      }
      if ((a3 - 401) >= 0xFFFFFEA1)
      {
        unsigned int v25 = 0;
        *(_DWORD *)(a1 + 44) = a3;
        uint64_t v22 = "rate";
        paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", (int *)&v25);
        uint64_t v23 = v25;
        goto LABEL_21;
      }
    }
    uint64_t v10 = 2229280783;
    goto LABEL_24;
  }
  return v6;
}

uint64_t synth_bet5_loc_LoadAddons(_WORD **a1, const char *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  memset(v50, 0, sizeof(v50));
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)__s = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  memset(v19, 0, sizeof(v19));
  uint64_t v4 = (int *)(a1 + 2680);
  if (*((_DWORD *)a1 + 5360))
  {
    unint64_t v5 = 0;
    uint64_t v6 = 4;
    do
    {
      Lookup_DeInit(*(uint64_t **)&a1[2679][v6]);
      Lookup_ObjClose((uint64_t *)&a1[2679][v6]);
      ++v5;
      v6 += 12;
    }
    while (v5 < *v4);
  }
  *uint64_t v4 = 0;
  *((_DWORD *)a1 + 26) = 0;
  if (a2 && *a2)
  {
    size_t v17 = 0;
    if (betX_GetVAOName(a2, &v17, __s, 0x100uLL))
    {
      while (1)
      {
        uint64_t v18 = 0;
        uint64_t VAOBrokerString = paramc_ParamSetStr(*((void *)a1[2] + 5), (uint64_t)"voiceaddon", __s);
        if ((VAOBrokerString & 0x80000000) != 0) {
          return VAOBrokerString;
        }
        uint64_t VAOBrokerString = betX_CreateVAOBrokerString((uint64_t)a1[2], 3, (char *)&v51, 0x100uLL, 1);
        if ((VAOBrokerString & 0x80000000) != 0) {
          return VAOBrokerString;
        }
        if (!IsThisUrlOrRealPath((char *)&v51, 0))
        {
          int v16 = 0;
          uint64_t VAOBrokerString = brokeraux_ComposeBrokerString((uint64_t)a1[2], (const char *)&v51, 0, 0, 0, 0, 0, v50, 0x100uLL);
          if ((VAOBrokerString & 0x80000000) != 0) {
            return VAOBrokerString;
          }
          uint64_t VAOBrokerString = Lookup_CheckForDataFile(*a1, (uint64_t)a1[1], v50, &v16);
          if ((VAOBrokerString & 0x80000000) != 0) {
            return VAOBrokerString;
          }
          if (v16 && (Lookup_ObjOpen(*a1, (uint64_t)a1[1], (uint64_t)a1[3], (uint64_t)v50, &v18) & 0x80000000) != 0) {
            uint64_t v18 = 0;
          }
        }
        if (!v18)
        {
          uint64_t VAOBrokerString = Lookup_ObjOpen(*a1, (uint64_t)a1[1], (uint64_t)a1[3], (uint64_t)&v51, &v18);
          if ((VAOBrokerString & 0x80000000) != 0) {
            return VAOBrokerString;
          }
        }
        uint64_t v8 = heap_Realloc(*((uint64_t **)a1[2] + 1), (uint64_t)a1[2679], 24 * (*v4 + 1));
        a1[2679] = (_WORD *)v8;
        if (!v8) {
          break;
        }
        unsigned int v9 = *v4;
        *(void *)(v8 + 24 * *v4 + 8) = v18;
        strcpy((char *)v19, "voiceaddonoffset.");
        if (__s[0])
        {
          uint64_t v10 = 0;
          unsigned int v11 = 1;
          do
          {
            *((unsigned char *)&v19[1] + v10 + 1) = __tolower(__s[v10]);
            uint64_t v10 = v11;
          }
          while (strlen(__s) > v11++);
          uint64_t v8 = (uint64_t)a1[2679];
          unsigned int v9 = *v4;
        }
        uint64_t Int = paramc_ParamGetInt(*((void *)a1[2] + 5), (uint64_t)v19, (int *)(v8 + 24 * v9 + 16));
        if ((Int & 0x80000000) == 0)
        {
          int v14 = *v4 + 1;
          *uint64_t v4 = v14;
          a1[12] = a1[2679];
          *((_DWORD *)a1 + 26) = v14;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          *(_OWORD *)__s = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v25 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          long long v20 = 0u;
          memset(v19, 0, sizeof(v19));
          if (betX_GetVAOName(a2, &v17, __s, 0x100uLL)) {
            continue;
          }
        }
        return Int;
      }
      return 2229280778;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    heap_Free(*((void **)a1[2] + 1), (uint64_t)a1[2679]);
    uint64_t Int = 0;
    a1[2679] = 0;
    a1[12] = 0;
  }
  return Int;
}

uint64_t synth_bet5_loc_ProceedToNextPhonemeMarkerForSynthesizing(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = result;
  unint64_t v5 = (unsigned int *)(result + 22596);
  int v6 = *(_DWORD *)(result + 22596);
  if (v6 == -2)
  {
    unsigned int v7 = 0;
  }
  else if (v6 == -1)
  {
    unsigned int v7 = 1;
  }
  else
  {
    unsigned int v7 = v6 + 1;
  }
  if (v7 < a3)
  {
    uint64_t v8 = (unsigned int *)(a2 + 32 * v7 + 24);
    while (2)
    {
      int v9 = *(v8 - 6);
      switch(v9)
      {
        case 16:
          critsec_Leave(*(void **)(v4 + 32));
          uint64_t v10 = *(void *)(*(void *)(v4 + 16) + 40);
          unsigned int v11 = *v8;
          uint64_t v12 = "pitch";
          goto LABEL_21;
        case 17:
          critsec_Leave(*(void **)(v4 + 32));
          uint64_t v10 = *(void *)(*(void *)(v4 + 16) + 40);
          unsigned int v11 = *v8;
          uint64_t v12 = "timbre";
          goto LABEL_21;
        case 18:
          critsec_Leave(*(void **)(v4 + 32));
          uint64_t v10 = *(void *)(*(void *)(v4 + 16) + 40);
          unsigned int v11 = *v8;
          goto LABEL_18;
        case 19:
          critsec_Leave(*(void **)(v4 + 32));
          unsigned int v13 = 100 * *v8;
          unsigned int v14 = v13 / 0xC8;
          if (v13 / 0xC8 <= 0x32) {
            unsigned int v14 = 50;
          }
          if (v13 <= 0x13947) {
            unsigned int v11 = v14;
          }
          else {
            unsigned int v11 = 400;
          }
          uint64_t v10 = *(void *)(*(void *)(v4 + 16) + 40);
LABEL_18:
          uint64_t v12 = "rate";
          goto LABEL_21;
        case 20:
        case 21:
        case 22:
        case 23:
          goto LABEL_22;
        case 24:
          critsec_Leave(*(void **)(v4 + 32));
          uint64_t v10 = *(void *)(*(void *)(v4 + 16) + 40);
          unsigned int v11 = *v8;
          uint64_t v12 = "volume";
          goto LABEL_21;
        case 25:
          critsec_Leave(*(void **)(v4 + 32));
          uint64_t v10 = *(void *)(*(void *)(v4 + 16) + 40);
          unsigned int v11 = *v8;
          uint64_t v12 = "waitfactor";
LABEL_21:
          paramc_ParamSetUInt(v10, (uint64_t)v12, v11);
          uint64_t result = critsec_Enter(*(void **)(v4 + 32));
          goto LABEL_22;
        default:
          if (v9 == 33) {
            goto LABEL_27;
          }
LABEL_22:
          v8 += 8;
          if (a3 == ++v7) {
            break;
          }
          continue;
      }
      break;
    }
  }
  unsigned int v7 = -1;
LABEL_27:
  *unint64_t v5 = v7;
  return result;
}

uint64_t synth_bet5_loc_ProceedToNextPhonemeMarkerForDelivering(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (_DWORD *)(result + 22552);
  unsigned int v4 = *(_DWORD *)(result + 22600);
  if (v4 <= 0xFFFFFFFD) {
    uint64_t v5 = v4 + 1;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 >= a3)
  {
LABEL_8:
    LODWORD(v5) = -1;
  }
  else
  {
    uint64_t v7 = result;
    uint64_t v8 = (_DWORD *)(a2 + 32 * v5);
    while (*v8 != 33)
    {
      marker_logOutText(*(void *)(*(void *)(v7 + 16) + 32), (uint64_t)"SYNTH_BET5", 3, (uint64_t)"SYNTH-IN  ", (uint64_t)v8);
      void v8[3] = *v3;
      v8[4] = 0;
      uint64_t result = marker_logOutText(*(void *)(*(void *)(v7 + 16) + 32), (uint64_t)"SYNTH_BET5", 3, (uint64_t)"SYNTH-OUT ", (uint64_t)v8);
      LODWORD(v5) = v5 + 1;
      v8 += 8;
      if (a3 == v5) {
        goto LABEL_8;
      }
    }
  }
  v3[12] = v5;
  return result;
}

uint64_t synth_bet5_loc_UpdatePhonemeMarkerDeliveringUnits(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = result + 22552;
  uint64_t v4 = *(unsigned int *)(result + 22600);
  if (v4 <= 0xFFFFFFFD && v4 < a3)
  {
    uint64_t v7 = (_DWORD *)(a2 + 32 * v4);
    if (*v7 == 33)
    {
      uint64_t v8 = result;
      marker_logOutText(*(void *)(*(void *)(result + 16) + 32), (uint64_t)"SYNTH_BET5", 3, (uint64_t)"SYNTH-IN  ", (uint64_t)v7);
      int v9 = *(_DWORD *)v3;
      uint64_t v10 = a2 + 32 * *(unsigned int *)(v3 + 48);
      int v11 = *(_DWORD *)(v3 + 36);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)v3;
      *(_DWORD *)(v10 + 16) = v11;
      *(_DWORD *)(v3 + 36) = 0;
      *(_WORD *)(v3 + 40) = 0;
      *(_DWORD *)uint64_t v3 = v11 + v9;
      uint64_t v12 = *(void *)(*(void *)(v8 + 16) + 32);
      return marker_logOutText(v12, (uint64_t)"SYNTH_BET5", 3, (uint64_t)"SYNTH-OUT ", v10);
    }
  }
  return result;
}

uint64_t synth_bet5_loc_ReadDirectEndStream(void *a1, int a2, int a3)
{
  if (!a3)
  {
    uint64_t v9 = 0;
LABEL_6:
    if (!a2) {
      return v9;
    }
    uint64_t v11 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2793], a1[2794], (4 * a2));
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v29 = v11;
      uint64_t v30 = *(void *)(a1[2] + 32);
    }
    else
    {
      uint64_t v16 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2795], a1[2796], (4 * a2));
      if ((v16 & 0x80000000) != 0)
      {
        uint64_t v29 = v16;
        uint64_t v30 = *(void *)(a1[2] + 32);
      }
      else
      {
        uint64_t v17 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2797], a1[2798], (4 * a2));
        if ((v17 & 0x80000000) == 0)
        {
          uint64_t v18 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2799], a1[2800], (8 * a2));
          if ((v18 & 0x80000000) != 0)
          {
            uint64_t v31 = v18;
            uint64_t v32 = *(void *)(a1[2] + 32);
          }
          else
          {
            uint64_t v23 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2801], a1[2802], (4 * a2));
            if ((v23 & 0x80000000) != 0)
            {
              uint64_t v31 = v23;
              uint64_t v32 = *(void *)(a1[2] + 32);
            }
            else
            {
              uint64_t v24 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2803], a1[2804], (4 * a2));
              if ((v24 & 0x80000000) != 0)
              {
                uint64_t v31 = v24;
                uint64_t v32 = *(void *)(a1[2] + 32);
              }
              else
              {
                uint64_t v25 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2805], a1[2806], (4 * a2));
                if ((v25 & 0x80000000) != 0)
                {
                  uint64_t v31 = v25;
                  uint64_t v32 = *(void *)(a1[2] + 32);
                }
                else
                {
                  uint64_t v26 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2807], a1[2808], (4 * a2));
                  if ((v26 & 0x80000000) != 0)
                  {
                    uint64_t v31 = v26;
                    uint64_t v32 = *(void *)(a1[2] + 32);
                  }
                  else
                  {
                    uint64_t v27 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2809], a1[2810], (4 * a2));
                    if ((v27 & 0x80000000) != 0)
                    {
                      uint64_t v31 = v27;
                      uint64_t v32 = *(void *)(a1[2] + 32);
                    }
                    else
                    {
                      uint64_t v28 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2811], a1[2812], (4 * a2));
                      if ((v28 & 0x80000000) == 0)
                      {
                        uint64_t v9 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2813], a1[2814], (4 * a2));
                        if ((v9 & 0x80000000) == 0) {
                          return v9;
                        }
                        uint64_t v10 = *(void *)(a1[2] + 32);
                        goto LABEL_4;
                      }
                      uint64_t v31 = v28;
                      uint64_t v32 = *(void *)(a1[2] + 32);
                    }
                  }
                }
              }
            }
          }
          log_OutPublic(v32, (uint64_t)"SYNTH_BET5", 59006, "%s%s%s%x", v19, v20, v21, v22, "contentType");
          return v31;
        }
        uint64_t v29 = v17;
        uint64_t v30 = *(void *)(a1[2] + 32);
      }
    }
    log_OutPublic(v30, (uint64_t)"SYNTH_BET5", 59006, "%s%s%s%x", v12, v13, v14, v15, "contentType");
    return v29;
  }
  uint64_t v9 = (*(uint64_t (**)(void, void, void))(a1[2687] + 96))(a1[2791], a1[2792], (32 * a3));
  if ((v9 & 0x80000000) == 0) {
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(a1[2] + 32);
LABEL_4:
  log_OutPublic(v10, (uint64_t)"SYNTH_BET5", 59006, "%s%s%s%x", v5, v6, v7, v8, "contentType");
  return v9;
}

uint64_t synth_bet5_loc_WsolaOutputCB(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 21496) + 104))(*(void *)(a1 + 22520), *(void *)(a1 + 22528), a2, (2 * a3));
  *(_DWORD *)(a1 + 22588) += a3;
  return result;
}

void *FreePsolaData(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (uint64_t **)result[2820];
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = 0;
      unsigned int v5 = 1;
      do
      {
        freePeriDesc(v1[2], v3);
        *(void *)(v1[2820] + 8 * v4) = 0;
        uint64_t v2 = (uint64_t **)v1[2820];
        uint64_t v4 = v5;
        uint64_t v3 = v2[v5++];
      }
      while (v3);
    }
    uint64_t result = heap_Free(*(void **)(v1[2] + 8), (uint64_t)v2);
    v1[2820] = 0;
  }
  *((_DWORD *)v1 + 5642) = 0;
  uint64_t v6 = (void *)v1[2822];
  if (v6)
  {
    uint64_t result = UNICORN__Psola_Deinitialise(v1[2], v6);
    v1[2822] = 0;
  }
  return result;
}

uint64_t UNICORN__writeToPeriVec(uint64_t a1, unsigned int a2, __int16 a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6 <= a2)
  {
    uint64_t v7 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 8), 2 * (v6 + 150));
    if (!v7) {
      return 2229280778;
    }
    *(void *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) += 150;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  uint64_t v8 = 0;
  *(_WORD *)(v7 + 2 * a2) = a3;
  return v8;
}

_OWORD *newPeriDesc(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)heap_Alloc(*(void *)(a1 + 8), 80);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[3] = 0u;
    v2[4] = 0u;
    v2[1] = 0u;
    v2[2] = 0u;
    *uint64_t v2 = 0u;
    uint64_t v4 = heap_Alloc(*(void *)(a1 + 8), 300);
    *((void *)v3 + 2) = v4;
    if (v4)
    {
      *((_DWORD *)v3 + 6) = 150;
      *((void *)v3 + 1) = a1;
      uint64_t v5 = heap_Alloc(*(void *)(a1 + 8), 300);
      *((void *)v3 + 5) = v5;
      if (v5)
      {
        *((_DWORD *)v3 + 12) = 150;
        *((void *)v3 + 4) = a1;
        uint64_t v6 = heap_Alloc(*(void *)(a1 + 8), 300);
        *((void *)v3 + 8) = v6;
        if (v6)
        {
          *((_DWORD *)v3 + 18) = 150;
          *((void *)v3 + 7) = a1;
          return v3;
        }
      }
      uint64_t v7 = *((void *)v3 + 2);
      if (v7) {
        heap_Free(*(void **)(a1 + 8), v7);
      }
    }
    uint64_t v8 = *((void *)v3 + 5);
    if (v8) {
      heap_Free(*(void **)(a1 + 8), v8);
    }
    uint64_t v9 = *((void *)v3 + 8);
    if (v9) {
      heap_Free(*(void **)(a1 + 8), v9);
    }
    return 0;
  }
  return v3;
}

void *freePeriDesc(uint64_t a1, uint64_t *a2)
{
  heap_Free(*(void **)(a1 + 8), a2[2]);
  heap_Free(*(void **)(a1 + 8), a2[5]);
  heap_Free(*(void **)(a1 + 8), a2[8]);
  uint64_t v4 = *(void **)(a1 + 8);
  return heap_Free(v4, (uint64_t)a2);
}

uint64_t UNICORN__Psola_GetDecodedUnitData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7, unsigned int a8, _WORD *a9, int *a10, _DWORD *a11, _DWORD *a12)
{
  if (!a3) {
    return 0;
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  v37[0] = 0;
  v37[1] = 0;
  Unitunsigned int Data = Lookup_GetUnitData(*(void **)(a1 + 32), a4, (uint64_t)v37);
  if ((UnitData & 0x80000000) != 0) {
    return UnitData;
  }
  if (a6 + a5 + a7 <= a8)
  {
    int v20 = HIDWORD(v37[0]);
    if (HIDWORD(v37[0]) >= a5) {
      unsigned int v21 = a5;
    }
    else {
      unsigned int v21 = HIDWORD(v37[0]);
    }
    *a10 = v21;
    *a11 = a6;
    *a12 = a7;
    int v22 = *a10;
    int v23 = *a10 + a7 + *a11;
    long long v40 = 0;
    BOOL v25 = a4 == -1 && *(_DWORD *)(a1 + 100) != 0;
    uint64_t Segment = UNICORN__concat_getSegment(a1, a4, v20 - v22, v23, (uint64_t)&v38, v25);
    if ((Segment & 0x80000000) == 0)
    {
      uint64_t v26 = HIDWORD(v39);
      uint64_t v27 = (uint64_t)v40;
      if (HIDWORD(v39))
      {
        double v29 = *(double *)(a1 + 21336);
        uint64_t v30 = HIDWORD(v39);
        uint64_t v31 = v40;
        do
        {
          float v32 = v29 * *v31;
          *uint64_t v31 = v32;
          int v33 = -956301312;
          if (v32 < -32768.0 || (int v33 = 1191181824, v32 > 32767.0)) {
            *(_DWORD *)uint64_t v31 = v33;
          }
          ++v31;
          --v30;
        }
        while (v30);
        uint64_t v34 = (float *)v27;
        do
        {
          float v35 = *v34++;
          *a9++ = (int)v35;
          --v26;
        }
        while (v26);
      }
      heap_Free(*(void **)(*(void *)a1 + 8), v27);
    }
  }
  else
  {
    *a10 = 0;
    *a11 = 0;
    uint64_t Segment = 2229280777;
    *a12 = 0;
  }
  return Segment;
}

uint64_t UNICORN__concat_getSegment(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5, int a6)
{
  unsigned int v6 = a4;
  *(_DWORD *)(a5 + 12) = a4;
  uint64_t v9 = (int *)(a5 + 12);
  *(_DWORD *)(a5 + 8) = a4;
  if (a4 <= 0)
  {
    *uint64_t v9 = 0;
    UNICORN__log_wsola_Diag(*(void *)a1, 1, (uint64_t)"WARNING: Segment in unit %d has a duration of %d\n");
    return 2229280775;
  }
  uint64_t v11 = *(uint64_t **)(*(void *)a1 + 8);
  if (!a6)
  {
    uint64_t v16 = heap_Calloc(v11, a4, 2);
    if (!v16)
    {
      uint64_t v14 = 2229280778;
      goto LABEL_32;
    }
    int v22 = (__int16 *)v16;
    if (a2 <= 0xFFFFFFFD)
    {
      Lookup_Init(*(void *)(a1 + 32), a3, *v9);
      Lookup_Decode(*(void *)(a1 + 32), v9, (uint64_t)v22);
      unsigned int v6 = *v9;
    }
    if (a2 == -2)
    {
      unsigned int v25 = *(_DWORD *)(a1 + 96);
      if (v25 > a3)
      {
        if (*v9 + a3 > v25) {
          unsigned int v6 = v25 - a3;
        }
        uint64_t v24 = (void *)(a1 + 88);
        goto LABEL_22;
      }
      uint64_t v30 = *(void *)a1;
      uint64_t v31 = 59012;
    }
    else
    {
      if (a2 != -1)
      {
LABEL_23:
        uint64_t v26 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a5 + 16), 4 * *(unsigned int *)(a5 + 12));
        *(void *)(a5 + 16) = v26;
        if (v26)
        {
          uint64_t v27 = *v9;
          if (v27)
          {
            for (unint64_t i = 0; i != v27; ++i)
            {
              float v29 = 0.0;
              if (i < v6) {
                float v29 = (float)v22[i];
              }
              *(float *)(v26 + 4 * i) = v29;
            }
          }
          heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v22);
          return 0;
        }
        uint64_t v14 = 2229280778;
        heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v22);
LABEL_32:
        UNICORN__log_wsola_Error(*(void *)a1, 59000, 0, v17, v18, v19, v20, v21);
        return v14;
      }
      unsigned int v23 = *(_DWORD *)(a1 + 80);
      if (v23 > a3)
      {
        if (*v9 + a3 > v23) {
          unsigned int v6 = v23 - a3;
        }
        uint64_t v24 = (void *)(a1 + 72);
LABEL_22:
        memcpy(v22, (const void *)(*v24 + 2 * a3), 2 * v6);
        goto LABEL_23;
      }
      uint64_t v30 = *(void *)a1;
      uint64_t v31 = 59011;
    }
    UNICORN__log_wsola_Error(v30, v31, 0, v17, v18, v19, v20, v21);
    return 2229280783;
  }
  uint64_t v12 = (void *)heap_Realloc(v11, *(void *)(a5 + 16), 4 * a4);
  *(void *)(a5 + 16) = v12;
  if (v12)
  {
    uint64_t v13 = *v9;
    if (v13) {
      bzero(v12, 4 * v13);
    }
    return 0;
  }
  uint64_t v14 = 2229280778;
  UNICORN__log_wsola_Diag(*(void *)a1, 1, (uint64_t)"ERROR: Out of memory\n");
  heap_Free(*(void **)(*(void *)a1 + 8), 0);
  return v14;
}

uint64_t UNICORN__Psola_SynthSilence(uint64_t *a1, int *a2, int a3, int *a4)
{
  Psola_FlushOlaBufPart_0(a1, a2, *a4);
  int v8 = *a4 + a3;
  *a4 = v8;
  if (*a2 <= v8) {
    Psola_AddToOlaBufAux_0(a1, a2, (uint64_t)v10, 0, 0, v8);
  }
  return 0;
}

void Psola_FlushOlaBufPart_0(uint64_t *a1, _DWORD *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v3 = a3 - *a2;
  if (v3 >= 1)
  {
    int v6 = a2[1];
    int v7 = a2[2];
    if (v3 >= v7) {
      signed int v8 = a2[2];
    }
    else {
      signed int v8 = v3;
    }
    if (v8 >= 12000 - v6) {
      signed int v9 = 12000 - v6;
    }
    else {
      signed int v9 = v8;
    }
    if (v3 >= v7) {
      signed int v10 = v7 - v9;
    }
    else {
      signed int v10 = v3 - v9;
    }
    if (v9 >= 1)
    {
      UNICORN__Wsola__write_audioX(a1, (uint64_t)(a2 + 3), v6, v9);
      bzero((char *)a2 + 2 * a2[1] + 12, 2 * v9);
    }
    if (v10 >= 1)
    {
      UNICORN__Wsola__write_audioX(a1, (uint64_t)(a2 + 3), 0, v10);
      bzero(a2 + 3, 2 * v10);
    }
    int v11 = v3 - v9 - v10;
    if (v11 >= 1)
    {
      uint64_t v16 = 0;
      memset(v15, 0, sizeof(v15));
      do
      {
        if (v11 >= 100) {
          unsigned int v12 = 100;
        }
        else {
          unsigned int v12 = v11;
        }
        UNICORN__Wsola__write_audioX(a1, (uint64_t)v15, 0, v12);
        BOOL v13 = __OFSUB__(v11, v12);
        v11 -= v12;
      }
      while (!((v11 < 0) ^ v13 | (v11 == 0)));
    }
    int v14 = a2[1] + v3;
    *a2 += v3;
    a2[1] = v14 % 12000;
    a2[2] -= v10 + v9;
  }
}

uint64_t UNICORN__Psola_Initialise(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6 = 2229280778;
  uint64_t v7 = heap_Calloc(*(void **)(a2 + 8), 1, 160);
  *a1 = v7;
  if (v7)
  {
    uint64_t v8 = v7;
    *(unsigned char *)(v7 + 136) = 1;
    uint64_t v9 = heap_Alloc(*(void *)(a2 + 8), 24012);
    *(void *)(v8 + 16) = v9;
    if (v9)
    {
      uint64_t v10 = heap_Alloc(*(void *)(a2 + 8), 48000);
      *(void *)(v8 + 24) = v10;
      if (v10)
      {
        uint64_t v11 = heap_Calloc(*(void **)(a2 + 8), 1, 48);
        *(void *)(v8 + 32) = v11;
        if (v11)
        {
          *(void *)(v11 + 8) = 961;
          uint64_t v12 = heap_Alloc(*(void *)(a2 + 8), 1922);
          BOOL v13 = *(uint64_t **)(v8 + 32);
          *BOOL v13 = v12;
          if (v12)
          {
            v13[3] = 961;
            uint64_t v14 = heap_Alloc(*(void *)(a2 + 8), 1922);
            uint64_t v15 = *(void *)(v8 + 32);
            *(void *)(v15 + 16) = v14;
            if (v14)
            {
              *(void *)(v15 + 40) = 961;
              uint64_t v16 = heap_Alloc(*(void *)(a2 + 8), 1922);
              *(void *)(*(void *)(v8 + 32) + 32) = v16;
              if (v16)
              {
                uint64_t v17 = newPeriDesc(a2);
                *(void *)(v8 + 88) = v17;
                if (v17)
                {
                  uint64_t v18 = newPeriDesc(a2);
                  *(void *)(v8 + 96) = v18;
                  if (v18)
                  {
                    bzero(*(void **)(v8 + 16), 0x5DCCuLL);
                    *(void *)(v8 + 112) = 0;
                    uint64_t v19 = *(void *)(v8 + 96);
                    *(_WORD *)uint64_t v19 = 0;
                    *(_DWORD *)(v19 + 2) = 0;
                    uint64_t v20 = *(void *)(v8 + 88);
                    *(_WORD *)uint64_t v20 = 0;
                    *(_DWORD *)(v20 + 2) = 0;
                    uint64_t v21 = Psola_SetUpCrossFading_0(a3, 100, 100, (unsigned __int16 *)v19, (unsigned __int16 *)v20, (_DWORD *)(v8 + 8), (int *)(v8 + 12));
                    if ((v21 & 0x80000000) != 0)
                    {
                      return v21;
                    }
                    else
                    {
                      uint64_t v6 = 0;
                      *(void *)uint64_t v8 = 0x100000000;
                      *(_DWORD *)(v8 + 120) = 0;
                      *(_DWORD *)(v8 + 124) = a3;
                      *(_DWORD *)(v8 + 64) = 0;
                      *(int32x2_t *)(v8 + 140) = vdup_n_s32(0x42200000u);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v6;
}

uint64_t Psola_SetUpCrossFading_0(int a1, int a2, int a3, unsigned __int16 *a4, unsigned __int16 *a5, _DWORD *a6, int *a7)
{
  int v11 = a2 * a1;
  uint64_t v12 = 274877907 * a2 * a1;
  unint64_t v13 = (unint64_t)v12 >> 63;
  uint64_t v14 = v12 >> 38;
  int v15 = a3 * a1 / 1000;
  uint64_t v16 = a4[1] + *a4;
  *a7 = 0;
  if (a4[2])
  {
    unint64_t v43 = (unint64_t)v12 >> 63;
    int v45 = a2 * a1;
    uint64_t v17 = 0;
    int v18 = 0;
    do
    {
      if (v17 >= a5[1] >> 1 || v18 >= v15) {
        break;
      }
      uint64_t v20 = *((void *)a5 + 8);
      int v21 = *(__int16 *)(v20 + 2 * (v17 + *a5));
      UNICORN__writeToPeriVec((uint64_t)(a4 + 28), v16 + v17, *(_WORD *)(v20 + 2 * (v17 + *a5)));
      int v18 = *a7 + v21;
      *a7 = v18;
      ++v17;
    }
    while (v17 < a4[2]);
    int v11 = v45;
    LODWORD(v13) = v43;
  }
  else
  {
    LOWORD(v17) = 0;
  }
  int v46 = v14 + v13;
  a4[2] = v17;
  *a6 = 0;
  LODWORD(v22) = *a5;
  if (*a5)
  {
    int v23 = 0;
    if (a4[1] && v11 >= 1000)
    {
      uint64_t v24 = 2 * v16 - 2;
      int v25 = -1;
      unint64_t v26 = 1;
      do
      {
        int v27 = v25;
        int v28 = *(__int16 *)(*((void *)a4 + 8) + v24);
        UNICORN__writeToPeriVec((uint64_t)(a5 + 28), v22 + v25, *(_WORD *)(*((void *)a4 + 8) + v24));
        int v23 = *a6 + v28;
        *a6 = v23;
        unint64_t v22 = *a5;
        if (v26 >= v22) {
          break;
        }
        int v25 = v27 - 1;
        BOOL v29 = v26++ >= ((unint64_t)a4[1] + 1) >> 1;
        v24 -= 2;
      }
      while (!v29 && v23 < v46);
      int v31 = -v27;
    }
    else
    {
      int v31 = 0;
    }
    unsigned int v32 = v22;
  }
  else
  {
    int v23 = 0;
    int v31 = 0;
    unsigned int v32 = 0;
  }
  unsigned int v33 = v32 - v31;
  if ((int)(v32 - v31) >= 1)
  {
    uint64_t v34 = a5[1];
    uint64_t v35 = a5[2];
    if (v33 < v32 + v34 + v35)
    {
      __int16 v42 = v32 - v31;
      int v44 = v15;
      uint64_t v36 = 0;
      uint64_t v37 = 2 * -v31 + 2 * v32;
      uint64_t v38 = v35 + v34 - -v31;
      do
      {
        UNICORN__writeToPeriVec((uint64_t)(a5 + 4), v36, *(_WORD *)(*((void *)a5 + 2) + v37 + 2 * v36));
        UNICORN__writeToPeriVec((uint64_t)(a5 + 16), v36, *(_WORD *)(*((void *)a5 + 5) + v37 + 2 * v36));
        UNICORN__writeToPeriVec((uint64_t)(a5 + 28), v36, *(_WORD *)(*((void *)a5 + 8) + v37 + 2 * v36));
        ++v36;
      }
      while (v38 != v36);
      LOWORD(v22) = *a5;
      int v23 = *a6;
      LOWORD(v33) = v42;
      int v15 = v44;
    }
    *a5 = v22 - v33;
  }
  int v39 = v46;
  if (v23 < v46) {
    int v39 = v23;
  }
  *a6 = v39;
  int v40 = *a7;
  if (*a7 >= v15) {
    int v40 = v15;
  }
  *a7 = v40;
  if (!((*a6 + v40 < 0) ^ __OFADD__(*a6, v40) | (*a6 + v40 == 0)) || !a4[1]) {
    return 0;
  }
  if (a5[1]) {
    return 2229280783;
  }
  return 0;
}

uint64_t UNICORN__Psola_Synthesis(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 21304;
  uint64_t v5 = *(void *)(a2 + 128);
  uint64_t v6 = *(int *)(a2 + 120);
  uint64_t v7 = *(void **)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(v5 + 40 * (int)v6);
  if (v6) {
    int v9 = *(_DWORD *)(v5 + 40 * (int)(v6 - *(unsigned __int8 *)(a2 + 136)));
  }
  else {
    int v9 = -1;
  }
  uint64_t v10 = v5 + 40 * (int)v6;
  float v11 = (float)*(unsigned int *)(v3 + 64) / 1000.0;
  *(_DWORD *)uint64_t v4 = v8;
  *(int32x2_t *)(v3 + 21312) = vcvt_s32_f32(vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v10 + 4)), v11));
  *(_DWORD *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 20) = 34;
  *(_DWORD *)(v4 + 24) = v8 == -1;
  MsgName = UNICORN__mfs_GetMsgName(v7, v8);
  unint64_t v13 = MsgName;
  double v14 = *(double *)(v3 + 21344);
  if (v14 != 0.0)
  {
    int v15 = (int)((v14 * 0.5 + 100000.0) / v14);
    if (v15)
    {
      if (v15 != 1000)
      {
        uint64_t v16 = v5 + 40 * (int)v6;
        uint64_t v17 = 274877907 * (*(_DWORD *)(v16 + 20) * v15 + 500);
        *(_DWORD *)(v16 + 20) = (v17 >> 38) + ((unint64_t)v17 >> 63);
      }
    }
  }
  int v19 = *(_DWORD *)(v10 + 4);
  int v18 = *(_DWORD *)(v10 + 8);
  uint64_t v20 = *(void *)(v2 + 152);
  uint64_t v21 = *(void *)(v20 + 8 * v6);
  *(void *)(v2 + 80) = v21;
  if (v6) {
    uint64_t v22 = *(void *)(v20 + 8 * ((int)v6 - 1));
  }
  else {
    uint64_t v22 = 0;
  }
  *(void *)(v2 + 72) = v22;
  if (v8 == -1)
  {
    int v168 = v6;
    uint64_t v170 = v5;
    int v172 = v18;
    int v166 = v19;
    long long v167 = MsgName;
    unsigned int v173 = v9;
    uint64_t v174 = v2;
    uint64_t v36 = *(void *)(v2 + 96);
    *(_DWORD *)uint64_t v36 = 0;
    *(_WORD *)(v36 + 4) = 0;
    goto LABEL_16;
  }
  __int16 v23 = *(_WORD *)(v21 + 4);
  if (!v23)
  {
    ++*(unsigned char *)(v2 + 136);
LABEL_50:
    ++*(_DWORD *)(v2 + 120);
    long long v51 = *(uint64_t **)(v3 + 32);
    return Lookup_DeInit(v51);
  }
  unsigned int v173 = v9;
  *(unsigned char *)(v2 + 136) = 1;
  uint64_t v24 = v3;
  double v25 = *(double *)(v3 + 21352) * 0.5 + 100.0;
  unint64_t v26 = (_DWORD *)(v5 + 40 * (int)v6);
  int v27 = v26[3] * (int)v25;
  int v28 = (v27 + 50) / 100;
  int v29 = v26[4] * (int)v25;
  int v30 = (v29 + 50) / 100;
  v26[3] = v28;
  v26[4] = v30;
  uint64_t v31 = v26[5];
  uint64_t v32 = *(unsigned __int16 *)(v21 + 2);
  unsigned __int16 v33 = v32 + v23;
  unsigned __int16 v34 = v32 + v23 - 1;
  if (v32 <= v34)
  {
    int v35 = 0;
    int v40 = *(unsigned __int16 *)(v21 + 2);
    do
      v35 += *(__int16 *)(*(void *)(v21 + 40) + 2 * (unsigned __int16)v40++);
    while ((unsigned __int16)v40 <= v34);
  }
  else
  {
    int v35 = 0;
  }
  int v41 = *(_DWORD *)(v2 + 124);
  if ((v31 & 0x80000000) != 0)
  {
    if (v41 >= 0) {
      int v42 = *(_DWORD *)(v2 + 124);
    }
    else {
      int v42 = v41 + 1;
    }
    int v43 = (1000 * v35 + (v42 >> 1)) / v41;
    if (v43 >= 0) {
      int v44 = (1000 * v35 + (v42 >> 1)) / v41;
    }
    else {
      int v44 = v43 + 1;
    }
    uint64_t v31 = ((-1000 * (int)v31 + (v44 >> 1)) / v43);
  }
  int v195 = v35;
  if (v31) {
    int v195 = ((int)v31 * v35 + 500) / 1000;
  }
  uint64_t v174 = v2;
  int v45 = *(_WORD **)(v2 + 96);
  uint64_t result = 2229280786;
  if (v27 >= 50 && v29 < 50 || v27 <= 49 && v29 > 49) {
    return result;
  }
  unsigned __int16 v155 = v33;
  int v168 = v6;
  uint64_t v170 = v5;
  int v172 = v18;
  int v166 = v19;
  long long v167 = v13;
  *int v45 = 0;
  int v188 = (v27 + 50) / 100;
  int v157 = v41;
  if (v32)
  {
    int v185 = (v29 + 50) / 100;
    unsigned int v190 = v31;
    for (uint64_t i = 0; i != v32; ++i)
    {
      UNICORN__writeToPeriVec((uint64_t)(v45 + 4), i, i);
      UNICORN__writeToPeriVec((uint64_t)(v45 + 16), i, 0);
      UNICORN__writeToPeriVec((uint64_t)(v45 + 28), i, *(_WORD *)(*(void *)(v21 + 40) + 2 * i));
      ++*v45;
    }
    int v28 = v188;
    uint64_t v31 = v190;
    int v30 = v185;
  }
  else
  {
    LODWORD(i) = 0;
  }
  v45[1] = 0;
  if (v32 <= v34)
  {
    int v73 = 0;
    unsigned int v74 = 0;
    unsigned int v75 = 0;
    int v164 = v30 - v28;
    if (v35 >= 0) {
      int v76 = v35;
    }
    else {
      int v76 = v35 + 1;
    }
    int v154 = v76 >> 1;
    uint64_t v181 = (uint64_t)(v45 + 28);
    uint64_t v183 = (uint64_t)(v45 + 4);
    uint64_t v179 = (uint64_t)(v45 + 16);
    uint64_t v156 = v24;
    uint64_t v193 = v21;
    unsigned __int16 v177 = v34;
    float v175 = v45;
    while (1)
    {
      uint64_t v77 = (unsigned __int16)v32;
      uint64_t v78 = *(unsigned __int16 *)(*(void *)(v21 + 40) + 2 * (unsigned __int16)v32);
      if (v31) {
        v75 += ((int)v31 * (int)v78 + 500) / 1000;
      }
      else {
        unsigned int v75 = v74 + v78;
      }
      int v79 = i <= 0x2710 ? 10000 : i;
      int v191 = v79;
      BOOL v80 = (unsigned __int16)v32 == v34 && v74 == 0;
      BOOL v81 = v80;
      BOOL v82 = v74 + (v78 >> 1) > v75 && !v81;
      int v158 = v73;
      if (!v82) {
        break;
      }
LABEL_130:
      int v73 = v158 + v78;
      LOWORD(v32) = v77 + 1;
      uint64_t v24 = v156;
      uint64_t v21 = v193;
      if ((unsigned __int16)(v77 + 1) > v34) {
        goto LABEL_69;
      }
    }
    __int16 v83 = 0;
    unsigned int v186 = v78 >> 1;
    int v160 = v154 + v73 * v164;
    while (1)
    {
      int v84 = v28;
      if (v31)
      {
        uint64_t v85 = v193;
        if (!v195) {
          goto LABEL_103;
        }
        int v86 = (int)(v195 / 2 + v74 * v164) / v195;
      }
      else
      {
        uint64_t v85 = v193;
        if (!v35) {
          goto LABEL_103;
        }
        int v86 = v160 / v35;
      }
      int v84 = v86 + v28;
LABEL_103:
      unsigned int v87 = v78;
      if (*(_WORD *)(*(void *)(v85 + 64) + 2 * v77) == 1)
      {
        if (v84 < 1)
        {
          unsigned int v87 = v78;
          if ((v84 & 0x80000000) == 0) {
            goto LABEL_108;
          }
          int v84 = -v84;
          int v88 = v84 >> 1;
          unsigned int v89 = v157;
        }
        else
        {
          int v88 = 1000 * *(__int16 *)(*(void *)(v85 + 40) + 2 * v77);
          unsigned int v89 = v84 >> 1;
        }
        unsigned int v87 = (int)(v88 + v89) / v84;
      }
LABEL_108:
      if (v191 == i) {
        return 2229280777;
      }
      if (v87 <= 0x10) {
        unsigned int v90 = 16;
      }
      else {
        unsigned int v90 = v87;
      }
      if (v90 >= 0x3C1) {
        int v91 = 961;
      }
      else {
        int v91 = v90;
      }
      uint64_t v92 = v85;
      uint64_t v93 = v31;
      uint64_t v94 = v77;
      uint64_t v95 = v78;
      UNICORN__writeToPeriVec(v183, i, v77);
      UNICORN__writeToPeriVec(v181, i, v91);
      if (*(_WORD *)(*(void *)(v92 + 64) + 2 * v94)) {
        __int16 v96 = 0;
      }
      else {
        __int16 v96 = v83;
      }
      UNICORN__writeToPeriVec(v179, i, v96);
      uint64_t v78 = v95;
      uint64_t v77 = v94;
      uint64_t v31 = v93;
      int v45 = v175;
      unsigned __int16 v34 = v177;
      int v28 = v188;
      __int16 v83 = 1 - v83;
      v74 += v91;
      if (!v31) {
        unsigned int v75 = v74;
      }
      LODWORD(i) = i + 1;
      ++v175[1];
      BOOL v98 = v77 == v177 && v74 == 0;
      if (v74 + v186 > v75 && !v98) {
        goto LABEL_130;
      }
    }
  }
LABEL_69:
  unsigned __int16 v69 = *(_WORD *)(v21 + 4) + *(_WORD *)(v21 + 2) + *(_WORD *)(v21 + 6);
  v45[2] = 0;
  uint64_t v3 = v24;
  if (v155 >= v69)
  {
LABEL_16:
    uint64_t v2 = v174;
    int v37 = *(_DWORD *)(v174 + 124);
    int v38 = *(_DWORD *)(v170 + 40 * v168 + 24);
    if (v168 < 1) {
      int v39 = 100;
    }
    else {
      int v39 = *(_DWORD *)(v170 + 40 * (v168 - 1) + 28);
    }
    uint64_t v197 = 0;
    uint64_t result = Psola_SetUpCrossFading_0(v37, v38, v39, *(unsigned __int16 **)(v174 + 88), *(unsigned __int16 **)(v174 + 96), (_DWORD *)&v197 + 1, (int *)&v197);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (!v168) {
      goto LABEL_49;
    }
    if (v173 == -1)
    {
      unsigned int v48 = *(_DWORD *)(v174 + 124) * *(unsigned __int16 *)(v174 + 106) / 0x3E8;
      UNICORN__log_wsola_Diag(*(void *)v3, 3, (uint64_t)"Parametric silence for s32uint64_t i = %d\n");
    }
    else
    {
      UNICORN__log_wsola_Diag(*(void *)v3, 3, (uint64_t)"Non silence unit %d for s32uint64_t i = %d\n");
      if (**(_WORD **)(v174 + 72)) {
        unsigned int v48 = -1;
      }
      else {
        unsigned int v48 = (int)((double)(*(_DWORD *)(v174 + 124) * *(unsigned __int16 *)(v174 + 106)) / 1000.0);
      }
    }
    UNICORN__log_wsola_Diag(*(void *)v3, 3, (uint64_t)"SynthSilence debugging, s32i=%d, s32SilLen %d\n");
    UNICORN__log_wsola_Diag(*(void *)v3, 3, (uint64_t)"SynthSilence - next unit is going to be %d\n");
    if ((v48 & 0x80000000) == 0)
    {
      UNICORN__Psola_SynthSilence((uint64_t *)v3, *(int **)(v174 + 16), (int)(*(_DWORD *)(v170 + 40 * v168 - 20) * v48 + 500) / 1000, (int *)v174);
LABEL_49:
      UNICORN__log_wsola_Diag(*(void *)v3, 3, (uint64_t)"BANANA: Synthesis of unit %d has just been completed\n\n");
      *(_WORD *)(v2 + 104) = v166;
      *(_WORD *)(v2 + 106) = v172;
      *(_DWORD *)(v2 + 108) = 0;
      *(void *)(v2 + 112) = v167;
      *(int8x16_t *)(v2 + 88) = vextq_s8(*(int8x16_t *)(v2 + 88), *(int8x16_t *)(v2 + 88), 8uLL);
      int v50 = v197;
      *(_DWORD *)(v2 + 8) = HIDWORD(v197);
      *(_DWORD *)(v2 + 12) = v50;
      *(_DWORD *)(v2 + 4) = 3 - *(_DWORD *)(v2 + 4);
      goto LABEL_50;
    }
    long long v52 = *(unsigned __int16 **)(v174 + 72);
    long long v53 = *(_WORD **)(v174 + 24);
    v199[0] = 0;
    int v198 = 0;
    long long v54 = (__int16 *)*((void *)v52 + 2);
    int v55 = *v54;
    if (v55 <= 0) {
      unsigned int v56 = -v55;
    }
    else {
      unsigned int v56 = 0;
    }
    uint64_t v57 = (unsigned __int16)(v52[1] + v52[2] + v52[3] - 1);
    int v58 = *(__int16 *)(*((void *)v52 + 5) + 2 * v57) + v54[v57];
    int v59 = *v52;
    int v60 = (v58 - v59) & ~((v58 - v59) >> 31);
    uint64_t v61 = *(unsigned int *)(v3 + 48);
    if (v173 == -1 || !v61)
    {
      if ((v61 & 0x80000000) == 0) {
        goto LABEL_134;
      }
    }
    else
    {
      uint64_t v62 = 0;
      uint64_t v63 = *(void *)(v3 + 40);
      long long v64 = (unsigned int *)(v63 + 16);
      while (1)
      {
        unsigned int v65 = *v64;
        v64 += 6;
        if (v65 > v173) {
          break;
        }
        if (v61 == ++v62)
        {
          LODWORD(v62) = *(_DWORD *)(v3 + 48);
          break;
        }
      }
      if ((int)v61 >= (int)v62 && v3 && (v62 & 0x80000000) == 0)
      {
        if (v62)
        {
          uint64_t v66 = v63 + 24 * (v62 - 1);
          uint64_t v67 = (void *)(v66 + 8);
          int v68 = *(_DWORD *)(v66 + 16);
LABEL_135:
          *(void *)(v3 + 32) = *v67;
          *(_DWORD *)(v3 + 52) = v68;
          int v59 = *v52;
          goto LABEL_137;
        }
LABEL_134:
        int v68 = 0;
        uint64_t v67 = (void *)(v3 + 24);
        goto LABEL_135;
      }
    }
    int v68 = *(_DWORD *)(v3 + 52);
LABEL_137:
    uint64_t result = UNICORN__Psola_GetDecodedUnitData(v3, v49, v174 + 104, v173 - v68, v56, v59, v60, 0x5DC0u, v53, (int *)v199 + 1, &v198, v199);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t result = 2229280777;
    int v99 = HIDWORD(v199[0]);
    if (HIDWORD(v199[0]) + **((__int16 **)v52 + 2) < 0
      || HIDWORD(v199[0]) + v58 > v198 + HIDWORD(v199[0]) + LODWORD(v199[0]))
    {
      return result;
    }
    UNICORN__log_wsola_Diag(*(void *)v3, 3, (uint64_t)"About to call synthesis for unitID %d\n");
    __int16 v100 = *(unsigned __int16 **)(v174 + 88);
    uint64_t v101 = *v100;
    int v102 = v100[1];
    uint64_t v103 = *((void *)v100 + 8);
    int v104 = 0;
    if (*v100)
    {
      int v105 = *v100;
      int v106 = (__int16 *)*((void *)v100 + 8);
      do
      {
        int v107 = *v106++;
        v104 += v107;
        --v105;
      }
      while (v105);
    }
    int v108 = v102 + v101;
    int v109 = *(_DWORD *)(v174 + 8);
    int v110 = *(_DWORD *)(v174 + 12);
    int v111 = 0;
    if (v100[1])
    {
      int v112 = (__int16 *)(v103 + 2 * v101);
      do
      {
        int v113 = *v112++;
        v111 += v113;
        --v102;
      }
      while (v102);
    }
    uint64_t v114 = v108 + v100[2];
    int v115 = HIDWORD(v197);
    int v116 = *(_DWORD *)v174;
    int v182 = v110 + v109;
    if ((v182 < 0) ^ __OFADD__(v110, v109) | (v182 == 0))
    {
      unsigned int v117 = *(unsigned __int16 *)(v103 + 2 * *v100);
      int v182 = (int)((v117 + (v117 >> 15)) << 16) >> 17;
      int v178 = *(_DWORD *)v174;
    }
    else
    {
      int v178 = v116 - v109;
    }
    int v180 = v197 + HIDWORD(v197);
    if (((int)v197 + HIDWORD(v197) < 0) ^ __OFADD__(v197, HIDWORD(v197)) | (v197 + HIDWORD(v197) == 0))
    {
      unsigned int v118 = *(unsigned __int16 *)(v103 + 2 * (v108 - 1));
      int v115 = (__int16)(v118 + (v118 >> 15)) >> 1;
      int v180 = v115;
    }
    int v119 = v116 + v111;
    if (v114)
    {
      int v176 = v99;
      uint64_t v120 = 0;
      int v121 = 0;
      uint64_t v122 = *(void *)(v174 + 24);
      uint64_t v123 = *(void *)(v174 + 32);
      uint64_t v169 = (int *)(v174 + 64);
      int8x16_t v184 = *(int **)(v174 + 16);
      int v163 = v119 - v115;
      uint64_t v189 = *(void *)(v174 + 72);
      int v196 = v116 - v104;
      uint64_t v159 = (v114 - 1);
      float32x4_t v161 = (uint64_t *)(v123 + 16);
      uint64_t v162 = (v114 + 1);
      uint64_t v187 = *(unsigned __int16 **)(v174 + 88);
      uint64_t v171 = v114;
      uint64_t v165 = v122;
      do
      {
        uint64_t v194 = v120;
        int v192 = v121;
        if (v120)
        {
          if (v120 == v114)
          {
            uint64_t v124 = *(__int16 *)(*((void *)v100 + 2) + 2 * v159);
            LODWORD(v125) = *(__int16 *)(*(void *)(v189 + 40) + 2 * v124);
            uint64_t result = Psola_CopyDataPart_0(*(uint64_t **)(*(void *)v3 + 8), v122, v176 + *(__int16 *)(*(void *)(v189 + 16) + 2 * v124), v125, (uint64_t *)v123);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            int8x16_t v126 = (uint64_t *)v3;
            LODWORD(v127) = 0;
            int v128 = 0;
            uint64_t v129 = (__int16 *)(*((void *)v100 + 8) + 2 * v159);
            uint64_t v130 = v167;
            int v131 = v166;
            int v132 = v172;
          }
          else
          {
            int v134 = *(unsigned __int16 *)(*((void *)v100 + 5) + 2 * v120);
            uint64_t v135 = *(__int16 *)(*((void *)v100 + 2) + 2 * v120);
            uint64_t v136 = v135 - 1;
            uint64_t v137 = *(void *)(v189 + 40);
            uint64_t v138 = *(void *)(v189 + 16);
            if (v134)
            {
              unint64_t v125 = *(__int16 *)(v137 + 2 * v135);
              unint64_t v127 = *(__int16 *)(v137 + 2 * v136);
              int v139 = *(__int16 *)(v138 + 2 * v135);
              uint64_t v140 = (uint64_t *)v3;
              uint64_t result = Psola_ReallocIfNeeded_0(*(uint64_t **)(*(void *)v3 + 8), (uint64_t *)v123, v125);
              if ((int)v125 >= 1 && (result & 0x80000000) == 0)
              {
                uint64_t v141 = (__int16 *)(v122 + 2 * (v176 + v139));
                uint64_t v142 = (_WORD *)(*(void *)v123 + 2 * v125 - 2);
                int v143 = v125;
                do
                {
                  __int16 v144 = *v141++;
                  *v142-- = v144;
                  --v143;
                }
                while (v143);
              }
              int v131 = v166;
              if ((result & 0x80000000) != 0) {
                return result;
              }
              int v145 = *(__int16 *)(*(void *)(v189 + 16) + 2 * v136);
              uint64_t result = Psola_ReallocIfNeeded_0(*(uint64_t **)(*(void *)v3 + 8), v161, v127);
              if ((int)v127 >= 1 && (result & 0x80000000) == 0)
              {
                uint64_t v146 = (__int16 *)(v122 + 2 * (v176 + v145));
                float v147 = (_WORD *)(*v161 + 2 * v127 - 2);
                int v148 = v127;
                do
                {
                  __int16 v149 = *v146++;
                  *v147-- = v149;
                  --v148;
                }
                while (v148);
              }
              uint64_t v130 = v167;
            }
            else
            {
              LODWORD(v125) = *(__int16 *)(v137 + 2 * v136);
              LODWORD(v127) = *(__int16 *)(v137 + 2 * v135);
              uint64_t result = Psola_CopyDataPart_0(*(uint64_t **)(*(void *)v3 + 8), v122, v176 + *(__int16 *)(v138 + 2 * v136), v125, (uint64_t *)v123);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t v140 = (uint64_t *)v3;
              uint64_t result = Psola_CopyDataPart_0(*(uint64_t **)(*(void *)v3 + 8), v122, v176 + *(__int16 *)(*(void *)(v189 + 16) + 2 * v135), v127, v161);
              uint64_t v130 = v167;
              int v131 = v166;
            }
            int v132 = v172;
            if ((result & 0x80000000) != 0) {
              return result;
            }
            int8x16_t v126 = v140;
            uint64_t v150 = (__int16 *)(*((void *)v187 + 8) + 2 * v194);
            int v151 = *v150;
            uint64_t v129 = v150 - 1;
            int v128 = v151;
          }
          int v152 = *v129;
          long long v167 = v130;
          int v166 = v131;
          int v172 = v132;
          if ((int)v125 > v152)
          {
            memmove(*(void **)v123, (const void *)(*(void *)v123 + 2 * ((int)v125 - *v129)), 2 * *v129);
            LODWORD(v125) = v152;
          }
        }
        else
        {
          uint64_t v133 = **((__int16 **)v100 + 2);
          LODWORD(v127) = *(__int16 *)(*(void *)(v189 + 40) + 2 * v133);
          uint64_t result = Psola_CopyDataPart_0(*(uint64_t **)(*(void *)v3 + 8), v122, v176 + *(__int16 *)(*(void *)(v189 + 16) + 2 * v133), v127, v161);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          int8x16_t v126 = (uint64_t *)v3;
          LODWORD(v125) = 0;
          int v128 = **((__int16 **)v100 + 8);
        }
        if ((int)v127 >= v128) {
          LODWORD(v127) = v128;
        }
        Psola_ApplyHanning_0(*(__int16 **)(v123 + 32), v169, *(__int16 **)v123, v125, 1);
        Psola_ApplyHanning_0(*(__int16 **)(v123 + 32), v169, *(__int16 **)(v123 + 16), v127, 0);
        Psola_ApplyFadingPart(*(__int16 **)v123, v125, v196 - v125, v178, v182, 1);
        Psola_ApplyFadingPart(*(__int16 **)(v123 + 16), v127, v196, v178, v182, 1);
        Psola_ApplyFadingPart(*(__int16 **)v123, v125, v196 - v125, v163, v180, 0);
        Psola_ApplyFadingPart(*(__int16 **)(v123 + 16), v127, v196, v163, v180, 0);
        Psola_AddToOlaBuf_0(v126, v184, *(void *)v123, v125, v196 - v125);
        Psola_AddToOlaBuf_0(v126, v184, *(void *)(v123 + 16), v127, v196);
        int v121 = 1;
        v196 += v128;
        uint64_t v114 = v171;
        uint64_t v122 = v165;
        if (!v192)
        {
          if (v196 >= *(_DWORD *)v174 + 961 || v194 == v171)
          {
            Psola_FlushOlaBufPart_0(v126, v184, *(_DWORD *)v174);
            int v121 = 1;
          }
          else
          {
            int v121 = 0;
          }
        }
        uint64_t v120 = v194 + 1;
        uint64_t v3 = (uint64_t)v126;
        __int16 v100 = v187;
      }
      while (v194 + 1 != v162);
      uint64_t v2 = v174;
      int v119 = *(_DWORD *)v174 + v111;
    }
    *(_DWORD *)uint64_t v2 = v119;
    goto LABEL_49;
  }
  uint64_t v70 = v155;
  uint64_t v71 = v69;
  if (i <= 0x2710) {
    int v72 = 10000;
  }
  else {
    int v72 = i;
  }
  while (v72 != i)
  {
    UNICORN__writeToPeriVec((uint64_t)(v45 + 4), i, v70);
    UNICORN__writeToPeriVec((uint64_t)(v45 + 16), i, 0);
    UNICORN__writeToPeriVec((uint64_t)(v45 + 28), i, *(_WORD *)(*(void *)(v21 + 40) + 2 * v70));
    LODWORD(i) = i + 1;
    ++v45[2];
    if (v71 == ++v70) {
      goto LABEL_16;
    }
  }
  return 2229280777;
}

uint64_t UNICORN__concat_Dur2Sample(unsigned int a1, int a2)
{
  return (int)(float)((float)((float)a1 / 1000.0) * (float)a2);
}

uint64_t UNICORN__Psola_OutputFinalSilence(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 128) + 40 * *(int *)(a2 + 120);
  int v5 = *(_DWORD *)(v4 - 20) * (int)((double)(*(_DWORD *)(a2 + 124) * *(_DWORD *)(v4 - 32)) / 1000.0);
  if (v5 >= 500) {
    UNICORN__Psola_SynthSilence(a1, *(int **)(a2 + 16), (v5 + 500) / 0x3E8u, (int *)a2);
  }
  Psola_FlushOlaBufPart_0(a1, *(_DWORD **)(a2 + 16), *(_DWORD *)(*(void *)(a2 + 16) + 8) + **(_DWORD **)(a2 + 16));
  return 0;
}

void *UNICORN__Psola_Deinitialise(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[2];
  if (v4) {
    heap_Free(*(void **)(a1 + 8), v4);
  }
  uint64_t v5 = a2[3];
  if (v5) {
    heap_Free(*(void **)(a1 + 8), v5);
  }
  uint64_t v6 = (uint64_t *)a2[4];
  if (v6)
  {
    if (*v6)
    {
      heap_Free(*(void **)(a1 + 8), *v6);
      uint64_t v6 = (uint64_t *)a2[4];
    }
    if (v6[2])
    {
      heap_Free(*(void **)(a1 + 8), v6[2]);
      uint64_t v6 = (uint64_t *)a2[4];
    }
    if (v6[4])
    {
      heap_Free(*(void **)(a1 + 8), v6[4]);
      uint64_t v6 = (uint64_t *)a2[4];
    }
    heap_Free(*(void **)(a1 + 8), (uint64_t)v6);
  }
  uint64_t v7 = (uint64_t *)a2[11];
  if (v7) {
    freePeriDesc(a1, v7);
  }
  unsigned int v8 = (uint64_t *)a2[12];
  if (v8) {
    freePeriDesc(a1, v8);
  }
  uint64_t v9 = a2[16];
  if (v9)
  {
    heap_Free(*(void **)(a1 + 8), v9);
    a2[16] = 0;
  }
  uint64_t v10 = *(void **)(a1 + 8);
  return heap_Free(v10, (uint64_t)a2);
}

uint64_t Psola_AssignPeriRanges_0(unsigned __int16 *a1)
{
  unsigned __int16 v1 = a1[3];
  uint64_t v2 = (unsigned __int16)(a1[2] + a1[1] + v1);
  if (a1[2] + a1[1] + v1)
  {
    uint64_t v4 = 0;
    a1[1] = 0;
    uint64_t v5 = (__int16 *)*((void *)a1 + 2);
    while (*v5 < 0)
    {
      a1[1] = ++v4;
      ++v5;
      if (v2 == v4)
      {
        a1[2] = 0;
LABEL_16:
        a1[3] = v2 - v4;
        return 0;
      }
    }
    a1[2] = 0;
    if (v4 >= v2) {
      goto LABEL_16;
    }
    __int16 v6 = 0;
    uint64_t v7 = v2 - v4;
    int v8 = *a1;
    do
    {
      int v9 = *v5++;
      if (v9 >= v8) {
        break;
      }
      a1[2] = ++v6;
      --v7;
    }
    while (v7);
    a1[3] = v2 - (v4 + v6);
    if (!(_WORD)v4 && v6)
    {
      a1[1] = 1;
      if (v6 == 1)
      {
        uint64_t v10 = (v2 - 1);
        if (v2 != 1)
        {
          do
          {
            UNICORN__writeToPeriVec((uint64_t)(a1 + 4), v2, *(_WORD *)(*((void *)a1 + 2) + 2 * v10));
            UNICORN__writeToPeriVec((uint64_t)(a1 + 16), v2, *(_WORD *)(*((void *)a1 + 5) + 2 * v10));
            UNICORN__writeToPeriVec((uint64_t)(a1 + 28), v2, *(_WORD *)(*((void *)a1 + 8) + 2 * v10));
            LODWORD(v2) = v2 - 1;
            --v10;
          }
          while (v10);
        }
        UNICORN__writeToPeriVec((uint64_t)(a1 + 16), 1u, **((__int16 **)a1 + 5) / 2);
        UNICORN__writeToPeriVec((uint64_t)(a1 + 16), 0, **((_WORD **)a1 + 5) - *(_WORD *)(*((void *)a1 + 5) + 2));
        UNICORN__writeToPeriVec((uint64_t)(a1 + 4), 1u, **((_WORD **)a1 + 5) + **((_WORD **)a1 + 2));
        uint64_t v11 = (uint64_t)(a1 + 28);
        UNICORN__writeToPeriVec(v11, 0, 0);
        UNICORN__writeToPeriVec(v11, 1u, 0);
      }
      else
      {
        a1[2] = v6 - 1;
      }
    }
  }
  return 0;
}

uint64_t UNICORN__Wsola__write_audioX(uint64_t *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8 = a4;
  uint64_t v9 = heap_Calloc(*(void **)(*a1 + 8), a4, 2);
  if (v9)
  {
    uint64_t v15 = v9;
    if (a4)
    {
      uint64_t v16 = 0;
      do
      {
        *(_WORD *)(v9 + 2 * v16) = *(_WORD *)(a2 + 2 * (a3 + v16));
        ++v16;
      }
      while (v8 != v16);
      uint64_t v17 = (void (*)(uint64_t, uint64_t, uint64_t))a1[7];
      if (v17) {
        v17(a1[2], v9, v8);
      }
    }
    heap_Free(*(void **)(*a1 + 8), v15);
    return 0;
  }
  else
  {
    UNICORN__log_wsola_Error(*a1, 59000, 0, v10, v11, v12, v13, v14);
    return 2229280778;
  }
}

void UNICORN__Wsola__windowinit(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  float v3 = (float)v2;
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(_DWORD *)(a1 + 21192);
  if ((v5 - 1) >= 2)
  {
    if (!v5 && v2)
    {
      uint64_t v13 = 0;
      float v14 = 1.0;
      float v15 = 0.0;
      float v16 = 1.0 / v3;
      do
      {
        *(float *)(v4 + 4 * v2 + v13) = v14;
        *(float *)(v4 + v13) = v15;
        float v14 = v14 - v16;
        float v15 = v16 + v15;
        v13 += 4;
      }
      while (4 * v2 != v13);
    }
  }
  else if (v2)
  {
    uint64_t v6 = 0;
    double v7 = v3 + v3;
    uint64_t v8 = v4 + 4 * v2;
    do
    {
      float v9 = cos(((float)v6 + (float)v6) * 3.14159265 / v7);
      float v10 = v9 * -0.5 + 0.5;
      *(float *)(v4 + 4 * v6) = v10;
      float v11 = cos(((float)v2 + (float)v2) * 3.14159265 / v7);
      float v12 = v11 * -0.5 + 0.5;
      *(float *)(v8 + 4 * v6++) = v12;
      --v2;
    }
    while (v2);
  }
}

uint64_t UNICORN__concat_initW(uint64_t a1)
{
  *(_DWORD *)(a1 + 104) = 0;
  uint64_t v2 = a1 + 104;
  int v3 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 21296) = *(_DWORD *)(a1 + 21332) != 0;
  if (v3 > 15999)
  {
    if (v3 != 16000)
    {
      if (v3 == 22050)
      {
        char v5 = 4;
        unsigned int v6 = 440;
        goto LABEL_13;
      }
      if (v3 != 16036)
      {
LABEL_18:
        UNICORN__log_wsola_Diag(*(void *)a1, 1, (uint64_t)"ERROR: Unsupported sampling rate = %d\n");
        return 2229280775;
      }
    }
LABEL_11:
    unsigned int v6 = (int)((float)v3 / 1000.0 * 20.0) & 0xFFFFFFFC;
    char v5 = 1;
    goto LABEL_13;
  }
  if (v3 == 8000 || v3 == 8018) {
    goto LABEL_11;
  }
  if (v3 != 11025) {
    goto LABEL_18;
  }
  char v5 = 2;
  unsigned int v6 = 220;
LABEL_13:
  *(unsigned char *)(a1 + 128) = v5;
  *(_DWORD *)(a1 + 112) = v6;
  *(_DWORD *)(a1 + 116) = v6 >> 1;
  *(_DWORD *)(a1 + 120) = 2 * v6;
  *(_DWORD *)(a1 + 124) = 3 * v6;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 140) = 0;
  *(void *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 148) = 0;
  if (!*(void *)(a1 + 152))
  {
    uint64_t v7 = UNICORN__Vector__Create(*(void **)(*(void *)a1 + 8), 3 * v6);
    *(void *)(a1 + 152) = v7;
    if (!v7)
    {
      uint64_t v9 = 2229280778;
      uint64_t v10 = *(void *)a1;
      float v11 = "ERROR: Out of memory when allocating oladbuf\n";
LABEL_21:
      UNICORN__log_wsola_Diag(v10, 1, (uint64_t)v11);
      return v9;
    }
  }
  uint64_t v8 = *(void *)(a1 + 160);
  if (!v8)
  {
    uint64_t v8 = UNICORN__Vector__Create(*(void **)(*(void *)a1 + 8), *(_DWORD *)(a1 + 120));
    *(void *)(a1 + 160) = v8;
    if (!v8)
    {
      uint64_t v9 = 2229280778;
      uint64_t v10 = *(void *)a1;
      float v11 = "ERROR: Out of memory when allocating wsolaWindow\n";
      goto LABEL_21;
    }
  }
  UNICORN__Wsola__windowinit(v2, v8);
  return 0;
}

uint64_t UNICORN__concat_final_deinitW(uint64_t *a1)
{
  return 0;
}

uint64_t concat_enableAddon(uint64_t a1, int a2)
{
  uint64_t v2 = 2229280770;
  if (a1 && a2 >= -1 && *(_DWORD *)(a1 + 48) > a2)
  {
    if (a2 == -1)
    {
      int v5 = 0;
      uint64_t v4 = (void *)(a1 + 24);
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 40) + 24 * a2;
      uint64_t v4 = (void *)(v3 + 8);
      int v5 = *(_DWORD *)(v3 + 16);
    }
    uint64_t v2 = 0;
    *(void *)(a1 + 32) = *v4;
    *(_DWORD *)(a1 + 52) = v5;
  }
  return v2;
}

uint64_t concat_UID2AddonId(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 != -1 && a2)
  {
    unint64_t v5 = 0;
    unsigned int v6 = (unsigned int *)(a1 + 16);
    do
    {
      unsigned int v7 = *v6;
      v6 += 6;
      if (v7 > a3) {
        break;
      }
      ++v5;
    }
    while (v5 < a2);
    return (v5 - 1);
  }
  return result;
}

uint64_t UNICORN__concat_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, int a10, int a11)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(_DWORD *)(a9 + 21332) = a11 != 0;
  *(_DWORD *)(a9 + 100) = a10;
  *(void *)(a9 + 56) = a5;
  *(void *)(a9 + 16) = a6;
  *(void *)(a9 + 72) = a7;
  *(_DWORD *)(a9 + 80) = a8;
  return 0;
}

void Psola_AddToOlaBuf_0(uint64_t *a1, int *a2, uint64_t a3, int a4, int a5)
{
  if (*a2 <= a5)
  {
    int v5 = a5;
    int v6 = a4;
    if (a4 < 1)
    {
      Psola_AddToOlaBufAux_0(a1, a2, (uint64_t)v13, 0, 0, a5);
    }
    else
    {
      int v10 = 0;
      do
      {
        if (v6 >= 12000) {
          int v11 = 12000;
        }
        else {
          int v11 = v6;
        }
        Psola_AddToOlaBufAux_0(a1, a2, a3, v10, v11, v5);
        v10 += v11;
        v5 += v11;
        BOOL v12 = __OFSUB__(v6, v11);
        v6 -= v11;
      }
      while (!((v6 < 0) ^ v12 | (v6 == 0)));
    }
  }
}

void Psola_AddToOlaBufAux_0(uint64_t *a1, int *a2, uint64_t a3, int a4, int a5, int a6)
{
  int v11 = a6 + a5;
  int v12 = a6 + a5 - 12000;
  int v13 = *a2;
  if (v12 > *a2)
  {
    Psola_FlushOlaBufPart_0(a1, a2, v12);
    int v13 = *a2;
  }
  int v14 = (a6 - v13 + a2[1]) % 12000;
  if (12000 - v14 >= a5) {
    int v15 = a5;
  }
  else {
    int v15 = 12000 - v14;
  }
  int v16 = a5 - v15;
  if (v15 >= 1)
  {
    uint64_t v17 = (_WORD *)a2 + v14 + 6;
    int v18 = (__int16 *)(a3 + 2 * a4);
    int v19 = v15;
    do
    {
      __int16 v20 = *v18++;
      *v17++ += v20;
      --v19;
    }
    while (v19);
  }
  if (v16 >= 1)
  {
    int v21 = v15 + a4;
    uint64_t v22 = a2 + 3;
    __int16 v23 = (__int16 *)(a3 + 2 * v21);
    do
    {
      __int16 v24 = *v23++;
      *v22++ += v24;
      --v16;
    }
    while (v16);
  }
  int v25 = v11 - v13;
  if (a2[2] > v25) {
    int v25 = a2[2];
  }
  a2[2] = v25;
}

uint64_t Psola_CopyDataPart_0(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v8 = a4;
  uint64_t v9 = Psola_ReallocIfNeeded_0(a1, a5, a4);
  if ((v9 & 0x80000000) == 0) {
    memcpy((void *)*a5, (const void *)(a2 + 2 * a3), 2 * v8);
  }
  return v9;
}

__int16 *Psola_ApplyHanning_0(__int16 *result, int *a2, __int16 *a3, int a4, int a5)
{
  if (a4)
  {
    if (*a2 != a4)
    {
      if (a4 >= 1)
      {
        uint64_t v5 = 0;
        int v6 = result;
        do
        {
          *v6++ = HanningTab_0[(int)v5 / a4]
                + (HanningTab_0[(int)v5 / a4 + 1] - HanningTab_0[(int)v5 / a4]) * ((int)v5 % a4) / a4;
          v5 += 200;
        }
        while (200 * a4 != v5);
      }
      *a2 = a4;
    }
    if (a5)
    {
      if (a4 >= 1)
      {
        uint64_t v7 = a4;
        do
        {
          int v8 = *result++;
          *a3 = v8 * *a3 / 0x8000;
          ++a3;
          --v7;
        }
        while (v7);
      }
    }
    else if (a4 >= 1)
    {
      uint64_t v9 = a4;
      do
      {
        int v10 = *result++;
        *a3 = (0x7FFF - v10) * *a3 / 0x8000;
        ++a3;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t Psola_ReallocIfNeeded_0(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if (a2[1] >= a3) {
    return 0;
  }
  unint64_t v4 = (a3 & 0xFFFFFFFFFFFFFE00) + 512;
  uint64_t v5 = heap_Realloc(a1, *a2, 2 * v4);
  if (!v5) {
    return 2229280778;
  }
  uint64_t v6 = v5;
  uint64_t result = 0;
  *a2 = v6;
  a2[1] = v4;
  return result;
}

uint64_t UNICORN__Vector__Create(void *a1, unsigned int a2)
{
  uint64_t v4 = heap_Calloc(a1, 1, 24);
  uint64_t v5 = v4;
  if (v4)
  {
    *(void *)uint64_t v4 = a1;
    *(_DWORD *)(v4 + 8) = a2;
    *(_DWORD *)(v4 + 12) = 0;
    uint64_t v6 = (void *)heap_Calloc(a1, a2, 4);
    *(void *)(v5 + 16) = v6;
    if (v6)
    {
      uint64_t v7 = *(unsigned int *)(v5 + 8);
      if (v7) {
        bzero(v6, 4 * v7);
      }
    }
    else
    {
      heap_Free(a1, v5);
      return 0;
    }
  }
  return v5;
}

uint64_t *UNICORN__Window__Remove(uint64_t *result)
{
  if (result)
  {
    unsigned __int16 v1 = result;
    if (*result)
    {
      heap_Free(*(void **)*result, *(void *)(*result + 16));
      *(void *)(*v1 + 16) = 0;
      uint64_t result = heap_Free(*(void **)*v1, *v1);
      *unsigned __int16 v1 = 0;
    }
  }
  return result;
}

uint64_t UNICORN__log_wsola_Diag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a3 - 1;
  do
    int v4 = *(unsigned __int8 *)++v3;
  while (v4 == 10);
  return log_VOutText(*(void *)(a1 + 32), (uint64_t)"SYNTH_BET5", (a2 + 2), 0, v3);
}

uint64_t UNICORN__log_wsola_Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SYNTH_BET5", a2, 0, a5, a6, a7, a8, v9);
}

uint64_t sonicSetSpeed(uint64_t result, float a2)
{
  *(float *)(result + 32) = a2;
  return result;
}

uint64_t sonicSetPitch(uint64_t result, float a2)
{
  *(float *)(result + 40) = a2;
  return result;
}

uint64_t sonicSetRate(uint64_t result, float a2)
{
  *(float *)(result + 44) = a2;
  *(void *)(result + 48) = 0;
  return result;
}

uint64_t sonicSetChordPitch(uint64_t result, int a2)
{
  *(_DWORD *)(result + 56) = a2;
  return result;
}

uint64_t sonicSetQuality(uint64_t result, int a2)
{
  *(_DWORD *)(result + 60) = a2;
  return result;
}

uint64_t sonicSetVolume(uint64_t result, float a2)
{
  *(float *)(result + 36) = a2;
  return result;
}

void *sonicDestroyStream(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    freeStreamBuffers(result, a2);
    int v4 = (void *)v3[1];
    return heap_Free(v4, (uint64_t)a2);
  }
  return result;
}

void *freeStreamBuffers(void *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  if (v4) {
    uint64_t result = heap_Free((void *)result[1], v4);
  }
  uint64_t v5 = a2[1];
  if (v5) {
    uint64_t result = heap_Free((void *)v3[1], v5);
  }
  uint64_t v6 = a2[2];
  if (v6) {
    uint64_t result = heap_Free((void *)v3[1], v6);
  }
  uint64_t v7 = a2[3];
  if (v7)
  {
    int v8 = (void *)v3[1];
    return heap_Free(v8, v7);
  }
  return result;
}

uint64_t sonicCreateStream(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, 128);
  if (v6)
  {
    if (allocateStreamBuffers(a1, v6, a2, a3))
    {
      __asm { FMOV            V0.4S, #1.0 }
      *(_OWORD *)(v6 + 32) = _Q0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 120) = 1112014848;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t allocateStreamBuffers(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  int v8 = a3 / 65;
  uint64_t v9 = (2 * (a3 / 65));
  *(_DWORD *)(a2 + 68) = v9;
  uint64_t v10 = 2 * a4;
  uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), v9, v10);
  *(void *)a2 = v11;
  if (!v11) {
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 76) = v9;
  uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), v9, v10);
  *(void *)(a2 + 8) = v12;
  if (!v12) {
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 72) = v9;
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), v9, v10);
  *(void *)(a2 + 16) = v13;
  if (v13 && (uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), v9, 2), (*(void *)(a2 + 24) = v14) != 0))
  {
    *(_DWORD *)(a2 + 64) = a4;
    *(void *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 92) = a3 / 400;
    *(_DWORD *)(a2 + 96) = v8;
    *(_DWORD *)(a2 + 100) = v9;
    *(_DWORD *)(a2 + 108) = a3;
    *(_DWORD *)(a2 + 112) = 0;
    return 1;
  }
  else
  {
LABEL_6:
    freeStreamBuffers((void *)a1, (uint64_t *)a2);
    heap_Free(*(void **)(a1 + 8), a2);
    return 0;
  }
}

uint64_t sonicReadShortFromStream(uint64_t a1, void *__dst, signed int a3)
{
  signed int v3 = *(_DWORD *)(a1 + 84);
  if (!v3) {
    return 0;
  }
  if (v3 >= a3) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = v3;
  }
  if (v3 <= a3) {
    int v6 = 0;
  }
  else {
    int v6 = v3 - a3;
  }
  memcpy(__dst, *(const void **)(a1 + 8), (2 * v5 * *(_DWORD *)(a1 + 64)));
  if (v6 >= 1) {
    memmove(*(void **)(a1 + 8), (const void *)(*(void *)(a1 + 8) + 2 * (*(_DWORD *)(a1 + 64) * v5)), (2 * v6 * *(_DWORD *)(a1 + 64)));
  }
  *(_DWORD *)(a1 + 84) = v6;
  return v5;
}

uint64_t sonicFlushStream(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 100);
  float v5 = *(float *)(a2 + 32);
  float v6 = *(float *)(a2 + 40);
  float v7 = *(float *)(a2 + 44);
  int v9 = *(_DWORD *)(a2 + 80);
  int v8 = *(_DWORD *)(a2 + 84);
  int v10 = *(_DWORD *)(a2 + 88);
  uint64_t result = enlargeInputBufferIfNeeded(a1, a2, v9 + 2 * v4);
  if (result)
  {
    bzero((void *)(*(void *)a2 + 2 * (*(_DWORD *)(a2 + 64) * v9)), (4 * v4 * *(_DWORD *)(a2 + 64)));
    *(_DWORD *)(a2 + 80) += 2 * v4;
    uint64_t result = processStreamInput(a1, a2);
    if (result)
    {
      int v12 = v8
          + (int)(float)((float)((float)((float)((float)v9 / (float)(v5 / v6)) + (float)v10) / (float)(v6 * v7)) + 0.5);
      if (*(_DWORD *)(a2 + 84) > v12) {
        *(_DWORD *)(a2 + 84) = v12;
      }
      *(_DWORD *)(a2 + 80) = 0;
      *(_DWORD *)(a2 + 104) = 0;
      uint64_t result = 1;
      *(_DWORD *)(a2 + 88) = 0;
    }
  }
  return result;
}

uint64_t enlargeInputBufferIfNeeded(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a2 + 68);
  if (*(_DWORD *)(a2 + 80) + a3 <= v3) {
    return 1;
  }
  unsigned int v5 = v3 + a3 + (v3 >> 1);
  *(_DWORD *)(a2 + 68) = v5;
  uint64_t result = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)a2, 2 * *(unsigned int *)(a2 + 64) * (unint64_t)v5);
  *(void *)a2 = result;
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sonicWriteShortToStream(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t result = enlargeInputBufferIfNeeded(a1, a2, a4);
    if (!result) {
      return result;
    }
    memcpy((void *)(*(void *)a2 + 2 * (*(_DWORD *)(a2 + 64) * *(_DWORD *)(a2 + 80))), a3, 2 * *(unsigned int *)(a2 + 64) * (unint64_t)a4);
    *(_DWORD *)(a2 + 80) += a4;
  }
  return processStreamInput(a1, a2);
}

uint64_t overlapAdd(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if ((int)result >= 1)
      {
        uint64_t v6 = 0;
        int v7 = 0;
        int v8 = result << 16;
        int v9 = result;
        do
        {
          *(_WORD *)(a3 + v6) = ((v8 >> 16) * *(__int16 *)(a4 + v6) + (v7 >> 16) * *(__int16 *)(a5 + v6))
                              / (__int16)result;
          v8 -= 0x10000;
          v7 += 0x10000;
          v6 += 2 * a2;
          --v9;
        }
        while (v9);
      }
      ++v5;
      a4 += 2;
      a5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t processStreamInput(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 84);
  float v4 = *(float *)(a2 + 44);
  float v5 = *(float *)(a2 + 32) / *(float *)(a2 + 40);
  if (*(_DWORD *)(a2 + 56)) {
    float v6 = 1.0;
  }
  else {
    float v6 = *(float *)(a2 + 40);
  }
  if (v5 <= 1.00001 && v5 >= 0.99999)
  {
    uint64_t result = copyToOutput(a1, a2, *(const void **)a2, *(_DWORD *)(a2 + 80));
    if (result)
    {
      int v79 = v3;
      *(_DWORD *)(a2 + 80) = 0;
      goto LABEL_36;
    }
    return result;
  }
  int v79 = *(_DWORD *)(a2 + 84);
  int v8 = *(_DWORD *)(a2 + 80);
  int v9 = *(_DWORD *)(a2 + 100);
  if (v8 < v9) {
    goto LABEL_36;
  }
  int v10 = 0;
  do
  {
    int v11 = *(_DWORD *)(a2 + 104);
    if (v11 >= 1)
    {
      if (v11 >= *(_DWORD *)(a2 + 100)) {
        LODWORD(v12) = *(_DWORD *)(a2 + 100);
      }
      else {
        LODWORD(v12) = *(_DWORD *)(a2 + 104);
      }
      if (!copyToOutput(a1, a2, (const void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 64) * v10), v12)) {
        goto LABEL_36;
      }
      *(_DWORD *)(a2 + 104) -= v12;
LABEL_27:
      if (!v12) {
        goto LABEL_36;
      }
      goto LABEL_28;
    }
    uint64_t v13 = (__int16 *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 64) * v10);
    uint64_t PitchPeriod = findPitchPeriod(a2, v13, 1);
    int v15 = PitchPeriod;
    int v16 = *(_DWORD *)(a2 + 64);
    if (v5 <= 1.0)
    {
      float v18 = (float)(int)PitchPeriod;
      if (v5 >= 0.5)
      {
        *(_DWORD *)(a2 + 104) = (int)(float)((float)((float)((float)(v5 * 2.0) + -1.0) / (float)(1.0 - v5)) * v18);
        uint64_t v12 = PitchPeriod;
      }
      else
      {
        uint64_t v12 = (int)(float)((float)(v5 / (float)(1.0 - v5)) * v18);
      }
      int v19 = v12 + PitchPeriod;
      if (!enlargeOutputBufferIfNeeded(a1, a2, (int)v12 + (int)PitchPeriod)) {
        goto LABEL_36;
      }
      memcpy((void *)(*(void *)(a2 + 8) + 2 * *(_DWORD *)(a2 + 84) * v16), v13, (2 * v16 * v15));
      overlapAdd(v12, v16, *(void *)(a2 + 8) + 2 * (*(_DWORD *)(a2 + 84) + v15) * v16, (uint64_t)&v13[v16 * v15], (uint64_t)v13);
      *(_DWORD *)(a2 + 84) += v19;
      goto LABEL_27;
    }
    if (v5 >= 2.0)
    {
      uint64_t v17 = (int)(float)((float)(int)PitchPeriod / (float)(v5 + -1.0));
    }
    else
    {
      *(_DWORD *)(a2 + 104) = PitchPeriod * (int)(float)((float)(2.0 - v5) / (float)(v5 + -1.0));
      uint64_t v17 = PitchPeriod;
    }
    if (enlargeOutputBufferIfNeeded(a1, a2, v17))
    {
      overlapAdd(v17, v16, *(void *)(a2 + 8) + 2 * *(_DWORD *)(a2 + 84) * v16, (uint64_t)v13, (uint64_t)&v13[v16 * v15]);
      *(_DWORD *)(a2 + 84) += v17;
    }
    else
    {
      LODWORD(v17) = 0;
    }
    LODWORD(v12) = v17 + v15;
    if (!v17) {
      goto LABEL_36;
    }
LABEL_28:
    v10 += v12;
  }
  while (v10 + v9 <= v8);
  int v20 = *(_DWORD *)(a2 + 80) - v10;
  if (v20 >= 1) {
    memmove(*(void **)a2, (const void *)(*(void *)a2 + 2 * (*(_DWORD *)(a2 + 64) * v10)), (2 * v20 * *(_DWORD *)(a2 + 64)));
  }
  *(_DWORD *)(a2 + 80) = v20;
LABEL_36:
  if (*(_DWORD *)(a2 + 56))
  {
    float v21 = *(float *)(a2 + 40);
    int v22 = v79;
    if (v21 != 1.0 && *(_DWORD *)(a2 + 84) != v79)
    {
      uint64_t v23 = *(unsigned int *)(a2 + 64);
      uint64_t result = moveNewSamplesToPitchBuffer(a1, a2, v79);
      if (!result) {
        return result;
      }
      if (*(_DWORD *)(a2 + 88) >= *(_DWORD *)(a2 + 100))
      {
        LODWORD(v24) = 0;
        while (1)
        {
          int v25 = findPitchPeriod(a2, (__int16 *)(*(void *)(a2 + 16) + 2 * (int)v24 * (int)v23), 0);
          float v26 = (float)v25 / v21;
          uint64_t v27 = (int)v26;
          uint64_t result = enlargeOutputBufferIfNeeded(a1, a2, (int)v26);
          if (!result) {
            return result;
          }
          int v28 = *(_DWORD *)(a2 + 84);
          uint64_t v29 = *(void *)(a2 + 16);
          uint64_t v30 = *(void *)(a2 + 8) + 2 * v28 * (int)v23;
          uint64_t v31 = v29 + 2 * (int)v24 * (int)v23;
          if (v21 >= 1.0)
          {
            overlapAdd(v27, v23, v30, v31, v29 + 2 * (v25 + (int)v24 - (int)v27) * (int)v23);
            int v28 = *(_DWORD *)(a2 + 84);
          }
          else if ((int)v23 >= 1)
          {
            uint64_t v32 = 0;
            __int16 v33 = v25 - v27;
            do
            {
              if ((int)v27 >= 1)
              {
                int v34 = 0;
                int v35 = (unsigned __int16 *)(v31 + 2 * v32);
                uint64_t v36 = (_WORD *)v30;
                unsigned __int16 v37 = v25;
                int v38 = v35;
                do
                {
                  if (v34 >= (int)v27 - v25)
                  {
                    if (v34 >= v25)
                    {
                      if (v25) {
                        unsigned int v39 = (unsigned __int16)(v33 + v34) * *v38 / (unsigned __int16)v25;
                      }
                      else {
                        LOWORD(v39) = 0;
                      }
                      *uint64_t v36 = v39;
                    }
                    else
                    {
                      *uint64_t v36 = (unsigned __int16)(v33 + v34) * *v38 / (unsigned __int16)v25 + v37 * *v35;
                      v35 += v23;
                    }
                    v38 += v23;
                  }
                  else
                  {
                    *uint64_t v36 = v37 * *v35 / (unsigned __int16)v25;
                    v35 += v23;
                  }
                  ++v34;
                  --v37;
                  v36 += v23;
                }
                while (v27 != v34);
              }
              ++v32;
              v30 += 2;
            }
            while (v32 != v23);
          }
          *(_DWORD *)(a2 + 84) = v28 + v27;
          LODWORD(v24) = v25 + v24;
          if (*(_DWORD *)(a2 + 88) - (int)v24 < *(_DWORD *)(a2 + 100)) {
            goto LABEL_98;
          }
        }
      }
LABEL_97:
      LODWORD(v24) = 0;
LABEL_98:
      removePitchSamples((void **)a2, v24);
    }
LABEL_99:
    float v69 = *(float *)(a2 + 36);
    double v70 = (float)(v69 + -0.8);
    if (v70 > 0.00000001 || v70 < -0.00000001)
    {
      int v71 = *(_DWORD *)(a2 + 64);
      uint64_t v72 = (int)(float)(v69 * 100.0);
      uint64_t v73 = ((*(_DWORD *)(a2 + 84) - v22) * v71);
      if (v69 > 1.0) {
        uint64_t v72 = 100;
      }
      if ((int)v73 >= 1)
      {
        unsigned int v74 = (__int16 *)(*(void *)(a2 + 8) + 2 * v71 * v22);
        int v75 = aVolScaleFactor[v72];
        do
        {
          int v76 = *v74 * v75;
          unsigned int v77 = v76 >> 15;
          if (v76 < -1073709056) {
            LOWORD(v77) = -32767;
          }
          if (v76 <= 0x3FFFFFFF) {
            __int16 v78 = v77;
          }
          else {
            __int16 v78 = 0x7FFF;
          }
          *v74++ = v78;
          --v73;
        }
        while (v73);
      }
    }
    return 1;
  }
  int v22 = v79;
  if ((float)(v4 * v6) == 1.0) {
    goto LABEL_99;
  }
  int v40 = *(_DWORD *)(a2 + 108);
  int v41 = (int)(float)((float)v40 / (float)(v4 * v6));
  if (v40 > 0x4000 || v41 > 0x4000)
  {
    do
    {
      do
      {
        int v42 = v41;
        int v43 = v40;
        v41 >>= 1;
        v40 >>= 1;
      }
      while (v42 > 32769);
    }
    while (v43 > 32769);
  }
  if (*(_DWORD *)(a2 + 84) == v79) {
    goto LABEL_99;
  }
  int v44 = *(_DWORD *)(a2 + 64);
  uint64_t result = moveNewSamplesToPitchBuffer(a1, a2, v79);
  if (!result) {
    return result;
  }
  if (*(int *)(a2 + 88) < 13) {
    goto LABEL_97;
  }
  uint64_t v24 = 0;
  int v45 = *(_DWORD *)(a2 + 48);
  int v46 = *(_DWORD *)(a2 + 52);
  while (++v45 * v41 <= v46 * v40)
  {
LABEL_92:
    *(_DWORD *)(a2 + 48) = v45;
    if (v45 == v40)
    {
      *(_DWORD *)(a2 + 48) = 0;
      if (v46 != v41) {
        return 0;
      }
      int v46 = 0;
      int v45 = 0;
      *(_DWORD *)(a2 + 52) = 0;
    }
    if (++v24 >= *(int *)(a2 + 88) - 12) {
      goto LABEL_98;
    }
  }
  while (1)
  {
    uint64_t result = enlargeOutputBufferIfNeeded(a1, a2, 1);
    if (!result) {
      return result;
    }
    int v47 = *(_DWORD *)(a2 + 84);
    int v48 = *(_DWORD *)(a2 + 48);
    int v49 = *(_DWORD *)(a2 + 52);
    if (v44 <= 0)
    {
      int v45 = v48 + 1;
      int v53 = v45 * v41;
    }
    else
    {
      int v50 = 0;
      uint64_t v51 = *(void *)(a2 + 16) + 2 * (v44 * v24);
      long long v52 = (_WORD *)(*(void *)(a2 + 8) + 2 * (v47 * v44));
      int v45 = v48 + 1;
      int v53 = v45 * v41;
      int v54 = 50 * (v45 * v41 + ~(v49 * v40));
      int v55 = v54 / v41;
      int v56 = v54 % v41;
      uint64_t v57 = 2 * *(int *)(a2 + 64);
      int v58 = (char *)&sincTable + 2 * v55;
      do
      {
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        int v61 = 0;
        int v62 = 0;
        do
        {
          int v63 = 2
              * ((v41 - v56) * *(__int16 *)&v58[v60] + v56 * *(__int16 *)&v58[v60 + 2])
              / v41
              * *(__int16 *)(v51 + v59);
          unsigned int v64 = v63 + v62;
          int v65 = (v63 + v62) ^ v62;
          v59 += v57;
          if ((v63 ^ v62) >= 0) {
            int v66 = (v62 >> 31) | 1;
          }
          else {
            int v66 = 0;
          }
          int v67 = v66 + v61;
          if (v65 < 0) {
            int v61 = v67;
          }
          v60 += 100;
          int v62 = v64;
        }
        while (v60 != 1200);
        if (v61 <= 0)
        {
          if (v61 < 0) {
            LOWORD(v68) = 0x8000;
          }
          else {
            unsigned int v68 = HIWORD(v64);
          }
        }
        else
        {
          LOWORD(v68) = 0x7FFF;
        }
        *v52++ = v68;
        v51 += 2;
        ++v50;
      }
      while (v50 != v44);
    }
    int v46 = v49 + 1;
    *(_DWORD *)(a2 + 52) = v46;
    *(_DWORD *)(a2 + 84) = v47 + 1;
    if (v53 <= v46 * v40) {
      goto LABEL_92;
    }
  }
}

uint64_t copyToOutput(uint64_t a1, uint64_t a2, const void *a3, int a4)
{
  uint64_t result = enlargeOutputBufferIfNeeded(a1, a2, a4);
  if (result)
  {
    memcpy((void *)(*(void *)(a2 + 8) + 2 * (*(_DWORD *)(a2 + 64) * *(_DWORD *)(a2 + 84))), a3, (2 * a4 * *(_DWORD *)(a2 + 64)));
    *(_DWORD *)(a2 + 84) += a4;
    return 1;
  }
  return result;
}

uint64_t findPitchPeriod(uint64_t a1, __int16 *a2, int a3)
{
  int v6 = *(_DWORD *)(a1 + 108);
  if (v6 < 4001)
  {
    int v8 = 1;
  }
  else
  {
    unsigned int v7 = v6 / 0xFA0u;
    if (*(_DWORD *)(a1 + 60)) {
      int v8 = 1;
    }
    else {
      int v8 = v7;
    }
  }
  int v10 = *(_DWORD *)(a1 + 92);
  int v9 = *(_DWORD *)(a1 + 96);
  uint64_t v19 = 0;
  if (v8 == 1 && *(_DWORD *)(a1 + 64) == 1)
  {
    int v11 = (unsigned __int16 *)a2;
    int v12 = v10;
LABEL_20:
    uint64_t PitchPeriodInRange = findPitchPeriodInRange(v11, v12, v9, (int *)&v19 + 1, (int *)&v19);
    goto LABEL_21;
  }
  downSampleInput(a1, a2, v8);
  uint64_t PitchPeriodInRange = findPitchPeriodInRange(*(unsigned __int16 **)(a1 + 24), v10 / v8, v9 / v8, (int *)&v19 + 1, (int *)&v19);
  if (v8 != 1)
  {
    int v14 = PitchPeriodInRange * v8 + 4 * v8;
    if ((int)PitchPeriodInRange * v8 - 4 * v8 <= *(_DWORD *)(a1 + 92)) {
      int v15 = *(_DWORD *)(a1 + 92);
    }
    else {
      int v15 = PitchPeriodInRange * v8 - 4 * v8;
    }
    if (v14 >= *(_DWORD *)(a1 + 96)) {
      int v9 = *(_DWORD *)(a1 + 96);
    }
    else {
      int v9 = v14;
    }
    if (*(_DWORD *)(a1 + 64) == 1)
    {
      int v11 = (unsigned __int16 *)a2;
    }
    else
    {
      downSampleInput(a1, a2, 1);
      int v11 = *(unsigned __int16 **)(a1 + 24);
    }
    int v12 = v15;
    goto LABEL_20;
  }
LABEL_21:
  int v16 = HIDWORD(v19);
  uint64_t v17 = PitchPeriodInRange;
  if (HIDWORD(v19))
  {
    uint64_t v17 = PitchPeriodInRange;
    if (*(_DWORD *)(a1 + 112))
    {
      if (a3)
      {
        uint64_t v17 = PitchPeriodInRange;
        if (3 * HIDWORD(v19) < (int)v19) {
          goto LABEL_29;
        }
        uint64_t v17 = PitchPeriodInRange;
        if (3 * *(_DWORD *)(a1 + 116) >= 2 * HIDWORD(v19)) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v17 = PitchPeriodInRange;
        if (*(_DWORD *)(a1 + 116) >= SHIDWORD(v19)) {
          goto LABEL_29;
        }
      }
      uint64_t v17 = *(unsigned int *)(a1 + 112);
    }
  }
LABEL_29:
  *(_DWORD *)(a1 + 112) = PitchPeriodInRange;
  *(_DWORD *)(a1 + 116) = v16;
  return v17;
}

uint64_t findPitchPeriodInRange(unsigned __int16 *a1, int a2, int a3, int *a4, int *a5)
{
  if (a2 <= a3)
  {
    int v9 = 0;
    uint64_t v10 = a2;
    int v11 = a3 + 1;
    uint64_t v12 = a2;
    uint64_t result = 0xFFFFFFFFLL;
    int v13 = 255;
    int v6 = 1;
    do
    {
      if (v10 < 1)
      {
        int v14 = 0;
      }
      else
      {
        int v14 = 0;
        int v15 = v10;
        int v16 = a1;
        do
        {
          unsigned int v17 = *v16;
          unsigned int v18 = v16[v12];
          ++v16;
          unsigned __int16 v19 = v18 - v17;
          BOOL v20 = v17 >= v18;
          unsigned __int16 v21 = v17 - v18;
          if (!v20) {
            unsigned __int16 v21 = v19;
          }
          v14 += v21;
          --v15;
        }
        while (v15);
      }
      if (result == -1 || v14 * (int)result < v6 * (int)v10)
      {
        uint64_t result = v10;
        int v6 = v14;
      }
      int v22 = v14 * v13;
      if (v14 * v13 > v9 * (int)v10) {
        int v13 = v10;
      }
      if (v22 > v9 * (int)v10) {
        int v9 = v14;
      }
      ++v10;
      ++v12;
    }
    while (v11 != v10);
    int v5 = v9 / v13;
  }
  else
  {
    int v5 = 0;
    int v6 = 1;
    uint64_t result = 0xFFFFFFFFLL;
  }
  *a4 = v6 / (int)result;
  *a5 = v5;
  return result;
}

uint64_t downSampleInput(uint64_t result, __int16 *a2, int a3)
{
  int v3 = *(_DWORD *)(result + 100) / a3;
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *(_DWORD *)(result + 64) * a3;
    int v6 = *(_WORD **)(result + 24);
    do
    {
      if (v5 < 1)
      {
        int v7 = 0;
      }
      else
      {
        int v7 = 0;
        int v8 = v5;
        int v9 = a2;
        do
        {
          int v10 = *v9++;
          v7 += v10;
          --v8;
        }
        while (v8);
        a2 += (v5 - 1) + 1;
      }
      *v6++ = v7 / v5;
      ++v4;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t enlargeOutputBufferIfNeeded(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a2 + 76);
  if (*(_DWORD *)(a2 + 84) + a3 <= v3) {
    return 1;
  }
  unsigned int v5 = v3 + a3 + (v3 >> 1);
  *(_DWORD *)(a2 + 76) = v5;
  uint64_t result = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 8), 2 * *(unsigned int *)(a2 + 64) * (unint64_t)v5);
  *(void *)(a2 + 8) = result;
  if (result) {
    return 1;
  }
  return result;
}

uint64_t moveNewSamplesToPitchBuffer(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = *(_DWORD *)(a2 + 88);
  int v6 = *(_DWORD *)(a2 + 84) - a3;
  int v7 = *(_DWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 72);
  if (v5 + v6 <= v8)
  {
    uint64_t result = *(void *)(a2 + 16);
  }
  else
  {
    int v9 = v8 + v6 + (v8 >> 1);
    *(_DWORD *)(a2 + 72) = v9;
    uint64_t result = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 16), (2 * v7 * v9));
    *(void *)(a2 + 16) = result;
    if (!result) {
      return result;
    }
    int v5 = *(_DWORD *)(a2 + 88);
  }
  memcpy((void *)(result + 2 * v5 * v7), (const void *)(*(void *)(a2 + 8) + 2 * v7 * a3), (2 * v6 * v7));
  int v11 = *(_DWORD *)(a2 + 88) + v6;
  *(_DWORD *)(a2 + 84) = a3;
  *(_DWORD *)(a2 + 88) = v11;
  return 1;
}

void **removePitchSamples(void **result, int a2)
{
  if (a2)
  {
    int v3 = result;
    int v4 = a2;
    int v5 = *((_DWORD *)result + 22) - a2;
    if (v5)
    {
      uint64_t result = (void **)memmove(result[2], (char *)result[2] + 2 * *((_DWORD *)result + 16) * a2, (2 * *((_DWORD *)result + 16) * v5));
      int v4 = *((_DWORD *)v3 + 22);
    }
    *((_DWORD *)v3 + 22) = v4 - a2;
  }
  return result;
}

uint64_t siren_log_Diag(uint64_t a1, uint64_t a2)
{
  return log_VOutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET6", 3, 0, a2);
}

uint64_t siren_log_Trace(uint64_t a1, uint64_t a2)
{
  return log_VOutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET6", 5, 0, a2);
}

uint64_t siren_log_Error(uint64_t a1, uint64_t a2)
{
  return log_VOutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET6", 0, 0, a2);
}

uint64_t siren_compute_stream_hash(char *a1, unsigned int a2, char *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  unsigned int v7 = 32;
  v9[0] = 0;
  v9[1] = 0;
  MD5Init((uint64_t)v10);
  MD5Update((uint64_t)v10, a1, a2);
  MD5Final((uint64_t)v9, (uint64_t)v10);
  if (base64_encode((uint64_t)v9, 0x10u, (uint64_t)__src, &v7)) {
    __src[0] = 0;
  }
  else {
    __src[v7] = 0;
  }
  strcpy(a3, __src);
  return 0;
}

uint64_t siren_pipeline_Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v8 = (void *)heap_Calloc(*(void **)(a1 + 8), 1, 112);
  if (!v8)
  {
    int v12 = 10;
LABEL_13:
    uint64_t v9 = 0;
    uint64_t result = v12 | 0x84E02000;
    goto LABEL_14;
  }
  uint64_t v9 = (uint64_t)v8;
  *int v8 = a1;
  v8[12] = a2;
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), 1, 144);
  *(void *)(v9 + 16) = v10;
  if (!v10)
  {
    int v12 = 10;
    goto LABEL_12;
  }
  *(void *)uint64_t v10 = a1;
  *(void *)(v10 + 96) = 0;
  *(_DWORD *)(v10 + 104) = 0;
  *(void *)(v9 + 8) = a3;
  *(_DWORD *)(v10 + 116) = 0;
  *(_DWORD *)(v9 + 52) = 0;
  *(_DWORD *)(v9 + 56) = 0;
  *(void *)(v10 + 124) = *(void *)(a3 + 9136);
  *(_DWORD *)(v10 + 132) = *(_DWORD *)(a3 + 9144);
  *(_DWORD *)(v9 + 44) = 0;
  *(_DWORD *)(v9 + 104) = 0;
  *(_DWORD *)(v9 + 108) = *(unsigned __int8 *)(a3 + 7399);
  if (*(_DWORD *)(a3 + 9116) || *(_DWORD *)(a3 + 9120) || *(_DWORD *)(a3 + 9128))
  {
    int v11 = feat_phone_Init(a3, v10);
  }
  else
  {
    int v12 = feat_phone_Init(a3, v10);
    if (v12) {
      goto LABEL_12;
    }
    int v12 = infer_dur_init(*(uint64_t **)(v9 + 16), *(void *)(a3 + 8024));
    if (v12) {
      goto LABEL_12;
    }
    int v11 = feat_frame_Init(a3 + 7992, a3 + 8008, *(void *)(v9 + 16));
  }
  int v12 = v11;
  if (v11 || (uint64_t result = infer_acoustic_init(*(uint64_t **)(v9 + 16), *(void *)(a3 + 8040)), (v12 = result) != 0))
  {
LABEL_12:
    siren_pipeline_DeInit(v9);
    goto LABEL_13;
  }
LABEL_14:
  *a4 = v9;
  return result;
}

uint64_t siren_pipeline_DeInit(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      if (*(void *)(v3 + 32)) {
        feat_phone_Close(*(uint64_t **)(a1 + 16));
      }
      if (*(void *)(v3 + 40)) {
        feat_frame_Close((uint64_t *)v3);
      }
      if (*(void *)(v3 + 48)) {
        infer_dur_end((uint64_t *)v3);
      }
      if (*(void *)(v3 + 56)) {
        infer_acoustic_end((uint64_t *)v3);
      }
      uint64_t v4 = *(void *)(v3 + 96);
      if (v4) {
        heap_Free(*(void **)(v2 + 8), v4);
      }
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      heap_Free(*(void **)(v2 + 8), v3);
    }
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    heap_Free(*(void **)(v2 + 8), a1);
  }
  return 0;
}

uint64_t siren_pipeline_ProcessStart(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  if (*(_DWORD *)(a1 + 52)) {
    return 2229280785;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(v6 + 8) = a2;
  *(void *)(v6 + 16) = a3;
  *(_DWORD *)(v6 + 24) = a4;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_20D6AF8C0;
  *a5 = 1;
  if (!*(_DWORD *)(*(void *)(a1 + 16) + 116)) {
    return 0;
  }
  int v7 = chunking_Init((uint64_t *)v6, *(void *)(a1 + 8));
  if (v7) {
    return v7 | 0x84E02000;
  }
  else {
    return 0;
  }
}

uint64_t siren_pipeline_Process(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a2;
  int v12 = *(int32x2_t **)(a1 + 8);
  __int32 v13 = v12[1140].i32[0];
  if (v12[1146].i32[0] < 2u)
  {
    if (v13 || v12[1141].i32[0]) {
      goto LABEL_24;
    }
    if (v12[1139].i32[1])
    {
LABEL_32:
      return siren_pipeline_Process_seq2seq_ST(a1, a2, a3, a4);
    }
    uint64_t v35 = *(void *)(a1 + 16);
    __int32 v36 = v12[1144].i32[0];
    __int32 v37 = v12[1144].i32[1];
    int v38 = *(_DWORD *)(a1 + 52);
    if (v38 != 4 && v38 != 1)
    {
      int v45 = 17;
      goto LABEL_53;
    }
    if (*(_DWORD *)(a1 + 56))
    {
      __int32 v39 = v12[1144].i32[1];
      int v45 = feat_phone_Process(*(void *)(a1 + 16));
      if (v45) {
        goto LABEL_53;
      }
      int v46 = *(uint64_t **)(a1 + 96);
      if (v46 && *v46) {
        compstats_Start(*v46, v46[1], 3, v40, v41, v42, v43, v44);
      }
      int v45 = infer_dur_process((uint64_t)v12, (uint64_t *)v35);
      long long v52 = *(uint64_t **)(a1 + 96);
      if (v52 && *v52) {
        compstats_Stop(*v52, v52[1], 3, v47, v48, v49, v50, v51);
      }
      if (v45) {
        goto LABEL_53;
      }
      siren_pipeline_loc_ForceFESilDur(a1);
      int v45 = feat_frame_Process(v35);
      if (v45) {
        goto LABEL_53;
      }
      if (*(_DWORD *)(v35 + 116))
      {
        int v45 = chunking_Process(v12, v35, 0, 0);
        if (v45) {
          goto LABEL_53;
        }
        __int32 v37 = v39;
        unsigned int v53 = *(_DWORD *)(*(void *)(v35 + 48) + 24)
            + (2 * *(unsigned __int16 *)(*(void *)(v35 + 72) + 24) - 2) * v39;
      }
      else
      {
        unsigned int v53 = *(_DWORD *)(*(void *)(v35 + 48) + 24);
        __int32 v37 = v39;
      }
      uint64_t v55 = heap_Calloc(*(void **)(*(void *)a1 + 8), v53, 4 * v12[1150].u32[1]);
      *(void *)(a1 + 80) = v55;
      if (!v55)
      {
        int v45 = 10;
        goto LABEL_53;
      }
      *(_DWORD *)(a1 + 56) = 0;
    }
    int v56 = *(uint64_t **)(a1 + 96);
    if (v56 && *v56) {
      compstats_Start(*v56, v56[1], 4, (uint64_t)a4, a5, a6, a7, a8);
    }
    if (*(_DWORD *)(v35 + 116))
    {
      uint64_t v57 = *(unsigned int *)(a1 + 60);
      uint64_t v58 = *(void *)(*(void *)(v35 + 72) + 16);
      if (v57) {
        int v59 = *(_DWORD *)(v58 + 4 * (v57 - 1)) + 1;
      }
      else {
        int v59 = 0;
      }
      int v68 = *(_DWORD *)(v58 + 4 * v57);
      if (v68 < v59)
      {
        int v45 = 7;
        goto LABEL_53;
      }
      int v69 = (v59 - v36) & ~((v59 - v36) >> 31);
      int v70 = v68 + v36;
      if (v68 + v36 >= *(_DWORD *)(*(void *)(v35 + 48) + 24)) {
        int v70 = v68;
      }
      int v107 = v70;
      __int32 v108 = v37;
      unsigned int v71 = v70 - v69 + 1;
      int v45 = infer_acoustic_process_range(v35, (v59 - v36) & ~((v59 - v36) >> 31), v71);
      if (v45) {
        goto LABEL_53;
      }
      uint64_t v72 = *(char **)(*(void *)(v35 + 56) + 24);
      if (v36 | v108)
      {
        __int32 v73 = v36 - v108;
        if (v69 != v59)
        {
          v72 += 4 * (v12[1150].i32[1] * v73);
          v71 -= v73;
        }
        if (v107 == v68) {
          __int32 v73 = 0;
        }
        v71 -= v73;
      }
      memcpy((void *)(*(void *)(a1 + 80) + 4 * (v12[1150].i32[1] * *(_DWORD *)(a1 + 28))), v72, 4 * v12[1150].i32[1] * v71);
      if (*(_WORD *)(*(void *)(v35 + 8) + 10))
      {
        uint64_t v74 = 0;
        unsigned int v75 = 0;
        do
        {
          int v76 = v74 + 1;
          if (v74 + 1 >= (unint64_t)*(unsigned __int16 *)(*(void *)(v35 + 8) + 10)) {
            break;
          }
          v75 += *(_DWORD *)(*(void *)(*(void *)(v35 + 48) + 56) + 4 * v74++);
        }
        while (v75 <= v68);
      }
      else
      {
        int v76 = 0;
      }
      unsigned int v77 = *(_DWORD *)(a1 + 28) + v71;
      *(_DWORD *)(a1 + 24) = v76;
      *(_DWORD *)(a1 + 28) = v77;
      int v78 = *(_DWORD *)(a1 + 60) + 1;
      *(_DWORD *)(a1 + 60) = v78;
      if (v78 == *(unsigned __int16 *)(*(void *)(v35 + 72) + 24)) {
        int v67 = 5;
      }
      else {
        int v67 = 4;
      }
LABEL_87:
      *(_DWORD *)(a1 + 52) = v67;
      int v79 = *(uint64_t **)(a1 + 96);
      if (v79 && *v79)
      {
        compstats_Stop(*v79, v79[1], 4, v62, v63, v64, v65, v66);
        int v67 = *(_DWORD *)(a1 + 52);
      }
      uint64_t result = 0;
      goto LABEL_122;
    }
    int v45 = infer_acoustic_process_range(v35, 0, *(unsigned int *)(*(void *)(v35 + 48) + 24));
    if (!v45)
    {
      uint64_t v60 = *(void *)(v35 + 56);
      int v61 = *(_DWORD *)(*(void *)(v35 + 48) + 24);
      *(_DWORD *)(a1 + 24) = *(unsigned __int16 *)(*(void *)(v35 + 8) + 10);
      *(_DWORD *)(a1 + 28) = v61;
      memcpy(*(void **)(a1 + 80), *(const void **)(v60 + 24), 4 * (v12[1150].i32[1] * v61));
      int v67 = 5;
      goto LABEL_87;
    }
LABEL_53:
    *(_DWORD *)(a1 + 52) = 6;
    *a4 = 6;
    return v45 | 0x84E02000;
  }
  if (!v13 && !v12[1141].i32[0])
  {
    if (!v12[1139].i32[1])
    {
      int v14 = *(uint64_t **)(a1 + 16);
      __int32 v15 = v12[1144].i32[0];
      __int32 v16 = v12[1144].i32[1];
      int v17 = *(_DWORD *)(a1 + 52);
      if (v17 != 4 && v17 != 1)
      {
        int v23 = 17;
        goto LABEL_51;
      }
      if (*(_DWORD *)(a1 + 56))
      {
        int v23 = feat_phone_Process(*(void *)(a1 + 16));
        if (v23) {
          goto LABEL_51;
        }
        uint64_t v24 = *(uint64_t **)(a1 + 96);
        if (v24 && *v24) {
          compstats_Start(*v24, v24[1], 3, v18, v19, v20, v21, v22);
        }
        int v23 = infer_dur_process((uint64_t)v12, v14);
        uint64_t v30 = *(uint64_t **)(a1 + 96);
        if (v30 && *v30) {
          compstats_Stop(*v30, v30[1], 3, v25, v26, v27, v28, v29);
        }
        if (v23) {
          goto LABEL_51;
        }
        siren_pipeline_loc_ForceFESilDur(a1);
        int v23 = feat_frame_Process((uint64_t)v14);
        if (v23) {
          goto LABEL_51;
        }
        uint64_t v31 = *(void *)(a1 + 16);
        if (v10 && a3)
        {
          if (*(_DWORD *)(a1 + 52) == 6 || (uint64_t v32 = *(void *)(v31 + 48)) == 0) {
            uint64_t v33 = 0;
          }
          else {
            uint64_t v33 = *(void *)(v32 + 56);
          }
          unsigned int v54 = *a3;
          if (*a3)
          {
            unsigned int v54 = 0;
            unsigned int v80 = 0;
            int v81 = 0;
            unsigned int v82 = 0;
            __int16 v83 = v10 + 4;
            do
            {
              int v84 = *(v83 - 4);
              *(v83 - 1) = v81;
              if (v84 == 33)
              {
                _DWORD *v83 = *(_DWORD *)(v33 + 4 * v80++);
                v81 += *(_DWORD *)(v33 + 4 * v80);
              }
              else
              {
                _DWORD *v83 = 0;
                if (v84 == 18) {
                  ++v54;
                }
              }
              ++v82;
              v83 += 8;
            }
            while (v82 < *a3);
          }
          *(_DWORD *)(v31 + 104) = v54;
        }
        else
        {
          unsigned int v54 = *(_DWORD *)(v31 + 104);
        }
        if (a3 && v10 && v54)
        {
          uint64_t v85 = heap_Calloc(*(void **)(*(void *)a1 + 8), v54, 4);
          *(void *)(v31 + 96) = v85;
          if (!v85)
          {
            int v23 = -2065686518;
            goto LABEL_51;
          }
          unsigned int v86 = *a3;
          if (*a3)
          {
            unsigned int v87 = 0;
            unsigned int v88 = 0;
            do
            {
              if (*v10 == 18)
              {
                *(_DWORD *)(v85 + 4 * v87++) = v10[3];
                unsigned int v86 = *a3;
              }
              v10 += 8;
              ++v88;
            }
            while (v88 < v86);
          }
        }
        int v23 = chunking_Process(v12, (uint64_t)v14, 0, 0);
        if (v23)
        {
LABEL_51:
          *(_DWORD *)(a1 + 52) = 6;
          *a4 = 6;
          return v23 | 0x84E02000;
        }
        uint64_t v89 = heap_Calloc(*(void **)(*(void *)a1 + 8), *(_DWORD *)(v14[6] + 24) + (2 * *(unsigned __int16 *)(v14[9] + 24) - 2) * v16, 4 * v12[1150].u32[1]);
        *(void *)(a1 + 80) = v89;
        calc_Max_Frame_Len(*(void *)(a1 + 16));
        if (!v89)
        {
          int v23 = 10;
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 56) = 0;
      }
      unsigned int v90 = *(uint64_t **)(a1 + 96);
      if (v90 && *v90) {
        compstats_Start(*v90, v90[1], 4, (uint64_t)a4, a5, a6, a7, a8);
      }
      uint64_t v91 = *(unsigned int *)(a1 + 104);
      uint64_t v92 = v14[10];
      if (v91 == *(_DWORD *)v92)
      {
        uint64_t result = 0;
        int v67 = 5;
        *(_DWORD *)(a1 + 52) = 5;
LABEL_122:
        *a4 = v67;
        return result;
      }
      if (*(_DWORD *)(a1 + 28) > *(_DWORD *)(*(void *)(v92 + 16) + 4 * v91))
      {
LABEL_118:
        uint64_t v93 = *(uint64_t **)(a1 + 96);
        if (v93)
        {
          if (*v93) {
            compstats_Stop(*v93, v93[1], 4, (uint64_t)a4, a5, a6, a7, a8);
          }
        }
        uint64_t result = 0;
        int v67 = *(_DWORD *)(a1 + 52);
        goto LABEL_122;
      }
      uint64_t v94 = *(unsigned int *)(a1 + 60);
      uint64_t v95 = *(void *)(v14[9] + 16);
      if (v94) {
        int v96 = *(_DWORD *)(v95 + 4 * (v94 - 1)) + 1;
      }
      else {
        int v96 = 0;
      }
      int v97 = *(_DWORD *)(v95 + 4 * v94);
      if (v97 >= v96)
      {
        int v98 = (v96 - v15) & ~((v96 - v15) >> 31);
        int v99 = v97 + v15;
        int v109 = *(_DWORD *)(v14[6] + 24);
        if (v97 + v15 < v109) {
          v97 += v15;
        }
        unsigned int v100 = v97 - v98 + 1;
        int v23 = infer_acoustic_process_range((uint64_t)v14, (v96 - v15) & ~((v96 - v15) >> 31), v100);
        if (!v23)
        {
          uint64_t v101 = *(char **)(v14[7] + 24);
          if (v15)
          {
            if (v98 != v96)
            {
              v101 += 4 * (v12[1150].i32[1] * v15);
              v100 -= v15;
            }
            if (v99 >= v109) {
              __int32 v102 = 0;
            }
            else {
              __int32 v102 = v15;
            }
            v100 -= v102;
          }
          memcpy((void *)(*(void *)(a1 + 80) + 4 * (v12[1150].i32[1] * *(_DWORD *)(a1 + 28))), v101, 4 * v12[1150].i32[1] * v100);
          uint64_t v103 = *(unsigned __int16 *)(v14[1] + 10);
          if (*(_WORD *)(v14[1] + 10))
          {
            uint64_t v104 = 0;
            unsigned int v105 = 0;
            while (v105 <= *(_DWORD *)(*(void *)(v14[10] + 16) + 4 * *(unsigned int *)(a1 + 104)))
            {
              v105 += *(_DWORD *)(*(void *)(v14[6] + 56) + 4 * v104++);
              if (v103 == v104) {
                goto LABEL_146;
              }
            }
            LODWORD(v103) = v104;
          }
LABEL_146:
          unsigned int v106 = *(_DWORD *)(a1 + 28) + v100;
          *(_DWORD *)(a1 + 24) = v103;
          *(_DWORD *)(a1 + 28) = v106;
          ++*(_DWORD *)(a1 + 60);
          *(_DWORD *)(a1 + 52) = 4;
          goto LABEL_118;
        }
      }
      else
      {
        int v23 = 7;
      }
      goto LABEL_51;
    }
    goto LABEL_32;
  }
LABEL_24:
  if (v12[1141].i32[1])
  {
    return siren_pipeline_Process_seq2seq_stream_ST(a1, a2, (unsigned int *)a3, a4);
  }
  else
  {
    return siren_pipeline_Process_seq2seq_frame_ST(a1, a2, (unsigned int *)a3, a4);
  }
}

uint64_t siren_pipeline_Process_seq2seq_stream_ST(uint64_t a1, int *a2, unsigned int *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 52);
  if (v6 == 6
    || (uint64_t v8 = *(void *)(a1 + 8),
        uint64_t v7 = *(void *)(a1 + 16),
        unsigned int v9 = *(unsigned __int16 *)(*(void *)(v7 + 8) + 10),
        int v121 = 0,
        (v6 - 5) < 0xFFFFFFFC))
  {
    int updated = 17;
LABEL_4:
    *(_DWORD *)(a1 + 52) = 6;
    *a4 = 6;
    return updated | 0x84E02000;
  }
  __int32 v13 = a2;
  if (*(_DWORD *)(a1 + 56))
  {
    int updated = feat_phone_Process(v7);
    if (updated) {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 44) = 0;
    paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"voice", &v121);
    unint64_t v14 = *a3;
    if (v14)
    {
      uint64_t v115 = v8;
      unint64_t v15 = 0;
      int v17 = a2;
      __int32 v16 = v121;
      unsigned int v18 = a2[3];
      do
      {
        if (v17[3] > v18) {
          break;
        }
        if (*v17 == 60)
        {
          seq2seq_select_speaker(a1, (uint64_t)v17, v16);
          unint64_t v14 = *a3;
        }
        ++v15;
        v17 += 8;
      }
      while (v15 < v14);
      uint64_t v8 = v115;
      if (*(_DWORD *)(v7 + 116))
      {
LABEL_22:
        int updated = chunking_Process((int32x2_t *)v8, v7, (uint64_t)a2, a3);
        if (updated) {
          goto LABEL_4;
        }
        int updated = chunking_markers(*(void *)a1, v7, a2, a3);
        if (updated) {
          goto LABEL_4;
        }
        goto LABEL_24;
      }
      if (!v14)
      {
LABEL_24:
        if (*(_DWORD *)(v7 + 120)) {
          *(_DWORD *)(a1 + 48) = (float)(*(float *)(*(void *)(a1 + 8) + 9176)
        }
                                                     * (float)*(unsigned int *)(*(void *)(a1 + 8) + 9180))
                               / 0xA;
        uint64_t v22 = heap_Alloc(*(void *)(*(void *)a1 + 8), 4 * *(_DWORD *)(v8 + 9136) * v9 * *(_DWORD *)(v8 + 9204));
        *(void *)(a1 + 80) = v22;
        __int32 v13 = a2;
        if (!v22)
        {
          int updated = 10;
          goto LABEL_4;
        }
        *(_DWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 9136) * v9;
        *(_DWORD *)(a1 + 56) = 0;
        uint64_t v8 = *(void *)(a1 + 8);
        uint64_t v7 = *(void *)(a1 + 16);
        goto LABEL_28;
      }
      uint64_t v19 = a2;
      uint64_t v20 = a2;
      while (1)
      {
        int v21 = *v20;
        v20 += 8;
        if (v21 == 21 && !strcmp(*((const char **)v19 + 3), "spell")) {
          break;
        }
        uint64_t v19 = v20;
        if (!--v14) {
          goto LABEL_24;
        }
      }
      *(_DWORD *)(v7 + 116) = 1;
      chunking_Init((uint64_t *)v7, *(void *)(a1 + 8));
    }
    if (*(_DWORD *)(v7 + 116)) {
      goto LABEL_22;
    }
    goto LABEL_24;
  }
LABEL_28:
  uint64_t v23 = *(void *)(v7 + 72);
  uint64_t v24 = *(void *)(v7 + 88);
  if (*(_DWORD *)(v7 + 116))
  {
    uint64_t v25 = *(void *)(v7 + 64);
    uint64_t v26 = *(unsigned int *)(a1 + 60);
    int v27 = *(unsigned __int16 *)(v25 + 48) - 1;
    BOOL v28 = v26 == v27;
    uint64_t v29 = *(_DWORD **)(v25 + 16);
    if (v26)
    {
      int v30 = v29[(v26 - 1)];
      unsigned int v31 = v30 + 1;
      int v32 = v29[v26] - (v26 == v27);
      if (v32 == v30) {
        unsigned int v33 = v30 + 1;
      }
      else {
        unsigned int v33 = v32;
      }
      if (v33 < v31)
      {
        int updated = 7;
        goto LABEL_84;
      }
      uint64_t v35 = *(void *)(v24 + 8);
      unsigned int v113 = *(_DWORD *)(v35 + 4 * (v26 - 1)) + 1;
    }
    else
    {
      unsigned int v113 = 0;
      unsigned int v31 = 0;
      if ((__PAIR64__(*v29, v27) - 1) >> 32 == -1) {
        unsigned int v33 = 0;
      }
      else {
        unsigned int v33 = (__PAIR64__(*v29, v27) - 1) >> 32;
      }
      uint64_t v35 = *(void *)(v24 + 8);
      uint64_t v26 = 0;
    }
    int v116 = *(_DWORD *)(v35 + 4 * v26);
    int v34 = v33 - v31 + 1;
  }
  else
  {
    unsigned int v113 = 0;
    if (v9 <= 2) {
      int v34 = 1;
    }
    else {
      int v34 = v9 - 2;
    }
    int v116 = *a3 - 1;
    unsigned int v31 = 1;
    unsigned int v33 = v34;
    BOOL v28 = 1;
  }
  uint64_t v119 = *(void *)(v7 + 72);
  if ((*(_DWORD *)(a1 + 52) & 0xFFFFFFFE) != 2)
  {
    unsigned int v40 = v33;
    uint64_t v41 = heap_Alloc(*(void *)(*(void *)a1 + 8), 40);
    *(void *)(a1 + 72) = v41;
    if (!v41) {
      goto LABEL_83;
    }
    *(_DWORD *)(v41 + 8) = 200002;
    uint64_t v42 = heap_Alloc(*(void *)(*(void *)a1 + 8), 800008);
    **(void **)(a1 + 72) = v42;
    if (!v42) {
      goto LABEL_83;
    }
    uint64_t v43 = heap_Alloc(*(void *)(*(void *)a1 + 8), 4);
    uint64_t v44 = *(void *)(a1 + 72);
    *(void *)(v44 + 32) = v43;
    if (!v43) {
      goto LABEL_83;
    }
    *(_DWORD *)(v44 + 16) = *(_DWORD *)(a1 + 44);
    unsigned int v33 = v40;
    uint64_t v23 = v119;
    if (*(_DWORD *)(v7 + 120))
    {
      *(_DWORD *)(a1 + 64) = 0;
      *(_WORD *)(v119 + 24) = 0;
      uint64_t v109 = (unsigned __int16)((*(_DWORD *)(v7 + 124) * v34) / *(_DWORD *)(a1 + 48) + 10);
      uint64_t v45 = heap_Calloc(*(void **)(*(void *)a1 + 8), v109, 4);
      *(void *)(v119 + 16) = v45;
      if (!v45
        || (uint64_t v46 = heap_Calloc(*(void **)(*(void *)a1 + 8), v109, 4),
            uint64_t v23 = v119,
            *(void *)(v24 + 16) = v46,
            unsigned int v33 = v40,
            !v46))
      {
LABEL_83:
        int updated = 10;
        goto LABEL_84;
      }
    }
  }
  int v36 = *(_DWORD *)(v7 + 120);
  unsigned int v111 = v33;
  BOOL v112 = v28;
  if (!v36)
  {
    unsigned int v38 = 0;
    uint64_t v47 = (unsigned int ***)(a1 + 72);
    *(_DWORD *)(*(void *)(a1 + 72) + 20) = 0;
    goto LABEL_63;
  }
  int v37 = *(_DWORD *)(a1 + 64);
  if (v37 == 1)
  {
    unsigned int v38 = **(_DWORD **)(v23 + 16) + 1;
    float v48 = (float)v38 + (float)((float)v38 * *(float *)(v8 + 9160));
  }
  else
  {
    if (!v37)
    {
      unsigned int v38 = 0;
      unsigned int v39 = *(_DWORD *)(a1 + 48);
      goto LABEL_61;
    }
    uint64_t v49 = *(void *)(v23 + 16);
    unsigned int v38 = *(_DWORD *)(v49 + 4 * (v37 - 1)) + 1;
    float v48 = (float)v38 + (float)((float)(v38 - *(_DWORD *)(v49 + 4 * (v37 - 2))) * *(float *)(v8 + 9160));
  }
  unsigned int v39 = (float)(v48 + -1.0);
LABEL_61:
  uint64_t v47 = (unsigned int ***)(a1 + 72);
  uint64_t v50 = *(void *)(a1 + 72);
  *(_DWORD *)(v50 + 20) = v36 == 1;
  if (v36 == 1)
  {
    *(_DWORD *)(v50 + 24) = v37 == 0;
    **(_DWORD **)(v50 + 32) = 0;
    *(_DWORD *)(v50 + 28) = v39 - v38 + 1;
  }
LABEL_63:
  int updated = fi_net_update_param(**(void **)(v7 + 56));
  if (updated) {
    goto LABEL_84;
  }
  int updated = infer_acoustic_seq2seq_process_range_stream((uint64_t *)v7, v31, v34);
  if (updated) {
    goto LABEL_84;
  }
  unsigned int v51 = *(_DWORD *)(*(void *)(v7 + 56) + 40) >> 2;
  unsigned int v52 = *(_DWORD *)(v8 + 9204);
  unsigned int v53 = v51 / v52;
  unsigned int v54 = v51 / v52 + v38;
  unsigned int v55 = v54 - 1;
  unsigned int v56 = ***v47;
  if (*(_DWORD *)(v7 + 120))
  {
    uint64_t v57 = (int *)(*v47)[4];
    if (v56 > 0x9C3) {
      int v58 = 1;
    }
    else {
      int v58 = *v57;
    }
    *uint64_t v57 = v58;
    *(_DWORD *)(*(void *)(v119 + 16) + 4 * *(unsigned int *)(a1 + 64)) = v55;
    ++*(_WORD *)(v119 + 24);
    if (*(_DWORD *)(a1 + 64)) {
      v38 -= 2;
    }
    unsigned int v59 = v54 - 3;
    if (*v57 != 1) {
      unsigned int v55 = v59;
    }
  }
  int v60 = *(_DWORD *)(a1 + 28);
  int v61 = *(_DWORD *)(a1 + 40);
  unsigned int v108 = v56;
  unsigned int v110 = v52;
  if (v53 > v61 - v60)
  {
    do
      v61 *= 2;
    while (v53 > v61 - v60);
    *(_DWORD *)(a1 + 40) = v61;
  }
  uint64_t v62 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 80), 4 * (*(_DWORD *)(v8 + 9204) * v61));
  *(void *)(a1 + 80) = v62;
  if (!v62) {
    goto LABEL_83;
  }
  if (v112)
  {
    int v63 = *(_DWORD *)(v7 + 120);
    uint64_t v64 = *v47;
    unsigned int v65 = v111;
    if (!v63)
    {
LABEL_82:
      BOOL v67 = 1;
      goto LABEL_95;
    }
    int v66 = *v64[4];
    if (v66 == 1)
    {
      int v63 = 0;
      goto LABEL_82;
    }
  }
  else
  {
    uint64_t v64 = *v47;
    int v66 = *(*v47)[4];
    unsigned int v65 = v111;
  }
  BOOL v67 = v66 == 1;
  int v63 = 1;
LABEL_95:
  uint64_t v69 = v113;
  uint64_t v70 = (uint64_t)&v13[8 * v113];
  unint64_t v71 = v116 - v113 + 1;
  uint64_t v72 = *(void *)(a1 + 8);
  uint64_t v73 = *(void *)(a1 + 16);
  uint64_t v74 = *(void *)(v73 + 88);
  uint64_t v114 = v74;
  uint64_t v117 = v73;
  if (*(_DWORD *)(v73 + 120) && (int v75 = *(_DWORD *)(a1 + 64)) != 0)
  {
    int v76 = *(_DWORD *)(*(void *)(v74 + 16) + 4 * (v75 - 1));
    int v77 = *(_DWORD *)(v72 + 9188);
    uint64_t v78 = (v76 + 1);
    if (v76 == -1)
    {
      LODWORD(v78) = 0;
      unsigned int v79 = 0;
    }
    else
    {
      unsigned int v79 = 0;
      unsigned int v80 = (int *)v70;
      uint64_t v81 = v78;
      do
      {
        int v82 = *v80;
        v80 += 8;
        if (v82 == 33) {
          ++v79;
        }
        --v81;
      }
      while (v81);
    }
  }
  else
  {
    LODWORD(v78) = 0;
    unsigned int v79 = 0;
    int v77 = *(_DWORD *)(v72 + 9188);
  }
  unsigned int v120 = v51;
  int v105 = *(_DWORD *)(v8 + 9188);
  int v106 = *(_DWORD *)(a1 + 32);
  uint64_t v83 = v78;
  uint64_t v107 = v69;
  if (v78 >= v71)
  {
    LODWORD(v87) = v78;
  }
  else
  {
    uint64_t v84 = 0;
    uint64_t v85 = (uint64_t)(*v64 + 1);
    uint64_t v86 = (uint64_t)&v13[8 * v69 + 3 + 8 * v78];
    unint64_t v87 = v78;
    do
    {
      if (*(_DWORD *)(v70 + 32 * v87) == 33)
      {
        ++v79;
        unint64_t v88 = v70 + 32 * v87;
        *(_DWORD *)(v88 + 12) = v38 * v77;
        uint64_t v89 = (_DWORD *)(v88 + 12);
        v89[1] = 0;
        if (v38 <= v55)
        {
          int v90 = 0;
          do
          {
            if (*(_DWORD *)(v85 + 4 * v38) > v79) {
              break;
            }
            v90 += v77;
            v89[1] = v90;
            ++v38;
          }
          while (v38 <= v55);
        }
        else
        {
          int v90 = 0;
        }
        if (v87 > v78 && *(_DWORD *)(v70 + 32 * v87 + 24) == 35)
        {
          uint64_t v91 = (_DWORD *)v86;
          uint64_t v92 = v84;
          do
          {
            unsigned int v93 = *(v91 - 3);
            BOOL v97 = v93 > 0x28;
            uint64_t v94 = (1 << v93) & 0x10004000100;
            BOOL v95 = v97 || v94 == 0;
            if (!v95 && *v91 == *v89) {
              *v91 += v90;
            }
            v91 += 8;
            --v92;
          }
          while (v92);
        }
      }
      else
      {
        *(void *)(v70 + 32 * v87 + 12) = v38 * v77;
      }
      if (v38 > v55) {
        int v96 = v63;
      }
      else {
        int v96 = 0;
      }
      ++v87;
      BOOL v97 = !v67 || v79 > v65;
      if (!v97) {
        int v96 = 0;
      }
      if (v87 >= v71) {
        break;
      }
      ++v84;
    }
    while (!v96);
  }
  int v98 = v78;
  bubble_sort_markers(v70, v78, v87);
  if (v87 - 1 - v98 != -1)
  {
    int v99 = v87 - v98;
    unsigned int v100 = &v13[8 * v83 + 3 + 8 * v107];
    do
    {
      *v100 += v106 + v105 * (v53 - v108);
      v100 += 8;
      --v99;
    }
    while (v99);
  }
  if (*(_DWORD *)(v117 + 120)) {
    *(_DWORD *)(*(void *)(v114 + 16) + 4 * *(unsigned int *)(a1 + 64)) = v87 - 1;
  }
  if (v110 <= v120)
  {
    memcpy((void *)(*(void *)(a1 + 80) + 4 * (*(_DWORD *)(v8 + 9204) * *(_DWORD *)(a1 + 28))), *(const void **)(*(void *)(v7 + 56) + 24), 4 * *(_DWORD *)(v8 + 9204) * v53);
    int v101 = *(_DWORD *)(a1 + 32) + *(_DWORD *)(v8 + 9188) * v53;
    *(_DWORD *)(a1 + 28) += v53;
    *(_DWORD *)(a1 + 32) = v101;
  }
  if (*(_DWORD *)(v7 + 120)
    && (int v102 = *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 64) = v102 + 1, !**(_DWORD **)(*(void *)(a1 + 72) + 32)))
  {
    BOOL v103 = v102 == 0;
    int v104 = 2;
  }
  else
  {
    ++*(_DWORD *)(a1 + 60);
    BOOL v103 = !v112;
    int v104 = 4;
  }
  if (!v103) {
    ++v104;
  }
  int updated = 0;
  *(_DWORD *)(a1 + 52) = v104;
LABEL_84:
  if ((*(_DWORD *)(a1 + 52) & 0xFFFFFFFE) == 4)
  {
    int v68 = *(uint64_t **)(a1 + 72);
    if (v68)
    {
      if (*v68)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *v68);
        int v68 = *(uint64_t **)(a1 + 72);
      }
      if (v68[4])
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v68[4]);
        int v68 = *(uint64_t **)(a1 + 72);
      }
      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v68);
      *(void *)(a1 + 72) = 0;
    }
  }
  if (updated) {
    goto LABEL_4;
  }
  uint64_t result = 0;
  *a4 = *(_DWORD *)(a1 + 52);
  return result;
}

uint64_t siren_pipeline_Process_seq2seq_frame_ST(uint64_t a1, int *a2, unsigned int *a3, int *a4)
{
  BOOL v75 = 1;
  long long __s1 = 0;
  int v6 = *(_DWORD *)(a1 + 52);
  if (v6 == 6 || (v6 - 1) > 3)
  {
    uint64_t v21 = 0;
    int v12 = 17;
LABEL_19:
    *a4 = v6;
    goto LABEL_20;
  }
  uint64_t v10 = *(int32x2_t **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  int v11 = *(unsigned __int16 *)(*(void *)(v9 + 8) + 10);
  if (!*(_DWORD *)(a1 + 56)) {
    goto LABEL_35;
  }
  int v72 = *(unsigned __int16 *)(*(void *)(v9 + 8) + 10);
  int v12 = feat_phone_Process(v9);
  if (v12)
  {
LABEL_25:
    *(_DWORD *)(a1 + 52) = 6;
    *a4 = 6;
    return v12 | 0x84E02000;
  }
  *(_DWORD *)(a1 + 44) = 0;
  paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"voice", &__s1);
  unint64_t v13 = *a3;
  if (!v13)
  {
LABEL_28:
    if (*(_DWORD *)(v9 + 116)) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  uint64_t v70 = v10;
  unint64_t v14 = 0;
  unsigned int v15 = a2[3];
  __int32 v16 = __s1;
  int v17 = a2;
  do
  {
    if (v17[3] > v15) {
      break;
    }
    if (*v17 == 60)
    {
      seq2seq_select_speaker(a1, (uint64_t)v17, v16);
      unint64_t v13 = *a3;
    }
    ++v14;
    v17 += 8;
  }
  while (v14 < v13);
  uint64_t v10 = v70;
  if (*(_DWORD *)(v9 + 116))
  {
LABEL_29:
    int v12 = chunking_Process(v10, v9, (uint64_t)a2, a3);
    if (v12) {
      goto LABEL_25;
    }
    int v12 = chunking_markers(*(void *)a1, v9, a2, a3);
    if (v12) {
      goto LABEL_25;
    }
    goto LABEL_31;
  }
  if (v13)
  {
    unsigned int v18 = a2;
    uint64_t v19 = a2;
    while (1)
    {
      int v20 = *v19;
      v19 += 8;
      if (v20 == 21 && !strcmp(*((const char **)v18 + 3), "spell")) {
        break;
      }
      unsigned int v18 = v19;
      if (!--v13) {
        goto LABEL_31;
      }
    }
    *(_DWORD *)(v9 + 116) = 1;
    chunking_Init((uint64_t *)v9, *(void *)(a1 + 8));
    goto LABEL_28;
  }
LABEL_31:
  if (*(_DWORD *)(*(void *)(a1 + 16) + 120)) {
    *(_DWORD *)(a1 + 48) = (float)(*(float *)(*(void *)(a1 + 8) + 9176)
  }
                                               * (float)*(unsigned int *)(*(void *)(a1 + 8) + 9180))
                         / 0xA;
  int v11 = v72;
  uint64_t v23 = heap_Alloc(*(void *)(*(void *)a1 + 8), 4 * (v10[1142].i32[0] * v72 * v10[1150].i32[1]));
  *(void *)(a1 + 80) = v23;
  if (!v23) {
    goto LABEL_44;
  }
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = v10[1142].i32[0] * v72;
  *(_DWORD *)(a1 + 56) = 0;
LABEL_35:
  uint64_t v24 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 16);
  if (!v24)
  {
LABEL_44:
    int v12 = 10;
    goto LABEL_25;
  }
  uint64_t v21 = v24;
  uint64_t v25 = heap_Alloc(*(void *)(*(void *)a1 + 8), 800008);
  if (v25)
  {
    *(_DWORD *)(v21 + 8) = 200002;
    *(void *)uint64_t v21 = v25;
    fi_net_give_address(**(void **)(v9 + 56));
    if (*(_DWORD *)(v9 + 116))
    {
      if ((*(_DWORD *)(a1 + 52) & 0xFFFFFFFE) == 2)
      {
        unsigned int v26 = 0;
        goto LABEL_40;
      }
      uint64_t v39 = *(unsigned int *)(a1 + 60);
      uint64_t v40 = *(void *)(v9 + 64);
      int v41 = *(unsigned __int16 *)(v40 + 48) - 1;
      BOOL v75 = v39 == v41;
      uint64_t v42 = *(void *)(v40 + 16);
      if (v39) {
        unsigned int v43 = *(_DWORD *)(v42 + 4 * (v39 - 1)) + 1;
      }
      else {
        unsigned int v43 = 0;
      }
      unsigned int v45 = *(_DWORD *)(v42 + 4 * v39) - (v39 == v41);
      uint64_t v46 = *(void *)(*(void *)(v9 + 88) + 8);
      uint64_t v47 = (uint64_t)v10;
      if (v39) {
        unsigned int v48 = *(_DWORD *)(v46 + 4 * (v39 - 1)) + 1;
      }
      else {
        unsigned int v48 = 0;
      }
      int v49 = *(_DWORD *)(v46 + 4 * v39);
      if (v45 == v43 - 1) {
        goto LABEL_58;
      }
      if (v45 < v43)
      {
        int v12 = 7;
        goto LABEL_21;
      }
      if (v45 == v43)
      {
LABEL_58:
        unsigned int v45 = v43;
      }
      else
      {
        unsigned int v54 = *(uint64_t **)(v9 + 32);
        uint64_t v56 = *v54;
        uint64_t v55 = v54[1];
        int v57 = *(_DWORD *)(v56 + 12);
        if (*(float *)(v55 + 4 * (v57 * v43 + 1)) == 1.0)
        {
          ++v43;
          *(_WORD *)(*(void *)(v40 + 40) + 2 * v39) = 200;
        }
        if (*(float *)(v55 + 4 * (v57 * v45 + 1)) == 1.0)
        {
          --v45;
          *(_WORD *)(*(void *)(v40 + 32) + 2 * v39) = 200;
        }
      }
      int v33 = infer_acoustic_seq2seq_process_range_FrameInfer(a1 + 44, (uint64_t *)v9, v43, v45 - v43 + 1);
      if (!v33)
      {
        unsigned int v73 = *(_DWORD *)(*(void *)(v9 + 56) + 40);
        unsigned int v69 = *(_DWORD *)(v47 + 9204);
        uint64_t v50 = v48;
        int v51 = v49;
        uint64_t v52 = (uint64_t)&a2[8 * v48];
        int v53 = v51 - v48 + 1;
        int v33 = calc_Marker_Pos_seq2seq_notrim(a1, v47, v52, v53, **(_DWORD **)v21, *(_DWORD *)(*(void *)v21 + 4), *(void *)v21 + 8);
        if (!v33)
        {
          uint64_t v61 = v52;
          uint64_t v71 = v47;
          unsigned int v26 = (v73 >> 2) / v69;
          int v62 = *(_DWORD *)(a1 + 28);
          int v63 = *(_DWORD *)(a1 + 40);
          uint64_t v64 = v50;
          if (v26 > v63 - v62)
          {
            do
              v63 *= 2;
            while (v26 > v63 - v62);
            *(_DWORD *)(a1 + 40) = v63;
          }
          uint64_t v65 = v61;
          uint64_t v66 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 80), 4 * (*(_DWORD *)(v71 + 9204) * v63));
          *(void *)(a1 + 80) = v66;
          if (v66)
          {
            if (!*(_DWORD *)(v9 + 120)
              || (*(_DWORD *)(a1 + 64) = 0, (int v12 = chunking_frames(a1, *(void *)a1, v71, v26, v9)) == 0)
              && (int v12 = chunking_secondary_markers(*(void *)a1, v71, v9, v65, v53, (unsigned int *)&v75)) == 0)
            {
              if (v53)
              {
                int v67 = *(_DWORD *)(a1 + 32);
                int v68 = &a2[8 * v64 + 3];
                do
                {
                  *v68 += v67;
                  v68 += 8;
                  --v53;
                }
                while (v53);
              }
              uint64_t v10 = (int32x2_t *)v71;
LABEL_40:
              if (*(_DWORD *)(v9 + 120))
              {
                uint64_t v27 = *(unsigned int *)(a1 + 64);
                uint64_t v28 = *(void *)(v9 + 72);
                unsigned int v29 = *(unsigned __int16 *)(v28 + 24);
                if (v27 <= v29)
                {
                  uint64_t v30 = *(void *)(v28 + 16);
                  if (v27) {
                    int v31 = *(_DWORD *)(v30 + 4 * (v27 - 1)) + 3;
                  }
                  else {
                    int v31 = 0;
                  }
                  int v58 = *(_DWORD *)(v30 + 4 * v27) - v31;
                  if (v27 == v29 - 1) {
                    int v59 = v58 + 1;
                  }
                  else {
                    int v59 = v58 + 3;
                  }
                  memcpy((void *)(*(void *)(a1 + 80) + 4 * (v10[1150].i32[1] * *(_DWORD *)(a1 + 28))), (const void *)(*(void *)(*(void *)(v9 + 56) + 24)+ 4 * (v10[1150].i32[1] * v31)), 4 * (v10[1150].i32[1] * v59));
                  LODWORD(v27) = *(_DWORD *)(a1 + 32) + v10[1148].i32[1] * v59;
                  *(_DWORD *)(a1 + 28) += v59;
                  *(_DWORD *)(a1 + 32) = v27;
                  LODWORD(v27) = *(_DWORD *)(a1 + 64);
                  unsigned int v29 = *(unsigned __int16 *)(*(void *)(v9 + 72) + 24);
                }
                *(_DWORD *)(a1 + 64) = v27 + 1;
                if ((int)v27 + 1 < v29)
                {
                  if (v27) {
                    int v6 = 3;
                  }
                  else {
                    int v6 = 2;
                  }
LABEL_81:
                  int v12 = 0;
LABEL_82:
                  *(_DWORD *)(a1 + 52) = v6;
                  goto LABEL_19;
                }
              }
              else
              {
                memcpy((void *)(*(void *)(a1 + 80) + 4 * (v10[1150].i32[1] * *(_DWORD *)(a1 + 28))), *(const void **)(*(void *)(v9 + 56) + 24), 4 * v10[1150].i32[1] * v26);
                int v44 = *(_DWORD *)(a1 + 32) + v10[1148].i32[1] * v26;
                *(_DWORD *)(a1 + 28) += v26;
                *(_DWORD *)(a1 + 32) = v44;
              }
              int v60 = *(_DWORD *)(a1 + 60) + 1;
              *(_DWORD *)(a1 + 60) = v60;
              if (v60 == *(unsigned __int16 *)(*(void *)(v9 + 64) + 48)) {
                int v6 = 5;
              }
              else {
                int v6 = 4;
              }
              goto LABEL_81;
            }
          }
          else
          {
            int v12 = 10;
          }
LABEL_20:
          if (!v21) {
            goto LABEL_24;
          }
          goto LABEL_21;
        }
      }
      goto LABEL_61;
    }
    int v32 = *a3;
    BOOL v75 = 1;
    int v33 = infer_acoustic_seq2seq_process_range_FrameInfer(a1 + 44, (uint64_t *)v9, 1, v11 - 2);
    if (v33
      || (unsigned int v34 = *(_DWORD *)(*(void *)(v9 + 56) + 40),
          uint64_t v35 = (uint64_t)v10,
          unsigned __int32 v36 = v10[1150].u32[1],
          (int v33 = calc_Marker_Pos_seq2seq_notrim(a1, v35, (uint64_t)a2, v32, **(_DWORD **)v21, *(_DWORD *)(*(void *)v21 + 4), *(void *)v21 + 8)) != 0))
    {
LABEL_61:
      int v12 = v33;
      goto LABEL_21;
    }
    unsigned int v37 = (v34 >> 2) / v36;
    *(_DWORD *)(a1 + 24) = *(unsigned __int16 *)(*(void *)(v9 + 8) + 10);
    if (v37 <= *(_DWORD *)(a1 + 40))
    {
      unsigned int v38 = *(void **)(a1 + 80);
    }
    else
    {
      *(_DWORD *)(a1 + 40) = v37;
      unsigned int v38 = (void *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 80), 4 * *(_DWORD *)(v35 + 9204) * v37);
      *(void *)(a1 + 80) = v38;
      if (!v38) {
        goto LABEL_49;
      }
    }
    memcpy(v38, *(const void **)(*(void *)(v9 + 56) + 24), 4 * *(_DWORD *)(v35 + 9204) * v37);
    int v12 = 0;
    *(_DWORD *)(a1 + 28) = v37;
    int v6 = 5;
    goto LABEL_82;
  }
LABEL_49:
  int v12 = 10;
LABEL_21:
  if (*(void *)v21) {
    heap_Free(*(void **)(*(void *)a1 + 8), *(void *)v21);
  }
  heap_Free(*(void **)(*(void *)a1 + 8), v21);
LABEL_24:
  if (v12) {
    goto LABEL_25;
  }
  return 0;
}

uint64_t siren_pipeline_Process_seq2seq_ST(uint64_t a1, int *a2, int *a3, int *a4)
{
  uint64_t v115 = 0;
  int v6 = *(_DWORD *)(a1 + 52);
  if (v6 == 6 || (v6 != 4 ? (BOOL v7 = v6 == 1) : (BOOL v7 = 1), !v7))
  {
    uint64_t v21 = 0;
    int v13 = 17;
    goto LABEL_26;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  int v12 = *(unsigned __int16 *)(*(void *)(v10 + 8) + 10);
  if (*(_DWORD *)(a1 + 56))
  {
    int v13 = feat_phone_Process(*(void *)(a1 + 16));
    if (v13) {
      goto LABEL_32;
    }
    BOOL v112 = (int32x2_t *)v11;
    *(_DWORD *)(a1 + 44) = 0;
    paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"voice", &v115);
    unint64_t v14 = *a3;
    if (v14)
    {
      unint64_t v15 = 0;
      unsigned int v16 = a2[3];
      int v17 = v115;
      unsigned int v18 = a2;
      do
      {
        if (v18[3] > v16) {
          break;
        }
        if (*v18 == 60)
        {
          seq2seq_select_speaker(a1, (uint64_t)v18, v17);
          unint64_t v14 = *a3;
        }
        ++v15;
        v18 += 8;
      }
      while (v15 < v14);
    }
    uint64_t v11 = (uint64_t)v112;
    if (*(_DWORD *)(v10 + 116))
    {
      int v13 = chunking_Process(v112, v10, 0, 0);
      if (v13) {
        goto LABEL_32;
      }
      int v13 = chunking_markers(*(void *)a1, v10, a2, a3);
      if (v13) {
        goto LABEL_32;
      }
    }
    uint64_t v19 = heap_Alloc(*(void *)(*(void *)a1 + 8), 2 * (v112[1142].i32[0] * v12 * *(_DWORD *)(*(void *)(a1 + 8) + 9188)));
    *(void *)(a1 + 88) = v19;
    if (!v19) {
      goto LABEL_34;
    }
    *(_DWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 36) = v112[1142].i32[0] * v12 * *(_DWORD *)(*(void *)(a1 + 8) + 9188);
    *(_DWORD *)(a1 + 56) = 0;
  }
  uint64_t v20 = heap_Alloc(*(void *)(*(void *)a1 + 8), 16);
  if (!v20)
  {
LABEL_34:
    int v13 = 10;
    goto LABEL_32;
  }
  uint64_t v21 = v20;
  uint64_t v22 = heap_Alloc(*(void *)(*(void *)a1 + 8), 800008);
  *(void *)uint64_t v21 = v22;
  if (!v22)
  {
    int v13 = 10;
LABEL_30:
    heap_Free(*(void **)(*(void *)a1 + 8), v21);
    goto LABEL_31;
  }
  *(_DWORD *)(v21 + 8) = 200002;
  fi_net_give_address(**(void **)(v10 + 56));
  if (!*(_DWORD *)(v10 + 116))
  {
    uint64_t v116 = 0;
    int v28 = *a3;
    unsigned int v110 = v12 - 2;
    int v13 = infer_acoustic_seq2seq_process_range(a1 + 44, (uint64_t *)v10, 1, v12 - 2);
    if (v13) {
      goto LABEL_28;
    }
    unsigned int v29 = *(_DWORD *)(*(void *)(v10 + 56) + 44);
    int v13 = calc_Marker_Pos_seq2seq((_DWORD *)a1, v11, (uint64_t)a2, v28, **(_DWORD **)v21, *(_DWORD *)(*(void *)v21 + 4), *(void *)v21 + 8, (_DWORD *)&v116 + 1, &v116);
    if (v13) {
      goto LABEL_28;
    }
    unsigned int v30 = v29 >> 1;
    *(_DWORD *)(a1 + 24) = *(unsigned __int16 *)(*(void *)(v10 + 8) + 10);
    if (v29 >> 1 <= *(_DWORD *)(a1 + 36))
    {
      int v32 = *(void **)(a1 + 88);
      size_t v31 = v29 & 0xFFFFFFFE;
    }
    else
    {
      *(_DWORD *)(a1 + 36) = v30;
      size_t v31 = v29 & 0xFFFFFFFE;
      int v32 = (void *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 88), v31);
      *(void *)(a1 + 88) = v32;
      if (!v32)
      {
        int v13 = 10;
LABEL_28:
        if (*(void *)v21) {
          heap_Free(*(void **)(*(void *)a1 + 8), *(void *)v21);
        }
        goto LABEL_30;
      }
    }
    memcpy(v32, *(const void **)(*(void *)(v10 + 56) + 32), v31);
    *(_DWORD *)(a1 + 32) = v30;
    int v6 = 5;
    *(_DWORD *)(a1 + 52) = 5;
    LODWORD(v52) = 1;
    BOOL v53 = 1;
    unsigned int v54 = v29 >> 1;
    goto LABEL_80;
  }
  uint64_t v116 = 0;
  uint64_t v23 = *(unsigned int *)(a1 + 60);
  uint64_t v24 = *(void *)(v10 + 64);
  uint64_t v25 = *(void *)(v24 + 16);
  if (v23) {
    unsigned int v26 = *(_DWORD *)(v25 + 4 * (v23 - 1)) + 1;
  }
  else {
    unsigned int v26 = 1;
  }
  unsigned int v33 = *(_DWORD *)(v25 + 4 * v23) - (v23 == *(unsigned __int16 *)(v24 + 48) - 1);
  uint64_t v34 = *(void *)(*(void *)(v10 + 88) + 8);
  if (v23) {
    unsigned int v35 = *(_DWORD *)(v34 + 4 * (v23 - 1)) + 1;
  }
  else {
    unsigned int v35 = 0;
  }
  unsigned int v36 = v26;
  if (v33 != v26 - 1)
  {
    unsigned int v36 = v33;
    if (v33 < v26)
    {
      int v13 = 7;
      goto LABEL_27;
    }
  }
  int v108 = *(_DWORD *)(v34 + 4 * v23);
  int v105 = *(unsigned __int16 *)(v24 + 48) - 1;
  unsigned int v37 = *(uint64_t **)(v10 + 32);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  int v40 = *(_DWORD *)(v39 + 12);
  if (*(float *)(v38 + 4 * (v40 * v26 + 1)) == 1.0)
  {
    ++v26;
    *(_WORD *)(*(void *)(v24 + 40) + 2 * v23) = 200;
  }
  unsigned int v113 = (_DWORD *)v11;
  int v41 = a2;
  if (*(float *)(v38 + 4 * (v40 * v36 + 1)) == 1.0)
  {
    --v36;
    *(_WORD *)(*(void *)(v24 + 32) + 2 * v23) = 200;
  }
  unsigned int v110 = v36;
  unsigned int v106 = v26;
  int v13 = infer_acoustic_seq2seq_process_range(a1 + 44, (uint64_t *)v10, v26, v36 - v26 + 1);
  if (!v13)
  {
    unsigned int v103 = *(_DWORD *)(*(void *)(v10 + 56) + 44);
    uint64_t v42 = v35;
    uint64_t v43 = (uint64_t)&v41[8 * v35];
    int v44 = v108 - v35;
    int v45 = v108 - v35 + 1;
    int v13 = calc_Marker_Pos_seq2seq((_DWORD *)a1, (uint64_t)v113, v43, v44 + 1, **(_DWORD **)v21, *(_DWORD *)(*(void *)v21 + 4), *(void *)v21 + 8, (_DWORD *)&v116 + 1, &v116);
    if (!v13)
    {
      if (v45)
      {
        int v46 = *(_DWORD *)(a1 + 32);
        uint64_t v47 = &v41[8 * v42 + 3];
        do
        {
          *v47 += v46;
          v47 += 8;
          --v45;
        }
        while (v45);
      }
      unsigned int v48 = v103 >> 1;
      if (*(_DWORD *)(a1 + 60))
      {
        uint64_t v49 = *(void *)(v10 + 56);
        unint64_t v50 = *(unsigned int *)(v49 + 44);
        if (v50 >= 2)
        {
          uint64_t v56 = 0;
          uint64_t v57 = *(void *)(v49 + 32);
          unint64_t v51 = v50 >> 1;
          int v58 = v113[2285];
          a2 = v41;
          while (1)
          {
            int v59 = *(__int16 *)(v57 + 2 * v56);
            if (v59 < -v58 || v58 < v59) {
              break;
            }
            if (v51 == ++v56) {
              goto LABEL_71;
            }
          }
          LODWORD(v51) = v56;
        }
        else
        {
          LODWORD(v51) = 0;
          a2 = v41;
        }
LABEL_71:
        uint64_t v55 = v113[2284] * v113[2297] * (v51 / v113[2297] / v113[2284]);
        v48 -= v55;
      }
      else
      {
        uint64_t v55 = 0;
        a2 = v41;
      }
      int v62 = *(_DWORD *)(a1 + 32);
      unsigned int v61 = *(_DWORD *)(a1 + 36);
      if (v48 > v61 - v62)
      {
        do
          v61 *= 2;
        while (v48 > v61 - v62);
        *(_DWORD *)(a1 + 36) = v61;
      }
      uint64_t v63 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 88), 2 * v61);
      *(void *)(a1 + 88) = v63;
      if (!v63)
      {
        int v13 = 10;
        goto LABEL_27;
      }
      BOOL v53 = v23 == v105;
      memcpy((void *)(v63 + 2 * *(unsigned int *)(a1 + 32)), (const void *)(*(void *)(*(void *)(v10 + 56) + 32) + 2 * v55), 2 * v48);
      unsigned int v54 = *(_DWORD *)(a1 + 32) + v48;
      *(_DWORD *)(a1 + 32) = v54;
      int v64 = *(_DWORD *)(a1 + 60) + 1;
      *(_DWORD *)(a1 + 60) = v64;
      if (v64 == *(unsigned __int16 *)(*(void *)(v10 + 64) + 48)) {
        int v6 = 5;
      }
      else {
        int v6 = 4;
      }
      *(_DWORD *)(a1 + 52) = v6;
      LODWORD(v52) = v106;
LABEL_80:
      int v65 = v110 + v53;
      uint64_t v66 = *(_DWORD **)(a1 + 8);
      if (v54)
      {
        uint64_t v67 = 0;
        int v68 = v66[2285];
        do
        {
          int v69 = *(__int16 *)(*(void *)(a1 + 88) + 2 * v67);
          if (v69 < -v68 || v68 < v69) {
            goto LABEL_89;
          }
          ++v67;
        }
        while (v54 != v67);
        LODWORD(v67) = v54;
      }
      else
      {
        LODWORD(v67) = 0;
      }
LABEL_89:
      if ((int)v52 > v65)
      {
        int v13 = 0;
        goto LABEL_26;
      }
      int v100 = 0;
      uint64_t v71 = *a3;
      uint64_t v72 = *(void *)(*(void *)(a1 + 16) + 8);
      uint64_t v73 = v66[2284] * v66[2297] * (v67 / v66[2297] / v66[2284]);
      int v104 = a2;
      uint64_t v52 = (int)v52;
      int v74 = v65 + 1;
      uint64_t v99 = (v71 - 1);
      int v98 = &a2[8 * v99 + 3];
      int v101 = a2 + 4;
      uint64_t v109 = v71;
      unsigned int v111 = *(_DWORD **)(a1 + 8);
      uint64_t v107 = v72;
      int v102 = v65 + 1;
LABEL_92:
      if (*(_DWORD *)(a1 + 108) != *(unsigned __int8 *)(*(void *)(v72 + 32) + v52)) {
        goto LABEL_120;
      }
      int v75 = *(unsigned __int16 *)(*(void *)(v72 + 1784) + 2 * v52);
      if (!*(_WORD *)(*(void *)(v72 + 1784) + 2 * v52)) {
        goto LABEL_120;
      }
      int v76 = v66[4];
      if (!v71)
      {
LABEL_100:
        unsigned int v80 = 0;
        goto LABEL_101;
      }
      uint64_t v77 = v71;
      uint64_t v78 = a2;
      int v79 = v52;
      while (1)
      {
        if (*v78 == 33)
        {
          if (!v79)
          {
            unsigned int v90 = v78[3];
            if (v90 >= v54) {
              unsigned int v80 = v54;
            }
            else {
              unsigned int v80 = v90;
            }
            if ((int)v71 >= 1 && v90 > v54)
            {
              uint64_t v92 = v98;
              uint64_t v91 = v99;
              int v93 = *v98;
              uint64_t v94 = v71;
              int v95 = v100;
              if (*v98 <= v54)
              {
LABEL_130:
                int v100 = v95;
                v104[8 * v91 + 4] += v54 - v95;
              }
              else
              {
                while (1)
                {
                  int v95 = v93;
                  *uint64_t v92 = v54;
                  v104[8 * v91 + 4] = 0;
                  if (v94 <= 1) {
                    break;
                  }
                  uint64_t v91 = (v94 - 2);
                  int v96 = &v104[8 * v91];
                  unsigned int v97 = v96[3];
                  uint64_t v92 = v96 + 3;
                  int v93 = v97;
                  --v94;
                  if (v97 <= v54) {
                    goto LABEL_130;
                  }
                }
                int v100 = v93;
              }
              unsigned int v80 = v54;
            }
LABEL_101:
            unsigned int v81 = v76 * v75 / 0x3E8u;
            unsigned int v82 = *(_DWORD *)(a1 + 36);
            uint64_t v114 = v52;
            if (v82 < v81 + v54)
            {
              do
                v82 *= 2;
              while (v82 < v81 + v54);
              *(_DWORD *)(a1 + 36) = v82;
            }
            uint64_t v83 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 88), 2 * v82);
            *(void *)(a1 + 88) = v83;
            memmove(&v83[2 * v80 + 2 * v81], &v83[2 * v80], 2 * (*(_DWORD *)(a1 + 32) - v80));
            unsigned int v84 = v81;
            unsigned int v85 = v80;
            if ((int)v73 - 1 < v81)
            {
              unsigned int v85 = v80;
              unsigned int v84 = v81;
              do
              {
                memcpy(&v83[2 * v85], v83, 2 * v73);
                v85 += v73;
                v84 -= v73;
              }
              while (v84 >= v73);
            }
            if (v84)
            {
              uint64_t v86 = &v83[2 * v85];
              if (v84 >= v73) {
                bzero(v86, 2 * v84);
              }
              else {
                memcpy(v86, v83, 2 * v84);
              }
            }
            unsigned int v54 = *(_DWORD *)(a1 + 32) + v81;
            *(_DWORD *)(a1 + 32) = v54;
            uint64_t v71 = v109;
            if (v109)
            {
              unint64_t v87 = v101;
              uint64_t v88 = v109;
              uint64_t v66 = v111;
              uint64_t v52 = v114;
              uint64_t v72 = v107;
              int v74 = v102;
              do
              {
                unsigned int v89 = *(v87 - 1);
                if (*v87 + v89 >= v80) {
                  *v87 += v81;
                }
                if (v89 >= v80) {
                  *(v87 - 1) = v89 + v81;
                }
                v87 += 8;
                --v88;
              }
              while (v88);
              a2 = v104;
            }
            else
            {
              a2 = v104;
              uint64_t v66 = v111;
              uint64_t v52 = v114;
              uint64_t v72 = v107;
              int v74 = v102;
            }
LABEL_120:
            if (v74 == ++v52)
            {
              int v13 = 0;
              int v6 = *(_DWORD *)(a1 + 52);
LABEL_26:
              *a4 = v6;
              break;
            }
            goto LABEL_92;
          }
          --v79;
        }
        v78 += 8;
        if (!--v77) {
          goto LABEL_100;
        }
      }
    }
  }
LABEL_27:
  if (v21) {
    goto LABEL_28;
  }
LABEL_31:
  if (v13)
  {
LABEL_32:
    *(_DWORD *)(a1 + 52) = 6;
    *a4 = 6;
    return v13 | 0x84E02000;
  }
  return 0;
}

uint64_t siren_pipeline_ProcessEnd(uint64_t a1, _DWORD *a2)
{
  int v2 = *(_DWORD *)(a1 + 52);
  if ((v2 - 2) <= 3)
  {
    *a2 = v2;
    *(_DWORD *)(a1 + 104) = 0;
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 52) = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    if (v4)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v4);
      *(void *)(a1 + 80) = 0;
    }
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v5);
      *(void *)(a1 + 88) = 0;
    }
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6 && *(_DWORD *)(v6 + 116)) {
      chunking_Close((uint64_t *)v6, *(void *)(a1 + 8));
    }
  }
  return 0;
}

uint64_t siren_pipeline_freeSecondaryChunkingMemory(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      if (*(_DWORD *)(v2 + 120))
      {
        uint64_t v3 = *(void *)(v2 + 88);
        if (v3)
        {
          uint64_t v4 = *(void *)(v3 + 16);
          if (v4)
          {
            heap_Free(*(void **)(*a1 + 8), v4);
            uint64_t v2 = a1[2];
            *(void *)(*(void *)(v2 + 88) + 16) = 0;
          }
        }
        uint64_t v5 = *(void *)(v2 + 72);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6)
          {
            heap_Free(*(void **)(*a1 + 8), v6);
            *(void *)(*(void *)(a1[2] + 72) + 16) = 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t siren_pipline_GetPhoneChunkingSpellPause(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 64) + 24)
                             + 2 * (*(_DWORD *)(a1 + 60) - 1));
}

uint64_t siren_pipeline_GetSecondaryChunkingCount(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 72) + 24);
}

uint64_t siren_pipeline_GetPhoneChunkingCount(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 64) + 48);
}

uint64_t siren_pipeline_GetMarkerCount(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 16) + 88) + 8);
  if (a2) {
    int v3 = -*(_DWORD *)(v2 + 4 * (a2 - 1));
  }
  else {
    int v3 = 1;
  }
  return (v3 + *(_DWORD *)(v2 + 4 * a2));
}

uint64_t siren_pipeline_GetSecondaryMarkerCount(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 16) + 88) + 16);
  unsigned int v3 = v1 - 1;
  if (v1 != 1) {
    int v1 = -*(_DWORD *)(v2 + 4 * (v1 - 2));
  }
  return (v1 + *(_DWORD *)(v2 + 4 * v3));
}

uint64_t siren_pipeline_GetAudioStream(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 52) == 6 || !*(void *)(*(void *)(result + 16) + 56)) {
      return 0;
    }
    else {
      return *(void *)(result + 88);
    }
  }
  return result;
}

uint64_t siren_pipeline_GetAcousticStream(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 52) == 6 || !*(void *)(*(void *)(result + 16) + 56)) {
      return 0;
    }
    else {
      return *(void *)(result + 80);
    }
  }
  return result;
}

uint64_t siren_pipeline_GetSampleChunk(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 52) == 6) {
      return 0;
    }
    else {
      return *(void *)(*(void *)(result + 16) + 80);
    }
  }
  return result;
}

uint64_t siren_pipeline_GetDurationStream(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 52) == 6) {
      return 0;
    }
    uint64_t v1 = *(void *)(*(void *)(result + 16) + 48);
    if (!v1) {
      return 0;
    }
    else {
      return *(void *)(v1 + 56);
    }
  }
  return result;
}

uint64_t siren_pipeline_GetPhoneCount(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 52) == 6) {
      return 0;
    }
    else {
      return *(unsigned int *)(result + 24);
    }
  }
  return result;
}

uint64_t siren_pipeline_GetFrameCount(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 52) == 6) {
      return 0;
    }
    else {
      return *(unsigned int *)(result + 28);
    }
  }
  return result;
}

uint64_t siren_pipeline_GetFrameSize(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(*(void *)(result + 8) + 9204);
  }
  return result;
}

uint64_t siren_pipeline_GetiSample(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 32);
  }
  return result;
}

uint64_t siren_pipeline_GetTailingPauseLen(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 52) == 6) {
      return 0;
    }
    uint64_t v1 = *(void *)(result + 16);
    if (!*(_DWORD *)(v1 + 116) || *(_DWORD *)(v1 + 120) && *(_DWORD *)(result + 64)) {
      return 0;
    }
    else {
      return *(unsigned __int16 *)(*(void *)(*(void *)(v1 + 64) + 32)
    }
                                 + 2 * (*(_DWORD *)(result + 60) - 1));
  }
  return result;
}

uint64_t siren_pipeline_SetChunking(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 16) + 116) = a2;
  return result;
}

uint64_t siren_pipeline_SetSecondaryChunking(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 16) + 120) = a2;
  return result;
}

uint64_t siren_pipeline_SetNFrameInfer(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 16) + 136) = a2;
  return result;
}

uint64_t siren_pipeline_SetSpeakerID(uint64_t result, int a2)
{
  *(_DWORD *)(result + 44) = a2;
  return result;
}

uint64_t siren_pipeline_GetChunking(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 16) + 116);
}

uint64_t siren_pipeline_GetSecondaryChunking(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 16) + 120);
}

uint64_t siren_pipeline_SetSampleChunkCounter(uint64_t result, int a2)
{
  *(_DWORD *)(result + 104) = a2;
  return result;
}

uint64_t siren_pipeline_reset_acoustic_net_seed(uint64_t a1)
{
  return infer_acoustic_reset_seed(*(void *)(a1 + 16));
}

uint64_t seq2seq_select_speaker(uint64_t a1, uint64_t a2, char *__s1)
{
  if (!strcmp(__s1, "Han-Ml"))
  {
    uint64_t v9 = *(const char **)(a2 + 24);
    uint64_t result = strcmp(v9, "neutral");
    if (!result) {
      goto LABEL_20;
    }
    uint64_t result = strcmp(v9, "joyful");
    if (!result) {
      goto LABEL_21;
    }
    uint64_t v10 = "apologetic";
  }
  else
  {
    if (strcmp(__s1, "Lilian-Ml"))
    {
      uint64_t result = strcmp(__s1, "Yue-Ml");
      if (result) {
        return result;
      }
      BOOL v7 = *(const char **)(a2 + 24);
      uint64_t result = strcmp(v7, "neutral");
      if (result)
      {
        uint64_t result = strcmp(v7, "cheerful");
        if (result)
        {
          uint64_t result = strcmp(v7, "empathetic");
          if (result)
          {
            uint64_t result = strcmp(v7, "apologetic");
            if (result)
            {
              uint64_t result = strcmp(v7, "apprehensive");
              if (result)
              {
                uint64_t result = strcmp(v7, "serious");
                if (result)
                {
                  uint64_t result = strcmp(v7, "sad");
                  if (result) {
                    return result;
                  }
                  int v8 = 6;
                }
                else
                {
                  int v8 = 5;
                }
              }
              else
              {
                int v8 = 4;
              }
            }
            else
            {
              int v8 = 3;
            }
            goto LABEL_22;
          }
          goto LABEL_19;
        }
LABEL_21:
        int v8 = 1;
        goto LABEL_22;
      }
LABEL_20:
      int v8 = 0;
      goto LABEL_22;
    }
    uint64_t v9 = *(const char **)(a2 + 24);
    uint64_t result = strcmp(v9, "neutral");
    if (!result) {
      goto LABEL_20;
    }
    uint64_t result = strcmp(v9, "happy");
    if (!result) {
      goto LABEL_21;
    }
    uint64_t v10 = "comforting";
  }
  uint64_t result = strcmp(v9, v10);
  if (result) {
    return result;
  }
LABEL_19:
  int v8 = 2;
LABEL_22:
  *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t chunking_markers(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 88);
  *(_WORD *)uint64_t v7 = *a4;
  uint64_t v8 = *(unsigned __int16 *)(v6 + 48);
  *(_WORD *)(v7 + 24) = v8;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), v8, 4);
  *(void *)(v7 + 8) = v9;
  if (!v9) {
    return 10;
  }
  if (v8)
  {
    uint64_t v10 = 0;
    unsigned __int16 v11 = 0;
    unsigned __int16 v12 = 0;
    uint64_t v13 = *(void *)(v6 + 16);
    do
    {
      for (unsigned int i = *(_DWORD *)(v13 + 4 * v10); i >= v12; ++v11)
      {
        if (*a4 <= v11) {
          break;
        }
        int v15 = *a3;
        a3 += 8;
        if (v15 == 33) {
          ++v12;
        }
      }
      *(_DWORD *)(v9 + 4 * v10++) = v11 - 1;
    }
    while (v10 != v8);
  }
  return 0;
}

uint64_t bubble_sort_markers(uint64_t result, unsigned int a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = (a3 - 1);
    if (v3 > a2)
    {
      int v4 = 0;
      uint64_t v5 = a2;
      while (1)
      {
        uint64_t v6 = (long long *)(result + 32 * v5++);
        uint64_t v7 = (long long *)(result + 32 * v5);
        if (*((_DWORD *)v6 + 3) > *((_DWORD *)v7 + 3))
        {
          long long v8 = *v6;
          long long v10 = v6[1];
          long long v9 = v7[1];
          *uint64_t v6 = *v7;
          v6[1] = v9;
          *uint64_t v7 = v8;
          v7[1] = v10;
          int v4 = 1;
        }
        if (v5 == v3)
        {
          if (!v4) {
            break;
          }
          int v4 = 0;
          uint64_t v5 = a2;
          if (v3 <= a2) {
            break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t calc_Marker_Pos_seq2seq_notrim(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7)
{
  unint64_t v14 = (_DWORD *)heap_Alloc(*(void *)(*(void *)a1 + 8), 4 * a6);
  if (v14)
  {
    uint64_t v32 = 0;
    transferAlign(a7, v14, a6, a5, (_DWORD *)&v32 + 1, &v32);
    if (a4)
    {
      uint64_t v15 = 0;
      LODWORD(v16) = 0;
      int v17 = *(_DWORD *)(a2 + 9188);
      uint64_t v18 = a3;
      unsigned int v19 = 1;
      do
      {
        if (*(_DWORD *)v18 == 33)
        {
          ++v19;
          *(void *)(v18 + 12) = (v16 * v17);
          if (v16 < a6)
          {
            uint64_t v16 = v16;
            int v20 = v17;
            while (v14[v16] <= v19)
            {
              *(_DWORD *)(v18 + 16) = v20;
              ++v16;
              v20 += v17;
              if (a6 == v16)
              {
                LODWORD(v16) = a6;
                break;
              }
            }
          }
          if (*(_DWORD *)(v18 + 24) == 35)
          {
            if (v15)
            {
              uint64_t v21 = a3 + 32 * v15;
              uint64_t v22 = (_DWORD *)(v21 + 12);
              uint64_t v23 = (_DWORD *)(v21 + 16);
              uint64_t v24 = (_DWORD *)(a3 + 12);
              uint64_t v25 = v15;
              do
              {
                unsigned int v26 = *(v24 - 3);
                BOOL v27 = v26 > 0x28;
                uint64_t v28 = (1 << v26) & 0x10004000100;
                BOOL v29 = v27 || v28 == 0;
                if (!v29 && *v24 == *v22) {
                  *v24 += *v23;
                }
                v24 += 8;
                --v25;
              }
              while (v25);
              LODWORD(v16) = v15;
            }
            else
            {
              LODWORD(v16) = 0;
            }
          }
        }
        else
        {
          *(void *)(v18 + 12) = (v16 * v17);
        }
        v18 += 32;
        ++v15;
      }
      while (v15 != a4);
    }
    bubble_sort_markers(a3, 0, a4);
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = 10;
  }
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v14);
  return v30;
}

uint64_t chunking_frames(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int v8 = 10;
  if (*(_DWORD *)(a1 + 48) <= 0xAu) {
    unsigned int v9 = 10;
  }
  else {
    unsigned int v9 = *(_DWORD *)(a1 + 48);
  }
  uint64_t v10 = *(void *)(a5 + 72);
  *(_WORD *)(v10 + 10) = a4;
  unsigned __int16 v11 = (unsigned int *)heap_Calloc(*(void **)(a2 + 8), (unsigned __int16)(a4 / v9 + 1), 4);
  *(void *)(v10 + 16) = v11;
  if (!v11) {
    goto LABEL_23;
  }
  if (v9 >= a4)
  {
    unsigned __int16 v13 = 0;
    unsigned int v15 = 0;
  }
  else
  {
    unsigned int v12 = 0;
    unsigned __int16 v13 = 0;
    float v14 = *(float *)(a3 + 9160);
    do
    {
      unsigned int v15 = v9;
      v11[v13] = v9 - 1;
      unsigned int v9 = (float)((float)v9 + (float)((float)(v9 - v12) * v14));
      ++v13;
      unsigned int v12 = v15;
    }
    while (v9 < a4);
  }
  if (v15 < a4) {
    v11[v13++] = a4 - 1;
  }
  uint64_t v16 = v13 - 2;
  if (v13 >= 2u)
  {
    unsigned int v17 = v11[v16];
    if (v11[v13 - 1] <= v17 + 2) {
      v11[v16] = v17 - 2;
    }
  }
  *(_WORD *)(v10 + 24) = v13;
  if (v13 == 2)
  {
    float v19 = (float)v11[1] + (float)((float)(*v11 + 1) * *(float *)(a3 + 9160));
    float v20 = (float)*v11;
  }
  else
  {
    if (v13 == 1)
    {
      float v18 = *(float *)(a3 + 9160) * (float)(*v11 + 1);
      goto LABEL_21;
    }
    uint64_t v21 = &v11[v13];
    unsigned int v22 = *(v21 - 2);
    float v19 = (float)*(v21 - 1) + (float)((float)(v22 - *(v21 - 3) + 1) * *(float *)(a3 + 9160));
    float v20 = (float)v22;
  }
  float v18 = (float)(v19 - v20) + 1.0;
LABEL_21:
  unsigned int v8 = 0;
  if (*(_DWORD *)(a1 + 48) < v18) {
    *(_DWORD *)(a1 + 48) = v18;
  }
LABEL_23:
  if (v11) {
    return v8;
  }
  else {
    return v8 | 0x84E02000;
  }
}

uint64_t chunking_secondary_markers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int *a6)
{
  uint64_t v10 = *(void *)(a3 + 72);
  uint64_t v11 = *(void *)(a3 + 88);
  uint64_t v12 = *(unsigned __int16 *)(v10 + 24);
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), v12, 4);
  *(void *)(v11 + 16) = v13;
  if (v13)
  {
    if (v12)
    {
      uint64_t v14 = 0;
      LODWORD(v15) = 0;
      uint64_t v16 = *(void *)(v10 + 16);
      do
      {
        uint64_t v17 = v14;
        if (v15 < a5)
        {
          unsigned int v18 = *(_DWORD *)(v16 + 4 * v14) + 1;
          uint64_t v15 = v15;
          float v19 = (unsigned int *)(a4 + 12 + 32 * v15);
          while (1)
          {
            unsigned int v20 = *v19;
            v19 += 8;
            if (v20 / *(_DWORD *)(a2 + 9188) >= v18) {
              break;
            }
            if (a5 == ++v15)
            {
              LODWORD(v15) = a5;
              break;
            }
          }
        }
        *(_DWORD *)(v13 + 4 * v17) = v15 - 1;
        uint64_t v14 = v17 + 1;
      }
      while (v17 + 1 != v12);
      uint64_t v21 = v17;
    }
    else
    {
      uint64_t v21 = 0xFFFFFFFFLL;
    }
    unsigned int v22 = *a6;
    if (*a6)
    {
      unsigned int v22 = 0;
      *(_DWORD *)(v13 + 4 * v21) = a5 - 1;
    }
  }
  else
  {
    unsigned int v22 = 10;
  }
  if (v13) {
    return v22;
  }
  else {
    return v22 | 0x84E02000;
  }
}

uint64_t transferAlign(uint64_t result, _DWORD *a2, unsigned int a3, int a4, _DWORD *a5, _DWORD *a6)
{
  *a5 = 0;
  *a6 = 0;
  if (a3)
  {
    int v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = a3;
    do
    {
      a2[v7] = 0;
      if (a4)
      {
        uint64_t v9 = 0;
        float v10 = 0.0;
        do
        {
          float v11 = *(float *)(result + 4 * (v6 + v9));
          if (v11 > v10)
          {
            a2[v7] = v9;
            float v10 = v11;
          }
          ++v9;
        }
        while (a4 != v9);
      }
      ++v7;
      v6 += a4;
    }
    while (v7 != a3);
    if (a3 >= 2)
    {
      uint64_t v12 = a2 + 1;
      uint64_t v13 = a3 - 1;
      do
      {
        unsigned int v15 = *(v12 - 1);
        unsigned int v14 = *v12;
        if (*v12 >= v15)
        {
          if (!v14)
          {
            ++*a5;
            unsigned int v14 = *v12;
          }
        }
        else
        {
          *uint64_t v12 = v15;
          unsigned int v14 = v15;
        }
        if (v14 == a4 - 1) {
          ++*a6;
        }
        ++v12;
        --v13;
      }
      while (v13);
    }
    do
    {
      ++*a2++;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t calc_Marker_Pos_seq2seq(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t v17 = (_DWORD *)heap_Alloc(*(void *)(*(void *)a1 + 8), 4 * a6);
  if (v17)
  {
    transferAlign(a7, v17, a6, a5, a8, a9);
    if (a4)
    {
      int v18 = 0;
      int v19 = a1[15];
      BOOL v20 = v19 == 0;
      unsigned int v21 = v19 != 0;
      if (v20) {
        LODWORD(v22) = 0;
      }
      else {
        LODWORD(v22) = *a8;
      }
      int v23 = 5 * *(_DWORD *)(a2 + 9188);
      do
      {
        if (*(_DWORD *)a3 == 33)
        {
          ++v21;
          *(void *)(a3 + 12) = (v22 * v23);
          if (v22 < a6)
          {
            uint64_t v22 = v22;
            int v24 = v23;
            while (v17[v22] <= v21)
            {
              *(_DWORD *)(a3 + 16) = v24;
              ++v22;
              v24 += v23;
              if (a6 == v22)
              {
                LODWORD(v22) = a6;
                break;
              }
            }
          }
        }
        else
        {
          *(void *)(a3 + 12) = (v22 * v23);
        }
        a3 += 32;
        ++v18;
      }
      while (v18 != a4);
    }
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v25 = 10;
  }
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v17);
  return v25;
}

uint64_t siren_pipeline_loc_ForceFESilDur(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(unsigned __int16 *)(v2 + 10);
  if (*(_WORD *)(v2 + 10))
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(result + 8);
    uint64_t v6 = *(void *)(v2 + 32);
    do
    {
      if (*(_DWORD *)(result + 108) == *(unsigned __int8 *)(v6 + v4))
      {
        unsigned int v7 = *(unsigned __int16 *)(*(void *)(v2 + 1784) + 2 * v4);
        if (*(_WORD *)(*(void *)(v2 + 1784) + 2 * v4))
        {
          unsigned int v8 = *(unsigned __int16 *)(v5 + 32);
          if (v8 <= v7) {
            int v9 = v7 / v8;
          }
          else {
            int v9 = 2;
          }
          uint64_t v10 = *(void *)(v1 + 48);
          uint64_t v11 = *(void *)(v10 + 56);
          *(_DWORD *)(v10 + 24) += v9 - *(_DWORD *)(v11 + 4 * v4);
          *(_DWORD *)(v11 + 4 * v4) = v9;
        }
      }
      ++v4;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t calc_Max_Frame_Len(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 72);
  uint64_t v2 = *(unsigned __int16 *)(v1 + 24);
  if (*(_WORD *)(v1 + 24))
  {
    uint64_t v3 = *(void *)(v1 + 16);
    do
    {
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t select_bet6_FeatureExtractObjOpen(_WORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v24 = 0;
  *a8 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v24);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v15 = heap_Calloc(*(void **)(v24 + 8), 1, 72);
    if (!v15)
    {
      log_OutPublic(*(void *)(v24 + 32), (uint64_t)"SELECT_BET6", 72000, 0, v16, v17, v18, v19, v23);
      return 2229280778;
    }
    uint64_t v20 = v15;
    *(void *)uint64_t v15 = v24;
    *(void *)(v15 + 8) = a3;
    *(void *)(v15 + 16) = a4;
    *(void *)(v15 + 24) = a5;
    *(void *)(v15 + 32) = a6;
    *(_DWORD *)(v15 + 48) = a7 != 0;
    if (a7)
    {
      int v21 = nnfeatex_Init(v15 + 56, a4, a5, a7, v24);
      if (v21)
      {
        uint64_t inited = v21 | 0x84E02000;
        select_bet6_FeatureExtractObjClose(v20);
        return inited;
      }
      uint64_t inited = 0;
      *(void *)(v20 + 40) = a7;
    }
    *a8 = v20;
  }
  return inited;
}

uint64_t select_bet6_FeatureExtractObjClose(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 48))
  {
    int v2 = nnfeatex_DeInit((uint64_t *)(a1 + 56));
    if (v2) {
      uint64_t v3 = v2 | 0x84E02000;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  heap_Free(*(void **)(*(void *)a1 + 8), a1);
  return v3;
}

uint64_t select_bet6_FeatureExtractObjReopen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 48))
  {
    int v8 = nnfeatex_DeInit((uint64_t *)(a1 + 56));
    if (v8) {
      return v8 | 0x84E02000;
    }
  }
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 48) = a4 != 0;
  if (!a4) {
    return 0;
  }
  *(void *)(a1 + 40) = a4;
  int v10 = nnfeatex_Init(a1 + 56, *(void *)(a1 + 16), a2, a4, *(void *)a1);
  if (v10) {
    return v10 | 0x84E02000;
  }
  else {
    return 0;
  }
}

uint64_t select_bet6_FeatureExtractProcessStart(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  bzero(a4, 0xE48uLL);
  uint64_t v12 = *(void *)(a1 + 16);
  *a4 = *(void *)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(v12 + 272))(a2, a3, 128, 3, 0, 0);
  if (*(_DWORD *)(a1 + 48))
  {
    int v13 = nnfeatex_ProcessStart((uint64_t *)(a1 + 56), a2, a3, a4, a7);
    if (v13) {
      return v13 | 0x84E02000;
    }
  }
  uint64_t v15 = *(void *)a1;
  uint64_t v16 = *(void *)(a1 + 16);
  return usextract_ProcessStart(v15, (uint64_t)"SELECT_BET6", v16, a2, a3, (uint64_t)a4, a7);
}

uint64_t select_bet6_FeatureExtractProcess(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t *a6, _DWORD *a7, uint64_t *a8, _DWORD *a9)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v15 = *a1;
  if (a8) {
    BOOL v16 = a9 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = !v16;
  if (!v16)
  {
    *a8 = 0;
    *a9 = 0;
  }
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = *(__int16 *)(a5 + 10);
  do
  {
    if (*(unsigned char *)(*(void *)a5 + 2748 + v18) == 1) {
      ++v19;
    }
    ++v18;
  }
  while (v18 != 218);
  uint64_t v21 = heap_Calloc(*(void **)(v15 + 8), (v19 * v20), 1);
  if (!v21) {
    goto LABEL_124;
  }
  uint64_t v26 = v21;
  uint64_t v109 = a7;
  unsigned int v110 = a4;
  int v108 = v17;
  for (uint64_t i = 0; i != 218; ++i)
  {
    uint64_t v28 = *(void *)a5;
    int v29 = *(unsigned __int8 *)(*(void *)a5 + i + 2748);
    if (*(unsigned char *)(*(void *)a5 + i + 2748))
    {
      if (v29 == 2)
      {
        uint64_t v30 = heap_Calloc(*(void **)(v15 + 8), v20, 2);
        *(void *)(a5 + 8 * i + 1760) = v30;
        if (!v30) {
          goto LABEL_124;
        }
      }
      else if (v29 == 1)
      {
        *(void *)(a5 + 8 * i + 16) = v26;
        v26 += v20;
      }
      else
      {
        switch((int)i)
        {
          case '.':
            uint64_t v31 = heap_Calloc(*(void **)(v15 + 8), v20, 9);
            *(void *)(a5 + 3560) = v31;
            if (!v31) {
              goto LABEL_124;
            }
            continue;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_28;
          case '3':
            int v33 = *(unsigned __int16 *)(v28 + 2966);
            if (v33)
            {
              uint64_t v34 = heap_Calloc(*(void **)(v15 + 8), (v33 * v20), 4);
              *(void *)(a5 + 3568) = v34;
              if (!v34) {
                goto LABEL_124;
              }
            }
            continue;
          case '4':
            int v35 = *(unsigned __int16 *)(v28 + 2966);
            if (v35)
            {
              uint64_t v36 = heap_Calloc(*(void **)(v15 + 8), (v35 * v20), 4);
              *(void *)(a5 + 3576) = v36;
              if (!v36) {
                goto LABEL_124;
              }
            }
            continue;
          case '5':
            int v37 = *(unsigned __int16 *)(v28 + 3360);
            if (v37)
            {
              uint64_t v38 = heap_Calloc(*(void **)(v15 + 8), (v37 * v20), 4);
              *(void *)(a5 + 3584) = v38;
              if (!v38) {
                goto LABEL_124;
              }
            }
            continue;
          case '6':
            int v39 = *(unsigned __int16 *)(v28 + 3360);
            if (v39)
            {
              uint64_t v40 = heap_Calloc(*(void **)(v15 + 8), (v39 * v20), 4);
              *(void *)(a5 + 3592) = v40;
              if (!v40) {
                goto LABEL_124;
              }
            }
            continue;
          case '8':
            int v41 = *(unsigned __int16 *)(v28 + 2966);
            if (v41)
            {
              uint64_t v42 = heap_Calloc(*(void **)(v15 + 8), (v41 * v20), 1);
              *(void *)(a5 + 3600) = v42;
              if (!v42) {
                goto LABEL_124;
              }
            }
            continue;
          default:
            if (i == 24)
            {
              uint64_t v32 = heap_Calloc(*(void **)(v15 + 8), v20, 8);
              *(void *)(a5 + 3552) = v32;
              if (!v32) {
                goto LABEL_124;
              }
            }
            else
            {
LABEL_28:
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"SELECT_BET6", 72003, "%s%u", v22, v23, v24, v25, "feature");
            }
            break;
        }
      }
    }
  }
  unsigned int v43 = *(unsigned __int16 *)(*(void *)a5 + 3578);
  if (v43 >= 4)
  {
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET6", 72003, "Invalid number of states per phoneme", v22, v23, v24, v25, "%s%u");
    int v44 = -2065686513;
    goto LABEL_125;
  }
  int v45 = (void *)heap_Calloc(*(void **)(v15 + 8), v43 * v20, 4);
  *(void *)(a5 + 3608) = v45;
  if (!v45) {
    goto LABEL_124;
  }
  if (*(unsigned __int16 *)(*(void *)a5 + 3578) * v20) {
    memset(v45, 255, 4 * *(unsigned __int16 *)(*(void *)a5 + 3578) * v20);
  }
  int GenericFeatureLayers = usextract_allocateGenericFeatureLayers(*a1, (uint64_t)"SELECT_BET6", (void *)a5, v20);
  if (GenericFeatureLayers < 0)
  {
    int v44 = GenericFeatureLayers;
    goto LABEL_125;
  }
  int v44 = usextract_Process(*a1, (uint64_t)"SELECT_BET6", a1[2], a2, a3, a5, v47, v48);
  if ((v44 & 0x80000000) == 0)
  {
    uint64_t v107 = a3;
    if (*(void *)(a5 + 3504))
    {
      uint64_t v49 = *(void *)a5;
      unint64_t v50 = **(const char ***)(*(void *)a5 + 3336);
      if (v50)
      {
        uint64_t v51 = 0;
        unsigned int v52 = 1;
        do
        {
          if (!strncmp(v50, "INNO_", 5uLL))
          {
            unsigned int v54 = atoi(v50 + 5) + 79;
            if (v54 <= 0x5E) {
              *(void *)(a5 + 8 * v54 + 16) = *(void *)(*(void *)(a5 + 3504) + 8 * v51);
            }
          }
          else
          {
            unsigned int Index = usextract_getIndex(*(const char ***)(*(void *)(v49 + 3344) + 8 * v51), "FEATIDX", (unint64_t)"");
            if (Index == -1)
            {
              uint64_t v49 = *(void *)a5;
              uint64_t v55 = *(const char **)(*(void *)(*(void *)a5 + 3336) + 8 * v51);
              if (!strcmp(v55, "POS"))
              {
                *(void *)(a5 + 504) = *(void *)(*(void *)(a5 + 3504) + 8 * v51);
              }
              else if (!strcmp(v55, "PHR"))
              {
                *(void *)(a5 + 512) = *(void *)(*(void *)(a5 + 3504) + 8 * v51);
              }
            }
            else
            {
              uint64_t v49 = *(void *)a5;
              *(void *)(a5
                        + 8 * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)a5 + 3352) + 8 * v51) + Index)
                        + 16) = *(void *)(*(void *)(a5 + 3504) + 8 * v51);
            }
          }
          uint64_t v51 = v52;
          unint64_t v50 = *(const char **)(*(void *)(v49 + 3336) + 8 * v52++);
        }
        while (v50);
      }
    }
    int v56 = *(__int16 *)(a5 + 10);
    a3 = v107;
    uint64_t v57 = v110;
    if (*((_DWORD *)a1 + 12))
    {
      int v58 = nnfeatex_Process(a1 + 7, a2, v107, a5, 0, 0, a6, v109, 1);
      if (v58)
      {
        int v44 = v58 | 0x84E02000;
        log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"SELECT_BET6", 72001, "%x", v59, v60, v61, v62, v58 | 0x84E02000);
        goto LABEL_125;
      }
      int v44 = 0;
    }
    unsigned int v112 = v56 & ~(v56 >> 31);
    if (BET3FLT__log_select_GetLogLevel(*(void *)(v15 + 32)) >= 6)
    {
      LH_itoa(0x4Eu, (char *)v116, 0xAu);
      for (uint64_t j = 0; j != 218; ++j)
      {
        int v64 = "application/x-realspeak-usplosives;version=4.0";
        switch((int)j)
        {
          case 2:
            char v115 = 5;
            char v114 = 0;
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET6", 99, 0, (uint64_t)v116, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v115,
              1u,
              0);
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET6", 99, 0, (uint64_t)v116, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              *(void *)(a5 + 8 * j + 16),
              v112,
              0);
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET6", 99, 0, (uint64_t)v116, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v114,
              1u,
              0);
            continue;
          case 3:
            int v64 = "application/x-realspeak-usdurs;version=4.0";
            goto LABEL_75;
          case 4:
            goto LABEL_75;
          case 5:
            int v64 = "application/x-realspeak-usmarkers-u16;version=4.0";
LABEL_75:
            int v65 = *(unsigned __int8 *)(*(void *)a5 + j + 2748);
            if (v65 == 2)
            {
              log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET6", 99, 0, (uint64_t)v116, (uint64_t)v64, *(void *)(a5 + 8 * j + 1760), 2 * v112, 0);
            }
            else if (v65 == 1)
            {
              log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET6", 99, 0, (uint64_t)v116, (uint64_t)v64, *(void *)(a5 + 8 * j + 16), v112, 0);
            }
            break;
          default:
            continue;
        }
      }
      uint64_t v57 = v110;
    }
    unint64_t v66 = *(unsigned int *)(a5 + 3520);
    if (v66)
    {
      uint64_t v67 = 0;
      for (unint64_t k = 0; k < v66; ++k)
      {
        uint64_t v69 = *(void *)(a5 + 3512);
        if (*(_DWORD *)(v69 + v67) == 25)
        {
          unsigned int v70 = *(_DWORD *)(v69 + v67 + 24);
          *uint64_t v57 = v70;
          int v44 = paramc_ParamSetInt(*(void *)(v15 + 40), (uint64_t)"waitfactor", v70);
          if (v44 < 0)
          {
            log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET6", 72003, "%s%s%s%d%s%x", v71, v72, v73, v74, "parameter");
            a3 = v107;
            goto LABEL_125;
          }
          unint64_t v66 = *(unsigned int *)(a5 + 3520);
        }
        v67 += 32;
      }
    }
    featextract_adjustSilAudioOrder(a5);
    a3 = v107;
    if (!v108 || (int v75 = *(_DWORD *)(a5 + 3520), v76 = v75 + v112, *a9 = v76, !(v75 + v112)))
    {
LABEL_102:
      if (v56 >= 1)
      {
        uint64_t v92 = 0;
        if (v112 <= 1) {
          uint64_t v93 = 1;
        }
        else {
          uint64_t v93 = v112;
        }
        while (1)
        {
          uint64_t v94 = *(void *)(a5 + 248);
          if (!*(unsigned char *)(v94 + v92)) {
            *(unsigned char *)(v94 + v92) = -1;
          }
          uint64_t v95 = *(void *)(a5 + 192);
          if (*(unsigned char *)(*(void *)(a5 + 32) + v92) == 35) {
            char v96 = 1;
          }
          else {
            char v96 = 2 * *(unsigned char *)(v95 + v92);
          }
          *(unsigned char *)(v95 + v92) = v96;
          uint64_t v97 = *(void *)(a5 + 32);
          if ((unsigned __int16)v112 - 1 == v92 && *(unsigned char *)(v97 + v92) == 35)
          {
            v116[0] = 0;
            paramc_ParamGetUInt(*(void *)(v15 + 40), (uint64_t)"finalsentencefound", v116);
            if (v116[0] == 1)
            {
              int v44 = paramc_ParamSetInt(*(void *)(v15 + 40), (uint64_t)"waitfactor", 0);
              if (v44 < 0)
              {
                log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET6", 72003, "%s%s%s%d%s%x", v98, v99, v100, v101, "parameter");
                goto LABEL_125;
              }
              int v102 = 0;
              uint64_t v103 = *(void *)(a5 + 1784);
            }
            else
            {
              uint64_t v103 = *(void *)(a5 + 1784);
              int v102 = *(unsigned __int16 *)(v103 + 2 * v92) + 200 * *v110;
            }
            if (v102 <= 1) {
              int v102 = 1;
            }
            if (v102 >= 0xFFFF) {
              LOWORD(v102) = -1;
            }
            *(_WORD *)(v103 + 2 * v92) = v102;
            uint64_t v97 = *(void *)(a5 + 32);
          }
          *(unsigned char *)(v97 + v92) = *(unsigned char *)(a1[4] + *(unsigned __int8 *)(v97 + v92) + 7356);
          if (v93 == ++v92) {
            goto LABEL_125;
          }
        }
      }
      goto LABEL_125;
    }
    uint64_t v77 = heap_Calloc(*(void **)(v15 + 8), v76, 32);
    *a8 = v77;
    if (v77)
    {
      uint64_t v78 = (void *)heap_Calloc(*(void **)(v15 + 8), *(__int16 *)(a5 + 10), 2);
      if (v78)
      {
        uint64_t v79 = (uint64_t)v78;
        memcpy(v78, *(const void **)(a5 + 1800), 2 * *(__int16 *)(a5 + 10));
        if (*a9)
        {
          uint64_t v80 = 0;
          unint64_t v81 = 0;
          unsigned int v82 = 0;
          unint64_t v83 = 0;
          while (v83 < *(unsigned int *)(a5 + 3520))
          {
            if (v82 >= v112)
            {
              unsigned int v89 = (_OWORD *)(*a8 + v80);
              unsigned int v90 = (_OWORD *)(*(void *)(a5 + 3512) + 32 * v83);
              long long v91 = v90[1];
              *unsigned int v89 = *v90;
              v89[1] = v91;
              ++v83;
              goto LABEL_100;
            }
            uint64_t v84 = v82;
            if (!*(_WORD *)(v79 + 2 * v82)) {
              goto LABEL_98;
            }
            unsigned int v85 = (_OWORD *)(*a8 + v80);
            uint64_t v86 = (_OWORD *)(*(void *)(a5 + 3512) + 32 * v83);
            long long v87 = v86[1];
            *unsigned int v85 = *v86;
            v85[1] = v87;
            ++v83;
            --*(_WORD *)(v79 + 2 * v82);
LABEL_100:
            ++v81;
            v80 += 32;
            if (v81 >= *a9) {
              goto LABEL_101;
            }
          }
          uint64_t v84 = v82;
LABEL_98:
          uint64_t v88 = (_DWORD *)(*a8 + v80);
          _DWORD *v88 = 33;
          v88[6] = *(unsigned __int8 *)(*(void *)(a5 + 32) + v84);
          ++v82;
          goto LABEL_100;
        }
LABEL_101:
        heap_Free(*(void **)(v15 + 8), v79);
        goto LABEL_102;
      }
    }
LABEL_124:
    int v44 = -2065686518;
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET6", 72000, 0, v22, v23, v24, v25, v106);
  }
LABEL_125:
  if (a9 && a8 && v44 < 0 && *a8)
  {
    heap_Free(*(void **)(v15 + 8), *a8);
    *a8 = 0;
    *a9 = 0;
  }
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(a1[2] + 64))(a2, a3);
  if ((int)result >= 0 || v44 <= -1) {
    return v44;
  }
  else {
    return result;
  }
}

uint64_t select_bet6_FeatureExtractProcessEnd(uint64_t *a1, void *a2, uint64_t *a3, _DWORD *a4)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v6 = *a1;
  if (*((_DWORD *)a1 + 12))
  {
    int v7 = nnfeatex_ProcessEnd(a1 + 7, a3, a4);
    if (v7) {
      unsigned int v8 = v7 | 0x84E02000;
    }
    else {
      unsigned int v8 = 0;
    }
    uint64_t v9 = *a1;
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = *a1;
  }
  unsigned int v11 = usextract_ProcessEnd(v9, (uint64_t)"SELECT_BET6", (uint64_t)a2);
  usextract_freeGenericFeatureLayers((void *)*a1, (uint64_t)"SELECT_BET6", a2);
  uint64_t v16 = 0;
  int v17 = 1;
  do
  {
    int v18 = *(unsigned __int8 *)(*a2 + v16 + 2748);
    if (*(unsigned char *)(*a2 + v16 + 2748))
    {
      if (v18 == 2)
      {
        uint64_t v20 = a2[v16 + 220];
        if (v20) {
LABEL_18:
        }
          heap_Free(*(void **)(v6 + 8), v20);
      }
      else if (v18 == 1)
      {
        if (v17)
        {
          uint64_t v19 = a2[v16 + 2];
          if (v19) {
            heap_Free(*(void **)(v6 + 8), v19);
          }
          int v17 = 0;
        }
      }
      else
      {
        switch((int)v16)
        {
          case '.':
            uint64_t v20 = a2[445];
            if (v20) {
              goto LABEL_18;
            }
            break;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_27;
          case '3':
            uint64_t v20 = a2[446];
            if (v20) {
              goto LABEL_18;
            }
            break;
          case '4':
            uint64_t v20 = a2[447];
            if (v20) {
              goto LABEL_18;
            }
            break;
          case '5':
            uint64_t v20 = a2[448];
            if (v20) {
              goto LABEL_18;
            }
            break;
          case '6':
            uint64_t v20 = a2[449];
            if (v20) {
              goto LABEL_18;
            }
            break;
          case '8':
            uint64_t v20 = a2[450];
            if (v20) {
              goto LABEL_18;
            }
            break;
          default:
            if (v16 == 24)
            {
              uint64_t v20 = a2[444];
              if (v20) {
                goto LABEL_18;
              }
            }
            else
            {
LABEL_27:
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"SELECT_BET6", 72003, "%s%u", v12, v13, v14, v15, "feature");
            }
            break;
        }
      }
    }
    ++v16;
  }
  while (v16 != 218);
  uint64_t v21 = a2[451];
  if (v21) {
    heap_Free(*(void **)(v6 + 8), v21);
  }
  *a2 = 0;
  if (v8) {
    return v8;
  }
  else {
    return v11;
  }
}

uint64_t select_bet6_VoiceOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t result = 2229280775;
  if (a1 && a2 && a4)
  {
    uint64_t result = objc_GetAddRefCountedObject(*(void *)(a1 + 48), a3, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))select_bet6_loc_ObjcVoiceOpen, (void (*)(void, void, long long *))select_bet6_loc_ObjcVoiceClose, a2, &v7);
    if ((result & 0x80000000) == 0)
    {
      *(void *)a4 = *(void *)(v7 + 32);
      *(_DWORD *)(a4 + 8) = 135971;
    }
  }
  return result;
}

uint64_t select_bet6_loc_ObjcVoiceOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  int v46 = 0;
  memset(__dst, 0, 408);
  uint64_t inited = InitRsrcFunction(a1, a2, &v46);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  memcpy(__dst, v46, 0x198uLL);
  __dst[2] = *(_OWORD *)(a5 + 32);
  uint64_t v47 = 0;
  uint64_t v11 = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "SEL6", 1031, (uint64_t *)&v47);
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v19 = v11;
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v19 = 2229280778;
    uint64_t v20 = (void *)heap_Calloc(*((void **)&__dst[0] + 1), 1, 38000);
    uint64_t v21 = (uint64_t)v20;
    if (v20)
    {
      bzero(v20, 0x9470uLL);
      __strcpy_chk();
      __strcpy_chk();
      *(void *)&long long v22 = -1;
      *((void *)&v22 + 1) = -1;
      *(_OWORD *)(v21 + 11488) = v22;
      *(_OWORD *)(v21 + 11504) = v22;
      *(_OWORD *)(v21 + 11520) = v22;
      *(_OWORD *)(v21 + 11536) = v22;
      *(_OWORD *)(v21 + 11552) = v22;
      *(_OWORD *)(v21 + 11568) = v22;
      *(_OWORD *)(v21 + 11584) = v22;
      *(_OWORD *)(v21 + 11600) = v22;
      *(_OWORD *)(v21 + 11616) = v22;
      *(_OWORD *)(v21 + 11632) = v22;
      *(_OWORD *)(v21 + 11648) = v22;
      *(_OWORD *)(v21 + 11664) = v22;
      *(_OWORD *)(v21 + 11680) = v22;
      *(_OWORD *)(v21 + 11696) = v22;
      *(_OWORD *)(v21 + 11712) = v22;
      *(_OWORD *)(v21 + 11728) = v22;
      *(_OWORD *)(v21 + 12660) = v22;
      *(_OWORD *)(v21 + 12392) = v22;
      *(_OWORD *)(v21 + 12408) = v22;
      *(_OWORD *)(v21 + 12424) = v22;
      *(_OWORD *)(v21 + 12440) = v22;
      *(_OWORD *)(v21 + 12456) = v22;
      *(_OWORD *)(v21 + 12472) = v22;
      *(_OWORD *)(v21 + 12488) = v22;
      *(_OWORD *)(v21 + 12504) = v22;
      *(_OWORD *)(v21 + 12520) = v22;
      *(_OWORD *)(v21 + 12536) = v22;
      *(_OWORD *)(v21 + 12552) = v22;
      *(_OWORD *)(v21 + 12568) = v22;
      *(_OWORD *)(v21 + 12584) = v22;
      *(_OWORD *)(v21 + 12600) = v22;
      *(_OWORD *)(v21 + 12616) = v22;
      *(_OWORD *)(v21 + 12632) = v22;
      *(_OWORD *)(v21 + 12648) = v22;
      *(_OWORD *)(v21 + 12736) = v22;
      *(_OWORD *)(v21 + 12720) = v22;
      *(_DWORD *)(v21 + 11868) = 1;
      memset(v48, 0, sizeof(v48));
      uint64_t v23 = heap_Calloc(*((void **)&__dst[0] + 1), 57, 4);
      if (v23)
      {
        *(void *)(v21 + 9320) = v23;
        *(_DWORD *)(v21 + 9328) = 57;
        if ((fi_rsc_create(__dst, (void *)(v21 + 128)) & 0x80000000) != 0)
        {
          log_OutPublic(*(uint64_t *)&__dst[2], (uint64_t)"SELECT_BET6", 72001, "%s%x", v24, v25, v26, v27, "lhError");
          uint64_t v19 = 2229280776;
        }
        else
        {
          *(void *)&long long v28 = -1;
          *((void *)&v28 + 1) = -1;
          *(_OWORD *)(v21 + 8100) = v28;
          *(_OWORD *)(v21 + 8088) = v28;
          *(_OWORD *)(v21 + 8072) = v28;
          *(_OWORD *)(v21 + 8056) = v28;
          *(_OWORD *)(v21 + 8040) = v28;
          *(_OWORD *)(v21 + 8024) = v28;
          *(_OWORD *)(v21 + 8008) = v28;
          *(_OWORD *)(v21 + 7992) = v28;
          *(_OWORD *)(v21 + 7976) = v28;
          *(_OWORD *)(v21 + 7960) = v28;
          *(_OWORD *)(v21 + 7944) = v28;
          *(_OWORD *)(v21 + 7928) = v28;
          *(_OWORD *)(v21 + 7912) = v28;
          *(_OWORD *)(v21 + 7896) = v28;
          *(_OWORD *)(v21 + 7880) = v28;
          *(_OWORD *)(v21 + 7864) = v28;
          *(_OWORD *)(v21 + 7848) = v28;
          *(_OWORD *)(v21 + 7832) = v28;
          *(_OWORD *)(v21 + 7816) = v28;
          uint64_t v19 = select_bet6_ParseRiff((uint64_t)__dst, v21, (uint64_t)v47, 0, (char *)v48, v25, v26, v27);
          if ((v19 & 0x80000000) != 0)
          {
            select_bet6_loc_LogChunkStack((uint64_t)__dst, (uint64_t)a3, v48, v29, v30, v31, v32, v33);
          }
          else
          {
            uint64_t v34 = *(uint64_t **)(v21 + 11808);
            if (v34)
            {
              uint64_t v35 = *v34;
              if (v35)
              {
                uint64_t v36 = 0;
                unsigned int v37 = 1;
                do
                {
                  *(void *)(v21 + 8 * v36 + 5440) = v35;
                  uint64_t v36 = v37;
                  uint64_t v35 = *(void *)(*(void *)(v21 + 11808) + 8 * v37++);
                }
                while (v35);
              }
            }
            *(_WORD *)(v21 + 12922) = 1;
            *(void *)&long long v38 = 0x100000001;
            *((void *)&v38 + 1) = 0x100000001;
            *(_OWORD *)(v21 + 12512) = v38;
            *(_OWORD *)(v21 + 12528) = v38;
            *(void *)(v21 + 12544) = 0x100000001;
            *(_DWORD *)(v21 + 12556) = 1;
            *(_OWORD *)(v21 + 12572) = v38;
            *(_OWORD *)(v21 + 12588) = v38;
            *(_OWORD *)(v21 + 12604) = v38;
            *(_OWORD *)(v21 + 12620) = v38;
            *(_OWORD *)(v21 + 12636) = v38;
            *(_DWORD *)(v21 + 12652) = 1;
            *(void *)(v21 + 12656) = 0x100000001;
            *(_DWORD *)(v21 + 12094) = 33620481;
            *(unsigned char *)(v21 + 12121) = 1;
            *(void *)(v21 + 12099) = 0x101010101010101;
            *(void *)(v21 + 12107) = 0x101010101010101;
            *(_DWORD *)(v21 + 12143) = -1;
            *(void *)(v21 + 12157) = 0x101010101010101;
            *(_WORD *)(v21 + 12147) = -255;
            *(void *)(v21 + 12162) = 0x101010101010101;
            *(void *)(v21 + 12265) = 0x101010101010101;
            *(void *)(v21 + 12273) = 0x101010101010101;
            *(void *)(v21 + 12281) = 0x101010101010101;
            if ((*(_DWORD *)(v21 + 12448) & 0x80000000) == 0) {
              *(_WORD *)(v21 + 12123) = 257;
            }
            if ((*(_DWORD *)(v21 + 12464) & 0x80000000) == 0) {
              *(unsigned char *)(v21 + 12125) = 1;
            }
            if ((*(_DWORD *)(v21 + 12480) & 0x80000000) == 0) {
              *(unsigned char *)(v21 + 12126) = 1;
            }
            if ((*(_DWORD *)(v21 + 12484) & 0x80000000) == 0) {
              *(unsigned char *)(v21 + 12127) = 1;
            }
            if ((*(_DWORD *)(v21 + 12488) & 0x80000000) == 0) {
              *(unsigned char *)(v21 + 12128) = 1;
            }
            if ((*(_DWORD *)(v21 + 12492) & 0x80000000) == 0) {
              *(unsigned char *)(v21 + 12129) = 1;
            }
            if ((*(_DWORD *)(v21 + 12736) & 0x80000000) == 0 || (*(_DWORD *)(v21 + 12740) & 0x80000000) == 0) {
              *(unsigned char *)(v21 + 12116) = 8;
            }
            int v39 = (_WORD *)(v21 + 37744);
            if (*(_DWORD *)(v21 + 11904)) {
              *(unsigned char *)(v21 + 12138) = 9;
            }
            *(_WORD *)(v21 + 12168) = 257;
            *(void *)(v21 + 12157) = 0x101010101010101;
            *(_WORD *)(v21 + 12165) = 257;
            *(_DWORD *)(v21 + 7944) = 4000;
            *(_OWORD *)(v21 + 7928) = xmmword_20D69FD90;
            bzero((void *)(v21 + 8208), 0x400uLL);
            uint64_t v40 = strlen((const char *)(v21 + 9946));
            if (v40)
            {
              int v41 = (unsigned __int8 *)(v21 + 9946);
              do
              {
                if (*(unsigned char *)(v21 + *v41 + 7492)) {
                  *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)(v21 + *v41 + 7492) + 8208) = (v41[257] & 0xDF) == 86;
                }
                ++v41;
                --v40;
              }
              while (v40);
            }
            uint64_t v42 = *(void *)(v21 + 37752);
            if (v42)
            {
              LODWORD(v42) = (unsigned __int16)*v39;
              if (*v39)
              {
                uint64_t v42 = *(void *)(v21 + 37760);
                if (v42) {
                  LODWORD(v42) = *(_WORD *)(v21 + 37768) != 0;
                }
              }
            }
            *(_DWORD *)(v21 + 37776) = v42;
          }
        }
      }
    }
  }
  if (v47)
  {
    ssftriff_reader_ObjClose(v47, v12, v13, v14, v15, v16, v17, v18);
    uint64_t v47 = 0;
  }
  if ((v19 & 0x80000000) != 0)
  {
    if ((v19 & 0x7FF00000) == 0xA200000)
    {
      if ((v19 & 0x1FFF) == 0x14) {
        uint64_t v43 = 72002;
      }
      else {
        uint64_t v43 = 72003;
      }
      log_OutPublic(*(uint64_t *)&__dst[2], (uint64_t)"SELECT_BET6", v43, "%s%x", v15, v16, v17, v18, "lhError");
      uint64_t v19 = (v19 & 0x1FFF) - 2065686528;
    }
    else if ((v19 & 0x1FFD | 2) != 0xA)
    {
      log_OutPublic(*(uint64_t *)&__dst[2], (uint64_t)"SELECT_BET6", 72003, "%s%x", v15, v16, v17, v18, "lhError");
    }
    select_bet6_loc_VoiceClose(__dst, (char *)v21);
  }
  else
  {
    *(void *)(a4 + 32) = v21;
  }
  return v19;
}

uint64_t select_bet6_loc_ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v6);
  if ((inited & 0x80000000) == 0) {
    select_bet6_loc_VoiceClose(v6, *(char **)(a3 + 32));
  }
  return inited;
}

uint64_t select_bet6_VoiceClose(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 2229280775;
  if (!a1 || !a2) {
    return v2;
  }
  if ((safeh_HandleCheck(*a2, a2[1], 135971, 38000) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v5 = *a2;
  if (!*a2) {
    return 2229281036;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  return objc_ReleaseObject(v6, v5);
}

uint64_t select_bet6_GetSirenVoice(uint64_t *a1)
{
  if ((safeh_HandleCheck(*a1, a1[1], 135971, 38000) & 0x80000000) != 0) {
    return 0;
  }
  if (*a1) {
    return *a1 + 128;
  }
  return 0;
}

uint64_t select_bet6_GetVoiceBrkString(uint64_t *a1)
{
  if ((safeh_HandleCheck(*a1, a1[1], 135971, 38000) & 0x80000000) != 0) {
    return 0;
  }
  else {
    return *a1;
  }
}

uint64_t select_bet6_ParseRiff(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  uint64_t v11 = (uint64_t *)a1;
  uint64_t v284 = *MEMORY[0x263EF8340];
  v263 = (unsigned __int16 *)(a2 + 37744);
  __s = (char *)(a2 + 9946);
  uint64_t v259 = (_WORD *)(a2 + 8204);
  int v275 = 0;
  unsigned __int8 v274 = 0;
  *(_DWORD *)__src = 0;
  uint64_t v12 = &a5[5 * a4];
  v256 = (uint64_t *)(a2 + 37760);
  v251 = (void *)(a2 + 7492);
  __dst = (void *)(a2 + 11844);
  uint64_t v247 = a2 + 8184;
  uint64_t v252 = a2 + 8168;
  uint64_t v254 = a2 + 8152;
  uint64_t v258 = a2 + 8120;
  uint64_t v255 = a2 + 8136;
  v261 = (void *)(a2 + 7792);
  float v262 = a5 + 5;
  float v246 = (uint64_t *)(a2 + 11808);
  v248 = (unsigned char *)(a2 + 11744);
  v249 = (unsigned char *)(a2 + 10717);
  float v250 = (unsigned char *)(a2 + 10460);
  v253 = (unsigned char *)(a2 + 10203);
  float v266 = v12;
  while (1)
  {
    uint64_t v13 = ssftriff_reader_OpenChunk(a3, __src, (unsigned int *)&v275, 0, (uint64_t)a5, a6, a7, a8);
    if ((v13 & 0x80000000) != 0) {
      goto LABEL_893;
    }
    strcpy(v12, __src);
    if (v8 == 1) {
      break;
    }
    if (v8)
    {
      if (strcmp(a5, "FEEX") || strcmp(v262, "VCAT")) {
        goto LABEL_881;
      }
      int v30 = v275;
      *(void *)v279 = 0;
      LODWORD(v13) = ssftriff_reader_GetChunkData(a3, v275, v279, v20, v21, v22, v23, v24);
      if ((v13 & 0x80000000) != 0) {
        goto LABEL_879;
      }
      if (!(*(_DWORD *)__src ^ 0x48504C41 | v274))
      {
        *(_DWORD *)v281 = 257;
        LODWORD(v13) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v279, v30, 0, __s, (unsigned int *)v281);
        if ((v13 & 0x80000000) == 0)
        {
          *((_WORD *)__s + 947) = 255;
          if (*__s)
          {
            unsigned int v227 = 0;
            uint64_t v228 = 0;
            unsigned int v229 = 255;
            unsigned int v230 = 1;
            do
            {
              v231 = (unsigned __int8 *)(a2 + v228 + 9946);
              unsigned int v232 = *v231;
              if (v232 >= v229)
              {
                unsigned int v234 = *v231;
                float v233 = __s;
              }
              else
              {
                float v233 = __s;
                __s[1894] = v232;
                unsigned int v234 = *v231;
                unsigned int v229 = v232;
              }
              if (v234 <= v227)
              {
                unsigned int v235 = v234;
              }
              else
              {
                v233[1895] = v234;
                unsigned int v235 = *v231;
                unsigned int v227 = v234;
              }
              *(unsigned char *)(a2 + v235 + 11488) = v230 - 1;
              uint64_t v228 = v230;
              BOOL v244 = strlen(v233) > v230++;
            }
            while (v244);
          }
        }
        int v29 = 1;
        int v8 = a4;
        uint64_t v11 = (uint64_t *)a1;
        goto LABEL_880;
      }
      if (*(_DWORD *)__src ^ 0x43494F56 | v274)
      {
        if (*(_DWORD *)__src ^ 0x4F564F43 | v274)
        {
          if (*(_DWORD *)__src ^ 0x534F4C50 | v274)
          {
            if (*(_DWORD *)__src ^ 0x46464944 | v274)
            {
              if (*(_DWORD *)__src ^ 0x41474154 | v274) {
                goto LABEL_35;
              }
              int RiffStringTable = uselect_LoadRiffStringTable((uint64_t)v11, a3, *(_WORD **)v279, v30, v246);
LABEL_878:
              LODWORD(v13) = RiffStringTable;
LABEL_879:
              int v29 = 1;
              goto LABEL_880;
            }
            *(_DWORD *)v281 = 64;
            uint64_t v238 = *(void *)v279;
            uint64_t v239 = a3;
            unsigned int v240 = v30;
            v241 = v248;
          }
          else
          {
            *(_DWORD *)v281 = 257;
            uint64_t v238 = *(void *)v279;
            uint64_t v239 = a3;
            unsigned int v240 = v30;
            v241 = v249;
          }
        }
        else
        {
          *(_DWORD *)v281 = 257;
          uint64_t v238 = *(void *)v279;
          uint64_t v239 = a3;
          unsigned int v240 = v30;
          v241 = v250;
        }
      }
      else
      {
        *(_DWORD *)v281 = 257;
        uint64_t v238 = *(void *)v279;
        uint64_t v239 = a3;
        unsigned int v240 = v30;
        v241 = v253;
      }
      int RiffStringTable = ssftriff_reader_ReadStringZ(v239, v238, v240, 0, v241, (unsigned int *)v281);
      goto LABEL_878;
    }
    if (!(*(_DWORD *)__src ^ 0x47464356 | v274))
    {
      unsigned int v31 = v275;
      unsigned int v278 = 0;
      *(void *)v276 = 0;
      v277 = 0;
      int ChunkData = ssftriff_reader_GetChunkData(a3, v275, v276, v14, v15, v16, v17, v18);
      if (ChunkData < 0) {
        goto LABEL_857;
      }
      uint64_t v33 = BET3FLT__heap_StrDup((void *)v11[1], "PHRASE");
      *(void *)(a2 + 216) = v33;
      LODWORD(v13) = -2065686518;
      if (v33)
      {
        *(_DWORD *)(a2 + 224) = 1000;
        if (v31)
        {
          unsigned int v34 = 0;
          while (1)
          {
            v279[0] = 0;
            v281[0] = 0;
            unsigned int v278 = 64;
            int v35 = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v276, v31, v34, v281, &v278);
            if (v35 < 0) {
              break;
            }
            unsigned int v36 = v278 + v34;
            unsigned int v278 = 256;
            int ChunkData = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v276, v31, v36, v279, &v278);
            if (ChunkData < 0) {
              goto LABEL_851;
            }
            unsigned int v267 = v278;
            strcpy((char *)v280, "bet3voiceoverride.");
            __strcat_chk();
            if ((paramc_ParamGetStr(v11[5], (uint64_t)v280, &v277) & 0x80000000) != 0 || (unsigned int v37 = v277) == 0 || !*v277)
            {
              unsigned int v37 = v279;
              v277 = v279;
            }
            if (*(_DWORD *)v281 == 1213221953 && *(unsigned __int16 *)&v281[4] == 65) {
              *(_DWORD *)(a2 + 136) = LH_atoi(v37);
            }
            if (!(*(_DWORD *)v281 ^ 0x41544542 | v281[4])) {
              *(_DWORD *)(a2 + 140) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x5F4C45525F565556 && *(unsigned int *)&v281[8] == 5262657) {
              *(_DWORD *)(a2 + 148) = LH_atoi(v277);
            }
            if (*(_DWORD *)v281 == 5001046) {
              *(_DWORD *)(a2 + 172) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x534F4F425F46564DLL && *(unsigned __int16 *)&v281[8] == 84) {
              *(_DWORD *)(a2 + 176) = LH_atoi(v277);
            }
            if (!(*(unsigned __int16 *)v281 ^ 0x5346 | v281[2])) {
              *(_DWORD *)(a2 + 144) = LH_atoi(v277);
            }
            if (*(_DWORD *)v281 == 1162105423 && *(unsigned __int16 *)&v281[4] == 82) {
              *(_DWORD *)(a2 + 152) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x49535F454D415246 && *(void *)&v281[3] == 0x455A49535F454DLL) {
              *(_DWORD *)(a2 + 160) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x465F484345455053 && *(void *)&v281[7] == 0x4E41454D5F3046) {
              *(_DWORD *)(a2 + 192) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x495241565F464450
              && *(void *)&v281[8] == 0x5059545F45434E41
              && *(unsigned __int16 *)&v281[16] == 69)
            {
              *(_DWORD *)(a2 + 208) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x52454B41455242)
            {
              uint64_t v46 = *(void *)(a2 + 216);
              if (v46) {
                heap_Free((void *)v11[1], v46);
              }
              uint64_t v47 = BET3FLT__heap_StrDup((void *)v11[1], v277);
              *(void *)(a2 + 216) = v47;
              if (!v47)
              {
                LODWORD(v13) = -2065686518;
                goto LABEL_858;
              }
            }
            if (*(void *)v281 == 0x474E454C5F4B5242 && *(void *)&v281[3] == 0x4854474E454C5FLL) {
              *(_DWORD *)(a2 + 224) = LH_atoi(v277);
            }
            if (*(_DWORD *)v281 == 1598771778 && *(_DWORD *)&v281[3] == 4412511) {
              *(_DWORD *)(a2 + 228) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x4441505A5F4B5242 | v281[8])) {
              *(_DWORD *)(a2 + 232) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x54535F4E474C41) {
              *(_DWORD *)(a2 + 248) = LH_atoi(v277) != 0;
            }
            if (*(void *)v281 == 0x48505F4E474C41) {
              *(_DWORD *)(a2 + 252) = LH_atoi(v277) != 0;
            }
            if (*(_DWORD *)v281 == 1314476886 && *(_DWORD *)&v281[3] == 4740174) {
              *(void *)(a2 + 7784) = BET3FLT__heap_StrDup((void *)v11[1], v277);
            }
            if (*(_DWORD *)v281 == 1398031942 && *(unsigned __int16 *)&v281[4] == 90) {
              *(_DWORD *)(a2 + 7816) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4E41454D5F4E45) {
              *(_DWORD *)(a2 + 7820) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x5F4E455F44454546
              && *(void *)&v281[8] == 0x4F4F4C5F4E41454DLL
              && *(void *)&v281[15] == 0x44414548414B4FLL)
            {
              *(_DWORD *)(a2 + 7828) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x56555F544E554F43
              && *(void *)&v281[8] == 0x434E41545349445FLL
              && *(unsigned __int16 *)&v281[16] == 69)
            {
              *(_DWORD *)(a2 + 7824) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x525F454C504D4153 && *(unsigned int *)&v281[8] == 4543553) {
              *(_DWORD *)(a2 + 7832) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x455F524150504D41 && *(void *)&v281[6] == 0x594752454E455FLL) {
              *(_DWORD *)(a2 + 7836) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x535F524150504D41 && *(unsigned int *)&v281[8] == 4545097) {
              *(_DWORD *)(a2 + 7840) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x465F524150435053 && *(void *)&v281[8] == 0x50524157514552) {
              *(_DWORD *)(a2 + 7844) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x455F524150504D41
              && *(void *)&v281[8] == 0x415F45434E41484ELL
              && *(void *)&v281[13] == 0x4148504C415F45)
            {
              *(_DWORD *)(a2 + 7848) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x455F524150504D41
              && *(void *)&v281[8] == 0x415F45434E41484ELL
              && *(void *)&v281[16] == 0x564E555F4148504CLL
              && *(void *)&v281[22] == 0x444543494F564ELL)
            {
              *(_DWORD *)(a2 + 7852) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x49535F454D415246 && *(void *)&v281[8] == 0x4343524D5F455ALL) {
              *(_DWORD *)(a2 + 7856) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x5F5348505F4E5953
              && *(void *)&v281[8] == 0x555F504152545845
              && *(void *)&v281[11] == 0x4553555F504152)
            {
              *(_DWORD *)(a2 + 7860) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x53494F4E5F4E5953
              && *(void *)&v281[8] == 0x545F514552465F45
              && *(unsigned __int16 *)&v281[16] == 72)
            {
              *(_DWORD *)(a2 + 7864) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x514552465F4E5953
              && *(void *)&v281[8] == 0x53555F4553494F4ELL
              && *(unsigned __int16 *)&v281[16] == 69)
            {
              *(_DWORD *)(a2 + 7868) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x514552465F4E5953
              && *(void *)&v281[8] == 0x564D5F4553494F4ELL
              && *(void *)&v281[14] == 0x4553555F46564DLL)
            {
              *(_DWORD *)(a2 + 7872) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x514552465F4E5953 | *(void *)&v281[8] ^ 0x4F4C5F4553494F4ELL | v281[16])) {
              *(_DWORD *)(a2 + 7876) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x514552465F4E5953 | *(void *)&v281[8] ^ 0x49485F4553494F4ELL | v281[16])) {
              *(_DWORD *)(a2 + 7880) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4E5855415F4E5953
              && *(void *)&v281[8] == 0x494E555F4553494FLL
              && *(void *)&v281[13] == 0x4D524F46494E55)
            {
              *(_DWORD *)(a2 + 7884) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x4E5855415F4E5953 | *(void *)&v281[8] ^ 0x4553555F4553494FLL | v281[16])) {
              *(_DWORD *)(a2 + 7888) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4E5855415F4E5953
              && *(void *)&v281[8] == 0x46564D5F4553494FLL
              && *(void *)&v281[13] == 0x4553555F46564DLL)
            {
              *(_DWORD *)(a2 + 7892) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4E5855415F4E5953
              && *(void *)&v281[8] == 0x58494D5F4553494FLL
              && *(void *)&v281[16] == 0x4F4C5F4D524148)
            {
              *(_DWORD *)(a2 + 7896) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4E5855415F4E5953
              && *(void *)&v281[8] == 0x58494D5F4553494FLL
              && *(void *)&v281[16] == 0x49485F4D524148)
            {
              *(_DWORD *)(a2 + 7900) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4E5855415F4E5953
              && *(void *)&v281[8] == 0x5345525F4553494FLL
              && *(_DWORD *)&v281[16] == 5196895)
            {
              *(_DWORD *)(a2 + 7904) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4E5855415F4E5953
              && *(void *)&v281[8] == 0x5345525F4553494FLL
              && *(_DWORD *)&v281[16] == 4802655)
            {
              *(_DWORD *)(a2 + 7908) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x47494C415F4E5953
              && *(void *)&v281[8] == 0x46464F5455435F4ELL
              && *(void *)&v281[14] == 0x514552465F4646)
            {
              *(_DWORD *)(a2 + 7912) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x554245445F4E5953
              && *(void *)&v281[8] == 0x45434F52505F5A5ALL
              && *(void *)&v281[15] == 0x46564D5F535345)
            {
              *(_DWORD *)(a2 + 7916) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x415F524150504D41
              && *(void *)&v281[8] == 0x455441554E455454
              && *(_DWORD *)&v281[16] == 5657951)
            {
              *(_DWORD *)(a2 + 7920) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x50494B535F4E5953 | *(void *)&v281[8] ^ 0x41485F4B4145575FLL | *(void *)&v281[16] ^ 0x4F495441525F4D52 | v281[24])) {
              *(_DWORD *)(a2 + 7924) = LH_atoi(v277);
            }
            if (!strcmp(v281, "SYN_DEBUZZ_PROCESS_MVF_SMOOTH_WIN")) {
              *(_DWORD *)(a2 + 7948) = LH_atoi(v277);
            }
            if (!strcmp(v281, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_THR")) {
              *(_DWORD *)(a2 + 7952) = LH_atoi(v277);
            }
            if (!strcmp(v281, "SYN_DEBUZZ_PROCESS_MVF_RATIO_EN_THR")) {
              *(_DWORD *)(a2 + 7956) = LH_atoi(v277);
            }
            if (!strcmp(v281, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_MVF_THR")) {
              *(_DWORD *)(a2 + 7960) = LH_atoi(v277);
            }
            if (!strcmp(v281, "SYN_DEBUZZ_PROCESS_MVF_BY_LOW_EN")) {
              *(_DWORD *)(a2 + 7964) = LH_atoi(v277);
            }
            if (!strcmp(v281, "SYN_DEBUZZ_PROCESS_MVF_BY_RATIO_EN")) {
              *(_DWORD *)(a2 + 7968) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x554245445F4E5953 | *(void *)&v281[8] ^ 0x45434F52505F5A5ALL | *(void *)&v281[16] ^ 0x305F46564D5F5353 | v281[24])) {
              *(_DWORD *)(a2 + 7972) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x554245445F4E5953 | *(void *)&v281[8] ^ 0x45434F52505F5A5ALL | *(void *)&v281[16] ^ 0x315F46564D5F5353 | v281[24])) {
              *(_DWORD *)(a2 + 7976) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x554245445F4E5953 | *(void *)&v281[8] ^ 0x45434F52505F5A5ALL | *(void *)&v281[16] ^ 0x325F46564D5F5353 | v281[24])) {
              *(_DWORD *)(a2 + 7980) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x554245445F4E5953 | *(void *)&v281[8] ^ 0x45434F52505F5A5ALL | *(void *)&v281[16] ^ 0x335F46564D5F5353 | v281[24])) {
              *(_DWORD *)(a2 + 7984) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x425F524150504D41 && *(_DWORD *)&v281[8] == 5461065) {
              *(_DWORD *)(a2 + 7988) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x555F524150534850 && *(void *)&v281[3] == 0x4553555F524150) {
              *(_DWORD *)(a2 + 7992) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x555F524150504D41 && *(void *)&v281[3] == 0x4553555F524150) {
              *(_DWORD *)(a2 + 7996) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x32474F4C5F455355 | v281[8])) {
              *(_DWORD *)(a2 + 8000) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x455F524150504D41
              && *(void *)&v281[8] == 0x505F45434E41484ELL
              && *(void *)&v281[14] == 0x435053574F505FLL)
            {
              *(_DWORD *)(a2 + 8004) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4E5855415F4E5953
              && *(void *)&v281[8] == 0x5454415F4553494FLL
              && *(void *)&v281[15] == 0x455441554E4554)
            {
              *(_DWORD *)(a2 + 8008) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4E5855415F4E5953
              && *(void *)&v281[8] == 0x5454415F4553494FLL
              && *(void *)&v281[16] == 0x4C5F455441554E45
              && *(unsigned __int16 *)&v281[24] == 79)
            {
              *(_DWORD *)(a2 + 8012) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4E5855415F4E5953
              && *(void *)&v281[8] == 0x5454415F4553494FLL
              && *(void *)&v281[16] == 0x485F455441554E45
              && *(unsigned __int16 *)&v281[24] == 73)
            {
              *(_DWORD *)(a2 + 8016) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4C5050415F4E5953 && *(void *)&v281[8] == 0x504D4545445F59) {
              *(_DWORD *)(a2 + 8020) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x525F49485F4E5953 | *(void *)&v281[8] ^ 0x4E47494C415F5345 | v281[16])) {
              *(_DWORD *)(a2 + 8024) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x545341465F4E5953
              && *(void *)&v281[8] == 0x5241485F5855415FLL
              && *(unsigned __int16 *)&v281[16] == 77)
            {
              *(_DWORD *)(a2 + 8028) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x5F5849465F4E5953 && *(_DWORD *)&v281[8] == 4279375) {
              *(_DWORD *)(a2 + 8032) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x475F43445F4E5953
              && *(void *)&v281[8] == 0x494F565F44524155
              && *(_DWORD *)&v281[16] == 4474179)
            {
              *(_DWORD *)(a2 + 8036) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x475F43445F4E5953
              && *(void *)&v281[8] == 0x564E555F44524155
              && *(void *)&v281[14] == 0x444543494F564ELL)
            {
              *(_DWORD *)(a2 + 8040) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x5551594E5F4E5953
              && *(void *)&v281[8] == 0x524155475F545349
              && *(unsigned __int16 *)&v281[16] == 68)
            {
              *(_DWORD *)(a2 + 8044) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x535F524150534850 && *(unsigned int *)&v281[8] == 4545097) {
              *(_DWORD *)(a2 + 8048) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x465F524150534850 && *(unsigned int *)&v281[8] == 5261644) {
              *(_DWORD *)(a2 + 8052) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x455F524150504D41
              && *(void *)&v281[8] == 0x4F4E5F594752454ELL
              && *(void *)&v281[14] == 0x48545F4D524F4ELL)
            {
              *(_DWORD *)(a2 + 8056) = LH_atoi(v277);
            }
            BOOL v120 = *(void *)v281 == 0x465F524150435053
                && *(void *)&v281[8] == 0x5F50524157514552
                && *(void *)&v281[14] == 0x4148504C415F50;
            uint64_t v11 = (uint64_t *)a1;
            if (v120) {
              *(_DWORD *)(a2 + 8060) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x5F5348505F4E5953 | *(void *)&v281[8] ^ 0x49575F4E47494C41 | *(void *)&v281[16] ^ 0x54534E4F435F4854 | v281[24])) {
              *(_DWORD *)(a2 + 8064) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x4E5855415F4E5953 | *(void *)&v281[8] ^ 0x524F4E5F4553494FLL | *(void *)&v281[16] ^ 0x4C41424F4C475F4DLL | v281[24])) {
              *(_DWORD *)(a2 + 8068) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4D4545445F4E5953 && *(void *)&v281[7] == 0x46454F435F504DLL) {
              *(_DWORD *)(a2 + 8072) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x5F4553555F4E5953 | *(void *)&v281[8] ^ 0x4F4D5F4553494F4ELL | *(void *)&v281[16] ^ 0x4E4F4954414C5544 | v281[24])) {
              *(_DWORD *)(a2 + 8076) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x53494F4E5F4E5953
              && *(void *)&v281[8] == 0x414C55444F4D5F45
              && *(void *)&v281[16] == 0x4341465F4E4F4954
              && *(unsigned int *)&v281[24] == 5394260)
            {
              *(_DWORD *)(a2 + 8080) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4D4152465F58414DLL && *(void *)&v281[7] == 0x455A49535F454DLL) {
              *(_DWORD *)(a2 + 8084) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x4D4152465F4E494DLL && *(void *)&v281[7] == 0x455A49535F454DLL) {
              *(_DWORD *)(a2 + 8088) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x5F5446465F4E494DLL && *(void *)&v281[5] == 0x455A49535F5446) {
              *(_DWORD *)(a2 + 8092) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x49535F454D415246
              && *(void *)&v281[8] == 0x4E5F434E495F455ALL
              && *(void *)&v281[11] == 0x4D554E5F434E49)
            {
              *(_DWORD *)(a2 + 8096) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x49535F454D415246
              && *(void *)&v281[8] == 0x4E5F4345445F455ALL
              && *(void *)&v281[11] == 0x4D554E5F434544)
            {
              *(_DWORD *)(a2 + 8100) = LH_atoi(v277);
            }
            if (*(void *)v281 == 0x5446465F4C414E41 && *(void *)&v281[6] == 0x455A49535F5446) {
              *(_DWORD *)(a2 + 8104) = LH_atoi(v277);
            }
            if (!(*(void *)v281 ^ 0x455A49535F544646 | v281[8])) {
              *(_DWORD *)(a2 + 8108) = LH_atoi(v277);
            }
            unsigned int v34 = v267 + v36;
            if (v34 >= v31) {
              goto LABEL_851;
            }
          }
          int ChunkData = v35;
        }
LABEL_851:
        *(_WORD *)(a2 + 168) = 0;
        *(_WORD *)(a2 + 180) = 0;
        *(void *)(a2 + 184) = 0;
        strcpy((char *)v280, "bet3voiceoverride.");
        __strcat_chk();
        if ((paramc_ParamGetStr(v11[5], (uint64_t)v280, &v277) & 0x80000000) == 0)
        {
          uint64_t v236 = *(void *)(a2 + 216);
          if (v236)
          {
            heap_Free((void *)v11[1], v236);
            *(void *)(a2 + 216) = 0;
          }
          v237 = BET3FLT__heap_StrDup((void *)v11[1], v277);
          *(void *)(a2 + 216) = v237;
          LODWORD(v13) = -2065686518;
          if (!v237) {
            goto LABEL_858;
          }
        }
        strcpy((char *)v280, "bet3voiceoverride.");
        __strcat_chk();
        if ((paramc_ParamGetStr(v11[5], (uint64_t)v280, &v277) & 0x80000000) == 0) {
          *(_DWORD *)(a2 + 224) = LH_atoi(v277);
        }
LABEL_857:
        LODWORD(v13) = ChunkData;
      }
LABEL_858:
      uint64_t v12 = v266;
      goto LABEL_882;
    }
    if (!(*(_DWORD *)__src ^ 0x41555145 | v274))
    {
      LODWORD(v13) = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * v263[124] + 37784), v261, v14, v15, v16, v17, v18);
      if ((v13 & 0x80000000) == 0) {
        ++v263[124];
      }
      goto LABEL_882;
    }
    if (!(*(_DWORD *)__src ^ 0x58454546 | v274) || !(*(_DWORD *)__src ^ 0x45464E4E | v274))
    {
      LODWORD(v13) = select_bet6_ParseRiff(v11, a2, a3, 1, a5);
      goto LABEL_882;
    }
    int64_t v19 = v275;
    v280[0] = 0;
    LODWORD(v13) = ssftriff_reader_GetChunkData(a3, v275, v280, v14, v15, v16, v17, v18);
    if ((v13 & 0x80000000) != 0) {
      goto LABEL_879;
    }
    if (*(_DWORD *)__src ^ 0x4D503642 | v274)
    {
      uint64_t v25 = v258;
      if (*(_DWORD *)__src ^ 0x46443642 | v274)
      {
        uint64_t v25 = v255;
        if (*(_DWORD *)__src ^ 0x46413642 | v274)
        {
          uint64_t v26 = v254;
          if (*(_DWORD *)__src ^ 0x4D443642 | v274)
          {
            uint64_t v26 = v252;
            if (*(_DWORD *)__src ^ 0x4D413642 | v274)
            {
              uint64_t v11 = (uint64_t *)a1;
              if (!(*(_DWORD *)__src ^ 0x4D563642 | v274))
              {
                *(_DWORD *)(a2 + 9240) = 1;
                uint64_t v26 = v247;
                goto LABEL_17;
              }
LABEL_35:
              int v29 = 0;
              goto LABEL_880;
            }
          }
LABEL_17:
          uint64_t v27 = *(void *)(a2 + 128);
          if (v27)
          {
            long long v28 = (void *)(**(uint64_t (***)(void, int64_t))(v27 + 8))(*(void *)(v27 + 16), v19);
            *(void *)uint64_t v26 = v28;
            if (v28)
            {
              memcpy(v28, v280[0], v19);
              *(_DWORD *)(v26 + 8) = v19;
              goto LABEL_875;
            }
            int v29 = 1;
            LODWORD(v13) = -2065686518;
          }
          else
          {
            LODWORD(v13) = -2065686521;
LABEL_875:
            int v29 = 1;
          }
          uint64_t v11 = (uint64_t *)a1;
          goto LABEL_880;
        }
      }
      long long v153 = (char *)v280[0];
      unint64_t v154 = *(unsigned int *)v280[0];
      int v268 = *((_DWORD *)v280[0] + 1);
      uint64_t v11 = (uint64_t *)a1;
      uint64_t v155 = heap_Calloc(*(void **)(a1 + 8), v154, 16);
      LODWORD(v13) = -2065686518;
      if (v155)
      {
        int v156 = 0;
        uint64_t v157 = (uint64_t)(v153 + 8);
        LODWORD(v158) = 0;
        if (v19 >= 0x18 && v154)
        {
          uint64_t v159 = 0;
          unint64_t v158 = 0;
          int v156 = 0;
          do
          {
            int v160 = (_DWORD *)(v155 + v159);
            *int v160 = *(_DWORD *)&v153[v159 + 8];
            int v161 = *(_DWORD *)&v153[v159 + 12];
            v160[1] = v161;
            int v162 = *(_DWORD *)&v153[v159 + 16];
            v160[2] = v162;
            v160[3] = *(_DWORD *)&v153[v159 + 20];
            if (v161) {
              int v163 = v162;
            }
            else {
              int v163 = 1;
            }
            v156 += v163;
            ++v158;
            uint64_t v164 = v159 + 16;
            if (v158 >= v154) {
              break;
            }
            int64_t v165 = v159 + 40;
            v159 += 16;
          }
          while (v165 <= v19);
          uint64_t v157 = (uint64_t)&v153[v164 + 8];
        }
        if (v158 == v154 && v157 - (void)v153 == v19 && v156 == v268)
        {
          LODWORD(v13) = 0;
          *(void *)uint64_t v25 = v155;
          int v29 = 1;
          *(_DWORD *)(v25 + 8) = v154;
          *(_DWORD *)(v25 + 12) = v268;
          uint64_t v11 = (uint64_t *)a1;
LABEL_869:
          uint64_t v12 = v266;
          goto LABEL_880;
        }
        uint64_t v11 = (uint64_t *)a1;
        heap_Free(*(void **)(a1 + 8), v155);
        LODWORD(v13) = -2065686262;
      }
      log_OutText(v11[4], (uint64_t)"SELECT_BET6", 3, 0, (uint64_t)"Error parsing Siren NN feature list (chunk %s)", v22, v23, v24, (uint64_t)__src);
      int v29 = 1;
      goto LABEL_869;
    }
    long long v282 = 0u;
    long long v283 = 0u;
    memset(v281, 0, sizeof(v281));
    if ((int)v19 < 1) {
      goto LABEL_873;
    }
    signed int v166 = 0;
    unsigned int v260 = -1;
    while (1)
    {
      LODWORD(v277) = 64;
      int StringZ = ssftriff_reader_ReadStringZ(a3, (uint64_t)v280[0], v19, v166, v279, (unsigned int *)&v277);
      if (StringZ < 0) {
        break;
      }
      unsigned int v168 = v277 + v166;
      LODWORD(v277) = 64;
      LODWORD(v13) = ssftriff_reader_ReadStringZ(a3, (uint64_t)v280[0], v19, v168, v281, (unsigned int *)&v277);
      if ((v13 & 0x80000000) != 0) {
        goto LABEL_873;
      }
      int v269 = (int)v277;
      if (!(*(void *)v279 ^ 0x5F45434E454C4953 | *(void *)&v279[8] ^ 0x4E4F495441525544 | v279[16])) {
        unsigned int v260 = LH_atoi(v281);
      }
      if (!(*(void *)v279 ^ 0x5F45434E454C4953 | *(void *)&v279[8] ^ 0x4E4F495441525544 | v279[16])
        && v260 != -1)
      {
        *(_DWORD *)(a2 + 8200) = 1;
        *uint64_t v259 = v260;
      }
      if (!strcmp(v279, "ACOUSTIC_INFERENCE_OVERLAP_NFRAMES")) {
        *(_DWORD *)(a2 + 9280) = LH_atoi(v281);
      }
      if (*(void *)v279 == 0x5F5245444F434F56
        && *(void *)&v279[8] == 0x5F50414C5245564FLL
        && *(void *)&v279[16] == 0x53454D4152464ELL)
      {
        *(_DWORD *)(a2 + 9284) = LH_atoi(v281);
      }
      if (!(*(void *)v279 ^ 0x4D49545F4C414552 | *(void *)&v279[8] ^ 0x524F544341465F45 | v279[16]))
      {
        float v171 = atof(v281);
        *(float *)(a2 + 9288) = v171;
      }
      if (*(void *)v279 == 0x59434E4554414CLL) {
        *(_DWORD *)(a2 + 9292) = LH_atou(v281);
      }
      if (*(void *)v279 == 0x45444F434F564E4ELL
        && *(void *)&v279[8] == 0x414C5245564F5F52
        && *(void *)&v279[16] == 0x454D4152464E5F50
        && *(unsigned __int16 *)&v279[24] == 83)
      {
        *(_DWORD *)(a2 + 9300) = LH_atou(v281);
      }
      if (*(void *)v279 == 0x45444F434F564E4ELL
        && *(void *)&v279[8] == 0x545F4C4145525F52
        && *(void *)&v279[16] == 0x544341465F454D49
        && *(void *)&v279[19] == 0x524F544341465FLL)
      {
        float v178 = atof(v281);
        *(float *)(a2 + 9304) = v178;
      }
      if (*(void *)v279 == 0x45444F434F564E4ELL
        && *(void *)&v279[8] == 0x434E4554414C5F52
        && *(unsigned __int16 *)&v279[16] == 89)
      {
        *(_DWORD *)(a2 + 9308) = LH_atou(v281);
      }
      if (*(void *)v279 == 0x45444F434F564E4ELL
        && *(void *)&v279[8] == 0x4441455248545F52
        && *(void *)&v279[11] == 0x4E534441455248)
      {
        *(_DWORD *)(a2 + 9296) = LH_atou(v281);
      }
      if (*(void *)v279 == 0x45444F434F564E4ELL
        && *(void *)&v279[8] == 0x4B4E554843425F52
        && *(_DWORD *)&v279[16] == 4673097)
      {
        *(_DWORD *)(a2 + 9312) = LH_atoi(v281) != 0;
      }
      if (*(void *)v279 == 0x45444F434F564E4ELL
        && *(void *)&v279[8] == 0x5A4953504F485F52
        && *(unsigned __int16 *)&v279[16] == 69)
      {
        *(_DWORD *)(a2 + 9316) = LH_atou(v281);
      }
      if (*(void *)v279 == 0x43495453554F4341
        && *(void *)&v279[8] == 0x5F54555054554F5FLL
        && *(unsigned int *)&v279[16] == 5065028)
      {
        *(_DWORD *)(a2 + 9332) = LH_atou(v281);
      }
      if (*(void *)v279 == 0x5F454D4152465F4ELL
        && *(void *)&v279[8] == 0x434E455245464E49
        && *(unsigned __int16 *)&v279[16] == 69)
      {
        *(_DWORD *)(a2 + 9336) = LH_atou(v281);
      }
      if (*(void *)v279 == 0x4E59535F4E4E5F42 && *(void *)&v279[3] == 0x48544E59535F4ELL) {
        *(_DWORD *)(a2 + 9240) = LH_atoi(v281) != 0;
      }
      if (*(void *)v279 == 0x4553325145535F42
        && *(void *)&v279[8] == 0x5453554F43415F51
        && *(void *)&v279[11] == 0x43495453554F43)
      {
        *(_DWORD *)(a2 + 9244) = LH_atoi(v281) != 0;
      }
      if (*(void *)v279 == 0x4553325145535F42
        && *(void *)&v279[8] == 0x4F434F564E4E5F51
        && *(unsigned int *)&v279[16] == 5391684)
      {
        *(_DWORD *)(a2 + 9248) = LH_atoi(v281) != 0;
      }
      if (*(void *)v279 == 0x4553325145535F42
        && *(void *)&v279[8] == 0x4F434F564E4E5F51
        && *(void *)&v279[16] == 0x544C554D5F524544
        && *(void *)&v279[22] == 0x444E414249544CLL)
      {
        *(_DWORD *)(a2 + 9252) = LH_atoi(v281) != 0;
      }
      if (*(void *)v279 == 0x4C4C415241505F42
        && *(void *)&v279[8] == 0x434F564E4E5F4C45
        && *(void *)&v279[13] == 0x5245444F434F56)
      {
        *(_DWORD *)(a2 + 9256) = LH_atoi(v281) != 0;
      }
      if (*(void *)v279 == 0x52544F4341545F42
        && *(void *)&v279[8] == 0x41455254535F4E4FLL
        && *(void *)&v279[16] == 0x45444F4345445F4DLL
        && *(unsigned __int16 *)&v279[24] == 82)
      {
        *(_DWORD *)(a2 + 9260) = LH_atoi(v281) != 0;
      }
      if (!(*(void *)v279 ^ 0x5F4B4E5548435F42 | *(void *)&v279[8] ^ 0x425F484352414553 | *(void *)&v279[16] ^ 0x53445241574B4341 | v279[24])) {
        *(_DWORD *)(a2 + 9276) = LH_atoi(v281) != 0;
      }
      if (*(void *)v279 == 0x4E4F52544F434154
        && *(void *)&v279[8] == 0x4632454E4F48505FLL
        && *(void *)&v279[16] == 0x4143535F454D4152
        && *(void *)&v279[19] == 0x454C4143535F45)
      {
        *(_DWORD *)(a2 + 9264) = LH_atou(v281);
      }
      if (*(void *)v279 == 0x4E4F52544F434154
        && *(void *)&v279[8] == 0x4C49535F4D43505FLL
        && *(void *)&v279[16] == 0x4F4853455248545FLL
        && *(void *)&v279[19] == 0x444C4F48534552)
      {
        *(_DWORD *)(a2 + 9268) = LH_atou(v281);
      }
      if (*(void *)v279 == 0x4E4F52544F434154
        && *(void *)&v279[8] == 0x535F4B4E5548435FLL
        && *(void *)&v279[16] == 0x48505F4843524145
        && *(void *)&v279[21] == 0x53454E4F48505FLL)
      {
        *(_DWORD *)(a2 + 9272) = LH_atou(v281);
      }
      signed int v166 = v269 + v168;
      if (*(void *)v279 != 0x5F5041545F524946 || *(unsigned int *)&v279[8] != 5068110) {
        goto LABEL_816;
      }
      BOOL v214 = v280[0];
      unsigned int v215 = LH_atou(v281);
      unsigned int v216 = v215;
      if (v215 <= *(_DWORD *)(a2 + 9328))
      {
        *(_DWORD *)(a2 + 9328) = v215;
        if (v215)
        {
          uint64_t v270 = v215;
LABEL_823:
          uint64_t v218 = 0;
          do
          {
            LODWORD(v277) = 64;
            int v219 = ssftriff_reader_ReadStringZ(a3, (uint64_t)v214, v19, v166, v279, (unsigned int *)&v277);
            if ((v219 & 0x80000000) == 0)
            {
              v166 += (int)v277;
              LODWORD(v277) = 64;
              int v219 = ssftriff_reader_ReadStringZ(a3, (uint64_t)v214, v19, v166, v281, (unsigned int *)&v277);
            }
            int v220 = v219;
            float v221 = atof(v281);
            *(float *)(*(void *)(a2 + 9320) + 4 * v218) = v221;
            if (v220 < 0) {
              break;
            }
            ++v218;
            int v222 = (int)v277;
            if (v166 >= (int)v19) {
              int v222 = 0;
            }
            v166 += v222;
          }
          while (v270 != v218);
        }
      }
      else
      {
        uint64_t v217 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 9320), 4 * v215);
        *(void *)(a2 + 9320) = v217;
        if (v217)
        {
          uint64_t v270 = v216;
          *(_DWORD *)(a2 + 9328) = v216;
          goto LABEL_823;
        }
      }
LABEL_816:
      int v8 = a4;
      uint64_t v12 = v266;
      if (v166 >= (int)v19) {
        goto LABEL_873;
      }
    }
    LODWORD(v13) = StringZ;
LABEL_873:
    int v29 = 1;
    uint64_t v11 = (uint64_t *)a1;
LABEL_880:
    if (!v29) {
LABEL_881:
    }
      select_bet6_loc_LogChunkStack((uint64_t)v11, a2, a5, v20, v21, v22, v23, v24);
LABEL_882:
    int v243 = ssftriff_reader_CloseChunk(a3);
    BOOL v244 = (int)v13 > -1 && v243 < 0;
    if (v244) {
      uint64_t v13 = v243;
    }
    else {
      uint64_t v13 = v13;
    }
    if ((v13 & 0x80000000) != 0)
    {
LABEL_893:
      if ((v13 & 0x1FFF) == 0x14)
      {
        uint64_t v13 = 0;
        *uint64_t v12 = 0;
      }
      return v13;
    }
  }
  if (!strcmp(a5, "FEEX"))
  {
    if (!(*(_DWORD *)__src ^ 0x54414356 | v274))
    {
      *(void *)v279 = 0;
      uint64_t v134 = ssftriff_reader_GetChunkData(a3, v275, v279, v20, v21, v22, v23, v24);
      if ((v134 & 0x80000000) == 0)
      {
        LODWORD(v13) = select_bet6_ParseRiff(v11, a2, a3, 2, a5);
        goto LABEL_882;
      }
      return v134;
    }
    unsigned int v133 = v275;
    if (*(_DWORD *)__src ^ 0x504F4256 | v274)
    {
      if (*(_DWORD *)__src ^ 0x33455250 | v274)
      {
        if (*(_DWORD *)__src ^ 0x33415254 | v274)
        {
          int v8 = a4;
          uint64_t v11 = (uint64_t *)a1;
          if (*(_DWORD *)__src ^ 0x334D4850 | v274)
          {
            LODWORD(v13) = 0;
            goto LABEL_881;
          }
          *(void *)v279 = 0;
          LODWORD(v13) = ssftriff_reader_GetChunkData(a3, v275, v279, v20, v21, v22, v23, v24);
          if ((v13 & 0x80000000) != 0) {
            goto LABEL_882;
          }
          uint64_t v135 = *(const void **)v279;
          if (v133 >= 0x100) {
            size_t v136 = 256;
          }
          else {
            size_t v136 = v133;
          }
          uint64_t v137 = v251;
LABEL_576:
          memcpy(v137, v135, v136);
          goto LABEL_882;
        }
        *(void *)v279 = 0;
        LODWORD(v13) = ssftriff_reader_GetChunkData(a3, v275, v279, v20, v21, v22, v23, v24);
        if ((v13 & 0x80000000) == 0 && v133 >= 2)
        {
          unsigned __int16 v226 = 0;
          do
          {
            if (*(unsigned __int16 *)(*(void *)v279 + 2 * v226) < 8u) {
              *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)(*(void *)v279 + 2 * v226) + 12720) = 1;
            }
            else {
              log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET6", 3, 0, (uint64_t)"Unknown transition feature: %u for %s", v223, v224, v225, *(unsigned __int16 *)(*(void *)v279 + 2 * v226));
            }
            ++v226;
          }
          while (v133 >> 1 > v226);
        }
      }
      else
      {
        *(void *)v279 = 0;
        LODWORD(v13) = ssftriff_reader_GetChunkData(a3, v275, v279, v20, v21, v22, v23, v24);
        if ((v13 & 0x80000000) == 0 && v133 >= 2)
        {
          unsigned __int16 v143 = 0;
          do
          {
            if (*(unsigned __int16 *)(*(void *)v279 + 2 * v143) < 0x47u) {
              *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)(*(void *)v279 + 2 * v143) + 12392) = 1;
            }
            else {
              log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET6", 3, 0, (uint64_t)"Unknown preselection feature: %u for %s", v140, v141, v142, *(unsigned __int16 *)(*(void *)v279 + 2 * v143));
            }
            ++v143;
          }
          while (v133 >> 1 > v143);
        }
      }
      int v8 = a4;
      uint64_t v11 = (uint64_t *)a1;
      goto LABEL_882;
    }
    *(void *)v279 = 0;
    LODWORD(v13) = ssftriff_reader_GetChunkData(a3, v275, v279, v20, v21, v22, v23, v24);
    if ((v13 & 0x80000000) != 0) {
      goto LABEL_882;
    }
    uint64_t v135 = *(const void **)v279;
    if (v133 >= 0xF8) {
      size_t v136 = 248;
    }
    else {
      size_t v136 = v133;
    }
    uint64_t v137 = __dst;
    goto LABEL_576;
  }
  if (strcmp(a5, "NNFE")) {
    goto LABEL_881;
  }
  *(void *)v279 = 0;
  uint64_t v13 = ssftriff_reader_GetChunkData(a3, v275, v279, v20, v21, v22, v23, v24);
  if ((v13 & 0x80000000) == 0)
  {
    if (*(_DWORD *)__src ^ 0x544C4E4E | v274)
    {
      if (*(_DWORD *)__src ^ 0x46554E4E | v274)
      {
        int v29 = 0;
      }
      else
      {
        __int16 v144 = *(_WORD **)v279;
        v263[12] = **(_WORD **)v279;
        LODWORD(v13) = uselect_LoadRiffStringTable((uint64_t)v11, a3, v144, v275, v256);
        int v29 = 1;
      }
      goto LABEL_880;
    }
    uint64_t v138 = v263;
    unsigned int v139 = *v263;
    if (v139 > 0x10)
    {
      LODWORD(v13) = -2065686524;
LABEL_600:
      int v29 = 1;
      uint64_t v12 = v266;
      goto LABEL_880;
    }
    uint64_t v145 = *(void *)v279;
    unsigned int v146 = v275;
    if (!*((void *)v263 + 1))
    {
      uint64_t v147 = heap_Calloc((void *)v11[1], 18, 16);
      *((void *)v263 + 1) = v147;
      LODWORD(v13) = -2065686518;
      if (!v147) {
        goto LABEL_600;
      }
      uint64_t v138 = v263;
      LOWORD(v139) = *v263;
    }
    _WORD *v138 = v139 + 1;
    *(_DWORD *)v281 = 0;
    int StringW = ssftriff_reader_ReadStringW(a3, v145, v146, 0, 0, (unsigned int *)v281);
    if ((StringW & 0x80000000) == 0 || (LODWORD(v13) = StringW, (StringW & 0x1FFF) == 9))
    {
      __int16 v149 = (unsigned char *)heap_Alloc(v11[1], *(unsigned int *)v281);
      *(void *)(*((void *)v263 + 1) + 16 * *v263 - 16) = v149;
      LODWORD(v13) = -2065686518;
      if (v149)
      {
        int v150 = ssftriff_reader_ReadStringW(a3, v145, v146, 0, v149, (unsigned int *)v281);
        if ((v150 & 0x80000000) == 0)
        {
          uint64_t v151 = (*(_DWORD *)v281 - 1) + 2;
          if (v281[0]) {
            int v152 = (_WORD *)(v145 + v151);
          }
          else {
            int v152 = (_WORD *)(v145 + v151 + 1);
          }
          int v150 = uselect_LoadRiffStringTable((uint64_t)v11, a3, v152, ((__PAIR64__(v146, v281[0] & 1) - 1) >> 32) - (*(_DWORD *)v281 + 1), (uint64_t *)(*((void *)v263 + 1) + 16 * *v263 - 8));
        }
        LODWORD(v13) = v150;
      }
    }
    goto LABEL_600;
  }
  return v13;
}

uint64_t select_bet6_loc_LogChunkStack(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  v13[0] = 0;
  if (*a3)
  {
    unsigned int v10 = 1;
    do
    {
      __strcat_chk();
      __strcat_chk();
      uint64_t v11 = &a3[5 * v10++];
    }
    while (*v11);
  }
  return log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET6", 3, 0, (uint64_t)"Unknown data: %s for %s", a6, a7, a8, (uint64_t)v13);
}

void *select_bet6_loc_VoiceClose(void *result, char *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)*((void *)a2 + 16);
    if (v4)
    {
      if (*((void *)a2 + 1019))
      {
        (*(void (**)(void))(v4[1] + 48))(v4[2]);
        *((void *)a2 + 1019) = 0;
        *((_DWORD *)a2 + 2040) = 0;
      }
      if (*((void *)a2 + 1021))
      {
        (*(void (**)(void))(v4[1] + 48))(v4[2]);
        *((void *)a2 + 1021) = 0;
        *((_DWORD *)a2 + 2044) = 0;
      }
      if (*((void *)a2 + 1023))
      {
        (*(void (**)(void))(v4[1] + 48))(v4[2]);
        *((void *)a2 + 1023) = 0;
        *((_DWORD *)a2 + 2048) = 0;
      }
      fi_rsc_destroy(v4);
    }
    uint64_t v5 = (uint64_t *)*((void *)a2 + 1476);
    if (v5 && *v5)
    {
      uint64_t v6 = 0;
      unsigned int v7 = 1;
      do
      {
        *(void *)&a2[8 * v6 + 5440] = 0;
        uint64_t v5 = (uint64_t *)*((void *)a2 + 1476);
        uint64_t v6 = v7;
      }
      while (v5[v7++]);
    }
    uint64_t v9 = a2 + 37744;
    uselect_FreeRiffStringTable(v3, v5);
    uselect_FreeRiffStringTable(v3, *((uint64_t **)a2 + 1477));
    select_bet6_loc_FreeSirenFeatList(v3, (uint64_t)(a2 + 8120));
    select_bet6_loc_FreeSirenFeatList(v3, (uint64_t)(a2 + 8136));
    uint64_t v16 = *((void *)a2 + 27);
    if (v16) {
      heap_Free((void *)v3[1], v16);
    }
    uint64_t v17 = *((void *)a2 + 1165);
    if (v17)
    {
      heap_Free((void *)v3[1], v17);
      *((void *)a2 + 1165) = 0;
    }
    *((void *)a2 + 27) = 0;
    if (*((_WORD *)a2 + 18996))
    {
      unint64_t v18 = 0;
      do
        ssftriff_reader_ReleaseChunkData(*(void **)&a2[8 * v18++ + 37784], v17, v10, v11, v12, v13, v14, v15);
      while (v18 < *((unsigned __int16 *)a2 + 18996));
    }
    *((_WORD *)a2 + 18996) = 0;
    *a2 = 0;
    if (*((_DWORD *)a2 + 9444))
    {
      uselect_FreeRiffStringTable(v3, *((uint64_t **)a2 + 4720));
      uint64_t v19 = *((void *)a2 + 4719);
      if (v19)
      {
        if (*v9)
        {
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          do
          {
            uint64_t v22 = *((void *)a2 + 4719);
            uint64_t v23 = *(void *)(v22 + v20);
            if (v23)
            {
              heap_Free((void *)v3[1], v23);
              uint64_t v22 = *((void *)a2 + 4719);
            }
            uselect_FreeRiffStringTable(v3, *(uint64_t **)(v22 + v20 + 8));
            ++v21;
            v20 += 16;
          }
          while (v21 < (unsigned __int16)*v9);
          uint64_t v19 = *((void *)a2 + 4719);
        }
        heap_Free((void *)v3[1], v19);
      }
    }
    bzero(a2, 0x9470uLL);
    uint64_t v24 = (void *)v3[1];
    return heap_Free(v24, (uint64_t)a2);
  }
  return result;
}

void *select_bet6_loc_FreeSirenFeatList(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = *(void **)a2;
    if (*(void *)a2)
    {
      bzero(result, 16 * *(unsigned int *)(a2 + 8));
      uint64_t result = heap_Free((void *)v3[1], *(void *)a2);
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t select_bet6_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2229280769;
  }
  uint64_t result = 0;
  *a2 = &ISelect_Bet6;
  return result;
}

uint64_t select_bet6_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2229280775;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 135969;
  }
  return result;
}

uint64_t select_bet6_ClassClose()
{
  return 0;
}

uint64_t select_bet6_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v5 = 2229280775;
  memset(v46, 0, sizeof(v46));
  if (a5)
  {
    v45[0] = 0;
    v45[1] = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v44);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      int v12 = 135970;
      if ((safeh_HandleCheck(a1, a2, 135969, 408) & 0x80000000) == 0)
      {
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        log_OutText(*(void *)(v44 + 32), (uint64_t)"SELECT_BET6", 4, 0, (uint64_t)"Entering select_bet6_ObjOpen", v13, v14, v15, v39);
        uint64_t v16 = (void *)heap_Calloc(*(void **)(v44 + 8), 1, 4680);
        uint64_t v21 = v44;
        if (!v16)
        {
          log_OutPublic(*(void *)(v44 + 32), (uint64_t)"SELECT_BET6", 72000, 0, v17, v18, v19, v20, v40);
          return 2229280778;
        }
        uint64_t v22 = v16;
        void *v16 = a1;
        v16[1] = v21;
        if (log_GetLogLevel(*(void *)(v44 + 32)) >= 2) {
          compstats_ObjOpen(a3, a4, 5u, (uint64_t)(v22 + 583));
        }
        uint64_t Object = objc_GetObject(*(void *)(v44 + 48), (uint64_t)"SYNTHSTREAM", &v43);
        if ((Object & 0x80000000) == 0)
        {
          v22[463] = *(void *)(v43 + 8);
          uint64_t Object = objc_GetObject(*(void *)(v44 + 48), (uint64_t)"LINGDB", &v43);
          if ((Object & 0x80000000) == 0)
          {
            uint64_t v28 = v44;
            v22[3] = *(void *)(v43 + 8);
            betX_CreateRegularBrokerString(v28, 0, (char *)v46, 0x80uLL);
            uint64_t v5 = select_bet6_VoiceOpen(*v22, v22[1], (uint64_t)v46, (uint64_t)v45);
            if ((v5 & 0x80000000) != 0) {
              goto LABEL_23;
            }
            uint64_t v29 = v45[0];
            v22[2] = v45[0];
            if (!v29)
            {
              log_OutPublic(*(void *)(v22[1] + 32), (uint64_t)"SELECT_BET6", 72001, 0, v24, v25, v26, v27, v40);
              goto LABEL_25;
            }
            uint64_t v30 = v29 + 9344;
            uint64_t v31 = v29 + 136;
            int v32 = *(_DWORD *)(v29 + 37776);
            uint64_t v33 = v29 + 37744;
            if (v32) {
              uint64_t v34 = v33;
            }
            else {
              uint64_t v34 = 0;
            }
            uint64_t Object = select_bet6_FeatureExtractObjOpen(a3, a4, v22[463], v22[3], v30, v31, v34, v22 + 575);
            if ((Object & 0x80000000) == 0)
            {
              uint64_t v35 = *(void *)(v44 + 40);
              int v41 = v22;
              long long v42 = xmmword_26C21F7C0;
              uint64_t v36 = paramc_ListenerAdd(v35, "waitfactor", &v41);
              uint64_t v37 = v22[1];
              if ((v36 & 0x80000000) != 0)
              {
                uint64_t v5 = v36;
                goto LABEL_24;
              }
              if ((paramc_ParamGetInt(*(void *)(v37 + 40), (uint64_t)"waitfactor", (int *)v22 + 1155) & 0x80000000) != 0) {
                *((_DWORD *)v22 + 1155) = 2;
              }
              uint64_t v5 = siren_pipeline_Init(v44, (uint64_t)(v22 + 583), v22[2] + 128, v22 + 576);
              if ((v5 & 0x80000000) == 0) {
                goto LABEL_25;
              }
LABEL_23:
              uint64_t v37 = v22[1];
LABEL_24:
              log_OutPublic(*(void *)(v37 + 32), (uint64_t)"SELECT_BET6", 72001, "%s%x", v24, v25, v26, v27, "lhError");
              *(void *)a5 = v22;
              *(_DWORD *)(a5 + 8) = 135970;
              select_bet6_ObjClose(v22, *(void *)(a5 + 8));
              uint64_t v22 = 0;
              int v12 = 0;
LABEL_25:
              *(void *)a5 = v22;
              *(_DWORD *)(a5 + 8) = v12;
              log_OutText(*(void *)(v44 + 32), (uint64_t)"SELECT_BET6", 4, 0, (uint64_t)"select_bet6_ObjOpen: %x", v25, v26, v27, v5);
              return v5;
            }
          }
        }
        uint64_t v5 = Object;
        goto LABEL_23;
      }
      return 2229280776;
    }
  }
  return v5;
}

uint64_t select_bet6_ObjClose(uint64_t *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135970, 4680) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v30 = 0;
  uint64_t v6 = a1[1];
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SELECT_BET6", 4, 0, (uint64_t)"Entering select_bet6_ObjClose", v3, v4, v5, v26);
  uint64_t v29 = a1[2];
  LODWORD(v30) = 135971;
  LODWORD(v7) = select_bet6_VoiceClose(*a1, &v29);
  uint64_t v8 = a1[583];
  if (v8) {
    compstats_ObjClose(v8, a1[584]);
  }
  uint64_t v9 = *(void *)(v6 + 40);
  uint64_t v27 = a1;
  long long v28 = xmmword_26C21F7C0;
  int v10 = paramc_ListenerRemove(v9, "waitfactor", (long long *)&v27);
  if ((int)v7 > -1 && v10 < 0) {
    uint64_t v7 = v10;
  }
  else {
    uint64_t v7 = v7;
  }
  uint64_t v12 = a1[576];
  if (v12)
  {
    int v13 = siren_pipeline_DeInit(v12);
    if ((int)v7 > -1 && v13 < 0) {
      uint64_t v7 = v13;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  uint64_t v15 = a1[575];
  if (v15)
  {
    int ObjClose = select_bet6_FeatureExtractObjClose(v15);
    if ((int)v7 > -1 && ObjClose < 0) {
      uint64_t v7 = ObjClose;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  if (a1[3])
  {
    int v18 = objc_ReleaseObject(*(void *)(v6 + 48), (uint64_t)"LINGDB");
    if ((int)v7 > -1 && v18 < 0) {
      uint64_t v7 = v18;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  if (a1[463])
  {
    int v20 = objc_ReleaseObject(*(void *)(v6 + 48), (uint64_t)"SYNTHSTREAM");
    if ((int)v7 > -1 && v20 < 0) {
      uint64_t v7 = v20;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  heap_Free(*(void **)(v6 + 8), (uint64_t)a1);
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SELECT_BET6", 4, 0, (uint64_t)"Leaving select_bet6_ObjClose: %x", v22, v23, v24, v7);
  return v7;
}

uint64_t select_bet6_ObjReopen(uint64_t *a1, int a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  *(_OWORD *)long long __s1 = 0u;
  long long v27 = 0u;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135970, 4680) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  log_OutText(*(void *)(a1[1] + 32), (uint64_t)"SELECT_BET6", 4, 0, (uint64_t)"Entering select_bet6_ObjReopen", v3, v4, v5, v23);
  LODWORD(v9) = betX_CreateRegularBrokerString(a1[1], 0, __s1, 0x80uLL);
  if ((v9 & 0x80000000) != 0 || (int v10 = (const char *)a1[2]) == 0 || !strcmp(__s1, v10))
  {
    ObjReopeuint64_t n = 0;
  }
  else
  {
    int v11 = siren_pipeline_DeInit(a1[576]);
    if (v11 < 0) {
      LODWORD(v9) = v11;
    }
    uint64_t v24 = a1[2];
    LODWORD(v25) = 135971;
    int v12 = select_bet6_VoiceClose(*a1, &v24);
    if (v12 < 0 || (int v12 = select_bet6_VoiceOpen(*a1, a1[1], (uint64_t)__s1, (uint64_t)&v24), v12 < 0))
    {
      ObjReopeuint64_t n = v12;
    }
    else
    {
      uint64_t v13 = v24;
      a1[2] = v24;
      if ((siren_pipeline_Init(a1[1], (uint64_t)(a1 + 583), v13 + 128, a1 + 576) & 0x80000000) != 0) {
        select_bet6_VoiceClose(*a1, &v24);
      }
      uint64_t v14 = a1[2];
      uint64_t v15 = v14 + 9344;
      uint64_t v16 = v14 + 136;
      int v17 = *(_DWORD *)(v14 + 37776);
      uint64_t v18 = v14 + 37744;
      if (v17) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      ObjReopeuint64_t n = select_bet6_FeatureExtractObjReopen(a1[575], v15, v16, v19);
      if (ObjReopen < 0) {
        select_bet6_VoiceClose(*a1, &v24);
      }
    }
  }
  if (ObjReopen >= 0 || (int)v9 <= -1) {
    uint64_t v9 = v9;
  }
  else {
    uint64_t v9 = ObjReopen;
  }
  log_OutText(*(void *)(a1[1] + 32), (uint64_t)"SELECT_BET6", 4, 0, (uint64_t)"select_bet6_ObjReopen: %x", v6, v7, v8, v9);
  return v9;
}

uint64_t select_bet6_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = 0;
  int v17 = 0;
  if ((safeh_HandleCheck(a1, a2, 135970, 4680) & 0x80000000) != 0) {
    return 2229280776;
  }
  synstrmaux_InitStreamOpener(a1 + 3776, *(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET6");
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 3776), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    a1 + 3712);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 3776), (uint64_t)"application/x-realspeak-bet6-speech-frames", a1 + 3728);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 3776), (uint64_t)"application/x-realspeak-bet6-sample-chunk", a1 + 3744);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 3776), (uint64_t)"applcation/x-realspeak-bet6-select-audio", a1 + 3760);
  uint64_t v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 3776), *(void *)(a1 + 3704), a3, a4);
  if ((v7 & 0x80000000) != 0) {
    synstrmaux_CloseStreams((_WORD *)(a1 + 3776), *(void *)(a1 + 3704));
  }
  *(void *)(a1 + 4632) = 0;
  *(_DWORD *)(a1 + 4640) = 0;
  *(_DWORD *)(a1 + 4624) = 0;
  *(_DWORD *)(a1 + 4616) = 0;
  *(_OWORD *)(a1 + 4648) = 0u;
  bzero((void *)(a1 + 32), 0xE48uLL);
  siren_pipeline_SetNFrameInfer(*(void *)(a1 + 4608), *(_DWORD *)(*(void *)(a1 + 16) + 9336));
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"bet6earlyemissionallowed", &v17) & 0x80000000) == 0
    && v17
    && *v17)
  {
    BOOL v8 = memchr("nNfF0", (char)*v17, 6uLL) == 0;
    siren_pipeline_SetChunking(*(void *)(a1 + 4608), v8);
    siren_pipeline_SetSecondaryChunking(*(void *)(a1 + 4608), v8);
  }
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"style", &v16) & 0x80000000) == 0
    && v16
    && *v16)
  {
    BOOL v12 = memchr("nN0", (char)*v16, 4uLL) == 0;
    siren_pipeline_SetSpeakerID(*(void *)(a1 + 4608), v12);
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 9296) >= 2u
    && siren_pipeline_GetChunking(*(void *)(a1 + 4608)))
  {
    log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET6", 1, 0, (uint64_t)"Multi-thread on, but chunking is inactive!", v9, v10, v11, (uint64_t)v16);
  }
  uint64_t v13 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v13 + 9296) >= 2u && !*(_DWORD *)(v13 + 9312)) {
    log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET6", 0, 0, (uint64_t)"Multi-thread on , but NnvocoderChuning is inactive! Have a look on Riffpack config.", v9, v10, v11, (uint64_t)v16);
  }
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 4664);
    if (v14) {
      compstats_Reset(v14);
    }
  }
  siren_pipeline_reset_acoustic_net_seed(*(void *)(a1 + 4608));
  return v7;
}

uint64_t select_bet6_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v9 = safeh_HandleCheck(a1, a2, 135970, 4680);
  if ((v9 & 0x80000000) != 0) {
    return 2229280776;
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v15 = *(_DWORD **)(a1 + 16);
  int v16 = v15[2311];
  if (v15[2324] >= 2u)
  {
    uint64_t v28 = v9;
    if (v16) {
      return v28;
    }
    int v95 = 0;
    int v17 = (void *)(a1 + 32);
    *a5 = 1;
    uint64_t v34 = *(void *)(a1 + 4664);
    if (v34) {
      compstats_Start(v34, *(void *)(a1 + 4672), 0, v10, v11, v12, v13, v14);
    }
    uint64_t v19 = (_DWORD *)(a1 + 4616);
    int v35 = *(_DWORD *)(a1 + 4616);
    if (v35 == 5 || !v35)
    {
      *(_DWORD *)(a1 + 4616) = 0;
      uint64_t v36 = *(void *)(a1 + 4664);
      if (v36) {
        compstats_Start(v36, *(void *)(a1 + 4672), 1, v10, v11, v12, v13, v14);
      }
      uint64_t v22 = (uint64_t *)(a1 + 3688);
      uint64_t v23 = (_DWORD *)(a1 + 3696);
      uint64_t v28 = select_bet6_FeatureExtractProcessStart(*(void *)(a1 + 4600), a3, a4, (void *)(a1 + 32), a1 + 3688, a1 + 3696, &v95);
      if ((v28 & 0x80000000) == 0)
      {
        if (*(__int16 *)(a1 + 42) <= 1)
        {
          int v29 = v95;
          if (v95) {
            goto LABEL_39;
          }
          goto LABEL_42;
        }
        goto LABEL_55;
      }
      goto LABEL_54;
    }
    uint64_t v67 = *(void *)(a1 + 4664);
    if (v67) {
      compstats_Start(v67, *(void *)(a1 + 4672), 2, v10, v11, v12, v13, v14);
    }
    unsigned int v50 = siren_pipeline_Process(*(void *)(a1 + 4608), *(int **)(a1 + 4632), (int *)(a1 + 4640), (int *)(a1 + 4616), v11, v12, v13, v14);
    int v51 = *(_DWORD *)(a1 + 4616);
    if (v50 || (v51 & 0xFFFFFFFE) != 4)
    {
LABEL_106:
      if (v51 == 6) {
        int v72 = 1;
      }
      else {
        int v72 = 4;
      }
      *a5 = v72;
      if (*v19 == 6) {
        uint64_t v28 = v50 | 0x84E02000;
      }
      else {
        uint64_t v28 = v50;
      }
      goto LABEL_153;
    }
    int v68 = select_bet6_loc_WriteStreams_MT(a1);
    uint64_t v28 = v68 & (v68 >> 31);
    if (*(_DWORD *)(a1 + 4616) != 5) {
      goto LABEL_151;
    }
    int v59 = select_bet6_loc_WriteStreams_MT(a1);
LABEL_93:
    if (v59 < 0 && (int)v28 > -1) {
      LODWORD(v28) = v59;
    }
    if (*(_DWORD *)(a1 + 4640))
    {
      heap_Free(*(void **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 4632));
      *(_DWORD *)(a1 + 4624) = 0;
      *(void *)(a1 + 4632) = 0;
      *(void *)(a1 + 4640) = 0;
      *(_DWORD *)(a1 + 4656) = 0;
      *(void *)(a1 + 4648) = 0;
    }
    int ProcessEnd = select_bet6_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 4600), v17, (uint64_t *)(a1 + 3688), (_DWORD *)(a1 + 3696));
    if (ProcessEnd < 0 && (int)v28 > -1) {
      LODWORD(v28) = ProcessEnd;
    }
    goto LABEL_144;
  }
  if (!v16 && !v15[2312] && !v15[2314] && !v15[2315])
  {
LABEL_19:
    int v97 = 0;
    int v17 = (void *)(a1 + 32);
    *a5 = 1;
    uint64_t v30 = *(void *)(a1 + 4664);
    if (v30) {
      compstats_Start(v30, *(void *)(a1 + 4672), 0, v10, v11, v12, v13, v14);
    }
    uint64_t v19 = (_DWORD *)(a1 + 4616);
    int v31 = *(_DWORD *)(a1 + 4616);
    if (v31 == 5 || !v31)
    {
      *(_DWORD *)(a1 + 4616) = 0;
      uint64_t v32 = *(void *)(a1 + 4664);
      if (v32) {
        compstats_Start(v32, *(void *)(a1 + 4672), 1, v10, v11, v12, v13, v14);
      }
      uint64_t v22 = (uint64_t *)(a1 + 3688);
      uint64_t v23 = (_DWORD *)(a1 + 3696);
      uint64_t v28 = select_bet6_FeatureExtractProcessStart(*(void *)(a1 + 4600), a3, a4, (void *)(a1 + 32), a1 + 3688, a1 + 3696, &v97);
      if ((v28 & 0x80000000) == 0)
      {
        if (*(__int16 *)(a1 + 42) <= 1)
        {
          int v29 = v97;
          if (v97)
          {
            int updated = select_bet6_loc_UpdateMarkers(a1, 1);
            select_bet6_loc_WriteStreams(a1, updated, 3u);
            goto LABEL_39;
          }
LABEL_42:
          *a5 = v29;
          int v37 = select_bet6_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 4600), v17, v22, v23);
          if ((int)v28 > -1 && v37 < 0) {
            int v39 = v37;
          }
          else {
            int v39 = v28;
          }
          int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 64))(a3, a4);
          if (v39 > -1 && v40 < 0) {
            uint64_t v28 = v40;
          }
          else {
            uint64_t v28 = v39;
          }
          goto LABEL_85;
        }
LABEL_55:
        uint64_t Process = select_bet6_FeatureExtractProcess(*(uint64_t **)(a1 + 4600), a3, a4, (unsigned int *)(a1 + 4620), (uint64_t)v17, v22, v23, (uint64_t *)(a1 + 4632), (_DWORD *)(a1 + 4640));
        if ((Process & 0x80000000) != 0)
        {
          uint64_t v28 = Process;
        }
        else
        {
          int v48 = *(_DWORD *)(a1 + 3696) * *(unsigned __int16 *)(a1 + 42);
          *(_DWORD *)(a1 + 3696) = v48;
          uint64_t v28 = siren_pipeline_ProcessStart(*(void *)(a1 + 4608), (uint64_t)v17, *(void *)(a1 + 3688), v48, v19);
          if ((v28 & 0x80000000) == 0)
          {
            *a5 = 4;
            goto LABEL_85;
          }
        }
        select_bet6_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 4600), v17, v22, v23);
        goto LABEL_85;
      }
LABEL_54:
      log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET6", 72001, "%s%x", v24, v25, v26, v27, "lhError");
LABEL_85:
      uint64_t v64 = *(void *)(a1 + 4664);
      if (!v64) {
        return v28;
      }
      uint64_t v65 = *(void *)(a1 + 4672);
      uint64_t v66 = 1;
      goto LABEL_155;
    }
    uint64_t v49 = *(void *)(a1 + 4664);
    if (v49) {
      compstats_Start(v49, *(void *)(a1 + 4672), 2, v10, v11, v12, v13, v14);
    }
    unsigned int v50 = siren_pipeline_Process(*(void *)(a1 + 4608), *(int **)(a1 + 4632), (int *)(a1 + 4640), (int *)(a1 + 4616), v11, v12, v13, v14);
    int v51 = *(_DWORD *)(a1 + 4616);
    if (v50 || (v51 & 0xFFFFFFFE) != 4) {
      goto LABEL_106;
    }
    BOOL v52 = v51 == 4;
    if (v51 == 4) {
      int v53 = 1;
    }
    else {
      int v53 = 2;
    }
    if (v52) {
      int v54 = 0;
    }
    else {
      int v54 = 3;
    }
    if (*(_DWORD *)(a1 + 4624)) {
      unsigned int v55 = v53;
    }
    else {
      unsigned int v55 = v54;
    }
    int v56 = select_bet6_loc_UpdateMarkers(a1, 0);
    int v57 = select_bet6_loc_WriteStreams(a1, v56, v55);
    uint64_t v28 = v57 & (v57 >> 31);
    *(_DWORD *)(a1 + 4644) += v56;
    *(_DWORD *)(a1 + 4648) = siren_pipeline_GetPhoneCount(*(void *)(a1 + 4608));
    *(_DWORD *)(a1 + 4652) = siren_pipeline_GetFrameCount(*(void *)(a1 + 4608));
    ++*(_DWORD *)(a1 + 4624);
    if (*(_DWORD *)(a1 + 4616) != 5) {
      goto LABEL_151;
    }
    int v58 = select_bet6_loc_UpdateMarkers(a1, 1);
    int v59 = select_bet6_loc_WriteStreams(a1, v58, 3u);
    goto LABEL_93;
  }
  int v96 = 0;
  int v17 = (void *)(a1 + 32);
  *a5 = 1;
  uint64_t v18 = *(void *)(a1 + 4664);
  if (v18) {
    compstats_Start(v18, *(void *)(a1 + 4672), 0, v10, v11, v12, v13, v14);
  }
  uint64_t v19 = (_DWORD *)(a1 + 4616);
  int v20 = *(_DWORD *)(a1 + 4616);
  if (v20 == 5 || !v20)
  {
    *(_DWORD *)(a1 + 4616) = 0;
    uint64_t v21 = *(void *)(a1 + 4664);
    if (v21) {
      compstats_Start(v21, *(void *)(a1 + 4672), 1, v10, v11, v12, v13, v14);
    }
    uint64_t v22 = (uint64_t *)(a1 + 3688);
    uint64_t v23 = (_DWORD *)(a1 + 3696);
    uint64_t v28 = select_bet6_FeatureExtractProcessStart(*(void *)(a1 + 4600), a3, a4, (void *)(a1 + 32), a1 + 3688, a1 + 3696, &v96);
    if ((v28 & 0x80000000) == 0)
    {
      if (*(__int16 *)(a1 + 42) <= 1)
      {
        int v29 = v96;
        if (v96)
        {
          select_bet6_loc_UpdateMarkers(a1, 1);
LABEL_39:
          if (*(_DWORD *)(a1 + 4640))
          {
            heap_Free(*(void **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 4632));
            *(_DWORD *)(a1 + 4624) = 0;
            *(void *)(a1 + 4632) = 0;
            *(void *)(a1 + 4648) = 0;
            *(void *)(a1 + 4640) = 0;
            *(_DWORD *)(a1 + 4656) = 0;
          }
          LODWORD(v28) = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 3776), *(void *)(a1 + 3704));
          int v29 = 1;
          goto LABEL_42;
        }
        goto LABEL_42;
      }
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  uint64_t v60 = *(void *)(a1 + 4664);
  if (v60) {
    compstats_Start(v60, *(void *)(a1 + 4672), 2, v10, v11, v12, v13, v14);
  }
  uint64_t v61 = (int *)(a1 + 4640);
  unsigned int v50 = siren_pipeline_Process(*(void *)(a1 + 4608), *(int **)(a1 + 4632), (int *)(a1 + 4640), (int *)(a1 + 4616), v11, v12, v13, v14);
  int v51 = *(_DWORD *)(a1 + 4616);
  if (v50 || (v51 - 2) > 3) {
    goto LABEL_106;
  }
  unsigned int v62 = *(_DWORD *)(a1 + 4624);
  switch(v51)
  {
    case 2:
      unsigned int v63 = 0;
      break;
    case 3:
      unsigned int v63 = 1;
      break;
    case 5:
      if (siren_pipeline_GetSecondaryChunking(*(void *)(a1 + 4608))
        && siren_pipeline_GetSecondaryChunkingCount(*(void *)(a1 + 4608)) > 1)
      {
        unsigned int v63 = 5;
      }
      else if (siren_pipeline_GetChunking(*(void *)(a1 + 4608)) {
             && siren_pipeline_GetPhoneChunkingCount(*(void *)(a1 + 4608)) > 1)
      }
      {
        unsigned int v63 = 6;
      }
      else
      {
        unsigned int v63 = 3;
      }
      break;
    default:
      if (siren_pipeline_GetSecondaryChunking(*(void *)(a1 + 4608))
        && siren_pipeline_GetSecondaryChunkingCount(*(void *)(a1 + 4608)) > 1)
      {
        unsigned int v63 = 2;
      }
      else
      {
        unsigned int v63 = 4;
      }
      break;
  }
  if (siren_pipeline_GetChunking(*(void *)(a1 + 4608)))
  {
    int SecondaryChunking = siren_pipeline_GetSecondaryChunking(*(void *)(a1 + 4608));
    uint64_t v74 = *(void *)(a1 + 4608);
    if (SecondaryChunking) {
      int SecondaryMarkerCount = siren_pipeline_GetSecondaryMarkerCount(v74);
    }
    else {
      int SecondaryMarkerCount = siren_pipeline_GetMarkerCount(v74, v62);
    }
    int v76 = SecondaryMarkerCount;
  }
  else
  {
    int v76 = *v61;
  }
  uint64_t v77 = select_bet6_loc_WriteStreams(a1, v76, v63);
  if ((v77 & 0x80000000) != 0)
  {
    uint64_t v28 = v77;
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET6", 72001, "%s%x", v78, v79, v80, v81, "lhError");
  }
  else
  {
    uint64_t v28 = 0;
  }
  *(_DWORD *)(a1 + 4644) += v76;
  uint64_t v82 = *(void *)(a1 + 4608);
  if (*(_DWORD *)(*(void *)(a1 + 16) + 9244)) {
    *(_DWORD *)(a1 + 4656) = siren_pipeline_GetiSample(v82);
  }
  else {
    *(_DWORD *)(a1 + 4652) = siren_pipeline_GetFrameCount(v82);
  }
  ++*(_DWORD *)(a1 + 4624);
  if ((*(_DWORD *)(a1 + 4616) & 0xFFFFFFFE) == 4)
  {
    uint64_t v28 = siren_pipeline_freeSecondaryChunkingMemory(*(void **)(a1 + 4608));
    if (*(_DWORD *)(a1 + 4616) == 5)
    {
      if (*v61)
      {
        heap_Free(*(void **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 4632));
        *(_DWORD *)(a1 + 4624) = 0;
        *(void *)(a1 + 4632) = 0;
        *(void *)(a1 + 4640) = 0;
        *(_DWORD *)(a1 + 4656) = 0;
        *(void *)(a1 + 4648) = 0;
      }
      int v83 = select_bet6_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 4600), (void *)(a1 + 32), (uint64_t *)(a1 + 3688), (_DWORD *)(a1 + 3696));
      if ((int)v28 > -1 && v83 < 0) {
        LODWORD(v28) = v83;
      }
LABEL_144:
      int v85 = siren_pipeline_ProcessEnd(*(void *)(a1 + 4608), v19);
      if ((int)v28 > -1 && v85 < 0) {
        uint64_t v28 = v85;
      }
      else {
        uint64_t v28 = v28;
      }
      int v87 = 1;
      goto LABEL_152;
    }
  }
LABEL_151:
  int v87 = 2;
LABEL_152:
  *a5 = v87;
LABEL_153:
  uint64_t v64 = *(void *)(a1 + 4664);
  if (!v64) {
    return v28;
  }
  uint64_t v65 = *(void *)(a1 + 4672);
  uint64_t v66 = 2;
LABEL_155:
  compstats_Stop(v64, v65, v66, v41, v42, v43, v44, v45);
  uint64_t v93 = *(void *)(a1 + 4664);
  if (v93) {
    compstats_Stop(v93, *(void *)(a1 + 4672), 0, v88, v89, v90, v91, v92);
  }
  return v28;
}

uint64_t select_bet6_ProcessEnd(uint64_t a1, int a2)
{
  int v3 = safeh_HandleCheck(a1, a2, 135970, 4680);
  if (v3 < 0) {
    return 2229280776;
  }
  LODWORD(v4) = v3;
  if ((*(_DWORD *)(a1 + 4616) - 2) <= 2)
  {
    int ProcessEnd = select_bet6_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 4600), (void *)(a1 + 32), (uint64_t *)(a1 + 3688), (_DWORD *)(a1 + 3696));
    if (ProcessEnd < 0) {
      LODWORD(v4) = ProcessEnd;
    }
    siren_pipeline_ProcessEnd(*(void *)(a1 + 4608), (_DWORD *)(a1 + 4616));
    if ((int)v4 > 0) {
      LODWORD(v4) = v4 | 0x84E02000;
    }
    if (*(_DWORD *)(a1 + 4640))
    {
      heap_Free(*(void **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 4632));
      *(_DWORD *)(a1 + 4624) = 0;
      *(void *)(a1 + 4632) = 0;
      *(void *)(a1 + 4648) = 0;
      *(void *)(a1 + 4640) = 0;
      *(_DWORD *)(a1 + 4656) = 0;
    }
  }
  int v6 = synstrmaux_CloseStreams((_WORD *)(a1 + 3776), *(void *)(a1 + 3704));
  if (v6 >= 0 || (int)v4 <= -1) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = v6;
  }
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 4664);
    if (v8) {
      compstats_Log(v8, *(void *)(a1 + 4672), *(void *)(*(void *)(a1 + 8) + 32), "Selection Detail", (uint64_t)select_bet6_ProcessEnd_szLabels, 0, 0);
    }
  }
  return v4;
}

uint64_t select_bet6_loc_ParamLearnChange(uint64_t a1, char *__s1, const char *a3)
{
  unsigned int v12 = 0;
  if (!strcmp(__s1, "waitfactor"))
  {
    unsigned int v11 = 0;
    paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"finalsentencefound", &v11);
    if (v11 != 1)
    {
      uint64_t v7 = LH_atoi(a3);
      select_bet6_loc_ParamSet(a1, __s1, (uint64_t)v7);
    }
    uint64_t v8 = (uint64_t)LH_atoi(a3);
    uint64_t v9 = a1;
    uint64_t v10 = __s1;
    return select_bet6_loc_ParamSet(v9, v10, v8);
  }
  if (strcmp(__s1, "finalsentencefound")) {
    return 0;
  }
  if ((unsigned __int16)LH_atou(a3) != 1)
  {
    paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"waitfactorbackup", &v12);
    uint64_t v8 = v12;
    uint64_t v10 = "waitfactor";
    uint64_t v9 = a1;
    return select_bet6_loc_ParamSet(v9, v10, v8);
  }
  paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"waitfactorbackup", *(_DWORD *)(a1 + 4620));
  return select_bet6_loc_ParamSet(a1, "waitfactor", 0);
}

uint64_t select_bet6_loc_ParamSet(uint64_t a1, char *__s1, uint64_t a3)
{
  if (strcmp(__s1, "waitfactor")) {
    return 0;
  }
  if ((a3 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 4620) = a3;
    log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET6", 3, 0, (uint64_t)"Set wait factor %d", v5, v6, v7, a3);
    return 0;
  }
  return 2229280783;
}

uint64_t select_bet6_loc_WriteStreams_MT(uint64_t a1)
{
  int FrameSize = siren_pipeline_GetFrameSize(*(void *)(a1 + 4608));
  Acousticuint64_t Stream = siren_pipeline_GetAcousticStream(*(void *)(a1 + 4608));
  SampleChununint64_t k = siren_pipeline_GetSampleChunk(*(void *)(a1 + 4608));
  if (AcousticStream) {
    BOOL v5 = SampleChunk == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 10;
  }
  uint64_t v7 = SampleChunk;
  unsigned int Position = ssftriff_reader_GetPosition(*(void *)(a1 + 4608));
  unsigned int FrameCount = siren_pipeline_GetFrameCount(*(void *)(a1 + 4608));
  if (Position < *(_DWORD *)v7 && FrameCount > *(_DWORD *)(*(void *)(v7 + 16) + 4 * Position))
  {
    int updated = select_bet6_loc_UpdateMarkers_MT(a1, *(_DWORD *)(a1 + 4616) == 5);
    int v11 = updated;
    if (updated)
    {
      uint64_t v12 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 3704) + 104))(*(void *)(a1 + 3712), *(void *)(a1 + 3720), *(void *)(a1 + 4632) + 32 * *(unsigned int *)(a1 + 4644), (32 * updated));
      if ((v12 & 0x80000000) != 0) {
        return v12;
      }
    }
    uint64_t v13 = *(void *)(a1 + 3704);
    uint64_t v14 = *(void *)(a1 + 16);
    int v36 = *(_DWORD *)(v14 + 9332);
    int v37 = v11;
    uint64_t v15 = *(unsigned int *)(v14 + 9296);
    uint64_t v16 = *(void *)(v7 + 16);
    int v17 = *(_DWORD *)(*(void *)(v7 + 8) + 4 * Position);
    uint64_t v18 = *(void *)(a1 + 3728);
    uint64_t v19 = *(void *)(a1 + 3736);
    uint64_t v39 = *(void *)(a1 + 3744);
    int v41 = 3;
    uint64_t v38 = *(void *)(a1 + 3752);
    int v34 = *(_DWORD *)(v16 + 4 * Position);
    int v35 = v17;
    if (!Position) {
      int v41 = 0;
    }
    if (*(_DWORD *)v7 == 1 || Position == *(_DWORD *)v7 - 1)
    {
      if (*(_DWORD *)v7 == 1) {
        int v20 = 4;
      }
      else {
        int v20 = 2;
      }
      int v41 = v20;
    }
    int v40 = 0;
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t))(v13 + 104))(v18, v19, &v41, 4);
    if ((v21 & 0x80000000) == 0)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v13 + 104))(v18, v19, AcousticStream + 4 * (v35 * FrameSize), (4 * v36 * (v34 - v35 + 1)));
      if ((v6 & 0x80000000) != 0)
      {
LABEL_43:
        int v22 = v37;
        goto LABEL_44;
      }
      int v22 = v37;
      if (!v15)
      {
LABEL_40:
        ++Position;
LABEL_44:
        siren_pipeline_SetSampleChunkCounter(*(void *)(a1 + 4608), Position);
        *(_DWORD *)(a1 + 4648) = siren_pipeline_GetPhoneCount(*(void *)(a1 + 4608));
        *(_DWORD *)(a1 + 4652) = siren_pipeline_GetFrameCount(*(void *)(a1 + 4608));
        *(_DWORD *)(a1 + 4644) += v22;
        ++*(_DWORD *)(a1 + 4624);
        return v6;
      }
      unsigned int v23 = v15 * Position;
      int v24 = *(_DWORD *)(*(void *)(v7 + 24) + 4 * v15 * Position);
      uint64_t v25 = v15;
      unsigned int v26 = v15 * Position;
      while (1)
      {
        int v27 = *(_DWORD *)(*(void *)(v7 + 24) + 4 * v26);
        BOOL v28 = *(_DWORD *)(*(void *)(v7 + 32) + 4 * v26) == -1 && v27 == 0;
        int v29 = v28 ? 0 : v24;
        int v40 = v27 - v29;
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t))(v13 + 104))(v39, v38, &v40, 4);
        if ((v21 & 0x80000000) != 0) {
          break;
        }
        ++v26;
        if (!--v25)
        {
          int v22 = v37;
          while (1)
          {
            int v30 = *(_DWORD *)(*(void *)(v7 + 32) + 4 * v23);
            BOOL v31 = v30 == -1 && *(_DWORD *)(*(void *)(v7 + 24) + 4 * v23) == 0;
            int v32 = v31 ? 0 : v24;
            int v40 = v30 - v32;
            uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t))(v13 + 104))(v39, v38, &v40, 4);
            if ((v6 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            ++v23;
            if (!--v15) {
              goto LABEL_40;
            }
          }
        }
      }
    }
    uint64_t v6 = v21;
    goto LABEL_43;
  }
  return 0;
}

uint64_t select_bet6_loc_UpdateMarkers_MT(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 4644) == *(_DWORD *)(a1 + 4640)) {
    return 0;
  }
  unsigned int PhoneCount = siren_pipeline_GetPhoneCount(*(void *)(a1 + 4608));
  siren_pipeline_GetDurationStream(*(void *)(a1 + 4608));
  uint64_t result = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 4644);
  unsigned int v7 = *(_DWORD *)(a1 + 4648);
  int v8 = *(_DWORD *)(a1 + 4660);
  for (uint64_t i = (_DWORD *)(*(void *)(a1 + 4632) + 32 * v6 + 16); ; i += 8)
  {
    unsigned int v10 = v6 + result;
    if ((v7 >= PhoneCount || v10 >= *(_DWORD *)(a1 + 4640)) && (!a2 || v10 >= *(_DWORD *)(a1 + 4640))) {
      break;
    }
    if (*(i - 4) == 33)
    {
      int v8 = *i + *(i - 1);
      ++v7;
    }
    uint64_t result = (result + 1);
  }
  *(_DWORD *)(a1 + 4660) = v8;
  return result;
}

uint64_t select_bet6_loc_UpdateMarkers(uint64_t a1, int a2)
{
  if (a1 && *(_DWORD *)(*(void *)(a1 + 16) + 9296) >= 2u)
  {
    return select_bet6_loc_UpdateMarkers_MT(a1, a2);
  }
  else if (*(_DWORD *)(a1 + 4644) == *(_DWORD *)(a1 + 4640))
  {
    return 0;
  }
  else
  {
    unsigned int PhoneCount = siren_pipeline_GetPhoneCount(*(void *)(a1 + 4608));
    Durationuint64_t Stream = siren_pipeline_GetDurationStream(*(void *)(a1 + 4608));
    uint64_t result = 0;
    uint64_t v7 = *(unsigned int *)(a1 + 4644);
    unsigned int v8 = *(_DWORD *)(a1 + 4648);
    int v9 = *(_DWORD *)(a1 + 4660);
    for (uint64_t i = (_DWORD *)(*(void *)(a1 + 4632) + 32 * v7 + 16); ; i += 8)
    {
      unsigned int v11 = v7 + result;
      if ((v8 >= PhoneCount || v11 >= *(_DWORD *)(a1 + 4640)) && (!a2 || v11 >= *(_DWORD *)(a1 + 4640))) {
        break;
      }
      int v12 = *(i - 4);
      *(i - 1) = v9;
      if (v12 == 33)
      {
        *uint64_t i = *(_DWORD *)(DurationStream + 4 * v8);
        v9 += *(_DWORD *)(DurationStream + 4 * v8++);
      }
      else
      {
        *uint64_t i = 0;
      }
      uint64_t result = (result + 1);
    }
    *(_DWORD *)(a1 + 4660) = v9;
  }
  return result;
}

uint64_t select_bet6_loc_WriteStreams(uint64_t a1, int a2, unsigned int a3)
{
  if (!a1) {
    goto LABEL_17;
  }
  uint64_t v6 = *(_DWORD **)(a1 + 16);
  if (v6[2324] < 2u)
  {
    if (v6[2311])
    {
      Audiouint64_t Stream = siren_pipeline_GetAudioStream(*(void *)(a1 + 4608));
      int v8 = siren_pipeline_GetiSample(*(void *)(a1 + 4608));
      LODWORD(v31) = siren_pipeline_GetTailingPauseLen(*(void *)(a1 + 4608));
      if (AudioStream)
      {
        if (!a2
          || (uint64_t v9 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 3704) + 104))(*(void *)(a1 + 3712), *(void *)(a1 + 3720), *(void *)(a1 + 4632) + 32 * *(unsigned int *)(a1 + 4644), (32 * a2)), (v9 & 0x80000000) == 0))
        {
          (*(void (**)(void, void, float *, uint64_t))(*(void *)(a1 + 3704) + 104))(*(void *)(a1 + 3760), *(void *)(a1 + 3768), &v31, 4);
          return (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 3704) + 104))(*(void *)(a1 + 3760), *(void *)(a1 + 3768), AudioStream + 2 * *(unsigned int *)(a1 + 4656), (2 * (v8 - *(_DWORD *)(a1 + 4656))));
        }
        return v9;
      }
      return 10;
    }
    if (v6[2312] || v6[2314] || v6[2315])
    {
      float v31 = 0.0;
      if (a2)
      {
        uint64_t v11 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 3704) + 104))(*(void *)(a1 + 3712), *(void *)(a1 + 3720), *(void *)(a1 + 4632) + 32 * *(unsigned int *)(a1 + 4644), (32 * a2));
        if ((v11 & 0x80000000) != 0) {
          return v11;
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      unsigned int FrameCount = siren_pipeline_GetFrameCount(*(void *)(a1 + 4608));
      TailingPauseLeuint64_t n = siren_pipeline_GetTailingPauseLen(*(void *)(a1 + 4608));
      if (FrameCount > *(_DWORD *)(a1 + 4652))
      {
        float v29 = (float)a3;
        int FrameSize = siren_pipeline_GetFrameSize(*(void *)(a1 + 4608));
        (*(void (**)(void, void, float *, uint64_t))(*(void *)(a1 + 3704) + 104))(*(void *)(a1 + 3728), *(void *)(a1 + 3736), &v29, 4);
        int Chunking = siren_pipeline_GetChunking(*(void *)(a1 + 4608));
        if (a3 - 2 <= 4 && Chunking) {
          LODWORD(v31) = siren_pipline_GetPhoneChunkingSpellPause(*(void *)(a1 + 4608));
        }
        (*(void (**)(void, void, float *, uint64_t))(*(void *)(a1 + 3704) + 104))(*(void *)(a1 + 3728), *(void *)(a1 + 3736), &v31, 4);
        (*(void (**)(void, void, int *, uint64_t))(*(void *)(a1 + 3704) + 104))(*(void *)(a1 + 3728), *(void *)(a1 + 3736), &TailingPauseLen, 4);
        Acousticuint64_t Stream = siren_pipeline_GetAcousticStream(*(void *)(a1 + 4608));
        if (a3 <= 5 && ((1 << a3) & 0x26) != 0)
        {
          int v24 = *(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 3704) + 104);
          int v25 = *(_DWORD *)(a1 + 4652);
          uint64_t v26 = AcousticStream + 4 * ((v25 - 4) * FrameSize);
          int v27 = FrameCount - v25 + 4;
        }
        else
        {
          int v24 = *(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 3704) + 104);
          int v28 = *(_DWORD *)(a1 + 4652);
          uint64_t v26 = AcousticStream + 4 * (v28 * FrameSize);
          int v27 = FrameCount - v28;
        }
        return v24(*(void *)(a1 + 3728), *(void *)(a1 + 3736), v26, (4 * FrameSize * v27));
      }
      return v11;
    }
LABEL_17:
    if (a2)
    {
      uint64_t v11 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 3704) + 104))(*(void *)(a1 + 3712), *(void *)(a1 + 3720), *(void *)(a1 + 4632) + 32 * *(unsigned int *)(a1 + 4644), (32 * a2));
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    unsigned int v12 = siren_pipeline_GetFrameCount(*(void *)(a1 + 4608));
    if (v12 > *(_DWORD *)(a1 + 4652))
    {
      unsigned int v13 = v12;
      float v31 = (float)a3;
      (*(void (**)(void, void, float *, uint64_t))(*(void *)(a1 + 3704) + 104))(*(void *)(a1 + 3728), *(void *)(a1 + 3736), &v31, 4);
      uint64_t v14 = siren_pipeline_GetAcousticStream(*(void *)(a1 + 4608));
      uint64_t v15 = *(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 3704) + 104);
      int v16 = *(_DWORD *)(a1 + 4652);
      uint64_t v17 = v14 + 4 * siren_pipeline_GetFrameSize(*(void *)(a1 + 4608)) * v16;
      unsigned int v18 = v13 - *(_DWORD *)(a1 + 4652);
      int v19 = siren_pipeline_GetFrameSize(*(void *)(a1 + 4608));
      return v15(*(void *)(a1 + 3728), *(void *)(a1 + 3736), v17, 4 * v18 * v19);
    }
    return v11;
  }
  return select_bet6_loc_WriteStreams_MT(a1);
}

uint64_t feat_frame_Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  uint64_t v7 = heap_Calloc(*(void **)(*(void *)a3 + 8), 1, 24);
  if (v7
    && (int v8 = (void *)v7, *(void *)(a3 + 40) = v7, (v9 = heap_Calloc(*(void **)(v6 + 8), 1000000, 4)) != 0))
  {
    *int v8 = a2;
    v8[1] = a1;
    v8[2] = v9;
    *(_DWORD *)(a3 + 112) = 1000000;
    siren_log_Diag(v6, (uint64_t)"feat frame init done...\n");
    return 0;
  }
  else
  {
    siren_log_Error(v6, (uint64_t)"memory allocation error");
    return 10;
  }
}

uint64_t feat_frame_Process(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v32 = *(void *)(a1 + 8);
  uint64_t v7 = (char *)v2[2];
  int v8 = *(_DWORD *)(v5 + 24);
  unsigned int v9 = (*(_DWORD *)(*v2 + 12) + *(_DWORD *)(v3 + 12)) * v8;
  if (v9 <= *(_DWORD *)(a1 + 112))
  {
    bzero(v7, 4 * ((*(_DWORD *)(*v2 + 12) + *(_DWORD *)(v3 + 12)) * v8));
  }
  else
  {
    uint64_t v11 = heap_Realloc(*(uint64_t **)(v1 + 8), (uint64_t)v7, 4 * ((*(_DWORD *)(*v2 + 12) + *(_DWORD *)(v3 + 12)) * v8));
    if (!v11)
    {
      int v28 = "memory allocation error";
      goto LABEL_23;
    }
    uint64_t v7 = (char *)v11;
    *(void *)(*(void *)(a1 + 40) + 16) = v11;
    *(_DWORD *)(a1 + 112) = v9;
  }
  uint64_t v12 = heap_Calloc(*(void **)(v1 + 8), (*(_DWORD *)(v4 + 12) * v8), 4);
  if (!v12)
  {
    siren_log_Error(v1, (uint64_t)"memory allocation error");
    int v28 = "get nn feature at frame level failed";
LABEL_23:
    siren_log_Error(v1, (uint64_t)v28);
    return 10;
  }
  uint64_t v13 = v12;
  unsigned int v29 = v9;
  uint64_t v30 = v1;
  uint64_t v14 = *(unsigned __int16 *)(v32 + 10);
  if (*(_WORD *)(v32 + 10))
  {
    uint64_t v15 = 0;
    int v16 = 0;
    do
    {
      unsigned int v17 = *(_DWORD *)(v6 + 4 * v15);
      if (v17)
      {
        int v18 = 0;
        int v19 = (float *)(v12 + 4 + 4 * v16);
        v16 += 2 * v17;
        do
        {
          *(v19 - 1) = (float)++v18;
          *int v19 = (float)v17;
          v19 += 2;
        }
        while (v17 != v18);
      }
      ++v15;
    }
    while (v15 != v14);
    unint64_t v20 = 0;
    int v21 = 0;
    unsigned int v22 = 0;
    do
    {
      int v23 = *(_DWORD *)(v6 + 4 * v20);
      if (v23)
      {
        int v24 = (const void *)(v31 + 4 * (*(_DWORD *)(v3 + 12) * v20));
        do
        {
          memcpy(&v7[4 * v21], (const void *)(v13 + 4 * v22), 4 * *(unsigned int *)(v4 + 12));
          int v25 = *(_DWORD *)(v4 + 12);
          int v26 = v25 + v21;
          v22 += v25;
          memcpy(&v7[4 * v26], v24, 4 * *(unsigned int *)(v3 + 12));
          int v21 = *(_DWORD *)(v3 + 12) + v26;
          --v23;
        }
        while (v23);
        LODWORD(v14) = *(unsigned __int16 *)(v32 + 10);
      }
      ++v20;
    }
    while (v20 < v14);
  }
  heap_Free(*(void **)(v30 + 8), v13);
  siren_log_Diag(v30, (uint64_t)"feat frame process done...\n");
  if (log_GetLogLevel(*(void *)(v30 + 32)) >= 3)
  {
    siren_compute_stream_hash(v7, 4 * v29, v33);
    siren_log_Diag(v30, (uint64_t)"FEAT_FRAME_MD5=%s\n");
  }
  return 0;
}

uint64_t feat_frame_Close(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[5];
  *uint64_t v3 = 0;
  v3[1] = 0;
  uint64_t v4 = v3[2];
  if (v4)
  {
    heap_Free(*(void **)(v2 + 8), v4);
    v3[2] = 0;
  }
  heap_Free(*(void **)(v2 + 8), (uint64_t)v3);
  a1[5] = 0;
  siren_log_Diag(v2, (uint64_t)"feat frame close done....\n");
  return 0;
}

uint64_t feat_phone_Init(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, 16);
  if (v5 && (uint64_t v6 = (void *)v5, *(void *)(a2 + 32) = v5, (v7 = heap_Calloc(*(void **)(v4 + 8), 50000, 4)) != 0))
  {
    *uint64_t v6 = a1 + 7992;
    v6[1] = v7;
    *(_DWORD *)(a2 + 108) = 50000;
    siren_log_Diag(v4, (uint64_t)"feat phone init done....\n");
    return 0;
  }
  else
  {
    siren_log_Error(v4, (uint64_t)"memory allocation error");
    return 10;
  }
}

uint64_t feat_phone_Process(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v5 = (uint64_t *)*v3;
  uint64_t v4 = (char *)v3[1];
  uint64_t v6 = *(char **)(a1 + 16);
  uint64_t v7 = *(_DWORD *)(*v3 + 12) * *(unsigned __int16 *)(v2 + 10);
  if (v7 <= *(_DWORD *)(a1 + 108))
  {
    __src = *(char **)(a1 + 16);
    unsigned int v30 = *(_DWORD *)(*v3 + 12) * *(unsigned __int16 *)(v2 + 10);
    bzero(v4, 4 * v30);
  }
  else
  {
    heap_Free(*(void **)(v1 + 8), (uint64_t)v4);
    uint64_t v8 = heap_Calloc(*(void **)(v1 + 8), v7, 4);
    if (!v8)
    {
      siren_log_Error(v1, (uint64_t)"memory allocation error");
      return 10;
    }
    uint64_t v4 = (char *)v8;
    __src = v6;
    *(void *)(*(void *)(a1 + 32) + 8) = v8;
    unsigned int v30 = v7;
    *(_DWORD *)(a1 + 108) = v7;
  }
  int v9 = *(__int16 *)(v2 + 10);
  if (v9 >= 1)
  {
    unint64_t v10 = 0;
    unsigned __int8 v11 = 0;
    LODWORD(v12) = *((_DWORD *)v5 + 2);
    while ((int)v12 <= 0)
    {
      int64_t v16 = v10 + 1;
LABEL_42:
      unint64_t v10 = v16;
      if (v16 >= (__int16)v9) {
        goto LABEL_43;
      }
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = *((_DWORD *)v5 + 3) * v10;
    int64_t v16 = v10 + 1;
    int v32 = v15;
    while (1)
    {
      uint64_t v17 = *v5;
      uint64_t v18 = *(unsigned __int8 *)(*v5 + v13);
      if (*(unsigned __int8 *)(*v5 + v13) > 0xFBu) {
        break;
      }
      if (v18 == 3 || v18 == 5) {
        goto LABEL_32;
      }
      if (v18 == 216)
      {
        uint64_t v22 = v2;
        uint64_t v23 = v1;
        int v24 = (_DWORD *)(v17 + v13);
        if (v24[1] == 1) {
          uint64_t v25 = v24[2];
        }
        else {
          uint64_t v25 = 1;
        }
        memcpy(&v4[4 * v24[3] + 4 * *((_DWORD *)v5 + 3) * (int)v10], __src, 4 * v25);
        __src += 4 * v25;
        uint64_t v1 = v23;
        uint64_t v2 = v22;
        int64_t v16 = v10 + 1;
        int v15 = v32;
        if (*(_DWORD *)(a1 + 24) < ((unint64_t)&__src[-*(void *)(a1 + 16)] >> 2))
        {
          siren_log_Error(v1, (uint64_t)"invalid external features stream");
          return 21;
        }
      }
      else
      {
LABEL_27:
        uint64_t v27 = *(void *)(v2 + 8 * v18 + 16);
        if (v27)
        {
          int v26 = (unsigned __int8 *)(v27 + v10);
LABEL_29:
          unsigned __int8 v11 = *v26;
LABEL_32:
          uint64_t v28 = v17 + v13;
          if (*(_DWORD *)(v17 + v13 + 4) == 1)
          {
            if (*(unsigned __int8 *)(v28 + 8) <= v11) {
              siren_log_Diag(v1, (uint64_t)"phone-level categorical feature extraction out of range: feature_index=%d, feature_value=%d, feature_range=%d.");
            }
            else {
              *(_DWORD *)&v4[4 * v15 + 4 * v11 + 4 * *(_DWORD *)(v17 + v13 + 12)] = 1065353216;
            }
          }
          else
          {
            *(float *)&v4[4 * (*(_DWORD *)(v28 + 12) + v15)] = (float)v11;
          }
        }
      }
      ++v14;
      uint64_t v12 = *((int *)v5 + 2);
      v13 += 16;
      if (v14 >= v12)
      {
        LOWORD(v9) = *(_WORD *)(v2 + 10);
        goto LABEL_42;
      }
    }
    switch(*(unsigned char *)(*v5 + v13))
    {
      case 0xFC:
        if (v10 < 2) {
          goto LABEL_30;
        }
        uint64_t v19 = *(void *)(v2 + 32);
        unint64_t v20 = (v10 - 2);
        goto LABEL_26;
      case 0xFD:
        if (!v10) {
          goto LABEL_31;
        }
        uint64_t v19 = *(void *)(v2 + 32);
        unint64_t v20 = (v10 - 1);
        goto LABEL_26;
      case 0xFE:
        if (v16 < *(__int16 *)(v2 + 10))
        {
          int v26 = (unsigned __int8 *)(*(void *)(v2 + 32) + v16);
          goto LABEL_29;
        }
LABEL_31:
        unsigned __int8 v11 = 0;
        goto LABEL_32;
      case 0xFF:
        unint64_t v20 = v10 + 2;
        if ((uint64_t)(v10 + 2) >= *(__int16 *)(v2 + 10))
        {
LABEL_30:
          unsigned __int8 v11 = -1;
          goto LABEL_32;
        }
        uint64_t v19 = *(void *)(v2 + 32);
LABEL_26:
        int v26 = (unsigned __int8 *)(v19 + v20);
        break;
      default:
        goto LABEL_27;
    }
    goto LABEL_29;
  }
LABEL_43:
  siren_log_Diag(v1, (uint64_t)"feat phone process done....\n");
  if (log_GetLogLevel(*(void *)(v1 + 32)) >= 3)
  {
    siren_compute_stream_hash(v4, 4 * v30, v34);
    siren_log_Diag(v1, (uint64_t)"FEAT_PHONE_MD5=%s\n");
  }
  return 0;
}

uint64_t feat_phone_Close(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[4];
  *uint64_t v3 = 0;
  uint64_t v4 = v3[1];
  if (v4)
  {
    heap_Free(*(void **)(v2 + 8), v4);
    v3[1] = 0;
  }
  heap_Free(*(void **)(v2 + 8), (uint64_t)v3);
  a1[4] = 0;
  siren_log_Diag(v2, (uint64_t)"feat phone close done....\n");
  return 0;
}

uint64_t infer_acoustic_init(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v11 = 0;
  uint64_t v5 = heap_Calloc(*(void **)(v4 + 8), 1, 64);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    a1[7] = v5;
    *(void *)(v5 + 48) = v4;
    uint64_t v7 = (uint64_t **)(v5 + 56);
    uint64_t v8 = fi_rsc_create((void *)v4, (void *)(v5 + 56));
    if (v8)
    {
      uint64_t v9 = v8;
      siren_log_Error(v4, (uint64_t)"Acoustic Model FI Resource creation failed: %d");
    }
    else
    {
      uint64_t v9 = parse_fi_binary_model(*v7, a2, &v11);
      if (v9)
      {
        siren_log_Error(v4, (uint64_t)"Acoustic Model FI binary model parsing failed: %d");
      }
      else
      {
        *uint64_t v6 = v11;
        siren_log_Diag(v4, (uint64_t)"infer(acoustic) init done.... \n");
      }
    }
  }
  else
  {
    siren_log_Error(v4, (uint64_t)"memory allocation error");
    return 10;
  }
  return v9;
}

uint64_t infer_acoustic_process_range(uint64_t a1, int a2, uint64_t a3)
{
  v77[4] = *(const void **)MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)a1;
  unsigned int v6 = *(_DWORD *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = v8[2];
  int v10 = *(_DWORD *)(v8[1] + 12);
  int v11 = *(_DWORD *)(*v8 + 12);
  if (v6 < 2)
  {
    uint64_t v76 = 0;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v73 = 0u;
    compstats_ClockInit((uint64_t)&v73);
    compstats_ClockStart((uint64_t)&v73, v39, v40, v41, v42, v43, v44, v45);
    *(void *)(v7 + 8) = v9;
    uint64_t v46 = ((*(_DWORD *)(**(void **)(a1 + 40) + 12)
                        + *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 12))
                       * a3);
    uint64_t v47 = (void *)heap_Calloc(*(void **)(*(void *)(v7 + 48) + 8), v46, 4);
    v77[0] = v47;
    if (v47)
    {
      memcpy(v47, (const void *)(*(void *)(v7 + 8) + 4 * ((v11 + v10) * a2)), 4 * v46);
      uint64_t v52 = fi_net_predict(*(uint64_t ***)v7, v77, a3, (void *)(v7 + 24), v48, v49, v50, v51);
      if (v52)
      {
        uint64_t v53 = v52;
        siren_log_Error(v5, (uint64_t)"Acoustic Model FI inferece failed: %d");
        uint64_t v37 = v53;
        goto LABEL_31;
      }
      siren_log_Diag(v5, (uint64_t)"infer(acoustic) process one sentence done....\n");
      compstats_ClockStop((uint64_t)&v73, v54, v55, v56, v57, v58, v59, v60);
      siren_log_Trace(v5, (uint64_t)"CompStatsReport, infer_acoustic_process_range, start: %u, nFrames: %u, %7.2f msec CPU, %7.2f msec real\n");
      compstats_ClockReset((uint64_t)&v73);
      if (log_GetLogLevel(*(void *)(v5 + 32)) < 3) {
        goto LABEL_30;
      }
      siren_compute_stream_hash(*(char **)(v7 + 24), 4 * *(_DWORD *)(*(void *)v7 + 96) / a3 * a3, (char *)v77);
      uint64_t v61 = "INFER_ACOUSTIC_MD5=%s\n";
      goto LABEL_29;
    }
LABEL_21:
    siren_log_Error(v5, (uint64_t)"memory allocation error.");
    uint64_t v37 = 10;
    goto LABEL_31;
  }
  unsigned int v12 = v11 + v10;
  uint64_t v76 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v73 = 0u;
  compstats_ClockInit((uint64_t)&v73);
  compstats_ClockStart((uint64_t)&v73, v13, v14, v15, v16, v17, v18, v19);
  *(void *)(v7 + 8) = v9;
  unsigned int v20 = a3 / v6;
  unsigned int v21 = a3 % v6;
  unsigned int v22 = v6 - a3 % v6;
  if (a3 % v6) {
    unsigned int v23 = v6 - a3 % v6;
  }
  else {
    unsigned int v23 = 0;
  }
  if (v21) {
    unsigned int v24 = v20 + 1;
  }
  else {
    unsigned int v24 = a3 / v6;
  }
  uint64_t v25 = (char *)heap_Calloc(*(void **)(*(void *)(v7 + 48) + 8), v24 * v12, 4);
  v77[0] = v25;
  if (!v25) {
    goto LABEL_21;
  }
  uint64_t v30 = *(void *)(v7 + 8);
  if (!v30)
  {
    uint64_t v37 = 6;
    siren_log_Error(v5, (uint64_t)"Linguistic features fetch failed: %d");
    goto LABEL_31;
  }
  uint64_t v31 = v25;
  int v32 = (char *)(v30 + 4 * v12 * a2 + 4 * v12 * (v6 - 1));
  if (v6 <= a3)
  {
    uint64_t v71 = v5;
    unsigned int v33 = a3 / v6;
    do
    {
      uint64_t v34 = v32;
      memcpy(v31, v32, 4 * v12);
      v31 += 4 * v12;
      int v32 = &v34[4 * v12 * v6];
      --v33;
    }
    while (v33);
    int v32 = &v34[4 * v12 * v6];
    uint64_t v5 = v71;
    unsigned int v22 = v6 - a3 % v6;
  }
  if (v23) {
    memcpy(v31, &v32[-4 * v23 * v12], 4 * v12);
  }
  uint64_t v35 = fi_net_predict(*(uint64_t ***)v7, v77, v23 + v20, (void *)(v7 + 24), v26, v27, v28, v29);
  if (v35)
  {
    uint64_t v36 = v35;
    siren_log_Error(v5, (uint64_t)"Acoustic Model FI inferece failed: %d");
    uint64_t v37 = v36;
    goto LABEL_31;
  }
  if (v21)
  {
    unsigned int v62 = *(_DWORD *)(*(void *)v7 + 96) / ((v23 + v20) * v6);
    memcpy((void *)(*(void *)(v7 + 24) + 4 * v62 * v20 * v6), (const void *)(*(void *)(v7 + 24) + 4 * v62 * (v20 * v6 + v22)), 4 * v62 * v21);
  }
  siren_log_Diag(v5, (uint64_t)"infer(acoustic) process one sentence done....\n");
  compstats_ClockStop((uint64_t)&v73, v63, v64, v65, v66, v67, v68, v69);
  siren_log_Trace(v5, (uint64_t)"CompStatsReport, infer_acoustic_process_range, start: %u, nFrames: %u, %7.2f msec CPU, %7.2f msec real\n");
  compstats_ClockReset((uint64_t)&v73);
  if (log_GetLogLevel(*(void *)(v5 + 32)) >= 3)
  {
    siren_compute_stream_hash(*(char **)(v7 + 24), 4 * *(_DWORD *)(*(void *)v7 + 96), (char *)v77);
    uint64_t v61 = "INFER_ACOUSTIC_MD5=%s";
LABEL_29:
    siren_log_Diag(v5, (uint64_t)v61);
  }
LABEL_30:
  uint64_t v37 = 0;
LABEL_31:
  if (v37) {
    siren_log_Error(v5, (uint64_t)"Acoustic Model FI Predict failed: %d");
  }
  return v37;
}

uint64_t infer_acoustic_seq2seq_process_range_stream(uint64_t *a1, int a2, int a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[7];
  uint64_t v8 = *(void *)(a1[4] + 8);
  uint64_t v37 = 0;
  memset(v36, 0, sizeof(v36));
  compstats_ClockInit((uint64_t)v36);
  compstats_ClockStart((uint64_t)v36, v9, v10, v11, v12, v13, v14, v15);
  uint64_t v16 = (void *)a1[4];
  uint64_t v17 = *(unsigned int *)(*v16 + 12);
  int v18 = *(unsigned __int16 *)(a1[1] + 10);
  *(void *)(v7 + 16) = v8;
  uint64_t v19 = (char *)v16[1];
  unsigned int v20 = (char *)heap_Calloc(*(void **)(*(void *)(v7 + 48) + 8), (v17 * (a3 + 2)), 4);
  uint64_t v38 = v20;
  if (v20)
  {
    unsigned int v21 = v20;
    memcpy(v20, v19, 4 * v17);
    memcpy(&v21[4 * v17], (const void *)(*(void *)(v7 + 16) + 4 * (v17 * a2)), 4 * (v17 * a3));
    memcpy(&v21[4 * (v17 + v17 * a3)], &v19[4 * ((v18 - 1) * v17)], 4 * v17);
    uint64_t v26 = fi_net_predict(*(uint64_t ***)v7, &v38, (a3 + 2), (void *)(v7 + 24), v22, v23, v24, v25);
    if (v26)
    {
      uint64_t bytes = v26;
      siren_log_Error(v6, (uint64_t)"Acoustic Model FI inferece failed: %d");
    }
    else
    {
      uint64_t bytes = fi_shape_get_bytes((int *)(*(void *)v7 + 92), (_DWORD *)(v7 + 40));
      if (bytes)
      {
        siren_log_Error(v6, (uint64_t)"Get Acoustic Model output shape failed: %d");
      }
      else
      {
        siren_log_Diag(v6, (uint64_t)"infer(acoustic) process one sentence done....\n");
        compstats_ClockStop((uint64_t)v36, v28, v29, v30, v31, v32, v33, v34);
        siren_log_Trace(v6, (uint64_t)"CompStatsReport, infer_acoustic_process_range, start: %u, nFrames: %u, %7.2f msec CPU, %7.2f msec real\n");
        compstats_ClockReset((uint64_t)v36);
      }
    }
  }
  else
  {
    siren_log_Error(v6, (uint64_t)"memory allocation error.");
    return 10;
  }
  return bytes;
}

uint64_t infer_acoustic_seq2seq_process_range_FrameInfer(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[7];
  uint64_t v9 = *(void *)(a2[4] + 8);
  uint64_t v41 = 0;
  memset(v40, 0, sizeof(v40));
  compstats_ClockInit((uint64_t)v40);
  compstats_ClockStart((uint64_t)v40, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v17 = (void *)a2[4];
  uint64_t v18 = *(unsigned int *)(*v17 + 12);
  int v19 = *(unsigned __int16 *)(a2[1] + 10);
  *(void *)(v8 + 16) = v9;
  unsigned int v20 = (char *)v17[1];
  unsigned int v21 = (char *)heap_Calloc(*(void **)(*(void *)(v8 + 48) + 8), (v18 * (a4 + 2)), 4);
  uint64_t v42 = v21;
  if (v21)
  {
    uint64_t v22 = v21;
    memcpy(v21, v20, 4 * v18);
    memcpy(&v22[4 * v18], (const void *)(*(void *)(v8 + 16) + 4 * (v18 * a3)), 4 * (v18 * a4));
    memcpy(&v22[4 * (v18 + v18 * a4)], &v20[4 * ((v19 - 1) * v18)], 4 * v18);
    uint64_t updated = fi_net_update_param(*(void *)v8);
    if (updated)
    {
      uint64_t bytes = updated;
      siren_log_Error(v7, (uint64_t)"Acoustic model speaker_id set failed: %d");
    }
    else
    {
      uint64_t v29 = fi_net_predict(*(uint64_t ***)v8, &v42, (a4 + 2), (void *)(v8 + 24), v24, v25, v26, v27);
      if (v29)
      {
        uint64_t bytes = v29;
        uint64_t v30 = "Acoustic Model FI inferece failed: %d";
        uint64_t v31 = v7;
      }
      else
      {
        uint64_t bytes = fi_shape_get_bytes((int *)(*(void *)v8 + 92), (_DWORD *)(v8 + 40));
        if (!bytes)
        {
          siren_log_Diag(v7, (uint64_t)"infer(acoustic) process one sentence done....\n");
          compstats_ClockStop((uint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
          siren_log_Trace(v7, (uint64_t)"CompStatsReport, infer_acoustic_process_range, start: %u, nFrames: %u, %7.2f msec CPU, %7.2f msec real\n");
          compstats_ClockReset((uint64_t)v40);
          return bytes;
        }
        uint64_t v30 = "Get Acoustic Model output shape failed: %d";
        uint64_t v31 = v7;
      }
      siren_log_Error(v31, (uint64_t)v30);
    }
  }
  else
  {
    siren_log_Error(v7, (uint64_t)"memory allocation error.");
    return 10;
  }
  return bytes;
}

uint64_t infer_acoustic_seq2seq_process_range(uint64_t a1, uint64_t *a2, int a3, unsigned int a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[7];
  uint64_t v9 = *(void *)(a2[4] + 8);
  uint64_t v41 = 0;
  memset(v40, 0, sizeof(v40));
  compstats_ClockInit((uint64_t)v40);
  compstats_ClockStart((uint64_t)v40, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v17 = (void *)a2[4];
  uint64_t v18 = *(unsigned int *)(*v17 + 12);
  int v19 = *(unsigned __int16 *)(a2[1] + 10);
  *(void *)(v8 + 16) = v9;
  unsigned int v20 = (char *)v17[1];
  unsigned int v21 = (char *)heap_Calloc(*(void **)(*(void *)(v8 + 48) + 8), v18 * (a4 + 2), 4);
  uint64_t v42 = v21;
  if (!v21)
  {
    siren_log_Error(v7, (uint64_t)"memory allocation error.");
    return 10;
  }
  uint64_t v22 = v21;
  memcpy(v21, v20, 4 * v18);
  memcpy(&v22[4 * v18], (const void *)(*(void *)(v8 + 16) + 4 * (v18 * a3)), 4 * v18 * a4);
  memcpy(&v22[4 * v18 + 4 * v18 * a4], &v20[4 * ((v19 - 1) * v18)], 4 * v18);
  uint64_t updated = fi_net_update_param(*(void *)v8);
  if (updated)
  {
    uint64_t v28 = updated;
    siren_log_Error(v7, (uint64_t)"Acoustic model speakerid set faled: %d");
    return v28;
  }
  uint64_t v29 = fi_net_predict(*(uint64_t ***)v8, &v42, a4 + 2, (void *)(v8 + 32), v24, v25, v26, v27);
  if (v29)
  {
    uint64_t v28 = v29;
    uint64_t v30 = "Acoustic Model FI inferece failed: %d";
LABEL_9:
    siren_log_Error(v7, (uint64_t)v30);
    return v28;
  }
  uint64_t bytes = fi_shape_get_bytes((int *)(*(void *)v8 + 92), (_DWORD *)(v8 + 44));
  if (bytes)
  {
    uint64_t v28 = bytes;
    uint64_t v30 = "Get Acoustic Model output shape failed: %d";
    goto LABEL_9;
  }
  siren_log_Diag(v7, (uint64_t)"infer(acoustic) process one sentence done....\n");
  compstats_ClockStop((uint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
  siren_log_Trace(v7, (uint64_t)"CompStatsReport, infer_acoustic_process_range, start: %u, nFrames: %u, %7.2f msec CPU, %7.2f msec real\n");
  compstats_ClockReset((uint64_t)v40);
  if (log_GetLogLevel(*(void *)(v7 + 32)) >= 3)
  {
    siren_compute_stream_hash(*(char **)(v8 + 32), 4 * *(_DWORD *)(*(void *)v8 + 96) / a4 * a4, v43);
    siren_log_Diag(v7, (uint64_t)"INFER_ACOUSTIC_MD5=%s\n");
  }
  return 0;
}

uint64_t infer_acoustic_end(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[7];
  uint64_t v3 = *a1;
  if (*v2)
  {
    fi_net_destroy(*v2);
    *uint64_t v2 = 0;
  }
  v2[1] = 0;
  v2[2] = 0;
  uint64_t v4 = (void *)v2[7];
  if (v4)
  {
    fi_rsc_destroy(v4);
    v2[7] = 0;
  }
  heap_Free(*(void **)(v3 + 8), (uint64_t)v2);
  a1[7] = 0;
  siren_log_Diag(v3, (uint64_t)"infer(acoustic) close done....\n");
  return 0;
}

uint64_t infer_acoustic_reset_seed(uint64_t a1)
{
  return 0;
}

uint64_t chunking_Init(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = heap_Calloc(*(void **)(*a1 + 8), 1, 32);
  if (v5)
  {
    *(void *)uint64_t v5 = 0;
    *(_WORD *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    *(_WORD *)(v5 + 24) = 0;
    a1[9] = v5;
    uint64_t v6 = heap_Calloc(*(void **)(v4 + 8), 1, 56);
    if (v6)
    {
      *(void *)uint64_t v6 = 0;
      *(_WORD *)(v6 + 8) = 0;
      *(_WORD *)(v6 + 48) = 0;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0;
      *(void *)(v6 + 16) = 0;
      a1[8] = v6;
      uint64_t v7 = heap_Calloc(*(void **)(v4 + 8), 1, 32);
      if (v7)
      {
        *(void *)(v7 + 8) = 0;
        *(_WORD *)(v7 + 24) = 0;
        *(_WORD *)uint64_t v7 = 0;
        a1[11] = v7;
        if (!*(_DWORD *)(a2 + 9184)) {
          return 0;
        }
        uint64_t v8 = heap_Calloc(*(void **)(v4 + 8), 1, 40);
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t result = 0;
          int v11 = *(_DWORD *)(a2 + 9172);
          *(_DWORD *)uint64_t v9 = 0;
          *(_DWORD *)(v9 + 4) = v11;
          *(void *)(v9 + 32) = 0;
          *(void *)(v9 + 8) = 0;
          *(void *)(v9 + 16) = 0;
          a1[10] = v9;
          return result;
        }
        uint64_t v12 = "sample level chunking memory allocation error";
      }
      else
      {
        uint64_t v12 = "markers chunking memory allocation error";
      }
    }
    else
    {
      uint64_t v12 = "phone level chunking memory allocation error";
    }
  }
  else
  {
    uint64_t v12 = "frame level chunking memory allocation error";
  }
  siren_log_Error(v4, (uint64_t)v12);
  return 10;
}

uint64_t chunking_Process(int32x2_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v5)
  {
    siren_log_Error(v4, (uint64_t)"Front end message is empty!");
    return 7;
  }
  uint64_t v10 = *(void *)(a2 + 72);
  int v11 = *(unsigned int **)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 64);
  int v13 = a1[924].u8[7];
  uint64_t v14 = *(unsigned __int16 *)(v5 + 10);
  *(_WORD *)(v12 + 8) = v14;
  *(_WORD *)(v10 + 8) = v14;
  uint64_t v15 = heap_Calloc(*(void **)(v4 + 8), v14, 1);
  *(void *)uint64_t v12 = v15;
  if (!v15) {
    goto LABEL_39;
  }
  uint64_t v16 = heap_Calloc(*(void **)(v4 + 8), *(unsigned __int16 *)(v10 + 8), 1);
  *(void *)uint64_t v10 = v16;
  if (!v16) {
    goto LABEL_39;
  }
  uint64_t v17 = *(__int16 *)(v5 + 10);
  if (v17 >= 1)
  {
    for (uint64_t i = 0; i < v17; ++i)
    {
      *(unsigned char *)(*(void *)v12 + i) = 1;
      *(unsigned char *)(*(void *)v10 + i) = 1;
      uint64_t v17 = *(__int16 *)(v5 + 10);
    }
    if ((int)v17 >= 1)
    {
      uint64_t v19 = 0;
      while (1)
      {
        if (*(unsigned char *)(*(void *)(v5 + 72) + v19) == 1)
        {
          if (*(unsigned __int8 *)(*(void *)(v5 + 32) + v19) == v13)
          {
            LOBYTE(v17) = 8;
LABEL_14:
            *(unsigned char *)(*(void *)v12 + v19) = v17;
            *(unsigned char *)(*(void *)v10 + v19) = v17;
            LOWORD(v17) = *(_WORD *)(v5 + 10);
            goto LABEL_15;
          }
          unsigned int v20 = (*(unsigned char *)(*(void *)(v5 + 592) + v19) - 1);
          if (v20 <= 3)
          {
            LODWORD(v17) = 0x6040302u >> (8 * v20);
            goto LABEL_14;
          }
        }
LABEL_15:
        if (++v19 >= (__int16)v17)
        {
          uint64_t v17 = (__int16)v17;
          break;
        }
      }
    }
  }
  *(unsigned char *)(v17 + *(void *)v12 - 1) = 10;
  if (a1[1139].i32[1] || a1[1140].i32[0] || a1[1141].i32[0])
  {
    chunking_Do_PhoneChunking((uint64_t)a1, v12, a3, a4);
    uint64_t v21 = heap_Calloc(*(void **)(v4 + 8), *(unsigned __int16 *)(v12 + 48), 4);
    *(void *)(v12 + 16) = v21;
    if (!v21) {
      goto LABEL_39;
    }
    uint64_t v22 = heap_Calloc(*(void **)(v4 + 8), *(unsigned __int16 *)(v12 + 48), 2);
    *(void *)(v12 + 24) = v22;
    if (!v22) {
      goto LABEL_39;
    }
    uint64_t v23 = heap_Calloc(*(void **)(v4 + 8), *(unsigned __int16 *)(v12 + 48), 2);
    *(void *)(v12 + 32) = v23;
    if (!v23) {
      goto LABEL_39;
    }
    uint64_t v24 = heap_Calloc(*(void **)(v4 + 8), *(unsigned __int16 *)(v12 + 48), 2);
    *(void *)(v12 + 40) = v24;
    if (!v24) {
      goto LABEL_39;
    }
    chunking_Do_PhoneChunking((uint64_t)a1, v12, a3, a4);
    unsigned int v25 = 0;
  }
  else
  {
    uint64_t v35 = *(void *)(a2 + 48);
    uint64_t v36 = *(void *)(v35 + 56);
    unsigned int v25 = *(_DWORD *)(v35 + 24);
    uint64_t result = chunking_Do_FrameChunking(v4, (uint64_t)a1, v36, v25, v10);
    if (result) {
      return result;
    }
    uint64_t v37 = heap_Calloc(*(void **)(v4 + 8), *(unsigned __int16 *)(v10 + 24), 4);
    *(void *)(v10 + 16) = v37;
    if (!v37) {
      goto LABEL_39;
    }
    uint64_t result = chunking_Do_FrameChunking(v4, (uint64_t)a1, v36, v25, v10);
    if (result) {
      return result;
    }
  }
  if (!a1[1148].i32[0]) {
    return 0;
  }
  uint64_t v26 = *(void *)(a2 + 80);
  uint64_t v27 = heap_Calloc(*(void **)(v4 + 8), 1, 72);
  if (!v27)
  {
    uint64_t v38 = "sample level chunking memory allocation error";
    goto LABEL_40;
  }
  uint64_t v28 = v27;
  *(void *)uint64_t v27 = v26;
  *(_DWORD *)(v27 + 8) = a1[1147].i32[0];
  unsigned int v29 = a1[1145].u32[1];
  *(_DWORD *)(v27 + 12) = v29;
  *(_DWORD *)(v27 + 24) = a1[1148].i32[1];
  *(int32x2_t *)(v27 + 16) = vrev64_s32(a1[1146]);
  *(_DWORD *)(v27 + 28) = 22050;
  *(_DWORD *)(v27 + 32) = v25;
  *(_DWORD *)(v27 + 36) = 0;
  *(_DWORD *)(v27 + 40) = 0;
  *(float *)(v27 + 48) = (float)v29;
  *(_DWORD *)(v27 + 44) = v25;
  *(_DWORD *)(v27 + 52) = *(_DWORD *)(a2 + 104);
  *(void *)(v27 + 56) = *(void *)(a2 + 96);
  uint64_t result = chunking_Do_SampleChunking_Process(v4, (int **)v27);
  if (result) {
    return result;
  }
  uint64_t v31 = heap_Calloc(*(void **)(v4 + 8), *v11, 4);
  *((void *)v11 + 1) = v31;
  if (v31)
  {
    uint64_t v32 = heap_Calloc(*(void **)(v4 + 8), *v11, 4);
    *((void *)v11 + 2) = v32;
    if (v32)
    {
      uint64_t v33 = heap_Calloc(*(void **)(v4 + 8), *(_DWORD *)(v28 + 20) * *v11, 4);
      *((void *)v11 + 3) = v33;
      if (v33)
      {
        uint64_t v34 = heap_Calloc(*(void **)(v4 + 8), *(_DWORD *)(v28 + 20) * *v11, 4);
        *((void *)v11 + 4) = v34;
        if (v34)
        {
          chunking_Do_SampleChunking_ProcessReset(v4, v28);
          chunking_Do_SampleChunking_Process(v4, (int **)v28);
          heap_Free(*(void **)(v4 + 8), v28);
          return 0;
        }
      }
    }
  }
LABEL_39:
  uint64_t v38 = "memory allocation error";
LABEL_40:
  siren_log_Error(v4, (uint64_t)v38);
  return 10;
}

uint64_t chunking_Do_PhoneChunking(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5 = result;
  unsigned int v6 = *(unsigned __int16 *)(a2 + 8);
  if (a3 && a4)
  {
    uint64_t v7 = *a4;
    if (v7)
    {
      int v8 = 0;
      unsigned int v9 = 0;
      uint64_t v10 = (_DWORD *)(a3 + 12);
      LOWORD(v11) = 100;
      unsigned int v12 = *(unsigned __int16 *)(a2 + 8);
      do
      {
        int v13 = *(v10 - 3);
        if (v13 == 31)
        {
          int v11 = v10[3];
        }
        else if (v13 == 21)
        {
          uint64_t v14 = *(const char **)(v10 + 3);
          uint64_t result = strcmp(v14, "spell");
          if (result)
          {
            uint64_t result = strcmp(v14, "normal");
            if (!result && v9 <= v12 && v12 != v6) {
              unsigned int v9 = *v10;
            }
          }
          else
          {
            if (v12 == v6) {
              unsigned int v12 = *v10;
            }
            int v8 = 1;
          }
        }
        v10 += 8;
        --v7;
      }
      while (v7);
    }
    else
    {
      unsigned int v9 = 0;
      int v8 = 0;
      LOWORD(v11) = 100;
      unsigned int v12 = *(unsigned __int16 *)(a2 + 8);
    }
    if (v9) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v8 == 1;
    }
    if (v20) {
      unsigned int v21 = v6 - 1;
    }
    else {
      unsigned int v21 = v9;
    }
    if (v6)
    {
      unsigned int v22 = 0;
      unsigned int v16 = 0;
      do
      {
        uint64_t result = phone_chunking_search(v5, v22, a2);
        uint64_t v17 = *(void *)(a2 + 16);
        if (v17) {
          *(_DWORD *)(v17 + 4 * v16) = result;
        }
        uint64_t v23 = *(void *)(a2 + 24);
        if (v23)
        {
          if (result <= v21 && result > v12) {
            __int16 v25 = v11;
          }
          else {
            __int16 v25 = 0;
          }
          *(_WORD *)(v23 + 2 * v16) = v25;
        }
        ++v16;
        unsigned int v22 = result + 1;
      }
      while ((int)result + 1 < v6);
      goto LABEL_49;
    }
    LOWORD(v16) = 0;
    if (!*(void *)(a2 + 16)) {
LABEL_50:
    }
      *(_WORD *)(a2 + 48) = v16;
  }
  else
  {
    if (v6 >= 0x15
      && (float)((float)(*(float *)(result + 9160) * (float)*(unsigned int *)(result + 9164))
                             / (float)*(unsigned int *)(result + 32))
       / *(_DWORD *)(result + 9136) < v6)
    {
      unsigned int v15 = 0;
      unsigned int v16 = 0;
      do
      {
        uint64_t result = phone_chunking_search(v5, v15, a2);
        uint64_t v17 = *(void *)(a2 + 16);
        if (v17) {
          *(_DWORD *)(v17 + 4 * v16) = result;
        }
        uint64_t v18 = *(void *)(a2 + 24);
        if (v18) {
          *(_WORD *)(v18 + 2 * v16) = 0;
        }
        ++v16;
        unsigned int v15 = result + 1;
      }
      while ((int)result + 1 < v6);
LABEL_49:
      if (v17) {
        return result;
      }
      goto LABEL_50;
    }
    uint64_t v19 = *(_DWORD **)(a2 + 16);
    if (v19) {
      *uint64_t v19 = v6 - 1;
    }
    else {
      *(_WORD *)(a2 + 48) = 1;
    }
  }
  return result;
}

uint64_t chunking_Do_FrameChunking(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int v7 = (float)((float)(*(float *)(a2 + 9160) * (float)*(unsigned int *)(a2 + 9164))
                           / (float)*(unsigned int *)(a2 + 32));
  if (v7 >= a4 || *(unsigned __int16 *)(a5 + 8) <= 2u)
  {
    int v8 = *(_DWORD **)(a5 + 16);
    uint64_t result = 0;
    if (v8) {
      *int v8 = a4 - 1;
    }
    else {
      *(_WORD *)(a5 + 24) = 1;
    }
    return result;
  }
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), a4, 1);
  if (!v13)
  {
    siren_log_Error(a1, (uint64_t)"memory allocation error");
    return 10;
  }
  uint64_t v14 = v13;
  int v15 = *(unsigned __int16 *)(a5 + 8);
  if (*(_WORD *)(a5 + 8))
  {
    unint64_t v16 = 0;
    int v17 = 0;
    int v18 = 0;
    do
    {
      v18 += *(_DWORD *)(a3 + 4 * v16);
      unsigned int v19 = *(unsigned __int8 *)(*(void *)a5 + v16);
      unsigned int v20 = v18 - 1;
      if (v16)
      {
        if (v16 != v15 - 1 && v19 >= 5)
        {
          *(unsigned char *)(v13 + v20) = 2;
          unsigned int v19 = *(unsigned __int8 *)(*(void *)a5 + v16);
          if (v19 == 6) {
            v20 += *(_DWORD *)(a3 + 4 * v16 + 4) >> 1;
          }
          else {
            unsigned int v20 = v18 + ~(*(_DWORD *)(a3 + 4 * v16) >> 1);
          }
        }
      }
      *(unsigned char *)(v13 + v20) = v19;
      int v15 = *(unsigned __int16 *)(a5 + 8);
      if (v16 == v15 - 1) {
        int v17 = *(_DWORD *)(a3 + 4 * v16);
      }
      ++v16;
    }
    while (v16 < *(unsigned __int16 *)(a5 + 8));
  }
  else
  {
    int v17 = 0;
  }
  unsigned int v22 = a4 - 1;
  if (a4 == 1)
  {
    LOWORD(v24) = 0;
    if (!*(void *)(a5 + 16)) {
      goto LABEL_59;
    }
    goto LABEL_57;
  }
  unsigned int v23 = 0;
  unsigned int v24 = 0;
  unsigned int v25 = ~v17 + a4;
  uint64_t v26 = *(void *)(a5 + 16);
  float v27 = *(float *)(a2 + 9160);
  do
  {
    unsigned int v28 = v7;
    if (v7 >= v22) {
      goto LABEL_46;
    }
    if (v7 >= a4) {
      unsigned int v29 = a4 - 1;
    }
    else {
      unsigned int v29 = v7;
    }
    unsigned int v30 = ((double)(v7 - v23) * 0.5);
    unsigned int v31 = v7 - v30;
    if (v7 >= v30 && v31 <= v29)
    {
      unsigned __int8 v33 = 0;
      unsigned int v28 = 0;
      unsigned int v34 = v7;
      do
      {
        unsigned int v35 = *(unsigned __int8 *)(v14 + v34);
        BOOL v36 = v33 >= v35;
        if (v33 <= v35) {
          unsigned __int8 v33 = *(unsigned char *)(v14 + v34);
        }
        if (!v36) {
          unsigned int v28 = v34;
        }
        --v34;
      }
      while (v34 >= v31);
      unsigned int v37 = v7;
      do
      {
        unsigned int v38 = *(unsigned __int8 *)(v14 + v37);
        BOOL v39 = v33 >= v38;
        if (v33 <= v38) {
          unsigned __int8 v33 = *(unsigned char *)(v14 + v37);
        }
        if (!v39) {
          unsigned int v28 = v37;
        }
        ++v37;
      }
      while (v37 <= v29);
LABEL_46:
      if (v28 > v23) {
        goto LABEL_48;
      }
    }
    unsigned int v28 = v7;
LABEL_48:
    if (v28 >= v25) {
      unsigned int v28 = a4 - 1;
    }
    if (v26) {
      *(_DWORD *)(v26 + 4 * v24) = v28;
    }
    ++v24;
    unsigned int v40 = v28 - v23 + 1;
    unsigned int v23 = v28 + 1;
    unsigned int v41 = (float)((float)(v28 + 1) + (float)((float)v40 * v27));
    if (v41 >= a4) {
      unsigned int v7 = a4 - 1;
    }
    else {
      unsigned int v7 = v41;
    }
  }
  while (v23 < v22);
  if (v26) {
    goto LABEL_57;
  }
LABEL_59:
  *(_WORD *)(a5 + 24) = v24;
LABEL_57:
  heap_Free(*(void **)(a1 + 8), v14);
  return 0;
}

uint64_t chunking_Do_SampleChunking_Process(uint64_t a1, int **a2)
{
  unsigned int v3 = *((_DWORD *)a2 + 11);
  if (v3)
  {
    uint64_t v4 = a1;
    int v5 = 0;
    while (1)
    {
      unsigned int v6 = *((_DWORD *)a2 + 5);
      int v7 = *((_DWORD *)a2 + 4);
      BOOL v8 = v5 == 0;
      unsigned int v9 = *a2;
      if (v7
         + ((float)((float)((float)(*((float *)a2 + 12) * *((float *)a2 + 2)) / 1000.0)
                                * (float)*((unsigned int *)a2 + 7))
          / *((_DWORD *)a2 + 6)
          - 2 * v7)
         * v6 > v3)
      {
        if (v6 >= 2)
        {
          int v10 = 0;
          unsigned __int16 v11 = 0;
          unsigned int v12 = v3 / v6;
          unsigned int v3 = 0;
          while (1)
          {
            uint64_t v13 = *((unsigned int *)a2 + 4);
            unsigned int v14 = *((_DWORD *)a2 + 11);
            uint64_t v15 = *((void *)v9 + 1);
            if (v12 >= v13)
            {
              int v16 = *((_DWORD *)a2 + 11);
            }
            else
            {
              *((_DWORD *)a2 + 11) = 0;
              v3 += v14;
              if (v15)
              {
                BOOL v39 = *a2;
                uint64_t v44 = *((void *)*a2 + 4);
                if (v44)
                {
                  unsigned int v45 = *((_DWORD *)a2 + 5) * *((_DWORD *)a2 + 10);
                  uint64_t v4 = a1;
                  if (v11)
                  {
                    v45 += v10;
                    int v46 = *(_DWORD *)(v44 + 4 * (v45 - 1));
                    int v47 = v46 - v13 + 1;
                  }
                  else
                  {
                    int v47 = 0;
                    int v46 = v13 - 1;
                  }
                  int v49 = v46 + v14;
                  uint64_t v48 = *((void *)v39 + 3);
                  *(_DWORD *)(v48 + 4 * v45) = v47;
                  *(_DWORD *)(v44 + 4 * v45) = v49;
                }
                else
                {
                  uint64_t v48 = *((void *)v39 + 3);
                  uint64_t v4 = a1;
                }
                int v50 = 1;
                int v51 = 1;
                do
                {
                  unsigned int v52 = v50 + *((_DWORD *)a2 + 5) * *((_DWORD *)a2 + 10);
                  *(_DWORD *)(v44 + 4 * v52) = -1;
                  *(_DWORD *)(v48 + 4 * v52) = 0;
                  int v50 = (unsigned __int16)++v51;
                }
                while (v6 > (unsigned __int16)v51);
                uint64_t v40 = *((void *)v39 + 1);
                if (v40)
                {
                  uint64_t result = 0;
LABEL_76:
                  int v41 = *((_DWORD *)a2 + 9);
                  int v42 = v41 - *((_DWORD *)a2 + 4);
LABEL_77:
                  *(_DWORD *)(v40 + 4 * *((unsigned int *)a2 + 10)) = v42;
                  *(_DWORD *)(*((void *)v39 + 2) + 4 * *((unsigned int *)a2 + 10)) = v3 + v41 - 1;
                  *(int **)((char *)a2 + 36) = (int *)vadd_s32(*(int32x2_t *)((char *)a2 + 36), (int32x2_t)(v3 | 0x100000000));
                }
                else
                {
                  uint64_t result = 0;
                }
                goto LABEL_78;
              }
              int v16 = 0;
              unsigned int v12 = v14;
            }
            *((_DWORD *)a2 + 11) = v16 - v12;
            if (v5 || v11)
            {
              if (v15) {
                create_Thread_Chunk_Index(v13, v13, v12, v10, a2);
              }
            }
            else if (v15)
            {
              uint64_t v17 = *((void *)*a2 + 4);
              if (v17)
              {
                unsigned int v18 = *((_DWORD *)a2 + 5) * *((_DWORD *)a2 + 10);
                *(_DWORD *)(*((void *)*a2 + 3) + 4 * v18) = 0;
                *(_DWORD *)(v17 + 4 * v18) = v13 + v12 - 1;
              }
            }
            v3 += v12;
            int v10 = ++v11;
            if (v6 - 1 <= v11)
            {
              int v19 = *((_DWORD *)a2 + 11);
              *((_DWORD *)a2 + 11) = 0;
              v3 += v19;
              uint64_t v4 = a1;
              goto LABEL_46;
            }
          }
        }
        int v10 = 0;
        *((_DWORD *)a2 + 11) = 0;
        if (v5 || v6 != 1)
        {
          int v19 = v3;
LABEL_46:
          if (*((void *)v9 + 1))
          {
            int v38 = **a2;
            create_Thread_Chunk_Index(*((unsigned int *)a2 + 4), *((_DWORD *)a2 + 4), v19, v10, a2);
            *(_DWORD *)(*((void *)*a2 + 4) + 4 * (v38 * v6 - 1)) -= *((_DWORD *)a2 + 4);
          }
        }
        else
        {
          if (*((void *)v9 + 1))
          {
            uint64_t v30 = *((void *)v9 + 4);
            if (v30)
            {
              uint64_t v31 = *((unsigned int *)a2 + 10);
              *(_DWORD *)(*((void *)v9 + 3) + 4 * v31) = 0;
              *(_DWORD *)(v30 + 4 * v31) = v3 + v7 - 1;
            }
          }
          BOOL v8 = 1;
        }
        if (*((_DWORD *)a2 + 11) || !v3)
        {
          siren_log_Error(v4, (uint64_t)"bet6 nnvocoder sample level chunking last sample chunk calculation error.");
          uint64_t result = 15;
        }
        else
        {
          uint64_t result = 0;
        }
        if (*((void *)v9 + 1))
        {
          if (*((_DWORD *)a2 + 10) >= *v9)
          {
            siren_log_Error(v4, (uint64_t)"bet6 nnvocoder sample level chunking last sample chunk calculation error.");
            uint64_t result = 15;
          }
          BOOL v39 = *a2;
          uint64_t v40 = *((void *)*a2 + 1);
          if (v8)
          {
            if (v40)
            {
              int v41 = *((_DWORD *)a2 + 9);
              int v42 = v41;
              goto LABEL_77;
            }
          }
          else if (v40)
          {
            goto LABEL_76;
          }
        }
LABEL_78:
        unsigned int v3 = *((_DWORD *)a2 + 11);
        goto LABEL_79;
      }
      if (v6)
      {
        int v20 = 0;
        unsigned __int16 v21 = 0;
        unsigned int v22 = 0;
        do
        {
          if (v5 || v21)
          {
            float v28 = (float)((float)(*((float *)a2 + 12) * *((float *)a2 + 2)) / 1000.0) * (float)*((unsigned int *)a2 + 7);
            int v29 = *((_DWORD *)a2 + 4);
            unsigned int v24 = v28 / *((_DWORD *)a2 + 6) - 2 * v29;
            if (*((void *)v9 + 1)) {
              create_Thread_Chunk_Index(v9[1], v9[1], v28 / *((_DWORD *)a2 + 6) - 2 * v29, v20, a2);
            }
          }
          else
          {
            float v23 = (float)((float)(*((float *)a2 + 12) * *((float *)a2 + 2)) / 1000.0) * (float)*((unsigned int *)a2 + 7);
            *((_DWORD *)a2 + 16) = 0;
            unsigned int v24 = v23 / *((_DWORD *)a2 + 6) - *((_DWORD *)a2 + 4);
            if (*((void *)v9 + 1))
            {
              uint64_t v25 = *((void *)*a2 + 4);
              if (v25)
              {
                unsigned int v26 = *((_DWORD *)a2 + 5) * *((_DWORD *)a2 + 10);
                int v27 = v24 + v9[1] - 1;
                *(_DWORD *)(*((void *)*a2 + 3) + 4 * v26) = 0;
                *(_DWORD *)(v25 + 4 * v26) = v27;
              }
            }
          }
          *((_DWORD *)a2 + 11) -= v24;
          v22 += v24;
          int v20 = ++v21;
        }
        while (v6 > v21);
      }
      else
      {
        unsigned int v24 = 0;
        unsigned int v22 = 0;
      }
      if (*((void *)v9 + 1))
      {
        if (*((_DWORD *)a2 + 10) >= *v9)
        {
          siren_log_Error(v4, (uint64_t)"bet6 nnvocoder sample level chunking sample chunk calculation error.");
          uint64_t result = 15;
        }
        else
        {
          uint64_t result = 0;
        }
        unsigned __int8 v33 = *a2;
        uint64_t v34 = *((void *)*a2 + 1);
        if (v5)
        {
          if (v34)
          {
            int v35 = v9[1];
            int v36 = *((_DWORD *)a2 + 9);
            int v37 = v36 - v35;
LABEL_62:
            *(_DWORD *)(v34 + 4 * *((unsigned int *)a2 + 10)) = v37;
            *(_DWORD *)(*((void *)v33 + 2) + 4 * *((unsigned int *)a2 + 10)) = v22 + v35 + v36 - 1;
            *(int **)((char *)a2 + 36) = (int *)vadd_s32(*(int32x2_t *)((char *)a2 + 36), (int32x2_t)(v22 | 0x100000000));
          }
        }
        else if (v34)
        {
          int v35 = v9[1];
          int v36 = *((_DWORD *)a2 + 9);
          int v37 = v36;
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t result = 0;
      }
      float v43 = (float)((float)v22 * (float)*((unsigned int *)a2 + 6)) * 1000.0 / (float)*((unsigned int *)a2 + 7);
      *((float *)a2 + 12) = v43;
      unsigned int v3 = *((_DWORD *)a2 + 11);
      if (!v3 || !v24)
      {
        siren_log_Error(v4, (uint64_t)"bet6 nnvocoder sample level chunkign first or in-between sample chunk calculation error.");
        uint64_t result = 15;
        goto LABEL_78;
      }
LABEL_79:
      ++v5;
      if (!v3) {
        goto LABEL_83;
      }
    }
  }
  uint64_t result = 0;
  int v5 = 0;
LABEL_83:
  if (!**a2) {
    **a2 = v5;
  }
  return result;
}

uint64_t chunking_Do_SampleChunking_ProcessReset(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return siren_log_Error(result, (uint64_t)"bet6 nnvocoder sample level chunking ChunkingSampleProcess struct not initalized.");
  }
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  *(float *)(a2 + 48) = (float)*(unsigned int *)(a2 + 12);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t *chunking_Close(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  int v5 = (uint64_t *)result[8];
  uint64_t v4 = (uint64_t *)result[9];
  unsigned int v6 = (void *)result[10];
  uint64_t v7 = result[11];
  if (v5)
  {
    uint64_t v8 = v5[2];
    if (v8)
    {
      heap_Free(*(void **)(v3 + 8), v8);
      v5[2] = 0;
    }
    uint64_t v9 = v5[3];
    if (v9)
    {
      heap_Free(*(void **)(v3 + 8), v9);
      v5[3] = 0;
    }
    uint64_t v10 = v5[5];
    if (v10)
    {
      heap_Free(*(void **)(v3 + 8), v10);
      v5[5] = 0;
    }
    uint64_t v11 = v5[4];
    if (v11)
    {
      heap_Free(*(void **)(v3 + 8), v11);
      v5[4] = 0;
    }
    if (*v5)
    {
      heap_Free(*(void **)(v3 + 8), *v5);
      *int v5 = 0;
    }
    uint64_t result = heap_Free(*(void **)(v3 + 8), (uint64_t)v5);
  }
  if (v7)
  {
    uint64_t v12 = *(void *)(v7 + 8);
    if (v12)
    {
      heap_Free(*(void **)(v3 + 8), v12);
      *(void *)(v7 + 8) = 0;
    }
    uint64_t result = heap_Free(*(void **)(v3 + 8), v7);
  }
  if (v4)
  {
    uint64_t v13 = v4[2];
    if (v13)
    {
      heap_Free(*(void **)(v3 + 8), v13);
      v4[2] = 0;
    }
    if (*v4)
    {
      heap_Free(*(void **)(v3 + 8), *v4);
      *uint64_t v4 = 0;
    }
    uint64_t result = heap_Free(*(void **)(v3 + 8), (uint64_t)v4);
  }
  if (*(_DWORD *)(a2 + 9184) && v6)
  {
    uint64_t v14 = v6[1];
    if (v14)
    {
      heap_Free(*(void **)(v3 + 8), v14);
      v6[1] = 0;
    }
    uint64_t v15 = v6[2];
    if (v15)
    {
      heap_Free(*(void **)(v3 + 8), v15);
      v6[2] = 0;
    }
    uint64_t v16 = v6[3];
    if (v16)
    {
      heap_Free(*(void **)(v3 + 8), v16);
      void v6[3] = 0;
    }
    uint64_t v17 = v6[4];
    if (v17)
    {
      heap_Free(*(void **)(v3 + 8), v17);
      v6[4] = 0;
    }
    unsigned int v18 = *(void **)(v3 + 8);
    return heap_Free(v18, (uint64_t)v6);
  }
  return result;
}

uint64_t phone_chunking_search(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(unsigned __int16 *)(a3 + 8) - 1;
  unsigned int v4 = *(_DWORD *)(a1 + 9144) + a2;
  if (v4 >= v3) {
    uint64_t result = v3;
  }
  else {
    uint64_t result = v4;
  }
  if (result > a2)
  {
    uint64_t v6 = 0;
    do
    {
      unsigned int v7 = *(unsigned __int8 *)(*(void *)a3 + a2 + v6);
      if (v7 >= 6)
      {
        BOOL v10 = a2 + v6 > a2 && v7 > 7;
        return a2 - v10 + v6;
      }
      ++v6;
    }
    while (a2 - result + v6);
    uint64_t v8 = result;
    while (*(unsigned __int8 *)(*(void *)a3 + v8) <= 3u)
    {
      uint64_t v8 = (v8 - 1);
      if (v8 <= a2)
      {
        uint64_t v8 = result;
        while (*(unsigned __int8 *)(*(void *)a3 + v8) <= 2u)
        {
          uint64_t v8 = (v8 - 1);
          if (v8 <= a2)
          {
            uint64_t v8 = result;
            while (*(unsigned char *)(*(void *)a3 + v8) != 2)
            {
              uint64_t v8 = (v8 - 1);
              if (v8 <= a2) {
                return result;
              }
            }
            return v8;
          }
        }
        return v8;
      }
    }
    return v8;
  }
  return result;
}

uint64_t create_Thread_Chunk_Index(uint64_t result, int a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v5 = *(void *)(*(void *)a5 + 32);
  if (v5)
  {
    unsigned int v6 = a5[5] * a5[10];
    if (a4)
    {
      v6 += a4;
      int v7 = *(_DWORD *)(v5 + 4 * (v6 - 1));
      int v8 = v7 - (result + a2) + 1;
    }
    else
    {
      int v8 = 0;
      int v7 = a2 + result - 1;
    }
    *(_DWORD *)(*(void *)(*(void *)a5 + 24) + 4 * v6) = v8;
    *(_DWORD *)(v5 + 4 * v6) = v7 + a3;
  }
  return result;
}

uint64_t infer_dur_init(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v17 = 0;
  uint64_t v5 = heap_Calloc(*(void **)(v4 + 8), 1, 88);
  if (!v5)
  {
    BOOL v10 = "memory allocation error";
LABEL_5:
    siren_log_Error(v4, (uint64_t)v10);
    return 10;
  }
  uint64_t v6 = v5;
  a1[6] = v5;
  *(_DWORD *)(v5 + 16) = 100;
  *(void *)(v5 + 72) = v4;
  int v7 = (uint64_t **)(v5 + 80);
  uint64_t v8 = fi_rsc_create((void *)v4, (void *)(v5 + 80));
  if (!v8)
  {
    uint64_t v11 = parse_fi_binary_model(*v7, a2, &v17);
    if (v11)
    {
      uint64_t v9 = v11;
      siren_log_Error(v4, (uint64_t)"Duration Model FI binary model parsing failed: %d");
      return v9;
    }
    uint64_t v13 = v17;
    *(void *)uint64_t v6 = v17;
    LODWORD(v13) = *(_DWORD *)(v13 + 60);
    *(_DWORD *)(v6 + 20) = v13;
    uint64_t v14 = heap_Calloc(*(void **)(*(void *)(v6 + 72) + 8), (100 * v13), 4);
    *(void *)(v6 + 32) = v14;
    if (v14)
    {
      uint64_t v15 = heap_Calloc(*(void **)(*(void *)(v6 + 72) + 8), 100, 4);
      *(void *)(v6 + 8) = v15;
      if (v15)
      {
        uint64_t v16 = heap_Calloc(*(void **)(*(void *)(v6 + 72) + 8), 100, 4);
        *(void *)(v6 + 56) = v16;
        if (v16)
        {
          siren_log_Diag(v4, (uint64_t)"infer(duration) init done....\n");
          return 0;
        }
      }
    }
    BOOL v10 = "memory allocation error.";
    goto LABEL_5;
  }
  uint64_t v9 = v8;
  siren_log_Error(v4, (uint64_t)"Duration Model FI Resource creation failed: %d");
  return v9;
}

uint64_t infer_dur_process(uint64_t a1, uint64_t *a2)
{
  v32[4] = *(const void **)MEMORY[0x263EF8340];
  uint64_t v4 = a2[6];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *(unsigned __int16 *)(v6 + 10);
  *(void *)(v4 + 48) = *(void *)(a2[4] + 8);
  unsigned int v8 = *(_DWORD *)(v4 + 16);
  if (v8 < v7)
  {
    *(_DWORD *)(v4 + 16) = v7;
    uint64_t v9 = heap_Realloc(*(uint64_t **)(v5 + 8), *(void *)(v4 + 32), 4 * (*(_DWORD *)(v4 + 20) * v7));
    *(void *)(v4 + 32) = v9;
    if (!v9) {
      goto LABEL_16;
    }
    uint64_t v10 = heap_Realloc(*(uint64_t **)(v5 + 8), *(void *)(v4 + 8), 4 * v7);
    *(void *)(v4 + 8) = v10;
    if (!v10) {
      goto LABEL_16;
    }
    *(void *)(v4 + 56) = heap_Realloc(*(uint64_t **)(v5 + 8), *(void *)(v4 + 56), 4 * v7);
    if (!*(void *)(v4 + 8)) {
      goto LABEL_16;
    }
    unsigned int v8 = *(_DWORD *)(v4 + 16);
  }
  bzero(*(void **)(v4 + 32), 4 * *(_DWORD *)(v4 + 20) * v8);
  bzero(*(void **)(v4 + 8), 4 * *(unsigned int *)(v4 + 16));
  bzero(*(void **)(v4 + 56), 4 * *(unsigned int *)(v4 + 16));
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      if (*(unsigned char *)(*(void *)(v6 + 32) + v11) == 1)
      {
        *(_DWORD *)(*(void *)(v4 + 56) + 4 * v11) = *(unsigned __int16 *)(a1 + 8076);
      }
      else
      {
        memcpy((void *)(*(void *)(v4 + 32) + 4 * (*(_DWORD *)(v4 + 20) * v12)), (const void *)(*(void *)(v4 + 48) + 4 * (*(_DWORD *)(v4 + 20) * v11)), 4 * *(unsigned int *)(v4 + 20));
        *(_DWORD *)(*(void *)(v4 + 8) + 4 * v12) = v11;
        uint64_t v12 = (v12 + 1);
      }
      ++v11;
    }
    while (v7 != v11);
    if (v12)
    {
      uint64_t v13 = *(_DWORD *)(v4 + 20) * *(unsigned __int16 *)(v6 + 10);
      uint64_t v14 = (void *)heap_Calloc(*(void **)(*(void *)(v4 + 72) + 8), v13, 4);
      v32[0] = v14;
      if (v14)
      {
        memcpy(v14, *(const void **)(v4 + 32), 4 * v13);
        uint64_t v19 = fi_net_predict(*(uint64_t ***)v4, v32, v12, (void *)(v4 + 40), v15, v16, v17, v18);
        if (v19)
        {
          uint64_t v20 = v19;
          siren_log_Error(v5, (uint64_t)"Duration Model FI inferece failed: %d");
          return v20;
        }
        unsigned int v22 = *(int **)(v4 + 56);
        uint64_t v28 = *(void *)(v4 + 40);
        uint64_t v29 = *(void *)(v4 + 8);
        uint64_t v30 = v12 - 1;
        do
          v22[*(unsigned int *)(v29 + 4 * v30)] = vcvtps_u32_f32(fmaxf(*(float *)(v28 + 4 * v30), 1.0));
        while ((unint64_t)v30--);
        uint64_t v23 = a2[1];
        *(_DWORD *)(v4 + 24) = 0;
        unsigned __int16 v21 = (_DWORD *)(v4 + 24);
        goto LABEL_19;
      }
LABEL_16:
      siren_log_Error(v5, (uint64_t)"memory allocation error.");
      return 10;
    }
  }
  siren_log_Diag(v5, (uint64_t)"No non-silence phones found in duration inference.");
  *(_DWORD *)(v4 + 24) = 0;
  unsigned __int16 v21 = (_DWORD *)(v4 + 24);
  unsigned int v22 = *(int **)(v4 + 56);
  if (v22)
  {
    uint64_t v23 = a2[1];
LABEL_19:
    LODWORD(v24) = *(__int16 *)(v23 + 10);
    if ((int)v24 >= 1)
    {
      int v25 = 0;
      uint64_t v24 = (unsigned __int16)v24;
      do
      {
        int v26 = *v22++;
        v25 += v26;
        *unsigned __int16 v21 = v25;
        --v24;
      }
      while (v24);
    }
    goto LABEL_24;
  }
  siren_log_Error(v5, (uint64_t)"input duration sequence error....");
LABEL_24:
  siren_log_Diag(v5, (uint64_t)"infer(duration) process one sentence done....\n");
  if (log_GetLogLevel(*(void *)(v5 + 32)) >= 3)
  {
    siren_compute_stream_hash(*(char **)(v4 + 56), 4 * *(unsigned __int16 *)(v6 + 10), (char *)v32);
    siren_log_Diag(v5, (uint64_t)"INFER_DUR_MD5=%s\n");
  }
  return 0;
}

uint64_t infer_dur_end(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[6];
  uint64_t v3 = *a1;
  uint64_t v4 = v2[1];
  if (v4)
  {
    heap_Free(*(void **)(v3 + 8), v4);
    v2[1] = 0;
  }
  uint64_t v5 = v2[4];
  if (v5)
  {
    heap_Free(*(void **)(v3 + 8), v5);
    v2[4] = 0;
  }
  uint64_t v6 = v2[7];
  if (v6)
  {
    heap_Free(*(void **)(v3 + 8), v6);
    v2[7] = 0;
  }
  if (*v2)
  {
    fi_net_destroy(*v2);
    *uint64_t v2 = 0;
  }
  v2[5] = 0;
  v2[6] = 0;
  uint64_t v7 = (void *)v2[10];
  if (v7)
  {
    fi_rsc_destroy(v7);
    v2[10] = 0;
  }
  heap_Free(*(void **)(v3 + 8), (uint64_t)v2);
  a1[6] = 0;
  siren_log_Diag(v3, (uint64_t)"infer(duration) close done....\n");
  return 0;
}

uint64_t siren_common_synth_Init(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t result = 7;
  if (a1 && a2)
  {
    uint64_t v7 = heap_Calloc(*(void **)(a1 + 8), 1, 144);
    if (v7)
    {
      uint64_t v8 = v7;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(_WORD *)(v7 + 72) = 100;
      int v9 = a2[4];
      *(_WORD *)(v7 + 44) = 80;
      uint64_t v10 = 274877907 * a2[8] * v9;
      LODWORD(v10) = (v10 >> 38) + ((unint64_t)v10 >> 63);
      *(void *)(v7 + 16) = a1;
      *(void *)(v7 + 24) = a2;
      *(_DWORD *)(v7 + 36) = v10;
      *(_DWORD *)(v7 + 40) = v9;
      uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), (4 * v10), 2);
      *(void *)(v8 + 96) = v11;
      if (v11
        && (uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), *(unsigned int *)(*(void *)(v8 + 24) + 9204), 4),
            (*(void *)(v8 + 112) = v12) != 0))
      {
        *(_DWORD *)(v8 + 104) = 0;
        if (a2[2278])
        {
          *(_DWORD *)(v8 + 36) = a2[2297];
          if (*(_DWORD *)(*(void *)(v8 + 24) + 9168) < 2u) {
            int v13 = new_siren_nn_synth_Init((void *)v8);
          }
          else {
            int v13 = new_siren_nn_mt_synth_Init((void *)v8);
          }
        }
        else
        {
          uint64_t v15 = 274877907 * *(_DWORD *)(*(void *)(v8 + 24) + 32) * *(_DWORD *)(*(void *)(v8 + 24) + 16);
          *(_DWORD *)(v8 + 36) = (v15 >> 38) + ((unint64_t)v15 >> 63);
          int v13 = new_siren_mrcc_synth_Init(v8);
        }
        int v14 = v13;
        if (!v13)
        {
          uint64_t result = 0;
          goto LABEL_16;
        }
      }
      else
      {
        int v14 = 10;
      }
      siren_common_synth_DeInit(v8);
    }
    else
    {
      int v14 = 10;
    }
    uint64_t v8 = 0;
    uint64_t result = v14 | 0x84E02000;
LABEL_16:
    *a3 = v8;
  }
  return result;
}

uint64_t siren_common_synth_DeInit(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3) {
      heap_Free(*(void **)(v2 + 8), v3);
    }
    uint64_t v4 = *(void *)(a1 + 112);
    if (v4) {
      heap_Free(*(void **)(v2 + 8), v4);
    }
    uint64_t v5 = *(void *)(a1 + 24);
    if (*(_DWORD *)(v5 + 9112))
    {
      if (*(_DWORD *)(v5 + 9168) < 2u) {
        uint64_t v6 = new_siren_nn_synth_DeInit(a1);
      }
      else {
        uint64_t v6 = new_siren_nn_mt_synth_DeInit(a1);
      }
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)a1;
      if (!*(void *)a1) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v7 = new_siren_mrcc_synth_DeInit(a1);
      uint64_t v8 = *(void *)(a1 + 8);
      if (!v8) {
        goto LABEL_15;
      }
    }
    heap_Free(*(void **)(v2 + 8), v8);
LABEL_15:
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    heap_Free(*(void **)(v2 + 8), a1);
    return v7;
  }
  return 0;
}

uint64_t siren_common_synth_Reset(uint64_t a1)
{
  if (a1)
  {
    *(_WORD *)(a1 + 72) = 100;
    uint64_t v1 = *(_DWORD **)(a1 + 24);
    *(_DWORD *)(a1 + 40) = v1[4];
    *(_WORD *)(a1 + 44) = 80;
    *(_DWORD *)(a1 + 104) = 0;
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 120) = 0;
    if (v1[2278])
    {
      if (v1[2292] < 2u) {
        return new_siren_nn_synth_Reset(a1);
      }
      else {
        return new_siren_nn_mt_synth_Reset(a1);
      }
    }
    else
    {
      return new_siren_mrcc_synth_Reset(a1);
    }
  }
  return a1;
}

uint64_t siren_common_synth_ProcessStart(kaldi::nnet1::Component *this, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, double a7, float a8)
{
  unsigned int v10 = *((_DWORD *)this + 12);
  uint64_t v11 = (_DWORD *)*((void *)this + 3);
  int v12 = v11[2293];
  unsigned int v13 = v11[2292];
  if (a3)
  {
    *((_DWORD *)this + 22) = 0;
    *((_DWORD *)this + 13) = 0;
    *((_DWORD *)this + 14) = 0;
    *((void *)this + 8) = a2;
    *((_DWORD *)this + 12) = a3;
    *((_DWORD *)this + 8) = a5;
  }
  else
  {
    a3 = *((_DWORD *)this + 12);
  }
  *((void *)this + 10) = a4;
  if (v11[2278])
  {
    if (v13 < 2)
    {
      return kaldi::nnet1::Component::IsUpdatable(this);
    }
    else if (a3 <= v10 {
           || (LOWORD(a8) = *((_WORD *)this + 36),
    }
               uint64_t v14 = heap_Realloc(*(uint64_t **)(*((void *)this + 2) + 8), *((void *)this + 12), 2* (a3 + 2 * v12 * v13)* (float)((float)((float)LODWORD(a8) / 100.0) * (float)*((unsigned int *)this + 9))), (*((void *)this + 12) = v14) != 0))
    {
      return new_siren_nn_mt_synth_ProcessStart((uint64_t)this, a6);
    }
    else
    {
      return 10;
    }
  }
  else
  {
    return new_siren_mrcc_synth_ProcessStart((uint64_t)this);
  }
}

uint64_t siren_common_synth_Process(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *(_DWORD **)(a1 + 24);
  if (!v3[2278]) {
    return new_siren_mrcc_synth_Process(a1, a2, a3);
  }
  if (v3[2280]) {
    return siren_nn_seq2seq_synth_Process(a1, *(void *)(a1 + 16), a2, a3);
  }
  if (v3[2282]) {
    return siren_nn_parallel_synth_Process(a1, *(void *)(a1 + 16), a2, a3);
  }
  if (v3[2292] < 2u) {
    return new_siren_nn_synth_Process(a1, a2, a3);
  }
  return new_siren_nn_mt_synth_Process(a1);
}

uint64_t siren_common_synth_ProcessEnd(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(a1 + 24) + 9112)) {
    return 0;
  }
  else {
    return new_siren_mrcc_synth_ProcessEnd(a1);
  }
}

uint64_t siren_common_synth_GetVolumeLevel(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 44);
  }
  return result;
}

uint64_t siren_common_synth_GetRatePct(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 72);
  }
  return result;
}

uint64_t siren_common_synth_GetCurSampleCount(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 56);
  }
  return result;
}

uint64_t siren_common_synth_GetCurFrameCount(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 52);
  }
  return result;
}

uint64_t siren_common_synth_GetFramesCount(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 48);
  }
  return result;
}

uint64_t siren_common_synth_GetIsBufferFull(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 88);
  }
  return result;
}

uint64_t siren_common_synth_GetLeftFrames(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 120);
  }
  return result;
}

uint64_t siren_common_synth_GetLeftSamples(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 124);
  }
  return result;
}

uint64_t siren_common_synth_GetUsedLeftFrames(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 128);
  }
  return result;
}

uint64_t siren_common_synth_GetUsedLeftSamples(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 132);
  }
  return result;
}

uint64_t siren_common_synth_GetFeedFrames(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 136);
  }
  return result;
}

uint64_t siren_common_synth_SetCurSampleCount(uint64_t a1, int a2)
{
  if (!a1) {
    return 2229280786;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 56) = a2;
  return result;
}

uint64_t siren_common_synth_SetCurFrameCount(uint64_t a1, int a2)
{
  if (!a1) {
    return 2229280786;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 52) = a2;
  return result;
}

uint64_t siren_common_synth_SetLeftSamplesCount(uint64_t a1, int a2)
{
  if (!a1) {
    return 2229280786;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 104) = a2;
  return result;
}

uint64_t siren_common_synth_SetIsBufferFull(uint64_t a1, unsigned int a2)
{
  uint64_t result = 2229280786;
  if (a1)
  {
    if (a2 <= 1)
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 88) = a2;
    }
  }
  return result;
}

uint64_t siren_common_synth_SetLeftFrames(uint64_t a1, int a2)
{
  if (!a1) {
    return 2229280786;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 120) = a2;
  return result;
}

uint64_t siren_common_synth_SetLeftSamples(uint64_t a1, int a2)
{
  if (!a1) {
    return 2229280786;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 124) = a2;
  return result;
}

uint64_t siren_common_synth_SetUsedLeftFrames(uint64_t a1, int a2)
{
  if (!a1) {
    return 2229280786;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 128) = a2;
  return result;
}

uint64_t siren_common_synth_SetUsedLeftSamples(uint64_t a1, int a2)
{
  if (!a1) {
    return 2229280786;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 132) = a2;
  return result;
}

uint64_t siren_common_synth_SetFeedFrames(uint64_t a1, int a2)
{
  if (!a1) {
    return 2229280786;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 136) = a2;
  return result;
}

uint64_t siren_common_synth_SetFeedSamples(uint64_t a1, int a2)
{
  if (!a1) {
    return 2229280786;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 140) = a2;
  return result;
}

uint64_t siren_common_synth_GetNnInfo(uint64_t result)
{
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t siren_common_synth_GetMrccInfo(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t siren_common_synth_SetNnInfo(void *a1, uint64_t a2)
{
  uint64_t result = 2229280786;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *a1 = a2;
    }
  }
  return result;
}

uint64_t siren_common_synth_SetMrccInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result = 2229280786;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *(void *)(a1 + 8) = a2;
    }
  }
  return result;
}

uint64_t siren_common_synth_GetPcmBuffer(uint64_t result)
{
  if (result) {
    return *(void *)(result + 80);
  }
  return result;
}

uint64_t siren_common_synth_GetLeftPcmBuffer(uint64_t result)
{
  if (result) {
    return *(void *)(result + 96);
  }
  return result;
}

uint64_t siren_common_synth_GetFrames(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

uint64_t siren_common_synth_GetLeftAcousticBuffer(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

uint64_t siren_common_synth_SetRate(uint64_t a1, int a2)
{
  uint64_t result = 2229280786;
  if (a1)
  {
    if ((a2 - 25) <= 0xAF)
    {
      uint64_t result = 0;
      *(_WORD *)(a1 + 72) = a2;
    }
  }
  return result;
}

uint64_t siren_common_synth_SetVolume(uint64_t a1, unsigned int a2)
{
  uint64_t result = 2229280786;
  if (a1)
  {
    if (a2 <= 0x64)
    {
      uint64_t result = 0;
      *(_WORD *)(a1 + 44) = a2;
    }
  }
  return result;
}

uint64_t siren_common_synth_SetPitch(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(*(void *)(a1 + 24) + 9112)) {
    return 2229280786;
  }
  else {
    return new_siren_mrcc_synth_SetPitch(a1, a2);
  }
}

uint64_t synth_bet6_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2229280769;
  }
  uint64_t result = 0;
  *a2 = &ISynth_Bet6;
  return result;
}

uint64_t synth_bet6_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2229280775;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 135972;
  }
  return result;
}

uint64_t synth_bet6_ClassClose()
{
  return 0;
}

uint64_t synth_bet6_ObjOpen(uint64_t a1, int a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v5 = 2229280775;
  memset(v45, 0, sizeof(v45));
  int v42 = 0;
  long long v40 = xmmword_26C21F7D0;
  int v41 = off_26C21F7E0;
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a3, a4, &v44);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      if ((safeh_HandleCheck(a1, a2, 135972, 408) & 0x80000000) == 0)
      {
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        log_OutText(*(void *)(v44 + 32), (uint64_t)"SYNTH_BET6", 4, 0, (uint64_t)"Entering synth_bet6_ObjOpen", v10, v11, v12, v38);
        unsigned int v13 = (void *)heap_Calloc(*(void **)(v44 + 8), 1, 1184);
        uint64_t v18 = v44;
        if (!v13)
        {
          log_OutPublic(*(void *)(v44 + 32), (uint64_t)"SYNTH_BET6", 73000, 0, v14, v15, v16, v17, v39);
          return 2229280778;
        }
        uint64_t v19 = (uint64_t)v13;
        *unsigned int v13 = a1;
        v13[1] = v18;
        uint64_t Object = critsec_ObjOpen(*(void *)(v44 + 16), *(void **)(v44 + 8), v13 + 2);
        if ((Object & 0x80000000) == 0)
        {
          uint64_t Object = objc_GetObject(*(void *)(v44 + 48), (uint64_t)"SYNTHSTREAM", &v43);
          if ((Object & 0x80000000) == 0)
          {
            uint64_t v25 = v44;
            *(void *)(v19 + 56) = *(void *)(v43 + 8);
            betX_CreateRegularBrokerString(v25, 0, (char *)v45, 0x80uLL);
            uint64_t v5 = select_bet6_VoiceOpen(*(void *)v19, *(void *)(v19 + 8), (uint64_t)v45, v19 + 24);
            if ((v5 & 0x80000000) != 0)
            {
LABEL_25:
              log_OutPublic(*(void *)(*(void *)(v19 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v21, v22, v23, v24, "lhError");
LABEL_26:
              *(void *)a5 = v19;
              *(_DWORD *)(a5 + 8) = 135973;
LABEL_27:
              synth_bet6_ObjClose((uint64_t *)v19, *(void *)(a5 + 8));
              *(void *)a5 = 0;
              *(_DWORD *)(a5 + 8) = 0;
LABEL_28:
              log_OutText(*(void *)(v44 + 32), (uint64_t)"SYNTH_BET6", 4, 0, (uint64_t)"synth_bet6_ObjOpen: %x", v34, v35, v36, v5);
              return v5;
            }
            Sirenuint64_t Voice = select_bet6_GetSirenVoice((uint64_t *)(v19 + 24));
            *(void *)(v19 + 40) = SirenVoice;
            if (!SirenVoice)
            {
              log_OutPublic(*(void *)(*(void *)(v19 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, 0, v27, v28, v29, v30, v39);
              *(void *)a5 = v19;
              *(_DWORD *)(a5 + 8) = 135973;
              goto LABEL_33;
            }
            *(void *)&long long v40 = v19;
            Listeuint64_t n = synth_bet6_loc_ParamGetListen(v19, "volume", 0, 100, 0x50u, &v40, &v42);
            if ((Listen & 0x80000000) != 0) {
              goto LABEL_31;
            }
            Listeuint64_t n = synth_bet6_loc_ParamGetListen(v19, "rate_baseline", 50, 400, 0x64u, &v40, &v42);
            if ((Listen & 0x80000000) != 0) {
              goto LABEL_31;
            }
            Listeuint64_t n = synth_bet6_loc_ParamGetListen(v19, "pitch_baseline", 50, 200, 0x64u, &v40, &v42);
            if ((Listen & 0x80000000) != 0) {
              goto LABEL_31;
            }
            Listeuint64_t n = synth_bet6_loc_ParamGetListen(v19, "rate", 50, 400, 0x64u, &v40, &v42);
            if ((Listen & 0x80000000) != 0) {
              goto LABEL_31;
            }
            Listeuint64_t n = synth_bet6_loc_ParamGetListen(v19, "pitch", 50, 200, 0x64u, &v40, &v42);
            if ((Listen & 0x80000000) != 0) {
              goto LABEL_31;
            }
            Listeuint64_t n = synth_bet6_loc_ParamGetListen(v19, "audiooutputbufsamples", 1, 0x7FFFFFFF, 0x100u, &v40, &v42);
            if ((Listen & 0x80000000) != 0) {
              goto LABEL_31;
            }
            *(_DWORD *)(v19 + 1036) = v42;
            uint64_t v32 = *(_DWORD **)(v19 + 40);
            uint64_t v33 = 274877907 * v32[8] * v32[4];
            *(_DWORD *)(v19 + 1032) = (v33 >> 38) + ((unint64_t)v33 >> 63);
            if (v32[2282] || v32[2280]) {
              *(_DWORD *)(v19 + 1032) = v32[2297];
            }
            Listeuint64_t n = synth_bet6_loc_ParamGetListen(v19, "waitfactor", 0, 9, 2u, &v40, &v42);
            if ((Listen & 0x80000000) != 0)
            {
LABEL_31:
              uint64_t v5 = Listen;
              goto LABEL_26;
            }
            uint64_t Object = siren_common_synth_Init(*(void *)(v19 + 8), *(_DWORD **)(v19 + 40), (uint64_t *)(v19 + 48));
            if ((Object & 0x80000000) == 0)
            {
              uint64_t v5 = synth_bet6_loc_InitFromParamc(v19);
              *(void *)a5 = v19;
              *(_DWORD *)(a5 + 8) = 135973;
              if ((v5 & 0x80000000) != 0) {
                goto LABEL_27;
              }
LABEL_33:
              if (*(void *)(v19 + 40) && *(void *)(v19 + 48)) {
                goto LABEL_28;
              }
              goto LABEL_27;
            }
          }
        }
        uint64_t v5 = Object;
        goto LABEL_25;
      }
      return 2229280776;
    }
  }
  return v5;
}

uint64_t synth_bet6_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 135973, 1184);
  if ((v3 & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v7 = v3;
  if (a1)
  {
    uint64_t v8 = a1[1];
    log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET6", 4, 0, (uint64_t)"Entering synth_bet6_ObjClose", v4, v5, v6, v44);
    uint64_t v9 = *(void *)(v8 + 40);
    uint64_t v46 = a1;
    long long v45 = *(long long *)((char *)&xmmword_26C21F7D0 + 8);
    long long v47 = *(long long *)((char *)&xmmword_26C21F7D0 + 8);
    int v10 = paramc_ListenerRemove(v9, "volume", (long long *)&v46);
    uint64_t v11 = *(void *)(v8 + 40);
    if (v10 >= 0) {
      int v12 = v7;
    }
    else {
      int v12 = v10;
    }
    uint64_t v46 = a1;
    long long v47 = v45;
    int v13 = paramc_ListenerRemove(v11, "rate", (long long *)&v46);
    uint64_t v14 = *(void *)(v8 + 40);
    if (v13 < 0 && v12 > -1) {
      int v12 = v13;
    }
    uint64_t v46 = a1;
    long long v47 = v45;
    int v16 = paramc_ListenerRemove(v14, "pitch", (long long *)&v46);
    uint64_t v17 = *(void *)(v8 + 40);
    if (v16 < 0 && v12 > -1) {
      int v12 = v16;
    }
    uint64_t v46 = a1;
    long long v47 = v45;
    int v19 = paramc_ListenerRemove(v17, "pitch_baseline", (long long *)&v46);
    uint64_t v20 = *(void *)(v8 + 40);
    if (v19 < 0 && v12 > -1) {
      int v12 = v19;
    }
    uint64_t v46 = a1;
    long long v47 = v45;
    int v22 = paramc_ListenerRemove(v20, "rate_baseline", (long long *)&v46);
    uint64_t v23 = *(void *)(v8 + 40);
    if (v22 < 0 && v12 > -1) {
      int v12 = v22;
    }
    uint64_t v46 = a1;
    long long v47 = v45;
    int v25 = paramc_ListenerRemove(v23, "audiooutputbufsamples", (long long *)&v46);
    uint64_t v26 = *(void *)(v8 + 40);
    if (v25 < 0 && v12 > -1) {
      int v12 = v25;
    }
    uint64_t v46 = a1;
    long long v47 = v45;
    int v28 = paramc_ListenerRemove(v26, "waitfactor", (long long *)&v46);
    if (v28 >= 0 || v12 <= -1) {
      uint64_t v7 = v12;
    }
    else {
      uint64_t v7 = v28;
    }
    uint64_t v30 = a1[6];
    if (v30)
    {
      int v31 = siren_common_synth_DeInit(v30);
      if ((int)v7 > -1 && v31 < 0) {
        uint64_t v7 = v31;
      }
      else {
        uint64_t v7 = v7;
      }
    }
    if (a1[5])
    {
      int v33 = select_bet6_VoiceClose(*a1, a1 + 3);
      if ((int)v7 > -1 && v33 < 0) {
        uint64_t v7 = v33;
      }
      else {
        uint64_t v7 = v7;
      }
    }
    if (a1[7])
    {
      int v35 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
      if ((int)v7 > -1 && v35 < 0) {
        uint64_t v7 = v35;
      }
      else {
        uint64_t v7 = v7;
      }
    }
    uint64_t v37 = a1[2];
    if (v37)
    {
      int v38 = critsec_ObjClose(v37);
      if ((int)v7 > -1 && v38 < 0) {
        uint64_t v7 = v38;
      }
      else {
        uint64_t v7 = v7;
      }
    }
    heap_Free(*(void **)(v8 + 8), (uint64_t)a1);
    log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET6", 4, 0, (uint64_t)"Leaving synth_bet6_ObjClose: %x", v40, v41, v42, v7);
  }
  return v7;
}

uint64_t synth_bet6_ObjReopen(uint64_t *a1, int a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  *(_OWORD *)long long __s1 = 0u;
  long long v19 = 0u;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135973, 1184) & 0x80000000) != 0) {
    return 2229280776;
  }
  log_OutText(*(void *)(a1[1] + 32), (uint64_t)"SYNTH_BET6", 4, 0, (uint64_t)"Entering synth_bet6_ObjReopen", v3, v4, v5, v17);
  LODWORD(v9) = betX_CreateRegularBrokerString(a1[1], 0, __s1, 0x80uLL);
  if ((v9 & 0x80000000) != 0
    || !a1[5]
    || (VoiceBrkString = (const char *)select_bet6_GetVoiceBrkString(a1 + 3), !strcmp(__s1, VoiceBrkString)))
  {
    unsigned int v14 = 0;
  }
  else
  {
    int v11 = siren_common_synth_DeInit(a1[6]);
    if (v11 < 0) {
      LODWORD(v9) = v11;
    }
    unsigned int v12 = select_bet6_VoiceClose(*a1, a1 + 3);
    if ((v12 & 0x80000000) != 0
      || (unsigned int v12 = select_bet6_VoiceOpen(*a1, a1[1], (uint64_t)__s1, (uint64_t)(a1 + 3)), (v12 & 0x80000000) != 0))
    {
      unsigned int v14 = v12;
    }
    else
    {
      Sirenuint64_t Voice = (_DWORD *)select_bet6_GetSirenVoice(a1 + 3);
      a1[5] = (uint64_t)SirenVoice;
      unsigned int v14 = siren_common_synth_Init(a1[1], SirenVoice, a1 + 6);
      if ((v14 & 0x80000000) != 0) {
        select_bet6_VoiceClose(*a1, a1 + 3);
      }
      else {
        LODWORD(v9) = synth_bet6_loc_InitFromParamc((uint64_t)a1);
      }
    }
  }
  if (v14) {
    BOOL v15 = (int)v9 <= -1;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15) {
    uint64_t v9 = v9;
  }
  else {
    uint64_t v9 = v14;
  }
  log_OutText(*(void *)(a1[1] + 32), (uint64_t)"SYNTH_BET6", 4, 0, (uint64_t)"synth_bet6_ObjReopen: %x", v6, v7, v8, v9);
  return v9;
}

uint64_t synth_bet6_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v13 = 0;
  uint64_t v8 = 2229280778;
  if ((safeh_HandleCheck(a1, a2, 135973, 1184) & 0x80000000) != 0) {
    return 2229280776;
  }
  synstrmaux_BuildAudioContentType("audio/L16;rate=",
    *(_DWORD *)(*(void *)(a1 + 40) + 16),
    (char *)(a1 + 984),
    0x30uLL);
  synstrmaux_InitStreamOpener(a1 + 64, *(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-bet6-speech-frames", 0, a1 + 904);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 888);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), a1 + 984, a1 + 968);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 952);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-bet6-sample-chunk", 0, a1 + 920);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"applcation/x-realspeak-bet6-select-audio", 0, a1 + 936);
  uint64_t v9 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 64), *(void *)(a1 + 56), a3, a4);
  if ((v9 & 0x80000000) != 0) {
    goto LABEL_11;
  }
  uint64_t v10 = heap_Calloc(*(void **)(*(void *)(a1 + 8) + 8), *(unsigned int *)(a1 + 1036), 2);
  *(void *)(a1 + 1128) = v10;
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = heap_Calloc(*(void **)(*(void *)(a1 + 8) + 8), *(unsigned int *)(a1 + 1036), 2);
  *(void *)(a1 + 1136) = v11;
  if (!v11) {
    goto LABEL_12;
  }
  if (*(_DWORD *)(*(void *)(a1 + 40) + 9184)
    && (uint64_t v9 = SampleChunk_alloc(*(void *)(a1 + 8), (uint64_t *)(a1 + 1176)), (v9 & 0x80000000) != 0)
    || (uint64_t v9 = siren_common_synth_Reset(*(void *)(a1 + 48)), (v9 & 0x80000000) != 0))
  {
LABEL_11:
    uint64_t v8 = v9;
    goto LABEL_12;
  }
  uint64_t v8 = synth_bet6_loc_InitFromParamc(a1);
  if ((v8 & 0x80000000) != 0)
  {
LABEL_12:
    synth_bet6_ProcessEnd(a1, a2);
    return v8;
  }
  *(_DWORD *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 1060) = 0u;
  *(_OWORD *)(a1 + 1076) = 0u;
  paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"rate", &v13);
  *(float *)(a1 + 1092) = (float)v13 / 100.0;
  paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"pitch", &v13);
  *(float *)(a1 + 1096) = (float)v13 / 100.0;
  paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"volume", &v13);
  *(float *)(a1 + 1100) = (float)v13 / 100.0;
  return v8;
}

uint64_t synth_bet6_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v7 = 2229280778;
  if ((safeh_HandleCheck(a1, a2, 135973, 1184) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v8 = *(_DWORD **)(a1 + 40);
  if (v8[2296])
  {
    float v171 = 0;
    int v172 = 0;
    __dst = 0;
    __src = 0;
    LODWORD(__n) = 0;
    uint64_t v166 = 0;
    uint64_t v167 = 0;
    *a5 = 1;
    unsigned int v9 = *(_DWORD *)(a1 + 1036);
    unsigned int v10 = *(_DWORD *)(a1 + 1032);
    int v11 = v9 / v10 * v10;
    if (!v10) {
      int v11 = *(_DWORD *)(a1 + 1036);
    }
    if (v9 >= v10) {
      int v12 = v11;
    }
    else {
      int v12 = *(_DWORD *)(a1 + 1032);
    }
    uint64_t v7 = (*(uint64_t (**)(void, void, char *, uint64_t *))(*(void *)(a1 + 56) + 144))(*(void *)(a1 + 904), *(void *)(a1 + 912), (char *)&v166 + 4, &v166);
    if ((v7 & 0x80000000) == 0)
    {
      HIDWORD(v166) = HIDWORD(v166) / (4 * (unint64_t)v8[2301]);
      if (!HIDWORD(v166))
      {
        if (v166) {
          end_cur_stream_MT(a1, (const void **)&__src, &__dst, (unsigned int *)&__n, (unsigned int *)&v167 + 1);
        }
        else {
          *a5 = 0;
        }
        if (!siren_common_synth_GetLeftSamples(*(void *)(a1 + 48))) {
          return v7;
        }
      }
      int LeftSamples = siren_common_synth_GetLeftSamples(*(void *)(a1 + 48));
      if (LeftSamples) {
        goto LABEL_54;
      }
      uint64_t v53 = (*(uint64_t (**)(void, void, void **, uint64_t *))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 904), *(void *)(a1 + 912), &v172, &v167);
      if ((v53 & 0x80000000) != 0) {
        goto LABEL_75;
      }
      unsigned int v70 = (char *)v172 + 4;
      float v71 = (float)*(unsigned int *)v172;
      *(float *)(a1 + 1116) = v71;
      int v172 = v70;
      uint64_t v44 = SampleChunk_init(*(void *)(a1 + 8), *(_DWORD *)(*(void *)(a1 + 40) + 9204), *(_DWORD *)(*(void *)(a1 + 40) + 9168), *(void *)(a1 + 56), *(void *)(a1 + 920), *(void *)(a1 + 928), v71, v167, *(void *)(a1 + 1176));
      if ((v44 & 0x80000000) == 0)
      {
LABEL_54:
        uint64_t v53 = (*(uint64_t (**)(void, void, void **, size_t *))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 888), *(void *)(a1 + 896), &__src, &__n);
        if ((v53 & 0x80000000) == 0)
        {
          uint64_t v53 = (*(uint64_t (**)(void, void, unsigned int **, void))(*(void *)(a1 + 56) + 112))(*(void *)(a1 + 968), *(void *)(a1 + 976), &v171, (2 * v12));
          if ((v53 & 0x80000000) == 0)
          {
            if (!__n
              || (uint64_t v53 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 56) + 112))(*(void *)(a1 + 952), *(void *)(a1 + 960), &__dst), (v53 & 0x80000000) == 0))
            {
              uint64_t v58 = v171;
              uint64_t v59 = v172;
              unsigned int v61 = HIDWORD(v166);
              unsigned int v60 = v167;
              uint64_t v44 = critsec_Enter(*(void **)(a1 + 16));
              if ((v44 & 0x80000000) == 0)
              {
                if (__dst) {
                  memcpy(__dst, __src, __n);
                }
                unsigned int v163 = v60;
                unsigned int v65 = HIDWORD(v167);
                unsigned int v64 = __n;
                LODWORD(__n) = __n >> 5;
                if (HIDWORD(v167) < v64 >> 5)
                {
                  uint64_t v66 = __dst;
                  do
                  {
                    if (v66[8 * v65 + 3] > *(_DWORD *)(a1 + 1072)) {
                      break;
                    }
                    unsigned int v67 = v66[8 * v65] - 16;
                    if (v67 <= 9 && ((0x305u >> v67) & 1) != 0)
                    {
                      uint64_t v68 = off_264111CA8[v67];
                      critsec_Leave(*(void **)(a1 + 16));
                      paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)v68, *((_DWORD *)__dst + 8 * v65 + 6));
                      critsec_Enter(*(void **)(a1 + 16));
                      uint64_t v66 = __dst;
                    }
                    v66[8 * v65 + 3] = *(_DWORD *)(a1 + 1080);
                    v66[8 * HIDWORD(v167) + 4] = *(_DWORD *)(a1 + 1032)
                                               * v66[8 * HIDWORD(v167) + 4]
                                               * *(unsigned __int16 *)(a1 + 1042)
                                               / 0x64;
                    unsigned int v65 = HIDWORD(v167) + 1;
                    HIDWORD(v167) = v65;
                  }
                  while (v65 < __n);
                }
                LODWORD(v7) = siren_common_synth_ProcessStart(*(kaldi::nnet1::Component **)(a1 + 48), (uint64_t)v59, v61, (uint64_t)v58, v12, *(void *)(a1 + 1176), v62, v63);
                if (v7)
                {
LABEL_69:
                  unsigned int v69 = critsec_Leave(*(void **)(a1 + 16));
                  if ((int)v7 >= 0) {
                    return v69;
                  }
                  else {
                    return v7;
                  }
                }
                int CurSampleCount = 0;
                do
                {
                  LODWORD(v7) = new_siren_nn_mt_synth_Process(*(void *)(a1 + 48));
                  if ((v7 & 0x80000000) != 0) {
                    goto LABEL_69;
                  }
                  *(_DWORD *)(a1 + 1072) += siren_common_synth_GetFeedFrames(*(void *)(a1 + 48));
                  *(_DWORD *)(a1 + 1080) += siren_common_synth_GetCurSampleCount(*(void *)(a1 + 48)) - CurSampleCount;
                  int CurSampleCount = siren_common_synth_GetCurSampleCount(*(void *)(a1 + 48));
                }
                while (siren_common_synth_GetLeftSamples(*(void *)(a1 + 48))
                     && !siren_common_synth_GetIsBufferFull(*(void *)(a1 + 48)));
                if (v7) {
                  goto LABEL_69;
                }
                uint64_t v93 = *(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 120);
                int v94 = siren_common_synth_GetCurSampleCount(*(void *)(a1 + 48));
                int v95 = v93(*(void *)(a1 + 968), *(void *)(a1 + 976), (2 * v94));
                if (v95 < 0)
                {
                  int v100 = v95;
                  log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v96, v97, v98, v99, "lhError");
                }
                else
                {
                  int v100 = 0;
                }
                unsigned int v141 = 32 * v65;
                if (v65)
                {
                  int v142 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 120))(*(void *)(a1 + 952), *(void *)(a1 + 960), v141 & ~(v100 >> 31));
                  if (v142 < 0)
                  {
                    int v147 = v142;
                    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v143, v144, v145, v146, "lhError");
                    if (v100 >= 0) {
                      int v100 = v147;
                    }
                  }
                }
                if (!LeftSamples
                  && ((*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 904), *(void *)(a1 + 912), v163) & 0x80000000) != 0)
                {
                  log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v148, v149, v150, v151, "lhError");
                  uint64_t v152 = 0;
                }
                else if (v100 >= 0)
                {
                  uint64_t v152 = v141;
                }
                else
                {
                  uint64_t v152 = 0;
                }
                if (((*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 888), *(void *)(a1 + 896), v152) & 0x80000000) != 0)log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v153, v154, v155, v156, "lhError"); {
                int v157 = siren_common_synth_GetLeftSamples(*(void *)(a1 + 48));
                }
                int v158 = siren_common_synth_SetCurFrameCount(*(void *)(a1 + 48), 0);
                LODWORD(v7) = v158;
                if (v157)
                {
                  if (!v158)
                  {
                    LODWORD(v7) = siren_common_synth_SetCurSampleCount(*(void *)(a1 + 48), 0);
                    if (!v7)
                    {
                      int v159 = 2;
LABEL_204:
                      *a5 = v159;
LABEL_205:
                      LODWORD(v7) = siren_common_synth_ProcessEnd(*(void *)(a1 + 48));
                      goto LABEL_69;
                    }
                  }
                }
                else if (!v158)
                {
                  LODWORD(v7) = siren_common_synth_SetCurSampleCount(*(void *)(a1 + 48), 0);
                  if (!v7)
                  {
                    int v159 = 1;
                    goto LABEL_204;
                  }
                }
                if ((v7 & 0x80000000) != 0) {
                  goto LABEL_69;
                }
                goto LABEL_205;
              }
              return v44;
            }
          }
        }
LABEL_75:
        uint64_t v7 = v53;
        log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v54, v55, v56, v57, "lhError");
        return v7;
      }
      return v44;
    }
    uint64_t v28 = *(void *)(*(void *)(a1 + 8) + 32);
    goto LABEL_20;
  }
  if (v8[2279])
  {
    __src = 0;
    float v171 = 0;
    LODWORD(__dst) = 0;
    LODWORD(__n) = 0;
    uint64_t v167 = 0;
    float v17 = *(float *)(a1 + 1092);
    HIDWORD(v166) = 0;
    uint64_t v18 = *(unsigned int *)(a1 + 1036);
    *a5 = 1;
    uint64_t v23 = (*(uint64_t (**)(void, void, char *, char *))(*(void *)(a1 + 56) + 144))(*(void *)(a1 + 936), *(void *)(a1 + 944), (char *)&v167 + 4, (char *)&v166 + 4);
    if ((v23 & 0x80000000) == 0)
    {
      if (!HIDWORD(v167) && *(_DWORD *)(a1 + 1064) == *(_DWORD *)(a1 + 1088))
      {
        if (HIDWORD(v166))
        {
          long long v24 = (void **)&v171;
          p_src = &__src;
          p_dst = (unsigned int *)&__dst;
          p_uint64_t n = (unsigned int *)&__n;
LABEL_105:
          end_cur_stream_MT(a1, (const void **)v24, p_src, p_dst, p_n);
          return v23;
        }
        goto LABEL_106;
      }
      uint64_t v40 = (*(uint64_t (**)(void, void, unsigned int **, void **))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 888), *(void *)(a1 + 896), &v171, &__dst);
      unsigned int v41 = __dst;
      unsigned int v42 = __dst >> 5;
      LODWORD(__dst) = __dst >> 5;
      if ((v40 & 0x80000000) == 0)
      {
        uint64_t v43 = v171;
        if (v41 >= 0x20 && *v171 == 0x4000)
        {
          synth_bet6_ProcessReset((void *)a1);
          unsigned int v42 = __dst;
          uint64_t v43 = v171;
        }
        uint64_t v44 = synth_bet6_loc_cache_markers(a1, v42, v43);
        if ((v44 & 0x80000000) != 0) {
          return v44;
        }
        uint64_t v40 = (*(uint64_t (**)(void, void, uint64_t, uint64_t *))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 936), *(void *)(a1 + 944), a1 + 1144, &v167);
        if ((v40 & 0x80000000) == 0)
        {
          LODWORD(v167) = v167 >> 1;
          uint64_t v44 = synth_bet6_loc_Postprocess_sonic(a1, *(void *)(a1 + 1144), v167, v167, v171, __dst, 4.0);
          if ((v44 & 0x80000000) != 0) {
            return v44;
          }
          synth_bet6_loc_adjust_markers(a1, __dst, (uint64_t)v171, v17);
          uint64_t v45 = v167;
          uint64_t v46 = *(void *)(a1 + 1152);
          if (v46)
          {
            size_t v47 = 2 * v167;
            uint64_t v48 = *(unsigned int *)(a1 + 1080);
            uint64_t v49 = *(unsigned int *)(a1 + 1104);
            if (v47 > v49 - 2 * v48)
            {
              uint64_t v50 = 2 * v48;
              do
                uint64_t v49 = (2 * v49);
              while (v47 > v49 - v50);
              *(_DWORD *)(a1 + 1104) = v49;
            }
            uint64_t v51 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 8) + 8), v46, v49);
            if (!v51) {
              return v7;
            }
            *(void *)(a1 + 1152) = v51;
          }
          else
          {
            uint64_t v51 = heap_Calloc(*(void **)(*(void *)(a1 + 8) + 8), v167, 2);
            *(void *)(a1 + 1152) = v51;
            if (!v51) {
              return v7;
            }
            *(_DWORD *)(a1 + 1104) = 2 * v45;
            size_t v47 = 2 * v45;
          }
          memcpy((void *)(v51 + 2 * *(unsigned int *)(a1 + 1080)), *(const void **)(a1 + 1144), v47);
          *(_DWORD *)(a1 + 1080) += v45;
          int v172 = 0;
          uint64_t v101 = (*(uint64_t (**)(void, void, void **, uint64_t))(*(void *)(a1 + 56) + 112))(*(void *)(a1 + 968), *(void *)(a1 + 976), &v172, 2 * v18);
          if ((v101 & 0x80000000) != 0)
          {
            uint64_t v7 = v101;
          }
          else
          {
            unsigned int v102 = *(_DWORD *)(a1 + 1088);
            uint64_t v103 = *(unsigned int *)(a1 + 1064);
            if (v102 <= (int)v103 + (int)v18)
            {
              LODWORD(v18) = v102 - v103;
              memcpy(v172, (const void *)(*(void *)(a1 + 1160) + 2 * v103), 2 * (v102 - v103));
              int v104 = *(_DWORD *)(a1 + 1088);
            }
            else
            {
              memcpy(v172, (const void *)(*(void *)(a1 + 1160) + 2 * v103), 2 * v18);
              int v104 = *(_DWORD *)(a1 + 1064) + v18;
            }
            *(_DWORD *)(a1 + 1064) = v104;
            uint64_t v128 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 120))(*(void *)(a1 + 968), *(void *)(a1 + 976), (2 * v18));
            if ((v128 & 0x80000000) == 0)
            {
              uint64_t v7 = synth_bet6_loc_write_markers(a1, 0, 0, 0);
              if ((v7 & 0x80000000) == 0)
              {
                uint64_t v129 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 936), *(void *)(a1 + 944), (2 * v167));
                if ((v129 & 0x80000000) != 0)
                {
                  uint64_t v134 = v129;
                  log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v130, v131, v132, v133, "lhError");
                  uint64_t v7 = v134;
                }
                unsigned int v135 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 888), *(void *)(a1 + 896), (32 * __dst));
                if ((v135 & 0x80000000) != 0)
                {
                  unsigned int v160 = v135;
                  log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v136, v137, v138, v139, "lhError");
                  if ((int)v7 >= 0) {
                    uint64_t v7 = v160;
                  }
                  else {
                    uint64_t v7 = v7;
                  }
                  if (*(_DWORD *)(a1 + 1064) == *(_DWORD *)(a1 + 1088)) {
                    int v161 = 1;
                  }
                  else {
                    int v161 = 2;
                  }
                  *a5 = v161;
                  return v7;
                }
                int v140 = *(_DWORD *)(a1 + 1064) == *(_DWORD *)(a1 + 1088) ? 1 : 2;
                *a5 = v140;
                if ((v7 & 0x80000000) == 0) {
                  return siren_common_synth_ProcessEnd(*(void *)(a1 + 48));
                }
              }
              return v7;
            }
            uint64_t v7 = v128;
          }
          uint64_t v28 = *(void *)(*(void *)(a1 + 8) + 32);
LABEL_20:
          log_OutPublic(v28, (uint64_t)"SYNTH_BET6", 73001, "%s%x", v13, v14, v15, v16, "lhError");
          return v7;
        }
      }
      uint64_t v23 = v40;
    }
    goto LABEL_49;
  }
  if (v8[2280])
  {
    float v171 = 0;
    int v172 = 0;
    __dst = 0;
    __src = 0;
    uint64_t v167 = 0;
    size_t __n = 0;
    LODWORD(v166) = 0;
    uint64_t v164 = 0;
    uint64_t v165 = 0;
    float v29 = *(float *)(a1 + 1092);
    *a5 = 1;
    uint64_t v23 = (*(uint64_t (**)(void, void, char *, char *))(*(void *)(a1 + 56) + 144))(*(void *)(a1 + 904), *(void *)(a1 + 912), (char *)&v165 + 4, (char *)&v164 + 4);
    if ((v23 & 0x80000000) == 0)
    {
      if (HIDWORD(v165))
      {
        HIDWORD(v165) = HIDWORD(v165) / (4 * (unint64_t)v8[2301]);
        uint64_t v30 = (*(uint64_t (**)(void, void, void **, uint64_t *))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 904), *(void *)(a1 + 912), &v172, &v166);
        if ((v30 & 0x80000000) == 0)
        {
          uint64_t v30 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 888), *(void *)(a1 + 896), &__dst, (char *)&v167 + 4);
          if ((v30 & 0x80000000) == 0)
          {
            unsigned int v35 = HIDWORD(v167);
            HIDWORD(v167) >>= 5;
            if (v35 >= 0x20 && *(_DWORD *)__dst == 0x4000) {
              synth_bet6_ProcessReset((void *)a1);
            }
            uint64_t v36 = critsec_Enter(*(void **)(a1 + 16));
            if ((v36 & 0x80000000) == 0)
            {
              (*(void (**)(void, void, uint64_t *))(*(void *)(a1 + 56) + 136))(*(void *)(a1 + 968), *(void *)(a1 + 976), &v164);
              LODWORD(v164) = (v164 >> 1) - *(_DWORD *)(a1 + 1064);
              float v37 = *(float *)v172;
              int v38 = HIDWORD(v165);
              if (*(float *)v172 == 5.0 || v37 == 1.0 || v37 == 2.0)
              {
                if (HIDWORD(v165) >= 2) {
                  int v39 = HIDWORD(v165) - 2;
                }
                else {
                  int v39 = 0;
                }
                int v38 = *(_DWORD *)(a1 + 1032);
              }
              else
              {
                int v39 = *(_DWORD *)(a1 + 1032);
              }
              uint64_t v105 = (v39 * v38);
              HIDWORD(v166) = v105;
              *(_DWORD *)(a1 + 1036) = v105;
              unint64_t v106 = HIDWORD(v167);
              if (HIDWORD(v167))
              {
                uint64_t v107 = 0;
                unint64_t v108 = 0;
                do
                {
                  if (*(_DWORD *)((char *)__dst + v107) == 25)
                  {
                    critsec_Leave(*(void **)(a1 + 16));
                    paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"waitfactor", *(_DWORD *)((char *)__dst + v107 + 24));
                    *(_WORD *)(a1 + 1056) = *(_DWORD *)((char *)__dst + v107 + 24);
                    critsec_Enter(*(void **)(a1 + 16));
                    unint64_t v106 = HIDWORD(v167);
                  }
                  ++v108;
                  v107 += 32;
                }
                while (v108 < v106);
              }
              uint64_t v78 = (unsigned int *)heap_Calloc(*(void **)(*(void *)(a1 + 8) + 8), v105, 2);
              float v171 = v78;
              if (!v78) {
                goto LABEL_155;
              }
              uint64_t v81 = siren_common_synth_ProcessStart(*(kaldi::nnet1::Component **)(a1 + 48), (uint64_t)v172, HIDWORD(v165), (uint64_t)v78, v105, 0, v109, v110);
              if ((v81 & 0x80000000) != 0) {
                goto LABEL_154;
              }
              uint64_t v81 = siren_common_synth_Process(*(void *)(a1 + 48), 0, HIDWORD(v165) - 1);
              if ((v81 & 0x80000000) != 0) {
                goto LABEL_154;
              }
              *(_DWORD *)(a1 + 1072) += siren_common_synth_GetCurFrameCount(*(void *)(a1 + 48));
              int v82 = siren_common_synth_GetCurSampleCount(*(void *)(a1 + 48));
              LODWORD(v165) = v82;
              unsigned int v83 = *((_DWORD *)v172 + 1);
              unsigned int v84 = *((_DWORD *)v172 + 2);
              unsigned int v111 = *(_DWORD *)(a1 + 1080);
              unsigned int v86 = *(_DWORD *)(a1 + 1076);
              int v87 = __dst;
              uint64_t v88 = HIDWORD(v167);
              BOOL v89 = v111 >= v86;
              unsigned int v112 = v111 - v86;
              if (v112 == 0 || !v89 || !HIDWORD(v167)) {
                goto LABEL_144;
              }
              unsigned int v113 = (unsigned int *)((char *)__dst + 12);
              do
              {
                if (*v113 >= v86) {
                  *v113 += v112;
                }
                v113 += 8;
                --v88;
              }
              while (v88);
              goto LABEL_143;
            }
            return v36;
          }
        }
        goto LABEL_102;
      }
      goto LABEL_103;
    }
    goto LABEL_49;
  }
  if (v8[2282])
  {
    float v171 = 0;
    int v172 = 0;
    __dst = 0;
    __src = 0;
    uint64_t v167 = 0;
    size_t __n = 0;
    LODWORD(v166) = 0;
    uint64_t v164 = 0;
    uint64_t v165 = 0;
    float v29 = *(float *)(a1 + 1092);
    *a5 = 1;
    uint64_t v23 = (*(uint64_t (**)(void, void, char *, char *))(*(void *)(a1 + 56) + 144))(*(void *)(a1 + 904), *(void *)(a1 + 912), (char *)&v165 + 4, (char *)&v164 + 4);
    if ((v23 & 0x80000000) == 0)
    {
      if (HIDWORD(v165))
      {
        HIDWORD(v165) = HIDWORD(v165) / (4 * (unint64_t)v8[2301]);
        uint64_t v30 = (*(uint64_t (**)(void, void, void **, uint64_t *))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 904), *(void *)(a1 + 912), &v172, &v166);
        if ((v30 & 0x80000000) == 0)
        {
          uint64_t v30 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 888), *(void *)(a1 + 896), &__dst, (char *)&v167 + 4);
          if ((v30 & 0x80000000) == 0)
          {
            unsigned int v73 = HIDWORD(v167);
            HIDWORD(v167) >>= 5;
            if (v73 >= 0x20 && *(_DWORD *)__dst == 0x4000) {
              synth_bet6_ProcessReset((void *)a1);
            }
            uint64_t v36 = critsec_Enter(*(void **)(a1 + 16));
            if ((v36 & 0x80000000) == 0)
            {
              (*(void (**)(void, void, uint64_t *))(*(void *)(a1 + 56) + 136))(*(void *)(a1 + 968), *(void *)(a1 + 976), &v164);
              LODWORD(v164) = (v164 >> 1) - *(_DWORD *)(a1 + 1064);
              float v37 = *(float *)v172;
              uint64_t v74 = (*(_DWORD *)(a1 + 1032) * HIDWORD(v165));
              HIDWORD(v166) = v74;
              *(_DWORD *)(a1 + 1036) = v74;
              unint64_t v75 = HIDWORD(v167);
              if (HIDWORD(v167))
              {
                uint64_t v76 = 0;
                unint64_t v77 = 0;
                do
                {
                  if (*(_DWORD *)((char *)__dst + v76) == 25)
                  {
                    critsec_Leave(*(void **)(a1 + 16));
                    paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"waitfactor", *(_DWORD *)((char *)__dst + v76 + 24));
                    *(_WORD *)(a1 + 1056) = *(_DWORD *)((char *)__dst + v76 + 24);
                    critsec_Enter(*(void **)(a1 + 16));
                    unint64_t v75 = HIDWORD(v167);
                  }
                  ++v77;
                  v76 += 32;
                }
                while (v77 < v75);
              }
              uint64_t v78 = (unsigned int *)heap_Calloc(*(void **)(*(void *)(a1 + 8) + 8), v74, 2);
              float v171 = v78;
              if (!v78) {
                goto LABEL_155;
              }
              uint64_t v81 = siren_common_synth_ProcessStart(*(kaldi::nnet1::Component **)(a1 + 48), (uint64_t)v172, HIDWORD(v165), (uint64_t)v78, v74, 0, v79, v80);
              if ((v81 & 0x80000000) != 0) {
                goto LABEL_154;
              }
              uint64_t v81 = siren_common_synth_Process(*(void *)(a1 + 48), 0, HIDWORD(v165) - 1);
              if ((v81 & 0x80000000) != 0) {
                goto LABEL_154;
              }
              *(_DWORD *)(a1 + 1072) += siren_common_synth_GetCurFrameCount(*(void *)(a1 + 48));
              int v82 = siren_common_synth_GetCurSampleCount(*(void *)(a1 + 48));
              LODWORD(v165) = v82;
              unsigned int v83 = *((_DWORD *)v172 + 1);
              unsigned int v84 = *((_DWORD *)v172 + 2);
              unsigned int v85 = *(_DWORD *)(a1 + 1080);
              unsigned int v86 = *(_DWORD *)(a1 + 1076);
              int v87 = __dst;
              uint64_t v88 = HIDWORD(v167);
              BOOL v89 = v85 >= v86;
              unsigned int v90 = v85 - v86;
              if (v90 == 0 || !v89 || !HIDWORD(v167))
              {
LABEL_144:
                *(_DWORD *)(a1 + 1076) = v86 + v82;
                uint64_t inserted = synth_bet6_loc_InsertPause(a1, (uint64_t *)&v171, (uint64_t)v87, v88, (unsigned int *)&v165, (_DWORD *)&v166 + 1, v83, v84, v37);
                if ((inserted & 0x80000000) != 0)
                {
                  uint64_t v7 = inserted;
                  uint64_t v78 = v171;
                  goto LABEL_155;
                }
                uint64_t v81 = synth_bet6_loc_cache_markers(a1, HIDWORD(v167), __dst);
                uint64_t v78 = v171;
                if ((v81 & 0x80000000) == 0)
                {
                  int v115 = v165;
                  uint64_t v81 = synth_bet6_loc_Postprocess_sonic(a1, (uint64_t)v171, v165, SHIDWORD(v166), (unsigned int *)__dst, HIDWORD(v167), v37);
                  if ((v81 & 0x80000000) == 0)
                  {
                    synth_bet6_loc_adjust_markers(a1, HIDWORD(v167), (uint64_t)__dst, v29);
                    *(_DWORD *)(a1 + 1080) += v115;
                    size_t v116 = 2 * (*(_DWORD *)(a1 + 1088) - *(_DWORD *)(a1 + 1064));
                    uint64_t v117 = (*(uint64_t (**)(void, void, void **, size_t))(*(void *)(a1 + 56) + 112))(*(void *)(a1 + 968), *(void *)(a1 + 976), &__src, v116);
                    if ((v117 & 0x80000000) != 0)
                    {
                      uint64_t v162 = v117;
                      log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v118, v119, v120, v121, "lhError");
                      uint64_t v7 = v162;
                      goto LABEL_155;
                    }
                    memcpy(__src, (const void *)(*(void *)(a1 + 1160) + 2 * *(unsigned int *)(a1 + 1064)), v116);
                    *(_DWORD *)(a1 + 1064) = *(_DWORD *)(a1 + 1088);
                    uint64_t v122 = (*(uint64_t (**)(void, void, size_t))(*(void *)(a1 + 56) + 120))(*(void *)(a1 + 968), *(void *)(a1 + 976), v116);
                    if ((v122 & 0x80000000) != 0) {
                      goto LABEL_201;
                    }
                    uint64_t v81 = synth_bet6_loc_write_markers(a1, 0, 0, v164);
                    if ((v81 & 0x80000000) == 0)
                    {
                      uint64_t v122 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 904), *(void *)(a1 + 912), (4 * HIDWORD(v165) * v8[2301] + 12));
                      if ((v122 & 0x80000000) == 0)
                      {
                        uint64_t v122 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 888), *(void *)(a1 + 896), (32 * HIDWORD(v167)));
                        if ((v122 & 0x80000000) == 0)
                        {
                          uint64_t v7 = siren_common_synth_ProcessEnd(*(void *)(a1 + 48));
                          uint64_t v127 = critsec_Leave(*(void **)(a1 + 16));
                          if ((v7 & 0x80000000) == 0)
                          {
                            uint64_t v23 = v127;
                            goto LABEL_157;
                          }
LABEL_156:
                          uint64_t v23 = v7;
LABEL_157:
                          if (v78) {
                            heap_Free(*(void **)(*(void *)(a1 + 8) + 8), (uint64_t)v78);
                          }
                          return v23;
                        }
                      }
LABEL_201:
                      uint64_t v7 = v122;
                      log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v123, v124, v125, v126, "lhError");
                      goto LABEL_155;
                    }
                  }
                }
LABEL_154:
                uint64_t v7 = v81;
LABEL_155:
                critsec_Leave(*(void **)(a1 + 16));
                goto LABEL_156;
              }
              uint64_t v91 = (unsigned int *)((char *)__dst + 12);
              do
              {
                if (*v91 >= v86) {
                  *v91 += v90;
                }
                v91 += 8;
                --v88;
              }
              while (v88);
LABEL_143:
              LODWORD(v88) = HIDWORD(v167);
              goto LABEL_144;
            }
            return v36;
          }
        }
LABEL_102:
        uint64_t v23 = v30;
        log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v31, v32, v33, v34, "lhError");
        return v23;
      }
LABEL_103:
      if (HIDWORD(v164))
      {
        long long v24 = &__dst;
        p_src = (void **)&__n;
        p_dst = (unsigned int *)&v167 + 1;
        p_uint64_t n = (unsigned int *)&v167;
        goto LABEL_105;
      }
LABEL_106:
      *a5 = 0;
      return v23;
    }
LABEL_49:
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v19, v20, v21, v22, "lhError");
    return v23;
  }
  return synth_bet6_Process_ST(a1, a5);
}

uint64_t synth_bet6_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 135973, 1184) & 0x80000000) != 0) {
    return 2229280776;
  }
  *(void *)(a1 + 1060) = 0;
  uint64_t v3 = *(void *)(a1 + 1128);
  if (v3)
  {
    heap_Free(*(void **)(*(void *)(a1 + 8) + 8), v3);
    *(void *)(a1 + 1128) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 1136);
  if (v4)
  {
    heap_Free(*(void **)(*(void *)(a1 + 8) + 8), v4);
    *(void *)(a1 + 1136) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 1152);
  if (v5)
  {
    heap_Free(*(void **)(*(void *)(a1 + 8) + 8), v5);
    *(void *)(a1 + 1152) = 0;
    *(_DWORD *)(a1 + 1104) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 1160);
  if (v6)
  {
    heap_Free(*(void **)(*(void *)(a1 + 8) + 8), v6);
    *(void *)(a1 + 1160) = 0;
    *(_DWORD *)(a1 + 1112) = 0;
  }
  uint64_t v7 = *(void *)(a1 + 1168);
  if (v7)
  {
    unint64_t v8 = *(unsigned int *)(a1 + 1084);
    if (v8)
    {
      uint64_t v9 = 0;
      for (unint64_t i = 0; i < v8; ++i)
      {
        uint64_t v11 = *(void *)(a1 + 1168);
        int v12 = *(_DWORD *)(v11 + v9);
        if (v12 == 29 || v12 == 26)
        {
          heap_Free(*(void **)(*(void *)(a1 + 8) + 8), *(void *)(v11 + v9 + 24));
          unint64_t v8 = *(unsigned int *)(a1 + 1084);
        }
        v9 += 32;
      }
      uint64_t v7 = *(void *)(a1 + 1168);
    }
    heap_Free(*(void **)(*(void *)(a1 + 8) + 8), v7);
    *(void *)(a1 + 1168) = 0;
    *(_DWORD *)(a1 + 1108) = 0;
  }
  if (*(_DWORD *)(*(void *)(a1 + 40) + 9184))
  {
    SampleChunk_free(*(void *)(a1 + 8), *(void *)(a1 + 1176));
    *(void *)(a1 + 1176) = 0;
  }
  siren_common_synth_Reset(*(void *)(a1 + 48));
  uint64_t v14 = *(void *)(a1 + 56);
  return synstrmaux_CloseStreams((_WORD *)(a1 + 64), v14);
}

uint64_t synth_bet6_loc_ParamCheckChange(int a1, char *__s1, const char *a3, _DWORD *a4)
{
  if (!strcmp(__s1, "audiooutputbufsamples"))
  {
    if ((int)LH_atoi(a3) <= 0) {
      uint64_t result = 2229280783;
    }
    else {
      uint64_t result = 0;
    }
  }
  else if (!strcmp(__s1, "volume"))
  {
    if (LH_atoi(a3) <= 0x64) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 2229280783;
    }
  }
  else if (!strcmp(__s1, "rate") || !strcmp(__s1, "rate_baseline"))
  {
    if (LH_atoi(a3) - 401 >= 0xFFFFFEA1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 2229280783;
    }
  }
  else if (!strcmp(__s1, "ratewpm"))
  {
    uint64_t result = 2229280769;
  }
  else if (!strcmp(__s1, "pitch") || !strcmp(__s1, "pitch_baseline"))
  {
    if (LH_atoi(a3) - 201 >= 0xFFFFFF69) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 2229280783;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a4 = (int)result >= 0;
  return result;
}

uint64_t synth_bet6_loc_ParamLearnChange(uint64_t a1, char *__s1, const char *a3)
{
  if (strcmp(__s1, "audiooutputbufsamples")
    && strcmp(__s1, "volume")
    && strcmp(__s1, "rate")
    && strcmp(__s1, "rate_baseline")
    && strcmp(__s1, "pitch_baseline")
    && strcmp(__s1, "ratewpm")
    && strcmp(__s1, "pitch")
    && strcmp(__s1, "waitfactor"))
  {
    return 0;
  }
  int v7 = LH_atoi(a3);
  return synth_bet6_loc_ParamSet(a1, __s1, v7);
}

uint64_t synth_bet6_loc_ParamGetListen(uint64_t a1, unsigned char *a2, signed int a3, signed int a4, unsigned int a5, long long *a6, int *a7)
{
  if (((paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)a2, a7) & 0x80000000) != 0
     || (a5 = a3, *a7 < a3)
     || (a5 = a4, *a7 > a4))
    && (uint64_t v14 = paramc_ParamSetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)a2, a5),
        *a7 = a5,
        (v14 & 0x80000000) != 0))
  {
    uint64_t v24 = v14;
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v15, v16, v17, v18, "lhError");
  }
  else
  {
    uint64_t v19 = *(void *)(*(void *)(a1 + 8) + 40);
    long long v26 = *a6;
    uint64_t v27 = *((void *)a6 + 2);
    uint64_t v24 = paramc_ListenerAdd(v19, a2, &v26);
    if ((v24 & 0x80000000) != 0) {
      log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v20, v21, v22, v23, "lhError");
    }
  }
  return v24;
}

uint64_t synth_bet6_loc_InitFromParamc(uint64_t a1)
{
  int v3 = 0;
  uint64_t result = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"volume", &v3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = synth_bet6_loc_ParamSet(a1, "volume", v3);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"rate", &v3);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = synth_bet6_loc_ParamSet(a1, "rate", v3);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"rate_baseline", &v3);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = synth_bet6_loc_ParamSet(a1, "rate_baseline", v3);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"pitch_baseline", &v3);
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = synth_bet6_loc_ParamSet(a1, "pitch_baseline", v3);
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"pitch", &v3);
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = synth_bet6_loc_ParamSet(a1, "pitch", v3);
                    if ((result & 0x80000000) == 0)
                    {
                      uint64_t result = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"waitfactor", &v3);
                      if ((result & 0x80000000) == 0) {
                        return synth_bet6_loc_ParamSet(a1, "waitfactor", v3);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t synth_bet6_loc_ParamSet(uint64_t a1, const char *a2, int a3)
{
  if (!strcmp(a2, "audiooutputbufsamples"))
  {
    if (a3 <= 0) {
      a3 = *(_DWORD *)(a1 + 1036);
    }
    uint64_t v6 = 0;
    *(_DWORD *)(a1 + 1036) = a3;
  }
  else
  {
    uint64_t v6 = critsec_Enter(*(void **)(a1 + 16));
    if ((v6 & 0x80000000) == 0)
    {
      if (!strcmp(a2, "volume"))
      {
        if (a3 <= 0x64)
        {
          *(_WORD *)(a1 + 1040) = a3;
          siren_common_synth_SetVolume(*(void *)(a1 + 48), a3);
          goto LABEL_17;
        }
      }
      else
      {
        if (strcmp(a2, "rate_baseline"))
        {
          uint64_t v7 = 2229280783;
          if (!strcmp(a2, "rate"))
          {
            uint64_t v8 = MapProsodyValue_Scaling(50, 100, 400, *(_DWORD *)(a1 + 1052), a3);
            if (!v8) {
              goto LABEL_29;
            }
            int v12 = ((int)v8 + 9999) / (int)v8;
            if (((v12 << 16) - 13107201) < 0xFF50FFFF) {
              goto LABEL_29;
            }
            log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 3, 0, (uint64_t)"Set rate %d", v9, v10, v11, v8);
            *(_WORD *)(a1 + 1042) = v12;
            siren_common_synth_SetRate(*(void *)(a1 + 48), (unsigned __int16)v12);
            goto LABEL_17;
          }
          if (!strcmp(a2, "ratewpm"))
          {
            uint64_t v7 = 2229280769;
            goto LABEL_29;
          }
          if (strcmp(a2, "pitch_baseline"))
          {
            if (!strcmp(a2, "pitch"))
            {
              uint64_t v15 = MapProsodyValue_Scaling(50, 100, 200, *(_DWORD *)(a1 + 1048), a3);
              if ((v15 - 201) < 0xFFFFFF69) {
                goto LABEL_29;
              }
              unsigned int v20 = v15;
              log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 3, 0, (uint64_t)"Set pitch %d (synth %d)", v16, v17, v18, v15);
              *(_DWORD *)(a1 + 1044) = a3;
              siren_common_synth_SetPitch(*(void *)(a1 + 48), v20);
            }
            else if (!strcmp(a2, "waitfactor"))
            {
              if (a3 > 9)
              {
LABEL_29:
                critsec_Leave(*(void **)(a1 + 16));
                return v7;
              }
              *(_WORD *)(a1 + 1056) = a3;
            }
LABEL_17:
            uint64_t v7 = v6;
            goto LABEL_29;
          }
          if ((a3 - 201) < 0xFFFFFF69) {
            goto LABEL_29;
          }
          unsigned int v22 = 0;
          *(_DWORD *)(a1 + 1048) = a3;
          uint64_t v13 = "pitch";
          paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"pitch", (int *)&v22);
          uint64_t v14 = v22;
LABEL_24:
          synth_bet6_loc_ParamSet(a1, v13, v14);
          uint64_t v7 = 0;
          goto LABEL_29;
        }
        if ((a3 - 401) >= 0xFFFFFEA1)
        {
          unsigned int v21 = 0;
          *(_DWORD *)(a1 + 1052) = a3;
          uint64_t v13 = "rate";
          paramc_ParamGetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"rate", (int *)&v21);
          uint64_t v14 = v21;
          goto LABEL_24;
        }
      }
      uint64_t v7 = 2229280783;
      goto LABEL_29;
    }
  }
  return v6;
}

uint64_t synth_bet6_Process_ST(uint64_t a1, int *a2)
{
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  __dst = 0;
  __src = 0;
  uint64_t v86 = 0;
  size_t __n = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  *a2 = 1;
  unsigned int v5 = *(_DWORD *)(a1 + 1036);
  unsigned int v6 = *(_DWORD *)(a1 + 1032);
  int v7 = v5 / v6 * v6;
  if (!v6) {
    int v7 = *(_DWORD *)(a1 + 1036);
  }
  if (v5 >= v6) {
    int v8 = v7;
  }
  else {
    int v8 = *(_DWORD *)(a1 + 1032);
  }
  uint64_t v13 = (*(uint64_t (**)(void, void, char *, uint64_t *))(*(void *)(a1 + 56) + 144))(*(void *)(a1 + 904), *(void *)(a1 + 912), (char *)&v86 + 4, &v86);
  if ((v13 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v9, v10, v11, v12, "lhError");
    return v13;
  }
  HIDWORD(v86) = HIDWORD(v86) / (4 * (unint64_t)*(unsigned int *)(v4 + 9204));
  if (!HIDWORD(v86))
  {
    if (!v86)
    {
      *a2 = 0;
      return v13;
    }
    uint64_t v14 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 888), *(void *)(a1 + 896), &__src, (char *)&__n + 4);
    if ((v14 & 0x80000000) == 0)
    {
      if (!HIDWORD(__n)) {
        return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 64), *(void *)(a1 + 56));
      }
      uint64_t v14 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 56) + 112))(*(void *)(a1 + 952), *(void *)(a1 + 960), &__dst);
      if ((v14 & 0x80000000) == 0)
      {
        memcpy(__dst, __src, HIDWORD(__n));
        unsigned int v22 = HIDWORD(__n);
        HIDWORD(__n) >>= 5;
        if (v22 >= 0x20)
        {
          uint64_t v23 = 0;
          unint64_t v24 = 0;
          int v25 = *(_DWORD *)(a1 + 1080);
          long long v26 = (char *)__dst;
          do
          {
            uint64_t v27 = &v26[v23];
            *((_DWORD *)v27 + 3) = v25;
            *((_DWORD *)v27 + 4) = 0;
            ++v24;
            v23 += 32;
          }
          while (v24 < HIDWORD(__n));
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v14 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 56) + 120))(*(void *)(a1 + 952), *(void *)(a1 + 960), v23);
        if ((v14 & 0x80000000) == 0)
        {
          uint64_t v14 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 888), *(void *)(a1 + 896), v23);
          if ((v14 & 0x80000000) == 0) {
            return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 64), *(void *)(a1 + 56));
          }
        }
      }
    }
LABEL_32:
    uint64_t v13 = v14;
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v15, v16, v17, v18, "lhError");
    return v13;
  }
  uint64_t v14 = (*(uint64_t (**)(void, void, _DWORD **, size_t *))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 904), *(void *)(a1 + 912), &v91, &__n);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_32;
  }
  uint64_t v14 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 888), *(void *)(a1 + 896), &__src, (char *)&__n + 4);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_32;
  }
  uint64_t v14 = (*(uint64_t (**)(void, void, uint64_t *, void))(*(void *)(a1 + 56) + 112))(*(void *)(a1 + 968), *(void *)(a1 + 976), &v90, (2 * v8));
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_32;
  }
  if (HIDWORD(__n))
  {
    uint64_t v14 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 56) + 112))(*(void *)(a1 + 952), *(void *)(a1 + 960), &__dst);
    if ((v14 & 0x80000000) != 0) {
      goto LABEL_32;
    }
  }
  uint64_t v19 = critsec_Enter(*(void **)(a1 + 16));
  if ((v19 & 0x80000000) != 0) {
    return v19;
  }
  unsigned int v21 = *(_DWORD *)(a1 + 1060);
  unsigned int v84 = v21;
  unsigned int v85 = v21;
  if (__dst)
  {
    memcpy(__dst, __src, HIDWORD(__n));
    unsigned int v21 = *(_DWORD *)(a1 + 1060);
  }
  HIDWORD(__n) >>= 5;
  if (v21)
  {
    LODWORD(v20) = *(_DWORD *)(a1 + 1116);
  }
  else
  {
    float v29 = v91 + 1;
    LODWORD(v20) = *v91;
    *(_DWORD *)(a1 + 1116) = *v91;
    uint64_t v91 = v29;
  }
  float v30 = 3.0;
  if (*(float *)&v20 >= 3.0)
  {
    uint64_t v83 = 0;
    unsigned int v31 = HIDWORD(v86);
LABEL_53:
    int v37 = siren_common_synth_ProcessStart(*(kaldi::nnet1::Component **)(a1 + 48), (uint64_t)v91, v31, v90, v8, 0, v20, v30);
    LODWORD(v33) = 0;
    int CurSampleCount = 0;
LABEL_54:
    char v44 = 0;
    while ((v37 & 0x80000000) == 0 && (v44 & 1) == 0)
    {
      if (v85 >= HIDWORD(v86) + v84)
      {
        unsigned int v52 = *(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 56) + 120);
        goto LABEL_76;
      }
      uint64_t v45 = (char *)__dst;
      if (__dst && v33 < HIDWORD(__n))
      {
        uint64_t v46 = 32 * v33;
        unint64_t v33 = v33;
        do
        {
          if (*(_DWORD *)&v45[v46 + 12] > *(_DWORD *)(a1 + 1072)) {
            break;
          }
          switch(*(_DWORD *)&v45[v46])
          {
            case 0x10:
              critsec_Leave(*(void **)(a1 + 16));
              uint64_t v47 = *(void *)(*(void *)(a1 + 8) + 40);
              unsigned int v48 = *(_DWORD *)((char *)__dst + v46 + 24);
              uint64_t v49 = "pitch";
              goto LABEL_67;
            case 0x11:
              critsec_Leave(*(void **)(a1 + 16));
              uint64_t v47 = *(void *)(*(void *)(a1 + 8) + 40);
              unsigned int v48 = *(_DWORD *)((char *)__dst + v46 + 24);
              uint64_t v49 = "timbre";
              goto LABEL_67;
            case 0x12:
              critsec_Leave(*(void **)(a1 + 16));
              uint64_t v47 = *(void *)(*(void *)(a1 + 8) + 40);
              unsigned int v48 = *(_DWORD *)((char *)__dst + v46 + 24);
              uint64_t v49 = "rate";
              goto LABEL_67;
            case 0x18:
              critsec_Leave(*(void **)(a1 + 16));
              uint64_t v47 = *(void *)(*(void *)(a1 + 8) + 40);
              unsigned int v48 = *(_DWORD *)((char *)__dst + v46 + 24);
              uint64_t v49 = "volume";
LABEL_67:
              paramc_ParamSetUInt(v47, (uint64_t)v49, v48);
              critsec_Enter(*(void **)(a1 + 16));
              break;
            default:
              break;
          }
          uint64_t v45 = (char *)__dst;
          uint64_t v50 = (char *)__dst + v46;
          *((_DWORD *)v50 + 3) = *(_DWORD *)(a1 + 1080);
          *((_DWORD *)v50 + 4) = *(_DWORD *)(a1 + 1032)
                               * *((_DWORD *)v50 + 4)
                               * *(unsigned __int16 *)(a1 + 1042)
                               / 0x64;
          ++v33;
          if (!v45) {
            break;
          }
          v46 += 32;
        }
        while (v33 < HIDWORD(__n));
      }
      int v37 = siren_common_synth_Process(*(void *)(a1 + 48), v85 - v84, v85 - v84);
      if (v37 < 0) {
        goto LABEL_50;
      }
      int IsBufferFull = siren_common_synth_GetIsBufferFull(*(void *)(a1 + 48));
      char v44 = 1;
      if (!IsBufferFull)
      {
        ++v85;
        ++*(_DWORD *)(a1 + 1072);
        *(_DWORD *)(a1 + 1080) += siren_common_synth_GetCurSampleCount(*(void *)(a1 + 48)) - CurSampleCount;
        int CurSampleCount = siren_common_synth_GetCurSampleCount(*(void *)(a1 + 48));
        goto LABEL_54;
      }
    }
    unsigned int v52 = *(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 56) + 120);
    if (v37 < 0)
    {
      int v38 = 0;
      uint64_t v53 = 0;
      goto LABEL_77;
    }
LABEL_76:
    uint64_t v53 = 2 * siren_common_synth_GetCurSampleCount(*(void *)(a1 + 48));
    int v38 = 1;
LABEL_77:
    int v39 = v52(*(void *)(a1 + 968), *(void *)(a1 + 976), v53);
    goto LABEL_78;
  }
  unsigned int v31 = HIDWORD(v86);
  if (*(float *)&v20 == 1.0 || *(float *)&v20 == 0.0)
  {
    unsigned int v32 = *(_DWORD *)(*(void *)(a1 + 40) + 9156);
    unsigned int v31 = HIDWORD(v86) - v32;
    HIDWORD(v83) = v32;
    if (HIDWORD(v86) < v32)
    {
      LODWORD(v33) = 0;
      LODWORD(v83) = 0;
      goto LABEL_49;
    }
    HIDWORD(v86) -= v32;
  }
  else
  {
    HIDWORD(v83) = 0;
  }
  BOOL v34 = *(float *)&v20 == 1.0;
  float v30 = 2.0;
  if (*(float *)&v20 == 2.0) {
    BOOL v34 = 1;
  }
  if (v21 || !v34)
  {
    LODWORD(v83) = 0;
    goto LABEL_53;
  }
  unsigned int v35 = *(_DWORD *)(*(void *)(a1 + 40) + 9156);
  BOOL v36 = v31 >= v35;
  v31 -= v35;
  LODWORD(v83) = v35;
  if (v36)
  {
    HIDWORD(v86) = v31;
    v91 += *(_DWORD *)(v4 + 9204) * v35;
    goto LABEL_53;
  }
  LODWORD(v33) = 0;
LABEL_49:
  int v37 = -2065686521;
LABEL_50:
  int v38 = 0;
  int v39 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 120))(*(void *)(a1 + 968), *(void *)(a1 + 976), 0);
LABEL_78:
  if (v39 < 0)
  {
    int v54 = v39;
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v40, v41, v42, v43, "lhError");
    if (v38) {
      int v37 = v54;
    }
  }
  int v55 = 32 * v33;
  if (v33
    && (int v56 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 120))(*(void *)(a1 + 952), *(void *)(a1 + 960), v55 & ~(v37 >> 31)), v56 < 0))
  {
    int v66 = v56;
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v57, v58, v59, v60, "lhError");
    int v65 = 0;
    uint64_t v64 = 0;
    if (v37 >= 0) {
      int v37 = v66;
    }
    unsigned int v61 = *(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 56) + 96);
  }
  else
  {
    unsigned int v61 = *(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 56) + 96);
    if (v37 < 0)
    {
      int v65 = 0;
      uint64_t v64 = 0;
    }
    else
    {
      int v62 = HIDWORD(v83);
      if (v85 != HIDWORD(v86) + v84) {
        int v62 = 0;
      }
      int v63 = (v83 - v84 + v85 + v62) * *(_DWORD *)(v4 + 9204);
      if (!*(_DWORD *)(a1 + 1060)) {
        ++v63;
      }
      uint64_t v64 = (4 * v63);
      int v65 = 1;
    }
  }
  int v67 = v61(*(void *)(a1 + 904), *(void *)(a1 + 912), v64);
  if (v67 < 0)
  {
    int v72 = v67;
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v68, v69, v70, v71, "lhError");
    if (v65) {
      int v37 = v72;
    }
  }
  int v73 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 888), *(void *)(a1 + 896), v55 & ~(v37 >> 31));
  if (v73 < 0)
  {
    int v78 = v73;
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v74, v75, v76, v77, "lhError");
    if (v37 >= 0) {
      int v37 = v78;
    }
  }
  if (v85 == HIDWORD(v86) + v84) {
    unsigned int v79 = 0;
  }
  else {
    unsigned int v79 = v85;
  }
  if (v85 == HIDWORD(v86) + v84) {
    int v80 = 1;
  }
  else {
    int v80 = 2;
  }
  *(_DWORD *)(a1 + 1060) = v79;
  *a2 = v80;
  if ((v37 & 0x80000000) == 0) {
    int v37 = siren_common_synth_ProcessEnd(*(void *)(a1 + 48));
  }
  unsigned int v81 = critsec_Leave(*(void **)(a1 + 16));
  if (v37 >= 0) {
    return v81;
  }
  else {
    return v37;
  }
}

uint64_t end_cur_stream_MT(uint64_t a1, const void **a2, void **a3, unsigned int *a4, unsigned int *a5)
{
  if (*a4)
  {
    if (((*(uint64_t (**)(void, void, const void **))(*(void *)(a1 + 56) + 88))(*(void *)(a1 + 888), *(void *)(a1 + 896), a2) & 0x80000000) != 0|| ((*(uint64_t (**)(void, void, void **, void))(*(void *)(a1 + 56) + 112))(*(void *)(a1 + 952), *(void *)(a1 + 960), a3, *a4) & 0x80000000) != 0)
    {
      return log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v10, v11, v12, v13, "lhError");
    }
    memcpy(*a3, *a2, *a4);
    *a4 >>= 5;
    *a5 = 0;
    if (*a4)
    {
      unsigned int v14 = 0;
      uint64_t v15 = *a3;
      do
      {
        v15[8 * v14 + 3] = *(_DWORD *)(a1 + 1080);
        v15[8 * *a5 + 4] = 0;
        unsigned int v14 = *a5 + 1;
        *a5 = v14;
      }
      while (v14 < *a4);
      uint64_t v16 = 32 * v14;
    }
    else
    {
      uint64_t v16 = 0;
    }
    if (((*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 56) + 120))(*(void *)(a1 + 952), *(void *)(a1 + 960), v16) & 0x80000000) != 0|| ((*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 888), *(void *)(a1 + 896), 32 * *a5) & 0x80000000) != 0)
    {
      return log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v10, v11, v12, v13, "lhError");
    }
  }
  uint64_t v17 = *(void *)(a1 + 56);
  return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 64), v17);
}

void *synth_bet6_ProcessReset(void *result)
{
  uint64_t v1 = result;
  *(_OWORD *)((char *)result + 1060) = 0u;
  *(_OWORD *)((char *)result + 1076) = 0u;
  uint64_t v2 = result[144];
  if (v2)
  {
    uint64_t result = heap_Free(*(void **)(result[1] + 8), v2);
    v1[144] = 0;
    *((_DWORD *)v1 + 276) = 0;
  }
  uint64_t v3 = v1[145];
  if (v3)
  {
    uint64_t result = heap_Free(*(void **)(v1[1] + 8), v3);
    v1[145] = 0;
    *((_DWORD *)v1 + 278) = 0;
  }
  uint64_t v4 = v1[146];
  if (v4)
  {
    unint64_t v5 = *((unsigned int *)v1 + 271);
    if (v5)
    {
      uint64_t v6 = 0;
      for (unint64_t i = 0; i < v5; ++i)
      {
        uint64_t v8 = v1[146];
        int v9 = *(_DWORD *)(v8 + v6);
        if (v9 == 29 || v9 == 26)
        {
          heap_Free(*(void **)(v1[1] + 8), *(void *)(v8 + v6 + 24));
          unint64_t v5 = *((unsigned int *)v1 + 271);
        }
        v6 += 32;
      }
      uint64_t v4 = v1[146];
    }
    uint64_t result = heap_Free(*(void **)(v1[1] + 8), v4);
    v1[146] = 0;
    *((_DWORD *)v1 + 277) = 0;
  }
  return result;
}

uint64_t synth_bet6_loc_cache_markers(uint64_t a1, unsigned int a2, const void *a3)
{
  uint64_t v6 = 2229280778;
  uint64_t v7 = *(void *)(a1 + 1168);
  if (v7)
  {
    size_t v8 = 32 * a2;
    uint64_t v9 = *(unsigned int *)(a1 + 1084);
    uint64_t v10 = *(unsigned int *)(a1 + 1108);
    if (v8 > v10 - 32 * v9)
    {
      uint64_t v11 = 32 * v9;
      do
        uint64_t v10 = (2 * v10);
      while (v8 > v10 - v11);
      *(_DWORD *)(a1 + 1108) = v10;
    }
    uint64_t v12 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 8) + 8), v7, v10);
    if (!v12) {
      return v6;
    }
    uint64_t v13 = a2;
    *(void *)(a1 + 1168) = v12;
  }
  else
  {
    uint64_t v13 = a2;
    uint64_t v12 = heap_Calloc(*(void **)(*(void *)(a1 + 8) + 8), a2, 32);
    *(void *)(a1 + 1168) = v12;
    if (!v12) {
      return v6;
    }
    *(_DWORD *)(a1 + 1108) = 32 * a2;
    size_t v8 = 32 * a2;
  }
  memcpy((void *)(v12 + 32 * *(unsigned int *)(a1 + 1084)), a3, v8);
  uint64_t v14 = *(unsigned int *)(a1 + 1084);
  if (a2)
  {
    uint64_t v15 = (const char **)(*(void *)(a1 + 1168) + 32 * v14 + 24);
    do
    {
      int v16 = *((_DWORD *)v15 - 6);
      if (v16 == 29 || v16 == 26)
      {
        uint64_t v18 = *v15;
        int v19 = strlen(*v15);
        double v20 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 8) + 8), (v19 + 1), 1);
        *uint64_t v15 = v20;
        if (!v20) {
          return v6;
        }
        strcpy(v20, v18);
      }
      v15 += 4;
      --v13;
    }
    while (v13);
    LODWORD(v14) = *(_DWORD *)(a1 + 1084);
  }
  uint64_t v6 = 0;
  *(_DWORD *)(a1 + 1084) = v14 + a2;
  return v6;
}

uint64_t synth_bet6_loc_Postprocess_sonic(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int *a5, unsigned int a6, float a7)
{
  if (!a4) {
    return 0;
  }
  uint64_t v10 = a1;
  uint64_t v11 = 2229280778;
  if (a6)
  {
    unsigned int v13 = 0;
    uint64_t v14 = a6;
    uint64_t v15 = a6;
    int v16 = a5;
    do
    {
      unsigned int v17 = *v16;
      v16 += 8;
      int v18 = (1 << v17) & 0x1050000;
      if (v17 <= 0x18 && v18 != 0) {
        ++v13;
      }
      --v15;
    }
    while (v15);
    if (v13)
    {
      uint64_t v20 = heap_Alloc(*(void *)(*(void *)(a1 + 8) + 8), 12 * v13);
      if (!v20) {
        return v11;
      }
      uint64_t v21 = v20;
      unsigned int v22 = 0;
      int v23 = *(_DWORD *)(v10 + 1080);
      unint64_t v24 = a5 + 3;
      while (1)
      {
        int v25 = *(v24 - 3);
        if (v25 == 16) {
          break;
        }
        if (v25 == 24)
        {
          int v26 = 2;
          goto LABEL_19;
        }
        if (v25 == 18)
        {
          int v26 = 0;
LABEL_19:
          uint64_t v27 = v20 + 12 * v22;
          *(_DWORD *)uint64_t v27 = v26;
          *(_DWORD *)(v27 + 8) = *v24 - v23;
          *(float *)(v27 + 4) = (float)v24[3] / 100.0;
          ++v22;
        }
        v24 += 8;
        if (!--v14)
        {
          uint64_t v10 = a1;
          goto LABEL_25;
        }
      }
      int v26 = 1;
      goto LABEL_19;
    }
  }
  else
  {
    unsigned int v13 = 0;
  }
  uint64_t v21 = 0;
LABEL_25:
  uint64_t v28 = v13 + 1;
  float v29 = (_DWORD *)heap_Alloc(*(void *)(*(void *)(v10 + 8) + 8), 20 * v28);
  uint64_t v34 = (uint64_t)v29;
  if (!v29)
  {
    log_OutPublic(*(void *)(*(void *)(v10 + 8) + 32), (uint64_t)"SYNTH_BET6", 73000, 0, v30, v31, v32, v33, v95);
    char v44 = 0;
    goto LABEL_76;
  }
  int v98 = a4;
  int v96 = a3;
  if (v28)
  {
    uint64_t v35 = 0;
    int v36 = *(_DWORD *)(v10 + 1100);
    int v37 = *(_DWORD *)(v10 + 1096);
    int v38 = *(_DWORD *)(v10 + 1092);
    uint64_t v39 = 12 * v13;
    uint64_t v40 = v29 + 2;
    unsigned int v41 = v13;
    do
    {
      if (v35) {
        *(v40 - 2) = *(_DWORD *)(v21 + v35 - 4);
      }
      else {
        *float v29 = 0;
      }
      int v42 = a4;
      if (v39 != v35) {
        int v42 = *(_DWORD *)(v21 + v35 + 8);
      }
      *(v40 - 1) = v42;
      v40[1] = v36;
      v40[2] = v38;
      *uint64_t v40 = v37;
      if (v21 && v39 != v35)
      {
        int v43 = *(_DWORD *)(v21 + v35);
        if (v43)
        {
          if (v43 == 2)
          {
            int v36 = *(_DWORD *)(v21 + v35 + 4);
          }
          else if (v43 == 1)
          {
            int v37 = *(_DWORD *)(v21 + v35 + 4);
          }
        }
        else
        {
          int v38 = *(_DWORD *)(v21 + v35 + 4);
        }
      }
      v35 += 12;
      v40 += 5;
    }
    while (12 * v28 != v35);
  }
  else
  {
    unsigned int v41 = -1;
  }
  uint64_t v45 = &v29[5 * v41];
  *(_DWORD *)(v10 + 1092) = v45[4];
  *(void *)(v10 + 1096) = *((void *)v45 + 1);
  char v44 = (_DWORD *)heap_Alloc(*(void *)(*(void *)(v10 + 8) + 8), 4);
  uint64_t v50 = *(void *)(v10 + 8);
  if (!v44)
  {
    log_OutPublic(*(void *)(v50 + 32), (uint64_t)"SYNTH_BET6", 73000, 0, v46, v47, v48, v49, v95);
LABEL_76:
    uint64_t v56 = 0;
    if (!v13) {
      goto LABEL_103;
    }
    goto LABEL_101;
  }
  uint64_t v51 = heap_Alloc(*(void *)(v50 + 8), 2 * (4 * a4));
  uint64_t v56 = v51;
  if (!v51) {
    goto LABEL_95;
  }
  if (!v28)
  {
    uint64_t v58 = 0;
    goto LABEL_79;
  }
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v97 = v34;
  uint64_t v99 = v51;
  do
  {
    uint64_t v59 = (unsigned int *)(v34 + 20 * v57);
    int v105 = v59[1] - *v59;
    if (!v105) {
      goto LABEL_73;
    }
    uint64_t v101 = v57;
    unsigned int v102 = v58;
    _DWORD *v44 = 0;
    uint64_t v60 = *v59;
    unsigned int v61 = (float *)(v34 + 20 * v57);
    float v62 = v61[3];
    float v63 = v61[4];
    float v64 = v61[2];
    uint64_t Stream = (uint64_t *)sonicCreateStream(*(void *)(v10 + 8), 22050, 1u);
    uint64_t v70 = *(void *)(v10 + 8);
    if (!Stream || (v71 = heap_Alloc(*(void *)(v70 + 8), 4096), uint64_t v70 = *(void *)(v10 + 8), !v71))
    {
      log_OutPublic(*(void *)(v70 + 32), (uint64_t)"SYNTH_BET6", 73000, 0, v65, v66, v67, v68, v95);
      sonicDestroyStream(*(void **)(v10 + 8), Stream);
      if (!v13) {
        goto LABEL_103;
      }
      goto LABEL_101;
    }
    int v72 = (void *)v71;
    uint64_t v73 = heap_Alloc(*(void *)(v70 + 8), 4096);
    if (!v73)
    {
      log_OutPublic(*(void *)(*(void *)(v10 + 8) + 32), (uint64_t)"SYNTH_BET6", 73000, 0, v74, v75, v76, v77, v95);
      uint64_t v84 = 2229280778;
      goto LABEL_71;
    }
    int v78 = (void *)v73;
    uint64_t v103 = a2 + 2 * v60;
    unsigned int v79 = (char *)(v99 + 2 * v102);
    sonicSetSpeed((uint64_t)Stream, v63);
    sonicSetPitch((uint64_t)Stream, v64);
    sonicSetRate((uint64_t)Stream, 1.0);
    sonicSetVolume((uint64_t)Stream, v62);
    sonicSetChordPitch((uint64_t)Stream, 0);
    sonicSetQuality((uint64_t)Stream, 0);
    int v80 = 0;
    while (v105 > v80)
    {
      signed int v81 = v105 - v80 >= 2048 ? 2048 : v105 - v80;
      memcpy(v78, (const void *)(v103 + 2 * v80), 2 * v81);
      if (!v81) {
        break;
      }
      if (!sonicWriteShortToStream(*(void *)(v10 + 8), (uint64_t)Stream, v78, v81)) {
        goto LABEL_69;
      }
LABEL_63:
      ShortFromuint64_t Stream = sonicReadShortFromStream((uint64_t)Stream, v72, 2048);
      if (ShortFromStream >= 1)
      {
        for (int i = ShortFromStream; i > 0; int i = sonicReadShortFromStream((uint64_t)Stream, v72, 2048))
        {
          *v44 += i;
          memcpy(v79, v72, 2 * i);
          v79 += 2 * i;
        }
      }
      v80 += v81;
      uint64_t v10 = a1;
      if (v81 <= 0)
      {
        uint64_t v84 = 0;
        uint64_t v11 = 2229280778;
        goto LABEL_70;
      }
    }
    if (sonicFlushStream(*(void *)(v10 + 8), (uint64_t)Stream))
    {
      signed int v81 = 0;
      goto LABEL_63;
    }
LABEL_69:
    uint64_t v11 = 2229280778;
    uint64_t v84 = 2229280768;
LABEL_70:
    uint64_t v34 = v97;
    heap_Free(*(void **)(*(void *)(v10 + 8) + 8), (uint64_t)v78);
LABEL_71:
    uint64_t v56 = v99;
    heap_Free(*(void **)(*(void *)(v10 + 8) + 8), (uint64_t)v72);
    sonicDestroyStream(*(void **)(v10 + 8), Stream);
    if ((v84 & 0x80000000) != 0)
    {
      uint64_t v11 = v84;
      if (!v13) {
        goto LABEL_103;
      }
      goto LABEL_101;
    }
    uint64_t v57 = v101;
    uint64_t v58 = *v44 + v102;
    uint64_t v28 = v13 + 1;
LABEL_73:
    ++v57;
  }
  while (v57 != v28);
LABEL_79:
  uint64_t v85 = *(void *)(v10 + 1160);
  if (v85)
  {
    unint64_t v86 = 2 * v58;
    uint64_t v87 = *(unsigned int *)(v10 + 1088);
    uint64_t v88 = *(unsigned int *)(v10 + 1112);
    if (v86 > v88 - 2 * v87)
    {
      uint64_t v89 = 2 * v87;
      do
        uint64_t v88 = (2 * v88);
      while (v86 > v88 - v89);
      *(_DWORD *)(v10 + 1112) = v88;
    }
    uint64_t v90 = heap_Realloc(*(uint64_t **)(*(void *)(v10 + 8) + 8), v85, v88);
    if (v90)
    {
      *(void *)(v10 + 1160) = v90;
      goto LABEL_90;
    }
LABEL_95:
    log_OutPublic(*(void *)(*(void *)(v10 + 8) + 32), (uint64_t)"SYNTH_BET6", 73000, 0, v52, v53, v54, v55, v95);
    if (!v13) {
      goto LABEL_103;
    }
LABEL_101:
    if (v21) {
      heap_Free(*(void **)(*(void *)(v10 + 8) + 8), v21);
    }
    goto LABEL_103;
  }
  uint64_t v90 = heap_Calloc(*(void **)(*(void *)(v10 + 8) + 8), v58, 2);
  *(void *)(v10 + 1160) = v90;
  if (!v90) {
    goto LABEL_95;
  }
  *(_DWORD *)(v10 + 1112) = 2 * v58;
LABEL_90:
  uint64_t v91 = *(unsigned int *)(v10 + 1120);
  if (v58 < v91)
  {
    *(_DWORD *)(v10 + 1120) = v58;
    uint64_t v91 = v58;
  }
  uint64_t v92 = v90 + 2 * *(unsigned int *)(v10 + 1088);
  overlapAdd(v91, 1, v92, v92, v56);
  memcpy((void *)(*(void *)(v10 + 1160) + 2 * *(unsigned int *)(v10 + 1088) + 2 * *(unsigned int *)(v10 + 1120)), (const void *)(v56 + 2 * *(unsigned int *)(v10 + 1120)), 2 * (v58 - *(_DWORD *)(v10 + 1120)));
  if (a7 == 0.0 || a7 == 1.0) {
    unsigned int v93 = (float)((float)(v98 - v96) / *(float *)(v10 + 1092));
  }
  else {
    unsigned int v93 = 0;
  }
  uint64_t v11 = 0;
  *(_DWORD *)(v10 + 1120) = v93;
  *(_DWORD *)(v10 + 1088) += v58 - v93;
  if (v13) {
    goto LABEL_101;
  }
LABEL_103:
  if (v34) {
    heap_Free(*(void **)(*(void *)(v10 + 8) + 8), v34);
  }
  if (v44) {
    heap_Free(*(void **)(*(void *)(v10 + 8) + 8), (uint64_t)v44);
  }
  if (v56) {
    heap_Free(*(void **)(*(void *)(v10 + 8) + 8), v56);
  }
  return v11;
}

uint64_t synth_bet6_loc_adjust_markers(uint64_t result, unsigned int a2, uint64_t a3, float a4)
{
  int v12 = *(_DWORD *)(result + 1080);
  if (a2 && a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = -(uint64_t)a2;
    if (a4 != 1.0) {
      uint64_t result = adjust_markers_pos_by_rate(*(void *)(result + 1168) + 32 * *(unsigned int *)(result + 1084) - 32 * a2, a2, *(_DWORD *)(result + 1064), &v12, a4);
    }
    uint64_t v8 = a2;
    int v9 = -a2;
    uint64_t v10 = 32 * v7 + 32;
    uint64_t v11 = (_DWORD *)(a3 + 16);
    do
    {
      if (*(v11 - 4) == 18) {
        uint64_t result = adjust_markers_pos_by_rate(*(void *)(v6 + 1168) + 32 * *(unsigned int *)(v6 + 1084) + v10, (int)v8 - 1, *(_DWORD *)(*(void *)(v6 + 1168) + 32 * (v9 + *(_DWORD *)(v6 + 1084)) + 12), &v12, (float)*(unsigned int *)(*(void *)(v6 + 1168)+ 32 * (v9 + *(_DWORD *)(v6 + 1084))+ 24)/ 100.0);
      }
      else {
        int v12 = *v11 + *(v11 - 1);
      }
      ++v9;
      v10 += 32;
      v11 += 8;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t synth_bet6_loc_write_markers(uint64_t a1, unsigned int a2, void *a3, int a4)
{
  unsigned int v4 = a2;
  __dst = a3;
  uint64_t v6 = *(unsigned int *)(a1 + 1068);
  uint64_t v7 = *(unsigned int *)(a1 + 1084);
  if (v6 < v7)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 1064);
    int v9 = (unsigned int *)(*(void *)(a1 + 1168) + 32 * v6 + 12);
    int v10 = *(_DWORD *)(a1 + 1068);
    while (1)
    {
      unsigned int v11 = *v9;
      v9 += 8;
      if (v11 > v8) {
        break;
      }
      ++v4;
      if (v7 == ++v10)
      {
        unsigned int v4 = v7 + a2 - v6;
        int v10 = *(_DWORD *)(a1 + 1084);
        break;
      }
    }
    if (*(_DWORD *)(a1 + 1088) == v8)
    {
      unsigned int v4 = v4 - v10 + v7;
      int v12 = (unsigned int *)(*(void *)(a1 + 1168) + 32 * v6 + 12);
      uint64_t v13 = v7 - v6;
      do
      {
        unsigned int v14 = *v12;
        if (*v12 >= v8) {
          unsigned int v14 = v8 - 1;
        }
        *int v12 = v14 + a4;
        v12 += 8;
        --v13;
      }
      while (v13);
    }
    if (v4) {
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v19 = 0;
    goto LABEL_20;
  }
  unsigned int v26 = a2 - v6 + v7;
  if (*(_DWORD *)(a1 + 1088) == *(_DWORD *)(a1 + 1064)) {
    unsigned int v4 = v26;
  }
  else {
    unsigned int v4 = a2;
  }
  if (!v4) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v19 = (*(uint64_t (**)(void, void, void **, uint64_t))(*(void *)(a1 + 56) + 112))(*(void *)(a1 + 952), *(void *)(a1 + 960), &__dst, 32 * v4);
  if ((v19 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v15, v16, v17, v18, "lhError");
    return v19;
  }
  memcpy(__dst, (const void *)(*(void *)(a1 + 1168) + 32 * *(unsigned int *)(a1 + 1068)), 32 * v4);
  uint64_t v20 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 56) + 120))(*(void *)(a1 + 952), *(void *)(a1 + 960), 32 * v4);
  if ((v20 & 0x80000000) != 0)
  {
    uint64_t v25 = v20;
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET6", 73001, "%s%x", v21, v22, v23, v24, "lhError");
    uint64_t v19 = v25;
  }
LABEL_20:
  *(_DWORD *)(a1 + 1068) += v4;
  return v19;
}

uint64_t adjust_markers_pos_by_rate(uint64_t result, unsigned int a2, int a3, _DWORD *a4, float a5)
{
  if (a2)
  {
    uint64_t v5 = a2 - 1;
    uint64_t v6 = (unsigned int *)(result + 16);
    do
    {
      uint64_t v7 = v5;
      int v8 = *(v6 - 1);
      *(v6 - 1) = (float)((float)(v8 - *a4) / a5) + a3;
      *uint64_t v6 = (float)((float)*v6 / a5);
      if (*(v6 - 4) == 18) {
        break;
      }
      --v5;
      v6 += 8;
    }
    while (v7);
  }
  else
  {
    int v8 = 0;
  }
  *a4 = v8;
  return result;
}

uint64_t synth_bet6_loc_InsertPause(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, unsigned int *a5, _DWORD *a6, unsigned int a7, unsigned int a8, float a9)
{
  uint64_t v15 = *(void *)(a1 + 40);
  if (a4)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (unsigned int *)(a3 + 12);
    while (1)
    {
      if (*(v17 - 3) == 8)
      {
        unsigned int v19 = *(_DWORD *)(v15 + 16) * v17[3];
        if (v19 >= 0x3E8)
        {
          uint64_t result = insert_pause(a1, a2, a3, a4, a5, a6, v19 / 0x3E8, *v17 - *(_DWORD *)(a1 + 1080), *v17, v16, 0);
          if (result) {
            break;
          }
        }
      }
      v17 += 8;
      if (a4 == ++v16) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    BOOL v22 = a9 == 5.0 || a9 == 6.0 || a9 == 3.0;
    if (!v22
      || (unsigned int v23 = 200 * *(unsigned __int16 *)(a1 + 1056) * *(_DWORD *)(v15 + 16), v23 < 0x3E8)
      || (uint64_t result = insert_pause(a1, a2, a3, a4, a5, a6, v23 / 0x3E8, *a5, *a5 + *(_DWORD *)(a1 + 1080), a4, 0),
          !result))
    {
      uint64_t result = 2229280783;
      if (a7)
      {
        if (a7 > 0x3E8) {
          return result;
        }
        uint64_t result = insert_pause(a1, a2, a3, a4, a5, a6, *(_DWORD *)(v15 + 16) * a7 / 0x3E8, *a5, *(_DWORD *)(a1 + 1080) + *a5, a4, 1);
        if (!a8 || result) {
          return result;
        }
      }
      else if (!a8)
      {
        return 0;
      }
      uint64_t result = 2229280783;
      if (a8 <= 0x12C) {
        return insert_pause(a1, a2, a3, a4, a5, a6, 0, *a5, *(_DWORD *)(a1 + 1080) + *a5, a4, 1);
      }
    }
  }
  return result;
}

uint64_t insert_pause(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, _DWORD *a5, _DWORD *a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, int a11)
{
  unsigned int v18 = *(_DWORD *)(a1 + 1036);
  for (unsigned int i = *a6 + a7; v18 < i; unsigned int i = *a6 + a7)
  {
    v18 *= 2;
    *(_DWORD *)(a1 + 1036) = v18;
  }
  uint64_t v20 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 8) + 8), *a2, 2 * v18);
  if (!v20) {
    return 2229280778;
  }
  *a2 = v20;
  if (*a6 <= a8)
  {
    uint64_t v21 = (void *)(v20 + 2 * *a5);
  }
  else
  {
    memmove((void *)(v20 + 2 * a8 + 2 * a7), (const void *)(v20 + 2 * a8), 2 * (*a6 - a8));
    uint64_t v21 = (void *)(*a2 + 2 * a8);
  }
  bzero(v21, 2 * a7);
  uint64_t result = 0;
  *a5 += a7;
  *a6 += a7;
  if (a4 && a11 == 1)
  {
    uint64_t v23 = a10;
    uint64_t v24 = a4;
    uint64_t v25 = (unsigned int *)(a3 + 12);
    do
    {
      if (v23)
      {
        if (*v25 >= a9) {
          *v25 += a7;
        }
      }
      --v23;
      v25 += 8;
      --v24;
    }
    while (v24);
    return 0;
  }
  return result;
}

uint64_t new_siren_mrcc_synth_Init(uint64_t a1)
{
  uint64_t v2 = ssftstring_CStr(a1);
  uint64_t Name = ruleset_GetName(a1);
  uint64_t v4 = heap_Calloc(*(void **)(v2 + 8), 1, 312);
  if (!v4) {
    return 10;
  }
  uint64_t v5 = v4;
  RccSyn__deinit_Synthesis(v4);
  *(void *)(v5 + 272) = 0;
  if (RccSyn__init_Synthesis(v2, v5, (_DWORD *)(Name + 7688)))
  {
    uint64_t MrccInfo = siren_common_synth_GetMrccInfo(a1);
    if (MrccInfo) {
      RccSyn__deinit_Synthesis(MrccInfo);
    }
  }
  return siren_common_synth_SetMrccInfo(a1, v5);
}

uint64_t new_siren_mrcc_synth_DeInit(uint64_t a1)
{
  uint64_t MrccInfo = siren_common_synth_GetMrccInfo(a1);
  if (MrccInfo) {
    RccSyn__deinit_Synthesis(MrccInfo);
  }
  return 0;
}

uint64_t new_siren_mrcc_synth_Reset(uint64_t a1)
{
  uint64_t v2 = ssftstring_CStr(a1);
  uint64_t Name = ruleset_GetName(a1);
  uint64_t MrccInfo = siren_common_synth_GetMrccInfo(a1);
  if (MrccInfo
    && (uint64_t v5 = MrccInfo,
        RccSyn__deinit_Synthesis(MrccInfo),
        *(void *)(v5 + 8) = Name + 7800,
        *(void *)(v5 + 272) = 0,
        (int inited = RccSyn__init_Synthesis(v2, v5, (_DWORD *)(Name + 7688))) != 0))
  {
    return inited | 0x84E02000;
  }
  else
  {
    return 0;
  }
}

uint64_t new_siren_mrcc_synth_ProcessStart(uint64_t a1)
{
  uint64_t v2 = 2229280778;
  uint64_t MrccInfo = (void *)siren_common_synth_GetMrccInfo(a1);
  uint64_t Name = ruleset_GetName(a1);
  uint64_t v5 = ssftstring_CStr(a1);
  unsigned int FramesCount = siren_common_synth_GetFramesCount(a1);
  if (!a1) {
    return 2229280775;
  }
  unsigned int v7 = FramesCount;
  if (!FramesCount) {
    return 0;
  }
  uint64_t v8 = heap_Alloc(*(void *)(v5 + 8), 4 * FramesCount);
  MrccInfo[36] = v8;
  if (v8)
  {
    uint64_t v9 = heap_Alloc(*(void *)(v5 + 8), 4 * v7);
    MrccInfo[37] = v9;
    if (v9)
    {
      uint64_t v10 = heap_Alloc(*(void *)(v5 + 8), 4 * (v7 + v7 * *(_DWORD *)(Name + 24)));
      MrccInfo[38] = v10;
      if (v10) {
        return 0;
      }
    }
    uint64_t v11 = MrccInfo[36];
    if (v11) {
      heap_Free(*(void **)(v5 + 8), v11);
    }
  }
  uint64_t v12 = MrccInfo[37];
  if (v12) {
    heap_Free(*(void **)(v5 + 8), v12);
  }
  uint64_t v13 = MrccInfo[38];
  if (v13) {
    heap_Free(*(void **)(v5 + 8), v13);
  }
  return v2;
}

uint64_t new_siren_mrcc_synth_Process(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  int RatePct = siren_common_synth_GetRatePct(a1);
  int Size = vector_GetSize(a1);
  unsigned int FramesCount = siren_common_synth_GetFramesCount(a1);
  unsigned int v9 = siren_pipeline_GetiSample(a1);
  uint64_t Position = ssftriff_reader_GetPosition(a1);
  uint64_t v11 = ssftstring_CStr(a1);
  long long __s1 = (void *)siren_common_synth_GetLeftAcousticBuffer(a1);
  uint64_t Name = ruleset_GetName(a1);
  uint64_t Frames = siren_common_synth_GetFrames(a1);
  PcmBuffer = (void *)siren_common_synth_GetPcmBuffer(a1);
  LeftPcmBuffer = (const void *)siren_common_synth_GetLeftPcmBuffer(a1);
  uint64_t result = 7;
  if (a3 < a2 || !a1 || FramesCount <= a2 || FramesCount <= a3) {
    return result;
  }
  uint64_t v88 = 0;
  uint64_t v13 = a3 + 1;
  uint64_t __n = 2 * Position;
  unsigned int v85 = Size * RatePct / 0x64u;
  unint64_t v14 = a2;
  float v15 = 0.0;
  uint64_t v86 = Position;
  float v16 = 0.0;
  float v17 = 0.0;
  unsigned int v82 = v9;
  uint64_t v80 = v11;
  uint64_t v81 = Position;
  uint64_t v79 = v13;
  while (Position)
  {
    if (v9 < Position)
    {
      int Data = 18;
      return Data | 0x84E02000;
    }
    if (!memcmp(__s1, (const void *)(Frames + 4 * (*(_DWORD *)(Name + 9204) * v14)), 4 * *(unsigned int *)(Name + 9204)))
    {
      memcpy(PcmBuffer, LeftPcmBuffer, __n);
      Curunsigned int FrameCount = siren_common_synth_GetCurFrameCount(a1);
      int Data = siren_common_synth_SetCurFrameCount(a1, CurFrameCount + 1);
      if (Data) {
        return Data | 0x84E02000;
      }
      int CurSampleCount = siren_common_synth_GetCurSampleCount(a1);
      int Data = siren_common_synth_SetCurSampleCount(a1, CurSampleCount + (int)Position);
      if (Data) {
        return Data | 0x84E02000;
      }
      log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTH_BET6", 3, 0, (uint64_t)"Leftover buffer match current frame (%d samples)", v41, v42, v43, Position);
    }
    else
    {
      log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTH_BET6", 1, 0, (uint64_t)"Disregard leftover buffer for current frame (%d samples)", v18, v19, v20, v86);
    }
    int Data = siren_common_synth_SetLeftSamplesCount(a1, 0);
    if (Data) {
      return Data | 0x84E02000;
    }
LABEL_49:
    if (++v14 == v13) {
      return 0;
    }
  }
  if (siren_common_synth_GetCurSampleCount(a1) + v85 <= v9)
  {
    unsigned int v21 = siren_common_synth_GetFramesCount(a1);
    uint64_t v22 = ruleset_GetName(a1);
    uint64_t v23 = siren_common_synth_GetFrames(a1);
    if (v14 < v21)
    {
      uint64_t v24 = v23 + 4 * (*(_DWORD *)(v22 + 9204) * v14);
      int v25 = *(_DWORD *)(v22 + 24);
      float v17 = *(float *)(v24 + 4 * (v25 + 1));
      float v16 = *(float *)(v24 + 4 * (v25 + 2));
      uint64_t v88 = (float *)v24;
      float v15 = *(float *)(v24 + 4 * (v25 + 3));
    }
    uint64_t MrccInfo = siren_common_synth_GetMrccInfo(a1);
    uint64_t v27 = ruleset_GetName(a1);
    int v28 = *(_DWORD *)(MrccInfo + 276);
    int v29 = *(_DWORD *)(v27 + 24);
    if (v15 <= 0.5)
    {
      int v31 = 0;
    }
    else
    {
      *(_WORD *)uint64_t v97 = 0;
      unsigned int v30 = exp_S7_25_0(2 * vcvts_n_s32_f32(v17, 0x18uLL), v97);
      int v31 = (int)((v30 >> (24 - v97[0])) * *(_DWORD *)(MrccInfo + 280)) / 100;
      unsigned int v32 = exp_S7_25_0(2 * vcvts_n_s32_f32(v16 * 1.25, 0x18uLL), v97);
      uint64_t v33 = *(_DWORD **)(MrccInfo + 8);
      if (!v33) {
        goto LABEL_26;
      }
      signed int v34 = v32 >> ~*(__int16 *)v97;
      if (v34)
      {
        int v35 = v33[1];
        BOOL v36 = __OFSUB__(v34, v35);
        int v37 = v34 - v35;
        if (v37 < 0 != v36)
        {
          LODWORD(v33) = v33[3];
        }
        else if (v33[2] >= v34)
        {
          LODWORD(v33) = v33[3] + *v33 * v37;
        }
        else
        {
          LODWORD(v33) = v33[4];
        }
LABEL_26:
        uint64_t v44 = (v29 + 1);
        uint64_t v45 = *(void *)(MrccInfo + 304);
        if (v28)
        {
          if ((v29 & 0x80000000) == 0)
          {
            uint64_t v46 = (_DWORD *)(v45 + 4 * (v14 * v44));
            uint64_t v47 = v88;
            do
            {
              float v48 = *v47++;
              *v46++ = vcvts_n_s32_f32(v48, 0x18uLL);
              --v44;
            }
            while (v44);
          }
        }
        else if ((v29 & 0x80000000) == 0)
        {
          uint64_t v49 = (unsigned int *)(v45 + 4 * (v14 * v44));
          uint64_t v50 = v88;
          do
          {
            float v51 = *v50++;
            int v52 = vcvts_n_s32_f32(v51, 0x18uLL);
            BOOL v53 = v52 < 0;
            if (v52 < 0) {
              int v52 = -v52;
            }
            unsigned int v54 = v52 + 14506 * (v52 >> 15) + ((14506 * (v52 & 0x7FFFu) + 0x4000) >> 15);
            if (v53) {
              unsigned int v54 = -v54;
            }
            *v49++ = v54;
            --v44;
          }
          while (v44);
        }
        *(_DWORD *)(*(void *)(MrccInfo + 288) + 4 * v14) = v31;
        *(_DWORD *)(*(void *)(MrccInfo + 296) + 4 * v14) = v33;
        __src = 0;
        unsigned int v95 = 0;
        unsigned int v55 = siren_common_synth_GetCurSampleCount(a1);
        unsigned int v56 = siren_pipeline_GetiSample(a1);
        int v91 = siren_common_synth_GetRatePct(a1);
        int VolumeLevel = siren_common_synth_GetVolumeLevel(a1);
        uint64_t v57 = ruleset_GetName(a1);
        uint64_t v58 = siren_common_synth_GetMrccInfo(a1);
        uint64_t v59 = siren_common_synth_GetPcmBuffer(a1);
        __dst = (void *)siren_common_synth_GetLeftAcousticBuffer(a1);
        uint64_t v60 = (void *)siren_common_synth_GetLeftPcmBuffer(a1);
        uint64_t v61 = siren_common_synth_GetFrames(a1);
        uint64_t v89 = ssftstring_CStr(a1);
        unsigned int v62 = *(_DWORD *)(v57 + 24) + 1;
        *(void *)(v58 + 88) = 0xFFFFFFFFLL;
        uint64_t v63 = *(void *)(v58 + 288);
        int v64 = *(_DWORD *)(*(void *)(v58 + 296) + 4 * v14);
        *(_DWORD *)(v58 + 72) = 0;
        *(_DWORD *)(v58 + 76) = v64;
        *(_DWORD *)(v58 + 80) = (42949673 * (unint64_t)(v91 << 10)) >> 32;
        *(_DWORD *)(v58 + 68) = *(_DWORD *)(v63 + 4 * v14);
        int Data = MrccInput_AllocateData(v58 + 48, v62);
        if (Data) {
          return Data | 0x84E02000;
        }
        memcpy(*(void **)(v58 + 56), (const void *)(*(void *)(v58 + 304) + 4 * v62 * v14), 4 * v62);
        int Data = RccSyn__SynthesisOneFrame(v58, &v95, &__src);
        if (Data) {
          return Data | 0x84E02000;
        }
        RrInput_Reset(v58 + 160);
        uint64_t v65 = v95;
        if (v95 + v55 <= v56)
        {
          int v72 = (void *)(v59 + 2 * v55);
          memcpy(v72, __src, 2 * v95);
          vol_ScaleToLevel((__int16 *)v72, v65, VolumeLevel);
          int v73 = siren_common_synth_GetCurFrameCount(a1);
          int Data = siren_common_synth_SetCurFrameCount(a1, v73 + 1);
          if (Data) {
            return Data | 0x84E02000;
          }
          int v74 = siren_common_synth_GetCurSampleCount(a1);
          int Data = siren_common_synth_SetCurSampleCount(a1, v95 + v74);
          uint64_t v66 = v89;
          if (Data) {
            return Data | 0x84E02000;
          }
        }
        else
        {
          memcpy(__dst, (const void *)(v61 + 4 * (*(_DWORD *)(v57 + 9204) * v14)), 4 * *(unsigned int *)(v57 + 9204));
          memcpy(v60, __src, 2 * v65);
          vol_ScaleToLevel((__int16 *)v60, v65, VolumeLevel);
          int Data = siren_common_synth_SetIsBufferFull(a1, 1u);
          if (Data) {
            return Data | 0x84E02000;
          }
          int Data = siren_common_synth_SetLeftSamplesCount(a1, v95);
          if (Data) {
            return Data | 0x84E02000;
          }
          uint64_t v66 = v89;
          uint64_t v67 = *(void *)(v89 + 32);
          uint64_t v68 = ssftriff_reader_GetPosition(a1);
          log_OutText(v67, (uint64_t)"SYNTH_BET6", 3, 0, (uint64_t)"New leftover buffer for current frame (%d samples)", v69, v70, v71, v68);
        }
        if (log_GetLogLevel(*(void *)(v66 + 32)) >= 3)
        {
          siren_compute_stream_hash((char *)__src, 2 * v95, v97);
          log_OutText(*(void *)(v66 + 32), (uint64_t)"SYNTH_BET6", 3, 0, (uint64_t)"SYNTH_PCM_BUFFER_MD5=%s", v75, v76, v77, (uint64_t)v97);
        }
        unsigned int v9 = v82;
        uint64_t v11 = v80;
        uint64_t Position = v81;
        uint64_t v13 = v79;
        if (siren_common_synth_GetIsBufferFull(a1)) {
          return 0;
        }
        goto LABEL_49;
      }
    }
    LODWORD(v33) = 0;
    goto LABEL_26;
  }
  int Data = siren_common_synth_SetIsBufferFull(a1, 1u);
  if (Data) {
    return Data | 0x84E02000;
  }
  return 0;
}

uint64_t new_siren_mrcc_synth_ProcessEnd(uint64_t a1)
{
  uint64_t v2 = ssftstring_CStr(a1);
  uint64_t MrccInfo = siren_common_synth_GetMrccInfo(a1);
  if (MrccInfo)
  {
    uint64_t v4 = (void *)MrccInfo;
    uint64_t v5 = *(void *)(MrccInfo + 288);
    if (v5)
    {
      heap_Free(*(void **)(v2 + 8), v5);
      v4[36] = 0;
    }
    uint64_t v6 = v4[37];
    if (v6)
    {
      heap_Free(*(void **)(v2 + 8), v6);
      v4[37] = 0;
    }
    uint64_t v7 = v4[38];
    if (v7)
    {
      heap_Free(*(void **)(v2 + 8), v7);
      v4[38] = 0;
    }
  }
  return 0;
}

uint64_t new_siren_mrcc_synth_SetPitch(uint64_t a1, unsigned int a2)
{
  uint64_t MrccInfo = siren_common_synth_GetMrccInfo(a1);
  uint64_t result = 2229280786;
  if (a2 <= 0xC8)
  {
    if (MrccInfo)
    {
      uint64_t result = 0;
      *(_DWORD *)(MrccInfo + 280) = a2;
    }
  }
  return result;
}

uint64_t exp_S7_25_0(int a1, _WORD *a2)
{
  int v2 = a1 >> 10;
  uint64_t result = 0x40000000;
  int v4 = 1;
  for (uint64_t i = 10; i != 32; ++i)
  {
    if (v2)
    {
      uint64_t result = (exp_mantissa_lut_0[i] * (((int)result + 0x4000) >> 15));
      v4 += exp_scale_lut_0[i];
      if ((int)result <= 1073733631)
      {
        uint64_t result = (2 * result);
        --v4;
      }
    }
    v2 >>= 1;
  }
  if ((int)result <= 0x3FFFFFFF)
  {
    do
    {
      uint64_t result = (2 * result);
      LOWORD(v4) = v4 - 1;
    }
    while ((int)result < 0x40000000);
  }
  *a2 = v4;
  return result;
}

uint64_t new_siren_nn_mt_synth_Init(void *a1)
{
  uint64_t v2 = ssftstring_CStr((uint64_t)a1);
  uint64_t Name = ruleset_GetName((uint64_t)a1);
  uint64_t v4 = *(unsigned int *)(Name + 9168);
  uint64_t v5 = heap_Calloc(*(void **)(v2 + 8), 1, 64);
  if (!v5) {
    return 10;
  }
  uint64_t v6 = v5;
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(Name + 9188);
  *(_DWORD *)(v5 + 40) = v4;
  uint64_t v7 = heap_Calloc(*(void **)(v2 + 8), v4, 8);
  *(void *)(v6 + 16) = v7;
  if (!v7) {
    return 10;
  }
  uint64_t v8 = heap_Calloc(*(void **)(v2 + 8), v4, 8);
  if (!v8) {
    return 10;
  }
  uint64_t v9 = v8;
  uint64_t v10 = siren_common_synth_SetLeftFrames((uint64_t)a1, 0);
  if (v10) {
    return v10;
  }
  uint64_t v10 = siren_common_synth_SetUsedLeftFrames((uint64_t)a1, 0);
  if (v10) {
    return v10;
  }
  uint64_t v10 = siren_common_synth_SetLeftSamples((uint64_t)a1, 0);
  if (v10) {
    return v10;
  }
  uint64_t v10 = siren_common_synth_SetUsedLeftSamples((uint64_t)a1, 0);
  if (v10) {
    return v10;
  }
  uint64_t v11 = fi_rsc_create((void *)v2, (void *)v6);
  if (v11)
  {
    uint64_t v10 = v11;
    siren_log_Error(v2, (uint64_t)"NNVocoder Model FI Resource creation failed: %d");
    return v10;
  }
  if (!v4)
  {
LABEL_14:
    *(void *)(v6 + 48) = v9;
    uint64_t v15 = heap_Calloc(*(void **)(v2 + 8), 1, 56);
    *(void *)(v6 + 56) = v15;
    if (v15)
    {
      uint64_t v16 = heap_Calloc(*(void **)(v2 + 8), 1, 2 * *(unsigned int *)(v6 + 24));
      *(void *)(*(void *)(v6 + 56) + 8) = v16;
      if (v16)
      {
        uint64_t v17 = heap_Calloc(*(void **)(v2 + 8), 1, 2 * *(unsigned int *)(v6 + 24));
        **(void **)(v6 + 56) = v17;
        if (v17)
        {
          uint64_t v18 = heap_Calloc(*(void **)(v2 + 8), (*(_DWORD *)(Name + 9200) + 2 * *(_DWORD *)(Name + 9188) + 110), 4);
          uint64_t v19 = *(void *)(v6 + 56);
          *(void *)(v19 + 16) = v18;
          if (v18)
          {
            int v20 = *(_DWORD *)(Name + 9188);
            *(void *)(v19 + 40) = *(void *)(Name + 9192);
            *(_DWORD *)(v19 + 48) = *(_DWORD *)(Name + 9200);
            *(int32x2_t *)&long long v21 = vrev64_s32(*(int32x2_t *)(Name + 9168));
            DWORD2(v21) = v20;
            HIDWORD(v21) = v20;
            *(_OWORD *)(v19 + 24) = v21;
            uint64_t v10 = siren_common_synth_SetNnInfo(a1, v6);
            if (v10) {
              new_siren_nn_mt_synth_DeInit((uint64_t)a1);
            }
            return v10;
          }
        }
      }
    }
    return 10;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * v4;
  while (1)
  {
    uint64_t v14 = parse_fi_binary_model(*(uint64_t **)v6, *(void *)(Name + 8056), (void *)(*(void *)(v6 + 16) + v12));
    if (v14) {
      break;
    }
    v12 += 8;
    if (v13 == v12) {
      goto LABEL_14;
    }
  }
  uint64_t v10 = v14;
  siren_log_Error(v2, (uint64_t)"NNVocoder Model FI binary model parsing failed: %d");
  return v10;
}

uint64_t new_siren_nn_mt_synth_DeInit(uint64_t a1)
{
  uint64_t NnInfo = siren_common_synth_GetNnInfo(a1);
  uint64_t Name = ruleset_GetName(a1);
  uint64_t v4 = ssftstring_CStr(a1);
  if (!NnInfo) {
    return 7;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned int *)(Name + 9168);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(NnInfo + 16) + v7);
      if (v9) {
        fi_net_destroy(v9);
      }
      v7 += 8;
    }
    while (v8 != v7);
  }
  heap_Free(*(void **)(v5 + 8), *(void *)(NnInfo + 16));
  heap_Free(*(void **)(v5 + 8), *(void *)(NnInfo + 48));
  if (*(void *)NnInfo)
  {
    fi_rsc_destroy(*(void **)NnInfo);
    *(void *)uint64_t NnInfo = 0;
  }
  uint64_t v10 = *(uint64_t **)(NnInfo + 56);
  if (!v10) {
    return 0;
  }
  if (*v10)
  {
    heap_Free(*(void **)(v5 + 8), *v10);
    uint64_t v10 = *(uint64_t **)(NnInfo + 56);
  }
  if (v10[1])
  {
    heap_Free(*(void **)(v5 + 8), v10[1]);
    uint64_t v10 = *(uint64_t **)(NnInfo + 56);
  }
  if (v10[2])
  {
    heap_Free(*(void **)(v5 + 8), v10[2]);
    uint64_t v10 = *(uint64_t **)(NnInfo + 56);
  }
  heap_Free(*(void **)(v5 + 8), (uint64_t)v10);
  uint64_t result = 0;
  *(void *)(NnInfo + 56) = 0;
  return result;
}

uint64_t new_siren_nn_synth_Init(void *a1)
{
  uint64_t v2 = ssftstring_CStr((uint64_t)a1);
  uint64_t Name = ruleset_GetName((uint64_t)a1);
  uint64_t v10 = 0;
  uint64_t v4 = (void *)heap_Calloc(*(void **)(v2 + 8), 1, 64);
  if (!v4)
  {
    uint64_t v7 = 10;
    goto LABEL_8;
  }
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = fi_rsc_create((void *)v2, v4);
  if (v6)
  {
    uint64_t v7 = v6;
    siren_log_Error(v2, (uint64_t)"NNVocoder Model FI Resource creation failed: %d");
LABEL_8:
    new_siren_nn_synth_DeInit((uint64_t)a1);
    return v7;
  }
  uint64_t v8 = parse_fi_binary_model(*(uint64_t **)v5, *(void *)(Name + 8056), &v10);
  if (v8)
  {
    uint64_t v7 = v8;
    siren_log_Error(v2, (uint64_t)"NNVocoder Model FI binary model parsing failed: %d");
    goto LABEL_8;
  }
  *(void *)(v5 + 8) = v10;
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(Name + 9188);
  uint64_t v7 = siren_common_synth_SetNnInfo(a1, v5);
  if (v7) {
    goto LABEL_8;
  }
  return v7;
}

uint64_t new_siren_nn_synth_DeInit(uint64_t a1)
{
  uint64_t NnInfo = siren_common_synth_GetNnInfo(a1);
  if (NnInfo)
  {
    uint64_t v2 = NnInfo;
    uint64_t v3 = *(void *)(NnInfo + 8);
    if (v3)
    {
      fi_net_destroy(v3);
      *(void *)(v2 + 8) = 0;
    }
    if (*(void *)v2)
    {
      fi_rsc_destroy(*(void **)v2);
      *(void *)uint64_t v2 = 0;
    }
  }
  return 0;
}

uint64_t new_siren_nn_mt_synth_Reset(uint64_t a1)
{
  uint64_t NnInfo = siren_common_synth_GetNnInfo(a1);
  uint64_t v2 = *(unsigned int *)(NnInfo + 40);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = NnInfo;
  uint64_t v4 = 0;
  uint64_t v5 = 8 * v2;
  while (1)
  {
    int v6 = fi_net_reset(*(void *)(*(void *)(v3 + 16) + v4));
    if (v6) {
      break;
    }
    v4 += 8;
    if (v5 == v4) {
      return 0;
    }
  }
  return v6 | 0x84E02000;
}

uint64_t new_siren_nn_synth_Reset(uint64_t a1)
{
  uint64_t NnInfo = siren_common_synth_GetNnInfo(a1);
  int v2 = fi_net_reset(*(void *)(NnInfo + 8));
  if (v2) {
    return v2 | 0x84E02000;
  }
  else {
    return 0;
  }
}

uint64_t new_siren_nn_mt_synth_ProcessStart(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ssftstring_CStr(a1);
  uint64_t Name = ruleset_GetName(a1);
  uint64_t NnInfo = siren_common_synth_GetNnInfo(a1);
  unsigned int RatePct = siren_common_synth_GetRatePct(a1);
  *(void *)(NnInfo + 32) = a2;
  float v8 = (float)((float)RatePct / 100.0) * (float)vector_GetSize(a1);
  *(_DWORD *)(NnInfo + 24) = v8;
  uint64_t v9 = *(void *)(NnInfo + 56);
  *(_DWORD *)(v9 + 32) = v8;
  if (*(_DWORD *)(v9 + 36) >= v8) {
    return 0;
  }
  uint64_t v10 = heap_Realloc(*(uint64_t **)(v4 + 8), *(void *)(v9 + 8), 2 * v8);
  if (!v10) {
    return 10;
  }
  uint64_t v11 = *(uint64_t **)(NnInfo + 56);
  v11[1] = v10;
  uint64_t v12 = heap_Realloc(*(uint64_t **)(v4 + 8), *v11, 2 * *(unsigned int *)(NnInfo + 24));
  if (!v12) {
    return 10;
  }
  uint64_t v13 = *(uint64_t **)(NnInfo + 56);
  *uint64_t v13 = v12;
  uint64_t v14 = heap_Realloc(*(uint64_t **)(v4 + 8), v13[2], 4 * (*(_DWORD *)(Name + 9200) + 2 * *(_DWORD *)(NnInfo + 24) + 110));
  if (!v14) {
    return 10;
  }
  uint64_t v15 = v14;
  uint64_t result = 0;
  *(void *)(*(void *)(NnInfo + 56) + 16) = v15;
  return result;
}

uint64_t new_siren_nn_mt_synth_Process(uint64_t a1)
{
  uint64_t Name = ruleset_GetName(a1);
  uint64_t PcmBuffer = siren_common_synth_GetPcmBuffer(a1);
  Leftuint64_t PcmBuffer = siren_common_synth_GetLeftPcmBuffer(a1);
  uint64_t v5 = ssftstring_CStr(a1);
  int v6 = -2065686521;
  if (!PcmBuffer || !LeftPcmBuffer) {
    return v6 | 0x84E02000;
  }
  uint64_t v7 = *(unsigned int *)(Name + 9168);
  int LeftSamples = siren_common_synth_GetLeftSamples(a1);
  uint64_t NnInfo = siren_common_synth_GetNnInfo(a1);
  if (!LeftSamples)
  {
    uint64_t v149 = v5;
    uint64_t v22 = ruleset_GetName(a1);
    uint64_t v23 = ssftstring_CStr(a1);
    uint64_t v24 = *(void *)(NnInfo + 32);
    uint64_t Frames = siren_common_synth_GetFrames(a1);
    uint64_t v26 = *(unsigned int *)(v22 + 9168);
    uint64_t v150 = heap_Calloc(*(void **)(v23 + 8), v26, 48);
    if (!v150)
    {
      uint64_t v36 = 0;
      siren_log_Error(v23, (uint64_t)"memory allocation error.");
      int v92 = 10;
      goto LABEL_117;
    }
    if (v26)
    {
      uint64_t v27 = 0;
      v151[0] = 0;
      int v28 = (int *)(v150 + 16);
      while (1)
      {
        ThreadChunkunsigned int Index = SampleChunk_getThreadChunkIndex(v24, v27, (_DWORD *)v151 + 1, v151);
        if (ThreadChunkIndex) {
          break;
        }
        ThreadChunkunsigned int Index = fi_net_update_param(*(void *)(*(void *)(NnInfo + 16) + 8 * v27));
        if (ThreadChunkIndex) {
          break;
        }
        uint64_t v30 = Frames + 4 * (*(_DWORD *)(v22 + 9204) * HIDWORD(v151[0]));
        int v31 = LODWORD(v151[0]) - HIDWORD(v151[0]) + 1;
        *((void *)v28 - 2) = *(void *)(*(void *)(NnInfo + 16) + 8 * v27);
        *((void *)v28 - 1) = v30;
        *int v28 = v31;
        v28 += 12;
        if (v26 == ++v27) {
          goto LABEL_20;
        }
      }
      int v92 = ThreadChunkIndex;
      uint64_t v36 = v150;
LABEL_117:
      if (!v36) {
        goto LABEL_124;
      }
LABEL_118:
      if (v7)
      {
        uint64_t v119 = (uint64_t *)(v150 + 32);
        do
        {
          if (*v119) {
            heap_Free(*(void **)(v149 + 8), *v119);
          }
          v119 += 6;
          --v7;
        }
        while (v7);
      }
      heap_Free(*(void **)(v149 + 8), v150);
      goto LABEL_124;
    }
LABEL_20:
    uint64_t v32 = siren_common_synth_GetNnInfo(a1);
    uint64_t v33 = ruleset_GetName(a1);
    uint64_t v34 = ssftstring_CStr(a1);
    uint64_t v35 = *(unsigned int *)(v33 + 9168);
    uint64_t v36 = v150;
    if (v35)
    {
      uint64_t v37 = v34;
      uint64_t v38 = 0;
      uint64_t v39 = 8 * v35;
      while (1)
      {
        int v40 = thread_ObjOpen(*(void *)(v37 + 400), *(void **)(v37 + 8), (uint64_t *)(*(void *)(v32 + 48) + v38));
        if (v40) {
          break;
        }
        v38 += 8;
        if (v39 == v38)
        {
          uint64_t v41 = 0;
          uint64_t v42 = "thread start failed.";
          uint64_t v43 = v150;
          while (1)
          {
            int v44 = thread_Start(*(void **)(*(void *)(v32 + 48) + v41));
            if (v44) {
              break;
            }
            v41 += 8;
            v43 += 48;
            if (v39 == v41)
            {
              uint64_t v45 = 0;
              uint64_t v42 = "thread join failed.";
              while (1)
              {
                int v44 = thread_Join(*(void **)(*(void *)(v32 + 48) + v45));
                if (v44) {
                  goto LABEL_95;
                }
                v45 += 8;
                if (v39 == v45)
                {
                  uint64_t v46 = 0;
                  while (1)
                  {
                    uint64_t v47 = *(void *)(*(void *)(v32 + 48) + v46);
                    if (v47)
                    {
                      int v40 = thread_ObjClose(v47);
                      if (v40) {
                        goto LABEL_116;
                      }
                    }
                    v46 += 8;
                    if (v39 == v46) {
                      goto LABEL_34;
                    }
                  }
                }
              }
            }
          }
LABEL_95:
          int v92 = v44;
          siren_log_Error(v37, (uint64_t)v42);
          goto LABEL_117;
        }
      }
LABEL_116:
      int v92 = v40;
      goto LABEL_117;
    }
LABEL_34:
    uint64_t v48 = ruleset_GetName(a1);
    uint64_t v49 = siren_common_synth_GetNnInfo(a1);
    uint64_t v50 = *(void *)(v49 + 32);
    uint64_t v51 = ssftstring_CStr(a1);
    uint64_t v52 = *(unsigned int *)(v48 + 9168);
    if (v52)
    {
      uint64_t v135 = v51;
      uint64_t v136 = (void *)v49;
      LODWORD(v53) = 0;
      uint64_t v54 = *(unsigned int *)(v49 + 24);
      unsigned int v55 = (int *)(v150 + 16);
      do
      {
        int v56 = *v55;
        v55 += 12;
        if (v56 <= 0) {
          uint64_t v53 = v53;
        }
        else {
          uint64_t v53 = (v53 + 1);
        }
        --v52;
      }
      while (v52);
      HIDWORD(v151[0]) = 0;
      SampleChunk_getEmissionType(v50, (float *)v151 + 1);
      if (v53)
      {
        for (uint64_t i = 0; i != v53; ++i)
        {
          uint64_t v58 = v150 + 48 * i;
          int v60 = *(_DWORD *)(v58 + 16);
          uint64_t v59 = v58 + 16;
          uint64_t v61 = (_WORD *)heap_Calloc(*(void **)(v135 + 8), (v60 + 1), 2 * v54);
          *(void *)(v59 + 8) = v61;
          if (!v61)
          {
            int v92 = 10;
            goto LABEL_118;
          }
          *(void *)(v150 + 48 * i + 32) = v61;
          uint64_t v62 = (*(_DWORD *)v59 * v54);
          if (v62)
          {
            uint64_t v63 = *(float **)(v150 + 48 * i + 40);
            if (!v63)
            {
              int v92 = 7;
              goto LABEL_118;
            }
            do
            {
              float v64 = *v63++;
              *v61++ = (int)v64;
              --v62;
            }
            while (v62);
          }
        }
        uint64_t v65 = 0;
        uint64_t v133 = (v53 - 1);
        while (1)
        {
          float v66 = *((float *)v151 + 1);
          if (*((float *)v151 + 1) == 0.0)
          {
            if (v65) {
              float v66 = 1.0;
            }
            else {
              float v66 = 0.0;
            }
          }
          else if (*((float *)v151 + 1) == 2.0)
          {
            if (v65 == v133) {
              float v66 = 2.0;
            }
            else {
              float v66 = 1.0;
            }
          }
          else if (*((float *)v151 + 1) == 4.0)
          {
            float v66 = v65 == v133 ? 2.0 : 1.0;
            if (!v65) {
              float v66 = 0.0;
            }
          }
          unsigned int v67 = v66;
          if (v66 == 4) {
            goto LABEL_84;
          }
          uint64_t v68 = v136[7];
          int v69 = *(_DWORD *)(v68 + 24);
          uint64_t v70 = *(unsigned int *)(v68 + 32);
          uint64_t v71 = *(void **)(v68 + 8);
          __dst = *(void **)v68;
          if (v67 == 2)
          {
            unsigned int v75 = 0;
            uint64_t v76 = v36 + 48 * v65;
            uint64_t v77 = (__int16 *)(*(void *)(v76 + 24) + 2 * (v70 * v69));
            unsigned int v78 = (*(_DWORD *)(v76 + 16) - v69) * v70;
            goto LABEL_68;
          }
          if (v67) {
            break;
          }
          uint64_t v72 = v36 + 48 * v65;
          uint64_t v73 = *(void *)(v72 + 24);
          unsigned int v74 = (*(_DWORD *)(v72 + 16) + ~v69) * v70;
          memcpy(v71, (const void *)(v73 + 2 * v74), 2 * v70);
          *(void *)(v72 + 24) = v73;
          *(_DWORD *)(v72 + 20) = v74;
          *(_DWORD *)(v68 + 36) = *(_DWORD *)(v68 + 32);
LABEL_84:
          if (++v65 == v53) {
            goto LABEL_97;
          }
        }
        uint64_t v79 = v36 + 48 * v65;
        uint64_t v77 = (__int16 *)(*(void *)(v79 + 24) + 2 * (v70 * v69));
        unsigned int v75 = (*(_DWORD *)(v79 + 16) + ~(2 * v69)) * v70;
        unsigned int v78 = v75;
LABEL_68:
        unsigned int v145 = v78;
        uint64_t v147 = *(unsigned int *)(v68 + 36);
        __src = *(void **)(v68 + 8);
        if (v70 >= 0x37)
        {
          unsigned int v139 = v75;
          uint64_t v81 = (uint64_t)v71 + 2 * (*(_DWORD *)(v68 + 36) - 55);
          uint64_t v82 = *(void *)(v68 + 16);
          bet6_synth_Apply_Half_hannWin_Scalar_55(v81, 1);
          bet6_synth_Apply_Half_hannWin_Scalar_55((uint64_t)v77, 0);
          bet6_synth_Convolve_ReverseKernel(v81, 55, (uint64_t)v77, 55, v82);
          uint64_t v83 = 0;
          __int16 v84 = 0;
          signed int v85 = 0x80000000;
          do
          {
            if (*(_DWORD *)(v82 + 216 + 4 * v83) > v85)
            {
              signed int v85 = *(_DWORD *)(v82 + 216 + 4 * v83);
              __int16 v84 = v83;
            }
            ++v83;
          }
          while (v83 != 55);
          unsigned __int16 v80 = 55 - v84;
          unsigned int v86 = (unsigned __int16)(55 - v84);
          if (v86 > 0x37)
          {
            uint64_t v36 = v150;
            unsigned int v75 = v139;
          }
          else
          {
            int v87 = bet6_synth_OverlapAdd((__int16 *)(v81 + 2 * (55 - v80)), v77, v86);
            uint64_t v36 = v150;
            unsigned int v75 = v139;
            if (v87 < 0)
            {
LABEL_83:
              siren_log_Error(v135, (uint64_t)"overlap process failed.");
              goto LABEL_84;
            }
          }
        }
        else
        {
          unsigned __int16 v80 = 0;
        }
        if (v75) {
          memcpy(__dst, &v77[v75], 2 * v70);
        }
        memmove(&v77[v70 - v80], v77, 2 * v145);
        memcpy(v77, __src, 2 * v147);
        if (v75) {
          memcpy(__src, __dst, 2 * v70);
        }
        int v88 = bet6_apply_fir_same_mode((uint64_t)v77, 2 * (int)v70, *(void *)(v68 + 40), *(_DWORD *)(v68 + 48), *(void *)(v68 + 16));
        uint64_t v89 = v36 + 48 * v65;
        *(void *)(v89 + 24) = v77;
        *(_DWORD *)(v89 + 20) = v145 + v147 - v80;
        *(_DWORD *)(v68 + 36) = *(_DWORD *)(v68 + 32);
        if ((v88 & 0x80000000) == 0) {
          goto LABEL_84;
        }
        goto LABEL_83;
      }
    }
    else
    {
      HIDWORD(v151[0]) = 0;
      SampleChunk_getEmissionType(v50, (float *)v151 + 1);
    }
LABEL_97:
    uint64_t v93 = ruleset_GetName(a1);
    uint64_t v94 = siren_common_synth_GetNnInfo(a1);
    __srca = (char *)siren_common_synth_GetPcmBuffer(a1);
    uint64_t v95 = siren_common_synth_GetLeftPcmBuffer(a1);
    uint64_t v96 = ssftstring_CStr(a1);
    uint64_t v97 = *(unsigned int *)(v93 + 9168);
    if (v97)
    {
      unsigned int v98 = 0;
      uint64_t v99 = (int *)(v150 + 16);
      do
      {
        int v100 = *v99;
        v99 += 12;
        if (v100 > 0) {
          ++v98;
        }
        --v97;
      }
      while (v97);
    }
    else
    {
      unsigned int v98 = 0;
    }
    unsigned int v146 = siren_pipeline_GetiSample(a1);
    int __dsta = siren_common_synth_GetVolumeLevel(a1);
    if (v98)
    {
      uint64_t v134 = v96;
      uint64_t v101 = 0;
      int v102 = 0;
      int v103 = 0;
      unsigned int v138 = *(_DWORD *)(v94 + 24);
      uint64_t v137 = (char *)v95;
      uint64_t v104 = 1;
      while (1)
      {
        Curunsigned int FrameCount = siren_common_synth_GetCurFrameCount(a1);
        int CurSampleCount = siren_common_synth_GetCurSampleCount(a1);
        int v107 = CurSampleCount;
        uint64_t v108 = v150 + v101;
        uint64_t v109 = *(int *)(v150 + v101 + 20);
        uint64_t v148 = v104;
        if ((int)v109 + CurSampleCount >= v146) {
          break;
        }
        int v110 = v103;
        unsigned int v111 = &__srca[2 * CurSampleCount];
        memcpy(v111, *(const void **)(v108 + 24), 2 * v109);
        int IsBufferFull = vol_ScaleToLevel((__int16 *)v111, *(_DWORD *)(v108 + 20), __dsta);
        if (IsBufferFull) {
          goto LABEL_143;
        }
        int IsBufferFull = siren_common_synth_SetIsBufferFull(a1, 0);
        if (IsBufferFull) {
          goto LABEL_143;
        }
        int v113 = CurFrameCount;
        uint64_t v114 = v150 + v101;
        uint64_t v115 = v101;
        int v116 = v102;
        uint64_t v117 = v115;
        uint64_t v118 = v150 + v115;
        int IsBufferFull = siren_common_synth_SetCurFrameCount(a1, *(_DWORD *)(v150 + v115 + 16) + v113);
        if (IsBufferFull) {
          goto LABEL_143;
        }
        int IsBufferFull = siren_common_synth_SetCurSampleCount(a1, *(_DWORD *)(v114 + 20) + v107);
        if (IsBufferFull) {
          goto LABEL_143;
        }
        int v103 = *(_DWORD *)(v118 + 16) + v110;
        int v102 = *(_DWORD *)(v114 + 20) + v116;
        uint64_t v104 = v148 + 1;
        uint64_t v101 = v117 + 48;
        if (48 * v98 == v117 + 48) {
          goto LABEL_114;
        }
      }
      uint64_t v120 = *(const void **)(v108 + 24);
      if (v120)
      {
        uint64_t v140 = v150 + v101;
        int v132 = v103;
        uint64_t v121 = v146 - CurSampleCount;
        uint64_t v122 = &__srca[2 * CurSampleCount];
        memcpy(v122, v120, 2 * v121);
        int v92 = vol_ScaleToLevel((__int16 *)v122, v121, __dsta);
        if (!v92)
        {
          int v92 = siren_common_synth_SetCurFrameCount(a1, v121 / v138 + CurFrameCount);
          if (!v92)
          {
            int v92 = siren_common_synth_SetCurSampleCount(a1, v146);
            if (!v92)
            {
              memcpy(v137, (const void *)(*(void *)(v140 + 24) + 2 * v121), 2 * (*(_DWORD *)(v140 + 20) - v121));
              int v92 = vol_ScaleToLevel((__int16 *)v137, *(_DWORD *)(v140 + 20) - (int)v121, __dsta);
              if (!v92)
              {
                int v123 = *(_DWORD *)(v150 + v101 + 16) - v121 / v138;
                unsigned int v124 = *(_DWORD *)(v140 + 20) - v121;
                if (v148 < v98)
                {
                  uint64_t v125 = (const void **)(v140 + 72);
                  int v126 = v98 - v148;
                  while (1)
                  {
                    memcpy(&v137[2 * v124], *v125, 2 * *((int *)v125 - 1));
                    int IsBufferFull = vol_ScaleToLevel((__int16 *)&v137[2 * v124], *((_DWORD *)v125 - 1), __dsta);
                    if (IsBufferFull) {
                      break;
                    }
                    v123 += *((_DWORD *)v125 - 2);
                    v124 += *((_DWORD *)v125 - 1);
                    v125 += 6;
                    if (!--v126) {
                      goto LABEL_138;
                    }
                  }
LABEL_143:
                  int v92 = IsBufferFull;
                  goto LABEL_118;
                }
LABEL_138:
                int v92 = siren_common_synth_SetIsBufferFull(a1, 1u);
                if (!v92)
                {
                  int v92 = siren_common_synth_SetLeftSamples(a1, v124);
                  if (!v92)
                  {
                    int v92 = siren_common_synth_SetLeftFrames(a1, v123);
                    if (!v92)
                    {
                      int v92 = siren_common_synth_SetUsedLeftFrames(a1, 0);
                      if (!v92)
                      {
                        int v103 = v121 / v138 + v132;
                        v102 += v121;
                        siren_common_synth_SetUsedLeftSamples(a1, 0);
                        uint64_t v127 = *(void *)(v134 + 32);
                        Leftuint64_t Frames = siren_common_synth_GetLeftFrames(a1);
                        log_OutText(v127, (uint64_t)"SYNTH_BET6", 3, 0, (uint64_t)"New leftover buffer for current frame (%d samples)", v129, v130, v131, LeftFrames);
                        goto LABEL_114;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        int v92 = -2065686522;
      }
      goto LABEL_118;
    }
    int v103 = 0;
    int v102 = 0;
LABEL_114:
    int v92 = siren_common_synth_SetFeedFrames(a1, v103);
    uint64_t v36 = v150;
    if (v92) {
      goto LABEL_117;
    }
    int v40 = siren_common_synth_SetFeedFrames(a1, v102);
    goto LABEL_116;
  }
  unsigned int v10 = siren_common_synth_GetCurSampleCount(a1);
  int v11 = siren_common_synth_GetCurFrameCount(a1);
  UsedLeftuint64_t Frames = siren_common_synth_GetUsedLeftFrames(a1);
  int v13 = siren_common_synth_GetLeftFrames(a1);
  Usedint LeftSamples = siren_common_synth_GetUsedLeftSamples(a1);
  unsigned int v15 = *(_DWORD *)(NnInfo + 24);
  int v16 = siren_common_synth_GetLeftSamples(a1);
  unsigned int v17 = siren_pipeline_GetiSample(a1);
  uint64_t v18 = siren_common_synth_GetPcmBuffer(a1);
  uint64_t v19 = siren_common_synth_GetLeftPcmBuffer(a1);
  unsigned int v20 = v16 - UsedLeftSamples;
  if (v20 >= v17)
  {
    unsigned int v90 = v17 - v10;
    memcpy((void *)(v18 + 2 * v10), (const void *)(v19 + 2 * UsedLeftSamples), 2 * (v17 - v10));
    int v6 = siren_common_synth_SetCurSampleCount(a1, v17);
    if (!v6)
    {
      int v6 = siren_common_synth_SetCurFrameCount(a1, v90 / v15 + v11);
      if (!v6)
      {
        int v6 = siren_common_synth_SetFeedFrames(a1, v90 / v15);
        if (!v6)
        {
          int v6 = siren_common_synth_SetUsedLeftFrames(a1, v90 / v15 + UsedLeftFrames);
          if (!v6)
          {
            int v6 = siren_common_synth_SetFeedSamples(a1, v90 / v15);
            if (!v6)
            {
              int v6 = siren_common_synth_SetUsedLeftSamples(a1, v90 + UsedLeftSamples);
              if (!v6)
              {
                unsigned int v21 = 1;
                goto LABEL_146;
              }
            }
          }
        }
      }
    }
    return v6 | 0x84E02000;
  }
  memcpy((void *)(v18 + 2 * v10), (const void *)(v19 + 2 * UsedLeftSamples), 2 * v20);
  int v6 = siren_common_synth_SetCurSampleCount(a1, v20 + v10);
  if (v6) {
    return v6 | 0x84E02000;
  }
  int v6 = siren_common_synth_SetCurFrameCount(a1, v11 - UsedLeftFrames + v13);
  if (v6) {
    return v6 | 0x84E02000;
  }
  int v6 = siren_common_synth_SetFeedFrames(a1, v13 - UsedLeftFrames);
  if (v6) {
    return v6 | 0x84E02000;
  }
  int v6 = siren_common_synth_SetFeedSamples(a1, v20);
  if (v6) {
    return v6 | 0x84E02000;
  }
  int v6 = siren_common_synth_SetLeftFrames(a1, 0);
  if (v6) {
    return v6 | 0x84E02000;
  }
  int v6 = siren_common_synth_SetUsedLeftFrames(a1, 0);
  if (v6) {
    return v6 | 0x84E02000;
  }
  int v6 = siren_common_synth_SetLeftSamples(a1, 0);
  if (v6) {
    return v6 | 0x84E02000;
  }
  int v6 = siren_common_synth_SetUsedLeftSamples(a1, 0);
  if (v6) {
    return v6 | 0x84E02000;
  }
  unsigned int v21 = 0;
LABEL_146:
  int v92 = siren_common_synth_SetIsBufferFull(a1, v21);
LABEL_124:
  if (v92) {
    return v92 | 0x84E02000;
  }
  else {
    return 0;
  }
}

uint64_t new_siren_nn_synth_Process(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t Position = ssftriff_reader_GetPosition(a1);
  unsigned int v7 = siren_pipeline_GetiSample(a1);
  unsigned int FramesCount = siren_common_synth_GetFramesCount(a1);
  unsigned int RatePct = siren_common_synth_GetRatePct(a1);
  LeftAcousticBuffer = (const void *)siren_common_synth_GetLeftAcousticBuffer(a1);
  uint64_t Frames = siren_common_synth_GetFrames(a1);
  uint64_t Name = ruleset_GetName(a1);
  uint64_t PcmBuffer = (void *)siren_common_synth_GetPcmBuffer(a1);
  Leftuint64_t PcmBuffer = (const void *)siren_common_synth_GetLeftPcmBuffer(a1);
  uint64_t v69 = ssftstring_CStr(a1);
  unsigned int Size = vector_GetSize(a1);
  uint64_t result = 7;
  if (a3 >= a2 && a1 && FramesCount > a2 && FramesCount > a3)
  {
    uint64_t __n = 2 * Position;
    unsigned int v63 = (float)((float)((float)RatePct / 100.0) * (float)Size);
    uint64_t v64 = Position;
    unsigned int v55 = a3;
    uint64_t v56 = Position;
    uint64_t v57 = LeftAcousticBuffer;
    unsigned int v58 = v7;
    uint64_t v59 = Name;
    uint64_t v60 = Frames;
    if (!Position) {
      goto LABEL_9;
    }
LABEL_6:
    if (v7 < Position)
    {
      int IsBufferFull = 18;
      return IsBufferFull | 0x84E02000;
    }
    if (!memcmp(LeftAcousticBuffer, (const void *)(Frames + 4 * *(_DWORD *)(Name + 9204) * a2), 4 * *(unsigned int *)(Name + 9204)))
    {
      memcpy(PcmBuffer, LeftPcmBuffer, __n);
      Curunsigned int FrameCount = siren_common_synth_GetCurFrameCount(a1);
      int IsBufferFull = siren_common_synth_SetCurFrameCount(a1, CurFrameCount + 1);
      if (IsBufferFull) {
        return IsBufferFull | 0x84E02000;
      }
      int CurSampleCount = siren_common_synth_GetCurSampleCount(a1);
      int IsBufferFull = siren_common_synth_SetCurSampleCount(a1, CurSampleCount + (int)Position);
      if (IsBufferFull) {
        return IsBufferFull | 0x84E02000;
      }
      log_OutText(*(void *)(v69 + 32), (uint64_t)"SYNTH_BET6", 3, 0, (uint64_t)"Leftover buffer match current frame (%d samples)", v44, v45, v46, Position);
    }
    else
    {
      log_OutText(*(void *)(v69 + 32), (uint64_t)"SYNTH_BET6", 1, 0, (uint64_t)"Disregard leftover buffer for current frame (%d samples)", v15, v16, v17, v64);
    }
    int IsBufferFull = siren_common_synth_SetLeftSamplesCount(a1, 0);
    if (IsBufferFull) {
      return IsBufferFull | 0x84E02000;
    }
    while (a2 != a3)
    {
      ++a2;
      if (Position) {
        goto LABEL_6;
      }
LABEL_9:
      if (siren_common_synth_GetCurSampleCount(a1) + v63 > v7)
      {
        int IsBufferFull = siren_common_synth_SetIsBufferFull(a1, 1u);
        if (IsBufferFull) {
          return IsBufferFull | 0x84E02000;
        }
        return 0;
      }
      unsigned int v70 = a2;
      uint64_t v73 = 0;
      vector_GetSize(a1);
      unsigned int v18 = siren_common_synth_GetRatePct(a1);
      unsigned int v19 = siren_common_synth_GetCurSampleCount(a1);
      int v66 = siren_common_synth_GetCurFrameCount(a1);
      unsigned int v20 = siren_pipeline_GetiSample(a1);
      uint64_t v65 = ssftriff_reader_GetPosition(a1);
      int VolumeLevel = siren_common_synth_GetVolumeLevel(a1);
      uint64_t NnInfo = siren_common_synth_GetNnInfo(a1);
      uint64_t v22 = siren_common_synth_GetFrames(a1);
      uint64_t v23 = ruleset_GetName(a1);
      uint64_t v24 = siren_common_synth_GetPcmBuffer(a1);
      int v25 = (__int16 *)siren_common_synth_GetLeftPcmBuffer(a1);
      uint64_t v67 = ssftstring_CStr(a1);
      uint64_t v26 = (void *)siren_common_synth_GetLeftAcousticBuffer(a1);
      unsigned int v72 = (float)((float)((float)v18 / 100.0) * (float)*(unsigned int *)(NnInfo + 24));
      int IsBufferFull = fi_net_update_param(*(void *)(NnInfo + 8));
      if (IsBufferFull) {
        return IsBufferFull | 0x84E02000;
      }
      uint64_t v71 = v22 + 4 * *(_DWORD *)(v23 + 9204) * v70;
      int IsBufferFull = fi_net_predict_notfree_input(*(uint64_t ***)(NnInfo + 8), (const void **)&v71, 1, &v73, v28, v29, v30, v31);
      if (IsBufferFull) {
        return IsBufferFull | 0x84E02000;
      }
      uint64_t v32 = v72;
      if (v72 + v19 <= v20)
      {
        if (v72)
        {
          uint64_t v47 = v73;
          unsigned int v48 = v19;
          uint64_t v49 = v72;
          do
          {
            float v50 = *v47++;
            *(_WORD *)(v24 + 2 * v48++) = (int)v50;
            --v49;
          }
          while (v49);
        }
        vol_ScaleToLevel((__int16 *)(v24 + 2 * v19), v32, VolumeLevel);
        int IsBufferFull = siren_common_synth_SetCurFrameCount(a1, v66 + 1);
        uint64_t Position = v56;
        uint64_t Name = v59;
        uint64_t Frames = v60;
        if (IsBufferFull) {
          return IsBufferFull | 0x84E02000;
        }
        int IsBufferFull = siren_common_synth_SetCurSampleCount(a1, v72 + v19);
        a2 = v70;
        unsigned int v7 = v58;
        LeftAcousticBuffer = v57;
        uint64_t v41 = v67;
        if (IsBufferFull) {
          return IsBufferFull | 0x84E02000;
        }
      }
      else
      {
        uint64_t v33 = *(unsigned int *)(v23 + 9204);
        a2 = v70;
        memcpy(v26, (const void *)(v22 + 4 * v33 * v70), 4 * v33);
        if (v32)
        {
          uint64_t v34 = v73;
          uint64_t v35 = v25;
          uint64_t v36 = v32;
          do
          {
            float v37 = *v34++;
            *v35++ = (int)v37;
            --v36;
          }
          while (v36);
        }
        vol_ScaleToLevel(v25, v32, VolumeLevel);
        int IsBufferFull = siren_common_synth_SetIsBufferFull(a1, 1u);
        unsigned int v7 = v58;
        LeftAcousticBuffer = v57;
        uint64_t Name = v59;
        uint64_t Frames = v60;
        if (IsBufferFull) {
          return IsBufferFull | 0x84E02000;
        }
        int IsBufferFull = siren_common_synth_SetLeftSamplesCount(a1, v72);
        if (IsBufferFull) {
          return IsBufferFull | 0x84E02000;
        }
        uint64_t v41 = v67;
        log_OutText(*(void *)(v67 + 32), (uint64_t)"SYNTH_BET6", 3, 0, (uint64_t)"New leftover buffer for current frame (%d samples)", v38, v39, v40, v65);
        uint64_t Position = v56;
      }
      if (log_GetLogLevel(*(void *)(v41 + 32)) >= 3)
      {
        siren_compute_stream_hash((char *)v73, 2 * v72, v74);
        log_OutText(*(void *)(v41 + 32), (uint64_t)"SYNTH_BET6", 3, 0, (uint64_t)"SYNTH_PCM_BUFFER_MD5=%s", v51, v52, v53, (uint64_t)v74);
      }
      a3 = v55;
      if (siren_common_synth_GetIsBufferFull(a1)) {
        return 0;
      }
    }
    return 0;
  }
  return result;
}

uint64_t siren_nn_seq2seq_synth_Process(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int FramesCount = siren_common_synth_GetFramesCount(a1);
  uint64_t Name = ruleset_GetName(a1);
  uint64_t result = 2229280775;
  unsigned int v11 = a4 - a3;
  if (a4 >= a3 && a1 && FramesCount > a3 && FramesCount > a4)
  {
    unsigned int v12 = v11 + 1;
    if (*(_DWORD *)(Name + 9124))
    {
      unsigned int v90 = 0;
      int Size = vector_GetSize(a1);
      unsigned int CurSampleCount = siren_common_synth_GetCurSampleCount(a1);
      int v79 = vector_GetSize(a1);
      Curunsigned int FrameCount = siren_common_synth_GetCurFrameCount(a1);
      unsigned int v83 = siren_pipeline_GetiSample(a1);
      uint64_t NnInfo = siren_common_synth_GetNnInfo(a1);
      uint64_t Frames = (float *)siren_common_synth_GetFrames(a1);
      uint64_t v15 = ruleset_GetName(a1);
      uint64_t PcmBuffer = siren_common_synth_GetPcmBuffer(a1);
      float v17 = *Frames;
      uint64_t v89 = &Frames[*(_DWORD *)(v15 + 9204) * a3 + 3];
      if (v17 == 0.0)
      {
        uint64_t v18 = heap_Calloc(*(void **)(a2 + 8), 1, 88);
        if (v18)
        {
          uint64_t v19 = v18;
          *(_DWORD *)uint64_t v18 = 1;
          *(_DWORD *)(v18 + 4) = (float)(v17 + 0.1);
          *(void *)&long long v20 = 0x8000000080;
          *((void *)&v20 + 1) = 0x8000000080;
          *(_OWORD *)(v18 + 64) = v20;
          *(_DWORD *)(v18 + 80) = 0;
          uint64_t v21 = heap_Alloc(*(void *)(a2 + 8), 512);
          *(void *)(v19 + 8) = v21;
          if (!v21) {
            goto LABEL_34;
          }
          *(void *)(v19 + 16) = v21 + 128;
          *(void *)(v19 + 24) = v21 + 256;
          *(void *)(v19 + 32) = v21 + 384;
          uint64_t v22 = heap_Alloc(*(void *)(a2 + 8), 1536);
          *(void *)(v19 + 40) = v22;
          if (!v22
            || (uint64_t v23 = heap_Alloc(*(void *)(a2 + 8), 1536), (*(void *)(v19 + 48) = v23) == 0)
            || (uint64_t v24 = heap_Alloc(*(void *)(a2 + 8), 160), (*(void *)(v19 + 56) = v24) == 0))
          {
LABEL_34:
            int v53 = 10;
            goto LABEL_35;
          }
          int v25 = *(_OWORD **)(v19 + 8);
          v25[30] = 0u;
          v25[31] = 0u;
          v25[28] = 0u;
          v25[29] = 0u;
          v25[26] = 0u;
          v25[27] = 0u;
          v25[24] = 0u;
          v25[25] = 0u;
          v25[22] = 0u;
          v25[23] = 0u;
          v25[20] = 0u;
          v25[21] = 0u;
          v25[18] = 0u;
          v25[19] = 0u;
          v25[16] = 0u;
          v25[17] = 0u;
          v25[14] = 0u;
          v25[15] = 0u;
          v25[12] = 0u;
          v25[13] = 0u;
          v25[10] = 0u;
          v25[11] = 0u;
          v25[8] = 0u;
          v25[9] = 0u;
          v25[6] = 0u;
          v25[7] = 0u;
          v25[4] = 0u;
          v25[5] = 0u;
          v25[2] = 0u;
          v25[3] = 0u;
          *int v25 = 0u;
          v25[1] = 0u;
          bzero(*(void **)(v19 + 40), 0x600uLL);
          bzero(*(void **)(v19 + 48), 0x600uLL);
          uint64_t v26 = *(_OWORD **)(v19 + 56);
          v26[8] = 0u;
          v26[9] = 0u;
          v26[6] = 0u;
          v26[7] = 0u;
          v26[4] = 0u;
          v26[5] = 0u;
          v26[2] = 0u;
          v26[3] = 0u;
          *uint64_t v26 = 0u;
          v26[1] = 0u;
          fi_net_update_param(*(void *)(NnInfo + 8));
          if (v12 <= 2) {
            unsigned int v31 = 0;
          }
          else {
            unsigned int v31 = v11 - 1;
          }
          unsigned int v32 = v11 + 1;
          goto LABEL_83;
        }
LABEL_76:
        int v53 = 10;
        goto LABEL_98;
      }
      if (v17 == 1.0 || v17 == 2.0 || v17 == 5.0)
      {
        uint64_t v64 = heap_Calloc(*(void **)(a2 + 8), 1, 88);
        if (!v64) {
          goto LABEL_76;
        }
        uint64_t v19 = v64;
        *(_DWORD *)uint64_t v64 = 1;
        *(_DWORD *)(v64 + 4) = (float)(v17 + 0.1);
        *(_OWORD *)(v64 + 8) = 0u;
        *(_OWORD *)(v64 + 24) = 0u;
        *(_OWORD *)(v64 + 40) = 0u;
        *(void *)(v64 + 56) = 0;
        fi_net_update_param(*(void *)(NnInfo + 8));
        if (v17 == 1.0)
        {
          if (v12 <= 4) {
            unsigned int v31 = 0;
          }
          else {
            unsigned int v31 = v11 - 3;
          }
          unsigned int v65 = v11 - 1;
        }
        else
        {
          unsigned int v65 = v11 - 1;
          if (v12 <= 2) {
            unsigned int v31 = 0;
          }
          else {
            unsigned int v31 = v11 - 1;
          }
        }
        if (v12 <= 2) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = v65;
        }
        goto LABEL_83;
      }
      if (v17 == 6.0 || v17 == 4.0 || v17 == 3.0)
      {
        uint64_t v52 = heap_Calloc(*(void **)(a2 + 8), 1, 88);
        if (!v52) {
          goto LABEL_76;
        }
        uint64_t v19 = v52;
        *(_DWORD *)uint64_t v52 = 0;
        *(_DWORD *)(v52 + 4) = (float)(v17 + 0.1);
        *(_OWORD *)(v52 + 8) = 0u;
        *(_OWORD *)(v52 + 24) = 0u;
        *(_OWORD *)(v52 + 40) = 0u;
        *(void *)(v52 + 56) = 0;
        fi_net_update_param(*(void *)(NnInfo + 8));
        unsigned int v32 = v11 + 1;
        unsigned int v31 = v11 + 1;
LABEL_83:
        int v53 = fi_net_predict_notfree_input(*(uint64_t ***)(NnInfo + 8), (const void **)&v89, v11 + 1, &v90, v27, v28, v29, v30);
        if (!v53)
        {
          uint64_t v69 = v32 * Size;
          if (v69 + CurSampleCount <= v83)
          {
            if (v69)
            {
              unsigned int v70 = v90;
              unsigned int v71 = CurSampleCount;
              do
              {
                __int16 v72 = *v70++;
                *(_WORD *)(PcmBuffer + 2 * v71++) = v72;
                --v69;
              }
              while (v69);
            }
            int v73 = siren_common_synth_SetCurFrameCount(a1, v31 + CurFrameCount);
            if (v73)
            {
              int v53 = v73;
            }
            else
            {
              int v53 = siren_common_synth_SetCurSampleCount(a1, v31 * v79 + CurSampleCount);
              if (!v53)
              {
LABEL_43:
                unsigned int v58 = *(void **)(a2 + 8);
                uint64_t v59 = v19;
LABEL_61:
                heap_Free(v58, v59);
                goto LABEL_98;
              }
            }
          }
          else
          {
            int v53 = 9;
          }
LABEL_35:
          uint64_t v54 = *(void *)(v19 + 8);
          if (v54) {
            heap_Free(*(void **)(a2 + 8), v54);
          }
          uint64_t v55 = *(void *)(v19 + 40);
          if (v55) {
            heap_Free(*(void **)(a2 + 8), v55);
          }
          uint64_t v56 = *(void *)(v19 + 48);
          if (v56) {
            heap_Free(*(void **)(a2 + 8), v56);
          }
          uint64_t v57 = *(void *)(v19 + 56);
          if (v57) {
            heap_Free(*(void **)(a2 + 8), v57);
          }
          goto LABEL_43;
        }
LABEL_98:
        if (v53) {
          return v53 | 0x84E02000;
        }
        else {
          return 0;
        }
      }
LABEL_50:
      int v53 = 7;
      goto LABEL_98;
    }
    unsigned int v90 = 0;
    int v86 = vector_GetSize(a1);
    int v80 = vector_GetSize(a1);
    unsigned int v88 = siren_common_synth_GetCurSampleCount(a1);
    int v82 = siren_common_synth_GetCurFrameCount(a1);
    unsigned int v84 = siren_pipeline_GetiSample(a1);
    uint64_t v33 = siren_common_synth_GetNnInfo(a1);
    uint64_t v34 = (float *)siren_common_synth_GetFrames(a1);
    uint64_t v35 = ruleset_GetName(a1);
    uint64_t v36 = siren_common_synth_GetPcmBuffer(a1);
    float v37 = *v34;
    uint64_t v89 = &v34[*(_DWORD *)(v35 + 9204) * a3 + 3];
    if (v37 == 0.0)
    {
      uint64_t v38 = heap_Alloc(*(void *)(a2 + 8), 48);
      if (!v38) {
        goto LABEL_76;
      }
      uint64_t v39 = v38;
      *(_DWORD *)uint64_t v38 = 1;
      *(_DWORD *)(v38 + 4) = (float)(v37 + 0.1);
      *(void *)(v38 + 40) = 128;
      uint64_t v40 = heap_Alloc(*(void *)(a2 + 8), 128);
      *(void *)(v39 + 8) = v40;
      if (!v40
        || (uint64_t v41 = heap_Alloc(*(void *)(a2 + 8), 1536), (*(void *)(v39 + 16) = v41) == 0)
        || (uint64_t v42 = heap_Alloc(*(void *)(a2 + 8), 1536), (*(void *)(v39 + 24) = v42) == 0)
        || (uint64_t v43 = heap_Alloc(*(void *)(a2 + 8), 160), (*(void *)(v39 + 32) = v43) == 0))
      {
        int v53 = 10;
        goto LABEL_52;
      }
      uint64_t v44 = *(_OWORD **)(v39 + 8);
      v44[6] = 0u;
      v44[7] = 0u;
      v44[4] = 0u;
      v44[5] = 0u;
      v44[2] = 0u;
      v44[3] = 0u;
      _OWORD *v44 = 0u;
      v44[1] = 0u;
      bzero(*(void **)(v39 + 16), 0x600uLL);
      bzero(*(void **)(v39 + 24), 0x600uLL);
      uint64_t v45 = *(_OWORD **)(v39 + 32);
      _OWORD v45[8] = 0u;
      v45[9] = 0u;
      v45[6] = 0u;
      v45[7] = 0u;
      v45[4] = 0u;
      v45[5] = 0u;
      void v45[2] = 0u;
      v45[3] = 0u;
      *uint64_t v45 = 0u;
      v45[1] = 0u;
      fi_net_update_param(*(void *)(v33 + 8));
      if (v12 <= 2) {
        unsigned int v50 = 0;
      }
      else {
        unsigned int v50 = v11 - 1;
      }
      unsigned int v51 = v11 + 1;
    }
    else if (v37 == 1.0 || v37 == 2.0 || v37 == 5.0)
    {
      uint64_t v66 = heap_Alloc(*(void *)(a2 + 8), 48);
      if (!v66) {
        goto LABEL_76;
      }
      uint64_t v39 = v66;
      *(_DWORD *)uint64_t v66 = 1;
      *(_DWORD *)(v66 + 4) = (float)(v37 + 0.1);
      *(_OWORD *)(v66 + 8) = 0u;
      *(_OWORD *)(v66 + 24) = 0u;
      fi_net_update_param(*(void *)(v33 + 8));
      if (v37 == 1.0)
      {
        if (v12 <= 4) {
          unsigned int v50 = 0;
        }
        else {
          unsigned int v50 = v11 - 3;
        }
        unsigned int v67 = v11 - 1;
      }
      else
      {
        unsigned int v67 = v11 - 1;
        if (v12 <= 2) {
          unsigned int v50 = 0;
        }
        else {
          unsigned int v50 = v11 - 1;
        }
      }
      if (v12 <= 2) {
        unsigned int v51 = 0;
      }
      else {
        unsigned int v51 = v67;
      }
    }
    else
    {
      if (v37 != 6.0 && v37 != 4.0 && v37 != 3.0) {
        goto LABEL_50;
      }
      uint64_t v68 = heap_Alloc(*(void *)(a2 + 8), 48);
      if (!v68) {
        goto LABEL_76;
      }
      uint64_t v39 = v68;
      *(_DWORD *)uint64_t v68 = 0;
      *(_DWORD *)(v68 + 4) = (float)(v37 + 0.1);
      *(_OWORD *)(v68 + 8) = 0u;
      *(_OWORD *)(v68 + 24) = 0u;
      fi_net_update_param(*(void *)(v33 + 8));
      unsigned int v51 = v11 + 1;
      unsigned int v50 = v11 + 1;
    }
    int v53 = fi_net_predict_notfree_input(*(uint64_t ***)(v33 + 8), (const void **)&v89, v11 + 1, &v90, v46, v47, v48, v49);
    if (v53) {
      goto LABEL_98;
    }
    uint64_t v74 = v51 * v86;
    if (v74 + v88 <= v84)
    {
      if (v74)
      {
        uint64_t v75 = v90;
        unsigned int v76 = v88;
        do
        {
          __int16 v77 = *v75++;
          *(_WORD *)(v36 + 2 * v76++) = v77;
          --v74;
        }
        while (v74);
      }
      int v78 = siren_common_synth_SetCurFrameCount(a1, v50 + v82);
      if (v78)
      {
        int v53 = v78;
      }
      else
      {
        int v53 = siren_common_synth_SetCurSampleCount(a1, v50 * v80 + v88);
        if (!v53) {
          goto LABEL_98;
        }
      }
    }
    else
    {
      int v53 = 9;
    }
LABEL_52:
    uint64_t v60 = *(void *)(v39 + 8);
    if (v60) {
      heap_Free(*(void **)(a2 + 8), v60);
    }
    uint64_t v61 = *(void *)(v39 + 16);
    if (v61) {
      heap_Free(*(void **)(a2 + 8), v61);
    }
    uint64_t v62 = *(void *)(v39 + 24);
    if (v62) {
      heap_Free(*(void **)(a2 + 8), v62);
    }
    uint64_t v63 = *(void *)(v39 + 32);
    if (v63) {
      heap_Free(*(void **)(a2 + 8), v63);
    }
    unsigned int v58 = *(void **)(a2 + 8);
    uint64_t v59 = v39;
    goto LABEL_61;
  }
  return result;
}

uint64_t siren_nn_parallel_synth_Process(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int FramesCount = siren_common_synth_GetFramesCount(a1);
  uint64_t result = 2229280775;
  unsigned int v10 = a4 - a3;
  if (a4 >= a3 && a1 && FramesCount > a3 && FramesCount > a4)
  {
    uint64_t v41 = 0;
    int Size = vector_GetSize(a1);
    unsigned int CurSampleCount = siren_common_synth_GetCurSampleCount(a1);
    Curunsigned int FrameCount = siren_common_synth_GetCurFrameCount(a1);
    unsigned int v38 = siren_pipeline_GetiSample(a1);
    uint64_t NnInfo = siren_common_synth_GetNnInfo(a1);
    uint64_t Frames = (float *)siren_common_synth_GetFrames(a1);
    uint64_t Name = ruleset_GetName(a1);
    uint64_t PcmBuffer = siren_common_synth_GetPcmBuffer(a1);
    unsigned int v16 = v10 + 1;
    float v17 = *Frames;
    uint64_t v40 = &Frames[*(_DWORD *)(Name + 9204) * a3 + 3];
    if (v17 == 0.0)
    {
      uint64_t v18 = (_DWORD *)heap_Calloc(*(void **)(a2 + 8), 1, 16);
      if (v18)
      {
        uint64_t v19 = (uint64_t)v18;
        *uint64_t v18 = 1;
        v18[1] = (float)(v17 + 0.1);
        uint64_t v20 = heap_Calloc(*(void **)(a2 + 8), 1, 160);
        *(void *)(v19 + 8) = v20;
        if (!v20)
        {
          int v28 = 10;
          goto LABEL_37;
        }
        fi_net_update_param(*(void *)(NnInfo + 8));
        goto LABEL_18;
      }
LABEL_29:
      int v25 = 10;
      return v25 | 0x84E02000;
    }
    if (v17 == 1.0 || v17 == 2.0 || v17 == 5.0)
    {
      uint64_t v26 = heap_Calloc(*(void **)(a2 + 8), 1, 16);
      if (!v26) {
        goto LABEL_29;
      }
      uint64_t v19 = v26;
      *(_DWORD *)uint64_t v26 = 1;
      *(_DWORD *)(v26 + 4) = (float)(v17 + 0.1);
      *(void *)(v26 + 8) = 0;
      fi_net_update_param(*(void *)(NnInfo + 8));
      if (v17 == 1.0)
      {
LABEL_18:
        if (v16 <= 4) {
          unsigned int v27 = 0;
        }
        else {
          unsigned int v27 = v10 - 3;
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (v17 != 6.0 && v17 != 4.0 && v17 != 3.0)
      {
        int v25 = 7;
        return v25 | 0x84E02000;
      }
      uint64_t v29 = heap_Calloc(*(void **)(a2 + 8), 1, 16);
      if (!v29) {
        goto LABEL_29;
      }
      uint64_t v19 = v29;
      *(_DWORD *)uint64_t v29 = 0;
      *(_DWORD *)(v29 + 4) = (float)(v17 + 0.1);
      *(void *)(v29 + 8) = 0;
      fi_net_update_param(*(void *)(NnInfo + 8));
    }
    unsigned int v27 = v10 + 1;
LABEL_25:
    uint64_t v30 = Size * v16;
    if (v16 < 5)
    {
      unsigned int v31 = CurSampleCount;
      if (CurSampleCount + v30 > v38)
      {
        int v28 = 9;
        goto LABEL_37;
      }
      bzero((void *)(PcmBuffer + 2 * CurSampleCount), 2 * Size * v16);
LABEL_34:
      int v32 = siren_common_synth_SetCurFrameCount(a1, v27 + CurFrameCount);
      if (v32)
      {
        int v28 = v32;
      }
      else
      {
        int v28 = siren_common_synth_SetCurSampleCount(a1, v27 * Size + v31);
        if (!v28)
        {
LABEL_39:
          heap_Free(*(void **)(a2 + 8), v19);
          if (v28) {
            return v28 | 0x84E02000;
          }
          else {
            return 0;
          }
        }
      }
LABEL_37:
      uint64_t v33 = *(void *)(v19 + 8);
      if (v33) {
        heap_Free(*(void **)(a2 + 8), v33);
      }
      goto LABEL_39;
    }
    int v25 = fi_net_predict_notfree_input(*(uint64_t ***)(NnInfo + 8), (const void **)&v40, v10 + 1, &v41, v21, v22, v23, v24);
    if (!v25)
    {
      unsigned int v31 = CurSampleCount;
      if (CurSampleCount + v30 > v38)
      {
        int v28 = 9;
        goto LABEL_37;
      }
      if (v30)
      {
        uint64_t v34 = v41;
        unsigned int v35 = CurSampleCount;
        do
        {
          __int16 v36 = *v34++;
          *(_WORD *)(PcmBuffer + 2 * v35++) = v36;
          --v30;
        }
        while (v30);
      }
      goto LABEL_34;
    }
    return v25 | 0x84E02000;
  }
  return result;
}

uint64_t thread_infer_func(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  if ((int)v8 < 1) {
    return 0;
  }
  else {
    return fi_net_predict_notfree_input(*(uint64_t ***)a1, (const void **)(a1 + 8), v8, (void *)(a1 + 40), a5, a6, a7, a8);
  }
}

uint64_t SampleChunk_alloc(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = heap_Calloc(*(void **)(a1 + 8), 1, 32);
  if (!v3) {
    return 2229280778;
  }
  uint64_t v4 = v3;
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

uint64_t SampleChunk_free(uint64_t a1, uint64_t a2)
{
  if (a2) {
    heap_Free(*(void **)(a1 + 8), a2);
  }
  return 0;
}

uint64_t SampleChunk_init(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = 0;
  int v22 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, int *))(a4 + 88))(a5, a6, &v23, &v22);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v21 = v23 + 4 * a3;
    *(void *)(a9 + 16) = v23;
    *(void *)(a9 + 24) = v21;
    if (8 * a3 == v22)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 96))(a5, a6);
      if ((result & 0x80000000) == 0)
      {
        *(float *)(a9 + 8) = a7;
        *(_DWORD *)a9 = a2;
        *(_DWORD *)(a9 + 4) = a3;
      }
    }
    else
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"SYNTH_BET6", 4, 0, (uint64_t)"Read ThreadChunk start and end index from stream failed!, wanted bytes: %d, but available bytes in stream: %d", v18, v19, v20, 8 * a3);
      return 2229280775;
    }
  }
  return result;
}

float SampleChunk_getEmissionType(uint64_t a1, float *a2)
{
  if (a1)
  {
    if (a2)
    {
      float result = *(float *)(a1 + 8);
      *a2 = result;
    }
  }
  return result;
}

uint64_t SampleChunk_getThreadChunkIndex(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = 2229280775;
  if (a1 && a3 && a4 && *(_DWORD *)(a1 + 4) > a2)
  {
    uint64_t result = 0;
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 24);
    *a3 = *(_DWORD *)(v7 + 4 * a2);
    *a4 = *(_DWORD *)(v6 + 4 * a2);
  }
  return result;
}

uint64_t bet6_synth_Apply_Half_hannWin_Scalar_55(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  for (uint64_t i = 54; i != -1; --i)
  {
    if (a2) {
      unsigned __int16 v4 = i;
    }
    else {
      unsigned __int16 v4 = v2;
    }
    *(_WORD *)(a1 + 2 * v2) = (int)(float)(bet6_synth_Apply_Half_hannWin_Scalar_55_half_hann_scalars[v4]
                                         * (float)*(__int16 *)(a1 + 2 * v2));
    ++v2;
  }
  return 0;
}

uint64_t bet6_synth_Convolve_Float(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = 7;
  if (a3 && a1 && a2 && a4)
  {
    unsigned int v6 = a2 - 1;
    if (a2 - 1 + a4)
    {
      uint64_t v7 = 0;
      unsigned int v8 = a4 - 1;
      do
      {
        int v9 = 0;
        if (v7 >= v8) {
          uint64_t v10 = v7 - v8;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v7 >= v6) {
          unint64_t v11 = v6;
        }
        else {
          unint64_t v11 = v7;
        }
        if (v10 <= v11)
        {
          int v9 = 0;
          uint64_t v12 = v7 - v10;
          LODWORD(v13) = v7 - v8;
          if (v7 >= v8) {
            unint64_t v13 = v13;
          }
          else {
            unint64_t v13 = 0;
          }
          do
            v9 += (int)(float)(*(float *)(a3 + 4 * v12--) * (float)*(__int16 *)(a1 + 2 * v13));
          while (v13++ < v11);
        }
        if (v9 <= -32768) {
          int v9 = -32768;
        }
        if (v9 >= 0x7FFF) {
          int v9 = 0x7FFF;
        }
        *(_DWORD *)(a5 + 4 * v7++) = v9;
      }
      while (v7 != a2 - 1 + a4);
    }
    return 0;
  }
  return v5;
}

uint64_t bet6_synth_Convolve_ReverseKernel(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = 7;
  if (a3 && a1 && a2 && a4)
  {
    unsigned int v6 = a2 - 1;
    if (a2 - 1 + a4)
    {
      uint64_t v7 = 0;
      unsigned int v8 = a4 - 1;
      do
      {
        if (v7 >= v8) {
          int v9 = a4 - 1;
        }
        else {
          int v9 = v7;
        }
        if (v7 >= v8) {
          unsigned int v10 = v7 - v8;
        }
        else {
          unsigned int v10 = 0;
        }
        *(_DWORD *)(a5 + 4 * v7) = 0;
        if (v7 >= v6) {
          unint64_t v11 = v6;
        }
        else {
          unint64_t v11 = v7;
        }
        if (v10 <= v11)
        {
          int v12 = 0;
          unsigned int v13 = v8 - v9;
          LODWORD(v14) = v7 - v8;
          if (v7 >= v8) {
            unint64_t v14 = v14;
          }
          else {
            unint64_t v14 = 0;
          }
          do
            v12 += *(__int16 *)(a3 + 2 * v13++) * *(__int16 *)(a1 + 2 * v14);
          while (v14++ < v11);
          *(_DWORD *)(a5 + 4 * v7) = v12;
        }
        ++v7;
      }
      while (v7 != a2 - 1 + a4);
    }
    return 0;
  }
  return v5;
}

uint64_t bet6_synth_OverlapAdd(__int16 *a1, __int16 *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    do
    {
      int v4 = *a2++;
      int v5 = *a1 + v4;
      if (v5 >= 0x7FFF) {
        int v5 = 0x7FFF;
      }
      if (v5 <= -32768) {
        LOWORD(v5) = 0x8000;
      }
      *a1++ = v5;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t bet6_apply_fir_same_mode(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t result = bet6_synth_Convolve_Float(a1, a2, a3, a4, a5);
  if (!result && a2)
  {
    int v10 = 0;
    unint64_t v11 = (int *)(a5 + 4 * (unsigned __int16)(a4 >> 1));
    do
    {
      int v12 = *v11++;
      *(_WORD *)(a1 + 2 * (unsigned __int16)v10++) = v12;
    }
    while (a2 > (unsigned __int16)v10);
  }
  return result;
}

uint64_t compquery_GetProductList(uint64_t a1, int a2, char *a3, int *a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 348, 64);
  if ((v7 & 0x80000000) != 0) {
    return 2303729672;
  }
  uint64_t v11 = v7;
  uint64_t v12 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v12 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Get Product List : Begin", v8, v9, v10, v19);
  if (!a4)
  {
    log_OutPublic(*(void *)(v12 + 32), (uint64_t)"COMPQUERY", 23006, 0, v13, v14, v15, v16, v20);
    return 2303729671;
  }
  int v17 = *a4;
  *a4 = 1;
  if (!a3 || !v17) {
    goto LABEL_7;
  }
  __sprintf_chk(a3, 0, 0x40uLL, "Vocalizer v%d.%d", 7, 4);
  uint64_t v11 = strhelper_SafeCpy(a3 + 64, "eng/vocalizer", 0xFFFFFFFFFFFFFFFFLL, 0x20uLL);
  if ((v11 & 0x80000000) == 0)
  {
    sprintf(a3 + 96, "%d.%d.%d", 7, 4, 0);
LABEL_7:
    log_OutText(*(void *)(v12 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Get Product List : End (%x, %u)", v14, v15, v16, v11);
  }
  return v11;
}

uint64_t compquery_GetCLMInfo(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  int v9 = v8;
  uint64_t v10 = v1;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v11 = 2303729671;
  uint64_t v49 = 0;
  bzero(v51, 0x800uLL);
  strcpy(v48, "CLMP");
  char v47 = 0;
  int v46 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  int v43 = 0;
  if ((safeh_HandleCheck(v10, v9, 348, 64) & 0x80000000) != 0) {
    return 2303729672;
  }
  uint64_t v15 = *(void *)(v10 + 16);
  log_OutText(*(void *)(v15 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"GetCLMInfo : Begin (%s, %s)", v12, v13, v14, v7);
  if (v7 && v5)
  {
    uint64_t v20 = brk_ObjOpen(v7, *(void *)(v10 + 24));
    if ((v20 & 0x80000000) != 0)
    {
      uint64_t v11 = v20;
      log_OutPublic(*(void *)(v15 + 32), (uint64_t)"COMPQUERY", 23008, "%s%s%s%x", v21, v22, v23, v24, "product");
    }
    else
    {
      uint64_t v25 = strhelper_SafeCpy(v51, "clm", 0xFFFFFFFFFFFFFFFFLL, 0x800uLL);
      if ((v25 & 0x80000000) != 0)
      {
        return v25;
      }
      else
      {
        uint64_t StringZ = ssftriff_reader_ObjOpen(*(_WORD **)v10, *(void *)(v10 + 8), 2, v51, v48, 1031, (uint64_t *)&v45);
        if ((StringZ & 0x80000000) == 0)
        {
          uint64_t v31 = v5 + 64;
          do
          {
            if ((ssftriff_reader_OpenChunk((uint64_t)v45, &v46, (unsigned int *)&v43, &v44, v27, v28, v29, v30) & 0x80000000) != 0) {
              break;
            }
            int v42 = 2048;
            uint64_t StringZ = ssftriff_reader_ReadStringZ((uint64_t)v45, v44, v43, 0, __s1, (unsigned int *)&v42);
            if ((StringZ & 0x80000000) != 0) {
              goto LABEL_36;
            }
            unsigned int v35 = strstr(__s1, "clmcfg");
            unsigned int v36 = v42;
            if (v35 && (v42 & 3) != 0)
            {
              unsigned int v36 = v42 - (v42 | 0xFFFFFFFC);
              int v42 = v36;
            }
            while (v36 < v43)
            {
              __s1[0] = 0;
              int v42 = 2048;
              int v37 = ssftriff_reader_ReadStringZ((uint64_t)v45, v44, v43, v36, __s1, (unsigned int *)&v42);
              if (*(void *)__s1 == 0x765F656372756F73 && *(void *)&__s1[6] == 0x6E6F69737265765FLL)
              {
                uint64_t v11 = strhelper_SafeCpy(v3 + 64, __s1, 0xFFFFFFFFFFFFFFFFLL, 0x800uLL);
                if ((v11 & 0x80000000) != 0) {
                  return v11;
                }
                v3[strlen(__s1) + 62] = 0;
              }
              else
              {
                LODWORD(v11) = v37;
              }
              if (*(void *)__s1 == 0x7265765F656C6966 && *(_DWORD *)&__s1[8] == 1852795251)
              {
                uint64_t v11 = strhelper_SafeCpy(v3, __s1, 0xFFFFFFFFFFFFFFFFLL, 0x40uLL);
                if ((v11 & 0x80000000) != 0) {
                  return v11;
                }
                v3[strlen(__s1) - 1] = 0;
              }
              if (!LH_strnicmp(v31, (uint64_t)__s1, 3uLL))
              {
                uint64_t v25 = strhelper_SafeCpy(v3 + 2112, __s1, 0xFFFFFFFFFFFFFFFFLL, 0x800uLL);
                if ((v25 & 0x80000000) != 0) {
                  return v25;
                }
                v3[strlen(__s1) + 2111] = 0;
                break;
              }
              if ((v11 & 0x80000000) != 0) {
                break;
              }
              v36 += v42;
            }
            uint64_t StringZ = ssftriff_reader_CloseChunk((uint64_t)v45);
            if ((StringZ & 0x80000000) != 0) {
              goto LABEL_36;
            }
          }
          while (!v35);
          uint64_t StringZ = ssftriff_reader_ObjClose(v45, v32, v33, v34, v27, v28, v29, v30);
        }
LABEL_36:
        uint64_t v11 = StringZ;
        if (v49) {
          brk_ObjClose(v49);
        }
        log_OutText(*(void *)(v15 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"GetCLMInfo : End (%x)", v28, v29, v30, v11);
      }
    }
  }
  else
  {
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"COMPQUERY", 23013, 0, v16, v17, v18, v19, v41);
  }
  return v11;
}

uint64_t compquery_GetNTSInfo(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v46 = 0;
  unsigned int v45 = 0;
  uint64_t v9 = 2303729671;
  uint64_t v40 = 0;
  int v38 = 0;
  int v39 = 0;
  unsigned __int16 v37 = 0;
  if ((safeh_HandleCheck(a1, a2, 348, 64) & 0x80000000) != 0) {
    return 2303729672;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v13 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"GetNTSInfoList : Begin (%s, %s)", v10, v11, v12, a3);
  if (!a3 || !a4)
  {
    log_OutPublic(*(void *)(v13 + 32), (uint64_t)"COMPQUERY", 23013, 0, v14, v15, v16, v17, v34);
    return v9;
  }
  int v36 = 0;
  uint64_t v35 = 0;
  uint64_t v18 = brk_ObjOpen(a3, *(void *)(a1 + 24));
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v32 = v18;
    log_OutPublic(*(void *)(v13 + 32), (uint64_t)"COMPQUERY", 23008, "%s%s%s%x", v19, v20, v21, v22, "product");
    return v32;
  }
  *(_OWORD *)__src = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  set_DctBrk((uint64_t)&v41, v46);
  uint64_t inited = open_DctRom((uint64_t *)&v41, (uint64_t)"sysdct", &v45);
  if ((inited & 0x80000000) != 0
    || (uint64_t inited = brk_DataOpenEx(v46, (uint64_t)"sysdct", 1, (uint64_t)&v40), (inited & 0x80000000) != 0)
    || (uint64_t inited = query_DctRom((uint64_t)&v41, "ntscfg", v45, v40, &v39), (inited & 0x80000000) != 0))
  {
    uint64_t v28 = 0;
    goto LABEL_20;
  }
  uint64_t v27 = heap_Calloc(*(void **)(v13 + 8), 1, 144);
  uint64_t v28 = v27;
  if (!v27) {
    goto LABEL_35;
  }
  *(void *)&long long v42 = v27;
  uint64_t inited = init_DctRom((uint64_t)&v41, "ntscfg", v45, v40);
  if ((inited & 0x80000000) != 0 && (inited & 0x1FFF) != 0x14)
  {
LABEL_20:
    uint64_t v9 = inited;
    goto LABEL_21;
  }
  MaxOutLeuint64_t n = GetMaxOutLen((uint64_t)&v41);
  GetFieldSeparator((uint64_t)&v41);
  if (MaxOutLen)
  {
    __src[1] = (void *)heap_Calloc(*(void **)(v13 + 8), 1, MaxOutLen + 1);
    if (__src[1])
    {
      HIWORD(v38) = 0;
      unsigned __int16 v37 = 0;
      uint64_t inited = strhelper_SafeCpy(__s, "nts_", 4uLL, 8uLL);
      if ((inited & 0x80000000) == 0)
      {
        size_t v30 = strlen((const char *)(a4 + 64));
        uint64_t inited = strhelper_SafeCat(__s, (char *)(a4 + 64), v30, 8uLL);
        if ((inited & 0x80000000) == 0)
        {
          LOWORD(v38) = strlen(__s) - 1;
          uint64_t v35 = 0;
          LOWORD(v36) = 0;
          uint64_t v9 = DctLookup((uint64_t)&v41, (uint64_t)__s, (unsigned __int16 *)&v38 + 1, (__int16 *)&v38, 1, &v37, (uint64_t)&v35);
          if (!v9)
          {
            uint64_t v31 = (__int16)v37;
            memcpy(a5, __src[1], v37);
            *((unsigned char *)a5 + v31) = 0;
          }
          goto LABEL_21;
        }
      }
      goto LABEL_20;
    }
LABEL_35:
    uint64_t v9 = 2303729674;
  }
LABEL_21:
  if (v46)
  {
    if (__src[1]) {
      heap_Free(*(void **)(v13 + 8), (uint64_t)__src[1]);
    }
    if (v40 && __src[0]) {
      exit_DctRom((uint64_t)&v41, v40);
    }
    if (v28) {
      heap_Free(*(void **)(v13 + 8), v28);
    }
    if (v40) {
      brk_DataClose(v46, v40);
    }
    close_DctRom((uint64_t)&v41);
    brk_ObjClose(v46);
  }
  log_OutText(*(void *)(v13 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"GetNTSInfoList : End (%x)", v24, v25, v26, v9);
  return v9;
}

uint64_t compquery_GetLanguageList(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  int v82 = 0;
  uint64_t v83 = 0;
  uint64_t v9 = 2303729674;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  int v79 = 0;
  if ((safeh_HandleCheck(a1, a2, 348, 64) & 0x80000000) != 0) {
    return 2303729672;
  }
  long long v88 = 0u;
  memset(v89, 0, 22);
  long long v86 = 0u;
  long long v87 = 0u;
  *(_OWORD *)__dst = 0u;
  uint64_t v14 = *(void **)(a1 + 16);
  if (!a3 || !a5)
  {
    log_OutPublic(v14[4], (uint64_t)"COMPQUERY", 23007, 0, v10, v11, v12, v13, v74);
    return 2303729671;
  }
  uint64_t v84 = 0;
  log_OutText(v14[4], (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Get Language List : Begin (%s)", v11, v12, v13, a3);
  if (*a5) {
    uint64_t v15 = a4;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = brk_ObjOpen(a3, *(void *)(a1 + 24));
  if ((v16 & 0x80000000) != 0)
  {
    uint64_t v21 = v16;
    log_OutPublic(v14[4], (uint64_t)"COMPQUERY", 23008, "%s%s%s%x", v17, v18, v19, v20, "product");
    return v21;
  }
  uint64_t v21 = brk_ComponentTableIteratorOpen(v84, (uint64_t)"pipeline/*", (uint64_t)&v83);
  if ((v21 & 0x80000000) != 0)
  {
    brk_ObjClose(v84);
    log_OutPublic(v14[4], (uint64_t)"COMPQUERY", 23009, "%s%s%s%x", v54, v55, v56, v57, "product");
    return v21;
  }
  uint64_t v22 = (void *)v14[1];
  *(_OWORD *)long long __s1 = xmmword_20D6AFB38;
  uint64_t v78 = 0;
  if (!vector_ObjOpen(v22, (long long *)__s1, 4, &v80)) {
    goto LABEL_64;
  }
  uint64_t v75 = a5;
  uint64_t v23 = (char *)v89;
  uint64_t v24 = "PARAMETERS/*";
  while (2)
  {
    unsigned int v25 = brk_ComponentTableIteratorNext(v83);
    if ((v25 & 0x80000000) != 0)
    {
      unsigned int v58 = v25;
      if (v15)
      {
        uint64_t v59 = v75;
        if (*v75)
        {
          unsigned int Size = vector_GetSize(v80);
          uint64_t v21 = Size <= *v75 ? v21 : 2303729673;
          unsigned int v61 = Size >= *v75 ? *v75 : Size;
          if (v61)
          {
            unsigned int v62 = 0;
            int v63 = 0;
            do
            {
              vector_GetElemAt(v80, v62, &v79);
              uint64_t v64 = v15 + 86 * (unsigned __int16)v63;
              unsigned int v65 = v79;
              long long v66 = v79[1];
              *(_OWORD *)uint64_t v64 = *v79;
              *(_OWORD *)(v64 + 16) = v66;
              long long v68 = v65[3];
              long long v67 = v65[4];
              long long v69 = v65[2];
              *(void *)(v64 + 78) = *(void *)((char *)v65 + 78);
              *(_OWORD *)(v64 + 48) = v68;
              *(_OWORD *)(v64 + 64) = v67;
              *(_OWORD *)(v64 + 32) = v69;
              unsigned int v62 = (unsigned __int16)++v63;
            }
            while (v61 > (unsigned __int16)v63);
          }
        }
      }
      else
      {
        uint64_t v59 = v75;
      }
      unsigned int *v59 = vector_GetSize(v80);
      vector_ObjClose(v80);
      brk_ComponentTableIteratorClose(v83);
      brk_ObjClose(v84);
      log_OutText(v14[4], (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Get Language List : End (%x, %u)", v71, v72, v73, v21);
      if ((v58 & 0x1FFF) == 0xA) {
        return v58;
      }
      else {
        return v21;
      }
    }
    long long v88 = 0u;
    memset(v89, 0, 22);
    long long v86 = 0u;
    long long v87 = 0u;
    *(_OWORD *)__dst = 0u;
    if ((brk_TagIteratorOpen(v14[3], v82, v24, 1, &v81) & 0x80000000) != 0) {
      goto LABEL_33;
    }
    __s = 0;
    __s1[0] = 0;
    while ((brk_TagIteratorNext(v81, (uint64_t)__s1, (uint64_t)&__s) & 0x80000000) == 0)
    {
      uint64_t v26 = __s1[0];
      if (__s1[0])
      {
        if (!strcmp(__s1[0], "language"))
        {
          uint64_t v27 = __s;
          if (strlen(__s) > 0x3F)
          {
            strncpy(__dst, __s, 0x3FuLL);
            HIBYTE(v88) = 0;
            strlen(v27);
            log_OutPublic(v14[4], (uint64_t)"COMPQUERY", 23014, "Language string \"%s\" too long (%lu - max is %lu)", v32, v33, v34, v35, v27);
          }
          else
          {
            uint64_t v28 = __dst;
            uint64_t v29 = __s;
            size_t v30 = 64;
LABEL_28:
            uint64_t v21 = strhelper_SafeCpy(v28, v29, 0xFFFFFFFFFFFFFFFFLL, v30);
            if ((v21 & 0x80000000) != 0) {
              return v21;
            }
          }
        }
        else if (!strcmp(v26, "langcode"))
        {
          uint64_t v31 = __s;
          if (strlen(__s) <= 7)
          {
            uint64_t v28 = v23;
            uint64_t v29 = __s;
            size_t v30 = 8;
            goto LABEL_28;
          }
          strncpy(v23, __s, 7uLL);
          HIBYTE(v89[3]) = 0;
          strlen(v31);
          log_OutPublic(v14[4], (uint64_t)"COMPQUERY", 23014, "Language code \"%s\" too long (%lu - max is %lu)", v37, v38, v39, v40, v31);
        }
        else if (!strcmp(v26, "langversion"))
        {
          int v36 = __s;
          if (strlen(__s) <= 0xB)
          {
            uint64_t v28 = (char *)&v89[4];
            uint64_t v29 = __s;
            size_t v30 = 12;
            goto LABEL_28;
          }
          strncpy((char *)&v89[4], __s, 0xBuLL);
          HIBYTE(v89[9]) = 0;
          strlen(v36);
          log_OutPublic(v14[4], (uint64_t)"COMPQUERY", 23014, "Language version string \"%s\" too long (%lu - max is %lu)", v41, v42, v43, v44, v36);
        }
        else if (!strcmp(v26, "langid"))
        {
          v89[10] = (unsigned __int16)LH_atou(__s);
        }
      }
    }
    brk_TagIteratorClose(v81);
    uint64_t v81 = 0;
LABEL_33:
    uint64_t v45 = v80;
    __s1[0] = 0;
    if (v80)
    {
      unsigned int v46 = vector_GetSize(v80);
      if (!v46) {
        goto LABEL_72;
      }
      unsigned int v47 = v46;
      uint64_t v48 = v24;
      uint64_t v49 = v23;
      unsigned int v50 = 1;
      do
      {
        vector_GetElemAt(v45, v50 - 1, __s1);
        int v51 = LH_stricmp(__dst, __s1[0]);
        if (v51) {
          BOOL v52 = v50 >= v47;
        }
        else {
          BOOL v52 = 1;
        }
        ++v50;
      }
      while (!v52);
      uint64_t v23 = v49;
      uint64_t v24 = v48;
      if (v51)
      {
LABEL_72:
        if (!vector_Add(v45, __dst))
        {
          uint64_t v53 = v80;
          goto LABEL_63;
        }
      }
      continue;
    }
    break;
  }
  uint64_t v53 = 0;
LABEL_63:
  vector_ObjClose(v53);
  brk_ComponentTableIteratorClose(v83);
LABEL_64:
  brk_ObjClose(v84);
  return v9;
}

uint64_t compquery_GetVoiceList(uint64_t a1, int a2, uint64_t a3, char *a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v11 = 2303729674;
  unsigned int v70 = 0;
  if ((safeh_HandleCheck(a1, a2, 348, 64) & 0x80000000) != 0) {
    return 2303729672;
  }
  uint64_t v88 = 0;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v79 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v76 = 0u;
  uint64_t v16 = *(void **)(a1 + 16);
  if (!a3 || !a4 || !a6)
  {
    log_OutPublic(v16[4], (uint64_t)"COMPQUERY", 23013, 0, v12, v13, v14, v15, v64);
    return 2303729671;
  }
  uint64_t v75 = 0;
  log_OutText(v16[4], (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Get Voice List : Begin (%s, %s)", v13, v14, v15, a3);
  if (*a6) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = brk_ObjOpen(a3, *(void *)(a1 + 24));
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v23 = v18;
    log_OutPublic(v16[4], (uint64_t)"COMPQUERY", 23008, "%s%s%s%x", v19, v20, v21, v22, "product");
    return v23;
  }
  uint64_t v23 = brk_ComponentTableIteratorOpen(v75, (uint64_t)"pipeline/*", (uint64_t)&v74);
  if ((v23 & 0x80000000) != 0)
  {
    brk_ObjClose(v75);
    log_OutPublic(v16[4], (uint64_t)"COMPQUERY", 23010, "%s%s%s%x", v55, v56, v57, v58, "product");
    return v23;
  }
  uint64_t v24 = (void *)v16[1];
  *(_OWORD *)long long __s1 = xmmword_20D6AFB50;
  uint64_t v69 = 0;
  if (!vector_ObjOpen(v24, (long long *)__s1, 4, &v71))
  {
    brk_ObjClose(v75);
    return v11;
  }
  unsigned int v65 = a6;
  uint64_t v66 = v17;
  if ((brk_ComponentTableIteratorNext(v74) & 0x80000000) != 0) {
    goto LABEL_46;
  }
  unsigned int v25 = (char *)&v82 + 12;
  do
  {
    uint64_t v88 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v79 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v76 = 0u;
    if ((brk_TagIteratorOpen(v16[3], v73, "PARAMETERS/*", 1, &v72) & 0x80000000) != 0) {
      goto LABEL_33;
    }
    __src = 0;
    __s1[0] = 0;
    while ((brk_TagIteratorNext(v72, (uint64_t)__s1, (uint64_t)&__src) & 0x80000000) == 0)
    {
      uint64_t v26 = __s1[0];
      if (__s1[0])
      {
        if (!strcmp(__s1[0], "voice"))
        {
          uint64_t v27 = __src;
          uint64_t v28 = (char *)&v76;
          size_t v29 = 31;
          goto LABEL_31;
        }
        if (!strcmp(v26, "language"))
        {
          uint64_t v27 = __src;
          uint64_t v28 = (char *)&v78;
          goto LABEL_26;
        }
        if (!strcmp(v26, "age"))
        {
          uint64_t v27 = __src;
          uint64_t v28 = (char *)&v82;
LABEL_30:
          size_t v29 = 11;
LABEL_31:
          strncpy(v28, v27, v29);
        }
        else
        {
          if (!strcmp(v26, "gender"))
          {
            uint64_t v27 = __src;
            uint64_t v28 = v25;
            size_t v29 = 15;
            goto LABEL_31;
          }
          if (!strcmp(v26, "voiceversion"))
          {
            uint64_t v27 = __src;
            uint64_t v28 = (char *)&v83 + 12;
            goto LABEL_30;
          }
          if (!strcmp(v26, "noclmset"))
          {
            uint64_t v27 = __src;
            uint64_t v28 = (char *)&v84 + 8;
LABEL_26:
            size_t v29 = 63;
            goto LABEL_31;
          }
        }
      }
    }
    brk_TagIteratorClose(v72);
    uint64_t v72 = 0;
LABEL_33:
    if (LH_stricmp(a4, (char *)&v78)) {
      continue;
    }
    uint64_t v30 = v71;
    __s1[0] = 0;
    if (!v71)
    {
      uint64_t v63 = 0;
LABEL_70:
      vector_ObjClose(v63);
      brk_ComponentTableIteratorClose(v74);
      brk_ObjClose(v75);
      return 2303729674;
    }
    uint64_t v31 = a4;
    uint64_t v32 = v25;
    uint64_t v33 = v16;
    unsigned int Size = vector_GetSize(v71);
    if (Size)
    {
      unsigned int v35 = Size;
      unsigned int v36 = 1;
      do
      {
        vector_GetElemAt(v30, v36 - 1, __s1);
        if (LH_stricmp((char *)&v76, __s1[0]))
        {
          BOOL v37 = 0;
        }
        else
        {
          BOOL v37 = LH_stricmp((char *)&v78, __s1[0] + 32) == 0;
          if (v37) {
            break;
          }
        }
      }
      while (v36++ < v35);
      if (v37)
      {
        uint64_t v16 = v33;
        unsigned int v25 = v32;
        a4 = v31;
        continue;
      }
    }
    uint64_t v16 = v33;
    unsigned int v25 = v32;
    a4 = v31;
    if (!vector_Add(v30, &v76))
    {
      uint64_t v63 = v71;
      goto LABEL_70;
    }
  }
  while ((brk_ComponentTableIteratorNext(v74) & 0x80000000) == 0);
LABEL_46:
  if (v66)
  {
    uint64_t v39 = v65;
    if (*v65)
    {
      unsigned int v40 = vector_GetSize(v71);
      if (v40 <= *v65) {
        uint64_t v23 = v23;
      }
      else {
        uint64_t v23 = 2303729673;
      }
      if (v40 >= *v65) {
        unsigned int v41 = *v65;
      }
      else {
        unsigned int v41 = v40;
      }
      if (v41)
      {
        unsigned int v42 = 0;
        int v43 = 0;
        do
        {
          vector_GetElemAt(v71, v42, &v70);
          uint64_t v44 = v66 + 200 * (unsigned __int16)v43;
          uint64_t v45 = v70;
          *(_OWORD *)uint64_t v44 = *v70;
          long long v46 = v45[4];
          long long v48 = v45[1];
          long long v47 = v45[2];
          *(_OWORD *)(v44 + 48) = v45[3];
          *(_OWORD *)(v44 + 64) = v46;
          *(_OWORD *)(v44 + 16) = v48;
          *(_OWORD *)(v44 + 32) = v47;
          long long v49 = v45[8];
          long long v51 = v45[5];
          long long v50 = v45[6];
          *(_OWORD *)(v44 + 112) = v45[7];
          *(_OWORD *)(v44 + 128) = v49;
          *(_OWORD *)(v44 + 80) = v51;
          *(_OWORD *)(v44 + 96) = v50;
          long long v53 = v45[10];
          long long v52 = v45[11];
          long long v54 = v45[9];
          *(void *)(v44 + 192) = *((void *)v45 + 24);
          *(_OWORD *)(v44 + 160) = v53;
          *(_OWORD *)(v44 + 176) = v52;
          *(_OWORD *)(v44 + 144) = v54;
          unsigned int v42 = (unsigned __int16)++v43;
        }
        while (v41 > (unsigned __int16)v43);
      }
    }
  }
  else
  {
    uint64_t v39 = v65;
  }
  unsigned int *v39 = vector_GetSize(v71);
  vector_ObjClose(v71);
  brk_ComponentTableIteratorClose(v74);
  brk_ObjClose(v75);
  log_OutText(v16[4], (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Get Voice List : End (%x, %u)", v59, v60, v61, v23);
  return v23;
}

uint64_t compquery_GetDocTypeList(uint64_t a1, int a2, uint64_t a3, char *a4, char *a5, _DWORD *a6)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  long long v52 = 0;
  uint64_t v53 = 0;
  uint64_t v11 = 2303729671;
  uint64_t v51 = 0;
  if ((safeh_HandleCheck(a1, a2, 348, 64) & 0x80000000) != 0) {
    return 2303729672;
  }
  uint64_t v66 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v55 = 0u;
  uint64_t v15 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v15 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Get Document List : Begin (%s, %s)", v12, v13, v14, a3);
  if (a3 && a4 && a6)
  {
    uint64_t v54 = 0;
    if (!*a6) {
      a5 = 0;
    }
    uint64_t v20 = brk_ObjOpen(a3, *(void *)(a1 + 24));
    if ((v20 & 0x80000000) != 0)
    {
      uint64_t v11 = v20;
      log_OutPublic(*(void *)(v15 + 32), (uint64_t)"COMPQUERY", 23008, "%s%s%s%x", v21, v22, v23, v24, "product");
    }
    else
    {
      uint64_t v11 = brk_ComponentTableIteratorOpen(v54, (uint64_t)"pipeline/*", (uint64_t)&v53);
      if ((v11 & 0x80000000) == 0)
      {
        if ((brk_ComponentTableIteratorNext(v53) & 0x80000000) != 0)
        {
          LODWORD(v25) = 0;
          goto LABEL_45;
        }
        long long v48 = a5;
        uint64_t v25 = 0;
        while (1)
        {
          uint64_t v66 = 0;
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v55 = 0u;
          uint64_t v26 = strhelper_SafeCpy((char *)&v55, "text", 0xFFFFFFFFFFFFFFFFLL, 0x20uLL);
          if ((v26 & 0x80000000) != 0) {
            return v26;
          }
          uint64_t v11 = strhelper_SafeCpy((char *)&v61 + 12, "Nuance Communications, Inc.", 0xFFFFFFFFFFFFFFFFLL, 0x40uLL);
          if ((v11 & 0x80000000) != 0) {
            return v11;
          }
          if ((brk_TagIteratorOpen(*(void *)(v15 + 24), v52, "PARAMETERS/*", 1, &v51) & 0x80000000) != 0) {
            goto LABEL_24;
          }
          long long v49 = 0;
          long long __s1 = 0;
          while ((brk_TagIteratorNext(v51, (uint64_t)&__s1, (uint64_t)&v49) & 0x80000000) == 0)
          {
            uint64_t v27 = __s1;
            if (__s1)
            {
              if (!strcmp(__s1, "language"))
              {
                size_t v29 = v49;
                uint64_t v28 = (char *)&v57;
                size_t v30 = 64;
                goto LABEL_21;
              }
              if (!strcmp(v27, "langversion"))
              {
                uint64_t v28 = (char *)&v65 + 12;
                size_t v29 = v49;
                size_t v30 = 12;
LABEL_21:
                uint64_t v11 = strhelper_SafeCpy(v28, v29, 0xFFFFFFFFFFFFFFFFLL, v30);
                if ((v11 & 0x80000000) != 0) {
                  return v11;
                }
              }
            }
          }
          brk_TagIteratorClose(v51);
          uint64_t v51 = 0;
LABEL_24:
          if (!LH_stricmp(a4, (char *)&v57))
          {
            if (v48)
            {
              uint64_t v31 = v25;
              if (v25)
              {
                uint64_t v25 = v25;
                uint64_t v32 = v48;
                while (LH_stricmp((char *)&v55, v32) || LH_stricmp((char *)&v57, v32 + 32))
                {
                  v32 += 184;
                  if (!--v25) {
                    goto LABEL_31;
                  }
                }
                uint64_t v25 = v31;
                goto LABEL_37;
              }
LABEL_31:
              if (*a6)
              {
                LODWORD(v25) = v31;
                if (v31 >= *a6)
                {
                  uint64_t v11 = 9;
                }
                else
                {
                  long long v33 = v64;
                  uint64_t v34 = &v48[184 * v31];
                  *((_OWORD *)v34 + 8) = v63;
                  *((_OWORD *)v34 + 9) = v33;
                  *((_OWORD *)v34 + 10) = v65;
                  *((void *)v34 + 22) = v66;
                  long long v35 = v60;
                  *((_OWORD *)v34 + 4) = v59;
                  *((_OWORD *)v34 + 5) = v35;
                  long long v36 = v62;
                  *((_OWORD *)v34 + 6) = v61;
                  *((_OWORD *)v34 + 7) = v36;
                  long long v37 = v56;
                  *(_OWORD *)uint64_t v34 = v55;
                  *((_OWORD *)v34 + 1) = v37;
                  long long v38 = v58;
                  *((_OWORD *)v34 + 2) = v57;
                  *((_OWORD *)v34 + 3) = v38;
                }
              }
              else
              {
                LODWORD(v25) = v31;
              }
            }
            uint64_t v25 = (v25 + 1);
          }
LABEL_37:
          if ((brk_ComponentTableIteratorNext(v53) & 0x80000000) != 0)
          {
LABEL_45:
            *a6 = v25;
            brk_ComponentTableIteratorClose(v53);
            brk_ObjClose(v54);
            log_OutText(*(void *)(v15 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Get Document List : End (%x, %u)", v43, v44, v45, v11);
            return v11;
          }
        }
      }
      brk_ObjClose(v54);
      log_OutPublic(*(void *)(v15 + 32), (uint64_t)"COMPQUERY", 23011, "%s%s%s%x", v39, v40, v41, v42, "product");
    }
  }
  else
  {
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"COMPQUERY", 23014, 0, v16, v17, v18, v19, v47);
  }
  return v11;
}

uint64_t compquery_GetSpeechDBList(uint64_t a1, int a2, uint64_t a3, char *a4, char *a5, _OWORD *a6, unsigned int *a7)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v71 = 0;
  if ((safeh_HandleCheck(a1, a2, 348, 64) & 0x80000000) != 0) {
    return 2303729672;
  }
  long long v83 = 0u;
  memset(v84, 0, 30);
  long long v81 = 0u;
  long long v82 = 0u;
  long long v80 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v75 = 0u;
  uint64_t v16 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v16 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Get Speech DB List : Begin (%s, %s, %s)", v13, v14, v15, a3);
  if (!a4 || !a3 || !a5 || !a7)
  {
    log_OutPublic(*(void *)(v16 + 32), (uint64_t)"COMPQUERY", 23016, 0, v17, v18, v19, v20, v64);
    return 2303729671;
  }
  uint64_t v74 = 0;
  if (*a7) {
    uint64_t v21 = a6;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = brk_ObjOpen(a3, *(void *)(a1 + 24));
  if ((v22 & 0x80000000) != 0)
  {
    uint64_t v27 = v22;
    log_OutPublic(*(void *)(v16 + 32), (uint64_t)"COMPQUERY", 23008, "%s%s%s%x", v23, v24, v25, v26, "product");
    return v27;
  }
  uint64_t v27 = brk_ComponentTableIteratorOpen(v74, (uint64_t)"pipeline/*", (uint64_t)&v73);
  if ((v27 & 0x80000000) != 0)
  {
    brk_ObjClose(v74);
    log_OutPublic(*(void *)(v16 + 32), (uint64_t)"COMPQUERY", 23010, "%s%s%s%x", v45, v46, v47, v48, "product");
    return v27;
  }
  if (v21 && (uint64_t v28 = *a7, v28))
  {
    uint64_t v29 = heap_Calloc(*(void **)(v16 + 8), v28, 176);
    if (!v29) {
      return 2303729674;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  if ((brk_ComponentTableIteratorNext(v73) & 0x80000000) == 0)
  {
    unsigned int v67 = 0;
    uint64_t v65 = v29 + 96;
    while (1)
    {
      long long v83 = 0u;
      memset(v84, 0, 30);
      long long v81 = 0u;
      long long v82 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v75 = 0u;
      if ((brk_TagIteratorOpen(*(void *)(v16 + 24), v72, "PARAMETERS/*", 1, &v71) & 0x80000000) == 0) {
        break;
      }
LABEL_41:
      __int16 v70 = 0;
      compquery_loc_BrkTagQueryU16(*(void *)(v16 + 24), (uint64_t)v72, &v70);
      if (!LH_stricmp(a4, (char *)&v75) && !LH_stricmp(a5, (char *)&v79))
      {
        uint64_t v66 = v29;
        if (v29 && v67)
        {
          uint64_t v34 = v67;
          uint64_t v35 = v65;
          while (LH_stricmp((char *)&v75, (char *)(v35 - 96))
               || LH_stricmp((char *)&v79, (char *)(v35 - 32))
               || LH_stricmp((char *)&v81 + 12, (char *)(v35 + 12))
               || LH_stricmp((char *)&v83 + 12, (char *)(v35 + 44))
               || LH_stricmp((char *)&v81, (char *)v35)
               || WORD6(v84[1]) != *(unsigned __int16 *)(v35 + 76))
          {
            v35 += 176;
            if (!--v34) {
              goto LABEL_53;
            }
          }
          uint64_t v29 = v66;
        }
        else
        {
LABEL_53:
          if (v21 && *a7)
          {
            uint64_t v29 = v66;
            if (v67 >= *a7)
            {
              uint64_t v27 = 9;
            }
            else
            {
              uint64_t v36 = v66 + 176 * v67;
              long long v37 = v75;
              long long v38 = v77;
              *(_OWORD *)(v36 + 16) = v76;
              *(_OWORD *)(v36 + 32) = v38;
              *(_OWORD *)uint64_t v36 = v37;
              long long v39 = v78;
              long long v40 = v79;
              long long v41 = v81;
              *(_OWORD *)(v36 + 80) = v80;
              *(_OWORD *)(v36 + 96) = v41;
              *(_OWORD *)(v36 + 48) = v39;
              *(_OWORD *)(v36 + 64) = v40;
              long long v42 = v82;
              long long v43 = v83;
              long long v44 = v84[0];
              *(_OWORD *)(v36 + 158) = *(_OWORD *)((char *)v84 + 14);
              *(_OWORD *)(v36 + 128) = v43;
              *(_OWORD *)(v36 + 144) = v44;
              *(_OWORD *)(v36 + 112) = v42;
              *(_WORD *)(v36 + 174) = v70;
            }
          }
          else
          {
            uint64_t v29 = v66;
          }
          ++v67;
        }
      }
      if ((brk_ComponentTableIteratorNext(v73) & 0x80000000) != 0)
      {
        if (v29)
        {
          unsigned int v49 = v67;
          uint64_t v50 = v67;
          ssft_qsort(v29, v67, 176, (uint64_t (*)(unint64_t, unint64_t))compare_speechdbinfoprio);
          if (v67)
          {
            uint64_t v51 = (long long *)v29;
            do
            {
              long long v52 = *v51;
              long long v53 = v51[2];
              v21[1] = v51[1];
              v21[2] = v53;
              *uint64_t v21 = v52;
              long long v54 = v51[3];
              long long v55 = v51[4];
              long long v56 = v51[6];
              v21[5] = v51[5];
              v21[6] = v56;
              v21[3] = v54;
              v21[4] = v55;
              long long v57 = v51[7];
              long long v58 = v51[8];
              long long v59 = v51[9];
              *(_OWORD *)((char *)v21 + 158) = *(long long *)((char *)v51 + 158);
              _OWORD v21[8] = v58;
              v21[9] = v59;
              v21[7] = v57;
              uint64_t v21 = (_OWORD *)((char *)v21 + 174);
              v51 += 11;
              --v50;
            }
            while (v50);
          }
LABEL_66:
          heap_Free(*(void **)(v16 + 8), v29);
        }
        else
        {
          unsigned int v49 = v67;
        }
        goto LABEL_74;
      }
    }
    long long v68 = 0;
    long long __s1 = 0;
    while (1)
    {
      while (1)
      {
        do
        {
          if ((brk_TagIteratorNext(v71, (uint64_t)&__s1, (uint64_t)&v68) & 0x80000000) != 0)
          {
            brk_TagIteratorClose(v71);
            uint64_t v71 = 0;
            goto LABEL_41;
          }
          size_t v30 = __s1;
        }
        while (!__s1);
        if (strcmp(__s1, "language")) {
          break;
        }
        uint64_t v31 = v68;
        uint64_t v32 = (char *)&v75;
        size_t v33 = 64;
LABEL_38:
        uint64_t v27 = strhelper_SafeCpy(v32, v31, 0xFFFFFFFFFFFFFFFFLL, v33);
        if ((v27 & 0x80000000) != 0) {
          return v27;
        }
      }
      if (!strcmp(v30, "voice"))
      {
        uint64_t v32 = (char *)&v79;
        uint64_t v31 = v68;
LABEL_37:
        size_t v33 = 32;
        goto LABEL_38;
      }
      if (!strcmp(v30, "vopversion"))
      {
        uint64_t v31 = v68;
        uint64_t v32 = (char *)&v81;
        size_t v33 = 12;
        goto LABEL_38;
      }
      if (!strcmp(v30, "voicemodel"))
      {
        uint64_t v31 = v68;
        uint64_t v32 = (char *)&v81 + 12;
        goto LABEL_37;
      }
      if (!strcmp(v30, "voiceoperatingpoint"))
      {
        uint64_t v31 = v68;
        uint64_t v32 = (char *)&v83 + 12;
        goto LABEL_37;
      }
      if (!strcmp(v30, "frequencyhz")) {
        WORD6(v84[1]) = LH_atou(v68) / 0x3E8;
      }
    }
  }
  if (v29)
  {
    ssft_qsort(v29, 0, 176, (uint64_t (*)(unint64_t, unint64_t))compare_speechdbinfoprio);
    unsigned int v49 = 0;
    goto LABEL_66;
  }
  unsigned int v49 = 0;
LABEL_74:
  *a7 = v49;
  brk_ComponentTableIteratorClose(v73);
  brk_ObjClose(v74);
  log_OutText(*(void *)(v16 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Get Speech DB List : End (%x, %u)", v60, v61, v62, v27);
  return v27;
}

uint64_t compquery_loc_BrkTagQueryU16(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v6 = 0;
  uint64_t result = brk_TagQueryEx(a1, a2, (uint64_t)"PRIORITY", 1, (uint64_t)&v6);
  if ((result & 0x80000000) != 0 || (uint64_t result = (uint64_t)v6) == 0)
  {
    *a3 = 0;
  }
  else
  {
    *a3 = (unsigned __int16)LH_atou(v6);
    return brk_TagRelease(a1, (uint64_t)v6);
  }
  return result;
}

uint64_t compare_speechdbinfoprio(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 174) - *(unsigned __int16 *)(a1 + 174);
}

uint64_t compquery_FindVoice(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  return compquery_RescanIfNeededAndFindVoice(a1, a2, a3, a4, a5, 1);
}

uint64_t compquery_RescanIfNeededAndFindVoice(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5, int a6)
{
  uint64_t Voice = compquery_loc_FindVoice(a1, a2, a3, a4, a5, a6);
  if ((Voice & 0x80000000) != 0)
  {
    uint64_t v21 = 0;
    if ((safeh_HandleCheck(a1, a2, 348, 64) & 0x80000000) != 0)
    {
      return 2303729672;
    }
    else if (*(_DWORD *)(a1 + 40))
    {
      uint64_t v14 = critsec_Enter(*(void **)(a1 + 56));
      if ((v14 & 0x80000000) != 0)
      {
        return v14;
      }
      else
      {
        uint64_t v21 = osspi_time(*(void *)(*(void *)(a1 + 16) + 64), &v21);
        uint64_t v18 = v21 - *(void *)(a1 + 48);
        if (v18 > *(unsigned int *)(a1 + 40))
        {
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Find Voice : Time for a rescan. Delta (%ld) seconds", v15, v16, v17, v18);
          if ((brk_ClassUpdate(*(void *)(a1 + 24)) & 0x80000000) == 0)
          {
            LODWORD(Voice) = compquery_loc_FindVoice(a1, a2, a3, a4, a5, a6);
            *(void *)(a1 + 48) = v21;
          }
        }
        int v19 = critsec_Leave(*(void **)(a1 + 56));
        if ((int)Voice > -1 && v19 < 0) {
          return v19;
        }
        else {
          return Voice;
        }
      }
    }
  }
  return Voice;
}

uint64_t compquery_FindVoiceEx(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  return compquery_RescanIfNeededAndFindVoice(a1, a2, a3, a4, a5, 0);
}

uint64_t compquery_GetMatchingVoices(uint64_t a1, int a2, void *a3, void *a4, uint64_t a5, char *a6, size_t a7)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  PrintableVoiceDescriptiouint64_t n = 2303729671;
  if ((safeh_HandleCheck(a1, a2, 348, 64) & 0x80000000) != 0) {
    return 2303729672;
  }
  if (a5)
  {
    memcpy(__dst, *(const void **)(a1 + 16), sizeof(__dst));
    if (a3) {
      __dst[3] = a3;
    }
    if (a4) {
      __dst[5] = a4;
    }
    uint64_t v17 = __dst[4];
    log_OutText((uint64_t)__dst[4], (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"compquery_GetMatchingVoices : Begin", v14, v15, v16, v52);
    long long v58 = 0;
    uint64_t v59 = 0;
    __int16 v57 = 0;
    if (!a6 || !a7)
    {
      log_OutPublic((uint64_t)v17, (uint64_t)"COMPQUERY", 23010, "%s%x", v18, v19, v20, v21, "lherror");
      goto LABEL_19;
    }
    *a6 = 0;
    if (compquery_loc_IsLanguageIETF((const char *)a5))
    {
      uint64_t OldParameters = strhelper_SafeCpy((char *)(a5 + 72), (char *)a5, 0xFFFFFFFFFFFFFFFFLL, 0x40uLL);
      if ((OldParameters & 0x80000000) != 0) {
        goto LABEL_18;
      }
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)(a5 + 48) = 0u;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
    }
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    memset(v60, 0, sizeof(v60));
    memset(v65, 0, sizeof(v65));
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    uint64_t OldParameters = compquery_loc_GetOldParameters((uint64_t)__dst, (size_t)v60);
    if ((OldParameters & 0x80000000) == 0)
    {
      if (compquery_loc_CompareParameters((char *)a5, (uint64_t)v60))
      {
        PrintableVoiceDescriptiouint64_t n = strhelper_SafeCpy(a6, (char *)v61, 0xFFFFFFFFFFFFFFFFLL, a7);
        if ((PrintableVoiceDescription & 0x80000000) != 0) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v28 = __dst[1];
        uint64_t v29 = heap_Calloc(__dst[1], 128, 16);
        if (!v29)
        {
          PrintableVoiceDescriptiouint64_t n = 2303729674;
          log_OutPublic((uint64_t)v17, (uint64_t)"COMPQUERY", 23010, "%s%x", v30, v31, v32, v33, "lherror");
          goto LABEL_19;
        }
        uint64_t v34 = (const char **)v29;
        PrintableVoiceDescriptiouint64_t n = brk_ComponentTableIteratorOpen((uint64_t)__dst[3], (uint64_t)"pipeline/*", (uint64_t)&v59);
        if ((PrintableVoiceDescription & 0x80000000) != 0)
        {
          log_OutPublic((uint64_t)v17, (uint64_t)"COMPQUERY", 23010, "%s%x", v35, v36, v37, v38, "lherror");
        }
        else
        {
          size_t v55 = a7;
          unint64_t v39 = 0;
          while ((brk_ComponentTableIteratorNext(v59) & 0x80000000) == 0)
          {
            compquery_loc_GetParametersFromBrokerString((uint64_t)__dst, v58, (size_t)v65, &v57);
            if (compquery_loc_CompareParameters((char *)a5, (uint64_t)v65))
            {
              int CurrentScore = compquery_loc_GetCurrentScore((uint64_t)v60, (uint64_t)v65);
              log_OutText((uint64_t)v17, (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Pipeline %s: score %u", v41, v42, v43, (uint64_t)v58);
              long long v44 = (const char *)strhelper_Strdup((uint64_t)v28, (char *)v66);
              uint64_t v45 = &v34[2 * v39];
              *uint64_t v45 = v44;
              *((_WORD *)v45 + 6) = v57;
              *((_DWORD *)v45 + 2) = CurrentScore;
              ++v39;
            }
            if (v39 >= 0x80)
            {
              brk_ComponentTableIteratorClose(v59);
              goto LABEL_32;
            }
          }
          brk_ComponentTableIteratorClose(v59);
          if (!v39) {
            goto LABEL_47;
          }
LABEL_32:
          long long v54 = v28;
          ssft_qsort((uint64_t)v34, v39, 16, (uint64_t (*)(unint64_t, unint64_t))compquery_loc_CompareVoiceScores);
          unint64_t v46 = 0;
          size_t v47 = a7;
          do
          {
            if (v46)
            {
              uint64_t v48 = v34[2 * v46];
              unsigned int v49 = v34;
              unint64_t v50 = v46;
              while (strcmp(*v34, v48))
              {
                v34 += 2;
                if (!--v50)
                {
                  size_t v47 = v55;
                  strhelper_SafeCat(a6, ",", 0xFFFFFFFFFFFFFFFFLL, v55);
                  uint64_t v34 = v49;
                  goto LABEL_38;
                }
              }
              uint64_t v34 = v49;
              size_t v47 = v55;
            }
            else
            {
LABEL_38:
              LODWORD(PrintableVoiceDescription) = strhelper_SafeCat(a6, (char *)v34[2 * v46], 0xFFFFFFFFFFFFFFFFLL, v47);
            }
            ++v46;
          }
          while (v46 < v39 && (PrintableVoiceDescription & 0x80000000) == 0);
          uint64_t v28 = v54;
          uint64_t v51 = (uint64_t *)v34;
          do
          {
            if (*v51) {
              heap_Free(v54, *v51);
            }
            v51 += 2;
            --v39;
          }
          while (v39);
          PrintableVoiceDescriptiouint64_t n = 0;
        }
LABEL_47:
        heap_Free(v28, (uint64_t)v34);
        if ((PrintableVoiceDescription & 0x80000000) != 0) {
          goto LABEL_19;
        }
      }
      if (*a6)
      {
LABEL_51:
        log_OutText((uint64_t)v17, (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"compquery_GetMatchingVoices : End (%x)", v24, v25, v26, PrintableVoiceDescription);
        return PrintableVoiceDescription;
      }
      PrintableVoiceDescriptiouint64_t n = compquery_GetPrintableVoiceDescription((char *)v60, (char *)a5, 0x800uLL);
      if ((PrintableVoiceDescription & 0x80000000) == 0)
      {
        log_OutText((uint64_t)v17, (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Could not find a voice that matches the following description: %s", v24, v25, v26, (uint64_t)v60);
        goto LABEL_51;
      }
LABEL_19:
      log_OutPublic((uint64_t)v17, (uint64_t)"COMPQUERY", 23000, 0, v23, v24, v25, v26, v53);
      return PrintableVoiceDescription;
    }
LABEL_18:
    PrintableVoiceDescriptiouint64_t n = OldParameters;
    goto LABEL_19;
  }
  return PrintableVoiceDescription;
}

uint64_t compquery_GetPrintableVoiceDescription(char *a1, char *a2, size_t a3)
{
  uint64_t result = strhelper_SafeCpy(a1, "[", 0xFFFFFFFFFFFFFFFFLL, a3);
  if ((result & 0x80000000) == 0)
  {
    if (a2[136])
    {
      if (strlen(a1) >= 2) {
        strhelper_SafeCat(a1, ", ", 0xFFFFFFFFFFFFFFFFLL, a3);
      }
      strhelper_SafeCat(a1, "voice:", 0xFFFFFFFFFFFFFFFFLL, a3);
      strhelper_SafeCat(a1, a2 + 136, 0xFFFFFFFFFFFFFFFFLL, a3);
    }
    if (*a2)
    {
      if (strlen(a1) >= 2) {
        strhelper_SafeCat(a1, ", ", 0xFFFFFFFFFFFFFFFFLL, a3);
      }
      strhelper_SafeCat(a1, "language:", 0xFFFFFFFFFFFFFFFFLL, a3);
      strhelper_SafeCat(a1, a2, 0xFFFFFFFFFFFFFFFFLL, a3);
    }
    if (a2[64])
    {
      if (strlen(a1) >= 2) {
        strhelper_SafeCat(a1, ", ", 0xFFFFFFFFFFFFFFFFLL, a3);
      }
      strhelper_SafeCat(a1, "languageCode:", 0xFFFFFFFFFFFFFFFFLL, a3);
      strhelper_SafeCat(a1, a2 + 64, 0xFFFFFFFFFFFFFFFFLL, a3);
    }
    if (a2[72])
    {
      if (strlen(a1) >= 2) {
        strhelper_SafeCat(a1, ", ", 0xFFFFFFFFFFFFFFFFLL, a3);
      }
      strhelper_SafeCat(a1, "languageIETF:", 0xFFFFFFFFFFFFFFFFLL, a3);
      strhelper_SafeCat(a1, a2 + 72, 0xFFFFFFFFFFFFFFFFLL, a3);
    }
    if (a2[320])
    {
      if (strlen(a1) >= 2) {
        strhelper_SafeCat(a1, ", ", 0xFFFFFFFFFFFFFFFFLL, a3);
      }
      strhelper_SafeCat(a1, "languageGroup:", 0xFFFFFFFFFFFFFFFFLL, a3);
      strhelper_SafeCat(a1, a2 + 320, 0xFFFFFFFFFFFFFFFFLL, a3);
    }
    if (a2[168])
    {
      if (strlen(a1) >= 2) {
        strhelper_SafeCat(a1, ", ", 0xFFFFFFFFFFFFFFFFLL, a3);
      }
      strhelper_SafeCat(a1, "gender:", 0xFFFFFFFFFFFFFFFFLL, a3);
      strhelper_SafeCat(a1, a2 + 168, 0xFFFFFFFFFFFFFFFFLL, a3);
    }
    if (a2[308])
    {
      if (strlen(a1) >= 2) {
        strhelper_SafeCat(a1, ", ", 0xFFFFFFFFFFFFFFFFLL, a3);
      }
      strhelper_SafeCat(a1, "age:", 0xFFFFFFFFFFFFFFFFLL, a3);
      strhelper_SafeCat(a1, a2 + 308, 0xFFFFFFFFFFFFFFFFLL, a3);
    }
    if (a2[188])
    {
      if (strlen(a1) >= 2) {
        strhelper_SafeCat(a1, ", ", 0xFFFFFFFFFFFFFFFFLL, a3);
      }
      strhelper_SafeCat(a1, "voiceModel:", 0xFFFFFFFFFFFFFFFFLL, a3);
      strhelper_SafeCat(a1, a2 + 188, 0xFFFFFFFFFFFFFFFFLL, a3);
    }
    if (a2[220])
    {
      if (strlen(a1) >= 2) {
        strhelper_SafeCat(a1, ", ", 0xFFFFFFFFFFFFFFFFLL, a3);
      }
      strhelper_SafeCat(a1, "voiceOperatingPoint:", 0xFFFFFFFFFFFFFFFFLL, a3);
      strhelper_SafeCat(a1, a2 + 220, 0xFFFFFFFFFFFFFFFFLL, a3);
    }
    if (a2[276])
    {
      if (strlen(a1) >= 2) {
        strhelper_SafeCat(a1, ", ", 0xFFFFFFFFFFFFFFFFLL, a3);
      }
      strhelper_SafeCat(a1, "docType:", 0xFFFFFFFFFFFFFFFFLL, a3);
      strhelper_SafeCat(a1, a2 + 276, 0xFFFFFFFFFFFFFFFFLL, a3);
    }
    if (a2[292])
    {
      uint64_t v7 = a2 + 292;
      if (strlen(a1) >= 2) {
        strhelper_SafeCat(a1, ", ", 0xFFFFFFFFFFFFFFFFLL, a3);
      }
      strhelper_SafeCat(a1, "outputType:", 0xFFFFFFFFFFFFFFFFLL, a3);
      strhelper_SafeCat(a1, v7, 0xFFFFFFFFFFFFFFFFLL, a3);
    }
    return strhelper_SafeCat(a1, "]", 0xFFFFFFFFFFFFFFFFLL, a3);
  }
  return result;
}

uint64_t compquery_GetPipelineName(uint64_t a1, int a2, uint64_t a3, unsigned int a4, char *a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v9 = 2303729673;
  unsigned int v10 = safeh_HandleCheck(a1, a2, 348, 64);
  if ((v10 & 0x80000000) != 0) {
    return 2303729672;
  }
  if (!a3) {
    return 2303729671;
  }
  unsigned int v14 = v10;
  uint64_t v15 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v15 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"GetPipelineName : Begin", v11, v12, v13, v38);
  if (a5) {
    *a5 = 0;
  }
  size_t v16 = strlen((const char *)(a3 + 220));
  size_t v17 = strlen((const char *)(a3 + 328));
  if (v17 && !strcmp((const char *)(a3 + 328), "0.0.0")) {
    size_t v17 = 0;
  }
  unsigned int v18 = *(_DWORD *)(a3 + 184);
  if (v18 <= 0x3E8) {
    unsigned int v19 = *(_DWORD *)(a3 + 184);
  }
  else {
    unsigned int v19 = v18 / 0x3E8;
  }
  LH_utoa(v19, __s, 0xAu);
  if (a5)
  {
    unsigned int v39 = v14;
    size_t v40 = strlen((const char *)a3);
    size_t v23 = strlen((const char *)(a3 + 136));
    size_t v24 = strlen(__s);
    unsigned int v25 = a4;
    uint64_t v26 = v15;
    size_t v27 = strlen((const char *)(a3 + 276));
    size_t v28 = strlen((const char *)(a3 + 292));
    size_t v29 = v24 + v27;
    uint64_t v15 = v26;
    if (v16 + v17 + v40 + v23 + v29 + v28 + 16 <= v25)
    {
      strcpy(a5, "pipeline/");
      uint64_t v30 = strcat(a5, (const char *)a3);
      *(_WORD *)&a5[strlen(v30)] = 47;
      uint64_t v31 = strcat(a5, (const char *)(a3 + 136));
      *(_WORD *)&a5[strlen(v31)] = 47;
      uint64_t v32 = strcat(a5, __s);
      *(_WORD *)&a5[strlen(v32)] = 47;
      if (v16) {
        uint64_t v33 = (const char *)(a3 + 220);
      }
      else {
        uint64_t v33 = (const char *)(a3 + 188);
      }
      uint64_t v34 = strcat(a5, v33);
      *(_WORD *)&a5[strlen(v34)] = 47;
      if (v17)
      {
        uint64_t v35 = strcat(a5, (const char *)(a3 + 328));
        *(_WORD *)&a5[strlen(v35)] = 47;
      }
      uint64_t v36 = strcat(a5, (const char *)(a3 + 276));
      *(_WORD *)&a5[strlen(v36)] = 47;
      strcat(a5, (const char *)(a3 + 292));
      uint64_t v9 = v39;
    }
  }
  log_OutText(*(void *)(v15 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"GetPipelineName : End (%x, %s)", v20, v21, v22, v9);
  return v9;
}

uint64_t compquery_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2303729665;
  }
  uint64_t result = 0;
  *a2 = &ICompQuery;
  return result;
}

uint64_t compquery_loc_FindVoice(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5, int a6)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  PrintableVoiceDescriptiouint64_t n = 2303729677;
  if ((safeh_HandleCheck(a1, a2, 348, 64) & 0x80000000) != 0) {
    return 2303729672;
  }
  if (!a5) {
    return 2303729671;
  }
  memcpy(__dst, *(const void **)(a1 + 16), sizeof(__dst));
  if (a3) {
    __dst[3] = a3;
  }
  if (a4) {
    __dst[5] = a4;
  }
  memcpy(__src, a5, 0x154uLL);
  uint64_t v12 = __dst[4];
  log_OutText(__dst[4], (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"compquery_loc_FindVoice : Begin", v13, v14, v15, v62);
  uint64_t v76 = 0;
  long long v75 = 0;
  log_OutText(v12, (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"compquery_loc_MatchVoice", v16, v17, v18, v63);
  if (compquery_loc_IsLanguageIETF((const char *)__src))
  {
    uint64_t v19 = strhelper_SafeCpy((char *)&__src[4] + 8, (char *)__src, 0xFFFFFFFFFFFFFFFFLL, 0x40uLL);
    if ((v19 & 0x80000000) != 0)
    {
      PrintableVoiceDescriptiouint64_t n = v19;
      goto LABEL_84;
    }
    memset(__src, 0, 64);
  }
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  uint64_t OldParameters = compquery_loc_GetOldParameters((uint64_t)__dst, (size_t)&v86);
  if ((OldParameters & 0x80000000) != 0) {
    goto LABEL_57;
  }
  unsigned __int16 v77 = 0;
  log_OutText(v12, (uint64_t)"COMPQUERY", 3, 0, (uint64_t)"FindVoice: requested %s, %s, %s, %s, %s, %s, %s, %u, %s, %s, %s, %s, %s, %s", v24, v25, v26, (uint64_t)__src);
  uint64_t v30 = (char *)v86;
  if (!(void)v86) {
    uint64_t v30 = &byte_20D5A22AE;
  }
  log_OutText(v12, (uint64_t)"COMPQUERY", 3, 0, (uint64_t)"FindVoice: currently %s, %s, %s, %s, %s, %s, %s, %u, %s, %s", v27, v28, v29, (uint64_t)v30);
  if (compquery_loc_CompareParameters((char *)__src, (uint64_t)&v86))
  {
    uint64_t v31 = (char *)v86;
    uint64_t v72 = (char *)v87;
    uint64_t v73 = (char *)*((void *)&v86 + 1);
    uint64_t v70 = (char *)v88;
    uint64_t v71 = (char *)*((void *)&v87 + 1);
    long long v68 = (char *)v89;
    long long v69 = (char *)*((void *)&v88 + 1);
    int v67 = DWORD2(v89);
    uint64_t v32 = (char *)*((void *)&v90 + 1);
    long long v66 = (char *)v90;
    uint64_t v33 = (char *)*((void *)&v91 + 1);
  }
  else
  {
    uint64_t v48 = brk_ComponentTableIteratorOpen(__dst[3], (uint64_t)"pipeline/*", (uint64_t)&v76);
    if ((v48 & 0x80000000) != 0)
    {
      uint64_t v61 = v48;
      log_OutPublic(v12, (uint64_t)"COMPQUERY", 23010, "%s%x", v49, v50, v51, v52, "lherror");
      PrintableVoiceDescriptiouint64_t n = v61;
      goto LABEL_58;
    }
    if ((brk_ComponentTableIteratorNext(v76) & 0x80000000) != 0)
    {
      brk_ComponentTableIteratorClose(v76);
      goto LABEL_58;
    }
    unsigned int v53 = 0;
    unsigned __int16 v54 = 0;
    int v55 = 0;
    long long v64 = 0;
    uint64_t v65 = 0;
    long long v66 = 0;
    int v67 = 0;
    long long v68 = 0;
    long long v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v31 = 0;
    do
    {
      compquery_loc_GetParametersFromBrokerString((uint64_t)__dst, v75, (size_t)&v80, &v77);
      if (compquery_loc_CompareParameters((char *)__src, (uint64_t)&v80))
      {
        unsigned int CurrentScore = compquery_loc_GetCurrentScore((uint64_t)&v86, (uint64_t)&v80);
        log_OutText(v12, (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Pipeline %s: score %u", v57, v58, v59, (uint64_t)v75);
        if (v55 && CurrentScore < v53 && v77 <= v54)
        {
          int v55 = 1;
        }
        else if (CurrentScore != v53 || v77 > v54)
        {
          uint64_t v31 = (char *)v80;
          uint64_t v72 = (char *)v81;
          uint64_t v73 = (char *)*((void *)&v80 + 1);
          uint64_t v70 = (char *)v82;
          uint64_t v71 = (char *)*((void *)&v81 + 1);
          long long v68 = (char *)v83;
          long long v69 = (char *)*((void *)&v82 + 1);
          int v67 = DWORD2(v83);
          long long v66 = (char *)v84;
          int v55 = 1;
          unsigned __int16 v54 = v77;
          unsigned int v53 = CurrentScore;
          long long v64 = (char *)*((void *)&v85 + 1);
          uint64_t v65 = (char *)*((void *)&v84 + 1);
        }
      }
    }
    while ((brk_ComponentTableIteratorNext(v76) & 0x80000000) == 0);
    brk_ComponentTableIteratorClose(v76);
    uint64_t v33 = v64;
    uint64_t v32 = v65;
    if (!v55) {
      goto LABEL_58;
    }
  }
  uint64_t v34 = v31 ? v31 : &byte_20D5A22AE;
  uint64_t OldParameters = strhelper_SafeCpy((char *)__src, v34, 0xFFFFFFFFFFFFFFFFLL, 0x40uLL);
  if ((OldParameters & 0x80000000) != 0) {
    goto LABEL_57;
  }
  uint64_t v35 = v73 ? v73 : &byte_20D5A22AE;
  uint64_t OldParameters = strhelper_SafeCpy((char *)&__src[4], v35, 0xFFFFFFFFFFFFFFFFLL, 8uLL);
  if ((OldParameters & 0x80000000) != 0) {
    goto LABEL_57;
  }
  uint64_t v36 = v72 ? v72 : &byte_20D5A22AE;
  uint64_t OldParameters = strhelper_SafeCpy((char *)&__src[4] + 8, v36, 0xFFFFFFFFFFFFFFFFLL, 0x40uLL);
  if ((OldParameters & 0x80000000) != 0) {
    goto LABEL_57;
  }
  uint64_t v37 = v71 ? v71 : &byte_20D5A22AE;
  uint64_t OldParameters = strhelper_SafeCpy((char *)&__src[20], v37, 0xFFFFFFFFFFFFFFFFLL, 8uLL);
  if ((OldParameters & 0x80000000) != 0) {
    goto LABEL_57;
  }
  uint64_t v38 = v70 ? v70 : &byte_20D5A22AE;
  uint64_t OldParameters = strhelper_SafeCpy((char *)&__src[8] + 8, v38, 0xFFFFFFFFFFFFFFFFLL, 0x20uLL);
  if ((OldParameters & 0x80000000) != 0) {
    goto LABEL_57;
  }
  unsigned int v39 = v69 ? v69 : &byte_20D5A22AE;
  uint64_t OldParameters = strhelper_SafeCpy((char *)&__src[10] + 8, v39, 0xFFFFFFFFFFFFFFFFLL, 0x10uLL);
  if ((OldParameters & 0x80000000) != 0
    || (v68 ? (size_t v40 = v68) : (size_t v40 = &byte_20D5A22AE),
        (uint64_t OldParameters = strhelper_SafeCpy((char *)&__src[19] + 4, v40, 0xFFFFFFFFFFFFFFFFLL, 0xCuLL),
         (OldParameters & 0x80000000) != 0)
     || ((DWORD2(__src[11]) = v67, v66) ? (uint64_t v41 = v66) : (uint64_t v41 = &byte_20D5A22AE),
         (uint64_t OldParameters = strhelper_SafeCpy((char *)&__src[11] + 12, v41, 0xFFFFFFFFFFFFFFFFLL, 0x20uLL),
          (OldParameters & 0x80000000) != 0)
      || (v32 ? (uint64_t v42 = v32) : (uint64_t v42 = &byte_20D5A22AE),
          uint64_t OldParameters = strhelper_SafeCpy((char *)&__src[13] + 12, v42, 0xFFFFFFFFFFFFFFFFLL, 0x20uLL),
          (OldParameters & 0x80000000) != 0))))
  {
LABEL_57:
    PrintableVoiceDescriptiouint64_t n = OldParameters;
LABEL_58:
    if (!a6)
    {
      uint64_t v12 = __dst[4];
      log_OutText(__dst[4], (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"compquery_loc_MatchVoice : End (%x)", v24, v25, v26, PrintableVoiceDescription);
      goto LABEL_84;
    }
    PrintableVoiceDescriptiouint64_t n = compquery_GetPrintableVoiceDescription(v79, (char *)__src, 0x800uLL);
    if ((PrintableVoiceDescription & 0x80000000) != 0)
    {
      uint64_t v12 = __dst[4];
      goto LABEL_84;
    }
    uint64_t v12 = __dst[4];
    log_OutPublic(__dst[4], (uint64_t)"COMPQUERY", 23004, "%s%s", v47, v20, v21, v22, "description");
    goto LABEL_61;
  }
  if (v33) {
    uint64_t v43 = v33;
  }
  else {
    uint64_t v43 = &byte_20D5A22AE;
  }
  PrintableVoiceDescriptiouint64_t n = strhelper_SafeCpy((char *)&__src[20] + 8, v43, 0xFFFFFFFFFFFFFFFFLL, 0xCuLL);
  if ((PrintableVoiceDescription & 0x80000000) != 0) {
    goto LABEL_58;
  }
  uint64_t v12 = __dst[4];
  log_OutText(__dst[4], (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"Found voice: %s, %s, %s, %s, %s, %s, %s, %u, %s, %s", v24, v25, v26, (uint64_t)__src);
LABEL_61:
  log_OutText(v12, (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"compquery_loc_MatchVoice : End (%x)", v44, v45, v46, PrintableVoiceDescription);
  if (BYTE4(__src[17])
    || (PrintableVoiceDescriptiouint64_t n = strhelper_SafeCpy((char *)&__src[17] + 4, "text", 0xFFFFFFFFFFFFFFFFLL, 0x10uLL),
        (PrintableVoiceDescription & 0x80000000) == 0))
  {
    if (BYTE4(__src[18])
      || (PrintableVoiceDescriptiouint64_t n = strhelper_SafeCpy((char *)&__src[18] + 4, "pcm", 0xFFFFFFFFFFFFFFFFLL, 0x10uLL),
          (PrintableVoiceDescription & 0x80000000) == 0))
    {
      memcpy(a5, __src, 0x154uLL);
LABEL_84:
      log_OutText(v12, (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"compquery_loc_FindVoice : End (%x)", v20, v21, v22, PrintableVoiceDescription);
    }
  }
  return PrintableVoiceDescription;
}

uint64_t compquery_loc_IsLanguageIETF(const char *a1)
{
  if (strlen(a1) != 5) {
    return 0;
  }
  unsigned int v2 = *a1;
  if ((v2 & 0x80000000) != 0)
  {
    if (!__maskrune(v2, 0x100uLL)) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v2 + 60) & 0x100) == 0)
  {
    return 0;
  }
  unsigned int v3 = a1[1];
  if ((v3 & 0x80000000) != 0)
  {
    if (!__maskrune(v3, 0x100uLL)) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v3 + 60) & 0x100) == 0)
  {
    return 0;
  }
  if (a1[2] == 45)
  {
    unsigned int v4 = a1[3];
    uint64_t v5 = MEMORY[0x263EF8318];
    if ((v4 & 0x80000000) != 0)
    {
      if (!__maskrune(v4, 0x100uLL)) {
        return 0;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v4 + 60) & 0x100) == 0)
    {
      return 0;
    }
    unsigned int v6 = a1[4];
    if ((v6 & 0x80000000) != 0)
    {
      if (__maskrune(v6, 0x100uLL)) {
        return 1;
      }
    }
    else if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x100) != 0)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t compquery_loc_GetOldParameters(uint64_t a1, size_t a2)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"language", (void *)a2);
  if (!*(void *)(a1 + 40) || (result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", (void *)(a2 + 8));
    if (!*(void *)(a1 + 40) || (result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
    {
      uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langietf", (void *)(a2 + 16));
      if (!*(void *)(a1 + 40) || (result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
      {
        uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langgroup", (void *)(a2 + 24));
        uint64_t v5 = *(void *)(a1 + 40);
        if (!v5 || (result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
        {
          if ((result & 0x80000000) != 0)
          {
            compquery_loc_DeriveLangGroup(a2);
            uint64_t v5 = *(void *)(a1 + 40);
          }
          uint64_t result = paramc_ParamGetStr(v5, (uint64_t)"voice", (void *)(a2 + 32));
          if (!*(void *)(a1 + 40) || (result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
          {
            uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"gender", (void *)(a2 + 40));
            if (!*(void *)(a1 + 40) || (result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
            {
              uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"age", (void *)(a2 + 48));
              if (!*(void *)(a1 + 40) || (result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
              {
                uint64_t result = paramc_ParamGetUInt(*(void *)(a1 + 40), (uint64_t)"frequencyhz", (unsigned int *)(a2 + 56));
                if (!*(void *)(a1 + 40) || (result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
                {
                  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voicemodel", (void *)(a2 + 64));
                  if (!*(void *)(a1 + 40) || (result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
                  {
                    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voiceoperatingpoint", (void *)(a2 + 72));
                    if (!*(void *)(a1 + 40) || (result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
                    {
                      LODWORD(result) = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"vopversion", (void *)(a2 + 88));
                      if ((result & 0x1FFF) == 0x14 || (int)result > -1 || *(void *)(a1 + 40) == 0) {
                        return 0;
                      }
                      else {
                        return result;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t compquery_loc_CompareParameters(char *__s, uint64_t a2)
{
  if (*__s)
  {
    unsigned int v4 = *(char **)a2;
    if (!*(void *)a2 || LH_stricmp(__s, v4)) {
      return 0;
    }
  }
  if (__s[64])
  {
    uint64_t v5 = *(char **)(a2 + 8);
    if (!v5 || LH_stricmp(__s + 64, v5)) {
      return 0;
    }
  }
  if (!__s[72]) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v6) {
    return 0;
  }
  if (strlen(__s + 72) == 2)
  {
    if (!LH_strnicmp((uint64_t)(__s + 72), v6, 2uLL))
    {
      int v7 = *(unsigned __int8 *)(v6 + 2);
      if (!*(unsigned char *)(v6 + 2)) {
        goto LABEL_22;
      }
      goto LABEL_16;
    }
  }
  else if (strlen((const char *)v6) == 2 && !LH_strnicmp((uint64_t)(__s + 72), v6, 2uLL))
  {
    int v7 = *(unsigned __int8 *)(v6 + 1);
    if (!*(unsigned char *)(v6 + 1)) {
      goto LABEL_22;
    }
LABEL_16:
    if (v7 == 45) {
      goto LABEL_22;
    }
  }
  if (LH_stricmp(__s + 72, (char *)v6)
    && (LH_stricmp(__s + 72, "es-us") && LH_stricmp(__s + 72, "es-mx")
     || LH_stricmp((char *)v6, "es-us") && LH_stricmp((char *)v6, "es-mx")))
  {
    return 0;
  }
LABEL_22:
  if (__s[320])
  {
    int v8 = *(char **)(a2 + 24);
    if (!v8 || LH_stricmp(__s + 320, v8)) {
      return 0;
    }
  }
  if (__s[136])
  {
    uint64_t v9 = *(char **)(a2 + 32);
    if (!v9 || LH_stricmp(__s + 136, v9)) {
      return 0;
    }
  }
  if (__s[168])
  {
    unsigned int v10 = *(char **)(a2 + 40);
    if (!v10 || LH_stricmp(__s + 168, v10)) {
      return 0;
    }
  }
  if (__s[308])
  {
    uint64_t v11 = *(char **)(a2 + 48);
    if (!v11 || LH_stricmp(__s + 308, v11)) {
      return 0;
    }
  }
  int v12 = *((_DWORD *)__s + 46);
  if (v12)
  {
    if (v12 != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  if (__s[188])
  {
    uint64_t v13 = *(char **)(a2 + 64);
    if (!v13 || LH_stricmp(__s + 188, v13)) {
      return 0;
    }
  }
  if (__s[220])
  {
    uint64_t v14 = *(char **)(a2 + 72);
    if (!v14 || LH_stricmp(__s + 220, v14)) {
      return 0;
    }
  }
  if (__s[328])
  {
    uint64_t v15 = *(char **)(a2 + 88);
    if (!v15 || LH_stricmp(__s + 328, v15)) {
      return 0;
    }
  }
  return 1;
}

uint64_t compquery_loc_GetParametersFromBrokerString(uint64_t a1, unsigned char *a2, size_t a3, _WORD *a4)
{
  uint64_t v13 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  if ((brk_TagIteratorOpen(*(void *)(a1 + 24), a2, "PARAMETERS/*", 1, &v13) & 0x80000000) == 0)
  {
    uint64_t v11 = 0;
    long long __s1 = 0;
    while ((brk_TagIteratorNext(v13, (uint64_t)&__s1, (uint64_t)&v11) & 0x80000000) == 0)
    {
      int v8 = __s1;
      if (__s1)
      {
        if (!strcmp(__s1, "language"))
        {
          *(void *)a3 = v11;
        }
        else if (!strcmp(v8, "langcode"))
        {
          *(void *)(a3 + 8) = v11;
        }
        else if (!strcmp(v8, "langietf"))
        {
          *(void *)(a3 + 16) = v11;
        }
        else if (!strcmp(v8, "langgroup"))
        {
          *(void *)(a3 + 24) = v11;
        }
        else if (!strcmp(v8, "voice"))
        {
          *(void *)(a3 + 32) = v11;
        }
        else if (!strcmp(v8, "gender"))
        {
          *(void *)(a3 + 40) = v11;
        }
        else if (!strcmp(v8, "age"))
        {
          *(void *)(a3 + 48) = v11;
        }
        else if (!strcmp(v8, "frequencyhz"))
        {
          *(_DWORD *)(a3 + 56) = LH_atou(v11);
        }
        else if (!strcmp(v8, "voicemodel"))
        {
          *(void *)(a3 + 64) = v11;
        }
        else if (!strcmp(v8, "voiceoperatingpoint"))
        {
          *(void *)(a3 + 72) = v11;
        }
        else if (!strcmp(v8, "vopversion"))
        {
          *(void *)(a3 + 88) = v11;
        }
      }
    }
    uint64_t v9 = *(unsigned char **)(a3 + 88);
    if (!v9 || !*v9) {
      *(void *)(a3 + 88) = "0.0.0";
    }
    brk_TagIteratorClose(v13);
  }
  if (!*(void *)(a3 + 24)) {
    compquery_loc_DeriveLangGroup(a3);
  }
  *a4 = 0;
  return compquery_loc_BrkTagQueryU16(*(void *)(a1 + 24), (uint64_t)a2, a4);
}

uint64_t compquery_loc_GetCurrentScore(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(char **)(a1 + 64);
  if (v4 && *v4 && (uint64_t v5 = *(char **)(a2 + 64)) != 0) {
    uint64_t v6 = 4 * (LH_stricmp(v4, v5) == 0);
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(char **)(a1 + 88);
  if (v7)
  {
    if (*v7)
    {
      int v8 = *(char **)(a2 + 88);
      if (v8)
      {
        if (LH_stricmp(v7, v8)) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v6 | 8;
        }
      }
    }
  }
  uint64_t v9 = *(char **)(a1 + 72);
  if (v9)
  {
    if (*v9)
    {
      unsigned int v10 = *(char **)(a2 + 72);
      if (v10)
      {
        if (LH_stricmp(v9, v10)) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v6 | 0x10;
        }
      }
    }
  }
  int v11 = *(_DWORD *)(a1 + 56);
  if (v11)
  {
    if (v11 == *(_DWORD *)(a2 + 56)) {
      uint64_t v6 = v6 | 0x20;
    }
    else {
      uint64_t v6 = v6;
    }
  }
  int v12 = *(char **)(a1 + 48);
  if (v12)
  {
    if (*v12)
    {
      uint64_t v13 = *(char **)(a2 + 48);
      if (v13)
      {
        if (LH_stricmp(v12, v13)) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v6 | 0x40;
        }
      }
    }
  }
  uint64_t v14 = *(char **)(a1 + 40);
  if (v14)
  {
    if (*v14)
    {
      uint64_t v15 = *(char **)(a2 + 40);
      if (v15)
      {
        if (LH_stricmp(v14, v15)) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v6 | 0x80;
        }
      }
    }
  }
  uint64_t v16 = *(char **)(a1 + 8);
  if (v16)
  {
    if (*v16)
    {
      uint64_t v17 = *(char **)(a2 + 8);
      if (v17)
      {
        if (LH_stricmp(v16, v17)) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v6 | 0x100;
        }
      }
    }
  }
  uint64_t v18 = *(char **)(a1 + 16);
  if (v18)
  {
    if (*v18)
    {
      uint64_t v19 = *(char **)(a2 + 16);
      if (v19)
      {
        if (LH_stricmp(v18, v19)) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v6 | 0x200;
        }
      }
    }
  }
  uint64_t v20 = *(char **)a1;
  if (*(void *)a1 && *v20 && *(void *)a2)
  {
    if (LH_stricmp(v20, *(char **)a2)) {
      uint64_t v6 = v6;
    }
    else {
      uint64_t v6 = v6 | 0x400;
    }
  }
  uint64_t v21 = *(char **)(a1 + 24);
  if (v21)
  {
    if (*v21)
    {
      uint64_t v22 = *(char **)(a2 + 24);
      if (v22)
      {
        if (LH_stricmp(v21, v22)) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v6 | 0x800;
        }
      }
    }
  }
  size_t v23 = *(char **)(a1 + 32);
  if (v23)
  {
    if (*v23)
    {
      uint64_t v24 = *(char **)(a2 + 32);
      if (v24)
      {
        if (LH_stricmp(v23, v24)) {
          return v6;
        }
        else {
          return v6 | 0x1000;
        }
      }
    }
  }
  return v6;
}

size_t compquery_loc_DeriveLangGroup(size_t result)
{
  uint64_t v1 = *(unsigned __int8 **)(result + 8);
  if (v1)
  {
    size_t v2 = result;
    uint64_t result = strlen(*(const char **)(result + 8));
    if (result == 3)
    {
      *(void *)(v2 + 24) = v2 + 80;
      *(unsigned char *)(v2 + 80) = __tolower(*v1);
      uint64_t result = __tolower(v1[1]);
      *(unsigned char *)(v2 + 81) = result;
      *(_WORD *)(v2 + 82) = 120;
    }
  }
  return result;
}

uint64_t compquery_loc_CompareVoiceScores(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t result = (v4 - v3);
  if (v4 == v3) {
    return *(unsigned __int16 *)(a2 + 12) - *(unsigned __int16 *)(a1 + 12);
  }
  return result;
}

uint64_t compquery_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 2303729670;
  uint64_t v32 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v32);
    if ((inited & 0x80000000) == 0)
    {
      log_OutText(*(void *)(v32 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"COMPQUERY ObjOpen: Begin", v10, v11, v12, v30);
      uint64_t v13 = heap_Calloc(*(void **)(v32 + 8), 1, 64);
      uint64_t v18 = (void *)v13;
      if (v13)
      {
        *(void *)uint64_t v13 = a3;
        *(void *)(v13 + 8) = a4;
        uint64_t v19 = v32;
        *(void *)(v13 + 16) = v32;
        uint64_t v20 = (unsigned int *)(v13 + 40);
        if ((paramc_ParamGetUInt(*(void *)(v19 + 40), (uint64_t)"voice_rescan_interval", (unsigned int *)(v13 + 40)) & 0x80000000) == 0) {
          log_OutText(*(void *)(v32 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"voice_rescan_interval=%lu", v21, v22, v23, *v20);
        }
        uint64_t Class = critsec_ObjOpen(*(void *)(v32 + 16), *(void **)(v32 + 8), v18 + 7);
        if ((Class & 0x80000000) != 0
          || (uint64_t Class = brk_ObjGetClass(*(void *)(v32 + 24), v18 + 3), (Class & 0x80000000) != 0))
        {
          uint64_t v5 = Class;
        }
        else
        {
          uint64_t v5 = brk_ObjOpen(0, v18[3]);
          if ((v5 & 0x80000000) == 0)
          {
            int v28 = 348;
LABEL_14:
            *(void *)a5 = v18;
            *(_DWORD *)(a5 + 8) = v28;
            log_OutText(*(void *)(v32 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"COMPQUERY ObjOpen: End (%x)", v25, v26, v27, v5);
            return v5;
          }
        }
      }
      else
      {
        log_OutPublic(*(void *)(v32 + 32), (uint64_t)"COMPQUERY", 23000, 0, v14, v15, v16, v17, v31);
        uint64_t v5 = 2303729674;
      }
      *(void *)a5 = v18;
      *(_DWORD *)(a5 + 8) = 348;
      compquery_ObjClose(v18, *(void *)(a5 + 8));
      uint64_t v18 = 0;
      int v28 = 0;
      goto LABEL_14;
    }
    return inited;
  }
  return v5;
}

uint64_t compquery_ObjClose(void *a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck((uint64_t)a1, a2, 348, 64);
  if ((v6 & 0x80000000) == 0)
  {
    if (a1)
    {
      uint64_t v7 = a1[2];
      log_OutText(*(void *)(v7 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"COMPQUERY ObjClose : Begin", v3, v4, v5, v17);
      uint64_t v8 = a1[4];
      if (v8)
      {
        int v9 = brk_ObjClose(v8);
        if (v9 >= 0) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v9;
        }
      }
      uint64_t v10 = a1[7];
      if (v10)
      {
        int v11 = critsec_ObjClose(v10);
        a1[7] = 0;
        if (v11 >= 0 || (int)v6 <= -1) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v11;
        }
      }
      heap_Free(*(void **)(v7 + 8), (uint64_t)a1);
      log_OutText(*(void *)(v7 + 32), (uint64_t)"COMPQUERY", 4, 0, (uint64_t)"COMPQUERY ObjClose : End (%x)", v13, v14, v15, v6);
    }
    else
    {
      return 2303729670;
    }
  }
  return v6;
}

uint64_t compquery_ObjReopen()
{
  return 0;
}

uint64_t lipsyncinfo_GetNbrOfLhp()
{
  return 364;
}

char *lipsyncinfo_GetPhonemeTableByIndex(int a1)
{
  return (char *)&szLHPhonemeTable + 8 * a1;
}

char *lipsyncinfo_GetMouthPosByIndex(int a1)
{
  return (char *)&sMouthPos + 18 * a1;
}

BOOL lipsyncinfo_HeadsMatch(char *a1, char *a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    int v4 = *a1;
    if (!*a1) {
      return 0;
    }
    BOOL result = 0;
    if ((v4 - 55) <= 0xFFFFFFF8)
    {
      int v5 = *a2;
      unsigned int v6 = v4 - 33;
      if ((v4 - 33) <= 0x5D && v5 != 0)
      {
        BOOL result = 0;
        if ((v6 > 0x3F || ((1 << v6) & 0x9C0004203E005FB1) == 0) && (v4 - 123) >= 4)
        {
          BOOL result = 0;
          unsigned int v8 = v5 - 33;
          if ((v5 - 33) <= 0x5D && (v5 - 55) <= 0xFFFFFFF8)
          {
            BOOL result = 0;
            if ((v8 > 0x3F || ((1 << v8) & 0x9C0004203E005FB1) == 0) && (v5 - 123) >= 4)
            {
              if (v4 == v5)
              {
                int v9 = strchr(a1 + 1, 38);
                uint64_t v10 = v9;
                if (v9)
                {
                  if ((int v11 = v9[1], v12 = v11 - 33, (v11 - 33) > 0x5D)
                    || (v11 - 55) > 0xFFFFFFF8
                    || v12 <= 0x3F && ((1 << v12) & 0x9C0004203E005FB1) != 0
                    || (v11 - 123) < 4)
                  {
                    uint64_t v10 = 0;
                  }
                }
                uint64_t v13 = strchr(a2 + 1, 38);
                if (!v13) {
                  return v10 == 0;
                }
                int v14 = v13[1];
                unsigned int v15 = v14 - 33;
                if ((v14 - 33) > 0x5D
                  || (v14 - 55) > 0xFFFFFFF8
                  || v15 <= 0x3F && ((1 << v15) & 0x9C0004203E005FB1) != 0)
                {
                  return v10 == 0;
                }
                if ((v14 - 123) < 4) {
                  return v10 == 0;
                }
                if (v10) {
                  return v10[1] == v14;
                }
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t lipsyncinfo_HeadsMatchLooselyDiphtongs(char *a1, char *a2)
{
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  int v4 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t result = 0;
  if ((v4 - 55) > 0xFFFFFFF8) {
    return result;
  }
  int v5 = *a2;
  unsigned int v6 = v4 - 33;
  if ((v4 - 33) > 0x5D || v5 == 0) {
    return result;
  }
  uint64_t result = 0;
  if (v6 <= 0x3F && ((1 << v6) & 0x9C0004203E005FB1) != 0) {
    return result;
  }
  if ((v4 - 123) < 4) {
    return result;
  }
  uint64_t result = 0;
  unsigned int v8 = v5 - 33;
  if ((v5 - 33) > 0x5D) {
    return result;
  }
  if ((v5 - 55) > 0xFFFFFFF8) {
    return result;
  }
  uint64_t result = 0;
  if (v8 <= 0x3F && ((1 << v8) & 0x9C0004203E005FB1) != 0) {
    return result;
  }
  if ((v5 - 123) < 4) {
    return result;
  }
  if (v4 != v5) {
    return 0;
  }
  uint64_t result = (uint64_t)strchr(a1 + 1, 38);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t result = 0;
    int v10 = *(unsigned __int8 *)(v9 + 1);
    unsigned int v11 = v10 - 33;
    if ((v10 - 33) <= 0x5D && (v10 - 55) <= 0xFFFFFFF8)
    {
      uint64_t result = 0;
      if ((v11 > 0x3F || ((1 << v11) & 0x9C0004203E005FB1) == 0) && (v10 - 123) >= 4)
      {
        unsigned int v12 = strchr(a2 + 1, 38);
        if (!v12) {
          return 1;
        }
        int v13 = v12[1];
        unsigned int v14 = v13 - 33;
        if ((v13 - 33) > 0x5D
          || (v13 - 55) > 0xFFFFFFF8
          || v14 <= 0x3F && ((1 << v14) & 0x9C0004203E005FB1) != 0)
        {
          return 1;
        }
        return (v13 - 123) < 4;
      }
    }
  }
  return result;
}

uint64_t langCodeConverter_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2385518593;
  }
  uint64_t result = 0;
  *a2 = ILangCodeConverter;
  return result;
}

uint64_t langCodeConverter_ObjOpen(_WORD *a1, int a2, uint64_t a3)
{
  v64[16] = *MEMORY[0x263EF8340];
  uint64_t v3 = 2385518602;
  uint64_t v59 = 0;
  if (!a3) {
    return 2385518598;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v59);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v52 = 0u;
  unsigned int v6 = (BOOL *)heap_Calloc(*(void **)(v59 + 8), 1, 40);
  uint64_t v7 = v6;
  if (v6)
  {
    *unsigned int v6 = v59;
    uint64_t v8 = v59;
    v64[0] = 0;
    LODWORD(v63) = 0;
    unsigned int v61 = 0;
    LODWORD(v62) = 1;
    uint64_t Class = brk_ObjGetClass(*(void *)(v59 + 24), v64);
    if ((Class & 0x80000000) != 0) {
      goto LABEL_52;
    }
    uint64_t Class = brk_ObjOpen(0, v64[0]);
    if ((Class & 0x80000000) != 0) {
      goto LABEL_52;
    }
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    set_DctBrk((uint64_t)&v52, *((uint64_t *)&v56 + 1));
    uint64_t v10 = open_DctRom((uint64_t *)&v52, (uint64_t)"sysdct", &v61);
    if ((v10 & 0x80000000) != 0)
    {
      uint64_t v48 = 41005;
      uint64_t v3 = v10;
    }
    else
    {
      *(void *)&long long v56 = &v52;
      uint64_t Class = brk_DataOpenEx(*((uint64_t *)&v56 + 1), (uint64_t)"sysdct", 1, (uint64_t)&v57);
      if ((Class & 0x80000000) != 0) {
        goto LABEL_52;
      }
      uint64_t Class = query_DctRom(v56, "langcode", v61, v57, &v63);
      if ((Class & 0x80000000) != 0) {
        goto LABEL_52;
      }
      if (v63)
      {
        uint64_t v15 = heap_Calloc(*(void **)(v8 + 8), 1, 144);
        uint64_t v16 = v56;
        *(void *)(v56 + 16) = v15;
        if (!v15) {
          goto LABEL_53;
        }
        uint64_t Class = init_DctRom(v16, "langcode", v61, v57);
        if ((Class & 0x80000000) == 0)
        {
          MaxOutLeuint64_t n = GetMaxOutLen(v56);
          *((void *)&v57 + 1) = MaxOutLen;
          if (!MaxOutLen)
          {
            uint64_t v3 = 2385518599;
            goto LABEL_53;
          }
          BYTE8(v58) = GetFieldSeparator(v56);
          uint64_t v18 = heap_Calloc(*(void **)(v8 + 8), 1, *((void *)&v57 + 1) + 1);
          *(void *)(v56 + 40) = v18;
          if (v18)
          {
            for (uint64_t i = 0; ; ++i)
            {
              uint64_t Class = langCodeConverter_loc_RetrieveDictionaryEntry((uint64_t)&v52, i, 0, 0, &v62);
              if ((Class & 0x80000000) != 0) {
                break;
              }
              if (!v62)
              {
                *(void *)&long long v58 = i;
                v7[2] = i;
                v7[4] = 5 * i;
                uint64_t v20 = v7 + 3;
                uint64_t v21 = hashtable_ObjOpen(v7 + 3, v59, 5 * i, 0);
                uint64_t v22 = v21;
                if ((v21 & 0x80000000) != 0)
                {
                  uint64_t v3 = v21;
                  goto LABEL_54;
                }
                hashtable_ElementSetDestructor(v7[3], (uint64_t)langCodeConverter_loc_HashFreeElement);
                hashtable_SetStringCompareFunction(v7[3], (uint64_t)langCodeConverter_loc_StringCompare, (uint64_t)v7);
                hashtable_SetStringToHashFunction(v7[3], (uint64_t)langCodeConverter_loc_StringToHash, (uint64_t)v7);
                uint64_t v23 = heap_Calloc(*(void **)(v59 + 8), v7[2], 8);
                v7[1] = v23;
                if (!v23) {
                  goto LABEL_54;
                }
                if (v7[2])
                {
                  unint64_t v27 = 0;
                  while (1)
                  {
                    *(void *)(v7[1] + 8 * v27) = heap_Calloc(*(void **)(v59 + 8), 5, 8);
                    if (!*(void *)(v7[1] + 8 * v27)) {
                      goto LABEL_54;
                    }
                    ++v27;
                    unint64_t v28 = v7[2];
                    if (v27 >= v28)
                    {
                      if (!v28) {
                        break;
                      }
                      uint64_t v29 = 0;
                      while (1)
                      {
                        unsigned int v51 = -1909448694;
                        uint64_t v62 = 0;
                        unsigned int v61 = 1;
                        v60[0] = BYTE8(v58);
                        v60[1] = 0;
                        unsigned int v30 = langCodeConverter_loc_RetrieveDictionaryEntry((uint64_t)&v52, v29, v64, 0x80uLL, &v61);
                        if ((v30 & 0x80000000) != 0)
                        {
                          unsigned int v51 = v30;
                          goto LABEL_63;
                        }
                        if (!v61) {
                          break;
                        }
                        unsigned int v31 = langCodeConverter_loc_StrTokAndTrim((uint64_t)v64, v60, &v62);
                        if (!v31)
                        {
LABEL_64:
                          int v49 = -1909448438;
                          goto LABEL_67;
                        }
                        uint64_t v32 = (char *)v31;
                        unsigned int v33 = 0;
                        do
                        {
                          if (*v32)
                          {
                            uint64_t v34 = *v7;
                            if (strchr(v32, 124))
                            {
                              uint64_t v63 = 0;
                              uint64_t v35 = strhelper_Strdup(*(void *)(v34 + 8), v32);
                              if (!v35) {
                                goto LABEL_63;
                              }
                              uint64_t v36 = (uint64_t)v35;
                              uint64_t v37 = langCodeConverter_loc_StrTokAndTrim((uint64_t)v35, "|", &v63);
                              if (v37)
                              {
                                uint64_t v38 = (char *)v37;
                                char v39 = 0;
                                while (1)
                                {
                                  if (v39)
                                  {
                                    uint64_t v40 = *(void *)(v7[1] + 8 * v29);
                                  }
                                  else
                                  {
                                    *(void *)(*(void *)(v7[1] + 8 * v29) + 8 * v33) = strhelper_Strdup(*(void *)(v34 + 8), v38);
                                    uint64_t v40 = *(void *)(v7[1] + 8 * v29);
                                    if (!*(void *)(v40 + 8 * v33)) {
                                      break;
                                    }
                                  }
                                  uint64_t v41 = heap_Calloc(*(void **)(v34 + 8), 1, 16);
                                  if (!v41) {
                                    break;
                                  }
                                  *(void *)uint64_t v41 = v40;
                                  *(_DWORD *)(v41 + 8) = v33;
                                  hashtable_Set(*v20);
                                  uint64_t v38 = (char *)langCodeConverter_loc_StrTokAndTrim(v36, "|", &v63);
                                  char v39 = 1;
                                  if (!v38) {
                                    goto LABEL_40;
                                  }
                                }
                                heap_Free(*(void **)(v34 + 8), v36);
                                goto LABEL_63;
                              }
LABEL_40:
                              heap_Free(*(void **)(v34 + 8), v36);
                            }
                            else
                            {
                              *(void *)(*(void *)(v7[1] + 8 * v29) + 8 * v33) = strhelper_Strdup(*(void *)(v34 + 8), v32);
                              uint64_t v42 = *(void *)(v7[1] + 8 * v29);
                              if (!*(void *)(v42 + 8 * v33)) {
                                goto LABEL_63;
                              }
                              if (strcmp(v32, "*"))
                              {
                                uint64_t v43 = heap_Calloc(*(void **)(v34 + 8), 1, 16);
                                if (!v43) {
                                  goto LABEL_63;
                                }
                                *(void *)uint64_t v43 = v42;
                                *(_DWORD *)(v43 + 8) = v33;
                                hashtable_Set(*v20);
                              }
                            }
                          }
                          ++v33;
                          uint64_t v32 = (char *)langCodeConverter_loc_StrTokAndTrim((uint64_t)v64, v60, &v62);
                        }
                        while (v32);
                        if (v33 != 5) {
                          goto LABEL_64;
                        }
                        uint64_t v22 = 0;
                        if (++v29 >= (unint64_t)v7[2]) {
                          goto LABEL_48;
                        }
                      }
                      int v49 = -1909448684;
LABEL_67:
                      unsigned int v51 = v49;
LABEL_63:
                      uint64_t v3 = v51;
                      goto LABEL_54;
                    }
                  }
                }
LABEL_48:
                log_OutText(*(void *)(*v7 + 32), (uint64_t)"LANGCODECONVERTER", 4, 0, (uint64_t)"%s", v24, v25, v26, (uint64_t)"--- LANGUAGE CODE HASHTABLE BEGIN ---");
                hashtable_Dump(v7[3]);
                log_OutText(*(void *)(*v7 + 32), (uint64_t)"LANGCODECONVERTER", 4, 0, (uint64_t)"%s", v44, v45, v46, (uint64_t)"--- LANGUAGE CODE HASHTABLE END ---");
                langCodeConverter_loc_CloseLangCodeDictionary(v59, &v52);
                if ((v22 & 0x80000000) != 0) {
                  goto LABEL_55;
                }
                *(void *)a3 = v7;
                *(_DWORD *)(a3 + 8) = 239785;
                return v22;
              }
            }
            goto LABEL_52;
          }
LABEL_53:
          langCodeConverter_loc_CloseLangCodeDictionary(v8, &v52);
          goto LABEL_54;
        }
LABEL_52:
        uint64_t v3 = Class;
        goto LABEL_53;
      }
      uint64_t v3 = 2385518612;
      uint64_t v48 = 41008;
    }
    log_OutPublic(*(void *)(v8 + 32), (uint64_t)"LANGCODECONVERTER", v48, 0, v11, v12, v13, v14, v50);
    goto LABEL_53;
  }
LABEL_54:
  langCodeConverter_loc_CloseLangCodeDictionary(v59, &v52);
  uint64_t v22 = v3;
LABEL_55:
  langCodeConverter_loc_FreeAllData(v7);
  return v22;
}

uint64_t langCodeConverter_ObjClose(void *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 239785, 40);
  if ((v3 & 0x80000000) != 0) {
    return 2385518600;
  }
  uint64_t v4 = v3;
  langCodeConverter_loc_FreeAllData(a1);
  return v4;
}

uint64_t langCodeConverter_getIETF(uint64_t a1, int a2, uint64_t a3, void *a4, _DWORD *a5)
{
  return langCodeConverter_getCode(a1, a2, a3, 1u, a4, a5, 1);
}

uint64_t langCodeConverter_get3letter(uint64_t a1, int a2, uint64_t a3, void *a4, _DWORD *a5)
{
  return langCodeConverter_getCode(a1, a2, a3, 0, a4, a5, 1);
}

uint64_t langCodeConverter_getCode(uint64_t a1, int a2, uint64_t a3, unsigned int a4, void *a5, _DWORD *a6, int a7)
{
  uint64_t v13 = safeh_HandleCheck(a1, a2, 239785, 40);
  if ((v13 & 0x80000000) != 0) {
    return 2385518600;
  }
  uint64_t v14 = v13;
  if (a6) {
    *a6 = 0;
  }
  if (!a3) {
    return 2385518599;
  }
  if (a5) {
    *a5 = a3;
  }
  uint64_t v15 = hashtable_Get(*(void *)(a1 + 24));
  if (v15 && *(void *)v15 && (!a7 || *(_DWORD *)(v15 + 8) <= 1u))
  {
    if (a5) {
      *a5 = *(void *)(*(void *)v15 + 8 * a4);
    }
    if (a6) {
      *a6 = 1;
    }
  }
  return v14;
}

uint64_t langCodeConverter_2to3letter(uint64_t a1, int a2, const char *a3, const char **a4, _DWORD *a5)
{
  uint64_t v9 = 2385518599;
  int v10 = safeh_HandleCheck(a1, a2, 239785, 40);
  if (v10 < 0) {
    uint64_t v11 = 2385518600;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v10 < 0) {
    return 2385518600;
  }
  if (a5) {
    *a5 = 0;
  }
  if (a3 && strlen(a3) == 2)
  {
    if (a4) {
      *a4 = a3;
    }
    if (*(void *)(a1 + 16))
    {
      uint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 8 * v12);
        uint64_t v14 = *(void *)(v13 + 8);
        if (v14)
        {
          if (strlen(*(const char **)(v13 + 8)) >= 4
            && *(unsigned char *)(v14 + 2) == 45
            && !LH_strnicmp(v14, (uint64_t)a3, 2uLL))
          {
            break;
          }
        }
        if ((unint64_t)++v12 >= *(void *)(a1 + 16)) {
          return v11;
        }
      }
      if (a4) {
        *a4 = **(const char ***)(*(void *)(a1 + 8) + 8 * v12);
      }
      if (a5) {
        *a5 = 1;
      }
    }
    return v11;
  }
  return v9;
}

BOOL langCodeConverter_loc_StringCompare(char *a1, unsigned __int8 *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = MEMORY[0x263EF8318];
  for (uint64_t i = a1; ; ++i)
  {
    int v8 = *a2++;
    int v7 = v8;
    unsigned int v9 = (char)v8;
    if (v8 == 95)
    {
      int v12 = *i;
      BOOL v11 = 1;
      if (v12 == 45 || v12 == 95) {
        goto LABEL_18;
      }
      uint64_t v13 = &a1[v4];
LABEL_12:
      if ((*(_DWORD *)(v5 + 4 * v9 + 60) & 0x8000) != 0) {
        goto LABEL_13;
      }
LABEL_14:
      unsigned int v14 = *v13;
      if ((v14 & 0x80000000) != 0)
      {
        if (!__maskrune(v14, 0x8000uLL)) {
          goto LABEL_17;
        }
      }
      else if ((*(_DWORD *)(v5 + 4 * v14 + 60) & 0x8000) == 0)
      {
LABEL_17:
        BOOL v11 = v9 == v14;
        goto LABEL_18;
      }
      unsigned int v14 = __tolower(v14);
      goto LABEL_17;
    }
    if (!v7) {
      break;
    }
    int v10 = *i;
    if (v10 == 95) {
      int v10 = 45;
    }
    if (v10 != v9)
    {
      uint64_t v13 = i;
      if ((v9 & 0x80000000) == 0) {
        goto LABEL_12;
      }
      uint64_t v13 = i;
      if (!__maskrune(v9, 0x8000uLL)) {
        goto LABEL_14;
      }
LABEL_13:
      unsigned int v9 = __tolower(v9);
      goto LABEL_14;
    }
    BOOL v11 = 1;
LABEL_18:
    ++v4;
    if (!v11) {
      return 0;
    }
  }
  return *i == 0;
}

unint64_t langCodeConverter_loc_StringToHash(unsigned char *a1, uint64_t a2)
{
  unsigned int v3 = *a1;
  if (*a1)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 1;
    uint64_t v6 = MEMORY[0x263EF8318];
    while ((v3 & 0x80) == 0)
    {
      if ((*(_DWORD *)(v6 + 4 * v3 + 60) & 0x8000) != 0) {
        goto LABEL_5;
      }
LABEL_6:
      if (v3 == 95) {
        uint64_t v7 = 45;
      }
      else {
        uint64_t v7 = v3;
      }
      unint64_t v4 = 31 * v4 + v7;
      unsigned int v8 = *v5++;
      unsigned int v3 = v8;
      if (!v8) {
        return v4 % *(void *)(a2 + 32);
      }
    }
    if (!__maskrune(v3, 0x8000uLL)) {
      goto LABEL_6;
    }
LABEL_5:
    LOBYTE(v3) = __tolower(v3);
    goto LABEL_6;
  }
  unint64_t v4 = 0;
  return v4 % *(void *)(a2 + 32);
}

const char ***langCodeConverter_loc_DumpHashTableLine(const char ***result, char *a2)
{
  if (*result) {
    return (const char ***)sprintf(a2, "%s,%s,%s,%s,%s", **result, (*result)[1], (*result)[2], (*result)[3], (*result)[4]);
  }
  return result;
}

uint64_t langCodeConverter_loc_CloseLangCodeDictionary(uint64_t result, void *a2)
{
  uint64_t v2 = a2[9];
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = (void *)a2[8];
    if (!v5) {
      goto LABEL_13;
    }
    uint64_t v6 = v5[5];
    if (v6)
    {
      heap_Free(*(void **)(v4 + 8), v6);
      uint64_t v5 = (void *)a2[8];
      v5[5] = 0;
    }
    uint64_t v7 = v5[2];
    if (v7)
    {
      if (a2[10] && v5[4])
      {
        exit_DctRom((uint64_t)v5, a2[10]);
        uint64_t v7 = *(void *)(a2[8] + 16);
      }
      heap_Free(*(void **)(v4 + 8), v7);
      uint64_t v5 = (void *)a2[8];
      v5[2] = 0;
    }
    uint64_t v8 = a2[10];
    if (v8)
    {
      brk_DataClose(a2[9], v8);
      a2[10] = 0;
      uint64_t v5 = (void *)a2[8];
    }
    uint64_t result = close_DctRom((uint64_t)v5);
    uint64_t v2 = a2[9];
    if (v2)
    {
LABEL_13:
      uint64_t result = brk_ObjClose(v2);
      a2[9] = 0;
    }
  }
  return result;
}

void *langCodeConverter_loc_FreeAllData(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v3 = result[2];
      if (v3)
      {
        do
        {
          --v3;
          if (*(void *)(v1[1] + 8 * v3))
          {
            for (uint64_t i = 32; i != -8; i -= 8)
            {
              uint64_t v5 = *(void *)(*(void *)(v1[1] + 8 * v3) + i);
              if (v5) {
                heap_Free(*(void **)(*v1 + 8), v5);
              }
            }
            heap_Free(*(void **)(*v1 + 8), *(void *)(v1[1] + 8 * v3));
          }
        }
        while (v3);
        uint64_t v2 = v1[1];
      }
      heap_Free(*(void **)(*v1 + 8), v2);
    }
    uint64_t v6 = (void *)v1[3];
    if (v6) {
      hashtable_ObjClose(v6);
    }
    uint64_t v7 = *(void **)(*v1 + 8);
    return heap_Free(v7, (uint64_t)v1);
  }
  return result;
}

uint64_t langCodeConverter_loc_RetrieveDictionaryEntry(uint64_t a1, unsigned int a2, void *a3, unint64_t a4, _DWORD *a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned __int16 __n = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  LH_utoa(a2, __n_6, 0xAu);
  int __n_2 = (unsigned __int16)(strlen(__n_6) - 1);
  if (!a5)
  {
    LODWORD(result) = DctLookup(a1, (uint64_t)__n_6, (unsigned __int16 *)&__n_2 + 1, (__int16 *)&__n_2, 1, &__n, (uint64_t)&v11);
    if (!result) {
      goto LABEL_9;
    }
LABEL_5:
    if ((result & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return result;
    }
  }
  *a5 = 0;
  LODWORD(result) = DctLookup(a1, (uint64_t)__n_6, (unsigned __int16 *)&__n_2 + 1, (__int16 *)&__n_2, 1, &__n, (uint64_t)&v11);
  if (result) {
    goto LABEL_5;
  }
  *a5 = 1;
LABEL_9:
  uint64_t result = 0;
  if (a3 && a4)
  {
    unsigned __int16 v10 = __n;
    if (__n >= a4)
    {
      return 2385518601;
    }
    else
    {
      memcpy(a3, *(const void **)(a1 + 40), __n);
      uint64_t result = 0;
      *((unsigned char *)a3 + (__int16)v10) = 0;
    }
  }
  return result;
}

const char *langCodeConverter_loc_StrTokAndTrim(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t result = strhelper_SafeStrtok(a1, a2, a3);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = MEMORY[0x263EF8318];
    do
    {
      uint64_t v6 = v4;
      unsigned int v7 = *v4;
      if ((v7 & 0x80000000) != 0) {
        int v8 = __maskrune(v7, 0x4000uLL);
      }
      else {
        int v8 = *(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000;
      }
      ++v4;
    }
    while (v8);
    size_t v9 = strlen(v6);
    if (v9)
    {
      for (size_t i = v9 - 2; ; --i)
      {
        unsigned int v11 = v4[i];
        if ((v11 & 0x80000000) != 0)
        {
          if (!__maskrune(v11, 0x4000uLL)) {
            break;
          }
        }
        else if ((*(_DWORD *)(v5 + 4 * v11 + 60) & 0x4000) == 0)
        {
          break;
        }
        v4[i] = 0;
      }
    }
    if (*v6) {
      return v6;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t SWIlicenseLockMulti(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a4) {
    *a4 = a3;
  }
  return 0;
}

uint64_t SWIlicenseUseCacheableLicense(int a1)
{
  return (100000 * a1);
}

uint64_t SWIlicenseFreeCacheableLicense()
{
  if (num_lic_used) {
    --num_lic_used;
  }
  return 0;
}

uint64_t SWIlicenseGetNumOfLicensesInUseInCache()
{
  return num_lic_used;
}

uint64_t ssftthrottle_ObjOpen(_WORD *a1, int a2, void *a3)
{
  uint64_t v6 = 0;
  int inited = InitRsrcFunction(a1, a2, &v6);
  uint64_t result = 7;
  if ((inited & 0x80000000) == 0 && v6 && *(void *)(v6 + 8))
  {
    if (a3)
    {
      uint64_t result = 0;
      *a3 = 0;
    }
    else
    {
      return 6;
    }
  }
  return result;
}

uint64_t ttseg_ClassOpen(kaldi::nnet1::Component *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v3 = 2166366215;
  uint64_t v110 = 0;
  if (!a3) {
    return v3;
  }
  uint64_t v113 = 0;
  long long v111 = 0u;
  long long v112 = 0u;
  *a3 = safeh_GetNullHandle();
  a3[1] = v7;
  uint64_t inited = InitRsrcFunction(a1, a2, &v115);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  log_OutText(*(void *)(v115 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Class Open: Begin", v9, v10, v11, v101);
  uint64_t v12 = heap_Calloc(*(void **)(v115 + 8), 1, 248);
  uint64_t v116 = v12;
  if (!v12)
  {
    log_OutPublic(*(void *)(v115 + 32), (uint64_t)"TTSEG", 16000, 0, v13, v14, v15, v16, v102);
    return 2166366218;
  }
  uint64_t v17 = v12;
  uint64_t v18 = critsec_ObjOpen(*(void *)(v115 + 16), *(void **)(v115 + 8), (uint64_t *)(v12 + 208));
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v3 = v18;
    log_OutPublic(*(void *)(v115 + 32), (uint64_t)"TTSEG", 16111, "%s%x", v19, v20, v21, v22, "lherror");
    goto LABEL_90;
  }
  *(void *)uint64_t v17 = a1;
  *(void *)(v17 + 8) = a2;
  LH_itoa(7u, (char *)(v17 + 68), 0xAu);
  __strcat_chk();
  size_t v23 = strlen((const char *)(v17 + 68));
  LH_itoa(4u, (char *)(v17 + 68 + v23), 0xAu);
  __strcat_chk();
  size_t v24 = strlen((const char *)(v17 + 68));
  LH_itoa(0, (char *)(v17 + 68 + v24), 0xAu);
  uint64_t v25 = v115;
  uint64_t v26 = *(void *)(v115 + 40);
  if (!v26)
  {
    uint64_t v27 = paramc_ObjOpen(0, (uint64_t)a1, a2, v115 + 40);
    if ((v27 & 0x80000000) == 0)
    {
      *(_DWORD *)(v17 + 64) = 1;
      uint64_t v25 = v115;
      uint64_t v26 = *(void *)(v115 + 40);
      goto LABEL_8;
    }
    uint64_t v3 = v27;
    log_OutPublic(*(void *)(v115 + 32), (uint64_t)"TTSEG", 16021, "%s%x", v28, v29, v30, v31, "lherror");
LABEL_90:
    ttseg_loc_ClassClose(v115, &v116, v38, v39, v40, v41, v42, v43);
    uint64_t v116 = 0;
    goto LABEL_91;
  }
LABEL_8:
  uint64_t v119 = 0;
  unsigned int v117 = 0;
  unsigned int v118 = -1;
  BOOL v33 = (int)paramc_ParamGetUInt(v26, (uint64_t)"licensingexplicit", &v117) >= 0 && v117 == 1;
  *(_DWORD *)(v17 + 220) = v33;
  if ((paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"licensegraceperiod", &v118) & 0x80000000) == 0)
  {
    if ((SWIlicense_inhibited & 1) != 0
      || !kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)v118))
    {
      log_OutText(*(void *)(v25 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"License grace period set to %lu", v34, v35, v36, v118);
    }
    else
    {
      log_OutPublic(*(void *)(v25 + 32), (uint64_t)"TTSEG", 16127, 0, v37, v34, v35, v36, v102);
    }
  }
  if ((paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"ttslicensingports", (unsigned int *)(v17 + 112)) & 0x80000000) != 0)
  {
    *(_DWORD *)(v17 + 112) = 0x7FFFFFFF;
    *(_DWORD *)(v17 + 120) = 0x7FFFFFFF;
  }
  else
  {
    paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"ttslicensedynamicports", (unsigned int *)(v17 + 128));
    if (*(_DWORD *)(v17 + 112) + *(_DWORD *)(v17 + 128))
    {
      paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"ttslicensingportsoverdraftthresh", (unsigned int *)(v17 + 120));
      paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"dynamiclicenseexpirationtime", (unsigned int *)(v17 + 132));
    }
  }
  paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"cprlicensingports", (unsigned int *)(v17 + 136));
  paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"cprlicensedynamicports", (unsigned int *)(v17 + 152));
  if (*(_DWORD *)(v17 + 136) + *(_DWORD *)(v17 + 152))
  {
    paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"cprlicensingportsoverdraftthresh", (unsigned int *)(v17 + 144));
    paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"dynamiclicenseexpirationtime", (unsigned int *)(v17 + 156));
  }
  int v105 = a1;
  uint64_t v106 = a2;
  int v107 = a3;
  if (ttseg_loc_check_vns(*(void *)(v25 + 40)))
  {
    int v48 = 2;
    *(_DWORD *)(v17 + 160) = 2;
    *(_DWORD *)(v17 + 168) = 2;
  }
  else
  {
    int v48 = 0;
  }
  uint64_t v49 = 0;
  char v50 = 1;
  do
  {
    uint64_t v51 = v17 + 24 * v49;
    int v53 = *(_DWORD *)(v51 + 112);
    long long v52 = (_DWORD *)(v51 + 112);
    long long v55 = v52 + 4;
    int v54 = v52[4];
    unsigned int v56 = v54 + v53;
    unsigned int v57 = v52[2];
    if (v53 + v54) {
      BOOL v58 = v57 == 0;
    }
    else {
      BOOL v58 = 0;
    }
    if (v58)
    {
      uint64_t v59 = *(void *)(v25 + 32);
      int v60 = 16107;
      goto LABEL_39;
    }
    if (v57 > v56)
    {
      uint64_t v59 = *(void *)(v25 + 32);
      int v60 = 16109;
LABEL_39:
      log_OutPublic(v59, (uint64_t)"TTSEG", (v49 + v60), 0, v44, v45, v46, v47, v102);
      int v54 = *v55;
      v52[2] = *v55 + *v52;
    }
    if (v54)
    {
      uint64_t v61 = v17 + 24 * v49;
      unsigned int v63 = *(_DWORD *)(v61 + 132);
      uint64_t v62 = (_DWORD *)(v61 + 132);
      if (v63 <= 0x1D)
      {
        log_OutPublic(*(void *)(v25 + 32), (uint64_t)"TTSEG", 16126, "%s%u%s%s", v44, v45, v46, v47, "min_val");
        _DWORD *v62 = 30;
      }
    }
    v48 += v56;
    int v64 = v50 & 1;
    uint64_t v65 = "CPR";
    if (v50) {
      uint64_t v65 = "TTS";
    }
    log_OutText(*(void *)(v25 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"%s licensing pool size = %lu, max dynamic licenses = %lu, overdraft threshold = %lu", v45, v46, v47, (uint64_t)v65);
    char v50 = 0;
    uint64_t v49 = 1;
  }
  while (v64);
  if (!v48) {
    log_OutPublic(*(void *)(v25 + 32), (uint64_t)"TTSEG", 16105, 0, v44, v45, v46, v47, v102);
  }
  if ((paramc_ParamGetStr(*(void *)(v25 + 40), (uint64_t)"licensingservers", &v119) & 0x80000000) != 0
    || (uint64_t v66 = (uint64_t)v119) == 0
    || !*v119)
  {
    uint64_t v119 = "27000@localhost";
    uint64_t v3 = paramc_ParamSetStr(*(void *)(v25 + 40), (uint64_t)"licensingservers", "27000@localhost");
    if ((v3 & 0x80000000) == 0)
    {
      uint64_t v66 = (uint64_t)v119;
      goto LABEL_54;
    }
    goto LABEL_90;
  }
  uint64_t v3 = 0;
LABEL_54:
  log_OutText(*(void *)(v25 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG licensing configuration : servers '%s'", v41, v42, v43, v66);
  paramc_ParamGetStr(*(void *)(v115 + 40), (uint64_t)"licensingservers", &v110);
  if ((SWIlicense_inhibited & 1) == 0 && kaldi::nnet1::Component::IsUpdatable(v105))
  {
    log_OutText(*(void *)(v115 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG SWIlicenseInitEx failed : End", v68, v69, v70, v103);
    goto LABEL_57;
  }
  *(_DWORD *)(v17 + 216) = ttseg_loc_LicensingAcquirePool(v115, v17, (kaldi::nnet1::Component *)4, 3, v67, v68, v69, v70) >> 31;
  if (SWIlicense_inhibited) {
    int v77 = 0;
  }
  else {
    int v77 = SWIlicenseLockMulti(0, 10, 1, 0);
  }
  *(_DWORD *)(v17 + 228) = v77 == 0;
  long long v78 = "OFF";
  if (!v77) {
    long long v78 = "ON";
  }
  log_OutText(*(void *)(v115 + 32), (uint64_t)"TTSEG", 3, 0, (uint64_t)"Unmetered is %s", v74, v75, v76, (uint64_t)v78);
  if ((SWIlicense_inhibited & 1) != 0
    || !SWIlicenseLockMulti(0, 8, 1, 0)
    || (SWIlicense_inhibited & 1) != 0
    || !SWIlicenseLockMulti(0, 9, 1, 0))
  {
    long long v82 = "Found a license feature of type MRCP_PPM";
    int v83 = 2;
  }
  else if (SWIlicense_inhibited)
  {
    long long v82 = "Found a license feature of type MRCP";
    int v83 = 1;
  }
  else
  {
    int v83 = 1;
    if (SWIlicenseLockMulti(0, 6, 1, 0))
    {
      long long v82 = "Found a license feature of type MRCP";
      if ((SWIlicense_inhibited & 1) == 0)
      {
        int v100 = SWIlicenseLockMulti(0, 7, 1, 0);
        int v83 = v100 == 0;
        if (v100) {
          long long v82 = "License feature type is standard";
        }
      }
    }
    else
    {
      long long v82 = "Found a license feature of type MRCP";
    }
  }
  *(_DWORD *)(v17 + 224) = v83;
  log_OutText(*(void *)(v115 + 32), (uint64_t)"TTSEG", 3, 0, (uint64_t)v82, v79, v80, v81, v104);
  uint64_t v88 = ttseg_loc_LicensingAcquirePool(v115, v17, (kaldi::nnet1::Component *)g_SWIlicenseFeatureTTSOpt[*(unsigned int *)(v17 + 224)], 0, v84, v85, v86, v87);
  if ((v88 & 0x80000000) != 0) {
    goto LABEL_89;
  }
  uint64_t v88 = ttseg_loc_LicensingAcquirePool(v115, v17, (kaldi::nnet1::Component *)g_SWIlicenseFeatureCPROpt[*(unsigned int *)(v17 + 224)], 1, v40, v41, v42, v43);
  if ((v88 & 0x80000000) != 0) {
    goto LABEL_89;
  }
  *(void *)(v17 + 164) = 0x200000002;
  if ((langCodeConverter_GetInterface(1u, (void *)(v17 + 88)) & 0x80000000) != 0) {
    goto LABEL_77;
  }
  uint64_t v88 = (**(uint64_t (***)(kaldi::nnet1::Component *, uint64_t, uint64_t))(v17 + 88))(v105, v106, v17 + 96);
  if ((v88 & 0x80000000) != 0) {
    goto LABEL_89;
  }
  uint64_t v89 = *(void *)(v115 + 48);
  if (!v89) {
    goto LABEL_77;
  }
  *((void *)&v111 + 1) = *(void *)(v17 + 88);
  *(void *)&long long v111 = 1;
  long long v112 = *(_OWORD *)(v17 + 96);
  uint64_t v113 = 0;
  uint64_t v90 = objc_RegisterObject(v89, (uint64_t)"LANGCODECONVERTER", &v111);
  if ((v90 & 0x80000000) != 0)
  {
LABEL_93:
    uint64_t v3 = v90;
    log_OutPublic(*(void *)(v115 + 32), (uint64_t)"TTSEG", 16098, "%s%x", v91, v92, v93, v94, "lherror");
    goto LABEL_90;
  }
  *(_DWORD *)(v17 + 60) = 1;
LABEL_77:
  uint64_t v95 = v115;
  uint64_t v96 = *(void *)(v115 + 48);
  if (v96)
  {
    if ((objc_GetObject(v96, (uint64_t)"COMPQUERY", &v114) & 0x80000000) == 0)
    {
      uint64_t v97 = v114;
      *(void *)(v17 + 32) = *(void *)(v114 + 8);
      *(_OWORD *)(v17 + 40) = *(_OWORD *)(v97 + 16);
      goto LABEL_80;
    }
    uint64_t v95 = v115;
  }
  uint64_t v88 = brk_InterfaceQueryEx(*(void *)(v95 + 24), (uint64_t)"compquery", 1, 1, v17 + 16, v17 + 32);
  if ((v88 & 0x80000000) != 0
    || (uint64_t v88 = (*(uint64_t (**)(void, void, kaldi::nnet1::Component *, uint64_t, uint64_t))(*(void *)(v17 + 32) + 32))(*(void *)(v17 + 16), *(void *)(v17 + 24), v105, v106, v17 + 40), (v88 & 0x80000000) != 0))
  {
LABEL_89:
    uint64_t v3 = v88;
    goto LABEL_90;
  }
  uint64_t v98 = *(void *)(v115 + 48);
  if (!v98) {
    goto LABEL_80;
  }
  *((void *)&v111 + 1) = *(void *)(v17 + 32);
  *(void *)&long long v111 = 1;
  long long v112 = *(_OWORD *)(v17 + 40);
  uint64_t v113 = 0;
  uint64_t v90 = objc_RegisterObject(v98, (uint64_t)"COMPQUERY", &v111);
  if ((v90 & 0x80000000) != 0) {
    goto LABEL_93;
  }
  *(_DWORD *)(v17 + 56) = 1;
LABEL_80:
  uint64_t v3 = esc_seq_init(v105, v106, (uint64_t *)(v17 + 232));
  if ((v3 & 0x80000000) != 0) {
    goto LABEL_90;
  }
  long long v108 = xmmword_26C21F7E8;
  uint64_t v109 = off_26C21F7F8;
  ttsJSON_InitHooks((uint64_t)&v108);
LABEL_57:
  *int v107 = v17;
  *((_DWORD *)v107 + 2) = 52653;
LABEL_91:
  log_OutText(*(void *)(v115 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Class Open : End (%x, %p)", v71, v72, v73, v3);
  return v3;
}

uint64_t ttseg_loc_LicensingAcquirePool(uint64_t a1, uint64_t a2, kaldi::nnet1::Component *this, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v19 = 0;
  if (a4 == 2)
  {
    uint64_t result = 0;
    *(void *)(a2 + 164) = 0x200000002;
    return result;
  }
  uint64_t result = 2166366215;
  if (this <= 9)
  {
    if (((1 << (char)this) & 0x141) != 0)
    {
      unsigned int v12 = 0;
    }
    else
    {
      if (((1 << (char)this) & 0x288) == 0)
      {
        if (this != 4) {
          return result;
        }
        if (SWIlicense_inhibited == 1)
        {
          int v19 = 1;
          unsigned int v12 = 3;
          goto LABEL_28;
        }
        int v16 = SWIlicenseLockMulti(0, 4, 1, &v19);
        unsigned int v12 = 3;
        if (v16 == 4) {
          goto LABEL_28;
        }
        goto LABEL_18;
      }
      unsigned int v12 = 1;
    }
    uint64_t v13 = a2 + 24 * v12;
    uint64_t v14 = (int *)(v13 + 112);
    if (*(_DWORD *)(v13 + 128) && (SWIlicense_inhibited & 1) == 0) {
      kaldi::nnet1::Component::IsUpdatable(this);
    }
    int v15 = *v14;
    if (!*v14) {
      return 0;
    }
    if (SWIlicense_inhibited == 1)
    {
      int v19 = *v14;
      *(_DWORD *)(a2 + 24 * v12 + 116) = v15;
LABEL_28:
      ttseg_loc_LicenseLog((uint64_t **)a1, a2, v12, 10, a5, a6, a7, a8);
      return 0;
    }
    int v16 = SWIlicenseLockMulti(0, (uint64_t)this, v15, &v19);
    unsigned int v17 = v19;
    if (v16) {
      int v18 = 0;
    }
    else {
      int v18 = v19;
    }
    *(_DWORD *)(a2 + 24 * v12 + 116) = v18;
    if (!v16)
    {
      if (v17 >= *v14) {
        goto LABEL_28;
      }
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", v12 | 0x3EF6, "%s%u%s%u", a5, a6, a7, a8, "configuredPorts");
      return 2166373638;
    }
LABEL_18:
    if (v16 == 4) {
      return 2166373639;
    }
    if (!v16) {
      goto LABEL_28;
    }
    return 2166373638;
  }
  return result;
}

void *ttsjson_Alloc(uint64_t a1, size_t size)
{
  if (a1) {
    return (void *)heap_Alloc(a1, size);
  }
  else {
    return malloc_type_malloc(size, 0xA45A668BuLL);
  }
}

void ttsjson_Free(void *a1, void *a2)
{
  if (a1) {
    heap_Free(a1, (uint64_t)a2);
  }
  else {
    free(a2);
  }
}

void *ttsjson_Realloc(uint64_t *a1, void *ptr, size_t size)
{
  if (a1) {
    return (void *)heap_Realloc(a1, (uint64_t)ptr, size);
  }
  else {
    return malloc_type_realloc(ptr, size, 0x8BC689B3uLL);
  }
}

uint64_t ttseg_loc_ClassClose(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *a2;
  if (!*a2) {
    return 0;
  }
  *a2 = 0;
  uint64_t v10 = *(void *)(a1 + 48);
  if (!*(_DWORD *)(v8 + 56))
  {
    if (v10 && *(void *)(v8 + 32))
    {
      if ((objc_ReleaseObject(v10, (uint64_t)"COMPQUERY") & 0x80000000) != 0) {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16097, "%s%x", v13, v14, v15, v16, "lherror");
      }
      *(void *)(v8 + 32) = 0;
      uint64_t v12 = 0;
      *(void *)(v8 + 40) = safeh_GetNullHandle();
      *(void *)(v8 + 48) = v17;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v11 = objc_UnregisterObject(v10, (uint64_t)"COMPQUERY");
  if ((v11 & 0x80000000) == 0)
  {
LABEL_12:
    uint64_t v12 = 0;
    goto LABEL_13;
  }
  uint64_t v12 = v11;
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16096, "%s%x", a5, a6, a7, a8, "lherror");
LABEL_13:
  uint64_t v18 = *(void *)(v8 + 32);
  if (v18)
  {
    uint64_t v19 = *(void *)(v8 + 40);
    if (v19)
    {
      int v20 = (*(uint64_t (**)(uint64_t, void))(v18 + 40))(v19, *(void *)(v8 + 48));
      if (v20 < 0 && (int)v12 > -1) {
        LODWORD(v12) = v20;
      }
      uint64_t v18 = *(void *)(v8 + 32);
    }
    int v22 = brk_InterfaceRelease(*(void *)(a1 + 24), v18);
    if (v22 >= 0 || (int)v12 <= -1) {
      uint64_t v12 = v12;
    }
    else {
      uint64_t v12 = v22;
    }
  }
  IsUpdatable = *(kaldi::nnet1::Component **)(a1 + 48);
  if (IsUpdatable && *(void *)(v8 + 88) && *(_DWORD *)(v8 + 60))
  {
    uint64_t v25 = objc_UnregisterObject((uint64_t)IsUpdatable, (uint64_t)"LANGCODECONVERTER");
    if ((v25 & 0x80000000) != 0)
    {
      uint64_t v26 = v25;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16096, "%s%x", a5, a6, a7, a8, "lherror");
      uint64_t v12 = v26;
    }
    IsUpdatable = *(kaldi::nnet1::Component **)(v8 + 96);
    if (IsUpdatable)
    {
      IsUpdatable = (kaldi::nnet1::Component *)(*(uint64_t (**)(kaldi::nnet1::Component *, void))(*(void *)(v8 + 88) + 8))(IsUpdatable, *(void *)(v8 + 104));
      if ((int)IsUpdatable >= 0 || (int)v12 <= -1) {
        uint64_t v12 = v12;
      }
      else {
        uint64_t v12 = IsUpdatable;
      }
    }
  }
  if ((SWIlicense_inhibited & 1) == 0) {
    IsUpdatable = (kaldi::nnet1::Component *)kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)g_SWIlicenseFeatureCPROpt[*(unsigned int *)(v8 + 224)]);
  }
  if (*(_DWORD *)(v8 + 140))
  {
    IsUpdatable = (kaldi::nnet1::Component *)ttseg_loc_LicenseLog((uint64_t **)a1, v8, 1u, 11, a5, a6, a7, a8);
    if ((SWIlicense_inhibited & 1) == 0)
    {
      IsUpdatable = (kaldi::nnet1::Component *)kaldi::nnet1::Component::IsUpdatable(0);
      if (IsUpdatable)
      {
        uint64_t v12 = 2166373642;
        IsUpdatable = (kaldi::nnet1::Component *)log_OutText(*(void *)(a1 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG SWIlicenseUnlock failed", a6, a7, a8, v42);
      }
    }
    *(_DWORD *)(v8 + 140) = 0;
  }
  if ((SWIlicense_inhibited & 1) == 0) {
    IsUpdatable = (kaldi::nnet1::Component *)kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)g_SWIlicenseFeatureTTSOpt[*(unsigned int *)(v8 + 224)]);
  }
  if (*(_DWORD *)(v8 + 116))
  {
    IsUpdatable = (kaldi::nnet1::Component *)ttseg_loc_LicenseLog((uint64_t **)a1, v8, 0, 11, a5, a6, a7, a8);
    if ((SWIlicense_inhibited & 1) == 0)
    {
      IsUpdatable = (kaldi::nnet1::Component *)kaldi::nnet1::Component::IsUpdatable(0);
      if (IsUpdatable)
      {
        uint64_t v12 = 2166373642;
        IsUpdatable = (kaldi::nnet1::Component *)log_OutText(*(void *)(a1 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG SWIlicenseUnlock failed", v28, v29, v30, v42);
      }
    }
    *(_DWORD *)(v8 + 116) = 0;
  }
  if (*(_DWORD *)(v8 + 164)) {
    *(_DWORD *)(v8 + 164) = 0;
  }
  if ((SWIlicense_inhibited & 1) == 0 && kaldi::nnet1::Component::IsUpdatable(IsUpdatable))
  {
    uint64_t v12 = 2166373642;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG SWIlicenseTerminate failed", v31, v32, v33, v42);
  }
  uint64_t v34 = *(void *)(v8 + 208);
  if (v34)
  {
    int v35 = critsec_ObjClose(v34);
    if ((int)v12 > -1 && v35 < 0) {
      uint64_t v12 = v35;
    }
    else {
      uint64_t v12 = v12;
    }
  }
  if (*(_DWORD *)(v8 + 64) == 1)
  {
    int v37 = paramc_ObjClose(*(void *)(a1 + 40));
    if ((int)v12 > -1 && v37 < 0) {
      uint64_t v12 = v37;
    }
    else {
      uint64_t v12 = v12;
    }
  }
  uint64_t v39 = *(void **)(v8 + 232);
  if (v39)
  {
    esc_seq_deinit(*(_WORD **)v8, *(void *)(v8 + 8), v39, *(void *)(v8 + 240));
    *(void *)(v8 + 232) = safeh_GetNullHandle();
    *(void *)(v8 + 240) = v40;
  }
  if ((v12 & 0x80000000) == 0) {
    heap_Free(*(void **)(a1 + 8), v8);
  }
  return v12;
}

uint64_t ttseg_QueryCapability(const char *a1, unsigned char *a2)
{
  uint64_t v2 = 2166366208;
  if (a1 && a2)
  {
    if (!strcmp(a1, "uselect-query-capability")) {
      goto LABEL_19;
    }
    if (!strcmp(a1, "ldb-consistency-check"))
    {
      uint64_t v2 = 0;
      *a2 = 1;
      return v2;
    }
    if (!strcmp(a1, "lightssml"))
    {
      uint64_t v2 = 0;
      *(void *)a2 = "1.0";
      return v2;
    }
    if (!strcmp(a1, "phonetic-ap")
      || !strcmp(a1, "tn-internal-nuance-system-norm")
      || !strcmp(a1, "phonmap-multi-voice-format")
      || !strcmp(a1, "tAP-support-for-bndprm-voice")
      || !strcmp(a1, "voice-operating-point")
      || !strcmp(a1, "ruleset-type_out")
      || !strcmp(a1, "tAP-intra-silunits")
      || !strcmp(a1, "vocal-add-on")
      || !strcmp(a1, "tAP-silence-not-imposed-on-backend")
      || !strcmp(a1, "bet5-f0dur-tuning")
      || !strcmp(a1, "tn-typed-user-dictionary")
      || !strcmp(a1, "language-of-origin-user-dictionary")
      || !strcmp(a1, "tuning-resources-package-cup"))
    {
LABEL_19:
      uint64_t v2 = 0;
      *(_DWORD *)a2 = 1;
    }
  }
  return v2;
}

uint64_t ttseg_ClassClose(void *a1, int a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if ((ttseg_loc_CheckClassHandle(a1, a2, &v16, &v17) & 0x80000000) != 0) {
    return 2166366216;
  }
  log_OutText(*(void *)(v16 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Class Close : Begin (%p)", v2, v3, v4, v17);
  uint64_t v11 = ttseg_loc_ClassClose(v16, &v17, v5, v6, v7, v8, v9, v10);
  log_OutText(*(void *)(v16 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Class Close : End (%x)", v12, v13, v14, v11);
  return v11;
}

uint64_t ttseg_loc_CheckClassHandle(void *a1, int a2, void *a3, void *a4)
{
  *a4 = 0;
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 52653, 248);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8) {
      return 2166366216;
    }
    else {
      return result;
    }
  }
  else
  {
    *a4 = a1;
    if (a3)
    {
      uint64_t v8 = (_WORD *)*a1;
      uint64_t v9 = a1[1];
      return InitRsrcFunction(v8, v9, a3);
    }
  }
  return result;
}

uint64_t ttseg_GetTTSLicensePorts(void *a1, int a2, _DWORD *a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = ttseg_loc_CheckClassHandle(a1, a2, &v7, &v8);
  uint64_t v5 = 2166366216;
  if ((v4 & 0x80000000) == 0 && v8)
  {
    if (a3) {
      *a3 = *(_DWORD *)(v8 + 116);
    }
    return v4;
  }
  return v5;
}

uint64_t ttseg_ObjOpen(void *a1, int a2, _WORD *a3, uint64_t a4, long long *a5, uint64_t a6, char *a7, long long *a8)
{
  uint64_t v109 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  int v106 = 0;
  uint64_t AlternativeEscSeq = 2166366218;
  uint64_t v105 = 0;
  if ((ttseg_loc_CheckClassHandle(a1, a2, &v109, &v108) & 0x80000000) != 0) {
    return 2166366216;
  }
  if (!a8) {
    return 2166366214;
  }
  uint64_t inited = InitRsrcFunction(a3, a4, &v109);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (!*(void *)(v109 + 40)) {
    return 2166366215;
  }
  log_OutText(*(void *)(v109 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Object Open: Begin (%p, %p, %s)", v16, v17, v18, (uint64_t)a5);
  uint64_t v19 = heap_Calloc(*(void **)(v109 + 8), 1, 592);
  uint64_t v110 = (unsigned int *)v19;
  if (!v19)
  {
    log_OutPublic(*(void *)(v109 + 32), (uint64_t)"TTSEG", 16000, 0, v20, v21, v22, v23, v101);
    return AlternativeEscSeq;
  }
  uint64_t v24 = v19;
  *(void *)a8 = v19;
  *((_DWORD *)a8 + 2) = 52652;
  *(void *)uint64_t v19 = a3;
  *(void *)(v19 + 8) = a4;
  *(_OWORD *)(v19 + 16) = *a8;
  uint64_t v25 = v108;
  *(void *)(v19 + 32) = v108;
  long long v26 = *a5;
  long long v27 = a5[1];
  *(_OWORD *)(v19 + 72) = a5[2];
  *(_OWORD *)(v19 + 56) = v27;
  *(_OWORD *)(v19 + 40) = v26;
  *(void *)(v19 + 88) = a6;
  *(_DWORD *)(v19 + 104) = 1;
  *(_DWORD *)(v19 + 192) = 3;
  *(void *)(v19 + 552) = 0;
  uint64_t v28 = critsec_ObjOpen(*(void *)(v109 + 16), *(void **)(v109 + 8), (uint64_t *)(v19 + 96));
  if ((v28 & 0x80000000) != 0)
  {
    uint64_t v39 = v28;
    log_OutPublic(*(void *)(v109 + 32), (uint64_t)"TTSEG", 16024, "%s%x", v29, v30, v31, v32, "lherror");
    uint64_t AlternativeEscSeq = v39;
    goto LABEL_66;
  }
  uint64_t v33 = *(void **)(v109 + 8);
  uint64_t v34 = (uint64_t *)(v24 + 120);
  long long v102 = xmmword_26C21F800;
  *(void *)&long long v103 = off_26C21F810;
  if (!vector_ObjOpen(v33, &v102, 1, (uint64_t *)(v24 + 120)))
  {
    log_OutPublic(*(void *)(v109 + 32), (uint64_t)"TTSEG", 16000, 0, v35, v36, v37, v38, v101);
    goto LABEL_66;
  }
  if ((objc_GetObject(*(void *)(v109 + 48), (uint64_t)"SYNTHSTREAM", &v107) & 0x80000000) != 0)
  {
    uint64_t Object = pipeline_LoadObject(a3, a4, (uint64_t)"SYNTHSTREAM", "synthstream", *v34, 0);
    if ((Object & 0x80000000) != 0) {
      goto LABEL_26;
    }
    uint64_t v47 = objc_GetObject(*(void *)(v109 + 48), (uint64_t)"SYNTHSTREAM", &v107);
    if ((v47 & 0x80000000) != 0)
    {
      uint64_t AlternativeEscSeq = v47;
      log_OutPublic(*(void *)(v109 + 32), (uint64_t)"TTSEG", 16086, "%s%x", v48, v49, v50, v51, "lherror");
      goto LABEL_66;
    }
  }
  *(void *)(v24 + 128) = *(void *)(v107 + 8);
  if ((objc_GetObject(*(void *)(v109 + 48), (uint64_t)"LINGDB", &v107) & 0x80000000) == 0) {
    goto LABEL_10;
  }
  uint64_t Object = pipeline_LoadObject(a3, a4, (uint64_t)"LINGDB", "lingdb", *v34, 0);
  if ((Object & 0x80000000) != 0)
  {
LABEL_26:
    uint64_t AlternativeEscSeq = Object;
    goto LABEL_66;
  }
  uint64_t v52 = objc_GetObject(*(void *)(v109 + 48), (uint64_t)"LINGDB", &v107);
  if ((v52 & 0x80000000) != 0)
  {
    uint64_t AlternativeEscSeq = v52;
    log_OutPublic(*(void *)(v109 + 32), (uint64_t)"TTSEG", 16087, "%s%x", v53, v54, v55, v56, "lherror");
    goto LABEL_66;
  }
LABEL_10:
  *(void *)(v24 + 168) = *(void *)(v107 + 8);
  if (*(void *)(v25 + 88))
  {
    if ((objc_GetObject(*(void *)(v109 + 48), (uint64_t)"LANGCODECONVERTER", &v107) & 0x80000000) != 0)
    {
      long long v57 = *(_OWORD *)(v25 + 96);
      long long v102 = 0u;
      long long v103 = v57;
      LOBYTE(v102) = 1;
      uint64_t v58 = *(void *)(v25 + 88);
      uint64_t v104 = 0;
      *((void *)&v102 + 1) = v58;
      uint64_t v59 = objc_RegisterObject(*(void *)(v109 + 48), (uint64_t)"LANGCODECONVERTER", &v102);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_43;
      }
      *(_DWORD *)(v24 + 176) = 1;
    }
    else
    {
      objc_ReleaseObject(*(void *)(v109 + 48), (uint64_t)"LANGCODECONVERTER");
    }
  }
  if (*(void *)(v25 + 32))
  {
    if ((objc_GetObject(*(void *)(v109 + 48), (uint64_t)"COMPQUERY", &v107) & 0x80000000) != 0)
    {
      uint64_t v104 = 0;
      long long v64 = *(_OWORD *)(v25 + 40);
      long long v102 = 0u;
      long long v103 = v64;
      LOBYTE(v102) = 1;
      *((void *)&v102 + 1) = *(void *)(v25 + 32);
      uint64_t v59 = objc_RegisterObject(*(void *)(v109 + 48), (uint64_t)"COMPQUERY", &v102);
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_43;
      }
      *(_DWORD *)(v24 + 180) = 1;
    }
    else
    {
      objc_ReleaseObject(*(void *)(v109 + 48), (uint64_t)"COMPQUERY");
    }
  }
  if ((objc_GetObject(*(void *)(v109 + 48), (uint64_t)"TTSEG", &v107) & 0x80000000) != 0)
  {
    long long v65 = *a8;
    *(void *)&long long v102 = 3;
    long long v103 = v65;
    uint64_t v104 = 0;
    *((void *)&v102 + 1) = &ITtsEg;
    uint64_t v59 = objc_RegisterObject(*(void *)(v109 + 48), (uint64_t)"TTSEG", &v102);
    if ((v59 & 0x80000000) == 0)
    {
      *(_DWORD *)(v24 + 184) = 1;
      goto LABEL_38;
    }
LABEL_43:
    uint64_t AlternativeEscSeq = v59;
    log_OutPublic(*(void *)(v109 + 32), (uint64_t)"TTSEG", 16098, "%s%x", v60, v61, v62, v63, "lherror");
    goto LABEL_66;
  }
  objc_ReleaseObject(*(void *)(v109 + 48), (uint64_t)"TTSEG");
LABEL_38:
  Uuint64_t Int = tinystack_Ini(v109, 50, (void *)(v24 + 576));
  uint64_t v71 = v109;
  if ((UInt & 0x80000000) != 0) {
    goto LABEL_63;
  }
  uint64_t AlternativeEscSeq = InitLoadedCupList(*(void **)(v109 + 8), (uint64_t *)(v24 + 584));
  uint64_t v72 = *(void *)(v109 + 32);
  if ((AlternativeEscSeq & 0x80000000) != 0)
  {
LABEL_65:
    log_OutPublic(v72, (uint64_t)"TTSEG", 16104, "%s%x", v67, v68, v69, v70, "lherror");
    goto LABEL_66;
  }
  if (log_GetLogLevel(v72) >= 4)
  {
    uint64_t v73 = *(void *)(v109 + 40);
    *(void *)&long long v102 = v24;
    *((void *)&v102 + 1) = ttseg_loc_ParamCheckChange;
    *(void *)&long long v103 = ttseg_loc_ParamLearnChange;
    if ((paramc_ListenerAdd(v73, 0, &v102) & 0x80000000) != 0) {
      log_OutPublic(*(void *)(v109 + 32), (uint64_t)"TTSEG", 16025, 0, v74, v75, v76, v77, v101);
    }
    else {
      *(_DWORD *)(v24 + 188) = 1;
    }
  }
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"pitch", 0x64u);
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"rate", 0x64u);
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"volume", 0x50u);
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"pitch_baseline", 0x64u);
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"rate_baseline", 0x64u);
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"timbre_baseline", 0x64u);
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"volume_baseline", 0x50u);
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"waitfactor", 2u);
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"readmode", 1u);
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"markermode", 0);
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"infiniteloopdetectlimit", 0x2710u);
  ttseg_loc_ParamSetIfNotSetStr(*(void *)(v109 + 40), (uint64_t)"inputmimetype", byte_20D6B212C);
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"audiooutputbufsamples", 0x1000u);
  ttseg_loc_ParamSetIfNotSetStr(*(void *)(v109 + 40), (uint64_t)"licensingmode", "default");
  ttseg_loc_ParamSetIfNotSetStr(*(void *)(v109 + 40), (uint64_t)"__NUAN_alternative_esc_seq__", byte_20D6B212C);
  ttseg_loc_ParamSetIfNotSetStr(*(void *)(v109 + 40), (uint64_t)"companyname", byte_20D6B212C);
  ttseg_loc_ParamSetIfNotSetStr(*(void *)(v109 + 40), (uint64_t)"applicationname", byte_20D6B212C);
  ttseg_loc_ParamSetIfNotSetStr(*(void *)(v109 + 40), (uint64_t)"basicclcprosody", "no");
  ttseg_loc_ParamSetIfNotSetStr(*(void *)(v109 + 40), (uint64_t)"punctmarks", byte_20D6B212C);
  ttseg_loc_ParamSetIfNotSetStr(*(void *)(v109 + 40), (uint64_t)"addondct_extended_lookup", "no");
  ttseg_loc_ParamSetIfNotSetUInt(*(void *)(v109 + 40), (uint64_t)"nnpausingoverride", 0);
  LODWORD(v102) = 1;
  paramc_ParamGetUInt(*(void *)(v109 + 40), (uint64_t)"waitfactor", (unsigned int *)&v102);
  paramc_ParamSetUInt(*(void *)(v109 + 40), (uint64_t)"waitfactorbackup", v102);
  Uuint64_t Int = paramc_ParamGetUInt(*(void *)(v109 + 40), (uint64_t)"infiniteloopdetectlimit", (unsigned int *)(v24 + 112));
  uint64_t v71 = v109;
  if ((UInt & 0x80000000) != 0)
  {
LABEL_63:
    uint64_t AlternativeEscSeq = UInt;
LABEL_64:
    uint64_t v72 = *(void *)(v71 + 32);
    goto LABEL_65;
  }
  long long v78 = v110;
  uint64_t v79 = paramc_ParamGetUInt(*(void *)(v109 + 40), (uint64_t)"markermode", v110 + 27);
  if ((v79 & 0x80000000) != 0)
  {
    uint64_t AlternativeEscSeq = v79;
    uint64_t v71 = v109;
    goto LABEL_64;
  }
  if (!v78[47])
  {
    for (uint64_t i = 0; i != 7; ++i)
    {
      uint64_t v81 = TtsEgListenedToParams[i];
      uint64_t v82 = *(void *)(v109 + 40);
      *(void *)&long long v102 = v24;
      *((void *)&v102 + 1) = ttseg_loc_ParamCheckChange;
      *(void *)&long long v103 = ttseg_loc_ParamLearnChange;
      uint64_t v83 = paramc_ListenerAdd(v82, v81, &v102);
      if ((v83 & 0x80000000) != 0)
      {
        uint64_t v88 = v83;
        log_OutPublic(*(void *)(v109 + 32), (uint64_t)"TTSEG", 16025, "%s%s%s%x", v84, v85, v86, v87, "parameter");
        if ((v88 & 0x1FFF) != 0x14)
        {
          uint64_t AlternativeEscSeq = v88;
          goto LABEL_66;
        }
      }
      else
      {
        v78[47] = 1;
      }
    }
  }
  uint64_t v89 = ssftthrottle_ObjOpen(a3, a4, (void *)v78 + 27);
  if ((v89 & 0x80000000) != 0)
  {
    uint64_t AlternativeEscSeq = v89;
    log_OutPublic(*(void *)(v109 + 32), (uint64_t)"TTSEG", 16029, "%s%x", v90, v91, v92, v93, "lherror");
    goto LABEL_66;
  }
  uint64_t v94 = v108;
  v78[52] = *(_DWORD *)(v108 + 216);
  *((void *)&v102 + 1) = &ttseg_ObjOpen_ISynthOutputSink;
  *(void *)&long long v102 = 1;
  long long v103 = *a8;
  uint64_t v104 = 0;
  uint64_t AlternativeEscSeq = objc_RegisterObject(*(void *)(v109 + 48), (uint64_t)"SYNTHOUTPUTSINK", &v102);
  if ((AlternativeEscSeq & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(v109 + 32), (uint64_t)"TTSEG", 16088, "%s%x", v95, v96, v97, v98, "lherror");
    goto LABEL_66;
  }
  v78[56] = 1;
  if (a7
    && *a7
    && ((AlternativeEscSeq = pipeline_ObjOpen(*(_WORD **)v78, *((void *)v78 + 1), a7, 0, 0xFFFF, *((void *)v78 + 15), (uint64_t **)v78 + 29, &v106), (AlternativeEscSeq & 0x80000000) != 0)|| (uint64_t v99 = *((void *)v78 + 29), *((void *)v78 + 68) = v99, v78[48] = ttseg_loc_LicensingModePipeline(v109, (uint64_t)v78, v99), !*(_DWORD *)(v94 + 220))&& (AlternativeEscSeq = ttseg_loc_LicensingIncreaseInstanceCount(v109, (uint64_t)v78), (AlternativeEscSeq & 0x80000000) != 0))|| (paramc_ParamGetStr(*(void *)(v109 + 40), (uint64_t)"__NUAN_alternative_esc_seq__", &v105) & 0x80000000) == 0&& (AlternativeEscSeq = ttseg_loc_LoadAlternativeEscSeq((uint64_t)v78), (AlternativeEscSeq & 0x80000000) != 0))
  {
LABEL_66:
    ttseg_loc_ObjClose(v109, (_WORD ***)&v110, v40, v41, v42, v43, v44, v45);
    uint64_t v110 = 0;
    *(void *)a8 = 0;
    *((_DWORD *)a8 + 2) = 0;
  }
  log_OutText(*(void *)(v109 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Object Open: End (%x, %p)", v43, v44, v45, AlternativeEscSeq);
  return AlternativeEscSeq;
}

uint64_t ttseg_loc_ElemCopyPartsString(const char **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  if (*a1) {
    uint64_t v6 = strlen(*a1) + 1;
  }
  else {
    uint64_t v6 = 1;
  }
  uint64_t result = heap_Alloc(a2, v6);
  *a3 = result;
  if (result)
  {
    if (v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = byte_20D6B212C;
    }
    strcpy((char *)result, v8);
    return 1;
  }
  return result;
}

uint64_t *ttseg_loc_ElemFreePartsString(uint64_t *result, void *a2)
{
  if (*result) {
    return heap_Free(a2, *result);
  }
  return result;
}

uint64_t ttseg_GetInterface(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      goto LABEL_4;
    case 4:
      uint64_t result = 0;
      *a2 = &ITtsEg;
      SWIlicense_inhibited = 1;
      break;
    case 3:
LABEL_4:
      uint64_t result = 0;
      *a2 = &ITtsEg;
      return result;
    default:
      return 2166366209;
  }
  return result;
}

uint64_t InitLoadedCupList(void *a1, uint64_t *a2)
{
  uint64_t v4 = (void *)heap_Calloc(a1, 1, 24);
  uint64_t v5 = (uint64_t)v4;
  if (v4 && (*uint64_t v4 = a1, v4[2] = 64, v6 = heap_Calloc(a1, 1, 1024), (*(void *)(v5 + 8) = v6) != 0))
  {
    uint64_t result = 0;
    *a2 = v5;
  }
  else
  {
    DeinitLoadedCupList(a1, v5);
    return 2166366218;
  }
  return result;
}

uint64_t ttseg_loc_ParamCheckChange(uint64_t a1, const char *a2, const char *a3, int *a4)
{
  uint64_t v11 = 0;
  if (!a3) {
    goto LABEL_7;
  }
  uint64_t result = 0;
  int v7 = 1;
  if (a1 && *a3)
  {
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v11) & 0x80000000) != 0)
    {
LABEL_7:
      uint64_t result = 0;
      int v7 = 1;
      goto LABEL_8;
    }
    if (!strcmp(a2, "readmode"))
    {
      BOOL v10 = (atoi(a3) - 1) >= 4;
    }
    else
    {
      if (strcmp(a2, "waitfactor")) {
        goto LABEL_7;
      }
      BOOL v10 = atoi(a3) >= 0xA;
    }
    int v7 = !v10;
    if (v10) {
      uint64_t result = 2166366223;
    }
    else {
      uint64_t result = 0;
    }
  }
LABEL_8:
  *a4 = v7;
  return result;
}

uint64_t ttseg_loc_ParamLearnChange(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v13 = 0;
  if (!a3) {
    return 0;
  }
  uint64_t result = 0;
  if (a1 && *a3)
  {
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v13) & 0x80000000) == 0)
    {
      log_OutText(*(void *)(v13 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"Parameter change: %s=%s", v7, v8, v9, (uint64_t)a2);
      if (!strcmp(a2, "infiniteloopdetectlimit"))
      {
        unsigned int v10 = LH_atou(a3);
        uint64_t result = 0;
        *(_DWORD *)(a1 + 112) = v10;
        return result;
      }
      if (!strcmp(a2, "markermode"))
      {
        unsigned int v11 = LH_atou(a3);
        uint64_t result = 0;
        *(_DWORD *)(a1 + 108) = v11;
        return result;
      }
      if (!strcmp(a2, "audiooutputbufsamples"))
      {
        unsigned int v12 = LH_atou(a3);
        uint64_t result = 0;
        *(_DWORD *)(a1 + 432) = v12;
        return result;
      }
      if (!strcmp(a2, "__NUAN_alternative_esc_seq__")) {
        return ttseg_loc_LoadAlternativeEscSeq(a1);
      }
    }
    return 0;
  }
  return result;
}

uint64_t ttseg_loc_ParamSetIfNotSetUInt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v7 = 0;
  if ((paramc_ParamGetStr(a1, a2, &v7) & 0x80000000) != 0 || !v7) {
    return paramc_ParamSetUInt(a1, a2, a3);
  }
  else {
    return paramc_ParamRelease(a1);
  }
}

uint64_t ttseg_loc_ParamSetIfNotSetStr(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v7 = 0;
  if ((paramc_ParamGetStr(a1, a2, &v7) & 0x80000000) != 0 || !v7) {
    return paramc_ParamSetStr(a1, a2, a3);
  }
  else {
    return paramc_ParamRelease(a1);
  }
}

uint64_t ttseg_loc_ProcessResults(uint64_t a1, int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 52652, 592);
  if ((result & 0x80000000) != 0) {
    return 2166366215;
  }
  if (a3 == 2)
  {
    if (*(_DWORD *)(a1 + 420) != 2) {
      uint64_t result = ttseg_loc_ProcessLoop(a1, 1, v10, v11, v12, v13, v14, v15);
    }
  }
  else if (!a3 && !*(void *)(a1 + 424))
  {
    uint64_t result = ttseg_loc_PutOutput(a1, 0, v10, v11, v12, v13, v14, v15);
  }
  if (a3 == 1 || (result & 0x80000000) != 0)
  {
    LODWORD(v16) = 0;
    *a4 = 0;
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 48);
    if (v16)
    {
      *a4 = *(_DWORD *)(a1 + 432);
      LODWORD(v16) = *(_DWORD *)(a1 + 436);
    }
    else
    {
      *a4 = 4096;
    }
  }
  *a5 = v16;
  return result;
}

uint64_t ttseg_loc_LicensingModePipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if ((InitRsrcFunction(**(_WORD ***)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), &v10) & 0x80000000) == 0
    && ttseg_loc_check_vns(*(void *)(v10 + 40)))
  {
    return 2;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  if (!*(_DWORD *)(v7 + 140) && !*(_DWORD *)(v7 + 152)) {
    return 0;
  }
  int Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voicemodel", &v11);
  uint64_t result = 0;
  if ((Str & 0x80000000) == 0 && v11)
  {
    if (LH_stricmp(v11, "cpr")) {
      return 0;
    }
    if (*(_WORD *)(a3 + 24))
    {
      for (unint64_t i = 0; i < *(unsigned __int16 *)(a3 + 24); ++i)
      {
        uint64_t result = LH_strnicmp(*(void *)(*(void *)(*(void *)(a3 + 16) + 8 * i) + 8), (uint64_t)"uselect/", 8uLL);
        if (!result) {
          break;
        }
        if (!LH_strnicmp(*(void *)(*(void *)(*(void *)(a3 + 16) + 8 * i) + 8), (uint64_t)"select/", 7uLL)&& LH_stricmp(*(char **)(*(void *)(*(void *)(a3 + 16) + 8 * i) + 8), "select/cpr"))
        {
          return 0;
        }
        uint64_t result = 1;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t ttseg_loc_LicensingIncreaseInstanceCount(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 196))
  {
    unsigned int v5 = *(_DWORD *)(a2 + 192);
    uint64_t v2 = critsec_Enter(*(void **)(*(void *)(a2 + 32) + 208));
    if ((v2 & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16112, "%s%s%s%x", v6, v7, v8, v9, "function");
      return v2;
    }
    if (v5)
    {
      if (v5 != 1)
      {
        if (v5 == 2)
        {
          uint64_t v10 = *(void *)(a2 + 32);
          unsigned int v11 = *(_DWORD *)(v10 + 172);
          if (v11 >= *(_DWORD *)(v10 + 164))
          {
            uint64_t v2 = 2166373638;
            log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16115, "%s%lu", v6, v7, v8, v9, "licensePorts");
          }
          else
          {
            *(_DWORD *)(v10 + 172) = v11 + 1;
            *(_DWORD *)(a2 + 196) = 1;
          }
        }
        goto LABEL_44;
      }
      uint64_t v12 = *(_DWORD **)(a2 + 32);
      if (v12[37] < v12[35]
        || ((SWIlicense_inhibited & 1) == 0
          ? (NumOfLicensesInUseInCache = SWIlicenseGetNumOfLicensesInUseInCache(), uint64_t v12 = *(_DWORD **)(a2 + 32))
          : (_DWORD *)(unsigned int NumOfLicensesInUseInCache = num_used_SWI_licenses),
            (unsigned int v14 = v12[38], NumOfLicensesInUseInCache < v14)
         || v12[31] >= v12[29]
         && ((SWIlicense_inhibited & 1) == 0
           ? (v25 = SWIlicenseGetNumOfLicensesInUseInCache(), unsigned int v14 = *(_DWORD *)(*(void *)(a2 + 32) + 152))
           : (unsigned int v25 = num_used_SWI_licenses),
             v25 >= v14)))
      {
        unsigned int v5 = 1;
      }
      else
      {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16117, "%s%lu", v6, v7, v8, v9, "cprLicensePorts");
        ttseg_loc_LicenseLog((uint64_t **)a1, *(void *)(a2 + 32), 1u, 7, v32, v33, v34, v35);
        unsigned int v5 = 0;
        *(_DWORD *)(a2 + 192) = 0;
      }
    }
    uint64_t v15 = *(void *)(a2 + 32);
    unsigned int v16 = v5;
    uint64_t v17 = v15 + 24 * v5;
    unsigned int v20 = *(_DWORD *)(v17 + 124);
    uint64_t v18 = (_DWORD *)(v17 + 124);
    unsigned int v19 = v20;
    uint64_t v21 = *(v18 - 2);
    if (v20 < v21)
    {
      *uint64_t v18 = v19 + 1;
      *(_DWORD *)(a2 + 196) = 1;
      log_OutText(*(void *)(a1 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG License is checked-out: total ports=%lu,  acquired ports=%lu", v7, v8, v9, v21);
      uint64_t v15 = *(void *)(a2 + 32);
      goto LABEL_32;
    }
    if (SWIlicense_inhibited)
    {
      unsigned int v22 = num_used_SWI_licenses;
    }
    else
    {
      unsigned int v22 = SWIlicenseGetNumOfLicensesInUseInCache();
      uint64_t v15 = *(void *)(a2 + 32);
    }
    if (v22 < *(_DWORD *)(v15 + 24 * v5 + 128))
    {
      uint64_t v23 = *(int *)(v15 + 224);
      if (v23 > 2) {
        int v24 = 11;
      }
      else {
        int v24 = *((_DWORD *)*(&off_264111D70 + v23) + v5);
      }
      if (SWIlicense_inhibited == 1)
      {
        ++num_used_SWI_licenses;
        *(void *)(a2 + 200) = (100000 * v24);
LABEL_34:
        *(_DWORD *)(a2 + 196) = 2;
        goto LABEL_35;
      }
      uint64_t v26 = SWIlicenseUseCacheableLicense(v24);
      *(void *)(a2 + 200) = v26;
      uint64_t v15 = *(void *)(a2 + 32);
      if (v26 != 0xFFFFFFFFLL) {
        goto LABEL_34;
      }
    }
LABEL_32:
    if (!*(_DWORD *)(a2 + 196))
    {
      uint64_t v2 = 2166373638;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", v5 + 16115, "%s%lu", v6, v7, v8, v9, "licensePorts");
      uint64_t v27 = 7;
LABEL_43:
      ttseg_loc_LicenseLog((uint64_t **)a1, *(void *)(a2 + 32), v16, v27, v6, v7, v8, v9);
LABEL_44:
      critsec_Leave(*(void **)(*(void *)(a2 + 32) + 208));
      return v2;
    }
LABEL_35:
    int v28 = *(_DWORD *)(v15 + 24 * v5 + 124);
    if (SWIlicense_inhibited)
    {
      int v29 = num_used_SWI_licenses;
    }
    else
    {
      int v29 = SWIlicenseGetNumOfLicensesInUseInCache();
      uint64_t v15 = *(void *)(a2 + 32);
    }
    if ((v29 + v28) > *(_DWORD *)(v15 + 24 * v16 + 120))
    {
      uint64_t v30 = *(void *)(a1 + 32);
      if ((SWIlicense_inhibited & 1) == 0) {
        SWIlicenseGetNumOfLicensesInUseInCache();
      }
      log_OutPublic(v30, (uint64_t)"TTSEG", v16 + 16113, "%s%lu%s%lu", v6, v7, v8, v9, "instanceCount");
    }
    uint64_t v27 = 5;
    goto LABEL_43;
  }
  return 2166366225;
}

uint64_t ttseg_loc_LoadAlternativeEscSeq(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 560);
  uint64_t v3 = *(void **)(a1 + 560);
  if (v3)
  {
    esc_seq_deinit(*(_WORD **)a1, *(void *)(a1 + 8), v3, *(void *)(a1 + 568));
    *(void *)(a1 + 560) = safeh_GetNullHandle();
    *(void *)(a1 + 568) = v4;
  }
  unsigned int v5 = *(_WORD **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  return esc_seq_init(v5, v6, v2);
}

uint64_t ttseg_loc_ObjClose(uint64_t a1, _WORD ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *a2;
  if (!*a2) {
    return 0;
  }
  *a2 = 0;
  uint64_t v10 = (uint64_t)v8[29];
  if (v10)
  {
    int v11 = pipeline_ObjClose(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v12 = v11 & (v11 >> 31);
    v8[29] = 0;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v8[72];
  if (v13) {
    tinystack_Delete(v13);
  }
  uint64_t v14 = (uint64_t)v8[73];
  if (v14) {
    DeinitLoadedCupList(*(void **)(a1 + 8), v14);
  }
  if (v8[21])
  {
    uint64_t v15 = objc_ReleaseObject(*(void *)(a1 + 48), (uint64_t)"LINGDB");
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v20 = v15;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16083, "%s%x", v16, v17, v18, v19, "lherror");
      uint64_t v12 = v20;
    }
    v8[21] = 0;
  }
  if (v8[16])
  {
    uint64_t v21 = objc_ReleaseObject(*(void *)(a1 + 48), (uint64_t)"SYNTHSTREAM");
    if ((v21 & 0x80000000) != 0)
    {
      uint64_t v26 = v21;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16085, "%s%x", v22, v23, v24, v25, "lherror");
      uint64_t v12 = v26;
    }
    v8[16] = 0;
  }
  uint64_t v27 = (uint64_t)v8[15];
  if (v27)
  {
    int v28 = pipeline_UnloadObjects(*v8, (int)v8[1], v27);
    if (v28 >= 0) {
      uint64_t v12 = v12;
    }
    else {
      uint64_t v12 = v28;
    }
    vector_ObjClose((uint64_t)v8[15]);
    v8[15] = 0;
  }
  if (v8[69]) {
    ttseg_loc_RemoveTaInfo((uint64_t)v8);
  }
  if (*((_DWORD *)v8 + 56))
  {
    uint64_t v29 = objc_UnregisterObject(*(void *)(a1 + 48), (uint64_t)"SYNTHOUTPUTSINK");
    if ((v29 & 0x80000000) != 0)
    {
      uint64_t v34 = v29;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16081, "%s%x", v30, v31, v32, v33, "lherror");
      uint64_t v12 = v34;
    }
    *((_DWORD *)v8 + 56) = 0;
  }
  uint64_t v35 = (kaldi::nnet1::Component *)v8[27];
  if (v35)
  {
    uint64_t IsUpdatable = kaldi::nnet1::Component::IsUpdatable(v35);
    if ((IsUpdatable & 0x80000000) != 0)
    {
      uint64_t v41 = IsUpdatable;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16006, "%s%x", v37, v38, v39, v40, "lherror");
      uint64_t v12 = v41;
    }
    v8[27] = 0;
  }
  if (!*((_DWORD *)v8[4] + 55))
  {
    int v42 = ttseg_loc_LicensingDecreaseInstanceCount(a1, (uint64_t)v8);
    if (v42 >= 0) {
      uint64_t v12 = v12;
    }
    else {
      uint64_t v12 = v42;
    }
  }
  if (*((_DWORD *)v8 + 47) == 1)
  {
    if (log_GetLogLevel(*(void *)(a1 + 32)) <= 3)
    {
      for (uint64_t i = 0; i != 7; ++i)
      {
        uint64_t v50 = TtsEgListenedToParams[i];
        uint64_t v51 = *(void *)(a1 + 40);
        *(void *)&long long v80 = v8;
        *((void *)&v80 + 1) = ttseg_loc_ParamCheckChange;
        uint64_t v81 = ttseg_loc_ParamLearnChange;
        if ((paramc_ListenerRemove(v51, v50, &v80) & 0x80000000) != 0) {
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16008, "%s%s%s%x", v52, v53, v54, v55, "parameter");
        }
      }
    }
    else
    {
      uint64_t v43 = *(void *)(a1 + 40);
      *(void *)&long long v80 = v8;
      *((void *)&v80 + 1) = ttseg_loc_ParamCheckChange;
      uint64_t v81 = ttseg_loc_ParamLearnChange;
      int v44 = paramc_ListenerRemove(v43, 0, &v80);
      if (v44 < 0 && (v44 & 0x1FFF) != 0x14) {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16008, "%s%x", v45, v46, v47, v48, "lherror");
      }
    }
    *((_DWORD *)v8 + 47) = 0;
  }
  uint64_t v56 = v8[70];
  if (v56)
  {
    esc_seq_deinit(*v8, (int)v8[1], v56, (int)v8[71]);
    v8[70] = (_WORD *)safeh_GetNullHandle();
    v8[71] = v57;
  }
  if (*((_DWORD *)v8 + 45))
  {
    uint64_t v58 = objc_UnregisterObject(*(void *)(a1 + 48), (uint64_t)"COMPQUERY");
    if ((v58 & 0x80000000) != 0)
    {
      uint64_t v63 = v58;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16096, "%s%x", v59, v60, v61, v62, "lherror");
      uint64_t v12 = v63;
    }
  }
  if (*((_DWORD *)v8 + 44))
  {
    uint64_t v64 = objc_UnregisterObject(*(void *)(a1 + 48), (uint64_t)"LANGCODECONVERTER");
    if ((v64 & 0x80000000) != 0)
    {
      uint64_t v69 = v64;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16096, "%s%x", v65, v66, v67, v68, "lherror");
      uint64_t v12 = v69;
    }
  }
  if (*((_DWORD *)v8 + 46))
  {
    uint64_t v70 = objc_UnregisterObject(*(void *)(a1 + 48), (uint64_t)"TTSEG");
    if ((v70 & 0x80000000) != 0)
    {
      uint64_t v75 = v70;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16096, "%s%x", v71, v72, v73, v74, "lherror");
      uint64_t v12 = v75;
    }
  }
  uint64_t v76 = (uint64_t)v8[12];
  if (v76)
  {
    int v77 = critsec_ObjClose(v76);
    if ((int)v12 > -1 && v77 < 0) {
      uint64_t v12 = v77;
    }
    else {
      uint64_t v12 = v12;
    }
  }
  heap_Free(*(void **)(a1 + 8), (uint64_t)v8);
  return v12;
}

uint64_t ttseg_ObjClose(uint64_t a1, int a2)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v4 = ttseg_loc_BeginFunction(a1, a2, &v26, (uint64_t *)&v27);
  if ((v4 & 0x80000000) != 0) {
    return v4;
  }
  uint64_t v8 = v27;
  log_OutText(*(void *)(v26 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Object Close : Begin (%p)", v5, v6, v7, (uint64_t)v27);
  uint64_t v4 = ttseg_loc_LockFromIdle(v26, (uint64_t)v8, (uint64_t)"ttseg_ObjClose", 2, &v25);
  if ((v4 & 0x80000000) != 0) {
    return v4;
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  ttseg_loc_BeginFunction(a1, a2, &v28, &v29);
  uint64_t v15 = v29;
  uint64_t v16 = *(void *)(v29 + 584);
  unint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    if (!v16) {
      goto LABEL_8;
    }
LABEL_5:
    uint64_t v18 = *(void *)(v16 + 8);
    --v17;
    if (*(void *)(v18 + 16 * v17 + 8) && *(void *)(v18 + 16 * v17)) {
      ttseg_loc_UnloadTuningResourcePackage(a1, a2, v17);
    }
    while (v17)
    {
      uint64_t v16 = *(void *)(v15 + 584);
      if (v16) {
        goto LABEL_5;
      }
LABEL_8:
      --v17;
    }
  }
  int v20 = ttseg_loc_ObjClose(v26, &v27, v9, v10, v11, v12, v13, v14);
  uint64_t v19 = v20 & (v20 >> 31) & 0x7FFFFFFF;
  log_OutText(*(void *)(v26 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Object Close : End (%x)", v21, v22, v23, v19);
  return v19;
}

uint64_t ttseg_loc_BeginFunction(uint64_t a1, int a2, void *a3, uint64_t *a4)
{
  *a4 = 0;
  LODWORD(result) = safeh_HandleCheck(a1, a2, 52652, 592);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8) {
      return 2166366216;
    }
    else {
      return result;
    }
  }
  else
  {
    uint64_t result = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), a3);
    if ((result & 0x80000000) == 0) {
      *a4 = a1;
    }
  }
  return result;
}

uint64_t ttseg_loc_LockFromIdle(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  uint64_t v13 = critsec_Enter(*(void **)(a2 + 96));
  if ((v13 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16004, "%s%s%s%x", v9, v10, v11, v12, "function");
  }
  else
  {
    if (*(_DWORD *)(a2 + 104) == 1)
    {
      *a5 = 1;
      *(_DWORD *)(a2 + 104) = a4;
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16003, "%s%s", v9, v10, v11, v12, "function");
      LODWORD(v13) = -2128601071;
    }
    int v14 = critsec_Leave(*(void **)(a2 + 96));
    if (v14 >= 0 || (int)v13 <= -1) {
      return v13;
    }
    else {
      return v14;
    }
  }
  return v13;
}

uint64_t ttseg_LicenseAllocate(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v17 = 0;
  if (!a3) {
    return 2166366215;
  }
  uint64_t v4 = ttseg_loc_BeginFunction(a1, a2, &v17, &v18);
  if ((v4 & 0x80000000) != 0) {
    return v4;
  }
  uint64_t v8 = 2166373641;
  log_OutText(*(void *)(v17 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG License Allocate : Begin (%s)", v5, v6, v7, a3);
  log_OutPublic(*(void *)(v17 + 32), (uint64_t)"TTSEG", 16033, "%s%s", v9, v10, v11, v12, "Mode");
  log_OutText(*(void *)(v17 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG License Allocate : End (%x)", v13, v14, v15, 2166373641);
  return v8;
}

uint64_t ttseg_LicenseFree(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v17 = 0;
  if (!a3) {
    return 2166366215;
  }
  uint64_t v4 = ttseg_loc_BeginFunction(a1, a2, &v17, &v18);
  if ((v4 & 0x80000000) != 0) {
    return v4;
  }
  uint64_t v8 = 2166373641;
  log_OutText(*(void *)(v17 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG License Free : Begin (%s)", v5, v6, v7, a3);
  log_OutPublic(*(void *)(v17 + 32), (uint64_t)"TTSEG", 16036, "%s%s", v9, v10, v11, v12, "Mode");
  log_OutText(*(void *)(v17 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG License Free : End (%x)", v13, v14, v15, 2166373641);
  return v8;
}

uint64_t ttseg_PipelineSetEx(uint64_t a1, int a2, char *a3, int a4)
{
  uint64_t v54 = 0;
  uint64_t v53 = 0;
  int v52 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  int v49 = 0;
  uint64_t v6 = ttseg_loc_BeginFunction(a1, a2, &v53, &v54);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  uint64_t v7 = v54;
  *(_DWORD *)(v54 + 240) = a4;
  if (a4 == 2) {
    uint64_t v8 = "yes";
  }
  else {
    uint64_t v8 = "no";
  }
  paramc_ParamSetStr(*(void *)(v53 + 40), (uint64_t)"textanalysison", v8);
  uint64_t v12 = byte_20D6B212C;
  if (a3) {
    uint64_t v12 = a3;
  }
  log_OutText(*(void *)(v53 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Pipeline Set : Begin (%s)", v9, v10, v11, (uint64_t)v12);
  uint64_t v20 = ttseg_loc_LockFromIdle(v53, v7, (uint64_t)"ttseg_PipelineSet", 2, &v52);
  if ((v20 & 0x80000000) == 0)
  {
    if (!a3 || !*a3) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v7 + 232);
    if (!v21 || strcmp(a3, *(const char **)(v21 + 8)))
    {
      uint64_t v22 = paramc_ParamSetRestorePoint(*(void *)(v53 + 40), &v50);
      if ((v22 & 0x80000000) != 0)
      {
        uint64_t v20 = v22;
        log_OutPublic(*(void *)(v53 + 32), (uint64_t)"TTSEG", 16074, "%s%x", v23, v24, v25, v26, "lherror");
      }
      else
      {
        uint64_t v27 = pipeline_ObjOpen(*(_WORD **)v7, *(void *)(v7 + 8), a3, *(void *)(v7 + 232), 0xFFFF, *(void *)(v7 + 120), &v51, &v49);
        uint64_t v20 = v27;
        if ((v27 & 0x80001FFF) != 0x8000000A)
        {
          if ((v27 & 0x80000000) == 0)
          {
            unsigned int v28 = ttseg_loc_LicensingModePipeline(v53, v7, (uint64_t)v51);
            if (*(_DWORD *)(*(void *)(v7 + 32) + 220) || *(_DWORD *)(v7 + 196))
            {
              if (*(_DWORD *)(v7 + 192) == v28) {
                goto LABEL_26;
              }
              uint64_t v29 = ttseg_loc_LicensingModeSwitch(v53, v7, v28);
            }
            else
            {
              *(_DWORD *)(v7 + 192) = v28;
              uint64_t v29 = ttseg_loc_LicensingIncreaseInstanceCount(v53, v7);
            }
            uint64_t v20 = v29;
            if ((v29 & 0x80000000) == 0)
            {
LABEL_26:
              unsigned int v41 = paramc_ParamCloseRestorePoint(*(void *)(v53 + 40), v50);
              if ((v41 & 0x80000000) != 0)
              {
                unsigned int v47 = v41;
                log_OutPublic(*(void *)(v53 + 32), (uint64_t)"TTSEG", 16076, "%s%x", v16, v17, v18, v19, "lherror");
                if ((int)v20 >= 0) {
                  uint64_t v20 = v47;
                }
                else {
                  uint64_t v20 = v20;
                }
                uint64_t v50 = 0;
              }
              else
              {
                uint64_t v50 = 0;
                if ((v20 & 0x80000000) == 0)
                {
LABEL_28:
                  uint64_t v42 = *(void *)(v7 + 232);
                  if (v42)
                  {
                    uint64_t v20 = pipeline_ObjClose(v42, v13, v14, v15, v16, v17, v18, v19);
                    if (*(void *)(v7 + 232) == *(void *)(v7 + 544)) {
                      *(void *)(v7 + 544) = 0;
                    }
                  }
                  *(void *)(v7 + 232) = v51;
                  goto LABEL_32;
                }
              }
              uint64_t v48 = *(void *)(v7 + 232);
              if (v48 && v49) {
                pipeline_ObjReopen(v48, v13, v14, v15, v16, v17, v18, v19);
              }
              goto LABEL_32;
            }
            pipeline_ObjClose((uint64_t)v51, v30, v31, v32, v33, v34, v35, v36);
          }
          if ((paramc_ParamRestore(*(void *)(v53 + 40), (uint64_t *)v50) & 0x80000000) != 0) {
            log_OutPublic(*(void *)(v53 + 32), (uint64_t)"TTSEG", 16075, "%s%x", v37, v38, v39, v40, "lherror");
          }
          goto LABEL_26;
        }
      }
    }
LABEL_32:
    ttseg_loc_Unlock(v53, v7, v52);
    log_OutText(*(void *)(v53 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Pipeline Set : End (%x)", v43, v44, v45, v20);
  }
  return v20;
}

uint64_t ttseg_loc_LicensingModeSwitch(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!*(_DWORD *)(a2 + 196)) {
    return 2166366225;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 192);
  uint64_t v11 = critsec_Enter(*(void **)(*(void *)(a2 + 32) + 208));
  if ((v11 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16112, "%s%s%s%x", v7, v8, v9, v10, "function");
    return v11;
  }
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = v12 + 24 * a3;
  unsigned int v16 = *(_DWORD *)(v13 + 124);
  uint64_t v14 = (_DWORD *)(v13 + 124);
  unsigned int v15 = v16;
  if (v16 < *(v14 - 2))
  {
    *uint64_t v14 = v15 + 1;
    int v17 = 1;
LABEL_5:
    if (*(_DWORD *)(a2 + 196) == 1)
    {
      uint64_t v18 = *(void *)(a2 + 32) + 24 * v6;
      int v21 = *(_DWORD *)(v18 + 124);
      uint64_t v19 = (_DWORD *)(v18 + 124);
      int v20 = v21;
      if (v21) {
        *uint64_t v19 = v20 - 1;
      }
    }
    else if (SWIlicense_inhibited == 1)
    {
      if (num_used_SWI_licenses) {
        --num_used_SWI_licenses;
      }
    }
    else
    {
      SWIlicenseFreeCacheableLicense();
    }
    ttseg_loc_LicenseLog((uint64_t **)a1, *(void *)(a2 + 32), v6, 6, v7, v8, v9, v10);
    *(_DWORD *)(a2 + 192) = a3;
    *(_DWORD *)(a2 + 196) = v17;
    uint64_t v30 = *(void *)(a2 + 32);
    int v31 = *(_DWORD *)(v30 + 24 * a3 + 124);
    if (SWIlicense_inhibited)
    {
      int NumOfLicensesInUseInCache = num_used_SWI_licenses;
    }
    else
    {
      int NumOfLicensesInUseInCache = SWIlicenseGetNumOfLicensesInUseInCache();
      uint64_t v30 = *(void *)(a2 + 32);
    }
    if ((NumOfLicensesInUseInCache + v31) > *(_DWORD *)(v30 + 24 * a3 + 120))
    {
      uint64_t v33 = *(void *)(a1 + 32);
      if ((SWIlicense_inhibited & 1) == 0) {
        SWIlicenseGetNumOfLicensesInUseInCache();
      }
      log_OutPublic(v33, (uint64_t)"TTSEG", a3 + 16113, "%s%lu%s%lu", v25, v26, v27, v28, "instanceCount");
    }
    uint64_t v29 = 5;
    goto LABEL_33;
  }
  if (SWIlicense_inhibited)
  {
    unsigned int v22 = num_used_SWI_licenses;
  }
  else
  {
    unsigned int v22 = SWIlicenseGetNumOfLicensesInUseInCache();
    uint64_t v12 = *(void *)(a2 + 32);
  }
  if (v22 < *(_DWORD *)(v12 + 24 * a3 + 128))
  {
    if ((int)a3 > 3 || (uint64_t v23 = *(int *)(v12 + 224), v23 > 2)) {
      int v24 = 11;
    }
    else {
      int v24 = *((_DWORD *)*(&off_264111D70 + v23) + a3);
    }
    if (SWIlicense_inhibited == 1)
    {
      ++num_used_SWI_licenses;
      if (100000 * v24) {
        goto LABEL_23;
      }
    }
    else if (SWIlicenseUseCacheableLicense(v24))
    {
      goto LABEL_23;
    }
    int v17 = 2;
    goto LABEL_5;
  }
LABEL_23:
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", a3 + 16115, "%s%lu", v7, v8, v9, v10, "licensePorts");
  uint64_t v29 = 7;
  LODWORD(v11) = -2128593658;
LABEL_33:
  ttseg_loc_LicenseLog((uint64_t **)a1, *(void *)(a2 + 32), a3, v29, v25, v26, v27, v28);
  if (v6) {
    uint64_t v11 = v11;
  }
  else {
    uint64_t v11 = 0;
  }
  critsec_Leave(*(void **)(*(void *)(a2 + 32) + 208));
  return v11;
}

uint64_t ttseg_loc_Unlock(uint64_t result, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    if ((critsec_Enter(*(void **)(a2 + 96)) & 0x80000000) != 0)
    {
      return log_OutPublic(*(void *)(v5 + 32), (uint64_t)"TTSEG", 16004, "%s%x", v6, v7, v8, v9, "lhError");
    }
    else
    {
      *(_DWORD *)(a2 + 104) = a3;
      uint64_t v10 = *(void **)(a2 + 96);
      return critsec_Leave(v10);
    }
  }
  return result;
}

uint64_t ttseg_PipelineSet(uint64_t a1, int a2, char *a3)
{
  return ttseg_PipelineSetEx(a1, a2, a3, 0);
}

uint64_t ttseg_ResourceLoad(uint64_t a1, uint64_t a2, const char *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  int v53 = 0;
  uint64_t v14 = 2166366215;
  if (a4)
  {
    if (!a3 || !a7) {
      return v14;
    }
  }
  else if (!a7 || !a3 || !a5 || !a6)
  {
    return v14;
  }
  *(void *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  uint64_t v15 = ttseg_loc_BeginFunction(a1, a2, &v54, &v55);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  log_OutText(*(void *)(v54 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Resource Load : Begin (%s, %s, %p, %u)", v16, v17, v18, (uint64_t)a3);
  if (a4) {
    log_OutEvent(*(uint64_t ***)(v54 + 32), 12, "%s%s%s%s", v19, v20, v21, v22, v23, "URI");
  }
  if (!strcmp(a3, "application/x-vocalizer-resources-package"))
  {
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    long long v57 = 0uLL;
    AddRefCounteduint64_t Object = 18;
    uint64_t v56 = 0;
    if (!a4) {
      goto LABEL_49;
    }
    if (a5) {
      goto LABEL_49;
    }
    if (a6) {
      goto LABEL_49;
    }
    AddRefCounteduint64_t Object = ttseg_loc_BeginFunction(a1, a2, &v58, &v59);
    if ((AddRefCountedObject & 0x80000000) != 0) {
      goto LABEL_49;
    }
    AddRefCounteduint64_t Object = objc_GetAddRefCountedObject(*(void *)(v58 + 48), (uint64_t)a4, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))ObjcLoadCup, (void (*)(void, void, long long *))ObjcUnloadCup, 0, &v56);
    if ((AddRefCountedObject & 0x80000000) != 0) {
      goto LABEL_49;
    }
    if (v56 && *(void *)(v56 + 32))
    {
      uint64_t v51 = v59;
      uint64_t v30 = *(uint64_t ***)(v59 + 584);
      AddRefCounteduint64_t Object = 2166366215;
      if (v30)
      {
        uint64_t v52 = *(void *)(v56 + 32);
        uint64_t v31 = (uint64_t)v30[1];
        uint64_t v32 = v30[2];
        if (v32)
        {
          uint64_t v33 = 0;
          uint64_t v34 = v30[1];
          while (*v34)
          {
            uint64_t v33 = (uint64_t *)((char *)v33 + 1);
            v34 += 2;
            if (v32 == v33) {
              goto LABEL_30;
            }
          }
        }
        else
        {
LABEL_30:
          uint64_t v35 = heap_Realloc(*v30, v31, 16 * (void)(v32 + 8));
          if (!v35)
          {
            AddRefCounteduint64_t Object = 2166366218;
            goto LABEL_49;
          }
          uint64_t v31 = v35;
          v30[1] = (uint64_t *)v35;
          float v30[2] = v32 + 8;
          uint64_t v33 = v32;
        }
        uint64_t v36 = v52;
        *(void *)(v31 + 16 * (void)v33) = v52;
        v30[1][2 * (void)v33 + 1] = heap_Calloc(*v30, *(unsigned int *)(v52 + 24), 16);
        AddRefCounteduint64_t Object = paramc_ParamSetStr(*(void *)(v58 + 40), (uint64_t)"cup_name", *(char **)(v52 + 72));
        if ((AddRefCountedObject & 0x80000000) == 0)
        {
          if (*(_DWORD *)(v52 + 24))
          {
            uint64_t v37 = 0;
            unint64_t v38 = 0;
            while (1)
            {
              uint64_t v39 = *(void *)(v36 + 8) + v37;
              uint64_t v40 = *(void *)(v39 + 16);
              uint64_t v41 = *(unsigned int *)(v39 + 24);
              AddRefCounteduint64_t Object = paramc_ParamSetStr(*(void *)(v58 + 40), (uint64_t)"tuning_data_name_in_cup", *(char **)v39);
              if ((AddRefCountedObject & 0x80000000) != 0) {
                break;
              }
              AddRefCounteduint64_t Object = ttseg_ResourceLoad(a1, a2, *(void *)(*(void *)(v36 + 8) + v37 + 8), 0, v40, v41, &v57);
              if ((AddRefCountedObject & 0x80000000) != 0) {
                break;
              }
              AddRefCounteduint64_t Object = paramc_ParamSetStr(*(void *)(v58 + 40), (uint64_t)"tuning_data_name_in_cup", byte_20D6B212C);
              if ((AddRefCountedObject & 0x80000000) != 0) {
                break;
              }
              uint64_t v42 = *(void *)(v51 + 584);
              if (v42)
              {
                if (*(void *)(v42 + 16) > (unint64_t)v33)
                {
                  uint64_t v43 = *(void *)(v42 + 8);
                  if (v38 < *(unsigned int *)(*(void *)(v43 + 16 * (void)v33) + 24)) {
                    *(_OWORD *)(*(void *)(v43 + 16 * (void)v33 + 8) + 16 * v38) = v57;
                  }
                }
              }
              ++v38;
              uint64_t v36 = v52;
              v37 += 32;
              if (v38 >= *(unsigned int *)(v52 + 24)) {
                goto LABEL_43;
              }
            }
          }
          else
          {
LABEL_43:
            AddRefCounteduint64_t Object = paramc_ParamSetStr(*(void *)(v58 + 40), (uint64_t)"cup_name", byte_20D6B212C);
            if ((AddRefCountedObject & 0x80000000) == 0) {
              *(void *)a7 = v36;
            }
          }
        }
      }
    }
    else
    {
      AddRefCounteduint64_t Object = 2166366215;
    }
LABEL_49:
    uint64_t v14 = AddRefCountedObject;
    goto LABEL_50;
  }
  uint64_t v27 = v55;
  AddRefCounteduint64_t Object = ttseg_loc_LockFromIdleOrProcessing(v54, v55, (uint64_t)"ttseg_ResourceLoad", &v53);
  if ((AddRefCountedObject & 0x80000000) != 0) {
    goto LABEL_49;
  }
  if (!*(void *)(v27 + 232))
  {
    log_OutPublic(*(void *)(v54 + 32), (uint64_t)"TTSEG", 16037, 0, v29, v24, v25, v26, v50);
    goto LABEL_46;
  }
  if ((critsec_Enter(*(void **)(*(void *)(v27 + 32) + 208)) & 0x80000000) != 0)
  {
LABEL_46:
    uint64_t v14 = 2166366225;
    goto LABEL_47;
  }
  uint64_t v14 = pipeline_ResourceLoad(*(uint64_t **)(v27 + 232), 0, a3, a4, a5, a6, (uint64_t *)a7);
  critsec_Leave(*(void **)(*(void *)(v27 + 32) + 208));
LABEL_47:
  ttseg_loc_Unlock(v54, v27, v53);
LABEL_50:
  log_OutText(*(void *)(v54 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Resource Load : End (%x, %p)", v24, v25, v26, v14);
  if (a4 && (v14 & 0x80000000) == 0) {
    log_OutEvent(*(uint64_t ***)(v54 + 32), 13, "%s%s%s%s", v44, v45, v46, v47, v48, "URI");
  }
  return v14;
}

uint64_t ttseg_loc_LockFromIdleOrProcessing(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v11 = critsec_Enter(*(void **)(a2 + 96));
  if ((v11 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16004, "%s%s%s%x", v7, v8, v9, v10, "function");
  }
  else
  {
    int v12 = *(_DWORD *)(a2 + 104);
    if ((v12 - 3) < 4 || v12 == 1)
    {
      *a4 = v12;
      *(_DWORD *)(a2 + 104) = 2;
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16003, "%s%s", v7, v8, v9, v10, "function");
      LODWORD(v11) = -2128601071;
    }
    int v14 = critsec_Leave(*(void **)(a2 + 96));
    if (v14 >= 0 || (int)v11 <= -1) {
      return v11;
    }
    else {
      return v14;
    }
  }
  return v11;
}

uint64_t ttseg_ResourceUnload(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int v33 = 0;
  uint64_t v8 = ttseg_loc_BeginFunction(a1, a2, &v34, &v35);
  if ((v8 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v34 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Resource Unload : Begin (%p)", v9, v10, v11, a3);
    uint64_t v12 = v35;
    uint64_t v13 = *(void *)(v35 + 584);
    if (*(void *)(v13 + 16))
    {
      uint64_t v14 = 0;
      unsigned int v15 = 0;
      while (1)
      {
        uint64_t v16 = 16 * v14;
        if (*(void *)(*(void *)(v13 + 8) + 16 * v14))
        {
          uint64_t NullHandle = safeh_GetNullHandle();
          BOOL v19 = safeh_HandlesEqual(a3, a4, NullHandle, v18);
          uint64_t v13 = *(void *)(v12 + 584);
          if (!v19 && *(void *)(*(void *)(v13 + 8) + v16) == a3) {
            break;
          }
        }
        uint64_t v14 = ++v15;
        if (*(void *)(v13 + 16) <= (unint64_t)v15) {
          goto LABEL_8;
        }
      }
      uint64_t v20 = ttseg_loc_UnloadTuningResourcePackage(a1, a2, v15);
    }
    else
    {
LABEL_8:
      uint64_t v20 = ttseg_loc_LockFromIdleOrProcessing(v34, v12, (uint64_t)"ttseg_ResourceUnload", &v33);
      if ((v20 & 0x80000000) == 0)
      {
        uint64_t v25 = 2166366225;
        if (*(void *)(v12 + 232))
        {
          if ((critsec_Enter(*(void **)(*(void *)(v12 + 32) + 208)) & 0x80000000) == 0)
          {
            uint64_t v25 = pipeline_ResourceUnload(*(uint64_t **)(v12 + 232), a3, a4, v26, v27, v28, v29, v30);
            critsec_Leave(*(void **)(*(void *)(v12 + 32) + 208));
          }
        }
        else
        {
          log_OutPublic(*(void *)(v34 + 32), (uint64_t)"TTSEG", 16040, 0, v21, v22, v23, v24, v32);
        }
        ttseg_loc_Unlock(v34, v12, v33);
        goto LABEL_17;
      }
    }
    uint64_t v25 = v20;
LABEL_17:
    log_OutText(*(void *)(v34 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Resource Unload : End (%x)", v22, v23, v24, v25);
    return v25;
  }
  return v8;
}

uint64_t ttseg_loc_UnloadTuningResourcePackage(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v4 = ttseg_loc_BeginFunction(a1, a2, &v20, &v21);
  if ((v4 & 0x80000000) != 0) {
    return v4;
  }
  uint64_t v5 = v21;
  uint64_t v6 = *(void *)(v21 + 584);
  if (*(void *)(v6 + 16) <= a3) {
    return 2166366223;
  }
  uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 16 * a3);
  uint64_t v4 = paramc_ParamSetStr(*(void *)(v20 + 40), (uint64_t)"cup_name", *(char **)(v7 + 72));
  if ((v4 & 0x80000000) != 0) {
    return v4;
  }
  if (*(_DWORD *)(v7 + 24))
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      unsigned int v15 = (uint64_t *)(*(void *)(*(void *)(*(void *)(v5 + 584) + 8) + 16 * a3 + 8) + v13);
      uint64_t v4 = pipeline_ResourceUnload(*(uint64_t **)(v5 + 232), *v15, v15[1], v8, v9, v10, v11, v12);
      if ((v4 & 0x80000000) != 0) {
        return v4;
      }
      ++v14;
      v13 += 16;
    }
    while (v14 < *(unsigned int *)(v7 + 24));
  }
  uint64_t v16 = paramc_ParamSetStr(*(void *)(v20 + 40), (uint64_t)"cup_name", byte_20D6B212C);
  if ((v16 & 0x80000000) == 0)
  {
    objc_ReleaseObject(*(void *)(v20 + 48), *(void *)(v7 + 64));
    uint64_t v17 = *(void *)(v5 + 584);
    if (v17)
    {
      if (*(void *)(v17 + 16) > a3)
      {
        int v18 = (void *)(*(void *)(v17 + 8) + 16 * a3);
        *int v18 = 0;
        heap_Free(*(void **)v17, v18[1]);
        *(void *)(*(void *)(v17 + 8) + 16 * a3 + 8) = 0;
      }
    }
  }
  return v16;
}

uint64_t ttseg_ResourceEnable(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  uint64_t v6 = ttseg_loc_BeginFunction(a1, a2, &v26, &v27);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  log_OutText(*(void *)(v26 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Resource Enable : Begin (%p)", v7, v8, v9, a3);
  uint64_t v10 = v27;
  uint64_t v6 = ttseg_loc_LockFromIdle(v26, v27, (uint64_t)"ttseg_ResourceEnable", 2, &v25);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  if (*(void *)(v10 + 232))
  {
    unint64_t v15 = 0;
    uint64_t v16 = 2166366216;
    do
    {
      uint64_t v17 = *(void *)(v10 + 232);
      if (v15 >= *(unsigned __int16 *)(v17 + 24)) {
        break;
      }
      int v18 = *(void **)(*(void *)(v17 + 16) + 8 * v15);
      BOOL v19 = *(uint64_t (**)(void, void, uint64_t, uint64_t))(v18[2] + 80);
      if (v19)
      {
        uint64_t v16 = v19(v18[3], v18[4], a3, a4);
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_13;
        }
      }
      ++v15;
    }
    while ((v16 & 0x1FFF) == 8);
    if ((v16 & 0x80000000) != 0) {
      log_OutPublic(*(void *)(v26 + 32), (uint64_t)"TTSEG", 16067, "%s%p%s%x", v11, v12, v13, v14, "handle");
    }
  }
  else
  {
    log_OutPublic(*(void *)(v26 + 32), (uint64_t)"TTSEG", 16066, 0, v11, v12, v13, v14, v24);
    uint64_t v16 = 2166366225;
  }
LABEL_13:
  ttseg_loc_Unlock(v26, v10, v25);
  log_OutText(*(void *)(v26 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Resource Enable : End (%x)", v20, v21, v22, v16);
  return v16;
}

uint64_t ttseg_ResourceDisable(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  uint64_t v6 = ttseg_loc_BeginFunction(a1, a2, &v26, &v27);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  log_OutText(*(void *)(v26 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Resource Disable : Begin (%p)", v7, v8, v9, a3);
  uint64_t v10 = v27;
  uint64_t v6 = ttseg_loc_LockFromIdle(v26, v27, (uint64_t)"ttseg_ResourceDisable", 2, &v25);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  if (*(void *)(v10 + 232))
  {
    unint64_t v15 = 0;
    uint64_t v16 = 2166366216;
    do
    {
      uint64_t v17 = *(void *)(v10 + 232);
      if (v15 >= *(unsigned __int16 *)(v17 + 24)) {
        break;
      }
      int v18 = *(void **)(*(void *)(v17 + 16) + 8 * v15);
      BOOL v19 = *(uint64_t (**)(void, void, uint64_t, uint64_t))(v18[2] + 88);
      if (v19)
      {
        uint64_t v16 = v19(v18[3], v18[4], a3, a4);
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_13;
        }
      }
      ++v15;
    }
    while ((v16 & 0x1FFF) == 8);
    if ((v16 & 0x80000000) != 0) {
      log_OutPublic(*(void *)(v26 + 32), (uint64_t)"TTSEG", 16070, "%s%p%s%x", v11, v12, v13, v14, "handle");
    }
  }
  else
  {
    log_OutPublic(*(void *)(v26 + 32), (uint64_t)"TTSEG", 16069, 0, v11, v12, v13, v14, v24);
    uint64_t v16 = 2166366225;
  }
LABEL_13:
  ttseg_loc_Unlock(v26, v10, v25);
  log_OutText(*(void *)(v26 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Resource Disable : End (%x)", v20, v21, v22, v16);
  return v16;
}

uint64_t ttseg_Synthesize(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v40 = 0;
  uint64_t v10 = ttseg_loc_BeginFunction(a1, a2, &v41, &v42);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  log_OutText(*(void *)(v41 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Synthesize : Begin", v11, v12, v13, v38);
  uint64_t v14 = v42;
  uint64_t v10 = ttseg_loc_LockFromIdle(v41, v42, (uint64_t)"ttseg_Synthesize", 3, &v40);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v19 = *(void *)(v14 + 232);
  if (v19)
  {
    uint64_t v20 = *(void *)(v19 + 32);
    if (v20)
    {
      compstats_Reset(v20);
      compstats_Start(*(void *)(*(void *)(v14 + 232) + 32), *(void *)(*(void *)(v14 + 232) + 40), 0, v21, v22, v23, v24, v25);
    }
    uint64_t v31 = ttseg_loc_Synthesize(v41, v14, *(uint64_t (**)(uint64_t, unsigned int *, unsigned char *))(v14 + 40), *(void *)(v14 + 88), 0, *(uint64_t (**)(uint64_t, void, void, void))(v14 + 56), *(void *)(v14 + 88), v18, a3, a4, a5, a6, (_DWORD *)&v43 + 1, (unsigned int *)&v43);
    uint64_t v32 = *(void *)(v14 + 232);
    uint64_t v33 = *(void *)(v32 + 32);
    if (v33)
    {
      compstats_Stop(v33, *(void *)(v32 + 40), 0, v26, v27, v28, v29, v30);
      compstats_Log(*(void *)(*(void *)(v14 + 232) + 32), *(void *)(*(void *)(v14 + 232) + 40), *(void *)(v41 + 32), "Synthesis", *(void *)(*(void *)(v14 + 232) + 48), SHIDWORD(v43), v43);
    }
  }
  else
  {
    log_OutPublic(*(void *)(v41 + 32), (uint64_t)"TTSEG", 16043, 0, v15, v16, v17, v18, v39);
    uint64_t v31 = 2166366225;
  }
  ttseg_loc_Unlock(v41, v14, v40);
  log_OutText(*(void *)(v41 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG Synthesize : End (%x)", v34, v35, v36, v31);
  return v31;
}

uint64_t ttseg_loc_Synthesize(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, unsigned int *, unsigned char *), uint64_t a4, char *a5, uint64_t (*a6)(uint64_t, void, void, void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13, unsigned int *a14)
{
  uint64_t result = ttseg_loc_SynthesizeStart(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  if ((result & 0x80000000) == 0)
  {
    int v22 = ttseg_loc_ProcessLoop(a2, 0, v16, v17, v18, v19, v20, v21);
    LODWORD(result) = ttseg_loc_SynthesizeEnd(a2, a13, a14);
    if ((int)result >= 0 || v22 <= -1) {
      return v22;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t ttseg_SynthesizeCooperatively(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _WORD *a7)
{
  uint64_t v59 = 0;
  int v58 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v12 = ttseg_loc_BeginFunction(a1, a2, &v56, &v57);
  if ((v12 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v56 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG SynthesizeCooperatively : Begin", v13, v14, v15, v54);
    uint64_t v16 = v57;
    uint64_t v21 = critsec_Enter(*(void **)(v57 + 96));
    if ((v21 & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(v56 + 32), (uint64_t)"TTSEG", 16004, "%s%s%s%x", v17, v18, v19, v20, "function");
      goto LABEL_47;
    }
    int v22 = *(_DWORD *)(v16 + 104);
    if ((v22 - 4) >= 3)
    {
      if (v22 == 1)
      {
        if (*(void *)(v16 + 232))
        {
          *(_DWORD *)(v16 + 104) = 4;
          int v22 = 1;
          goto LABEL_12;
        }
        LODWORD(v21) = -2128601071;
        log_OutPublic(*(void *)(v56 + 32), (uint64_t)"TTSEG", 16043, 0, v17, v18, v19, v20, v55);
      }
      else
      {
        LODWORD(v21) = -2128601071;
        log_OutPublic(*(void *)(v56 + 32), (uint64_t)"TTSEG", 16003, "%s%s", v17, v18, v19, v20, "function");
      }
      int v22 = 0;
    }
LABEL_12:
    int v26 = critsec_Leave(*(void **)(v16 + 96));
    if (v26 >= 0 || (int)v21 <= -1) {
      uint64_t v21 = v21;
    }
    else {
      uint64_t v21 = v26;
    }
    if ((v21 & 0x80000000) != 0) {
      goto LABEL_47;
    }
    if (v22 == 4)
    {
      *a7 = 32;
      *(_DWORD *)(v16 + 420) = 1;
      uint64_t v21 = ttseg_loc_PutOutput(v16, (_DWORD *)&v59 + 1, v27, v28, v29, v23, v24, v25);
      BOOL v41 = 0;
      if ((v21 & 0x80000000) != 0 || HIDWORD(v59))
      {
LABEL_28:
        if ((v21 & 0x80000000) != 0) {
          goto LABEL_38;
        }
LABEL_37:
        if (v41)
        {
LABEL_38:
          *a7 = 2;
          int v44 = ttseg_loc_SynthesizeEnd(v16, &v59, (unsigned int *)&v58);
          if (v44 >= 0 || (int)v21 <= -1) {
            uint64_t v21 = v21;
          }
          else {
            uint64_t v21 = v44;
          }
          uint64_t v51 = *(void *)(v16 + 232);
          uint64_t v52 = *(void *)(v51 + 32);
          if (v52)
          {
            compstats_Stop(v52, *(void *)(v51 + 40), 0, v45, v46, v47, v48, v49);
            compstats_Log(*(void *)(*(void *)(v16 + 232) + 32), *(void *)(*(void *)(v16 + 232) + 40), *(void *)(v56 + 32), "Synthesis", *(void *)(*(void *)(v16 + 232) + 48), v59, v58);
          }
          ttseg_loc_Unlock(v56, v16, 1);
        }
LABEL_47:
        log_OutText(*(void *)(v56 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"TTSEG SynthesizeCooperatively : End (%x)", v23, v24, v25, v21);
        return v21;
      }
      uint64_t v37 = ttseg_loc_ProcessLoop(v16, 2, v38, v39, v40, v23, v24, v25);
    }
    else
    {
      if (v22 != 1)
      {
        *a7 = 32;
        *(_DWORD *)(v16 + 420) = 1;
        uint64_t v42 = ttseg_loc_PutOutput(v16, (_DWORD *)&v59 + 1, v27, v28, v29, v23, v24, v25);
        uint64_t v21 = v42;
        BOOL v41 = (int)v42 >= 0 && HIDWORD(v59) == 0;
        if ((v42 & 0x80000000) != 0) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
      *a7 = 32;
      uint64_t v31 = *(void *)(*(void *)(v16 + 232) + 32);
      if (v31)
      {
        compstats_Reset(v31);
        compstats_Start(*(void *)(*(void *)(v16 + 232) + 32), *(void *)(*(void *)(v16 + 232) + 40), 0, v32, v33, v34, v35, v36);
      }
      uint64_t v37 = ttseg_loc_SynthesizeStart(v56, v16, *(uint64_t (**)(uint64_t, unsigned int *, unsigned char *))(v16 + 40), *(void *)(v16 + 88), 0, *(uint64_t (**)(uint64_t, void, void, void))(v16 + 56), *(void *)(v16 + 88), v25, a3, a4, a5, a6);
    }
    uint64_t v21 = v37;
    BOOL v41 = 0;
    goto LABEL_28;
  }
  return v12;
}

uint64_t ttseg_loc_SynthesizeStart(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, unsigned int *, unsigned char *), uint64_t a4, char *a5, uint64_t (*a6)(uint64_t, void, void, void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v100[16] = *MEMORY[0x263EF8340];
  uint64_t v19 = 2166373638;
  int v20 = *(_DWORD *)(a2 + 192);
  if (v20)
  {
    if (v20 == 2) {
      goto LABEL_11;
    }
    if (v20 != 1) {
      return v19;
    }
  }
  int v21 = *(_DWORD *)(a2 + 196);
  if (v21 == 2)
  {
    if (SWIlicense_inhibited) {
      goto LABEL_11;
    }
    int v22 = kaldi::PipeInputImpl::MyType(*(kaldi::PipeInputImpl **)(a2 + 200));
    goto LABEL_10;
  }
  if (v21 != 1) {
    return v19;
  }
  if ((SWIlicense_inhibited & 1) == 0)
  {
    int v22 = kaldi::PipeInputImpl::MyType(0);
LABEL_10:
    if (v22 != 4) {
      return v19;
    }
  }
LABEL_11:
  *(_OWORD *)(a2 + 248) = 0u;
  uint64_t v23 = *(void *)(a2 + 544);
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_OWORD *)(a2 + 392) = 0u;
  *(_OWORD *)(a2 + 408) = 0u;
  *(_OWORD *)(a2 + 424) = 0u;
  *(_OWORD *)(a2 + 440) = 0u;
  *(_OWORD *)(a2 + 456) = 0u;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(void *)(a2 + 248) = a1;
  *(void *)(a2 + 344) = a3;
  *(void *)(a2 + 352) = a4;
  *(_DWORD *)(a2 + 392) = 1;
  *(_DWORD *)(a2 + 420) = 0;
  *(void *)(a2 + 544) = v23;
  uint64_t v24 = heap_Calloc(*(void **)(a1 + 8), *(unsigned __int16 *)(*(void *)(a2 + 232) + 24), 4);
  *(void *)(a2 + 408) = v24;
  if (!v24)
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16000, 0, v25, v26, v27, v28, v94);
    return 2166366218;
  }
  *(_WORD *)(a2 + 416) = *(_WORD *)(*(void *)(a2 + 232) + 24);
  if ((paramc_ParamGetUInt(*(void *)(a1 + 40), (uint64_t)"frequencyhz", (unsigned int *)(a2 + 256)) & 0x80000000) != 0)
  {
    *(_DWORD *)(a2 + 260) = 0;
  }
  else
  {
    if ((paramc_ParamGetUInt(*(void *)(a1 + 40), (uint64_t)"audiooutputsamplebits", (unsigned int *)(a2 + 264)) & 0x80000000) != 0) {
      *(_DWORD *)(a2 + 264) = 16;
    }
    if ((paramc_ParamGetUInt(*(void *)(a1 + 40), (uint64_t)"audiosamplerate", (unsigned int *)(a2 + 260)) & 0x80000000) != 0) {
      *(_DWORD *)(a2 + 260) = *(_DWORD *)(a2 + 256);
    }
    uint64_t v29 = *(kaldi::nnet1::Component **)(a2 + 216);
    if (*(_DWORD *)(a2 + 208))
    {
      uint64_t IsUpdatable = kaldi::nnet1::Component::IsUpdatable(v29);
      if ((IsUpdatable & 0x80000000) != 0)
      {
        uint64_t v19 = IsUpdatable;
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16013, "%s%x", v31, v32, v33, v34, "lherror");
LABEL_73:
        ttseg_loc_SynthesizeCleanup(a2, 1, 0, 0, v35, v36, v37, v38);
        return v19;
      }
    }
    else
    {
      kaldi::nnet1::Component::IsUpdatable(v29);
    }
  }
  uint64_t v39 = *(void *)(a1 + 40);
  uint64_t v97 = *(uint64_t ***)(a1 + 32);
  v100[0] = 0;
  paramc_ParamGetStr(v39, (uint64_t)"language", v100);
  uint64_t v40 = *(void *)(a1 + 40);
  v100[0] = 0;
  paramc_ParamGetStr(v40, (uint64_t)"voice", v100);
  uint64_t v41 = *(void *)(a1 + 40);
  v100[0] = 0;
  paramc_ParamGetStr(v41, (uint64_t)"voicemodel", v100);
  uint64_t v42 = *(void *)(a1 + 40);
  v100[0] = 0;
  paramc_ParamGetStr(v42, (uint64_t)"langversion", v100);
  uint64_t v43 = *(void *)(a1 + 40);
  v100[0] = 0;
  paramc_ParamGetStr(v43, (uint64_t)"voiceversion", v100);
  uint64_t v44 = *(void *)(a1 + 40);
  v100[0] = 0;
  paramc_ParamGetStr(v44, (uint64_t)"vopversion", v100);
  uint64_t v45 = *(void *)(a1 + 40);
  v100[0] = 0;
  paramc_ParamGetStr(v45, (uint64_t)"applicationname", v100);
  log_OutEvent(v97, 3, "%s%s%s%s%s%s%s%u%s%s%s%s%s%s%s%s%s%s", v46, v47, v48, v49, v50, "LANG");
  log_OutText(*(void *)(a1 + 32), (uint64_t)"TTSEG", 99, 0, (uint64_t)"SYNTHESIZE START", v51, v52, v53, v95);
  if (a9)
  {
    *(void *)(a2 + 272) = a9;
    *(void *)(a2 + 280) = a10;
    uint64_t v54 = a5;
  }
  else
  {
    unsigned int v55 = *(uint64_t (**)(uint64_t))(*(void *)(a2 + 128) + 32);
    uint64_t NullHandle = safeh_GetNullHandle();
    uint64_t v57 = v55(NullHandle);
    uint64_t v54 = a5;
    if ((v57 & 0x80000000) != 0)
    {
      uint64_t v19 = v57;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16014, "%s%x", v58, v59, v60, v61, "lherror");
      goto LABEL_73;
    }
    *(_DWORD *)(a2 + 288) = 1;
  }
  if (a11)
  {
    *(void *)(a2 + 296) = a11;
    *(void *)(a2 + 304) = a12;
  }
  else
  {
    uint64_t v62 = *(uint64_t (**)(uint64_t))(*(void *)(a2 + 168) + 32);
    uint64_t v63 = safeh_GetNullHandle();
    uint64_t v64 = v62(v63);
    if ((v64 & 0x80000000) != 0)
    {
      uint64_t v19 = v64;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16073, "%s%x", v65, v66, v67, v68, "lherror");
      goto LABEL_73;
    }
    *(_DWORD *)(a2 + 312) = 1;
  }
  uint64_t v69 = paramc_ParamSetRestorePoint(*(void *)(a1 + 40), (void *)(a2 + 336));
  if ((v69 & 0x80000000) != 0)
  {
    uint64_t v19 = v69;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16074, "%s%x", v70, v71, v72, v73, "lherror");
    goto LABEL_73;
  }
  if (v54)
  {
    if (*v54)
    {
      uint64_t v74 = paramc_ParamSetStr(*(void *)(a1 + 40), (uint64_t)"inputmimetype", v54);
      if ((v74 & 0x80000000) != 0)
      {
        uint64_t v19 = v74;
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16102, "%s%x", v75, v76, v77, v78, "lherror");
        goto LABEL_73;
      }
    }
    if (!a3) {
      goto LABEL_55;
    }
    uint64_t v98 = 0;
    uint64_t v99 = v54;
    strcpy((char *)v100, "text/plain;charset=");
    if (*v54) {
      goto LABEL_52;
    }
    goto LABEL_41;
  }
  if (a3)
  {
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    strcpy((char *)v100, "text/plain;charset=");
LABEL_41:
    if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"inputmimetype", &v99) & 0x80000000) != 0
      || (uint64_t v54 = v99) == 0
      || !*v99)
    {
      if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"nativetypeofchar", &v98) & 0x80000000) == 0
        && v98
        && *v98)
      {
        __strcat_chk();
        paramc_ParamRelease(*(void *)(a1 + 40));
      }
      else
      {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16015, 0, v79, v80, v81, v82, v96);
        strcpy((char *)v100, "text/plain;charset=utf-8");
      }
      uint64_t v54 = (char *)v100;
      uint64_t v99 = (char *)v100;
    }
LABEL_52:
    uint64_t v83 = (*(uint64_t (**)(void, void, uint64_t, char *, void, uint64_t, uint64_t))(*(void *)(a2 + 128)
                                                                                               + 64))(*(void *)(a2 + 272), *(void *)(a2 + 280), 18, v54, 0, 1, a2 + 320);
    if ((v83 & 0x80000000) != 0)
    {
      uint64_t v19 = v83;
      if ((v83 & 0x1FFF) != 2 || *(_DWORD *)(a2 + 288))
      {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"TTSEG", 16016, "%s%s%s%x", v84, v85, v86, v87, "contentType");
        goto LABEL_73;
      }
    }
  }
LABEL_55:
  uint64_t v88 = ttseg_loc_ProcessStart(a2, a6, a7, 0, *(unsigned __int16 *)(*(void *)(a2 + 232) + 24));
  if ((v88 & 0x80000000) != 0) {
    goto LABEL_71;
  }
  uint64_t v89 = ttseg_loc_OpenOutputStreams((void *)a2);
  uint64_t v19 = v89;
  if (!a6 || (v89 & 0x80000000) != 0) {
    goto LABEL_60;
  }
  uint64_t v88 = (*(uint64_t (**)(void, void, void))(*(void *)(a2 + 128) + 56))(*(void *)(a2 + 272), *(void *)(a2 + 280), (unsigned __int16)(*(_WORD *)(*(void *)(a2 + 232) + 24) + 1));
  if ((v88 & 0x80000000) != 0)
  {
LABEL_71:
    uint64_t v19 = v88;
    goto LABEL_73;
  }
  uint64_t v19 = a6(a7, 0, *(void *)(a2 + 272), *(void *)(a2 + 280));
LABEL_60:
  if ((v19 & 0x80000000) != 0) {
    goto LABEL_73;
  }
  if (*(void *)(a2 + 320))
  {
    InputIntouint64_t Stream = ttseg_loc_GetInputIntoStream(a1, a3, a4, *(void *)(a2 + 128), (uint64_t *)(a2 + 320), *(void *)(*(void *)(a2 + 232) + 32), *(void *)(*(void *)(a2 + 232) + 40), (_DWORD *)(a2 + 440));
    if ((InputIntoStream & 0x1FFF) == 3) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = InputIntoStream;
    }
  }
  if (*(_DWORD *)(a2 + 240) != 2 && (v19 & 0x80000000) == 0)
  {
    if (!*(void *)(a2 + 360)) {
      return v19;
    }
    uint64_t v19 = ttseg_loc_PutOutput(a2, 0, v90, v91, v35, v36, v37, v38);
  }
  if ((v19 & 0x80000000) != 0) {
    goto LABEL_73;
  }
  return v19;
}

uint64_t ttseg_loc_PutOutput(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  v133[0] = 0;
  int v132 = 0;
  uint64_t v10 = *(void *)(a1 + 248);
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  if (a2) {
    *a2 = 0;
  }
  if (!*(void *)(a1 + 48) || *(_DWORD *)(a1 + 420) == 2 || *(_DWORD *)(a1 + 240) == 2) {
    return 0;
  }
  uint64_t v12 = (uint64_t *)(a1 + 424);
  if (!*(void *)(a1 + 424))
  {
    log_OutText(*(void *)(v10 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"Send TTSEG_OUT_BUFREQ message", a6, a7, a8, v110);
    *(_DWORD *)(a1 + 268) = 1;
    uint64_t v23 = (unsigned int *)(a1 + 432);
    *(void *)(a1 + 432) = 0;
    uint64_t v24 = *(void *)(a1 + 232);
    uint64_t v25 = *(void *)(v24 + 32);
    if (v25) {
      compstats_Start(v25, *(void *)(v24 + 40), *(unsigned __int16 *)(v24 + 24) + 2, v18, v19, v20, v21, v22);
    }
    uint64_t v31 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, uint64_t))(a1 + 48))(*(void *)(a1 + 88), 1, a1 + 424, a1 + 432, 0, a1 + 436);
    uint64_t v32 = *(void *)(a1 + 232);
    uint64_t v33 = *(void *)(v32 + 32);
    if (v33)
    {
      uint64_t v34 = v31;
      compstats_Stop(v33, *(void *)(v32 + 40), *(unsigned __int16 *)(v32 + 24) + 2, v26, v27, v28, v29, v30);
      uint64_t v31 = v34;
    }
    if ((v31 & 0x80000000) != 0)
    {
      uint64_t v38 = v31;
      log_OutText(*(void *)(v10 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"User PutOutput returned error %x", v28, v29, v30, v31);
      return v38;
    }
    if (!*v12 || !*v23)
    {
      log_OutText(*(void *)(v10 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"Stopping, user PutOutput returned 0 length samples buffer", v28, v29, v30, v111);
      return 2166368263;
    }
    paramc_ParamSetUInt(*(void *)(v10 + 40), (uint64_t)"audiooutputbufsamples", *v23);
    log_OutText(*(void *)(v10 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"User PutOutput returned %p %u %u", v35, v36, v37, *v12);
  }
  uint64_t result = (*(uint64_t (**)(void, void, char *, int *))(*(void *)(a1 + 128) + 144))(*(void *)(a1 + 360), *(void *)(a1 + 368), (char *)v133 + 4, &v132);
  if ((result & 0x80000000) == 0 && HIDWORD(v133[0])) {
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 128) + 88))(*(void *)(a1 + 360), *(void *)(a1 + 368), &v131, (char *)v133 + 4);
  }
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t *, void *))(*(void *)(a1 + 128) + 88))(*(void *)(a1 + 376), *(void *)(a1 + 384), &v130, v133);
    LODWORD(v133[0]) >>= 5;
    if ((result & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 420) == 2)
      {
        uint64_t v16 = 0;
        unsigned int v17 = 0;
LABEL_16:
        if (v16) {
          uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 128) + 96))(*(void *)(a1 + 360), *(void *)(a1 + 368), v16);
        }
        if ((result & 0x80000000) == 0)
        {
          if (v17) {
            return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 128) + 96))(*(void *)(a1 + 376), *(void *)(a1 + 384), 32 * v17);
          }
        }
        return result;
      }
      uint64_t v16 = 0;
      unsigned int v17 = 0;
      int v122 = 0;
      int v39 = 0;
      uint64_t v40 = 64;
      uint64_t v114 = v10;
      uint64_t v115 = v8;
      int v123 = (unsigned int *)(a1 + 432);
      int v126 = (unsigned int *)(a1 + 436);
      while (1)
      {
        if (HIDWORD(v133[0]) <= v16 && LODWORD(v133[0]) <= v17) {
          goto LABEL_16;
        }
        unsigned int v42 = (*(_DWORD *)(a1 + 264) * *(_DWORD *)(a1 + 432)) >> 3;
        if (HIDWORD(v133[0]) - (int)v16 < v42) {
          unsigned int v42 = HIDWORD(v133[0]) - v16;
        }
        if (v130) {
          uint64_t v43 = (_DWORD *)(v130 + 32 * v17);
        }
        else {
          uint64_t v43 = 0;
        }
        if (!*(_DWORD *)(a1 + 436))
        {
          unsigned int v44 = 0;
LABEL_50:
          unsigned int v17 = v133[0];
          goto LABEL_106;
        }
        unsigned int v44 = 0;
        if (!*(_DWORD *)(a1 + 108) || !v130 || v17 == LODWORD(v133[0])) {
          goto LABEL_50;
        }
        int v117 = v39;
        int v124 = v42;
        uint64_t v119 = result;
        uint64_t v129 = 0;
        unsigned int v45 = *(_DWORD *)(a1 + 448);
        (*(void (**)(void, void, char *))(*(void *)(a1 + 128) + 136))(*(void *)(a1 + 360), *(void *)(a1 + 368), (char *)&v129 + 4);
        unsigned int v46 = *(_DWORD *)(a1 + 264);
        unsigned int v127 = v16;
        uint64_t v120 = v40;
        if (v46 == 8)
        {
          int v116 = HIDWORD(v129);
          unsigned int v47 = v124 + v16 + HIDWORD(v129);
        }
        else
        {
          int v116 = HIDWORD(v129);
          if (v46 == 16) {
            unsigned int v47 = (v124 + v16 + HIDWORD(v129)) >> 1;
          }
          else {
            unsigned int v47 = 8 * (v124 + (int)v16 + HIDWORD(v129)) / v46;
          }
        }
        unsigned int v48 = *(_DWORD *)(a1 + 108);
        uint64_t v49 = v130;
        unsigned int v121 = v133[0];
        unint64_t v50 = v130 + 32 * LODWORD(v133[0]);
        MarkToDeliver = ttseg_loc_NextMarkToDeliver(v48, v43, v50, &v129);
        if (!MarkToDeliver)
        {
          unsigned int v44 = 0;
          uint64_t v12 = (uint64_t *)(a1 + 424);
          goto LABEL_104;
        }
        unsigned int v113 = v46;
        uint64_t v118 = v49;
        unsigned int v44 = 0;
        unsigned int v52 = *v126;
        int v53 = v132;
        uint64_t v54 = v43;
        while (1)
        {
          unsigned int v55 = MarkToDeliver[3];
          BOOL v56 = !v53 && v55 >= v47;
          BOOL v57 = !v56;
          if (v44 + v129 > v52 || !v57) {
            break;
          }
          ++v44;
          if (v55 > v45) {
            unsigned int v45 = MarkToDeliver[3];
          }
          uint64_t v54 = MarkToDeliver + 8;
          MarkToDeliver = ttseg_loc_NextMarkToDeliver(v48, MarkToDeliver + 8, v50, &v129);
          if (!MarkToDeliver) {
            goto LABEL_79;
          }
        }
        if (v55 >= v47)
        {
LABEL_79:
          uint64_t v10 = v114;
          uint64_t v8 = v115;
          uint64_t v12 = (uint64_t *)(a1 + 424);
          uint64_t v16 = v127;
          goto LABEL_91;
        }
        if (v55 <= v45) {
          unsigned int v55 = v45;
        }
        unsigned int v59 = (v55 * v113) >> 3;
        if (v113 == 16) {
          unsigned int v59 = 2 * v55;
        }
        if (v113 != 8) {
          unsigned int v55 = v59;
        }
        int v60 = v55 + v117 - v116;
        uint64_t v16 = v127;
        if (v60 <= 0)
        {
          if (v129 <= v52)
          {
            int v124 = 0;
          }
          else
          {
            int v124 = v60 & ~(v60 >> 31);
            MarkToDeliver = ttseg_loc_NextMarkToDeliver(v48, v54, v50, 0);
            if (MarkToDeliver)
            {
              if (v52 <= v44) {
                unsigned int v52 = v44;
              }
              uint64_t v10 = v114;
              uint64_t v8 = v115;
              while (v52 != v44)
              {
                ++v44;
                MarkToDeliver = ttseg_loc_NextMarkToDeliver(v48, MarkToDeliver + 8, v50, 0);
                if (!MarkToDeliver) {
                  goto LABEL_90;
                }
              }
              unsigned int v44 = v52;
              goto LABEL_90;
            }
          }
        }
        else
        {
          int v124 = v60;
        }
        uint64_t v10 = v114;
        uint64_t v8 = v115;
LABEL_90:
        uint64_t v12 = (uint64_t *)(a1 + 424);
LABEL_91:
        if (MarkToDeliver) {
          unsigned int v17 = ((unint64_t)MarkToDeliver - v118) >> 5;
        }
        else {
          unsigned int v17 = v121;
        }
        if (v44 > *(_DWORD *)(a1 + 452))
        {
          uint64_t v61 = heap_Realloc(*(uint64_t **)(v10 + 8), *(void *)(a1 + 456), 32 * v44);
          if (!v61)
          {
            log_OutPublic(*(void *)(v10 + 32), (uint64_t)"TTSEG", 16000, 0, v62, v63, v64, v65, v110);
            return 2166366218;
          }
          *(void *)(a1 + 456) = v61;
          *(_DWORD *)(a1 + 452) = v44;
LABEL_98:
          unsigned int v121 = v17;
          uint64_t v66 = 0;
          uint64_t v67 = v44;
          uint64_t v68 = v43;
          do
          {
            uint64_t v69 = ttseg_loc_NextMarkToDeliver(*(_DWORD *)(a1 + 108), v68, v130 + 32 * LODWORD(v133[0]), 0);
            if (!v69) {
              break;
            }
            uint64_t v70 = v69;
            uint64_t v71 = (_OWORD *)(*(void *)(a1 + 456) + v66);
            long long v72 = v69[1];
            *uint64_t v71 = *v69;
            v71[1] = v72;
            uint64_t v73 = *(void *)(a1 + 456) + v66;
            uint64_t v74 = (*(_DWORD *)(v73 + 12) + *(_DWORD *)(a1 + 444));
            *(_DWORD *)(v73 + 12) = v74;
            if (v74 >= *(_DWORD *)(a1 + 448))
            {
              *(_DWORD *)(a1 + 448) = v74;
            }
            else
            {
              log_OutText(*(void *)(v10 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"Marker current position is too small: %ul<%ul", v13, v14, v15, v74);
              *(_DWORD *)(v73 + 12) = *(_DWORD *)(a1 + 448);
            }
            uint64_t v68 = v70 + 2;
            v66 += 32;
            --v67;
          }
          while (v67);
LABEL_104:
          uint64_t v16 = v127;
          unsigned int v17 = v121;
          goto LABEL_105;
        }
        if (v44) {
          goto LABEL_98;
        }
LABEL_105:
        uint64_t result = v119;
        uint64_t v40 = v120;
        unsigned int v42 = v124;
LABEL_106:
        if (!(v44 | v42)) {
          goto LABEL_16;
        }
        *(_DWORD *)(a1 + 268) = 1;
        if (v8) {
          *uint64_t v8 = 1;
        }
        *(_DWORD *)(a1 + 400) = 0;
        int v125 = *(_DWORD *)(a1 + 432);
        if (v42)
        {
          unsigned int v75 = v42;
          memcpy((void *)*v12, (const void *)(v131 + v16), v42);
          unsigned int v42 = v75;
          LODWORD(v16) = v75 + v16;
        }
        unsigned int v76 = *(_DWORD *)(a1 + 264);
        if (v76 != 8)
        {
          if (v76 == 16) {
            v42 >>= 1;
          }
          else {
            unsigned int v42 = 8 * v42 / v76;
          }
        }
        *(_DWORD *)(a1 + 432) = v42;
        *(_DWORD *)(a1 + 436) = v44;
        if (*(_DWORD *)(a1 + 392) == 1)
        {
          *(_DWORD *)(a1 + 392) = 0;
          uint64_t v77 = *(void *)(a1 + 232);
          uint64_t v78 = *(void *)(v77 + 32);
          if (v78) {
            compstats_Notify(v78, *(void *)(v77 + 40), 8);
          }
          int v122 = 1;
        }
        if (v130)
        {
          while (v43 != (_DWORD *)(v130 + 32 * LODWORD(v133[0])))
          {
            if (*v43 == 0x4000 && v43[2])
            {
              LODWORD(v40) = 32;
              break;
            }
            v43 += 8;
          }
          if ((unsigned __int16)v40 == 64) {
            unsigned int v79 = 128;
          }
          else {
            unsigned int v79 = v40 | 0x80;
          }
          if (v16 != HIDWORD(v133[0]) || v132 == 0) {
            uint64_t v40 = v40;
          }
          else {
            uint64_t v40 = v79;
          }
        }
        log_OutText(*(void *)(v10 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"Send %u message PCM Length: %u Marker No: %u", v13, v14, v15, (unsigned __int16)v40);
        log_OutText(*(void *)(v10 + 32), (uint64_t)"TTSEG", 99, 0, (uint64_t)"PUT OUTPUT %u samples %u markers", v81, v82, v83, *v123);
        if (*v123)
        {
          uint64_t v89 = *(uint64_t ***)(v10 + 32);
          if (v89)
          {
            if (v122 == 1) {
              uint64_t v90 = 8;
            }
            else {
              uint64_t v90 = 9;
            }
            log_OutEvent(v89, v90, "%s%lu%s%lu", v84, v85, v86, v87, v88, "SAMP");
          }
        }
        if (*(_DWORD *)(a1 + 208)) {
          kaldi::nnet1::Component::IsUpdatable(*(kaldi::nnet1::Component **)(a1 + 216));
        }
        unsigned int v128 = v16;
        uint64_t v91 = v40;
        uint64_t v92 = *(void *)(a1 + 232);
        uint64_t v93 = *(void *)(v92 + 32);
        if (v93) {
          compstats_Start(v93, *(void *)(v92 + 40), *(unsigned __int16 *)(v92 + 24) + 2, v84, v85, v86, v87, v88);
        }
        int v94 = *(_DWORD *)(a1 + 432);
        uint64_t v95 = v12;
        uint64_t v101 = (*(uint64_t (**)(void, void, uint64_t *, unsigned int *, void, unsigned int *))(a1 + 48))(*(void *)(a1 + 88), (unsigned __int16)v91, v12, v123, *(void *)(a1 + 456), v126);
        uint64_t v102 = v101;
        if ((v101 & 0x80000000) == 0 && *(_DWORD *)(a1 + 260))
        {
          HIDWORD(v129) = 0;
          Uuint64_t Int = paramc_ParamGetUInt(*(void *)(v10 + 40), (uint64_t)"feedback-amount-of-output-msecs-for-this-speakrequest", (unsigned int *)&v129 + 1);
          unsigned int v104 = HIDWORD(v129);
          if ((UInt & 0x80000000) == 0)
          {
            unsigned int v104 = HIDWORD(v129) + (1000 * v94) / *(_DWORD *)(a1 + 260);
            HIDWORD(v129) = v104;
          }
          paramc_ParamSetUInt(*(void *)(v10 + 40), (uint64_t)"feedback-amount-of-output-msecs-for-this-speakrequest", v104);
          uint64_t v101 = v102;
        }
        uint64_t v105 = *(void *)(a1 + 232);
        uint64_t v106 = *(void *)(v105 + 32);
        if (v106)
        {
          compstats_Stop(v106, *(void *)(v105 + 40), *(unsigned __int16 *)(v105 + 24) + 2, v96, v97, v98, v99, v100);
          uint64_t v101 = v102;
        }
        uint64_t v40 = v91;
        if ((v101 & 0x80000000) != 0)
        {
          log_OutText(*(void *)(v10 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"User PutOutput returned error %x", v98, v99, v100, v101);
        }
        else
        {
          uint64_t v107 = *v95;
          if (!*v95 || (unsigned int v108 = *v123) == 0)
          {
            log_OutText(*(void *)(v10 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"Stopping, user PutOutput returned 0 length samples buffer", v98, v99, v100, v112);
            uint64_t result = 2166368263;
            goto LABEL_160;
          }
          if (v108 != v125)
          {
            paramc_ParamSetUInt(*(void *)(v10 + 40), (uint64_t)"audiooutputbufsamples", v108);
            uint64_t v107 = *v95;
          }
          log_OutText(*(void *)(v10 + 32), (uint64_t)"TTSEG", 4, 0, (uint64_t)"User PutOutput returned %p %u %u", v98, v99, v100, v107);
        }
        uint64_t result = v102;
LABEL_160:
        uint64_t v12 = v95;
        uint64_t v16 = v128;
        int v109 = *(_DWORD *)(a1 + 420);
        if (v109 == 1)
        {
          int v109 = 2;
          *(_DWORD *)(a1 + 420) = 2;
          *(void *)(a1 + 424) = 0;
        }
        if ((result & 0x80000000) != 0) {
          return result;
        }
        int v39 = -v128;
        if (v109 == 2) {
          goto LABEL_16;
        }
      }
    }
  }
  return result;
}