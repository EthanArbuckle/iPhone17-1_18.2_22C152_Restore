void sub_20D2FBB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  std::__shared_weak_count *v42;

  TokenPronunciationItem::~TokenPronunciationItem(&a35);
  v42 = *(std::__shared_weak_count **)(v40 - 168);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(a1);
}

void create_silence(uint64_t *a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  std::string::basic_string[abi:ne180100]<0>(v24, "sil");
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v15[1] = &v28;
  char v16 = 0;
  v2 = (std::string *)operator new(0x18uLL);
  v3 = v2;
  v28 = v2;
  v29 = v2;
  v30 = v2 + 1;
  v17 = v2;
  v18 = v2;
  v19 = (void **)&v30;
  v20 = &v17;
  v21 = &v18;
  LOBYTE(v22) = 0;
  if (SHIBYTE(v25) < 0)
  {
    std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)v24[0], (std::string::size_type)v24[1]);
    v3 = v18;
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v24;
    v2->__r_.__value_.__r.__words[2] = v25;
  }
  v4 = v3 + 1;
  v18 = v4;
  LOBYTE(v22) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v19);
  v29 = v4;
  __p = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  v15[0] = 0;
  long long v14 = 0uLL;
  v19 = (void **)&v14;
  LOBYTE(v20) = 0;
  *(void *)&long long v14 = operator new(0x40uLL);
  *((void *)&v14 + 1) = v14;
  v15[0] = v14 + 64;
  *((void *)&v14 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable*>((uint64_t)v15, (uint64_t)&v26, (uint64_t)&v34, v14);
  unint64_t v5 = a1[2];
  v6 = (void *)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a1) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    v23 = a1 + 2;
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    v13 = (std::string **)(v11 + 24 * v8);
    v19 = (void **)v11;
    v20 = v13;
    unint64_t v22 = v11 + 24 * v12;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    *(_OWORD *)v13 = v14;
    v13[2] = (std::string *)v15[0];
    long long v14 = 0uLL;
    v15[0] = 0;
    v21 = v13 + 3;
    std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(a1, &v19);
    v7 = (void *)a1[1];
    std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    *(_OWORD *)v6 = v14;
    v6[2] = v15[0];
    long long v14 = 0uLL;
    v15[0] = 0;
    v7 = v6 + 3;
    a1[1] = (uint64_t)(v6 + 3);
  }
  a1[1] = (uint64_t)v7;
  v19 = (void **)&v14;
  std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  v19 = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
}

void sub_20D2FBF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31 = v30;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a16);
  a30 = v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (a26 < 0) {
    operator delete(__p);
  }
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

void std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      unint64_t v11 = (void **)a1[1];
      uint64_t v12 = (void *)*a1;
      if (v11 != (void **)v10)
      {
        do
        {
          v11 -= 3;
          v20 = v11;
          std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v20);
        }
        while (v11 != (void **)v10);
        uint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v14;
    }
    std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](a1, v15);
    char v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v9, a2, a3, (void *)a1[1]);
    goto LABEL_16;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v10) >> 3) < a4)
  {
    v17 = &a2[(a1[1] - v10) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Word *,PhonemeRepresentation::Word *,PhonemeRepresentation::Word *>(a2, v17, v10);
    char v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v9, v17, a3, (void *)a1[1]);
LABEL_16:
    a1[1] = (uint64_t)v16;
    return;
  }
  uint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Word *,PhonemeRepresentation::Word *,PhonemeRepresentation::Word *>(a2, a3, v10);
  v19 = (void **)a1[1];
  while (v19 != (void **)v18)
  {
    v19 -= 3;
    v20 = v19;
    std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
  a1[1] = v18;
}

void sub_20D2FC164(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20D2FC16C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void create_pronunciation_with_phone_sequence(uint64_t *a1, std::string *a2, uint64_t a3)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v103 = (uint64_t)(a1 + 2);
  v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(1uLL);
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  v101.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
  v102 = (char *)&v6[3 * v7];
  void *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  v101.__r_.__value_.__r.__words[2] = (std::string::size_type)(v6 + 3);
  std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(a1, &v101);
  uint64_t v8 = a1[1];
  std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&v101);
  a1[1] = v8;
  split_by_delimiter(&v99, a2, 0x20u);
  if (v99.__end_ != v99.__begin_)
  {
    uint64_t v9 = (uint64_t *)*a1;
    uint64_t v10 = *(_OWORD **)(*a1 + 8);
    unint64_t v11 = *(void *)(*a1 + 16);
    if ((unint64_t)v10 >= v11)
    {
      uint64_t v14 = ((uint64_t)v10 - *v9) >> 6;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 58) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v11 - *v9;
      if (v16 >> 5 > v15) {
        unint64_t v15 = v16 >> 5;
      }
      v17 = (char *)((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0 ? 0x3FFFFFFFFFFFFFFLL : v15);
      uint64_t v103 = *a1 + 16;
      if (v17) {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>((unint64_t)v17);
      }
      else {
        uint64_t v18 = 0;
      }
      v19 = &v17[64 * v14];
      v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      v101.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
      v102 = &v17[64 * v18];
      *(_OWORD *)v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      *((_OWORD *)v19 + 2) = 0u;
      *((_OWORD *)v19 + 3) = 0u;
      v101.__r_.__value_.__r.__words[2] = (std::string::size_type)(v19 + 64);
      std::vector<PhonemeRepresentation::Syllable>::__swap_out_circular_buffer(v9, &v101);
      uint64_t v12 = (_OWORD *)v9[1];
      std::__split_buffer<PhonemeRepresentation::Syllable>::~__split_buffer((uint64_t)&v101);
      uint64_t v13 = *a1;
    }
    else
    {
      v10[2] = 0u;
      v10[3] = 0u;
      *uint64_t v10 = 0u;
      v10[1] = 0u;
      uint64_t v12 = v10 + 4;
      v9[1] = (uint64_t)(v10 + 4);
      uint64_t v13 = (uint64_t)v9;
    }
    v9[1] = (uint64_t)v12;
    MEMORY[0x210558E70](*(void *)(v13 + 8) - 24, &byte_20D5A22AE);
    std::vector<std::string>::pointer begin = v99.__begin_;
    if (v99.__end_ != v99.__begin_)
    {
      for (unint64_t i = 0; i < 0xAAAAAAAAAAAAAAABLL * (((char *)v99.__end_ - (char *)v99.__begin_) >> 3); ++i)
      {
        unint64_t v22 = &begin[i];
        v23 = (uint64_t *)*a1;
        v24 = *(std::string **)(*a1 + 8);
        int v25 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
        if (v25 < 0)
        {
          if (v22->__r_.__value_.__l.__size_ != 1) {
            goto LABEL_29;
          }
          uint64_t v26 = (std::string *)v22->__r_.__value_.__r.__words[0];
        }
        else
        {
          uint64_t v26 = &begin[i];
          if (v25 != 1) {
            goto LABEL_29;
          }
        }
        if (v26->__r_.__value_.__s.__data_[0] != 46
          || (std::string::size_type v27 = v24[-2].__r_.__value_.__l.__size_, v24[-2].__r_.__value_.__r.__words[0] == v27))
        {
LABEL_29:
          if (!*(unsigned char *)a3) {
            goto LABEL_85;
          }
          std::string::size_type v30 = std::string::find(v22, 59, 0);
          if (v30 != -1)
          {
            std::string::size_type v31 = v30;
            std::string::basic_string(&v101, v22, 0, v30, (std::allocator<char> *)&v100);
            uint64_t v32 = *(unsigned __int8 *)(a3 + 55);
            if ((v32 & 0x80u) != 0) {
              uint64_t v32 = *(void *)(a3 + 40);
            }
            if (v32) {
              std::string::operator=(&v101, (const std::string *)(a3 + 32));
            }
            std::string::size_type size = HIBYTE(v101.__r_.__value_.__r.__words[2]);
            if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v101.__r_.__value_.__l.__size_;
            }
            if (!size) {
              std::string::operator=(&v101, (const std::string *)(a3 + 8));
            }
            uint64_t v34 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v24[-1].__r_.__value_.__r.__words[2]) < 0) {
              std::string::size_type v35 = v24[-1].__r_.__value_.__l.__size_;
            }
            else {
              std::string::size_type v35 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
            }
            if (!v35)
            {
              v41 = &v101;
              goto LABEL_65;
            }
            if ((v34 & 0x80u) == 0) {
              std::string::size_type v39 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v39 = v24[-1].__r_.__value_.__l.__size_;
            }
            std::string::size_type v40 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
            if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v40 = v101.__r_.__value_.__l.__size_;
            }
            v41 = (std::string *)(a3 + 8);
            if (v39 == v40)
            {
              if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v42 = &v101;
              }
              else {
                v42 = (std::string *)v101.__r_.__value_.__r.__words[0];
              }
              if ((v34 & 0x80) != 0)
              {
                int v82 = memcmp(v24[-1].__r_.__value_.__l.__data_, v42, v24[-1].__r_.__value_.__l.__size_);
                v41 = (std::string *)(a3 + 8);
                if (v82) {
                  goto LABEL_65;
                }
              }
              else if (*((unsigned char *)&v24[-1].__r_.__value_.__s + 23))
              {
                v43 = v24 - 1;
                while (v43->__r_.__value_.__s.__data_[0] == v42->__r_.__value_.__s.__data_[0])
                {
                  v43 = (std::string *)((char *)v43 + 1);
                  v42 = (std::string *)((char *)v42 + 1);
                  if (!--v34) {
                    goto LABEL_66;
                  }
                }
                v41 = (std::string *)(a3 + 8);
                goto LABEL_65;
              }
            }
            else
            {
LABEL_65:
              std::string::operator=(v24 - 1, v41);
            }
LABEL_66:
            std::string::size_type v44 = v31 + 1;
            if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0) {
              std::string::size_type v45 = v22->__r_.__value_.__l.__size_;
            }
            else {
              std::string::size_type v45 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
            }
            if (v44 >= v45)
            {
              if (v44 != v45)
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                }
                v47 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                {
                  std::string::size_type v49 = (std::string::size_type)v22;
                  if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0) {
                    std::string::size_type v49 = v22->__r_.__value_.__r.__words[0];
                  }
                  LODWORD(v104.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v104.__r_.__value_.__r.__words + 4) = v49;
                  _os_log_impl(&dword_20CD80000, v47, OS_LOG_TYPE_ERROR, "Is phone(from G2P) missing: %s?", (uint8_t *)&v104, 0xCu);
                }
                v50 = v22;
                if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0) {
                  v50 = (std::string *)v22->__r_.__value_.__r.__words[0];
                }
                Diagnostics::log(3, "Is phone(from G2P) missing: %s?", v48, v50);
                MEMORY[0x210558E70](v22, &byte_20D5A22AE);
              }
            }
            else
            {
              std::string::basic_string(&v104, v22, v44, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v100);
              if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v22->__r_.__value_.__l.__data_);
              }
              long long v46 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
              v22->__r_.__value_.__r.__words[2] = v104.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v46;
            }
            if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
LABEL_84:
            }
              operator delete(v101.__r_.__value_.__l.__data_);
LABEL_85:
            if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v104, v22->__r_.__value_.__l.__data_, v22->__r_.__value_.__l.__size_);
            }
            else
            {
              long long v51 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
              v104.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v51;
            }
            std::string::size_type v52 = v24[-2].__r_.__value_.__r.__words[2];
            std::string::size_type v53 = v24[-2].__r_.__value_.__l.__size_;
            if (v53 >= v52)
            {
              std::string::pointer data = v24[-2].__r_.__value_.__l.__data_;
              unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - (void)data) >> 3);
              unint64_t v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (void)data) >> 3);
              if (2 * v59 > v58) {
                unint64_t v58 = 2 * v59;
              }
              if (v59 >= 0x555555555555555) {
                unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v60 = v58;
              }
              uint64_t v103 = (uint64_t)&v24[-2].__r_.__value_.__r.__words[2];
              if (v60) {
                unint64_t v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v60);
              }
              else {
                uint64_t v61 = 0;
              }
              std::string::size_type v62 = v60 + 24 * v57;
              v101.__r_.__value_.__r.__words[0] = v60;
              v101.__r_.__value_.__l.__size_ = v62;
              v102 = (char *)(v60 + 24 * v61);
              long long v63 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
              *(void *)(v62 + 16) = *((void *)&v104.__r_.__value_.__l + 2);
              *(_OWORD *)std::string::size_type v62 = v63;
              memset(&v104, 0, sizeof(v104));
              v101.__r_.__value_.__r.__words[2] = v62 + 24;
              std::vector<PhonemeRepresentation::Phoneme>::__swap_out_circular_buffer((uint64_t *)&v24[-2], &v101);
              std::string::size_type v55 = v24[-2].__r_.__value_.__l.__size_;
              std::__split_buffer<PhonemeRepresentation::Phoneme>::~__split_buffer((uint64_t)&v101);
            }
            else
            {
              long long v54 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
              *(void *)(v53 + 16) = *((void *)&v104.__r_.__value_.__l + 2);
              *(_OWORD *)std::string::size_type v53 = v54;
              memset(&v104, 0, sizeof(v104));
              std::string::size_type v55 = v53 + 24;
              v24[-2].__r_.__value_.__l.__size_ = v53 + 24;
            }
            v24[-2].__r_.__value_.__l.__size_ = v55;
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v104.__r_.__value_.__l.__data_);
            }
            split_by_delimiter((std::vector<std::string> *)&v101, v22, 0x5Fu);
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v101.__r_.__value_.__l.__size_ - v101.__r_.__value_.__r.__words[0]) >> 3) >= 2)
            {
              int v64 = *(char *)(v101.__r_.__value_.__l.__size_ - 1);
              if (v64 < 0)
              {
                if (*(void *)(v101.__r_.__value_.__l.__size_ - 16) != 1) {
                  goto LABEL_111;
                }
                int v65 = **(char **)(v101.__r_.__value_.__l.__size_ - 24);
                if (v65 < 48) {
                  goto LABEL_111;
                }
              }
              else
              {
                if (v64 != 1) {
                  goto LABEL_111;
                }
                int v65 = *(char *)(v101.__r_.__value_.__l.__size_ - 24);
                if (v65 <= 47) {
                  goto LABEL_111;
                }
              }
              if (v65 <= 0x39u) {
                *(_DWORD *)(*(void *)(*a1 + 8) - 60) = std::stoi((const std::string *)(v101.__r_.__value_.__r.__words[0] + 24), 0, 10);
              }
            }
LABEL_111:
            v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
            goto LABEL_112;
          }
          uint64_t v36 = *(unsigned __int8 *)(a3 + 55);
          if ((v36 & 0x80u) != 0) {
            uint64_t v36 = *(void *)(a3 + 40);
          }
          BOOL v37 = v36 == 0;
          uint64_t v38 = a3 + 32;
          if (v37) {
            uint64_t v38 = a3 + 8;
          }
          if (*(char *)(v38 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)v38, *(void *)(v38 + 8));
          }
          else {
            std::string v101 = *(std::string *)v38;
          }
          uint64_t v69 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v24[-1].__r_.__value_.__r.__words[2]) < 0) {
            std::string::size_type v70 = v24[-1].__r_.__value_.__l.__size_;
          }
          else {
            std::string::size_type v70 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
          }
          if (!v70)
          {
            v74 = &v101;
            goto LABEL_137;
          }
          if ((v69 & 0x80u) == 0) {
            std::string::size_type v71 = HIBYTE(v24[-1].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v71 = v24[-1].__r_.__value_.__l.__size_;
          }
          std::string::size_type v72 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          char v73 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v72 = v101.__r_.__value_.__l.__size_;
          }
          v74 = (std::string *)(a3 + 8);
          if (v71 == v72)
          {
            if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v75 = &v101;
            }
            else {
              v75 = (std::string *)v101.__r_.__value_.__r.__words[0];
            }
            if ((v69 & 0x80) != 0)
            {
              int v83 = memcmp(v24[-1].__r_.__value_.__l.__data_, v75, v24[-1].__r_.__value_.__l.__size_);
              v74 = (std::string *)(a3 + 8);
              if (v83) {
                goto LABEL_137;
              }
            }
            else if (*((unsigned char *)&v24[-1].__r_.__value_.__s + 23))
            {
              v76 = v24 - 1;
              while (v76->__r_.__value_.__s.__data_[0] == v75->__r_.__value_.__s.__data_[0])
              {
                v76 = (std::string *)((char *)v76 + 1);
                v75 = (std::string *)((char *)v75 + 1);
                if (!--v69) {
                  goto LABEL_138;
                }
              }
              v74 = (std::string *)(a3 + 8);
              goto LABEL_137;
            }
          }
          else
          {
LABEL_137:
            std::string::operator=(v24 - 1, v74);
            char v73 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          }
LABEL_138:
          if (v73 < 0) {
            goto LABEL_84;
          }
          goto LABEL_85;
        }
        v28 = (void *)(v27 - 24);
        int v29 = *(char *)(v27 - 1);
        if (v29 < 0)
        {
          if (*(void *)(v27 - 16) != 1) {
            goto LABEL_114;
          }
          v28 = (void *)*v28;
        }
        else if (v29 != 1)
        {
          goto LABEL_114;
        }
        if (*(unsigned char *)v28 == 35) {
          goto LABEL_29;
        }
LABEL_114:
        unint64_t v66 = v23[2];
        if ((unint64_t)v24 >= v66)
        {
          uint64_t v77 = ((uint64_t)v24 - *v23) >> 6;
          if ((unint64_t)(v77 + 1) >> 58) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v78 = v66 - *v23;
          uint64_t v79 = v78 >> 5;
          if (v78 >> 5 <= (unint64_t)(v77 + 1)) {
            uint64_t v79 = v77 + 1;
          }
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v80 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v80 = v79;
          }
          uint64_t v103 = (uint64_t)(v23 + 2);
          if (v80) {
            unint64_t v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>(v80);
          }
          else {
            uint64_t v81 = 0;
          }
          v84 = (_OWORD *)(v80 + (v77 << 6));
          v101.__r_.__value_.__r.__words[0] = v80;
          v101.__r_.__value_.__l.__size_ = (std::string::size_type)v84;
          v102 = (char *)(v80 + (v81 << 6));
          _OWORD *v84 = 0u;
          v84[1] = 0u;
          v84[2] = 0u;
          v84[3] = 0u;
          v101.__r_.__value_.__r.__words[2] = (std::string::size_type)(v84 + 4);
          std::vector<PhonemeRepresentation::Syllable>::__swap_out_circular_buffer(v23, &v101);
          v67 = (std::string::size_type *)v23[1];
          std::__split_buffer<PhonemeRepresentation::Syllable>::~__split_buffer((uint64_t)&v101);
          uint64_t v68 = *a1;
        }
        else
        {
          *(_OWORD *)&v24[1].__r_.__value_.__r.__words[1] = 0u;
          *(_OWORD *)&v24[2].__r_.__value_.__l.__data_ = 0u;
          *(_OWORD *)&v24->__r_.__value_.__l.__data_ = 0u;
          *(_OWORD *)&v24->__r_.__value_.__r.__words[2] = 0u;
          v67 = &v24[2].__r_.__value_.__r.__words[2];
          uint64_t v68 = (uint64_t)v23;
          v23[1] = (uint64_t)&v24[2].__r_.__value_.__r.__words[2];
        }
        v23[1] = (uint64_t)v67;
        MEMORY[0x210558E70](*(void *)(v68 + 8) - 24, &byte_20D5A22AE);
        int v85 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
        if (v85 < 0)
        {
          if (v22->__r_.__value_.__l.__size_ == 1)
          {
            unint64_t v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
LABEL_159:
            if (v22->__r_.__value_.__s.__data_[0] == 35)
            {
              uint64_t v86 = *(void *)(*a1 + 8);
              std::string::basic_string[abi:ne180100]<0>(&v104, "#");
              unint64_t v87 = *(void *)(v86 - 32);
              unint64_t v88 = *(void *)(v86 - 40);
              if (v88 >= v87)
              {
                uint64_t v91 = *(void *)(v86 - 48);
                unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - v91) >> 3);
                unint64_t v93 = v92 + 1;
                if (v92 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - v91) >> 3);
                if (2 * v94 > v93) {
                  unint64_t v93 = 2 * v94;
                }
                if (v94 >= 0x555555555555555) {
                  unint64_t v95 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v95 = v93;
                }
                uint64_t v103 = v86 - 32;
                if (v95) {
                  unint64_t v95 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v95);
                }
                else {
                  uint64_t v96 = 0;
                }
                std::string::size_type v97 = v95 + 24 * v92;
                v101.__r_.__value_.__r.__words[0] = v95;
                v101.__r_.__value_.__l.__size_ = v97;
                v102 = (char *)(v95 + 24 * v96);
                long long v98 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
                *(void *)(v97 + 16) = *((void *)&v104.__r_.__value_.__l + 2);
                *(_OWORD *)std::string::size_type v97 = v98;
                memset(&v104, 0, sizeof(v104));
                v101.__r_.__value_.__r.__words[2] = v97 + 24;
                std::vector<PhonemeRepresentation::Phoneme>::__swap_out_circular_buffer((uint64_t *)(v86 - 48), &v101);
                unint64_t v90 = *(void *)(v86 - 40);
                std::__split_buffer<PhonemeRepresentation::Phoneme>::~__split_buffer((uint64_t)&v101);
              }
              else
              {
                long long v89 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
                *(void *)(v88 + 16) = *((void *)&v104.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v88 = v89;
                memset(&v104, 0, sizeof(v104));
                unint64_t v90 = v88 + 24;
                *(void *)(v86 - 40) = v88 + 24;
              }
              *(void *)(v86 - 40) = v90;
              if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v104.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        else if (v85 == 1)
        {
          goto LABEL_159;
        }
LABEL_112:
        std::vector<std::string>::pointer begin = v99.__begin_;
      }
    }
  }
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
}

void sub_20D2FCB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

__n128 Agglomerate::set<TokenPronunciationItem>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = &v13;
  if (!v3) {
    operator new();
  }
  Agglomerate::ItemHolder<TokenPronunciationItem>::ItemHolder((uint64_t)&v7, a2);
  if ((void ****)v3 != &v7) {
    std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)(v3 + 8), v8, v9, 0xAAAAAAAAAAAAAAABLL * (v9 - v8));
  }
  v4 = (void **)(v3 + 32);
  if (*(char *)(v3 + 55) < 0) {
    operator delete(*v4);
  }
  long long v5 = v10;
  *(void *)(v3 + 48) = v11;
  *(_OWORD *)v4 = v5;
  HIBYTE(v11) = 0;
  LOBYTE(v10) = 0;
  *(_OWORD *)(v3 + 56) = v12;
  uint64_t v7 = (void ***)off_26C2062B8;
  uint64_t v13 = (void **)&v8;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v13);
  return result;
}

void sub_20D2FCD64(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B3C4017BDD84ALL);
  _Unwind_Resume(a1);
}

void TokenPronunciationItem::~TokenPronunciationItem(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = this;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t Agglomerate::ItemHolder<TokenPronunciationItem>::ItemHolder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26C2062B8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((void *)(a1 + 8), *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 48) = *(void *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 48);
  return a1;
}

void sub_20D2FCE98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Agglomerate::ItemHolder<TokenPronunciationItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C2062B8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void Agglomerate::ItemHolder<TokenPronunciationItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C2062B8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = (void **)(a1 + 8);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x2105595E0);
}

void *std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    v6 = result;
    std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20D2FD008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(v4, *v6, v6[1], (v6[1] - *v6) >> 6);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_20D2FD118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v2 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void *std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    v6 = result;
    std::vector<PhonemeRepresentation::Syllable>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20D2FD2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void ****)(a1 + 16);
    uint64_t v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      long long v5 = v3;
      std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

char *std::vector<PhonemeRepresentation::Syllable>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      uint64_t v10 = *(void *)(a2 + v7);
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 + v7 + 8);
      *(void *)uint64_t v8 = v10;
      *(void *)(a4 + v7 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0;
      std::vector<PhonemeRepresentation::Phoneme>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>((std::string *)(a4 + v7 + 16), *(long long **)(a2 + v7 + 16), *(long long **)(a2 + v7 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + v7 + 24) - *(void *)(a2 + v7 + 16)) >> 3));
      uint64_t v11 = (std::string *)(a4 + v7 + 40);
      long long v12 = (const std::string::value_type **)(a2 + v7 + 40);
      if (*(char *)(a2 + v7 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(void *)(a2 + v7 + 48));
      }
      else
      {
        long long v13 = *(_OWORD *)v12;
        *(void *)(v8 + 56) = *(void *)(v9 + 56);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      v7 += 64;
    }
    while (v9 + 64 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20D2FD49C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  while (v3 != v2)
  {
    v3 -= 64;
    std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

std::string *std::vector<PhonemeRepresentation::Phoneme>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    v6 = result;
    std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_20D2FD53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (long long *)((char *)v6 + 24);
      long long v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_20D2FD608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>(unint64_t a1)
{
  if (a1 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 6);
}

void std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void split_by_delimiter(std::vector<std::string> *a1, std::string *__str, unsigned __int8 a3)
{
  std::string::size_type v6 = 0;
  a1->__end_cap_.__value_ = 0;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  a1->__begin_ = 0;
  a1->__end_ = 0;
  int v8 = a3;
LABEL_2:
  std::string::size_type v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  if ((v9 & 0x80u) == 0) {
    uint64_t v11 = __str;
  }
  else {
    uint64_t v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v12 = v6;
  if ((v9 & 0x80) != 0)
  {
    while (v12 < size)
    {
LABEL_9:
      if (v11->__r_.__value_.__s.__data_[v12] == v8)
      {
        std::string::basic_string(&v38, __str, v6, v12 - v6, (std::allocator<char> *)&v37);
        std::vector<std::string>::pointer end = a1->__end_;
        value = a1->__end_cap_.__value_;
        if (end >= value)
        {
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a1->__begin_) >> 3);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a1->__begin_) >> 3);
          if (2 * v18 > v17) {
            unint64_t v17 = 2 * v18;
          }
          if (v18 >= 0x555555555555555) {
            unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v19 = v17;
          }
          __v.__end_cap_.__value_ = p_end_cap;
          if (v19) {
            v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v19);
          }
          else {
            v20 = 0;
          }
          v21 = v20 + v16;
          __v.__first_ = v20;
          __v.__begin_ = v21;
          __v.__end_cap_.__value_ = &v20[v19];
          long long v22 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
          v21->__r_.__value_.__r.__words[2] = v38.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          memset(&v38, 0, sizeof(v38));
          __v.__end_ = v21 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
          v23 = a1->__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          int v24 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
          a1->__end_ = v23;
          if (v24 < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v15 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
          end->__r_.__value_.__r.__words[2] = v38.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
          a1->__end_ = end + 1;
        }
        std::string::size_type v6 = v12 + 1;
        goto LABEL_2;
      }
      ++v12;
      if ((v9 & 0x80) == 0) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    if (v12 < v9) {
      goto LABEL_9;
    }
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  std::string::basic_string(&v38, __str, v6, size - v6, (std::allocator<char> *)&v37);
  std::vector<std::string>::pointer v26 = a1->__end_;
  int v25 = a1->__end_cap_.__value_;
  if (v26 >= v25)
  {
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)a1->__begin_) >> 3);
    unint64_t v29 = v28 + 1;
    if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)a1->__begin_) >> 3);
    if (2 * v30 > v29) {
      unint64_t v29 = 2 * v30;
    }
    if (v30 >= 0x555555555555555) {
      unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v31 = v29;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v31) {
      uint64_t v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v31);
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v33 = v32 + v28;
    __v.__first_ = v32;
    __v.__begin_ = v33;
    __v.__end_cap_.__value_ = &v32[v31];
    long long v34 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
    v33->__r_.__value_.__r.__words[2] = v38.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
    memset(&v38, 0, sizeof(v38));
    __v.__end_ = v33 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
    std::string::size_type v35 = a1->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v36 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
    a1->__end_ = v35;
    if (v36 < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v27 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
    v26->__r_.__value_.__r.__words[2] = v38.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
    a1->__end_ = v26 + 1;
  }
}

void sub_20D2FDAB0(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::__split_buffer<std::string> *a9, uint64_t a10, void *__pa, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void std::vector<PhonemeRepresentation::Syllable>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<PhonemeRepresentation::Syllable>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::vector<PhonemeRepresentation::Phoneme>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 24;
      long long v6 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v6;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v4 -= 24;
      v3 -= 24;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  *__n128 result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<PhonemeRepresentation::Phoneme>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a3 != a5)
  {
    uint64_t v8 = *(void *)(a3 - 64);
    a3 -= 64;
    int v9 = *(_DWORD *)(a3 + 8);
    *(void *)(a7 - 64) = v8;
    a7 -= 64;
    *(_DWORD *)(a7 + 8) = v9;
    *(void *)(a7 + 24) = 0;
    *(void *)(a7 + 32) = 0;
    *(void *)(a7 + 16) = 0;
    *(_OWORD *)(a7 + 16) = *(_OWORD *)(a3 + 16);
    *(void *)(a7 + 32) = *(void *)(a3 + 32);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    __n128 result = *(__n128 *)(a3 + 40);
    *(void *)(a7 + 56) = *(void *)(a3 + 56);
    *(__n128 *)(a7 + 40) = result;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 40) = 0;
  }
  return result;
}

double std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  while (a3 != a5)
  {
    *(void *)(a7 - 24) = 0;
    *(void *)(a7 - 16) = 0;
    a7 -= 24;
    *(void *)(a7 + 16) = 0;
    long long v8 = *(_OWORD *)(a3 - 3);
    a3 -= 3;
    double result = *(double *)&v8;
    *(_OWORD *)a7 = v8;
    *(void *)(a7 + 16) = a3[2];
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Word *,PhonemeRepresentation::Word *,PhonemeRepresentation::Word *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if (v5 != (uint64_t *)a3) {
        std::vector<PhonemeRepresentation::Syllable>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(a3, *v5, v5[1], (v5[1] - *v5) >> 6);
      }
      v5 += 3;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<PhonemeRepresentation::Syllable>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6)
  {
    std::vector<PhonemeRepresentation::Syllable>::__vdeallocate((void **)a1);
    if (a4 >> 58) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<PhonemeRepresentation::Syllable>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + (v14 << 6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *>(a2, v15, (uint64_t)v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  uint64_t v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *>(a2, a3, (uint64_t)v9);
  for (uint64_t i = *(void *)(a1 + 8); i != v16; std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](i))
    i -= 64;
  *(void *)(a1 + 8) = v16;
}

void sub_20D2FDED4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20D2FDEDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *,PhonemeRepresentation::Syllable *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 16;
    do
    {
      uint64_t v7 = v5 - 16;
      uint64_t v6 = *(void *)(v5 - 16);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v5 - 8);
      *(void *)a3 = v6;
      if (a3 != v5 - 16) {
        std::vector<PhonemeRepresentation::Phoneme>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>((std::vector<std::string> *)(a3 + 16), *(std::string **)v5, *(long long **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3));
      }
      std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v5 + 24));
      a3 += 64;
      v5 += 64;
    }
    while (v7 + 64 != a2);
  }
  return a3;
}

void std::vector<PhonemeRepresentation::Syllable>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 64;
        std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<PhonemeRepresentation::Phoneme>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>(std::vector<std::string> *a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v6 = (long long *)__str;
  uint64_t p_end_cap = (uint64_t)&a1->__end_cap_;
  std::vector<std::string>::pointer begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](a1, v11);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  std::vector<std::string>::pointer end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    unint64_t v14 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      uint64_t v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        uint64_t v6 = (long long *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      std::vector<std::string>::pointer begin = a1->__end_;
    }
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      uint64_t v6 = (long long *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    std::vector<std::string>::pointer end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(end[-1].__r_.__value_.__l.__data_);
    }
    --end;
  }
  a1->__end_ = begin;
}

void sub_20D2FE188(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::allocator<PhonemeRepresentation::Syllable>::construct[abi:ne180100]<PhonemeRepresentation::Syllable,PhonemeRepresentation::Syllable const&>(a4 + v7, (uint64_t *)(a2 + v7));
      v7 += 64;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

uint64_t *std::vector<PhonemeRepresentation::Word>::push_back[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result + 2;
  unint64_t v5 = result[2];
  uint64_t v6 = (void *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *result) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *result) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    v14[4] = v4;
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (void *)(v11 + 24 * v8);
    v14[0] = v11;
    v14[1] = v13;
    v14[3] = v11 + 24 * v12;
    *uint64_t v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
    v13[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v14[2] = v13 + 3;
    std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(v3, v14);
    uint64_t v7 = (void *)v3[1];
    double result = (uint64_t *)std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)v14);
  }
  else
  {
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
    v6[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v7 = v6 + 3;
  }
  v3[1] = (uint64_t)v7;
  return result;
}

void PhonemeRepresentation::Syllable::~Syllable(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  uint64_t v2 = this + 2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::allocator<PhonemeRepresentation::Syllable>::construct[abi:ne180100]<PhonemeRepresentation::Syllable,PhonemeRepresentation::Syllable const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  std::vector<PhonemeRepresentation::Phoneme>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>((std::string *)(a1 + 16), (long long *)a2[2], (long long *)a2[3], 0xAAAAAAAAAAAAAAABLL * ((a2[3] - a2[2]) >> 3));
  unint64_t v5 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)a2[5], a2[6]);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 5);
    *(void *)(a1 + 56) = a2[7];
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_20D2FE448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Pronounce_FSTImpl::~Pronounce_FSTImpl(Pronounce_FSTImpl *this)
{
  *(void *)this = off_26C201FD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C201FD0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  FrontendModule::~FrontendModule((void **)this);
}

void std::shared_ptr<FSTGrammar>::reset[abi:ne180100]<FSTGrammar,void>()
{
}

void sub_20D2FE5B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<FSTGrammar *,std::shared_ptr<FSTGrammar>::__shared_ptr_default_delete<FSTGrammar,FSTGrammar>,std::allocator<FSTGrammar>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<FSTGrammar *,std::shared_ptr<FSTGrammar>::__shared_ptr_default_delete<FSTGrammar,FSTGrammar>,std::allocator<FSTGrammar>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void std::__shared_ptr_pointer<FSTGrammar *,std::shared_ptr<FSTGrammar>::__shared_ptr_default_delete<FSTGrammar,FSTGrammar>,std::allocator<FSTGrammar>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<Pronounce_FSTImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Pronounce_FSTImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2168A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Pronounce_FSTImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2168A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void JoinPronunciationsImpl::generate_tokens(JoinPronunciationsImpl *this)
{
  uint64_t v1 = this;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  char v2 = 0;
  uint64_t v113 = *MEMORY[0x263EF8340];
  unint64_t v92 = (void *)((char *)this + 32);
  memset(&v108, 0, sizeof(v108));
  while (!*((unsigned char *)v1 + 8))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)v1 + 2) + 16))(&v107);
    if ((void)v107)
    {
      if ((v2 & (v3 != 0)) != 1) {
        goto LABEL_8;
      }
      std::string::size_type size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v108.__r_.__value_.__l.__size_;
      }
      if (size)
      {
LABEL_8:
        (*(void (**)(void))(**((void **)v1 + 2) + 32))(*((void *)v1 + 2));
        uint64_t v5 = v107;
        if ((void *)(v5 + 8) == v6 || (int v7 = *(_DWORD *)(v6[5] + 8), v7 == 1853189228))
        {
          int v94 = 0;
        }
        else if (v7 == 1952807028)
        {
          std::string::size_type v8 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
          if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v8 = v108.__r_.__value_.__l.__size_;
          }
          if (v8)
          {
            if ((void *)(v5 + 8) != v9)
            {
              uint64_t v10 = v9[5];
              if ((void *)(v90 + 8) == v11) {
                uint64_t v12 = 0;
              }
              else {
                uint64_t v12 = (std::string *)(v11[5] + 8);
              }
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v108.__r_.__value_.__l.__data_, (const void **)(v10 + 32), (uint64_t)&buf);
              if (v110 >= 0) {
                p_long long buf = (const std::string::value_type *)&buf;
              }
              else {
                p_long long buf = (const std::string::value_type *)buf;
              }
              if (v110 >= 0) {
                std::string::size_type v16 = HIBYTE(v110);
              }
              else {
                std::string::size_type v16 = *((void *)&buf + 1);
              }
              std::string::append(v12 + 1, p_buf, v16);
              if (SHIBYTE(v110) < 0) {
                operator delete((void *)buf);
              }
              std::string::pointer data = v12[2].__r_.__value_.__l.__data_;
              unint64_t v18 = &data[v12[2].__r_.__value_.__l.__size_];
              if ((unint64_t)v18 <= *(void *)(v10 + 64) + *(void *)(v10 + 56)) {
                unint64_t v18 = (char *)(*(void *)(v10 + 64) + *(void *)(v10 + 56));
              }
              v12[2].__r_.__value_.__l.__size_ = v18 - data;
              unint64_t v19 = (uint64_t *)v12->__r_.__value_.__r.__words[0];
              v20 = (uint64_t *)v12->__r_.__value_.__l.__size_;
              if ((uint64_t *)v12->__r_.__value_.__l.__data_ == v20)
              {
                std::string v104 = 0;
                uint64_t v105 = 0;
                uint64_t v106 = 0;
                std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(&v104, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3));
              }
              else
              {
                uint64_t v21 = *(void *)(v10 + 8);
                uint64_t v22 = *(void *)(v10 + 16);
                uint64_t v105 = 0;
                uint64_t v106 = 0;
                std::string v104 = 0;
                std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(&v104, v19, v20, 0xAAAAAAAAAAAAAAABLL * (v20 - v19));
                if (v21 != v22)
                {
                  unint64_t v95 = v12;
                  uint64_t v89 = v10;
                  uint64_t v23 = *(void *)(v10 + 8);
                  int v25 = *(uint64_t **)v23;
                  uint64_t v24 = *(void *)(v23 + 8);
                  uint64_t v26 = v24 - *(void *)v23;
                  if (v26 < 1) {
                    goto LABEL_76;
                  }
                  long long v27 = v105;
                  uint64_t v28 = v26 >> 6;
                  uint64_t v29 = *(v105 - 3);
                  unint64_t v30 = *(v105 - 2);
                  uint64_t v31 = (uint64_t)(v30 - v29) >> 6;
                  uint64_t v32 = v29 + ((v30 - v29) & 0xFFFFFFFFFFFFFFC0);
                  uint64_t v33 = *(v105 - 1);
                  std::string v101 = v105 - 1;
                  if (v28 <= (uint64_t)(v33 - v30) >> 6)
                  {
                    uint64_t v87 = *(v105 - 3);
                    uint64_t v88 = (uint64_t)(v30 - v29) >> 6;
                    uint64_t v38 = (uint64_t)(v30 - v32) >> 6;
                    if (v38 >= v28)
                    {
                      uint64_t v102 = (uint64_t)&v25[8 * v28];
                      uint64_t v39 = *(v105 - 2);
                    }
                    else
                    {
                      uint64_t v102 = (uint64_t)&v25[8 * v38];
                      uint64_t v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable const*,PhonemeRepresentation::Syllable*>((uint64_t)(v105 - 1), v102, v24, v30);
                      *(v27 - 2) = v39;
                      if ((uint64_t)(v30 - v32) < 1) {
                        goto LABEL_76;
                      }
                    }
                    unint64_t v40 = v39 - (v28 << 6);
                    uint64_t v41 = v39;
                    while (v40 < v30)
                    {
                      uint64_t v42 = *(void *)v40;
                      *(_DWORD *)(v41 + 8) = *(_DWORD *)(v40 + 8);
                      *(void *)uint64_t v41 = v42;
                      *(void *)(v41 + 24) = 0;
                      *(void *)(v41 + 32) = 0;
                      *(void *)(v41 + 16) = 0;
                      *(_OWORD *)(v41 + 16) = *(_OWORD *)(v40 + 16);
                      *(void *)(v41 + 32) = *(void *)(v40 + 32);
                      *(void *)(v40 + 16) = 0;
                      *(void *)(v40 + 24) = 0;
                      *(void *)(v40 + 32) = 0;
                      long long v43 = *(_OWORD *)(v40 + 40);
                      *(void *)(v41 + 56) = *(void *)(v40 + 56);
                      *(_OWORD *)(v41 + 40) = v43;
                      *(void *)(v40 + 48) = 0;
                      *(void *)(v40 + 56) = 0;
                      *(void *)(v40 + 40) = 0;
                      v41 += 64;
                      v40 += 64;
                    }
                    uint64_t v44 = v32 + (v28 << 6);
                    *(v27 - 2) = v41;
                    if (v39 != v44)
                    {
                      uint64_t v45 = 0;
                      uint64_t v46 = (v39 - v44) >> 6;
                      uint64_t v96 = v87 + (v88 << 6) + (v46 << 6);
                      uint64_t v99 = -64 * v46;
                      do
                      {
                        uint64_t v47 = v96 + v45;
                        uint64_t v48 = v39;
                        uint64_t v49 = v39 + v45;
                        uint64_t v50 = *(void *)(v96 + v45 - 64);
                        *(_DWORD *)(v49 - 56) = *(_DWORD *)(v96 + v45 - 56);
                        *(void *)(v49 - 64) = v50;
                        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v39 + v45 - 48));
                        *(_OWORD *)(v49 - 48) = *(_OWORD *)(v96 + v45 - 48);
                        *(void *)(v49 - 32) = *(void *)(v96 + v45 - 32);
                        *(void *)(v47 - 48) = 0;
                        *(void *)(v47 - 40) = 0;
                        *(void *)(v47 - 32) = 0;
                        long long v51 = (void **)(v49 - 24);
                        if (*(char *)(v49 - 1) < 0) {
                          operator delete(*v51);
                        }
                        v45 -= 64;
                        long long v52 = *(_OWORD *)(v47 - 24);
                        *(void *)(v49 - 8) = *(void *)(v47 - 8);
                        *(_OWORD *)long long v51 = v52;
                        *(unsigned char *)(v47 - 1) = 0;
                        *(unsigned char *)(v47 - 24) = 0;
                        uint64_t v39 = v48;
                      }
                      while (v99 != v45);
                    }
                    if (v25 != (uint64_t *)v102)
                    {
                      uint64_t v53 = v87 + (v88 << 6) + 16;
                      long long v54 = v25 + 3;
                      do
                      {
                        int v55 = *((_DWORD *)v54 - 4);
                        *(void *)(v53 - 16) = *(v54 - 3);
                        *(_DWORD *)(v53 - 8) = v55;
                        if ((uint64_t *)(v53 - 16) != v54 - 3) {
                          std::vector<PhonemeRepresentation::Phoneme>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Phoneme*,PhonemeRepresentation::Phoneme*>((std::vector<std::string> *)v53, (std::string *)*(v54 - 1), (long long *)*v54, 0xAAAAAAAAAAAAAAABLL * ((*v54 - *(v54 - 1)) >> 3));
                        }
                        v56 = v54 + 2;
                        std::string::operator=((std::string *)(v53 + 24), (const std::string *)(v54 + 2));
                        v53 += 64;
                        v54 += 8;
                      }
                      while (v56 + 3 != (uint64_t *)v102);
                    }
                  }
                  else
                  {
                    unint64_t v34 = v31 + v28;
                    if ((unint64_t)(v31 + v28) >> 58) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v35 = v33 - v29;
                    if (v35 >> 5 > v34) {
                      unint64_t v34 = v35 >> 5;
                    }
                    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFC0) {
                      unint64_t v36 = 0x3FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v36 = v34;
                    }
                    v112 = v105 - 1;
                    long long v98 = v105;
                    if (v36) {
                      unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>(v36);
                    }
                    else {
                      uint64_t v37 = 0;
                    }
                    uint64_t v57 = v36 + (v31 << 6);
                    *(void *)&long long buf = v36;
                    *((void *)&buf + 1) = v57;
                    uint64_t v110 = v57;
                    unint64_t v111 = v36 + (v37 << 6);
                    uint64_t v58 = v28 << 6;
                    uint64_t v59 = v57 + (v28 << 6);
                    do
                    {
                      std::allocator<PhonemeRepresentation::Syllable>::construct[abi:ne180100]<PhonemeRepresentation::Syllable,PhonemeRepresentation::Syllable const&>(v57, v25);
                      v57 += 64;
                      v25 += 8;
                      v58 -= 64;
                    }
                    while (v58);
                    uint64_t v110 = v59;
                    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>,std::reverse_iterator<PhonemeRepresentation::Syllable*>>((uint64_t)v101, v32, v32, *(v98 - 3), *(v98 - 3), *((uint64_t *)&buf + 1), *((uint64_t *)&buf + 1));
                    *((void *)&buf + 1) = v60;
                    uint64_t v61 = *(v98 - 2);
                    uint64_t v62 = v110;
                    if (v32 != v61)
                    {
                      do
                      {
                        uint64_t v63 = *(void *)v32;
                        *(_DWORD *)(v62 + 8) = *(_DWORD *)(v32 + 8);
                        *(void *)uint64_t v62 = v63;
                        *(void *)(v62 + 24) = 0;
                        *(void *)(v62 + 32) = 0;
                        *(void *)(v62 + 16) = 0;
                        *(_OWORD *)(v62 + 16) = *(_OWORD *)(v32 + 16);
                        *(void *)(v62 + 32) = *(void *)(v32 + 32);
                        *(void *)(v32 + 16) = 0;
                        *(void *)(v32 + 24) = 0;
                        *(void *)(v32 + 32) = 0;
                        long long v64 = *(_OWORD *)(v32 + 40);
                        *(void *)(v62 + 56) = *(void *)(v32 + 56);
                        *(_OWORD *)(v62 + 40) = v64;
                        *(void *)(v32 + 48) = 0;
                        *(void *)(v32 + 56) = 0;
                        *(void *)(v32 + 40) = 0;
                        v62 += 64;
                        v32 += 64;
                      }
                      while (v32 != v61);
                      uint64_t v60 = *((void *)&buf + 1);
                    }
                    uint64_t v110 = v62;
                    uint64_t v65 = *(v98 - 3);
                    *(v98 - 3) = v60;
                    *((void *)&buf + 1) = v65;
                    uint64_t v66 = *(v98 - 2);
                    *(v98 - 2) = v110;
                    uint64_t v110 = v66;
                    unint64_t v67 = *(v98 - 1);
                    *(v98 - 1) = v111;
                    unint64_t v111 = v67;
                    *(void *)&long long buf = *((void *)&buf + 1);
                    std::__split_buffer<PhonemeRepresentation::Syllable>::~__split_buffer((uint64_t)&buf);
                  }
LABEL_76:
                  std::vector<PhonemeRepresentation::Word>::__insert_with_size[abi:ne180100]<std::__wrap_iter<PhonemeRepresentation::Word const*>,std::__wrap_iter<PhonemeRepresentation::Word const*>>((uint64_t *)&v104, (uint64_t)v105, (uint64_t *)(*(void *)(v89 + 8) + 24), *(uint64_t **)(v89 + 16), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v89 + 16) - (*(void *)(v89 + 8) + 24)) >> 3));
                  uint64_t v12 = v95;
                }
              }
              if (v12 != (std::string *)&v104) {
                std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)v12, v104, v105, 0xAAAAAAAAAAAAAAABLL * (v105 - v104));
              }
              *(void *)&long long buf = &v104;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            }
LABEL_80:
            unint64_t v14 = v91;
          }
          else
          {
            if (!v3) {
              goto LABEL_80;
            }
            unint64_t v14 = (std::__shared_weak_count *)*((void *)&v107 + 1);
            if (*((void *)&v107 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v107 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            if (v91) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v91);
            }
            uint64_t v90 = v5;
          }
          uint64_t v68 = v107;
          if ((void *)(v68 + 8) == v69) {
            std::string::size_type v70 = 0;
          }
          else {
            std::string::size_type v70 = (const std::string *)(v69[5] + 8);
          }
          std::string::operator=(&v108, v70 + 1);
          int v94 = 0;
          uint64_t v5 = v107;
          uint64_t v91 = v14;
        }
        else
        {
          int v94 = 1;
        }
        if ((void *)(v5 + 8) != v71)
        {
          uint64_t v72 = v71[5];
          char v73 = *(void **)(v72 + 8);
          std::string::size_type v97 = *(void **)(v72 + 16);
          if (v73 != v97)
          {
            uint64_t v74 = **((void **)this + 13) + 192;
            do
            {
              uint64_t v76 = *v73;
              uint64_t v75 = v73[1];
              char v100 = v73;
              uint64_t v103 = v75;
              while (v76 != v75)
              {
                uint64_t v77 = *(void *)(v76 + 16);
                if (*(void *)(v76 + 24) != v77)
                {
                  unint64_t v78 = 0;
                  do
                  {
                    if (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v74, (const void **)(v77 + 24 * v78)))
                    {
                      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                      }
                      uint64_t v79 = Diagnostics_GetLogObject(void)::__profile_log_default;
                      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                      {
                        uint64_t v81 = *(void *)(v76 + 16) + 24 * v78;
                        if (*(char *)(v81 + 23) < 0) {
                          uint64_t v81 = *(void *)v81;
                        }
                        LODWORD(buf) = 136315138;
                        *(void *)((char *)&buf + 4) = v81;
                      }
                      uint64_t v82 = *(void *)(v76 + 16) + 24 * v78;
                      if (*(char *)(v82 + 23) < 0) {
                        uint64_t v82 = *(void *)v82;
                      }
                      uint64_t v83 = *(void *)(v76 + 24);
                      uint64_t v84 = *(void *)(v76 + 16) + 24 * v78;
                      uint64_t v85 = v84 + 24;
                      if (v84 + 24 != v83)
                      {
                        do
                        {
                          if (*(char *)(v84 + 23) < 0) {
                            operator delete(*(void **)v84);
                          }
                          *(_OWORD *)uint64_t v84 = *(_OWORD *)(v84 + 24);
                          *(void *)(v84 + 16) = *(void *)(v84 + 40);
                          *(unsigned char *)(v84 + 47) = 0;
                          uint64_t v86 = v84 + 48;
                          *(unsigned char *)(v84 + 24) = 0;
                          v84 += 24;
                        }
                        while (v86 != v83);
                        uint64_t v85 = *(void *)(v76 + 24);
                      }
                      while (v85 != v84)
                      {
                        if (*(char *)(v85 - 1) < 0) {
                          operator delete(*(void **)(v85 - 24));
                        }
                        v85 -= 24;
                      }
                      *(void *)(v76 + 24) = v84;
                      --v78;
                    }
                    else
                    {
                      uint64_t v84 = *(void *)(v76 + 24);
                    }
                    ++v78;
                    uint64_t v77 = *(void *)(v76 + 16);
                  }
                  while (v78 < 0xAAAAAAAAAAAAAAABLL * ((v84 - v77) >> 3));
                }
                v76 += 64;
                uint64_t v75 = v103;
              }
              char v73 = v100 + 3;
            }
            while (v100 + 3 != v97);
          }
        }
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v92, &v107);
        uint64_t v1 = this;
        char v2 = 1;
        int v13 = v94;
        goto LABEL_116;
      }
      char v2 = 1;
      int v13 = 1;
    }
    else
    {
      int v13 = 1;
      *((unsigned char *)v1 + 8) = 1;
    }
LABEL_116:
    if (*((void *)&v107 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v107 + 1));
    }
    if (v13) {
      break;
    }
  }
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
}

void sub_20D2FF0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  *(void *)(v35 - 16) = v34;
  *(void *)(v36 - 152) = &a24;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 152));
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__erase_unique<std::type_index>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 1);
  char v2 = a1[1];
  if (v2)
  {
    unint64_t v5 = *(void *)(a2 + 8);
    long long v6 = (uint64_t *)(a1 + 1);
    int v7 = a1[1];
    do
    {
      BOOL v8 = std::type_info::before[abi:ne180100](*(void *)(v7[4] + 8), v5);
      unint64_t v9 = (uint64_t **)(v7 + 1);
      if (!v8)
      {
        unint64_t v9 = (uint64_t **)v7;
        long long v6 = v7;
      }
      int v7 = *v9;
    }
    while (*v9);
    if (v6 != v3 && !std::type_info::before[abi:ne180100](v5, *(void *)(v6[4] + 8)))
    {
      uint64_t v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v6;
        do
        {
          unint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v6) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
      uint64_t v14 = v6[5];
      v6[5] = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      operator delete(v6);
    }
  }
}

void JoinPronunciationsImpl::~JoinPronunciationsImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x2105595E0);
}

void MapPronunciationsImpl::generate_tokens(MapPronunciationsImpl *this)
{
  if (!*((unsigned char *)this + 8))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v10);
    uint64_t v2 = v10;
    if (!(void)v10)
    {
      *((unsigned char *)this + 8) = 1;
LABEL_13:
      if (*((void *)&v10 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      }
      return;
    }
    if ((void *)(v2 + 8) != v3)
    {
      uint64_t v4 = v3[5];
      int v7 = *(_DWORD *)(v4 + 8);
      long long v6 = (int *)(v4 + 8);
      int v5 = v7;
      if (v7 == 1718642798)
      {
        BOOL v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
        if (*((void *)&v10 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        MapPronunciationsImpl::translate_pronunciation((uint64_t)this, v2, (uint64_t)v6);
        int v9 = 1885892462;
        if (!v8) {
          goto LABEL_10;
        }
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_10:
        int *v6 = v9;
        goto LABEL_11;
      }
      if (v5 == 1718909044)
      {
        BOOL v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
        if (*((void *)&v10 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        MapPronunciationsImpl::translate_pronunciation((uint64_t)this, v2, (uint64_t)v6);
        int v9 = 1952807028;
        if (!v8) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
LABEL_11:
    std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v10);
    (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
    goto LABEL_13;
  }
}

void sub_20D2FF468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MapPronunciationsImpl::translate_pronunciation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((void *)(a2 + 8) == v6) {
    return;
  }
  uint64_t v7 = v6[5];
  environment = EnvironmentBroker::get_environment(*(uint64_t ***)(a1 + 144), (long long *)(*(void *)(a3 + 48) + 40));
  if (environment == **(long long ***)(*(void *)(a1 + 144) + 24)) {
    return;
  }
  int v9 = environment;
  long long v10 = (uint64_t *)(v7 + 8);
  uint64_t shared_component = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>((uint64_t)environment);
  (*(void (**)(void **__return_ptr))(**(void **)shared_component + 24))(v29);
  uint64_t v12 = (const std::string::value_type **)v9 + 3;
  if (*((char *)v9 + 47) < 0)
  {
    std::string::size_type v13 = *((void *)v9 + 4);
    if (v13)
    {
      std::string::__init_copy_ctor_external(&v28, *v12, v13);
      goto LABEL_9;
    }
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(&v28, "internal");
    goto LABEL_9;
  }
  if (!*((unsigned char *)v9 + 47)) {
    goto LABEL_8;
  }
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)v12;
  v28.__r_.__value_.__r.__words[2] = *((void *)v9 + 5);
LABEL_9:
  uint64_t v14 = *(void *)(a1 + 128);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v28.__r_.__value_.__l.__size_;
  }
  std::string::size_type v16 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, size + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v17 = &v28;
    }
    else {
      unint64_t v17 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    memmove(v16, v17, size);
  }
  *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + size) = 58;
  int v18 = *((char *)v9 + 23);
  if (v18 >= 0) {
    unint64_t v19 = (const std::string::value_type *)v9;
  }
  else {
    unint64_t v19 = *(const std::string::value_type **)v9;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *((unsigned __int8 *)v9 + 23);
  }
  else {
    std::string::size_type v20 = *((void *)v9 + 1);
  }
  uint64_t v21 = std::string::append(&v23, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, uint64_t, void **, void **))(*(void *)v14 + 24))(&v26, v14, v29, __p);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  (*(void (**)(void **__return_ptr))(***(void ***)(a1 + 136) + 16))(__p);
  if (v10 != (uint64_t *)__p) {
    std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v10, (uint64_t *)__p[0], (uint64_t *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
  }
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (v27 < 0) {
    operator delete(v26);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
}

void sub_20D2FF738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  a10 = &a16;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 168);
  {
    int v5 = &v4;
    operator new();
  }
  if (v1 == v2) {
    return 0;
  }
  else {
    return v2[5] + 8;
  }
}

void sub_20D2FFDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
  std::__tree<std::string>::destroy((uint64_t)&a14, a15);
  unint64_t v17 = *(std::__shared_weak_count **)(v15 + 16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  MEMORY[0x2105595E0](v15, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<PhonemeEncoding>::~ItemHolder(void *a1)
{
  *a1 = off_26C205FF8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<PhonemeEncoding>::~ItemHolder(void *a1)
{
  *a1 = off_26C205FF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void MapPronunciationsImpl::~MapPronunciationsImpl(void **this)
{
  *this = off_26C203078;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t vars8;

  *this = off_26C203078;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  FrontendModule::~FrontendModule(this);
}

uint64_t std::__shared_ptr_emplace<JoinPronunciationsImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<JoinPronunciationsImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2173C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<JoinPronunciationsImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2173C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void JoinPronunciationsPersistentModule::~JoinPronunciationsPersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<MapPronunciationsImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MapPronunciationsImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MapPronunciationsImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t FrontendEnvironment::get_shared_component_instance<TranslatePhonemes>(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 168);
  {
    int v5 = &v4;
    operator new();
  }
  if (v1 == v2) {
    return 0;
  }
  else {
    return v2[5] + 8;
  }
}

void sub_20D300338(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  UTFRegex::~UTFRegex(v2);
  MEMORY[0x2105595E0](v1, 0x10F3C4081FEF63BLL);
  _Unwind_Resume(a1);
}

uint64_t FrontendEnvironment::get_shared_component_instance<EnvironmentBroker>(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 168);
  {
    int v5 = &v4;
    operator new();
  }
  if (v1 == v2) {
    return 0;
  }
  else {
    return v2[5] + 8;
  }
}

void sub_20D30056C(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v1 + 16));
  MEMORY[0x2105595E0](v1, 0x10A1C4041524607);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<EnvironmentBroker>::~ItemHolder(void *a1)
{
  *a1 = off_26C2060F8;
  EnvironmentBroker::~EnvironmentBroker((EnvironmentBroker *)(a1 + 1));
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<EnvironmentBroker>::~ItemHolder(void *a1)
{
  *a1 = off_26C2060F8;
  EnvironmentBroker::~EnvironmentBroker((EnvironmentBroker *)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<TranslatePhonemes>::~ItemHolder(void *a1)
{
  *a1 = off_26C2061F8;
  TranslatePhonemes::~TranslatePhonemes((TranslatePhonemes *)(a1 + 1));
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<TranslatePhonemes>::~ItemHolder(void *a1)
{
  *a1 = off_26C2061F8;
  TranslatePhonemes::~TranslatePhonemes((TranslatePhonemes *)(a1 + 1));
  return a1;
}

void MapPronunciationsPersistentModule::~MapPronunciationsPersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x2105595E0);
}

float ParseAttr::parse_timedesignation(const std::string *a1)
{
  char v2 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v2 >= 0) {
    int64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = a1->__r_.__value_.__l.__size_;
  }
  if (v2 >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  }
  int v5 = (char *)v4 + size;
  if (size > 1)
  {
    int64_t v6 = size;
    uint64_t v7 = (std::string *)v4;
    do
    {
      BOOL v8 = (char *)memchr(v7, 109, v6 - 1);
      if (!v8) {
        break;
      }
      if (*(_WORD *)v8 == 29549)
      {
        if (v8 == v5 || v8 - (char *)v4 == -1) {
          break;
        }
        std::string::basic_string(&v17, a1, 0, v8 - (char *)v4, (std::allocator<char> *)&v18);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v16 = (void *)v17.__r_.__value_.__r.__words[0];
          double v14 = atof(v17.__r_.__value_.__l.__data_);
          operator delete(v16);
        }
        else
        {
          double v14 = atof((const char *)&v17);
        }
        return v14 / 1000.0;
      }
      uint64_t v7 = (std::string *)(v8 + 1);
      int64_t v6 = v5 - (char *)v7;
    }
    while (v5 - (char *)v7 > 1);
  }
  if (size >= 1)
  {
    int v9 = (std::string *)v4;
    do
    {
      long long v10 = (char *)memchr(v9, 115, size);
      if (!v10) {
        break;
      }
      if (*v10 == 115)
      {
        if (v10 == v5 || v10 - (char *)v4 == -1) {
          return nan(&byte_20D5A22AE);
        }
        std::string::basic_string(&v17, a1, 0, v10 - (char *)v4, (std::allocator<char> *)&v18);
        if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return atof((const char *)&v17);
        }
        uint64_t v15 = (void *)v17.__r_.__value_.__r.__words[0];
        double v12 = atof(v17.__r_.__value_.__l.__data_);
        operator delete(v15);
        return v12;
      }
      int v9 = (std::string *)(v10 + 1);
      int64_t size = v5 - (char *)v9;
    }
    while (v5 - (char *)v9 >= 1);
  }
  return nan(&byte_20D5A22AE);
}

uint64_t ParseAttr::parse_prosodic_level(const void **a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = (const void *)*((unsigned __int8 *)a1 + 23);
  if ((char)v3 < 0) {
    uint64_t v3 = a1[1];
  }
  if (!v3) {
    return 0;
  }
  std::string v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  std::vector<char const*>::__init_with_size[abi:ne180100]<char const**,char const**>(&v17, a2, a3, (a3 - (uint64_t)a2) >> 3);
  uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  int64_t v6 = a1[1];
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (const void *)*((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v7 = a1[1];
  }
  BOOL v8 = v17;
  if (v7)
  {
    int v9 = v18;
    if (v17 != v18)
    {
      uint64_t v10 = 0;
      unint64_t v11 = (const void **)*a1;
      for (uint64_t i = v17; i != v9; ++i)
      {
        size_t v13 = strlen(*i);
        size_t v14 = v13;
        if ((v5 & 0x80) != 0)
        {
          if ((const void *)v13 == v6)
          {
            uint64_t v15 = v11;
            if (v6 == (const void *)-1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
LABEL_15:
            if (!memcmp(v15, *i, v14)) {
              goto LABEL_18;
            }
          }
        }
        else
        {
          uint64_t v15 = a1;
          if (v14 == v5) {
            goto LABEL_15;
          }
        }
        uint64_t v10 = (v10 + 1);
      }
    }
  }
  uint64_t v10 = 4;
LABEL_18:
  if (v8)
  {
    char v18 = v8;
    operator delete(v8);
  }
  return v10;
}

void *std::vector<char const*>::__init_with_size[abi:ne180100]<char const**,char const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int64_t v6 = result;
    uint64_t result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20D300A70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ParseAttr::parse_prosodic_spec(std::string *a1, const void *a2, uint64_t a3, char *a4, int a5)
{
  __p = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  std::vector<char const*>::__init_with_size[abi:ne180100]<char const**,char const**>(&__p, a2, a3, (a3 - (uint64_t)a2) >> 3);
  unsigned int v8 = ParseAttr::parse_prosodic_level((const void **)&a1->__r_.__value_.__l.__data_, __p, (uint64_t)v57);
  if (__p)
  {
    uint64_t v57 = __p;
    operator delete(__p);
  }
  float v9 = 0.0;
  if (v8 == 4)
  {
    uint64_t v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    {
      double v12 = (std::string *)a1->__r_.__value_.__r.__words[0];
      int v14 = *(unsigned __int8 *)a1->__r_.__value_.__l.__data_;
      if (v14 == 43 || v14 == 45)
      {
        int64_t size = a1->__r_.__value_.__l.__size_;
        goto LABEL_11;
      }
    }
    else
    {
      int v11 = a1->__r_.__value_.__s.__data_[0];
      if (v11 == 43 || v11 == 45)
      {
        double v12 = a1;
        int64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
LABEL_11:
        if (size >= 1)
        {
          uint64_t v15 = (char *)v12 + size;
          std::string::size_type v16 = v12;
          do
          {
            std::string v17 = (char *)memchr(v16, 37, size);
            if (!v17) {
              break;
            }
            if (*v17 == 37)
            {
              if (v17 == v15 || v17 - (char *)v12 == -1) {
                break;
              }
              std::string::basic_string(&v55, a1, 0, v17 - (char *)v12, (std::allocator<char> *)&v59);
              int v28 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
              uint64_t v29 = (void *)v55.__r_.__value_.__r.__words[0];
              if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                char v30 = &v55;
              }
              else {
                char v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
              }
              double v31 = atof((const char *)v30) / 100.0 + 1.0;
              if (v28 < 0) {
                operator delete(v29);
              }
              float v9 = v31;
LABEL_89:
              unsigned int v8 = 2;
              return v8 | ((unint64_t)LODWORD(v9) << 32);
            }
            std::string::size_type v16 = (std::string *)(v17 + 1);
            int64_t size = v15 - (char *)v16;
          }
          while (v15 - (char *)v16 >= 1);
        }
        if (a5)
        {
          uint64_t v32 = a1->__r_.__value_.__l.__size_;
          if ((v10 & 0x80u) != 0)
          {
            uint64_t v33 = (std::string *)a1->__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v32 = v10;
            uint64_t v33 = a1;
          }
          if (v32 >= 2)
          {
            uint64_t v34 = (char *)v33 + v32;
            uint64_t v35 = v33;
            do
            {
              uint64_t v36 = (char *)memchr(v35, 115, v32 - 1);
              if (!v36) {
                break;
              }
              if (*(_WORD *)v36 == 29811)
              {
                if (v36 == v34 || v36 - (char *)v33 == -1) {
                  break;
                }
                std::string::basic_string(&v55, a1, 0, v36 - (char *)v33, (std::allocator<char> *)&v59);
                if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                {
                  long long v51 = (void *)v55.__r_.__value_.__r.__words[0];
                  double v37 = atof(v55.__r_.__value_.__l.__data_);
                  operator delete(v51);
                }
                else
                {
                  double v37 = atof((const char *)&v55);
                }
                float v52 = v37 / 12.0;
                float v9 = exp2f(v52);
                goto LABEL_89;
              }
              uint64_t v35 = (std::string *)(v36 + 1);
              uint64_t v32 = v34 - (char *)v35;
            }
            while (v34 - (char *)v35 >= 2);
          }
        }
        int v38 = a4[23];
        if (v38 >= 0) {
          int64_t v39 = a4[23];
        }
        else {
          int64_t v39 = *((void *)a4 + 1);
        }
        if (v39)
        {
          if (v38 < 0) {
            a4 = *(char **)a4;
          }
          unint64_t v40 = (v10 & 0x80u) == 0 ? (unsigned __int8 **)a1 : (unsigned __int8 **)a1->__r_.__value_.__r.__words[0];
          uint64_t v41 = (unsigned __int8 *)((v10 & 0x80u) == 0 ? v10 : a1->__r_.__value_.__l.__size_);
          if ((uint64_t)v41 >= v39)
          {
            long long v43 = &v41[(void)v40];
            int v44 = *a4;
            uint64_t v45 = v40;
            do
            {
              uint64_t v46 = &v41[-v39];
              if (v46 == (unsigned __int8 *)-1) {
                break;
              }
              uint64_t v47 = (unsigned __int8 *)memchr(v45, v44, (size_t)(v46 + 1));
              if (!v47) {
                break;
              }
              uint64_t v48 = v47;
              if (!memcmp(v47, a4, v39))
              {
                unsigned int v8 = 0;
                if (v48 != v43 && v48 - (unsigned __int8 *)v40 != -1)
                {
                  std::string::basic_string(&v55, a1, 0, v48 - (unsigned __int8 *)v40, (std::allocator<char> *)&v59);
                  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                  {
                    uint64_t v53 = (void *)v55.__r_.__value_.__r.__words[0];
                    double v49 = atof(v55.__r_.__value_.__l.__data_);
                    operator delete(v53);
                  }
                  else
                  {
                    double v49 = atof((const char *)&v55);
                  }
                  float v9 = v49;
                  unsigned int v8 = 3;
                }
                return v8 | ((unint64_t)LODWORD(v9) << 32);
              }
              uint64_t v45 = (unsigned __int8 **)(v48 + 1);
              uint64_t v41 = (unsigned __int8 *)(v43 - (v48 + 1));
            }
            while ((uint64_t)v41 >= v39);
          }
        }
LABEL_71:
        unsigned int v8 = 0;
        return v8 | ((unint64_t)LODWORD(v9) << 32);
      }
    }
    int v18 = a4[23];
    if (v18 >= 0) {
      int64_t v19 = a4[23];
    }
    else {
      int64_t v19 = *((void *)a4 + 1);
    }
    if (v19)
    {
      if (v18 < 0) {
        a4 = *(char **)a4;
      }
      std::string::size_type v20 = (v10 & 0x80u) == 0 ? (unsigned __int8 **)a1 : (unsigned __int8 **)a1->__r_.__value_.__r.__words[0];
      uint64_t v21 = (v10 & 0x80u) == 0
          ? (unsigned __int8 *)HIBYTE(a1->__r_.__value_.__r.__words[2])
          : (unsigned __int8 *)a1->__r_.__value_.__l.__size_;
      if ((uint64_t)v21 >= v19)
      {
        long long v22 = &v21[(void)v20];
        int v23 = *a4;
        uint64_t v24 = v20;
        while (1)
        {
          std::string::size_type v25 = &v21[-v19];
          if (v25 == (unsigned __int8 *)-1) {
            break;
          }
          uint64_t v26 = (unsigned __int8 *)memchr(v24, v23, (size_t)(v25 + 1));
          if (!v26) {
            break;
          }
          char v27 = v26;
          if (!memcmp(v26, a4, v19))
          {
            unsigned int v8 = 0;
            if (v27 != v22 && v27 - (unsigned __int8 *)v20 != -1)
            {
              std::string::basic_string(&v55, a1, 0, v27 - (unsigned __int8 *)v20, (std::allocator<char> *)&v59);
              if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
              {
                long long v54 = (void *)v55.__r_.__value_.__r.__words[0];
                double v50 = atof(v55.__r_.__value_.__l.__data_);
                operator delete(v54);
              }
              else
              {
                double v50 = atof((const char *)&v55);
              }
              float v9 = v50;
              unsigned int v8 = 4;
            }
            return v8 | ((unint64_t)LODWORD(v9) << 32);
          }
          uint64_t v24 = (unsigned __int8 **)(v27 + 1);
          uint64_t v21 = (unsigned __int8 *)(v22 - (v27 + 1));
          if ((uint64_t)v21 < v19) {
            goto LABEL_71;
          }
        }
      }
    }
    goto LABEL_71;
  }
  return v8 | ((unint64_t)LODWORD(v9) << 32);
}

void sub_20D300ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ParseAttr::parse_emphasis(const void **a1)
{
  char v2 = operator new(0x58uLL);
  v2[2] = xmmword_264113C10;
  v2[3] = off_264113C20;
  v2[4] = xmmword_264113C30;
  *((void *)v2 + 10) = &byte_20D5A22AE;
  _OWORD *v2 = xmmword_264113BF0;
  v2[1] = *(_OWORD *)&off_264113C00;
  unsigned int v3 = ParseAttr::parse_prosodic_level(a1, v2, (uint64_t)v2 + 88);
  operator delete(v2);
  if ((v3 | 4) == 4) {
    return 0;
  }
  else {
    return v3;
  }
}

void sub_20D300F6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t ParseAttr::parse_pitch(std::string *a1)
{
  char v2 = operator new(0x58uLL);
  v2[2] = xmmword_264113DC8;
  v2[3] = *(_OWORD *)&off_264113DD8;
  v2[4] = xmmword_264113DE8;
  *((void *)v2 + 10) = "x-high";
  _OWORD *v2 = xmmword_264113DA8;
  v2[1] = *(_OWORD *)&off_264113DB8;
  std::string::basic_string[abi:ne180100]<0>(__p, "Hz");
  unint64_t v3 = ParseAttr::parse_prosodic_spec(a1, v2, (uint64_t)v2 + 88, (char *)__p, 1);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  operator delete(v2);
  return v3;
}

void sub_20D301024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

unint64_t ParseAttr::parse_rate(std::string *a1)
{
  char v2 = operator new(0x58uLL);
  v2[2] = xmmword_264113D18;
  v2[3] = *(_OWORD *)&off_264113D28;
  v2[4] = xmmword_264113D38;
  *((void *)v2 + 10) = "x-fast";
  _OWORD *v2 = xmmword_264113CF8;
  v2[1] = *(_OWORD *)&off_264113D08;
  std::string::basic_string[abi:ne180100]<0>(__p, "%");
  unint64_t v3 = ParseAttr::parse_prosodic_spec(a1, v2, (uint64_t)v2 + 88, (char *)__p, 0);
  unsigned int v4 = v3;
  unint64_t v5 = HIDWORD(v3);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  operator delete(v2);
  if (v4 - 2 >= 2 && v4)
  {
    if (v4 == 4)
    {
      *(float *)&unint64_t v5 = *(float *)&v5 / 100.0;
      unsigned int v4 = 2;
    }
  }
  else
  {
    unsigned int v4 = 0;
  }
  return v4 | ((unint64_t)v5 << 32);
}

void sub_20D30113C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

unint64_t ParseAttr::parse_volume(std::string *a1)
{
  char v2 = operator new(0x58uLL);
  v2[2] = xmmword_264113D70;
  v2[3] = *(_OWORD *)&off_264113D80;
  v2[4] = xmmword_264113D90;
  *((void *)v2 + 10) = "x-loud";
  _OWORD *v2 = xmmword_264113D50;
  v2[1] = *(_OWORD *)&off_264113D60;
  std::string::basic_string[abi:ne180100]<0>(__p, "dB");
  unint64_t v3 = ParseAttr::parse_prosodic_spec(a1, v2, (uint64_t)v2 + 88, (char *)__p, 0);
  unsigned int v4 = v3;
  unint64_t v5 = HIDWORD(v3);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  operator delete(v2);
  if (v4 == 4) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = v4;
  }
  switch(v6)
  {
    case 0u:
    case 2u:
    case 4u:
      unsigned int v6 = 0;
      break;
    case 3u:
      unint64_t v5 = COERCE_UNSIGNED_INT(__exp10f(*(float *)&v5 / 10.0));
      unsigned int v6 = 2;
      break;
    default:
      return v6 | (v5 << 32);
  }
  return v6 | (v5 << 32);
}

void sub_20D301274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

double ParseAttr::label_duration(ParseAttr *this, float a2)
{
  if (fabsf(a2) == INFINITY)
  {
    std::string::basic_string[abi:ne180100]<0>(this, &byte_20D5A22AE);
  }
  else
  {
    if (a2 > 0.0 && a2 < 1.0) {
      StringFormatter::StringFormatter((StringFormatter *)&v5, "%.0fms");
    }
    else {
      StringFormatter::StringFormatter((StringFormatter *)&v5, "%.3gs");
    }
    double result = *(double *)&v5;
    *(_OWORD *)this = v5;
    *((void *)this + 2) = v6;
  }
  return result;
}

double ParseAttr::label_pitch(void *a1, uint64_t a2)
{
  float v4 = *((float *)&a2 + 1);
  switch(a2)
  {
    case 4:
      StringFormatter::StringFormatter((StringFormatter *)&v9, "%.1fHz");
      goto LABEL_22;
    case 3:
      if (fabsf(*((float *)&a2 + 1)) < 0.001)
      {
LABEL_9:
        std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
        return result;
      }
      StringFormatter::StringFormatter((StringFormatter *)&v9, "%+.1fHz");
LABEL_22:
      double result = *(double *)&v9;
      *(_OWORD *)a1 = v9;
      a1[2] = v10;
      return result;
    case 2:
      if (fabsf(*((float *)&a2 + 1) + -1.0) >= 0.001)
      {
        if (fmodf(*((float *)&a2 + 1), 0.01) >= 0.001)
        {
          float v8 = logf(v4) / 0.057762;
          if (fmodf(v8, 0.5) >= 0.01) {
            StringFormatter::StringFormatter((StringFormatter *)&v9, "%+.1f%%");
          }
          else {
            StringFormatter::StringFormatter((StringFormatter *)&v9, "%+.0fst");
          }
        }
        else
        {
          StringFormatter::StringFormatter((StringFormatter *)&v9, "%+.0f%%");
        }
        goto LABEL_22;
      }
      goto LABEL_9;
  }
  uint64_t v6 = (char *)operator new(0x58uLL);
  uint64_t v7 = v6;
  *((_OWORD *)v6 + 2) = xmmword_264113DC8;
  *((_OWORD *)v6 + 3) = *(_OWORD *)&off_264113DD8;
  *((_OWORD *)v6 + 4) = xmmword_264113DE8;
  *((void *)v6 + 10) = "x-high";
  *(_OWORD *)uint64_t v6 = xmmword_264113DA8;
  *((_OWORD *)v6 + 1) = *(_OWORD *)&off_264113DB8;
  if (a2 > 0xAuLL) {
    std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(a1, *(char **)&v6[(8 * a2) & 0x7FFFFFFFFLL]);
  }
  operator delete(v7);
  return result;
}

void sub_20D3015C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ParseAttr::label_rate(void *a1, uint64_t a2)
{
  if (a2 == 2)
  {
    if (fabsf(*((float *)&a2 + 1) + -1.0) >= 0.001)
    {
      StringFormatter::StringFormatter((StringFormatter *)&v6, "%.1f%%", (float)(*((float *)&a2 + 1) * 100.0));
      *(_OWORD *)a1 = v6;
      a1[2] = v7;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
    }
  }
  else
  {
    float v4 = (char *)operator new(0x58uLL);
    long long v5 = v4;
    *((_OWORD *)v4 + 2) = xmmword_264113D18;
    *((_OWORD *)v4 + 3) = *(_OWORD *)&off_264113D28;
    *((_OWORD *)v4 + 4) = xmmword_264113D38;
    *((void *)v4 + 10) = "x-fast";
    *(_OWORD *)float v4 = xmmword_264113CF8;
    *((_OWORD *)v4 + 1) = *(_OWORD *)&off_264113D08;
    if (a2 > 0xAuLL) {
      std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a1, *(char **)&v4[(8 * a2) & 0x7FFFFFFFFLL]);
    }
    operator delete(v5);
  }
}

void sub_20D30172C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ParseAttr::label_volume(void *a1, uint64_t a2)
{
  if (a2 == 2)
  {
    if (fabsf(*((float *)&a2 + 1) + -1.0) >= 0.001)
    {
      float v6 = log10f(*((float *)&a2 + 1));
      StringFormatter::StringFormatter((StringFormatter *)&v7, "%+.1fdB", v6 * 10.0);
      *(_OWORD *)a1 = v7;
      a1[2] = v8;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
    }
  }
  else
  {
    float v4 = (char *)operator new(0x58uLL);
    long long v5 = v4;
    *((_OWORD *)v4 + 2) = xmmword_264113D70;
    *((_OWORD *)v4 + 3) = *(_OWORD *)&off_264113D80;
    *((_OWORD *)v4 + 4) = xmmword_264113D90;
    *((void *)v4 + 10) = "x-loud";
    *(_OWORD *)float v4 = xmmword_264113D50;
    *((_OWORD *)v4 + 1) = *(_OWORD *)&off_264113D60;
    if (a2 > 0xAuLL) {
      std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a1, *(char **)&v4[(8 * a2) & 0x7FFFFFFFFLL]);
    }
    operator delete(v5);
  }
}

void sub_20D301894(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t NormAction_fr::set_context(NormAction_fr *this, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 22) = a2;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    if (*((_DWORD *)this + 22) == 1178946889) {
      long long v5 = "FEMI";
    }
    else {
      long long v5 = "MASC";
    }
    *(_DWORD *)long long buf = 136315138;
    long long v9 = v5;
    _os_log_impl(&dword_20CD80000, v3, OS_LOG_TYPE_DEBUG, "Gender _ -> %s", buf, 0xCu);
  }
  if (*((_DWORD *)this + 22) == 1178946889) {
    float v6 = "FEMI";
  }
  else {
    float v6 = "MASC";
  }
  return Diagnostics::log(7, "Gender _ -> %s", v4, v6);
}

void NormAction_fr::set_context(uint64_t a1, unsigned __int16 **a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v5 = a1;
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v8 = a2[1];
    if (v8 != (unsigned __int16 *)2)
    {
      if (v8 != (unsigned __int16 *)7) {
        goto LABEL_22;
      }
      if (*(_DWORD *)*a2 != -1016236690 || *(_DWORD *)((char *)*a2 + 3) != 1869785539) {
        goto LABEL_22;
      }
      goto LABEL_72;
    }
    int v11 = *a2;
    int v10 = **a2;
  }
  else
  {
    int v6 = *((unsigned __int8 *)a2 + 23);
    if (v6 != 2)
    {
      if (v6 != 7) {
        goto LABEL_22;
      }
      if (*(_DWORD *)a2 != -1016236690 || *(_DWORD *)((char *)a2 + 3) != 1869785539) {
        goto LABEL_22;
      }
LABEL_72:
      int v37 = 1296126787;
      goto LABEL_76;
    }
    int v10 = *(unsigned __int16 *)a2;
    int v11 = a2;
  }
  if (v10 == 25964) {
    goto LABEL_72;
  }
  if (*v11 == 24940)
  {
    int v37 = 1178946889;
    goto LABEL_76;
  }
LABEL_22:
  double v12 = *(void **)(a1 + 80);
  uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  if (v13)
  {
    uint64_t v14 = v12[4];
    if (!v14) {
      goto LABEL_32;
    }
    uint64_t v15 = v12 + 4;
    do
    {
      BOOL v16 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v12 + 5), (const void **)(v14 + 32), (const void **)a3);
      std::string v17 = (uint64_t *)(v14 + 8);
      if (!v16)
      {
        std::string v17 = (uint64_t *)v14;
        uint64_t v15 = (void *)v14;
      }
      uint64_t v14 = *v17;
    }
    while (*v17);
    if (v15 == v12 + 4
      || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v12 + 5), (const void **)a3, (const void **)v15 + 4))
    {
LABEL_32:
      unint64_t v18 = *(unsigned __int8 *)(a3 + 23);
      unint64_t v19 = *(void *)(a3 + 8);
      if ((v18 & 0x80u) == 0) {
        uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v20 = *(void *)(a3 + 8);
      }
      uint64_t v51 = v5;
      uint64_t v52 = v20;
      unint64_t v21 = v20 - 1;
      double v50 = v12;
      uint64_t v54 = *v12;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[1] - *v12) >> 3) < v21) {
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[1] - *v12) >> 3);
      }
      if (v21)
      {
        v56 = *(char **)a3;
        uint64_t v53 = v4;
        while (1)
        {
          unint64_t v55 = v21 - 1;
          long long v22 = (uint64_t *)(v54 + 24 * (v21 - 1));
          uint64_t v24 = *v22;
          uint64_t v23 = v22[1];
          if (*v22 != v23) {
            break;
          }
LABEL_69:
          unint64_t v21 = v55;
          uint64_t v4 = v53;
          if (!v55) {
            goto LABEL_70;
          }
        }
        unint64_t v25 = v52 - v21;
        if (v18 - (v52 - v21) >= v21) {
          unint64_t v26 = v21;
        }
        else {
          unint64_t v26 = v18 - (v52 - v21);
        }
        if (v19 - v25 >= v21) {
          unint64_t v27 = v21;
        }
        else {
          unint64_t v27 = v19 - v25;
        }
        while (1)
        {
          int v28 = *(char *)(v24 + 23);
          unint64_t v29 = v28 >= 0 ? *(unsigned __int8 *)(v24 + 23) : *(void *)(v24 + 8);
          if ((v18 & 0x80) != 0)
          {
            BOOL v32 = v29 != -1 && v19 >= v25;
            unint64_t v30 = v27;
            double v31 = v56;
            if (!v32) {
LABEL_105:
            }
              std::string::__throw_out_of_range[abi:ne180100]();
          }
          else
          {
            if (v18 < v25) {
              goto LABEL_105;
            }
            unint64_t v30 = v26;
            double v31 = (char *)a3;
            if (v29 == -1) {
              goto LABEL_105;
            }
          }
          uint64_t v33 = v28 >= 0 ? (const void *)v24 : *(const void **)v24;
          size_t v34 = v30 >= v29 ? v29 : v30;
          if (!memcmp(&v31[v25], v33, v34) && v30 == v29) {
            break;
          }
          v24 += 32;
          if (v24 == v23) {
            goto LABEL_69;
          }
        }
        uint64_t v36 = (int *)(v24 + 24);
        uint64_t v5 = v51;
        uint64_t v4 = v53;
      }
      else
      {
LABEL_70:
        uint64_t v5 = v51;
        uint64_t v36 = (int *)(v50 + 6);
      }
    }
    else
    {
      uint64_t v36 = (int *)(v15 + 7);
    }
  }
  else
  {
    uint64_t v36 = (int *)(v12 + 6);
  }
  int v37 = *v36;
LABEL_76:
  *(_DWORD *)(v5 + 88) = v37;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext(&v58, v4);
    int v39 = SHIBYTE(v58.__r_.__value_.__r.__words[2]);
    std::string::size_type v40 = v58.__r_.__value_.__r.__words[0];
    Censor::global_plaintext(&__p, a3);
    uint64_t v41 = &v58;
    if (v39 < 0) {
      uint64_t v41 = (std::string *)v40;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (*(_DWORD *)(v5 + 88) == 1178946889) {
      long long v43 = "FEMI";
    }
    else {
      long long v43 = "MASC";
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v60 = v43;
    _os_log_impl(&dword_20CD80000, v38, OS_LOG_TYPE_DEBUG, "Gender %s _ %s -> %s", (uint8_t *)&buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&buf, v4);
  int v44 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  std::string::size_type v45 = buf.__r_.__value_.__r.__words[0];
  Censor::global_plaintext(&v58, a3);
  p_std::string buf = &buf;
  if (v44 < 0) {
    p_std::string buf = (std::string *)v45;
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v48 = &v58;
  }
  else {
    uint64_t v48 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if (*(_DWORD *)(v5 + 88) == 1178946889) {
    double v49 = "FEMI";
  }
  else {
    double v49 = "MASC";
  }
  Diagnostics::log(7, "Gender %s _ %s -> %s", v46, p_buf, v48, v49);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_20D301E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL NormAction_fr::consume_next_token(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v3 = (const char *)a2;
  }
  else {
    unint64_t v3 = *(const char **)a2;
  }
  while (strcmp(NormAction_fr::consume_next_token(std::string const&)::multipliers[v2], v3))
  {
    if (++v2 == 3)
    {
      uint64_t v4 = NormAction_es::consume_next_token(std::string const&)::multipliers;
      return v4 != NormAction_es::consume_next_token(std::string const&)::multipliers;
    }
  }
  uint64_t v4 = &NormAction_fr::consume_next_token(std::string const&)::multipliers[v2];
  return v4 != NormAction_es::consume_next_token(std::string const&)::multipliers;
}

void NormAction_fr::normalize(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string::size_type a3@<X2>, std::string *a4@<X8>)
{
  int v7 = *(char *)(a3 + 23);
  if (v7 < 0)
  {
    if (*(void *)(a3 + 8) != 7)
    {
LABEL_10:
      NormAction::normalize(a1, a2, a3, a4);
      return;
    }
    uint64_t v8 = *(int **)a3;
  }
  else
  {
    uint64_t v8 = (int *)a3;
    if (v7 != 7) {
      goto LABEL_10;
    }
  }
  int v9 = *v8;
  int v10 = *(int *)((char *)v8 + 3);
  if (v9 != 1229145412 || v10 != 1279348041) {
    goto LABEL_10;
  }
  uint64_t v12 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v21, "CARDINAL");
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void **))(*(void *)a1 + 80))(&v23, a1, v12, v21);
  uint64_t v13 = std::string::append(&v23, " virgule ");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  NormAction_fr::decimal((uint64_t)__p, a1, (std::string *)(*a2 + 24));
  if ((v20 & 0x80u) == 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v16 = v20;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)__p[1];
  }
  std::string v17 = std::string::append(&v24, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  a4->__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
}

void sub_20D3020E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void NormAction_fr::decimal(uint64_t a1, uint64_t a2, std::string *__str)
{
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  int v7 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_13;
  }
  std::string::size_type v8 = 0;
  int v9 = v7 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
  while (v9->__r_.__value_.__s.__data_[v8] == 48)
  {
    if (size == ++v8)
    {
      std::string::size_type v8 = size;
      break;
    }
  }
  if (!v8)
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(&v26, "CARDINAL");
    (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)a2 + 80))(a2, __str, &v26);
LABEL_14:
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      int v10 = (void *)v26.__r_.__value_.__r.__words[0];
LABEL_16:
      operator delete(v10);
      return;
    }
    return;
  }
  if (v8 == size)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "DIGITS");
    (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)a2 + 80))(a2, __str, &v26);
    goto LABEL_14;
  }
  std::string::basic_string(&v24, __str, 0, v8, (std::allocator<char> *)v22);
  std::string::basic_string[abi:ne180100]<0>(v22, "DIGITS");
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void **))(*(void *)a2 + 80))(&v25, a2, &v24, v22);
  int v11 = std::string::append(&v25, " ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string(&v19, __str, v8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v17);
  std::string::basic_string[abi:ne180100]<0>(v17, "CARDINAL");
  (*(void (**)(void **__return_ptr, uint64_t, std::string *, void **))(*(void *)a2 + 80))(__p, a2, &v19, v17);
  if ((v21 & 0x80u) == 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v14 = v21;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  uint64_t v15 = std::string::append(&v26, (const std::string::value_type *)v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(void *)(a1 + 16) = *((void *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)a1 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    int v10 = (void *)v24.__r_.__value_.__r.__words[0];
    goto LABEL_16;
  }
}

void sub_20D3023F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v38 - 41) < 0) {
    operator delete(*(void **)(v38 - 64));
  }
  if (*(char *)(v38 - 65) < 0) {
    operator delete(*(void **)(v38 - 88));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(exception_object);
}

void NormAction_fr::normalize(void **a1@<X0>, std::string *a2@<X1>, uint64_t *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  NormAction::normalize(a1, a2, (char *)a3, &v24);
  int v8 = *((char *)a3 + 23);
  if ((v8 & 0x80000000) == 0)
  {
    if (v8 != 7) {
      goto LABEL_20;
    }
    BOOL v9 = *(_DWORD *)a3 == 1229145412 && *(_DWORD *)((char *)a3 + 3) == 1279348041;
    int v10 = (int *)a3;
    if (!v9) {
      goto LABEL_7;
    }
LABEL_19:
    NormAction_fr::decimal((uint64_t)a4, (uint64_t)a1, a2);
    goto LABEL_47;
  }
  if (a3[1] != 7) {
    goto LABEL_20;
  }
  int v10 = (int *)*a3;
  if (*(_DWORD *)*a3 == 1229145412 && *(_DWORD *)(*a3 + 3) == 1279348041) {
    goto LABEL_19;
  }
LABEL_7:
  int v11 = *v10;
  int v12 = *(int *)((char *)v10 + 3);
  if (v11 == 1163152969 && v12 == 1380271941)
  {
LABEL_46:
    *a4 = v24;
    memset(&v24, 0, sizeof(v24));
    goto LABEL_47;
  }
LABEL_20:
  std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v24.__r_.__value_.__l.__size_;
  }
  if (size) {
    long long v16 = &v24;
  }
  else {
    long long v16 = a2;
  }
  if (!UTFString::is_digits<std::string>((uint64_t)v16)) {
    goto LABEL_46;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    Censor::global_plaintext(&__p, (uint64_t)a2);
    char v18 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    uint64_t v19 = *((char *)a3 + 23) >= 0 ? (uint64_t)a3 : *a3;
    *(_DWORD *)std::string buf = 136315394;
    std::string v26 = v18;
    __int16 v27 = 2080;
    uint64_t v28 = v19;
    _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_ERROR, "NormAction_fr(%s, %s) normalized to digits.", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__p, (uint64_t)a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (*((char *)a3 + 23) >= 0) {
    char v22 = a3;
  }
  else {
    char v22 = (uint64_t *)*a3;
  }
  Diagnostics::log(3, "NormAction_fr(%s, %s) normalized to digits.", v20, p_p, v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ((void (*)(void **, std::string *))(*a1)[2])(a1, a2);
LABEL_47:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_20D302774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t UTFString::is_digits<std::string>(uint64_t a1)
{
  v17[4] = *MEMORY[0x263EF8340];
  v16[0] = &off_26C211470;
  v16[1] = MEMORY[0x263F8C468];
  v16[3] = v16;
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  std::__function::__value_func<BOOL ()(char32_t)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v16);
  BOOL v5 = (v2 & 0x80u) != 0;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = v4;
  }
  if (!v5) {
    uint64_t v3 = a1;
  }
  uint64_t v14 = v3;
  uint64_t v15 = v2 << 32;
  if (v2)
  {
    int v6 = 0;
    do
    {
      int v7 = UTFString::codepoint_iterator<std::string>::operator*(&v14);
      uint64_t v8 = std::function<BOOL ()(char32_t)>::operator()(v17[3], v7);
      if (!v8) {
        break;
      }
      unsigned int v9 = *(unsigned __int8 *)(v3 + v6);
      unsigned int v10 = (v9 + 62);
      int v11 = v9 <= 0xEF ? 2 : 3;
      int v12 = v9 <= 0xDF ? v11 : v11 + 1;
      if (v10 >= 0x33) {
        int v12 = 1;
      }
      v6 += v12;
      LODWORD(v15) = v6;
    }
    while (v6 != v2);
  }
  else
  {
    uint64_t v8 = 1;
  }
  std::__function::__value_func<BOOL ()(char32_t)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<BOOL ()(char32_t)>::~__value_func[abi:ne180100](v16);
  return v8;
}

void sub_20D3028DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(char32_t)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(char32_t)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::function<BOOL ()(char32_t)>::operator()(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

void *std::__function::__value_func<BOOL ()(char32_t)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

_UNKNOWN **std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::target_type()
{
}

uint64_t std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

BOOL std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(unsigned int (**)(void))(a1 + 8))(*a2) != 0;
}

uint64_t std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_26C211470;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_26C211470;
  result[1] = v3;
  return result;
}

void std::__function::__func<signed char (*)(int),std::allocator<signed char (*)(int)>,BOOL ()(char32_t)>::~__func()
{
}

void NormAction_fr::ordinal(uint64_t a1@<X0>, std::basic_string<char16_t>::size_type a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6
    && (v7 >= 0 ? (std::basic_string<char16_t>::size_type v8 = a2) : (std::basic_string<char16_t>::size_type v8 = *(void *)a2),
        __p.__r_.__value_.__r.__words[0] = v8,
        __p.__r_.__value_.__l.__size_ = v6 << 32,
        UChar32 v9 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&__p),
        !u_isdigit(v9)))
  {
    NormAction::roman(a3, a1, (char *)a2);
  }
  else
  {
    if (*(_DWORD *)(a1 + 88) == 1178946889)
    {
      int v10 = *(char *)(a2 + 23);
      if (v10 >= 0) {
        int v11 = (const char *)a2;
      }
      else {
        int v11 = *(const char **)a2;
      }
      if (v10 >= 0) {
        unint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        unint64_t v12 = *(void *)(a2 + 8);
      }
      UTFString::to_utf16(&__p, v11, v12);
      uint64_t v13 = unum_parseInt64();
      std::basic_string<char16_t>::size_type v14 = a1 + 64;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_26C214E30;
      __p.__r_.__value_.__l.__size_ = v14;
      std::basic_string<char16_t>::size_type v15 = v13;
    }
    else
    {
      int v16 = *(char *)(a2 + 23);
      if (v16 >= 0) {
        std::string v17 = (const char *)a2;
      }
      else {
        std::string v17 = *(const char **)a2;
      }
      if (v16 >= 0) {
        unint64_t v18 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        unint64_t v18 = *(void *)(a2 + 8);
      }
      UTFString::to_utf16(&__p, v17, v18);
      uint64_t v19 = unum_parseInt64();
      std::basic_string<char16_t>::size_type v20 = a1 + 72;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_26C214E30;
      __p.__r_.__value_.__l.__size_ = v20;
      std::basic_string<char16_t>::size_type v15 = v19;
    }
    __p.__r_.__value_.__r.__words[2] = v15;
    p_p = &__p;
    UTFString_Impl::formatNumberAsUTF8(a3, &__p);
    std::__function::__value_func<int ()(char16_t *,unsigned long,UErrorCode *)>::~__value_func[abi:ne180100](&__p);
  }
}

void sub_20D302DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void *std::__function::__value_func<int ()(char16_t *,unsigned long,UErrorCode *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char **std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::target_type()
{
}

uint64_t std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::operator()(uint64_t a1, void *a2, unsigned int *a3, void *a4)
{
  return MEMORY[0x270F997C0](**(void **)(a1 + 8), *(void *)(a1 + 16), *a2, *a3, 0, *a4);
}

__n128 std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C214E30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_26C214E30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1},std::allocator<std::string UTFNumberFormatter::format<std::string>(long long)::{lambda(char16_t *,unsigned long,UErrorCode *)#1}>,int ()(char16_t *,unsigned long,UErrorCode *)>::~__func()
{
}

void NormAction_fr::cardinal(uint64_t a1@<X0>, std::basic_string<char16_t>::size_type a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6
    && (v7 >= 0 ? (std::basic_string<char16_t>::size_type v8 = a2) : (std::basic_string<char16_t>::size_type v8 = *(void *)a2),
        __p.__r_.__value_.__r.__words[0] = v8,
        __p.__r_.__value_.__l.__size_ = v6 << 32,
        UChar32 v9 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&__p),
        !u_isdigit(v9)))
  {
    NormAction::roman(a3, a1, (char *)a2);
  }
  else
  {
    if (*(_DWORD *)(a1 + 88) == 1178946889)
    {
      int v10 = *(char *)(a2 + 23);
      if (v10 >= 0) {
        int v11 = (const char *)a2;
      }
      else {
        int v11 = *(const char **)a2;
      }
      if (v10 >= 0) {
        unint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        unint64_t v12 = *(void *)(a2 + 8);
      }
      UTFString::to_utf16(&__p, v11, v12);
      uint64_t v13 = unum_parseInt64();
      std::basic_string<char16_t>::size_type v14 = a1 + 48;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_26C214E30;
      __p.__r_.__value_.__l.__size_ = v14;
      std::basic_string<char16_t>::size_type v15 = v13;
    }
    else
    {
      int v16 = *(char *)(a2 + 23);
      if (v16 >= 0) {
        std::string v17 = (const char *)a2;
      }
      else {
        std::string v17 = *(const char **)a2;
      }
      if (v16 >= 0) {
        unint64_t v18 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        unint64_t v18 = *(void *)(a2 + 8);
      }
      UTFString::to_utf16(&__p, v17, v18);
      uint64_t v19 = unum_parseInt64();
      std::basic_string<char16_t>::size_type v20 = a1 + 56;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_26C214E30;
      __p.__r_.__value_.__l.__size_ = v20;
      std::basic_string<char16_t>::size_type v15 = v19;
    }
    __p.__r_.__value_.__r.__words[2] = v15;
    p_p = &__p;
    UTFString_Impl::formatNumberAsUTF8(a3, &__p);
    std::__function::__value_func<int ()(char16_t *,unsigned long,UErrorCode *)>::~__value_func[abi:ne180100](&__p);
  }
}

void sub_20D3031E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void NormAction_fr::~NormAction_fr(NormAction_fr *this)
{
  *(void *)this = off_26C2003E0;
  uint64_t v2 = (NormAction_fr *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 72));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 64));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
  JUMPOUT(0x2105595E0);
}

{
  UTFNumberFormatter *v2;
  uint64_t vars8;

  *(void *)this = off_26C2003E0;
  uint64_t v2 = (NormAction_fr *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 72));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 64));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_fr *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
}

void Agglomerate::ItemHolder<GenderRules>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C205EB8;
  uint64_t v1 = (void **)(a1 + 8);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 40));
  uint64_t v2 = v1;
  std::vector<std::vector<std::pair<std::string,unsigned int>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<GenderRules>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C205EB8;
  uint64_t v2 = (void **)(a1 + 8);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 40));
  uint64_t v4 = v2;
  std::vector<std::vector<std::pair<std::string,unsigned int>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t FrontendModuleBroker::standard_frontend_pipeline(std::string *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "pipeline");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)(a2 + 144), (const void **)__p, a1);
  if (v15 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    BOOL v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v7 = a1;
      }
      else {
        int v7 = (std::string *)a1->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::basic_string<char16_t> __p = 136315138;
      *(void *)&__p[4] = v7;
      _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEBUG, "Using standard processing pipeline: %s", __p, 0xCu);
    }
    std::basic_string<char16_t>::size_type v8 = "Using standard processing pipeline: %s";
    uint64_t v9 = 7;
  }
  else
  {
    MEMORY[0x210558E70](a1, "audio,tokenize,override,match_prompt,normalize,punctuate,part_of_speech,phrasing,sentence,pronounce,count");
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v11 = a1;
      }
      else {
        int v11 = (std::string *)a1->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::basic_string<char16_t> __p = 136315138;
      *(void *)&__p[4] = v11;
      _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_INFO, "No front end pipeline found in configuration file, using (obsolete) system default: %s", __p, 0xCu);
    }
    std::basic_string<char16_t>::size_type v8 = "No front end pipeline found in configuration file, using (obsolete) system default: %s";
    uint64_t v9 = 6;
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v12 = (uint64_t *)a1;
  }
  else {
    unint64_t v12 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  }
  return Diagnostics::log(v9, v8, v6, v12);
}

void sub_20D3035EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FrontendModuleBroker::instance(FrontendModuleBroker *this)
{
  {
    NeverDestructed<FrontendModuleBroker>::NeverDestructed<>();
  }
  return FrontendModuleBroker::instance(void)::broker_instance;
}

void sub_20D30367C(_Unwind_Exception *a1)
{
}

void NeverDestructed<FrontendModuleBroker>::NeverDestructed<>()
{
}

void sub_20D3036D8(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1032C4085FAB6A4);
  _Unwind_Resume(a1);
}

void FrontendModuleBroker::FrontendModuleBroker(FrontendModuleBroker *this)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v96, "source");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text source module");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212BD0;
  uint64_t v3 = (std::string *)(v2 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v2[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v2;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 1, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "parse");
  std::string::basic_string[abi:ne180100]<0>(__p, "Parse legacy or SSML text");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = off_26C213780;
  BOOL v5 = (std::string *)(v4 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v4[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v4;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "parse_ssml");
  std::string::basic_string[abi:ne180100]<0>(__p, "Parse SSML 1.1 compliant text");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_26C2139E8;
  int v7 = (std::string *)(v6 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v6[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v6;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "parse_legacy");
  std::string::basic_string[abi:ne180100]<0>(__p, "Parse Vocalizer Expressive compliant text");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  std::basic_string<char16_t>::size_type v8 = operator new(0x20uLL);
  *std::basic_string<char16_t>::size_type v8 = off_26C212D30;
  uint64_t v9 = (std::string *)(v8 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    void v8[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v8;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "transliterate");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transliterate text, like full/half-width conversion");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  int v10 = operator new(0x20uLL);
  *int v10 = off_26C2130A0;
  int v11 = (std::string *)(v10 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v10[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v10;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "filter_text");
  std::string::basic_string[abi:ne180100]<0>(__p, "Filter text to get valid characters only");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  unint64_t v12 = operator new(0x20uLL);
  *unint64_t v12 = off_26C212B20;
  uint64_t v13 = (std::string *)(v12 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v12[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v12;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "replace_text_fst");
  std::string::basic_string[abi:ne180100]<0>(__p, "Replace regex matched text with FST evaluation");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  std::basic_string<char16_t>::size_type v14 = operator new(0x20uLL);
  *std::basic_string<char16_t>::size_type v14 = off_26C2133B8;
  char v15 = (std::string *)(v14 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v15, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v14[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v14;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "audio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decide between audio and alternative context");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v16 = operator new(0x20uLL);
  *uint64_t v16 = off_26C212C28;
  std::string v17 = (std::string *)(v16 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v17, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v16[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v16;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "switch_language");
  std::string::basic_string[abi:ne180100]<0>(__p, "Handle material in secondary languages");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  unint64_t v18 = operator new(0x20uLL);
  void *v18 = off_26C213258;
  uint64_t v19 = (std::string *)(v18 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v19, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v18[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v18;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "switch_language_mecab");
  std::string::basic_string[abi:ne180100]<0>(__p, "Handle English text embedded in Chinese");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  std::basic_string<char16_t>::size_type v20 = operator new(0x20uLL);
  void *v20 = off_26C2136D0;
  unsigned __int8 v21 = (std::string *)(v20 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v21, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v20[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v20;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "tokenize");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break up text into tokens");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  char v22 = operator new(0x20uLL);
  *char v22 = off_26C213938;
  uint64_t v23 = (std::string *)(v22 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v23, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v22[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v22;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "tokenize_mecab");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break up text into words based on MeCab, suitable for Asian languages like Chinese, Korean, etc.");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  std::string v24 = operator new(0x20uLL);
  void *v24 = off_26C213308;
  std::string v25 = (std::string *)(v24 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v25, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v24[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v24;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "tokenize_hanzi");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break up hanzi characters into space characters");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  std::string v26 = operator new(0x20uLL);
  *std::string v26 = off_26C2132B0;
  __int16 v27 = (std::string *)(v26 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v27, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v26[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v26;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "tokenize_fallback");
  std::string::basic_string[abi:ne180100]<0>(__p, "Provide extra fallback functionalities like transliteration and filtering");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v28 = operator new(0x20uLL);
  void *v28 = off_26C213570;
  uint64_t v29 = (std::string *)(v28 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v29, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v28[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v28;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "break_sentence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Find sentence breaks");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  unint64_t v30 = operator new(0x20uLL);
  void *v30 = off_26C212F98;
  double v31 = (std::string *)(v30 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v31, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v30[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v30;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "breaks_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break sentence");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  BOOL v32 = operator new(0x20uLL);
  *BOOL v32 = off_26C213888;
  uint64_t v33 = (std::string *)(v32 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v33, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v32[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v32;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "override");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply override rules");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  size_t v34 = operator new(0x20uLL);
  *size_t v34 = off_26C212FF0;
  uint64_t v35 = (std::string *)(v34 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v35, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v34[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v34;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "override_log");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply override rules, with logging");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v36 = operator new(0x20uLL);
  *uint64_t v36 = off_26C213468;
  int v37 = (std::string *)(v36 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v37, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v36[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v36;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "override_debug");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply override rules, with interactive debugging");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v38 = operator new(0x20uLL);
  *uint64_t v38 = off_26C213620;
  int v39 = (std::string *)(v38 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v39, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v39->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v38[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v38;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "match_prompt");
  std::string::basic_string[abi:ne180100]<0>(__p, "Match text for prompts and provide units");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  std::string::size_type v40 = operator new(0x20uLL);
  *std::string::size_type v40 = off_26C212C80;
  uint64_t v41 = (std::string *)(v40 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v41, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v40[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v40;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "normalize");
  std::string::basic_string[abi:ne180100]<0>(__p, "Translate text into a sequence of regular words");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v42 = operator new(0x20uLL);
  void *v42 = off_26C213990;
  long long v43 = (std::string *)(v42 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v43, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v42[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v42;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "punctuate");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine whether punctuation is phrase ending or not");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  int v44 = operator new(0x20uLL);
  *int v44 = off_26C213A98;
  std::string::size_type v45 = (std::string *)(v44 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v45, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v45->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v44[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v44;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "part_of_speech");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine part of speech");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v46 = operator new(0x20uLL);
  *uint64_t v46 = off_26C212EE8;
  uint64_t v47 = (std::string *)(v46 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v47, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v46[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v46;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "phrasing");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine phrase boundaries");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v48 = operator new(0x20uLL);
  void *v48 = off_26C2138E0;
  double v49 = (std::string *)(v48 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v49, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v49->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v48[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v48;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "phrasing_token");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine phrase boundaries based on token");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  double v50 = operator new(0x20uLL);
  void *v50 = off_26C2131A8;
  uint64_t v51 = (std::string *)(v50 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v51, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v51->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v50[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v50;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "sentence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine sentence type");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v52 = operator new(0x20uLL);
  *uint64_t v52 = off_26C213410;
  uint64_t v53 = (std::string *)(v52 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v53, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v53->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v52[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v52;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "pronounce");
  std::string::basic_string[abi:ne180100]<0>(__p, "Generate language-appropriate phonemes");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v54 = operator new(0x20uLL);
  *uint64_t v54 = off_26C213A40;
  unint64_t v55 = (std::string *)(v54 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v55, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v54[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v54;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "pronounce_fst");
  std::string::basic_string[abi:ne180100]<0>(__p, "Generate token phonemes using FST");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  v56 = operator new(0x20uLL);
  void *v56 = off_26C213048;
  uint64_t v57 = (std::string *)(v56 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v57, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v56[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v56;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "pronounce_rule");
  std::string::basic_string[abi:ne180100]<0>(__p, "Generate phonemes using fast rewriter");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  std::string v58 = operator new(0x20uLL);
  *std::string v58 = off_26C213200;
  char v59 = (std::string *)(v58 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v59, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v59->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v58[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v58;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "trim_utterance");
  std::string::basic_string[abi:ne180100]<0>(__p, "Implement trimming attributes");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v60 = operator new(0x20uLL);
  *uint64_t v60 = off_26C2130F8;
  uint64_t v61 = (std::string *)(v60 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v61, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v61->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v60[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v60;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "amend_phonemes");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply rule-based fix-ups to pronunciations, using multiple-word context");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v62 = operator new(0x20uLL);
  *uint64_t v62 = off_26C212F40;
  uint64_t v63 = (std::string *)(v62 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v63, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v63->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v62[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v62;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "map_pronunciations");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map pronunciations between languages");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  long long v64 = operator new(0x20uLL);
  *long long v64 = off_26C213518;
  uint64_t v65 = (std::string *)(v64 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v65, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v65->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v64[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v64;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "join_pronunciations");
  std::string::basic_string[abi:ne180100]<0>(__p, "Join pronunciations of connected words");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v66 = operator new(0x20uLL);
  *uint64_t v66 = off_26C2135C8;
  unint64_t v67 = (std::string *)(v66 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v67, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v67->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v66[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v66;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "rewrite");
  std::string::basic_string[abi:ne180100]<0>(__p, "rewrite input using fast rewriter");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v68 = operator new(0x20uLL);
  *uint64_t v68 = off_26C213830;
  uint64_t v69 = (std::string *)(v68 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v69, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v69->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v68[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v68;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "normalize_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "seq2seq based text normalization");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  std::string::size_type v70 = operator new(0x20uLL);
  *std::string::size_type v70 = off_26C212CD8;
  std::string::size_type v71 = (std::string *)(v70 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v71, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v71->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v70[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v70;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "pronounce_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "seq2seq based pronunciation");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v72 = operator new(0x20uLL);
  *uint64_t v72 = off_26C212D88;
  char v73 = (std::string *)(v72 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v73, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v73->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v72[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v72;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "markup");
  std::string::basic_string[abi:ne180100]<0>(__p, "handle markup");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v74 = operator new(0x20uLL);
  void *v74 = off_26C2137D8;
  uint64_t v75 = (std::string *)(v74 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v75, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v75->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v74[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v74;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "hydra_udct");
  std::string::basic_string[abi:ne180100]<0>(__p, "handle hydra user dictionary");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v76 = operator new(0x20uLL);
  void *v76 = off_26C212E90;
  uint64_t v77 = (std::string *)(v76 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v77, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v77->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v76[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v76;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "count");
  std::string::basic_string[abi:ne180100]<0>(__p, "Count phonemes, syllables, words, and phrases");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  unint64_t v78 = operator new(0x20uLL);
  *unint64_t v78 = off_26C2134C0;
  uint64_t v79 = (std::string *)(v78 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v79, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v79->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v78[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v78;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "extract");
  std::string::basic_string[abi:ne180100]<0>(__p, "Extract features");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  unint64_t v80 = operator new(0x20uLL);
  *unint64_t v80 = off_26C213360;
  uint64_t v81 = (std::string *)(v80 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v81, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v81->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v80[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v80;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "extract_table");
  std::string::basic_string[abi:ne180100]<0>(__p, "Extract features to text table");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v82 = operator new(0x20uLL);
  *uint64_t v82 = off_26C213678;
  uint64_t v83 = (std::string *)(v82 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v83, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v83->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v82[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v82;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "extract_gryphront");
  std::string::basic_string[abi:ne180100]<0>(__p, "Extract gryphront-style features");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v84 = operator new(0x20uLL);
  void *v84 = off_26C213728;
  uint64_t v85 = (std::string *)(v84 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v85, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v85->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v84[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v84;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "inject_json");
  std::string::basic_string[abi:ne180100]<0>(__p, "Reconstruct data structures from JSON dump");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v86 = operator new(0x20uLL);
  *uint64_t v86 = off_26C212B78;
  uint64_t v87 = (std::string *)(v86 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v87, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v87->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v86[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v86;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "dump_json");
  std::string::basic_string[abi:ne180100]<0>(__p, "Dump tokens and attributes as JSON");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v88 = operator new(0x20uLL);
  *uint64_t v88 = off_26C212DE0;
  uint64_t v89 = (std::string *)(v88 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v89, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v89->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v88[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v88;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "dump_ssml");
  std::string::basic_string[abi:ne180100]<0>(__p, "Dump input as SSML");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  uint64_t v90 = operator new(0x20uLL);
  *uint64_t v90 = off_26C212E38;
  uint64_t v91 = (std::string *)(v90 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v91, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v91->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v90[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v90;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v96, "dump_legacy");
  std::string::basic_string[abi:ne180100]<0>(__p, "Dump input in Vocalizer Expressive compliant format");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v96;
  }
  std::string v101 = 0;
  unint64_t v92 = operator new(0x20uLL);
  *unint64_t v92 = off_26C213150;
  unint64_t v93 = (std::string *)(v92 + 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v93, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v93->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    v92[3] = *((void *)&v97.__r_.__value_.__l + 2);
  }
  std::string v101 = v92;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)&v96, (uint64_t)__p, 0, v99);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v99);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v99, "process");
  std::string::basic_string[abi:ne180100]<0>(&v97, "Standard processing pipeline");
  v98[0] = &off_26C213AF0;
  v98[1] = this;
  v98[3] = v98;
  FrontendModuleBroker::register_module((uint64_t **)this, (uint64_t)v99, (uint64_t)&v97, 1, v98);
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v98);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v100 < 0) {
    operator delete(v99[0]);
  }
}

void sub_20D306264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  double v31 = v28;
  operator delete(v31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v27 + 47) < 0) {
    operator delete(*v30);
  }
  std::__tree<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,FrontendModuleBroker::ModuleData>>>::destroy(*v29);
  _Unwind_Resume(a1);
}

void FrontendModuleBroker::register_module(uint64_t **a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  v28[2] = *MEMORY[0x263EF8340];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v25 = *(std::string *)a3;
  }
  char v26 = a4;
  uint64_t v9 = a5[3];
  if (v9)
  {
    if ((void *)v9 == a5)
    {
      v28[0] = v27;
      (*(void (**)(void *, void *))(*a5 + 24))(a5, v27);
      goto LABEL_9;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  v28[0] = v9;
LABEL_9:
  int v10 = (char *)a1[1];
  int v11 = (void **)(a1 + 1);
  unint64_t v12 = (void **)(a1 + 1);
  if (!v10) {
    goto LABEL_18;
  }
  int v11 = (void **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      unint64_t v12 = (void **)v10;
      uint64_t v13 = (const void **)(v10 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2, (const void **)v10 + 4))break; {
      int v10 = (char *)*v12;
      }
      int v11 = v12;
      if (!*v12) {
        goto LABEL_18;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v13, (const void **)a2)) {
      break;
    }
    int v11 = v12 + 1;
    int v10 = (char *)v12[1];
    if (!v10) {
      goto LABEL_18;
    }
  }
  std::basic_string<char16_t>::size_type v14 = (char *)*v11;
  if (!*v11)
  {
LABEL_18:
    std::basic_string<char16_t>::size_type v14 = (char *)operator new(0x78uLL);
    v23[0] = v14;
    v23[1] = a1 + 1;
    char v24 = 0;
    char v15 = (std::string *)(v14 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v14 + 6) = *(void *)(a2 + 16);
    }
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    char v24 = 1;
    *(void *)std::basic_string<char16_t>::size_type v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = v12;
    *int v11 = v14;
    uint64_t v16 = (uint64_t *)**a1;
    std::string v17 = (uint64_t *)v14;
    if (v16)
    {
      *a1 = v16;
      std::string v17 = (uint64_t *)*v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v23[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
  }
  unint64_t v18 = (void **)(v14 + 56);
  if (v14[79] < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)unint64_t v18 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
  *((void *)v14 + 9) = *((void *)&v25.__r_.__value_.__l + 2);
  *((unsigned char *)&v25.__r_.__value_.__s + 23) = 0;
  v25.__r_.__value_.__s.__data_[0] = 0;
  unsigned __int8 v21 = (void *)*((void *)v14 + 14);
  std::basic_string<char16_t>::size_type v20 = v14 + 112;
  uint64_t v19 = v21;
  *((unsigned char *)v20 - 32) = v26;
  char v22 = v20 - 3;
  void *v20 = 0;
  if (v21 == v20 - 3)
  {
    (*(void (**)(void *))(*v22 + 32))(v20 - 3);
  }
  else if (v19)
  {
    (*(void (**)(void *))(*v19 + 40))(v19);
  }
  if (!v28[0]) {
    goto LABEL_33;
  }
  if ((void *)v28[0] != v27)
  {
    void *v20 = v28[0];
    std::basic_string<char16_t>::size_type v20 = v28;
LABEL_33:
    void *v20 = 0;
    goto LABEL_35;
  }
  void *v20 = v22;
  (*(void (**)(void *, void *))(v27[0] + 24))(v27, v20 - 3);
LABEL_35:
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](v27);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_20D306A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,FrontendModuleBroker::ModuleData>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,FrontendModuleBroker::ModuleData>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,FrontendModuleBroker::ModuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,FrontendModuleBroker::ModuleData>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,FrontendModuleBroker::ModuleData>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,FrontendModuleBroker::ModuleData>,0>(uint64_t a1)
{
  std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void FrontendModuleBroker::ModuleData::~ModuleData(FrontendModuleBroker::ModuleData *this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,FrontendModuleBroker::ModuleData>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,FrontendModuleBroker::ModuleData>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

char **std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v6 = *a2;
  BOOL v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  std::string::size_type v7 = *a3;
  uint64_t v8 = *(void *)(a1 + 8);
  FrontendModuleBroker::standard_frontend_pipeline(&__p, *a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v11 = __p;
  }
  uint64_t v9 = v6;
  int v10 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FrontendModuleBroker::create(a4, v8, (const char *)&v11, &v9, v7);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D306DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void FrontendModuleBroker::create(_OWORD *a1, uint64_t a2, const char *a3, uint64_t *a4, std::string::size_type a5)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (a3[23] < 0) {
    a3 = *(const char **)a3;
  }
  uint64_t v50 = 0;
  __stringp = strdup(a3);
  std::string __p = 0;
  size_t v49 = 0;
  uint64_t v41 = __stringp;
  if (!__stringp)
  {
    *a1 = *(_OWORD *)a4;
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  std::string::size_type v40 = a1;
  uint64_t v9 = a2 + 8;
  do
  {
    int v10 = strsep(&__stringp, ",");
    uint64_t v11 = MEMORY[0x210558E70](&__p, v10);
    uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(v11 + 8);
    }
    if (!v12) {
      break;
    }
    uint64_t v13 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a2, (const void **)&__p);
    if (*(char *)(a2 + 47) < 0)
    {
      if (*(void *)(a2 + 32))
      {
LABEL_12:
        if (v50 >= 0) {
          size_t v14 = HIBYTE(v50);
        }
        else {
          size_t v14 = v49;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v47, v14 + 1);
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v15 = &v47;
        }
        else {
          char v15 = (std::string *)v47.__r_.__value_.__r.__words[0];
        }
        if (v14)
        {
          if (v50 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          memmove(v15, p_p, v14);
        }
        *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v1std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 95;
        int v17 = *(char *)(a2 + 47);
        if (v17 >= 0) {
          unint64_t v18 = (const std::string::value_type *)(a2 + 24);
        }
        else {
          unint64_t v18 = *(const std::string::value_type **)(a2 + 24);
        }
        if (v17 >= 0) {
          std::string::size_type v19 = *(unsigned __int8 *)(a2 + 47);
        }
        else {
          std::string::size_type v19 = *(void *)(a2 + 32);
        }
        std::basic_string<char16_t>::size_type v20 = std::string::append(&v47, v18, v19);
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        *(void *)&buf[16] = *((void *)&v20->__r_.__value_.__l + 2);
        *(_OWORD *)std::string buf = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        uint64_t v22 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a2, (const void **)buf);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
        if (v9 != v22) {
          uint64_t v13 = v22;
        }
      }
    }
    else if (*(unsigned char *)(a2 + 47))
    {
      goto LABEL_12;
    }
    if (v13 == v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      uint64_t v38 = (const char *)&__p;
      if (v50 < 0) {
        uint64_t v38 = (const char *)__p;
      }
      MEMORY[0x210558D40](exception, buf);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (*a4)
    {
      if (*(unsigned char *)(v13 + 80))
      {
        int v39 = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)buf, "FrontendModuleBroker: Multiple text source in pipeline\n");
        MEMORY[0x210558D40](v39, buf);
        __cxa_throw(v39, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
    }
    else if (!*(unsigned char *)(v13 + 80))
    {
      std::string::basic_string[abi:ne180100]<0>(__s1, "source");
      uint64_t v23 = (std::__shared_weak_count *)a4[1];
      uint64_t v43 = *a4;
      int v44 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      FrontendModuleBroker::create(buf, a2, __s1, &v43, a5);
      char v24 = (std::__shared_weak_count *)a4[1];
      *(_OWORD *)a4 = *(_OWORD *)buf;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
      if (v46 < 0) {
        operator delete(*(void **)__s1);
      }
    }
    v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    char v26 = (std::__shared_weak_count *)a4[1];
    uint64_t v42 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v47.__r_.__value_.__r.__words[0] = a5;
    uint64_t v27 = *(void *)(v13 + 112);
    if (!v27) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v27 + 48))(buf);
    long long v28 = *(_OWORD *)buf;
    *(void *)std::string buf = 0;
    *(void *)&buf[8] = 0;
    uint64_t v29 = (std::__shared_weak_count *)a4[1];
    *(_OWORD *)a4 = v28;
    if (v29)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v30 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      if (v50 >= 0) {
        double v31 = &__p;
      }
      else {
        double v31 = __p;
      }
      v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = (double)((v32.__d_.__rep_ - v25.__d_.__rep_) / 1000000) / 1000.0;
      _os_log_impl(&dword_20CD80000, v30, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    }
    if (v50 >= 0) {
      uint64_t v33 = &__p;
    }
    else {
      uint64_t v33 = __p;
    }
    v34.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    Diagnostics::log(6, "Init latency (%s): %.3f s", v35, v33, (double)((v34.__d_.__rep_ - v25.__d_.__rep_) / 1000000) / 1000.0);
  }
  while (__stringp);
  int v36 = SHIBYTE(v50);
  free(v41);
  *std::string::size_type v40 = *(_OWORD *)a4;
  *a4 = 0;
  a4[1] = 0;
  if (v36 < 0) {
    operator delete(__p);
  }
}

void sub_20D307340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_26C213AF0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_26C213AF0;
  result[1] = v3;
  return result;
}

void std::__function::__func<FrontendModuleBroker::FrontendModuleBroker(void)::$_0,std::allocator<FrontendModuleBroker::FrontendModuleBroker(void)::$_0>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func()
{
}

char **std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = *a2;
  std::string::size_type v7 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  UnparseLegacy::create(&v11, v6, v7);
  uint64_t v8 = (const std::string *)(a1 + 8);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::string::operator=((std::string *)(v11.n128_u64[0] + 80), v8);
  __n128 v9 = v11;
  if (v7)
  {
    __n128 v10 = v11;
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    __n128 v9 = v10;
  }
  *a3 = v9;
}

void sub_20D307564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213150;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213150;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3076B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213150;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213150;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = *a2;
  BOOL v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v13, "UnparseSSML::create() needs non-NULL upstream argument");
    MEMORY[0x210558D40](exception, v13);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  std::string::size_type v7 = operator new(0xB8uLL);
  unint64_t v8 = (unint64_t)v7;
  __n128 v9 = (const std::string *)(a1 + 8);
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C216398;
  unint64_t v10 = (unint64_t)(v7 + 3);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    UnparserModule::UnparserModule((uint64_t)(v7 + 3), v6, v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    UnparserModule::UnparserModule((uint64_t)(v7 + 3), v6, 0);
  }
  *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C1FFC50;
  *(void *)(v8 + 128) = &off_26C1FFCB8;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C201680;
    *(void *)(v8 + 128) = &off_26C2016E8;
    *(void *)(v8 + 152) = 0;
    *(void *)(v8 + 160) = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C201680;
    *(void *)(v8 + 128) = &off_26C2016E8;
    *(void *)(v8 + 152) = 0;
    *(void *)(v8 + 160) = 0;
  }
  std::string::operator=((std::string *)(v8 + 104), v9);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v8;
  *a3 = result;
  return result;
}

void sub_20D3079EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212E38;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212E38;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D307B6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212E38;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212E38;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v15, "UnparseJSON::create() needs non-NULL upstream argument");
    MEMORY[0x210558D40](exception, v15);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  __n128 v9 = operator new(0x110uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *__n128 v9 = off_26C216360;
  unint64_t v11 = (unint64_t)(v9 + 3);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    UnparserModule::UnparserModule((uint64_t)(v9 + 3), v7, v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    UnparserModule::UnparserModule((uint64_t)(v9 + 3), v7, 0);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C1FFBD0;
  *(void *)(v10 + 128) = &off_26C1FFC38;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 216) = 0;
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C201600;
  *(void *)(v10 + 128) = &off_26C201668;
  *(void *)(v10 + 192) = 0;
  *(void *)(v10 + 176) = 0;
  *(void *)(v10 + 18std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v10 + 192;
  *(void *)(v10 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(v10 + 200) = 0;
  *(void *)(v10 + 208) = v10 + 216;
  *(unsigned char *)(v10 + 248) = 0;
  *(void *)(v10 + 256) = 0;
  *(void *)(v10 + 168) = 0;
  *(void *)(v10 + 160) = v10 + 168;
  uint64_t v12 = (const std::string *)(a1 + 8);
  *(void *)(v10 + 152) = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D307EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212DE0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212DE0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D308084(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212DE0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<UnparseJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212DE0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    __n128 v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_ERROR, "InjectJSON::create() ignored non-NULL upstream argument", v16, 2u);
    }
    Diagnostics::log(3, "InjectJSON::create() ignored non-NULL upstream argument", v10);
  }
  unint64_t v11 = operator new(0x168uLL);
  unint64_t v12 = (unint64_t)v11;
  v11[1] = 0;
  v11[2] = 0;
  *unint64_t v11 = off_26C215B80;
  uint64_t v13 = v11 + 3;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    ParserModule::ParserModule((uint64_t)(v11 + 3), v7, v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *uint64_t v13 = off_26C1FF4D0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    ParserModule::ParserModule((uint64_t)(v11 + 3), v7, 0);
    *uint64_t v13 = off_26C1FF4D0;
  }
  *(void *)(v12 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200AE0;
  *(void *)(v12 + 26std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(v12 + 216) = 0;
  *(void *)(v12 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(v12 + 240) = 0;
  *(void *)(v12 + 232) = v12 + 240;
  *(void *)(v12 + 248) = 0;
  *(void *)(v12 + 256) = v12 + 264;
  *(void *)(v12 + 288) = 0;
  *(void *)(v12 + 296) = 0;
  *(void *)(v12 + 272) = 0;
  *(void *)(v12 + 280) = v12 + 288;
  *(unsigned char *)(v12 + 30std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(_OWORD *)(v12 + 312) = 0u;
  *(_OWORD *)(v12 + 328) = 0u;
  *(void *)(v12 + 34std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(v12 + 352) = 0x8000000000000000;
  size_t v14 = (const std::string *)(a1 + 8);
  *(void *)(v12 + 208) = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v12 + 104), v14);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = (unint64_t)v13;
  result.n128_u64[1] = v12;
  *a4 = result;
  return result;
}

void sub_20D3083E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212B78;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212B78;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3085C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212B78;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<InjectJSON>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212B78;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = operator new(0x3C8uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *__n128 v9 = off_26C217668;
  unint64_t v11 = (unint64_t)(v9 + 3);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ExtractFeaturesToTarget::ExtractFeaturesToTarget(v9 + 3, v7, v6, v8);
  unint64_t v12 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D3087C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213728;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213728;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D308934(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213728;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractGryphrontFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213728;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = operator new(0x3C8uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *__n128 v9 = off_26C217358;
  unint64_t v11 = (unint64_t)(v9 + 3);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ExtractFeaturesToTarget::ExtractFeaturesToTarget(v9 + 3, v7, v6, v8);
  unint64_t v12 = (const std::string *)(a1 + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C203348;
  *(void *)(v10 + 952) = &off_26C203440;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D308B88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213678;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213678;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D308CFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213678;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatureTable>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213678;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = operator new(0x3D0uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *__n128 v9 = off_26C217A58;
  unint64_t v11 = (unint64_t)(v9 + 3);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ExtractFeaturesImpl::ExtractFeaturesImpl((uint64_t)(v9 + 3), v7, v6, v8);
  unint64_t v12 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C203F18;
    *(void *)(v10 + 952) = 0;
    *(void *)(v10 + 968) = 0;
    *(void *)(v10 + 960) = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C203F18;
    *(void *)(v10 + 952) = 0;
    *(void *)(v10 + 968) = 0;
    *(void *)(v10 + 960) = 0;
  }
  std::string::operator=((std::string *)(v10 + 104), v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D308F64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213360;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213360;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3090D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213360;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ExtractFeatures>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213360;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = *a2;
  BOOL v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (char *)operator new(0xC0uLL);
  unint64_t v8 = (unint64_t)v7;
  __n128 v9 = (const std::string *)(a1 + 8);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = off_26C2170F0;
  unint64_t v10 = (unint64_t)(v7 + 24);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v7 + 3) = off_26C200A98;
  v7[32] = 0;
  *((void *)v7 + 5) = v6;
  *((void *)v7 + 6) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 15) = 0;
    *(_OWORD *)(v7 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C201DD0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C202EA0;
    *(_OWORD *)(v8 + 128) = 0u;
    *(_OWORD *)(v8 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
    *(void *)(v8 + 176) = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *((void *)v7 + 15) = 0;
    *(_OWORD *)(v7 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 3) = off_26C202EA0;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 9) = 0u;
    *((_OWORD *)v7 + 10) = 0u;
    *((void *)v7 + 22) = 0;
  }
  std::string::operator=((std::string *)(v8 + 104), v9);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v8;
  *a3 = result;
  return result;
}

void sub_20D3093AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2134C0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2134C0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3094F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2134C0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<CountConstituents>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2134C0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = operator new(0x190uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *__n128 v9 = off_26C216478;
  unint64_t v11 = v9 + 3;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v9 + 3), v7, v6, v8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *unint64_t v11 = off_26C1FFF00;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *unint64_t v11 = off_26C1FFF00;
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C2018E8;
  *(void *)(v10 + 368) = 0;
  *(void *)(v10 + 376) = 0;
  unint64_t v12 = *(std::__shared_weak_count **)(v10 + 224);
  *(void *)(v10 + 216) = 0;
  *(void *)(v10 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *(void *)(v10 + 392) = 1;
  std::string::size_type size = v8[5].__r_.__value_.__l.__size_;
  size_t v14 = *(std::__shared_weak_count **)(size + 24);
  if (!v14)
  {
    char v15 = 0;
    goto LABEL_36;
  }
  char v15 = std::__shared_weak_count::lock(v14);
  if (v15 && *(void *)(size + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "hydra_udct");
    std::string::size_type v16 = v8[5].__r_.__value_.__l.__size_;
    int v17 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v18 = *(std::__shared_weak_count **)(v16 + 24);
    if (v18 && (std::string::size_type v19 = std::__shared_weak_count::lock(v18)) != 0)
    {
      std::basic_string<char16_t>::size_type v20 = v19;
      uint64_t v21 = *(void *)(v16 + 16);
      if (v21
        && (uint64_t v22 = v21 + 8,
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)&__p)))
      {
        p_p = &__p;
        uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)&__p, &p_p);
        uint64_t v24 = *((void *)v23 + 5);
        std::chrono::steady_clock::time_point v25 = (std::__shared_weak_count *)*((void *)v23 + 6);
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::chrono::steady_clock::time_point v25 = 0;
        uint64_t v24 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      if (!v17) {
        goto LABEL_24;
      }
    }
    else
    {
      std::chrono::steady_clock::time_point v25 = 0;
      uint64_t v24 = 0;
      if (!v17)
      {
LABEL_24:
        if (v66 < 0) {
          operator delete((void *)__p);
        }
        uint64_t v27 = *(void *)(v24 + 296);
        uint64_t v26 = *(void *)(v24 + 304);
        if (v26) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        }
        long long v28 = *(std::__shared_weak_count **)(v10 + 376);
        *(void *)(v10 + 368) = v27;
        *(void *)(v10 + 376) = v26;
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        uint64_t v30 = *(void *)(v24 + 312);
        uint64_t v29 = *(void *)(v24 + 320);
        if (v29) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
        }
        double v31 = *(std::__shared_weak_count **)(v10 + 224);
        *(void *)(v10 + 216) = v30;
        *(void *)(v10 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v29;
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        *(unsigned char *)(v10 + 38std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(unsigned char *)(v24 + 328);
        *(void *)(v10 + 392) = *(void *)(v24 + 336);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        goto LABEL_36;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    goto LABEL_24;
  }
LABEL_36:
  std::chrono::steady_clock::time_point v32 = *(const void **)(v10 + 40);
  if (v32)
  {
    if (v33)
    {
      uint64_t v62 = v15;
      uint64_t v57 = a1;
      std::string v58 = a4;
      char v59 = v11;
      std::chrono::steady_clock::time_point v34 = *(std::__shared_weak_count **)(v10 + 48);
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v61 = v34;
      int v36 = (void *)v33[24];
      uint64_t v35 = (std::__shared_weak_count *)v33[25];
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v60 = v35;
      int v39 = (void *)*v36;
      uint64_t v38 = v36 + 1;
      int v37 = v39;
      if (v39 != v38)
      {
        do
        {
          std::string::size_type v40 = (long long *)(v37 + 4);
          uint64_t v41 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(void *)(v10 + 216), (const void **)v37 + 4);
          uint64_t v42 = *(uint64_t ***)(v10 + 216);
          if (v42 + 1 == (uint64_t **)v41)
          {
            uint64_t v46 = v41;
            std::string v47 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(*(void *)(v10 + 216), &p_p, (const void **)v37 + 4);
            if (!*v47)
            {
              uint64_t v48 = v47;
              size_t v49 = (uint64_t *)operator new(0x48uLL);
              *(void *)&long long __p = v49;
              *((void *)&__p + 1) = v46;
              char v65 = 0;
              uint64_t v50 = (std::string *)(v49 + 4);
              if (*((char *)v37 + 55) < 0)
              {
                std::string::__init_copy_ctor_external(v50, (const std::string::value_type *)v37[4], v37[5]);
              }
              else
              {
                long long v51 = *v40;
                v49[6] = v37[6];
                *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
              }
              v49[7] = v37[7];
              uint64_t v52 = v37[8];
              v49[8] = v52;
              if (v52) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
              }
              char v65 = 1;
              std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v42, (uint64_t)p_p, v48, v49);
              *(void *)&long long __p = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
            }
          }
          else
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              std::string::size_type v45 = (long long *)(v37 + 4);
              if (*((char *)v37 + 55) < 0) {
                std::string::size_type v45 = *(long long **)v40;
              }
              LODWORD(__p) = 136315138;
              *(void *)((char *)&__p + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v45;
              _os_log_impl(&dword_20CD80000, v43, OS_LOG_TYPE_ERROR, "[UDCT]Overwrite rules from upstream: %s", (uint8_t *)&__p, 0xCu);
            }
            if (*((char *)v37 + 55) < 0) {
              std::string::size_type v40 = *(long long **)v40;
            }
            Diagnostics::log(3, "[UDCT]Overwrite rules from upstream: %s", v44, v40);
          }
          uint64_t v53 = (void *)v37[1];
          if (v53)
          {
            do
            {
              uint64_t v54 = v53;
              uint64_t v53 = (void *)*v53;
            }
            while (v53);
          }
          else
          {
            do
            {
              uint64_t v54 = (void *)v37[2];
              BOOL v55 = *v54 == (void)v37;
              int v37 = v54;
            }
            while (!v55);
          }
          int v37 = v54;
        }
        while (v54 != v38);
      }
      if (v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
      a4 = v58;
      unint64_t v11 = v59;
      a1 = v57;
      char v15 = v62;
      if (v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
    }
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), (const std::string *)(a1 + 8));
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = (unint64_t)v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D309B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, FrontendNNModule *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  shared_weak_owners = (std::__shared_weak_count *)v27[15].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  FrontendNNModule::~FrontendNNModule(v29);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v34);
  if (v26)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212E90;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212E90;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D309DA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212E90;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<HydraUserDct>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212E90;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = operator new(0x1A0uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *__n128 v9 = off_26C2152F8;
  unint64_t v11 = (unint64_t)(v9 + 3);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v9 + 3), v7, v6, v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C205830;
  MEMORY[0x210558E70](v10 + 128, "Markup");
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C1FF530;
  *(void *)(v10 + 368) = 0;
  *(void *)(v10 + 376) = 0;
  *(void *)(v10 + 400) = 0;
  *(void *)(v10 + 408) = 0;
  std::string::size_type size = v8[5].__r_.__value_.__l.__size_;
  uint64_t v13 = *(std::__shared_weak_count **)(size + 24);
  if (!v13 || (size_t v14 = std::__shared_weak_count::lock(v13)) == 0)
  {
    *(void *)(v10 + 38std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *(unsigned char *)(v10 + 392) = 0;
    goto LABEL_32;
  }
  char v15 = v14;
  if (*(void *)(size + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "markup");
    std::string::size_type v17 = v8[5].__r_.__value_.__l.__size_;
    std::string::size_type v16 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v18 = *(std::__shared_weak_count **)(v17 + 24);
    if (v18 && (std::string::size_type v19 = std::__shared_weak_count::lock(v18)) != 0)
    {
      std::basic_string<char16_t>::size_type v20 = v19;
      uint64_t v21 = *(void *)(v17 + 16);
      if (v21
        && (uint64_t v22 = v21 + 8,
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)__p)))
      {
        uint64_t v33 = __p;
        uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)__p, (long long **)&v33);
        uint64_t v25 = *((void *)v23 + 5);
        uint64_t v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      if (!v16) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      if (!v16)
      {
LABEL_23:
        if (v32 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v27 = *(void *)(v25 + 296);
        uint64_t v26 = *(void *)(v25 + 304);
        if (v26) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        }
        long long v28 = *(std::__shared_weak_count **)(v10 + 376);
        *(void *)(v10 + 368) = v27;
        *(void *)(v10 + 376) = v26;
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        goto LABEL_31;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    goto LABEL_23;
  }
LABEL_31:
  *(void *)(v10 + 38std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(unsigned char *)(v10 + 392) = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_32:
  uint64_t v29 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v29);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30A15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  uint64_t v21 = (std::__shared_weak_count *)v15[17].__vftable;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  shared_weak_owners = (std::__shared_weak_count *)v15[15].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  FrontendNNModule::~FrontendNNModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v23);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2137D8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2137D8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30A34C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2137D8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Markup>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2137D8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = operator new(0x1B0uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *__n128 v9 = off_26C2161D8;
  unint64_t v11 = (unint64_t)(v9 + 3);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v9 + 3), v7, v6, v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C1FF958;
  MEMORY[0x210558E70](v10 + 128, "PronounceNN");
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C2013F8;
  *(void *)(v10 + 376) = 0;
  *(void *)(v10 + 38std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(v10 + 368) = 0;
  *(_OWORD *)(v10 + 400) = 0u;
  *(_OWORD *)(v10 + 416) = 0u;
  std::string::size_type size = v8[5].__r_.__value_.__l.__size_;
  uint64_t v13 = *(std::__shared_weak_count **)(size + 24);
  if (v13)
  {
    size_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      char v15 = v14;
      if (!*(void *)(size + 16))
      {
LABEL_67:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_68;
      }
      std::string::size_type v16 = (std::string *)(v10 + 368);
      std::string::basic_string[abi:ne180100]<0>(__p, "pronounce_nn");
      std::string::size_type v17 = v8[5].__r_.__value_.__l.__size_;
      unint64_t v18 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v19 = *(std::__shared_weak_count **)(v17 + 24);
      if (v19)
      {
        std::basic_string<char16_t>::size_type v20 = std::__shared_weak_count::lock(v19);
        if (v20)
        {
          uint64_t v21 = v20;
          uint64_t v22 = *(void *)(v17 + 16);
          if (v22
            && (uint64_t v23 = v22 + 8,
                std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v22 + 8), (unsigned __int8 *)__p)))
          {
            std::string v58 = __p;
            uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, (unsigned __int8 *)__p, (long long **)&v58);
            uint64_t v25 = *((void *)v24 + 5);
            uint64_t v26 = (std::__shared_weak_count *)*((void *)v24 + 6);
            if (v26) {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v26 = 0;
            uint64_t v25 = 0;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        else
        {
          uint64_t v26 = 0;
          uint64_t v25 = 0;
        }
        std::string::size_type v16 = (std::string *)(v10 + 368);
        if (!v18) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v25 = 0;
        if (!v18) {
          goto LABEL_27;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_27:
      if (v57 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v28 = *(void *)(v25 + 448);
      uint64_t v27 = *(void *)(v25 + 456);
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = *(std::__shared_weak_count **)(v10 + 224);
      *(void *)(v10 + 216) = v28;
      *(void *)(v10 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v27;
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      uint64_t v31 = *(void *)(v25 + 296);
      uint64_t v30 = *(void *)(v25 + 304);
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      char v32 = *(std::__shared_weak_count **)(v10 + 240);
      *(void *)(v10 + 232) = v31;
      *(void *)(v10 + 240) = v30;
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      *(_WORD *)(v10 + 392) = *(_WORD *)(v25 + 416);
      std::string::operator=(v16, (const std::string *)(v25 + 392));
      uint64_t v34 = *(void *)(v25 + 464);
      uint64_t v33 = *(void *)(v25 + 472);
      if (v33) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = *(std::__shared_weak_count **)(v10 + 408);
      *(void *)(v10 + 400) = v34;
      *(void *)(v10 + 408) = v33;
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      uint64_t v37 = *(void *)(v25 + 480);
      uint64_t v36 = *(void *)(v25 + 488);
      if (v36) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v38 = *(std::__shared_weak_count **)(v10 + 424);
      *(void *)(v10 + 416) = v37;
      *(void *)(v10 + 42std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v36;
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      std::string::operator=((std::string *)(v10 + 176), (const std::string *)(v25 + 424));
      uint64_t v40 = *(void *)(v25 + 312);
      uint64_t v39 = *(void *)(v25 + 320);
      if (v39) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v41 = *(std::__shared_weak_count **)(v10 + 256);
      *(void *)(v10 + 248) = v40;
      *(void *)(v10 + 256) = v39;
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      uint64_t v43 = *(void *)(v25 + 328);
      uint64_t v42 = *(void *)(v25 + 336);
      if (v42) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
      }
      int v44 = *(std::__shared_weak_count **)(v10 + 272);
      *(void *)(v10 + 26std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v43;
      *(void *)(v10 + 272) = v42;
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
      uint64_t v46 = *(void *)(v25 + 344);
      uint64_t v45 = *(void *)(v25 + 352);
      if (v45) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
      }
      std::string v47 = *(std::__shared_weak_count **)(v10 + 288);
      *(void *)(v10 + 280) = v46;
      *(void *)(v10 + 288) = v45;
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      uint64_t v49 = *(void *)(v25 + 360);
      uint64_t v48 = *(void *)(v25 + 368);
      if (v48) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v50 = *(std::__shared_weak_count **)(v10 + 304);
      *(void *)(v10 + 296) = v49;
      *(void *)(v10 + 30std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v48;
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      uint64_t v52 = *(void *)(v25 + 376);
      uint64_t v51 = *(void *)(v25 + 384);
      if (v51) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v53 = *(std::__shared_weak_count **)(v10 + 320);
      *(void *)(v10 + 312) = v52;
      *(void *)(v10 + 320) = v51;
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_67;
    }
  }
LABEL_68:
  uint64_t v54 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v54);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30A84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  uint64_t v23 = *(std::__shared_weak_count **)(v17 + 424);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v17 + 408);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (*(char *)(v17 + 391) < 0) {
    operator delete(*a10);
  }
  FrontendNNModule::~FrontendNNModule(v18);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v17);
  operator delete(v25);
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212D88;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212D88;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30AA6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212D88;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PronounceNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212D88;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = operator new(0x170uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *__n128 v9 = off_26C216088;
  unint64_t v11 = v9 + 3;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v9 + 3), v7, v6, v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C1FF810;
  MEMORY[0x210558E70](v10 + 128, "NormalizeNN");
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *unint64_t v11 = off_26C201188;
  std::string::size_type size = v8[5].__r_.__value_.__l.__size_;
  uint64_t v13 = *(std::__shared_weak_count **)(size + 24);
  if (v13)
  {
    size_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      char v15 = v14;
      if (!*(void *)(size + 16))
      {
LABEL_34:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_35;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "normalize_nn");
      std::string::size_type v17 = v8[5].__r_.__value_.__l.__size_;
      std::string::size_type v16 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v18 = *(std::__shared_weak_count **)(v17 + 24);
      if (v18 && (std::string::size_type v19 = std::__shared_weak_count::lock(v18)) != 0)
      {
        std::basic_string<char16_t>::size_type v20 = v19;
        uint64_t v21 = *(void *)(v17 + 16);
        if (v21
          && (uint64_t v22 = v21 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)__p)))
        {
          uint64_t v36 = __p;
          uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)__p, (long long **)&v36);
          uint64_t v25 = *((void *)v23 + 5);
          uint64_t v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (!v16) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        if (!v16)
        {
LABEL_22:
          if (v35 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v27 = *(void *)(v25 + 296);
          uint64_t v26 = *(void *)(v25 + 304);
          if (v26) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v28 = *(std::__shared_weak_count **)(v10 + 224);
          *(void *)(v10 + 216) = v27;
          *(void *)(v10 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v26;
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          uint64_t v30 = *(void *)(v25 + 312);
          uint64_t v29 = *(void *)(v25 + 320);
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v31 = *(std::__shared_weak_count **)(v10 + 240);
          *(void *)(v10 + 232) = v30;
          *(void *)(v10 + 240) = v29;
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
          std::string::operator=((std::string *)(v10 + 176), (const std::string *)(v25 + 328));
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          goto LABEL_34;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      goto LABEL_22;
    }
  }
LABEL_35:
  char v32 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v32);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = (unint64_t)v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30AE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  FrontendNNModule::~FrontendNNModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v21);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212CD8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212CD8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30B020(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212CD8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<NormalizeNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212CD8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = operator new(0x180uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *__n128 v9 = off_26C2154B8;
  unint64_t v11 = (unint64_t)(v9 + 3);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v9 + 3), v7, v6, v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C205988;
  MEMORY[0x210558E70](v10 + 128, "Rewrite");
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C1FFAB8;
  *(void *)(v10 + 368) = 0;
  *(void *)(v10 + 376) = 0;
  std::string::size_type size = v8[5].__r_.__value_.__l.__size_;
  uint64_t v13 = *(std::__shared_weak_count **)(size + 24);
  if (v13)
  {
    size_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      char v15 = v14;
      if (!*(void *)(size + 16))
      {
LABEL_34:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_35;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "rewrite");
      std::string::size_type v17 = v8[5].__r_.__value_.__l.__size_;
      std::string::size_type v16 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v18 = *(std::__shared_weak_count **)(v17 + 24);
      if (v18 && (std::string::size_type v19 = std::__shared_weak_count::lock(v18)) != 0)
      {
        std::basic_string<char16_t>::size_type v20 = v19;
        uint64_t v21 = *(void *)(v17 + 16);
        if (v21
          && (uint64_t v22 = v21 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)__p)))
        {
          uint64_t v36 = __p;
          uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)__p, (long long **)&v36);
          uint64_t v25 = (void *)*((void *)v23 + 5);
          uint64_t v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (!v16) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        if (!v16)
        {
LABEL_22:
          if (v35 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v27 = v25[37];
          uint64_t v26 = v25[38];
          if (v26) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v28 = *(std::__shared_weak_count **)(v10 + 224);
          *(void *)(v10 + 216) = v27;
          *(void *)(v10 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v26;
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          uint64_t v30 = v25[39];
          uint64_t v29 = v25[40];
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v31 = *(std::__shared_weak_count **)(v10 + 376);
          *(void *)(v10 + 368) = v30;
          *(void *)(v10 + 376) = v29;
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          goto LABEL_34;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      goto LABEL_22;
    }
  }
LABEL_35:
  char v32 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v32);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30B3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  shared_weak_owners = (std::__shared_weak_count *)v15[15].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  FrontendNNModule::~FrontendNNModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v22);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213830;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213830;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30B5C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213830;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Rewrite>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213830;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = (char *)operator new(0x88uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)__n128 v9 = off_26C2173C8;
  unint64_t v11 = v9 + 24;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C202448;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C202448;
  }
  *unint64_t v11 = off_26C2034C8;
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (v13)
  {
    size_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      char v15 = v14;
      if (!*(void *)(v12 + 16))
      {
LABEL_25:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_26;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "join_pronunciations");
      uint64_t v17 = *(void *)(v8 + 128);
      std::string::size_type v16 = *(std::__shared_weak_count **)(v8 + 136);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v18 = *(std::__shared_weak_count **)(v17 + 24);
      if (v18 && (std::string::size_type v19 = std::__shared_weak_count::lock(v18)) != 0)
      {
        std::basic_string<char16_t>::size_type v20 = v19;
        uint64_t v21 = *(void *)(v17 + 16);
        if (v21
          && (uint64_t v22 = v21 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)__p)))
        {
          uint64_t v30 = __p;
          uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)__p, (long long **)&v30);
          uint64_t v25 = *((void *)v23 + 5);
          uint64_t v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (!v16) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        if (!v16)
        {
LABEL_21:
          if (v29 < 0) {
            operator delete(__p[0]);
          }
          *(void *)(v10 + 128) = *(void *)(v25 + 296);
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          goto LABEL_25;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      goto LABEL_21;
    }
  }
LABEL_26:
  uint64_t v26 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v26);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = (unint64_t)v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30B998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  FrontendModule::~FrontendModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v21);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2135C8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2135C8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30BB40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2135C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<JoinPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2135C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = (char *)operator new(0xB0uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)__n128 v9 = off_26C217208;
  unint64_t v11 = (unint64_t)(v9 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C201E80;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C201E80;
  }
  *(void *)(v10 + 128) = 0;
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C203078;
  *(void *)(v10 + 136) = 0;
  *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  std::string::size_type size = v8[5].__r_.__value_.__l.__size_;
  uint64_t v13 = *(std::__shared_weak_count **)(size + 24);
  if (!v13)
  {
    size_t v14 = 0;
    goto LABEL_27;
  }
  size_t v14 = std::__shared_weak_count::lock(v13);
  if (v14 && *(void *)(size + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "map_pronunciations");
    std::string::size_type v15 = v8[5].__r_.__value_.__l.__size_;
    std::string::size_type v16 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
    uint64_t v27 = a4;
    if (v17 && (unint64_t v18 = std::__shared_weak_count::lock(v17)) != 0)
    {
      uint64_t v19 = *(void *)(v15 + 16);
      if (v19)
      {
        uint64_t v26 = v18;
        uint64_t v20 = v19 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v19 + 8), (unsigned __int8 *)__p))
        {
          uint64_t v30 = __p;
          uint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (unsigned __int8 *)__p, (long long **)&v30);
          uint64_t v22 = *((void *)v21 + 5);
          uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 + 6);
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v23 = 0;
          uint64_t v22 = 0;
        }
        unint64_t v18 = v26;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v22 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      if (!v16) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v22 = 0;
      if (!v16)
      {
LABEL_22:
        if (v29 < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)(v10 + 152) = *(_OWORD *)(v22 + 296);
        *(void *)(v10 + 168) = *(void *)(v22 + 312);
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        a4 = v27;
        goto LABEL_27;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    goto LABEL_22;
  }
LABEL_27:
  std::string::operator=((std::string *)(v10 + 128), v8);
  uint64_t v24 = (const std::string *)(a1 + 8);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v24);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30BF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  if (*(char *)(v17 + 151) < 0) {
    operator delete(*v19);
  }
  FrontendModule::~FrontendModule(v18);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v17);
  operator delete(v23);
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213518;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213518;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30C11C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213518;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MapPronunciations>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213518;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = (char *)operator new(0xC0uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)__n128 v9 = off_26C216670;
  unint64_t v11 = (unint64_t)(v9 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C2001D8;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C2001D8;
  }
  *(void *)(v10 + 160) = 0;
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C201CB8;
  *(void *)(v10 + 136) = 0;
  *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(v10 + 168) = 0;
  *(void *)(v10 + 176) = 0;
  *(unsigned char *)(v10 + 18std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 1;
  std::string::size_type size = v8[5].__r_.__value_.__l.__size_;
  uint64_t v13 = *(std::__shared_weak_count **)(size + 24);
  if (!v13)
  {
    size_t v14 = 0;
    goto LABEL_31;
  }
  size_t v14 = std::__shared_weak_count::lock(v13);
  if (v14 && *(void *)(size + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "amend_phonemes");
    std::string::size_type v15 = v8[5].__r_.__value_.__l.__size_;
    std::string::size_type v16 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
    uint64_t v30 = a4;
    if (v17 && (unint64_t v18 = std::__shared_weak_count::lock(v17)) != 0)
    {
      uint64_t v19 = *(void *)(v15 + 16);
      if (v19)
      {
        char v29 = v18;
        uint64_t v20 = v19 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v19 + 8), (unsigned __int8 *)__p))
        {
          uint64_t v33 = __p;
          uint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (unsigned __int8 *)__p, (long long **)&v33);
          uint64_t v22 = *((void *)v21 + 5);
          uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 + 6);
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v23 = 0;
          uint64_t v22 = 0;
        }
        unint64_t v18 = v29;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v22 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      if (!v16) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v22 = 0;
      if (!v16)
      {
LABEL_22:
        if (v32 < 0) {
          operator delete(__p[0]);
        }
        *(void *)(v10 + 128) = *(void *)(v22 + 296);
        uint64_t v25 = *(void *)(v22 + 304);
        uint64_t v24 = *(void *)(v22 + 312);
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v26 = *(std::__shared_weak_count **)(v10 + 144);
        *(void *)(v10 + 136) = v25;
        *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v24;
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        *(_DWORD *)(v10 + 152) = *(_DWORD *)(v22 + 320);
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        a4 = v30;
        goto LABEL_31;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    goto LABEL_22;
  }
LABEL_31:
  std::string::operator=((std::string *)(v10 + 160), v8);
  uint64_t v27 = (const std::string *)(a1 + 8);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v27);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30C560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  if (*(char *)(v17 + 183) < 0) {
    operator delete(*v19);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v17 + 144);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  FrontendModule::~FrontendModule(v18);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v17);
  operator delete(v24);
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212F40;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212F40;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30C730(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212F40;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<AmendPhonemes>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212F40;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = *a2;
  BOOL v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (char *)operator new(0x88uLL);
  unint64_t v8 = (unint64_t)v7;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = off_26C2169F0;
  __n128 v9 = (FrontendModule *)(v7 + 24);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v7 + 3) = off_26C200A98;
  v7[32] = 0;
  *((void *)v7 + 5) = v6;
  *((void *)v7 + 6) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 15) = 0;
    *(_OWORD *)(v7 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200868;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *((void *)v7 + 15) = 0;
    *(_OWORD *)(v7 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 3) = off_26C200868;
  }
  *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C2021C0;
  *(_DWORD *)(v8 + 128) = 0;
  *(unsigned char *)(v8 + 132) = 0;
  FrontendModule::clear(v9);
  unint64_t v10 = (const std::string *)(a1 + 8);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::string::operator=((std::string *)(v8 + 104), v10);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  result.n128_u64[0] = (unint64_t)v9;
  result.n128_u64[1] = v8;
  *a3 = result;
  return result;
}

void sub_20D30C9FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2130F8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2130F8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30CB70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2130F8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TrimUtterance>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2130F8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = (char *)operator new(0xD0uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)__n128 v9 = off_26C216C20;
  unint64_t v11 = v9 + 24;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
  }
  *unint64_t v11 = off_26C200D40;
  int v12 = *(unsigned __int8 *)(v8 + 144);
  long long __p = (void *)(v8 + 144);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  unint64_t v40 = 0x8000000000000000;
  if (v12 == 1)
  {
    uint64_t v37 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(void *)(v8 + 152), "pronounce");
    int v12 = *(unsigned __int8 *)(v8 + 144);
  }
  else
  {
    if (v12 == 2)
    {
      uint64_t v13 = *(void *)(v8 + 152);
      uint64_t v38 = *(void *)(v13 + 8);
      v32[0] = (void *)(v8 + 144);
      v32[1] = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      unint64_t v35 = 0x8000000000000000;
LABEL_16:
      uint64_t v33 = *(void *)(v13 + 8);
      goto LABEL_19;
    }
    unint64_t v40 = 1;
  }
  v32[0] = (void *)(v8 + 144);
  v32[1] = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  unint64_t v35 = 0x8000000000000000;
  if (v12 == 1)
  {
    v32[1] = (void *)(*(void *)(v8 + 152) + 8);
  }
  else
  {
    if (v12 == 2)
    {
      uint64_t v13 = *(void *)(v8 + 152);
      goto LABEL_16;
    }
    unint64_t v35 = 1;
  }
LABEL_19:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)v32))
  {
    *(unsigned char *)(v10 + 128) = 0;
  }
  else
  {
    size_t v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8 + 144, "pronounce");
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentence_level");
    LOBYTE(v32[0]) = 0;
    *(unsigned char *)(v10 + 128) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v14, (const void **)&__p, (unsigned __int8 *)v32);
    if (SHIBYTE(v38) < 0) {
      operator delete(__p);
    }
  }
  long long __p = (void *)(v8 + 144);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  unint64_t v40 = 0x8000000000000000;
  int v15 = *(unsigned __int8 *)(v8 + 144);
  if (v15 == 1)
  {
    uint64_t v37 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(void *)(v8 + 152), "pronounce");
    int v15 = *(unsigned __int8 *)(v8 + 144);
  }
  else
  {
    if (v15 == 2)
    {
      uint64_t v16 = *(void *)(v8 + 152);
      uint64_t v38 = *(void *)(v16 + 8);
      v32[0] = (void *)(v8 + 144);
      v32[1] = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      unint64_t v35 = 0x8000000000000000;
LABEL_31:
      uint64_t v33 = *(void *)(v16 + 8);
      goto LABEL_34;
    }
    unint64_t v40 = 1;
  }
  v32[0] = (void *)(v8 + 144);
  v32[1] = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  unint64_t v35 = 0x8000000000000000;
  if (v15 == 1)
  {
    v32[1] = (void *)(*(void *)(v8 + 152) + 8);
  }
  else
  {
    if (v15 == 2)
    {
      uint64_t v16 = *(void *)(v8 + 152);
      goto LABEL_31;
    }
    unint64_t v35 = 1;
  }
LABEL_34:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)v32))
  {
    *(unsigned char *)(v10 + 129) = 0;
  }
  else
  {
    uint64_t v17 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8 + 144, "pronounce");
    std::string::basic_string[abi:ne180100]<0>(&__p, "pitch");
    LOBYTE(v32[0]) = 0;
    *(unsigned char *)(v10 + 129) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v17, (const void **)&__p, (unsigned __int8 *)v32);
    if (SHIBYTE(v38) < 0) {
      operator delete(__p);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C202500;
  *(_OWORD *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  (*(void (**)(void **__return_ptr))(**(void **)(v8 + 96) + 32))(&__p);
  FastRewriter::create(v32, (uint64_t)&__p);
  unint64_t v18 = v32[0];
  uint64_t v19 = *(std::__shared_weak_count **)(v10 + 168);
  *(_OWORD *)(v10 + 160) = *(_OWORD *)v32;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    uint64_t v20 = *(void **)(v10 + 160);
  }
  else
  {
    uint64_t v20 = v18;
  }
  (*(void (**)(void *))(*(void *)v20 + 24))(v20);
  if (*(unsigned char *)(v10 + 128))
  {
    (*(void (**)(void **__return_ptr))(**(void **)(v8 + 96) + 32))(v32);
    FastRewriter::create(&v31, (uint64_t)v32);
    uint64_t v21 = v31;
    uint64_t v22 = *(std::__shared_weak_count **)(v10 + 184);
    *(_OWORD *)(v10 + 176) = v31;
    if (v22)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      uint64_t v23 = *(void *)(v10 + 176);
    }
    else
    {
      uint64_t v23 = v21;
    }
    (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
    if (SHIBYTE(v33) < 0) {
      operator delete(v32[0]);
    }
  }
  if (*(unsigned char *)(v10 + 129))
  {
    (*(void (**)(void **__return_ptr))(**(void **)(v8 + 96) + 32))(v32);
    FastRewriter::create(&v31, (uint64_t)v32);
    uint64_t v24 = v31;
    uint64_t v25 = *(std::__shared_weak_count **)(v10 + 200);
    *(_OWORD *)(v10 + 192) = v31;
    if (v25)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      uint64_t v26 = *(void *)(v10 + 192);
    }
    else
    {
      uint64_t v26 = v24;
    }
    (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
    if (SHIBYTE(v33) < 0) {
      operator delete(v32[0]);
    }
  }
  uint64_t shared_component = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v8);
  uint64_t v28 = *(std::__shared_weak_count **)(v10 + 152);
  *(void *)(v10 + 136) = shared_component;
  *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(v10 + 152) = 0;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  char v29 = (const std::string *)(a1 + 8);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v29);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = (unint64_t)v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30D258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  FrontendModule::~FrontendModule(v26);
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v28);
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213200;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213200;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30D48C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213200;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_Rule>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213200;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  long long v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *a3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (char *)operator new(0x90uLL);
  uint64_t v7 = v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = off_26C2168A0;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 3) = off_26C200A98;
  v6[32] = 0;
  *((void *)v6 + 5) = v4;
  *((void *)v6 + 6) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v6 + 15) = 0;
    *(_OWORD *)(v6 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    v7[3] = off_26C2006F8;
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    *((void *)v6 + 15) = 0;
    *(_OWORD *)(v6 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 3) = off_26C2006F8;
  }
  v7[16] = 0;
  v7[3] = off_26C201FD0;
  v7[17] = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(v5 + 96) + 32))(__p);
  FSTGrammar::create((const char *)__p);
}

void sub_20D30D7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213048;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213048;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30D960(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213048;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213048;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __n128 v9 = (char *)operator new(0xF0uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)__n128 v9 = off_26C215918;
  unint64_t v11 = (unint64_t)(v9 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C205E28;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C205E28;
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200638;
  *(void *)(v10 + 128) = &off_26C200688;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 18std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_OWORD *)(v10 + 216) = 0u;
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (v13)
  {
    size_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      int v15 = v14;
      if (!*(void *)(v12 + 16))
      {
LABEL_54:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_55;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "pronounce");
      uint64_t v16 = *(void *)(v8 + 128);
      uint64_t v17 = *(std::__shared_weak_count **)(v8 + 136);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v18 = *(std::__shared_weak_count **)(v16 + 24);
      if (v18)
      {
        uint64_t v48 = a4;
        uint64_t v19 = std::__shared_weak_count::lock(v18);
        if (v19)
        {
          uint64_t v20 = v19;
          uint64_t v21 = *(void *)(v16 + 16);
          if (v21
            && (uint64_t v22 = v21 + 8,
                std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)&__p)))
          {
            p_p = &__p;
            uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)&__p, (long long **)&p_p);
            uint64_t v25 = (void *)*((void *)v23 + 5);
            uint64_t v24 = *((void *)v23 + 6);
            if (v24)
            {
              uint64_t v49 = (std::__shared_weak_count *)*((void *)v23 + 6);
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
            }
            else
            {
              uint64_t v49 = 0;
            }
          }
          else
          {
            uint64_t v49 = 0;
            uint64_t v25 = 0;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        else
        {
          uint64_t v49 = 0;
          uint64_t v25 = 0;
        }
        a4 = v48;
        if (!v17) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v49 = 0;
        uint64_t v25 = 0;
        if (!v17) {
          goto LABEL_26;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_26:
      if (v52 < 0) {
        operator delete(__p);
      }
      *(void *)(v10 + 232) = v25[49];
      uint64_t v27 = v25[41];
      uint64_t v26 = v25[42];
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = *(std::__shared_weak_count **)(v10 + 176);
      *(void *)(v10 + 168) = v27;
      *(void *)(v10 + 176) = v26;
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      uint64_t v30 = v25[39];
      uint64_t v29 = v25[40];
      if (v29) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
      }
      long long v31 = *(std::__shared_weak_count **)(v10 + 160);
      *(void *)(v10 + 152) = v30;
      *(void *)(v10 + 160) = v29;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      uint64_t v33 = v25[37];
      uint64_t v32 = v25[38];
      if (v32) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v34 = *(std::__shared_weak_count **)(v10 + 144);
      *(void *)(v10 + 136) = v33;
      *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v32;
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      uint64_t v36 = v25[43];
      uint64_t v35 = v25[44];
      if (v35) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = *(std::__shared_weak_count **)(v10 + 192);
      *(void *)(v10 + 18std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v36;
      *(void *)(v10 + 192) = v35;
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      uint64_t v39 = v25[45];
      uint64_t v38 = v25[46];
      if (v38) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v40 = *(std::__shared_weak_count **)(v10 + 208);
      *(void *)(v10 + 200) = v39;
      *(void *)(v10 + 208) = v38;
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      uint64_t v42 = v25[47];
      uint64_t v41 = v25[48];
      if (v41) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v43 = *(std::__shared_weak_count **)(v10 + 224);
      *(void *)(v10 + 216) = v42;
      *(void *)(v10 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v41;
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      goto LABEL_54;
    }
  }
LABEL_55:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v44 = *(void *)(v8 + 128);
  if (v44)
  {
    long long __p = (void *)(v10 + 128);
    uint64_t v51 = (std::__shared_weak_count *)v10;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    std::recursive_mutex::lock((std::recursive_mutex *)(v44 + 56));
    Agglomerate::set<std::shared_ptr<PLSHandler>>(v44 + 32, (unint64_t *)&__p);
    uint64_t v45 = v51;
    long long __p = 0;
    uint64_t v51 = 0;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v44 + 56));
    if (v45)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
    }
  }
  uint64_t v46 = (const std::string *)(a1 + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v46);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30DEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  shared_owners = (std::__shared_weak_count *)v17[9].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v17[8].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  uint64_t v25 = (std::__shared_weak_count *)v17[8].__vftable;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = (std::__shared_weak_count *)v17[7].__shared_owners_;
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  uint64_t v27 = (std::__shared_weak_count *)v17[6].__shared_weak_owners_;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)v17[6].__vftable;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  FrontendModule::~FrontendModule(v18);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v29);
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213A40;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213A40;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30E0DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213A40;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Pronounce>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213A40;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    __str.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
  }
  std::string::basic_string(&v26, &__str, 0, 3uLL, (std::allocator<char> *)&v28);
  if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 3) {
      goto LABEL_27;
    }
    if (LOWORD(v26.__r_.__value_.__l.__data_) != 28261 || v26.__r_.__value_.__s.__data_[2] != 45) {
      goto LABEL_27;
    }
LABEL_22:
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = operator new(0x88uLL);
    size_t v14 = v13;
    v13[1] = 0;
    v13[2] = 0;
    *uint64_t v13 = off_26C217588;
    int v15 = (FrontendModule *)(v13 + 3);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      ClassifySentence::ClassifySentence((uint64_t)(v13 + 3), v7, v6);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      *(void *)int v15 = off_26C2026B0;
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    else
    {
      ClassifySentence::ClassifySentence((uint64_t)(v13 + 3), v7, 0);
      *(void *)int v15 = off_26C2026B0;
    }
    v14[3] = off_26C203860;
    *((_WORD *)v14 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 1;
    FrontendModule::clear(v15);
    goto LABEL_57;
  }
  if (v26.__r_.__value_.__l.__size_ == 3)
  {
    BOOL v12 = *(_WORD *)v26.__r_.__value_.__l.__data_ != 28261 || *(unsigned char *)(v26.__r_.__value_.__r.__words[0] + 2) != 45;
    operator delete(v26.__r_.__value_.__l.__data_);
    if (v12) {
      goto LABEL_27;
    }
    goto LABEL_22;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
LABEL_27:
  std::string::basic_string(&v26, &__str, 0, 3uLL, (std::allocator<char> *)&v28);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 3)
    {
      operator delete(v26.__r_.__value_.__l.__data_);
      goto LABEL_48;
    }
    BOOL v18 = *(_WORD *)v26.__r_.__value_.__l.__data_ != 29286 || *(unsigned char *)(v26.__r_.__value_.__r.__words[0] + 2) != 45;
    operator delete(v26.__r_.__value_.__l.__data_);
    if (v18)
    {
LABEL_48:
      uint64_t v20 = operator new(0x88uLL);
      size_t v14 = v20;
      v20[1] = 0;
      v20[2] = 0;
      void *v20 = off_26C216EF8;
      int v15 = (FrontendModule *)(v20 + 3);
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        ClassifySentence::ClassifySentence((uint64_t)(v20 + 3), v7, v6);
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      else
      {
        ClassifySentence::ClassifySentence((uint64_t)(v20 + 3), v7, 0);
      }
      v14[3] = off_26C202B68;
      *((_WORD *)v14 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 1;
      FrontendModule::clear(v15);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      goto LABEL_59;
    }
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 3) {
      goto LABEL_48;
    }
    if (LOWORD(v26.__r_.__value_.__l.__data_) != 29286 || v26.__r_.__value_.__s.__data_[2] != 45) {
      goto LABEL_48;
    }
  }
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = operator new(0x88uLL);
  size_t v14 = v19;
  v19[1] = 0;
  v19[2] = 0;
  void *v19 = off_26C2175C0;
  int v15 = (FrontendModule *)(v19 + 3);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    ClassifySentence::ClassifySentence((uint64_t)(v19 + 3), v7, v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)int v15 = off_26C2026F8;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    ClassifySentence::ClassifySentence((uint64_t)(v19 + 3), v7, 0);
    *(void *)int v15 = off_26C2026F8;
  }
  v14[3] = off_26C2038A8;
  *((_WORD *)v14 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  FrontendModule::clear(v15);
LABEL_57:
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    v21.n128_u64[0] = (unint64_t)v15;
    v21.n128_u64[1] = (unint64_t)v14;
    __n128 v25 = v21;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    goto LABEL_60;
  }
LABEL_59:
  v22.n128_u64[0] = (unint64_t)v15;
  v22.n128_u64[1] = (unint64_t)v14;
  __n128 v25 = v22;
LABEL_60:
  uint64_t v23 = (const std::string *)(a1 + 8);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v25.n128_u64[0] + 80), v23);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  __n128 result = v25;
  *a4 = v25;
  return result;
}

void sub_20D30E688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  FrontendModule::~FrontendModule(v21);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v23);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213410;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213410;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30E864(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213410;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ClassifySentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213410;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = (char *)operator new(0xC0uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)long long v9 = off_26C216DE0;
  unint64_t v11 = (unint64_t)(v9 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200BB0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C200BB0;
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C202970;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (v13)
  {
    size_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      int v15 = v14;
      if (!*(void *)(v12 + 16))
      {
LABEL_33:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_34;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "phrasing_token");
      uint64_t v17 = *(void *)(v8 + 128);
      uint64_t v16 = *(std::__shared_weak_count **)(v8 + 136);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v18 = *(std::__shared_weak_count **)(v17 + 24);
      if (v18 && (uint64_t v19 = std::__shared_weak_count::lock(v18)) != 0)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)(v17 + 16);
        if (v21
          && (uint64_t v22 = v21 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)__p)))
        {
          uint64_t v36 = __p;
          uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)__p, (long long **)&v36);
          __n128 v25 = (void *)*((void *)v23 + 5);
          uint64_t v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v24 = 0;
          __n128 v25 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (!v16) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v24 = 0;
        __n128 v25 = 0;
        if (!v16)
        {
LABEL_21:
          if (v35 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v27 = v25[37];
          uint64_t v26 = v25[38];
          if (v26) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
          }
          char v28 = *(std::__shared_weak_count **)(v10 + 136);
          *(void *)(v10 + 128) = v27;
          *(void *)(v10 + 136) = v26;
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          uint64_t v30 = v25[39];
          uint64_t v29 = v25[40];
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          long long v31 = *(std::__shared_weak_count **)(v10 + 152);
          *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v30;
          *(void *)(v10 + 152) = v29;
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          goto LABEL_33;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      goto LABEL_21;
    }
  }
LABEL_34:
  uint64_t v32 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v32);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30EC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  shared_weak_owners = (std::__shared_weak_count *)v15[7].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  uint64_t v22 = (std::__shared_weak_count *)v15[7].__vftable;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  shared_owners = (std::__shared_weak_count *)v15[6].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  uint64_t v24 = (std::__shared_weak_count *)v15[5].__shared_weak_owners_;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  FrontendModule::~FrontendModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v25);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2131A8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2131A8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30EE5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2131A8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing_Token>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2131A8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = (char *)operator new(0xE0uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)long long v9 = off_26C215560;
  unint64_t v11 = (unint64_t)(v9 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C205BF0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C205BF0;
  }
  *(_OWORD *)(v10 + 176) = 0u;
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200098;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (!v13)
  {
    size_t v14 = 0;
    goto LABEL_30;
  }
  size_t v14 = std::__shared_weak_count::lock(v13);
  if (v14 && *(void *)(v12 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "phrasing");
    uint64_t v16 = *(void *)(v8 + 128);
    int v15 = *(std::__shared_weak_count **)(v8 + 136);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = *(std::__shared_weak_count **)(v16 + 24);
    if (v17 && (BOOL v18 = std::__shared_weak_count::lock(v17)) != 0)
    {
      uint64_t v19 = *(void *)(v16 + 16);
      if (v19)
      {
        uint64_t v29 = v18;
        uint64_t v20 = v19 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v19 + 8), (unsigned __int8 *)__p))
        {
          uint64_t v32 = __p;
          uint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (unsigned __int8 *)__p, (long long **)&v32);
          uint64_t v23 = *((void *)v21 + 5);
          uint64_t v22 = (std::__shared_weak_count *)*((void *)v21 + 6);
          if (v22) {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
        }
        BOOL v18 = v29;
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      if (!v15) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      if (!v15)
      {
LABEL_22:
        if (v31 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v25 = *(void *)(v23 + 296);
        uint64_t v24 = *(void *)(v23 + 304);
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v26 = *(std::__shared_weak_count **)(v10 + 136);
        *(void *)(v10 + 128) = v25;
        *(void *)(v10 + 136) = v24;
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        goto LABEL_30;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    goto LABEL_22;
  }
LABEL_30:
  (*(void (**)(unint64_t))(*(void *)v11 + 24))(v11);
  uint64_t v27 = (const std::string *)(a1 + 8);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v27);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30F2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  shared_owners = (void *)v17[8].__shared_owners_;
  if (shared_owners)
  {
    v17[8].__shared_weak_owners_ = (uint64_t)shared_owners;
    operator delete(shared_owners);
  }
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v23 = (std::__shared_weak_count *)v17[7].__vftable;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v24 = (std::__shared_weak_count *)v17[6].__shared_owners_;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  shared_weak_owners = (std::__shared_weak_count *)v17[5].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  FrontendModule::~FrontendModule(v18);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v26);
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2138E0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2138E0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30F498(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2138E0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Phrasing>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2138E0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = (char *)operator new(0xA8uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)long long v9 = off_26C216558;
  unint64_t v11 = (unint64_t)(v9 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200050;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C200050;
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C201AD8;
  *(void *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = 0;
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (!v13)
  {
    size_t v14 = 0;
    goto LABEL_30;
  }
  size_t v14 = std::__shared_weak_count::lock(v13);
  if (v14 && *(void *)(v12 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "part_of_speech");
    uint64_t v16 = *(void *)(v8 + 128);
    int v15 = *(std::__shared_weak_count **)(v8 + 136);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = *(std::__shared_weak_count **)(v16 + 24);
    if (v17 && (BOOL v18 = std::__shared_weak_count::lock(v17)) != 0)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)(v16 + 16);
      if (v20
        && (uint64_t v21 = v20 + 8,
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v20 + 8), (unsigned __int8 *)__p)))
      {
        uint64_t v32 = __p;
        uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, (unsigned __int8 *)__p, (long long **)&v32);
        uint64_t v24 = (void *)*((void *)v22 + 5);
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v22 + 6);
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (!v15) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      if (!v15)
      {
LABEL_22:
        if (v31 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v26 = v24[37];
        uint64_t v25 = v24[38];
        if (v25) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v27 = *(std::__shared_weak_count **)(v10 + 136);
        *(void *)(v10 + 128) = v26;
        *(void *)(v10 + 136) = v25;
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v24[39];
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        goto LABEL_30;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    goto LABEL_22;
  }
LABEL_30:
  (*(void (**)(unint64_t))(*(void *)v11 + 24))(v11);
  char v28 = (const std::string *)(a1 + 8);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v28);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D30F8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  shared_weak_owners = (std::__shared_weak_count *)v15[5].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  FrontendModule::~FrontendModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v22);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212EE8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212EE8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30FA88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212EE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<PartOfSpeech>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212EE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (char *)operator new(0x88uLL);
  unint64_t v8 = (unint64_t)v7;
  long long v9 = (const std::string *)(a1 + 8);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = off_26C215988;
  unint64_t v10 = (unint64_t)(v7 + 24);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v7 + 3) = off_26C200A98;
  v7[32] = 0;
  *((void *)v7 + 5) = v6;
  *((void *)v7 + 6) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 15) = 0;
    *(_OWORD *)(v7 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C205E70;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200740;
    *(unsigned char *)(v8 + 128) = 0;
    *(_DWORD *)(v8 + 132) = 1853189228;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *((void *)v7 + 15) = 0;
    *(_OWORD *)(v7 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 3) = off_26C200740;
    v7[128] = 0;
    *((_DWORD *)v7 + 33) = 1853189228;
  }
  std::string::operator=((std::string *)(v8 + 104), v9);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v8;
  *a3 = result;
  return result;
}

void sub_20D30FD60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213A98;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213A98;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D30FEAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213A98;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Punctuate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213A98;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = (char *)operator new(0x98uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)long long v9 = off_26C2158A8;
  unint64_t v11 = (unint64_t)(v9 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C205D20;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C205D20;
  }
  *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200548;
  *(void *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = 0;
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (v13)
  {
    size_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      int v15 = v14;
      if (!*(void *)(v12 + 16))
      {
LABEL_29:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_30;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "normalize");
      uint64_t v17 = *(void *)(v8 + 128);
      uint64_t v16 = *(std::__shared_weak_count **)(v8 + 136);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v18 = *(std::__shared_weak_count **)(v17 + 24);
      if (v18 && (uint64_t v19 = std::__shared_weak_count::lock(v18)) != 0)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)(v17 + 16);
        if (v21
          && (uint64_t v22 = v21 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)__p)))
        {
          uint64_t v33 = __p;
          uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)__p, (long long **)&v33);
          uint64_t v25 = *((void *)v23 + 5);
          uint64_t v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (!v16) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        if (!v16)
        {
LABEL_21:
          if (v32 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v27 = *(void *)(v25 + 296);
          uint64_t v26 = *(void *)(v25 + 304);
          if (v26) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
          }
          char v28 = *(std::__shared_weak_count **)(v10 + 136);
          *(void *)(v10 + 128) = v27;
          *(void *)(v10 + 136) = v26;
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          goto LABEL_29;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      goto LABEL_21;
    }
  }
LABEL_30:
  uint64_t v29 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v29);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D3102A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  std::__forward_list_base<std::shared_ptr<Agglomerate>>::clear(v18);
  shared_weak_owners = (std::__shared_weak_count *)v15[5].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  FrontendModule::~FrontendModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v23);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213990;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213990;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D310464(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213990;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Normalize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213990;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = (char *)operator new(0xB8uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)long long v9 = off_26C216018;
  unint64_t v11 = (unint64_t)(v9 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C1FF7C8;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C1FF7C8;
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C2010F8;
  *(void *)(v10 + 136) = 0;
  *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (!v13)
  {
    size_t v14 = 0;
    goto LABEL_35;
  }
  size_t v14 = std::__shared_weak_count::lock(v13);
  if (v14 && *(void *)(v12 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "match_prompt");
    uint64_t v15 = *(void *)(v8 + 128);
    uint64_t v16 = *(std::__shared_weak_count **)(v8 + 136);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
    if (v17)
    {
      uint64_t v33 = a4;
      BOOL v18 = std::__shared_weak_count::lock(v17);
      if (v18)
      {
        uint64_t v19 = v18;
        uint64_t v20 = *(void *)(v15 + 16);
        if (v20
          && (uint64_t v21 = v20 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v20 + 8), (unsigned __int8 *)&__p)))
        {
          p_p = &__p;
          uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, (unsigned __int8 *)&__p, (long long **)&p_p);
          uint64_t v23 = (int8x16_t *)*((void *)v22 + 5);
          uint64_t v24 = (std::__shared_weak_count *)*((void *)v22 + 6);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v23 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v23 = 0;
      }
      a4 = v33;
      if (!v16) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v23 = 0;
      if (!v16) {
        goto LABEL_27;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
LABEL_27:
    if (SHIBYTE(v41) < 0) {
      operator delete(__p);
    }
    *(void *)(v10 + 152) = v23[18].i64[1];
    *(int8x16_t *)(v10 + 160) = vextq_s8(v23[19], v23[19], 8uLL);
    *(unsigned char *)(v10 + 176) = v23[20].i8[0];
    uint64_t v26 = v23[20].i64[1];
    uint64_t v25 = v23[21].i64[0];
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = *(std::__shared_weak_count **)(v10 + 144);
    *(void *)(v10 + 136) = v26;
    *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v25;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
LABEL_35:
  *(unsigned char *)(v10 + 128) = 1;
  *(_WORD *)(v10 + 177) = 0;
  int v28 = *(unsigned __int8 *)(v8 + 144);
  long long __p = (void *)(v8 + 144);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0x8000000000000000;
  if (v28 == 1)
  {
    uint64_t v40 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(void *)(v8 + 152), "match_prompt");
    int v28 = *(unsigned __int8 *)(v8 + 144);
  }
  else
  {
    if (v28 == 2)
    {
      uint64_t v29 = *(void *)(v8 + 152);
      uint64_t v41 = *(void *)(v29 + 8);
      p_p = (void **)(v8 + 144);
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      unint64_t v38 = 0x8000000000000000;
      goto LABEL_43;
    }
    unint64_t v43 = 1;
  }
  p_p = (void **)(v8 + 144);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0x8000000000000000;
  if (v28 == 1)
  {
    uint64_t v35 = *(void *)(v8 + 152) + 8;
    goto LABEL_46;
  }
  if (v28 != 2)
  {
    unint64_t v38 = 1;
    goto LABEL_46;
  }
  uint64_t v29 = *(void *)(v8 + 152);
LABEL_43:
  uint64_t v36 = *(void *)(v29 + 8);
LABEL_46:
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&p_p))
  {
    uint64_t v30 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8 + 144, "match_prompt");
    std::string::basic_string[abi:ne180100]<0>(&__p, "enable_domain_rules_if_spell_failed");
    LOBYTE(p_p) = 0;
    *(unsigned char *)(v10 + 178) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v30, (const void **)&__p, (unsigned __int8 *)&p_p);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p);
    }
  }
  char v31 = (const std::string *)(a1 + 8);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v31);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D3109B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  int v28 = (std::__shared_weak_count *)v22[6].__vftable;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  FrontendModule::~FrontendModule(v23);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v29);
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212C80;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212C80;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D310B90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212C80;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<MatchPrompt>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212C80;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = operator new(0x1E8uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *long long v9 = off_26C2174A8;
  unint64_t v11 = (unint64_t)(v9 + 3);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  OverrideRulesLogImpl::OverrideRulesLogImpl(v9 + 3, v7, v6, v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C203660;
  *(void *)(v10 + 448) = off_26C203700;
  *(void *)(v10 + 472) = 0;
  *(void *)(v10 + 480) = 0;
  *(void *)(v10 + 46std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(_DWORD *)(v10 + 456) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "override");
  Debuggable::register_debuggable((long long *)__p, v10 + 448);
  uint64_t v12 = (const std::string *)(a1 + 8);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D310E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213620;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213620;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D310FD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213620;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesDebug>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213620;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = operator new(0x1C0uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *long long v9 = off_26C216F68;
  unint64_t v11 = (unint64_t)(v9 + 3);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  OverrideRulesLogImpl::OverrideRulesLogImpl(v9 + 3, v7, v6, v8);
  uint64_t v12 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D3111DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213468;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213468;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D311348(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213468;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRulesLog>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213468;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v9 = operator new(0x1A8uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *long long v9 = off_26C216868;
  unint64_t v11 = (unint64_t)(v9 + 3);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  OverrideRulesImpl::OverrideRulesImpl((uint64_t)(v9 + 3), v7, v6, v8);
  uint64_t v12 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D311578(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212FF0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212FF0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3116E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212FF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<OverrideRules>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212FF0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const std::string **a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = operator new(0x250uLL);
  unint64_t v10 = (unint64_t)v9;
  v9[1] = 0;
  v9[2] = 0;
  *long long v9 = off_26C215528;
  unint64_t v11 = (unint64_t)(v9 + 3);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FrontendNNModule::FrontendNNModule((uint64_t)(v9 + 3), v7, v6, v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C205AE0;
  MEMORY[0x210558E70](v10 + 128, "BreaksNN");
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C1FFD40;
  *(_OWORD *)(v10 + 376) = 0u;
  *(_OWORD *)(v10 + 392) = 0u;
  *(void *)(v10 + 560) = 0;
  *(_OWORD *)(v10 + 416) = 0u;
  *(_OWORD *)(v10 + 432) = 0u;
  *(_OWORD *)(v10 + 448) = 0u;
  *(_OWORD *)(v10 + 46std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(v10 + 480) = 0u;
  *(_OWORD *)(v10 + 496) = 0u;
  *(_OWORD *)(v10 + 512) = 0u;
  *(_OWORD *)(v10 + 528) = 0u;
  *(_OWORD *)(v10 + 54std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  std::string::size_type size = v8[5].__r_.__value_.__l.__size_;
  uint64_t v13 = *(std::__shared_weak_count **)(size + 24);
  if (!v13 || (size_t v14 = std::__shared_weak_count::lock(v13)) == 0)
  {
    char v15 = 0;
    *(unsigned char *)(v10 + 408) = 0;
    goto LABEL_36;
  }
  char v15 = v14;
  uint64_t v16 = *(void *)(size + 16);
  *(unsigned char *)(v10 + 408) = 0;
  if (!v16) {
    goto LABEL_36;
  }
  uint64_t v38 = a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "breaks_nn");
  std::string::size_type v17 = v8[5].__r_.__value_.__l.__size_;
  BOOL v18 = (std::__shared_weak_count *)v8[5].__r_.__value_.__r.__words[2];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 + 24);
  uint64_t v37 = a4;
  if (v19)
  {
    uint64_t v20 = std::__shared_weak_count::lock(v19);
    if (v20)
    {
      uint64_t v21 = *(void *)(v17 + 16);
      if (v21)
      {
        uint64_t v36 = v20;
        uint64_t v22 = v21 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)__p))
        {
          uint64_t v41 = __p;
          uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)__p, (long long **)&v41);
          uint64_t v24 = *((void *)v23 + 5);
          uint64_t v25 = (std::__shared_weak_count *)*((void *)v23 + 6);
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v25 = 0;
          uint64_t v24 = 0;
        }
        uint64_t v20 = v36;
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v24 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      if (!v18) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  if (v18) {
LABEL_22:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_23:
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(v10 + 368) = *(void *)(v24 + 328);
  uint64_t v27 = *(void *)(v24 + 296);
  uint64_t v26 = *(void *)(v24 + 304);
  a1 = v38;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  int v28 = *(std::__shared_weak_count **)(v10 + 400);
  *(void *)(v10 + 392) = v27;
  *(void *)(v10 + 400) = v26;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v30 = *(void *)(v24 + 312);
  uint64_t v29 = *(void *)(v24 + 320);
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  char v31 = *(std::__shared_weak_count **)(v10 + 384);
  *(void *)(v10 + 376) = v30;
  *(void *)(v10 + 38std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v29;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  *(unsigned char *)(v10 + 408) = *(unsigned char *)(v24 + 336);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  a4 = v37;
LABEL_36:
  std::string::operator=((std::string *)(v10 + 416), v8);
  std::string::pointer data = v8[3].__r_.__value_.__l.__data_;
  std::string::size_type v32 = v8[3].__r_.__value_.__l.__size_;
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v10 + 448);
  *(void *)(v10 + 440) = data;
  *(void *)(v10 + 448) = v32;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  *(void *)(v10 + 58std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(_OWORD *)(v10 + 568) = 0u;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), (const std::string *)(a1 + 8));
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D311B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  long long __p = (void *)(v21 + 528);
  std::vector<std::pair<unsigned long,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v21 + 527) < 0) {
    operator delete(*(void **)(v21 + 504));
  }
  std::deque<std::tuple<std::string,std::vector<std::pair<unsigned long,std::string>>,unsigned long,std::bitset<3ul>>>::~deque[abi:ne180100](v19 + 432);
  uint64_t v26 = *(std::__shared_weak_count **)(v21 + 448);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (*(char *)(v21 + 439) < 0) {
    operator delete(*v22);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v21 + 400);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  int v28 = *(std::__shared_weak_count **)(v21 + 384);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  FrontendNNModule::~FrontendNNModule(v20);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v21);
  operator delete(v29);
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213888;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213888;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D311DBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213888;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreaksNN>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213888;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = *a3;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (char *)operator new(0x188uLL);
  unint64_t v9 = (unint64_t)v8;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = off_26C216750;
  unint64_t v10 = (unint64_t)(v8 + 24);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 3) = off_26C200A98;
  v8[32] = 0;
  *((void *)v8 + 5) = v6;
  *((void *)v8 + 6) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 15) = 0;
    *(_OWORD *)(v8 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    *(void *)(v9 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200220;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    *(void *)(v9 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C201D70;
    *(void *)(v9 + 136) = 0;
    unint64_t v11 = (char *)(v9 + 144);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *((void *)v8 + 17) = 0;
    *((void *)v8 + 15) = 0;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *((void *)v8 + 3) = off_26C201D70;
    unint64_t v11 = v8 + 144;
  }
  *(_OWORD *)(v9 + 152) = xmmword_20D6B4A00;
  *(void *)(v9 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C205A80;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 18std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  *(_OWORD *)(v9 + 26std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(v9 + 280) = 0u;
  LODWORD(status) = 0;
  utext_setup((UText *)(v9 + 152), 0, (UErrorCode *)&status);
  *(void *)(v9 + 208) = &UTFText::UTFTEXT_FUNCS;
  *(void *)(v9 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v11;
  *(void *)(v9 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C2015A0;
  *(void *)(v9 + 296) = v6;
  *(void *)(v9 + 30std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v9 + 38std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(_OWORD *)(v9 + 352) = 0u;
  *(_OWORD *)(v9 + 368) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(void *)(v9 + 208) = &UTFText::UTFTEXT_FUNCS;
  *(void *)(v9 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v11;
  *(_DWORD *)(v9 + 312) = 0;
  *(unsigned char *)(v9 + 316) = 0;
  *(_DWORD *)(v9 + 160) |= 2u;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v12 = ubrk_open();
  *(void *)(v9 + 128) = v12;
  if (v12)
  {
    (*(void (**)(long long *__return_ptr))(**(void **)(v7 + 96) + 16))(&status);
    if ((void)status)
    {
      if (*((void *)&status + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&status + 1) + 8), 1uLL, memory_order_relaxed);
      }
      size_t v14 = v49;
      uint64_t v13 = v50;
      memset(&v47, 0, sizeof(v47));
      UTFRegex::UTFRegex((uint64_t)regexp, (UChar *)L"\\s*([^#]+?)\\s*(?:#.*)?");
      if (!v14)
      {
LABEL_53:
        std::basic_string<char16_t>::append(&v47, (const std::basic_string<char16_t>::value_type *)")", 1uLL);
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v33 = &v47;
        }
        else {
          uint64_t v33 = (std::basic_string<char16_t> *)v47.__r_.__value_.__r.__words[0];
        }
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int32_t v34 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        }
        else {
          int32_t v34 = v47.__r_.__value_.__r.__words[1];
        }
        UTFString::to_utf8(&__p, (const UChar *)v33, v34);
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v35 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(v52.__r_.__value_.__l.__data_) = 136315138;
          *(std::basic_string<char16_t>::size_type *)((char *)v52.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::basic_string<char16_t>::size_type)p_p;
          _os_log_impl(&dword_20CD80000, v35, OS_LOG_TYPE_DEBUG, "Sentence break exceptions: %s", (uint8_t *)&v52, 0xCu);
        }
        uint64_t v38 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(7, "Sentence break exceptions: %s", v36, v38);
        operator new();
      }
      char v15 = &v14[v13];
      while (1)
      {
        uint64_t v16 = memchr(v14, 10, v15 - v14);
        std::string::size_type v17 = v16;
        if (v16) {
          size_t v18 = v16 - v14;
        }
        else {
          size_t v18 = v15 - v14;
        }
        std::string::basic_string[abi:ne180100](&__p, v14, v18);
        LODWORD(v52.__r_.__value_.__l.__data_) = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v19 = &__p;
        }
        else {
          uint64_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v21 = utext_openUTF8(0, (const char *)v19, size, (UErrorCode *)&v52);
        if (SLODWORD(v52.__r_.__value_.__l.__data_) <= 0) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        UTFRegex::set_text((UTFRegex *)regexp, v22, 1);
        LODWORD(v52.__r_.__value_.__l.__data_) = 0;
        if (!uregex_matches(regexp[0], -1, (UErrorCode *)&v52)) {
          goto LABEL_48;
        }
        std::basic_string<char16_t>::size_type v23 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::basic_string<char16_t>::size_type v23 = v47.__r_.__value_.__l.__size_;
        }
        if (v23)
        {
          UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&v51, regexp, 1);
          std::basic_string<char16_t>::insert(&v51, (std::basic_string<char16_t>::size_type)"|", (const std::basic_string<char16_t>::value_type *)1, v24);
          std::basic_string<char16_t> v52 = v51;
          uint64_t v25 = (std::basic_string<char16_t> *)v51.__r_.__value_.__r.__words[0];
          memset(&v51, 0, sizeof(v51));
          int v26 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
          if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = &v52;
          }
          else {
            uint64_t v27 = v25;
          }
          if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::basic_string<char16_t>::size_type v28 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
          }
          else {
            std::basic_string<char16_t>::size_type v28 = v52.__r_.__value_.__l.__size_;
          }
          std::basic_string<char16_t>::append(&v47, (const std::basic_string<char16_t>::value_type *)v27, v28);
          if (v26 < 0) {
            operator delete(v25);
          }
          if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_48;
          }
          uint64_t v29 = (void *)v51.__r_.__value_.__r.__words[0];
        }
        else
        {
          UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&v52, regexp, 1);
          std::basic_string<char16_t>::insert(&v52, (std::basic_string<char16_t>::size_type)"(", (const std::basic_string<char16_t>::value_type *)3, v30);
          v51.__r_.__value_.__r.__words[0] = v52.__r_.__value_.__l.__size_;
          std::basic_string<char16_t>::size_type v31 = v52.__r_.__value_.__r.__words[0];
          *(std::basic_string<char16_t>::size_type *)((char *)v51.__r_.__value_.__r.__words + 7) = *(std::basic_string<char16_t>::size_type *)((char *)&v52.__r_.__value_.__r.__words[1] + 7);
          char v32 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
          memset(&v52, 0, sizeof(v52));
          if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            v47.__r_.__value_.__r.__words[0] = v31;
            v47.__r_.__value_.__l.__size_ = v51.__r_.__value_.__r.__words[0];
            *(std::basic_string<char16_t>::size_type *)((char *)&v47.__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v47.__r_.__value_.__s + 23) = v32;
            goto LABEL_48;
          }
          operator delete(v47.__r_.__value_.__l.__data_);
          v47.__r_.__value_.__r.__words[0] = v31;
          v47.__r_.__value_.__l.__size_ = v51.__r_.__value_.__r.__words[0];
          *(std::basic_string<char16_t>::size_type *)((char *)&v47.__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v47.__r_.__value_.__s + 23) = v32;
          if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_48;
          }
          uint64_t v29 = (void *)v52.__r_.__value_.__r.__words[0];
        }
        operator delete(v29);
LABEL_48:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        size_t v14 = v17 + 1;
        if (!v17) {
          goto LABEL_53;
        }
      }
    }
    if (*((void *)&status + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&status + 1));
    }
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v39 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      char v40 = u_errorName(U_ZERO_ERROR);
      LODWORD(status) = 136315138;
      *(void *)((char *)&status + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v40;
      _os_log_impl(&dword_20CD80000, v39, OS_LOG_TYPE_ERROR, "Unable to open sentence break iterator: %s", (uint8_t *)&status, 0xCu);
    }
    uint64_t v41 = u_errorName(U_ZERO_ERROR);
    Diagnostics::log(3, "Unable to open sentence break iterator: %s", v42, v41);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::string::operator=((std::string *)(v9 + 104), (const std::string *)(a1 + 8));
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D312654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, TokenStreamText *a11, uint64_t a12, uint64_t a13, FrontendModule *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34)
{
  TokenStreamText::~TokenStreamText(v38);
  std::unique_ptr<UTFRegex>::reset[abi:ne180100](v37, 0);
  FrontendModule::~FrontendModule(v36);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v40);
  if (v34)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212F98;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212F98;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3129E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212F98;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<BreakSentence>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212F98;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v6 = *a3;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (char *)operator new(0x90uLL);
  unint64_t v8 = (unint64_t)v7;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = off_26C2172E8;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v7 + 3) = off_26C200A98;
  v7[32] = 0;
  *((void *)v7 + 5) = v5;
  *((void *)v7 + 6) = v4;
  std::basic_string<char16_t>::size_type v31 = (FrontendModule *)(v7 + 24);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 15) = 0;
    *(_OWORD *)(v7 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C2020E0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    *((void *)v7 + 15) = 0;
    *(_OWORD *)(v7 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 3) = off_26C2020E0;
  }
  *(void *)(v8 + 128) = 0;
  *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C203290;
  std::unique_ptr<UTFTransliterator>::reset[abi:ne180100]((UTFTransliterator **)(v8 + 128), 0);
  int v9 = *(unsigned __int8 *)(v6 + 144);
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
  buf.__r_.__value_.__r.__words[2] = 0;
  uint64_t v40 = 0;
  unint64_t v41 = 0x8000000000000000;
  if (v9 == 1)
  {
    buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [18]>(*(void *)(v6 + 152));
    int v9 = *(unsigned __int8 *)(v6 + 144);
  }
  else
  {
    if (v9 == 2)
    {
      uint64_t v10 = *(void *)(v6 + 152);
      buf.__r_.__value_.__r.__words[2] = *(void *)(v10 + 8);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
      __dst.__r_.__value_.__r.__words[2] = 0;
      uint64_t v37 = 0;
      unint64_t v38 = 0x8000000000000000;
LABEL_16:
      __dst.__r_.__value_.__r.__words[2] = *(void *)(v10 + 8);
      goto LABEL_19;
    }
    unint64_t v41 = 1;
  }
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
  __dst.__r_.__value_.__r.__words[2] = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0x8000000000000000;
  if (v9 == 1)
  {
    __dst.__r_.__value_.__l.__size_ = *(void *)(v6 + 152) + 8;
  }
  else
  {
    if (v9 == 2)
    {
      uint64_t v10 = *(void *)(v6 + 152);
      goto LABEL_16;
    }
    unint64_t v38 = 1;
  }
LABEL_19:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&__dst))
  {
    goto LABEL_38;
  }
  memset(&buf, 0, sizeof(buf));
  unint64_t v11 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v6 + 144, "tokenize_fallback");
  std::string::basic_string[abi:ne180100]<0>(v33, "transliterate");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, v11, (const void **)v33, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  UTFString::to_utf16((std::basic_string<char16_t> *)&__dst, (const char *)p_p, size);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string buf = __dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!buf.__r_.__value_.__l.__size_)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      goto LABEL_38;
    }
LABEL_36:
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__dst, (char *)L"Trans");
    operator new();
  }
  if (*((unsigned char *)&buf.__r_.__value_.__s + 23)) {
    goto LABEL_36;
  }
LABEL_38:
  *(void *)(v8 + 136) = 0;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
  buf.__r_.__value_.__r.__words[2] = 0;
  uint64_t v40 = 0;
  unint64_t v41 = 0x8000000000000000;
  int v14 = *(unsigned __int8 *)(v6 + 144);
  if (v14 == 1)
  {
    uint64_t v16 = *(void *)(v6 + 152);
    buf.__r_.__value_.__l.__size_ = v16 + 8;
    buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [18]>(v16);
    int v14 = *(unsigned __int8 *)(v6 + 144);
  }
  else
  {
    if (v14 == 2)
    {
      uint64_t v15 = *(void *)(v6 + 152);
      buf.__r_.__value_.__r.__words[2] = *(void *)(v15 + 8);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
      __dst.__r_.__value_.__r.__words[2] = 0;
      uint64_t v37 = 0;
      unint64_t v38 = 0x8000000000000000;
LABEL_46:
      __dst.__r_.__value_.__r.__words[2] = *(void *)(v15 + 8);
      goto LABEL_49;
    }
    unint64_t v41 = 1;
  }
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)(v6 + 144);
  __dst.__r_.__value_.__r.__words[2] = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0x8000000000000000;
  if (v14 == 1)
  {
    __dst.__r_.__value_.__l.__size_ = *(void *)(v6 + 152) + 8;
  }
  else
  {
    if (v14 == 2)
    {
      uint64_t v15 = *(void *)(v6 + 152);
      goto LABEL_46;
    }
    unint64_t v38 = 1;
  }
LABEL_49:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&__dst))
  {
    goto LABEL_70;
  }
  std::string::size_type v17 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v6 + 144, "tokenize_fallback");
  std::string::basic_string[abi:ne180100]<0>(&__dst, "filter");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, v17, (const void **)&__dst.__r_.__value_.__l.__data_, &buf);
  std::string::size_type v19 = buf.__r_.__value_.__l.__size_;
  size_t v18 = (std::string::value_type *)buf.__r_.__value_.__r.__words[0];
  int v20 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  LODWORD(v33[0]) = buf.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[2] + 3);
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_52;
    }
LABEL_55:
    if (!v19) {
      goto LABEL_69;
    }
    goto LABEL_56;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (v20 < 0) {
    goto LABEL_55;
  }
LABEL_52:
  if (v20)
  {
LABEL_56:
    std::basic_string<char16_t>::size_type v28 = v18;
    *(void *)(v8 + 136) = uset_openEmpty();
    if (v20 < 0)
    {
      std::string::__init_copy_ctor_external(&v32, v18, v19);
    }
    else
    {
      v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
      v32.__r_.__value_.__l.__size_ = v19;
      LODWORD(v32.__r_.__value_.__r.__words[2]) = v33[0];
      *(_DWORD *)((char *)&v32.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v33 + 3);
      *((unsigned char *)&v32.__r_.__value_.__s + 23) = v20;
    }
    UTFString::split(&__dst, &v32, 0x2Cu, 0);
    uint64_t v22 = *(void *)__dst.__r_.__value_.__l.__data_;
    uint64_t v21 = *(void *)(__dst.__r_.__value_.__r.__words[0] + 8);
    if (*(void *)__dst.__r_.__value_.__l.__data_ != v21)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&buf, "-");
        UTFString::split_pair(&__p, v22, (char *)&buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        uint64_t v23 = *(void *)(v8 + 136);
        std::string::size_type v24 = __p.__r_.__value_.__r.__words[0];
        uint64_t v25 = std::stoi(*(const std::string **)__p.__r_.__value_.__l.__data_, 0, 10);
        uint64_t v26 = std::stoi(*(const std::string **)(v24 + 16), 0, 10);
        MEMORY[0x21055AB20](v23, v25, v26);
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        v22 += 24;
      }
      while (v22 != v21);
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    size_t v18 = v28;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v32.__r_.__value_.__l.__data_);
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_70;
      }
    }
    else if ((v20 & 0x80000000) == 0)
    {
      goto LABEL_70;
    }
LABEL_69:
    operator delete(v18);
  }
LABEL_70:
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::string::operator=((std::string *)(v8 + 104), (const std::string *)(a1 + 8));
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  result.n128_u64[0] = (unint64_t)v31;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_20D313234()
{
}

void sub_20D31323C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  MEMORY[0x2105595E0](v37, 0x80C40B8603338);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 121) < 0) {
    JUMPOUT(0x20D313348);
  }
  JUMPOUT(0x20D31334CLL);
}

void sub_20D3132E0()
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  if (!v0) {
    JUMPOUT(0x20D31338CLL);
  }
  JUMPOUT(0x20D313384);
}

void sub_20D3132F4()
{
}

void sub_20D313300()
{
}

void sub_20D313308(_Unwind_Exception *a1)
{
  if (*(char *)(v5 - 121) < 0) {
    operator delete(*(void **)(v5 - 144));
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v4 < 0) {
    operator delete(v8);
  }
  std::unique_ptr<UTFTransliterator>::reset[abi:ne180100](v3, 0);
  FrontendModule::~FrontendModule(v9);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v7);
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213570;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213570;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3134AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213570;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Fallback>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213570;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (char *)operator new(0x80uLL);
  unint64_t v8 = (unint64_t)v7;
  int v9 = (const std::string *)(a1 + 8);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = off_26C215DE8;
  unint64_t v10 = (unint64_t)(v7 + 24);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v7 + 3) = off_26C200A98;
  v7[32] = 0;
  *((void *)v7 + 5) = v6;
  *((void *)v7 + 6) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 15) = 0;
    *(_OWORD *)(v7 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    *(void *)(v8 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200E20;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *((void *)v7 + 15) = 0;
    *(_OWORD *)(v7 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 3) = off_26C200E20;
  }
  std::string::operator=((std::string *)(v8 + 104), v9);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v8;
  *a3 = result;
  return result;
}

void sub_20D31373C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2132B0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2132B0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D313888(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2132B0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_Hanzi>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2132B0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = (char *)operator new(0xB0uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)int v9 = off_26C216CC8;
  char v11 = v9 + 24;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
  }
  *char v11 = off_26C200E68;
  int v12 = *(unsigned __int8 *)(v8 + 144);
  std::string __p = (void *)(v8 + 144);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0x8000000000000000;
  if (v12 == 1)
  {
    uint64_t v35 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(void *)(v8 + 152), "mecab");
    int v12 = *(unsigned __int8 *)(v8 + 144);
  }
  else
  {
    if (v12 == 2)
    {
      uint64_t v13 = *(void *)(v8 + 152);
      uint64_t v36 = *(void *)(v13 + 8);
      uint64_t v29 = (void *)(v8 + 144);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      unint64_t v33 = 0x8000000000000000;
LABEL_16:
      uint64_t v31 = *(void *)(v13 + 8);
      goto LABEL_19;
    }
    unint64_t v38 = 1;
  }
  uint64_t v29 = (void *)(v8 + 144);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unint64_t v33 = 0x8000000000000000;
  if (v12 == 1)
  {
    uint64_t v30 = *(void *)(v8 + 152) + 8;
  }
  else
  {
    if (v12 == 2)
    {
      uint64_t v13 = *(void *)(v8 + 152);
      goto LABEL_16;
    }
    unint64_t v33 = 1;
  }
LABEL_19:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&v29))
  {
    *(void *)(v10 + 128) = 0;
  }
  else
  {
    int v14 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8 + 144, "mecab");
    std::string::basic_string[abi:ne180100]<0>(&__p, "pron");
    LODWORD(v29) = 0;
    *(void *)(v10 + 128) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v14, (const void **)&__p, (unsigned int *)&v29);
    if (SHIBYTE(v36) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = (void *)(v8 + 144);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0x8000000000000000;
  int v15 = *(unsigned __int8 *)(v8 + 144);
  if (v15 == 1)
  {
    uint64_t v35 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(void *)(v8 + 152), "mecab");
    int v15 = *(unsigned __int8 *)(v8 + 144);
  }
  else
  {
    if (v15 == 2)
    {
      uint64_t v16 = *(void *)(v8 + 152);
      uint64_t v36 = *(void *)(v16 + 8);
      uint64_t v29 = (void *)(v8 + 144);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      unint64_t v33 = 0x8000000000000000;
LABEL_31:
      uint64_t v31 = *(void *)(v16 + 8);
      goto LABEL_34;
    }
    unint64_t v38 = 1;
  }
  uint64_t v29 = (void *)(v8 + 144);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unint64_t v33 = 0x8000000000000000;
  if (v15 == 1)
  {
    uint64_t v30 = *(void *)(v8 + 152) + 8;
  }
  else
  {
    if (v15 == 2)
    {
      uint64_t v16 = *(void *)(v8 + 152);
      goto LABEL_31;
    }
    unint64_t v33 = 1;
  }
LABEL_34:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&v29))
  {
    *(void *)(v10 + 136) = 0;
  }
  else
  {
    std::string::size_type v17 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8 + 144, "mecab");
    std::string::basic_string[abi:ne180100]<0>(&__p, "pitch");
    LODWORD(v29) = 0;
    *(void *)(v10 + 136) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v17, (const void **)&__p, (unsigned int *)&v29);
    if (SHIBYTE(v36) < 0) {
      operator delete(__p);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v10 + 152) = 0;
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C202600;
  *(void *)(v10 + 160) = 0;
  *(void *)(v10 + 168) = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(v8 + 96) + 32))(&__p);
  std::operator+<char>();
  if (v31 >= 0) {
    size_t v18 = &v29;
  }
  else {
    size_t v18 = v29;
  }
  uint64_t v19 = MEMORY[0x210559FC0](v18);
  *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v19;
  if (!v19)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::string::size_type v24 = std::string::append(&v26, "'");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v27.__end_cap_.__value_ = (std::string *)v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__begin_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x210558DA0](exception, &v27);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(v8 + 96) + 72))(&v26);
  int v20 = v26.__r_.__value_.__s.__data_[0];
  if (v26.__r_.__value_.__s.__data_[0])
  {
    if (v26.__r_.__value_.__s.__data_[0] != 2)
    {
      if (v26.__r_.__value_.__s.__data_[0] == 1 && !*(void *)(v26.__r_.__value_.__l.__size_ + 16))
      {
        int v20 = 1;
        goto LABEL_51;
      }
      goto LABEL_50;
    }
    if (*(void *)v26.__r_.__value_.__l.__size_ != *(void *)(v26.__r_.__value_.__l.__size_ + 8))
    {
LABEL_50:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(&v27, (unsigned __int8 *)&v26);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v10 + 152));
      *(std::vector<std::string> *)(v10 + 152) = v27;
      memset(&v27, 0, sizeof(v27));
      std::basic_string<char16_t>::size_type v28 = &v27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
      int v20 = v26.__r_.__value_.__s.__data_[0];
      goto LABEL_51;
    }
    int v20 = 2;
  }
LABEL_51:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26.__r_.__value_.__l.__size_, v20);
  if (SHIBYTE(v31) < 0) {
    operator delete(v29);
  }
  uint64_t v21 = (const std::string *)(a1 + 8);
  if (SHIBYTE(v36) < 0) {
    operator delete(__p);
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v21);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = (unint64_t)v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D313F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v40 & 1) == 0)
    {
LABEL_8:
      if (a28 < 0) {
        operator delete(a23);
      }
      if (a36 < 0) {
        operator delete(a31);
      }
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
      FrontendModule::~FrontendModule(v38);
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      std::__shared_weak_count::~__shared_weak_count(v37);
      operator delete(v42);
      if (v36)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  goto LABEL_8;
}

void sub_20D3140A4()
{
  if (!v0) {
    JUMPOUT(0x20D31409CLL);
  }
  JUMPOUT(0x20D31408CLL);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213308;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213308;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3141C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213308;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213308;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = (char *)operator new(0xD8uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)int v9 = off_26C215640;
  unint64_t v11 = (unint64_t)(v9 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C205C90;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C205C90;
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200190;
  *(_WORD *)(v10 + 160) = 256;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 18std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (v13)
  {
    int v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      int v15 = v14;
      if (!*(void *)(v12 + 16))
      {
LABEL_29:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_30;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "tokenize");
      uint64_t v17 = *(void *)(v8 + 128);
      uint64_t v16 = *(std::__shared_weak_count **)(v8 + 136);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v18 = *(std::__shared_weak_count **)(v17 + 24);
      if (v18 && (uint64_t v19 = std::__shared_weak_count::lock(v18)) != 0)
      {
        int v20 = v19;
        uint64_t v21 = *(void *)(v17 + 16);
        if (v21
          && (uint64_t v22 = v21 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)__p)))
        {
          unint64_t v33 = __p;
          uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)__p, (long long **)&v33);
          uint64_t v25 = *((void *)v23 + 5);
          std::string::size_type v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          std::string::size_type v24 = 0;
          uint64_t v25 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (!v16) {
          goto LABEL_21;
        }
      }
      else
      {
        std::string::size_type v24 = 0;
        uint64_t v25 = 0;
        if (!v16)
        {
LABEL_21:
          if (v32 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v27 = *(void *)(v25 + 296);
          uint64_t v26 = *(void *)(v25 + 304);
          if (v26) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
          }
          std::basic_string<char16_t>::size_type v28 = *(std::__shared_weak_count **)(v10 + 208);
          *(void *)(v10 + 200) = v27;
          *(void *)(v10 + 208) = v26;
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          goto LABEL_29;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      goto LABEL_21;
    }
  }
LABEL_30:
  uint64_t v29 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v29);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D3145D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  shared_weak_owners = (std::__shared_weak_count *)v15[8].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  shared_owners = (std::__shared_weak_count *)v15[6].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  uint64_t v23 = (std::__shared_weak_count *)v15[5].__shared_weak_owners_;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  FrontendModule::~FrontendModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v24);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213938;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213938;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3147A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213938;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Tokenize>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213938;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = (char *)operator new(0x90uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)int v9 = off_26C2179B0;
  unint64_t v11 = (unint64_t)(v9 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C202CE0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C202CE0;
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C203DF0;
  *(void *)(v10 + 128) = 0;
  *(unsigned char *)(v10 + 136) = 0;
  uint64_t v12 = *(void *)(v8 + 184);
  uint64_t shared_component = (uint64_t **)FrontendEnvironment::get_shared_component_instance<EnvironmentBroker>(v12);
  int v15 = *(void **)(v12 + 168);
  int v14 = (void *)(v12 + 168);
  {
    __p[0] = &v23;
    operator new();
  }
  if (v14 == v16) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16[5] + 8;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "en-US");
  environment = EnvironmentBroker::get_environment(shared_component, (long long *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v19 = (const std::string *)(a1 + 8);
  *(void *)(v10 + 128) = SideChainBroker::get_side_chain(v17, (const void **)environment);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v19);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D314BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  FrontendModule::~FrontendModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v18);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void sub_20D314C2C()
{
  if (!v0) {
    JUMPOUT(0x20D314C24);
  }
  JUMPOUT(0x20D314C14);
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2136D0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2136D0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D314D50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2136D0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage_MeCab>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2136D0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = (char *)operator new(0x90uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)int v9 = off_26C216C90;
  unint64_t v11 = v9 + 24;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200D88;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C200D88;
  }
  *unint64_t v11 = off_26C2025B8;
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (v13)
  {
    int v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      int v15 = v14;
      if (!*(void *)(v12 + 16))
      {
LABEL_25:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_26;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "switch_language");
      uint64_t v17 = *(void *)(v8 + 128);
      uint64_t v16 = *(std::__shared_weak_count **)(v8 + 136);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v18 = *(std::__shared_weak_count **)(v17 + 24);
      if (v18 && (uint64_t v19 = std::__shared_weak_count::lock(v18)) != 0)
      {
        int v20 = v19;
        uint64_t v21 = *(void *)(v17 + 16);
        if (v21
          && (uint64_t v22 = v21 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)__p)))
        {
          uint64_t v30 = __p;
          uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)__p, (long long **)&v30);
          uint64_t v25 = *((void *)v23 + 5);
          std::string::size_type v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          std::string::size_type v24 = 0;
          uint64_t v25 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (!v16) {
          goto LABEL_21;
        }
      }
      else
      {
        std::string::size_type v24 = 0;
        uint64_t v25 = 0;
        if (!v16)
        {
LABEL_21:
          if (v29 < 0) {
            operator delete(__p[0]);
          }
          *(_OWORD *)(v10 + 128) = *(_OWORD *)(v25 + 296);
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          goto LABEL_25;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      goto LABEL_21;
    }
  }
LABEL_26:
  uint64_t v26 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v26);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = (unint64_t)v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D315128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  FrontendModule::~FrontendModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v21);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213258;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213258;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3152D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213258;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<SwitchLanguage>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213258;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = (char *)operator new(0x90uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)int v9 = off_26C215F38;
  unint64_t v11 = v9 + 24;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C1FF780;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C1FF780;
  }
  *unint64_t v11 = off_26C200FF8;
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (v13)
  {
    int v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      int v15 = v14;
      if (!*(void *)(v12 + 16))
      {
LABEL_25:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_26;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "audio");
      uint64_t v17 = *(void *)(v8 + 128);
      uint64_t v16 = *(std::__shared_weak_count **)(v8 + 136);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v18 = *(std::__shared_weak_count **)(v17 + 24);
      if (v18 && (uint64_t v19 = std::__shared_weak_count::lock(v18)) != 0)
      {
        int v20 = v19;
        uint64_t v21 = *(void *)(v17 + 16);
        if (v21
          && (uint64_t v22 = v21 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)__p)))
        {
          uint64_t v30 = __p;
          uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)__p, (long long **)&v30);
          uint64_t v25 = *((void *)v23 + 5);
          std::string::size_type v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          std::string::size_type v24 = 0;
          uint64_t v25 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (!v16) {
          goto LABEL_21;
        }
      }
      else
      {
        std::string::size_type v24 = 0;
        uint64_t v25 = 0;
        if (!v16)
        {
LABEL_21:
          if (v29 < 0) {
            operator delete(__p[0]);
          }
          *(_OWORD *)(v10 + 128) = *(_OWORD *)(v25 + 296);
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          goto LABEL_25;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      goto LABEL_21;
    }
  }
LABEL_26:
  uint64_t v26 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v26);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = (unint64_t)v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D3156A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  FrontendModule::~FrontendModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v21);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212C28;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212C28;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D315850(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212C28;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterAudio>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212C28;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  long long v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *a3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = v3;
  uint64_t v6 = (char *)operator new(0xA8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = off_26C216E50;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 3) = off_26C200A98;
  v6[32] = 0;
  *((void *)v6 + 5) = v4;
  *((void *)v6 + 6) = v8;
  int v9 = v6;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v6 + 15) = 0;
    *(_OWORD *)(v6 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    *((void *)v9 + 3) = off_26C2014E8;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    uint64_t v6 = v9;
  }
  else
  {
    *((void *)v6 + 15) = 0;
    *(_OWORD *)(v6 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 3) = off_26C2014E8;
  }
  *((_OWORD *)v6 + 8) = 0u;
  uint64_t v7 = v6 + 128;
  *((void *)v7 - 13) = off_26C202A00;
  *((_OWORD *)v7 + 1) = 0u;
  *((void *)v7 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(v5 + 96) + 32))(__p);
  FSTGrammar::create((const char *)__p);
}

void sub_20D3162B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, FrontendModule *a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2133B8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2133B8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D31652C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2133B8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ReplaceText_FST>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2133B8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (char *)operator new(0x98uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = off_26C215F70;
  unint64_t v63 = (unint64_t)v8;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 3) = off_26C200A98;
  v8[32] = 0;
  *((void *)v8 + 5) = v5;
  *((void *)v8 + 6) = v6;
  unint64_t v62 = (unint64_t)(v8 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 15) = 0;
    *(_OWORD *)(v8 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v63 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C1FF488;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v8 + 15) = 0;
    *(_OWORD *)(v8 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *((void *)v8 + 3) = off_26C1FF488;
  }
  *(void *)(v63 + 136) = 0;
  *(unsigned char *)(v63 + 128) = 0;
  *(void *)(v63 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C201040;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v7 + 96) + 72))(&v71);
  int v9 = *(unsigned __int8 *)(v63 + 128);
  *(unsigned char *)(v63 + 128) = v71;
  LOBYTE(v71) = v9;
  unint64_t v10 = *(uint64_t **)(v63 + 136);
  *(void *)(v63 + 136) = v72;
  uint64_t v72 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v72, v9);
  *(void *)(v63 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = uset_openEmpty();
  unint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(v63 + 128), "charset_range");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v69, (uint64_t)v11);
  std::string __str = (std::string *)(a1 + 8);
  long long v64 = v69;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  unint64_t v68 = 0x8000000000000000;
  if (v69[0])
  {
    if (v69[0] == 2)
    {
      uint64_t v66 = *v70;
    }
    else if (v69[0] == 1)
    {
      uint64_t v65 = *v70;
    }
    else
    {
      unint64_t v68 = 0;
    }
  }
  else
  {
    unint64_t v68 = 1;
  }
  uint64_t v12 = v6;
  while (1)
  {
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    *((void *)&v76 + 1) = 0;
    *(void *)&long long v76 = v69;
    unint64_t v79 = 0x8000000000000000;
    if (v69[0] == 2)
    {
      uint64_t v77 = v70[1];
    }
    else if (v69[0] == 1)
    {
      *((void *)&v76 + 1) = v70 + 1;
    }
    else
    {
      unint64_t v79 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v64, (unsigned __int8 **)&v76))
    {
      break;
    }
    uint64_t v13 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v64);
    int v14 = v13;
    if (*v13 != 2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      unint64_t v56 = *v14;
      if (v56 > 9) {
        char v57 = "number";
      }
      else {
        char v57 = off_2641152A0[v56];
      }
      std::string::basic_string[abi:ne180100]<0>(&v73, v57);
      std::string v58 = std::string::insert(&v73, 0, "type must be array, but is ");
      long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      uint64_t v77 = v58->__r_.__value_.__r.__words[2];
      long long v76 = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v76, exception);
    }
    unint64_t v80 = 0;
    uint64_t v81 = 0;
    v82[0] = 0;
    int v15 = *v13;
    if (*v13)
    {
      if (v15 != 1)
      {
        if (v15 == 2)
        {
          unint64_t v16 = (uint64_t)(*(void *)(*((void *)v13 + 1) + 8) - **((void **)v13 + 1)) >> 4;
          if (!v16) {
            goto LABEL_37;
          }
LABEL_29:
          if (v16 >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
        }
        else
        {
          unint64_t v16 = 1;
        }
        uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v82, v16);
        uint64_t v19 = (unsigned int *)v80;
        int v20 = v81;
        uint64_t v21 = v17;
        while (v20 != v19)
        {
          unsigned int v22 = *--v20;
          *((_DWORD *)v21 - 1) = v22;
          v21 -= 4;
        }
        unint64_t v80 = v21;
        uint64_t v81 = (unsigned int *)v17;
        v82[0] = &v17[4 * v18];
        if (v19) {
          operator delete(v19);
        }
        goto LABEL_37;
      }
      unint64_t v16 = *(void *)(*((void *)v13 + 1) + 16);
      if (!v16) {
        goto LABEL_37;
      }
      goto LABEL_29;
    }
LABEL_37:
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    long long v76 = (unint64_t)v14;
    unint64_t v79 = 0x8000000000000000;
    int v23 = *v14;
    if (!*v14)
    {
      unint64_t v79 = 1;
LABEL_44:
      uint64_t v74 = 0;
      *(_OWORD *)&v73.__r_.__value_.__r.__words[1] = 0uLL;
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      unint64_t v75 = 1;
      goto LABEL_45;
    }
    if (v23 == 2)
    {
      uint64_t v25 = (uint64_t *)*((void *)v14 + 1);
      uint64_t v77 = *v25;
      uint64_t v74 = 0;
      *(_OWORD *)&v73.__r_.__value_.__r.__words[1] = 0uLL;
      unint64_t v75 = 0x8000000000000000;
      std::string::size_type v26 = v25[1];
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      v73.__r_.__value_.__r.__words[2] = v26;
    }
    else
    {
      if (v23 != 1)
      {
        unint64_t v79 = 0;
        goto LABEL_44;
      }
      std::string::size_type v24 = (void *)*((void *)v14 + 1);
      *((void *)&v76 + 1) = *v24;
      uint64_t v74 = 0;
      unint64_t v75 = 0x8000000000000000;
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      *(_OWORD *)&v73.__r_.__value_.__r.__words[1] = (unint64_t)(v24 + 1);
    }
LABEL_45:
    uint64_t v27 = v81;
    while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v76, (unsigned __int8 **)&v73))
    {
      std::basic_string<char16_t>::size_type v28 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v76);
      v83[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v28, v83);
      unsigned int v29 = v83[0];
      uint64_t v30 = (char *)v81;
      if ((unint64_t)v81 >= v82[0])
      {
        char v34 = v80;
        unint64_t v35 = (((char *)v81 - v80) >> 2) + 1;
        if (v35 >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v36 = v82[0] - (void)v80;
        if ((uint64_t)(v82[0] - (void)v80) >> 1 > v35) {
          unint64_t v35 = v36 >> 1;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37) {
          unint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v82, v37);
        }
        else {
          unint64_t v38 = 0;
        }
        uint64_t v39 = (char *)v27 - v34;
        uint64_t v40 = ((char *)v27 - v34) >> 2;
        unint64_t v41 = (unsigned int *)&v38[4 * v40];
        uint64_t v42 = &v38[4 * v37];
        if (v40 == v37)
        {
          if (v39 < 1)
          {
            if (v27 == (unsigned int *)v34) {
              unint64_t v44 = 1;
            }
            else {
              unint64_t v44 = v39 >> 1;
            }
            uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v82, v44);
            unint64_t v41 = (unsigned int *)&v45[v44 & 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v42 = &v45[4 * v46];
            if (v38) {
              operator delete(v38);
            }
          }
          else
          {
            if (v40 >= -1) {
              unint64_t v43 = v40 + 1;
            }
            else {
              unint64_t v43 = v40 + 2;
            }
            v41 -= v43 >> 1;
          }
        }
        unsigned int *v41 = v29;
        std::basic_string<char16_t> v47 = (unsigned int *)v80;
        uint64_t v48 = v41;
        if (v80 != (char *)v27)
        {
          uint64_t v49 = v27;
          uint64_t v48 = v41;
          do
          {
            unsigned int v50 = *--v49;
            *--uint64_t v48 = v50;
          }
          while (v49 != v47);
        }
        int64_t v51 = (char *)v81 - (char *)v27;
        if (v81 != v27) {
          memmove(v41 + 1, v27, (char *)v81 - (char *)v27);
        }
        std::basic_string<char16_t> v52 = v80;
        unint64_t v80 = (char *)v48;
        uint64_t v81 = (unsigned int *)((char *)v41 + v51 + 4);
        v82[0] = v42;
        if (v52) {
          operator delete(v52);
        }
        uint64_t v27 = v41;
        uint64_t v6 = v12;
      }
      else if (v27 == v81)
      {
        *uint64_t v27 = v83[0];
        uint64_t v81 = v27 + 1;
      }
      else
      {
        uint64_t v31 = (char *)(v81 - 1);
        char v32 = v81;
        while (v31 < v30)
        {
          unsigned int v33 = *(_DWORD *)v31;
          v31 += 4;
          *v32++ = v33;
        }
        uint64_t v81 = v32;
        if (v30 != (char *)(v27 + 1)) {
          memmove(&v30[-4 * ((v30 - (char *)(v27 + 1)) >> 2)], v27, v30 - (char *)(v27 + 1));
        }
        *uint64_t v27 = v29;
      }
      ++v27;
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v76);
    }
    uint64_t v53 = v80;
    MEMORY[0x21055AB20](*(void *)(v63 + 144), *(unsigned int *)v80, *((unsigned int *)v80 + 1));
    operator delete(v53);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v64);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v70, v69[0]);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v63 + 104), __str);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v62;
  result.n128_u64[1] = v63;
  *a4 = result;
  return result;
}

void sub_20D316DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, FrontendModule *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212B20;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212B20;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D317010(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212B20;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<FilterText>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212B20;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v8 = *a3;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = (char *)operator new(0xA0uLL);
  unint64_t v10 = (unint64_t)v9;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)int v9 = off_26C2169B8;
  unint64_t v11 = (unint64_t)(v9 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = off_26C200A98;
  v9[32] = 0;
  *((void *)v9 + 5) = v7;
  *((void *)v9 + 6) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C200818;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 3) = off_26C200818;
  }
  *(void *)(v10 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C202170;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(std::__shared_weak_count **)(v12 + 24);
  if (v13)
  {
    int v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      int v15 = v14;
      if (!*(void *)(v12 + 16))
      {
LABEL_33:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_34;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "transliterate");
      uint64_t v17 = *(void *)(v8 + 128);
      unint64_t v16 = *(std::__shared_weak_count **)(v8 + 136);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = *(std::__shared_weak_count **)(v17 + 24);
      if (v18 && (uint64_t v19 = std::__shared_weak_count::lock(v18)) != 0)
      {
        int v20 = v19;
        uint64_t v21 = *(void *)(v17 + 16);
        if (v21
          && (uint64_t v22 = v21 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)__p)))
        {
          uint64_t v36 = __p;
          int v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)__p, (long long **)&v36);
          uint64_t v25 = (void *)*((void *)v23 + 5);
          std::string::size_type v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          std::string::size_type v24 = 0;
          uint64_t v25 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (!v16) {
          goto LABEL_21;
        }
      }
      else
      {
        std::string::size_type v24 = 0;
        uint64_t v25 = 0;
        if (!v16)
        {
LABEL_21:
          if (v35 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v27 = v25[37];
          uint64_t v26 = v25[38];
          if (v26) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
          }
          std::basic_string<char16_t>::size_type v28 = *(std::__shared_weak_count **)(v10 + 136);
          *(void *)(v10 + 128) = v27;
          *(void *)(v10 + 136) = v26;
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          uint64_t v30 = v25[39];
          uint64_t v29 = v25[40];
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v31 = *(std::__shared_weak_count **)(v10 + 152);
          *(void *)(v10 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v30;
          *(void *)(v10 + 152) = v29;
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          goto LABEL_33;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      goto LABEL_21;
    }
  }
LABEL_34:
  char v32 = (const std::string *)(a1 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=((std::string *)(v10 + 104), v32);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  result.n128_u64[0] = v11;
  result.n128_u64[1] = v10;
  *a4 = result;
  return result;
}

void sub_20D31742C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  shared_owners = (std::__shared_weak_count *)v15[6].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v15[5].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  FrontendModule::~FrontendModule(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v23);
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2130A0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2130A0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3175EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2130A0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Transliterate>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2130A0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v9 = *a3;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ParseLegacy::create(&v13, v7, v8, v9);
  unint64_t v10 = (const std::string *)(a1 + 8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::string::operator=((std::string *)(v13.n128_u64[0] + 80), v10);
  __n128 v11 = v13;
  if (v8)
  {
    __n128 v12 = v13;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    __n128 v11 = v12;
  }
  *a4 = v11;
}

void sub_20D3177AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212D30;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212D30;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D3178F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212D30;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseLegacy>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212D30;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v9 = *a3;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ParseSSML::create(&v13, v7, v8, v9);
  unint64_t v10 = (const std::string *)(a1 + 8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::string::operator=((std::string *)(v13.n128_u64[0] + 80), v10);
  __n128 v11 = v13;
  if (v8)
  {
    __n128 v12 = v13;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    __n128 v11 = v12;
  }
  *a4 = v11;
}

void sub_20D317AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2139E8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2139E8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D317C04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2139E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<ParseSSML>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2139E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v9 = *a3;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Parse::create(&v13, v7, v8, v9);
  unint64_t v10 = (const std::string *)(a1 + 8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::string::operator=((std::string *)(v13.n128_u64[0] + 80), v10);
  __n128 v11 = v13;
  if (v8)
  {
    __n128 v12 = v13;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    __n128 v11 = v12;
  }
  *a4 = v11;
}

void sub_20D317DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213780;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C213780;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D317F10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213780;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<Parse>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213780;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target_type()
{
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v9 = *a3;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TextSource::create(&v13, v7, v8, v9);
  unint64_t v10 = (const std::string *)(a1 + 8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::string::operator=((std::string *)(v13.n128_u64[0] + 80), v10);
  __n128 v11 = v13;
  if (v8)
  {
    __n128 v12 = v13;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    __n128 v11 = v12;
  }
  *a4 = v11;
}

void sub_20D3180D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212BD0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212BD0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D31821C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212BD0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1},std::allocator<void FrontendModuleBroker::register_module<TextSource>(std::string const&,std::string const&)::{lambda(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)#1}>,std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212BD0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void ReplaceText_FSTImpl::generate_tokens(ReplaceText_FSTImpl *this)
{
  uint64_t v1 = this;
  std::basic_string<char16_t> v47 = (void *)((char *)this + 32);
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v2 = &fst::TropicalWeightTpl<float>::Type(void)::type;
  long long v3 = &fst::TropicalWeightTpl<float>::Type(void)::type;
  do
  {
    if (*((unsigned char *)v1 + 8)) {
      break;
    }
    uint64_t v4 = *((void *)v1 + 2);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)v1 + 3);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v4 + 16))(&v60);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    uint64_t v48 = v60;
    if ((void)v60)
    {
      uint64_t v6 = *((void *)v1 + 2);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v1 + 3);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      uint64_t v8 = v60;
      if ((void *)(v8 + 8) == v9) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v9[5] + 8;
      }
      __n128 v11 = (const std::string *)(v10 + 24);
      __n128 v12 = (uint64_t *)*((void *)v1 + 13);
      uint64_t v49 = (uint64_t *)*((void *)v1 + 14);
      uint64_t v51 = v10;
      std::basic_string<char16_t> v52 = (std::string *)(v10 + 24);
      if (v12 != v49)
      {
        do
        {
          uint64_t v13 = *v12;
          uint64_t v54 = (std::string::size_type *)(*v12 + 56);
          if (*(char *)(*v12 + 79) >= 0) {
            int v14 = (const char *)(*v12 + 56);
          }
          else {
            int v14 = *(const char **)(*v12 + 56);
          }
          UTFRegex::UTFRegex((UTFRegex *)buf, v14);
          unsigned int v50 = v12;
          int32_t v15 = 0;
          uint64_t v53 = v13;
          while (1)
          {
            LODWORD(v59.__r_.__value_.__l.__data_) = 0;
            LODWORD(status.__r_.__value_.__l.__data_) = 0;
            int v16 = *(char *)(v10 + 47);
            uint64_t v17 = v16 >= 0 ? (const char *)v11 : *(const char **)(v10 + 24);
            int64_t v18 = v16 >= 0 ? *(unsigned __int8 *)(v10 + 47) : *(void *)(v10 + 32);
            uint64_t v19 = utext_openUTF8(0, v17, v18, (UErrorCode *)&status);
            int v20 = SLODWORD(status.__r_.__value_.__l.__data_) <= 0 ? v19 : 0;
            UTFRegex::set_text((UTFRegex *)buf, v20, 1);
            if (!uregex_find(*(URegularExpression **)buf, v15, (UErrorCode *)&v59)) {
              break;
            }
            LODWORD(status.__r_.__value_.__l.__data_) = 0;
            int32_t v21 = uregex_start(*(URegularExpression **)buf, 0, (UErrorCode *)&status);
            LODWORD(status.__r_.__value_.__l.__data_) = 0;
            int32_t v15 = uregex_end(*(URegularExpression **)buf, 0, (UErrorCode *)&status);
            int v22 = v15 - v21;
            if (v15 == v21)
            {
              int32_t v15 = v21 + 1;
            }
            else
            {
              std::string::size_type v23 = v21;
              std::string::size_type v24 = v22;
              std::string::basic_string(&v59, v11, v21, v22, (std::allocator<char> *)&status);
              (*(void (**)(void **__return_ptr))(**((void **)v1 + 16) + 8))(v57);
              if (v2[34] != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              uint64_t v25 = v53;
              uint64_t v26 = v3[33];
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
              {
                std::string::size_type v27 = (std::string::size_type)v54;
                if (*(char *)(v53 + 79) < 0) {
                  std::string::size_type v27 = *v54;
                }
                Censor::global_plaintext(&v56, (uint64_t)&v59);
                std::basic_string<char16_t>::size_type v28 = v3;
                uint64_t v29 = v2;
                uint64_t v30 = v1;
                int v31 = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
                std::string::size_type v32 = v56.__r_.__value_.__r.__words[0];
                Censor::global_plaintext(&__p, (uint64_t)v57);
                unsigned int v33 = &v56;
                if (v31 < 0) {
                  unsigned int v33 = (std::string *)v32;
                }
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                LODWORD(status.__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)status.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v27;
                WORD2(status.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&status.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v33;
                HIWORD(status.__r_.__value_.__r.__words[2]) = 2080;
                unint64_t v62 = p_p;
                _os_log_impl(&dword_20CD80000, v26, OS_LOG_TYPE_DEBUG, "Hit pattern: %s, Matched: %s, Replaced: %s", (uint8_t *)&status, 0x20u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                uint64_t v1 = v30;
                uint64_t v25 = v53;
                if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v56.__r_.__value_.__l.__data_);
                }
                uint64_t v2 = v29;
                long long v3 = v28;
              }
              char v35 = v54;
              if (*(char *)(v25 + 79) < 0) {
                char v35 = (std::string::size_type *)*v54;
              }
              Censor::global_plaintext(&status, (uint64_t)&v59);
              int v36 = SHIBYTE(status.__r_.__value_.__r.__words[2]);
              std::string::size_type v37 = status.__r_.__value_.__r.__words[0];
              Censor::global_plaintext(&v56, (uint64_t)v57);
              if (v36 >= 0) {
                p_std::string status = &status;
              }
              else {
                p_std::string status = (std::string *)v37;
              }
              uint64_t v40 = &v56;
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v40 = (std::string *)v56.__r_.__value_.__r.__words[0];
              }
              Diagnostics::log(7, "Hit pattern: %s, Matched: %s, Replaced: %s", v38, v35, p_status, v40);
              if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v56.__r_.__value_.__l.__data_);
              }
              __n128 v11 = v52;
              if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(status.__r_.__value_.__l.__data_);
              }
              if ((v58 & 0x80u) == 0) {
                unint64_t v41 = v57;
              }
              else {
                unint64_t v41 = (void **)v57[0];
              }
              if ((v58 & 0x80u) == 0) {
                std::string::size_type v42 = v58;
              }
              else {
                std::string::size_type v42 = (std::string::size_type)v57[1];
              }
              std::string::replace(v52, v23, v24, (const std::string::value_type *)v41, v42);
              if ((char)v58 < 0) {
                operator delete(v57[0]);
              }
              uint64_t v10 = v51;
              if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v59.__r_.__value_.__l.__data_);
              }
            }
          }
          UTFRegex::~UTFRegex((UTFRegex *)buf);
          __n128 v12 = v50 + 3;
        }
        while (v50 + 3 != v49);
      }
      if (v2[34] != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      unint64_t v43 = v3[33];
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        Censor::global_plaintext(&status, (uint64_t)v11);
        unint64_t v44 = (status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &status
            : (std::string *)status.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v44;
        _os_log_impl(&dword_20CD80000, v43, OS_LOG_TYPE_DEBUG, "#ReplaceText_FST: %s", buf, 0xCu);
        if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(status.__r_.__value_.__l.__data_);
        }
      }
      Censor::global_plaintext(&status, (uint64_t)v11);
      if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v46 = &status;
      }
      else {
        uint64_t v46 = (std::string *)status.__r_.__value_.__r.__words[0];
      }
      Diagnostics::log(7, "#ReplaceText_FST: %s", v45, v46);
      if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(status.__r_.__value_.__l.__data_);
      }
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v47, &v60);
    }
    else
    {
      *((unsigned char *)v1 + 8) = 1;
    }
    if (*((void *)&v60 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
    }
  }
  while (v48);
}

void sub_20D3188A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(void *)(v41 - 168)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v41 - 168));
  }
  _Unwind_Resume(exception_object);
}

void ReplaceText_FSTImpl::~ReplaceText_FSTImpl(ReplaceText_FSTImpl *this)
{
  *(void *)this = off_26C202A00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (void **)((char *)this + 104);
  std::vector<std::map<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = off_26C202A00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (void **)((char *)this + 104);
  std::vector<std::map<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  FrontendModule::~FrontendModule((void **)this);
}

void std::vector<std::map<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::map<std::string,std::string>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    long long v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 24;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v3 - 24), *((void **)v3 - 2));
        long long v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

uint64_t std::__split_buffer<std::map<std::string,std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(i - 24, *(void **)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::string>>,std::reverse_iterator<std::map<std::string,std::string>*>,std::reverse_iterator<std::map<std::string,std::string>*>,std::reverse_iterator<std::map<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  if (a3 != a5)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a7 + v8;
      *(void *)(v9 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(a3 + v8 - 24);
      uint64_t v10 = (uint64_t *)(a3 + v8 - 16);
      uint64_t v11 = *v10;
      *(void *)(a7 + v8 - 16) = *v10;
      uint64_t v12 = a7 + v8 - 16;
      uint64_t v13 = *(void *)(a3 + v8 - 8);
      *(void *)(v9 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 + v8 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v10;
        *uint64_t v10 = 0;
        *(void *)(a3 + v8 - 8) = 0;
      }
      else
      {
        *(void *)(v9 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v12;
      }
      v8 -= 24;
    }
    while (a3 + v8 != a5);
    return a7 + v8;
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<ReplaceText_FSTImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ReplaceText_FSTImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ReplaceText_FSTImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FilterText_Impl::generate_tokens(FilterText_Impl *this)
{
  int v31 = (void *)((char *)this + 32);
  uint64_t v41 = *MEMORY[0x263EF8340];
  do
  {
    if (*((unsigned char *)this + 8)) {
      break;
    }
    uint64_t v2 = *((void *)this + 2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v2 + 16))(&v36);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = v36;
    if ((void)v36)
    {
      uint64_t v5 = *((void *)this + 2);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      uint64_t v7 = v36;
      if ((void *)(v7 + 8) == v8) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v8[5] + 8;
      }
      uint64_t v10 = (std::string *)(v9 + 24);
      if (*(char *)(v9 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v9 + 24), *(void *)(v9 + 32));
      }
      else
      {
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = *(void *)(v9 + 40);
      }
      memset(&__str, 0, sizeof(__str));
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v11 = &v35;
      }
      else {
        uint64_t v11 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v35.__r_.__value_.__l.__size_;
      }
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v33.__r_.__value_.__l.__size_ = size << 32;
      if (size)
      {
        int v13 = 0;
        do
        {
          uint64_t v14 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v33);
          if (MEMORY[0x21055AB40](*((void *)this + 15), v14))
          {
            UTFString::push_back_codepoint<std::string>(&__str, v14);
          }
          else
          {
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v15 = __str.__r_.__value_.__l.__size_;
            }
            std::string::resize(&__str, (uint64_t)((v15 << 32) + 0x100000000) >> 32, 0);
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            p_str->__r_.__value_.__s.__data_[(int)v15] = 32;
          }
          unsigned int v17 = v11->__r_.__value_.__s.__data_[v13];
          unsigned int v18 = (v17 + 62);
          if (v17 <= 0xEF) {
            int v19 = 2;
          }
          else {
            int v19 = 3;
          }
          if (v17 <= 0xDF) {
            int v20 = v19;
          }
          else {
            int v20 = v19 + 1;
          }
          if (v18 >= 0x33) {
            int v20 = 1;
          }
          v13 += v20;
          LODWORD(v33.__r_.__value_.__r.__words[1]) = v13;
        }
        while (v13 != size);
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      int32_t v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        Censor::global_plaintext(&v33, (uint64_t)&v35);
        int v22 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
        std::string::size_type v23 = v33.__r_.__value_.__r.__words[0];
        Censor::global_plaintext(&__p, (uint64_t)&__str);
        std::string::size_type v24 = &v33;
        if (v22 < 0) {
          std::string::size_type v24 = (std::string *)v23;
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        unint64_t v38 = v24;
        __int16 v39 = 2080;
        uint64_t v40 = p_p;
        _os_log_impl(&dword_20CD80000, v21, OS_LOG_TYPE_DEBUG, "#[FilterText]\nIn :%s\nOut:%s", buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
      }
      Censor::global_plaintext(&v33, (uint64_t)&v35);
      int v26 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      std::string::size_type v27 = v33.__r_.__value_.__r.__words[0];
      Censor::global_plaintext(&__p, (uint64_t)&__str);
      uint64_t v29 = &v33;
      if (v26 < 0) {
        uint64_t v29 = (std::string *)v27;
      }
      uint64_t v30 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      Diagnostics::log(7, "#[FilterText]\nIn :%s\nOut:%s", v28, v29, v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      std::string::operator=(v10, &__str);
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v31, &v36);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *((unsigned char *)this + 8) = 1;
    }
    if (*((void *)&v36 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  while (v4);
}

void sub_20D31913C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  _Unwind_Resume(exception_object);
}

void UTFString::push_back_codepoint<std::string>(std::string *this, unsigned int a2)
{
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (a2 >= 0x80)
  {
    if (a2 >= 0x800)
    {
      if (a2 >> 11 >= 0x1B)
      {
        int v8 = 3;
        if (a2 >= 0x10000) {
          int v8 = 4;
        }
        if (a2 - 1114112 >= 0xFFEFE000) {
          int v7 = v8;
        }
        else {
          int v7 = 0;
        }
      }
      else
      {
        int v7 = 3;
      }
      std::string::resize(this, v7 + (int)size, 0);
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = this;
      }
      else {
        uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      if (a2 >= 0x10000)
      {
        v9->__r_.__value_.__s.__data_[(int)size] = (a2 >> 18) | 0xF0;
        unsigned int v10 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
        if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v9 = this;
        }
        else {
          uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        uint64_t v11 = (size << 32) + 0x100000000;
        int v12 = size + 2;
      }
      else
      {
        unsigned int v10 = (a2 >> 12) | 0xFFFFFFE0;
        uint64_t v11 = size << 32;
        int v12 = size + 1;
      }
      LODWORD(size) = v12;
      v9->__r_.__value_.__s.__data_[v11 >> 32] = v10;
      int v6 = (a2 >> 6) & 0x3F | 0x80;
    }
    else
    {
      std::string::resize(this, (int)size + 2, 0);
      int v6 = (a2 >> 6) | 0xC0;
    }
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = this;
    }
    else {
      int v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    v13->__r_.__value_.__s.__data_[(int)size] = v6;
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = this;
    }
    else {
      uint64_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    v14->__r_.__value_.__s.__data_[(int)size + 1] = a2 & 0x3F | 0x80;
  }
  else
  {
    std::string::resize(this, (int)size + 1, 0);
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = this;
    }
    else {
      uint64_t v5 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    v5->__r_.__value_.__s.__data_[(int)size] = a2;
  }
}

void FilterText_Impl::~FilterText_Impl(uint64_t **this)
{
  *this = (uint64_t *)off_26C201040;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 14, *((unsigned __int8 *)this + 104));
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t vars8;

  *this = (uint64_t *)off_26C201040;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 14, *((unsigned __int8 *)this + 104));
  FrontendModule::~FrontendModule((void **)this);
}

unsigned char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(unsigned char *result, unsigned int *a2)
{
  uint64_t v2 = result;
  switch(*result)
  {
    case 4:
      unsigned int v3 = result[8];
      break;
    case 5:
    case 6:
      unsigned int v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      unsigned int v3 = *((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      unint64_t v5 = *v2;
      if (v5 > 9) {
        int v6 = "number";
      }
      else {
        int v6 = off_2641152A0[v5];
      }
      std::string::basic_string[abi:ne180100]<0>(&v9, v6);
      int v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
      long long v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v10, exception);
  }
  *a2 = v3;
  return result;
}

void sub_20D319530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::__shared_ptr_emplace<FilterText_Impl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FilterText_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FilterText_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::begin(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0x8000000000000000;
  int v2 = *a2;
  if (*a2)
  {
    if (v2 == 2)
    {
      uint64_t v6 = **((void **)a2 + 1);
    }
    else if (v2 == 1)
    {
      uint64_t v5 = **((void **)a2 + 1);
    }
    else
    {
      unint64_t v8 = 0;
    }
  }
  else
  {
    unint64_t v8 = 1;
  }
  return nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::iteration_proxy_value(a1, (uint64_t)&v4);
}

uint64_t nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::end(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0x8000000000000000;
  int v2 = *a2;
  if (v2 == 2)
  {
    uint64_t v6 = *(void *)(*((void *)a2 + 1) + 8);
  }
  else if (v2 == 1)
  {
    uint64_t v5 = *((void *)a2 + 1) + 8;
  }
  else
  {
    unint64_t v8 = 1;
  }
  return nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::iteration_proxy_value(a1, (uint64_t)&v4);
}

uint64_t nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::key(unsigned __int8 **a1)
{
  int v2 = **a1;
  if (v2 == 1)
  {
    return nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key((uint64_t)a1);
  }
  else if (v2 == 2)
  {
    unint64_t v3 = (unint64_t)a1[5];
    if ((unsigned __int8 *)v3 != a1[6])
    {
      uint64_t v4 = (void **)(a1 + 7);
      std::to_string(&v6, v3);
      if (*((char *)a1 + 79) < 0) {
        operator delete(*v4);
      }
      *(_OWORD *)uint64_t v4 = *(_OWORD *)&v6.__r_.__value_.__l.__data_;
      a1[9] = (unsigned __int8 *)v6.__r_.__value_.__r.__words[2];
      a1[6] = a1[5];
    }
    return (uint64_t)(a1 + 7);
  }
  else
  {
    return (uint64_t)(a1 + 10);
  }
}

uint64_t nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::~iteration_proxy_value(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, unint64_t a2)
{
  if (*a1)
  {
    if (*a1 != 2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      unint64_t v29 = *a1;
      if (v29 > 9) {
        uint64_t v30 = "number";
      }
      else {
        uint64_t v30 = off_2641152A0[v29];
      }
      std::string::basic_string[abi:ne180100]<0>(&v34, v30);
      int v31 = std::string::insert(&v34, 0, "cannot use operator[] with a numeric argument with ");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      uint64_t v36 = v31->__r_.__value_.__r.__words[2];
      long long v35 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(305, (uint64_t)&v35, exception);
    }
    uint64_t v4 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v5 = *v4;
  }
  else
  {
    *a1 = 2;
    uint64_t v4 = (uint64_t *)operator new(0x18uLL);
    uint64_t v5 = 0;
    v4[1] = 0;
    v4[2] = 0;
    uint64_t *v4 = 0;
    *((void *)a1 + 1) = v4;
  }
  std::string v6 = (unsigned __int8 *)v4[1];
  unint64_t v7 = (uint64_t)&v6[-v5] >> 4;
  if (v7 <= a2)
  {
    v34.__r_.__value_.__s.__data_[0] = 0;
    v34.__r_.__value_.__l.__size_ = 0;
    unint64_t v8 = a2 - v7 + 1;
    if (a2 - v7 != -1)
    {
      uint64_t v9 = v4[2];
      unint64_t v10 = v4[1];
      if (v8 <= (uint64_t)(v9 - v10) >> 4)
      {
        uint64_t v16 = v10 - (void)v6;
        uint64_t v17 = a2 - v7 + 1;
        if (v8 <= (uint64_t)(v10 - (void)v6) >> 4) {
          goto LABEL_20;
        }
        uint64_t v18 = 0;
        uint64_t v17 = v16 >> 4;
        unint64_t v33 = v10 + 16 * (v8 - (v16 >> 4));
        uint64_t v19 = 16 * a2 - 16 * (v7 + (v16 >> 4)) + 16;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v10 + v18, (uint64_t)&v34);
          v18 += 16;
        }
        while (v19 != v18);
        v4[1] = v33;
        if ((unsigned __int8 *)v10 != v6)
        {
LABEL_20:
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__move_range((uint64_t)v4, (uint64_t)v6, v10, (uint64_t)&v6[16 * v8]);
          int v20 = &v34;
          if (v6 <= (unsigned __int8 *)&v34)
          {
            if (v4[1] <= (unint64_t)&v34) {
              uint64_t v21 = 0;
            }
            else {
              uint64_t v21 = a2 - v7 + 1;
            }
            int v20 = (std::string *)((char *)&v34 + 16 * v21);
          }
          do
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35, (uint64_t)v20);
            int v22 = *v6;
            unsigned __int8 *v6 = v35;
            LOBYTE(v35) = v22;
            uint64_t v23 = *((void *)v6 + 1);
            *((void *)v6 + 1) = *((void *)&v35 + 1);
            *((void *)&v35 + 1) = v23;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v35 + 1, v22);
            v6 += 16;
            --v17;
          }
          while (v17);
        }
      }
      else
      {
        uint64_t v11 = *v4;
        unint64_t v12 = v8 + ((uint64_t)(v10 - *v4) >> 4);
        if (v12 >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v9 - v11;
        if (v13 >> 3 > v12) {
          unint64_t v12 = v13 >> 3;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        unint64_t v38 = v4 + 2;
        if (v14) {
          std::string::size_type v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v4 + 2), v14);
        }
        else {
          std::string::size_type v15 = 0;
        }
        uint64_t v24 = (uint64_t)&v15[16 * ((uint64_t)&v6[-v11] >> 4)];
        *(void *)&long long v35 = v15;
        *((void *)&v35 + 1) = v24;
        uint64_t v36 = v24;
        std::string::size_type v37 = &v15[16 * v14];
        unint64_t v25 = v24 + 16 * v8;
        uint64_t v26 = 16 * a2 - 16 * v7 + 16;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v24, (uint64_t)&v34);
          v24 += 16;
          v26 -= 16;
        }
        while (v26);
        uint64_t v36 = v25;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v4, &v35, (uint64_t)v6);
        std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v35);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v34.__r_.__value_.__l.__size_, v34.__r_.__value_.__s.__data_[0]);
    uint64_t v5 = **((void **)a1 + 1);
  }
  return v5 + 16 * a2;
}

void sub_20D319B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, uint64_t a20)
{
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v20, a12);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<std::string,unsigned int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        std::string v6 = v4;
        std::vector<std::pair<std::string,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<std::string,unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer(uint64_t a1)
{
  unint64_t v3 = *(void ***)(a1 + 8);
  int v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      int v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 + v5 - a4;
  uint64_t v7 = v5;
  while (v6 < a3)
  {
    *(unsigned char *)uint64_t v7 = *(unsigned char *)v6;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    *(unsigned char *)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    v7 += 16;
    v6 += 16;
  }
  *(void *)(a1 + 8) = v7;
  if (v5 != a4)
  {
    unint64_t v8 = (uint64_t **)(v5 - 8);
    uint64_t v9 = 16 * ((v5 - a4) >> 4);
    do
    {
      uint64_t v10 = a2 + v9;
      char v11 = *(unsigned char *)(a2 + v9 - 16);
      unint64_t v12 = *(uint64_t **)(a2 + v9 - 8);
      *(unsigned char *)(v10 - 16) = 0;
      *(void *)(v10 - 8) = 0;
      int v13 = *((unsigned __int8 *)v8 - 8);
      *((unsigned char *)v8 - 8) = v11;
      unint64_t v14 = *v8;
      *unint64_t v8 = v12;
      v8 -= 2;
      std::string::size_type v15 = v14;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v13);
      v9 -= 16;
    }
    while (v9);
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 2;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  uint64_t v9 = a1[1];
  uint64_t v10 = a2[2];
  uint64_t v17 = v10;
  uint64_t v18 = v10;
  v15[0] = v7;
  v15[1] = &v17;
  void v15[2] = &v18;
  if (v9 != v3)
  {
    do
    {
      *(unsigned char *)uint64_t v10 = *(unsigned char *)v3;
      *(void *)(v10 + 8) = *(void *)(v3 + 8);
      *(unsigned char *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      v10 += 16;
      v3 += 16;
    }
    while (v3 != v9);
    uint64_t v18 = v10;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  a2[2] = v10;
  uint64_t v11 = *a1;
  *a1 = a2[1];
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return v6;
}

uint64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(uint64_t a1)
{
  if (**(unsigned char **)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v3, "cannot use key() for non-object iterators");
    nlohmann::detail::invalid_iterator::create(207, (uint64_t)v3, exception);
  }
  return *(void *)(a1 + 8) + 32;
}

void sub_20D319FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::iteration_proxy_value(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 56), "0");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 80), &byte_20D5A22AE);
  return a1;
}

BOOL NormAction_es::consume_next_token(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (*(char *)(a2 + 23) >= 0) {
    long long v3 = (const char *)a2;
  }
  else {
    long long v3 = *(const char **)a2;
  }
  while (strcmp(NormAction_es::consume_next_token(std::string const&)::multipliers[v2], v3))
  {
    if (++v2 == 3)
    {
      uint64_t v4 = off_264113E30;
      return v4 != off_264113E30;
    }
  }
  uint64_t v4 = &NormAction_es::consume_next_token(std::string const&)::multipliers[v2];
  return v4 != off_264113E30;
}

void NormAction_es::normalize(void **a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int v7 = *(char *)(a3 + 23);
  if (v7 < 0)
  {
    if (*(void *)(a3 + 8) != 7)
    {
LABEL_10:
      NormAction::normalize(a1, a2, (char *)a3, a4);
      return;
    }
    uint64_t v8 = *(int **)a3;
  }
  else
  {
    uint64_t v8 = (int *)a3;
    if (v7 != 7) {
      goto LABEL_10;
    }
  }
  int v9 = *v8;
  int v10 = *(int *)((char *)v8 + 3);
  if (v9 != 1347962190 || v10 != 1145979216) {
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CARDINAL");
  NormAction::normalize(a1, a2, (char *)__p, a4);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D31A1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *NormAction_es::ordinal@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v5 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    unint64_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    unint64_t v6 = v5;
  }
  UTFString::to_utf16(&__p, a2, v6);
  uint64_t v7 = unum_parseInt64();
  std::basic_string<char16_t>::size_type v8 = a1 + 64;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_26C214E30;
  __p.__r_.__value_.__l.__size_ = v8;
  __p.__r_.__value_.__r.__words[2] = v7;
  p_p = &__p;
  UTFString_Impl::formatNumberAsUTF8(a3, &__p);
  return std::__function::__value_func<int ()(char16_t *,unsigned long,UErrorCode *)>::~__value_func[abi:ne180100](&__p);
}

void sub_20D31A304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void *NormAction_es::cardinal@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v5 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    unint64_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    unint64_t v6 = v5;
  }
  UTFString::to_utf16(&__p, a2, v6);
  uint64_t v7 = unum_parseInt64();
  std::basic_string<char16_t>::size_type v8 = a1 + 56;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_26C214E30;
  __p.__r_.__value_.__l.__size_ = v8;
  __p.__r_.__value_.__r.__words[2] = v7;
  p_p = &__p;
  UTFString_Impl::formatNumberAsUTF8(a3, &__p);
  return std::__function::__value_func<int ()(char16_t *,unsigned long,UErrorCode *)>::~__value_func[abi:ne180100](&__p);
}

void sub_20D31A44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void NormAction_es::~NormAction_es(NormAction_es *this)
{
  *(void *)this = off_26C200350;
  uint64_t v2 = (NormAction_es *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 72));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 64));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
  JUMPOUT(0x2105595E0);
}

{
  UTFNumberFormatter *v2;
  uint64_t vars8;

  *(void *)this = off_26C200350;
  uint64_t v2 = (NormAction_es *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 72));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 64));
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_es *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
}

void UTFRegex::UTFRegex(UTFRegex *this, const char *pattern)
{
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = 0;
  UErrorCode status = U_ZERO_ERROR;
  uint64_t v4 = uregex_openC(pattern, 0, &pe, &status);
  *(void *)this = v4;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    unint64_t v6 = pattern;
    uint64_t v7 = exception;
    StringFormatter::StringFormatter((StringFormatter *)v8, "Illegal regex %s at offset %d\n", v6, pe.offset);
    MEMORY[0x210558D40](v7, v8);
    __cxa_throw(v7, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
}

void sub_20D31A63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t UTFRegex::UTFRegex(uint64_t a1, UChar *pattern)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  UErrorCode status = U_ZERO_ERROR;
  uint64_t v4 = uregex_open(pattern, -1, 0, &pe, &status);
  *(void *)a1 = v4;
  if (!v4)
  {
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__p, (char *)pattern);
    if ((v12 & 0x80u) == 0) {
      p_p = (const UChar *)&__p;
    }
    else {
      p_p = (const UChar *)__p;
    }
    if ((v12 & 0x80u) == 0) {
      int32_t v7 = v12;
    }
    else {
      int32_t v7 = v11;
    }
    UTFString::to_utf8(&v13, p_p, v7);
    if ((char)v12 < 0) {
      operator delete(__p);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    int v9 = &v13;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Illegal regex %s at offset %d\n", (const char *)v9, pe.offset);
    MEMORY[0x210558D40](exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  return a1;
}

void sub_20D31A788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      if (a22 < 0) {
        operator delete(a17);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void UTFRegex::UTFRegex(UTFRegex *this, const UTFRegex *regexp)
{
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = 0;
  UErrorCode status = U_ZERO_ERROR;
  long long v3 = uregex_clone(regexp, &status);
  *(void *)this = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v5, "Failed to clone regex");
    MEMORY[0x210558D40](exception, v5);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
}

void sub_20D31A890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void UTFRegex::~UTFRegex(UTFRegex *this)
{
  uint64_t v2 = *(URegularExpression **)this;
  if (v2) {
    uregex_close(v2);
  }
  long long v3 = (UText *)*((void *)this + 2);
  if (v3)
  {
    if (*((unsigned char *)this + 8)) {
      utext_close(v3);
    }
  }
}

BOOL UTFRegex::search(URegularExpression **this)
{
  UErrorCode status = U_ZERO_ERROR;
  int32_t v2 = uregex_end(*this, 0, &status);
  UErrorCode status = U_ZERO_ERROR;
  return uregex_find(*this, v2, &status) != 0;
}

void UTFRegex::set_text(UTFRegex *this, UText *text, char a3)
{
  UErrorCode status = U_ZERO_ERROR;
  unint64_t v6 = (UText *)*((void *)this + 2);
  if (v6 && *((unsigned char *)this + 8)) {
    utext_close(v6);
  }
  *((void *)this + 2) = text;
  *((unsigned char *)this + 8) = a3;
  uregex_setUText(*(URegularExpression **)this, text, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v8, "Failed regex match set text");
    MEMORY[0x210558D40](exception, v8);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uregex_reset(*(URegularExpression **)this, -1, &status);
}

void sub_20D31AA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void HydraAdapterModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  std::string::size_type v6 = *(void *)(*(void *)v4 + 8);
  unint64_t v5 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  std::string::size_type v166 = v6;
  v167 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(v6 + 119) < 0) {
    std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)(v6 + 96), *(void *)(v6 + 104));
  }
  else {
    std::string v165 = *(std::string *)(v6 + 96);
  }
  v158 = a2;
  uint64_t v7 = *a2;
  {
    int v9 = *(const std::string **)(*(void *)v8 + 8);
    int v10 = *(std::__shared_weak_count **)(*(void *)v8 + 16);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::operator=(&v165, v9);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  SharedObjectPool::get<TrackSubstitutions>(&v163, *(void *)(a1 + 168));
  TrackSubstitutions::reset_text(v163, (uint64_t)&v165);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
  unint64_t v12 = (v11 - 1);
  v160 = (uint64_t *)v6;
  if ((int)v11 - 1 < 0)
  {
LABEL_25:
    memset(&__str, 0, sizeof(__str));
    int v20 = *(UTFRegex **)(a1 + 304);
    LODWORD(v175.__r_.__value_.__l.__data_) = 0;
    uint64_t v21 = *(const char **)(v6 + 72);
    LODWORD(status.__r_.__value_.__l.__data_) = 0;
    int v22 = *(char *)(v6 + 95);
    if (v22 >= 0) {
      int v23 = (const char *)(v6 + 72);
    }
    else {
      int v23 = v21;
    }
    if (v22 >= 0) {
      int64_t v24 = *(unsigned __int8 *)(v6 + 95);
    }
    else {
      int64_t v24 = *(void *)(v6 + 80);
    }
    unint64_t v25 = utext_openUTF8(0, v23, v24, (UErrorCode *)&status);
    if (SLODWORD(status.__r_.__value_.__l.__data_) <= 0) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    UTFRegex::set_text(v20, v26, 1);
    if (uregex_find(*(URegularExpression **)v20, -1, (UErrorCode *)&v175))
    {
      std::string::size_type v27 = *(URegularExpression ***)(a1 + 304);
      LODWORD(status.__r_.__value_.__l.__data_) = 0;
      int32_t v28 = uregex_start(*v27, 1, (UErrorCode *)&status);
      unint64_t v29 = *(URegularExpression ***)(a1 + 304);
      LODWORD(status.__r_.__value_.__l.__data_) = 0;
      int32_t v30 = uregex_end(*v29, 1, (UErrorCode *)&status);
      std::string::basic_string(&status, (const std::string *)(v6 + 72), v28, v30 - v28, (std::allocator<char> *)&v175);
      std::string __str = status;
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      char v95 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(status.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v95, OS_LOG_TYPE_DEBUG, "Append default eos because of missing punctuation in the input", (uint8_t *)&status, 2u);
      }
      Diagnostics::log(7, "Append default eos because of missing punctuation in the input", v96);
      v175.__r_.__value_.__r.__words[0] = v6;
      v175.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&status, ".");
      HydraAdapterModule::append_eos((uint64_t **)&v175, (uint64_t)&status);
      if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(status.__r_.__value_.__l.__data_);
      }
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      goto LABEL_201;
    }
    long long v32 = 0;
    unint64_t v33 = 0;
    std::string v34 = 0;
    std::string::size_type v35 = 0;
    int v36 = 0;
    while (1)
    {
      std::string::size_type v37 = v35;
      int v38 = *std::string::at(&__str, v35);
      if ((v38 & 0x80000000) == 0 || (v38 + 62) <= 0x32u) {
        break;
      }
      int v39 = 1;
LABEL_70:
      v36 += v39;
      std::string::size_type v35 = v36;
      if (v33 >= v32)
      {
        uint64_t v49 = (v33 - v34) >> 4;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if ((v32 - v34) >> 3 > v50) {
          unint64_t v50 = (v32 - v34) >> 3;
        }
        if ((unint64_t)(v32 - v34) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v51)
        {
          if (v51 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::basic_string<char16_t> v52 = (char *)operator new(16 * v51);
        }
        else
        {
          std::basic_string<char16_t> v52 = 0;
        }
        uint64_t v53 = (std::string::size_type *)&v52[16 * v49];
        *uint64_t v53 = v37;
        v53[1] = v36;
        if (v33 == v34)
        {
          BOOL v55 = v33;
          std::string v34 = &v52[16 * v49];
        }
        else
        {
          uint64_t v54 = &v52[16 * v49];
          do
          {
            *((_OWORD *)v54 - 1) = *((_OWORD *)v33 - 1);
            v54 -= 16;
            v33 -= 16;
          }
          while (v33 != v34);
          BOOL v55 = v34;
          std::string v34 = v54;
        }
        long long v32 = &v52[16 * v51];
        unint64_t v33 = (char *)(v53 + 2);
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        *(void *)unint64_t v33 = v37;
        *((void *)v33 + 1) = v36;
        v33 += 16;
      }
      std::string::size_type v56 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v56 = __str.__r_.__value_.__l.__size_;
      }
      if (v56 <= v36)
      {
        uint64_t v59 = v33 - v34;
        if (v33 != v34)
        {
          unint64_t v60 = 0;
          int v61 = 0;
          unint64_t v62 = v59 >> 4;
          int v63 = (v59 >> 4) + 1;
          do
          {
            if (v62 <= v61) {
LABEL_396:
            }
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            int v64 = v61;
            std::string::size_type v65 = *(void *)&v34[16 * v61];
            int v66 = v63;
            do
            {
              int v67 = v66 - 2;
              if (v66 - 2 < v64) {
                goto LABEL_113;
              }
              if (v62 <= v67) {
                goto LABEL_396;
              }
              uint64_t v68 = *(void *)(a1 + 272);
              std::string::basic_string(&status, &__str, v65, *(void *)&v34[16 * v67 + 8] - v65, (std::allocator<char> *)&v175);
              uint64_t v69 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v68, (const void **)&status.__r_.__value_.__l.__data_);
              if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(status.__r_.__value_.__l.__data_);
              }
              --v66;
            }
            while (*(void *)(a1 + 272) + 8 == v69);
            int v70 = v66 - v64;
            if (v66 != v64)
            {
              unint64_t v77 = v60 + v70 - 1;
              if (v62 <= v77 || v62 <= v60) {
LABEL_398:
              }
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              std::string::basic_string(&status, &__str, *(void *)&v34[16 * v60], *(void *)&v34[16 * v77 + 8] - *(void *)&v34[16 * v60], (std::allocator<char> *)&v175);
              uint64_t v78 = std::map<std::string,std::string>::at(*(void *)(a1 + 272), (const void **)&status.__r_.__value_.__l.__data_);
              if (*(char *)(v78 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)v78, *(void *)(v78 + 8));
              }
              else
              {
                long long v79 = *(_OWORD *)v78;
                v175.__r_.__value_.__r.__words[2] = *(void *)(v78 + 16);
                *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v79;
              }
              if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v84 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v84 = v175.__r_.__value_.__l.__size_;
              }
              if (v84)
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                }
                uint64_t v85 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v87 = &v175;
                  if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v87 = (std::string *)v175.__r_.__value_.__r.__words[0];
                  }
                  p_std::string status = &status;
                  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    p_std::string status = (std::string *)status.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v87;
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_status;
                }
                uint64_t v89 = &v175;
                if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v89 = (std::string *)v175.__r_.__value_.__r.__words[0];
                }
                uint64_t v90 = &status;
                if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v90 = (std::string *)status.__r_.__value_.__r.__words[0];
                }
                v168[0] = v160;
                v168[1] = (uint64_t *)v5;
                if (v5) {
                  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                HydraAdapterModule::append_eos(v168, (uint64_t)&v175);
                if (v5) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
                }
              }
              else
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                }
                uint64_t v91 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                {
                  unint64_t v93 = &status;
                  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    unint64_t v93 = (std::string *)status.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v93;
                }
                int v94 = &status;
                if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  int v94 = (std::string *)status.__r_.__value_.__r.__words[0];
                }
              }
              if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v175.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(status.__r_.__value_.__l.__data_);
              }
              goto LABEL_151;
            }
LABEL_113:
            if (v62 <= v60) {
              goto LABEL_398;
            }
            uint64_t v71 = (std::string::size_type *)&v34[16 * v60];
            std::string::size_type v72 = v71[1] - *v71;
            std::string::basic_string(&status, &__str, *v71, v72, (std::allocator<char> *)&v175);
            if (v72 == 1)
            {
              if (*(unsigned char *)(a1 + 346))
              {
                v171[0] = v160;
                v171[1] = (uint64_t *)v5;
                if (v5) {
                  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                HydraAdapterModule::append_eos(v171, (uint64_t)&status);
                goto LABEL_146;
              }
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              unint64_t v80 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v82 = &status;
                if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v82 = (std::string *)status.__r_.__value_.__r.__words[0];
                }
                LODWORD(v175.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v175.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v82;
              }
              uint64_t v83 = &status;
              if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v83 = (std::string *)status.__r_.__value_.__r.__words[0];
              }
              v170[0] = v160;
              v170[1] = (uint64_t *)v5;
              if (v5) {
                atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&v175, ".");
              HydraAdapterModule::append_eos(v170, (uint64_t)&v175);
            }
            else
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              std::string v73 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                unint64_t v75 = &status;
                if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  unint64_t v75 = (std::string *)status.__r_.__value_.__r.__words[0];
                }
                LODWORD(v175.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v175.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v75;
              }
              long long v76 = &status;
              if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v76 = (std::string *)status.__r_.__value_.__r.__words[0];
              }
              v169[0] = v160;
              v169[1] = (uint64_t *)v5;
              if (v5) {
                atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&v175, ".");
              HydraAdapterModule::append_eos(v169, (uint64_t)&v175);
            }
            if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v175.__r_.__value_.__l.__data_);
              if (!v5) {
                goto LABEL_148;
              }
LABEL_147:
              std::__shared_weak_count::__release_shared[abi:ne180100](v5);
              goto LABEL_148;
            }
LABEL_146:
            if (v5) {
              goto LABEL_147;
            }
LABEL_148:
            if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(status.__r_.__value_.__l.__data_);
            }
            int v70 = 1;
LABEL_151:
            int v61 = v64 + v70;
            unint64_t v60 = v64 + v70;
          }
          while (v62 > v60);
        }
        std::string::size_type v6 = (std::string::size_type)v160;
        if (v34) {
          operator delete(v34);
        }
LABEL_201:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_217;
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      LODWORD(v40) = v36 + 1;
      unsigned int v43 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + v35);
      if ((v43 + 62) >= 0x33u || __str.__r_.__value_.__l.__size_ == (int)v40) {
        goto LABEL_69;
      }
      uint64_t v41 = (int)v40;
    }
    else
    {
      LODWORD(v40) = v36 + 1;
      uint64_t v41 = v36 + 1;
      p_str = &__str;
      unsigned int v43 = __str.__r_.__value_.__s.__data_[v35];
      if ((v43 + 11) < 0xCDu || HIBYTE(__str.__r_.__value_.__r.__words[2]) == (uint64_t)(int)v40) {
        goto LABEL_69;
      }
    }
    unint64_t v45 = p_str->__r_.__value_.__s.__data_[v41];
    if ((v43 & 0xF0) == 0xE0)
    {
      if ((a00000000000000[v43 & 0xF] >> (v45 >> 5)))
      {
        uint64_t v40 = v36 + 2;
        if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (__str.__r_.__value_.__l.__size_ != v40)
          {
            uint64_t v46 = (std::string *)__str.__r_.__value_.__r.__words[0];
            goto LABEL_99;
          }
        }
        else if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != v40)
        {
          uint64_t v46 = &__str;
LABEL_99:
          int v57 = v46->__r_.__value_.__s.__data_[v40];
          int v58 = v36 + 3;
LABEL_100:
          if (v57 < -64) {
            LODWORD(v40) = v58;
          }
        }
      }
    }
    else
    {
      if (v43 <= 0xDF)
      {
        if ((char)v45 < -64) {
          LODWORD(v40) = v36 + 2;
        }
        goto LABEL_69;
      }
      if ((byte_20D6DDA97[v45 >> 4] >> (v43 & 7)))
      {
        uint64_t v40 = v36 + 2;
        if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (__str.__r_.__value_.__l.__size_ == v40) {
            goto LABEL_69;
          }
          uint64_t v48 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + v40) > -65) {
            goto LABEL_69;
          }
          LODWORD(v40) = v36 + 3;
          if (__str.__r_.__value_.__l.__size_ == v36 + 3) {
            goto LABEL_69;
          }
          uint64_t v47 = (int)v40;
        }
        else
        {
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == v40) {
            goto LABEL_69;
          }
          if (__str.__r_.__value_.__s.__data_[v40] >= -64) {
            goto LABEL_69;
          }
          LODWORD(v40) = v36 + 3;
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == (uint64_t)(v36 + 3)) {
            goto LABEL_69;
          }
          uint64_t v47 = (int)v40;
          uint64_t v48 = &__str;
        }
        int v57 = v48->__r_.__value_.__s.__data_[v47];
        int v58 = v36 + 4;
        goto LABEL_100;
      }
    }
LABEL_69:
    int v39 = v40 - v36;
    goto LABEL_70;
  }
  uint64_t v13 = v12 + 1;
  uint64_t v14 = *(void *)v6 + 216 * v12;
  while (1)
  {
    if (v11 <= v12) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    if (!*(unsigned char *)(v14 + 24)) {
      break;
    }
LABEL_23:
    v14 -= 216;
    if (v13-- <= 1) {
      goto LABEL_25;
    }
  }
  int v15 = *(char *)(v14 + 23);
  int64_t v16 = *(unsigned __int8 *)(v14 + 23);
  BOOL v17 = v15 < 0;
  if ((v15 & 0x80000000) == 0)
  {
    int v18 = (unsigned __int8 *)v14;
    if (v16 != 1)
    {
      BOOL v17 = 0;
      goto LABEL_204;
    }
    goto LABEL_22;
  }
  if (*(void *)(v14 + 8) == 1)
  {
    int v18 = *(unsigned __int8 **)v14;
LABEL_22:
    if (*v18 != 35) {
      goto LABEL_204;
    }
    goto LABEL_23;
  }
  BOOL v17 = 1;
LABEL_204:
  if (*(unsigned char *)(a1 + 347))
  {
    std::string v97 = *(UTFRegex **)(a1 + 304);
    LODWORD(status.__r_.__value_.__l.__data_) = 0;
    if (v17) {
      long long v98 = *(const char **)v14;
    }
    else {
      long long v98 = (const char *)v14;
    }
    if (v17) {
      int64_t v99 = *(void *)(v14 + 8);
    }
    else {
      int64_t v99 = v16;
    }
    char v100 = utext_openUTF8(0, v98, v99, (UErrorCode *)&status);
    if (SLODWORD(status.__r_.__value_.__l.__data_) <= 0) {
      std::string v101 = v100;
    }
    else {
      std::string v101 = 0;
    }
    UTFRegex::set_text(v97, v101, 1);
    LODWORD(status.__r_.__value_.__l.__data_) = 0;
    if (!uregex_matches(*(URegularExpression **)v97, -1, (UErrorCode *)&status)) {
      goto LABEL_25;
    }
  }
  else if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(**(void **)(a1 + 288), *(void *)(*(void *)(a1 + 288) + 8), (unsigned __int8 **)v14) == *(void *)(*(void *)(a1 + 288) + 8))
  {
    goto LABEL_25;
  }
LABEL_217:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v102 = *(void *)v6;
  uint64_t v103 = *(void *)(v6 + 8);
  if (*(unsigned char *)(a1 + 345))
  {
    if (v102 != v103)
    {
      uint64_t v159 = *(void *)(v6 + 8);
      while (1)
      {
        *(_DWORD *)(v102 + 152) = 0;
        int v104 = *(char *)(a1 + 343);
        size_t v105 = *(unsigned __int8 *)(a1 + 343);
        std::string::size_type v106 = v104 < 0 ? *(void *)(a1 + 328) : *(unsigned __int8 *)(a1 + 343);
        if (!*(unsigned char *)(a1 + 344)) {
          break;
        }
        long long v107 = *(const void **)(a1 + 320);
        size_t v108 = *(void *)(a1 + 328);
        if (v104 >= 0) {
          size_t v109 = *(unsigned __int8 *)(a1 + 343);
        }
        else {
          size_t v109 = *(void *)(a1 + 328);
        }
        if (*(char *)(v102 + 23) < 0)
        {
          if (v109 == -1) {
            goto LABEL_401;
          }
          unint64_t v111 = *(char **)v102;
          if (*(void *)(v102 + 8) >= v106) {
            size_t v110 = v106;
          }
          else {
            size_t v110 = *(void *)(v102 + 8);
          }
        }
        else
        {
          if (v109 == -1) {
            goto LABEL_401;
          }
          if (*(unsigned __int8 *)(v102 + 23) >= v106) {
            size_t v110 = v106;
          }
          else {
            size_t v110 = *(unsigned __int8 *)(v102 + 23);
          }
          unint64_t v111 = (char *)v102;
        }
        if (v104 >= 0) {
          v114 = (const void *)(a1 + 320);
        }
        else {
          v114 = *(const void **)(a1 + 320);
        }
        if (v110 >= v109) {
          size_t v115 = v109;
        }
        else {
          size_t v115 = v110;
        }
        if (!memcmp(v111, v114, v115) && v110 == v109)
        {
          std::string::erase((std::string *)v102, 0, v106);
          uint64_t v103 = v159;
          size_t v105 = *(unsigned __int8 *)(a1 + 343);
          long long v107 = *(const void **)(a1 + 320);
          size_t v108 = *(void *)(a1 + 328);
          LOBYTE(v10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(unsigned char *)(a1 + 343);
        }
        else
        {
          uint64_t v103 = v159;
        }
        v117 = (std::string *)(v102 + 96);
        int v118 = (char)v104;
        if ((v104 & 0x80u) == 0) {
          size_t v119 = v105;
        }
        else {
          size_t v119 = v108;
        }
        if (*(char *)(v102 + 119) < 0)
        {
          if (v119 == -1) {
            goto LABEL_401;
          }
          v121 = *(const void **)(v102 + 96);
          if (*(void *)(v102 + 104) >= v106) {
            size_t v120 = v106;
          }
          else {
            size_t v120 = *(void *)(v102 + 104);
          }
        }
        else
        {
          if (v119 == -1) {
            goto LABEL_401;
          }
          if (*(unsigned __int8 *)(v102 + 119) >= v106) {
            size_t v120 = v106;
          }
          else {
            size_t v120 = *(unsigned __int8 *)(v102 + 119);
          }
          v121 = (const void *)(v102 + 96);
        }
        if (v118 >= 0) {
          v122 = (const void *)(a1 + 320);
        }
        else {
          v122 = v107;
        }
        if (v120 >= v119) {
          size_t v123 = v119;
        }
        else {
          size_t v123 = v120;
        }
        if (memcmp(v121, v122, v123) || v120 != v119) {
          goto LABEL_330;
        }
        std::string::size_type v124 = 0;
LABEL_329:
        std::string::erase(v117, v124, v106);
LABEL_330:
        v102 += 216;
        if (v102 == v103)
        {
          uint64_t v102 = *v160;
          uint64_t v103 = v160[1];
          goto LABEL_333;
        }
      }
      if (*(char *)(v102 + 23) < 0)
      {
        std::string::size_type v112 = *(void *)(v102 + 8);
        if (v112 > v106)
        {
          if (v104 < 0) {
            size_t v105 = *(void *)(a1 + 328);
          }
          if (v105 == -1) {
LABEL_401:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v113 = *(char **)v102;
          goto LABEL_284;
        }
      }
      else
      {
        std::string::size_type v112 = *(unsigned __int8 *)(v102 + 23);
        if (v106 < v112)
        {
          if (v104 < 0) {
            size_t v105 = *(void *)(a1 + 328);
          }
          if (v105 == -1) {
            goto LABEL_401;
          }
          uint64_t v113 = (char *)v102;
LABEL_284:
          std::string::size_type v125 = v112 - v106;
          if (v104 >= 0) {
            v126 = (const void *)(a1 + 320);
          }
          else {
            v126 = *(const void **)(a1 + 320);
          }
          if (v106 >= v105) {
            size_t v127 = v105;
          }
          else {
            size_t v127 = v106;
          }
          if (!memcmp(&v113[v125], v126, v127) && v106 == v105) {
            std::string::erase((std::string *)v102, v125, v106);
          }
        }
      }
      std::string::size_type v129 = *(unsigned __int8 *)(v102 + 119);
      if (*(char *)(v102 + 119) < 0) {
        unint64_t v130 = *(void *)(v102 + 104);
      }
      else {
        unint64_t v130 = *(unsigned __int8 *)(v102 + 119);
      }
      std::string::size_type v124 = v130 - v106;
      if (v130 <= v106) {
        goto LABEL_330;
      }
      v117 = (std::string *)(v102 + 96);
      int v131 = *(char *)(a1 + 343);
      std::string::size_type v132 = v131 >= 0 ? *(unsigned __int8 *)(a1 + 343) : *(void *)(a1 + 328);
      if ((v129 & 0x80) != 0)
      {
        if (v132 == -1) {
          goto LABEL_401;
        }
        std::string::size_type v137 = *(void *)(v102 + 104);
        BOOL v133 = v137 >= v124;
        std::string::size_type v138 = v137 - v124;
        if (!v133) {
          goto LABEL_401;
        }
        std::string::size_type v135 = v138 >= v106 ? v106 : v138;
        uint64_t v136 = v117->__r_.__value_.__r.__words[0];
      }
      else
      {
        BOOL v133 = v129 >= v124;
        std::string::size_type v134 = v129 - v124;
        if (!v133 || v132 == -1) {
          goto LABEL_401;
        }
        std::string::size_type v135 = v134 >= v106 ? v106 : v134;
        uint64_t v136 = v102 + 96;
      }
      v139 = v131 >= 0 ? (const void *)(a1 + 320) : *(const void **)(a1 + 320);
      size_t v140 = v135 >= v132 ? v132 : v135;
      if (memcmp((const void *)(v136 + v124), v139, v140) || v135 != v132) {
        goto LABEL_330;
      }
      goto LABEL_329;
    }
    uint64_t v103 = *(void *)v6;
  }
LABEL_333:
  memset(&status, 0, sizeof(status));
  FrontendFeatureLogModuleInternal::phoneme_by_words_hydra((FrontendFeatureLogModuleInternal *)&__str, (const FrontendFeature *)v102, v103);
  std::string::size_type v143 = __str.__r_.__value_.__l.__size_;
  for (uint64_t i = (long long **)__str.__r_.__value_.__r.__words[0]; i != (long long **)v143; i += 3)
  {
    memset(&v175, 0, sizeof(v175));
    v144 = *i;
    v145 = i[1];
    while (v144 != v145)
    {
      std::string::size_type v146 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
      if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v146 = v175.__r_.__value_.__l.__size_;
      }
      if (v146)
      {
        std::operator+<char>();
      }
      else if (*((char *)v144 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v144, *((void *)v144 + 1));
      }
      else
      {
        long long v147 = *v144;
        buf.__r_.__value_.__r.__words[2] = *((void *)v144 + 2);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v147;
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v149 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v149 = buf.__r_.__value_.__l.__size_;
      }
      std::string::append(&v175, (const std::string::value_type *)p_buf, v149);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      v144 = (long long *)((char *)v144 + 24);
    }
    std::string::size_type v150 = HIBYTE(status.__r_.__value_.__r.__words[2]);
    if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v150 = status.__r_.__value_.__l.__size_;
    }
    if (v150)
    {
      std::operator+<char>();
    }
    else if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&buf, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
    }
    else
    {
      std::string buf = v175;
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v151 = &buf;
    }
    else {
      v151 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v152 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v152 = buf.__r_.__value_.__l.__size_;
    }
    std::string::append(&status, (const std::string::value_type *)v151, v152);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  v153 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    Censor::global_plaintext(&v175, (uint64_t)&status);
    v154 = (v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v175
         : (std::string *)v175.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v154;
    _os_log_impl(&dword_20CD80000, v153, OS_LOG_TYPE_DEFAULT, "Hydra Adapter: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&v175, (uint64_t)&status);
  if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v156 = &v175;
  }
  else {
    v156 = (std::string *)v175.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(5, "Hydra Adapter: %s", v155, v156);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v175.__r_.__value_.__l.__data_);
  }
  Agglomerate::set<std::shared_ptr<FrontendFeature>>(*v158, &v166);
  v157 = (std::__shared_weak_count *)v158[1];
  uint64_t v161 = *v158;
  v162 = v157;
  if (v157) {
    atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v161);
  if (v162) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v162);
  }
  v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v175);
  if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(status.__r_.__value_.__l.__data_);
  }
  if (v164) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v164);
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v165.__r_.__value_.__l.__data_);
  }
  if (v167) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v167);
  }
}

void sub_20D31BCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v46 - 169) < 0) {
    operator delete(*(void **)(v46 - 192));
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (a45 < 0) {
    operator delete(__p);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  _Unwind_Resume(exception_object);
}

void SharedObjectPool::get<TrackSubstitutions>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  uint64_t v5 = a2 + 32;
  {
    std::string::size_type v6 = (std::__shared_weak_count *)operator new(0x48uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_26C216D00;
    v6[1].__shared_owners_ = 0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&v6[1].__shared_owners_;
    v6[1].__shared_weak_owners_ = 0;
    v6[2].__vftable = 0;
    v6[2].__shared_owners_ = 0;
    v6[2].__shared_weak_owners_ = 0;
    unint64_t v12 = &v14;
    if (!v7) {
      operator new();
    }
    unint64_t v12 = (char ***)off_26C2065B8;
    *(void *)&long long v13 = v6 + 1;
    *((void *)&v13 + 1) = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v8 = v13;
    long long v13 = 0uLL;
    int v9 = *(std::__shared_weak_count **)(v7 + 16);
    *(_OWORD *)(v7 + 8) = v8;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      unint64_t v12 = (char ***)off_26C2065B8;
      if (*((void *)&v13 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v11 = *(void *)(*(void *)v10 + 16);
  *a1 = *(void *)(*(void *)v10 + 8);
  a1[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D31C0B0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int32_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        std::string::size_type v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void HydraAdapterModule::append_eos(uint64_t **a1, uint64_t a2)
{
  int32_t v2 = *a1;
  unsigned int v3 = 1749801491 * ((unint64_t)((*a1)[1] - **a1) >> 3) - 1;
  if ((v3 & 0x80000000) != 0)
  {
LABEL_44:
    std::string::basic_string[abi:ne180100]<0>(&v38, " ");
    std::string::append(&v38, "#");
    std::operator+<char>();
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v21 = &v32;
    }
    else {
      uint64_t v21 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v32.__r_.__value_.__l.__size_;
    }
    std::string::append(&v38, (const std::string::value_type *)v21, size);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    int v23 = *a1;
    uint64_t v24 = (*a1)[4];
    if ((*a1)[3] != v24)
    {
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v25 = &v38;
      }
      else {
        unint64_t v25 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v26 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v26 = v38.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)(v24 - 120), (const std::string::value_type *)v25, v26);
      int v27 = *(char *)(a2 + 23);
      if (v27 >= 0) {
        int32_t v28 = (const std::string::value_type *)a2;
      }
      else {
        int32_t v28 = *(const std::string::value_type **)a2;
      }
      if (v27 >= 0) {
        std::string::size_type v29 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v29 = *(void *)(a2 + 8);
      }
      std::string::append((std::string *)(v23[4] - 96), v28, v29);
      *(_DWORD *)(v23[4] - 132) += 2;
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v4 = *v2;
      if (0x84BDA12F684BDA13 * ((v2[1] - *v2) >> 3) <= v3) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      int v5 = v3;
      uint64_t v6 = v4 + 216 * v3;
      uint64_t v7 = *(void *)(v6 + 72);
      uint64_t v8 = *(void *)(v6 + 80);
      if (v7 != v8)
      {
        int v9 = (long long *)(v7 + 8);
        do
        {
          uint64_t v10 = (uint64_t)v9 - 8;
          std::string::size_type v11 = *((void *)v9 - 1);
          v38.__r_.__value_.__r.__words[0] = v11;
          if (*((char *)v9 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v38.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v9, *((void *)v9 + 1));
            LODWORD(v11) = v38.__r_.__value_.__l.__data_;
          }
          else
          {
            long long v12 = *v9;
            uint64_t v39 = *((void *)v9 + 2);
            *(_OWORD *)&v38.__r_.__value_.__r.__words[1] = v12;
          }
          long long v13 = *(long long *)((char *)v9 + 24);
          __int16 v41 = *((_WORD *)v9 + 20);
          long long v40 = v13;
          if (SHIBYTE(v39) < 0) {
            operator delete((void *)v38.__r_.__value_.__l.__size_);
          }
          if (v11 == 9) {
            break;
          }
          int v9 = (long long *)((char *)v9 + 56);
        }
        while (v10 + 56 != v8);
        if (v11 == 9) {
          break;
        }
      }
      if (!*(unsigned char *)(v4 + 216 * v5 + 24))
      {
        int v14 = *(char *)(v6 + 23);
        if (v14 < 0)
        {
          if (*(void *)(v6 + 8) != 1) {
            goto LABEL_22;
          }
          int v15 = *(unsigned char **)v6;
        }
        else
        {
          int v15 = (unsigned char *)v6;
          if (v14 != 1) {
            goto LABEL_22;
          }
        }
        if (*v15 != 35)
        {
LABEL_22:
          PhoneFeature::PhoneFeature(&v38, (const PhoneFeature *)v6);
          MEMORY[0x210558E70](&v38, "#");
          MEMORY[0x210558E70](&v44, "#");
          uint64_t v16 = v42;
          for (uint64_t i = v43; i != v16; i -= 56)
          {
            if (*(char *)(i - 25) < 0) {
              operator delete(*(void **)(i - 48));
            }
          }
          uint64_t v43 = v16;
          PhoneFeature::PhoneFeature(&v32, (const PhoneFeature *)v6);
          std::string::operator=(&v32, (const std::string *)a2);
          std::string::operator=(&v35, (const std::string *)a2);
          uint64_t v18 = v33;
          for (uint64_t j = v34; j != v18; j -= 56)
          {
            if (*(char *)(j - 25) < 0) {
              operator delete(*(void **)(j - 48));
            }
          }
          uint64_t v34 = v18;
          int v20 = std::vector<PhoneFeature>::insert(v2, (std::string *)(*v2 + 216 * v5 + 216), &v38);
          std::vector<PhoneFeature>::insert(v2, v20 + 9, &v32);
          if (v37 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          uint64_t v48 = (void **)&v33;
          std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v48);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v32.__r_.__value_.__l.__data_);
          }
          if (v47 < 0) {
            operator delete(v46);
          }
          if (v45 < 0) {
            operator delete(v44);
          }
          v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
          std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          goto LABEL_44;
        }
      }
      unsigned int v3 = v5 - 1;
      if (v5 <= 0) {
        goto LABEL_44;
      }
    }
  }
}

void sub_20D31C51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
}

void PhoneFeature::PhoneFeature(std::string *this, const PhoneFeature *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(_OWORD *)((char *)a2 + 24);
  long long v6 = *(_OWORD *)((char *)a2 + 40);
  long long v7 = *(_OWORD *)((char *)a2 + 52);
  this[3].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)((char *)this[2].__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v7;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(this[3].__r_.__value_.__r.__words, *((void *)a2 + 9), *((void *)a2 + 10), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3));
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  int v9 = this + 5;
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = *((_OWORD *)a2 + 9);
  long long v11 = *((_OWORD *)a2 + 10);
  long long v12 = *((_OWORD *)a2 + 11);
  long long v13 = *((_OWORD *)a2 + 12);
  LODWORD(this[8].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 52);
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v12;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v13;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = v11;
}

void sub_20D31C6A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 119) < 0) {
    operator delete(*v3);
  }
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

std::string *std::vector<PhoneFeature>::insert(uint64_t *a1, std::string *this, std::string *a3)
{
  long long v4 = this;
  uint64_t v7 = *a1;
  long long v6 = (std::string *)a1[1];
  uint64_t v8 = (uint64_t)this - *a1;
  int64_t v9 = 0x84BDA12F684BDA13 * (v8 >> 3);
  long long v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if ((unint64_t)v6 >= v10)
  {
    unint64_t v19 = 0x84BDA12F684BDA13 * (((uint64_t)v6 - v7) >> 3) + 1;
    if (v19 > 0x12F684BDA12F684) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = 0x84BDA12F684BDA13 * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x97B425ED097B42) {
      unint64_t v21 = 0x12F684BDA12F684;
    }
    else {
      unint64_t v21 = v19;
    }
    char v45 = v11;
    if (v21)
    {
      int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(v21);
    }
    else
    {
      int v23 = 0;
      uint64_t v22 = 0;
    }
    uint64_t v24 = (std::string *)&v23[8 * (v8 >> 3)];
    *(void *)&long long v43 = v23;
    *((void *)&v43 + 1) = v24;
    v44[0] = v24;
    v44[1] = (std::string *)&v23[216 * v22];
    if (v9 == v22)
    {
      if (v8 < 1)
      {
        if ((std::string *)v7 == v4) {
          unint64_t v26 = 1;
        }
        else {
          unint64_t v26 = 0x97B425ED097B426 * (v8 >> 3);
        }
        uint64_t v48 = v11;
        int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(v26);
        int32_t v28 = &v27[216 * (v26 >> 2)];
        *(void *)&long long v46 = v27;
        *((void *)&v46 + 1) = v28;
        *((void *)&v47 + 1) = &v27[216 * v29];
        int32_t v30 = (long long *)*((void *)&v43 + 1);
        if (v44[0] != *((std::string **)&v43 + 1))
        {
          int v31 = &v28[(unint64_t)v44[0] - *((void *)&v43 + 1)];
          do
          {
            long long v32 = *v30;
            *((void *)v28 + 2) = *((void *)v30 + 2);
            *(_OWORD *)int32_t v28 = v32;
            *((void *)v30 + 1) = 0;
            *((void *)v30 + 2) = 0;
            *(void *)int32_t v30 = 0;
            long long v33 = *(long long *)((char *)v30 + 24);
            long long v34 = *(long long *)((char *)v30 + 40);
            *(_OWORD *)(v28 + 52) = *(long long *)((char *)v30 + 52);
            *(_OWORD *)(v28 + 40) = v34;
            *(_OWORD *)(v28 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v33;
            *((void *)v28 + 10) = 0;
            *((void *)v28 + 11) = 0;
            *((void *)v28 + 9) = 0;
            *(_OWORD *)(v28 + 72) = *(long long *)((char *)v30 + 72);
            *((void *)v28 + 11) = *((void *)v30 + 11);
            *((void *)v30 + 9) = 0;
            *((void *)v30 + 10) = 0;
            *((void *)v30 + 11) = 0;
            long long v35 = v30[6];
            *((void *)v28 + 1std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((void *)v30 + 14);
            *((_OWORD *)v28 + 6) = v35;
            *((void *)v30 + 13) = 0;
            *((void *)v30 + 1std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
            *((void *)v30 + 12) = 0;
            long long v36 = *(long long *)((char *)v30 + 120);
            *((void *)v28 + 17) = *((void *)v30 + 17);
            *(_OWORD *)(v28 + 120) = v36;
            *((void *)v30 + 16) = 0;
            *((void *)v30 + 17) = 0;
            *((void *)v30 + 15) = 0;
            *((_OWORD *)v28 + 9) = v30[9];
            long long v38 = v30[11];
            long long v37 = v30[12];
            long long v39 = v30[10];
            *((_DWORD *)v28 + 52) = *((_DWORD *)v30 + 52);
            *((_OWORD *)v28 + 11) = v38;
            *((_OWORD *)v28 + 12) = v37;
            *((_OWORD *)v28 + 10) = v39;
            v28 += 216;
            int32_t v30 = (long long *)((char *)v30 + 216);
          }
          while (v28 != v31);
          int32_t v28 = v31;
        }
        *(void *)&long long v47 = v28;
        long long v40 = v43;
        long long v41 = *(_OWORD *)v44;
        long long v43 = v46;
        *(_OWORD *)unint64_t v44 = v47;
        long long v46 = v40;
        long long v47 = v41;
        std::__split_buffer<PhoneFeature>::~__split_buffer((uint64_t)&v46);
        uint64_t v24 = v44[0];
      }
      else
      {
        uint64_t v25 = v9 + 2;
        if (v9 >= -1) {
          uint64_t v25 = v9 + 1;
        }
        v24 -= 9 * (v25 >> 1);
        *((void *)&v43 + 1) = v24;
        v44[0] = v24;
      }
    }
    PhoneFeature::PhoneFeature(v24, (const PhoneFeature *)a3);
    v44[0] += 9;
    long long v4 = (std::string *)std::vector<PhoneFeature>::__swap_out_circular_buffer(a1, &v43, (uint64_t)v4);
    std::__split_buffer<PhoneFeature>::~__split_buffer((uint64_t)&v43);
  }
  else if (this == v6)
  {
    PhoneFeature::PhoneFeature(this, (const PhoneFeature *)a3);
    a1[1] = (uint64_t)&v4[9];
  }
  else
  {
    std::vector<PhoneFeature>::__move_range((uint64_t)a1, (uint64_t)this, (unint64_t)v6, (uint64_t)&this[9]);
    if (v4 <= a3) {
      a3 += 9 * (a1[1] > (unint64_t)a3);
    }
    std::string::operator=(v4, a3);
    uint64_t v12 = v7 + 8 * (v8 >> 3);
    long long v13 = *(_OWORD *)((char *)a3[2].__r_.__value_.__r.__words + 4);
    long long v14 = *(_OWORD *)&a3[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)(v12 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)&a3[1].__r_.__value_.__l.__data_;
    *(_OWORD *)(v12 + 40) = v14;
    *(_OWORD *)(v12 + 52) = v13;
    if (v4 != a3) {
      std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)(v7 + 8 * (v8 >> 3) + 72), (uint64_t)a3[3].__r_.__value_.__l.__data_, a3[3].__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a3[3].__r_.__value_.__l.__size_ - a3[3].__r_.__value_.__r.__words[0]) >> 3));
    }
    uint64_t v15 = v7 + 8 * (v8 >> 3);
    std::string::operator=((std::string *)(v15 + 96), a3 + 4);
    std::string::operator=((std::string *)(v15 + 120), a3 + 5);
    *(_OWORD *)(v15 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)&a3[6].__r_.__value_.__l.__data_;
    long long v17 = *(_OWORD *)&a3[7].__r_.__value_.__r.__words[1];
    long long v16 = *(_OWORD *)&a3[8].__r_.__value_.__l.__data_;
    long long v18 = *(_OWORD *)&a3[6].__r_.__value_.__r.__words[2];
    *(_DWORD *)(v15 + 208) = a3[8].__r_.__value_.__r.__words[2];
    *(_OWORD *)(v15 + 176) = v17;
    *(_OWORD *)(v15 + 192) = v16;
    *(_OWORD *)(v15 + 160) = v18;
  }
  return v4;
}

void sub_20D31CA74(_Unwind_Exception *exception_object)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(exception_object);
}

void PhoneFeature::~PhoneFeature(void **this)
{
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  uint64_t v2 = this + 9;
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

__n128 std::vector<PhoneFeature>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  else
  {
    long long v6 = (long long *)(a2 + v4 - a4);
    uint64_t v7 = *(void *)(a1 + 8);
    do
    {
      long long v8 = *v6;
      *(void *)(v7 + 16) = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *(void *)long long v6 = 0;
      long long v9 = *(long long *)((char *)v6 + 24);
      long long v10 = *(long long *)((char *)v6 + 40);
      *(_OWORD *)(v7 + 52) = *(long long *)((char *)v6 + 52);
      *(_OWORD *)(v7 + 40) = v10;
      *(_OWORD *)(v7 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v9;
      *(void *)(v7 + 80) = 0;
      *(void *)(v7 + 88) = 0;
      *(void *)(v7 + 72) = 0;
      *(_OWORD *)(v7 + 72) = *(long long *)((char *)v6 + 72);
      *(void *)(v7 + 88) = *((void *)v6 + 11);
      *((void *)v6 + 9) = 0;
      *((void *)v6 + 10) = 0;
      *((void *)v6 + 11) = 0;
      long long v11 = v6[6];
      *(void *)(v7 + 112) = *((void *)v6 + 14);
      *(_OWORD *)(v7 + 96) = v11;
      *((void *)v6 + 13) = 0;
      *((void *)v6 + 1std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *((void *)v6 + 12) = 0;
      long long v12 = *(long long *)((char *)v6 + 120);
      *(void *)(v7 + 136) = *((void *)v6 + 17);
      *(_OWORD *)(v7 + 120) = v12;
      *((void *)v6 + 16) = 0;
      *((void *)v6 + 17) = 0;
      *((void *)v6 + 15) = 0;
      *(_OWORD *)(v7 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v6[9];
      long long v14 = v6[11];
      __n128 result = (__n128)v6[12];
      long long v15 = v6[10];
      *(_DWORD *)(v7 + 208) = *((_DWORD *)v6 + 52);
      *(_OWORD *)(v7 + 176) = v14;
      *(__n128 *)(v7 + 192) = result;
      *(_OWORD *)(v7 + 160) = v15;
      v7 += 216;
      long long v6 = (long long *)((char *)v6 + 216);
    }
    while ((unint64_t)v6 < a3);
  }
  *(void *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    uint64_t v16 = 0;
    uint64_t v17 = -8 * ((v4 - a4) >> 3);
    do
    {
      uint64_t v18 = v4 + v16;
      unint64_t v19 = (void **)(v4 + v16 - 216);
      if (*(char *)(v4 + v16 - 193) < 0) {
        operator delete(*v19);
      }
      uint64_t v20 = v5 + v16;
      unint64_t v21 = (long long *)(v5 + v16 - 216);
      long long v22 = *v21;
      *(void *)(v4 + v16 - 200) = *(void *)(v5 + v16 - 200);
      *(_OWORD *)unint64_t v19 = v22;
      *(unsigned char *)(v5 + v16 - 193) = 0;
      *(unsigned char *)unint64_t v21 = 0;
      long long v23 = *(_OWORD *)(v5 + v16 - 192);
      long long v24 = *(_OWORD *)(v5 + v16 - 176);
      *(_OWORD *)(v18 - 16std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(v5 + v16 - 164);
      *(_OWORD *)(v18 - 192) = v23;
      *(_OWORD *)(v18 - 176) = v24;
      std::vector<MarkerRecord>::__vdeallocate((uint64_t *)(v18 - 144));
      *(_OWORD *)(v18 - 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(v5 + v16 - 144);
      *(void *)(v18 - 128) = *(void *)(v5 + v16 - 128);
      *(void *)(v20 - 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v20 - 136) = 0;
      *(void *)(v20 - 128) = 0;
      uint64_t v25 = v18 - 120;
      if (*(char *)(v18 - 97) < 0) {
        operator delete(*(void **)v25);
      }
      uint64_t v26 = v5 + v16;
      long long v27 = *(_OWORD *)(v20 - 120);
      *(void *)(v25 + 16) = *(void *)(v20 - 104);
      *(_OWORD *)uint64_t v25 = v27;
      *(unsigned char *)(v5 + v16 - 97) = 0;
      *(unsigned char *)(v20 - 120) = 0;
      uint64_t v28 = v4 + v16;
      uint64_t v29 = (void **)(v4 + v16 - 96);
      if (*(char *)(v4 + v16 - 73) < 0) {
        operator delete(*v29);
      }
      long long v30 = *(_OWORD *)(v26 - 96);
      *(void *)(v4 + v16 - 80) = *(void *)(v26 - 80);
      *(_OWORD *)uint64_t v29 = v30;
      *(unsigned char *)(v26 - 73) = 0;
      *(unsigned char *)(v26 - 96) = 0;
      *(_OWORD *)(v28 - 72) = *(_OWORD *)(v26 - 72);
      __n128 result = *(__n128 *)(v26 - 56);
      long long v31 = *(_OWORD *)(v26 - 40);
      long long v32 = *(_OWORD *)(v26 - 24);
      *(_DWORD *)(v28 - 8) = *(_DWORD *)(v26 - 8);
      *(_OWORD *)(v28 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v32;
      *(_OWORD *)(v28 - 40) = v31;
      *(__n128 *)(v28 - 56) = result;
      v16 -= 216;
    }
    while (v17 != v16);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(unint64_t a1)
{
  if (a1 >= 0x12F684BDA12F685) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(216 * a1);
}

uint64_t std::vector<PhoneFeature>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhoneFeature>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v7;
  uint64_t v8 = a1[1];
  uint64_t v9 = a2[2];
  if (v8 != v3)
  {
    do
    {
      long long v10 = *(_OWORD *)v3;
      *(void *)(v9 + 16) = *(void *)(v3 + 16);
      *(_OWORD *)uint64_t v9 = v10;
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)uint64_t v3 = 0;
      long long v11 = *(_OWORD *)(v3 + 24);
      long long v12 = *(_OWORD *)(v3 + 40);
      *(_OWORD *)(v9 + 52) = *(_OWORD *)(v3 + 52);
      *(_OWORD *)(v9 + 40) = v12;
      *(_OWORD *)(v9 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v11;
      *(void *)(v9 + 80) = 0;
      *(void *)(v9 + 88) = 0;
      *(void *)(v9 + 72) = 0;
      *(_OWORD *)(v9 + 72) = *(_OWORD *)(v3 + 72);
      *(void *)(v9 + 88) = *(void *)(v3 + 88);
      *(void *)(v3 + 72) = 0;
      *(void *)(v3 + 80) = 0;
      *(void *)(v3 + 88) = 0;
      long long v13 = *(_OWORD *)(v3 + 96);
      *(void *)(v9 + 112) = *(void *)(v3 + 112);
      *(_OWORD *)(v9 + 96) = v13;
      *(void *)(v3 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v3 + 112) = 0;
      *(void *)(v3 + 96) = 0;
      long long v14 = *(_OWORD *)(v3 + 120);
      *(void *)(v9 + 136) = *(void *)(v3 + 136);
      *(_OWORD *)(v9 + 120) = v14;
      *(void *)(v3 + 128) = 0;
      *(void *)(v3 + 136) = 0;
      *(void *)(v3 + 120) = 0;
      *(_OWORD *)(v9 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(v3 + 144);
      long long v16 = *(_OWORD *)(v3 + 176);
      long long v15 = *(_OWORD *)(v3 + 192);
      long long v17 = *(_OWORD *)(v3 + 160);
      *(_DWORD *)(v9 + 208) = *(_DWORD *)(v3 + 208);
      *(_OWORD *)(v9 + 176) = v16;
      *(_OWORD *)(v9 + 192) = v15;
      *(_OWORD *)(v9 + 160) = v17;
      v9 += 216;
      v3 += 216;
    }
    while (v3 != v8);
    uint64_t v7 = a2[1];
  }
  a2[2] = v9;
  uint64_t v18 = *a1;
  *a1 = v7;
  a2[1] = v18;
  uint64_t v19 = a1[1];
  a1[1] = a2[2];
  a2[2] = v19;
  uint64_t v20 = a1[2];
  a1[2] = a2[3];
  a2[3] = v20;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__split_buffer<PhoneFeature>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 216;
    std::allocator<PhoneFeature>::destroy[abi:ne180100](i - 216);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhoneFeature>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 216)
  {
    long long v8 = *(_OWORD *)(a3 - 216);
    *(void *)(result - 200) = *(void *)(a3 - 200);
    *(_OWORD *)(result - 216) = v8;
    *(void *)(a3 - 208) = 0;
    *(void *)(a3 - 200) = 0;
    *(void *)(a3 - 216) = 0;
    long long v9 = *(_OWORD *)(a3 - 192);
    long long v10 = *(_OWORD *)(a3 - 176);
    *(_OWORD *)(result - 16std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(a3 - 164);
    *(_OWORD *)(result - 192) = v9;
    *(_OWORD *)(result - 176) = v10;
    *(void *)(result - 136) = 0;
    *(void *)(result - 128) = 0;
    *(void *)(result - 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *(_OWORD *)(result - 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(a3 - 144);
    *(void *)(result - 128) = *(void *)(a3 - 128);
    *(void *)(a3 - 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *(void *)(a3 - 136) = 0;
    *(void *)(a3 - 128) = 0;
    long long v11 = *(_OWORD *)(a3 - 120);
    *(void *)(result - 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(a3 - 104);
    *(_OWORD *)(result - 120) = v11;
    *(void *)(a3 - 112) = 0;
    *(void *)(a3 - 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *(void *)(a3 - 120) = 0;
    long long v12 = *(_OWORD *)(a3 - 96);
    *(void *)(result - 80) = *(void *)(a3 - 80);
    *(_OWORD *)(result - 96) = v12;
    *(void *)(a3 - 88) = 0;
    *(void *)(a3 - 80) = 0;
    *(void *)(a3 - 96) = 0;
    *(_OWORD *)(result - 72) = *(_OWORD *)(a3 - 72);
    long long v13 = *(_OWORD *)(a3 - 40);
    long long v14 = *(_OWORD *)(a3 - 24);
    int v15 = *(_DWORD *)(a3 - 8);
    *(_OWORD *)(result - 56) = *(_OWORD *)(a3 - 56);
    *(_DWORD *)(result - 8) = v15;
    *(_OWORD *)(result - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v14;
    *(_OWORD *)(result - 40) = v13;
    result -= 216;
  }
  return result;
}

void Agglomerate::ItemHolder<std::shared_ptr<TrackSubstitutions>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2065B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<TrackSubstitutions>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2065B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void HydraAdapterModule::~HydraAdapterModule(void **this)
{
  *this = off_26C2023D8;
  if (*((char *)this + 343) < 0) {
    operator delete(this[40]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[39];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[37];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[35];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  Module::~Module((Module *)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *this = off_26C2023D8;
  if (*((char *)this + 343) < 0) {
    operator delete(this[40]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[39];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[37];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[35];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  Module::~Module((Module *)this);
}

void std::shared_ptr<UTFRegex>::reset[abi:ne180100]<UTFRegex,void>()
{
}

void sub_20D31D24C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    UTFRegex::~UTFRegex(v1);
    MEMORY[0x2105595E0]();
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<std::string>,0>(std::string *a1, unsigned __int8 *a2, const void **a3, long long **a4)
{
  if (*a2 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v10 = *a2;
    if (v10 > 9) {
      long long v11 = "number";
    }
    else {
      long long v11 = off_2641152A0[v10];
    }
    std::string::basic_string[abi:ne180100]<0>(&v14, v11);
    long long v12 = std::string::insert(&v14, 0, "cannot use value() with ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v12->__r_.__value_.__r.__words[2];
    long long v17 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v17, exception);
  }
  *(void *)&long long v17 = a2;
  std::string::size_type v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = 0x8000000000000000;
  *((void *)&v17 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)a2 + 1), a3);
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = (unint64_t)a2;
  v14.__r_.__value_.__r.__words[2] = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0x8000000000000000;
  int v7 = *a2;
  if (v7 == 2)
  {
    v14.__r_.__value_.__r.__words[2] = *(void *)(*((void *)a2 + 1) + 8);
  }
  else if (v7 == 1)
  {
    v14.__r_.__value_.__l.__size_ = *((void *)a2 + 1) + 8;
  }
  else
  {
    unint64_t v16 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v17, (unsigned __int8 **)&v14))
  {
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  }
  else
  {
    long long v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>((std::vector<std::string> *)a1, v8);
  }
}

void sub_20D31D414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<std::vector<std::string>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2199A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2199A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(std::vector<std::string> *a1, unsigned __int8 *a2)
{
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  if (*a2 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v34 = *a2;
    if (v34 > 9) {
      long long v35 = "number";
    }
    else {
      long long v35 = off_2641152A0[v34];
    }
    std::string::basic_string[abi:ne180100]<0>(&__v, v35);
    long long v36 = std::string::insert((std::string *)&__v, 0, "type must be array, but is ");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v51.__end_ = (std::__split_buffer<std::string>::pointer)v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__first_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v51, exception);
  }
  memset(&v48, 0, sizeof(v48));
  std::vector<std::string>::reserve(&v48, (uint64_t)(*(void *)(*((void *)a2 + 1) + 8) - **((void **)a2 + 1)) >> 4);
  long long v43 = a2;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  unint64_t v47 = 0x8000000000000000;
  int v4 = *a2;
  if (!*a2)
  {
    unint64_t v47 = 1;
LABEL_9:
    long long v38 = a2;
    long long v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    unint64_t v42 = 1;
    goto LABEL_10;
  }
  if (v4 == 2)
  {
    uint64_t v6 = (uint64_t *)*((void *)a2 + 1);
    uint64_t v45 = *v6;
    long long v38 = a2;
    long long v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    unint64_t v42 = 0x8000000000000000;
    uint64_t v40 = v6[1];
    goto LABEL_10;
  }
  if (v4 != 1)
  {
    unint64_t v47 = 0;
    goto LABEL_9;
  }
  unint64_t v5 = (uint64_t *)*((void *)a2 + 1);
  uint64_t v44 = *v5;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0x8000000000000000;
  long long v38 = a2;
  long long v39 = v5 + 1;
LABEL_10:
  std::vector<std::string>::pointer end = v48.__end_;
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v43, &v38))
  {
    long long v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(&v43);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v8, &__p);
    if (v48.__end_ >= v48.__end_cap_.__value_)
    {
      std::vector<std::string>::pointer begin = v48.__begin_;
      unint64_t v11 = 1 - 0x5555555555555555 * (((char *)v48.__end_ - (char *)v48.__begin_) >> 3);
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3) > v11) {
        unint64_t v11 = 0x5555555555555556 * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v11;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v48.__end_cap_;
      if (v12) {
        long long v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v48.__end_cap_, v12);
      }
      else {
        long long v13 = 0;
      }
      int64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
      std::__split_buffer<std::string>::pointer v16 = (std::string *)((char *)v13 + 8 * (((char *)end - (char *)begin) >> 3));
      __v.__first_ = v13;
      __v.__begin_ = v16;
      __v.__end_ = v16;
      __v.__end_cap_.__value_ = &v13[v12];
      if (v15 == v12)
      {
        if ((char *)end - (char *)begin < 1)
        {
          if (end == begin) {
            unint64_t v18 = 1;
          }
          else {
            unint64_t v18 = 0x5555555555555556 * (((char *)end - (char *)begin) >> 3);
          }
          v51.__end_cap_.__value_ = __v.__end_cap_.__value_;
          uint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)__v.__end_cap_.__value_, v18);
          std::__split_buffer<std::string>::pointer v21 = __v.__begin_;
          int64_t v22 = (char *)__v.__end_ - (char *)__v.__begin_;
          if (__v.__end_ == __v.__begin_)
          {
            int64x2_t v28 = vdupq_n_s64((unint64_t)__v.__begin_);
            int v24 = &v19[v18 >> 2];
          }
          else
          {
            uint64_t v23 = v22 / 24;
            int v24 = &v19[(v18 >> 2) + v22 / 24];
            uint64_t v25 = 24 * v23;
            uint64_t v26 = &v19[v18 >> 2];
            do
            {
              long long v27 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
              v26->__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
              ++v26;
              v21->__r_.__value_.__l.__size_ = 0;
              v21->__r_.__value_.__r.__words[2] = 0;
              v21->__r_.__value_.__r.__words[0] = 0;
              ++v21;
              v25 -= 24;
            }
            while (v25);
            int64x2_t v28 = *(int64x2_t *)&__v.__begin_;
          }
          first = __v.__first_;
          value = __v.__end_cap_.__value_;
          __v.__first_ = v19;
          __v.__begin_ = &v19[v18 >> 2];
          *(int64x2_t *)&v51.__begin_ = v28;
          __v.__end_ = v24;
          __v.__end_cap_.__value_ = &v19[v20];
          v51.__first_ = first;
          v51.__end_cap_.__value_ = value;
          std::__split_buffer<std::string>::~__split_buffer(&v51);
          std::__split_buffer<std::string>::pointer v16 = __v.__end_;
        }
        else
        {
          if (v15 >= -1) {
            uint64_t v17 = v15 + 1;
          }
          else {
            uint64_t v17 = v15 + 2;
          }
          v16 -= v17 >> 1;
          __v.__begin_ = v16;
          __v.__end_ = v16;
        }
      }
      long long v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v16->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v31;
      memset(&__p, 0, sizeof(__p));
      ++__v.__end_;
      std::vector<std::string>::pointer v32 = std::vector<std::string>::__swap_out_circular_buffer(&v48, &__v, end);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      std::vector<std::string>::pointer end = v32 + 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else if (end == v48.__end_)
    {
      long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v14;
      ++end;
      memset(&__p, 0, sizeof(__p));
      v48.__end_ = end;
    }
    else
    {
      std::vector<std::string>::__move_range(&v48, end, v48.__end_, end + 1);
      if (SHIBYTE(end->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end->__r_.__value_.__l.__data_);
      }
      long long v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
      ++end;
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(&v43);
  }
  std::vector<std::string>::__vdeallocate(a1);
  *a1 = v48;
  memset(&v48, 0, sizeof(v48));
  v51.__first_ = (std::__split_buffer<std::string>::pointer)&v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
}

void sub_20D31D974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__split_buffer<std::string> *a21,void **a22,uint64_t a23,uint64_t a24,void *__pa,uint64_t a26,uint64_t a27,void ***a28)
{
  a28 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_20D31DA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  uint64_t p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_20D31DB50(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2195E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2195E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

UTFRegex *std::unique_ptr<UTFRegex>::reset[abi:ne180100](UTFRegex **a1, UTFRegex *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    UTFRegex::~UTFRegex(result);
    JUMPOUT(0x2105595E0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<UTFRegex *,std::shared_ptr<UTFRegex>::__shared_ptr_default_delete<UTFRegex,UTFRegex>,std::allocator<UTFRegex>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

UTFRegex *std::__shared_ptr_pointer<UTFRegex *,std::shared_ptr<UTFRegex>::__shared_ptr_default_delete<UTFRegex,UTFRegex>,std::allocator<UTFRegex>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(UTFRegex **)(a1 + 24);
  if (result)
  {
    UTFRegex::~UTFRegex(result);
    JUMPOUT(0x2105595E0);
  }
  return result;
}

void std::__shared_ptr_pointer<UTFRegex *,std::shared_ptr<UTFRegex>::__shared_ptr_default_delete<UTFRegex,UTFRegex>,std::allocator<UTFRegex>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void HydraAdapterPersistentModule::~HydraAdapterPersistentModule(HydraAdapterPersistentModule *this)
{
  *(void *)this = off_26C2048D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = off_26C2048D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void VoiceConfig::get_param<std::string>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(&v6, a2, a3, a4);
  if ((_BYTE)v6)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)&v6, a1);
    int v5 = v6;
  }
  else
  {
    int v5 = 0;
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v5);
}

void sub_20D31DE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v9 + 8), a9);
  _Unwind_Resume(a1);
}

unsigned char *boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>(int64x2_t *a1, unsigned char *__dst, unsigned char *__src, unsigned char *a4)
{
  uint64_t v6 = __dst;
  uint64_t v8 = a1[2].i64[1];
  if (v8) {
    BOOL v9 = __dst == __src;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    do
    {
      *v6++ = *(unsigned char *)(*(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a1[2].i64[0] & 0xFFF));
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_20D6B4A10);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1);
      uint64_t v8 = a1[2].i64[1];
    }
    while (v8 && v6 != __src);
  }
  if (v8)
  {
    if (v6 != a4)
    {
      while (1)
      {
        uint64_t v10 = (char *)a1[1].i64[0];
        unint64_t v11 = (char *)a1->i64[1];
        if (v10 == v11) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = ((v10 - v11) << 9) - 1;
        }
        unint64_t v13 = a1[2].u64[0];
        unint64_t v14 = a1[2].i64[1] + v13;
        if (v12 != v14) {
          goto LABEL_44;
        }
        if (v13 >= 0x1000) {
          break;
        }
        unint64_t v26 = (v10 - v11) >> 3;
        uint64_t v27 = a1[1].i64[1];
        uint64_t v28 = v27 - a1->i64[0];
        if (v26 >= v28 >> 3)
        {
          if (v27 == a1->i64[0]) {
            unint64_t v29 = 1;
          }
          else {
            unint64_t v29 = v28 >> 2;
          }
          int v58 = &a1[1].i8[8];
          v56.i64[0] = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v29);
          v56.i64[1] = v56.i64[0] + 8 * v26;
          v57.i64[0] = v56.i64[1];
          v57.i64[1] = v56.i64[0] + 8 * v30;
          BOOL v55 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v56, &v55);
          for (uint64_t i = (void *)a1[1].i64[0];
                i != (void *)a1->i64[1];
                std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)&v56, i))
          {
            --i;
          }
          std::vector<std::string>::pointer v32 = (void *)a1->i64[0];
          int64x2_t v33 = v57;
          *a1 = v56;
          a1[1] = v33;
          if (v32) {
            operator delete(v32);
          }
          goto LABEL_43;
        }
        if ((char *)v27 == v10)
        {
          v56.i64[0] = (uint64_t)operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v56);
          uint64_t v44 = (void *)a1->i64[1];
          unint64_t v18 = (char *)a1[1].i64[0];
          uint64_t v45 = *v44;
          int64_t v15 = (char *)(v44 + 1);
          uint64_t v16 = v45;
          a1->i64[1] = (uint64_t)v15;
          if (v18 != (char *)a1[1].i64[1]) {
            goto LABEL_42;
          }
          uint64_t v19 = (uint64_t)&v15[-a1->i64[0]];
          if ((unint64_t)v15 <= a1->i64[0])
          {
            if (v18 == (char *)a1->i64[0]) {
              unint64_t v47 = 1;
            }
            else {
              unint64_t v47 = (uint64_t)&v18[-a1->i64[0]] >> 2;
            }
            long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v47);
            long long v37 = &v35[8 * (v47 >> 2)];
            std::vector<std::string> v48 = (uint64_t *)a1->i64[1];
            unint64_t v18 = v37;
            uint64_t v49 = a1[1].i64[0] - (void)v48;
            if (v49)
            {
              unint64_t v18 = &v37[v49 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v50 = 8 * (v49 >> 3);
              std::__split_buffer<std::string> v51 = &v35[8 * (v47 >> 2)];
              do
              {
                uint64_t v52 = *v48++;
                *(void *)std::__split_buffer<std::string> v51 = v52;
                v51 += 8;
                v50 -= 8;
              }
              while (v50);
            }
            goto LABEL_39;
          }
LABEL_16:
          uint64_t v20 = v19 >> 3;
          BOOL v21 = v19 >> 3 < -1;
          uint64_t v22 = (v19 >> 3) + 2;
          if (v21) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = v20 + 1;
          }
          int v24 = &v15[-8 * (v23 >> 1)];
          int64_t v25 = v18 - v15;
          if (v18 != v15)
          {
            memmove(&v15[-8 * (v23 >> 1)], v15, v18 - v15);
            int64_t v15 = (char *)a1->i64[1];
          }
          unint64_t v18 = &v24[v25];
          a1->i64[1] = (uint64_t)&v15[-8 * (v23 >> 1)];
          a1[1].i64[0] = (uint64_t)&v24[v25];
          goto LABEL_42;
        }
        v56.i64[0] = (uint64_t)operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v56);
LABEL_43:
        unint64_t v11 = (char *)a1->i64[1];
        unint64_t v14 = a1[2].i64[1] + a1[2].i64[0];
LABEL_44:
        *(unsigned char *)(*(void *)&v11[(v14 >> 9) & 0x7FFFFFFFFFFFF8] + (v14 & 0xFFF)) = *v6;
        unint64_t v46 = a1[2].u64[0];
        ++a1[2].i64[1];
        *v6++ = *(unsigned char *)(*(void *)(a1->i64[1] + ((v46 >> 9) & 0x7FFFFFFFFFFFF8)) + (v46 & 0xFFF));
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_20D6B4A10);
        std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1);
        if (v6 == a4) {
          return a4;
        }
      }
      a1[2].i64[0] = v13 - 4096;
      uint64_t v17 = *(void *)v11;
      int64_t v15 = v11 + 8;
      uint64_t v16 = v17;
      a1->i64[1] = (uint64_t)v15;
      unint64_t v18 = (char *)a1[1].i64[0];
      if (v18 != (char *)a1[1].i64[1])
      {
LABEL_42:
        *(void *)unint64_t v18 = v16;
        a1[1].i64[0] += 8;
        goto LABEL_43;
      }
      uint64_t v19 = (uint64_t)&v15[-a1->i64[0]];
      if ((unint64_t)v15 <= a1->i64[0])
      {
        if (v18 == (char *)a1->i64[0]) {
          unint64_t v34 = 1;
        }
        else {
          unint64_t v34 = (uint64_t)&v18[-a1->i64[0]] >> 2;
        }
        long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v34);
        long long v37 = &v35[8 * (v34 >> 2)];
        long long v38 = (uint64_t *)a1->i64[1];
        unint64_t v18 = v37;
        uint64_t v39 = a1[1].i64[0] - (void)v38;
        if (v39)
        {
          unint64_t v18 = &v37[v39 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v40 = 8 * (v39 >> 3);
          uint64_t v41 = &v35[8 * (v34 >> 2)];
          do
          {
            uint64_t v42 = *v38++;
            *(void *)uint64_t v41 = v42;
            v41 += 8;
            v40 -= 8;
          }
          while (v40);
        }
LABEL_39:
        long long v43 = (void *)a1->i64[0];
        a1->i64[0] = (uint64_t)v35;
        a1->i64[1] = (uint64_t)v37;
        a1[1].i64[0] = (uint64_t)v18;
        a1[1].i64[1] = (uint64_t)&v35[8 * v36];
        if (v43)
        {
          operator delete(v43);
          unint64_t v18 = (char *)a1[1].i64[0];
        }
        goto LABEL_42;
      }
      goto LABEL_16;
    }
  }
  else if (v6 != __src)
  {
    size_t v53 = a4 - __src;
    if (v53) {
      memmove(v6, __src, v53);
    }
    return &v6[v53];
  }
  return a4;
}

void sub_20D31E278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<char>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 4096;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      int v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  uint64_t v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    int64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

void *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a2 - *result + a3;
    if (v3 < 1) {
      result -= (unint64_t)(4095 - v3) >> 12;
    }
    else {
      result += (unint64_t)v3 >> 12;
    }
  }
  return result;
}

void **std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](void **result, unsigned char *__src, unsigned char *a3)
{
  uint64_t v3 = *result;
  unint64_t v5 = (void *)**result;
  unint64_t v4 = (char *)(*result)[1];
  if (__src != a3)
  {
    int v7 = __src;
    uint64_t v8 = result;
    uint64_t v9 = (char *)*v5;
    while (1)
    {
      uint64_t v10 = v9 - v4 + 4096;
      if (a3 - v7 >= v10) {
        size_t v11 = v10;
      }
      else {
        size_t v11 = a3 - v7;
      }
      if (v11) {
        uint64_t result = (void **)memmove(v4, v7, v11);
      }
      v7 += v11;
      if (v7 == a3) {
        break;
      }
      uint64_t v12 = (char *)v5[1];
      ++v5;
      uint64_t v9 = v12;
      unint64_t v4 = v12;
    }
    v4 += v11;
    if ((char *)(*v5 + 4096) == v4)
    {
      size_t v13 = (char *)v5[1];
      ++v5;
      unint64_t v4 = v13;
    }
    uint64_t v3 = *v8;
  }
  void *v3 = v5;
  v3[1] = v4;
  return result;
}

void std::deque<char>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1)
{
  if (*(void *)(a1 + 32) >= 0x2000uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 4096;
  }
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void ***)(v2 + 8);
  unint64_t v4 = (char *)v3[11];
  if (v4) {
    unint64_t v5 = (void **)(v4 - 80);
  }
  else {
    unint64_t v5 = 0;
  }
  if (v5 != v3)
  {
    do
    {
      uint64_t v6 = (char *)v5[11];
      if (v6) {
        uint64_t v3 = (void **)(v6 - 80);
      }
      else {
        uint64_t v3 = 0;
      }
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(v5 + 3);
      if (*((char *)v5 + 23) < 0) {
        operator delete(*v5);
      }
      operator delete(v5);
      unint64_t v5 = v3;
    }
    while (v3 != *(void ***)(v2 + 8));
  }
  operator delete(v3);
  MEMORY[0x2105595E0](v2, 0x1020C402FC1992ELL);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Emotion>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    unint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,Emotion>,std::__map_value_compare<std::string,std::__value_type<std::string,Emotion>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Emotion>>>::__construct_node<std::pair<std::string const,Emotion> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  int v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  *((_WORD *)v6 + 28) = *(_WORD *)(a3 + 24);
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_20D31E86C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Emotion>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

uint64_t FrontendNNModule::is_punc_in_the_phone()
{
  return 0;
}

BOOL FrontendNNModule::create_token_for_empty_markup(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = (std::string *)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
  }
  UTFString::lstrip(&v29);
  UTFString::rstrip(&v29);
  std::string::size_type size = v29.__r_.__value_.__l.__size_;
  uint64_t v9 = (void *)v29.__r_.__value_.__r.__words[0];
  std::string::size_type v10 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  int v11 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
  memset(&v29, 0, sizeof(v29));
  if (v11 >= 0) {
    std::string::size_type size = v10;
  }
  if (size)
  {
    BOOL v12 = 0;
    if (v11 < 0) {
      goto LABEL_39;
    }
    return v12;
  }
  size_t v13 = *(long long **)(*(void *)(a2 + 48) + 16);
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v13, *((void *)v13 + 1));
  }
  else
  {
    long long v14 = *v13;
    __str.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  }
  std::string::size_type v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v15 = __str.__r_.__value_.__l.__size_;
  }
  std::string::size_type v17 = *(void *)(a2 + 8);
  std::string::size_type v18 = *(void *)(a2 + 16);
  BOOL v12 = v15 >= v18 + v17;
  if (v15 >= v18 + v17)
  {
    std::string::basic_string(&v27, &__str, v17, v18, (std::allocator<char> *)&v26);
    uint64_t v19 = *(unsigned __int8 *)(a2 + 47);
    if ((v19 & 0x80u) == 0) {
      uint64_t v20 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      uint64_t v20 = *(void *)(a2 + 32);
    }
    std::string::size_type v21 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v21 = v27.__r_.__value_.__l.__size_;
    }
    if (v20 == v21)
    {
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &v27;
      }
      else {
        uint64_t v22 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      if ((v19 & 0x80) == 0)
      {
        if (*(unsigned char *)(a2 + 47))
        {
          uint64_t v23 = v7;
          while (v23->__r_.__value_.__s.__data_[0] == v22->__r_.__value_.__s.__data_[0])
          {
            uint64_t v23 = (std::string *)((char *)v23 + 1);
            uint64_t v22 = (std::string *)((char *)v22 + 1);
            if (!--v19) {
              goto LABEL_32;
            }
          }
          goto LABEL_31;
        }
LABEL_32:
        if (a4)
        {
          int v24 = operator new(0x30uLL);
          *(_OWORD *)((char *)v24 + 8) = 0u;
          v24[2] = 0u;
          *(void *)int v24 = off_26C215330;
          *((void *)v24 + 3) = v24 + 2;
          *(void *)&long long v26 = (char *)v24 + 24;
          *((void *)&v26 + 1) = v24;
          Agglomerate::set<TokenBasicItem>((uint64_t)v24 + 24, (long long *)a2);
          std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)(a1 + 32), &v26);
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v24);
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        char v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        goto LABEL_37;
      }
      if (!memcmp(v7->__r_.__value_.__l.__data_, v22, *(void *)(a2 + 32))) {
        goto LABEL_32;
      }
    }
LABEL_31:
    std::string::operator=(v7, &v27);
    goto LABEL_32;
  }
LABEL_37:
  if (v16 < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v11 & 0x80000000) == 0) {
      return v12;
    }
    goto LABEL_39;
  }
  if (v11 < 0) {
LABEL_39:
  }
    operator delete(v9);
  return v12;
}

void sub_20D31EAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void FrontendNNModule::reconstruct_from_tokens(void *a1, uint64_t **a2, unsigned int a3)
{
  uint64_t v218 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v207, &byte_20D5A22AE);
  std::string::basic_string[abi:ne180100]<0>(&v209, &byte_20D5A22AE);
  v206[0] = a3;
  uint64_t v4 = **a2;
  if ((*a2)[1] == v4) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  if (*(void *)(v4 + 24) == -1) {
    goto LABEL_373;
  }
  memset(&v205, 0, sizeof(v205));
  FrontendNNModule::passdown_leading_empty_token((FrontendNNModule *)a1);
  memset(&v204, 0, sizeof(v204));
  uint64_t v5 = **a2;
  if ((*a2)[1] == v5)
  {
    unint64_t v6 = 0;
    goto LABEL_316;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  BOOL v181 = 0;
  char v180 = 0;
  v179 = a1 + 4;
  do
  {
    uint64_t v8 = operator new(0x30uLL);
    *(_OWORD *)((char *)v8 + 8) = 0u;
    unint64_t v186 = v7;
    uint64_t v9 = (std::string *)(v5 + 40 * v7);
    *(void *)uint64_t v8 = off_26C215330;
    v8[2] = 0u;
    *((void *)v8 + 3) = v8 + 2;
    *(void *)&long long v203 = (char *)v8 + 24;
    *((void *)&v203 + 1) = v8;
    v202 = 0;
    long long __p = 0u;
    long long v201 = 0u;
    std::string::pointer data = v9[1].__r_.__value_.__l.__data_;
    unint64_t v191 = v6;
    v183 = v9;
    std::string::size_type size = v9[1].__r_.__value_.__l.__size_;
    memset(__str, 0, 24);
    uint64_t v11 = a1[38];
    uint64_t v10 = a1[39];
    unint64_t v12 = (v10 - v11) >> 4;
    std::string::pointer v13 = 0;
    if (v10 != v11)
    {
      uint64_t v14 = 0;
      if (v12 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = (v10 - v11) >> 4;
      }
      char v16 = (uint64_t *)a1[38];
      while (1)
      {
        uint64_t v17 = *v16;
        if ((void *)(v17 + 8) == v18)
        {
          uint64_t v19 = 0;
          if (v14)
          {
LABEL_14:
            unint64_t v20 = (v14 - 1);
            if (v12 <= v20) {
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            }
            std::string::pointer v13 = &v13[*(void *)(v19 + 8) - *(void *)(v21[5] + 16) - *(void *)(v21[5] + 24)];
          }
        }
        else
        {
          uint64_t v19 = v18[5] + 8;
          if (v14) {
            goto LABEL_14;
          }
        }
        if (v191 != v14)
        {
          uint64_t v22 = *(char *)(v19 + 47) < 0 ? *(void *)(v19 + 32) : *(unsigned __int8 *)(v19 + 47);
          v13 += v22;
          ++v14;
          v16 += 2;
          if (v15 != v14) {
            continue;
          }
        }
        uint64_t v23 = v11;
        unint64_t v6 = v191;
        goto LABEL_23;
      }
    }
    uint64_t v23 = a1[39];
LABEL_23:
    if (v6 < v12)
    {
      uint64_t v189 = 0;
      std::string::size_type v182 = 0;
      char v185 = 0;
      unint64_t v24 = v6;
      uint64_t v25 = 16 * v6;
      v192 = v13;
      while (1)
      {
        uint64_t v26 = *(void *)(v23 + v25);
        if ((void *)(v26 + 8) == v27) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v28 = v27[5] + 8;
        }
        unint64_t v29 = (v10 - v11) >> 4;
        if (v29 <= v24) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v30 = *(void *)(v11 + v25);
        if ((void *)(v30 + 8) == v31) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v31[5] + 8;
        }
        if (v24 >= v29 - 1) {
          goto LABEL_36;
        }
        if (v29 <= v24 + 1) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v33 = *(void *)(v11 + v25 + 16);
        if ((void *)(v33 + 8) == v34) {
LABEL_36:
        }
          uint64_t v35 = 0;
        else {
          uint64_t v35 = v34[5] + 8;
        }
        uint64_t v36 = (_OWORD *)(v28 + 24);
        if (*(char *)(v28 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v28 + 24), *(void *)(v28 + 32));
        }
        else
        {
          *(_OWORD *)&v217.__r_.__value_.__l.__data_ = *v36;
          v217.__r_.__value_.__r.__words[2] = *(void *)(v28 + 40);
        }
        long long v37 = a1;
        UTFString::rstrip(&v217);
        std::string __s = v217;
        unint64_t v38 = v217.__r_.__value_.__r.__words[2];
        memset(&v217, 0, sizeof(v217));
        unint64_t v39 = HIBYTE(v38);
        if ((v38 & 0x8000000000000000) != 0) {
          unint64_t v39 = __s.__r_.__value_.__l.__size_;
        }
        std::string::size_type v40 = (std::string::size_type)&v192[v39];
        if (&v192[v39] <= data)
        {
          if (v35)
          {
            uint64_t v54 = *(void *)(v35 + 8);
            uint64_t v55 = *(void *)(v28 + 8);
            int64x2_t v56 = (char *)(v54 + v40 - (v55 + *(void *)(v28 + 16)));
            uint64_t v57 = v54 - v55;
          }
          else
          {
            uint64_t v57 = *(void *)(v28 + 16);
            int64x2_t v56 = &v192[v39];
          }
          uint64_t v63 = __str[23];
          if (__str[23] < 0) {
            uint64_t v63 = *(void *)&__str[8];
          }
          a1 = v37;
          if (v63)
          {
            std::operator+<char>();
          }
          else if (SHIBYTE(v38) < 0)
          {
            std::string::__init_copy_ctor_external(&v212, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else
          {
            std::string v212 = __s;
          }
          if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v70 = &v212;
          }
          else {
            int v70 = (std::string *)v212.__r_.__value_.__r.__words[0];
          }
          if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v71 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v71 = v212.__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)__str, (const std::string::value_type *)v70, v71);
          v192 = v56;
          if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v212.__r_.__value_.__l.__data_);
          }
          v189 += v57;
          int v53 = 7;
        }
        else
        {
          if (data == v192 && v40 == size)
          {
            uint64_t v42 = *(void *)(v28 + 48);
            uint64_t v41 = *(std::__shared_weak_count **)(v28 + 56);
            if (v41) {
              atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v43 = v202;
            *((void *)&v201 + 1) = v42;
            v202 = v41;
            a1 = v37;
            if (v43) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v43);
            }
            LODWORD(v199.__r_.__value_.__l.__data_) = *(_DWORD *)v28;
            *(_OWORD *)&v199.__r_.__value_.__r.__words[1] = *(_OWORD *)(v28 + 8);
            std::string::operator=((std::string *)&__p, (const std::string *)(v28 + 24));
            if (!v32)
            {
              if ((SBYTE7(v201) & 0x80u) == 0) {
                uint64_t v44 = BYTE7(v201);
              }
              else {
                uint64_t v44 = *((void *)&__p + 1);
              }
              UTFString::lstrip((std::string *)&__p);
              if ((SBYTE7(v201) & 0x80u) == 0) {
                uint64_t v45 = BYTE7(v201);
              }
              else {
                uint64_t v45 = *((void *)&__p + 1);
              }
              std::string::size_type v46 = v44 - v45;
              if (v44 != v45)
              {
                std::string::size_type v47 = v199.__r_.__value_.__l.__size_ + v46;
                BOOL v48 = v199.__r_.__value_.__r.__words[2] >= v46;
                std::string::size_type v49 = v199.__r_.__value_.__r.__words[2] - v46;
                if (!v48) {
                  std::string::size_type v49 = 0;
                }
                v199.__r_.__value_.__l.__size_ = v47;
                v199.__r_.__value_.__r.__words[2] = v49;
              }
              UTFString::rstrip((std::string *)&__p);
              uint64_t v50 = BYTE7(v201);
              if (SBYTE7(v201) < 0) {
                uint64_t v50 = *((void *)&__p + 1);
              }
              std::string::size_type v51 = v45 - v50;
              if (v51)
              {
                BOOL v48 = v199.__r_.__value_.__r.__words[2] >= v51;
                std::string::size_type v52 = v199.__r_.__value_.__r.__words[2] - v51;
                if (!v48) {
                  std::string::size_type v52 = 0;
                }
                v199.__r_.__value_.__r.__words[2] = v52;
              }
            }
            unint64_t v191 = v24 + 1;
            v192 = data;
            int v187 = 1;
            goto LABEL_67;
          }
          std::string::size_type v58 = data - v192;
          if (data < v192 || v40 < size)
          {
            if (v13 <= data && v40 >= size)
            {
              uint64_t v65 = *(void *)(v28 + 48);
              int v64 = *(std::__shared_weak_count **)(v28 + 56);
              if (v64) {
                atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v66 = v202;
              *((void *)&v201 + 1) = v65;
              v202 = v64;
              if (v66) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v66);
              }
              LODWORD(v199.__r_.__value_.__l.__data_) = *(_DWORD *)v28;
              if (v40 == size)
              {
                std::string::size_type v67 = *(void *)(v28 + 16);
                std::operator+<char>();
                a1 = v37;
                if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v68 = &v212;
                }
                else {
                  uint64_t v68 = (std::string *)v212.__r_.__value_.__r.__words[0];
                }
                if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v69 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v69 = v212.__r_.__value_.__l.__size_;
                }
                std::string::append((std::string *)__str, (const std::string::value_type *)v68, v69);
                if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v212.__r_.__value_.__l.__data_);
                }
                unint64_t v191 = v24 + 1;
              }
              else
              {
                a1 = v37;
                if (v32)
                {
                  int v187 = 0;
LABEL_67:
                  int v53 = 1;
                  goto LABEL_111;
                }
                std::string::size_type v67 = size - (void)v192 + 1;
                long long v79 = std::string::basic_string(&v211, (const std::string *)(v28 + 24), 0, v67, (std::allocator<char> *)&v213);
                unint64_t v80 = std::string::insert(v79, 0, " ");
                long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
                v212.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v81;
                v80->__r_.__value_.__l.__size_ = 0;
                v80->__r_.__value_.__r.__words[2] = 0;
                v80->__r_.__value_.__r.__words[0] = 0;
                if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v82 = &v212;
                }
                else {
                  uint64_t v82 = (std::string *)v212.__r_.__value_.__r.__words[0];
                }
                if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v83 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v83 = v212.__r_.__value_.__l.__size_;
                }
                std::string::append((std::string *)__str, (const std::string::value_type *)v82, v83);
                if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v212.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v211.__r_.__value_.__l.__data_);
                }
                unint64_t v191 = v24;
              }
              v199.__r_.__value_.__l.__size_ = v182;
              v199.__r_.__value_.__r.__words[2] = v67 + v189;
              v189 += v67;
              std::string::operator=((std::string *)&__p, (const std::string *)__str);
              if (!v32)
              {
                if ((SBYTE7(v201) & 0x80u) == 0) {
                  uint64_t v84 = BYTE7(v201);
                }
                else {
                  uint64_t v84 = *((void *)&__p + 1);
                }
                UTFString::lstrip((std::string *)&__p);
                if ((SBYTE7(v201) & 0x80u) == 0) {
                  uint64_t v85 = BYTE7(v201);
                }
                else {
                  uint64_t v85 = *((void *)&__p + 1);
                }
                std::string::size_type v86 = v84 - v85;
                if (v84 != v85)
                {
                  std::string::size_type v87 = v199.__r_.__value_.__l.__size_ + v86;
                  BOOL v48 = v199.__r_.__value_.__r.__words[2] >= v86;
                  std::string::size_type v88 = v199.__r_.__value_.__r.__words[2] - v86;
                  if (!v48) {
                    std::string::size_type v88 = 0;
                  }
                  v199.__r_.__value_.__l.__size_ = v87;
                  v199.__r_.__value_.__r.__words[2] = v88;
                }
                UTFString::rstrip((std::string *)&__p);
                uint64_t v89 = BYTE7(v201);
                if (SBYTE7(v201) < 0) {
                  uint64_t v89 = *((void *)&__p + 1);
                }
                std::string::size_type v90 = v85 - v89;
                if (v90)
                {
                  BOOL v48 = v199.__r_.__value_.__r.__words[2] >= v90;
                  std::string::size_type v91 = v199.__r_.__value_.__r.__words[2] - v90;
                  if (!v48) {
                    std::string::size_type v91 = 0;
                  }
                  v199.__r_.__value_.__r.__words[2] = v91;
                }
              }
              int v53 = 1;
              int v62 = 5;
              goto LABEL_168;
            }
            if ((v185 & 1) == 0)
            {
              std::string::size_type v182 = *(void *)(v28 + 8);
              std::string::pointer v13 = v192;
            }
            if (v35)
            {
              uint64_t v72 = *(void *)(v35 + 8);
              uint64_t v73 = *(void *)(v28 + 8);
              uint64_t v74 = (char *)(v72 + v40 - (v73 + *(void *)(v28 + 16)));
              uint64_t v75 = v72 - v73;
            }
            else
            {
              uint64_t v75 = *(void *)(v28 + 16);
              uint64_t v74 = &v192[v39];
            }
            uint64_t v78 = __str[23];
            if (__str[23] < 0) {
              uint64_t v78 = *(void *)&__str[8];
            }
            a1 = v37;
            if (v78)
            {
              std::operator+<char>();
            }
            else if (*(char *)(v28 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v212, *(const std::string::value_type **)(v28 + 24), *(void *)(v28 + 32));
            }
            else
            {
              *(_OWORD *)&v212.__r_.__value_.__l.__data_ = *v36;
              v212.__r_.__value_.__r.__words[2] = *(void *)(v28 + 40);
            }
            if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v92 = &v212;
            }
            else {
              unint64_t v92 = (std::string *)v212.__r_.__value_.__r.__words[0];
            }
            if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v93 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v93 = v212.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)__str, (const std::string::value_type *)v92, v93);
            v192 = v74;
            if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v212.__r_.__value_.__l.__data_);
            }
            int v53 = 0;
            v189 += v75;
            char v185 = 1;
          }
          else
          {
            uint64_t v60 = *(void *)(v28 + 48);
            uint64_t v59 = *(std::__shared_weak_count **)(v28 + 56);
            if (v32)
            {
              if (v59) {
                atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v61 = v202;
              *((void *)&v201 + 1) = v60;
              v202 = v59;
              a1 = v37;
              if (v61) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v61);
              }
              LODWORD(v199.__r_.__value_.__l.__data_) = *(_DWORD *)v28;
              *(_OWORD *)&v199.__r_.__value_.__r.__words[1] = *(_OWORD *)(v28 + 8);
              std::string::operator=((std::string *)&__p, (const std::string *)(v28 + 24));
              unint64_t v191 = v24 + 1;
              int v53 = 1;
              int v62 = 2;
LABEL_168:
              int v187 = v62;
              goto LABEL_111;
            }
            if (v59) {
              atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v76 = v202;
            *((void *)&v201 + 1) = v60;
            v202 = v59;
            if (v76) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v76);
            }
            LODWORD(v199.__r_.__value_.__l.__data_) = *(_DWORD *)v28;
            v199.__r_.__value_.__l.__size_ = v58 + *(void *)(v28 + 8);
            v199.__r_.__value_.__r.__words[2] = size - (void)data;
            std::string::basic_string(&v212, (const std::string *)(v28 + 24), v58, size - (void)data, (std::allocator<char> *)&v211);
            if (SBYTE7(v201) < 0) {
              operator delete((void *)__p);
            }
            long long __p = *(_OWORD *)&v212.__r_.__value_.__l.__data_;
            *(void *)&long long v201 = *((void *)&v212.__r_.__value_.__l + 2);
            unint64_t v77 = v191;
            if (v40 == size) {
              unint64_t v77 = v24 + 1;
            }
            unint64_t v191 = v77;
            int v53 = 1;
            int v187 = 4;
            a1 = v37;
          }
        }
LABEL_111:
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        if (v53 != 7 && v53)
        {
          unint64_t v6 = v191;
          unint64_t v95 = v186;
          int v94 = v187;
          goto LABEL_184;
        }
        ++v24;
        uint64_t v11 = a1[38];
        uint64_t v10 = a1[39];
        v25 += 16;
        uint64_t v23 = v11;
        if (v24 >= (v10 - v11) >> 4) {
          goto LABEL_180;
        }
      }
    }
    uint64_t v11 = v23;
LABEL_180:
    if (v181)
    {
      int v94 = 3;
      unint64_t v6 = v191;
    }
    else
    {
      int v94 = 0;
      unint64_t v6 = (v10 - v11) >> 4;
    }
    unint64_t v95 = v186;
LABEL_184:
    if ((__str[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__str);
      if (!v94)
      {
LABEL_197:
        int v98 = 2;
        char v180 = 1;
        goto LABEL_271;
      }
    }
    else if (!v94)
    {
      goto LABEL_197;
    }
    if (v94 == 3)
    {
      std::operator+<char>();
      if (__str[23] >= 0) {
        std::string v96 = __str;
      }
      else {
        std::string v96 = *(const std::string::value_type **)__str;
      }
      if (__str[23] >= 0) {
        std::string::size_type v97 = __str[23];
      }
      else {
        std::string::size_type v97 = *(void *)&__str[8];
      }
      std::string::append(&v204, v96, v97);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      int v98 = 4;
    }
    else
    {
      std::string::size_type v99 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
      if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v99 = v204.__r_.__value_.__l.__size_;
      }
      if (v99)
      {
        uint64_t v100 = *(void *)(*(void *)(a1[5] + (((unint64_t)(a1[9] + a1[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (*((unsigned char *)a1 + 72) + *((unsigned char *)a1 + 64) - 1));
        if ((void *)(v100 + 8) == v101) {
          uint64_t v102 = 0;
        }
        else {
          uint64_t v102 = (std::string *)(v101[5] + 8);
        }
        UTFString::rstrip(&v204);
        (*(void (**)(unsigned char *__return_ptr, void *, std::string *))(*a1 + 136))(__str, a1, &v204);
        if (__str[23] >= 0) {
          size_t v103 = __str[23];
        }
        else {
          size_t v103 = *(void *)&__str[8];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__s, v103 + 3);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_s = &__s;
        }
        else {
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        if (v103)
        {
          if (__str[23] >= 0) {
            size_t v105 = __str;
          }
          else {
            size_t v105 = *(unsigned char **)__str;
          }
          memmove(p_s, v105, v103);
        }
        *(_DWORD *)((char *)&p_s->__r_.__value_.__l.__data_ + v103) = 2121504;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v106 = &__s;
        }
        else {
          std::string::size_type v106 = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v107 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v107 = __s.__r_.__value_.__l.__size_;
        }
        std::string::append(&v205, (const std::string::value_type *)v106, v107);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        uint64_t v109 = *(void *)(v108 + 64);
        v198[0] = *(uint64_t ***)(v108 + 56);
        v198[1] = (uint64_t **)v109;
        if (v109) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v109 + 8), 1uLL, memory_order_relaxed);
        }
        FrontendNNModule::update_embedded_lang((uint64_t)v206, v198);
        if (v109) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v109);
        }
        create_pronunciation_with_phone_sequence((uint64_t *)&__s, (std::string *)__str, (uint64_t)v206);
        if (v102 != &__s) {
          std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)v102, (uint64_t *)__s.__r_.__value_.__l.__data_, (uint64_t *)__s.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__s.__r_.__value_.__l.__size_ - __s.__r_.__value_.__r.__words[0]) >> 3));
        }
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
        std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
      }
      UTFString::lstrip((std::string *)&__p);
      UTFString::rstrip((std::string *)&__p);
      Agglomerate::set<TokenBasicItem>(v203, (long long *)&v199);
      std::string::operator=(&v204, v183);
      long long v215 = 0u;
      memset(__str, 0, sizeof(__str));
      if (v94 != 2)
      {
        UTFString::rstrip(&v204);
        (*(void (**)(std::string *__return_ptr, void *, std::string *))(*a1 + 136))(&__s, a1, &v204);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v110 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v110 = __s.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v217, v110 + 3);
        if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v111 = &v217;
        }
        else {
          unint64_t v111 = (std::string *)v217.__r_.__value_.__r.__words[0];
        }
        if (v110)
        {
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v112 = &__s;
          }
          else {
            std::string::size_type v112 = (std::string *)__s.__r_.__value_.__r.__words[0];
          }
          memmove(v111, v112, v110);
        }
        *(_DWORD *)((char *)&v111->__r_.__value_.__l.__data_ + v110) = 2121504;
        if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v113 = &v217;
        }
        else {
          uint64_t v113 = (std::string *)v217.__r_.__value_.__r.__words[0];
        }
        if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v114 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v114 = v217.__r_.__value_.__l.__size_;
        }
        std::string::append(&v205, (const std::string::value_type *)v113, v114);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v217.__r_.__value_.__l.__data_);
        }
        size_t v115 = v202;
        v197[0] = *((uint64_t ***)&v201 + 1);
        v197[1] = (uint64_t **)v202;
        if (v202) {
          atomic_fetch_add_explicit(&v202->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        FrontendNNModule::update_embedded_lang((uint64_t)v206, v197);
        if (v115) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v115);
        }
        create_pronunciation_with_phone_sequence((uint64_t *)&v217, &__s, (uint64_t)v206);
        std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)__str, (uint64_t *)v217.__r_.__value_.__l.__data_, (uint64_t *)v217.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v217.__r_.__value_.__l.__size_ - v217.__r_.__value_.__r.__words[0]) >> 3));
        v212.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
        std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
        if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
        {
          *v204.__r_.__value_.__l.__data_ = 0;
          v204.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v204.__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&v204.__r_.__value_.__s + 23) = 0;
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
      }
      std::string::operator=((std::string *)&__str[24], (const std::string *)&__p);
      long long v216 = *(_OWORD *)&v199.__r_.__value_.__r.__words[1];
      uint64_t v116 = v203;
      Agglomerate::set<TokenPronunciationItem>(v203, (uint64_t)__str);
      *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = 0u;
      long long v196 = 0u;
      if (-1 - 0x3333333333333333 * (((*a2)[1] - **a2) >> 3) == v95)
      {
        char v117 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
        FrontendNNModule::update_phrasing_item((FrontendNNModule *)a1, (TokenPhrasingItem *)&__s, 0, v117);
      }
      else
      {
        FrontendNNModule::update_phrasing_item((FrontendNNModule *)a1, (TokenPhrasingItem *)&__s, 0, 0);
      }
      Agglomerate::set<TokenPhrasingItem>(v116, (uint64_t)&__s);
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v179, &v203);
      if (*((void *)&v196 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v196 + 1));
      }
      if (__s.__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(v215) < 0) {
        operator delete(*(void **)&__str[24]);
      }
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
      int v98 = 0;
      BOOL v181 = v94 == 2;
    }
LABEL_271:
    if (v202) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v202);
    }
    if (SBYTE7(v201) < 0) {
      operator delete((void *)__p);
    }
    if (*((void *)&v203 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v203 + 1));
    }
    if ((v98 | 4) != 4) {
      break;
    }
    unint64_t v7 = v95 + 1;
    uint64_t v5 = **a2;
  }
  while (0xCCCCCCCCCCCCCCCDLL * (((*a2)[1] - v5) >> 3) > v7);
  std::string::size_type v118 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
  if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v118 = v204.__r_.__value_.__l.__size_;
  }
  if (v118)
  {
    uint64_t v119 = *(void *)(*(void *)(a1[5] + (((unint64_t)(a1[9] + a1[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*((unsigned char *)a1 + 72) + *((unsigned char *)a1 + 64) - 1));
    if ((void *)(v119 + 8) == v120) {
      v121 = 0;
    }
    else {
      v121 = (uint64_t *)(v120[5] + 8);
    }
    UTFString::rstrip(&v204);
    unint64_t v122 = v6;
    (*(void (**)(std::string *__return_ptr, void *, std::string *))(*a1 + 136))(&v199, a1, &v204);
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v123 = HIBYTE(v199.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v123 = v199.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__str, v123 + 3);
    if (__str[23] >= 0) {
      std::string::size_type v124 = __str;
    }
    else {
      std::string::size_type v124 = *(unsigned char **)__str;
    }
    if (v123)
    {
      if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v125 = &v199;
      }
      else {
        std::string::size_type v125 = (std::string *)v199.__r_.__value_.__r.__words[0];
      }
      memmove(v124, v125, v123);
    }
    *(_DWORD *)&v124[v123] = 2121504;
    if (__str[23] >= 0) {
      v126 = __str;
    }
    else {
      v126 = *(const std::string::value_type **)__str;
    }
    if (__str[23] >= 0) {
      std::string::size_type v127 = __str[23];
    }
    else {
      std::string::size_type v127 = *(void *)&__str[8];
    }
    std::string::append(&v205, v126, v127);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    uint64_t v129 = *(void *)(v128 + 64);
    v194[0] = *(uint64_t ***)(v128 + 56);
    v194[1] = (uint64_t **)v129;
    if (v129) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v129 + 8), 1uLL, memory_order_relaxed);
    }
    FrontendNNModule::update_embedded_lang((uint64_t)v206, v194);
    if (v129) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v129);
    }
    create_pronunciation_with_phone_sequence((uint64_t *)__str, &v199, (uint64_t)v206);
    unint64_t v6 = v122;
    if (v121 != (uint64_t *)__str) {
      std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v121, *(uint64_t **)__str, *(uint64_t **)&__str[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__str[8] - *(void *)__str) >> 3));
    }
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
    std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
    uint64_t v130 = *(void *)(*(void *)(a1[5] + (((unint64_t)(a1[9] + a1[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*((unsigned char *)a1 + 72) + *((unsigned char *)a1 + 64) - 1));
    if ((void *)(v130 + 8) != v131)
    {
      uint64_t v132 = v131[5];
      *(unsigned char *)(v132 + 9) = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
    }
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v199.__r_.__value_.__l.__data_);
    }
  }
  if (v180)
  {
    uint64_t v136 = (void **)a1[5];
    std::string::size_type v137 = (void **)a1[6];
    if (v137 == v136)
    {
      std::string::size_type v137 = (void **)a1[5];
    }
    else
    {
      unint64_t v138 = a1[8];
      v139 = &v136[v138 >> 8];
      uint64_t v140 = (uint64_t)*v139;
      uint64_t v141 = (uint64_t)*v139 + 16 * v138;
      uint64_t v142 = *(uint64_t *)((char *)v136 + (((a1[9] + v138) >> 5) & 0x7FFFFFFFFFFFFF8))
           + 16 * (*((unsigned char *)a1 + 72) + v138);
      if (v141 != v142)
      {
        do
        {
          std::string::size_type v143 = *(std::__shared_weak_count **)(v141 + 8);
          if (v143)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v143);
            uint64_t v140 = (uint64_t)*v139;
          }
          v141 += 16;
          if (v141 - v140 == 4096)
          {
            uint64_t v144 = (uint64_t)v139[1];
            ++v139;
            uint64_t v140 = v144;
            uint64_t v141 = v144;
          }
        }
        while (v141 != v142);
        uint64_t v136 = (void **)a1[5];
        std::string::size_type v137 = (void **)a1[6];
      }
    }
    a1[9] = 0;
    unint64_t v156 = (char *)v137 - (char *)v136;
    if ((unint64_t)((char *)v137 - (char *)v136) >= 0x11)
    {
      do
      {
        operator delete(*v136);
        uint64_t v157 = a1[6];
        uint64_t v136 = (void **)(a1[5] + 8);
        a1[5] = v136;
        unint64_t v156 = v157 - (void)v136;
      }
      while ((unint64_t)(v157 - (void)v136) > 0x10);
    }
    unint64_t v158 = v156 >> 3;
    if (v158 == 1)
    {
      uint64_t v159 = 128;
    }
    else
    {
      if (v158 != 2)
      {
        char v155 = 0;
        goto LABEL_367;
      }
      uint64_t v159 = 256;
    }
    char v155 = 0;
    a1[8] = v159;
    goto LABEL_367;
  }
LABEL_316:
  uint64_t v133 = a1[9];
  if (v133)
  {
    unint64_t v135 = *(void *)(v134[5] + 24) + *(void *)(v134[5] + 16);
  }
  else
  {
    unint64_t v135 = 0;
  }
  uint64_t v146 = a1[38];
  uint64_t v145 = a1[39];
  if (v6 >= (v145 - v146) >> 4) {
    goto LABEL_344;
  }
  char v147 = 0;
  uint64_t v148 = 16 * v6;
  while (2)
  {
    {
      if (v147) {
        goto LABEL_333;
      }
      uint64_t v149 = a1[9];
      if (v149)
      {
LABEL_333:
        char v147 = 1;
      }
      else
      {
        char v147 = 0;
      }
      if (v6 >= (v145 - v146) >> 4) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      std::deque<std::shared_ptr<Agglomerate>>::push_back(a1 + 4, (long long *)(v146 + v148));
      uint64_t v146 = a1[38];
      uint64_t v145 = a1[39];
    }
    v148 += 16;
    if (++v6 < (v145 - v146) >> 4) {
      continue;
    }
    break;
  }
  if (v147)
  {
    long long __p = 0u;
    *(_OWORD *)&v199.__r_.__value_.__r.__words[1] = 0u;
    char v150 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
    FrontendNNModule::update_phrasing_item((FrontendNNModule *)a1, (TokenPhrasingItem *)&v199, 0, v150);
    Agglomerate::set<TokenPhrasingItem>(*(void *)(*(void *)(a1[5] + (((unint64_t)(a1[9] + a1[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*((unsigned char *)a1 + 72) + *((unsigned char *)a1 + 64) - 1)), (uint64_t)&v199);
    if (*((void *)&__p + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
    }
    if (v199.__r_.__value_.__r.__words[2]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v199.__r_.__value_.__r.__words[2]);
    }
  }
LABEL_344:
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  v151 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext(&v199, (uint64_t)&v205);
    std::string::size_type v152 = (v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v199
         : (std::string *)v199.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string __str = 136315138;
    *(void *)&__str[4] = v152;
    _os_log_impl(&dword_20CD80000, v151, OS_LOG_TYPE_DEBUG, "#Formatted - %s", __str, 0xCu);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v199.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&v199, (uint64_t)&v205);
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v154 = &v199;
  }
  else {
    v154 = (std::string *)v199.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(7, "#Formatted - %s", v153, v154);
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v199.__r_.__value_.__l.__data_);
  }
  char v155 = 1;
LABEL_367:
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v204.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v205.__r_.__value_.__l.__data_);
    if (v155) {
      goto LABEL_437;
    }
  }
  else if (v155)
  {
    goto LABEL_437;
  }
LABEL_373:
  FrontendNNModule::passdown_leading_empty_token((FrontendNNModule *)a1);
  memset(&v199, 0, sizeof(v199));
  v160 = (long long *)**a2;
  uint64_t v161 = (long long *)(*a2)[1];
  if (v160 != v161)
  {
    while (2)
    {
      if (*((char *)v160 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v160, *((void *)v160 + 1));
      }
      else
      {
        long long v162 = *v160;
        *(void *)&__str[16] = *((void *)v160 + 2);
        *(_OWORD *)std::string __str = v162;
      }
      if ((__str[23] & 0x80000000) != 0)
      {
        size_t v163 = *(void *)&__str[8];
        if (!*(void *)&__str[8]) {
          goto LABEL_418;
        }
        if (**(unsigned char **)__str != 32) {
          goto LABEL_397;
        }
        std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
LABEL_384:
        UTFString::lstrip(&v193);
        std::string v217 = v193;
        memset(&v193, 0, sizeof(v193));
        v164 = std::string::append(&v217, " ");
        long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v165;
        v164->__r_.__value_.__l.__size_ = 0;
        v164->__r_.__value_.__r.__words[2] = 0;
        v164->__r_.__value_.__r.__words[0] = 0;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v166 = &__s;
        }
        else {
          std::string::size_type v166 = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v167 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v167 = __s.__r_.__value_.__l.__size_;
        }
        std::string::append(&v199, (const std::string::value_type *)v166, v167);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v217.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
        {
          v168 = (void *)v193.__r_.__value_.__r.__words[0];
          goto LABEL_416;
        }
LABEL_417:
        if ((__str[23] & 0x80000000) != 0) {
LABEL_418:
        }
          operator delete(*(void **)__str);
      }
      else if (__str[23])
      {
        if (__str[0] == 32)
        {
          std::string v193 = *(std::string *)__str;
          goto LABEL_384;
        }
        size_t v163 = *(void *)&__str[8];
LABEL_397:
        if (__str[23] >= 0) {
          size_t v169 = __str[23];
        }
        else {
          size_t v169 = v163;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__s, v169 + 1);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v170 = &__s;
        }
        else {
          v170 = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        if (v169)
        {
          if (__str[23] >= 0) {
            v171 = __str;
          }
          else {
            v171 = *(unsigned char **)__str;
          }
          memmove(v170, v171, v169);
        }
        *(_WORD *)((char *)&v170->__r_.__value_.__l.__data_ + v169) = 32;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v172 = &__s;
        }
        else {
          v172 = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v173 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v173 = __s.__r_.__value_.__l.__size_;
        }
        std::string::append(&v199, (const std::string::value_type *)v172, v173);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          v168 = (void *)__s.__r_.__value_.__r.__words[0];
LABEL_416:
          operator delete(v168);
        }
        goto LABEL_417;
      }
      v160 = (long long *)((char *)v160 + 40);
      if (v160 == v161) {
        break;
      }
      continue;
    }
  }
  UTFString::rstrip(&v199);
  (*(void (**)(unsigned char *__return_ptr, void *, std::string *))(*a1 + 136))(__str, a1, &v199);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  v174 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext(&__s, (uint64_t)__str);
    std::string v175 = (__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__s
         : (std::string *)__s.__r_.__value_.__r.__words[0];
    LODWORD(v217.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v217.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v175;
    _os_log_impl(&dword_20CD80000, v174, OS_LOG_TYPE_DEBUG, "#Formatted - %s", (uint8_t *)&v217, 0xCu);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__s, (uint64_t)__str);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v177 = &__s;
  }
  else {
    v177 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(7, "#Formatted - %s", v176, v177);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  (*(void (**)(void *, unsigned char *, void, void))(*a1 + 176))(a1, __str, 0, a3);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v199.__r_.__value_.__l.__data_);
  }
LABEL_437:
  if (v210 < 0) {
    operator delete(v209);
  }
  if (v208 < 0) {
    operator delete(v207);
  }
}

void sub_20D3204E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  fst::FstHeader::~FstHeader(&a70);
  _Unwind_Resume(a1);
}

void FrontendNNModule::passdown_leading_empty_token(FrontendNNModule *this)
{
  uint64_t v2 = *((void *)this + 38);
  uint64_t v1 = *((void *)this + 39);
  if (v1 != v2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = (void *)((char *)this + 32);
    do
    {
      uint64_t v7 = *(void *)(v2 + v4);
      if ((void *)(v7 + 8) == v8) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v8[5] + 8;
      }
      if (*(char *)(v9 + 47) < 0)
      {
        if (*(void *)(v9 + 32)) {
          return;
        }
      }
      else if (*(unsigned char *)(v9 + 47))
      {
        return;
      }
      if (v5 >= (v1 - v2) >> 4) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v6, (long long *)(v2 + v4));
      long long v11 = 0u;
      long long v12 = 0u;
      FrontendNNModule::update_phrasing_item(this, (TokenPhrasingItem *)v10, 0, 0);
      Agglomerate::set<TokenPhrasingItem>(*(void *)(*(void *)(*((void *)this + 5)+ (((unint64_t)(*((void *)this + 9) + *((void *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*((unsigned char *)this + 72) + *((unsigned char *)this + 64) - 1)), (uint64_t)v10);
      if (*((void *)&v12 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
      }
      if (*((void *)&v11 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
      }
      ++v5;
      uint64_t v2 = *((void *)this + 38);
      uint64_t v1 = *((void *)this + 39);
      v4 += 16;
    }
    while (v5 < (v1 - v2) >> 4);
  }
}

void sub_20D320960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TokenPhrasingItem::~TokenPhrasingItem((TokenPhrasingItem *)va);
  _Unwind_Resume(a1);
}

std::string *FrontendNNModule::update_embedded_lang(uint64_t a1, uint64_t ***a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = **a2;
  if (v4)
  {
    unint64_t v6 = (std::__shared_weak_count *)v3[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (uint64_t *)*v4;
    if (*v4)
    {
      do
      {
        uint64_t v8 = (std::__shared_weak_count *)v4[1];
        uint64_t v4 = v7;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        uint64_t v7 = (uint64_t *)*v4;
        unint64_t v6 = v8;
      }
      while (*v4);
    }
    else
    {
      uint64_t v8 = v6;
    }
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(v4 + 5));
    std::string::operator=((std::string *)(a1 + 32), (const std::string *)(*a2 + 5));
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  else
  {
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(v3 + 5));
    if (*(char *)(a1 + 55) < 0)
    {
      **(unsigned char **)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 55) = 0;
    }
  }
  FrontendNNModule::lang_string_cleanup((std::string *)(a1 + 8));
  return FrontendNNModule::lang_string_cleanup((std::string *)(a1 + 32));
}

void sub_20D320A78(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void FrontendNNModule::update_phrasing_item(FrontendNNModule *this, TokenPhrasingItem *a2, char a3, char a4)
{
  *(unsigned char *)a2 = a3;
  *((unsigned char *)a2 + 1) = a4;
  uint64_t v5 = *((void *)this + 9);
  if (!v5 {
    || (uint64_t v6 = *(void *)(*(void *)(*((void *)this + 5)
  }
                                   + (((unint64_t)(v5 + *((void *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v5 + *((unsigned char *)this + 64) - 1)),
  {
    uint64_t v15 = operator new(0x30uLL);
    *(_OWORD *)((char *)v15 + 8) = 0u;
    void v15[2] = 0u;
    *((void *)v15 + 3) = v15 + 2;
    *(void *)uint64_t v15 = off_26C215330;
    *(void *)&long long v16 = (char *)v15 + 24;
    *((void *)&v16 + 1) = v15;
    uint64_t v17 = (std::__shared_weak_count *)*((void *)a2 + 2);
    *(_OWORD *)((char *)a2 + 8) = v16;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
LABEL_13:
    std::string::size_type v18 = operator new(0x30uLL);
    *(_OWORD *)((char *)v18 + 8) = 0u;
    v18[2] = 0u;
    *((void *)v18 + 3) = v18 + 2;
    *(void *)std::string::size_type v18 = off_26C215330;
    *(void *)&long long v19 = (char *)v18 + 24;
    *((void *)&v19 + 1) = v18;
    uint64_t v14 = (std::__shared_weak_count *)*((void *)a2 + 4);
    *(_OWORD *)((char *)a2 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v19;
    if (!v14) {
      return;
    }
    goto LABEL_14;
  }
  uint64_t v8 = v7[5];
  if (*(unsigned char *)(v8 + 8))
  {
    uint64_t v9 = operator new(0x30uLL);
    *(_OWORD *)((char *)v9 + 8) = 0u;
    v9[2] = 0u;
    *((void *)v9 + 3) = v9 + 2;
    *(void *)uint64_t v9 = off_26C215330;
    *(void *)&long long v10 = (char *)v9 + 24;
    *((void *)&v10 + 1) = v9;
    long long v11 = (std::__shared_weak_count *)*((void *)a2 + 2);
    *(_OWORD *)((char *)a2 + 8) = v10;
    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v21 = *(void *)(v8 + 16);
  uint64_t v20 = *(void *)(v8 + 24);
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)a2 + 2);
  *((void *)a2 + 1) = v21;
  *((void *)a2 + 2) = v20;
  if (v11) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_6:
  if (*(unsigned char *)(v8 + 9)) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 40);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)a2 + 4);
  *((void *)a2 + 3) = v13;
  *((void *)a2 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v12;
  if (v14)
  {
LABEL_14:
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

std::string *FrontendNNModule::lang_string_cleanup(std::string *result)
{
  std::string::size_type size = HIBYTE(result->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    std::string::size_type v2 = (std::string::size_type)result;
  }
  else {
    std::string::size_type v2 = result->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = result->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v3 = (unsigned char *)(v2 + size);
    for (uint64_t i = (unsigned char *)v2; *i != 45; ++i)
    {
      if (!--size) {
        return result;
      }
    }
    if (i != v3 && &i[-v2] != (unsigned char *)-1) {
      return std::string::erase(result, (std::string::size_type)&i[-v2], 1uLL);
    }
  }
  return result;
}

void FrontendNNModule::reconstruct_from_tokens(FrontendNNModule *a1, std::string *a2, uint64_t a3, char a4)
{
  uint64_t v8 = operator new(0x30uLL);
  *(_OWORD *)((char *)v8 + 8) = 0u;
  v8[2] = 0u;
  *((void *)v8 + 3) = v8 + 2;
  uint64_t v9 = (uint64_t)v8 + 24;
  *(void *)uint64_t v8 = off_26C215330;
  *(void *)&long long v49 = (char *)v8 + 24;
  *((void *)&v49 + 1) = v8;
  std::string::basic_string[abi:ne180100]<0>(&v45, &byte_20D5A22AE);
  std::string::basic_string[abi:ne180100]<0>(&v47, &byte_20D5A22AE);
  v44[0] = a4;
  memset(&__str, 0, sizeof(__str));
  if (a3)
  {
    std::string::operator=(&__str, (const std::string *)(a3 + 24));
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v10 = *(void *)(a3 + 16);
    Agglomerate::set<TokenBasicItem>(v9, (long long *)a3);
    uint64_t v12 = *(uint64_t ***)(a3 + 48);
    uint64_t v13 = *(void *)(a3 + 56);
    v41[0] = v12;
    v41[1] = (uint64_t **)v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    FrontendNNModule::update_embedded_lang((uint64_t)v44, v41);
  }
  else
  {
    uint64_t v14 = (uint64_t *)*((void *)a1 + 38);
    uint64_t v15 = *v14;
    if ((void *)(v15 + 8) == v16) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v16[5] + 8;
    }
    if (*((uint64_t **)a1 + 39) == v14)
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v33 = a2;
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = v14[v18];
        if ((void *)(v22 + 8) == v23) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v23[5] + 8;
        }
        uint64_t v25 = (const std::string *)(v24 + 24);
        if (v19)
        {
          if (*(char *)(v24 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(v24 + 24), *(void *)(v24 + 32));
          }
          else
          {
            *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            v50.__r_.__value_.__r.__words[2] = *(void *)(v24 + 40);
          }
          UTFString::lstrip(&v50);
          UTFString::rstrip(&v50);
          std::string v34 = v50;
          memset(&v50, 0, sizeof(v50));
          uint64_t v26 = std::string::insert(&v34, 0, " ");
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v37[0] = (void *)v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long __p = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v37[0]) >= 0) {
            uint64_t v28 = __p;
          }
          else {
            uint64_t v28 = (void **)__p[0];
          }
          if (SHIBYTE(v37[0]) >= 0) {
            std::string::size_type v29 = HIBYTE(v37[0]);
          }
          else {
            std::string::size_type v29 = (std::string::size_type)__p[1];
          }
          std::string::append(&__str, (const std::string::value_type *)v28, v29);
          if (SHIBYTE(v37[0]) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          uint64_t v21 = *(void *)(v24 + 8);
          std::string::operator=(&__str, v25);
        }
        uint64_t v14 = (uint64_t *)*((void *)a1 + 38);
        unint64_t v30 = (uint64_t)(*((void *)a1 + 39) - (void)v14) >> 4;
        if (v19 == v30 - 1) {
          uint64_t v20 = *(void *)(v24 + 16) + *(void *)(v24 + 8);
        }
        ++v19;
        v18 += 2;
      }
      while (v19 < v30);
      uint64_t v10 = v20 - v21;
      a2 = v33;
    }
    std::string::operator=((std::string *)(v17 + 24), &__str);
    *(void *)(v17 + 16) = v10;
    uint64_t v11 = *(void *)(v17 + 8);
    uint64_t v9 = v49;
    Agglomerate::set<TokenBasicItem>(v49, (long long *)v17);
    int v31 = *(uint64_t ***)(v17 + 48);
    uint64_t v13 = *(void *)(v17 + 56);
    v42[0] = v31;
    v42[1] = (uint64_t **)v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    FrontendNNModule::update_embedded_lang((uint64_t)v44, v42);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
  }
  *(_OWORD *)long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)long long __p = 0u;
  UTFString::lstrip(a2);
  UTFString::rstrip(a2);
  create_pronunciation_with_phone_sequence((uint64_t *)&v34, a2, (uint64_t)v44);
  std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)__p, (uint64_t *)v34.__r_.__value_.__l.__data_, (uint64_t *)v34.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34.__r_.__value_.__l.__size_ - v34.__r_.__value_.__r.__words[0]) >> 3));
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  std::string::operator=((std::string *)&v37[1], &__str);
  uint64_t v39 = v11;
  uint64_t v40 = v10;
  Agglomerate::set<TokenPronunciationItem>(v9, (uint64_t)__p);
  long long v35 = 0u;
  *(_OWORD *)&v34.__r_.__value_.__r.__words[1] = 0u;
  char v32 = (*(uint64_t (**)(FrontendNNModule *))(*(void *)a1 + 88))(a1);
  FrontendNNModule::update_phrasing_item(a1, (TokenPhrasingItem *)&v34, 0, v32);
  Agglomerate::set<TokenPhrasingItem>(v49, (uint64_t)&v34);
  std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)a1 + 4, &v49);
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  if (v34.__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v34.__r_.__value_.__r.__words[2]);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[1]);
  }
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (*((void *)&v49 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v49 + 1));
  }
}

void sub_20D321140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (a40 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a41);
  if (*(void *)(v48 - 120)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v48 - 120));
  }
  _Unwind_Resume(a1);
}

void FrontendNNModule::reconstruct_from_tokens(void *a1, std::string::size_type a2)
{
  uint64_t v192 = *MEMORY[0x263EF8340];
  if (a1[38] == a1[39])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    size_t v163 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0) {
        std::string::size_type v165 = a2;
      }
      else {
        std::string::size_type v165 = *(void *)a2;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v165;
    }
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v166 = a2;
    }
    else {
      std::string::size_type v166 = *(void *)a2;
    }
    return;
  }
  uint64_t v3 = **(void **)(a2 + 24);
  if (*(void *)(*(void *)(a2 + 24) + 8) == v3) {
    return;
  }
  uint64_t v4 = a1;
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  std::string::size_type __pos = 0;
  std::string::size_type v182 = a1 + 4;
  do
  {
    unint64_t v174 = v6;
    unint64_t v175 = v5;
    uint64_t v7 = (unsigned int *)(v3 + 80 * v5);
    if (*((char *)v7 + 31) < 0) {
      uint64_t v8 = *((void *)v7 + 2);
    }
    else {
      uint64_t v8 = *((unsigned __int8 *)v7 + 31);
    }
    uint64_t v10 = (uint64_t *)v4[38];
    uint64_t v9 = v4[39];
    unint64_t v11 = v174;
    if (v174 >= (v9 - (uint64_t)v10) >> 4) {
      goto LABEL_365;
    }
    v171 = v7 + 2;
    char v178 = 0;
    unint64_t v180 = *v7;
    unint64_t v177 = v8 + v180;
    uint64_t v172 = v3 + 80 * v175 + 32;
    while (1)
    {
      uint64_t v12 = v10[2 * v11];
      uint64_t v14 = (void *)(v12 + 8);
      if ((void *)(v12 + 8) == v13) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v13[5] + 8;
      }
      unint64_t v16 = (v9 - (uint64_t)v10) >> 4;
      if (v16 <= v11) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      if (v14 == v17) {
        uint64_t v181 = 0;
      }
      else {
        uint64_t v181 = v17[5] + 8;
      }
      if (v14 == v18) {
        v179 = 0;
      }
      else {
        v179 = (unsigned char *)(v18[5] + 8);
      }
      uint64_t v184 = v15;
      unint64_t v19 = v4;
      if (v11)
      {
        uint64_t v20 = 0;
        int v21 = 0;
        uint64_t v22 = v10 + 2;
        do
        {
          if (v16 == v20) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v23 = *(v22 - 2);
          if ((void *)(v23 + 8) == v24) {
            uint64_t v25 = 0;
          }
          else {
            uint64_t v25 = v24[5] + 8;
          }
          if (*(char *)(v25 + 47) < 0) {
            uint64_t v26 = *(void *)(v25 + 32);
          }
          else {
            LODWORD(v26) = *(unsigned __int8 *)(v25 + 47);
          }
          v21 += v26;
          if (v16 > ++v20) {
            int v21 = v21
          }
          v22 += 2;
        }
        while (v11 != v20);
      }
      else
      {
        int v21 = 0;
      }
      if (*(char *)(v184 + 47) < 0) {
        uint64_t v27 = *(void *)(v184 + 32);
      }
      else {
        uint64_t v27 = *(unsigned __int8 *)(v184 + 47);
      }
      uint64_t v4 = v19;
      unint64_t v28 = v21;
      unint64_t v29 = v27 + v21;
      if (v29 <= v180)
      {
        if (v14 == v35) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v35[5] + 8;
        }
        uint64_t v40 = v19[9];
        if (v40)
        {
          unint64_t v41 = v19[8];
          uint64_t v42 = v19[5];
          while (1)
          {
            if (*(void *)(v43[5] + 24) + *(void *)(v43[5] + 16) > *(void *)(v36 + 8)) {
              goto LABEL_199;
            }
            ++v41;
            if (!--v40) {
              goto LABEL_55;
            }
          }
        }
        goto LABEL_55;
      }
      unint64_t v30 = (const std::string *)(v184 + 24);
      std::string::size_type v31 = __pos + v28;
      if (__pos)
      {
        if (v177 == v31) {
          break;
        }
      }
      if ((v178 & (v177 > v29)) == 1)
      {
        if (v16 <= v11 - 1) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v32 = v10[2 * v11 - 2];
        if ((void *)(v32 + 8) == v33) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = v33[5] + 8;
        }
        *(void *)(v47[5] + 24) += *(void *)(v184 + 8)
                                    - (*(void *)(v34 + 8)
                                     + *(void *)(v34 + 16))
                                    + *(void *)(v184 + 16);
LABEL_65:
        char v178 = 1;
        goto LABEL_199;
      }
      if ((v178 & 1) != 0 && v177 <= v29)
      {
        if (v16 <= v11 - 1) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v37 = v10[2 * v11 - 2];
        if ((void *)(v37 + 8) == v38) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = v38[5] + 8;
        }
        uint64_t v52 = *(void *)(v184 + 8);
        uint64_t v53 = *(void *)(v39 + 8);
        uint64_t v54 = *(void *)(v39 + 16);
        if (v181)
        {
          *(void *)(v51 + 24) += v52 - (v53 + v54) + *(void *)(v184 + 16);
          unint64_t v55 = v177;
          if (v177 == v29)
          {
            std::string::basic_string(&buf, (const std::string *)(v184 + 24), v177 - v31, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v185);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string buf = &buf;
            }
            else {
              p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = buf.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)(v51 + 32), (const std::string::value_type *)p_buf, size);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            unint64_t v55 = v177;
          }
        }
        else
        {
          unint64_t v55 = v177;
          *(void *)(v51 + 24) += v177 + v52 - v54 - (v31 + v53);
        }
        if (v55 == v29)
        {
          if (v179)
          {
            uint64_t v140 = *(void *)(*(void *)(v19[5]
                                         + (((unint64_t)(v19[9] + v19[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*((unsigned char *)v19 + 72) + *((unsigned char *)v19 + 64) - 1));
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
            if (!v141) {
              operator new();
            }
            goto LABEL_311;
          }
          goto LABEL_363;
        }
        std::string::size_type __pos = v55 - v28;
        if (-1
           - 0x3333333333333333 * ((uint64_t)(*(void *)(*(void *)(a2 + 24) + 8) - **(void **)(a2 + 24)) >> 4) != v175)
          goto LABEL_365;
        char v178 = 0;
        --v11;
      }
      else
      {
        std::string::size_type v44 = v180 - v31;
        if (v180 < v31) {
          goto LABEL_57;
        }
        if (v177 > v29 || !v181)
        {
          if (v177 <= v29 && !v181)
          {
            unint64_t v58 = v174;
            if (v180 != v31)
            {
              uint64_t v59 = operator new(0x30uLL);
              *(_OWORD *)((char *)v59 + 8) = 0u;
              *(void *)uint64_t v59 = off_26C215330;
              v59[2] = 0u;
              *((void *)v59 + 3) = v59 + 2;
              *(void *)&long long v186 = (char *)v59 + 24;
              *((void *)&v186 + 1) = v59;
              long long v60 = *(_OWORD *)v184;
              buf.__r_.__value_.__r.__words[2] = *(void *)(v184 + 16);
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v60;
              if (*(char *)(v184 + 47) < 0)
              {
                std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(v184 + 24), *(void *)(v184 + 32));
              }
              else
              {
                long long v61 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
                v189.__r_.__value_.__r.__words[2] = *(void *)(v184 + 40);
                *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v61;
              }
              int v94 = *(std::__shared_weak_count **)(v184 + 56);
              uint64_t v190 = *(void *)(v184 + 48);
              unint64_t v191 = v94;
              if (v94) {
                atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::basic_string(&v185, v30, __pos, v180 - v31, (std::allocator<char> *)&v187);
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v189.__r_.__value_.__l.__data_);
              }
              std::string v189 = v185;
              std::string::size_type v95 = v185.__r_.__value_.__l.__size_;
              if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v95 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
              }
              buf.__r_.__value_.__l.__size_ += __pos;
              buf.__r_.__value_.__r.__words[2] = v95;
              Agglomerate::set<TokenBasicItem>(v186, (long long *)&buf);
              std::deque<std::shared_ptr<Agglomerate>>::push_back(v182, &v186);
              if (v191) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v191);
              }
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v189.__r_.__value_.__l.__data_);
              }
              if (*((void *)&v186 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v186 + 1));
              }
            }
            std::string v96 = operator new(0x30uLL);
            *(_OWORD *)((char *)v96 + 8) = 0u;
            *(void *)std::string v96 = off_26C215330;
            v96[2] = 0u;
            *((void *)v96 + 3) = v96 + 2;
            v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v96 + 24;
            v185.__r_.__value_.__l.__size_ = (std::string::size_type)v96;
            long long v97 = *(_OWORD *)v184;
            buf.__r_.__value_.__r.__words[2] = *(void *)(v184 + 16);
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v97;
            if (*(char *)(v184 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(v184 + 24), *(void *)(v184 + 32));
            }
            else
            {
              long long v98 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
              v189.__r_.__value_.__r.__words[2] = *(void *)(v184 + 40);
              *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v98;
            }
            std::string::size_type v99 = *(std::__shared_weak_count **)(v184 + 56);
            uint64_t v190 = *(void *)(v184 + 48);
            unint64_t v191 = v99;
            if (v99) {
              atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::operator=(&v189, (const std::string *)v172);
            buf.__r_.__value_.__l.__size_ = v180 - v28 + *(void *)(v184 + 8);
            if (*((char *)v171 + 23) < 0) {
              std::string::size_type v100 = *((void *)v171 + 1);
            }
            else {
              std::string::size_type v100 = *((unsigned __int8 *)v171 + 23);
            }
            buf.__r_.__value_.__r.__words[2] = v100;
            uint64_t v101 = v185.__r_.__value_.__r.__words[0];
            Agglomerate::set<TokenBasicItem>((uint64_t)v185.__r_.__value_.__l.__data_, (long long *)&buf);
            *(void *)&long long v186 = &v187;
            if (v177 == v29)
            {
              if (v179)
              {
                *(void *)&long long v186 = &v187;
                if (!v102) {
                  operator new();
                }
                *(unsigned char *)(v102 + 8) = *v179;
              }
              std::deque<std::shared_ptr<Agglomerate>>::push_back(v182, (long long *)&v185);
              unint64_t v58 = v11 + 1;
              int v79 = 7;
            }
            else
            {
              std::deque<std::shared_ptr<Agglomerate>>::push_back(v182, (long long *)&v185);
              std::string::size_type __pos = v177 - v28;
              --v11;
              int v79 = 9;
            }
            if (v191) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v191);
            }
            if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v189.__r_.__value_.__l.__data_);
            }
            std::string::size_type v107 = (std::__shared_weak_count *)v185.__r_.__value_.__l.__size_;
            if (v185.__r_.__value_.__l.__size_) {
LABEL_197:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v107);
LABEL_198:
            unint64_t v174 = v58;
            if (v79 != 9) {
              goto LABEL_365;
            }
            goto LABEL_199;
          }
          if (v177 > v29 && v11 < v16 - 1)
          {
            unint64_t v167 = v177 - v29;
            if (v16 <= v11 + 1) {
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v168 = v11 + 1;
            uint64_t v62 = v10[2 * v11 + 2];
            size_t v169 = (const std::string *)(v184 + 24);
            unint64_t v170 = v28;
            if ((void *)(v62 + 8) == v63) {
              uint64_t v183 = 0;
            }
            else {
              uint64_t v183 = v63[5] + 8;
            }
            uint64_t v80 = 0;
            int v81 = 0;
            do
            {
              if (v16 == v80) {
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v82 = *v10;
              if ((void *)(v82 + 8) == v83) {
                uint64_t v84 = 0;
              }
              else {
                uint64_t v84 = v83[5] + 8;
              }
              if (*(char *)(v84 + 47) < 0) {
                uint64_t v85 = *(void *)(v84 + 32);
              }
              else {
                LODWORD(v85) = *(unsigned __int8 *)(v84 + 47);
              }
              int v81 = v81 + v85 - *(_DWORD *)(v84 + 16);
              ++v80;
              v10 += 2;
            }
            while (v11 + 1 != v80);
            if (!v181 || __pos)
            {
              uint64_t v90 = v184 + 24;
              if (!__pos || !v181)
              {
                std::string::size_type v103 = v180 - v31;
                if (v180 != v31)
                {
                  int v104 = operator new(0x30uLL);
                  *(_OWORD *)((char *)v104 + 8) = 0u;
                  *(void *)int v104 = off_26C215330;
                  v104[2] = 0u;
                  *((void *)v104 + 3) = v104 + 2;
                  *(void *)&long long v186 = (char *)v104 + 24;
                  *((void *)&v186 + 1) = v104;
                  long long v105 = *(_OWORD *)v184;
                  buf.__r_.__value_.__r.__words[2] = *(void *)(v184 + 16);
                  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v105;
                  if (*(char *)(v184 + 47) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(v184 + 24), *(void *)(v184 + 32));
                  }
                  else
                  {
                    long long v106 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
                    v189.__r_.__value_.__r.__words[2] = *(void *)(v184 + 40);
                    *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v106;
                  }
                  unint64_t v122 = *(std::__shared_weak_count **)(v184 + 56);
                  uint64_t v190 = *(void *)(v184 + 48);
                  unint64_t v191 = v122;
                  if (v122) {
                    atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v90 = v184 + 24;
                  std::string::basic_string(&v185, v169, __pos, v103, (std::allocator<char> *)&v187);
                  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v189.__r_.__value_.__l.__data_);
                  }
                  std::string v189 = v185;
                  std::string::size_type v123 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
                  if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v123 = v189.__r_.__value_.__l.__size_;
                  }
                  buf.__r_.__value_.__r.__words[2] = v123;
                  Agglomerate::set<TokenBasicItem>(v186, (long long *)&buf);
                  std::deque<std::shared_ptr<Agglomerate>>::push_back(v182, &v186);
                  if (v191) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v191);
                  }
                  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v189.__r_.__value_.__l.__data_);
                  }
                  if (*((void *)&v186 + 1)) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v186 + 1));
                  }
                }
                std::string::size_type v124 = operator new(0x30uLL);
                *(_OWORD *)((char *)v124 + 8) = 0u;
                *(void *)std::string::size_type v124 = off_26C215330;
                v124[2] = 0u;
                *((void *)v124 + 3) = v124 + 2;
                v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v124 + 24;
                v185.__r_.__value_.__l.__size_ = (std::string::size_type)v124;
                long long v125 = *(_OWORD *)v184;
                buf.__r_.__value_.__r.__words[2] = *(void *)(v184 + 16);
                *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v125;
                if (*(char *)(v184 + 47) < 0)
                {
                  std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(v184 + 24), *(void *)(v184 + 32));
                }
                else
                {
                  long long v126 = *(_OWORD *)v90;
                  v189.__r_.__value_.__r.__words[2] = *(void *)(v90 + 16);
                  *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v126;
                }
                std::string::size_type v127 = *(std::__shared_weak_count **)(v184 + 56);
                uint64_t v190 = *(void *)(v184 + 48);
                unint64_t v191 = v127;
                char v128 = v178;
                if (v127) {
                  atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::string::operator=(&v189, (const std::string *)v172);
                buf.__r_.__value_.__l.__size_ = v180 - v28 + *(void *)(v184 + 8);
                buf.__r_.__value_.__r.__words[2] -= v103;
                if (v177 <= *(void *)(v183 + 8) + v81)
                {
                  if (v179)
                  {
                    *(void *)&long long v186 = &v187;
                    if (!v129) {
                      operator new();
                    }
                    *(unsigned char *)(v129 + 8) = *v179;
                  }
                  buf.__r_.__value_.__r.__words[2] += v167;
                }
                else
                {
                  char v128 = 1;
                  unint64_t v168 = v174;
                }
                uint64_t v130 = v185.__r_.__value_.__r.__words[0];
                Agglomerate::set<TokenBasicItem>((uint64_t)v185.__r_.__value_.__l.__data_, (long long *)&buf);
                *(void *)&long long v186 = &v187;
                std::deque<std::shared_ptr<Agglomerate>>::push_back(v182, (long long *)&v185);
                if (v191) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v191);
                }
                if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v189.__r_.__value_.__l.__data_);
                }
                if (v185.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v185.__r_.__value_.__l.__size_);
                }
                std::string::size_type __pos = 0;
                if ((v128 & 1) == 0)
                {
LABEL_373:
                  unint64_t v158 = v168;
                  goto LABEL_364;
                }
                goto LABEL_297;
              }
              uint64_t v91 = *(void *)(*(void *)(v4[5]
                                          + (((unint64_t)(v4[9] + v4[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*((unsigned char *)v4 + 72) + *((unsigned char *)v4 + 64) - 1));
              if ((void *)(v91 + 8) == v92) {
                std::string::size_type v93 = 0;
              }
              else {
                std::string::size_type v93 = (std::string *)(v92[5] + 8);
              }
              std::string::basic_string(&buf, v169, __pos, v44, (std::allocator<char> *)&v185);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v115 = &buf;
              }
              else {
                size_t v115 = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v116 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v116 = buf.__r_.__value_.__l.__size_;
              }
              std::string::append(v93 + 1, (const std::string::value_type *)v115, v116);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              int v117 = *(char *)(v172 + 23);
              if (v117 >= 0) {
                std::string::size_type v118 = (const std::string::value_type *)v172;
              }
              else {
                std::string::size_type v118 = *(const std::string::value_type **)v172;
              }
              if (v117 >= 0) {
                std::string::size_type v119 = *(unsigned __int8 *)(v172 + 23);
              }
              else {
                std::string::size_type v119 = *(void *)(v172 + 8);
              }
              std::string::append(v93 + 1, v118, v119);
              if (v177 <= *(void *)(v183 + 8) + v81)
              {
                if (v179)
                {
                  uint64_t v120 = *(void *)(*(void *)(v4[5]
                                               + (((unint64_t)(v4[9] + v4[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*((unsigned char *)v4 + 72) + *((unsigned char *)v4 + 64) - 1));
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
                  if (!v121) {
                    operator new();
                  }
                  std::string::size_type __pos = 0;
                  *(unsigned char *)(v121 + 8) = *v179;
                }
                else
                {
                  std::string::size_type __pos = 0;
                }
                if ((v178 & 1) == 0) {
                  goto LABEL_373;
                }
LABEL_297:
                char v178 = 1;
                unint64_t v174 = v168;
                goto LABEL_199;
              }
              std::string::size_type __pos = 0;
            }
            else
            {
              std::string::size_type v86 = operator new(0x30uLL);
              *(_OWORD *)((char *)v86 + 8) = 0u;
              *(void *)std::string::size_type v86 = off_26C215330;
              v86[2] = 0u;
              *((void *)v86 + 3) = v86 + 2;
              *(void *)&long long v186 = (char *)v86 + 24;
              *((void *)&v186 + 1) = v86;
              long long v87 = *(_OWORD *)v184;
              buf.__r_.__value_.__r.__words[2] = *(void *)(v184 + 16);
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v87;
              if (*(char *)(v184 + 47) < 0)
              {
                uint64_t v89 = (const std::string *)(v184 + 24);
                std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(v184 + 24), *(void *)(v184 + 32));
              }
              else
              {
                long long v88 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
                uint64_t v89 = (const std::string *)(v184 + 24);
                v189.__r_.__value_.__r.__words[2] = *(void *)(v184 + 40);
                *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v88;
              }
              uint64_t v108 = *(std::__shared_weak_count **)(v184 + 56);
              uint64_t v190 = *(void *)(v184 + 48);
              unint64_t v191 = v108;
              if (v108) {
                atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::basic_string(&v185, v89, 0, v180 - v170, (std::allocator<char> *)&v187);
              char v109 = v178;
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v189.__r_.__value_.__l.__data_);
              }
              std::string v189 = v185;
              int v110 = *(char *)(v172 + 23);
              if (v110 >= 0) {
                unint64_t v111 = (const std::string::value_type *)v172;
              }
              else {
                unint64_t v111 = *(const std::string::value_type **)v172;
              }
              if (v110 >= 0) {
                std::string::size_type v112 = *(unsigned __int8 *)(v172 + 23);
              }
              else {
                std::string::size_type v112 = *(void *)(v172 + 8);
              }
              std::string::append(&v189, v111, v112);
              uint64_t v113 = v186;
              Agglomerate::set<TokenBasicItem>(v186, (long long *)&buf);
              v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
              v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
              if (v177 <= *(void *)(v183 + 8) + v81)
              {
                if (v179)
                {
                  v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
                  if (!v114) {
                    operator new();
                  }
                  *(unsigned char *)(v114 + 8) = *v179;
                }
                unint64_t v174 = v11 + 1;
              }
              else
              {
                char v109 = 1;
              }
              std::deque<std::shared_ptr<Agglomerate>>::push_back(v182, &v186);
              if (v191) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v191);
              }
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v189.__r_.__value_.__l.__data_);
              }
              if (*((void *)&v186 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v186 + 1));
              }
              std::string::size_type __pos = 0;
              if ((v109 & 1) == 0) {
                goto LABEL_365;
              }
            }
            goto LABEL_65;
          }
LABEL_57:
          if (v177 > v31)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v45 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_20CD80000, v45, OS_LOG_TYPE_ERROR, "Unknown error in reconstruct_from_tokens/rewrite", (uint8_t *)&buf, 2u);
            }
            Diagnostics::log(3, "Unknown error in reconstruct_from_tokens/rewrite", v46);
            goto LABEL_199;
          }
LABEL_55:
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v182, (long long *)&v10[2 * v11]);
          goto LABEL_199;
        }
        if (!v11 || !__pos)
        {
          int v64 = operator new(0x30uLL);
          unint64_t v58 = v174;
          *(_OWORD *)((char *)v64 + 8) = 0u;
          *(void *)int v64 = off_26C215330;
          v64[2] = 0u;
          *((void *)v64 + 3) = v64 + 2;
          *(void *)&long long v186 = (char *)v64 + 24;
          *((void *)&v186 + 1) = v64;
          long long v65 = *(_OWORD *)v184;
          buf.__r_.__value_.__r.__words[2] = *(void *)(v184 + 16);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v65;
          if (*(char *)(v184 + 47) < 0)
          {
            std::string::size_type v67 = (const std::string *)(v184 + 24);
            std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(v184 + 24), *(void *)(v184 + 32));
          }
          else
          {
            long long v66 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
            std::string::size_type v67 = (const std::string *)(v184 + 24);
            v189.__r_.__value_.__r.__words[2] = *(void *)(v184 + 40);
            *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v66;
          }
          uint64_t v73 = *(std::__shared_weak_count **)(v184 + 56);
          uint64_t v190 = *(void *)(v184 + 48);
          unint64_t v191 = v73;
          if (v73) {
            atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string(&v185, v67, __pos, v44, (std::allocator<char> *)&v187);
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v189.__r_.__value_.__l.__data_);
          }
          std::string v189 = v185;
          int v74 = *(char *)(v172 + 23);
          if (v74 >= 0) {
            uint64_t v75 = (const std::string::value_type *)v172;
          }
          else {
            uint64_t v75 = *(const std::string::value_type **)v172;
          }
          if (v74 >= 0) {
            std::string::size_type v76 = *(unsigned __int8 *)(v172 + 23);
          }
          else {
            std::string::size_type v76 = *(void *)(v172 + 8);
          }
          std::string::append(&v189, v75, v76);
          uint64_t v77 = v186;
          Agglomerate::set<TokenBasicItem>(v186, (long long *)&buf);
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
          if (v177 == v29)
          {
            if (v179)
            {
              v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
              if (!v78) {
                operator new();
              }
              *(unsigned char *)(v78 + 8) = *v179;
            }
            std::deque<std::shared_ptr<Agglomerate>>::push_back(v182, &v186);
            unint64_t v58 = v11 + 1;
            int v79 = 7;
          }
          else
          {
            std::deque<std::shared_ptr<Agglomerate>>::push_back(v182, &v186);
            std::string::size_type __pos = v177 - v28;
            if (-1
               - 0x3333333333333333
               * ((uint64_t)(*(void *)(*(void *)(a2 + 24) + 8) - **(void **)(a2 + 24)) >> 4) == v175)
              int v79 = 9;
            else {
              int v79 = 7;
            }
            v11 -= -1
                 - 0x3333333333333333
                 * ((uint64_t)(*(void *)(*(void *)(a2 + 24) + 8) - **(void **)(a2 + 24)) >> 4) == v175;
          }
          if (v191) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v191);
          }
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v189.__r_.__value_.__l.__data_);
          }
          std::string::size_type v107 = (std::__shared_weak_count *)*((void *)&v186 + 1);
          if (*((void *)&v186 + 1)) {
            goto LABEL_197;
          }
          goto LABEL_198;
        }
        uint64_t v48 = *(void *)(*(void *)(v19[5] + (((unint64_t)(v19[9] + v19[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (*((unsigned char *)v19 + 72) + *((unsigned char *)v19 + 64) - 1));
        if ((void *)(v48 + 8) == v49) {
          std::string v50 = 0;
        }
        else {
          std::string v50 = (std::string *)(v49[5] + 8);
        }
        std::string::basic_string(&buf, (const std::string *)(v184 + 24), __pos, v44, (std::allocator<char> *)&v185);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v68 = &buf;
        }
        else {
          uint64_t v68 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v69 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v69 = buf.__r_.__value_.__l.__size_;
        }
        std::string::append(v50 + 1, (const std::string::value_type *)v68, v69);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        int v70 = *(char *)(v172 + 23);
        if (v70 >= 0) {
          std::string::size_type v71 = (const std::string::value_type *)v172;
        }
        else {
          std::string::size_type v71 = *(const std::string::value_type **)v172;
        }
        if (v70 >= 0) {
          std::string::size_type v72 = *(unsigned __int8 *)(v172 + 23);
        }
        else {
          std::string::size_type v72 = *(void *)(v172 + 8);
        }
        std::string::append(v50 + 1, v71, v72);
        if (v177 == v29)
        {
          if (v179)
          {
            uint64_t v153 = *(void *)(*(void *)(v4[5] + (((unint64_t)(v4[9] + v4[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*((unsigned char *)v4 + 72) + *((unsigned char *)v4 + 64) - 1));
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
            if (!v141) {
              operator new();
            }
LABEL_311:
            *(unsigned char *)(v141 + 8) = *v179;
          }
LABEL_363:
          unint64_t v158 = v11 + 1;
LABEL_364:
          unint64_t v174 = v158;
          goto LABEL_365;
        }
        std::string::size_type __pos = v177 - v28;
        --v11;
      }
LABEL_199:
      ++v11;
      uint64_t v10 = (uint64_t *)v4[38];
      uint64_t v9 = v4[39];
      if (v11 >= (v9 - (uint64_t)v10) >> 4) {
        goto LABEL_365;
      }
    }
    if (v181)
    {
      if (v177 <= v28) {
        goto LABEL_365;
      }
      uint64_t v131 = *(void *)(*(void *)(v19[5] + (((unint64_t)(v19[9] + v19[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*((unsigned char *)v19 + 72) + *((unsigned char *)v19 + 64) - 1));
      if ((void *)(v131 + 8) == v132) {
        uint64_t v133 = 0;
      }
      else {
        uint64_t v133 = (std::string *)(v132[5] + 8);
      }
      std::string::basic_string(&buf, (const std::string *)(v184 + 24), v177 - v28, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v185);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v142 = &buf;
      }
      else {
        uint64_t v142 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v143 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v143 = buf.__r_.__value_.__l.__size_;
      }
      std::string::append(v133 + 1, (const std::string::value_type *)v142, v143);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (v179)
      {
        uint64_t v144 = *(void *)(*(void *)(v4[5] + (((unint64_t)(v4[9] + v4[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (*((unsigned char *)v4 + 72) + *((unsigned char *)v4 + 64) - 1));
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
        if (!v145) {
          operator new();
        }
        *(unsigned char *)(v145 + 8) = *v179;
      }
      goto LABEL_362;
    }
    uint64_t v134 = **(void **)(a2 + 24);
    unint64_t v135 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a2 + 24) + 8) - v134) >> 4);
    if (v135 - 1 <= v175 || v11 != v16 - 1)
    {
      if (v135 - 1 == v175)
      {
        std::string::size_type v137 = operator new(0x30uLL);
        *(_OWORD *)((char *)v137 + 8) = 0u;
        *(void *)std::string::size_type v137 = off_26C215330;
        v137[2] = 0u;
        *((void *)v137 + 3) = v137 + 2;
        *(void *)&long long v186 = (char *)v137 + 24;
        *((void *)&v186 + 1) = v137;
        long long v138 = *(_OWORD *)v184;
        buf.__r_.__value_.__r.__words[2] = *(void *)(v184 + 16);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v138;
        if (*(char *)(v184 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(v184 + 24), *(void *)(v184 + 32));
        }
        else
        {
          long long v139 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v189.__r_.__value_.__r.__words[2] = *(void *)(v184 + 40);
          *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v139;
        }
        uint64_t v149 = *(std::__shared_weak_count **)(v184 + 56);
        uint64_t v190 = *(void *)(v184 + 48);
        unint64_t v191 = v149;
        if (v149) {
          atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string(&v185, v30, v177 - v28, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v187);
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v189.__r_.__value_.__l.__data_);
        }
        std::string v189 = v185;
        std::string::size_type v150 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v150 = v189.__r_.__value_.__l.__size_;
        }
        buf.__r_.__value_.__l.__size_ = v177 - v28 + *(void *)(v184 + 8);
        buf.__r_.__value_.__r.__words[2] = v150;
        uint64_t v151 = v186;
        Agglomerate::set<TokenBasicItem>(v186, (long long *)&buf);
        if (v179)
        {
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
          if (!v152) {
            operator new();
          }
          *(unsigned char *)(v152 + 8) = *v179;
        }
LABEL_356:
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v182, &v186);
        if (v191) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v191);
        }
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v189.__r_.__value_.__l.__data_);
        }
        if (*((void *)&v186 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v186 + 1));
        }
LABEL_362:
        std::string::size_type __pos = 0;
        goto LABEL_363;
      }
      if (v135 <= v175 + 1) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      if (v29 <= *(unsigned int *)(v134 + 80 * (v175 + 1)))
      {
        uint64_t v146 = operator new(0x30uLL);
        *(_OWORD *)((char *)v146 + 8) = 0u;
        *(void *)uint64_t v146 = off_26C215330;
        v146[2] = 0u;
        *((void *)v146 + 3) = v146 + 2;
        *(void *)&long long v186 = (char *)v146 + 24;
        *((void *)&v186 + 1) = v146;
        long long v147 = *(_OWORD *)v184;
        buf.__r_.__value_.__r.__words[2] = *(void *)(v184 + 16);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v147;
        if (*(char *)(v184 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)(v184 + 24), *(void *)(v184 + 32));
        }
        else
        {
          long long v148 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v189.__r_.__value_.__r.__words[2] = *(void *)(v184 + 40);
          *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v148;
        }
        v154 = *(std::__shared_weak_count **)(v184 + 56);
        uint64_t v190 = *(void *)(v184 + 48);
        unint64_t v191 = v154;
        if (v154) {
          atomic_fetch_add_explicit(&v154->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string(&v185, v30, v177 - v28, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v187);
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v189.__r_.__value_.__l.__data_);
        }
        std::string v189 = v185;
        std::string::size_type v155 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v155 = v189.__r_.__value_.__l.__size_;
        }
        buf.__r_.__value_.__l.__size_ = v177 - v28 + *(void *)(v184 + 8);
        buf.__r_.__value_.__r.__words[2] = v155;
        uint64_t v156 = v186;
        Agglomerate::set<TokenBasicItem>(v186, (long long *)&buf);
        if (v179)
        {
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
          if (!v157) {
            operator new();
          }
          *(unsigned char *)(v157 + 8) = *v179;
        }
        goto LABEL_356;
      }
    }
LABEL_365:
    uint64_t v3 = **(void **)(a2 + 24);
    unint64_t v159 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a2 + 24) + 8) - v3) >> 4);
    if (v159 - 1 == v175)
    {
      uint64_t v160 = v4[38];
      unint64_t v6 = v174;
      if (v174 < (v4[39] - v160) >> 4)
      {
        uint64_t v161 = 16 * v174;
        unint64_t v162 = v174;
        do
        {
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v182, (long long *)(v160 + v161));
          ++v162;
          uint64_t v160 = v4[38];
          v161 += 16;
        }
        while (v162 < (v4[39] - v160) >> 4);
        uint64_t v3 = **(void **)(a2 + 24);
        unint64_t v159 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a2 + 24) + 8) - v3) >> 4);
      }
    }
    else
    {
      unint64_t v6 = v174;
    }
    unint64_t v5 = v175 + 1;
  }
  while (v159 > v175 + 1);
}

void sub_20D32341C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<TokenTransliteratedItem>::~ItemHolder()
{
}

void Agglomerate::ItemHolder<TokenRewriteItem>::~ItemHolder()
{
}

void FrontendNNModule::reconstruct_from_tokens(uint64_t a1, long long **a2)
{
  std::string::size_type v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (void *)(a1 + 32);
    do
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v4, v2++);
    while (v2 != v3);
  }
}

void FrontendNNModule::reconstruct_from_tokens(FrontendNNModule *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 304);
  std::string::size_type v2 = (long long *)*((void *)this + 38);
  uint64_t v3 = (long long *)*((void *)this + 39);
  if (v2 != v3)
  {
    uint64_t v4 = (void *)((char *)this + 32);
    do
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v4, v2++);
    while (v2 != v3);
  }
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100](v1);
}

void FrontendNNModule::reconstruct_from_single_token(uint64_t *a1, const std::string *a2)
{
  uint64_t v4 = a1 + 38;
  uint64_t v5 = *(void *)(a1[39] - 16);
  std::string __str = (std::string *)a2;
  std::string::pointer data = a2[1].__r_.__value_.__l.__data_;
  uint64_t v8 = *data;
  uint64_t v9 = data[1];
  if ((void *)(v5 + 8) != v6)
  {
    if (v8 != v9)
    {
      if ((void *)(v5 + 8) == v10) {
        unint64_t v11 = 0;
      }
      else {
        unint64_t v11 = (std::string *)(v10[5] + 8);
      }
      std::string::operator=(v11 + 1, a2);
      std::deque<std::shared_ptr<Agglomerate>>::push_back(a1 + 4, (long long *)(a1[39] - 16));
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100](v4);
      return;
    }
    goto LABEL_63;
  }
  if (v8 == v9)
  {
LABEL_63:
    char v46 = *(void (**)(uint64_t *))(*a1 + 152);
    v46(a1);
    return;
  }
  std::string::size_type v47 = v4;
  uint64_t v48 = a1;
  uint64_t v52 = (void *)(*(uint64_t (**)(uint64_t *))(*a1 + 72))(a1);
  uint64_t v12 = a2;
  uint64_t v13 = a2[1].__r_.__value_.__l.__data_;
  uint64_t v14 = *v13;
  if (v13[1] != *v13)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    std::string::size_type v17 = 0;
    unint64_t v18 = 0;
    std::string v50 = v48 + 4;
    uint64_t v51 = v52[1];
    do
    {
      if (v18 < *(unsigned int *)(v14 + v15))
      {
        unint64_t v19 = operator new(0x30uLL);
        *(_OWORD *)((char *)v19 + 8) = 0u;
        *(void *)unint64_t v19 = off_26C215330;
        v19[2] = 0u;
        *((void *)v19 + 3) = v19 + 2;
        uint64_t v20 = (uint64_t)v19 + 24;
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v19 + 24;
        v53.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        LODWORD(v60) = 1952807028;
        std::string::basic_string(&v54, v12, v17, *(unsigned int *)(v14 + v15) - v18, (std::allocator<char> *)&v59);
        uint64_t v21 = v52[6];
        uint64_t v22 = (std::__shared_weak_count *)v52[7];
        long long v62 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
        *(void *)&long long v63 = *((void *)&v54.__r_.__value_.__l + 2);
        if (v22)
        {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v23 = v64;
          *((void *)&v63 + 1) = v21;
          int v64 = v22;
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
        }
        else
        {
          *((void *)&v63 + 1) = v21;
          int v64 = 0;
        }
        char v24 = BYTE7(v63);
        if ((SBYTE7(v63) & 0x80u) == 0) {
          uint64_t v25 = BYTE7(v63);
        }
        else {
          uint64_t v25 = *((void *)&v62 + 1);
        }
        *((void *)&v60 + 1) = v18 + v51;
        uint64_t v61 = v25;
        Agglomerate::set<TokenBasicItem>(v20, &v60);
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v50, (long long *)&v53);
        if (v22)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          char v24 = BYTE7(v63);
        }
        if (v24 < 0) {
          operator delete((void *)v62);
        }
        if (v53.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v53.__r_.__value_.__l.__size_);
        }
        v17 += v25;
        v18 += v25;
        uint64_t v12 = __str;
      }
      uint64_t v26 = operator new(0x30uLL);
      *(_OWORD *)((char *)v26 + 8) = 0u;
      *(void *)uint64_t v26 = off_26C215330;
      *((void *)&v59 + 1) = v26;
      v26[2] = 0u;
      *((void *)v26 + 3) = v26 + 2;
      *(void *)&long long v59 = (char *)v26 + 24;
      int v64 = 0;
      long long v62 = 0u;
      long long v63 = 0u;
      LODWORD(v60) = 1952807028;
      std::string::operator=((std::string *)&v62, (const std::string *)(v14 + v15 + 32));
      uint64_t v28 = v52[6];
      uint64_t v27 = (std::__shared_weak_count *)v52[7];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v29 = v64;
      *((void *)&v63 + 1) = v28;
      int v64 = v27;
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (*(char *)(v14 + v15 + 31) < 0) {
        uint64_t v30 = *(void *)(v14 + v15 + 16);
      }
      else {
        uint64_t v30 = *(unsigned __int8 *)(v14 + v15 + 31);
      }
      uint64_t v61 = v30;
      *((void *)&v60 + 1) = v51 + *(unsigned int *)(v14 + v15);
      uint64_t v31 = v59;
      Agglomerate::set<TokenBasicItem>(v59, &v60);
      uint64_t v32 = v61;
      if ((SBYTE7(v63) & 0x80u) == 0) {
        uint64_t v33 = BYTE7(v63);
      }
      else {
        uint64_t v33 = *((void *)&v62 + 1);
      }
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v50, &v59);
      v18 += v32;
      v17 += v33;
      if (v16 == -1
                - 0x3333333333333333
                * ((uint64_t)(*(void *)(v12[1].__r_.__value_.__r.__words[0] + 8)
                           - *(void *)v12[1].__r_.__value_.__l.__data_) >> 4))
      {
        std::string::size_type size = HIBYTE(v12->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) != 0) {
          std::string::size_type size = v12->__r_.__value_.__l.__size_;
        }
        if (v17 < size)
        {
          long long v35 = operator new(0x30uLL);
          *(_OWORD *)((char *)v35 + 8) = 0u;
          *(void *)long long v35 = off_26C215330;
          v35[2] = 0u;
          *((void *)v35 + 3) = v35 + 2;
          uint64_t v36 = (uint64_t)v35 + 24;
          *(void *)&long long v58 = (char *)v35 + 24;
          *((void *)&v58 + 1) = v35;
          uint64_t v57 = 0;
          long long __p = 0u;
          long long v56 = 0u;
          LODWORD(v54.__r_.__value_.__l.__data_) = 1952807028;
          std::string::basic_string(&v53, v12, v17, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v65);
          uint64_t v37 = v52[6];
          long long v38 = (std::__shared_weak_count *)v52[7];
          long long __p = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
          *(void *)&long long v56 = *((void *)&v53.__r_.__value_.__l + 2);
          if (v38)
          {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v39 = v57;
            *((void *)&v56 + 1) = v37;
            uint64_t v57 = v38;
            if (v39) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            }
          }
          else
          {
            *((void *)&v56 + 1) = v37;
            uint64_t v57 = 0;
          }
          char v40 = BYTE7(v56);
          if ((SBYTE7(v56) & 0x80u) == 0) {
            std::string::size_type v41 = BYTE7(v56);
          }
          else {
            std::string::size_type v41 = *((void *)&__p + 1);
          }
          v54.__r_.__value_.__l.__size_ = v18 + v51;
          v54.__r_.__value_.__r.__words[2] = v41;
          Agglomerate::set<TokenBasicItem>(v36, (long long *)&v54);
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v50, &v58);
          if (v38)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
            char v40 = BYTE7(v56);
          }
          if (v40 < 0) {
            operator delete((void *)__p);
          }
          if (*((void *)&v58 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
          }
          v17 += v41;
          v18 += v41;
          uint64_t v12 = __str;
        }
      }
      if (v64) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v64);
      }
      if (SBYTE7(v63) < 0) {
        operator delete((void *)v62);
      }
      if (*((void *)&v59 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
      }
      ++v16;
      uint64_t v42 = v12[1].__r_.__value_.__l.__data_;
      uint64_t v14 = *v42;
      v15 += 80;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v42[1] - *v42) >> 4) > v16);
  }
  if (v48[9])
  {
    char v43 = (*(uint64_t (**)(uint64_t *))(*v48 + 88))(v48);
    uint64_t v44 = *(void *)(*(void *)(v48[5] + (((unint64_t)(v48[9] + v48[8] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (*((unsigned char *)v48 + 72) + *((unsigned char *)v48 + 64) - 1));
    *(void *)&long long v60 = &v54;
    if (!v45) {
      operator new();
    }
    *(unsigned char *)(v45 + 8) = v43;
  }
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100](v47);
}

void sub_20D323D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  TokenBasicItem::~TokenBasicItem((TokenBasicItem *)&a19);
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  TokenBasicItem::~TokenBasicItem((TokenBasicItem *)(v31 - 160));
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  _Unwind_Resume(a1);
}

uint64_t FrontendNNModule::post_fix@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    unint64_t v6 = (void *)(a1 + 104);
    if (*(char *)(a1 + 127) < 0) {
      unint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v10 = v6;
    _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_ERROR, "No implementation for post-fix: %s", buf, 0xCu);
  }
  uint64_t v7 = (void *)(a1 + 104);
  if (*(char *)(a1 + 127) < 0) {
    uint64_t v7 = (void *)*v7;
  }
  uint64_t result = Diagnostics::log(3, "No implementation for post-fix: %s", v5, v7);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void FrontendNNModule::model_infer(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  std::string::size_type v3 = a2;
  v512[14] = *MEMORY[0x263EF8340];
  unint64_t v6 = (const char *)(a1 + 152);
  if (*(char *)(a1 + 175) < 0)
  {
    uint64_t v10 = *(void *)(a1 + 160);
    if (v10 != 6)
    {
      if (v10 == 7 && **(_DWORD **)v6 == 762541172 && *(_DWORD *)(*(void *)v6 + 3) == 1886154285) {
        goto LABEL_16;
      }
LABEL_824:
      exception = __cxa_allocate_exception(0x10uLL);
      if (*(char *)(a1 + 175) < 0) {
        unint64_t v6 = *(const char **)v6;
      }
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Unable to do model inference with model_framework:'%s'", v6);
      MEMORY[0x210558D40](exception, &buf);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    uint64_t v8 = *(const char **)v6;
    goto LABEL_31;
  }
  int v7 = *(unsigned __int8 *)(a1 + 175);
  uint64_t v8 = (const char *)(a1 + 152);
  if (v7 == 6)
  {
LABEL_31:
    int v23 = *(_DWORD *)v8;
    int v24 = *((unsigned __int16 *)v8 + 2);
    if (v23 != 1701147234 || v24 != 25978) {
      goto LABEL_824;
    }
    uint64_t v26 = *(void *)(a1 + 208);
    if (!v26)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (void *)(a1 + 104);
        if (*(char *)(a1 + 127) < 0) {
          uint64_t v30 = (void *)*v30;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v30;
        _os_log_impl(&dword_20CD80000, v28, OS_LOG_TYPE_ERROR, "#[%s] gets NN Model failed", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v31 = (void *)(a1 + 104);
      if (*(char *)(a1 + 127) < 0) {
        uint64_t v31 = (void *)*v31;
      }
      Diagnostics::log(3, "#[%s] gets NN Model failed", v29, v31);
      uint64_t v32 = operator new(0x30uLL);
      uint64_t v33 = v32;
      v32[1] = 0;
      v32[2] = 0;
      v32[3] = 0;
      unint64_t v18 = v32 + 3;
      *uint64_t v32 = off_26C219B28;
      v32[4] = 0;
      v32[5] = 0;
      *a3 = v32 + 3;
      a3[1] = v32;
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
        long long v35 = v33 + 5;
        unint64_t v34 = v33[5];
        uint64_t v21 = v33 + 4;
        unint64_t v19 = v33[4];
        uint64_t v501 = -1;
        uint64_t v502 = -1;
        if (v19 < v34) {
          goto LABEL_229;
        }
      }
      else
      {
        unint64_t v19 = 0;
        unint64_t v34 = 0;
        std::string __str = *(std::string *)v3;
        uint64_t v501 = -1;
        uint64_t v502 = -1;
        uint64_t v21 = v32 + 4;
        long long v35 = v32 + 5;
      }
      unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - *v18) >> 3);
      unint64_t v140 = v36 + 1;
      if (v36 + 1 > 0x666666666666666) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v141 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - *v18) >> 3);
      if (2 * v141 > v140) {
        unint64_t v140 = 2 * v141;
      }
      if (v141 >= 0x333333333333333) {
        unint64_t v39 = 0x666666666666666;
      }
      else {
        unint64_t v39 = v140;
      }
      *((void *)&v504 + 1) = v35;
      if (v39) {
        goto LABEL_60;
      }
      goto LABEL_237;
    }
    long long v498 = 0uLL;
    uint64_t v499 = 0;
    v478 = 0;
    v479 = 0;
    unint64_t v480 = 0;
    v476 = 0;
    uint64_t v477 = 0;
    v475 = (uint64_t **)&v476;
    uint64_t v493 = 0;
    uint64_t v494 = 0;
    uint64_t v495 = 0;
    int v27 = *(char *)(a2 + 23);
    if (*(unsigned char *)(v26 + 12888))
    {
      if (v27 < 0) {
        std::string::__init_copy_ctor_external(&v492, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v492 = *(std::string *)a2;
      }
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TokenizeInputString(v26, &v492, &v493);
    }
    else
    {
      if (v27 < 0) {
        std::string::__init_copy_ctor_external(&v492, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v492 = *(std::string *)a2;
      }
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TokenizeInputString(v26 + 6440, &v492, &v493);
    }
    if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v492.__r_.__value_.__l.__data_);
    }
    v469 = (BBPEVocab *)v26;
    std::string::basic_string[abi:ne180100]<0>(&v489, "@@");
    uint64_t v150 = v493;
    uint64_t v467 = v494;
    if (v493 != v494)
    {
      unint64_t v151 = 0;
      std::string::size_type v474 = 0;
      uint64_t v152 = 0;
      std::string::size_type v153 = 0;
      uint64_t v154 = 0;
      do
      {
        std::string::size_type v471 = v153;
        uint64_t v155 = v154;
        if (*(char *)(v150 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v150, *(void *)(v150 + 8));
        }
        else
        {
          long long v156 = *(_OWORD *)v150;
          __str.__r_.__value_.__r.__words[2] = *(void *)(v150 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v156;
        }
        std::string::size_type v157 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        LOBYTE(v158) = *((unsigned char *)&__str.__r_.__value_.__s + 23);
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v160 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v160 = __str.__r_.__value_.__l.__size_;
        }
        if ((v491 & 0x80u) == 0) {
          size_t v161 = v491;
        }
        else {
          size_t v161 = (size_t)v490;
        }
        std::string::size_type v162 = v160 - v161;
        if (v160 <= v161) {
          goto LABEL_285;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__str.__r_.__value_.__l.__size_ < v162) {
LABEL_820:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          size_t v163 = __str.__r_.__value_.__l.__size_ - v162 >= v161 ? v161 : __str.__r_.__value_.__l.__size_ - v162;
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) < v162) {
            goto LABEL_820;
          }
          size_t v163 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - v162 >= v161
               ? v161
               : HIBYTE(__str.__r_.__value_.__r.__words[2]) - v162;
          p_str = &__str;
        }
        std::string::size_type v165 = (v491 & 0x80u) == 0 ? &v489 : (void **)v489;
        if (!memcmp((char *)p_str + v162, v165, v163) && v163 == v161)
        {
          std::string::basic_string(&buf, &__str, 0, v162, (std::allocator<char> *)&__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          int v167 = 0;
          std::string __str = buf;
          std::string::size_type v157 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          std::string::size_type size = buf.__r_.__value_.__l.__size_;
          std::string::size_type v158 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else
        {
LABEL_285:
          int v167 = 1;
        }
        if ((v158 & 0x80u) == 0) {
          std::string::size_type v168 = v157;
        }
        else {
          std::string::size_type v168 = size;
        }
        uint64_t v154 = v155 + v168;
        if (*(char *)(a2 + 23) < 0)
        {
          std::string::size_type v169 = *(void *)(a2 + 8);
          std::string::size_type v171 = v471;
          if (v474 >= v169)
          {
LABEL_302:
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v176 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              std::string::size_type v178 = *(unsigned __int8 *)(a2 + 23);
              if ((v178 & 0x80u) != 0) {
                std::string::size_type v178 = *(void *)(a2 + 8);
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v474;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v178;
              _os_log_impl(&dword_20CD80000, v176, OS_LOG_TYPE_DEBUG, "Invalid original end position during BPE token alignment. Orig:%zu, Length: %zu", (uint8_t *)&buf, 0x16u);
            }
            uint64_t v179 = *(unsigned __int8 *)(a2 + 23);
            if ((v179 & 0x80u) != 0) {
              uint64_t v179 = *(void *)(a2 + 8);
            }
            Diagnostics::log(7, "Invalid original end position during BPE token alignment. Orig:%zu, Length: %zu", v177, v474, v179);
            goto LABEL_311;
          }
          uint64_t v170 = *(void *)a2;
        }
        else
        {
          std::string::size_type v169 = *(unsigned __int8 *)(a2 + 23);
          uint64_t v170 = a2;
          std::string::size_type v171 = v471;
          if (v474 >= v169) {
            goto LABEL_302;
          }
        }
        uint64_t v172 = (unsigned __int8 *)(v170 + v474);
        std::string::size_type v173 = v169 - v474;
        std::string::size_type v174 = v169 + v152 - v474;
        do
        {
          int v175 = *v172++;
          if (v175 != 32) {
            goto LABEL_301;
          }
          ++v152;
          --v173;
        }
        while (v173);
        uint64_t v152 = v174;
LABEL_301:
        std::string::size_type v474 = v154 + v152 - v171;
LABEL_311:
        unint64_t v180 = v476;
        uint64_t v181 = &v476;
        std::string::size_type v182 = &v476;
        if (!v476) {
          goto LABEL_327;
        }
        uint64_t v183 = (uint64_t **)&v476;
        uint64_t v184 = v476;
        do
        {
          std::string v185 = v184;
          long long v186 = v183;
          unint64_t shared_owners = v184[1].__shared_owners_;
          if (shared_owners >= v151) {
            uint64_t v183 = (uint64_t **)v184;
          }
          else {
            uint64_t v184 = (std::__shared_weak_count *)((char *)v184 + 8);
          }
          uint64_t v184 = (std::__shared_weak_count *)v184->__vftable;
        }
        while (v184);
        if (v183 == (uint64_t **)&v476) {
          goto LABEL_846;
        }
        if (shared_owners < v151) {
          std::string v185 = (std::__shared_weak_count *)v186;
        }
        if (v151 < v185[1].__shared_owners_)
        {
LABEL_846:
          do
          {
            while (1)
            {
              std::string::size_type v182 = (std::__shared_weak_count **)v180;
              unint64_t v188 = v180[1].__shared_owners_;
              if (v151 >= v188) {
                break;
              }
              unint64_t v180 = *v182;
              uint64_t v181 = v182;
              if (!*v182) {
                goto LABEL_327;
              }
            }
            if (v188 >= v151) {
              goto LABEL_330;
            }
            unint64_t v180 = v182[1];
          }
          while (v180);
          uint64_t v181 = v182 + 1;
LABEL_327:
          std::string v189 = (uint64_t *)operator new(0x38uLL);
          v189[4] = v151;
          v189[5] = v152;
          v189[6] = v474;
          *std::string v189 = 0;
          v189[1] = 0;
          v189[2] = (uint64_t)v182;
          *uint64_t v181 = (std::__shared_weak_count *)v189;
          if (*v475)
          {
            v475 = (uint64_t **)*v475;
            std::string v189 = (uint64_t *)*v181;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v476, v189);
          ++v477;
LABEL_330:
          unint64_t v190 = v151;
          if (v167) {
            goto LABEL_331;
          }
          goto LABEL_332;
        }
        if (v167)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v205 = v180[1].__shared_owners_;
              if (v151 >= v205) {
                break;
              }
              unint64_t v180 = (std::__shared_weak_count *)v180->__vftable;
              if (!v180) {
                goto LABEL_817;
              }
            }
            if (v205 >= v151) {
              break;
            }
            unint64_t v180 = (std::__shared_weak_count *)v180->__shared_owners_;
            if (!v180) {
LABEL_817:
            }
              std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
          }
          v180[2].__vftable = (std::__shared_weak_count_vtbl *)v474;
LABEL_331:
          unint64_t v190 = v151 + 1;
          goto LABEL_332;
        }
        unint64_t v190 = v151;
LABEL_332:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&buf, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string buf = __str;
        }
        *(void *)&long long v504 = v151;
        unint64_t v191 = v479;
        if ((unint64_t)v479 >= v480)
        {
          std::string v193 = v478;
          int64_t v194 = ((char *)v479 - v478) >> 5;
          unint64_t v195 = v194 + 1;
          if ((unint64_t)(v194 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v196 = v480 - (void)v478;
          if ((uint64_t)(v480 - (void)v478) >> 4 > v195) {
            unint64_t v195 = v196 >> 4;
          }
          if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v197 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v197 = v195;
          }
          if (v197 >> 59) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v198 = (char *)operator new(32 * v197);
          std::string v199 = &v198[32 * v194];
          *(_OWORD *)std::string v199 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          std::string::size_type v200 = buf.__r_.__value_.__r.__words[2];
          memset(&buf, 0, sizeof(buf));
          *((void *)v199 + 2) = v200;
          *((void *)v199 + 3) = v151;
          long long v201 = (std::__shared_weak_count *)(v199 + 32);
          if (v191 == (std::__shared_weak_count *)v193)
          {
            v478 = v199;
            v479 = (std::__shared_weak_count *)(v199 + 32);
            unint64_t v480 = (unint64_t)&v198[32 * v197];
            if (v191) {
              goto LABEL_352;
            }
          }
          else
          {
            do
            {
              long long v202 = *(_OWORD *)&v191[-2].__shared_weak_owners_;
              *((void *)v199 - 2) = v191[-1].__shared_owners_;
              *((_OWORD *)v199 - 2) = v202;
              v191[-1].__vftable = 0;
              v191[-1].__shared_owners_ = 0;
              v191[-2].__shared_weak_owners_ = 0;
              *((void *)v199 - 1) = v191[-1].__shared_weak_owners_;
              v199 -= 32;
              unint64_t v191 = (std::__shared_weak_count *)((char *)v191 - 32);
            }
            while (v191 != (std::__shared_weak_count *)v193);
            long long v203 = v478;
            unint64_t v191 = v479;
            v478 = v199;
            v479 = v201;
            unint64_t v480 = (unint64_t)&v198[32 * v197];
            if (v191 != (std::__shared_weak_count *)v203)
            {
              do
              {
                if (SHIBYTE(v191[-1].__shared_owners_) < 0) {
                  operator delete((void *)v191[-2].__shared_weak_owners_);
                }
                unint64_t v191 = (std::__shared_weak_count *)((char *)v191 - 32);
              }
              while (v191 != (std::__shared_weak_count *)v203);
              unint64_t v191 = (std::__shared_weak_count *)v203;
            }
            if (v191) {
LABEL_352:
            }
              operator delete(v191);
          }
          v479 = v201;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          goto LABEL_355;
        }
        std::__shared_count v192 = *(std::__shared_count *)&buf.__r_.__value_.__l.__data_;
        v479->__shared_weak_owners_ = buf.__r_.__value_.__r.__words[2];
        v191->std::__shared_count = v192;
        v191[1].__vftable = (std::__shared_weak_count_vtbl *)v504;
        v479 = (std::__shared_weak_count *)((char *)v191 + 32);
LABEL_355:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v204 = __str.__r_.__value_.__l.__size_;
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        else
        {
          std::string::size_type v204 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        v152 += v204;
        std::string::size_type v153 = v171 + v204;
        v150 += 24;
        unint64_t v151 = v190;
        std::string::size_type v3 = a2;
      }
      while (v150 != v467);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    v206 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(v3 + 23) >= 0) {
        std::string::size_type v208 = v3;
      }
      else {
        std::string::size_type v208 = *(void *)v3;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v208;
      _os_log_impl(&dword_20CD80000, v206, OS_LOG_TYPE_DEBUG, "  [g2p   input]: %s", (uint8_t *)&buf, 0xCu);
    }
    if (*(char *)(v3 + 23) >= 0) {
      std::string::size_type v209 = v3;
    }
    else {
      std::string::size_type v209 = *(void *)v3;
    }
    Diagnostics::log(7, "  [g2p   input]: %s", v207, v209);
    std::string::basic_string[abi:ne180100]<0>(&buf, "@@");
    memset(&__str, 0, sizeof(__str));
    memset(&__p, 0, sizeof(__p));
    uint64_t v210 = v493;
    uint64_t v211 = v494;
    if (v493 == v494) {
      goto LABEL_453;
    }
    int v212 = 0;
    while (1)
    {
      if (++v212 == *((_DWORD *)v469 + 3221))
      {
        UTFString::rstrip(&__str);
        EncoderDecoder::decode_chunk_and_merge((uint64_t)v469, (uint64_t)&__str, (kaldi::quasar::TranslationUtil::NbestElement **)&v498, (uint64_t *)&v478);
        int v212 = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          *__str.__r_.__value_.__l.__data_ = 0;
          __str.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          __str.__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
        }
      }
      std::string::size_type v213 = *(unsigned __int8 *)(v210 + 23);
      if (*(char *)(v210 + 23) < 0)
      {
        size_t v218 = *(void *)(v210 + 8);
        std::string::size_type v214 = buf.__r_.__value_.__l.__size_;
        size_t v215 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v219 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v219 = buf.__r_.__value_.__l.__size_;
        }
        std::string::size_type v217 = v218 - v219;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_400;
        }
      }
      else
      {
        std::string::size_type v214 = buf.__r_.__value_.__l.__size_;
        size_t v215 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v216 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v216 = buf.__r_.__value_.__l.__size_;
        }
        std::string::size_type v217 = v213 - v216;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          size_t v218 = *(unsigned __int8 *)(v210 + 23);
LABEL_400:
          size_t v215 = v214;
          if (v218 <= v214) {
            goto LABEL_425;
          }
          int v220 = 1;
          goto LABEL_402;
        }
        size_t v218 = *(unsigned __int8 *)(v210 + 23);
      }
      if (v218 <= v215) {
        goto LABEL_425;
      }
      int v220 = 0;
LABEL_402:
      if ((v213 & 0x80) != 0)
      {
        if (v215 == -1) {
          goto LABEL_823;
        }
        std::string::size_type v224 = *(void *)(v210 + 8);
        BOOL v225 = v224 >= v217;
        size_t v226 = v224 - v217;
        if (!v225) {
          goto LABEL_823;
        }
        if (v226 >= v215) {
          size_t v222 = v215;
        }
        else {
          size_t v222 = v226;
        }
        v223 = *(const std::string::value_type **)v210;
      }
      else
      {
        if (v213 < v217 || v215 == -1) {
LABEL_823:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        if (v213 - v217 >= v215) {
          size_t v222 = v215;
        }
        else {
          size_t v222 = v213 - v217;
        }
        v223 = (const std::string::value_type *)v210;
      }
      if (v220) {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      else {
        p_std::string buf = &buf;
      }
      if (!memcmp(&v223[v217], p_buf, v222) && v222 == v215)
      {
        std::string::basic_string(&v496, (const std::string *)v210, 0, v217, (std::allocator<char> *)&v488);
        if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v233 = &v496;
        }
        else {
          v233 = (std::string *)v496.__r_.__value_.__r.__words[0];
        }
        if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v234 = HIBYTE(v496.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v234 = v496.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v233, v234);
        if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v496.__r_.__value_.__l.__data_);
        }
        goto LABEL_448;
      }
LABEL_425:
      if ((v213 & 0x80u) == 0) {
        v229 = (const std::string::value_type *)v210;
      }
      else {
        v229 = *(const std::string::value_type **)v210;
      }
      if ((v213 & 0x80u) == 0) {
        std::string::size_type v230 = v213;
      }
      else {
        std::string::size_type v230 = *(void *)(v210 + 8);
      }
      std::string::append(&__p, v229, v230);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v232 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v232 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&__str, (const std::string::value_type *)p_p, v232);
      std::string::append(&__str, " ");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      }
LABEL_448:
      v210 += 24;
      if (v210 == v211)
      {
        std::string::size_type v235 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v235 = __str.__r_.__value_.__l.__size_;
        }
        if (v235)
        {
          UTFString::rstrip(&__str);
          EncoderDecoder::decode_chunk_and_merge((uint64_t)v469, (uint64_t)&__str, (kaldi::quasar::TranslationUtil::NbestElement **)&v498, (uint64_t *)&v478);
        }
LABEL_453:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if ((char)v491 < 0) {
          operator delete(v489);
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v493;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        v236 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          v237 = (void *)(a1 + 104);
          if (*(char *)(a1 + 127) < 0) {
            v237 = (void *)*v237;
          }
          Censor::global_plaintext(&buf, a2);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v238 = &buf;
          }
          else {
            v238 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(__str.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v237;
          WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v238;
          _os_log_impl(&dword_20CD80000, v236, OS_LOG_TYPE_DEFAULT, "#[%s] NN Model Infer:\n[Input ] - %s", (uint8_t *)&__str, 0x16u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        v239 = (void *)(a1 + 104);
        if (*(char *)(a1 + 127) < 0) {
          v239 = (void *)*v239;
        }
        Censor::global_plaintext(&buf, a2);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v241 = &buf;
        }
        else {
          v241 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(5, "#[%s] NN Model Infer:\n[Input ] - %s", v240, v239, v241);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        (*(void (**)(uint64_t, char **, uint64_t ***, long long *))(*(void *)a1 + 112))(a1, &v478, &v475, &v498);
        std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(v476);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v478;
        std::vector<std::pair<std::string,unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v498;
        std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        return;
      }
    }
  }
  if (v7 != 7) {
    goto LABEL_824;
  }
  if (*(_DWORD *)v6 != 762541172 || *(_DWORD *)(a1 + 155) != 1886154285) {
    goto LABEL_824;
  }
LABEL_16:
  if (!*(void *)(a1 + 224) || !*(void *)(a1 + 240))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = (void *)(a1 + 104);
      if (*(char *)(a1 + 127) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v14;
      _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_ERROR, "#[%s] gets NN Model failed", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v15 = (void *)(a1 + 104);
    if (*(char *)(a1 + 127) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    Diagnostics::log(3, "#[%s] gets NN Model failed", v13, v15);
    unint64_t v16 = operator new(0x30uLL);
    std::string::size_type v17 = v16;
    v16[1] = 0;
    v16[2] = 0;
    v16[3] = 0;
    unint64_t v18 = v16 + 3;
    *unint64_t v16 = off_26C219B28;
    void v16[4] = 0;
    v16[5] = 0;
    *a3 = v16 + 3;
    a3[1] = v16;
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      unint64_t v19 = 0;
      unint64_t v20 = 0;
      std::string __str = *(std::string *)v3;
      uint64_t v501 = -1;
      uint64_t v502 = -1;
      uint64_t v21 = v16 + 4;
      uint64_t v22 = v16 + 5;
      goto LABEL_53;
    }
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
    uint64_t v22 = v17 + 5;
    unint64_t v20 = v17[5];
    uint64_t v21 = v17 + 4;
    unint64_t v19 = v17[4];
    uint64_t v501 = -1;
    uint64_t v502 = -1;
    if (v19 >= v20)
    {
LABEL_53:
      unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - *v18) >> 3);
      unint64_t v37 = v36 + 1;
      if (v36 + 1 > 0x666666666666666) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - *v18) >> 3);
      if (2 * v38 > v37) {
        unint64_t v37 = 2 * v38;
      }
      if (v38 >= 0x333333333333333) {
        unint64_t v39 = 0x666666666666666;
      }
      else {
        unint64_t v39 = v37;
      }
      *((void *)&v504 + 1) = v22;
      if (v39)
      {
LABEL_60:
        unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v39);
        goto LABEL_238;
      }
LABEL_237:
      uint64_t v40 = 0;
LABEL_238:
      std::string::size_type v142 = v39 + 40 * v36;
      buf.__r_.__value_.__r.__words[0] = v39;
      buf.__r_.__value_.__l.__size_ = v142;
      *(void *)&long long v504 = v39 + 40 * v40;
      long long v143 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(void *)(v142 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v142 = v143;
      memset(&__str, 0, sizeof(__str));
      *(void *)(v142 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v501;
      *(void *)(v142 + 32) = v502;
      buf.__r_.__value_.__r.__words[2] = v142 + 40;
      std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(v18, &buf);
      uint64_t v144 = *v21;
      std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
      int v145 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
      uint64_t *v21 = v144;
      if (v145 < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      return;
    }
LABEL_229:
    long long v139 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(void *)(v19 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v19 = v139;
    memset(&__str, 0, sizeof(__str));
    *(void *)(v19 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v501;
    *(void *)(v19 + 32) = v502;
    uint64_t *v21 = v19 + 40;
    return;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v487, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v487 = *(std::string *)a2;
  }
  UTFString::lstrip(&v487);
  UTFString::rstrip(&v487);
  long long v41 = *(_OWORD *)&v487.__r_.__value_.__l.__data_;
  int v42 = SHIBYTE(v487.__r_.__value_.__r.__words[2]);
  memset(&v487, 0, sizeof(v487));
  if ((v42 & 0x80000000) == 0)
  {
    if (v42) {
      goto LABEL_66;
    }
LABEL_217:
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v135 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v3 + 23) >= 0) {
        std::string::size_type v137 = v3;
      }
      else {
        std::string::size_type v137 = *(void *)v3;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v137;
    }
    if (*(char *)(v3 + 23) >= 0) {
      std::string::size_type v138 = v3;
    }
    else {
      std::string::size_type v138 = *(void *)v3;
    }
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  operator delete((void *)v41);
  if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v487.__r_.__value_.__l.__data_);
  }
  if (!*((void *)&v41 + 1)) {
    goto LABEL_217;
  }
LABEL_66:
  v43.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  BBPE::encode_and_return_vector((uint64_t **)&v478, *(void *)(a1 + 256), (std::string *)v3);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v44 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v45.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (double)((v45.__d_.__rep_ - v43.__d_.__rep_) / 1000000)
                                                           / 1000.0;
    _os_log_impl(&dword_20CD80000, v44, OS_LOG_TYPE_DEFAULT, "BBPE Encoder tokenization encode time: %.3f s", (uint8_t *)&buf, 0xCu);
  }
  v46.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "BBPE Encoder tokenization encode time: %.3f s", v47, (double)((v46.__d_.__rep_ - v43.__d_.__rep_) / 1000000) / 1000.0);
  v470 = v478;
  if (*(void *)v478 == *((void *)v478 + 1))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v146 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v3 + 23) >= 0) {
        std::string::size_type v148 = v3;
      }
      else {
        std::string::size_type v148 = *(void *)v3;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v148;
      _os_log_impl(&dword_20CD80000, v146, OS_LOG_TYPE_DEFAULT, "No BBPE token found with input: %s, ignore!", (uint8_t *)&buf, 0xCu);
    }
    if (*(char *)(v3 + 23) >= 0) {
      std::string::size_type v149 = v3;
    }
    else {
      std::string::size_type v149 = *(void *)v3;
    }
    Diagnostics::log(5, "No BBPE token found with input: %s, ignore!", v147, v149);
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_815;
  }
  std::string::basic_string[abi:ne180100]<0>(&v496, &byte_20D5A22AE);
  uint64_t v48 = *(void *)(a1 + 224);
  long long v49 = *(std::__shared_weak_count **)(a1 + 264);
  uint64_t v485 = *(void *)(a1 + 256);
  v486 = v49;
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v483 = v470;
  v484 = v479;
  if (v479) {
    atomic_fetch_add_explicit(&v479->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v48 + 8))(&v493);
  if (v484) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v484);
  }
  v452 = a3;
  if (v486) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v486);
  }
  uint64_t v50 = v493;
  if (v494 != v493)
  {
    uint64_t v51 = 0;
    std::string::size_type v458 = *MEMORY[0x263F8C2B8];
    std::string::size_type v454 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    std::string::size_type v455 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    do
    {
      uint64_t v52 = *(void (****)(void, long long *))(a1 + 224);
      long long v53 = *(_OWORD *)(v50 + 16 * v51);
      long long v482 = v53;
      if (*((void *)&v53 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v53 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (**v52)(v52, &v482);
      if (*((void *)&v482 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v482 + 1));
      }
      std::string v54 = *(void (****)(void, long long *))(a1 + 240);
      long long v55 = *(_OWORD *)(v493 + 16 * v51);
      long long v481 = v55;
      if (*((void *)&v55 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v55 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (**v54)(v54, &v481);
      if (*((void *)&v481 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v481 + 1));
      }
      uint64_t v56 = *(void *)(v493 + 16 * v51);
      uint64_t v57 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v57 + 8) = 0u;
      *(void *)uint64_t v57 = off_26C219BD0;
      *((_OWORD *)v57 + 2) = 0u;
      *((void *)v57 + 3) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v57 + 3, *(const void **)(v56 + 24), *(void *)(v56 + 32), (uint64_t)(*(void *)(v56 + 32) - *(void *)(v56 + 24)) >> 2);
      uint64_t v460 = v51;
      v463.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      uint64_t v58 = *(void *)(a1 + 272);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v57 + 1, 1uLL, memory_order_relaxed);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&buf);
      v465 = (std::__shared_weak_count *)v57;
      long long v60 = (int *)*((void *)v57 + 3);
      for (uint64_t i = (int *)*((void *)v57 + 4); v60 != i; ++v60)
      {
        sqlite3_int64 v61 = *v60;
        if ((v61 - 1) >= 2)
        {
          memset(&__str, 0, sizeof(__str));
          long long v62 = *(sqlite3_stmt **)(v58 + 88);
          if (v62)
          {
            uint64_t v63 = sqlite3_bind_int64(v62, 1, v61);
            int v64 = v63;
            BBPEVocab::report_error((BBPEVocab *)(v58 + 40), v63, "bind lookup id");
            if (!v64)
            {
              if (sqlite3_step(*(sqlite3_stmt **)(v58 + 88)) == 100)
              {
                long long v65 = sqlite3_column_text(*(sqlite3_stmt **)(v58 + 88), 0);
                MEMORY[0x210558E70](&__str, v65);
              }
              sqlite3_reset(*(sqlite3_stmt **)(v58 + 88));
            }
          }
          std::string::size_type v66 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          int v67 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v66 = __str.__r_.__value_.__l.__size_;
          }
          if (v66)
          {
            uint64_t v68 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__str
                : (std::string *)__str.__r_.__value_.__r.__words[0];
            v489 = v68;
            v490 = (std::__shared_weak_count *)(v66 << 32);
            if (v66)
            {
              int v69 = 0;
              do
              {
                memset(&__p, 0, sizeof(__p));
                unsigned int v70 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v489);
                UTFString::push_back_codepoint<std::string>(&__p, v70);
                if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)v58, (unsigned __int8 *)&__p))
                {
                  std::ostream::write();
                }
                else
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  std::string::size_type v71 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                  {
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v73 = &__p;
                    }
                    else {
                      uint64_t v73 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    LODWORD(v498) = 136315138;
                    *(void *)((char *)&v498 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v73;
                    _os_log_impl(&dword_20CD80000, v71, OS_LOG_TYPE_ERROR, "Found invalid byte token:%s", (uint8_t *)&v498, 0xCu);
                  }
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    int v74 = &__p;
                  }
                  else {
                    int v74 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  Diagnostics::log(3, "Found invalid byte token:%s", v72, v74);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                unsigned int v75 = v68->__r_.__value_.__s.__data_[v69];
                unsigned int v76 = (v75 + 62);
                if (v75 <= 0xEF) {
                  int v77 = 2;
                }
                else {
                  int v77 = 3;
                }
                if (v75 <= 0xDF) {
                  int v78 = v77;
                }
                else {
                  int v78 = v77 + 1;
                }
                if (v76 >= 0x33) {
                  int v78 = 1;
                }
                v69 += v78;
                LODWORD(v490) = v69;
                int v79 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                int v67 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  int v79 = __str.__r_.__value_.__r.__words[1];
                }
              }
              while (v69 != v79);
            }
          }
          if (v67 < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
      }
      std::stringbuf::str();
      buf.__r_.__value_.__r.__words[0] = v458;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + *(void *)(v458 - 24)) = v455;
      buf.__r_.__value_.__r.__words[2] = v454;
      *(void *)&long long v504 = MEMORY[0x263F8C318] + 16;
      if (SBYTE7(v509) < 0) {
        operator delete((void *)v508);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x210559500](&v510[1]);
      std::__shared_weak_count::__release_shared[abi:ne180100](v465);
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v80 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        v81.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(double *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (double)((v81.__d_.__rep_ - v463.__d_.__rep_) / 1000000)
                                                               / 1000.0;
        _os_log_impl(&dword_20CD80000, v80, OS_LOG_TYPE_DEFAULT, "BBPE Decoder tokenization decode time: %.3f s", (uint8_t *)&buf, 0xCu);
      }
      v82.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      Diagnostics::log(5, "BBPE Decoder tokenization decode time: %.3f s", v83, (double)((v82.__d_.__rep_ - v463.__d_.__rep_) / 1000000) / 1000.0);
      std::string::size_type v84 = HIBYTE(v496.__r_.__value_.__r.__words[2]);
      if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v84 = v496.__r_.__value_.__l.__size_;
      }
      if (v84)
      {
        std::operator+<char>();
      }
      else if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, v492.__r_.__value_.__l.__data_, v492.__r_.__value_.__l.__size_);
      }
      else
      {
        std::string buf = v492;
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v85 = &buf;
      }
      else {
        uint64_t v85 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v86 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v86 = buf.__r_.__value_.__l.__size_;
      }
      std::string::append(&v496, (const std::string::value_type *)v85, v86);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v492.__r_.__value_.__l.__data_);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v465);
      uint64_t v51 = v460 + 1;
      uint64_t v50 = v493;
    }
    while (v460 + 1 < (unint64_t)((v494 - v493) >> 4));
  }
  std::string::size_type v87 = HIBYTE(v496.__r_.__value_.__r.__words[2]);
  if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v87 = v496.__r_.__value_.__l.__size_;
  }
  if (!v87)
  {
    v242 = operator new(0x30uLL);
    v242[1] = 0;
    v242[2] = 0;
    void *v242 = off_26C219B28;
    v242[3] = 0;
    v242[4] = 0;
    v242[5] = 0;
    *a3 = v242 + 3;
    a3[1] = v242;
    *((void *)&v504 + 1) = v242 + 5;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(1uLL);
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[0];
    *(void *)&long long v504 = buf.__r_.__value_.__r.__words[0] + 40 * v243;
    v244 = std::string::basic_string[abi:ne180100]<0>(buf.__r_.__value_.__l.__data_, &byte_20D5A22AE);
    v244[3] = -1;
    v244[4] = -1;
    buf.__r_.__value_.__r.__words[2] += 40;
    std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(v242 + 3, &buf);
    uint64_t v245 = v242[4];
    std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
    v242[4] = v245;
    goto LABEL_813;
  }
  v88.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  BBPE::encode_and_return_vector((uint64_t **)&v475, *(void *)(a1 + 272), &v496);
  uint64_t v89 = *(double **)(a1 + 288);
  uint64_t v90 = v479;
  if (v479) {
    atomic_fetch_add_explicit(&v479->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v92 = (uint64_t *)v475;
  uint64_t v91 = v476;
  if (v476) {
    atomic_fetch_add_explicit(&v476->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v459 = v90;
  std::string::size_type v93 = operator new(0x30uLL);
  v93[1] = 0;
  v93[2] = 0;
  v93[3] = 0;
  *std::string::size_type v93 = off_26C219B28;
  v93[4] = 0;
  v93[5] = 0;
  v457 = v93 + 3;
  void *v452 = v93 + 3;
  v452[1] = v93;
  v461 = v93;
  if (!*(void *)v89)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    v260 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v260, OS_LOG_TYPE_DEFAULT, "Aligner bypassed, and fallback to single word!", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Aligner bypassed, and fallback to single word!", v261);
    LODWORD(buf.__r_.__value_.__l.__data_) = -1;
    LODWORD(__str.__r_.__value_.__l.__data_) = -1;
    unint64_t v262 = v93[4];
    if (v262 >= v93[5])
    {
      uint64_t v263 = std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__emplace_back_slow_path<std::string const&,int,int>(v457, (long long *)&v496, (int *)&buf, (int *)&__str);
    }
    else
    {
      std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__construct_one_at_end[abi:ne180100]<std::string const&,int,int>((uint64_t)v457, (long long *)&v496, (int *)&buf, (int *)&__str);
      uint64_t v263 = v262 + 40;
    }
    v93[4] = v263;
    goto LABEL_803;
  }
  if (v90) {
    atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v88.__d_.__rep_;
  if (v91) {
    atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v456 = v91;
  uint64_t v95 = *(void *)v470;
  uint64_t v94 = *((void *)v470 + 1);
  unint64_t v96 = 0xCCCCCCCCCCCCCCCDLL * ((v92[1] - *v92) >> 3);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v97 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v97, OS_LOG_TYPE_DEBUG, "Starting forward alignment", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(7, "Starting forward alignment", v98);
  memset(&__str, 0, sizeof(__str));
  if (v96)
  {
    unint64_t v99 = 0;
    unint64_t v100 = 0xCCCCCCCCCCCCCCCDLL * ((v94 - v95) >> 3);
    uint64_t v473 = (uint64_t)(v89 + 13);
    double v101 = (double)v100;
    double v102 = (double)v96;
    uint64_t v103 = (v100 + 1);
    uint64_t v464 = v96;
    int v466 = v96;
    int v468 = v100;
    do
    {
      uint64_t v104 = *v92;
      if (0xCCCCCCCCCCCCCCCDLL * ((v92[1] - *v92) >> 3) <= v99) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      double v105 = v89[8];
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v106 = v104 + 40 * v99;
      std::string::size_type v107 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        std::string::size_type v109 = v106;
        if (*(char *)(v106 + 23) < 0) {
          std::string::size_type v109 = *(void *)v106;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v109;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v99;
        _os_log_impl(&dword_20CD80000, v107, OS_LOG_TYPE_DEBUG, "Phoneme Token: %s - %d", (uint8_t *)&buf, 0x12u);
      }
      uint64_t v110 = v106;
      if (*(char *)(v106 + 23) < 0) {
        uint64_t v110 = *(void *)v106;
      }
      Diagnostics::log(7, "Phoneme Token: %s - %d", v108, v110, v99);
      double prob = FastAlignment::get_prob((FastAlignment *)v89, v473, v106, 0);
      unint64_t v112 = v99 + 1;
      double v113 = DiagonalAlignment::ComputeZ((DiagonalAlignment *)(v99 + 1), v96, v100, v89[7]);
      if (v100)
      {
        uint64_t v114 = 0;
        int v115 = 0;
        double v116 = v113 / v89[9];
        double v117 = v105 * prob;
        uint64_t v118 = 1;
        do
        {
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v470 + 1) - *(void *)v470) >> 3) <= v118 - 1) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          double v119 = v89[7];
          double v120 = FastAlignment::get_prob((FastAlignment *)v89, *(void *)v470 + v114, v106, 0);
          double v121 = v120
               * (exp(-(vabdd_f64((double)v118 / v101, (double)v112 / v102) * v119))
                / v116);
          if (v121 > v117)
          {
            double v117 = v121;
            int v115 = v118;
          }
          ++v118;
          v114 += 40;
        }
        while (v103 != v118);
        LODWORD(v96) = v466;
        if (v115 > 0)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          unint64_t v122 = Diagnostics_GetLogObject(void)::__profile_log_default;
          uint64_t v124 = (v115 - 1);
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v124;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v99;
            _os_log_impl(&dword_20CD80000, v122, OS_LOG_TYPE_DEBUG, "FWD %d - %d", (uint8_t *)&buf, 0xEu);
          }
          Diagnostics::log(7, "FWD %d - %d", v123, v124, v99);
          std::string::size_type v125 = __str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
          {
            uint64_t v127 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3;
            if ((unint64_t)(v127 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v128 = (uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 2;
            if (v128 <= v127 + 1) {
              unint64_t v128 = v127 + 1;
            }
            if (__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v129 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v129 = v128;
            }
            if (v129) {
              uint64_t v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v129);
            }
            else {
              uint64_t v130 = 0;
            }
            uint64_t v131 = (unint64_t *)&v130[8 * v127];
            *uint64_t v131 = v124 | (v99 << 32);
            std::string::size_type v126 = (std::string::size_type)(v131 + 1);
            uint64_t v132 = (char *)__str.__r_.__value_.__l.__size_;
            std::string::size_type v133 = __str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
            {
              do
              {
                unint64_t v134 = *((void *)v132 - 1);
                v132 -= 8;
                *--uint64_t v131 = v134;
              }
              while (v132 != (char *)v133);
              uint64_t v132 = (char *)__str.__r_.__value_.__r.__words[0];
            }
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
            __str.__r_.__value_.__l.__size_ = v126;
            __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v130[8 * v129];
            if (v132) {
              operator delete(v132);
            }
          }
          else
          {
            *(void *)__str.__r_.__value_.__l.__size_ = v124 | (v99 << 32);
            std::string::size_type v126 = v125 + 8;
          }
          __str.__r_.__value_.__l.__size_ = v126;
        }
      }
      ++v99;
      LODWORD(v100) = v468;
    }
    while (v112 != v464);
    v246 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
    uint64_t v90 = v459;
    v247 = v456;
    if (__str.__r_.__value_.__r.__words[0] != __str.__r_.__value_.__l.__size_)
    {
      std::string::size_type v248 = __str.__r_.__value_.__r.__words[0] + 8;
      if (__str.__r_.__value_.__r.__words[0] + 8 == __str.__r_.__value_.__l.__size_)
      {
        int v256 = *(_DWORD *)__str.__r_.__value_.__l.__data_;
      }
      else
      {
        uint64_t v249 = *(void *)__str.__r_.__value_.__l.__data_;
        uint64_t v250 = *(void *)__str.__r_.__value_.__l.__data_;
        std::string::size_type v251 = __str.__r_.__value_.__r.__words[0] + 8;
        v252 = (int *)__str.__r_.__value_.__r.__words[0];
        v253 = (uint64_t *)(__str.__r_.__value_.__r.__words[0] + 8);
        do
        {
          uint64_t v255 = *v253++;
          int v254 = v255;
          if ((int)v250 < (int)v255)
          {
            LODWORD(v250) = v254;
            v252 = (int *)v251;
          }
          std::string::size_type v251 = (std::string::size_type)v253;
        }
        while (v253 != (uint64_t *)__str.__r_.__value_.__l.__size_);
        int v256 = *v252;
        v257 = (uint64_t *)(__str.__r_.__value_.__r.__words[0] + 8);
        do
        {
          uint64_t v259 = *v257++;
          int v258 = HIDWORD(v259);
          if (SHIDWORD(v249) < SHIDWORD(v259))
          {
            HIDWORD(v249) = v258;
            v246 = (_DWORD *)v248;
          }
          std::string::size_type v248 = (std::string::size_type)v257;
        }
        while (v257 != (uint64_t *)__str.__r_.__value_.__l.__size_);
      }
      std::allocate_shared[abi:ne180100]<Array2D<BOOL>,std::allocator<Array2D<BOOL>>,int,int,void>(&v492, v256 + 1, v246[1] + 1);
      std::string::size_type v266 = __str.__r_.__value_.__l.__size_;
      v265 = (unsigned int *)__str.__r_.__value_.__r.__words[0];
      if (__str.__r_.__value_.__r.__words[0] != __str.__r_.__value_.__l.__size_)
      {
        unsigned int v267 = *(_DWORD *)v492.__r_.__value_.__l.__data_;
        unsigned int v268 = *(_DWORD *)(v492.__r_.__value_.__r.__words[0] + 4);
        int v269 = *(_DWORD *)v492.__r_.__value_.__l.__data_ - 1;
        uint64_t v270 = *(void *)(v492.__r_.__value_.__r.__words[0] + 8);
        do
        {
          unsigned int v271 = *v265;
          unsigned int v272 = v265[1];
          v265 += 2;
          if (v267 <= v271) {
            unsigned int v271 = v269;
          }
          if (v268 <= v272) {
            unsigned int v272 = v268 - 1;
          }
          *(void *)(v270 + (((unint64_t)(v271 + v272 * v267) >> 3) & 0x1FFFFFF8)) |= 1 << (v271 + v272 * v267);
        }
        while (v265 != (unsigned int *)v266);
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      v273 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v273, OS_LOG_TYPE_DEBUG, "Starting backward alignment", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(7, "Starting backward alignment", v274);
      memset(&__p, 0, sizeof(__p));
      if (v468)
      {
        unint64_t v275 = 0;
        uint64_t v276 = (v96 + 1);
        do
        {
          uint64_t v277 = *(void *)v470;
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v470 + 1) - *(void *)v470) >> 3) <= v275) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          double v278 = v89[11];
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v279 = v277 + 40 * v275;
          v280 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            std::string::size_type v282 = v279;
            if (*(char *)(v279 + 23) < 0) {
              std::string::size_type v282 = *(void *)v279;
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v282;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v275;
            _os_log_impl(&dword_20CD80000, v280, OS_LOG_TYPE_DEBUG, "Text Token: %s - %d", (uint8_t *)&buf, 0x12u);
          }
          uint64_t v283 = v279;
          if (*(char *)(v279 + 23) < 0) {
            uint64_t v283 = *(void *)v279;
          }
          Diagnostics::log(7, "Text Token: %s - %d", v281, v283, v275);
          double v284 = FastAlignment::get_prob((FastAlignment *)v89, v473, v279, 1);
          unint64_t v285 = v275 + 1;
          double v286 = DiagonalAlignment::ComputeZ((DiagonalAlignment *)(v275 + 1), v100, v96, v89[10]);
          uint64_t v287 = 0;
          int v288 = 0;
          double v289 = v286 / v89[12];
          double v290 = v278 * v284;
          uint64_t v291 = 1;
          do
          {
            if (0xCCCCCCCCCCCCCCCDLL * ((v92[1] - *v92) >> 3) <= v291 - 1) {
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            }
            double v292 = v89[10];
            double v293 = FastAlignment::get_prob((FastAlignment *)v89, *v92 + v287, v279, 1);
            double v294 = v293
                 * (exp(-(vabdd_f64((double)v291 / v102, (double)v285 / v101) * v292))
                  / v289);
            if (v294 > v290)
            {
              int v288 = v291;
              double v290 = v294;
            }
            ++v291;
            v287 += 40;
          }
          while (v276 != v291);
          LODWORD(v96) = v466;
          if (v288 > 0)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            v295 = Diagnostics_GetLogObject(void)::__profile_log_default;
            uint64_t v297 = (v288 - 1);
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = v275;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v297;
              _os_log_impl(&dword_20CD80000, v295, OS_LOG_TYPE_DEBUG, "BWD %d - %d", (uint8_t *)&buf, 0xEu);
            }
            Diagnostics::log(7, "BWD %d - %d", v296, v275, v297);
            std::string::size_type v298 = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              uint64_t v300 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
              if ((unint64_t)(v300 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v301 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
              if (v301 <= v300 + 1) {
                unint64_t v301 = v300 + 1;
              }
              if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v302 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v302 = v301;
              }
              if (v302) {
                v303 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v302);
              }
              else {
                v303 = 0;
              }
              v304 = (unint64_t *)&v303[8 * v300];
              unint64_t *v304 = v275 | (v297 << 32);
              std::string::size_type v299 = (std::string::size_type)(v304 + 1);
              v305 = (char *)__p.__r_.__value_.__l.__size_;
              std::string::size_type v306 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
              {
                do
                {
                  unint64_t v307 = *((void *)v305 - 1);
                  v305 -= 8;
                  *--v304 = v307;
                }
                while (v305 != (char *)v306);
                v305 = (char *)__p.__r_.__value_.__r.__words[0];
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v304;
              __p.__r_.__value_.__l.__size_ = v299;
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v303[8 * v302];
              if (v305) {
                operator delete(v305);
              }
            }
            else
            {
              *(void *)__p.__r_.__value_.__l.__size_ = v275 | (v297 << 32);
              std::string::size_type v299 = v298 + 8;
            }
            __p.__r_.__value_.__l.__size_ = v299;
          }
          ++v275;
          LODWORD(v100) = v468;
        }
        while (v285 != v468);
        v308 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        uint64_t v90 = v459;
        v247 = v456;
        if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
        {
          std::string::size_type v309 = __p.__r_.__value_.__r.__words[0] + 8;
          if (__p.__r_.__value_.__r.__words[0] + 8 == __p.__r_.__value_.__l.__size_)
          {
            int v317 = *(_DWORD *)__p.__r_.__value_.__l.__data_;
          }
          else
          {
            uint64_t v310 = *(void *)__p.__r_.__value_.__l.__data_;
            uint64_t v311 = *(void *)__p.__r_.__value_.__l.__data_;
            std::string::size_type v312 = __p.__r_.__value_.__r.__words[0] + 8;
            v313 = (int *)__p.__r_.__value_.__r.__words[0];
            v314 = (uint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
            do
            {
              uint64_t v316 = *v314++;
              int v315 = v316;
              if ((int)v311 < (int)v316)
              {
                LODWORD(v311) = v315;
                v313 = (int *)v312;
              }
              std::string::size_type v312 = (std::string::size_type)v314;
            }
            while (v314 != (uint64_t *)__p.__r_.__value_.__l.__size_);
            int v317 = *v313;
            v318 = (uint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
            do
            {
              uint64_t v320 = *v318++;
              int v319 = HIDWORD(v320);
              if (SHIDWORD(v310) < SHIDWORD(v320))
              {
                HIDWORD(v310) = v319;
                v308 = (_DWORD *)v309;
              }
              std::string::size_type v309 = (std::string::size_type)v318;
            }
            while (v318 != (uint64_t *)__p.__r_.__value_.__l.__size_);
          }
          std::allocate_shared[abi:ne180100]<Array2D<BOOL>,std::allocator<Array2D<BOOL>>,int,int,void>(&v489, v317 + 1, v308[1] + 1);
          std::string::size_type v323 = __p.__r_.__value_.__l.__size_;
          v322 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
          {
            unsigned int v324 = *(_DWORD *)v489;
            unsigned int v325 = *((_DWORD *)v489 + 1);
            int v326 = *(_DWORD *)v489 - 1;
            uint64_t v327 = *((void *)v489 + 1);
            do
            {
              unsigned int v328 = *v322;
              unsigned int v329 = v322[1];
              v322 += 2;
              if (v324 <= v328) {
                unsigned int v328 = v326;
              }
              if (v325 <= v329) {
                unsigned int v329 = v325 - 1;
              }
              *(void *)(v327 + (((unint64_t)(v328 + v329 * v324) >> 3) & 0x1FFFFFF8)) |= 1 << (v328 + v329 * v324);
            }
            while (v322 != (unsigned int *)v323);
          }
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0u;
          long long v504 = 0u;
          long long v505 = 0u;
          long long v506 = 0u;
          long long v507 = 0u;
          long long v508 = 0u;
          long long v509 = 0u;
          memset(v510, 0, sizeof(v510));
          long long v511 = 0u;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_26C203B70;
          v512[0] = 0;
          v330 = operator new(8uLL);
          void *v330 = 1;
          *(void *)&long long v511 = v330;
          *((void *)&v511 + 1) = v330 + 1;
          v512[0] = v330 + 1;
          v332 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v512, 2uLL);
          v332[1] = 0xFFFFFFFFLL;
          v333 = (char *)(v332 + 1);
          v334 = (char *)&v332[v331];
          v335 = (char *)(v332 + 2);
          v336 = (char *)*((void *)&v511 + 1);
          v337 = (char *)v511;
          if (*((void *)&v511 + 1) != (void)v511)
          {
            do
            {
              uint64_t v338 = *((void *)v336 - 1);
              v336 -= 8;
              *((void *)v333 - 1) = v338;
              v333 -= 8;
            }
            while (v336 != v337);
            v336 = (char *)v511;
          }
          *(void *)&long long v511 = v333;
          *((void *)&v511 + 1) = v332 + 2;
          v512[0] = &v332[v331];
          if (v336)
          {
            operator delete(v336);
            v334 = (char *)v512[0];
          }
          *((void *)&v511 + 1) = v332 + 2;
          if (v335 >= v334)
          {
            uint64_t v340 = (uint64_t)&v335[-v511] >> 3;
            if ((unint64_t)(v340 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v341 = (uint64_t)&v334[-v511];
            uint64_t v342 = v341 >> 2;
            if (v341 >> 2 <= (unint64_t)(v340 + 1)) {
              uint64_t v342 = v340 + 1;
            }
            if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v343 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v343 = v342;
            }
            if (v343) {
              v344 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v512, v343);
            }
            else {
              v344 = 0;
            }
            v345 = &v344[8 * v340];
            v346 = &v344[8 * v343];
            *(void *)v345 = 0x100000000;
            v339 = v345 + 8;
            v347 = (char *)*((void *)&v511 + 1);
            v348 = (char *)v511;
            if (*((void *)&v511 + 1) != (void)v511)
            {
              do
              {
                uint64_t v349 = *((void *)v347 - 1);
                v347 -= 8;
                *((void *)v345 - 1) = v349;
                v345 -= 8;
              }
              while (v347 != v348);
              v347 = (char *)v511;
            }
            *(void *)&long long v511 = v345;
            *((void *)&v511 + 1) = v339;
            v512[0] = v346;
            if (v347) {
              operator delete(v347);
            }
          }
          else
          {
            v332[2] = 0x100000000;
            v339 = v332 + 3;
          }
          *((void *)&v511 + 1) = v339;
          if ((unint64_t)v339 >= v512[0])
          {
            uint64_t v351 = (uint64_t)((uint64_t)v339 - v511) >> 3;
            if ((unint64_t)(v351 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v352 = (uint64_t)(v512[0] - v511) >> 2;
            if (v352 <= v351 + 1) {
              unint64_t v352 = v351 + 1;
            }
            if (v512[0] - (void)v511 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v353 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v353 = v352;
            }
            if (v353) {
              v354 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v512, v353);
            }
            else {
              v354 = 0;
            }
            v355 = &v354[8 * v351];
            v356 = &v354[8 * v353];
            *(void *)v355 = 0xFFFFFFFF00000000;
            v350 = v355 + 8;
            v357 = (char *)*((void *)&v511 + 1);
            v358 = (char *)v511;
            if (*((void *)&v511 + 1) != (void)v511)
            {
              do
              {
                uint64_t v359 = *((void *)v357 - 1);
                v357 -= 8;
                *((void *)v355 - 1) = v359;
                v355 -= 8;
              }
              while (v357 != v358);
              v357 = (char *)v511;
            }
            *(void *)&long long v511 = v355;
            *((void *)&v511 + 1) = v350;
            v512[0] = v356;
            if (v357) {
              operator delete(v357);
            }
          }
          else
          {
            void *v339 = 0xFFFFFFFF00000000;
            v350 = v339 + 1;
          }
          *((void *)&v511 + 1) = v350;
          if ((unint64_t)v350 >= v512[0])
          {
            uint64_t v361 = (uint64_t)((uint64_t)v350 - v511) >> 3;
            if ((unint64_t)(v361 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v362 = (uint64_t)(v512[0] - v511) >> 2;
            if (v362 <= v361 + 1) {
              unint64_t v362 = v361 + 1;
            }
            if (v512[0] - (void)v511 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v363 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v363 = v362;
            }
            if (v363) {
              v364 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v512, v363);
            }
            else {
              v364 = 0;
            }
            v365 = &v364[8 * v361];
            v366 = &v364[8 * v363];
            *(void *)v365 = 0x100000001;
            v360 = v365 + 8;
            v367 = (char *)*((void *)&v511 + 1);
            v368 = (char *)v511;
            if (*((void *)&v511 + 1) != (void)v511)
            {
              do
              {
                uint64_t v369 = *((void *)v367 - 1);
                v367 -= 8;
                *((void *)v365 - 1) = v369;
                v365 -= 8;
              }
              while (v367 != v368);
              v367 = (char *)v511;
            }
            *(void *)&long long v511 = v365;
            *((void *)&v511 + 1) = v360;
            v512[0] = v366;
            if (v367) {
              operator delete(v367);
            }
          }
          else
          {
            void *v350 = 0x100000001;
            v360 = v350 + 1;
          }
          *((void *)&v511 + 1) = v360;
          if ((unint64_t)v360 >= v512[0])
          {
            uint64_t v371 = (uint64_t)((uint64_t)v360 - v511) >> 3;
            if ((unint64_t)(v371 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v372 = (uint64_t)(v512[0] - v511) >> 2;
            if (v372 <= v371 + 1) {
              unint64_t v372 = v371 + 1;
            }
            if (v512[0] - (void)v511 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v373 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v373 = v372;
            }
            if (v373) {
              v374 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v512, v373);
            }
            else {
              v374 = 0;
            }
            v375 = &v374[8 * v371];
            v376 = &v374[8 * v373];
            *(void *)v375 = 0x1FFFFFFFFLL;
            v370 = v375 + 8;
            v377 = (char *)*((void *)&v511 + 1);
            v378 = (char *)v511;
            if (*((void *)&v511 + 1) != (void)v511)
            {
              do
              {
                uint64_t v379 = *((void *)v377 - 1);
                v377 -= 8;
                *((void *)v375 - 1) = v379;
                v375 -= 8;
              }
              while (v377 != v378);
              v377 = (char *)v511;
            }
            *(void *)&long long v511 = v375;
            *((void *)&v511 + 1) = v370;
            v512[0] = v376;
            if (v377) {
              operator delete(v377);
            }
          }
          else
          {
            void *v360 = 0x1FFFFFFFFLL;
            v370 = v360 + 1;
          }
          *((void *)&v511 + 1) = v370;
          if ((unint64_t)v370 >= v512[0])
          {
            uint64_t v381 = (uint64_t)((uint64_t)v370 - v511) >> 3;
            if ((unint64_t)(v381 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v382 = (uint64_t)(v512[0] - v511) >> 2;
            if (v382 <= v381 + 1) {
              unint64_t v382 = v381 + 1;
            }
            if (v512[0] - (void)v511 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v383 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v383 = v382;
            }
            if (v383) {
              v384 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v512, v383);
            }
            else {
              v384 = 0;
            }
            v385 = &v384[8 * v381];
            v386 = &v384[8 * v383];
            *(void *)v385 = 0xFFFFFFFF00000001;
            v380 = v385 + 8;
            v387 = (char *)*((void *)&v511 + 1);
            v388 = (char *)v511;
            if (*((void *)&v511 + 1) != (void)v511)
            {
              do
              {
                uint64_t v389 = *((void *)v387 - 1);
                v387 -= 8;
                *((void *)v385 - 1) = v389;
                v385 -= 8;
              }
              while (v387 != v388);
              v387 = (char *)v511;
            }
            *(void *)&long long v511 = v385;
            *((void *)&v511 + 1) = v380;
            v512[0] = v386;
            if (v387) {
              operator delete(v387);
            }
          }
          else
          {
            void *v370 = 0xFFFFFFFF00000001;
            v380 = v370 + 1;
          }
          *((void *)&v511 + 1) = v380;
          if ((unint64_t)v380 >= v512[0])
          {
            uint64_t v391 = (uint64_t)((uint64_t)v380 - v511) >> 3;
            if ((unint64_t)(v391 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v392 = (uint64_t)(v512[0] - v511) >> 2;
            if (v392 <= v391 + 1) {
              unint64_t v392 = v391 + 1;
            }
            if (v512[0] - (void)v511 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v393 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v393 = v392;
            }
            if (v393) {
              v394 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v512, v393);
            }
            else {
              v394 = 0;
            }
            v395 = &v394[8 * v391];
            v396 = &v394[8 * v393];
            *(void *)v395 = -1;
            v390 = v395 + 8;
            v397 = (char *)*((void *)&v511 + 1);
            v398 = (char *)v511;
            if (*((void *)&v511 + 1) != (void)v511)
            {
              do
              {
                uint64_t v399 = *((void *)v397 - 1);
                v397 -= 8;
                *((void *)v395 - 1) = v399;
                v395 -= 8;
              }
              while (v397 != v398);
              v397 = (char *)v511;
            }
            *(void *)&long long v511 = v395;
            *((void *)&v511 + 1) = v390;
            v512[0] = v396;
            if (v397) {
              operator delete(v397);
            }
          }
          else
          {
            void *v380 = -1;
            v390 = v380 + 1;
          }
          *((void *)&v511 + 1) = v390;
          DiagRefineMergeAlignment::apply((uint64_t)&buf, (uint32x2_t *)v492.__r_.__value_.__l.__data_, (uint32x2_t *)v489, (void ***)&v498);
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_26C203B70;
          if ((void)v511)
          {
            *((void *)&v511 + 1) = v511;
            operator delete((void *)v511);
          }
          if (v510[1]) {
            operator delete(v510[1]);
          }
          if ((void)v509) {
            operator delete((void *)v509);
          }
          if (*((void *)&v507 + 1)) {
            operator delete(*((void **)&v507 + 1));
          }
          if (*((void *)&v505 + 1)) {
            operator delete(*((void **)&v505 + 1));
          }
          if (buf.__r_.__value_.__r.__words[2]) {
            operator delete((void *)buf.__r_.__value_.__r.__words[2]);
          }
          if (v490) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v490);
          }
          v308 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_690;
        }
      }
      else
      {
        v308 = 0;
        uint64_t v90 = v459;
        v247 = v456;
      }
      v321 = operator new(0x30uLL);
      v321[1] = 0;
      v321[2] = 0;
      void *v321 = off_26C219AB8;
      v321[4] = 0;
      v321[5] = 0;
      v321[3] = 0;
      *(void *)&long long v498 = v321 + 3;
      *((void *)&v498 + 1) = v321;
LABEL_690:
      if (v308)
      {
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v308;
        operator delete(v308);
      }
      if (v492.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v492.__r_.__value_.__l.__size_);
      }
      v246 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_695;
    }
  }
  else
  {
    v246 = 0;
    v247 = v456;
  }
  v264 = operator new(0x30uLL);
  v264[1] = 0;
  v264[2] = 0;
  void *v264 = off_26C219AB8;
  v264[4] = 0;
  v264[5] = 0;
  v264[3] = 0;
  *(void *)&long long v498 = v264 + 3;
  *((void *)&v498 + 1) = v264;
LABEL_695:
  if (v246)
  {
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v246;
    operator delete(v246);
  }
  if (v247) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v247);
  }
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
  }
  v400 = *(unsigned int **)v498;
  v401 = *(unsigned int **)(v498 + 8);
  if (*(unsigned int **)v498 == v401)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v90 = v459;
    uint64_t v91 = v456;
    v88.__d_.__rep_ = rep;
    v431 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v431, OS_LOG_TYPE_DEFAULT, "Aligner got empty result, and fallback to single word!", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Aligner got empty result, and fallback to single word!", v432);
    LODWORD(buf.__r_.__value_.__l.__data_) = -1;
    LODWORD(__str.__r_.__value_.__l.__data_) = -1;
    unint64_t v433 = v461[4];
    if (v433 >= v461[5])
    {
      uint64_t v434 = std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__emplace_back_slow_path<std::string const&,int,int>(v457, (long long *)&v496, (int *)&buf, (int *)&__str);
    }
    else
    {
      std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__construct_one_at_end[abi:ne180100]<std::string const&,int,int>((uint64_t)v457, (long long *)&v496, (int *)&buf, (int *)&__str);
      uint64_t v434 = v433 + 40;
    }
    v461[4] = v434;
    goto LABEL_801;
  }
  uint64_t v402 = 0;
  v403 = "Combined %d - %d";
  while (1)
  {
    uint64_t v405 = *v400;
    uint64_t v404 = v400[1];
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    v406 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v405;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v404;
      _os_log_impl(&dword_20CD80000, v406, OS_LOG_TYPE_DEBUG, "Combined %d - %d", (uint8_t *)&buf, 0xEu);
    }
    Diagnostics::log(7, v403, v407, v405, v404);
    if (0xCCCCCCCCCCCCCCCDLL * ((v92[1] - *v92) >> 3) <= (int)v404) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(_DWORD *)(*v92 + 40 * (int)v404 + 32)) {
      break;
    }
    uint64_t v404 = v402;
LABEL_768:
    v400 += 2;
    uint64_t v402 = v404;
    if (v400 == v401) {
      goto LABEL_796;
    }
  }
  if ((int)v404 >= (int)v402)
  {
    if ((int)v404 > (int)v402 + 1)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      v435 = v461;
      v436 = v457;
      v440 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v404;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v402;
        _os_log_impl(&dword_20CD80000, v440, OS_LOG_TYPE_INFO, "Found missing phoneme token case from alignments: cur: %d, prev: %d, fall back!", (uint8_t *)&buf, 0xEu);
      }
      v439 = "Found missing phoneme token case from alignments: cur: %d, prev: %d, fall back!";
      goto LABEL_788;
    }
    memset(&buf, 0, sizeof(buf));
    std::string::size_type v408 = HIBYTE(v496.__r_.__value_.__r.__words[2]);
    if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v408 = v496.__r_.__value_.__l.__size_;
    }
    if (v408)
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((v92[1] - *v92) >> 3) <= (int)v404) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      std::string::basic_string(&__str, &v496, *(int *)(*v92 + 40 * (int)v404 + 28), *(int *)(*v92 + 40 * (int)v404 + 32), (std::allocator<char> *)&__p);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      std::string buf = __str;
    }
    else
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((v92[1] - *v92) >> 3) <= (int)v404) {
        goto LABEL_832;
      }
      std::string::operator=(&buf, (const std::string *)(*v92 + 40 * (int)v404));
    }
    unint64_t v409 = (int)v405;
    uint64_t v410 = v461[4];
    if (v461[3] != v410 && v404 == v402)
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v470 + 1) - *(void *)v470) >> 3) <= v409) {
LABEL_832:
      }
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      uint64_t v411 = *(void *)v470 + 40 * (int)v409;
      uint64_t v413 = *(int *)(v411 + 28);
      uint64_t v412 = *(int *)(v411 + 32);
      *(void *)(v410 - 8) = v412 + v413;
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      FastAlignment::shift_spaces(*(unsigned int *)(v410 - 16), (int *)&__str, v412 + v413, (int *)&__p, (uint64_t *)a2);
      uint64_t v414 = *(void *)(v410 - 8);
      *(void *)(v410 - 16) += SLODWORD(__str.__r_.__value_.__l.__data_);
      *(void *)(v410 - 8) = v414 - SLODWORD(__p.__r_.__value_.__l.__data_);
      goto LABEL_766;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v492.__r_.__value_.__l.__data_) = 0;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v470 + 1) - *(void *)v470) >> 3) <= v409) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    v415 = v401;
    FastAlignment::shift_spaces(*(unsigned int *)(*(void *)v470 + 40 * (int)v409 + 28), (int *)&__p, *(_DWORD *)(*(void *)v470 + 40 * (int)v409 + 32) + *(_DWORD *)(*(void *)v470 + 40 * (int)v409 + 28), (int *)&v492, (uint64_t *)a2);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v470 + 1) - *(void *)v470) >> 3) <= v409) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    v416 = v403;
    uint64_t v417 = *(void *)v470 + 40 * (int)v409;
    uint64_t v418 = *(int *)(v417 + 28);
    uint64_t v419 = SLODWORD(__p.__r_.__value_.__l.__data_) + v418;
    LODWORD(v489) = LODWORD(__p.__r_.__value_.__l.__data_) + v418;
    int v420 = *(_DWORD *)(v417 + 32) + v418 - LODWORD(v492.__r_.__value_.__l.__data_);
    int v488 = v420;
    unint64_t v421 = v461[4];
    if (v421 == v461[3])
    {
      if (v421 < v461[5])
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v461[4], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v423 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v421 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v421 = v423;
        }
        *(void *)(v421 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (int)v419;
        *(void *)(v421 + 32) = v420;
        goto LABEL_763;
      }
LABEL_758:
      uint64_t v429 = std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__emplace_back_slow_path<std::string&,int &,int &>(v457, (long long *)&buf, (int *)&v489, &v488);
      v430 = v461;
LABEL_764:
      v403 = v416;
      v430[4] = v429;
LABEL_765:
      v401 = v415;
LABEL_766:
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      goto LABEL_768;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!buf.__r_.__value_.__l.__size_) {
        goto LABEL_747;
      }
      v422 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&buf.__r_.__value_.__s + 23)) {
        goto LABEL_747;
      }
      v422 = &buf;
    }
    if (v422->__r_.__value_.__s.__data_[0] == 32)
    {
      if (*(void *)(v421 - 16) == v419 && *(void *)(v421 - 8) == v420)
      {
        std::operator+<char>();
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v424 = &__str;
        }
        else {
          v424 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v425 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v425 = __str.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)(v421 - 40), (const std::string::value_type *)v424, v425);
        v403 = v416;
        v401 = v415;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_766;
      }
      if (v421 < v461[5])
      {
        if ((*((unsigned char *)&buf.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v461[4], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v428 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v421 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v421 = v428;
        }
        *(void *)(v421 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v419;
        *(void *)(v421 + 32) = v420;
LABEL_763:
        uint64_t v429 = v421 + 40;
        v430 = v461;
        v461[4] = v421 + 40;
        goto LABEL_764;
      }
      goto LABEL_758;
    }
LABEL_747:
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v426 = &buf;
    }
    else {
      v426 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v427 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v427 = buf.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(v421 - 40), (const std::string::value_type *)v426, v427);
    *(void *)(v421 - 8) = v420;
    v403 = v416;
    goto LABEL_765;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  v435 = v461;
  v436 = v457;
  v437 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v404;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v402;
    _os_log_impl(&dword_20CD80000, v437, OS_LOG_TYPE_INFO, "Found non-monotonic case from alignments: cur: %d, prev: %d, fall back!", (uint8_t *)&buf, 0xEu);
  }
  v439 = "Found non-monotonic case from alignments: cur: %d, prev: %d, fall back!";
LABEL_788:
  Diagnostics::log(6, v439, v438, v404, v402);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  v441 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v441, OS_LOG_TYPE_DEFAULT, "Aligner failed to align, and fallback to single word!", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Aligner failed to align, and fallback to single word!", v442);
  std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__clear[abi:ne180100](v436);
  LODWORD(buf.__r_.__value_.__l.__data_) = -1;
  LODWORD(__str.__r_.__value_.__l.__data_) = -1;
  unint64_t v443 = v435[4];
  if (v443 >= v435[5])
  {
    uint64_t v444 = std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__emplace_back_slow_path<std::string const&,int,int>(v436, (long long *)&v496, (int *)&buf, (int *)&__str);
  }
  else
  {
    std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__construct_one_at_end[abi:ne180100]<std::string const&,int,int>((uint64_t)v436, (long long *)&v496, (int *)&buf, (int *)&__str);
    uint64_t v444 = v443 + 40;
  }
  v435[4] = v444;
LABEL_796:
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v90 = v459;
  uint64_t v91 = v456;
  v88.__d_.__rep_ = rep;
  v445 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v445, OS_LOG_TYPE_DEFAULT, "Aligner Done...", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Aligner Done...", v446);
LABEL_801:
  if (*((void *)&v498 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v498 + 1));
  }
LABEL_803:
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  v447 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v448.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (double)((v448.__d_.__rep_ - v88.__d_.__rep_) / 1000000)
                                                           / 1000.0;
    _os_log_impl(&dword_20CD80000, v447, OS_LOG_TYPE_DEFAULT, "Fast align time: %.4f s", (uint8_t *)&buf, 0xCu);
  }
  v449.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Fast align time: %.4f s", v450, (double)((v449.__d_.__rep_ - v88.__d_.__rep_) / 1000000) / 1000.0);
  if (v476) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v476);
  }
LABEL_813:
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v493;
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v496.__r_.__value_.__l.__data_);
  }
LABEL_815:
  if (v479) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v479);
  }
}

void sub_20D327630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  a21[1].__shared_owners_ = v72;
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (a71) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a71);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  a72 = &a58;
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a1);
}

uint64_t *std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 40;
      long long v6 = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(v3 - 24);
      *(_OWORD *)(v4 - 40) = v6;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v3 - 40) = 0;
      *(void *)(v4 - 16) = *(void *)(v3 - 16);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  *uint64_t result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 5;
      *(void *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<std::vector<int>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::tuple<std::string,unsigned long,unsigned long>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

void std::__shared_ptr_emplace<std::vector<std::tuple<std::string,unsigned long,unsigned long>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<std::tuple<std::string,unsigned long,unsigned long>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FrontendNNModule::top1_result_aligned(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  memset(&__str, 0, sizeof(__str));
  uint64_t v9 = operator new(0x30uLL);
  uint64_t v10 = v9;
  v9[1] = 0;
  v9[2] = 0;
  *uint64_t v9 = off_26C219B28;
  void v9[3] = 0;
  uint64_t v11 = v9 + 3;
  v9[4] = 0;
  v9[5] = 0;
  *a5 = v9 + 3;
  a5[1] = v9;
  uint64_t v12 = *a4;
  if (a4[1] == *a4)
  {
    MEMORY[0xFFFFFFFFFFFFFFF8] = *(void *)(a2[1] - 8);
    goto LABEL_136;
  }
  uint64_t v87 = a3;
  int v13 = 0;
  unint64_t v14 = 0;
  uint64_t v89 = v9 + 5;
  do
  {
    uint64_t v15 = (long long *)(v12 + 240 * v14);
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)v15, *((void *)v15 + 1));
    }
    else
    {
      long long v16 = *v15;
      v90.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v16;
    }
    char v17 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 200))(a1, &v90);
    std::operator+<char>();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&__str, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v20 = *a4 + 240 * v14;
    uint64_t v22 = *(int **)(v20 + 88);
    uint64_t v21 = *(int **)(v20 + 96);
    int v23 = v22 + 1;
    if (v22 == v21 || v23 == v21)
    {
      uint64_t v25 = v22;
      int v23 = v22;
    }
    else
    {
      int v42 = *v22;
      int v41 = v22[1];
      if (v41 >= *v22) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = v22 + 1;
      }
      if (v41 < v42) {
        int v23 = v22;
      }
      if (v22 + 2 != v21)
      {
        if (v41 <= v42) {
          int v43 = *v22;
        }
        else {
          int v43 = v22[1];
        }
        if (v41 >= v42) {
          int v41 = *v22;
        }
        uint64_t v44 = v22 + 3;
        while (1)
        {
          std::chrono::steady_clock::time_point v45 = v44 - 1;
          if (v44 == v21) {
            break;
          }
          int v47 = *(v44 - 1);
          int v46 = *v44;
          if (*v44 >= v47)
          {
            if (v47 < v41)
            {
              int v41 = *(v44 - 1);
              uint64_t v25 = v44 - 1;
            }
            BOOL v48 = v46 < v43;
            if (v46 > v43) {
              int v43 = *v44;
            }
            if (!v48) {
              int v23 = v44;
            }
          }
          else
          {
            int v41 = *v25;
            if (v46 < *v25)
            {
              int v41 = *v44;
              uint64_t v25 = v44;
            }
            int v43 = *v23;
            if (v47 > *v23) {
              int v43 = *(v44 - 1);
            }
            if (v47 >= *v23) {
              int v23 = v44 - 1;
            }
          }
          long long v49 = v44 + 1;
          v44 += 2;
          if (v49 == v21) {
            goto LABEL_20;
          }
        }
        if (*v45 >= *v25)
        {
          if (*v45 >= *v23) {
            int v23 = v44 - 1;
          }
        }
        else
        {
          uint64_t v25 = v44 - 1;
        }
      }
    }
LABEL_20:
    if (v21 == v25)
    {
      if (v17)
      {
LABEL_72:
        std::operator+<char>();
        unint64_t v38 = (std::string *)(v10[4] - 40);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v39 = &__p;
        }
        else {
          unint64_t v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v40 = __p.__r_.__value_.__l.__size_;
        }
LABEL_78:
        std::string::append(v38, (const std::string::value_type *)v39, v40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_120;
      }
LABEL_80:
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v95, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
      }
      else {
        std::string v95 = v90;
      }
      uint64_t v96 = -1;
      uint64_t v97 = -1;
      unint64_t v50 = v10[4];
      unint64_t v51 = v10[5];
      if (v50 >= v51)
      {
        unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v50 - *v11) >> 3);
        unint64_t v54 = v53 + 1;
        if (v53 + 1 > 0x666666666666666) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - *v11) >> 3);
        if (2 * v55 > v54) {
          unint64_t v54 = 2 * v55;
        }
        if (v55 >= 0x333333333333333) {
          unint64_t v56 = 0x666666666666666;
        }
        else {
          unint64_t v56 = v54;
        }
        uint64_t v94 = v89;
        if (v56) {
          unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v56);
        }
        else {
          uint64_t v57 = 0;
        }
        std::string::size_type v58 = v56 + 40 * v53;
        __p.__r_.__value_.__r.__words[0] = v56;
        __p.__r_.__value_.__l.__size_ = v58;
        unint64_t v93 = v56 + 40 * v57;
        long long v59 = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
        *(void *)(v58 + 16) = *((void *)&v95.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v58 = v59;
        memset(&v95, 0, sizeof(v95));
        *(void *)(v58 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v96;
        *(void *)(v58 + 32) = v97;
        __p.__r_.__value_.__r.__words[2] = v58 + 40;
        std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(v11, &__p);
        uint64_t v60 = v10[4];
        std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&__p);
        int v61 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
        v10[4] = v60;
        if (v61 < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v52 = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
        *(void *)(v50 + 16) = *((void *)&v95.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v50 = v52;
        memset(&v95, 0, sizeof(v95));
        *(void *)(v50 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v96;
        *(void *)(v50 + 32) = v97;
        v10[4] = v50 + 40;
      }
      int v13 = 1;
      goto LABEL_120;
    }
    BOOL v26 = v21 == v23;
    if (v21 == v23) {
      char v27 = v17;
    }
    else {
      char v27 = 1;
    }
    if ((v27 & 1) == 0) {
      goto LABEL_80;
    }
    if (v26) {
      goto LABEL_72;
    }
    unint64_t v28 = *v25;
    uint64_t v29 = *a2;
    unint64_t v30 = (a2[1] - *a2) >> 5;
    if (v30 <= v28) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v31 = *v23;
    if (v30 <= v31) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v32 = *(unsigned int *)(v29 + 32 * v28 + 24);
    uint64_t v33 = *(void *)(v29 + 32 * v31 + 24);
    if (v14) {
      BOOL v34 = 1;
    }
    else {
      BOOL v34 = v32 == 0;
    }
    int v35 = !v34;
    uint64_t v36 = (int)v32;
    if (v14)
    {
      uint64_t v37 = *(void *)(v10[4] - 8);
      if (v37 == (int)v32)
      {
        std::operator+<char>();
        unint64_t v38 = (std::string *)(v10[4] - 40);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v39 = &__p;
        }
        else {
          unint64_t v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v40 = __p.__r_.__value_.__l.__size_;
        }
        goto LABEL_78;
      }
      v13 |= v37 + 1 != (int)v32;
    }
    else
    {
      v13 |= v35;
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v95, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
    }
    else {
      std::string v95 = v90;
    }
    uint64_t v96 = v36;
    uint64_t v97 = (int)v33;
    unint64_t v62 = v10[4];
    unint64_t v63 = v10[5];
    if (v62 >= v63)
    {
      unint64_t v65 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v62 - *v11) >> 3);
      unint64_t v66 = v65 + 1;
      if (v65 + 1 > 0x666666666666666) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v63 - *v11) >> 3);
      if (2 * v67 > v66) {
        unint64_t v66 = 2 * v67;
      }
      if (v67 >= 0x333333333333333) {
        unint64_t v68 = 0x666666666666666;
      }
      else {
        unint64_t v68 = v66;
      }
      uint64_t v94 = v89;
      if (v68) {
        unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v68);
      }
      else {
        uint64_t v69 = 0;
      }
      std::string::size_type v70 = v68 + 40 * v65;
      __p.__r_.__value_.__r.__words[0] = v68;
      __p.__r_.__value_.__l.__size_ = v70;
      unint64_t v93 = v68 + 40 * v69;
      long long v71 = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
      *(void *)(v70 + 16) = *((void *)&v95.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v70 = v71;
      memset(&v95, 0, sizeof(v95));
      *(void *)(v70 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v96;
      *(void *)(v70 + 32) = v97;
      __p.__r_.__value_.__r.__words[2] = v70 + 40;
      std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(v11, &__p);
      uint64_t v72 = v10[4];
      std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&__p);
      int v73 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
      v10[4] = v72;
      if (v73 < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v64 = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
      *(void *)(v62 + 16) = *((void *)&v95.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v62 = v64;
      memset(&v95, 0, sizeof(v95));
      *(void *)(v62 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v96;
      *(void *)(v62 + 32) = v97;
      v10[4] = v62 + 40;
    }
LABEL_120:
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    ++v14;
    uint64_t v12 = *a4;
  }
  while (v14 < 0xEEEEEEEEEEEEEEEFLL * ((a4[1] - *a4) >> 4));
  if (v13)
  {
    uint64_t v75 = v10[3];
    for (uint64_t i = v10[4]; v75 != i; v75 += 40)
    {
      *(void *)(v75 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = -1;
      *(void *)(v75 + 32) = -1;
    }
  }
  else
  {
    uint64_t v77 = v10[3];
    uint64_t v76 = v10[4];
    *(void *)(v76 - 8) = *(void *)(a2[1] - 8);
    while (v77 != v76)
    {
      unint64_t v78 = *(void *)(v77 + 24);
      unint64_t v79 = *(void *)(v77 + 32);
      unint64_t v80 = *(void *)(v87 + 16);
      if (v78 >= v80 || v79 >= v80)
      {
        *(void *)(*v11 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = -1;
        break;
      }
      *(void *)(v77 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *std::map<unsigned long,std::pair<unsigned long,unsigned long>>::at(*(void **)(v87 + 8), v78);
      *(void *)(v77 + 32) = std::map<unsigned long,std::pair<unsigned long,unsigned long>>::at(*(void **)(v87 + 8), v79)[1];
      v77 += 40;
    }
  }
LABEL_136:
  std::string::size_type v82 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v82 = __str.__r_.__value_.__l.__size_;
  }
  if (v82)
  {
    std::string::basic_string(&__p, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v95);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = __p;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string::size_type v83 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    Censor::global_plaintext(&__p, (uint64_t)&__str);
    std::string::size_type v84 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(v95.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v84;
    _os_log_impl(&dword_20CD80000, v83, OS_LOG_TYPE_DEFAULT, "[Output] - %s", (uint8_t *)&v95, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__p, (uint64_t)&__str);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v86 = &__p;
  }
  else {
    std::string::size_type v86 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(5, "[Output] - %s", v85, v86);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_20D328724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::map<unsigned long,std::pair<unsigned long,unsigned long>>::at(void *a1, unint64_t a2)
{
  if (!a1) {
LABEL_7:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unint64_t v2 = a1[4];
      if (v2 <= a2) {
        break;
      }
      a1 = (void *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (void *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

uint64_t FrontendNNModule::top1_result_aligned@<X0>(char *a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a2[1] == *a2)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = a1 + 104;
      if (a1[127] < 0) {
        uint64_t v9 = (void *)*v9;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v12 = v9;
      _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_ERROR, "#[%s] no paths in n_best", buf, 0xCu);
    }
    uint64_t v10 = a1 + 104;
    if (a1[127] < 0) {
      uint64_t v10 = (void *)*v10;
    }
    uint64_t result = Diagnostics::log(3, "#[%s] no paths in n_best", v8, v10);
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)a1 + 120);
    return v5();
  }
  return result;
}

void FrontendNNModule::top1_result(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, std::string *a4@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  uint64_t v5 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = (void *)(a1 + 104);
      if (*(char *)(a1 + 127) < 0) {
        uint64_t v22 = (void *)*v22;
      }
      LODWORD(v26.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v22;
      _os_log_impl(&dword_20CD80000, v20, OS_LOG_TYPE_ERROR, "#[%s] no paths in n_best", (uint8_t *)&v26, 0xCu);
    }
    int v23 = (void *)(a1 + 104);
    if (*(char *)(a1 + 127) < 0) {
      int v23 = (void *)*v23;
    }
    Diagnostics::log(3, "#[%s] no paths in n_best", v21, v23);
  }
  else
  {
    uint64_t v6 = *v5;
    if (v5[1] != *v5)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = (long long *)(v6 + v8);
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v10, *((void *)v10 + 1));
        }
        else
        {
          long long v11 = *v10;
          v26.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
          *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
        }
        if (a3)
        {
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v26.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
          if ((v25 & 0x80u) == 0) {
            uint64_t v13 = __p;
          }
          else {
            uint64_t v13 = (void **)__p[0];
          }
          if (size)
          {
            if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v14 = &v26;
            }
            else {
              unint64_t v14 = (std::string *)v26.__r_.__value_.__r.__words[0];
            }
            memmove(v13, v14, size);
          }
          *(_WORD *)((char *)v13 + size) = 32;
          if ((v25 & 0x80u) == 0) {
            uint64_t v15 = __p;
          }
          else {
            uint64_t v15 = (void **)__p[0];
          }
          if ((v25 & 0x80u) == 0) {
            std::string::size_type v16 = v25;
          }
          else {
            std::string::size_type v16 = (std::string::size_type)__p[1];
          }
          std::string::append(a4, (const std::string::value_type *)v15, v16);
          if ((char)v25 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v17 = &v26;
          }
          else {
            char v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
          }
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v18 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v18 = v26.__r_.__value_.__l.__size_;
          }
          std::string::append(a4, (const std::string::value_type *)v17, v18);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
        ++v9;
        uint64_t v6 = *v5;
        v8 += 240;
      }
      while (v9 < 0xEEEEEEEEEEEEEEEFLL * ((v5[1] - *v5) >> 4));
    }
  }
}

void sub_20D328C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 + 23) < 0) {
    operator delete(*(void **)v23);
  }
  _Unwind_Resume(exception_object);
}

BOOL FrontendNNModule::has_rewrite(FrontendNNModule *this)
{
  uint64_t v1 = *((void *)this + 39);
  if (*((void *)this + 38) == v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 - 16);
}

BOOL FrontendNNModule::is_last_chunk(FrontendNNModule *this)
{
  uint64_t v1 = *((void *)this + 39);
  if (*((void *)this + 38) == v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 - 16);
  return (void *)(v2 + 8) != v3 && *(unsigned char *)(v3[5] + 8) != 0;
}

uint64_t FrontendNNModule::get_current_item_attribute@<X0>(FrontendNNModule *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(FrontendNNModule *))(*(void *)this + 72))(this);
  if (result)
  {
    uint64_t v4 = *(void *)(result + 56);
    *a2 = *(void *)(result + 48);
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t FrontendNNModule::get_current_basic_item(FrontendNNModule *this)
{
  uint64_t v1 = *((void *)this + 39);
  if (*((void *)this + 38) == v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 - 16);
  if ((void *)(v2 + 8) == v3) {
    return 0;
  }
  else {
    return v3[5] + 8;
  }
}

void FrontendNNModule::compose_inputs(FrontendNNModule *this@<X0>, int a2@<W2>, uint64_t **a3@<X8>)
{
  uint64_t v164 = *MEMORY[0x263EF8340];
  uint64_t v5 = (uint64_t *)operator new(0x30uLL);
  v5[1] = 0;
  v5[2] = 0;
  *uint64_t v5 = (uint64_t)off_26C2199D8;
  v5[4] = 0;
  v5[5] = 0;
  v5[3] = 0;
  uint64_t v6 = v5 + 3;
  *a3 = v5 + 3;
  a3[1] = v5;
  int v145 = a3;
  uint64_t v146 = (char **)((char *)this + 304);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100]((uint64_t *)this + 38);
  long long v147 = (char *)this + 104;
  do
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v153);
    uint64_t v7 = v153;
    if ((void)v153)
    {
      uint64_t v9 = v7 + 8;
      if ((void *)(v7 + 8) == v8) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v8[5] + 8;
      }
      uint64_t v12 = v11;
      if ((void *)v9 == v11)
      {
        BOOL v13 = 0;
        if (!v10 && (void *)v9 == v12)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          if (*((char *)this + 127) < 0) {
            long long v147 = *(const char **)v147;
          }
          StringFormatter::StringFormatter((StringFormatter *)&v158, "#[%s] Token missing both TokenBasicItem and ChunkItem", v147);
          MEMORY[0x210558D40](exception, &v158);
          __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
      }
      else
      {
        BOOL v13 = *(unsigned char *)(v11[5] + 8) != 0;
      }
      if (*(_DWORD *)v10 == 1952807028)
      {
        unint64_t v14 = *(float **)(v10 + 48);
        float v15 = v14[55];
        float v16 = *((float *)this + 82);
        float v17 = vabds_f32(v15, v16);
        float v18 = fabsf(v15);
        float v19 = fabsf(v16);
        if (v18 >= v19) {
          float v19 = v18;
        }
        float v20 = v19 * 0.00000011921;
        BOOL v21 = v17 > v20;
        if (v17 > v20) {
          *((float *)this + 82) = v15;
        }
        float v22 = v14[59];
        float v23 = *((float *)this + 83);
        float v24 = vabds_f32(v22, v23);
        float v25 = fabsf(v22);
        float v26 = fabsf(v23);
        if (v25 >= v26) {
          float v26 = v25;
        }
        if (v24 > (float)(v26 * 0.00000011921))
        {
          *((float *)this + 83) = v22;
          BOOL v21 = 1;
        }
        float v27 = v14[61];
        float v28 = *((float *)this + 84);
        float v29 = vabds_f32(v27, v28);
        float v30 = fabsf(v27);
        float v31 = fabsf(v28);
        if (v30 >= v31) {
          float v31 = v30;
        }
        if (v29 <= (float)(v31 * 0.00000011921))
        {
          if (!v21) {
            goto LABEL_95;
          }
        }
        else
        {
          *((float *)this + 8std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v27;
        }
        FrontendNNModule::get_input_from_tokens(&__p, (uint64_t)this);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::pair[abi:ne180100]<std::string&,std::vector<std::shared_ptr<Agglomerate>>&,0>(&v158, (long long *)&__p, (void **)v146);
          unint64_t v38 = v6[2];
          unint64_t v39 = v6[1];
          if (v39 >= v38)
          {
            unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *v6) >> 4);
            unint64_t v58 = v57 + 1;
            if (v57 + 1 > 0x555555555555555) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v6) >> 4);
            if (2 * v59 > v58) {
              unint64_t v58 = 2 * v59;
            }
            if (v59 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v60 = 0x555555555555555;
            }
            else {
              unint64_t v60 = v58;
            }
            size_t v163 = v6 + 2;
            int v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v60);
            unint64_t v62 = &v61[48 * v57];
            *(void *)std::string buf = v61;
            *(void *)&buf[8] = v62;
            std::string::size_type v162 = &v61[48 * v63];
            long long v64 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
            *((void *)v62 + 2) = *((void *)&v158.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v62 = v64;
            memset(&v158, 0, sizeof(v158));
            *((void *)v62 + 3) = 0;
            *((void *)v62 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
            *((void *)v62 + 5) = 0;
            *(_OWORD *)(v62 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v159;
            *((void *)v62 + 5) = v160;
            long long v159 = 0uLL;
            uint64_t v160 = 0;
            *(void *)&buf[16] = v62 + 48;
            std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(v6, buf);
            uint64_t v41 = v6[1];
            std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            long long v40 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
            *(void *)(v39 + 16) = *((void *)&v158.__r_.__value_.__l + 2);
            *(void *)(v39 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
            *(_OWORD *)unint64_t v39 = v40;
            memset(&v158, 0, sizeof(v158));
            *(void *)(v39 + 32) = 0;
            *(void *)(v39 + 40) = 0;
            *(_OWORD *)(v39 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v159;
            *(void *)(v39 + 40) = v160;
            long long v159 = 0uLL;
            uint64_t v160 = 0;
            uint64_t v41 = v39 + 48;
          }
          v6[1] = v41;
          *(void *)std::string buf = &v159;
          std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v158.__r_.__value_.__l.__data_);
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          unint64_t v65 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v66 = (char *)this + 104;
            if (*((char *)this + 127) < 0) {
              unint64_t v66 = *(char **)v147;
            }
            Censor::global_plaintext(&v158, (uint64_t)&__p);
            if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v67 = &v158;
            }
            else {
              unint64_t v67 = (std::string *)v158.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = v66;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v67;
            _os_log_impl(&dword_20CD80000, v65, OS_LOG_TYPE_DEBUG, "#[%s] gets composed input : %s", buf, 0x16u);
            if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v158.__r_.__value_.__l.__data_);
            }
          }
          unint64_t v68 = (char *)this + 104;
          if (*((char *)this + 127) < 0) {
            unint64_t v68 = *(char **)v147;
          }
          Censor::global_plaintext(&v158, (uint64_t)&__p);
          if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v70 = &v158;
          }
          else {
            std::string::size_type v70 = (std::string *)v158.__r_.__value_.__r.__words[0];
          }
          Diagnostics::log(7, "#[%s] gets composed input : %s", v69, v68, v70);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v158.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_188;
          }
          *__p.__r_.__value_.__l.__data_ = 0;
          __p.__r_.__value_.__l.__size_ = 0;
          int v56 = 3;
          if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
            goto LABEL_94;
          }
        }
        else
        {
          int v56 = 0;
          if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          {
LABEL_94:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (size) {
              goto LABEL_189;
            }
LABEL_95:
            (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
            std::vector<std::shared_ptr<Agglomerate>>::push_back[abi:ne180100](v146, &v153);
            BOOL v71 = v9 != (void)v12;
            if (a2) {
              BOOL v71 = v13;
            }
            if (!v71)
            {
              int v56 = 0;
              goto LABEL_189;
            }
            FrontendNNModule::get_input_from_tokens(&__p, (uint64_t)this);
            if (*((void *)this + 38) != *((void *)this + 39))
            {
              std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::pair[abi:ne180100]<std::string&,std::vector<std::shared_ptr<Agglomerate>>&,0>(&v158, (long long *)&__p, (void **)v146);
              unint64_t v72 = v6[2];
              unint64_t v73 = v6[1];
              if (v73 >= v72)
              {
                unint64_t v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - *v6) >> 4);
                unint64_t v113 = v112 + 1;
                if (v112 + 1 > 0x555555555555555) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *v6) >> 4);
                if (2 * v114 > v113) {
                  unint64_t v113 = 2 * v114;
                }
                if (v114 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v115 = 0x555555555555555;
                }
                else {
                  unint64_t v115 = v113;
                }
                size_t v163 = v6 + 2;
                double v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v115);
                double v117 = &v116[48 * v112];
                *(void *)std::string buf = v116;
                *(void *)&buf[8] = v117;
                std::string::size_type v162 = &v116[48 * v118];
                long long v119 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
                *((void *)v117 + 2) = *((void *)&v158.__r_.__value_.__l + 2);
                *(_OWORD *)double v117 = v119;
                memset(&v158, 0, sizeof(v158));
                *((void *)v117 + 3) = 0;
                *((void *)v117 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
                *((void *)v117 + 5) = 0;
                *(_OWORD *)(v117 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v159;
                *((void *)v117 + 5) = v160;
                long long v159 = 0uLL;
                uint64_t v160 = 0;
                *(void *)&buf[16] = v117 + 48;
                std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(v6, buf);
                uint64_t v75 = v6[1];
                std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                long long v74 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
                *(void *)(v73 + 16) = *((void *)&v158.__r_.__value_.__l + 2);
                *(void *)(v73 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
                *(_OWORD *)unint64_t v73 = v74;
                memset(&v158, 0, sizeof(v158));
                *(void *)(v73 + 32) = 0;
                *(void *)(v73 + 40) = 0;
                *(_OWORD *)(v73 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v159;
                *(void *)(v73 + 40) = v160;
                long long v159 = 0uLL;
                uint64_t v160 = 0;
                uint64_t v75 = v73 + 48;
              }
              v6[1] = v75;
              *(void *)std::string buf = &v159;
              std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v158.__r_.__value_.__l.__data_);
              }
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              double v120 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                double v121 = (char *)this + 104;
                if (*((char *)this + 127) < 0) {
                  double v121 = *(char **)v147;
                }
                Censor::global_plaintext(&v158, (uint64_t)&__p);
                if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unint64_t v122 = &v158;
                }
                else {
                  unint64_t v122 = (std::string *)v158.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string buf = 136315394;
                *(void *)&uint8_t buf[4] = v121;
                *(_WORD *)&buf[12] = 2080;
                *(void *)&buf[14] = v122;
                _os_log_impl(&dword_20CD80000, v120, OS_LOG_TYPE_DEBUG, "#[%s] gets composed input : %s", buf, 0x16u);
                if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v158.__r_.__value_.__l.__data_);
                }
              }
              std::string::size_type v123 = (char *)this + 104;
              if (*((char *)this + 127) < 0) {
                std::string::size_type v123 = *(char **)v147;
              }
              Censor::global_plaintext(&v158, (uint64_t)&__p);
              if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v125 = &v158;
              }
              else {
                std::string::size_type v125 = (std::string *)v158.__r_.__value_.__r.__words[0];
              }
              Diagnostics::log(7, "#[%s] gets composed input : %s", v124, v123, v125);
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v158.__r_.__value_.__l.__data_);
              }
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_188;
              }
              *__p.__r_.__value_.__l.__data_ = 0;
              __p.__r_.__value_.__l.__size_ = 0;
            }
            goto LABEL_186;
          }
        }
        if (size) {
          goto LABEL_189;
        }
        goto LABEL_95;
      }
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
      FrontendNNModule::get_input_from_tokens(&__p, (uint64_t)this);
      std::string::size_type v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
      }
      if (v32)
      {
        std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::pair[abi:ne180100]<std::string&,std::vector<std::shared_ptr<Agglomerate>>&,0>(&v158, (long long *)&__p, (void **)v146);
        unint64_t v33 = v6[2];
        unint64_t v34 = v6[1];
        if (v34 >= v33)
        {
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *v6) >> 4);
          unint64_t v43 = v42 + 1;
          if (v42 + 1 > 0x555555555555555) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *v6) >> 4);
          if (2 * v44 > v43) {
            unint64_t v43 = 2 * v44;
          }
          if (v44 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v45 = 0x555555555555555;
          }
          else {
            unint64_t v45 = v43;
          }
          size_t v163 = v6 + 2;
          int v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v45);
          int v47 = &v46[48 * v42];
          *(void *)std::string buf = v46;
          *(void *)&buf[8] = v47;
          std::string::size_type v162 = &v46[48 * v48];
          long long v49 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
          *((void *)v47 + 2) = *((void *)&v158.__r_.__value_.__l + 2);
          *(_OWORD *)int v47 = v49;
          memset(&v158, 0, sizeof(v158));
          *((void *)v47 + 3) = 0;
          *((void *)v47 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
          *((void *)v47 + 5) = 0;
          *(_OWORD *)(v47 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v159;
          *((void *)v47 + 5) = v160;
          long long v159 = 0uLL;
          uint64_t v160 = 0;
          *(void *)&buf[16] = v47 + 48;
          std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(v6, buf);
          uint64_t v36 = v6[1];
          std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          long long v35 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
          *(void *)(v34 + 16) = *((void *)&v158.__r_.__value_.__l + 2);
          *(void *)(v34 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
          *(_OWORD *)unint64_t v34 = v35;
          memset(&v158, 0, sizeof(v158));
          *(void *)(v34 + 32) = 0;
          *(void *)(v34 + 40) = 0;
          *(_OWORD *)(v34 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v159;
          *(void *)(v34 + 40) = v160;
          long long v159 = 0uLL;
          uint64_t v160 = 0;
          uint64_t v36 = v34 + 48;
        }
        v6[1] = v36;
        *(void *)std::string buf = &v159;
        std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v158.__r_.__value_.__l.__data_);
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        unint64_t v50 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v51 = (char *)this + 104;
          if (*((char *)this + 127) < 0) {
            unint64_t v51 = *(char **)v147;
          }
          Censor::global_plaintext(&v158, (uint64_t)&__p);
          if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v52 = &v158;
          }
          else {
            long long v52 = (std::string *)v158.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v51;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v52;
          _os_log_impl(&dword_20CD80000, v50, OS_LOG_TYPE_DEBUG, "#[%s] gets composed input : %s", buf, 0x16u);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v158.__r_.__value_.__l.__data_);
          }
        }
        unint64_t v53 = (char *)this + 104;
        if (*((char *)this + 127) < 0) {
          unint64_t v53 = *(char **)v147;
        }
        Censor::global_plaintext(&v158, (uint64_t)&__p);
        if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v55 = &v158;
        }
        else {
          unint64_t v55 = (std::string *)v158.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(7, "#[%s] gets composed input : %s", v54, v53, v55);
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v158.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          *__p.__r_.__value_.__l.__data_ = 0;
          __p.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          __p.__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        }
      }
      int v76 = *(_DWORD *)v10;
      if (*(int *)v10 <= 1835102826)
      {
        if (v76 == 1635083369)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          unint64_t v92 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v93 = (char *)this + 104;
            if (*((char *)this + 127) < 0) {
              unint64_t v93 = *(char **)v147;
            }
            LODWORD(v158.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v158.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v93;
            _os_log_impl(&dword_20CD80000, v92, OS_LOG_TYPE_DEBUG, "#[%s] gets Phatic item", (uint8_t *)&v158, 0xCu);
          }
          int v86 = *((char *)this + 127);
          uint64_t v87 = "#[%s] gets Phatic item";
          goto LABEL_161;
        }
        if (v76 == 1651664235)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          std::string::size_type v83 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v85 = (char *)this + 104;
            if (*((char *)this + 127) < 0) {
              uint64_t v85 = *(char **)v147;
            }
            LODWORD(v158.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v158.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v85;
            _os_log_impl(&dword_20CD80000, v83, OS_LOG_TYPE_DEBUG, "#[%s] gets PAUSE item", (uint8_t *)&v158, 0xCu);
          }
          int v86 = *((char *)this + 127);
          uint64_t v87 = "#[%s] gets PAUSE item";
          goto LABEL_161;
        }
      }
      else
      {
        switch(v76)
        {
          case 1835102827:
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            std::chrono::steady_clock::time_point v88 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v89 = (char *)this + 104;
              if (*((char *)this + 127) < 0) {
                uint64_t v89 = *(char **)v147;
              }
              LODWORD(v158.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v158.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v89;
              _os_log_impl(&dword_20CD80000, v88, OS_LOG_TYPE_DEBUG, "#[%s] gets MRK item", (uint8_t *)&v158, 0xCu);
            }
            int v86 = *((char *)this + 127);
            uint64_t v87 = "#[%s] gets MRK item";
            goto LABEL_161;
          case 1886547312:
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            std::string v90 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v91 = (char *)this + 104;
              if (*((char *)this + 127) < 0) {
                uint64_t v91 = *(char **)v147;
              }
              LODWORD(v158.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v158.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v91;
              _os_log_impl(&dword_20CD80000, v90, OS_LOG_TYPE_DEBUG, "#[%s] gets Prompt item", (uint8_t *)&v158, 0xCu);
            }
            int v86 = *((char *)this + 127);
            uint64_t v87 = "#[%s] gets Prompt item";
            goto LABEL_161;
          case 1885892462:
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v77 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v78 = (char *)this + 104;
              if (*((char *)this + 127) < 0) {
                unint64_t v78 = *(char **)v147;
              }
              Censor::global_plaintext(&v158, v10 + 24);
              if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v79 = &v158;
              }
              else {
                unint64_t v79 = (std::string *)v158.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = v78;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = v79;
              _os_log_impl(&dword_20CD80000, v77, OS_LOG_TYPE_DEBUG, "#[%s] gets phonetic input : %s", buf, 0x16u);
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v158.__r_.__value_.__l.__data_);
              }
            }
            unint64_t v80 = (char *)this + 104;
            if (*((char *)this + 127) < 0) {
              unint64_t v80 = *(char **)v147;
            }
            Censor::global_plaintext(&v158, v10 + 24);
            if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v82 = &v158;
            }
            else {
              std::string::size_type v82 = (std::string *)v158.__r_.__value_.__r.__words[0];
            }
            Diagnostics::log(7, "#[%s] gets phonetic input : %s", v81, v80, v82);
            if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v158.__r_.__value_.__l.__data_);
            }
LABEL_164:
            uint64_t v6 = *v145;
            std::string::basic_string[abi:ne180100]<0>(&v151, &byte_20D5A22AE);
            long long v97 = v153;
            if (*((void *)&v153 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v153 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            std::string::size_type v148 = 0;
            std::string::size_type v149 = 0;
            uint64_t v150 = 0;
            uint64_t v154 = &v148;
            char v155 = 0;
            uint64_t v98 = (char *)operator new(0x10uLL);
            std::string::size_type v148 = v98;
            std::string::size_type v149 = v98;
            unint64_t v99 = v98 + 16;
            uint64_t v150 = v98 + 16;
            long long v156 = v98;
            *(void *)std::string buf = &v150;
            *(void *)&buf[8] = &v156;
            *(void *)&buf[16] = &v157;
            *(_OWORD *)uint64_t v98 = v97;
            if (*((void *)&v97 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            std::string::size_type v157 = v98 + 16;
            LOBYTE(v162) = 1;
            std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<Agglomerate>>,std::shared_ptr<Agglomerate>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
            std::string::size_type v149 = v99;
            if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v158, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
              unint64_t v99 = v149;
            }
            else
            {
              std::string v158 = v151;
            }
            long long v159 = 0uLL;
            uint64_t v160 = 0;
            std::vector<std::shared_ptr<Agglomerate>>::__init_with_size[abi:ne180100]<std::shared_ptr<Agglomerate>*,std::shared_ptr<Agglomerate>*>(&v159, v148, v99, (v99 - v148) >> 4);
            unint64_t v100 = v6[2];
            unint64_t v101 = v6[1];
            if (v101 >= v100)
            {
              unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - *v6) >> 4);
              unint64_t v105 = v104 + 1;
              if (v104 + 1 > 0x555555555555555) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - *v6) >> 4);
              if (2 * v106 > v105) {
                unint64_t v105 = 2 * v106;
              }
              if (v106 >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v107 = 0x555555555555555;
              }
              else {
                unint64_t v107 = v105;
              }
              size_t v163 = v6 + 2;
              uint64_t v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v107);
              std::string::size_type v109 = &v108[48 * v104];
              *(void *)std::string buf = v108;
              *(void *)&buf[8] = v109;
              std::string::size_type v162 = &v108[48 * v110];
              long long v111 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
              *((void *)v109 + 2) = *((void *)&v158.__r_.__value_.__l + 2);
              *(_OWORD *)std::string::size_type v109 = v111;
              memset(&v158, 0, sizeof(v158));
              *((void *)v109 + 3) = 0;
              *((void *)v109 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
              *((void *)v109 + 5) = 0;
              *(_OWORD *)(v109 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v159;
              *((void *)v109 + 5) = v160;
              long long v159 = 0uLL;
              uint64_t v160 = 0;
              *(void *)&buf[16] = v109 + 48;
              std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(v6, buf);
              uint64_t v103 = v6[1];
              std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              long long v102 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
              *(void *)(v101 + 16) = *((void *)&v158.__r_.__value_.__l + 2);
              *(void *)(v101 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
              *(_OWORD *)unint64_t v101 = v102;
              memset(&v158, 0, sizeof(v158));
              *(void *)(v101 + 32) = 0;
              *(void *)(v101 + 40) = 0;
              *(_OWORD *)(v101 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v159;
              *(void *)(v101 + 40) = v160;
              long long v159 = 0uLL;
              uint64_t v160 = 0;
              uint64_t v103 = v101 + 48;
            }
            v6[1] = v103;
            *(void *)std::string buf = &v159;
            std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v158.__r_.__value_.__l.__data_);
            }
            *(void *)std::string buf = &v148;
            std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            if (*((void *)&v97 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v97 + 1));
            }
            if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v151.__r_.__value_.__l.__data_);
            }
LABEL_186:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_188;
        }
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v94 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        std::string v95 = (char *)this + 104;
        if (*((char *)this + 127) < 0) {
          std::string v95 = *(char **)v147;
        }
        LODWORD(v158.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v158.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v95;
        _os_log_impl(&dword_20CD80000, v94, OS_LOG_TYPE_DEBUG, "#[%s] gets Unkown item, pass to downstream", (uint8_t *)&v158, 0xCu);
      }
      int v86 = *((char *)this + 127);
      uint64_t v87 = "#[%s] gets Unkown item, pass to downstream";
LABEL_161:
      uint64_t v96 = (char *)this + 104;
      if (v86 < 0) {
        uint64_t v96 = *(char **)v147;
      }
      Diagnostics::log(7, v87, v84, v96);
      goto LABEL_164;
    }
LABEL_188:
    int v56 = 3;
LABEL_189:
    if (*((void *)&v153 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v153 + 1));
    }
  }
  while (!v56);
  if (*v6 == v6[1])
  {
    FrontendNNModule::get_input_from_tokens(&__p, (uint64_t)this);
    if (*((void *)this + 38) != *((void *)this + 39))
    {
      UTFString::rstrip(&__p);
      std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::pair[abi:ne180100]<std::string&,std::vector<std::shared_ptr<Agglomerate>>&,0>(&v158, (long long *)&__p, (void **)v146);
      unint64_t v126 = v6[2];
      unint64_t v127 = v6[1];
      if (v127 >= v126)
      {
        unint64_t v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v127 - *v6) >> 4);
        unint64_t v131 = v130 + 1;
        if (v130 + 1 > 0x555555555555555) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v132 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126 - *v6) >> 4);
        if (2 * v132 > v131) {
          unint64_t v131 = 2 * v132;
        }
        if (v132 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v133 = 0x555555555555555;
        }
        else {
          unint64_t v133 = v131;
        }
        size_t v163 = v6 + 2;
        unint64_t v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v133);
        unint64_t v135 = &v134[48 * v130];
        *(void *)std::string buf = v134;
        *(void *)&buf[8] = v135;
        std::string::size_type v162 = &v134[48 * v136];
        long long v137 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
        *((void *)v135 + 2) = *((void *)&v158.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v135 = v137;
        memset(&v158, 0, sizeof(v158));
        *((void *)v135 + 3) = 0;
        *((void *)v135 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
        *((void *)v135 + 5) = 0;
        *(_OWORD *)(v135 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v159;
        *((void *)v135 + 5) = v160;
        long long v159 = 0uLL;
        uint64_t v160 = 0;
        *(void *)&buf[16] = v135 + 48;
        std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(v6, buf);
        uint64_t v129 = v6[1];
        std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        long long v128 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
        *(void *)(v127 + 16) = *((void *)&v158.__r_.__value_.__l + 2);
        *(void *)(v127 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
        *(_OWORD *)unint64_t v127 = v128;
        *(_OWORD *)&v158.__r_.__value_.__l.__data_ = 0uLL;
        *(void *)(v127 + 32) = 0;
        *(void *)(v127 + 40) = 0;
        *(_OWORD *)(v127 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v159;
        *(void *)(v127 + 40) = v160;
        v158.__r_.__value_.__r.__words[2] = 0;
        long long v159 = 0uLL;
        uint64_t v160 = 0;
        uint64_t v129 = v127 + 48;
      }
      v6[1] = v129;
      *(void *)std::string buf = &v159;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v158.__r_.__value_.__l.__data_);
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      std::string::size_type v138 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        long long v139 = (char *)this + 104;
        if (*((char *)this + 127) < 0) {
          long long v139 = *(char **)v147;
        }
        Censor::global_plaintext(&v158, (uint64_t)&__p);
        if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v140 = &v158;
        }
        else {
          unint64_t v140 = (std::string *)v158.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v139;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v140;
        _os_log_impl(&dword_20CD80000, v138, OS_LOG_TYPE_DEBUG, "#[%s] gets composed input from remain tokens : %s", buf, 0x16u);
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v158.__r_.__value_.__l.__data_);
        }
      }
      if (*((char *)this + 127) < 0) {
        long long v147 = *(const char **)v147;
      }
      Censor::global_plaintext(&v158, (uint64_t)&__p);
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v142 = &v158;
      }
      else {
        std::string::size_type v142 = (std::string *)v158.__r_.__value_.__r.__words[0];
      }
      Diagnostics::log(7, "#[%s] gets composed input from remain tokens : %s", v141, v147, v142);
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v158.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20D32A2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  long long v40 = *(std::__shared_weak_count **)(a19 + 8);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  _Unwind_Resume(exception_object);
}

std::string *FrontendNNModule::get_input_from_tokens(std::string *result, uint64_t a2)
{
  result->__r_.__value_.__r.__words[0] = 0;
  result->__r_.__value_.__l.__size_ = 0;
  result->__r_.__value_.__r.__words[2] = 0;
  uint64_t v2 = *(void *)(a2 + 304);
  uint64_t v3 = *(void *)(a2 + 312);
  if (v3 != v2)
  {
    uint64_t v5 = result;
    for (unint64_t i = 0; i < (v3 - v2) >> 4; ++i)
    {
      uint64_t v7 = *(void *)(v2 + 16 * i);
      if ((std::string *)(v7 + 8) == result) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = result[1].__r_.__value_.__r.__words[2] + 8;
      }
      std::string::size_type v9 = *(unsigned __int8 *)(v8 + 47);
      if (*(char *)(v8 + 47) < 0)
      {
        if (*(void *)(v8 + 32))
        {
LABEL_10:
          if (i)
          {
            unint64_t v10 = (i - 1);
            if (v10 >= (v3 - v2) >> 4) {
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            }
            int v12 = *(_DWORD *)(v8 + 8) - (*(_DWORD *)(v11[5] + 16) + *(_DWORD *)(v11[5] + 24));
            if (v12 >= 1)
            {
              do
              {
                std::string::append(v5, " ");
                --v12;
              }
              while (v12);
              std::string::size_type v9 = *(unsigned __int8 *)(v8 + 47);
            }
          }
          if ((v9 & 0x80u) == 0) {
            BOOL v13 = (const std::string::value_type *)(v8 + 24);
          }
          else {
            BOOL v13 = *(const std::string::value_type **)(v8 + 24);
          }
          if ((v9 & 0x80u) == 0) {
            std::string::size_type v14 = v9;
          }
          else {
            std::string::size_type v14 = *(void *)(v8 + 32);
          }
          uint64_t result = std::string::append(v5, v13, v14);
          uint64_t v2 = *(void *)(a2 + 304);
          uint64_t v3 = *(void *)(a2 + 312);
        }
      }
      else if (*(unsigned char *)(v8 + 47))
      {
        goto LABEL_10;
      }
    }
  }
  return result;
}

void sub_20D32A5C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::pair[abi:ne180100]<std::string&,std::vector<std::shared_ptr<Agglomerate>>&,0>(std::string *this, long long *a2, void **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<Agglomerate>>::__init_with_size[abi:ne180100]<std::shared_ptr<Agglomerate>*,std::shared_ptr<Agglomerate>*>(this[1].__r_.__value_.__r.__words, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return this;
}

void sub_20D32A658(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

uint64_t *std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 48;
      long long v6 = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v6;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 48) = 0;
      *(void *)(v4 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  *uint64_t result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::destroy[abi:ne180100](i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<Agglomerate>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v8 = (v4 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v11);
    std::string::size_type v14 = &v12[16 * v8];
    long long v15 = *a2;
    *(_OWORD *)std::string::size_type v14 = *a2;
    if (*((void *)&v15 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    float v16 = &v12[16 * v13];
    uint64_t v7 = v14 + 16;
    float v17 = *a1;
    float v18 = a1[1];
    if (v18 == *a1)
    {
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v16;
    }
    else
    {
      do
      {
        long long v19 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
        *(void *)float v18 = 0;
        *((void *)v18 + 1) = 0;
      }
      while (v18 != v17);
      float v18 = *a1;
      float v20 = a1[1];
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v16;
      while (v20 != v18)
      {
        BOOL v21 = (std::__shared_weak_count *)*((void *)v20 - 1);
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        v20 -= 16;
      }
    }
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)uint64_t v4 = *(void *)a2;
    *((void *)v4 + 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = v4 + 16;
  }
  a1[1] = v7;
}

void *std::vector<std::shared_ptr<Agglomerate>>::__init_with_size[abi:ne180100]<std::shared_ptr<Agglomerate>*,std::shared_ptr<Agglomerate>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<Agglomerate>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)v6[1];
    int v12 = v7;
    unint64_t v11 = v7;
    v9[0] = v6 + 2;
    v9[1] = &v11;
    v9[2] = &v12;
    if (a2 != a3)
    {
      do
      {
        void *v7 = *a2;
        uint64_t v8 = a2[1];
        v7[1] = v8;
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
        }
        v7 += 2;
        a2 += 2;
      }
      while (a2 != a3);
      int v12 = v7;
    }
    char v10 = 1;
    uint64_t result = (void *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<Agglomerate>>,std::shared_ptr<Agglomerate>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
    v6[1] = v7;
  }
  return result;
}

void sub_20D32A9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::shared_ptr<Agglomerate>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<Agglomerate>>,std::shared_ptr<Agglomerate>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      v3 -= 16;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v3 -= 48;
        std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>::destroy[abi:ne180100](v3);
      }
      while (v3 != v1);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2199D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2199D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FrontendNNModule::compose_input(FrontendNNModule *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v6 = (char **)((char *)this + 304);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100]((uint64_t *)this + 38);
  (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v15);
  if ((void)v15)
  {
    std::vector<std::shared_ptr<Agglomerate>>::push_back[abi:ne180100](v6, &v15);
    if ((a2 & 1) == 0) {
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
    }
    std::string::size_type v7 = v15;
    if ((void *)(v7 + 8) == v8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)v14, "TokenBasicItem is missing");
      MEMORY[0x210558D40](exception, v14);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    uint64_t v9 = v8[5];
    if (*(_DWORD *)(v9 + 8) == 1952807028)
    {
      if (*(char *)(v9 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v9 + 32), *(void *)(v9 + 40));
        std::string::size_type v7 = v15;
      }
      else
      {
        long long v10 = *(_OWORD *)(v9 + 32);
        a3->__r_.__value_.__r.__words[2] = *(void *)(v9 + 48);
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
      }
      std::string::size_type v11 = *((void *)&v15 + 1);
      a3[1].__r_.__value_.__r.__words[0] = v7;
    }
    else
    {
      std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v15);
      a3->__r_.__value_.__r.__words[0] = 0;
      a3->__r_.__value_.__l.__size_ = 0;
      std::string::size_type v11 = *((void *)&v15 + 1);
      std::string::size_type v12 = v15;
      a3->__r_.__value_.__r.__words[2] = 0;
      a3[1].__r_.__value_.__r.__words[0] = v12;
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&a3->__r_.__value_.__r.__words[2] = 0u;
    std::string::size_type v11 = *((void *)&v15 + 1);
  }
  a3[1].__r_.__value_.__l.__size_ = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
}

void sub_20D32ADD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      if (a17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a17);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t FrontendNNModule::clear(FrontendNNModule *this)
{
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100]((uint64_t *)this + 38);
  return FrontendModule::clear(this);
}

uint64_t FrontendNNModule::FrontendNNModule(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, const std::string *a4)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = off_26C200A98;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = a3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
  }
  *(void *)a1 = off_26C201808;
  *(_OWORD *)(a1 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 18std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 26std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  std::string::operator=((std::string *)(a1 + 128), a4);
  std::string::pointer data = a4[3].__r_.__value_.__l.__data_;
  std::string::size_type size = a4[3].__r_.__value_.__l.__size_;
  if (size) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = data;
  *(void *)(a1 + 18std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = size;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_20D32AF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 304);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::string::size_type v14 = *(std::__shared_weak_count **)(v10 + 296);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  long long v15 = *(std::__shared_weak_count **)(v10 + 280);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  float v16 = *(std::__shared_weak_count **)(v10 + 264);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  float v17 = *(std::__shared_weak_count **)(v10 + 248);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  int v18 = *(std::__shared_weak_count **)(v10 + 232);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  long long v19 = *(std::__shared_weak_count **)(v10 + 216);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  float v20 = *(std::__shared_weak_count **)(v10 + 200);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  BOOL v21 = *(std::__shared_weak_count **)(v10 + 184);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (*(char *)(v10 + 175) < 0) {
    operator delete(*(void **)(v10 + 152));
  }
  if (*(char *)(v10 + 151) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 127) < 0) {
    operator delete(*v12);
  }
  FrontendModule::~FrontendModule((void **)v10);
  _Unwind_Resume(a1);
}

void EspressoWordEmbeddingInference::inference(uint64_t a1@<X0>, int **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a2[1] - *a2;
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEFAULT, "Espresso WordEmbedding inference begin. word_std::string::size_type size = %ld", buf, 0xCu);
  }
  Diagnostics::log(5, "Espresso WordEmbedding inference begin. word_std::string::size_type size = %ld", v7, a2[1] - *a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<int>::size_type v9 = a2[1] - *a2;
  *(_DWORD *)std::string buf = 1;
  std::vector<int>::vector(&v103, v9, (const std::vector<int>::value_type *)buf);
  std::vector<int>::size_type v10 = a2[1] - *a2;
  *(_DWORD *)std::string buf = 0;
  std::vector<int>::vector(&v102, v10, (const std::vector<int>::value_type *)buf);
  uint64_t v11 = a1 + 32;
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v11 = *(void *)(a1 + 32);
  }
  uint64_t v137 = v11;
  uint64_t v12 = a1 + 56;
  if (*(char *)(a1 + 79) < 0) {
    uint64_t v12 = *(void *)(a1 + 56);
  }
  uint64_t v138 = v12;
  uint64_t v13 = a1 + 80;
  if (*(char *)(a1 + 103) < 0) {
    uint64_t v13 = *(void *)(a1 + 80);
  }
  uint64_t v139 = v13;
  int v134 = (unint64_t)((char *)a2[1] - (char *)*a2) >> 2;
  int v135 = v134;
  int v136 = v134;
  int v133 = 1;
  uint64_t v132 = 0x100000001;
  int v131 = 0;
  uint64_t v130 = 0;
  int v129 = 0;
  uint64_t v128 = 0;
  int v127 = 0;
  uint64_t v126 = 0;
  int v125 = 2;
  uint64_t v124 = 0x200000002;
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  int v15 = espresso_network_change_input_blob_shapes_seq_rank();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to reshape input");
  if (v15)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v33 = v101;
    unint64_t v34 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    uint64_t v36 = __p;
    if (v33 < 0) {
      uint64_t v36 = v34;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v36, v15, status_string);
    MEMORY[0x210558D40](exception, buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v101 < 0) {
    operator delete(__p[0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  float v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 134217984;
    *(double *)&uint8_t buf[4] = (double)((v17.__d_.__rep_ - v14.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v16, OS_LOG_TYPE_DEFAULT, "WordEmbedding Espresso reshaping time: %.3f s", buf, 0xCu);
  }
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "WordEmbedding Espresso reshaping time: %.3f s", v19, (double)((v18.__d_.__rep_ - v14.__d_.__rep_) / 1000000) / 1000.0, &v124);
  int v20 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v98, "Unable to build plan");
  if (v20)
  {
    uint64_t v37 = __cxa_allocate_exception(0x10uLL);
    int v38 = v99;
    unint64_t v39 = (void **)v98[0];
    long long v40 = (const char *)espresso_get_status_string();
    uint64_t v41 = v98;
    if (v38 < 0) {
      uint64_t v41 = v39;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v41, v20, v40);
    MEMORY[0x210558D40](v37, buf);
    __cxa_throw(v37, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v99 < 0) {
    operator delete(v98[0]);
  }
  uint64_t v123 = 0;
  long long v122 = 0u;
  long long v121 = 0u;
  long long v120 = 0u;
  long long v119 = 0u;
  long long v118 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  *(_OWORD *)std::string buf = 0u;
  BOOL v21 = *a2;
  float v22 = a2[1];
  unint64_t v23 = v22 - *a2;
  uint64_t v97 = 0;
  std::string v95 = 0;
  uint64_t v96 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v95, v21, v22, v23);
  uint64_t v111 = 1;
  uint64_t v112 = (v96 - (unsigned char *)v95) >> 2;
  espresso_buffer_pack_tensor_shape();
  *(void *)std::string buf = v95;
  LODWORD(v123) = 65568;
  int v24 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v93, "Unable to bind word_input_");
  if (v24)
  {
    unint64_t v42 = __cxa_allocate_exception(0x10uLL);
    int v43 = v94;
    unint64_t v44 = (void **)v93[0];
    unint64_t v45 = (const char *)espresso_get_status_string();
    int v46 = v93;
    if (v43 < 0) {
      int v46 = v44;
    }
    StringFormatter::StringFormatter((StringFormatter *)v91, "%s Error: %d, %s", (const char *)v46, v24, v45);
    MEMORY[0x210558D40](v42, v91);
    __cxa_throw(v42, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  uint64_t v92 = 0;
  memset(v91, 0, sizeof(v91));
  uint64_t v90 = 0;
  std::chrono::steady_clock::time_point v88 = 0;
  uint64_t v89 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v88, v103.__begin_, v103.__end_, v103.__end_ - v103.__begin_);
  uint64_t v109 = 1;
  uint64_t v110 = (v89 - (unsigned char *)v88) >> 2;
  espresso_buffer_pack_tensor_shape();
  *(void *)&v91[0] = v88;
  LODWORD(v92) = 65568;
  int v25 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v86, "Unable to bind input_mask_");
  if (v25)
  {
    int v47 = __cxa_allocate_exception(0x10uLL);
    int v48 = v87;
    long long v49 = (void **)v86[0];
    unint64_t v50 = (const char *)espresso_get_status_string();
    unint64_t v51 = v86;
    if (v48 < 0) {
      unint64_t v51 = v49;
    }
    StringFormatter::StringFormatter((StringFormatter *)v84, "%s Error: %d, %s", (const char *)v51, v25, v50);
    MEMORY[0x210558D40](v47, v84);
    __cxa_throw(v47, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v87 < 0) {
    operator delete(v86[0]);
  }
  uint64_t v85 = 0;
  memset(v84, 0, sizeof(v84));
  std::string::size_type v82 = 0;
  uint64_t v83 = 0;
  std::chrono::steady_clock::time_point v81 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v81, v102.__begin_, v102.__end_, v102.__end_ - v102.__begin_);
  uint64_t v107 = 1;
  uint64_t v108 = (v82 - (unsigned char *)v81) >> 2;
  espresso_buffer_pack_tensor_shape();
  *(void *)&v84[0] = v81;
  LODWORD(v85) = 65568;
  int v26 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v79, "Unable to bind input_type_ids_");
  if (v26)
  {
    long long v52 = __cxa_allocate_exception(0x10uLL);
    int v53 = v80;
    unint64_t v54 = (void **)v79[0];
    unint64_t v55 = (const char *)espresso_get_status_string();
    int v56 = v79;
    if (v53 < 0) {
      int v56 = v54;
    }
    StringFormatter::StringFormatter((StringFormatter *)v76, "%s Error: %d, %s", (const char *)v56, v26, v55);
    MEMORY[0x210558D40](v52, v76);
    __cxa_throw(v52, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v80 < 0) {
    operator delete(v79[0]);
  }
  int v27 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(v77, &byte_20D5A22AE);
  if (v27)
  {
    unint64_t v57 = __cxa_allocate_exception(0x10uLL);
    int v58 = v78;
    unint64_t v59 = (void **)v77[0];
    unint64_t v60 = (const char *)espresso_get_status_string();
    int v61 = v77;
    if (v58 < 0) {
      int v61 = v59;
    }
    StringFormatter::StringFormatter((StringFormatter *)v76, "%s Error: %d, %s", (const char *)v61, v27, v60);
    MEMORY[0x210558D40](v57, v76);
    __cxa_throw(v57, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v78 < 0) {
    operator delete(v77[0]);
  }
  int v28 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v74, "Unable to bind output_embeddings_");
  if (v28)
  {
    unint64_t v62 = __cxa_allocate_exception(0x10uLL);
    int v63 = v75;
    long long v64 = (void **)v74[0];
    unint64_t v65 = (const char *)espresso_get_status_string();
    unint64_t v66 = v74;
    if (v63 < 0) {
      unint64_t v66 = v64;
    }
    StringFormatter::StringFormatter((StringFormatter *)v105, "%s Error: %d, %s", (const char *)v66, v28, v65);
    MEMORY[0x210558D40](v62, v105);
    __cxa_throw(v62, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v75 < 0) {
    operator delete(v74[0]);
  }
  EspressoUtils::convert_espbuffer_to_2d_vector(v105, (uint64_t)v76);
  std::vector<std::vector<int>>::__vdeallocate(a3);
  *(_OWORD *)a3 = *(_OWORD *)v105;
  a3[2] = v106;
  uint64_t v106 = 0;
  memset(v105, 0, sizeof(v105));
  unint64_t v104 = v105;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  free(v76[0]);
  int v29 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(v72, &byte_20D5A22AE);
  if (v29)
  {
    unint64_t v67 = __cxa_allocate_exception(0x10uLL);
    int v68 = v73;
    uint64_t v69 = (void **)v72[0];
    std::string::size_type v70 = (const char *)espresso_get_status_string();
    BOOL v71 = v72;
    if (v68 < 0) {
      BOOL v71 = v69;
    }
    StringFormatter::StringFormatter((StringFormatter *)v105, "%s Error: %d, %s", (const char *)v71, v29, v70);
    MEMORY[0x210558D40](v67, v105);
    __cxa_throw(v67, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v73 < 0) {
    operator delete(v72[0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  float v30 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v105 = 0;
    _os_log_impl(&dword_20CD80000, v30, OS_LOG_TYPE_DEFAULT, "Espresso WordEmbedding inference end.", v105, 2u);
  }
  Diagnostics::log(5, "Espresso WordEmbedding inference end.", v31);
  if (v81)
  {
    std::string::size_type v82 = v81;
    operator delete(v81);
  }
  if (v88)
  {
    uint64_t v89 = v88;
    operator delete(v88);
  }
  if (v95)
  {
    uint64_t v96 = v95;
    operator delete(v95);
  }
  if (v102.__begin_)
  {
    v102.__end_ = v102.__begin_;
    operator delete(v102.__begin_);
  }
  if (v103.__begin_)
  {
    v103.__end_ = v103.__begin_;
    operator delete(v103.__begin_);
  }
}

void sub_20D32BBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  if (SLOBYTE(STACK[0x387]) < 0)
  {
    operator delete((void *)STACK[0x370]);
    if ((v51 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0) {
        operator delete(a15);
      }
      if (a51) {
        operator delete(a51);
      }
      unint64_t v54 = (void *)STACK[0x218];
      if (STACK[0x218])
      {
        STACK[0x220] = (unint64_t)v54;
        operator delete(v54);
      }
      unint64_t v55 = (void *)STACK[0x2F0];
      if (STACK[0x2F0])
      {
        STACK[0x2F8] = (unint64_t)v55;
        operator delete(v55);
      }
      int v56 = (void *)STACK[0x338];
      if (STACK[0x338])
      {
        STACK[0x340] = (unint64_t)v56;
        operator delete(v56);
      }
      unint64_t v57 = (void *)STACK[0x350];
      if (STACK[0x350])
      {
        STACK[0x358] = (unint64_t)v57;
        operator delete(v57);
      }
      STACK[0x3C0] = a14;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3C0]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v52);
  goto LABEL_6;
}

void WordEmbeddingModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)v3 + 8);
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string::size_type v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::vector<int>::size_type v9 = (void *)(v5 + 96);
    if (*(char *)(v5 + 119) < 0) {
      std::vector<int>::size_type v9 = (void *)*v9;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_INFO, "Orig text detected in word embedding module is: %s", buf, 0xCu);
  }
  uint64_t v10 = v5 + 96;
  if (*(char *)(v5 + 119) < 0) {
    uint64_t v10 = *(void *)(v5 + 96);
  }
  Diagnostics::log(6, "Orig text detected in word embedding module is: %s", v8, v10);
  WordEmbeddingUtils::strip_marker_from_original_text(&v11, v5 + 96);
}

void sub_20D32D008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v39 - 192) = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 192));
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void sub_20D32D048(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 137) < 0) {
    operator delete(*(void **)(v54 - 160));
  }
  if (*(char *)(v54 - 169) < 0) {
    operator delete(*(void **)(v54 - 192));
  }
  if (__p) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a54 < 0) {
    JUMPOUT(0x20D32D2E4);
  }
  JUMPOUT(0x20D32D2E8);
}

void sub_20D32D088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (*(void *)(v31 - 176) >= 0x11uLL)
  {
    uint64_t v32 = *(void *)(v31 - 192);
    if (v32) {
      MEMORY[0x2105595C0](v32, 0x1000C8077774924);
    }
  }
  if (*(char *)(v31 - 137) < 0) {
    operator delete(*(void **)(v31 - 160));
  }
  *(void *)(v31 - 160) = &a31;
  JUMPOUT(0x20D32D2F4);
}

void sub_20D32D0D0()
{
}

void sub_20D32D0D8()
{
}

void sub_20D32D0E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (__p) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a54 < 0) {
    JUMPOUT(0x20D32D2E4);
  }
  JUMPOUT(0x20D32D2E8);
}

void sub_20D32D0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (*(char *)(v40 - 169) < 0) {
    operator delete(*(void **)(v40 - 192));
  }
  *(void *)(v40 - 192) = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 192));
  JUMPOUT(0x20D32D2B8);
}

void sub_20D32D110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  *(void *)(v40 - 192) = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40 - 192);
  JUMPOUT(0x20D32D2B8);
}

void sub_20D32D118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (*(char *)(v40 - 169) < 0) {
    operator delete(*(void **)(v40 - 192));
  }
  if (*(char *)(v40 - 137) < 0) {
    JUMPOUT(0x20D32D1A8);
  }
  *(void *)(v40 - 192) = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 192));
  JUMPOUT(0x20D32D2B8);
}

void sub_20D32D128(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (*(char *)(v2 - 137) < 0) {
      operator delete(*(void **)(v2 - 160));
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x20D32D320);
}

void sub_20D32D150()
{
  __cxa_end_catch();
  std::locale::~locale((std::locale *)(v0 - 192));
  JUMPOUT(0x20D32D160);
}

void sub_20D32D170(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x20D32D320);
}

void sub_20D32D1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (*(char *)(v37 - 169) < 0) {
    operator delete(*(void **)(v37 - 192));
  }
  if (*(char *)(v37 - 225) < 0) {
    operator delete(*(void **)(v37 - 248));
  }
  if (*(char *)(v37 - 201) < 0) {
    operator delete(*(void **)(v37 - 224));
  }
  *(void *)(v37 - 192) = &a37;
  std::vector<std::pair<std::string,unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 192));
  JUMPOUT(0x20D32D2A8);
}

void WordEmbeddingUtils::strip_marker_from_original_text(std::string *this, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    *this = *(std::string *)a2;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    if (!size) {
      goto LABEL_11;
    }
    uint64_t v4 = (char *)(this->__r_.__value_.__r.__words[0] + size);
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      goto LABEL_11;
    }
    uint64_t v4 = (char *)this + size;
  }
  if (*(v4 - 1) == 10) {
    std::string::erase(this, size - 1, 0xFFFFFFFFFFFFFFFFLL);
  }
LABEL_11:
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v5, "\\u001b\\\\(.*?)=(.*?)\\\\"");
}

void sub_20D32D740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::locale a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (*(char *)(v42 + 23) < 0) {
    operator delete(*(void **)v42);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

uint64_t *std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 32;
      long long v6 = *(_OWORD *)(v3 - 32);
      *(void *)(v4 - 16) = *(void *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v6;
      *(void *)(v3 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 32) = 0;
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      v4 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  *uint64_t result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(void *__dst, uint64_t a2)
{
  *std::string __dst = 0;
  uint64_t v4 = *(unsigned char **)a2;
  uint64_t v5 = *(unsigned char **)(a2 + 8);
  __dst[2] = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x11) {
    operator new[]();
  }
  if (v5 != v4) {
    memmove(__dst, v4, v5 - v4);
  }
  std::__sort<std::__less<char,char> &,char *>();
  return __dst;
}

void boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>(int a1, int a2, void *__src)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  size_t v3 = __src[2];
  size_t __n = v3;
  __srca[0] = 0;
  if (v3 < 0x11)
  {
    memcpy(__srca, __src, v3);
    size_t v28 = __n;
    v27[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v27, __srca, __n);
      size_t v7 = v28;
      __dst[0] = 0;
      if (v28 <= 0x10)
      {
        memcpy(__dst, v27, v28);
        int v8 = 0;
        size_t v22 = v7;
        v21[0] = 0;
        if (v7 < 0x11)
        {
          memcpy(v21, __dst, v7);
          int v23 = 0;
          size_t v16 = v22;
          v15[0] = 0;
          if (v22 < 0x11)
          {
            memcpy(v15, v21, v22);
            int v17 = 0;
            size_t v10 = v16;
            v9[0] = 0;
            if (v16 < 0x11)
            {
              memcpy(v9, v15, v16);
              int v11 = 0;
              size_t v13 = v10;
              v12[0] = 0;
              if (v10 < 0x11)
              {
                memcpy(v12, v9, v10);
                int v14 = 0;
                size_t v19 = v13;
                v18[0] = 0;
                if (v13 < 0x11)
                {
                  memcpy(v18, v12, v13);
                  int v20 = 0;
                  size_t v25 = v19;
                  v24[0] = 0;
                  if (v19 < 0x11)
                  {
                    memcpy(v24, v18, v19);
                    int v26 = 0;
                    size_t v28 = v25;
                    v27[0] = 0;
                    if (v25 < 0x11)
                    {
                      memcpy(v27, v24, v25);
                      int v29 = 0;
                      operator new();
                    }
                    operator new[]();
                  }
                  operator new[]();
                }
                operator new[]();
              }
              operator new[]();
            }
            operator new[]();
          }
          operator new[]();
        }
        operator new[]();
      }
      operator new[]();
    }
    operator new[]();
  }
  operator new[]();
}

void sub_20D32E1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MEMORY[0x2105595E0](v78, 0x1012C405C87E9CELL);
  uint64_t v81 = *(void *)(v79 - 184);
  if (v81) {
    MEMORY[0x2105595C0](v81, 0x1000C8077774924);
  }
  if (v77 >= 0x11 && STACK[0x2A8]) {
    MEMORY[0x2105595C0](STACK[0x2A8], 0x1000C8077774924);
  }
  if (v76 >= 0x11 && STACK[0x238]) {
    MEMORY[0x2105595C0](STACK[0x238], 0x1000C8077774924);
  }
  if (v75 >= 0x11 && a61) {
    MEMORY[0x2105595C0](a61, 0x1000C8077774924);
  }
  if (v74 >= 0x11 && a51) {
    MEMORY[0x2105595C0](a51, 0x1000C8077774924);
  }
  if (v73 >= 0x11 && a71) {
    MEMORY[0x2105595C0](a71, 0x1000C8077774924);
  }
  if (v72 >= 0x11 && STACK[0x288]) {
    MEMORY[0x2105595C0](STACK[0x288], 0x1000C8077774924);
  }
  if (v71 >= 0x11 && a47) {
    MEMORY[0x2105595C0](a47, 0x1000C8077774924);
  }
  if (a10 >= 0x11)
  {
    if (a44) {
      MEMORY[0x2105595C0](a44, 0x1000C8077774924);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  uint64_t v4 = *a2;
  if (*a2)
  {
    *(void *)a1 = v4;
    if (v4)
    {
      long long v5 = *(_OWORD *)(a2 + 1);
      *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = a2[3];
      *(_OWORD *)(a1 + 8) = v5;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, void))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 8, 0);
    }
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  *(unsigned char *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((unsigned char *)a2 + 64);
  return a1;
}

uint64_t *boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      size_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(void *)a1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))((*(void *)a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 8, *(void *)(a1 + 48), v2);
    uint64_t v2 = *(void *)(a1 + 56);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t result = v4;
  }
  BOOL v5 = result == v2 && v4 == v2;
  if (v5 && *(void *)(a1 + 40) == v2) {
    *(unsigned char *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 1;
  }
  *(void *)(a1 + 32) = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = result;
  *(void *)(a1 + 48) = v4;
  return result;
}

char *boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>,boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::invoke(uint64_t a1, char *a2, char *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  BOOL v5 = *(_DWORD **)a1;
  size_t v6 = *(void *)(*(void *)a1 + 16);
  unint64_t v10 = v6;
  v9[0] = 0;
  if (v6 >= 0x11) {
    operator new[]();
  }
  memcpy(v9, v5, v6);
  while (a2 != a3)
  {
    if (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v9, *a2)) {
      goto LABEL_8;
    }
    ++a2;
  }
  a2 = a3;
LABEL_8:
  if (v10 >= 0x11 && v9[0]) {
    MEMORY[0x2105595C0](v9[0], 0x1000C8077774924);
  }
  if (a2 == a3) {
    return a3;
  }
  if (!v5[6])
  {
    size_t v7 = a2;
    do
    {
      if (!boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v5, *v7)) {
        break;
      }
      ++v7;
    }
    while (v7 != a3);
  }
  return a2;
}

BOOL boost::algorithm::detail::is_any_ofF<char>::operator()<char>(void *a1, int a2)
{
  unint64_t v2 = a1[2];
  if (v2 >= 0x11)
  {
    a1 = (void *)*a1;
    size_t v3 = (void *)((char *)a1 + v2);
  }
  else
  {
    size_t v3 = (void *)((char *)a1 + v2);
    if (!v2) {
      return a1 != v3 && *(char *)a1 <= a2;
    }
  }
  do
  {
    uint64_t v4 = (char *)a1 + (v2 >> 1);
    int v6 = *v4;
    BOOL v5 = v4 + 1;
    unint64_t v7 = v2 >> 1;
    v2 += ~(v2 >> 1);
    if (v6 < a2) {
      a1 = v5;
    }
    else {
      unint64_t v2 = v7;
    }
  }
  while (v2);
  return a1 != v3 && *(char *)a1 <= a2;
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      BOOL v5 = *(void **)a2;
      if (*(void *)a2)
      {
        if (v5[2] >= 0x11uLL)
        {
          if (*v5) {
            MEMORY[0x2105595C0](*v5, 0x1000C8077774924);
          }
        }
        uint64_t result = MEMORY[0x2105595E0](v5, 0x1012C405C87E9CELL);
      }
      goto LABEL_12;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000020D6DCBA1 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x800000020D6DCBA1 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_12:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_20D32E8BC(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, const char *a2)
{
  size_t v3 = std::regex_traits<char>::regex_traits(a1);
  v3[2].__ct_ = 0;
  *(_OWORD *)&v3[1].__col_ = 0u;
  *(_OWORD *)&v3[1].__loc_.__locale_ = 0u;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_20D32E964(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::basic_regex<char,std::regex_traits<char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (std::locale *)**a1;
  if (v2)
  {
    uint64_t v4 = (std::locale *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        locale = (std::__shared_weak_count *)v4[-2].__locale_;
        if (locale) {
          std::__shared_weak_count::__release_shared[abi:ne180100](locale);
        }
        v4 -= 8;
        std::locale::~locale(v4);
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }
  std::locale::~locale(this);
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = match_default;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = (char **)&this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  memset(__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (std::sub_match<const char *> *)__a.__i_, (std::sub_match<const char *> *)__b.__i_, __p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(p_match, (uint64_t)__a.__i_, (char *)__b.__i_, (uint64_t *)__p, 0);
  if (__p[0].__begin_) {
    operator delete(__p[0].__begin_);
  }
  return this;
}

void sub_20D32EB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v12 = *v10;
  if (*v10)
  {
    *(void *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  std::vector<std::string>::pointer end = p_match->__matches_.__end_;
  uint64_t v9 = &__x->__match_;
  std::vector<std::ssub_match>::pointer v7 = __x->__match_.__matches_.__begin_;
  int v8 = v9->__matches_.__end_;
  BOOL v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7) {
    return this->__begin_.__i_ == __x->__begin_.__i_
  }
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  int i = (int)p_match[-1].__position_start_.__i_;
  unsigned __int32 flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin) {
    p_unmatched = &p_match->__unmatched_;
  }
  else {
    p_unmatched = begin;
  }
  std::vector<std::ssub_match>::pointer v7 = (std::sub_match<const char *> *)p_unmatched->second.__i_;
  if ((std::sub_match<const char *> *)p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    uint64_t v9 = (std::sub_match<const char *> *)this->__end_.__i_;
    pregex = this->__pregex_;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    char v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v21 = 0;
    char v22 = 0;
    uint64_t v23 = 0;
    memset(__p, 0, 41);
    char v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, __p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)p_match, (uint64_t)v7, (char *)v9, (uint64_t *)__p, (flags & 0x800) != 0);
    if (__p[0].__begin_) {
      operator delete(__p[0].__begin_);
    }
    if ((v10 & 1) == 0)
    {
      std::vector<std::ssub_match>::pointer begin = p_match->__matches_.__begin_;
LABEL_14:
      if (begin)
      {
        this->__match_.__matches_.__end_ = begin;
        operator delete(begin);
        p_match->__matches_.__begin_ = 0;
        p_match->__matches_.__end_ = 0;
        p_match->__matches_.__end_cap_.__value_ = 0;
      }
      this->__match_.__ready_ = 0;
      *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
      *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                   + 1) = 0u;
      this->__match_.__prefix_.first.__i_ = 0;
      this->__match_.__prefix_.second.__i_ = 0;
      this->__match_.__prefix_.matched = 0;
      this->__match_.__suffix_.first.__i_ = 0;
      this->__match_.__suffix_.second.__i_ = 0;
      this->__match_.__suffix_.matched = 0;
      this->__match_.__position_start_.__i_ = 0;
      return this;
    }
    return this;
  }
  uint64_t v11 = (std::sub_match<const char *> *)this->__end_.__i_;
  if (v11 == v7) {
    goto LABEL_14;
  }
  uint64_t v12 = this->__pregex_;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  memset(__p, 0, 41);
  char v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v12, v7, v11, __p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)p_match, (uint64_t)v7, (char *)v11, (uint64_t *)__p, 1);
  if (__p[0].__begin_) {
    operator delete(__p[0].__begin_);
  }
  if ((v13 & 1) == 0)
  {
    std::vector<std::ssub_match>::pointer v7 = (std::sub_match<const char *> *)((char *)v7 + 1);
    unsigned __int32 flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_20D32ED7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  uint64_t v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0) {
      goto LABEL_18;
    }
    int v18 = v9 | 0x80;
    uint64_t v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        int v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        std::vector<std::csub_match>::pointer begin = this->__begin_;
        std::vector<std::csub_match>::pointer end = this->__end_;
        if (v20) {
          goto LABEL_8;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      uint64_t result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
LABEL_8:
  if (end == begin) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = begin;
  }
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(char **a1, uint64_t a2, char *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  char v13 = *a1;
  uint64_t v12 = a1[1];
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a1) >> 3);
  unint64_t v15 = v11 - v14;
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      uint64_t v12 = &v13[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v12;
    }
  }
  else
  {
    uint64_t v16 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v12) >> 3) >= v15)
    {
      int v29 = &v12[24 * v15];
      uint64_t v30 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((v12 - *a1) >> 3);
      do
      {
        *(void *)uint64_t v12 = 0;
        *((void *)v12 + 1) = 0;
        v12[16] = 0;
        v12 += 24;
        v30 -= 24;
      }
      while (v30);
      a1[1] = v29;
      uint64_t v12 = v29;
    }
    else
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= v11) {
        uint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v18;
      }
      int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v19);
      char v22 = &v20[24 * v14];
      uint64_t v12 = &v20[24 * v11];
      uint64_t v23 = v22;
      uint64_t v24 = 24 * v11 - 24 * v14;
      do
      {
        *(void *)uint64_t v23 = 0;
        *((void *)v23 + 1) = 0;
        v23[16] = 0;
        v23 += 24;
        v24 -= 24;
      }
      while (v24);
      size_t v25 = &v20[24 * v21];
      int v27 = *a1;
      int v26 = a1[1];
      if (v26 != *a1)
      {
        do
        {
          long long v28 = *(_OWORD *)(v26 - 24);
          *((void *)v22 - 1) = *((void *)v26 - 1);
          *(_OWORD *)(v22 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v28;
          v22 -= 24;
          v26 -= 24;
        }
        while (v26 != v27);
        int v26 = *a1;
      }
      *a1 = v22;
      a1[1] = v12;
      a1[2] = v25;
      if (v26)
      {
        operator delete(v26);
        uint64_t v12 = a1[1];
      }
    }
  }
  uint64_t v31 = *a1;
  if (v12 != *a1)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    uint64_t v35 = *a4;
    uint64_t v34 = a4[1];
    do
    {
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3);
      uint64_t v37 = (void *)(v35 + v32);
      if (v36 <= v33) {
        int v38 = a4 + 3;
      }
      else {
        int v38 = v37;
      }
      *(void *)&v31[v32] = a2 + *v38 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v33) {
        uint64_t v39 = a4 + 3;
      }
      else {
        uint64_t v39 = (uint64_t *)(*a4 + v32);
      }
      *(void *)&(*a1)[v32 + 8] = a2 + v39[1] - v10;
      uint64_t v35 = *a4;
      uint64_t v34 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v34 - *a4) >> 3) <= v33) {
        uint64_t v40 = a4 + 3;
      }
      else {
        uint64_t v40 = (uint64_t *)(*a4 + v32);
      }
      char v41 = *((unsigned char *)v40 + 16);
      uint64_t v31 = *a1;
      uint64_t v42 = a1[1];
      (*a1)[v32 + 16] = v41;
      ++v33;
      v32 += 24;
    }
    while (v33 < 0xAAAAAAAAAAAAAAABLL * ((v42 - v31) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((unsigned char *)a1 + 40) = 0;
  int v43 = (char *)(a2 + a4[6] - v10);
  a1[6] = v43;
  a1[7] = (char *)(a2 + a4[7] - v10);
  *((unsigned char *)a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((unsigned char *)a4 + 64);
  a1[9] = (char *)(a2 + a4[9] - v10);
  a1[10] = (char *)(a2 + a4[10] - v10);
  *((unsigned char *)a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    a1[13] = v43;
  }
  *((unsigned char *)a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7 = a5;
  int v9 = a3;
  uint64_t v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
  {
    uint64_t v164 = (const char *)(a3 - a2);
    __int16 v163 = a5;
    if (*(_DWORD *)(a1 + 28))
    {
      v165[0] = 0;
      v165[1] = 0;
      *(void *)&long long v166 = 0;
      uint64_t v12 = *(void *)(a1 + 40);
      if (v12)
      {
        __x.first = a3;
        __x.second = a3;
        __x.matched = 0;
        *(_DWORD *)std::string::size_type v168 = 0;
        memset(&v168[8], 0, 48);
        *(_OWORD *)std::string __p = 0u;
        memset(v170, 0, 21);
        v165[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v165, (uint64_t)v168);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (*(void *)&v168[32]) {
          operator delete(*(void **)&v168[32]);
        }
        uint64_t v150 = a4;
        char v13 = v165[1];
        *((_DWORD *)v165[1] - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
        *(v13 - 11) = v10;
        *(v13 - 10) = v10;
        uint64_t v160 = v9;
        *(v13 - 9) = v9;
        std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v165[1] - 40), *(unsigned int *)(a1 + 32));
        long long v156 = 0;
        std::string v158 = 0;
        uint64_t v152 = 0;
        uint64_t v153 = 0;
        uint64_t v154 = 0;
        char v155 = 0;
        unint64_t v14 = 0;
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v17 = v165[1];
        *((void *)v165[1] - 2) = v12;
        *(v17 - 2) = v7;
        *((unsigned char *)v17 - std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = a6;
        do
        {
          BOOL v18 = (++v16 & 0xFFF) != 0 || (int)(v16 >> 12) < (int)v164;
          if (!v18) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          int v20 = v17 - 4;
          uint64_t v19 = *((void *)v17 - 2);
          uint64_t v21 = v17 - 24;
          if (v19) {
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v19 + 16))(v19, v17 - 24);
          }
          switch(*(_DWORD *)v21)
          {
            case 0xFFFFFC18:
              char v22 = (const char *)*((void *)v17 - 10);
              if ((v163 & 0x20) != 0 && v22 == v10 || (v163 & 0x1000) != 0 && v22 != v160) {
                goto LABEL_21;
              }
              if ((v15 & ((uint64_t)v14 >= (uint64_t)&v22[-*((void *)v17 - 11)])) != 0)
              {
                int v29 = v158;
                uint64_t v30 = v154;
              }
              else
              {
                uint64_t v32 = (long long *)*((void *)v17 - 8);
                uint64_t v31 = (long long *)*((void *)v17 - 7);
                unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                uint64_t v34 = v158;
                std::string::size_type v149 = &v22[-*((void *)v17 - 11)];
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - (uint64_t)v155) >> 3) >= v33)
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((v158 - v155) >> 3) >= v33)
                  {
                    if (v32 == v31)
                    {
                      int v46 = v155;
                      int v47 = v155;
                    }
                    else
                    {
                      int v46 = v155;
                      int v47 = v155;
                      do
                      {
                        *(_OWORD *)int v47 = *v32;
                        v47[16] = *((unsigned char *)v32 + 16);
                        v47 += 24;
                        uint64_t v32 = (long long *)((char *)v32 + 24);
                      }
                      while (v32 != v31);
                    }
                    int64_t v45 = v47 - v46;
                    uint64_t v34 = v46;
                  }
                  else
                  {
                    char v41 = (long long *)((char *)v32 + 8 * ((v158 - v155) >> 3));
                    if (v158 != v155)
                    {
                      uint64_t v42 = v155;
                      do
                      {
                        *(_OWORD *)uint64_t v42 = *v32;
                        v42[16] = *((unsigned char *)v32 + 16);
                        uint64_t v32 = (long long *)((char *)v32 + 24);
                        v42 += 24;
                      }
                      while (v32 != v41);
                    }
                    int v43 = v158;
                    while (v41 != v31)
                    {
                      long long v44 = *v41;
                      *((void *)v43 + 2) = *((void *)v41 + 2);
                      *(_OWORD *)int v43 = v44;
                      v43 += 24;
                      char v41 = (long long *)((char *)v41 + 24);
                    }
                    int64_t v45 = v43 - v158;
                  }
                }
                else
                {
                  if (v155)
                  {
                    operator delete(v155);
                    uint64_t v153 = 0;
                  }
                  if (v33 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_220;
                  }
                  unint64_t v35 = 0x5555555555555556 * (v153 >> 3);
                  if (v35 <= v33) {
                    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                  }
                  unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v153 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v35;
                  if (v36 > 0xAAAAAAAAAAAAAAALL) {
LABEL_220:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v36);
                  uint64_t v34 = v37;
                  uint64_t v39 = v37;
                  while (v32 != v31)
                  {
                    long long v40 = *v32;
                    *((void *)v39 + 2) = *((void *)v32 + 2);
                    *(_OWORD *)uint64_t v39 = v40;
                    v39 += 24;
                    uint64_t v32 = (long long *)((char *)v32 + 24);
                  }
                  uint64_t v153 = (uint64_t)&v37[24 * v38];
                  int64_t v45 = v39 - v37;
                  char v155 = v37;
                }
                long long v49 = (char *)*((void *)v17 - 5);
                int v48 = (char *)*((void *)v17 - 4);
                unint64_t v50 = (v48 - v49) >> 4;
                if (v50 <= (v152 - (uint64_t)v156) >> 4)
                {
                  unint64_t v57 = (v154 - v156) >> 4;
                  if (v57 >= v50)
                  {
                    if (v49 == v48)
                    {
                      int v63 = v156;
                      unint64_t v62 = v156;
                      unint64_t v14 = v149;
                    }
                    else
                    {
                      unint64_t v62 = v156;
                      unint64_t v14 = v149;
                      do
                      {
                        *(void *)unint64_t v62 = *(void *)v49;
                        *((void *)v62 + 1) = *((void *)v49 + 1);
                        v62 += 16;
                        v49 += 16;
                      }
                      while (v49 != v48);
                      int v63 = v156;
                    }
                    long long v64 = (char *)(v62 - v63);
                    int v53 = v63;
                  }
                  else
                  {
                    int v58 = &v49[16 * v57];
                    if (v154 != v156)
                    {
                      unint64_t v59 = v156;
                      do
                      {
                        *(void *)unint64_t v59 = *(void *)v49;
                        *((void *)v59 + 1) = *((void *)v49 + 1);
                        v49 += 16;
                        v59 += 16;
                      }
                      while (v49 != v58);
                    }
                    unint64_t v14 = v149;
                    if (v58 == v48)
                    {
                      int v53 = v154;
                      unint64_t v60 = v154;
                    }
                    else
                    {
                      int v53 = v154;
                      unint64_t v60 = v154;
                      do
                      {
                        long long v61 = *(_OWORD *)v58;
                        v58 += 16;
                        *(_OWORD *)unint64_t v60 = v61;
                        v60 += 16;
                      }
                      while (v58 != v48);
                    }
                    long long v64 = (char *)(v60 - v53);
                  }
                }
                else
                {
                  if (v156)
                  {
                    operator delete(v156);
                    uint64_t v152 = 0;
                  }
                  if (v48 - v49 < 0) {
                    goto LABEL_219;
                  }
                  uint64_t v51 = v152 >> 3;
                  if (v152 >> 3 <= v50) {
                    uint64_t v51 = (v48 - v49) >> 4;
                  }
                  unint64_t v52 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v51;
                  if (v52 >> 60) {
LABEL_219:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v52);
                  unint64_t v55 = v53;
                  if (v49 == v48)
                  {
                    unint64_t v14 = v149;
                  }
                  else
                  {
                    unint64_t v14 = v149;
                    do
                    {
                      long long v56 = *(_OWORD *)v49;
                      v49 += 16;
                      *(_OWORD *)unint64_t v55 = v56;
                      v55 += 16;
                    }
                    while (v49 != v48);
                  }
                  uint64_t v152 = (uint64_t)&v53[16 * v54];
                  long long v64 = (char *)(v55 - v53);
                  long long v156 = v53;
                }
                int v29 = &v34[v45];
                uint64_t v30 = &v64[(void)v53];
              }
              std::string v158 = v29;
              unint64_t v65 = v165[1];
              uint64_t v154 = v30;
              if (v14 == v164)
              {
                unint64_t v66 = v165[0];
                while (v65 != v66)
                {
                  v65 -= 12;
                  std::allocator<std::__state<char>>::destroy[abi:ne180100](v65);
                }
                v165[1] = v66;
                char v15 = 1;
                unint64_t v14 = v164;
              }
              else
              {
                unint64_t v67 = (char *)v165[1] - 96;
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)v165[1] - 12);
                v165[1] = v67;
                char v15 = 1;
              }
              break;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              break;
            case 0xFFFFFC1F:
LABEL_21:
              uint64_t v23 = (char *)v165[1] - 96;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)v165[1] - 12);
              v165[1] = v23;
              break;
            case 0xFFFFFC20:
              long long v24 = *((_OWORD *)v17 - 5);
              *(_OWORD *)std::string::size_type v168 = *v21;
              *(_OWORD *)&v168[16] = v24;
              memset(&v168[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v168[32], *((long long **)v17 - 8), *((long long **)v17 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v17 - 7) - *((void *)v17 - 8)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v170[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v17 - 5), *((long long **)v17 - 4), (uint64_t)(*((void *)v17 - 4) - *((void *)v17 - 5)) >> 4);
              uint64_t v25 = *v20;
              *(void *)((char *)&v170[1] + 5) = *(void *)((char *)v17 - 11);
              v170[1] = v25;
              (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*v20 + 24))(*v20, 1, v17 - 24);
              (*(void (**)(void, void, unsigned char *))(*(void *)v170[1] + 24))(v170[1], 0, v168);
              int v26 = (char *)v165[1];
              if (v165[1] >= (void *)v166)
              {
                v165[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v165, (uint64_t)v168);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              else
              {
                long long v27 = *(_OWORD *)&v168[16];
                *(_OWORD *)v165[1] = *(_OWORD *)v168;
                *((_OWORD *)v26 + 1) = v27;
                *((void *)v26 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
                *((void *)v26 + 5) = 0;
                *((void *)v26 + 6) = 0;
                *((void *)v26 + 7) = 0;
                *((_OWORD *)v26 + 2) = *(_OWORD *)&v168[32];
                *((void *)v26 + 6) = *(void *)&v168[48];
                memset(&v168[32], 0, 24);
                *((void *)v26 + 8) = 0;
                *((void *)v26 + 9) = 0;
                *(_OWORD *)(v26 + 56) = *(_OWORD *)__p;
                *((void *)v26 + 9) = v170[0];
                __p[0] = 0;
                __p[1] = 0;
                v170[0] = 0;
                uint64_t v28 = v170[1];
                *(void *)(v26 + 85) = *(void *)((char *)&v170[1] + 5);
                *((void *)v26 + 10) = v28;
                v165[1] = v26 + 96;
              }
              if (*(void *)&v168[32])
              {
                *(void *)&v168[40] = *(void *)&v168[32];
                operator delete(*(void **)&v168[32]);
              }
              break;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          unint64_t v17 = v165[1];
        }
        while (v165[0] != v165[1]);
        if (v15)
        {
          uint64_t v69 = *v150;
          *(void *)uint64_t v69 = v10;
          *(void *)(v69 + 8) = &v14[(void)v10];
          *(unsigned char *)(v69 + 16) = 1;
          std::string::size_type v70 = v155;
          if (v158 != v155)
          {
            unint64_t v71 = v155 + 16;
            unsigned int v72 = 1;
            do
            {
              uint64_t v73 = v69 + 24 * v72;
              *(_OWORD *)uint64_t v73 = *((_OWORD *)v71 - 1);
              char v74 = *v71;
              v71 += 24;
              *(unsigned char *)(v73 + 16) = v74;
              BOOL v18 = 0xAAAAAAAAAAAAAAABLL * ((v158 - v155) >> 3) > v72++;
            }
            while (v18);
          }
          uint64_t v75 = 1;
        }
        else
        {
          uint64_t v75 = 0;
          std::string::size_type v70 = v155;
        }
        if (v156) {
          operator delete(v156);
        }
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        uint64_t v75 = 0;
      }
      *(void *)std::string::size_type v168 = v165;
      std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
    }
    else
    {
      long long v166 = 0u;
      int64x2_t v167 = 0u;
      *(_OWORD *)std::string::size_type v165 = 0u;
      uint64_t v75 = *(void *)(a1 + 40);
      if (v75)
      {
        *(_DWORD *)std::string::size_type v168 = 0;
        memset(&v168[8], 0, 48);
        *(_OWORD *)std::string __p = 0uLL;
        memset(v170, 0, 21);
        std::deque<std::__state<char>>::push_back(v165, (uint64_t)v168);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (*(void *)&v168[32]) {
          operator delete(*(void **)&v168[32]);
        }
        std::string v151 = a4;
        unint64_t v76 = v165[1];
        unint64_t v77 = v167.i64[1] + v167.i64[0] - 1;
        unint64_t v78 = v77 / 0x2A;
        uint64_t v79 = *((void *)v165[1] + v77 / 0x2A);
        unint64_t v80 = 3 * (v77 % 0x2A);
        uint64_t v81 = v79 + 32 * v80;
        *(_DWORD *)uint64_t v81 = 0;
        *(void *)(v81 + 8) = v10;
        *(void *)(v76[v78] + 32 * v80 + 16) = v10;
        *(void *)(v76[v78] + 32 * v80 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v9;
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v76[v78] + 32 * v80 + 56), *(unsigned int *)(a1 + 32));
        char v159 = 0;
        unsigned int v82 = 0;
        uint64_t v83 = v167.i64[1];
        std::string::size_type v84 = v165[1];
        unint64_t v85 = v167.i64[1] + v167.i64[0] - 1;
        unint64_t v86 = v85 / 0x2A;
        unint64_t v87 = 3 * (v85 % 0x2A);
        *(void *)(*((void *)v165[1] + v86) + 32 * v87 + 80) = v75;
        uint64_t v88 = v84[v86] + 32 * v87;
        *(_DWORD *)(v88 + 88) = v7;
        *(unsigned char *)(v88 + 92) = a6;
        std::string::size_type v157 = 0;
        while (2)
        {
          if ((++v82 & 0xFFF) == 0 && (int)(v82 >> 12) >= (int)v164) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          unint64_t v90 = v83 + v167.i64[0] - 1;
          uint64_t v91 = *((void *)v165[1] + v90 / 0x2A);
          unint64_t v92 = v90 % 0x2A;
          uint64_t v93 = v91 + 96 * (v90 % 0x2A);
          std::string v95 = (void *)(v93 + 80);
          uint64_t v94 = *(void *)(v93 + 80);
          if (v94) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v94 + 16))(v94, v91 + 96 * v92);
          }
          switch(*(_DWORD *)v93)
          {
            case 0xFFFFFC18:
              uint64_t v96 = *(const char **)(v91 + 96 * v92 + 16);
              BOOL v97 = (v7 & 0x1000) == 0 || v96 == v9;
              char v98 = v97;
              BOOL v99 = v96 != v10 || (v7 & 0x20) == 0;
              if (!v99 || (v98 & 1) == 0) {
                goto LABEL_203;
              }
              uint64_t v100 = (uint64_t)&v96[-*(void *)(v91 + 96 * v92 + 8)];
              char v101 = v157;
              if ((v159 & ((uint64_t)v157 >= v100)) == 0) {
                char v101 = (char *)v100;
              }
              if (v101 != v164)
              {
                std::string::size_type v157 = v101;
                std::deque<std::__state<char>>::pop_back(v165);
                char v159 = 1;
                goto LABEL_204;
              }
              std::vector<int> v102 = (void **)v165[1];
              std::vector<int> v103 = (unsigned char *)v166;
              if ((void *)v166 == v165[1])
              {
                std::vector<int> v103 = v165[1];
              }
              else
              {
                unint64_t v104 = v10;
                unint64_t v105 = (char *)v165[1] + 8 * (v167.i64[0] / 0x2AuLL);
                uint64_t v106 = (void *)(*v105 + 96 * (v167.i64[0] % 0x2AuLL));
                unint64_t v107 = *((void *)v165[1] + (v167.i64[1] + v167.i64[0]) / 0x2AuLL)
                     + 96 * ((v167.i64[1] + v167.i64[0]) % 0x2AuLL);
                if (v106 != (void *)v107)
                {
                  do
                  {
                    std::allocator<std::__state<char>>::destroy[abi:ne180100](v106);
                    v106 += 12;
                    if ((void *)((char *)v106 - *v105) == (void *)4032)
                    {
                      uint64_t v108 = (void *)v105[1];
                      ++v105;
                      uint64_t v106 = v108;
                    }
                  }
                  while (v106 != (void *)v107);
                  std::vector<int> v102 = (void **)v165[1];
                  std::vector<int> v103 = (unsigned char *)v166;
                }
                uint64_t v10 = v104;
              }
              v167.i64[1] = 0;
              unint64_t v139 = v103 - (unsigned char *)v102;
              if (v139 >= 0x11)
              {
                do
                {
                  operator delete(*v102);
                  std::vector<int> v102 = (void **)((char *)v165[1] + 8);
                  v165[1] = v102;
                  unint64_t v139 = v166 - (void)v102;
                }
                while ((void)v166 - (void)v102 > 0x10uLL);
              }
              if (v139 >> 3 == 1)
              {
                uint64_t v140 = 21;
              }
              else
              {
                if (v139 >> 3 != 2) {
                  goto LABEL_191;
                }
                uint64_t v140 = 42;
              }
              v167.i64[0] = v140;
LABEL_191:
              char v159 = 1;
              std::string::size_type v157 = (char *)v164;
LABEL_204:
              uint64_t v83 = v167.i64[1];
              if (v167.i64[1]) {
                continue;
              }
              if (v159)
              {
                uint64_t v148 = *v151;
                *(void *)uint64_t v148 = v10;
                *(void *)(v148 + 8) = &v157[(void)v10];
                uint64_t v75 = 1;
                *(unsigned char *)(v148 + 16) = 1;
              }
              else
              {
                uint64_t v75 = 0;
              }
              break;
            case 0xFFFFFC19:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_204;
            case 0xFFFFFC1D:
              unint64_t v109 = v167.i64[0];
              uint64_t v110 = (char *)v165[1];
              uint64_t v111 = (char *)v166;
              if (!v167.i64[0])
              {
                unint64_t v114 = (uint64_t)(v166 - (unint64_t)v165[1]) >> 3;
                uint64_t v115 = 42 * v114 - 1;
                if ((void *)v166 == v165[1]) {
                  uint64_t v115 = 0;
                }
                if ((unint64_t)(v115 - v167.i64[1]) < 0x2A)
                {
                  if (v114 >= (uint64_t)(*((void *)&v166 + 1) - (unint64_t)v165[0]) >> 3)
                  {
                    if (*((void **)&v166 + 1) == v165[0]) {
                      unint64_t v116 = 1;
                    }
                    else {
                      unint64_t v116 = (uint64_t)(*((void *)&v166 + 1) - (unint64_t)v165[0]) >> 2;
                    }
                    *(void *)&v168[32] = (char *)&v166 + 8;
                    *(void *)std::string::size_type v168 = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v116);
                    *(void *)&v168[8] = *(void *)v168;
                    *(void *)&v168[16] = *(void *)v168;
                    *(void *)&v168[24] = *(void *)v168 + 8 * v117;
                    std::string::size_type v162 = v10;
                    __x.first = (const char *)operator new(0xFC0uLL);
                    std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(v168, &__x);
                    long long v118 = (uint64_t *)v165[1];
                    long long v119 = *(char **)&v168[16];
                    for (int i = v9; v118 != (uint64_t *)v166; *(void *)&v168[16] += 8)
                    {
                      if (v119 == *(char **)&v168[24])
                      {
                        long long v120 = *(char **)&v168[8];
                        long long v121 = *(void **)v168;
                        if (*(void *)&v168[8] <= *(void *)v168)
                        {
                          if (v119 == *(char **)v168) {
                            unint64_t v128 = 1;
                          }
                          else {
                            unint64_t v128 = (uint64_t)&v119[-*(void *)v168] >> 2;
                          }
                          int v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v128);
                          int v131 = &v129[8 * (v128 >> 2)];
                          uint64_t v132 = v119 - v120;
                          BOOL v97 = v119 == v120;
                          long long v119 = v131;
                          int v9 = i;
                          if (!v97)
                          {
                            long long v119 = &v131[v132 & 0xFFFFFFFFFFFFFFF8];
                            uint64_t v133 = 8 * (v132 >> 3);
                            int v134 = v131;
                            do
                            {
                              uint64_t v135 = *(void *)v120;
                              v120 += 8;
                              *(void *)int v134 = v135;
                              v134 += 8;
                              v133 -= 8;
                            }
                            while (v133);
                          }
                          *(void *)std::string::size_type v168 = v129;
                          *(void *)&v168[8] = v131;
                          *(void *)&v168[16] = v119;
                          *(void *)&v168[24] = &v129[8 * v130];
                          if (v121) {
                            operator delete(v121);
                          }
                        }
                        else
                        {
                          uint64_t v122 = (uint64_t)(*(void *)&v168[8] - *(void *)v168) >> 3;
                          if (v122 >= -1) {
                            uint64_t v123 = v122 + 1;
                          }
                          else {
                            uint64_t v123 = v122 + 2;
                          }
                          uint64_t v124 = *(void *)&v168[8] - 8 * (v123 >> 1);
                          size_t v125 = (size_t)&v119[-*(void *)&v168[8]];
                          if (v119 != *(char **)&v168[8])
                          {
                            uint64_t v126 = (void *)(*(void *)&v168[8] - 8 * (v123 >> 1));
                            memmove(v126, *(const void **)&v168[8], v125);
                            uint64_t v124 = (uint64_t)v126;
                            long long v119 = v120;
                          }
                          int v127 = &v119[-8 * (v123 >> 1)];
                          long long v119 = (char *)(v124 + v125);
                          *(void *)&v168[8] = v127;
                          *(void *)&v168[16] = v124 + v125;
                          int v9 = i;
                        }
                      }
                      uint64_t v136 = *v118++;
                      *(void *)long long v119 = v136;
                      long long v119 = (char *)(*(void *)&v168[16] + 8);
                    }
                    uint64_t v137 = v165[0];
                    *(_OWORD *)std::string::size_type v165 = *(_OWORD *)v168;
                    *(void *)&long long v166 = v119;
                    *((void *)&v166 + 1) = *(void *)&v168[24];
                    uint64_t v138 = 21;
                    if (&v119[-*(void *)&v168[8]] != (char *)8) {
                      uint64_t v138 = v167.i64[0] + 42;
                    }
                    v167.i64[0] = v138;
                    uint64_t v10 = v162;
                    if (v137) {
                      operator delete(v137);
                    }
                    LOWORD(v7) = v163;
                  }
                  else
                  {
                    if (v165[1] == v165[0])
                    {
                      *(void *)std::string::size_type v168 = operator new(0xFC0uLL);
                      std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(v165, v168);
                      *(void *)std::string::size_type v168 = *(void *)(v166 - 8);
                      *(void *)&long long v166 = v166 - 8;
                    }
                    else
                    {
                      *(void *)std::string::size_type v168 = operator new(0xFC0uLL);
                    }
                    std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)v165, v168);
                    uint64_t v141 = 21;
                    if ((void)v166 - (unint64_t)v165[1] != 8) {
                      uint64_t v141 = v167.i64[0] + 42;
                    }
                    v167.i64[0] = v141;
                  }
                }
                else
                {
                  v167.i64[0] = 42;
                  *(void *)std::string::size_type v168 = *(void *)(v166 - 8);
                  *(void *)&long long v166 = v166 - 8;
                  std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)v165, v168);
                }
                unint64_t v109 = v167.i64[0];
                uint64_t v110 = (char *)v165[1];
                uint64_t v111 = (char *)v166;
              }
              std::string::size_type v142 = &v110[8 * (v109 / 0x2A)];
              unint64_t v143 = *(void *)v142 + 96 * (v109 % 0x2A);
              if (v111 == v110) {
                uint64_t v144 = 0;
              }
              else {
                uint64_t v144 = v143;
              }
              if (v144 == *(void *)v142) {
                uint64_t v144 = *((void *)v142 - 1) + 4032;
              }
              long long v145 = *(_OWORD *)(v93 + 16);
              *(_OWORD *)(v144 - 96) = *(_OWORD *)v93;
              *(_OWORD *)(v144 - 80) = v145;
              uint64_t v146 = v91 + 96 * v92;
              *(void *)(v144 - 56) = 0;
              *(void *)(v144 - 48) = 0;
              *(void *)(v144 - 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
              *(_OWORD *)(v144 - 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(v146 + 32);
              *(void *)(v144 - 48) = *(void *)(v146 + 48);
              *(void *)(v146 + 32) = 0;
              *(void *)(v146 + 40) = 0;
              *(void *)(v146 + 48) = 0;
              *(void *)(v144 - 40) = 0;
              *(void *)(v144 - 32) = 0;
              *(void *)(v144 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
              *(_OWORD *)(v144 - 40) = *(_OWORD *)(v146 + 56);
              *(void *)(v144 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(v146 + 72);
              *(void *)(v146 + 56) = 0;
              *(void *)(v146 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
              *(void *)(v146 + 72) = 0;
              uint64_t v147 = *v95;
              *(void *)(v144 - 11) = *(void *)(v93 + 85);
              *(void *)(v144 - 16) = v147;
              int64x2_t v167 = vaddq_s64(v167, (int64x2_t)xmmword_20D6B4A20);
              goto LABEL_203;
            case 0xFFFFFC1F:
LABEL_203:
              std::deque<std::__state<char>>::pop_back(v165);
              goto LABEL_204;
            case 0xFFFFFC20:
              long long v112 = *(_OWORD *)(v93 + 16);
              *(_OWORD *)std::string::size_type v168 = *(_OWORD *)v93;
              *(_OWORD *)&v168[16] = v112;
              memset(&v168[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v168[32], *(long long **)(v91 + 96 * v92 + 32), *(long long **)(v91 + 96 * v92 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v91 + 96 * v92 + 40) - *(void *)(v91 + 96 * v92 + 32)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v170[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v91 + 96 * v92 + 56), *(long long **)(v91 + 96 * v92 + 64), (uint64_t)(*(void *)(v91 + 96 * v92 + 64) - *(void *)(v91 + 96 * v92 + 56)) >> 4);
              uint64_t v113 = *v95;
              *(void *)((char *)&v170[1] + 5) = *(void *)(v93 + 85);
              v170[1] = v113;
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v95 + 24))(*v95, 1, v93);
              (*(void (**)(void, void, unsigned char *))(*(void *)v170[1] + 24))(v170[1], 0, v168);
              std::deque<std::__state<char>>::push_back(v165, (uint64_t)v168);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (*(void *)&v168[32])
              {
                *(void *)&v168[40] = *(void *)&v168[32];
                operator delete(*(void **)&v168[32]);
              }
              goto LABEL_204;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          break;
        }
      }
      std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v165);
    }
    return v75;
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
}

void sub_20D330298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  operator delete(v37);
  if (__p) {
    operator delete(__p);
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      BOOL v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    uint64_t v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  long long v44 = 0;
  int64_t v45 = 0;
  unint64_t v46 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)long long v40 = 0;
    memset(&v40[8], 0, 48);
    *(_OWORD *)std::string __p = 0u;
    memset(v42, 0, 21);
    int64_t v45 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v44, (uint64_t)v40);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v40[32]) {
      operator delete(*(void **)&v40[32]);
    }
    uint64_t v38 = a4;
    std::vector<std::csub_match>::size_type v13 = v45;
    *((_DWORD *)v45 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *((void *)v13 - 11) = a2;
    *((void *)v13 - 10) = a2;
    *((void *)v13 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v45 - 40), *(unsigned int *)(a1 + 32));
    std::pair<const char *, const char *> v14 = v45;
    *((void *)v45 - 2) = v6;
    uint64_t v39 = a3;
    signed int v15 = a3 - a2;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = a6;
    unsigned int v16 = 1;
    while (2)
    {
      if ((v16 & 0xFFF) != 0 || (int)(v16 >> 12) < v15)
      {
        BOOL v18 = v14 - 16;
        uint64_t v17 = *((void *)v14 - 2);
        uint64_t v19 = v14 - 96;
        if (v17) {
          (*(void (**)(uint64_t, char *))(*(void *)v17 + 16))(v17, v14 - 96);
        }
        switch(*(_DWORD *)v19)
        {
          case 0xFFFFFC18:
            std::vector<std::csub_match>::size_type v20 = (const char *)*((void *)v14 - 10);
            if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v39) {
              goto LABEL_16;
            }
            uint64_t v29 = *v38;
            *(void *)uint64_t v29 = a2;
            *(void *)(v29 + 8) = v20;
            *(unsigned char *)(v29 + 16) = 1;
            uint64_t v30 = *((void *)v14 - 8);
            uint64_t v31 = *((void *)v14 - 7) - v30;
            if (v31)
            {
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
              unint64_t v33 = (unsigned char *)(v30 + 16);
              unsigned int v34 = 1;
              do
              {
                uint64_t v35 = v29 + 24 * v34;
                *(_OWORD *)uint64_t v35 = *((_OWORD *)v33 - 1);
                char v36 = *v33;
                v33 += 24;
                *(unsigned char *)(v35 + 16) = v36;
              }
              while (v32 > v34++);
            }
            uint64_t v27 = 1;
            goto LABEL_25;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_23;
          case 0xFFFFFC1F:
LABEL_16:
            std::pair<const char *, const char *> v21 = v45 - 96;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)v45 - 12);
            int64_t v45 = v21;
            goto LABEL_23;
          case 0xFFFFFC20:
            long long v22 = *((_OWORD *)v14 - 5);
            *(_OWORD *)long long v40 = *(_OWORD *)v19;
            *(_OWORD *)&v40[16] = v22;
            memset(&v40[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v40[32], *((long long **)v14 - 8), *((long long **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v14 - 7) - *((void *)v14 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v42[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v14 - 5), *((long long **)v14 - 4), (uint64_t)(*((void *)v14 - 4) - *((void *)v14 - 5)) >> 4);
            uint64_t v23 = *(void *)v18;
            *(void *)((char *)&v42[1] + 5) = *(void *)(v14 - 11);
            v42[1] = v23;
            (*(void (**)(void, uint64_t, char *))(**(void **)v18 + 24))(*(void *)v18, 1, v14 - 96);
            (*(void (**)(void, void, unsigned char *))(*(void *)v42[1] + 24))(v42[1], 0, v40);
            long long v24 = v45;
            if ((unint64_t)v45 >= v46)
            {
              int64_t v45 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v44, (uint64_t)v40);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v25 = *(_OWORD *)&v40[16];
              *(_OWORD *)int64_t v45 = *(_OWORD *)v40;
              *((_OWORD *)v24 + 1) = v25;
              *((void *)v24 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
              *((void *)v24 + 5) = 0;
              *((void *)v24 + 6) = 0;
              *((void *)v24 + 7) = 0;
              *((_OWORD *)v24 + 2) = *(_OWORD *)&v40[32];
              *((void *)v24 + 6) = *(void *)&v40[48];
              memset(&v40[32], 0, 24);
              *((void *)v24 + 8) = 0;
              *((void *)v24 + 9) = 0;
              *(_OWORD *)(v24 + 56) = *(_OWORD *)__p;
              *((void *)v24 + 9) = v42[0];
              __p[0] = 0;
              __p[1] = 0;
              v42[0] = 0;
              uint64_t v26 = v42[1];
              *(void *)(v24 + 85) = *(void *)((char *)&v42[1] + 5);
              *((void *)v24 + 10) = v26;
              int64_t v45 = v24 + 96;
            }
            if (*(void *)&v40[32])
            {
              *(void *)&v40[40] = *(void *)&v40[32];
              operator delete(*(void **)&v40[32]);
            }
LABEL_23:
            std::pair<const char *, const char *> v14 = v45;
            ++v16;
            if (v44 == v45) {
              goto LABEL_24;
            }
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_24:
  uint64_t v27 = 0;
LABEL_25:
  *(void *)long long v40 = &v44;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  return v27;
}

void sub_20D330958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v7 = (char *)operator new(96 * v6);
  }
  else
  {
    int v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v2];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  std::pair<const char *, const char *> v14 = (char *)*a1;
  signed int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v9[v16];
      BOOL v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    signed int v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v21);
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      long long v25 = &end[v8];
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::pair<const char *, const char *> v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v13);
      uint64_t v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      uint64_t v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      BOOL v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        std::pair<const char *, const char *> *v18 = v20;
        BOOL v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      std::pair<const char *, const char *> v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      std::vector<std::csub_match>::pointer v23 = this->__begin_;
      long long v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          std::pair<const char *, const char *> v24 = v22[-1].std::pair<const char *, const char *>;
          *(void *)&v16[-1].matched = *(void *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        long long v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    BOOL v18 = &begin[__sz];
    goto LABEL_19;
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    BOOL v18 = &end[v6];
LABEL_19:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  std::pair<const char *, const char *> v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  uint64_t v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    uint64_t v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D330E74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__state<char>::~__state(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    uint64_t result = std::vector<PhonemeRepresentation::Word>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20D330F88(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    uint64_t result = std::vector<std::shared_ptr<Agglomerate>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20D330FFC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D33105C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  }
  unint64_t v7 = a1[4];
  unint64_t v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      unint64_t v22 = (v4 - v5) >> 3;
      std::vector<std::csub_match>::pointer v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        unint64_t v87 = a1 + 3;
        *(void *)&long long v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v25);
        *((void *)&v85 + 1) = v85 + 8 * v22;
        *(void *)&long long v86 = *((void *)&v85 + 1);
        *((void *)&v86 + 1) = v85 + 8 * v26;
        std::string::size_type v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v85, &v84);
        uint64_t v27 = a1[2];
        uint64_t v29 = (char *)*((void *)&v85 + 1);
        uint64_t v28 = (char *)v85;
        uint64_t v31 = (char *)*((void *)&v86 + 1);
        uint64_t v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28) {
                unint64_t v37 = 1;
              }
              else {
                unint64_t v37 = (v31 - v28) >> 2;
              }
              uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v37);
              long long v40 = v38;
              uint64_t v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v41 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v29;
              if (!v35)
              {
                uint64_t v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v42 = 8 * (v41 >> 3);
                int v43 = v29;
                long long v44 = v28;
                do
                {
                  uint64_t v45 = *(void *)v44;
                  v44 += 8;
                  *(void *)int v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              uint64_t v31 = &v38[8 * v39];
              if (v28) {
                operator delete(v28);
              }
              uint64_t v28 = v40;
            }
            else
            {
              uint64_t v32 = (v31 - v30) >> 3;
              if (v32 >= -1) {
                unint64_t v33 = v32 + 1;
              }
              else {
                unint64_t v33 = v32 + 2;
              }
              unsigned int v34 = &v30[8 * (v33 >> 1)];
              uint64_t v29 = &v34[-(v30 - v28)];
              size_t v36 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v34;
              if (!v35) {
                memmove(v29, v28, v36);
              }
            }
          }
          uint64_t v46 = *(void *)(v27 - 8);
          v27 -= 8;
          *((void *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(void *)&long long v85 = v28;
        *((void *)&v85 + 1) = v29;
        *(void *)&long long v86 = v30;
        *((void *)&v86 + 1) = v31;
        long long v48 = v85;
        long long v49 = v86;
        *(void *)&long long v85 = *a1;
        int v47 = (void *)v85;
        *((void *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47) {
          operator delete(v47);
        }
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(void *)&long long v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v85);
LABEL_60:
        std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
        unint64_t v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(void *)&long long v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v85);
      long long v61 = (void *)a1[1];
      uint64_t v4 = (char *)a1[2];
      uint64_t v63 = *v61;
      unint64_t v62 = (char *)(v61 + 1);
      uint64_t v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        uint64_t v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          uint64_t v65 = v64 >> 3;
          BOOL v14 = v64 >> 3 < -1;
          uint64_t v66 = (v64 >> 3) + 2;
          if (v14) {
            uint64_t v67 = v66;
          }
          else {
            uint64_t v67 = v65 + 1;
          }
          uint64_t v68 = -(v67 >> 1);
          uint64_t v69 = v67 >> 1;
          std::string::size_type v70 = &v62[-8 * v69];
          int64_t v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            unint64_t v62 = (char *)a1[1];
          }
          uint64_t v4 = &v70[v71];
          unsigned int v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1) {
          unint64_t v77 = 1;
        }
        else {
          unint64_t v77 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v77);
        unint64_t v52 = &v51[8 * (v77 >> 2)];
        uint64_t v54 = &v51[8 * v78];
        uint64_t v79 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v80 = a1[2] - (void)v79;
        if (v80)
        {
          uint64_t v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v81 = 8 * (v80 >> 3);
          unsigned int v82 = &v51[8 * (v77 >> 2)];
          do
          {
            uint64_t v83 = *v79++;
            *(void *)unsigned int v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        unint64_t v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          uint64_t v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      uint64_t v11 = *(void *)v5;
      std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v5 + 8;
      uint64_t v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        uint64_t v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          uint64_t v13 = v12 >> 3;
          BOOL v14 = v12 >> 3 < -1;
          uint64_t v15 = (v12 >> 3) + 2;
          if (v14) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = v13 + 1;
          }
          uint64_t v17 = -(v16 >> 1);
          uint64_t v18 = v16 >> 1;
          std::vector<std::csub_match>::size_type v19 = &v9[-8 * v18];
          int64_t v20 = v4 - v9;
          if (v4 == v9)
          {
            std::pair<const char *, const char *> v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            std::pair<const char *, const char *> v21 = (char *)a1[1];
          }
          uint64_t v4 = &v19[v20];
          unsigned int v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1) {
          unint64_t v50 = 1;
        }
        else {
          unint64_t v50 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v50);
        unint64_t v52 = &v51[8 * (v50 >> 2)];
        uint64_t v54 = &v51[8 * v53];
        unint64_t v55 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v56 = a1[2] - (void)v55;
        if (v56)
        {
          uint64_t v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v57 = 8 * (v56 >> 3);
          int v58 = &v51[8 * (v50 >> 2)];
          do
          {
            uint64_t v59 = *v55++;
            *(void *)int v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(void *)uint64_t v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  unint64_t v73 = *(void *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  long long v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(void *)(v73 + 40) = 0;
  *(void *)(v73 + 48) = 0;
  *(void *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v73 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v73 + 56) = 0;
  *(void *)(v73 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(v73 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(void *)(v73 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v76 = *(void *)(a2 + 80);
  *(void *)(v73 + 85) = *(void *)(a2 + 85);
  *(void *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_20D331560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * ((v3 - v4) >> 3) - 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v6);
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          unint64_t v8 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *(void *)(a1 + 40) = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v10 = v9 >> 3;
  if (v10 == 1)
  {
    uint64_t v11 = 21;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    uint64_t v11 = 42;
LABEL_14:
    *(void *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 != v14) {
      *(void *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    std::string __p = 0;
    size_t v19 = 0;
    uint64_t v20 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v15, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v17);
    uint64_t v5 = v15;
    size_t v4 = v16;
  }
  else
  {
    size_t v4 = 0;
    uint64_t v5 = 0;
    unsigned int v3 = 0;
    uint64_t v15 = 0;
    size_t v16 = 0;
    uint64_t v17 = 0;
  }
  char v6 = HIBYTE(v20);
  if (v20 >= 0) {
    size_t v7 = HIBYTE(v20);
  }
  else {
    size_t v7 = v19;
  }
  if (v20 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v9 = v3;
  }
  else {
    size_t v9 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    unint64_t v10 = (void **)&v15;
  }
  else {
    unint64_t v10 = v5;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  unsigned int v13 = v9 < v7;
  if (v7 < v9) {
    unsigned int v13 = -1;
  }
  if (v12) {
    return v12;
  }
  else {
    return v13;
  }
}

void sub_20D3318C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  unint64_t v2 = (const std::locale *)MEMORY[0x210559440]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x263F8C130]);
  return this;
}

void sub_20D331930(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_20D331D34(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 17);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D331DAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>()
{
}

void sub_20D331E4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  size_t v7 = a2;
  do
  {
    unint64_t v8 = v7;
    size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    size_t v9 = a1->__end_;
    unint64_t v10 = v8 + 1;
    size_t v11 = v8 + 1;
    do
    {
      unint64_t v8 = v11;
      size_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  size_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      char v6 = v3;
      unsigned int v3 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, v3, v4);
    }
    while (v3 != v6);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned int v3 = a3;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  unint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    size_t v9 = a1->__end_;
    unint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    unint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 14);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D33217C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

void std::__alternate<char>::~__alternate(void *a1)
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x2105595E0);
}

void *std::__owns_two_states<char>::~__owns_two_states(void *a1)
{
  *a1 = off_26C215150;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_26C215120;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  this->__vftable = (std::__owns_one_state<char>_vtbl *)off_26C215120;
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
  JUMPOUT(0x2105595E0);
}

{
  std::__node<char> *first;

  this->__vftable = (std::__owns_one_state<char>_vtbl *)off_26C215120;
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

void std::__owns_two_states<char>::~__owns_two_states(void *a1)
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x2105595E0);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, char *a2, char *a3)
{
  char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    size_t v7 = v6;
    char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 15);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D3325C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  char v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    uint64_t v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  uint64_t v9 = (v8 - 36);
  if (v9 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) != 0) {
    goto LABEL_4;
  }
  if (v9 == 5)
  {
    if (!*(_DWORD *)(a1 + 36)) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_13:
    if ((v8 - 123) >= 2)
    {
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_32:
      uint64_t v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
  }
LABEL_4:
  unint64_t v10 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_21:
    int v11 = *a2;
LABEL_22:
    if (v11 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v11 = *a2;
  if (v11 != 92) {
    goto LABEL_22;
  }
  int v12 = *v10;
  char v13 = *v10;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
    {
      uint64_t v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, a2 + 1, a3, 0);
    }
    else
    {
      BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
      uint64_t v17 = 2;
      if (!v16) {
        uint64_t v17 = 0;
      }
      uint64_t v15 = &a2[v17];
    }
    if (v15 != a2)
    {
LABEL_25:
      if (v15 == a2 && v15 != a3)
      {
        int v18 = *a2;
        if (v18 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor((std::basic_regex<char> *)a1);
          goto LABEL_32;
        }
        if (v18 != 40)
        {
          if (v18 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor((std::basic_regex<char> *)a1);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
        unsigned int v19 = *(_DWORD *)(a1 + 28);
        ++*(_DWORD *)(a1 + 36);
        uint64_t v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, a2 + 1, a3);
        if (v20 == a3 || (std::pair<const char *, const char *> v21 = v20, *v20 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v19);
        --*(_DWORD *)(a1 + 36);
        uint64_t v15 = v21 + 1;
      }
      uint64_t v14 = (unsigned __int8 *)v15;
      if (v15 != a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    goto LABEL_21;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
  uint64_t v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v22 = (*(_DWORD *)(a1 + 28) + 1);
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), v22);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 6);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D332A74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      char v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        char v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    uint64_t v15 = a2 + 1;
    BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            char v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              char v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              std::pair<const char *, const char *> v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            std::pair<const char *, const char *> v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        std::vector<std::csub_match>::pointer v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          char v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            char v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        unint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            char v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                char v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            std::pair<const char *, const char *> v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    char v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    char v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_20D332F58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 8);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D333070(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 7);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D3330C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unsigned int v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      unsigned char *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  uint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  unint64_t *v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

void std::__loop<char>::~__loop(void *a1)
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x2105595E0);
}

void *std::__end_marked_subexpression<char>::~__end_marked_subexpression(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x2105595E0);
}

void *std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x2105595E0);
}

void *std::__r_anchor_multiline<char>::~__r_anchor_multiline(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x2105595E0);
}

void *std::__l_anchor_multiline<char>::~__l_anchor_multiline(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_135;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_135;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_135;
    }
    BOOL v8 = a3 - 4;
    while (1)
    {
      uint64_t v9 = (char *)v5;
      uint64_t v10 = a3;
      if ((char *)v5 == a3) {
        goto LABEL_113;
      }
      int v11 = *(unsigned __int8 *)v5;
      uint64_t v10 = (char *)v5;
      if (v11 == 93) {
        goto LABEL_113;
      }
      memset(&v39, 0, sizeof(v39));
      if ((char *)(v5 + 1) != a3 && v11 == 91)
      {
        int v12 = *(unsigned __int8 *)(v5 + 1);
        switch(v12)
        {
          case '.':
            uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)&v39);
            uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
            std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
            if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v39.__r_.__value_.__l.__size_;
            }
            if (size) {
              goto LABEL_33;
            }
            goto LABEL_27;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_134;
            }
            for (unint64_t i = 0; ; ++i)
            {
              size_t v14 = (char *)(v5 + i + 2);
              if (*v14 == 58 && *(unsigned char *)(v5 + i + 3) == 93) {
                break;
              }
              if (&v8[-v5] == (char *)i) {
                goto LABEL_134;
              }
            }
            if (v14 == a3) {
LABEL_134:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            int v24 = *(_DWORD *)(a1 + 24);
            std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
            std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
            }
            (*(void (**)(void, std::string *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), p_p, (char *)p_p + v25);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v27 = &__p;
            }
            else {
              int v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v27, v24 & 1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (!classname) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            }
            char v29 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_109;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_134;
            }
            for (uint64_t j = 0; ; ++j)
            {
              size_t v14 = &j[v5 + 2];
              if (*v14 == 61 && j[v5 + 3] == 93) {
                break;
              }
              if (&v8[-v5] == j) {
                goto LABEL_134;
              }
            }
            if (v14 == a3) {
              goto LABEL_134;
            }
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_) {
LABEL_136:
              }
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
                goto LABEL_136;
              }
              uint64_t v31 = &__p;
            }
            std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)v40, a1, (char *)v31, (char *)v31 + v30);
            uint64_t v32 = (void *)HIBYTE(v41);
            if (v41 < 0) {
              uint64_t v32 = v40[1];
            }
            if (v32)
            {
              std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (long long *)v40);
            }
            else
            {
              std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
              }
              if (v33 == 2)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  BOOL v35 = &__p;
                }
                else {
                  BOOL v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v35->__r_.__value_.__s.__data_[0], v35->__r_.__value_.__s.__data_[1]);
              }
              else
              {
                if (v33 != 1) {
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unsigned int v34 = &__p;
                }
                else {
                  unsigned int v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v34->__r_.__value_.__s.__data_[0]);
              }
            }
            if (SHIBYTE(v41) < 0) {
              operator delete(v40[0]);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            char v29 = 0;
LABEL_109:
            uint64_t v5 = (uint64_t)(v14 + 2);
            BOOL v20 = v9;
            goto LABEL_110;
        }
      }
      uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      uint64_t v10 = v9;
LABEL_27:
      if ((v5 | 0x40) != 0x40)
      {
        LOBYTE(v15) = *v10;
LABEL_32:
        std::string::operator=(&v39, v15);
        ++v10;
        goto LABEL_33;
      }
      int v15 = *v10;
      if (v15 != 92) {
        goto LABEL_32;
      }
      BOOL v16 = v10 + 1;
      if (v5)
      {
        uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v16, a3, &v39);
      }
      else
      {
        uint64_t v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v16, (std::basic_regex<char> *)a3, &v39, v7);
        uint64_t v5 = 0;
      }
LABEL_33:
      if (v10 != a3)
      {
        int v17 = *v10;
        if (v17 != 93)
        {
          BOOL v19 = v10 + 1;
          if (v10 + 1 != a3 && v17 == 45 && *v19 != 93)
          {
            memset(&__p, 0, sizeof(__p));
            BOOL v20 = v10 + 2;
            if (v10 + 2 != a3 && *v19 == 91 && *v20 == 46)
            {
              std::pair<const char *, const char *> v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v10 + 3, a3, (uint64_t)&__p);
              goto LABEL_119;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v19) = *v19;
              if (v19 == 92)
              {
                if (v5) {
                  std::pair<const char *, const char *> v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v10 + 2, a3, &__p);
                }
                else {
                  std::pair<const char *, const char *> v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v10 + 2), (std::basic_regex<char> *)a3, &__p, v7);
                }
LABEL_119:
                BOOL v20 = v21;
LABEL_120:
                *(_OWORD *)long long v40 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                std::string::size_type v36 = v39.__r_.__value_.__r.__words[2];
                std::string v38 = __p;
                memset(&v39, 0, sizeof(v39));
                uint64_t v41 = v36;
                memset(&__p, 0, sizeof(__p));
                std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v40, (char *)&v38);
                if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v38.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v41) < 0) {
                  operator delete(v40[0]);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                char v29 = 1;
LABEL_110:
                if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v39.__r_.__value_.__l.__data_);
                }
                uint64_t v10 = v20;
                if ((v29 & 1) == 0) {
                  goto LABEL_114;
                }
                goto LABEL_113;
              }
            }
            else
            {
              LOBYTE(v19) = *v19;
            }
            std::string::operator=(&__p, (std::string::value_type)v19);
            goto LABEL_120;
          }
        }
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v39.__r_.__value_.__l.__size_)
        {
          if (v39.__r_.__value_.__l.__size_ == 1)
          {
            size_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_42:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0]);
LABEL_79:
            char v29 = 1;
            BOOL v20 = v10;
            goto LABEL_110;
          }
          size_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_78:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0], v18->__r_.__value_.__s.__data_[1]);
          goto LABEL_79;
        }
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      else if (*((unsigned char *)&v39.__r_.__value_.__s + 23))
      {
        size_t v18 = &v39;
        if (HIBYTE(v39.__r_.__value_.__r.__words[2]) == 1) {
          goto LABEL_42;
        }
        goto LABEL_78;
      }
LABEL_113:
      uint64_t v5 = (uint64_t)v10;
LABEL_114:
      if ((char *)v5 == v9)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93) {
            return v9 + 1;
          }
        }
LABEL_135:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_20D333DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 5);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D333E84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_20D33401C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  int v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  BOOL v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  int v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *uint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  MEMORY[0x2105595E0](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    uint64_t v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      BOOL v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        BOOL v20 = &v8[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          BOOL v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          uint64_t v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(a1 + 40);
  uint64_t v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      std::string::size_type v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        BOOL v20 = &v25[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          uint64_t v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *uint64_t v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  int v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  BOOL v20 = &v15[(void)v12];
  std::pair<const char *, const char *> v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    char v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; ; ++i)
  {
    unint64_t v6 = &a2[i];
    if (a2[i] == 46 && v6[1] == 93) {
      break;
    }
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (v6 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        long long v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 16std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    long long v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
LABEL_25:
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        unint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      unint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  int v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        if (v4[23] < 0)
        {
          if (i >= *((void *)v4 + 1))
          {
LABEL_12:
            for (unint64_t j = 0; ; ++j)
            {
              if (v3[23] < 0)
              {
                if (j >= *((void *)v3 + 1)) {
                  goto LABEL_35;
                }
                std::string::value_type v11 = *(char **)v3;
              }
              else
              {
                std::string::value_type v11 = v3;
                if (j >= v3[23]) {
                  goto LABEL_35;
                }
              }
              char v12 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v11[j]);
              unint64_t v13 = v3;
              if (v3[23] < 0) {
                unint64_t v13 = *(char **)v3;
              }
              v13[j] = v12;
            }
          }
          std::string::value_type v7 = *(char **)v4;
        }
        else
        {
          std::string::value_type v7 = v4;
          if (i >= v4[23]) {
            goto LABEL_12;
          }
        }
        char v8 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v7[i]);
        char v9 = v4;
        if (v4[23] < 0) {
          char v9 = *(char **)v4;
        }
        v9[i] = v8;
      }
    }
    unint64_t v15 = 0;
    unint64_t v16 = a2[23];
    if ((v16 & 0x80) != 0) {
      goto LABEL_26;
    }
    while (v15 < v16)
    {
      while (1)
      {
        ++v15;
        if ((v16 & 0x80) == 0) {
          break;
        }
LABEL_26:
        if (v15 >= *((void *)a2 + 1)) {
          goto LABEL_29;
        }
      }
    }
LABEL_29:
    unint64_t v17 = 0;
    unint64_t v18 = a3[23];
    if ((v18 & 0x80) != 0) {
      goto LABEL_32;
    }
    while (v17 < v18)
    {
      while (1)
      {
        ++v17;
        if ((v18 & 0x80) == 0) {
          break;
        }
LABEL_32:
        if (v17 >= *((void *)a3 + 1)) {
          goto LABEL_35;
        }
      }
    }
LABEL_35:
    if (v4[23] < 0)
    {
      BOOL v20 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v19 = *((void *)v20 + 1);
    }
    else
    {
      uint64_t v19 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v33, a1 + 16, v4, &v4[v19]);
    if (v3[23] < 0)
    {
      BOOL v22 = v3;
      int v3 = *(char **)v3;
      uint64_t v21 = *((void *)v22 + 1);
    }
    else
    {
      uint64_t v21 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)v31, a1 + 16, v3, &v3[v21]);
    *(_OWORD *)BOOL v35 = v33;
    uint64_t v36 = v34;
    uint64_t v34 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v31;
    uint64_t v38 = v32;
    v31[0] = 0;
    v31[1] = 0;
    uint64_t v32 = 0;
    long long v33 = 0uLL;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v35);
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(v35[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(v31[0]);
    }
    if (SHIBYTE(v34) < 0)
    {
      char v23 = (void *)v33;
LABEL_69:
      operator delete(v23);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v14 = *((void *)a2 + 1);
    }
    else {
      uint64_t v14 = a2[23];
    }
    if (v14 != 1 || (a3[23] < 0 ? (uint64_t v24 = *((void *)a3 + 1)) : (uint64_t v24 = a3[23]), v24 != 1)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      std::string::size_type v25 = a2;
      if (a2[23] < 0) {
        std::string::size_type v25 = *(char **)a2;
      }
      char v26 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v25);
      unint64_t v27 = v4;
      if (v4[23] < 0) {
        unint64_t v27 = *(unsigned char **)v4;
      }
      *unint64_t v27 = v26;
      size_t v28 = v3;
      if (v3[23] < 0) {
        size_t v28 = *(char **)v3;
      }
      char v29 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v28);
      char v30 = v3;
      if (v3[23] < 0) {
        char v30 = *(unsigned char **)v3;
      }
      unsigned char *v30 = v29;
    }
    *(_OWORD *)BOOL v35 = *(_OWORD *)v4;
    uint64_t v36 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v38 = *((void *)v3 + 2);
    *(void *)int v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v35);
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v36) < 0)
    {
      char v23 = v35[0];
      goto LABEL_69;
    }
  }
}

void sub_20D334AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        std::string::size_type v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *std::string::size_type v25 = v6;
        uint64_t v24 = v25 + 1;
        unint64_t v37 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--std::string::size_type v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        std::string::size_type v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *std::string::size_type v25 = v6;
        uint64_t v24 = v25 + 1;
        std::string v39 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--std::string::size_type v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  char v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *char v8 = v6;
    uint64_t v24 = v8 + 1;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3) {
    goto LABEL_49;
  }
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  std::string::size_type v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *std::string::size_type v25 = v6;
  uint64_t v24 = v25 + 1;
  size_t v28 = *(char **)(a1 + 112);
  unint64_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--std::string::size_type v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  unint64_t v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 120) = v24;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    __int16 v6 = __p;
  }
  else {
    __int16 v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D334E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  uint64_t p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  unint64_t v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      uint64_t v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>>((uint64_t)p_end_cap, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v9;
    *((void *)a2 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    std::vector<std::pair<unsigned long, const char *>>::pointer end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_20D334F7C(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 9);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D334FD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 3);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D33502C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_20D3351B4(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  *uint64_t v1 = off_26C215120;
  uint64_t v4 = v1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  MEMORY[0x2105595E0](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char<char>::~__match_char(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x2105595E0);
}

void *std::__match_char<char>::~__match_char(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C215298;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x2105595E0);
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C215298;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C215208;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x2105595E0);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C215208;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), 95);
    char v3 = v2;
    uint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 < v4)
    {
      *uint64_t v5 = v2;
      uint64_t v6 = (uint64_t)(v5 + 1);
LABEL_32:
      *(void *)(a1 + 72) = v6;
      return;
    }
    unint64_t v16 = *(void *)(a1 + 64);
    long long v17 = &v5[-v16];
    uint64_t v18 = (uint64_t)&v5[-v16 + 1];
    if (v18 >= 0)
    {
      unint64_t v19 = v4 - v16;
      if (2 * v19 > v18) {
        uint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v20 = v18;
      }
      if (v20) {
        unint64_t v21 = operator new(v20);
      }
      else {
        unint64_t v21 = 0;
      }
      uint64_t v23 = &v21[v20];
      v17[(void)v21] = v3;
      uint64_t v6 = (uint64_t)&v17[(void)v21 + 1];
      if (v5 == (unsigned char *)v16)
      {
        unint64_t v21 = &v17[(void)v21];
      }
      else
      {
        uint64_t v24 = &v5[~v16];
        do
        {
          char v25 = *--v5;
          (v24--)[(void)v21] = v25;
        }
        while (v5 != (unsigned char *)v16);
        uint64_t v5 = *(unsigned char **)(a1 + 64);
      }
      *(void *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v21;
      *(void *)(a1 + 72) = v6;
      *(void *)(a1 + 80) = v23;
      if (v5) {
        operator delete(v5);
      }
      goto LABEL_32;
    }
LABEL_55:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v7 = (unint64_t *)(a1 + 64);
  long long v9 = *(unsigned char **)(a1 + 72);
  unint64_t v8 = *(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v9 >= v8)
    {
      unint64_t v10 = *v7;
      unint64_t v11 = &v9[-*v7];
      unint64_t v12 = (unint64_t)(v11 + 1);
      if ((uint64_t)(v11 + 1) < 0) {
        goto LABEL_55;
      }
      unint64_t v13 = v8 - v10;
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = operator new(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v31 = &v11[(void)v15];
      uint64_t v32 = (char *)v15 + v14;
      v11[(void)v15] = 95;
      uint64_t v22 = (uint64_t)&v11[(void)v15 + 1];
      if (v9 != (unsigned char *)v10)
      {
        unint64_t v33 = &v9[~v10];
        do
        {
          char v34 = *--v9;
          (v33--)[(void)v15] = v34;
        }
        while (v9 != (unsigned char *)v10);
LABEL_50:
        long long v9 = (unsigned char *)*v7;
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  else if ((unint64_t)v9 >= v8)
  {
    unint64_t v26 = *v7;
    unint64_t v27 = &v9[-*v7];
    unint64_t v28 = (unint64_t)(v27 + 1);
    if ((uint64_t)(v27 + 1) < 0) {
      goto LABEL_55;
    }
    unint64_t v29 = v8 - v26;
    if (2 * v29 > v28) {
      unint64_t v28 = 2 * v29;
    }
    if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v30 = v28;
    }
    if (v30) {
      uint64_t v15 = operator new(v30);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v31 = &v27[(void)v15];
    uint64_t v32 = (char *)v15 + v30;
    v27[(void)v15] = 95;
    uint64_t v22 = (uint64_t)&v27[(void)v15 + 1];
    if (v9 != (unsigned char *)v26)
    {
      uint64_t v35 = &v9[~v26];
      do
      {
        char v36 = *--v9;
        (v35--)[(void)v15] = v36;
      }
      while (v9 != (unsigned char *)v26);
      goto LABEL_50;
    }
LABEL_51:
    uint64_t v15 = v31;
LABEL_52:
    *(void *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v15;
    *(void *)(a1 + 72) = v22;
    *(void *)(a1 + 80) = v32;
    if (v9) {
      operator delete(v9);
    }
    goto LABEL_54;
  }
  *long long v9 = 95;
  uint64_t v22 = (uint64_t)(v9 + 1);
LABEL_54:
  *(void *)(a1 + 72) = v22;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  unint64_t v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            uint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_57;
        case 'r':
          if (a4)
          {
            uint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_57;
        case 't':
          if (a4)
          {
            uint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_57;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            int v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              unint64_t v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                int v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6) {
                  goto LABEL_23;
                }
              }
            }
          }
          goto LABEL_62;
        case 'v':
          if (a4)
          {
            uint64_t v6 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_62;
          }
          char v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_28;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u) {
            goto LABEL_62;
          }
          char v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_62;
          }
          char v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_33;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u) {
            goto LABEL_62;
          }
          char v13 = -87;
LABEL_33:
          std::string::value_type v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4) {
            std::string::operator=(a4, v14);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_43;
      }
      goto LABEL_57;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        uint64_t v6 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_48;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_57:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          uint64_t v6 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_48:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_57;
      }
LABEL_43:
      uint64_t v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if (v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          uint64_t v6 = a4;
          goto LABEL_48;
        }
        goto LABEL_57;
      }
LABEL_62:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_62;
    }
    char v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v15 & 0xDF) - 65) > 0x19u) {
      goto LABEL_62;
    }
    std::string::value_type v16 = v15 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v16);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_20D335DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 1);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D335E1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 2);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D335E74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a1;
      }
      else {
        uint64_t v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D335F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, long long *a2)
{
  char v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v8 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_236;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_66;
  }
  char v6 = *current;
  LOBYTE(v126) = *current;
  char v7 = current[1];
  HIBYTE(v126) = v7;
  if (this->__icase_)
  {
    LOBYTE(v126) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v126) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v126;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v127, (const char *)&__s);
  std::string __p = v127;
  std::string::size_type size = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  int v11 = SHIBYTE(v127.__r_.__value_.__r.__words[2]);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v127.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_11;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_11;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    goto LABEL_15;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)this->__traits_.__col_ + 32))(&v127);
  if (v11 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v127;
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v127.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v127.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_178;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_178:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v41) {
      goto LABEL_17;
    }
LABEL_66:
    BOOL negate = 0;
    uint64_t v8 = 1;
    goto LABEL_67;
  }
  if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
    goto LABEL_66;
  }
LABEL_17:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v13 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v13)
  {
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    p_second = &begin->second;
    while (v126 != *(p_second - 1) || HIBYTE(v126) != *p_second)
    {
      p_second += 2;
      if (!--v14) {
        goto LABEL_26;
      }
    }
    goto LABEL_233;
  }
LABEL_26:
  p_traits = &this->__traits_;
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v126, (char *)&v127);
    std::vector<std::pair<std::string, std::string>>::pointer v18 = this->__ranges_.__begin_;
    char v19 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    int64_t v20 = (char *)this->__ranges_.__end_ - (char *)v18;
    if (v20)
    {
      uint64_t v21 = 0;
      unint64_t v22 = v20 / 48;
      char v116 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = __s.__r_.__value_.__l.__size_;
      }
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_s = &__s;
      }
      else {
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if (v22 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v20 / 48;
      }
      unint64_t v26 = (unsigned __int8 *)&v18->second.__r_.__value_.__r.__words[2] + 7;
      BOOL v27 = 1;
      while (1)
      {
        int v28 = (char)*(v26 - 24);
        if (v28 >= 0) {
          size_t v29 = *(v26 - 24);
        }
        else {
          size_t v29 = *(void *)(v26 - 39);
        }
        if (v28 >= 0) {
          size_t v30 = (char *)(v26 - 47);
        }
        else {
          size_t v30 = *(char **)(v26 - 47);
        }
        if (v29 >= v23) {
          size_t v31 = v23;
        }
        else {
          size_t v31 = v29;
        }
        int v32 = memcmp(p_s, v30, v31);
        BOOL v33 = v23 >= v29;
        if (v32) {
          BOOL v33 = v32 >= 0;
        }
        if (v33)
        {
          int v34 = (char)*v26;
          if (v34 >= 0) {
            size_t v35 = *v26;
          }
          else {
            size_t v35 = *(void *)(v26 - 15);
          }
          if (v34 >= 0) {
            char v36 = (char *)(v26 - 23);
          }
          else {
            char v36 = *(char **)(v26 - 23);
          }
          if (v23 >= v35) {
            size_t v37 = v35;
          }
          else {
            size_t v37 = v23;
          }
          int v38 = memcmp(v36, p_s, v37);
          BOOL v39 = v35 >= v23;
          if (v38) {
            BOOL v39 = v38 >= 0;
          }
          if (v39) {
            break;
          }
        }
        BOOL v27 = ++v21 < v22;
        v26 += 48;
        if (v25 == v21)
        {
          int v40 = 0;
          BOOL negate = 0;
          goto LABEL_180;
        }
      }
      BOOL negate = 1;
      int v40 = 5;
LABEL_180:
      p_traits = &this->__traits_;
      char v19 = v116;
    }
    else
    {
      BOOL v27 = 0;
      int v40 = 0;
      BOOL negate = 0;
    }
    if (v19 < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v27) {
      goto LABEL_211;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_215:
    if ((char)v126 < 0)
    {
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
    }
    else
    {
      std::regex_traits<char>::char_class_type mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v111 = tab[v126];
      if (((v111 & mask) != 0 || v126 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v126) & 0x80000000) == 0
        && ((tab[HIBYTE(v126)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v126) == 95))
      {
        goto LABEL_233;
      }
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
      if ((v111 & neg_mask) != 0 || v126 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_232:
        int v113 = negate;
LABEL_234:
        BOOL negate = v113;
        goto LABEL_235;
      }
    }
    if ((SHIBYTE(v126) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v126)] & neg_mask) == 0)
      {
        int v113 = 1;
        if (HIBYTE(v126) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_234;
        }
      }
      goto LABEL_232;
    }
LABEL_233:
    int v113 = 1;
    goto LABEL_234;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)p_traits, (char *)&v126, (char *)&v127);
  std::vector<std::string>::pointer v93 = this->__equivalences_.__begin_;
  uint64_t v94 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v95 = (char *)this->__equivalences_.__end_ - (char *)v93;
  if (!v95)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_215;
  }
  uint64_t v96 = 0;
  unint64_t v97 = v95 / 24;
  long long v98 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v99 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v99 = __s.__r_.__value_.__l.__size_;
  }
  if (v97 <= 1) {
    uint64_t v100 = 1;
  }
  else {
    uint64_t v100 = v95 / 24;
  }
  BOOL v101 = 1;
  while (1)
  {
    std::vector<int> v102 = &v93[v96];
    std::string::size_type v103 = HIBYTE(v102->__r_.__value_.__r.__words[2]);
    int v104 = (char)v103;
    if ((v103 & 0x80u) != 0) {
      std::string::size_type v103 = v102->__r_.__value_.__l.__size_;
    }
    if (v99 != v103) {
      goto LABEL_206;
    }
    unint64_t v105 = v104 >= 0 ? &v93[v96] : (std::string *)v102->__r_.__value_.__r.__words[0];
    if ((v94 & 0x80) == 0) {
      break;
    }
    unint64_t v121 = v97;
    uint64_t v124 = v94;
    int v108 = memcmp((const void *)v98, v105, *((size_t *)&v98 + 1));
    unint64_t v97 = v121;
    uint64_t v94 = v124;
    if (!v108)
    {
      int v40 = 5;
      BOOL negate = 1;
      goto LABEL_209;
    }
LABEL_206:
    BOOL v101 = ++v96 < v97;
    if (v96 == v100)
    {
      int v40 = 0;
      goto LABEL_208;
    }
  }
  if (!v94)
  {
    BOOL negate = 1;
    if (v101) {
      goto LABEL_235;
    }
    goto LABEL_215;
  }
  uint64_t v106 = &__s;
  uint64_t v107 = v94;
  do
  {
    if (v106->__r_.__value_.__s.__data_[0] != v105->__r_.__value_.__s.__data_[0]) {
      goto LABEL_206;
    }
    uint64_t v106 = (std::string *)((char *)v106 + 1);
    unint64_t v105 = (std::string *)((char *)v105 + 1);
    --v107;
  }
  while (v107);
  BOOL negate = 1;
  int v40 = 5;
LABEL_208:
  if ((v94 & 0x80) != 0) {
LABEL_209:
  }
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v101) {
    goto LABEL_215;
  }
LABEL_211:
  if (v40)
  {
LABEL_235:
    uint64_t v8 = 2;
    goto LABEL_236;
  }
  uint64_t v8 = 2;
LABEL_67:
  unsigned __int8 v42 = *a2->__current_;
  v127.__r_.__value_.__s.__data_[0] = v42;
  if (this->__icase_)
  {
    unsigned __int8 v42 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v42);
    v127.__r_.__value_.__s.__data_[0] = v42;
  }
  std::vector<char>::pointer v43 = this->__chars_.__begin_;
  unint64_t v44 = this->__chars_.__end_ - v43;
  if (v44)
  {
    if (v44 <= 1) {
      unint64_t v44 = 1;
    }
    while (1)
    {
      int v45 = *v43++;
      if (v45 == v42) {
        break;
      }
      if (!--v44) {
        goto LABEL_74;
      }
    }
LABEL_167:
    BOOL negate = 1;
    goto LABEL_236;
  }
LABEL_74:
  std::regex_traits<char>::char_class_type v46 = this->__neg_mask_;
  if (v46 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v42 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v42] & v46) == 0) {
      int v47 = (v42 == 95) & (v46 >> 7);
    }
    else {
      LOBYTE(v47) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v49 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v42, end - this->__neg_chars_.__begin_);
    unint64_t v50 = v49 ? v49 : end;
    if ((v47 & 1) == 0 && v50 == end) {
      goto LABEL_167;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v51 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v52 = this->__ranges_.__end_;
  if (v51 != v52)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v127, &v127.__r_.__value_.__s.__data_[1]);
      std::vector<std::pair<std::string, std::string>>::pointer v51 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v52 = this->__ranges_.__end_;
      unsigned int v53 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      unsigned int v53 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v42;
    }
    int64_t v54 = (char *)v52 - (char *)v51;
    if (v54)
    {
      uint64_t v122 = v8;
      BOOL v119 = negate;
      uint64_t v55 = 0;
      unint64_t v56 = v54 / 48;
      char v117 = v53;
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v57 = v53;
      }
      else {
        std::string::size_type v57 = __s.__r_.__value_.__l.__size_;
      }
      if ((v53 & 0x80u) == 0) {
        int v58 = &__s;
      }
      else {
        int v58 = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if (v56 <= 1) {
        uint64_t v59 = 1;
      }
      else {
        uint64_t v59 = v54 / 48;
      }
      unint64_t v60 = (unsigned __int8 *)&v51->second.__r_.__value_.__r.__words[2] + 7;
      BOOL v61 = 1;
      while (1)
      {
        int v62 = (char)*(v60 - 24);
        if (v62 >= 0) {
          size_t v63 = *(v60 - 24);
        }
        else {
          size_t v63 = *(void *)(v60 - 39);
        }
        if (v62 >= 0) {
          uint64_t v64 = (char *)(v60 - 47);
        }
        else {
          uint64_t v64 = *(char **)(v60 - 47);
        }
        if (v63 >= v57) {
          size_t v65 = v57;
        }
        else {
          size_t v65 = v63;
        }
        int v66 = memcmp(v58, v64, v65);
        BOOL v67 = v57 >= v63;
        if (v66) {
          BOOL v67 = v66 >= 0;
        }
        if (v67)
        {
          int v68 = (char)*v60;
          if (v68 >= 0) {
            size_t v69 = *v60;
          }
          else {
            size_t v69 = *(void *)(v60 - 15);
          }
          if (v68 >= 0) {
            std::string::size_type v70 = (char *)(v60 - 23);
          }
          else {
            std::string::size_type v70 = *(char **)(v60 - 23);
          }
          if (v57 >= v69) {
            size_t v71 = v69;
          }
          else {
            size_t v71 = v57;
          }
          int v72 = memcmp(v70, v58, v71);
          BOOL v73 = v69 >= v57;
          if (v72) {
            BOOL v73 = v72 >= 0;
          }
          if (v73) {
            break;
          }
        }
        BOOL v61 = ++v55 < v56;
        v60 += 48;
        if (v59 == v55)
        {
          BOOL negate = v119;
          goto LABEL_130;
        }
      }
      BOOL negate = 1;
LABEL_130:
      uint64_t v8 = v122;
      if (v117 < 0) {
LABEL_131:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v61 = 0;
      if ((v53 & 0x80) != 0) {
        goto LABEL_131;
      }
    }
    if (v61) {
      goto LABEL_236;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_162;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v127, &v127.__r_.__value_.__s.__data_[1]);
  std::vector<std::string>::pointer v74 = this->__equivalences_.__begin_;
  uint64_t v75 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v76 = (char *)this->__equivalences_.__end_ - (char *)v74;
  if (!v76)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_162;
  }
  uint64_t v123 = v8;
  uint64_t v77 = 0;
  unint64_t v78 = v76 / 24;
  long long v79 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v80 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v80 = __s.__r_.__value_.__l.__size_;
  }
  if (v78 <= 1) {
    uint64_t v81 = 1;
  }
  else {
    uint64_t v81 = v76 / 24;
  }
  BOOL v82 = 1;
  while (2)
  {
    uint64_t v83 = &v74[v77];
    std::string::size_type v84 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
    int v85 = (char)v84;
    if ((v84 & 0x80u) != 0) {
      std::string::size_type v84 = v83->__r_.__value_.__l.__size_;
    }
    if (v80 != v84)
    {
LABEL_155:
      BOOL v82 = ++v77 < v78;
      if (v77 == v81)
      {
LABEL_156:
        uint64_t v8 = v123;
        if ((v75 & 0x80) == 0) {
          goto LABEL_158;
        }
        goto LABEL_157;
      }
      continue;
    }
    break;
  }
  if (v85 >= 0) {
    long long v86 = &v74[v77];
  }
  else {
    long long v86 = (std::string *)v83->__r_.__value_.__r.__words[0];
  }
  if ((v75 & 0x80) != 0)
  {
    BOOL v120 = negate;
    unint64_t v89 = v78;
    uint64_t v118 = v81;
    int v90 = memcmp((const void *)v79, v86, *((size_t *)&v79 + 1));
    uint64_t v81 = v118;
    unint64_t v78 = v89;
    BOOL negate = v120;
    if (!v90)
    {
      BOOL negate = 1;
      uint64_t v8 = v123;
LABEL_157:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_158;
    }
    goto LABEL_155;
  }
  if (v75)
  {
    unint64_t v87 = &__s;
    uint64_t v88 = v75;
    while (v87->__r_.__value_.__s.__data_[0] == v86->__r_.__value_.__s.__data_[0])
    {
      unint64_t v87 = (std::string *)((char *)v87 + 1);
      long long v86 = (std::string *)((char *)v86 + 1);
      if (!--v88)
      {
        BOOL negate = 1;
        goto LABEL_156;
      }
    }
    goto LABEL_155;
  }
  BOOL negate = 1;
  uint64_t v8 = v123;
LABEL_158:
  if (!v82)
  {
LABEL_162:
    if (v127.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_236;
    }
    std::regex_traits<char>::char_class_type v91 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v127.__r_.__value_.__s.__data_[0]] & v91) == 0)
    {
      int v92 = (v91 >> 7) & 1;
      if (v127.__r_.__value_.__s.__data_[0] != 95) {
        int v92 = 0;
      }
      if (v92 != 1) {
        goto LABEL_236;
      }
    }
    goto LABEL_167;
  }
LABEL_236:
  if (negate == this->__negate_)
  {
    first = 0;
    int v115 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    int v115 = -995;
  }
  a2->__do_ = v115;
  a2->__node_ = first;
}

void sub_20D336A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D336B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    char v7 = __p;
  }
  else {
    char v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a1;
      }
      else {
        uint64_t v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D336C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  JUMPOUT(0x2105595E0);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C215238;
  char v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::basic_regex<char>::value_type locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  char v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  char v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  unint64_t v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_any<char>::~__match_any(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x2105595E0);
}

void *std::__match_any<char>::~__match_any(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 4);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D336F5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (unint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

void std::__back_ref<char>::~__back_ref(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x2105595E0);
}

void *std::__back_ref<char>::~__back_ref(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    unint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    unsigned int v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      uint64_t v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C2151D8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x2105595E0);
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C2151D8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C2150F0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x2105595E0);
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C2150F0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = (char *)a2;
  if (a2 != a3)
  {
    std::vector<char>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    int v9 = a2 + 1;
    int v8 = *a2;
    if ((a2 + 1 != a3 || v8 != 36)
      && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_29;
    }
    int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
    if (v11 == v3)
    {
      if (*v3 == 46) {
        operator new();
      }
      int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, v3, (char *)a3);
    }
    if (v11 == v3 && v11 != (char *)a3)
    {
      if (v9 == a3 || *v3 != 92) {
        return v3;
      }
      int v12 = *v9;
      if (v12 == 40)
      {
        uint64_t v13 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v14 = a1->__marked_count_;
        do
        {
          char v15 = (unsigned __int8 *)v13;
          uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v13, a3);
        }
        while ((unsigned __int8 *)v13 != v15);
        if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        int v11 = (char *)(v15 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v14);
      }
      else
      {
        BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v12);
        uint64_t v17 = 2;
        if (!v16) {
          uint64_t v17 = 0;
        }
        int v11 = &v3[v17];
      }
    }
    int v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_29:
      if (v9 == a3) {
        return (char *)a3;
      }
      size_t v18 = a1->__marked_count_ + 1;
      int v19 = *v9;
      if (v19 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == a3 || v19 != 92 || v9[1] != 123) {
        return (char *)v9;
      }
      int v29 = 0;
      int64_t v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, a3, &v29);
      if (v20 == v9 + 2) {
LABEL_45:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v20 != a3)
      {
        uint64_t v21 = v20 + 1;
        int v22 = *v20;
        if (v22 == 44)
        {
          int v28 = -1;
          std::string::size_type v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v20 + 1, a3, &v28);
          if (v23 != a3 && v23 + 1 != a3 && *v23 == 92 && v23[1] == 125)
          {
            size_t v25 = v28;
            size_t v24 = v29;
            if (v28 == -1)
            {
              size_t v25 = -1;
            }
            else if (v28 < v29)
            {
              goto LABEL_45;
            }
            uint64_t v3 = (char *)&v23[2 * (v23[1] == 125)];
            unint64_t v26 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v26, v24, v25, end, marked_count + 1, v18, 1);
            return v3;
          }
        }
        else if (v21 != a3 && v22 == 92 && *v21 == 125)
        {
          uint64_t v3 = (char *)(v20 + 2);
          size_t v24 = v29;
          unint64_t v26 = a1;
          size_t v25 = v29;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_32;
      }
      int v16 = a2[1];
      if (v16 == 66)
      {
        BOOL v17 = 1;
      }
      else
      {
        if (v16 != 98) {
          goto LABEL_31;
        }
        BOOL v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v17);
      return a2 + 2;
    }
    if (v6 != 94) {
      goto LABEL_32;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    return a2 + 1;
  }
  BOOL v9 = v6 == 40;
  int v8 = (char *)(a2 + 1);
  BOOL v9 = !v9 || v8 == a3;
  if (!v9)
  {
    uint64_t v10 = (char *)(a2 + 2);
    if (*v8 == 63 && v10 != a3)
    {
      int v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v44.__traits_);
        memset(&v44.__flags_, 0, 40);
        v44.__flags_ = a1->__flags_;
        uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v44, a2 + 3, a3);
        unsigned int marked_count = v44.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v44, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
LABEL_30:
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v44.__traits_.__loc_);
        uint64_t result = (unsigned __int8 *)(v13 + 1);
        if (v13 + 1 != (char *)a2) {
          return result;
        }
        goto LABEL_31;
      }
      if (v12 == 61)
      {
        std::regex_traits<char>::regex_traits(&v44.__traits_);
        memset(&v44.__flags_, 0, 40);
        v44.__flags_ = a1->__flags_;
        uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v44, a2 + 3, a3);
        unsigned int v14 = v44.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v44, 0, a1->__marked_count_);
        a1->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        goto LABEL_30;
      }
    }
LABEL_31:
    int v7 = *a2;
  }
LABEL_32:
  std::vector<char>::pointer end = a1->__end_;
  unsigned int v20 = a1->__marked_count_;
  if ((char)v7 <= 91)
  {
    uint64_t result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_98;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          int v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 3, a3);
          if (v22 == a3) {
            goto LABEL_98;
          }
          std::string::size_type v23 = v22;
          if (*v22 != 41) {
            goto LABEL_98;
          }
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
          unsigned int v29 = a1->__marked_count_;
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          size_t v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 1, a3);
          if (v30 == a3 || (std::string::size_type v23 = v30, *v30 != 41)) {
LABEL_98:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v29);
        }
        --*p_open_count;
        size_t v25 = (unsigned __int8 *)(v23 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_65;
      case '.':
        operator new();
      default:
        if ((char)v7 == 91)
        {
          size_t v25 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63) {
          goto LABEL_60;
        }
        goto LABEL_65;
    }
  }
  uint64_t v24 = ((char)v7 - 92);
  if (v24 <= 0x21)
  {
    if (((1 << (v7 - 92)) & 0x300000006) != 0) {
      return a2;
    }
    if ((char)v7 == 92)
    {
      if (v7 != 92) {
        return a2;
      }
      unint64_t v26 = (char *)(a2 + 1);
      if (a2 + 1 == (unsigned __int8 *)a3) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
      }
      int v27 = *v26;
      unsigned int v28 = v27 - 48;
      if (v27 == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v28);
LABEL_97:
        size_t v25 = a2 + 2;
        goto LABEL_61;
      }
      if ((v27 - 49) <= 8)
      {
        size_t v25 = a2 + 2;
        if (a2 + 2 == (unsigned __int8 *)a3)
        {
          size_t v25 = (unsigned __int8 *)a3;
        }
        else
        {
          while (1)
          {
            int v32 = *v25;
            if ((v32 - 48) > 9) {
              break;
            }
            if (v28 >= 0x19999999) {
              goto LABEL_99;
            }
            ++v25;
            unsigned int v28 = v32 + 10 * v28 - 48;
            if (v25 == (unsigned __int8 *)a3)
            {
              size_t v25 = (unsigned __int8 *)a3;
              break;
            }
          }
          if (!v28) {
LABEL_99:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
        }
        if (v28 > v20) {
          goto LABEL_99;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v28);
        if (v25 != (unsigned __int8 *)v26)
        {
LABEL_57:
          uint64_t result = a2;
          if (v25 == a2) {
            return result;
          }
          goto LABEL_61;
        }
      }
      int v33 = *v26;
      if (v33 > 99)
      {
        if (v33 == 119)
        {
          int v34 = a1;
          BOOL v35 = 0;
          goto LABEL_89;
        }
        if (v33 == 115)
        {
          unsigned __int8 v42 = a1;
          BOOL v43 = 0;
LABEL_95:
          started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
          int v39 = started->__mask_ | 0x4000;
          goto LABEL_96;
        }
        if (v33 != 100)
        {
LABEL_90:
          std::string::size_type v41 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
          if (v41 == (std::basic_regex<char> *)v26) {
            size_t v25 = a2;
          }
          else {
            size_t v25 = (unsigned __int8 *)v41;
          }
          goto LABEL_57;
        }
        char v36 = a1;
        BOOL v37 = 0;
      }
      else
      {
        if (v33 != 68)
        {
          if (v33 != 83)
          {
            if (v33 == 87)
            {
              int v34 = a1;
              BOOL v35 = 1;
LABEL_89:
              int v40 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v34, v35);
              v40->__mask_ |= 0x500u;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v40, 95);
              goto LABEL_97;
            }
            goto LABEL_90;
          }
          unsigned __int8 v42 = a1;
          BOOL v43 = 1;
          goto LABEL_95;
        }
        char v36 = a1;
        BOOL v37 = 1;
      }
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v36, v37);
      int v39 = started->__mask_ | 0x400;
LABEL_96:
      started->__mask_ = v39;
      goto LABEL_97;
    }
    if (v24 == 31) {
LABEL_65:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
LABEL_60:
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  size_t v25 = a2 + 1;
LABEL_61:
  size_t v31 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v25, (unsigned __int8 *)a3, end, v20 + 1, v31);
}

void sub_20D33800C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x210558E10](exception, 11);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20D33809C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x2105595E0);
}

void *std::__match_any_but_newline<char>::~__match_any_but_newline(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  memset(&v23, 0, 17);
  char v24 = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  uint64_t v20 = v5;
  uint64_t v21 = v5;
  char v22 = 0;
  std::vector<std::csub_match>::value_type v23 = v19;
  uint64_t v25 = v5;
  char v24 = 1;
  int v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::csub_match>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::csub_match>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = *(_DWORD *)(a1 + 80);
  uint64_t v12 = *(void *)(a2 + 32);
  unsigned int v13 = 2;
  uint64_t v14 = 1;
  do
  {
    char v15 = &begin[v14];
    uint64_t v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    uint64_t v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:
  operator delete(begin);
}

void sub_20D338498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C214F40;
  uint64_t v2 = a1 + 2;
  std::basic_regex<char>::value_type locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  std::vector<std::csub_match>::size_type v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }
  JUMPOUT(0x2105595E0);
}

std::locale *std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C214F40;
  uint64_t v2 = a1 + 2;
  std::basic_regex<char>::value_type locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  std::vector<std::csub_match>::size_type v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  std::vector<std::csub_match>::size_type v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C2150C0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x2105595E0);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_26C2150C0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_26C215120;
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__empty_state<char>::~__empty_state(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x2105595E0);
}

void *std::__empty_state<char>::~__empty_state(void *a1)
{
  *a1 = off_26C215120;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__end_state<char>::~__end_state()
{
}

void WordEmbeddingModule::~WordEmbeddingModule(WordEmbeddingModule *this)
{
  WordEmbeddingModule::~WordEmbeddingModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C202A88;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  std::__tree<std::string>::destroy((uint64_t)this + 304, *((char **)this + 39));
  if (*((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  Module::~Module(this);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  int v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    *int v9 = 0;
    v9[1] = 0;
  }
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingModel>::__on_zero_shared()
{
  int v0 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to destroy plan");
  if (v0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v3 = v15;
    uint64_t v4 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    uint64_t v6 = __p;
    if (v3 < 0) {
      uint64_t v6 = v4;
    }
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v6, v0, status_string);
    MEMORY[0x210558D40](exception, v16);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  int v1 = espresso_context_destroy();
  std::string::basic_string[abi:ne180100]<0>(v12, "Unable to destroy context");
  if (v1)
  {
    uint64_t v7 = __cxa_allocate_exception(0x10uLL);
    int v8 = v13;
    int v9 = (void **)v12[0];
    uint64_t v10 = (const char *)espresso_get_status_string();
    uint64_t v11 = v12;
    if (v8 < 0) {
      uint64_t v11 = v9;
    }
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v11, v1, v10);
    MEMORY[0x210558D40](v7, v16);
    __cxa_throw(v7, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_20D338D84(void *a1)
{
  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0) {
LABEL_6:
    }
      __clang_call_terminate(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217C50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217C50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void WordEmbeddingPersistentModule::~WordEmbeddingPersistentModule(WordEmbeddingPersistentModule *this)
{
  *(void *)this = off_26C204DD8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 296);
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C204DD8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 296);
  PersistentModule::~PersistentModule((void **)this);
}

void PersistentModuleFactory::get_persistent_module_from_pool<WordEmbeddingPersistentModule>(void *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a3 + 24);
  if (v4 && (uint64_t v7 = std::__shared_weak_count::lock(v4)) != 0)
  {
    int v8 = v7;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9
      && (uint64_t v10 = v9 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v9 + 8), (unsigned __int8 *)a2)))
    {
      char v13 = a2;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)a2, &v13);
      uint64_t v12 = *((void *)v11 + 6);
      *a1 = *((void *)v11 + 5);
      a1[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_20D338FE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &off_26C204E48;
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &unk_26C203848;
  if (*(char *)(a1 + 55) < 0)
  {
    int v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWordEmbeddingInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void SharedObjectPool::get<MDN>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    SharedObjectPool::get<VoiceConfig>(&v9, (long long **)a2);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 16))(&v8);
    int v5 = operator new(0x200uLL);
    v5[1] = 0;
    v5[2] = 0;
    *int v5 = off_26C218A50;
    std::string::basic_string[abi:ne180100]<0>(&__p, "mdn");
    NNetExtractor::NNetExtractor((uint64_t)(v5 + 3), &v8, &__p);
  }
  uint64_t v7 = *(void *)(*(void *)v6 + 16);
  *a1 = *(void *)(*(void *)v6 + 8);
  a1[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D339390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v24);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::recursive_mutex::unlock(v21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MDNOutputDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2164B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MDNOutputDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2164B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::ItemHolder<std::shared_ptr<MDN>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206698;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<MDN>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206698;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void DecompressAudio::decompress_generated_prompt(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v6 = *v5;
  uint64_t v16 = 0;
  BOOL v17 = 0;
  size_t v18 = 0;
  if (v6)
  {
    uint64_t v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v6);
    size_t v18 = (char *)v16 + 2 * v8;
    memmove(v16, v5 + 3, 2 * v6);
    BOOL v17 = (char *)v16 + 2 * v6;
    uint64_t v9 = *(unsigned __int16 **)(a2 + 16);
    uint64_t v10 = 2 * *v5 + 6;
  }
  else
  {
    uint64_t v10 = 6;
    uint64_t v9 = v5;
  }
  std::string __p = 0;
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  DecompressAudio::decompress_relevant_audio(a1, &v16, (uint64_t)v9 + v10 - *(void *)(a1 + 16), (uint64_t)&__p);
  uint64_t v11 = (__int16 *)((char *)__p + 2 * v5[1]);
  uint64_t v12 = (__int16 *)&v14[-2 * v5[2]];
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>(a3, v11, v12, v12 - v11);
  if (__p)
  {
    unint64_t v14 = (char *)__p;
    operator delete(__p);
  }
  if (v16)
  {
    BOOL v17 = (char *)v16;
    operator delete(v16);
  }
}

void sub_20D33964C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DecompressAudio::decompress_relevant_audio(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  std::vector<short>::resize(a4, 480 * (a2[1] - *a2));
  int v5 = ***(uint64_t (****)(void))(a1 + 8);
  return v5();
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>(void *a1, __int16 *a2, __int16 *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 2)
  {
    size_t v18 = (char *)a1[1];
    char v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 2;
    if (v19 >= a4)
    {
      uint64_t v25 = (float *)result;
      while (v6 != a3)
      {
        int v26 = *v6++;
        *v25++ = (float)v26;
      }
      BOOL v17 = (char *)((char *)v25 - result);
      uint64_t v12 = result;
    }
    else
    {
      uint64_t v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 2 * v19;
        do
        {
          int v22 = *v6++;
          *(float *)uint64_t result = (float)v22;
          result += 4;
          v21 -= 2;
        }
        while (v21);
      }
      std::vector<std::csub_match>::value_type v23 = (float *)v12;
      while (v20 != a3)
      {
        int v24 = *v20++;
        *v23++ = (float)v24;
      }
      BOOL v17 = (char *)((char *)v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](a1, v11);
    unint64_t v14 = (float *)a1[1];
    char v13 = a1 + 1;
    uint64_t v12 = (char *)v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = (float *)v12;
      do
      {
        int v16 = *v6++;
        *v15++ = (float)v16;
      }
      while (v6 != a3);
    }
    BOOL v17 = (char *)((char *)v15 - v12);
  }
  *char v13 = &v17[(void)v12];
  return result;
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void DecompressAudio::DecompressAudio(DecompressAudio *this, const AudioStreamBasicDescription *a2, const void *a3, int a4, const char *a5)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  *(void *)this = &off_26C200F70;
  operator new();
}

void sub_20D339BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  MEMORY[0x2105595E0](v16, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

uint64_t get_modification_vector_ix(uint64_t a1, uint64_t a2, float a3)
{
  if (a2 == a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 0;
  unint64_t v4 = (a2 - a1) >> 4;
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  uint64_t v5 = (float *)(a1 + 12);
  uint64_t result = 0xFFFFFFFFLL;
  do
  {
    if (*(v5 - 1) <= a3)
    {
      if (*v5 >= a3) {
        uint64_t result = v3;
      }
      else {
        uint64_t result = result;
      }
    }
    ++v3;
    v5 += 4;
  }
  while (v4 != v3);
  return result;
}

float get_f0_mod_value(int a1, uint64_t a2, uint64_t a3, float *a4, int a5, float a6, float a7)
{
  int modification_vector_ix = get_modification_vector_ix(a2, a3, a6);
  if (modification_vector_ix == -1
    || (float v14 = *(float *)(a2 + 16 * modification_vector_ix), v14 == 0.0)
    || (float v15 = *(float *)(a2 + 16 * modification_vector_ix + 4), v15 == 0.0))
  {
    *a4 = -1.0;
  }
  else
  {
    if (v14 != v15)
    {
      float v17 = (float)(a6 - *(float *)(a2 + 16 * modification_vector_ix + 8))
          / (float)(*(float *)(a2 + 16 * modification_vector_ix + 12)
                  - *(float *)(a2 + 16 * modification_vector_ix + 8));
      float v14 = (float)(v15 * v17) + (float)((float)(1.0 - v17) * v14);
    }
    *a4 = v14;
    return (float)a1 / (float)((float)a5 / v14);
  }
  return a7;
}

uint64_t get_volume_mod(uint64_t a1, uint64_t a2, float a3)
{
  return get_modification_vector_ix(a1, a2, a3);
}

float get_f0_mod_range(int a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  int modification_vector_ix = get_modification_vector_ix(a3, a4, a5);
  if (modification_vector_ix != -1)
  {
    uint64_t v12 = modification_vector_ix;
    char v13 = (float *)(a3 + 16 * modification_vector_ix);
    float v14 = (float)((float)a1 / *(float *)(a2 + 4 * modification_vector_ix)) + -1.0;
    if (v14 > 0.0) {
      float v14 = log(v14 + 1.0) / (float)((float)(v14 + 3.0) / 3.0) / 3.0;
    }
    float v15 = *v13;
    uint64_t v16 = (float *)(a3 + 16 * v12);
    float v17 = v16[1];
    if (*v13 == v17)
    {
      return a6 + (float)(v14 * a6) * (1.0 - v15);
    }
    else
    {
      float v19 = (float)(a5 - v16[2]) / (float)(v16[3] - v16[2]);
      double v20 = (float)(v14 * a6);
      float v21 = (1.0 - v15) * v20;
      float v22 = (1.0 - v17) * v20;
      return fmax((float)((float)((float)(v19 * v22) + (float)((float)(1.0 - v19) * v21)) + a6), 0.1);
    }
  }
  return a6;
}

void PitchmarkExtractorCore::PitchmarkData::~PitchmarkData(PitchmarkExtractorCore::PitchmarkData *this)
{
  int v2 = (void *)*((void *)this + 3);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void Psola::Psola(Psola *this, int a2)
{
  *((_DWORD *)this + 3) = a2;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v3 = (char *)this + 552;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  unint64_t v4 = (char *)this + 576;
  uint64_t v5 = (char *)this + 600;
  uint64_t v6 = (char *)this + 624;
  uint64_t v7 = (char *)this + 648;
  *(_WORD *)this = 0;
  bzero((char *)this + 72, 0x258uLL);
  *(void *)((char *)this + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0x42A0000042C80000;
  *((unsigned char *)this + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  MEMORY[0x210558E70](v3, "100");
  MEMORY[0x210558E70](v4, "0");
  MEMORY[0x210558E70](v5, "100");
  MEMORY[0x210558E70](v6, "100");
  MEMORY[0x210558E70](v7, "80");
}

void sub_20D33A068(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 671) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v1 + 647) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 623) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 599) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 575) < 0) {
    operator delete(*v3);
  }
  uint64_t v10 = *(void **)(v1 + 528);
  if (v10)
  {
    *(void *)(v1 + 536) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(v1 + 504);
  if (v11)
  {
    *(void *)(v1 + 512) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(v1 + 480);
  if (v12)
  {
    *(void *)(v1 + 488) = v12;
    operator delete(v12);
  }
  char v13 = *(void **)(v1 + 456);
  if (v13)
  {
    *(void *)(v1 + 46std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v13;
    operator delete(v13);
  }
  float v14 = *(void **)(v1 + 432);
  if (v14)
  {
    *(void *)(v1 + 440) = v14;
    operator delete(v14);
  }
  float v15 = *(void **)(v1 + 408);
  if (v15)
  {
    *(void *)(v1 + 416) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)(v1 + 384);
  if (v16)
  {
    *(void *)(v1 + 392) = v16;
    operator delete(v16);
  }
  float v17 = *(void **)(v1 + 360);
  if (v17)
  {
    *(void *)(v1 + 368) = v17;
    operator delete(v17);
  }
  size_t v18 = *(void **)(v1 + 336);
  if (v18)
  {
    *(void *)(v1 + 34std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v18;
    operator delete(v18);
  }
  float v19 = *(void **)(v1 + 312);
  if (v19)
  {
    *(void *)(v1 + 320) = v19;
    operator delete(v19);
  }
  double v20 = *(void **)(v1 + 288);
  if (v20)
  {
    *(void *)(v1 + 296) = v20;
    operator delete(v20);
  }
  float v21 = *(void **)(v1 + 264);
  if (v21)
  {
    *(void *)(v1 + 272) = v21;
    operator delete(v21);
  }
  float v22 = *(void **)(v1 + 240);
  if (v22)
  {
    *(void *)(v1 + 248) = v22;
    operator delete(v22);
  }
  std::vector<std::csub_match>::value_type v23 = *(void **)(v1 + 216);
  if (v23)
  {
    *(void *)(v1 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v23;
    operator delete(v23);
  }
  int v24 = *(void **)(v1 + 192);
  if (v24)
  {
    *(void *)(v1 + 200) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(v1 + 168);
  if (v25)
  {
    *(void *)(v1 + 176) = v25;
    operator delete(v25);
  }
  int v26 = *(void **)(v1 + 144);
  if (v26)
  {
    *(void *)(v1 + 152) = v26;
    operator delete(v26);
  }
  int v27 = *(void **)(v1 + 120);
  if (v27)
  {
    *(void *)(v1 + 128) = v27;
    operator delete(v27);
  }
  unsigned int v28 = *(void **)(v1 + 96);
  if (v28)
  {
    *(void *)(v1 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v28;
    operator delete(v28);
  }
  unsigned int v29 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v29;
    operator delete(v29);
  }
  size_t v30 = *(void **)(v1 + 40);
  if (v30) {
    operator delete(v30);
  }
  size_t v31 = *v8;
  if (*v8)
  {
    *(void *)(v1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void Psola::modify(uint64_t a1, int a2, float **a3, int **a4)
{
  if (a4[1] == *a4)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    v229 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)&v255[1] = 0;
      _os_log_impl(&dword_20CD80000, v229, OS_LOG_TYPE_DEBUG, "Pitchmark data size is 0, PSOLA modification is not performed.", &v255[1], 2u);
    }
    v231 = "Pitchmark data size is 0, PSOLA modification is not performed.";
    goto LABEL_271;
  }
  if (a3[1] == *a3)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::string::size_type v232 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)&v255[1] = 0;
      _os_log_impl(&dword_20CD80000, v232, OS_LOG_TYPE_DEBUG, "Samples size is 0, PSOLA modification is not performed.", &v255[1], 2u);
    }
    v231 = "Samples size is 0, PSOLA modification is not performed.";
LABEL_271:
    Diagnostics::log(7, v231, v230);
    return;
  }
  int v256 = 0;
  v257 = 0;
  memset(v255, 0, sizeof(v255));
  std::string __p = 0;
  v253 = 0;
  int v254 = 0;
  if (*(void *)(a1 + 264) != *(void *)(a1 + 272))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *a4;
      uint64_t v10 = (char *)a4[1] - (char *)*a4;
      int v11 = *(_DWORD *)(a1 + 12);
      if ((unint64_t)v10 < 5) {
        goto LABEL_17;
      }
      unint64_t v12 = 0;
      int v13 = 0;
      unint64_t v14 = v10 >> 2;
      float v15 = a4[3];
      if (v14 <= 2) {
        unint64_t v14 = 2;
      }
      unint64_t v16 = v14 - 1;
      float v17 = 0.0;
      do
      {
        unint64_t v18 = v12 + 1;
        int v19 = v9[v12 + 1];
        if ((float)(*(float *)(*(void *)(a1 + 312) + 4 * v8) * (float)v11) <= (float)v19
          && (float)(*(float *)(*(void *)(a1 + 336) + 4 * v8) * (float)v11) >= (float)v19
          && ((*(void *)((char *)v15 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) != 0
          && ((*(void *)((char *)v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
        {
          float v17 = v17 + (float)(v19 - v9[v12]);
          ++v13;
        }
        ++v12;
      }
      while (v16 != v18);
      if (v13 <= 0) {
LABEL_17:
      }
        float v20 = (double)v11 / 100.0;
      else {
        float v20 = v17 / (float)v13;
      }
      if (v7 >= (float *)v254)
      {
        float v22 = (float *)__p;
        uint64_t v23 = ((char *)v7 - (unsigned char *)__p) >> 2;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v25 = v254 - (unsigned char *)__p;
        if ((v254 - (unsigned char *)__p) >> 1 > v24) {
          unint64_t v24 = v25 >> 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v254, v26);
          float v22 = (float *)__p;
          uint64_t v7 = v253;
        }
        else
        {
          int v27 = 0;
        }
        unsigned int v28 = (float *)&v27[4 * v23];
        float *v28 = v20;
        float v21 = v28 + 1;
        while (v7 != v22)
        {
          int v29 = *((_DWORD *)v7-- - 1);
          *((_DWORD *)v28-- - 1) = v29;
        }
        std::string __p = v28;
        v253 = v21;
        int v254 = &v27[4 * v26];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        float *v7 = v20;
        float v21 = v7 + 1;
      }
      v253 = v21;
      ++v8;
      uint64_t v7 = v21;
    }
    while (v8 < (uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 2);
  }
  size_t v30 = (float *)a4[6];
  float v31 = 1.0;
  float f0_mod_value = 1.0;
  if (a4[7] != (int *)v30) {
    float f0_mod_value = *v30;
  }
  int v33 = (float *)a4[15];
  if (a4[16] != (int *)v33) {
    float v31 = *v33;
  }
  int v34 = *a3;
  BOOL v35 = a3[1];
  if (v35 != *a3)
  {
    int v244 = 0;
    signed int v36 = 0;
    int v37 = 0;
    int v38 = 0;
    unint64_t v39 = v35 - *a3;
    uint64_t v238 = a1 + 32;
    uint64_t v246 = a1 + 40;
    float v40 = 0.0;
    v247 = (float *)(a1 + 68);
    uint64_t v243 = (void **)(a1 + 16);
    char v41 = 1;
    while (1)
    {
      unsigned __int8 v42 = *a4;
      uint64_t v43 = (char *)a4[1] - (char *)*a4;
      signed int v44 = ((unint64_t)v43 >> 2) - 1;
      if (v44 >= 1)
      {
        int v45 = 0;
        int32x2_t v46 = vdup_n_s32(v36);
        do
        {
          int v47 = v45 + v44;
          if (v45 + v44 < 0 != __OFADD__(v45, v44)) {
            ++v47;
          }
          int v48 = v47 >> 1;
          int32x2_t v49 = vabd_s32(*(int32x2_t *)&v42[v48], v46);
          if (vcgt_u32((uint32x2_t)vdup_lane_s32(v49, 1), (uint32x2_t)v49).u8[0]) {
            signed int v44 = v48;
          }
          else {
            int v45 = v48 + 1;
          }
        }
        while (v45 < v44);
      }
      uint64_t v50 = v44;
      std::vector<std::pair<std::string, std::string>>::pointer v51 = a4[3];
      v255[0] = (*(void *)((char *)v51 + (((unint64_t)v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44) & 1;
      if ((v41 & 1) == 0) {
        break;
      }
      int v53 = *v42;
      uint64_t v52 = v42[1];
      uint64_t v55 = *(char **)(a1 + 24);
      unint64_t v54 = *(void *)(a1 + 32);
      if ((unint64_t)v55 >= v54)
      {
        BOOL v67 = (char *)*v243;
        uint64_t v68 = (v55 - (unsigned char *)*v243) >> 2;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v70 = v54 - (void)v67;
        if (v70 >> 1 > v69) {
          unint64_t v69 = v70 >> 1;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v69;
        }
        if (v71)
        {
          int v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v238, v71);
          BOOL v67 = *(char **)(a1 + 16);
          uint64_t v55 = *(char **)(a1 + 24);
        }
        else
        {
          int v72 = 0;
        }
        std::string::size_type v99 = &v72[4 * v68];
        *(_DWORD *)std::string::size_type v99 = *v42;
        unint64_t v56 = v99 + 4;
        while (v55 != v67)
        {
          int v100 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v99 - 1) = v100;
          v99 -= 4;
        }
        *(void *)(a1 + 16) = v99;
        *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v56;
        *(void *)(a1 + 32) = &v72[4 * v71];
        if (v67) {
          operator delete(v67);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v55 = v53;
        unint64_t v56 = v55 + 4;
      }
      *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v56;
      LOBYTE(v249) = *(unsigned char *)a4[3] & 1;
      std::vector<BOOL>::push_back(v246, &v249);
      int v101 = v52 - v53;
      uint64_t v102 = (v101 + 1);
      float v103 = (float)**a4;
      if (v255[0])
      {
        float v104 = (float)((float)((float)(int)v102 / v31) + v103) - (float)((float)((float)(int)v102 / v31) / f0_mod_value);
        int v105 = (int)v104 & ~((int)v104 >> 31);
      }
      else
      {
        int v105 = llroundf(v103 / v31);
      }
      float v106 = (float)v105 / (float)a2;
      get_volume_mod((uint64_t)a4[6], (uint64_t)a4[7], v106);
      float f0_mod_range = get_f0_mod_range(v101 + 1, (uint64_t)__p, (uint64_t)a4[12], (uint64_t)a4[13], v106, v107);
      float f0_mod_value = get_f0_mod_value(v101 + 1, (uint64_t)a4[9], (uint64_t)a4[10], v247, a2, v106, f0_mod_range);
      get_volume_mod((uint64_t)a4[15], (uint64_t)a4[16], v106);
      float v31 = v109;
      get_volume_mod((uint64_t)a4[18], (uint64_t)a4[19], v106);
      float v40 = v110;
      if ((v52 & 0x80000000) == 0)
      {
        uint64_t v111 = 0;
        uint64_t v112 = v52 + 1;
        int v113 = v256;
        do
        {
          float v114 = v40 * (*a3)[v111];
          if (v113 >= v257)
          {
            char v116 = *(float **)&v255[1];
            uint64_t v117 = ((uint64_t)v113 - *(void *)&v255[1]) >> 2;
            unint64_t v118 = v117 + 1;
            if ((unint64_t)(v117 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v119 = (uint64_t)v257 - *(void *)&v255[1];
            if (((uint64_t)v257 - *(void *)&v255[1]) >> 1 > v118) {
              unint64_t v118 = v119 >> 1;
            }
            if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v120 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v120 = v118;
            }
            if (v120)
            {
              unint64_t v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v257, v120);
              char v116 = *(float **)&v255[1];
              int v113 = v256;
            }
            else
            {
              unint64_t v121 = 0;
            }
            uint64_t v122 = (float *)&v121[4 * v117];
            float *v122 = v114;
            int v115 = v122 + 1;
            while (v113 != v116)
            {
              int v123 = *((_DWORD *)v113-- - 1);
              *((_DWORD *)v122-- - 1) = v123;
            }
            *(void *)&v255[1] = v122;
            int v256 = v115;
            v257 = (float *)&v121[4 * v120];
            if (v116) {
              operator delete(v116);
            }
          }
          else
          {
            *int v113 = v114;
            int v115 = v113 + 1;
          }
          int v256 = v115;
          ++v111;
          int v113 = v115;
        }
        while (v111 != v112);
      }
      if ((v101 & 0x80000000) == 0)
      {
        uint64_t v124 = 0;
        uint64_t v125 = *(void *)&v255[1] + 4 * **a4;
        do
        {
          float v126 = (1.0 - cos((double)((int)v102 + (int)v124) * 6.28318531 / ((double)(2 * (int)v102) + -1.0)))
               * 0.5
               * v40
               * *(float *)(v125 + 4 * v124);
          *(float *)(v125 + 4 * v124++) = v126;
        }
        while (v102 != v124);
      }
      if (v255[0])
      {
        std::string v127 = *a4;
        int v128 = **a4;
        int v129 = (int)(round(1.0 / v31 / f0_mod_value * (double)(int)v102) + (double)v128);
        if (v129 <= 1) {
          LODWORD(v130) = 1;
        }
        else {
          LODWORD(v130) = v129;
        }
        if (f0_mod_value < 0.5)
        {
          int v131 = ((unint64_t)((char *)a4[1] - (char *)v127) >> 2) - 1;
          LODWORD(v132) = v131;
          if (v131 >= 1)
          {
            int v133 = 0;
            uint64_t v132 = (const float *)(v127 + 1);
            int32x2_t v134 = (int32x2_t)vld1_dup_f32(v132);
            LODWORD(v132) = ((unint64_t)((char *)a4[1] - (char *)v127) >> 2) - 1;
            do
            {
              int v135 = v133 + v132;
              if (v133 + (int)v132 < 0 != __OFADD__(v133, v132)) {
                ++v135;
              }
              int v136 = v135 >> 1;
              int32x2_t v137 = vabd_s32(*(int32x2_t *)&v127[v136], v134);
              if (vcgt_u32((uint32x2_t)vdup_lane_s32(v137, 1), (uint32x2_t)v137).u8[0]) {
                LODWORD(v132) = v136;
              }
              else {
                int v133 = v136 + 1;
              }
            }
            while (v133 < (int)v132);
          }
          uint64_t v132 = (const float *)(int)v132;
          uint64_t v138 = a4[3];
          if ((*(void *)((char *)v138 + (((unint64_t)(int)v132 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v132))
          {
            if (v131 >= 1)
            {
              int v139 = 0;
              int32x2_t v140 = vdup_n_s32(v130);
              do
              {
                int v141 = v139 + v131;
                if (v139 + v131 < 0 != __OFADD__(v139, v131)) {
                  ++v141;
                }
                int v142 = v141 >> 1;
                int32x2_t v143 = vabd_s32(*(int32x2_t *)&v127[v142], v140);
                if (vcgt_u32((uint32x2_t)vdup_lane_s32(v143, 1), (uint32x2_t)v143).u8[0]) {
                  int v131 = v142;
                }
                else {
                  int v139 = v142 + 1;
                }
              }
              while (v139 < v131);
            }
            if (((*(void *)((char *)v138 + (((unint64_t)v131 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v131) & 1) == 0)
            {
              do
                uint64_t v132 = (const float *)((char *)v132 + 1);
              while (((*(void *)((char *)v138 + (((unint64_t)v132 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v132) & 1) != 0);
              LODWORD(v130) = v127[(void)v132];
            }
          }
        }
        if (*v247 >= 0.0) {
          int v144 = (int)(float)(roundf((float)*(int *)(a1 + 12) / *v247) + (float)v128);
        }
        else {
          int v144 = (int)(round((1.0 / f0_mod_value + -1.0) * (double)(int)v102) + (double)v127[1]);
        }
        if (v144 <= 1) {
          int v37 = 1;
        }
        else {
          int v37 = v144;
        }
      }
      else
      {
        int v37 = (*a4)[1];
        int v145 = (int)(round((1.0 / v31 + -1.0) * (double)(int)v102) + (double)v37);
        if (v145 <= 1) {
          LODWORD(v130) = 1;
        }
        else {
          LODWORD(v130) = v145;
        }
      }
LABEL_259:
      char v41 = 0;
      int v34 = *a3;
      BOOL v35 = a3[1];
      unint64_t v39 = v35 - *a3;
      signed int v36 = v130;
      if (v39 <= (int)v130) {
        goto LABEL_273;
      }
    }
    if ((v43 >> 2) - 1 <= (unint64_t)v44)
    {
      BOOL v73 = &v34[v42[(v43 >> 2) - 2]];
      uint64_t v249 = 0;
      uint64_t v250 = 0;
      uint64_t v251 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v249, v73, (uint64_t)&v34[v39], &v34[v39] - v73);
      uint64_t v75 = (float *)v249;
      std::vector<std::string>::pointer v74 = v250;
      uint64_t v76 = ((*a4)[v50] - (*a4)[v50 - 1]);
      if ((int)v76 >= 1)
      {
        for (uint64_t i = 0; i != v76; ++i)
        {
          float v78 = (1.0 - cos((double)(int)i * 6.28318531 / (double)(2 * (int)v76 - 1))) * 0.5 * v75[i];
          v75[i] = v78;
        }
      }
      unint64_t v79 = v74 - (unsigned char *)v75;
      LODWORD(v248[0]) = 0;
      std::vector<float>::resize((uint64_t)&v255[1], (int)(v37 - v76 + (v79 >> 2)), v248);
      if ((int)(v79 >> 2) >= 1)
      {
        std::string::size_type v80 = (float *)v249;
        uint64_t v81 = (v79 >> 2);
        BOOL v82 = (float *)(*(void *)&v255[1] + 4 * (v37 - (int)v76));
        do
        {
          float v83 = *v80++;
          *BOOL v82 = *v82 + (float)(v83 * v40);
          ++v82;
          --v81;
        }
        while (v81);
      }
      int v85 = *(int **)(a1 + 24);
      unint64_t v84 = *(void *)(a1 + 32);
      if ((unint64_t)v85 >= v84)
      {
        std::vector<std::string>::pointer v93 = (int *)*v243;
        uint64_t v94 = ((char *)v85 - (unsigned char *)*v243) >> 2;
        unint64_t v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v96 = v84 - (void)v93;
        if (v96 >> 1 > v95) {
          unint64_t v95 = v96 >> 1;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          long long v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v238, v97);
          std::vector<std::string>::pointer v93 = *(int **)(a1 + 16);
          int v85 = *(int **)(a1 + 24);
        }
        else
        {
          long long v98 = 0;
        }
        std::string::size_type v208 = (int *)&v98[4 * v94];
        *std::string::size_type v208 = v37;
        long long v86 = v208 + 1;
        while (v85 != v93)
        {
          int v209 = *--v85;
          *--std::string::size_type v208 = v209;
        }
        *(void *)(a1 + 16) = v208;
        *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v86;
        *(void *)(a1 + 32) = &v98[4 * v97];
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        *int v85 = v37;
        long long v86 = v85 + 1;
      }
      *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v86;
      std::vector<BOOL>::push_back(v246, v255);
      uint64_t v211 = *a3;
      uint64_t v210 = a3[1];
      if (v249)
      {
        uint64_t v250 = v249;
        operator delete(v249);
      }
      unint64_t v130 = (unint64_t)((char *)v210 - (char *)v211) >> 2;
      goto LABEL_259;
    }
    v242 = v38;
    if (v44 <= 0)
    {
      v255[0] = (*(unsigned char *)v51 & 2) != 0;
      signed int v44 = 1;
    }
    uint64_t v57 = (v44 - 1);
    int v58 = &v34[v42[v57]];
    uint64_t v59 = (v44 + 1);
    uint64_t v60 = (uint64_t)&v34[v42[v59]];
    uint64_t v249 = 0;
    uint64_t v250 = 0;
    uint64_t v251 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v249, v58, v60, (v60 - (uint64_t)v58) >> 2);
    int v61 = (*a4)[v44];
    int v241 = (*a4)[v57];
    v239 = v249;
    v240 = v250;
    int v62 = (*a4)[v59];
    uint64_t v64 = *(int **)(a1 + 24);
    unint64_t v63 = *(void *)(a1 + 32);
    if ((unint64_t)v64 >= v63)
    {
      unint64_t v87 = (int *)*v243;
      uint64_t v88 = ((char *)v64 - (unsigned char *)*v243) >> 2;
      unint64_t v89 = v88 + 1;
      int v66 = v242;
      if ((unint64_t)(v88 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v90 = v63 - (void)v87;
      if (v90 >> 1 > v89) {
        unint64_t v89 = v90 >> 1;
      }
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v91 = v89;
      }
      if (v91)
      {
        int v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v238, v91);
        unint64_t v87 = *(int **)(a1 + 16);
        uint64_t v64 = *(int **)(a1 + 24);
      }
      else
      {
        int v92 = 0;
      }
      uint64_t v146 = (int *)&v92[4 * v88];
      *uint64_t v146 = v37;
      size_t v65 = v146 + 1;
      while (v64 != v87)
      {
        int v147 = *--v64;
        *--uint64_t v146 = v147;
      }
      *(void *)(a1 + 16) = v146;
      *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v65;
      *(void *)(a1 + 32) = &v92[4 * v91];
      if (v87) {
        operator delete(v87);
      }
    }
    else
    {
      *uint64_t v64 = v37;
      size_t v65 = v64 + 1;
      int v66 = v242;
    }
    *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v65;
    std::vector<BOOL>::push_back(v246, v255);
    int v148 = v62 - v61;
    float v149 = (float)v36 / (float)*(int *)(a1 + 12);
    get_volume_mod((uint64_t)a4[6], (uint64_t)a4[7], v149);
    float v151 = get_f0_mod_range(v62 - v61, (uint64_t)__p, (uint64_t)a4[12], (uint64_t)a4[13], v149, v150);
    float f0_mod_value = get_f0_mod_value(v62 - v61, (uint64_t)a4[9], (uint64_t)a4[10], v247, a2, v149, v151);
    uint64_t v152 = (const PitchmarkExtractorCore::PitchmarkData *)*a4;
    if (*(unsigned char *)(a1 + 1))
    {
      int v153 = 0;
      uint64_t v154 = v44;
      unint64_t v155 = ((char *)a4[1] - (char *)v152) >> 2;
      uint64_t v156 = 4 * v44 + 4;
      float v157 = 0.0;
      uint64_t v158 = v156;
      uint64_t v159 = v44;
      for (uint64_t j = 1; j != 50; ++j)
      {
        if (v159 - 1 >= 0)
        {
          float v157 = v157 + (float)(*((_DWORD *)v152 + v159) - *((_DWORD *)v152 + (v159 - 1)));
          ++v153;
        }
        if (v155 > (unint64_t)v44 + j)
        {
          float v157 = v157 + (float)(*(_DWORD *)((char *)v152 + v158) - *(_DWORD *)((char *)v152 + v158 - 4));
          ++v153;
        }
        v158 += 4;
        --v159;
      }
      uint64_t v161 = 0;
      int v162 = 0;
      float v163 = 0.0;
      do
      {
        if (v154 - 1 >= 0)
        {
          float v163 = v163 + (float)(*((_DWORD *)v152 + v154) - *((_DWORD *)v152 + (v154 - 1)));
          ++v162;
        }
        if (v155 > (unint64_t)v44 + 1 + v161)
        {
          float v163 = v163 + (float)(*(_DWORD *)((char *)v152 + v156) - *(_DWORD *)((char *)v152 + v156 - 4));
          ++v162;
        }
        ++v161;
        v156 += 4;
        --v154;
      }
      while (v161 != 4);
      float f0_mod_value = fmax((float)((float)((float)((float)(v163 / (float)v162) / (float)(v157 / (float)v153)) + -1.0)+ f0_mod_value), 0.1);
    }
    get_volume_mod((uint64_t)a4[15], (uint64_t)a4[16], v149);
    float v31 = v164;
    get_volume_mod((uint64_t)a4[18], (uint64_t)a4[19], v149);
    float v40 = v165;
    Psola::construct_psola_window((Psola *)v248, v44, v255[0], f0_mod_value, v31, v152);
    if (v66) {
      operator delete(v66);
    }
    int v38 = (float *)v248[0];
    LODWORD(v248[0]) = 0;
    std::vector<float>::resize((uint64_t)&v255[1], v148 + v37, v248);
    unint64_t v166 = v240 - v239;
    unint64_t v167 = (unint64_t)(v240 - v239) >> 2;
    int v168 = v61 - v241;
    int v169 = v255[0];
    if (v255[0] || (f0_mod_value == 1.0 ? (BOOL v170 = v31 == 1.0) : (BOOL v170 = 0), v170))
    {
      BOOL v177 = __OFSUB__(v37, v168);
      int v178 = v37 - v168;
      if (v178 < 0 != v177)
      {
        if ((int)v167 >= 1)
        {
          uint64_t v179 = (float *)v249;
          uint64_t v180 = *(void *)&v255[1];
          uint64_t v181 = (v166 >> 2);
          std::string::size_type v182 = v38;
          do
          {
            if ((v178 & 0x80000000) == 0) {
              *(float *)(v180 + 4 * v178) = *(float *)(v180 + 4 * v178)
            }
                                                          + (float)((float)(v40 * *v179) * *v182);
            ++v182;
            ++v179;
            ++v178;
            --v181;
          }
          while (v181);
        }
      }
      else if ((int)v167 >= 1)
      {
        uint64_t v183 = (float *)v249;
        uint64_t v184 = (v166 >> 2);
        std::string v185 = (float *)(*(void *)&v255[1] + 4 * v178);
        long long v186 = v38;
        do
        {
          float v187 = *v183++;
          float v188 = v187;
          float v189 = *v186++;
          *std::string v185 = *v185 + (float)((float)(v40 * v188) * v189);
          ++v185;
          --v184;
        }
        while (v184);
      }
    }
    else
    {
      if (((*(unsigned char *)a1 != 0) & v244) == 1)
      {
        int v171 = v37 - v168;
        if (v37 >= v168)
        {
          if ((int)v167 >= 1)
          {
            std::string::size_type v217 = (char *)v249;
            uint64_t v218 = (v166 >> 2);
            std::string::size_type v219 = (float *)(*(void *)&v255[1] + 4 * v171);
            uint64_t v220 = (v167 << 32) - 0x100000000;
            do
            {
              *std::string::size_type v219 = *v219
                    + (float)((float)(v40 * *(float *)&v217[v220 >> 30]) * *(float *)((char *)v38 + (v220 >> 30)));
              ++v219;
              v220 -= 0x100000000;
              --v218;
            }
            while (v218);
            goto LABEL_200;
          }
        }
        else if ((int)v167 >= 1)
        {
          unsigned int v172 = v37 - v148;
          std::string::size_type v173 = (char *)v249;
          uint64_t v174 = *(void *)&v255[1];
          uint64_t v175 = (v166 >> 2);
          uint64_t v176 = (v167 << 32) - 0x100000000;
          do
          {
            if ((v172 & 0x80000000) == 0) {
              *(float *)(v174 + 4 * v172) = *(float *)(v174 + 4 * v172)
            }
                                            + (float)((float)(v40 * *(float *)&v173[v176 >> 30])
                                                    * *(float *)((char *)v38 + (v176 >> 30)));
            v176 -= 0x100000000;
            ++v172;
            --v175;
          }
          while (v175);
          goto LABEL_200;
        }
LABEL_252:
        v244 ^= 1u;
        goto LABEL_253;
      }
      BOOL v177 = __OFSUB__(v37, v168);
      int v212 = v37 - v168;
      if (v212 < 0 == v177)
      {
        if ((int)v167 >= 1)
        {
          v221 = (float *)v249;
          uint64_t v222 = (v166 >> 2);
          v223 = (float *)(*(void *)&v255[1] + 4 * v212);
          std::string::size_type v224 = v38;
          do
          {
            float v225 = *v221++;
            float v226 = v225;
            float v227 = *v224++;
            float *v223 = *v223 + (float)((float)(v40 * v226) * v227);
            ++v223;
            --v222;
          }
          while (v222);
          goto LABEL_200;
        }
        goto LABEL_252;
      }
      if ((int)v167 < 1) {
        goto LABEL_252;
      }
      std::string::size_type v213 = (float *)v249;
      uint64_t v214 = *(void *)&v255[1];
      uint64_t v215 = (v166 >> 2);
      std::string::size_type v216 = v38;
      do
      {
        if ((v212 & 0x80000000) == 0) {
          *(float *)(v214 + 4 * v212) = *(float *)(v214 + 4 * v212)
        }
                                                      + (float)((float)(v40 * *v213) * *v216);
        ++v216;
        ++v213;
        ++v212;
        --v215;
      }
      while (v215);
    }
LABEL_200:
    BOOL v190 = v169 == 0;
    v244 ^= 1u;
    if (v169)
    {
      int v191 = llround(1.0 / v31 / f0_mod_value * (double)v148);
      if (v191 <= 1) {
        int v191 = 1;
      }
      LODWORD(v130) = v191 + v36;
      if (f0_mod_value < 0.5)
      {
        std::__shared_count v192 = *a4;
        int v193 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
        LODWORD(v19std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v193;
        if (v193 >= 1)
        {
          int v195 = 0;
          int32x2_t v196 = vdup_n_s32(v36);
          LODWORD(v19std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
          do
          {
            int v197 = v195 + v194;
            if (v195 + (int)v194 < 0 != __OFADD__(v195, v194)) {
              ++v197;
            }
            int v198 = v197 >> 1;
            int32x2_t v199 = vabd_s32(*(int32x2_t *)&v192[v198], v196);
            if (vcgt_u32((uint32x2_t)vdup_lane_s32(v199, 1), (uint32x2_t)v199).u8[0]) {
              LODWORD(v19std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v198;
            }
            else {
              int v195 = v198 + 1;
            }
          }
          while (v195 < (int)v194);
        }
        unint64_t v194 = (int)v194;
        std::string::size_type v200 = a4[3];
        if ((*(void *)((char *)v200 + (((unint64_t)(int)v194 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v194))
        {
          if (v193 >= 1)
          {
            int v201 = 0;
            int32x2_t v202 = vdup_n_s32(v130);
            do
            {
              int v203 = v201 + v193;
              if (v201 + v193 < 0 != __OFADD__(v201, v193)) {
                ++v203;
              }
              int v204 = v203 >> 1;
              int32x2_t v205 = vabd_s32(*(int32x2_t *)&v192[v204], v202);
              if (vcgt_u32((uint32x2_t)vdup_lane_s32(v205, 1), (uint32x2_t)v205).u8[0]) {
                int v193 = v204;
              }
              else {
                int v201 = v204 + 1;
              }
            }
            while (v201 < v193);
          }
          if (((*(void *)((char *)v200 + (((unint64_t)v193 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v193) & 1) == 0)
          {
            do
              ++v194;
            while (((*(void *)((char *)v200 + ((v194 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v194) & 1) != 0);
            LODWORD(v130) = v192[v194];
          }
        }
      }
      v244 &= v190;
      if (*v247 >= 0.0)
      {
        int v37 = (int)(float)(roundf((float)*(int *)(a1 + 12) / *v247) + (float)v37);
        goto LABEL_257;
      }
      double v206 = round(1.0 / f0_mod_value * (double)v148);
      double v207 = (double)v37;
LABEL_256:
      int v37 = (int)(v206 + v207);
LABEL_257:
      if (v249)
      {
        uint64_t v250 = v249;
        operator delete(v249);
      }
      goto LABEL_259;
    }
LABEL_253:
    double v207 = (double)v148;
    int v228 = llround(1.0 / v31 * (double)v148);
    if (v228 <= 1) {
      int v228 = 1;
    }
    LODWORD(v130) = v228 + v36;
    double v206 = (double)v37;
    goto LABEL_256;
  }
  int v38 = 0;
  int v34 = a3[1];
LABEL_273:
  std::string::size_type v234 = *(float **)&v255[1];
  v233 = v256;
  if (v256 != *(float **)&v255[1])
  {
    unint64_t v235 = ((uint64_t)v256 - *(void *)&v255[1]) >> 2;
    if (v235 <= 1) {
      unint64_t v235 = 1;
    }
    v236 = *(float **)&v255[1];
    do
    {
      if (fabsf(*v236) > 32766.0) {
        float *v236 = (float)(int)(32766 * ((__PAIR64__(*v236 > 0.0, *(_DWORD *)v236) - COERCE_UNSIGNED_INT(0.0)) >> 32));
      }
      ++v236;
      --v235;
    }
    while (v235);
  }
  *(void *)&v255[1] = v34;
  int v256 = v35;
  *a3 = v234;
  a3[1] = v233;
  v237 = v257;
  v257 = a3[2];
  a3[2] = v237;
  if (__p)
  {
    v253 = (float *)__p;
    operator delete(__p);
  }
  if (v38) {
    operator delete(v38);
  }
  if (*(void *)&v255[1])
  {
    int v256 = *(float **)&v255[1];
    operator delete(*(void **)&v255[1]);
  }
}

void sub_20D33B504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a31) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

float Psola::construct_psola_window(Psola *this, unsigned int a2, int a3, float a4, float a5, const PitchmarkExtractorCore::PitchmarkData *a6)
{
  v40[1] = *MEMORY[0x263EF8340];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a3 && a4 > 1.0)
  {
    double v8 = a4 + -1.0;
    if (v8 > 0.6) {
      double v8 = 0.6;
    }
    int v9 = *((_DWORD *)a6 + a2);
    float v10 = v8;
    int v11 = v9 - *((_DWORD *)a6 + a2 - 1);
    int v12 = *((_DWORD *)a6 + a2 + 1) - v9;
    int v13 = llroundf(v10 * (float)v11);
    uint64_t v14 = (v11 - v13);
    LODWORD(v6) = llroundf(v10 * (float)v12);
    uint64_t v15 = (v12 - v6);
    uint64_t v16 = MEMORY[0x270FA5388](this);
    unint64_t v18 = (float *)((char *)v40 - v17);
    MEMORY[0x270FA5388](v16);
    float v20 = (float *)((char *)v40 - v19);
    vDSP_hann_window(v18, 2 * (int)v14 - 1, 1);
    vDSP_hann_window(v20, 2 * (int)v15 - 1, 1);
    std::vector<float>::resize((uint64_t)this, v12 + v11);
    if (v13 >= 1) {
      bzero(*(void **)this, 4 * v13);
    }
    if ((int)v14 >= 1)
    {
      float v22 = (float *)(*(void *)this + 4 * v13);
      do
      {
        float v23 = *v18++;
        float result = v23;
        *v22++ = v23;
        --v14;
      }
      while (v14);
    }
    if ((int)v6 >= 1)
    {
      uint64_t v24 = *(void *)this;
      int v25 = v11;
      uint64_t v26 = v6;
      do
      {
        *(_DWORD *)(v24 + 4 * v25++) = 1065353216;
        --v26;
      }
      while (v26);
    }
    if ((int)v15 >= 1)
    {
      int v27 = (float *)(*(void *)this + 4 * (v11 + (int)v6));
      do
      {
        float result = v20[(int)--v15];
        *v27++ = result;
      }
      while (v15);
    }
  }
  else
  {
    int v28 = *((_DWORD *)a6 + a2);
    uint64_t v29 = (v28 - *((_DWORD *)a6 + a2 - 1));
    uint64_t v30 = (*((_DWORD *)a6 + a2 + 1) - v28);
    uint64_t v31 = MEMORY[0x270FA5388](this);
    int v33 = (float *)((char *)v40 - v32);
    MEMORY[0x270FA5388](v31);
    BOOL v35 = (float *)((char *)v40 - v34);
    vDSP_hann_window(v33, 2 * (int)v29 - 1, 1);
    vDSP_hann_window(v35, 2 * (int)v30 - 1, 1);
    std::vector<float>::resize((uint64_t)this, (int)v30 + (int)v29);
    if ((int)v29 >= 1)
    {
      signed int v36 = *(float **)this;
      uint64_t v37 = v29;
      do
      {
        float v38 = *v33++;
        float result = v38;
        *v36++ = v38;
        --v37;
      }
      while (v37);
    }
    if ((int)v30 >= 1)
    {
      uint64_t v39 = *(void *)this;
      do
      {
        float result = v35[(int)--v30];
        *(float *)(v39 + 4 * (int)v29) = result;
        LODWORD(v29) = v29 + 1;
      }
      while (v30);
    }
  }
  return result;
}

void sub_20D33B894(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AsyncContainerModule::process_data(uint64_t a1, uint64_t *a2)
{
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x3802000000;
  v20[3] = __Block_byref_object_copy_;
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v20[4] = __Block_byref_object_dispose_;
  v20[5] = v4;
  float v21 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x3802000000;
  v18[3] = __Block_byref_object_copy__3;
  uint64_t v6 = *(void *)(a1 + 272);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 280);
  v18[4] = __Block_byref_object_dispose__4;
  v18[5] = v6;
  uint64_t v19 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = 0;
  int v13 = (std::promise<void> *)&v12;
  uint64_t v14 = 0x3002000000;
  uint64_t v15 = __Block_byref_object_copy__5;
  uint64_t v16 = __Block_byref_object_dispose__6;
  std::promise<void>::promise(&v17);
  std::promise<void>::get_future(v13 + 5);
  state = v11.__state_;
  v11.__state_ = 0;
  v22.__state_ = *(std::__assoc_sub_state **)(a1 + 288);
  *(void *)(a1 + 288) = state;
  std::future<void>::~future(&v22);
  std::future<void>::~future(&v11);
  qos_class_t v8 = qos_class_self();
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  v10[2] = ___ZN20AsyncContainerModule12process_dataENSt3__110shared_ptrI11AgglomerateEE_block_invoke;
  v10[3] = &unk_264113EE0;
  v10[4] = v18;
  v10[5] = v20;
  v10[6] = &v12;
  v10[7] = a1;
  dispatch_block_t v9 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v8, 0, v10);
  dispatch_async(*(dispatch_queue_t *)(a1 + 496), v9);
  _Block_release(v9);
  _Block_object_dispose(&v12, 8);
  MEMORY[0x2105594C0](&v17);
  _Block_object_dispose(v18, 8);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Block_object_dispose(v20, 8);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_20D33BACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  _Block_object_dispose(&a18, 8);
  MEMORY[0x2105594C0](v30);
  _Block_object_dispose(&a24, 8);
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  _Block_object_dispose((const void *)(v31 - 96), 8);
  int v33 = *(std::__shared_weak_count **)(v31 - 48);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6()
{
}

void ___ZN20AsyncContainerModule12process_dataENSt3__110shared_ptrI11AgglomerateEE_block_invoke(void *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[7];
  std::mutex::lock((std::mutex *)(v2 + 296));
  int v3 = *(unsigned __int8 *)(v2 + 160);
  if (!*(unsigned char *)(v2 + 160))
  {
    uint64_t v4 = *(void *)(*(void *)(a1[4] + 8) + 40);
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
    std::mutex::unlock((std::mutex *)(v2 + 296));
    uint64_t v5 = *(void *)(*(void *)(a1[4] + 8) + 40);
    uint64_t v6 = *(void *)(a1[5] + 8);
    uint64_t v8 = *(void *)(v6 + 40);
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 48);
    uint64_t v10 = v8;
    std::future<void> v11 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 32))(v5, &v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v9 = *(void *)(*(void *)(a1[4] + 8) + 40);
    (*(void (**)(uint64_t))(*(void *)v9 + 64))(v9);
  }
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 424));
  std::promise<void>::set_value((std::promise<void> *)(*(void *)(a1[6] + 8) + 40));
  if (v3) {
    std::mutex::unlock((std::mutex *)(v2 + 296));
  }
}

void sub_20D33BCF0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, long long buf)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 1)
  {
    uint64_t v14 = __cxa_begin_catch(a1);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_FAULT))
    {
      uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v16;
      _os_log_fault_impl(&dword_20CD80000, v15, OS_LOG_TYPE_FAULT, "Async module worker exception: %s", (uint8_t *)&buf, 0xCu);
    }
    *(unsigned char *)(v11 + 472) = 1;
    std::condition_variable::notify_all((std::condition_variable *)(v11 + 424));
    __cxa_end_catch();
    JUMPOUT(0x20D33BC64);
  }
  _Unwind_Resume(a1);
}

void AsyncContainerModule::cancel(AsyncContainerModule *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 296);
  std::mutex::lock((std::mutex *)((char *)this + 296));
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  *((unsigned char *)this + 160) = 1;
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 208));
  (*(void (**)(void))(**((void **)this + 34) + 48))(*((void *)this + 34));
  std::mutex::unlock(v2);
}

void sub_20D33BE84(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AsyncContainerModule::prepare(AsyncContainerModule *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 34) + 40))();
}

void AsyncContainerModule::retrieve(AsyncContainerModule *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 160))
  {
    uint64_t v4 = (void **)*((void *)this + 15);
    uint64_t v5 = (void **)*((void *)this + 16);
    if (v5 == v4)
    {
      uint64_t v6 = (void *)((char *)this + 152);
      uint64_t v5 = (void **)*((void *)this + 15);
    }
    else
    {
      uint64_t v6 = (void *)((char *)this + 152);
      unint64_t v7 = *((void *)this + 18);
      uint64_t v8 = &v4[v7 >> 8];
      uint64_t v9 = (uint64_t)*v8;
      uint64_t v10 = (uint64_t)*v8 + 16 * v7;
      uint64_t v11 = *(uint64_t *)((char *)v4 + (((*((void *)this + 19) + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*((unsigned char *)this + 152) + v7);
      if (v10 != v11)
      {
        do
        {
          uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
          if (v12)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            uint64_t v9 = (uint64_t)*v8;
          }
          v10 += 16;
          if (v10 - v9 == 4096)
          {
            uint64_t v13 = (uint64_t)v8[1];
            ++v8;
            uint64_t v9 = v13;
            uint64_t v10 = v13;
          }
        }
        while (v10 != v11);
        uint64_t v4 = (void **)*((void *)this + 15);
        uint64_t v5 = (void **)*((void *)this + 16);
      }
    }
    void *v6 = 0;
    unint64_t v23 = (char *)v5 - (char *)v4;
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
    {
      do
      {
        operator delete(*v4);
        uint64_t v24 = *((void *)this + 16);
        uint64_t v4 = (void **)(*((void *)this + 15) + 8);
        *((void *)this + 15) = v4;
        unint64_t v23 = v24 - (void)v4;
      }
      while (v23 > 0x10);
    }
    if (v23 >> 3 == 1)
    {
      uint64_t v25 = 128;
    }
    else
    {
      if (v23 >> 3 != 2)
      {
LABEL_40:
        Module::retrieve(this, (uint64_t)a2);
        return;
      }
      uint64_t v25 = 256;
    }
    *((void *)this + 18) = v25;
    goto LABEL_40;
  }
  if (*((unsigned char *)this + 472))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Exception in AsyncContainerModule worker.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (*((void *)this + 19)) {
    goto LABEL_40;
  }
  uint64_t v14 = *((void *)this + 36);
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  m = (std::mutex *)(v14 + 24);
  v29.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v14 + 24);
  v29.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v14 + 24));
  unsigned int v17 = *(_DWORD *)(v14 + 136);
  if ((v17 & 8) != 0)
  {
    int v26 = 2;
    goto LABEL_48;
  }
  if ((v17 & 4) != 0)
  {
    int v26 = ((v17 >> 2) & 1) == 0;
    goto LABEL_48;
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v15.__d_.__rep_)
  {
    if (std::chrono::steady_clock::now().__d_.__rep_ < v15.__d_.__rep_)
    {
      v18.__d_.__rep_ = v15.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v18.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v19.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 0;
          goto LABEL_25;
        }
        if (v19.__d_.__rep_ < 1)
        {
          if ((unint64_t)v19.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_24;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v19.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_25;
          }
LABEL_24:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 1000 * v19.__d_.__rep_;
LABEL_25:
          if (v20 > (v18.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v21.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_28;
          }
        }
        v21.__d_.__rep_ = v20 + v18.__d_.__rep_;
LABEL_28:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(v14 + 88), &v29, v21);
        std::chrono::steady_clock::now();
      }
      std::chrono::steady_clock::now();
    }
    unsigned int v22 = *(_DWORD *)(v14 + 136);
    if ((v22 & 4) != 0) {
      goto LABEL_46;
    }
  }
  unsigned int v22 = *(_DWORD *)(v14 + 136);
LABEL_46:
  int v26 = ((v22 >> 2) & 1) == 0;
  if (v29.__owns_)
  {
    m = v29.__m_;
LABEL_48:
    std::mutex::unlock(m);
  }
  if (v26)
  {
    v29.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 360);
    v29.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)this + 360));
    std::condition_variable::wait((std::condition_variable *)((char *)this + 424), &v29);
    if (*((unsigned char *)this + 472))
    {
      int v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v28, "Exception in AsyncContainerModule worker.");
      __cxa_throw(v28, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    Module::retrieve(this, (uint64_t)a2);
    if (v29.__owns_) {
      std::mutex::unlock(v29.__m_);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_20D33C224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(a1);
}

void AsyncContainerModule::~AsyncContainerModule(AsyncContainerModule *this)
{
  AsyncContainerModule::~AsyncContainerModule(this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const void **v6[2];
  uint64_t vars8;

  *(void *)this = off_26C202AF8;
  AsyncContainerModule::cancel(this);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 424));
  uint64_t v2 = *((void *)this + 34) + 8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 61);
  v6[0] = *((const void ***)this + 60);
  v6[1] = (const void **)&v3->__vftable;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Observable::remove_observer(v2, v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  dispatch_barrier_sync(*((dispatch_queue_t *)this + 62), &__block_literal_global_1180);
  dispatch_release(*((dispatch_object_t *)this + 62));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 424));
  std::mutex::~mutex((std::mutex *)((char *)this + 360));
  std::mutex::~mutex((std::mutex *)((char *)this + 296));
  std::future<void>::~future((std::future<void> *)this + 36);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  Module::~Module(this);
}

char **std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::target_type()
{
}

uint64_t std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 360));
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v1 + 272) + 16))(&v2);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v1 + 72))(v1, &v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::condition_variable::notify_all((std::condition_variable *)(v1 + 424));
  std::mutex::unlock((std::mutex *)(v1 + 360));
}

void sub_20D33C48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_26C212AC8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_26C212AC8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0,std::allocator<AsyncContainerModule::AsyncContainerModule(std::shared_ptr<Module>)::$_0>,void ()(void const*)>::~__func()
{
}

std::string *TrackSubstitutions::reset_text(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*(void **)(a1 + 8));
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  void *v4 = 0;
  uint64_t v5 = operator new(0x38uLL);
  v5[4] = 0;
  v5[5] = 0;
  *((unsigned char *)v5 + 48) = 0;
  uint64_t v6 = (uint64_t **)std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>(a1, &v9, 0, 0);
  if (*v6) {
    operator delete(v5);
  }
  else {
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)a1, v9, v6, v5);
  }
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v7 = *(void *)(a2 + 8);
  }
  std::__tree<TrackSubstitutions::Chunk>::__emplace_unique_impl<unsigned long,unsigned long,BOOL>((uint64_t **)a1, v7, v7, 1);
  return std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2);
}

void std::__tree<TrackSubstitutions::Chunk>::__emplace_unique_impl<unsigned long,unsigned long,BOOL>(uint64_t **a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v8 = operator new(0x38uLL);
  v8[4] = a2;
  v8[5] = a3;
  *((unsigned char *)v8 + 48) = a4;
  uint64_t v9 = (uint64_t **)std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>((uint64_t)a1, &v11, a2, a3);
  if (*v9)
  {
    operator delete(v8);
  }
  else
  {
    uint64_t v10 = v11;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v10, v9, v8);
  }
}

void *std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>(uint64_t a1, void *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6 = *(void **)(a1 + 8);
  __n128 result = (void *)(a1 + 8);
  uint64_t v5 = v6;
  if (v6)
  {
    while (1)
    {
      unint64_t v7 = v5;
      unint64_t v8 = v5[4];
      if (v8 > a3) {
        goto LABEL_6;
      }
      if (v8 != a3)
      {
        BOOL v10 = v8 >= a3;
        goto LABEL_8;
      }
      unint64_t v9 = v7[5];
      BOOL v10 = v9 >= a4;
      if (v9 <= a4)
      {
LABEL_8:
        if (v10) {
          goto LABEL_12;
        }
        __n128 result = v7 + 1;
        uint64_t v5 = (void *)v7[1];
        if (!v5) {
          goto LABEL_12;
        }
      }
      else
      {
LABEL_6:
        uint64_t v5 = (void *)*v7;
        __n128 result = v7;
        if (!*v7) {
          goto LABEL_12;
        }
      }
    }
  }
  unint64_t v7 = result;
LABEL_12:
  *a2 = v7;
  return result;
}

void TrackSubstitutions::add_substitution(TrackSubstitutions *this, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  if (a3 != a4)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a2;
    unint64_t v8 = (void *)((char *)this + 8);
    unint64_t v7 = (char *)*((void *)this + 1);
    if (v7)
    {
      do
      {
        unint64_t v9 = v7;
        unint64_t v7 = (char *)*((void *)v7 + 1);
      }
      while (v7);
    }
    else
    {
      BOOL v10 = (char *)this + 8;
      do
      {
        unint64_t v9 = (char *)*((void *)v10 + 2);
        BOOL v11 = *(void *)v9 == (void)v10;
        BOOL v10 = v9;
      }
      while (v11);
    }
    unint64_t v12 = *((void *)v9 + 4);
    if (a3 + a2 > v12)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134218496;
        *(void *)&uint8_t buf[4] = v4;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2048;
        unint64_t v73 = v12;
        _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_DEBUG, "TrackSubstitution: origin %zu@%zu beyond limit %zu, truncating", buf, 0x20u);
      }
      Diagnostics::log(7, "TrackSubstitution: origin %zu@%zu beyond limit %zu, truncating", v14, v4, v5, v12);
      if (v12 >= v5)
      {
        unint64_t v4 = v12 - v5;
      }
      else
      {
        unint64_t v5 = v12;
        unint64_t v4 = 0;
      }
    }
    std::chrono::steady_clock::time_point v15 = (void *)*v8;
    uint64_t v16 = v8;
    if (!*v8) {
      goto LABEL_104;
    }
    uint64_t v16 = v8;
    unsigned int v17 = (void *)*v8;
    do
    {
      unint64_t v18 = v17[4];
      BOOL v19 = v5 >= v18;
      if (v5 >= v18) {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = v17 + 1;
      }
      else {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = v17;
      }
      if (!v19) {
        uint64_t v16 = v17;
      }
      unsigned int v17 = (void *)*v20;
    }
    while (*v20);
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v21 = (void *)*v16;
    if (*v16)
    {
      do
      {
        unsigned int v22 = v21;
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v21 = (void *)v21[1];
      }
      while (v21);
    }
    else
    {
LABEL_104:
      do
      {
        unsigned int v22 = (void *)v16[2];
        BOOL v11 = *v22 == (void)v16;
        uint64_t v16 = v22;
      }
      while (v11);
    }
    unint64_t v23 = v5 + v4;
    uint64_t v24 = v8;
    if (v15)
    {
      uint64_t v24 = v8;
      do
      {
        unint64_t v25 = v15[4];
        BOOL v26 = v25 >= v23;
        if (v25 >= v23) {
          int v27 = v15;
        }
        else {
          int v27 = v15 + 1;
        }
        if (v26) {
          uint64_t v24 = v15;
        }
        std::chrono::steady_clock::time_point v15 = (void *)*v27;
      }
      while (*v27);
    }
    uint64_t v28 = v22[4];
    uint64_t v29 = v24[4];
    uint64_t v30 = v5 - v28;
    if (v5 == v28)
    {
      uint64_t v69 = 0;
    }
    else
    {
      if (*((unsigned char *)v22 + 48))
      {
        unint64_t v5 = v22[4];
        uint64_t v31 = 0;
      }
      else
      {
        uint64_t v31 = v5 - v28;
      }
      uint64_t v69 = v31;
      if (*((unsigned char *)v22 + 48)) {
        v4 += v30;
      }
    }
    if (v29 == v23)
    {
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v33 = v29 - v23;
      uint64_t v34 = *v24;
      if (*v24)
      {
        do
        {
          uint64_t v35 = v34;
          uint64_t v34 = *(void *)(v34 + 8);
        }
        while (v34);
      }
      else
      {
        signed int v36 = v24;
        do
        {
          uint64_t v35 = v36[2];
          BOOL v11 = *(void *)v35 == (void)v36;
          signed int v36 = (void *)v35;
        }
        while (v11);
      }
      int v37 = *(unsigned __int8 *)(v35 + 48);
      if (v37) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v33;
      }
      if (!v37) {
        uint64_t v33 = 0;
      }
      v4 += v33;
    }
    *(_OWORD *)&buf[8] = 0uLL;
    *(void *)std::string buf = &buf[8];
    uint64_t v38 = v22[5];
    uint64_t v39 = operator new(0x38uLL);
    v39[4] = v5;
    v39[5] = v38 + v69;
    *((unsigned char *)v39 + 48) = 1;
    float v40 = std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>((uint64_t)buf, &v71, v5, v38 + v69);
    if (*v40)
    {
      operator delete(v39);
      uint64_t v41 = v32;
    }
    else
    {
      uint64_t v42 = v71;
      *uint64_t v39 = 0;
      v39[1] = 0;
      v39[2] = v42;
      *float v40 = v39;
      uint64_t v41 = v32;
      if (**(void **)buf)
      {
        *(void *)std::string buf = **(void **)buf;
        uint64_t v39 = (void *)*v40;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v39);
      ++*(void *)&buf[16];
    }
    if (v69)
    {
      uint64_t v43 = operator new(0x38uLL);
      unint64_t v44 = v22[4];
      unint64_t v45 = v22[5];
      v43[4] = v44;
      v43[5] = v45;
      *((unsigned char *)v43 + 48) = 0;
      int32x2_t v46 = std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>((uint64_t)buf, &v71, v44, v45);
      if (*v46)
      {
        operator delete(v43);
      }
      else
      {
        uint64_t v47 = v71;
        void *v43 = 0;
        v43[1] = 0;
        v43[2] = v47;
        *int32x2_t v46 = v43;
        if (**(void **)buf)
        {
          *(void *)std::string buf = **(void **)buf;
          uint64_t v43 = (void *)*v46;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v43);
        ++*(void *)&buf[16];
      }
    }
    if (v41) {
      std::__tree<TrackSubstitutions::Chunk>::__emplace_unique_impl<unsigned long,unsigned long,BOOL>((uint64_t **)buf, v5 + a4, v24[5] - v41, 0);
    }
    if (v24 != v8)
    {
      uint64_t v48 = a4 - v4;
      do
      {
        uint64_t v49 = v24[4];
        uint64_t v50 = operator new(0x38uLL);
        unint64_t v51 = v24[5];
        char v52 = *((unsigned char *)v24 + 48);
        v50[4] = v48 + v49;
        v50[5] = v51;
        *((unsigned char *)v50 + 48) = v52;
        int v53 = std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>(buf, &buf[8], &v71, &v70, v48 + v49, v51);
        if (*v53)
        {
          operator delete(v50);
        }
        else
        {
          uint64_t v54 = v71;
          void *v50 = 0;
          v50[1] = 0;
          v50[2] = v54;
          *int v53 = v50;
          if (**(void **)buf)
          {
            *(void *)std::string buf = **(void **)buf;
            uint64_t v50 = (void *)*v53;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v50);
          ++*(void *)&buf[16];
        }
        uint64_t v55 = (void *)v24[1];
        if (v55)
        {
          do
          {
            unint64_t v56 = v55;
            uint64_t v55 = (void *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            unint64_t v56 = (void *)v24[2];
            BOOL v11 = *v56 == (void)v24;
            uint64_t v24 = v56;
          }
          while (!v11);
        }
        uint64_t v24 = v56;
      }
      while (v56 != v8);
    }
    if (v22 != v8)
    {
      do
      {
        uint64_t v57 = (void *)v22[1];
        int v58 = v22;
        if (v57)
        {
          do
          {
            uint64_t v59 = v57;
            uint64_t v57 = (void *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            uint64_t v59 = (void *)v58[2];
            BOOL v11 = *v59 == (void)v58;
            int v58 = v59;
          }
          while (!v11);
        }
        if (*(void **)this == v22) {
          *(void *)this = v59;
        }
        uint64_t v60 = (uint64_t *)*((void *)this + 1);
        --*((void *)this + 2);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v60, v22);
        operator delete(v22);
        unsigned int v22 = v59;
      }
      while (v59 != v8);
    }
    int v61 = *(void **)buf;
    if (*(unsigned char **)buf != &buf[8])
    {
      do
      {
        int v62 = (uint64_t **)std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>(this, v8, &v71, &v70, v61[4], v61[5]);
        if (!*v62)
        {
          unint64_t v63 = v62;
          uint64_t v64 = operator new(0x38uLL);
          long long v65 = *((_OWORD *)v61 + 2);
          v64[6] = v61[6];
          *((_OWORD *)v64 + 2) = v65;
          std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)this, v71, v63, v64);
        }
        int v66 = (void *)v61[1];
        if (v66)
        {
          do
          {
            BOOL v67 = v66;
            int v66 = (void *)*v66;
          }
          while (v66);
        }
        else
        {
          do
          {
            BOOL v67 = (unsigned char *)v61[2];
            BOOL v11 = *(void *)v67 == (void)v61;
            int v61 = v67;
          }
          while (!v11);
        }
        int v61 = v67;
      }
      while (v67 != &buf[8]);
    }
    std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*(void **)&buf[8]);
  }
}

void sub_20D33CCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void *std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>(void *a1, void *a2, void *a3, void *a4, unint64_t a5, unint64_t a6)
{
  if (a1 + 1 == a2) {
    goto LABEL_6;
  }
  unint64_t v6 = a2[4];
  if (v6 > a5) {
    goto LABEL_6;
  }
  if (v6 != a5)
  {
    BOOL v14 = v6 >= a5;
    goto LABEL_20;
  }
  unint64_t v7 = a2[5];
  BOOL v14 = v7 >= a6;
  if (v7 > a6)
  {
LABEL_6:
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      BOOL v10 = a2;
    }
    else
    {
      if (v8)
      {
        unint64_t v9 = (void *)*a2;
        do
        {
          BOOL v10 = v9;
          unint64_t v9 = (void *)v9[1];
        }
        while (v9);
      }
      else
      {
        BOOL v11 = a2;
        do
        {
          BOOL v10 = (void *)v11[2];
          BOOL v12 = *v10 == (void)v11;
          BOOL v11 = v10;
        }
        while (v12);
      }
      unint64_t v13 = v10[4];
      if (v13 >= a5 && (v13 != a5 || v10[5] >= a6)) {
        return std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>((uint64_t)a1, a3, a5, a6);
      }
    }
    if (v8)
    {
      *a3 = v10;
      return v10 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
LABEL_20:
  if (!v14)
  {
    uint64_t v15 = a2[1];
    if (v15)
    {
      uint64_t v16 = (void *)a2[1];
      do
      {
        a4 = v16;
        uint64_t v16 = (void *)*v16;
      }
      while (v16);
    }
    else
    {
      unsigned int v17 = a2;
      do
      {
        a4 = (void *)v17[2];
        BOOL v12 = *a4 == (void)v17;
        unsigned int v17 = a4;
      }
      while (!v12);
    }
    if (a4 == a1 + 1 || (unint64_t v18 = a4[4], v18 > a5) || v18 == a5 && a4[5] > a6)
    {
      if (v15)
      {
        *a3 = a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return a4;
    }
    return std::__tree<TrackSubstitutions::Chunk>::__find_equal<TrackSubstitutions::Chunk>((uint64_t)a1, a3, a5, a6);
  }
  *a3 = a2;
  *a4 = a2;
  return a4;
}

unint64_t TrackSubstitutions::lower_bound(TrackSubstitutions *this, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)((char *)this + 8);
  uint64_t v3 = (void *)*((void *)this + 1);
  if (!v3) {
    goto LABEL_28;
  }
  do
  {
    unint64_t v4 = v3[4];
    BOOL v5 = v4 > a2;
    if (v4 <= a2) {
      unint64_t v6 = v3 + 1;
    }
    else {
      unint64_t v6 = v3;
    }
    if (v5) {
      uint64_t v2 = v3;
    }
    uint64_t v3 = (void *)*v6;
  }
  while (*v6);
  uint64_t v7 = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v8 = v7;
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7);
  }
  else
  {
LABEL_28:
    do
    {
      uint64_t v8 = v2[2];
      BOOL v9 = *(void *)v8 == (void)v2;
      uint64_t v2 = (uint64_t *)v8;
    }
    while (v9);
  }
  if (*(unsigned char *)(v8 + 48)) {
    unint64_t v10 = *(void *)(v8 + 40);
  }
  else {
    unint64_t v10 = *(void *)(v8 + 40) + a2 - *(void *)(v8 + 32);
  }
  BOOL v11 = (const uint8_t *)this + 24;
  int v12 = *((char *)this + 47);
  if ((v12 & 0x80000000) == 0)
  {
    unint64_t result = *((unsigned __int8 *)this + 47);
    if (v10 >= v12) {
      return result;
    }
    LODWORD(result) = v10;
    if ((char)v11[v10] >= -64) {
      return (int)result;
    }
LABEL_18:
    LODWORD(result) = utf8_back1SafeBody(v11, 0, v10);
    return (int)result;
  }
  unint64_t v14 = *((void *)this + 4);
  if (v14 >= v10) {
    unint64_t result = v10;
  }
  else {
    unint64_t result = *((void *)this + 4);
  }
  if (v14 > v10)
  {
    BOOL v11 = *(const uint8_t **)v11;
    LODWORD(v10) = result;
    if ((char)v11[(int)result] > -65) {
      return (int)result;
    }
    goto LABEL_18;
  }
  return result;
}

unint64_t TrackSubstitutions::upper_bound(TrackSubstitutions *this, unint64_t a2)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  if (!v3) {
    goto LABEL_15;
  }
  unint64_t v4 = (void *)((char *)this + 8);
  do
  {
    unint64_t v5 = v3[4];
    if (v5 <= a2)
    {
      if (v5 == a2)
      {
        if (v3[5]) {
          unint64_t v4 = v3;
        }
        else {
          ++v3;
        }
      }
      else
      {
        ++v3;
      }
    }
    else
    {
      unint64_t v4 = v3;
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  if (v4 == (void *)((char *)this + 8))
  {
LABEL_15:
    if (*((char *)this + 47) < 0) {
      return *((void *)this + 4);
    }
    else {
      return *((unsigned __int8 *)this + 47);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (*v4)
    {
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6);
    }
    else
    {
      BOOL v9 = v4;
      do
      {
        uint64_t v7 = v9[2];
        BOOL v19 = *(void *)v7 == (void)v9;
        BOOL v9 = (void *)v7;
      }
      while (v19);
    }
    if (*(unsigned char *)(v7 + 48)) {
      unint64_t v10 = v4[5];
    }
    else {
      unint64_t v10 = *(void *)(v7 + 40) + a2 - *(void *)(v7 + 32);
    }
    int v11 = *((char *)this + 47);
    if (v11 < 0)
    {
      unint64_t v12 = *((void *)this + 4);
      if (v12 >= v10) {
        unint64_t result = v10;
      }
      else {
        unint64_t result = *((void *)this + 4);
      }
    }
    else
    {
      unint64_t v12 = *((unsigned __int8 *)this + 47);
      if (v10 >= v12) {
        unint64_t result = *((unsigned __int8 *)this + 47);
      }
      else {
        unint64_t result = v10;
      }
    }
    if (result != v12)
    {
      int32_t v13 = result - 1;
      if ((int)result < 1) {
        return (int)result;
      }
      unint64_t v14 = (const uint8_t **)((char *)this + 24);
      if (v11 < 0)
      {
        uint64_t v17 = *((void *)this + 4);
        if ((int)result >= (int)v17 && (v17 & 0x80000000) == 0) {
          return (int)result;
        }
        uint64_t v16 = *v14;
        if ((char)(*v14)[v13] > -65) {
          goto LABEL_47;
        }
      }
      else
      {
        int v15 = v11;
        if (result >= v11) {
          return (int)result;
        }
        uint64_t v16 = (const uint8_t *)this + 24;
        if (*((char *)v14 + v13) >= -64) {
          goto LABEL_41;
        }
      }
      int32_t v13 = utf8_back1SafeBody(v16, 0, v13);
      int v11 = *((char *)this + 47);
      if ((v11 & 0x80000000) == 0)
      {
        int v15 = *((unsigned __int8 *)this + 47);
LABEL_41:
        LODWORD(result) = v13 + 1;
        unsigned int v18 = *((unsigned __int8 *)v14 + v13);
        BOOL v19 = (v18 + 11) < 0xCDu || result == v15;
        if (v19) {
          return (int)result;
        }
        int v20 = 0;
        uint64_t v16 = (const uint8_t *)this + 24;
        goto LABEL_50;
      }
      uint64_t v16 = *v14;
LABEL_47:
      LODWORD(result) = v13 + 1;
      unsigned int v18 = v16[v13];
      if ((v18 + 62) >= 0x33u || result == *((_DWORD *)this + 8)) {
        return (int)result;
      }
      int v20 = 1;
LABEL_50:
      unint64_t v21 = v16[(int)result];
      if ((v18 & 0xF0) == 0xE0)
      {
        if ((a00000000000000[v18 & 0xF] >> (v21 >> 5)))
        {
          unint64_t result = v13 + 2;
          if (v20)
          {
            if (result != *((_DWORD *)this + 8))
            {
              unint64_t v14 = (const uint8_t **)*v14;
              goto LABEL_67;
            }
          }
          else if (result != v11)
          {
LABEL_67:
            if (*((char *)v14 + result) < -64) {
              LODWORD(result) = v13 + 3;
            }
          }
        }
      }
      else
      {
        if (v18 <= 0xDF)
        {
          if ((char)v21 < -64) {
            LODWORD(result) = v13 + 2;
          }
          return (int)result;
        }
        if ((byte_20D6DDA97[v21 >> 4] >> (v18 & 7)))
        {
          uint64_t v22 = v13 + 2;
          LODWORD(result) = v13 + 2;
          if (v20)
          {
            int v23 = *((_DWORD *)this + 8);
            if (result == v23) {
              return (int)result;
            }
            unint64_t v14 = (const uint8_t **)*v14;
            if (*((char *)v14 + v22) > -65) {
              return (int)result;
            }
            int v24 = v13 + 3;
            LODWORD(result) = v13 + 3;
            if (v13 + 3 == v23) {
              return (int)result;
            }
          }
          else
          {
            if (result == v11) {
              return (int)result;
            }
            if (*((char *)v14 + v22) >= -64) {
              return (int)result;
            }
            LODWORD(result) = v11;
            int v24 = v13 + 3;
            if (v13 + 3 == v11) {
              return (int)result;
            }
          }
          if (*((char *)v14 + v24) >= -64) {
            LODWORD(result) = v24;
          }
          else {
            LODWORD(result) = v13 + 4;
          }
        }
      }
      return (int)result;
    }
  }
  return result;
}

void std::__shared_ptr_emplace<TrackSubstitutions>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(void **)(a1 + 32);
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(v2);
}

void std::__shared_ptr_emplace<TrackSubstitutions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216D00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TrackSubstitutions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TokenizeImpl::generate_tokens(TokenizeImpl *this)
{
  if (!*((unsigned char *)this + 8))
  {
    uint64_t v2 = *((void *)this + 9);
    uint64_t v3 = (uint64_t *)((char *)this + 104);
    unint64_t v4 = (void *)((char *)this + 32);
    do
    {
      if (*((void *)this + 9) != v2) {
        break;
      }
      TokenizerEngine::next_token((TokenizerEngine *)&v32, *((void *)this + 22), 0);
      uint64_t v5 = HIBYTE(v34);
      if (v34 < 0) {
        uint64_t v5 = *((void *)&__p + 1);
      }
      if (v5)
      {
        TokenizeImpl::write_output_token((uint64_t)this, &v32);
      }
      else
      {
        uint64_t v6 = *((void *)this + 22);
        *((void *)this + 21) = *((void *)this + 18) - (*(_DWORD *)(v6 + 56) + *(_DWORD *)(v6 + 60));
        if (!*((unsigned char *)this + 136))
        {
          TokenizerEngine::next_token((TokenizerEngine *)&v28, v6, 1);
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
          v32.__r_.__value_.__s.__data_[16] = v29;
          if (SHIBYTE(v34) < 0) {
            operator delete((void *)__p);
          }
          uint64_t v34 = v31;
          long long __p = v30;
          uint64_t v7 = HIBYTE(v31);
          if (v31 < 0) {
            uint64_t v7 = *((void *)&__p + 1);
          }
          if (v7) {
            TokenizeImpl::write_output_token((uint64_t)this, &v32);
          }
          else {
            *((void *)this + 21) = 0;
          }
        }
        while (1)
        {
          (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v28);
          long long v8 = v28;
          long long v28 = 0uLL;
          BOOL v9 = (std::__shared_weak_count *)*((void *)this + 14);
          *(_OWORD *)((char *)this + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v8;
          if (v9)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
            if (*((void *)&v28 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
            }
            if (!*v3)
            {
LABEL_25:
              *((unsigned char *)this + 8) = 1;
              goto LABEL_49;
            }
          }
          else if (!(void)v8)
          {
            goto LABEL_25;
          }
          (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
          uint64_t v10 = *v3;
          if ((void *)(v10 + 8) == v11)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            StringFormatter::StringFormatter((StringFormatter *)&v28, "Token missing TokenBasicItem");
            MEMORY[0x210558D40](exception, &v28);
            __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          uint64_t v12 = v11[5];
          if (*(_DWORD *)(v12 + 8) == 1952807028) {
            break;
          }
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v4, (long long *)v3);
        }
        int32_t v13 = (uint64_t *)*((void *)this + 22);
        if (*(char *)(v12 + 55) >= 0) {
          uint64_t v14 = v12 + 32;
        }
        else {
          uint64_t v14 = *(void *)(v12 + 32);
        }
        MEMORY[0x210558E70](*((void *)this + 22), v14);
        int v15 = *((char *)v13 + 23);
        BOOL v16 = v15 < 0;
        uint64_t v17 = (uint64_t *)*v13;
        if (v15 >= 0) {
          uint64_t v17 = v13;
        }
        uint64_t v18 = *((unsigned __int8 *)v13 + 23);
        if (v16) {
          uint64_t v18 = v13[1];
        }
        v13[3] = (uint64_t)v17;
        v13[4] = v18 << 32;
        v13[5] = (uint64_t)v17;
        v13[6] = v18 | ((unint64_t)v18 << 32);
        if (*((unsigned char *)this + 136))
        {
          uint64_t v19 = *((void *)this + 18);
        }
        else
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(v12 + 16);
          *((void *)this + 18) = 0;
          *((void *)this + 19) = v20;
          *((unsigned char *)this + 137) = 1;
          *(_DWORD *)(*((void *)this + 22) + 60) = 0;
        }
        *((void *)this + 18) = v19 + *(void *)(v12 + 24);
        uint64_t v22 = *(void *)(v12 + 56);
        uint64_t v21 = *(void *)(v12 + 64);
        if (v21) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
        }
        int v23 = (std::__shared_weak_count *)*((void *)this + 16);
        *((void *)this + 15) = v22;
        *((void *)this + 16) = v21;
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        *((void *)this + 20) = *(void *)(v12 + 24) + *(void *)(v12 + 16);
        (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v28);
        uint64_t v24 = v28;
        if ((void)v28)
        {
          LOBYTE(v2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (void *)(v24 + 8) != v25
                     && (uint64_t v26 = v25[5], *(_DWORD *)(v26 + 8) == 1952807028)
                     && *((void *)this + 20) == *(void *)(v26 + 16)
                     && *(void *)(v26 + 56) == *(void *)(v12 + 56);
        }
        if (*((void *)&v28 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
        }
        *((unsigned char *)this + 136) = v24;
      }
LABEL_49:
      if (SHIBYTE(v34) < 0) {
        operator delete((void *)__p);
      }
    }
    while (!*((unsigned char *)this + 8));
  }
}

void sub_20D33D698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TokenizeImpl::write_output_token(uint64_t a1, const std::string *a2)
{
  unint64_t v25 = 0;
  long long v24 = 0u;
  *(_OWORD *)long long __p = 0u;
  if (a2->__r_.__value_.__s.__data_[16])
  {
    LODWORD(v21) = 1651664235;
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
    *((void *)&v21 + 1) = *(void *)(a1 + 152);
    std::string::size_type v22 = size;
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 128);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)&v24 + 1) = v5;
      unint64_t v25 = v6;
    }
    else
    {
      *((void *)&v24 + 1) = *(void *)(a1 + 120);
      unint64_t v25 = 0;
    }
    uint64_t v20 = COERCE_UNSIGNED_INT(nanf(&byte_20D5A22AE)) | 0x100000000;
    uint64_t v7 = operator new(0x30uLL);
    *(_OWORD *)((char *)v7 + 8) = 0u;
    v7[2] = 0u;
    *(void *)uint64_t v7 = off_26C215330;
    *((void *)v7 + 3) = v7 + 2;
    *(void *)&long long v19 = (char *)v7 + 24;
    *((void *)&v19 + 1) = v7;
    Agglomerate::set<TokenBasicItem>((uint64_t)v7 + 24, &v21);
    FrontendModule::set_item<TokenBreakItem>((uint64_t)v7 + 24, &v20);
    std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)(a1 + 32), &v19);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
  }
  LODWORD(v21) = 1952807028;
  std::string::operator=((std::string *)__p, a2 + 1);
  std::string::size_type v8 = *(void *)(a1 + 160);
  std::string::size_type v9 = a2->__r_.__value_.__l.__size_ + *(void *)(a1 + 152);
  if (v8 < v9) {
    std::string::size_type v9 = *(void *)(a1 + 160);
  }
  std::string::size_type v10 = v8 - v9;
  if (v10 >= *(void *)(a1 + 168) + a2->__r_.__value_.__r.__words[0]) {
    std::string::size_type v10 = *(void *)(a1 + 168) + a2->__r_.__value_.__r.__words[0];
  }
  *((void *)&v21 + 1) = v9;
  std::string::size_type v22 = v10;
  uint64_t v12 = *(void *)(a1 + 120);
  int v11 = *(std::__shared_weak_count **)(a1 + 128);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int32_t v13 = v25;
  *((void *)&v24 + 1) = v12;
  unint64_t v25 = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a2->__r_.__value_.__l.__size_) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = *(unsigned char *)(a1 + 137) == 0;
  }
  LOBYTE(v20) = v14;
  *(unsigned char *)(a1 + 137) = 0;
  int v15 = operator new(0x30uLL);
  *(_OWORD *)((char *)v15 + 8) = 0u;
  void v15[2] = 0u;
  *(void *)int v15 = off_26C215330;
  *((void *)v15 + 3) = v15 + 2;
  *(void *)&long long v19 = (char *)v15 + 24;
  *((void *)&v19 + 1) = v15;
  Agglomerate::set<TokenBasicItem>((uint64_t)v15 + 24, &v21);
  FrontendModule::set_item<TokenTokenizerItem>((uint64_t)v15 + 24, &v20);
  std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)(a1 + 32), &v19);
  std::string::size_type v16 = v22 + a2->__r_.__value_.__l.__size_;
  uint64_t v17 = *(void *)(a1 + 144);
  std::string::size_type v18 = *(void *)(a1 + 152) + v16;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v17 - v16;
  *(void *)(a1 + 152) = v18;
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (SBYTE7(v24) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D33D944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  TokenBasicItem::~TokenBasicItem((TokenBasicItem *)va);
  _Unwind_Resume(a1);
}

uint64_t *FrontendModule::set_item<TokenBreakItem>(uint64_t a1, void *a2)
{
  uint64_t v6 = &v5;
  uint64_t v4 = result[5];
  if (!v4) {
    operator new();
  }
  *(void *)(v4 + 8) = *a2;
  return result;
}

uint64_t *FrontendModule::set_item<TokenTokenizerItem>(uint64_t a1, unsigned char *a2)
{
  uint64_t v6 = &v5;
  uint64_t v4 = result[5];
  if (!v4) {
    operator new();
  }
  *(unsigned char *)(v4 + 8) = *a2;
  return result;
}

void Agglomerate::ItemHolder<TokenTokenizerItem>::~ItemHolder()
{
}

void Agglomerate::ItemHolder<TokenBreakItem>::~ItemHolder()
{
}

uint64_t TokenizeImpl::clear(TokenizeImpl *this)
{
  uint64_t result = FrontendModule::clear(this);
  *((unsigned char *)this + 136) = 0;
  return result;
}

void TokenizeImpl::~TokenizeImpl(TokenizeImpl *this)
{
  *(void *)this = off_26C200190;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = off_26C200190;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  FrontendModule::~FrontendModule((void **)this);
}

uint64_t std::__shared_ptr_emplace<TokenizeImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TokenizeImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TokenizeImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TokenizerEngine>::__on_zero_shared(uint64_t a1)
{
  UTFTransliterator::~UTFTransliterator((UTFTransliterator *)(a1 + 128));
  UTFTransliterator::~UTFTransliterator((UTFTransliterator *)(a1 + 120));
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<TokenizerEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TokenizerEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TokenizePersistentModule::~TokenizePersistentModule(TokenizePersistentModule *this)
{
  *(void *)this = off_26C203E38;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C203E38;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
}

std::string *FeatureExtractorOriginalText::set_original_text(std::string *this, std::string::value_type *a2, std::string::size_type a3, int a4)
{
  uint64_t v4 = a2;
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  uint64_t v6 = this + 1;
  this[1].__r_.__value_.__l.__size_ = this[1].__r_.__value_.__r.__words[0];
  if (!a4)
  {
    std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(this, a2, &a2[a3], a3);
    goto LABEL_83;
  }
  std::string::size_type v7 = a3 >> 1;
  if (!(a3 >> 1)) {
    goto LABEL_62;
  }
  int v8 = 0;
  do
  {
    if ((v8 & 0xF) == 0)
    {
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = this->__r_.__value_.__l.__size_;
      }
      else {
        LODWORD(size) = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      int v11 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
      unint64_t v10 = this[1].__r_.__value_.__r.__words[2];
      if ((unint64_t)v11 >= v10)
      {
        std::string::pointer data = (std::string::pointer)v6->__r_.__value_.__r.__words[0];
        uint64_t v14 = (uint64_t)((uint64_t)v11 - v6->__r_.__value_.__r.__words[0]) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          goto LABEL_103;
        }
        uint64_t v16 = v10 - (void)data;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          std::string::size_type v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[1].__r_.__value_.__r.__words[2], v17);
          std::string::pointer data = this[1].__r_.__value_.__l.__data_;
          int v11 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
        }
        else
        {
          std::string::size_type v18 = 0;
        }
        long long v19 = &v18[4 * v14];
        *(_DWORD *)long long v19 = size;
        std::string::size_type v12 = (std::string::size_type)(v19 + 4);
        while (v11 != (_DWORD *)data)
        {
          int v20 = *--v11;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        this[1].__r_.__value_.__l.__size_ = v12;
        this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v18[4 * v17];
        if (data) {
          operator delete(data);
        }
      }
      else
      {
        *int v11 = size;
        std::string::size_type v12 = (std::string::size_type)(v11 + 1);
      }
      this[1].__r_.__value_.__l.__size_ = v12;
    }
    unsigned int v21 = *(unsigned __int16 *)v4;
    if (v21 <= 0x7F)
    {
      std::string::value_type v22 = *(_WORD *)v4;
LABEL_40:
      std::string::push_back(this, v22);
      goto LABEL_41;
    }
    if (v21 <= 0x7FF)
    {
      unsigned int v23 = (v21 >> 6) | 0xFFFFFFC0;
LABEL_39:
      std::string::push_back(this, v23);
      std::string::value_type v22 = *v4 & 0x3F | 0x80;
      goto LABEL_40;
    }
    if (v7 < 2 || (v21 & 0xFC00) != 0xD800 || (unsigned int v24 = *((unsigned __int16 *)v4 + 1), v24 >> 10 != 55))
    {
      std::string::push_back(this, (v21 >> 12) | 0xE0);
      unsigned int v23 = (*(unsigned __int16 *)v4 >> 6) & 0x3F | 0xFFFFFF80;
      goto LABEL_39;
    }
    v4 += 2;
    unsigned int v25 = (v21 << 10) - 56623104;
    unsigned int v26 = (v24 + 9216) | v25;
    std::string::push_back(this, (v25 >> 18) | 0xF0);
    std::string::push_back(this, (v26 >> 12) & 0x3F | 0x80);
    std::string::push_back(this, (v26 >> 6) & 0x3F | 0x80);
    std::string::push_back(this, v24 & 0x3F | 0x80);
    ++v8;
    LODWORD(v7) = v7 - 1;
    if ((v8 & 0xF) == 0)
    {
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v27 = this->__r_.__value_.__l.__size_;
      }
      else {
        LODWORD(v27) = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      std::string::value_type v29 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
      unint64_t v28 = this[1].__r_.__value_.__r.__words[2];
      if ((unint64_t)v29 >= v28)
      {
        std::string::pointer v31 = (std::string::pointer)v6->__r_.__value_.__r.__words[0];
        uint64_t v32 = (uint64_t)((uint64_t)v29 - v6->__r_.__value_.__r.__words[0]) >> 2;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62) {
          goto LABEL_103;
        }
        uint64_t v34 = v28 - (void)v31;
        if (v34 >> 1 > v33) {
          unint64_t v33 = v34 >> 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          signed int v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[1].__r_.__value_.__r.__words[2], v35);
          std::string::pointer v31 = this[1].__r_.__value_.__l.__data_;
          std::string::value_type v29 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
        }
        else
        {
          signed int v36 = 0;
        }
        int v37 = &v36[4 * v32];
        *(_DWORD *)int v37 = v27;
        std::string::size_type v30 = (std::string::size_type)(v37 + 4);
        while (v29 != (_DWORD *)v31)
        {
          int v38 = *--v29;
          *((_DWORD *)v37 - 1) = v38;
          v37 -= 4;
        }
        this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        this[1].__r_.__value_.__l.__size_ = v30;
        this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v36[4 * v35];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        _DWORD *v29 = v27;
        std::string::size_type v30 = (std::string::size_type)(v29 + 1);
      }
      this[1].__r_.__value_.__l.__size_ = v30;
    }
LABEL_41:
    ++v8;
    v4 += 2;
    LODWORD(v7) = v7 - 1;
  }
  while (v7);
  if ((v8 & 0xF) == 0)
  {
LABEL_62:
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v39 = this->__r_.__value_.__l.__size_;
    }
    else {
      LODWORD(v39) = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    unint64_t v40 = this[1].__r_.__value_.__r.__words[2];
    uint64_t v41 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
    if ((unint64_t)v41 >= v40)
    {
      std::string::pointer v43 = (std::string::pointer)v6->__r_.__value_.__r.__words[0];
      uint64_t v44 = (uint64_t)((uint64_t)v41 - v6->__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 62) {
LABEL_103:
      }
        std::vector<int>::__throw_length_error[abi:ne180100]();
      uint64_t v46 = v40 - (void)v43;
      if (v46 >> 1 > v45) {
        unint64_t v45 = v46 >> 1;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v45;
      }
      if (v47)
      {
        uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[1].__r_.__value_.__r.__words[2], v47);
        std::string::pointer v43 = this[1].__r_.__value_.__l.__data_;
        uint64_t v41 = (_DWORD *)this[1].__r_.__value_.__l.__size_;
      }
      else
      {
        uint64_t v48 = 0;
      }
      uint64_t v49 = &v48[4 * v44];
      std::string::size_type v50 = (std::string::size_type)&v48[4 * v47];
      *(_DWORD *)uint64_t v49 = v39;
      std::string::size_type v42 = (std::string::size_type)(v49 + 4);
      while (v41 != (_DWORD *)v43)
      {
        int v51 = *--v41;
        *((_DWORD *)v49 - 1) = v51;
        v49 -= 4;
      }
      this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      this[1].__r_.__value_.__l.__size_ = v42;
      this[1].__r_.__value_.__r.__words[2] = v50;
      if (v43) {
        operator delete(v43);
      }
    }
    else
    {
      _DWORD *v41 = v39;
      std::string::size_type v42 = (std::string::size_type)(v41 + 1);
    }
    this[1].__r_.__value_.__l.__size_ = v42;
  }
LABEL_83:
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  char v52 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    escaped_text(&v59, (uint64_t)this);
    Censor::global_plaintext(&__p, (uint64_t)&v59);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    int v62 = p_p;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  escaped_text(&v59, (uint64_t)this);
  Censor::global_plaintext(&__p, (uint64_t)&v59);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v55 = &__p;
  }
  else {
    uint64_t v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  uint64_t result = (std::string *)GryphonAnalysis::Storage(v56);
  if (result->__r_.__value_.__s.__data_[0])
  {
    int v58 = (std::string *)GryphonAnalysis::Storage((GryphonAnalysis *)result);
    return std::string::operator=(v58 + 2, this);
  }
  return result;
}

void sub_20D33E400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void escaped_text(std::string *this, uint64_t a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  int v2 = *(char *)(a2 + 23);
  if (v2 >= 0) {
    uint64_t v3 = (unsigned char *)a2;
  }
  else {
    uint64_t v3 = *(unsigned char **)a2;
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    while (2)
    {
      int v6 = (char)*v3;
      std::string::size_type v7 = "\\n";
      switch(*v3)
      {
        case 9:
          std::string::size_type v7 = "\\t";
          goto LABEL_17;
        case 0xA:
          goto LABEL_17;
        case 0xB:
          std::string::size_type v7 = "\\v";
          goto LABEL_17;
        case 0xC:
          goto LABEL_13;
        case 0xD:
          std::string::size_type v7 = "\\r";
          goto LABEL_17;
        default:
          if (v6 == 27)
          {
            std::string::size_type v7 = "\\e";
          }
          else
          {
            if (v6 != 92)
            {
LABEL_13:
              std::string::push_back(this, v6);
              goto LABEL_18;
            }
            std::string::size_type v7 = "\\\\"";
          }
LABEL_17:
          std::string::append(this, v7);
LABEL_18:
          ++v3;
          if (!--v4) {
            return;
          }
          continue;
      }
    }
  }
}

void sub_20D33E54C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *FeatureExtractorOriginalText::set_normalized_text(std::string *this, std::string::value_type *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = this + 2;
  std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(this + 2, a2, &a2[a3 - 1], a3 - 1);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    escaped_text(&v11, (uint64_t)v3);
    Censor::global_plaintext(&__p, (uint64_t)&v11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v14 = p_p;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  escaped_text(&v11, (uint64_t)v3);
  Censor::global_plaintext(&__p, (uint64_t)&v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = &__p;
  }
  else {
    std::string::size_type v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t result = (std::string *)GryphonAnalysis::Storage(v8);
  if (result->__r_.__value_.__s.__data_[0])
  {
    unint64_t v10 = (std::string *)GryphonAnalysis::Storage((GryphonAnalysis *)result);
    return std::string::operator=(v10 + 3, v3);
  }
  return result;
}

void sub_20D33E728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *_Gryphon_SetOriginalText(uint64_t a1, uint64_t a2, std::string::value_type *a3, std::string::size_type a4, int a5)
{
  uint64_t result = (std::string *)FeatureExtractorTarget::retrieve();
  if (result)
  {
    return FeatureExtractorOriginalText::set_original_text(result, a3, a4, a5);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<int>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<int>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<int>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<int>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<int>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(a1 + 16));
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::vector<int>>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<FeatureBook>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<int>>>>>::destroy(*(void **)(a1 + 56));
  int v2 = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__shared_ptr_emplace<FeatureBook>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2153D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FeatureBook>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2153D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t FeatureBook::get_feature_encoding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v5 = (uint64_t *)std::map<std::string,std::string>::at(a1 + 24, (const void **)a2);
  uint64_t v6 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v5, (const void **)a3);
  uint64_t v7 = v6;
  if (v5 + 1 != (uint64_t *)v6) {
    return v7 + 56;
  }
  uint64_t v8 = v6;
  std::string::size_type v9 = "null";
  std::string::basic_string[abi:ne180100]<0>(__p, "null");
  uint64_t v7 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v5, (const void **)__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(*(void **)__p);
  }
  if (v8 != v7)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_29;
    }
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v12 = (const void *)a2;
    }
    else {
      std::string::size_type v12 = *(const void **)a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      int32_t v13 = (const void *)a3;
    }
    else {
      int32_t v13 = *(const void **)a3;
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v12;
    __int16 v31 = 2080;
    uint64_t v32 = v13;
    __int16 v33 = 2080;
    uint64_t v34 = "null";
LABEL_28:
    _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_DEBUG, "FeatureBook: Feature %s [%s] fallback to: %s", __p, 0x20u);
LABEL_29:
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v16 = (const void *)a2;
    }
    else {
      uint64_t v16 = *(const void **)a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      unint64_t v17 = (const void *)a3;
    }
    else {
      unint64_t v17 = *(const void **)a3;
    }
    Diagnostics::log(7, "FeatureBook: Feature %s [%s] fallback to: %s", v11, v16, v17, v9);
    return v7 + 56;
  }
  std::string::size_type v9 = "0";
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  uint64_t v7 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v5, (const void **)__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(*(void **)__p);
  }
  if (v8 != v7)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_29;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v14 = (const void *)a2;
    }
    else {
      uint64_t v14 = *(const void **)a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v15 = (const void *)a3;
    }
    else {
      uint64_t v15 = *(const void **)a3;
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v14;
    __int16 v31 = 2080;
    uint64_t v32 = v15;
    __int16 v33 = 2080;
    uint64_t v34 = "0";
    goto LABEL_28;
  }
  if (!v5[2])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v28 = (const char *)a2;
    }
    else {
      unint64_t v28 = *(const char **)a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      std::string::value_type v29 = (const char *)a3;
    }
    else {
      std::string::value_type v29 = *(const char **)a3;
    }
    StringFormatter::StringFormatter((StringFormatter *)__p, "FeatureBook: Feature %s lacks mapping for value %s", v28, v29);
    MEMORY[0x210558D40](exception, __p);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0) {
      unsigned int v21 = (const void *)a2;
    }
    else {
      unsigned int v21 = *(const void **)a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      std::string::value_type v22 = (const void *)a3;
    }
    else {
      std::string::value_type v22 = *(const void **)a3;
    }
    unsigned int v23 = (const char *)(*v5 + 32);
    if (*(char *)(*v5 + 55) < 0) {
      unsigned int v23 = *(const char **)v23;
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v21;
    __int16 v31 = 2080;
    uint64_t v32 = v22;
    __int16 v33 = 2080;
    uint64_t v34 = v23;
    _os_log_impl(&dword_20CD80000, v19, OS_LOG_TYPE_DEBUG, "FeatureBook: Feature %s [%s] fallback to: %s", __p, 0x20u);
  }
  if (*(char *)(a2 + 23) >= 0) {
    unsigned int v24 = (const void *)a2;
  }
  else {
    unsigned int v24 = *(const void **)a2;
  }
  if (*(char *)(a3 + 23) >= 0) {
    unsigned int v25 = (const void *)a3;
  }
  else {
    unsigned int v25 = *(const void **)a3;
  }
  unsigned int v26 = (void *)(*v5 + 32);
  if (*(char *)(*v5 + 55) < 0) {
    unsigned int v26 = (void *)*v26;
  }
  Diagnostics::log(7, "FeatureBook: Feature %s [%s] fallback to: %s", v20, v24, v25, v26);
  uint64_t v7 = *v5;
  return v7 + 56;
}

void sub_20D33EE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void MilWaveRNNFusedSubscaleInference::reset(MilWaveRNNFusedSubscaleInference *this)
{
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_INFO, "MilWaveRNNFusedSubscaleInference reset.", v7, 2u);
  }
  Diagnostics::log(6, "MilWaveRNNFusedSubscaleInference reset.", v3);
  uint64_t v4 = (void *)*((void *)this + 97);
  uint64_t v5 = *((void *)this + 86);
  if (v5 >= 1) {
    bzero(*((void **)this + 76), 4 * (v5 - ((v5 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  uint64_t v6 = *((void *)this + 107);
  if (v6 >= 1) {
    bzero(v4, 4 * (v6 - ((v6 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  *((_DWORD *)this + 362) = 0;
}

void MilWaveRNNFusedSubscaleInference::inference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a2 + 8);
  uint64_t v4 = *(void *)(*(void *)a2 + 16);
  unint64_t v6 = (v4 - v5) / 24;
  unint64_t v7 = *(void *)(a1 + 48);
  if (*(unsigned char *)(a1 + 56))
  {
    float v8 = roundf((float)((float)v7 / **(float **)(*(void *)a2 + 80)) * 0.5);
    unint64_t v7 = (unint64_t)(float)(v8 + v8);
  }
  std::vector<float>::vector(v47, v7 * v6);
  std::string __dst = *(void **)(a1 + 272);
  std::string::size_type v9 = *(_DWORD **)(a1 + 608);
  unint64_t v10 = *(void **)(a1 + 776);
  std::string v11 = *(const void **)(a1 + 1280);
  BNNSSetNetwork();
  if (v4 != v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (v6 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v6;
    }
    uint64_t v38 = v14;
    do
    {
      uint64_t v15 = *(void *)(*(void *)a2 + 8) + 24 * v13;
      uint64_t v16 = *(unsigned char **)v15;
      unint64_t v17 = *(unsigned char **)(v15 + 8);
      if (v17 != v16) {
        memmove(__dst, v16, v17 - v16);
      }
      int v18 = espresso_plan_execute_sync();
      std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute linear model.");
      if (v18)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        int v32 = v46;
        __int16 v33 = (void **)__p[0];
        status_string = (const char *)espresso_get_status_string();
        uint64_t v35 = __p;
        if (v32 < 0) {
          uint64_t v35 = v33;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v48, "%s Error: %d, %s", (const char *)v35, v18, status_string);
        MEMORY[0x210558D40](exception, &v48);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (v46 < 0)
      {
        operator delete(__p[0]);
        if (v7)
        {
LABEL_15:
          for (unint64_t i = 0; i < v7; i += 2)
          {
            int v20 = espresso_plan_execute_sync();
            std::string::basic_string[abi:ne180100]<0>(v43, "Unable to execute gru model.");
            if (v20)
            {
              unsigned int v26 = __cxa_allocate_exception(0x10uLL);
              int v27 = v44;
              unint64_t v28 = (void **)v43[0];
              std::string::value_type v29 = (const char *)espresso_get_status_string();
              std::string::size_type v30 = v43;
              if (v27 < 0) {
                std::string::size_type v30 = v28;
              }
              StringFormatter::StringFormatter((StringFormatter *)&v48, "%s Error: %d, %s", (const char *)v30, v20, v29);
              MEMORY[0x210558D40](v26, &v48);
              __cxa_throw(v26, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
            }
            if (v44 < 0) {
              operator delete(v43[0]);
            }
            int v21 = **(_DWORD **)(a1 + 944);
            int v22 = **(_DWORD **)(a1 + 1112);
            *std::string::size_type v9 = v22;
            uint64_t v23 = *(void *)(a1 + 1360);
            if (v23) {
              memmove(v10, v11, 4 * v23);
            }
            unsigned int v24 = (char *)v47[0] + 4 * i + v12;
            _DWORD *v24 = v21;
            v24[1] = v22;
          }
        }
      }
      else if (v7)
      {
        goto LABEL_15;
      }
      ++v13;
      v12 += 4 * v7;
    }
    while (v13 != v38);
  }
  BNNSClearNetwork();
  MilWaveRNNInference::signal_postprocessing(&v48, (float **)v47, (float *)(a1 + 1448));
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v40, v48, (uint64_t)v49, (v49 - (unsigned char *)v48) >> 1);
  uint64_t v25 = *(void *)(a3 + 24);
  if (!v25) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v25 + 48))(v25, &v40);
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
  if (v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
}

void sub_20D33F354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33)
{
  uint64_t v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *MilWaveRNNInference::signal_postprocessing(void *a1, float **a2, float *a3)
{
  MilWaveRNNInference::mulaw_decode((uint64_t)a2);
  uint64_t result = std::vector<short>::vector(a1, a2[1] - *a2);
  unint64_t v7 = *a2;
  uint64_t v8 = (char *)a2[1] - (char *)*a2;
  if (v8)
  {
    unint64_t v9 = v8 >> 2;
    unint64_t v10 = (_WORD *)*a1;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    float v11 = *a3;
    do
    {
      float v12 = *v7++;
      float v11 = v12 + (float)(v11 * 0.86);
      if (v11 < -1.0) {
        float v11 = -1.0;
      }
      if (v11 > 1.0) {
        float v11 = 1.0;
      }
      *v10++ = (int)(float)(v11 * 32767.0);
      *a3 = v11;
      --v9;
    }
    while (v9);
  }
  return result;
}

void *std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20D33F540(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MilWaveRNNInference::mulaw_decode(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v12 = (*(void *)(a1 + 8) - *(void *)a1) >> 2;
  uint64_t v2 = MEMORY[0x270FA5388](a1);
  uint64_t v4 = (float *)((char *)&v8 - ((v3 + 15) & 0x7FFFFFFF0));
  float v10 = 0.0039216;
  float __B = 8.0;
  float v9 = -1.0;
  uint64_t v5 = (const float **)MEMORY[0x270FA5388](v2);
  uint64_t v7 = (float *)((char *)&v8 - v6);
  vvfabsf((float *)((char *)&v8 - v6), *v5, &v12);
  vDSP_vsmul(v7, 1, &__B, v4, 1, v12);
  vvexp2f(v7, v4, &v12);
  vDSP_vsadd(v7, 1, &v9, v4, 1, v12);
  vDSP_vsmul(v4, 1, &v10, v7, 1, v12);
  vvcopysignf(*(float **)a1, v7, *(const float **)a1, &v12);
}

void Mil2BnnsWaveRNNFusedSubscaleInference::reset(Mil2BnnsWaveRNNFusedSubscaleInference *this)
{
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v12 = 0;
    _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_INFO, "Mil2BnnsWaveRNNFusedSubscaleInference reset.", v12, 2u);
  }
  Diagnostics::log(6, "Mil2BnnsWaveRNNFusedSubscaleInference reset.", v3);
  uint64_t v4 = (uint64_t *)*((void *)this + 36);
  uint64_t v5 = *v4;
  uint64_t v6 = (std::__shared_weak_count *)v4[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  for (unint64_t i = *(uint64_t ***)(v5 + 128); i; unint64_t i = (uint64_t **)*i)
    bzero((void *)*i[5], i[5][1]);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v8 = *((void *)this + 36);
  uint64_t v9 = *(void *)(v8 + 16);
  float v10 = *(std::__shared_weak_count **)(v8 + 24);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  for (uint64_t j = *(uint64_t ***)(v9 + 128); j; uint64_t j = (uint64_t **)*j)
    bzero((void *)*j[5], j[5][1]);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *((_DWORD *)this + 76) = 0;
}

void Mil2BnnsWaveRNNFusedSubscaleInference::inference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)a2 + 8);
  uint64_t v5 = *(void *)(*(void *)a2 + 16);
  unint64_t v85 = *(void *)(a1 + 48);
  uint64_t v7 = *(uint64_t **)(a1 + 288);
  uint64_t v8 = *v7;
  uint64_t v9 = (std::__shared_weak_count *)v7[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 87) < 0) {
    std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
  }
  else {
    std::string v101 = *(std::string *)(a1 + 64);
  }
  v93[0] = &v101;
  unint64_t v83 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 152, (unsigned __int8 *)&v101, (uint64_t)&std::piecewise_construct, (long long **)v93)+ 5);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  float v10 = *(uint64_t **)(a1 + 288);
  uint64_t v11 = *v10;
  int v12 = (std::__shared_weak_count *)v10[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)(a1 + 88), *(void *)(a1 + 96));
  }
  else {
    std::string v100 = *(std::string *)(a1 + 88);
  }
  v93[0] = &v100;
  uint64_t v82 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11 + 152, (unsigned __int8 *)&v100, (uint64_t)&std::piecewise_construct, (long long **)v93)+ 5);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v13 = *(void *)(a1 + 288);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 135) < 0) {
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(a1 + 112), *(void *)(a1 + 120));
  }
  else {
    std::string v99 = *(std::string *)(a1 + 112);
  }
  v93[0] = &v99;
  unint64_t v81 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14 + 152, (unsigned __int8 *)&v99, (uint64_t)&std::piecewise_construct, (long long **)v93)+ 5);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = *(void *)(a1 + 288);
  uint64_t v17 = *(void *)(v16 + 16);
  int v18 = *(std::__shared_weak_count **)(v16 + 24);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = v5;
  if (*(char *)(a1 + 207) < 0) {
    std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(a1 + 184), *(void *)(a1 + 192));
  }
  else {
    std::string v98 = *(std::string *)(a1 + 184);
  }
  v93[0] = &v98;
  unint64_t v87 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17 + 152, (unsigned __int8 *)&v98, (uint64_t)&std::piecewise_construct, (long long **)v93)+ 5);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v20 = *(void *)(a1 + 288);
  uint64_t v21 = *(void *)(v20 + 16);
  int v22 = *(std::__shared_weak_count **)(v20 + 24);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 231) < 0) {
    std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(a1 + 208), *(void *)(a1 + 216));
  }
  else {
    std::string v97 = *(std::string *)(a1 + 208);
  }
  v93[0] = &v97;
  unint64_t v23 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21 + 152, (unsigned __int8 *)&v97, (uint64_t)&std::piecewise_construct, (long long **)v93)+ 5);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v24 = *(void *)(a1 + 288);
  uint64_t v25 = *(void *)(v24 + 16);
  unsigned int v26 = *(std::__shared_weak_count **)(v24 + 24);
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 255) < 0) {
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)(a1 + 232), *(void *)(a1 + 240));
  }
  else {
    std::string v96 = *(std::string *)(a1 + 232);
  }
  v93[0] = &v96;
  uint64_t v27 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25 + 152, (unsigned __int8 *)&v96, (uint64_t)&std::piecewise_construct, (long long **)v93)+ 5);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  uint64_t v28 = *(void *)(a1 + 288);
  uint64_t v29 = *(void *)(v28 + 16);
  std::string::size_type v30 = *(std::__shared_weak_count **)(v28 + 24);
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 183) < 0) {
    std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)(a1 + 160), *(void *)(a1 + 168));
  }
  else {
    std::string v95 = *(std::string *)(a1 + 160);
  }
  v93[0] = &v95;
  uint64_t v31 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29 + 152, (unsigned __int8 *)&v95, (uint64_t)&std::piecewise_construct, (long long **)v93)+ 5);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  uint64_t v78 = a3;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  uint64_t v32 = *(void *)(a1 + 288);
  uint64_t v33 = *(void *)(v32 + 16);
  uint64_t v34 = *(std::__shared_weak_count **)(v32 + 24);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 159) < 0) {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(a1 + 136), *(void *)(a1 + 144));
  }
  else {
    std::string v94 = *(std::string *)(a1 + 136);
  }
  v93[0] = &v94;
  unint64_t v35 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33 + 152, (unsigned __int8 *)&v94, (uint64_t)&std::piecewise_construct, (long long **)v93)+ 5);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  unint64_t v36 = (v19 - v6) / 24;
  if (*(unsigned char *)(a1 + 56))
  {
    float v37 = roundf((float)((float)*(unint64_t *)(a1 + 48) / **(float **)(*(void *)a2 + 80)) * 0.5);
    unint64_t v38 = (unint64_t)(float)(v37 + v37);
  }
  else
  {
    unint64_t v38 = v85;
  }
  std::vector<float>::vector(v93, v38 * v36);
  if (v19 != v6)
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    if (v36 <= 1) {
      uint64_t v41 = 1;
    }
    else {
      uint64_t v41 = v36;
    }
    uint64_t v79 = 4 * v38;
    uint64_t v80 = v41;
    do
    {
      unint64_t v42 = v38;
      std::string::pointer v43 = *(uint64_t **)(a1 + 288);
      uint64_t v44 = *v43;
      unint64_t v45 = (std::__shared_weak_count *)v43[1];
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Mil2BnnsModel::set_bnns_input<unsigned long,float>(v44, v83, *(int **)(*(void *)(*(void *)a2 + 8) + 24 * v40), *(int *)(a1 + 280));
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      uint64_t v46 = *(void *)(a1 + 288);
      unint64_t v47 = *(Mil2BnnsModel **)v46;
      uint64_t v48 = *(std::__shared_weak_count **)(v46 + 8);
      if (v48) {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Mil2BnnsModel::execute(v47);
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      uint64_t v49 = *(uint64_t **)(a1 + 288);
      uint64_t v50 = v49[2];
      int v51 = (std::__shared_weak_count *)v49[3];
      uint64_t v86 = v40;
      if (v51)
      {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v49 = *(uint64_t **)(a1 + 288);
      }
      uint64_t v52 = *v49;
      int v53 = (std::__shared_weak_count *)v49[1];
      if (v53) {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Mil2BnnsModel::set_bnns_input<unsigned long>(v50, v81, *(const void **)(*(void *)(v52 + 40) + 8 * v82), 3 * *(int *)(a1 + 284));
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
      unint64_t v38 = v42;
      if (v42)
      {
        for (unint64_t i = 0; i < v42; i += 2)
        {
          uint64_t v55 = *(void *)(a1 + 288);
          unint64_t v56 = *(Mil2BnnsModel **)(v55 + 16);
          uint64_t v57 = *(std::__shared_weak_count **)(v55 + 24);
          if (v57) {
            atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Mil2BnnsModel::execute(v56);
          if (v57) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          }
          uint64_t v58 = *(void *)(a1 + 288);
          uint64_t v59 = *(void *)(v58 + 16);
          uint64_t v60 = *(std::__shared_weak_count **)(v58 + 24);
          if (v60) {
            atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          float bnns = Mil2BnnsModel::get_bnns_output<unsigned long>(v59, v87);
          if (v60) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v60);
          }
          uint64_t v62 = *(void *)(a1 + 288);
          uint64_t v63 = *(void *)(v62 + 16);
          uint64_t v64 = *(std::__shared_weak_count **)(v62 + 24);
          if (v64) {
            atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          float v65 = Mil2BnnsModel::get_bnns_output<unsigned long>(v63, v23);
          if (v64) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v64);
          }
          *(float *)&unint64_t v91 = v65;
          uint64_t v66 = *(void *)(a1 + 288);
          uint64_t v67 = *(void *)(v66 + 16);
          uint64_t v68 = *(std::__shared_weak_count **)(v66 + 24);
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Mil2BnnsModel::set_bnns_input<unsigned long,float>(v67, v35, (int *)&v91, 1);
          if (v68) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v68);
          }
          uint64_t v69 = *(void *)(a1 + 288);
          uint64_t v71 = *(void *)(v69 + 16);
          uint64_t v70 = *(std::__shared_weak_count **)(v69 + 24);
          if (v70) {
            atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v72 = *(void *)(v71 + 40);
          uint64_t v73 = *(void *)(v72 + 8 * v27);
          *(void *)(v72 + 8 * v27) = *(void *)(v72 + 8 * v31);
          *(void *)(v72 + 8 * v31) = v73;
          uint64_t v74 = *(void *)(v71 + 48);
          uint64_t v75 = *(void *)(v74 + 16 * v27);
          *(void *)(v74 + 16 * v27) = *(void *)(v74 + 16 * v31);
          *(void *)(v74 + 16 * v31) = v75;
          unint64_t v38 = v42;
          if (v70) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v70);
          }
          uint64_t v76 = (float *)((char *)v93[0] + 4 * i + v39);
          float *v76 = bnns;
          v76[1] = v65;
        }
      }
      uint64_t v40 = v86 + 1;
      v39 += v79;
    }
    while (v86 + 1 != v80);
  }
  MilWaveRNNInference::signal_postprocessing(&v91, (float **)v93, (float *)(a1 + 304));
  std::string __p = 0;
  unint64_t v89 = 0;
  uint64_t v90 = 0;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&__p, v91, (uint64_t)v92, (v92 - (unsigned char *)v91) >> 1);
  uint64_t v77 = *(void *)(v78 + 24);
  if (!v77) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v77 + 48))(v77, &__p);
  if (__p)
  {
    unint64_t v89 = __p;
    operator delete(__p);
  }
  if (v91)
  {
    int v92 = v91;
    operator delete(v91);
  }
  if (v93[0])
  {
    v93[1] = v93[0];
    operator delete(v93[0]);
  }
}

void sub_20D33FFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  _Unwind_Resume(exception_object);
}

void *Mil2BnnsModel::set_bnns_input<unsigned long,float>(uint64_t a1, unint64_t a2, int *a3, uint64_t a4)
{
  unint64_t v7 = Mil2BnnsModel::get_position<unsigned long>(a1, a2);
  uint64_t v8 = *(void *)(a1 + 72) + 24 * v7;
  int v9 = *(char *)(v8 + 23);
  if (v9 < 0)
  {
    if (*(void *)(v8 + 8) != 4) {
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)v8;
  }
  else if (v9 != 4)
  {
LABEL_21:
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v22 = *(void *)(a1 + 72) + 24 * v7;
    if (*(char *)(v22 + 23) < 0) {
      uint64_t v22 = *(void *)v22;
    }
    StringFormatter::StringFormatter((StringFormatter *)v23, "Mil2Bnns buffer type not supported: '%s'", (const char *)v22);
    MEMORY[0x210558D40](exception, v23);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(_DWORD *)v8 != 909209702)
  {
    if (*(_DWORD *)v8 != 842231910) {
      goto LABEL_21;
    }
    uint64_t result = (void *)std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C248], MEMORY[0x263F8C248]);
    if ((result & 1) == 0)
    {
      if (a4)
      {
        uint64_t v11 = *(_DWORD **)(*(void *)(a1 + 40) + 8 * v7);
        do
        {
          int v12 = *a3++;
          *v11++ = v12;
          --a4;
        }
        while (a4);
      }
      return result;
    }
    goto LABEL_18;
  }
  uint64_t result = (void *)std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C248], MEMORY[0x263F8C248]);
  if (!result)
  {
LABEL_18:
    uint64_t v20 = *(void **)(*(void *)(a1 + 40) + 8 * v7);
    return memcpy(v20, a3, 4 * a4);
  }
  if (a4)
  {
    uint64_t v13 = *(_WORD **)(*(void *)(a1 + 40) + 8 * v7);
    do
    {
      int v14 = *a3++;
      _S0 = v14;
      __asm { FCVT            H0, S0 }
      *v13++ = _S0;
      --a4;
    }
    while (a4);
  }
  return result;
}

void sub_20D340314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *Mil2BnnsModel::set_bnns_input<unsigned long>(uint64_t a1, unint64_t a2, const void *a3, uint64_t a4)
{
  unint64_t v7 = Mil2BnnsModel::get_position<unsigned long>(a1, a2);
  uint64_t v8 = *(void *)(a1 + 72) + 24 * v7;
  int v9 = *(char *)(v8 + 23);
  if (v9 < 0)
  {
    if (*(void *)(v8 + 8) != 4) {
      goto LABEL_13;
    }
    uint64_t v8 = *(void *)v8;
  }
  else if (v9 != 4)
  {
LABEL_13:
    unint64_t v13 = v7;
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v15 = a1;
    int v16 = exception;
    uint64_t v17 = *(void *)(v15 + 72) + 24 * v13;
    if (*(char *)(v17 + 23) < 0) {
      uint64_t v17 = *(void *)v17;
    }
    StringFormatter::StringFormatter((StringFormatter *)v18, "Mil2Bnns buffer type not supported: '%s'", (const char *)v17);
    MEMORY[0x210558D40](v16, v18);
    __cxa_throw(v16, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(_DWORD *)v8 == 909209702)
  {
    char v10 = 1;
  }
  else
  {
    if (*(_DWORD *)v8 != 842231910) {
      goto LABEL_13;
    }
    char v10 = 2;
  }
  uint64_t v11 = *(void **)(*(void *)(a1 + 40) + 8 * v7);
  return memcpy(v11, a3, a4 << v10);
}

void sub_20D340484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

float Mil2BnnsModel::get_bnns_output<unsigned long>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = Mil2BnnsModel::get_position<unsigned long>(a1, a2);
  uint64_t v4 = *(void *)(a1 + 72) + 24 * v3;
  int v5 = *(char *)(v4 + 23);
  if (v5 < 0)
  {
    if (*(void *)(v4 + 8) != 4) {
      goto LABEL_11;
    }
    uint64_t v4 = *(void *)v4;
  }
  else if (v5 != 4)
  {
LABEL_11:
    unint64_t v12 = v3;
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v14 = a1;
    uint64_t v15 = exception;
    uint64_t v16 = *(void *)(v14 + 72) + 24 * v12;
    if (*(char *)(v16 + 23) < 0) {
      uint64_t v16 = *(void *)v16;
    }
    StringFormatter::StringFormatter((StringFormatter *)v17, "Mil2Bnns buffer type not supported: '%s'", (const char *)v16);
    MEMORY[0x210558D40](v15, v17);
    __cxa_throw(v15, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(_DWORD *)v4 == 909209702)
  {
    _H0 = **(_WORD **)(*(void *)(a1 + 40) + 8 * v3);
    __asm { FCVT            S0, H0 }
  }
  else
  {
    if (*(_DWORD *)v4 != 842231910) {
      goto LABEL_11;
    }
    return **(float **)(*(void *)(a1 + 40) + 8 * v3);
  }
  return result;
}

void sub_20D3405E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t Mil2BnnsModel::get_position<unsigned long>(uint64_t a1, unint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](MEMORY[0x263F8C270], MEMORY[0x263F8C270])) {
    return a2;
  }
  uint64_t v5 = MEMORY[0x263F8C270];
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v29, "Mil2Bnns::get_position called with '%s' not supported\n", (const char *)(*(void *)(v5 + 8) & 0x7FFFFFFFFFFFFFFFLL));
    MEMORY[0x210558D40](exception, v29);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uint64_t v6 = (uint64_t *)(a1 + 152);
  std::to_string(&v28, a2);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 176, (uint64_t)&v28);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 160);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*v6 + 8 * v2);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 184, (unsigned __int8 *)i + 16, (unsigned __int8 *)&v28))goto LABEL_42; {
        }
          }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v2) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x30uLL);
  uint64_t v15 = (void *)(a1 + 168);
  uint64_t v30 = a1 + 168;
  *(void *)unint64_t i = 0;
  *((void *)i + 1) = v8;
  *((_OWORD *)i + 1) = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
  std::string::size_type v16 = v28.__r_.__value_.__r.__words[2];
  memset(&v28, 0, sizeof(v28));
  *((void *)i + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v16;
  *((void *)i + 5) = 0;
  char v31 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 176) + 1);
  float v18 = *(float *)(a1 + 184);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1 + 152, v22);
    unint64_t v9 = *(void *)(a1 + 160);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *v6;
  uint64_t v24 = *(void **)(*v6 + 8 * v2);
  if (v24)
  {
    *(void *)unint64_t i = *v24;
  }
  else
  {
    *(void *)unint64_t i = *v15;
    *uint64_t v15 = i;
    *(void *)(v23 + 8 * v2) = v15;
    if (!*(void *)i) {
      goto LABEL_41;
    }
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    uint64_t v24 = (void *)(*v6 + 8 * v25);
  }
  void *v24 = i;
LABEL_41:
  ++*(void *)(a1 + 176);
LABEL_42:
  a2 = *((void *)i + 5);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  return a2;
}

void sub_20D340920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v23, v22);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Mil2BnnsWaveRNNSubscaleInference::reset(Mil2BnnsWaveRNNSubscaleInference *this)
{
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_INFO, "Mil2BnnsWaveRNNFusedSubscaleInference reset.", v12, 2u);
  }
  Diagnostics::log(6, "Mil2BnnsWaveRNNFusedSubscaleInference reset.", v3);
  uint64_t v4 = *((void *)this + 36);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 24);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  for (unint64_t i = *(uint64_t ***)(v5 + 128); i; unint64_t i = (uint64_t **)*i)
    bzero((void *)*i[5], i[5][1]);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unint64_t v8 = (uint64_t *)*((void *)this + 36);
  uint64_t v9 = *v8;
  uint8x8_t v10 = (std::__shared_weak_count *)v8[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  for (uint64_t j = *(uint64_t ***)(v9 + 128); j; uint64_t j = (uint64_t **)*j)
    bzero((void *)*j[5], j[5][1]);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((_DWORD *)this + 80) = 0;
}

void Mil2BnnsWaveRNNSubscaleInference::inference(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 48);
  if (*(unsigned char *)(a1 + 56))
  {
    float v7 = roundf((float)((float)v6 / **(float **)(v5 + 80)) * 0.5);
    unint64_t v6 = (unint64_t)(float)(v7 + v7);
  }
  uint64_t v9 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  uint8x8_t v10 = *(uint64_t **)(a1 + 288);
  uint64_t v11 = *v10;
  unint64_t v12 = (std::__shared_weak_count *)v10[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v88 = v6;
  if (*(char *)(a1 + 87) < 0) {
    std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
  }
  else {
    std::string v102 = *(std::string *)(a1 + 64);
  }
  v94[0] = &v102;
  unint64_t v83 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11 + 152, (unsigned __int8 *)&v102, (uint64_t)&std::piecewise_construct, (long long **)v94)+ 5);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  unint64_t v13 = *(uint64_t **)(a1 + 288);
  uint64_t v14 = *v13;
  uint64_t v15 = (std::__shared_weak_count *)v13[1];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)(a1 + 88), *(void *)(a1 + 96));
  }
  else {
    std::string v101 = *(std::string *)(a1 + 88);
  }
  v94[0] = &v101;
  uint64_t v82 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14 + 152, (unsigned __int8 *)&v101, (uint64_t)&std::piecewise_construct, (long long **)v94)+ 5);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = *(void *)(a1 + 288);
  uint64_t v17 = *(void *)(v16 + 16);
  float v18 = *(std::__shared_weak_count **)(v16 + 24);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 135) < 0) {
    std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)(a1 + 112), *(void *)(a1 + 120));
  }
  else {
    std::string v100 = *(std::string *)(a1 + 112);
  }
  v94[0] = &v100;
  unint64_t v81 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17 + 152, (unsigned __int8 *)&v100, (uint64_t)&std::piecewise_construct, (long long **)v94)+ 5);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v19 = *(void *)(a1 + 288);
  uint64_t v20 = *(void *)(v19 + 16);
  unint64_t v21 = *(std::__shared_weak_count **)(v19 + 24);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 207) < 0) {
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(a1 + 184), *(void *)(a1 + 192));
  }
  else {
    std::string v99 = *(std::string *)(a1 + 184);
  }
  v94[0] = &v99;
  unint64_t v87 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20 + 152, (unsigned __int8 *)&v99, (uint64_t)&std::piecewise_construct, (long long **)v94)+ 5);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  uint64_t v79 = a3;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v22 = *(void *)(a1 + 288);
  uint64_t v23 = *(void *)(v22 + 16);
  uint64_t v24 = *(std::__shared_weak_count **)(v22 + 24);
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 231) < 0) {
    std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(a1 + 208), *(void *)(a1 + 216));
  }
  else {
    std::string v98 = *(std::string *)(a1 + 208);
  }
  v94[0] = &v98;
  unint64_t v86 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23 + 152, (unsigned __int8 *)&v98, (uint64_t)&std::piecewise_construct, (long long **)v94)+ 5);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v25 = *(void *)(a1 + 288);
  uint64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = *(std::__shared_weak_count **)(v25 + 24);
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 255) < 0) {
    std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(a1 + 232), *(void *)(a1 + 240));
  }
  else {
    std::string v97 = *(std::string *)(a1 + 232);
  }
  v94[0] = &v97;
  uint64_t v28 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26 + 152, (unsigned __int8 *)&v97, (uint64_t)&std::piecewise_construct, (long long **)v94)+ 5);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v29 = *(void *)(a1 + 288);
  uint64_t v30 = *(void *)(v29 + 16);
  char v31 = *(std::__shared_weak_count **)(v29 + 24);
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 183) < 0) {
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)(a1 + 160), *(void *)(a1 + 168));
  }
  else {
    std::string v96 = *(std::string *)(a1 + 160);
  }
  v94[0] = &v96;
  uint64_t v32 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30 + 152, (unsigned __int8 *)&v96, (uint64_t)&std::piecewise_construct, (long long **)v94)+ 5);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v33 = *(void *)(a1 + 288);
  uint64_t v34 = *(void *)(v33 + 16);
  unint64_t v35 = *(std::__shared_weak_count **)(v33 + 24);
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 159) < 0) {
    std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)(a1 + 136), *(void *)(a1 + 144));
  }
  else {
    std::string v95 = *(std::string *)(a1 + 136);
  }
  v94[0] = &v95;
  unint64_t v36 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34 + 152, (unsigned __int8 *)&v95, (uint64_t)&std::piecewise_construct, (long long **)v94)+ 5);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  unint64_t v37 = (v8 - v9) / 24;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  std::vector<float>::vector(v94, v88 * v37 + 5);
  unint64_t v38 = v94[0];
  *((_DWORD *)v94[0] + 1) = *(_DWORD *)(a1 + 316);
  v38[3] = *(_DWORD *)(a1 + 320);
  if (v8 != v9)
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    if (v37 <= 1) {
      uint64_t v41 = 1;
    }
    else {
      uint64_t v41 = (v8 - v9) / 24;
    }
    uint64_t v80 = v41;
    do
    {
      unint64_t v42 = *(uint64_t **)(a1 + 288);
      uint64_t v43 = *v42;
      uint64_t v44 = (std::__shared_weak_count *)v42[1];
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Mil2BnnsModel::set_bnns_input<unsigned long,float>(v43, v83, *(int **)(*(void *)(*a2 + 8) + 24 * v40), *(int *)(a1 + 280));
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
      uint64_t v45 = *(void *)(a1 + 288);
      uint64_t v46 = *(Mil2BnnsModel **)v45;
      unint64_t v47 = *(std::__shared_weak_count **)(v45 + 8);
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Mil2BnnsModel::execute(v46);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      uint64_t v48 = *(uint64_t **)(a1 + 288);
      uint64_t v49 = v48[2];
      uint64_t v50 = (std::__shared_weak_count *)v48[3];
      uint64_t v85 = v40;
      if (v50)
      {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v48 = *(uint64_t **)(a1 + 288);
      }
      uint64_t v51 = *v48;
      uint64_t v52 = (std::__shared_weak_count *)v48[1];
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Mil2BnnsModel::set_bnns_input<unsigned long>(v49, v81, *(const void **)(*(void *)(v51 + 40) + 8 * v82), 3 * *(int *)(a1 + 284));
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      if (v88)
      {
        for (unint64_t i = 0; i < v88; i += 2)
        {
          uint64_t v54 = *(void *)(a1 + 288);
          uint64_t v55 = *(Mil2BnnsModel **)(v54 + 16);
          unint64_t v56 = *(std::__shared_weak_count **)(v54 + 24);
          if (v56) {
            atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Mil2BnnsModel::execute(v55);
          if (v56) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v56);
          }
          uint64_t v57 = *(void *)(a1 + 288);
          uint64_t v58 = *(void *)(v57 + 16);
          uint64_t v59 = *(std::__shared_weak_count **)(v57 + 24);
          if (v59) {
            atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          float bnns = Mil2BnnsModel::get_bnns_output<unsigned long>(v58, v87);
          if (v59) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v59);
          }
          uint64_t v61 = *(void *)(a1 + 288);
          uint64_t v62 = *(void *)(v61 + 16);
          uint64_t v63 = *(std::__shared_weak_count **)(v61 + 24);
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          float v64 = Mil2BnnsModel::get_bnns_output<unsigned long>(v62, v86);
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          float v65 = (float)(bnns / 127.5) + -1.0;
          float v66 = (float)(v64 / 127.5) + -1.0;
          *(float *)(a1 + 308) = v65;
          *(void *)(a1 + 312) = *(void *)(a1 + 316);
          *(float *)(a1 + 320) = v66;
          uint64_t v67 = *(void *)(a1 + 288);
          uint64_t v68 = *(void *)(v67 + 16);
          uint64_t v69 = *(std::__shared_weak_count **)(v67 + 24);
          if (v69) {
            atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Mil2BnnsModel::set_bnns_input<unsigned long,float>(v68, v36, (int *)(a1 + 308), 4);
          if (v69) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v69);
          }
          uint64_t v70 = *(void *)(a1 + 288);
          uint64_t v72 = *(void *)(v70 + 16);
          uint64_t v71 = *(std::__shared_weak_count **)(v70 + 24);
          if (v71) {
            atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v73 = *(void *)(v72 + 40);
          uint64_t v74 = *(void *)(v73 + 8 * v28);
          *(void *)(v73 + 8 * v28) = *(void *)(v73 + 8 * v32);
          *(void *)(v73 + 8 * v32) = v74;
          uint64_t v75 = *(void *)(v72 + 48);
          uint64_t v76 = *(void *)(v75 + 16 * v28);
          *(void *)(v75 + 16 * v28) = *(void *)(v75 + 16 * v32);
          *(void *)(v75 + 16 * v32) = v76;
          if (v71) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v71);
          }
          uint64_t v77 = (float *)((char *)v94[0] + 4 * i + v39);
          *uint64_t v77 = v65;
          v77[5] = v66;
        }
      }
      uint64_t v40 = v85 + 1;
      v39 += 4 * v88;
    }
    while (v85 + 1 != v80);
  }
  std::vector<float>::resize((uint64_t)v94, v88 * v37);
  MilWaveRNNInference::signal_postprocessing(&v92, (float **)v94, (float *)(a1 + 304));
  std::string __p = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&__p, v92, (uint64_t)v93, (v93 - (unsigned char *)v92) >> 1);
  uint64_t v78 = *(void *)(v79 + 24);
  if (!v78) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v78 + 48))(v78, &__p);
  if (__p)
  {
    uint64_t v90 = __p;
    operator delete(__p);
  }
  if (v92)
  {
    std::vector<std::string>::pointer v93 = v92;
    operator delete(v92);
  }
  if (v94[0])
  {
    v94[1] = v94[0];
    operator delete(v94[0]);
  }
}

void sub_20D3412FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  _Unwind_Resume(exception_object);
}

void MilWaveRNNModule::process_data(uint64_t a1, uint64_t *a2)
{
  v46[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::mutex *)(a1 + 296);
  std::mutex::lock((std::mutex *)(a1 + 296));
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEBUG, "MIL WaveRNN Inference begin.", buf, 2u);
  }
  Diagnostics::log(7, "MIL WaveRNN Inference begin.", v6);
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *(unsigned char *)(a1 + 288) = 1;
  unint64_t v10 = *(void *)(*(void *)v8 + 8);
  uint64_t v9 = *(std::__shared_weak_count **)(*(void *)v8 + 16);
  v40[0] = v10;
  v40[1] = (unint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = *(std::__shared_weak_count **)(*(void *)v11 + 16);
  v39[0] = *(void *)(*(void *)v11 + 8);
  v39[1] = (unint64_t)v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*(_DWORD *)(v10 + 104)) {
    (*(void (**)(void))(**(void **)(a1 + 272) + 8))(*(void *)(a1 + 272));
  }
  std::string __p = 0;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v13 = *(void (****)(void, unint64_t *, void *))(a1 + 272);
  unint64_t v34 = v10;
  unint64_t v35 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v46[0] = &off_26C2127B0;
  v46[1] = &__p;
  v46[3] = v46;
  (**v13)(v13, &v34, v46);
  std::__function::__value_func<int ()(std::vector<short>)>::~__value_func[abi:ne180100](v46);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = (std::chrono::steady_clock::now().__d_.__rep_ - v7.__d_.__rep_) / 1000000;
  uint64_t v15 = (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3;
  float v16 = (float)(0xAAAAAAAAAAAAAAAELL * v15);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * v15;
  float v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  float v19 = v16 / (float)v14;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v21 = (void *)(a1 + 360);
    if (*(char *)(a1 + 383) < 0) {
      unint64_t v21 = (void *)*v21;
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v17;
    __int16 v42 = 2048;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = v14;
    __int16 v44 = 2048;
    double v45 = v19;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_DEFAULT, "MilWaveRNN %s generated %zu frames, latency: %lld ms, RTF: %.2f", buf, 0x2Au);
  }
  uint64_t v22 = (void *)(a1 + 360);
  if (*(char *)(a1 + 383) < 0) {
    uint64_t v22 = (void *)*v22;
  }
  Diagnostics::log(5, "MilWaveRNN %s generated %zu frames, latency: %lld ms, RTF: %.2f", v20, v22, v17, v14, v19);
  uint64_t v23 = (char *)operator new(0x90uLL);
  *((void *)v23 + 1) = 0;
  *((void *)v23 + 2) = 0;
  *(void *)uint64_t v23 = off_26C216718;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(v23 + 120) = 0u;
  *((void *)v23 + 17) = 0;
  *(_OWORD *)(v23 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *((_WORD *)v23 + 12) = 257;
  *((void *)v23 + 12) = 0;
  *((_OWORD *)v23 + 3) = 0u;
  *((_OWORD *)v23 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  *((_OWORD *)v23 + 5) = 0u;
  *((void *)v23 + 15) = 0;
  *((void *)v23 + 16) = 0;
  *((_WORD *)v23 + 68) = 0;
  *(void *)std::string buf = v23 + 24;
  *(void *)&buf[8] = v23;
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((void *)v23 + 10, (__int16 *)__p, v37, ((char *)v37 - (unsigned char *)__p) >> 1);
  unsigned char v23[24] = *(_DWORD *)(v10 + 104) == 0;
  v23[25] = *(unsigned char *)(v10 + 1);
  v23[137] = *(unsigned char *)(v10 + 109);
  if (*(unsigned char *)(v10 + 108)) {
    *((_DWORD *)v23 + 26) = 1;
  }
  uint64_t v24 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v24 + 8) = 0u;
  *(void *)uint64_t v24 = off_26C215330;
  *((_OWORD *)v24 + 2) = 0u;
  *((void *)v24 + 3) = v24 + 32;
  uint64_t v25 = (uint64_t)(v24 + 24);
  Agglomerate::set<std::shared_ptr<WaveNetFeature>>((uint64_t)(v24 + 24), v40);
  Agglomerate::set<std::shared_ptr<AudioSegmentation>>((uint64_t)(v24 + 24), (unint64_t *)buf);
  Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v24 + 24), v39);
  uint64_t v26 = *a2;
  uint64_t v27 = *(void **)(*a2 + 8);
  {
    uint64_t v29 = *(std::__shared_weak_count **)(*(void *)v28 + 16);
    v33[0] = *(void *)(*(void *)v28 + 8);
    v33[1] = (unint64_t)v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v25, v33);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    uint64_t v26 = *a2;
    uint64_t v27 = *(void **)(*a2 + 8);
  }
  {
    Agglomerate::set<std::shared_ptr<std::vector<TTSSynthesizer::Marker>>>(v25, (unint64_t *)(*(void *)v30 + 8));
  }
  char v31 = v24 + 24;
  uint64_t v32 = (std::__shared_weak_count *)v24;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v24 + 1, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, char **))(*(void *)a1 + 72))(a1, &v31);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  kdebug_trace();
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v24);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v23);
  if (__p)
  {
    unint64_t v37 = (__int16 *)__p;
    operator delete(__p);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::mutex::unlock(v4);
}

void sub_20D341A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (v22)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    if (!v21)
    {
LABEL_4:
      std::mutex::unlock(a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_4;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  goto LABEL_4;
}

void *std::__function::__value_func<int ()(std::vector<short>)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void Agglomerate::set<std::shared_ptr<std::vector<TTSSynthesizer::Marker>>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v8 = (char ***)off_26C206798;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  std::chrono::steady_clock::time_point v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v8 = (char ***)off_26C206798;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void Agglomerate::ItemHolder<std::shared_ptr<std::vector<TTSSynthesizer::Marker>>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206798;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<std::vector<TTSSynthesizer::Marker>>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206798;
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

char **std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::target_type()
{
}

uint64_t std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>(*(char **)(a1 + 8), v3, v2, (v2 - (uint64_t)v3) >> 1);
  if (v3) {
    operator delete(v3);
  }
  return 0;
}

void sub_20D341E50(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_26C2127B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &off_26C2127B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<MilWaveRNNModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<short>)>::~__func()
{
}

void MilWaveRNNModule::prepare(MilWaveRNNModule *this)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::mutex *)((char *)this + 296);
  std::mutex::lock((std::mutex *)((char *)this + 296));
  if (!*((unsigned char *)this + 288))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v3, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
    }
    Diagnostics::log(5, "Prepare inference.", v4);
    unint64_t v5 = (char *)operator new(0x88uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(_OWORD *)(v5 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(void *)unint64_t v5 = off_26C215E20;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *((_WORD *)v5 + 12) = 257;
    *((_OWORD *)v5 + 2) = 0u;
    *(void *)(v5 + 126) = 0;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    std::vector<std::vector<float>>::resize((uint64_t *)v5 + 4, 1uLL);
    std::vector<float>::resize(*((void *)v5 + 4), 0x50uLL);
    long long v6 = (void (***)(void))*((void *)this + 34);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
    v8[0] = &off_26C212808;
    void v8[3] = v8;
    (**v6)(v6);
    std::__function::__value_func<int ()(std::vector<short>)>::~__value_func[abi:ne180100](v8);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  }
  std::mutex::unlock(v2);
}

void sub_20D342108(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<int ()(std::vector<short>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

char **std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::target_type()
{
}

uint64_t std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

uint64_t std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (v2) {
    operator delete(v2);
  }
  return 0;
}

void std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &off_26C212808;
}

void *std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &off_26C212808;
  return result;
}

void std::__function::__func<MilWaveRNNModule::prepare(void)::$_0,std::allocator<MilWaveRNNModule::prepare(void)::$_0>,int ()(std::vector<short>)>::~__func()
{
}

void MilWaveRNNModule::~MilWaveRNNModule(MilWaveRNNModule *this)
{
  MilWaveRNNModule::~MilWaveRNNModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C2019D8;
  if (*((char *)this + 383) < 0) {
    operator delete(*((void **)this + 45));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 296));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
}

void std::allocate_shared[abi:ne180100]<Mil2BnnsModel,std::allocator<Mil2BnnsModel>,std::string const&,std::vector<std::string> &,std::string const&,Mil2BnnsModel::ModelType,void>(uint64_t **a1, uint64_t a2, unsigned __int8 **a3, uint64_t *a4, int a5)
{
  unint64_t v10 = (char *)operator new(0xD8uLL);
  uint64_t v11 = v10;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)unint64_t v10 = off_26C215790;
  *((void *)v10 + 3) = 0;
  unint64_t v12 = (uint64_t *)(v10 + 24);
  *(_OWORD *)(v10 + 72) = 0u;
  uint64_t v57 = (void **)(v10 + 72);
  *(_OWORD *)(v10 + 136) = 0u;
  uint64_t v59 = (std::vector<std::string> *)(v10 + 96);
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *((_DWORD *)v10 + 42) = 1065353216;
  *((_OWORD *)v10 + 11) = 0u;
  uint64_t v13 = (uint64_t)(v10 + 176);
  *((_OWORD *)v10 + 12) = 0u;
  *((_DWORD *)v10 + 52) = 1065353216;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v60 = *(std::string *)a2;
  }
  uint64_t v58 = a1;
  MILContext = (MIL::ParserOptions *)MIL::Opsets::Common::CreateMILContext((uint64_t *)&v64, (MIL::Opsets::Common *)v10);
  if (v64.__r_.__value_.__r.__words[0]) {
    operator new();
  }
  MIL::ParserOptions::Make(&v65, MILContext);
  uint64_t v15 = v65;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v64, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  }
  else {
    std::string v64 = v60;
  }
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v15 + 32))(v15, &v64, 1);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v65 + 64))(v65, 1);
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  MIL::Text::ParseProgramFromFile();
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  uint64_t v16 = v65;
  uint64_t v65 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = v61;
  uint64_t v61 = 0;
  uint64_t v18 = *v12;
  *unint64_t v12 = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    uint64_t v19 = v61;
    uint64_t v61 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (!*v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v50 = (const char *)a2;
    }
    else {
      uint64_t v50 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v64, "Can't read mil2bnns model from: '%s'", v50);
    MEMORY[0x210558D40](exception, &v64);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  BNNSGraphCompileOptionsMakeDefault();
  if (a5 == 1) {
    BNNSGraphCompileOptionsSetPredefinedOptimizations();
  }
  uint64_t v20 = *((unsigned __int8 *)a4 + 23);
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = a4[1];
  }
  if (v20)
  {
    if ((_get_cpu_capabilities() & 0x78000000) == 0)
    {
      uint64_t v55 = __cxa_allocate_exception(0x10uLL);
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v56 = (const char *)a4;
      }
      else {
        unint64_t v56 = (const char *)*a4;
      }
      StringFormatter::StringFormatter((StringFormatter *)&v64, "BNNS downcast type not supported '%s'", v56);
      MEMORY[0x210558D40](v55, &v64);
      __cxa_throw(v55, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if ((*((char *)a4 + 23) & 0x80000000) == 0)
    {
      int v21 = *((unsigned __int8 *)a4 + 23);
      if (v21 != 4)
      {
        if (v21 != 19) {
          goto LABEL_55;
        }
        BOOL v22 = *a4 == 0x73706F5F36317066 && a4[1] == 0x63615F323370665FLL;
        if (!v22 || *(uint64_t *)((char *)a4 + 11) != 0x6D756363615F3233) {
          goto LABEL_55;
        }
LABEL_54:
        BNNSGraphCompileOptionsSetDownconvertMode();
        goto LABEL_55;
      }
LABEL_51:
      if (*(_DWORD *)a4 != 909209702
        && (*(_DWORD *)a4 != 909207138 || (_get_cpu_capabilities() & 0x78000000uLL) < 0x10000001))
      {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
    uint64_t v24 = a4[1];
    if (v24 == 4)
    {
      a4 = (uint64_t *)*a4;
      goto LABEL_51;
    }
    if (v24 == 19)
    {
      BOOL v25 = *(void *)*a4 == 0x73706F5F36317066 && *(void *)(*a4 + 8) == 0x63615F323370665FLL;
      if (v25 && *(void *)(*a4 + 11) == 0x6D756363615F3233) {
        goto LABEL_54;
      }
    }
  }
LABEL_55:
  *((void *)v11 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = BNNSGraphCompileFromFile_v2();
  *((void *)v11 + 5) = v27;
  BNNSGraphCompileOptionsDestroy();
  if (!*((void *)v11 + 4))
  {
    uint64_t v51 = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v52 = (const char *)a2;
    }
    else {
      uint64_t v52 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v64, "failed to compile mil2bnns model from: '%s'", v52);
    MEMORY[0x210558D40](v51, &v64);
    __cxa_throw(v51, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uint64_t v28 = *v12;
  *unint64_t v12 = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = BNNSGraphContextMake();
  *((void *)v11 + 15) = v29;
  *((void *)v11 + 16) = v30;
  if (!v29)
  {
    int v53 = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v54 = (const char *)a2;
    }
    else {
      uint64_t v54 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v64, "failed to create context: '%s'", v54);
    MEMORY[0x210558D40](v53, &v64);
    __cxa_throw(v53, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  WorkspaceSize_uint64_t v2 = BNNSGraphContextGetWorkspaceSize_v2();
  *((void *)v11 + 6) = WorkspaceSize_v2;
  if (WorkspaceSize_v2) {
    WorkspaceSize_uint64_t v2 = (size_t)malloc_type_valloc(WorkspaceSize_v2, 0xD9C60C9DuLL);
  }
  *((void *)v11 + 7) = WorkspaceSize_v2;
  uint64_t v32 = *a3;
  uint64_t v33 = a3[1];
  if (*a3 == v33)
  {
    unint64_t v35 = *a3;
  }
  else
  {
    do
    {
      uint64_t ArgumentPosition = BNNSGraphGetArgumentPosition();
      v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v32, (uint64_t)&std::piecewise_construct, (long long **)&v64)+ 5) = ArgumentPosition;
      v32 += 24;
    }
    while (v32 != v33);
    uint64_t v32 = *a3;
    unint64_t v35 = a3[1];
  }
  *((void *)v11 + 8) = malloc_type_malloc(0x5555555555555558 * ((unint64_t)(v35 - v32) >> 3), 0x80040B8603338uLL);
  unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
  uint64_t v38 = (unsigned char *)*((void *)v11 + 9);
  unint64_t v37 = (char *)*((void *)v11 + 10);
  unint64_t v39 = (v37 - v38) >> 4;
  if (v36 <= v39)
  {
    if (v36 >= v39) {
      goto LABEL_83;
    }
    uint64_t v48 = &v38[0xAAAAAAAAAAAAAAB0 * ((a3[1] - *a3) >> 3)];
LABEL_82:
    *((void *)v11 + 10) = v48;
    goto LABEL_83;
  }
  unint64_t v40 = v36 - v39;
  uint64_t v41 = *((void *)v11 + 11);
  if (v36 - v39 <= (v41 - (uint64_t)v37) >> 4)
  {
    bzero(*((void **)v11 + 10), 16 * v40);
    uint64_t v48 = &v37[16 * v40];
    goto LABEL_82;
  }
  if (v36 >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v42 = v41 - (void)v38;
  if (v42 >> 3 > v36) {
    unint64_t v36 = v42 >> 3;
  }
  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v43 = v36;
  }
  if (v43 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  __int16 v44 = (char *)operator new(16 * v43);
  double v45 = &v44[16 * v39];
  uint64_t v46 = &v44[16 * v43];
  bzero(v45, 16 * v40);
  unint64_t v47 = &v45[16 * v40];
  if (v37 != v38)
  {
    do
    {
      *((_OWORD *)v45 - 1) = *((_OWORD *)v37 - 1);
      v45 -= 16;
      v37 -= 16;
    }
    while (v37 != v38);
    unint64_t v37 = (char *)*v57;
  }
  *((void *)v11 + 9) = v45;
  *((void *)v11 + 10) = v47;
  *((void *)v11 + 11) = v46;
  if (v37) {
    operator delete(v37);
  }
LABEL_83:
  std::vector<std::string>::resize(v59, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  *uint64_t v58 = v12;
  v58[1] = (uint64_t *)v11;
}

void sub_20D342B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_6:
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::~__hash_table(a11);
      *(void *)(v34 - 88) = a14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 88));
      unint64_t v36 = *a12;
      if (*a12)
      {
        v29[3].__shared_owners_ = (uint64_t)v36;
        operator delete(v36);
      }
      uint64_t v37 = *v31;
      *char v31 = 0;
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
      std::__shared_weak_count::~__shared_weak_count(v29);
      operator delete(v38);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

uint64_t std::__shared_ptr_emplace<Mil2BnnsModel>::__on_zero_shared(uint64_t a1)
{
  free(*(void **)(a1 + 32));
  BNNSGraphContextDestroy_v2();
  free(*(void **)(a1 + 56));
  free(*(void **)(a1 + 64));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a1 + 176);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::~__hash_table(a1 + 136);
  unint64_t v4 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t result = *(void *)(a1 + 24);
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void std::__shared_ptr_emplace<Mil2BnnsModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Mil2BnnsModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInferenceModel>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInferenceModel>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218B68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218B68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInferenceModel>::__on_zero_shared()
{
  int v0 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to destroy linear plan");
  if (v0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v4 = v0;
    unint64_t v5 = exception;
    int v6 = v29;
    std::chrono::steady_clock::time_point v7 = (void **)__p[0];
    int v8 = v4;
    status_string = (const char *)espresso_get_status_string();
    unint64_t v10 = __p;
    if (v6 < 0) {
      unint64_t v10 = v7;
    }
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v10, v8, status_string);
    MEMORY[0x210558D40](v5, v30);
    __cxa_throw(v5, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  int v1 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(v26, "Unable to destroy gru plan");
  if (v1)
  {
    uint64_t v11 = __cxa_allocate_exception(0x10uLL);
    int v12 = v1;
    uint64_t v13 = v11;
    int v14 = v27;
    uint64_t v15 = (void **)v26[0];
    int v16 = v12;
    uint64_t v17 = (const char *)espresso_get_status_string();
    uint64_t v18 = v26;
    if (v14 < 0) {
      uint64_t v18 = v15;
    }
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v18, v16, v17);
    MEMORY[0x210558D40](v13, v30);
    __cxa_throw(v13, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  int v2 = espresso_context_destroy();
  std::string::basic_string[abi:ne180100]<0>(v24, "Unable to destroy context");
  if (v2)
  {
    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    int v20 = v25;
    int v21 = (void **)v24[0];
    BOOL v22 = (const char *)espresso_get_status_string();
    uint64_t v23 = v24;
    if (v20 < 0) {
      uint64_t v23 = v21;
    }
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v23, v2, v22);
    MEMORY[0x210558D40](v19, v30);
    __cxa_throw(v19, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
}

void sub_20D3431EC(void *a1)
{
  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0) {
LABEL_6:
    }
      __clang_call_terminate(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void MilWaveRNNPersistentModule::~MilWaveRNNPersistentModule(void **this)
{
  *this = off_26C204390;
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  int v2 = (std::__shared_weak_count *)this[38];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = off_26C204390;
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  int v2 = (std::__shared_weak_count *)this[38];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule(this);
}

uint64_t MilWaveRNNInference::MilWaveRNNInference(uint64_t a1, char *a2)
{
  *(void *)a1 = &unk_26C2028A0;
  MilWaveRNNInference::Config::Config(a1 + 8, a2);
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(a1 + 32) = 0;
  int v4 = (void **)(a1 + 24);
  *(void *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)__p, &v8);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)int v4 = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
  *(void *)(a1 + 40) = *((void *)&v8.__r_.__value_.__l + 2);
  *((unsigned char *)&v8.__r_.__value_.__s + 23) = 0;
  v8.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_20D343460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v14 + 47) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MilWaveRNNInference::Config::Config(uint64_t a1, char *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "frame_size");
  unsigned int v5 = 240;
  *(void *)a1 = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v5);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "enable_rate_change");
  LOBYTE(v5) = 0;
  *(unsigned char *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, (unsigned __int8 *)&v5);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_20D343540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PersistentModuleFactory::get_persistent_module_from_pool<MilWaveRNNPersistentModule>(void *a1, long long *a2, uint64_t a3)
{
  int v4 = *(std::__shared_weak_count **)(a3 + 24);
  if (v4 && (char v7 = std::__shared_weak_count::lock(v4)) != 0)
  {
    std::string v8 = v7;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9
      && (uint64_t v10 = v9 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v9 + 8), (unsigned __int8 *)a2)))
    {
      uint64_t v13 = a2;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)a2, &v13);
      uint64_t v12 = *((void *)v11 + 6);
      *a1 = *((void *)v11 + 5);
      a1[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_20D343628(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MilWaveRNNFusedSubscaleInference::Config::~Config(void **this)
{
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void Mil2BnnsWaveRNNFusedSubscaleInference::Config::~Config(void **this)
{
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

uint64_t MilWaveRNNModule::MilWaveRNNModule(uint64_t a1, char *a2, uint64_t *a3)
{
  int v6 = (std::__shared_weak_count *)a3[1];
  v188[0] = *a3;
  v188[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Module::Module(a1, a2, v188);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)a1 = off_26C2019D8;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 850045863;
  std::string v185 = (void **)(a1 + 360);
  *(_OWORD *)(a1 + 30std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  if (*(char *)(a1 + 207) < 0) {
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(a1 + 184), *(void *)(a1 + 192));
  }
  else {
    std::string v208 = *(std::string *)(a1 + 184);
  }
  uint64_t v7 = *a3;
  std::string v8 = (std::__shared_weak_count *)a3[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersistentModuleFactory::get_persistent_module_from_pool<MilWaveRNNPersistentModule>(&v186, (long long *)&v208, v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v208.__r_.__value_.__l.__data_);
  }
  if (*(char *)(v186 + 335) < 0) {
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)(v186 + 312), *(void *)(v186 + 320));
  }
  else {
    std::string v208 = *(std::string *)(v186 + 312);
  }
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*v185);
  }
  *(_OWORD *)std::string v185 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
  *(void *)(a1 + 376) = *((void *)&v208.__r_.__value_.__l + 2);
  size_t v9 = strlen((const char *)(0x800000020D6C35A9 & 0x7FFFFFFFFFFFFFFFLL));
  size_t v10 = v9;
  int v11 = *(char *)(a1 + 383);
  if (v11 < 0)
  {
    size_t v13 = *(void *)(a1 + 368);
    if (v9 != v13)
    {
      size_t v14 = strlen((const char *)(0x800000020D6C35D1 & 0x7FFFFFFFFFFFFFFFLL));
      goto LABEL_116;
    }
    if (v9 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v12 = *v185;
LABEL_25:
    if (!memcmp(v12, (const void *)(0x800000020D6C35A9 & 0x7FFFFFFFFFFFFFFFLL), v10))
    {
      uint64_t v15 = (char *)operator new(0x5C8uLL);
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *(void *)uint64_t v15 = off_26C2185F0;
      uint64_t v17 = *a3;
      int v16 = (std::__shared_weak_count *)a3[1];
      uint64_t v179 = (uint64_t)(v15 + 24);
      std::string::size_type v182 = v16;
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MilWaveRNNInference::MilWaveRNNInference(v179, a2);
      if (v182) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v182);
      }
      *((void *)v15 + 3) = &off_26C2051D0;
      MilWaveRNNInference::Config::Config((uint64_t)(v15 + 72), a2);
      uint64_t v18 = (void **)(v15 + 88);
      std::string::basic_string[abi:ne180100]<0>((void *)v15 + 11, "input_mel");
      uint64_t v19 = (void **)(v15 + 112);
      std::string::basic_string[abi:ne180100]<0>((void *)v15 + 14, "Identity_1");
      int v20 = (void **)(v15 + 136);
      std::string::basic_string[abi:ne180100]<0>((void *)v15 + 17, "input_mel_linear");
      int v21 = (void **)(v15 + 160);
      std::string::basic_string[abi:ne180100]<0>((void *)v15 + 20, "input_coarse");
      uint64_t v176 = (void **)(v15 + 184);
      std::string::basic_string[abi:ne180100]<0>((void *)v15 + 23, "state");
      std::string::size_type v173 = (void **)(v15 + 208);
      std::string::basic_string[abi:ne180100]<0>((void *)v15 + 26, "Identity_2");
      BOOL v170 = (void **)(v15 + 232);
      std::string::basic_string[abi:ne180100]<0>((void *)v15 + 29, "Identity_3");
      int v168 = (void **)(v15 + 256);
      std::string::basic_string[abi:ne180100]<0>((void *)v15 + 32, "Identity");
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_linear_model_input_input_mel");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (v15[111] < 0) {
        operator delete(*v18);
      }
      *(_OWORD *)uint64_t v18 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      *((void *)v15 + 13) = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_linear_model_output_mel_linear_output");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (v15[135] < 0) {
        operator delete(*v19);
      }
      *(_OWORD *)uint64_t v19 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      *((void *)v15 + 16) = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_input_input_mel_linear");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (v15[159] < 0) {
        operator delete(*v20);
      }
      *(_OWORD *)int v20 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      *((void *)v15 + 19) = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_input_input_coarse");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (v15[183] < 0) {
        operator delete(*v21);
      }
      *(_OWORD *)int v21 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      *((void *)v15 + 22) = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_input_state");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (v15[207] < 0) {
        operator delete(*v176);
      }
      *(_OWORD *)uint64_t v176 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      *((void *)v15 + 25) = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_output_coarse_out");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (v15[231] < 0) {
        operator delete(*v173);
      }
      *(_OWORD *)std::string::size_type v173 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      *((void *)v15 + 28) = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_output_fine_out");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (v15[255] < 0) {
        operator delete(*v170);
      }
      *(_OWORD *)BOOL v170 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      *((void *)v15 + 31) = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_output_final_state");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (v15[279] < 0) {
        operator delete(*v168);
      }
      *(_OWORD *)int v168 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      *((void *)v15 + 3std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      *((void *)v15 + 35) = 0;
      *((void *)v15 + 36) = 0;
      if (v182) {
        atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      PersistentModuleFactory::get_persistent_module_from_pool<MilWaveRNNPersistentModule>(&v205, (long long *)v15 + 3, v17);
      if (v182) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v182);
      }
      BOOL v22 = v205[37];
      uint64_t v23 = v205[38];
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = (std::__shared_weak_count *)*((void *)v15 + 36);
      *((void *)v15 + 35) = v22;
      *((void *)v15 + 36) = v23;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      int v25 = espresso_plan_build();
      std::string::basic_string[abi:ne180100]<0>(&v204, "Unable to build gru plan.");
      if (v25)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        int v117 = SHIBYTE(v204.__r_.__value_.__r.__words[2]);
        std::string::size_type v118 = v204.__r_.__value_.__r.__words[0];
        status_string = (const char *)espresso_get_status_string();
        unint64_t v120 = &v204;
        if (v117 < 0) {
          unint64_t v120 = (std::string *)v118;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v208, "%s Error: %d, %s", (const char *)v120, v25, status_string);
        MEMORY[0x210558D40](exception, &v208);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v204.__r_.__value_.__l.__data_);
      }
      int v26 = espresso_plan_build();
      std::string::basic_string[abi:ne180100]<0>(&v203, "Unable to build linear plan.");
      if (v26)
      {
        unint64_t v121 = __cxa_allocate_exception(0x10uLL);
        int v122 = SHIBYTE(v203.__r_.__value_.__r.__words[2]);
        std::string::size_type v123 = v203.__r_.__value_.__r.__words[0];
        uint64_t v124 = (const char *)espresso_get_status_string();
        uint64_t v125 = &v203;
        if (v122 < 0) {
          uint64_t v125 = (std::string *)v123;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v208, "%s Error: %d, %s", (const char *)v125, v26, v124);
        MEMORY[0x210558D40](v121, &v208);
        __cxa_throw(v121, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v203.__r_.__value_.__l.__data_);
      }
      int v27 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v202, "Unable to bind graph_input_input_mel");
      if (v27)
      {
        float v126 = __cxa_allocate_exception(0x10uLL);
        int v127 = SHIBYTE(v202.__r_.__value_.__r.__words[2]);
        std::string::size_type v128 = v202.__r_.__value_.__r.__words[0];
        int v129 = (const char *)espresso_get_status_string();
        unint64_t v130 = &v202;
        if (v127 < 0) {
          unint64_t v130 = (std::string *)v128;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v208, "%s Error: %d, %s", (const char *)v130, v27, v129);
        MEMORY[0x210558D40](v126, &v208);
        __cxa_throw(v126, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v202.__r_.__value_.__l.__data_);
      }
      int v28 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v201, "Unable to bind graph_output_mel_linear_output");
      if (v28)
      {
        int v131 = __cxa_allocate_exception(0x10uLL);
        int v132 = SHIBYTE(v201.__r_.__value_.__r.__words[2]);
        std::string::size_type v133 = v201.__r_.__value_.__r.__words[0];
        int32x2_t v134 = (const char *)espresso_get_status_string();
        int v135 = &v201;
        if (v132 < 0) {
          int v135 = (std::string *)v133;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v208, "%s Error: %d, %s", (const char *)v135, v28, v134);
        MEMORY[0x210558D40](v131, &v208);
        __cxa_throw(v131, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v201.__r_.__value_.__l.__data_);
      }
      int v29 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&__p, "Unable to bind graph_input_input_mel_linear");
      if (v29)
      {
        int v136 = __cxa_allocate_exception(0x10uLL);
        int v137 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v138 = __p.__r_.__value_.__r.__words[0];
        int v139 = (const char *)espresso_get_status_string();
        p_p = &__p;
        if (v137 < 0) {
          p_p = (std::string *)v138;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v208, "%s Error: %d, %s", (const char *)p_p, v29, v139);
        MEMORY[0x210558D40](v136, &v208);
        __cxa_throw(v136, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v30 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v199, "Unable to bind graph_input_input_coarse");
      if (v30)
      {
        int v141 = __cxa_allocate_exception(0x10uLL);
        int v142 = SHIBYTE(v199.__r_.__value_.__r.__words[2]);
        std::string::size_type v143 = v199.__r_.__value_.__r.__words[0];
        int v144 = (const char *)espresso_get_status_string();
        int v145 = &v199;
        if (v142 < 0) {
          int v145 = (std::string *)v143;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v208, "%s Error: %d, %s", (const char *)v145, v30, v144);
        MEMORY[0x210558D40](v141, &v208);
        __cxa_throw(v141, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v199.__r_.__value_.__l.__data_);
      }
      int v31 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v198, "Unable to bind graph_input_state");
      if (v31)
      {
        uint64_t v146 = __cxa_allocate_exception(0x10uLL);
        int v147 = SHIBYTE(v198.__r_.__value_.__r.__words[2]);
        std::string::size_type v148 = v198.__r_.__value_.__r.__words[0];
        float v149 = (const char *)espresso_get_status_string();
        float v150 = &v198;
        if (v147 < 0) {
          float v150 = (std::string *)v148;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v208, "%s Error: %d, %s", (const char *)v150, v31, v149);
        MEMORY[0x210558D40](v146, &v208);
        __cxa_throw(v146, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v198.__r_.__value_.__l.__data_);
      }
      int v32 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v197, "Unable to bind graph_output_coarse_out");
      if (v32)
      {
        float v151 = __cxa_allocate_exception(0x10uLL);
        int v152 = SHIBYTE(v197.__r_.__value_.__r.__words[2]);
        std::string::size_type v153 = v197.__r_.__value_.__r.__words[0];
        uint64_t v154 = (const char *)espresso_get_status_string();
        unint64_t v155 = &v197;
        if (v152 < 0) {
          unint64_t v155 = (std::string *)v153;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v208, "%s Error: %d, %s", (const char *)v155, v32, v154);
        MEMORY[0x210558D40](v151, &v208);
        __cxa_throw(v151, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v197.__r_.__value_.__l.__data_);
      }
      int v33 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v196, "Unable to bind graph_output_fine_out");
      if (v33)
      {
        uint64_t v156 = __cxa_allocate_exception(0x10uLL);
        int v157 = SHIBYTE(v196.__r_.__value_.__r.__words[2]);
        std::string::size_type v158 = v196.__r_.__value_.__r.__words[0];
        uint64_t v159 = (const char *)espresso_get_status_string();
        uint64_t v160 = &v196;
        if (v157 < 0) {
          uint64_t v160 = (std::string *)v158;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v208, "%s Error: %d, %s", (const char *)v160, v33, v159);
        MEMORY[0x210558D40](v156, &v208);
        __cxa_throw(v156, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v196.__r_.__value_.__l.__data_);
      }
      int v34 = espresso_network_bind_buffer();
      std::string::basic_string[abi:ne180100]<0>(&v195, "Unable to bind graph_output_final_state");
      if (v34)
      {
        uint64_t v161 = __cxa_allocate_exception(0x10uLL);
        int v162 = SHIBYTE(v195.__r_.__value_.__r.__words[2]);
        std::string::size_type v163 = v195.__r_.__value_.__r.__words[0];
        float v164 = (const char *)espresso_get_status_string();
        float v165 = &v195;
        if (v162 < 0) {
          float v165 = (std::string *)v163;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v208, "%s Error: %d, %s", (const char *)v165, v34, v164);
        MEMORY[0x210558D40](v161, &v208);
        __cxa_throw(v161, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v195.__r_.__value_.__l.__data_);
      }
      (*(void (**)(uint64_t))(*(void *)v179 + 8))(v179);
      if (v206) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v206);
      }
      if (v182) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v182);
      }
      *(void *)&long long v35 = v15 + 24;
      *((void *)&v35 + 1) = v15;
      unint64_t v36 = *(std::__shared_weak_count **)(a1 + 280);
      *(_OWORD *)(a1 + 272) = v35;
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      LOBYTE(v11) = *(unsigned char *)(a1 + 383);
    }
    size_t v14 = strlen((const char *)(0x800000020D6C35D1 & 0x7FFFFFFFFFFFFFFFLL));
    if ((v11 & 0x80) == 0)
    {
      size_t v13 = v11;
      goto LABEL_111;
    }
    size_t v13 = *(void *)(a1 + 368);
LABEL_116:
    if (v14 != v13)
    {
      size_t v39 = strlen((const char *)(0x800000020D6C35FELL & 0x7FFFFFFFFFFFFFFFLL));
      goto LABEL_125;
    }
    if (v13 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v38 = *v185;
    int v37 = 1;
    goto LABEL_119;
  }
  uint64_t v12 = (void *)(a1 + 360);
  size_t v13 = *(unsigned __int8 *)(a1 + 383);
  if (v10 == v13) {
    goto LABEL_25;
  }
  size_t v14 = strlen((const char *)(0x800000020D6C35D1 & 0x7FFFFFFFFFFFFFFFLL));
LABEL_111:
  if (v14 != v13)
  {
    size_t v39 = strlen((const char *)(0x800000020D6C35FELL & 0x7FFFFFFFFFFFFFFFLL));
    goto LABEL_122;
  }
  int v37 = 0;
  uint64_t v38 = (void *)(a1 + 360);
LABEL_119:
  if (memcmp(v38, (const void *)(0x800000020D6C35D1 & 0x7FFFFFFFFFFFFFFFLL), v13))
  {
    size_t v39 = strlen((const char *)(0x800000020D6C35FELL & 0x7FFFFFFFFFFFFFFFLL));
    if (v37)
    {
      size_t v13 = *(void *)(a1 + 368);
LABEL_125:
      if (v39 != v13) {
        goto LABEL_468;
      }
      if (v13 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v41 = *v185;
LABEL_128:
      if (memcmp(v41, (const void *)(0x800000020D6C35FELL & 0x7FFFFFFFFFFFFFFFLL), v13)) {
        goto LABEL_468;
      }
      uint64_t v42 = operator new(0x160uLL);
      unint64_t v43 = v42;
      v42[1] = 0;
      v42[2] = 0;
      void *v42 = off_26C2185B8;
      __int16 v44 = v42 + 3;
      uint64_t v46 = *a3;
      double v45 = (std::__shared_weak_count *)a3[1];
      if (v45)
      {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v171 = v45;
      MilWaveRNNInference::MilWaveRNNInference((uint64_t)(v42 + 3), a2);
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      v43[3] = &off_26C2051B0;
      int v169 = v44;
      MilWaveRNNInference::Config::Config((uint64_t)(v43 + 9), a2);
      unint64_t v47 = (void **)(v43 + 11);
      std::string::basic_string[abi:ne180100]<0>(v43 + 11, "input_mel");
      uint64_t v48 = (void **)(v43 + 14);
      std::string::basic_string[abi:ne180100]<0>(v43 + 14, "Identity_1");
      uint64_t v49 = (void **)(v43 + 17);
      std::string::basic_string[abi:ne180100]<0>(v43 + 17, "input_mel_linear");
      uint64_t v50 = (void **)(v43 + 20);
      std::string::basic_string[abi:ne180100]<0>(v43 + 20, "input_audio");
      uint64_t v183 = (void **)(v43 + 23);
      std::string::basic_string[abi:ne180100]<0>(v43 + 23, "state");
      uint64_t v180 = (void **)(v43 + 26);
      std::string::basic_string[abi:ne180100]<0>(v43 + 26, "Identity_2");
      BOOL v177 = (void **)(v43 + 29);
      std::string::basic_string[abi:ne180100]<0>(v43 + 29, "Identity_3");
      uint64_t v166 = v46;
      uint64_t v174 = (void **)(v43 + 32);
      std::string::basic_string[abi:ne180100]<0>(v43 + 32, "Identity");
      uint64_t v51 = (void **)(v43 + 35);
      std::string::basic_string[abi:ne180100]<0>(v43 + 35, "fp16");
      v43[38] = 0x1C000000050;
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_linear_model_input_input_mel");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (*((char *)v43 + 111) < 0) {
        operator delete(*v47);
      }
      *(_OWORD *)unint64_t v47 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      v43[13] = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_linear_model_output_mel_linear_output");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (*((char *)v43 + 135) < 0) {
        operator delete(*v48);
      }
      *(_OWORD *)uint64_t v48 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      v43[16] = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_input_input_mel_linear");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (*((char *)v43 + 159) < 0) {
        operator delete(*v49);
      }
      *(_OWORD *)uint64_t v49 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      v43[19] = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_input_input_audio");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (*((char *)v43 + 183) < 0) {
        operator delete(*v50);
      }
      *(_OWORD *)uint64_t v50 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      v43[22] = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_input_state");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (*((char *)v43 + 207) < 0) {
        operator delete(*v183);
      }
      *(_OWORD *)uint64_t v183 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      v43[25] = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_output_odd_out");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (*((char *)v43 + 231) < 0) {
        operator delete(*v180);
      }
      *(_OWORD *)uint64_t v180 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      v43[28] = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_output_even_out");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (*((char *)v43 + 255) < 0) {
        operator delete(*v177);
      }
      *(_OWORD *)BOOL v177 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      v43[31] = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_output_final_state");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
      if (*((char *)v43 + 279) < 0) {
        operator delete(*v174);
      }
      *(_OWORD *)uint64_t v174 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      v43[34] = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v205, "model_io_dtype");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("fp16", a2, (const void **)&v205, &v208);
      if (*((char *)v43 + 303) < 0) {
        operator delete(*v51);
      }
      *(_OWORD *)uint64_t v51 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      v43[37] = *((void *)&v208.__r_.__value_.__l + 2);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
      v208.__r_.__value_.__s.__data_[0] = 0;
      if (v207 < 0) {
        operator delete(v205);
      }
      std::string::basic_string[abi:ne180100]<0>(&v208, "graph_linear_model_mel_size");
      *((_DWORD *)v43 + 76) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v208.__r_.__value_.__l.__data_, (unsigned int *)v43 + 76);
      if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v208.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v208, "graph_gru_model_hidden_size");
      *((_DWORD *)v43 + 77) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v208.__r_.__value_.__l.__data_, (unsigned int *)v43 + 77);
      if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v208.__r_.__value_.__l.__data_);
      }
      v43[39] = 0;
      v43[40] = 0;
      *(void *)((char *)v43 + 340) = 0;
      *(void *)((char *)v43 + 332) = 0;
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      PersistentModuleFactory::get_persistent_module_from_pool<MilWaveRNNPersistentModule>(&v208, (long long *)v43 + 3, v166);
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      uint64_t v52 = *(void *)(v208.__r_.__value_.__r.__words[0] + 296);
      int v53 = *(std::__shared_weak_count **)(v208.__r_.__value_.__r.__words[0] + 304);
      if (v53)
      {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v54 = (std::__shared_weak_count *)v43[40];
      v43[39] = v52;
      v43[40] = v53;
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      uint64_t v55 = (void ***)(v43 + 39);
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      uint64_t v57 = **v55;
      unint64_t v56 = (std::__shared_weak_count *)(*v55)[1];
      if (v56) {
        atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((char *)v43 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(&v204, (const std::string::value_type *)v43[11], v43[12]);
      }
      else
      {
        *(_OWORD *)&v204.__r_.__value_.__l.__data_ = *(_OWORD *)v47;
        v204.__r_.__value_.__r.__words[2] = v43[13];
      }
      int v93 = *((_DWORD *)v43 + 76);
      if (*((char *)v43 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v203, (const std::string::value_type *)v43[35], v43[36]);
      }
      else
      {
        *(_OWORD *)&v203.__r_.__value_.__l.__data_ = *(_OWORD *)v51;
        v203.__r_.__value_.__r.__words[2] = v43[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v57, (long long *)&v204, v93, (uint64_t)&v203);
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v203.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v204.__r_.__value_.__l.__data_);
      }
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      std::string v95 = **v55;
      std::string v94 = (std::__shared_weak_count *)(*v55)[1];
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((char *)v43 + 135) < 0)
      {
        std::string::__init_copy_ctor_external(&v202, (const std::string::value_type *)v43[14], v43[15]);
      }
      else
      {
        *(_OWORD *)&v202.__r_.__value_.__l.__data_ = *(_OWORD *)v48;
        v202.__r_.__value_.__r.__words[2] = v43[16];
      }
      int v96 = *((_DWORD *)v43 + 77);
      if (*((char *)v43 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v201, (const std::string::value_type *)v43[35], v43[36]);
      }
      else
      {
        *(_OWORD *)&v201.__r_.__value_.__l.__data_ = *(_OWORD *)v51;
        v201.__r_.__value_.__r.__words[2] = v43[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v95, (long long *)&v202, 3 * v96, (uint64_t)&v201);
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v201.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v202.__r_.__value_.__l.__data_);
      }
      if (v94) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v94);
      }
      std::string v98 = (*v55)[2];
      std::string v97 = (std::__shared_weak_count *)(*v55)[3];
      if (v97) {
        atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((char *)v43 + 159) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v43[17], v43[18]);
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v49;
        __p.__r_.__value_.__r.__words[2] = v43[19];
      }
      int v99 = *((_DWORD *)v43 + 77);
      if (*((char *)v43 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v199, (const std::string::value_type *)v43[35], v43[36]);
      }
      else
      {
        *(_OWORD *)&v199.__r_.__value_.__l.__data_ = *(_OWORD *)v51;
        v199.__r_.__value_.__r.__words[2] = v43[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v98, (long long *)&__p, 3 * v99, (uint64_t)&v199);
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v199.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v97) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v97);
      }
      std::string v101 = (*v55)[2];
      std::string v100 = (std::__shared_weak_count *)(*v55)[3];
      if (v100) {
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((char *)v43 + 183) < 0)
      {
        std::string::__init_copy_ctor_external(&v198, (const std::string::value_type *)v43[20], v43[21]);
      }
      else
      {
        *(_OWORD *)&v198.__r_.__value_.__l.__data_ = *(_OWORD *)v50;
        v198.__r_.__value_.__r.__words[2] = v43[22];
      }
      if (*((char *)v43 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v197, (const std::string::value_type *)v43[35], v43[36]);
      }
      else
      {
        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = *(_OWORD *)v51;
        v197.__r_.__value_.__r.__words[2] = v43[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v101, (long long *)&v198, 4, (uint64_t)&v197);
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v197.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v198.__r_.__value_.__l.__data_);
      }
      if (v100) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v100);
      }
      float v103 = (*v55)[2];
      std::string v102 = (std::__shared_weak_count *)(*v55)[3];
      if (v102) {
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((char *)v43 + 207) < 0)
      {
        std::string::__init_copy_ctor_external(&v196, (const std::string::value_type *)v43[23], v43[24]);
      }
      else
      {
        *(_OWORD *)&v196.__r_.__value_.__l.__data_ = *(_OWORD *)v183;
        v196.__r_.__value_.__r.__words[2] = v43[25];
      }
      int v104 = *((_DWORD *)v43 + 77);
      if (*((char *)v43 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v195, (const std::string::value_type *)v43[35], v43[36]);
      }
      else
      {
        *(_OWORD *)&v195.__r_.__value_.__l.__data_ = *(_OWORD *)v51;
        v195.__r_.__value_.__r.__words[2] = v43[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v103, (long long *)&v196, v104, (uint64_t)&v195);
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v195.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v196.__r_.__value_.__l.__data_);
      }
      if (v102) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v102);
      }
      float v106 = (*v55)[2];
      int v105 = (std::__shared_weak_count *)(*v55)[3];
      if (v105) {
        atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((char *)v43 + 231) < 0)
      {
        std::string::__init_copy_ctor_external(&v194, (const std::string::value_type *)v43[26], v43[27]);
      }
      else
      {
        *(_OWORD *)&v194.__r_.__value_.__l.__data_ = *(_OWORD *)v180;
        v194.__r_.__value_.__r.__words[2] = v43[28];
      }
      if (*((char *)v43 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v193, (const std::string::value_type *)v43[35], v43[36]);
      }
      else
      {
        *(_OWORD *)&v193.__r_.__value_.__l.__data_ = *(_OWORD *)v51;
        v193.__r_.__value_.__r.__words[2] = v43[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v106, (long long *)&v194, 1, (uint64_t)&v193);
      if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v193.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v194.__r_.__value_.__l.__data_);
      }
      if (v105) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v105);
      }
      int v108 = (*v55)[2];
      float v107 = (std::__shared_weak_count *)(*v55)[3];
      if (v107) {
        atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((char *)v43 + 255) < 0)
      {
        std::string::__init_copy_ctor_external(&v192, (const std::string::value_type *)v43[29], v43[30]);
      }
      else
      {
        *(_OWORD *)&v192.__r_.__value_.__l.__data_ = *(_OWORD *)v177;
        v192.__r_.__value_.__r.__words[2] = v43[31];
      }
      if (*((char *)v43 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v191, (const std::string::value_type *)v43[35], v43[36]);
      }
      else
      {
        *(_OWORD *)&v191.__r_.__value_.__l.__data_ = *(_OWORD *)v51;
        v191.__r_.__value_.__r.__words[2] = v43[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v108, (long long *)&v192, 1, (uint64_t)&v191);
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v191.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v192.__r_.__value_.__l.__data_);
      }
      if (v107) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v107);
      }
      float v110 = (*v55)[2];
      float v109 = (std::__shared_weak_count *)(*v55)[3];
      if (v109) {
        atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v91 = v171;
      if (*((char *)v43 + 279) < 0)
      {
        std::string::__init_copy_ctor_external(&v190, (const std::string::value_type *)v43[32], v43[33]);
      }
      else
      {
        *(_OWORD *)&v190.__r_.__value_.__l.__data_ = *(_OWORD *)v174;
        v190.__r_.__value_.__r.__words[2] = v43[34];
      }
      int v111 = *((_DWORD *)v43 + 77);
      if (*((char *)v43 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(&v189, (const std::string::value_type *)v43[35], v43[36]);
      }
      else
      {
        *(_OWORD *)&v189.__r_.__value_.__l.__data_ = *(_OWORD *)v51;
        v189.__r_.__value_.__r.__words[2] = v43[37];
      }
      Mil2BnnsModel::add_bnns_input_output(v110, (long long *)&v190, v111, (uint64_t)&v189);
      if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v189.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v190.__r_.__value_.__l.__data_);
      }
      if (v109) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v109);
      }
      goto LABEL_462;
    }
LABEL_122:
    BOOL v40 = v39 == v11;
    size_t v13 = v39;
    uint64_t v41 = (void *)(a1 + 360);
    if (!v40) {
      goto LABEL_468;
    }
    goto LABEL_128;
  }
  uint64_t v58 = operator new(0x150uLL);
  unint64_t v43 = v58;
  v58[1] = 0;
  v58[2] = 0;
  *uint64_t v58 = off_26C218900;
  uint64_t v59 = v58 + 3;
  uint64_t v61 = *a3;
  std::string v60 = (std::__shared_weak_count *)a3[1];
  if (v60)
  {
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v172 = v60;
  MilWaveRNNInference::MilWaveRNNInference((uint64_t)(v58 + 3), a2);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  v43[3] = &off_26C205620;
  int v169 = v59;
  MilWaveRNNInference::Config::Config((uint64_t)(v43 + 9), a2);
  uint64_t v62 = (void **)(v43 + 11);
  std::string::basic_string[abi:ne180100]<0>(v43 + 11, "input_mel");
  uint64_t v63 = (void **)(v43 + 14);
  std::string::basic_string[abi:ne180100]<0>(v43 + 14, "Identity_1");
  std::string v64 = (void **)(v43 + 17);
  std::string::basic_string[abi:ne180100]<0>(v43 + 17, "input_mel_linear");
  uint64_t v65 = (void **)(v43 + 20);
  std::string::basic_string[abi:ne180100]<0>(v43 + 20, "input_coarse");
  uint64_t v184 = (void **)(v43 + 23);
  std::string::basic_string[abi:ne180100]<0>(v43 + 23, "state");
  uint64_t v181 = (void **)(v43 + 26);
  std::string::basic_string[abi:ne180100]<0>(v43 + 26, "Identity_2");
  int v178 = (void **)(v43 + 29);
  std::string::basic_string[abi:ne180100]<0>(v43 + 29, "Identity_3");
  uint64_t v167 = v61;
  uint64_t v175 = (void **)(v43 + 32);
  std::string::basic_string[abi:ne180100]<0>(v43 + 32, "Identity");
  float v66 = (void **)(v43 + 35);
  std::string::basic_string[abi:ne180100]<0>(v43 + 35, "fp16");
  v43[38] = 0x1C000000050;
  std::string::basic_string[abi:ne180100]<0>(&v205, "graph_linear_model_input_input_mel");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
  if (*((char *)v43 + 111) < 0) {
    operator delete(*v62);
  }
  *(_OWORD *)uint64_t v62 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
  v43[13] = *((void *)&v208.__r_.__value_.__l + 2);
  *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
  v208.__r_.__value_.__s.__data_[0] = 0;
  if (v207 < 0) {
    operator delete(v205);
  }
  std::string::basic_string[abi:ne180100]<0>(&v205, "graph_linear_model_output_mel_linear_output");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
  if (*((char *)v43 + 135) < 0) {
    operator delete(*v63);
  }
  *(_OWORD *)uint64_t v63 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
  v43[16] = *((void *)&v208.__r_.__value_.__l + 2);
  *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
  v208.__r_.__value_.__s.__data_[0] = 0;
  if (v207 < 0) {
    operator delete(v205);
  }
  std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_input_input_mel_linear");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
  if (*((char *)v43 + 159) < 0) {
    operator delete(*v64);
  }
  *(_OWORD *)std::string v64 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
  v43[19] = *((void *)&v208.__r_.__value_.__l + 2);
  *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
  v208.__r_.__value_.__s.__data_[0] = 0;
  if (v207 < 0) {
    operator delete(v205);
  }
  std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_input_input_coarse");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
  if (*((char *)v43 + 183) < 0) {
    operator delete(*v65);
  }
  *(_OWORD *)uint64_t v65 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
  v43[22] = *((void *)&v208.__r_.__value_.__l + 2);
  *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
  v208.__r_.__value_.__s.__data_[0] = 0;
  if (v207 < 0) {
    operator delete(v205);
  }
  std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_input_state");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
  if (*((char *)v43 + 207) < 0) {
    operator delete(*v184);
  }
  *(_OWORD *)uint64_t v184 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
  v43[25] = *((void *)&v208.__r_.__value_.__l + 2);
  *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
  v208.__r_.__value_.__s.__data_[0] = 0;
  if (v207 < 0) {
    operator delete(v205);
  }
  std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_output_coarse_out");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
  if (*((char *)v43 + 231) < 0) {
    operator delete(*v181);
  }
  *(_OWORD *)uint64_t v181 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
  v43[28] = *((void *)&v208.__r_.__value_.__l + 2);
  *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
  v208.__r_.__value_.__s.__data_[0] = 0;
  if (v207 < 0) {
    operator delete(v205);
  }
  std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_output_fine_out");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
  if (*((char *)v43 + 255) < 0) {
    operator delete(*v178);
  }
  *(_OWORD *)int v178 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
  v43[31] = *((void *)&v208.__r_.__value_.__l + 2);
  *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
  v208.__r_.__value_.__s.__data_[0] = 0;
  if (v207 < 0) {
    operator delete(v205);
  }
  std::string::basic_string[abi:ne180100]<0>(&v205, "graph_gru_model_output_final_state");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v205, &v208);
  if (*((char *)v43 + 279) < 0) {
    operator delete(*v175);
  }
  *(_OWORD *)uint64_t v175 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
  v43[34] = *((void *)&v208.__r_.__value_.__l + 2);
  *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
  v208.__r_.__value_.__s.__data_[0] = 0;
  if (v207 < 0) {
    operator delete(v205);
  }
  std::string::basic_string[abi:ne180100]<0>(&v205, "model_io_dtype");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("fp16", a2, (const void **)&v205, &v208);
  if (*((char *)v43 + 303) < 0) {
    operator delete(*v66);
  }
  *(_OWORD *)float v66 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
  v43[37] = *((void *)&v208.__r_.__value_.__l + 2);
  *((unsigned char *)&v208.__r_.__value_.__s + 23) = 0;
  v208.__r_.__value_.__s.__data_[0] = 0;
  if (v207 < 0) {
    operator delete(v205);
  }
  std::string::basic_string[abi:ne180100]<0>(&v208, "graph_linear_model_mel_size");
  *((_DWORD *)v43 + 76) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v208.__r_.__value_.__l.__data_, (unsigned int *)v43 + 76);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v208.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v208, "graph_gru_model_hidden_size");
  *((_DWORD *)v43 + 77) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v208.__r_.__value_.__l.__data_, (unsigned int *)v43 + 77);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v208.__r_.__value_.__l.__data_);
  }
  v43[39] = 0;
  v43[40] = 0;
  if (v60) {
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersistentModuleFactory::get_persistent_module_from_pool<MilWaveRNNPersistentModule>(&v208, (long long *)v43 + 3, v167);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  uint64_t v67 = *(void *)(v208.__r_.__value_.__r.__words[0] + 296);
  uint64_t v68 = *(std::__shared_weak_count **)(v208.__r_.__value_.__r.__words[0] + 304);
  if (v68)
  {
    atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v69 = (std::__shared_weak_count *)v43[40];
  v43[39] = v67;
  v43[40] = v68;
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  uint64_t v70 = (void ***)(v43 + 39);
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  uint64_t v72 = **v70;
  uint64_t v71 = (std::__shared_weak_count *)(*v70)[1];
  if (v71) {
    atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v43 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v204, (const std::string::value_type *)v43[11], v43[12]);
  }
  else
  {
    *(_OWORD *)&v204.__r_.__value_.__l.__data_ = *(_OWORD *)v62;
    v204.__r_.__value_.__r.__words[2] = v43[13];
  }
  int v73 = *((_DWORD *)v43 + 76);
  if (*((char *)v43 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v203, (const std::string::value_type *)v43[35], v43[36]);
  }
  else
  {
    *(_OWORD *)&v203.__r_.__value_.__l.__data_ = *(_OWORD *)v66;
    v203.__r_.__value_.__r.__words[2] = v43[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v72, (long long *)&v204, v73, (uint64_t)&v203);
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v203.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v204.__r_.__value_.__l.__data_);
  }
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  uint64_t v75 = **v70;
  uint64_t v74 = (std::__shared_weak_count *)(*v70)[1];
  if (v74) {
    atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v43 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(&v202, (const std::string::value_type *)v43[14], v43[15]);
  }
  else
  {
    *(_OWORD *)&v202.__r_.__value_.__l.__data_ = *(_OWORD *)v63;
    v202.__r_.__value_.__r.__words[2] = v43[16];
  }
  int v76 = *((_DWORD *)v43 + 77);
  if (*((char *)v43 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v201, (const std::string::value_type *)v43[35], v43[36]);
  }
  else
  {
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = *(_OWORD *)v66;
    v201.__r_.__value_.__r.__words[2] = v43[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v75, (long long *)&v202, 3 * v76, (uint64_t)&v201);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v202.__r_.__value_.__l.__data_);
  }
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  uint64_t v78 = (*v70)[2];
  uint64_t v77 = (std::__shared_weak_count *)(*v70)[3];
  if (v77) {
    atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v43 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v43[17], v43[18]);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v64;
    __p.__r_.__value_.__r.__words[2] = v43[19];
  }
  int v79 = *((_DWORD *)v43 + 77);
  if (*((char *)v43 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v199, (const std::string::value_type *)v43[35], v43[36]);
  }
  else
  {
    *(_OWORD *)&v199.__r_.__value_.__l.__data_ = *(_OWORD *)v66;
    v199.__r_.__value_.__r.__words[2] = v43[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v78, (long long *)&__p, 3 * v79, (uint64_t)&v199);
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v199.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  unint64_t v81 = (*v70)[2];
  uint64_t v80 = (std::__shared_weak_count *)(*v70)[3];
  if (v80) {
    atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v43 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(&v198, (const std::string::value_type *)v43[20], v43[21]);
  }
  else
  {
    *(_OWORD *)&v198.__r_.__value_.__l.__data_ = *(_OWORD *)v65;
    v198.__r_.__value_.__r.__words[2] = v43[22];
  }
  if (*((char *)v43 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v197, (const std::string::value_type *)v43[35], v43[36]);
  }
  else
  {
    *(_OWORD *)&v197.__r_.__value_.__l.__data_ = *(_OWORD *)v66;
    v197.__r_.__value_.__r.__words[2] = v43[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v81, (long long *)&v198, 1, (uint64_t)&v197);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v198.__r_.__value_.__l.__data_);
  }
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  unint64_t v83 = (*v70)[2];
  uint64_t v82 = (std::__shared_weak_count *)(*v70)[3];
  if (v82) {
    atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v43 + 207) < 0)
  {
    std::string::__init_copy_ctor_external(&v196, (const std::string::value_type *)v43[23], v43[24]);
  }
  else
  {
    *(_OWORD *)&v196.__r_.__value_.__l.__data_ = *(_OWORD *)v184;
    v196.__r_.__value_.__r.__words[2] = v43[25];
  }
  int v84 = *((_DWORD *)v43 + 77);
  if (*((char *)v43 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v195, (const std::string::value_type *)v43[35], v43[36]);
  }
  else
  {
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = *(_OWORD *)v66;
    v195.__r_.__value_.__r.__words[2] = v43[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v83, (long long *)&v196, v84, (uint64_t)&v195);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  if (v82) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
  }
  unint64_t v86 = (*v70)[2];
  uint64_t v85 = (std::__shared_weak_count *)(*v70)[3];
  if (v85) {
    atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v43 + 231) < 0)
  {
    std::string::__init_copy_ctor_external(&v194, (const std::string::value_type *)v43[26], v43[27]);
  }
  else
  {
    *(_OWORD *)&v194.__r_.__value_.__l.__data_ = *(_OWORD *)v181;
    v194.__r_.__value_.__r.__words[2] = v43[28];
  }
  if (*((char *)v43 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v193, (const std::string::value_type *)v43[35], v43[36]);
  }
  else
  {
    *(_OWORD *)&v193.__r_.__value_.__l.__data_ = *(_OWORD *)v66;
    v193.__r_.__value_.__r.__words[2] = v43[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v86, (long long *)&v194, 1, (uint64_t)&v193);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v194.__r_.__value_.__l.__data_);
  }
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  unint64_t v88 = (*v70)[2];
  unint64_t v87 = (std::__shared_weak_count *)(*v70)[3];
  if (v87) {
    atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)v43 + 255) < 0)
  {
    std::string::__init_copy_ctor_external(&v192, (const std::string::value_type *)v43[29], v43[30]);
  }
  else
  {
    *(_OWORD *)&v192.__r_.__value_.__l.__data_ = *(_OWORD *)v178;
    v192.__r_.__value_.__r.__words[2] = v43[31];
  }
  if (*((char *)v43 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v191, (const std::string::value_type *)v43[35], v43[36]);
  }
  else
  {
    *(_OWORD *)&v191.__r_.__value_.__l.__data_ = *(_OWORD *)v66;
    v191.__r_.__value_.__r.__words[2] = v43[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v88, (long long *)&v192, 1, (uint64_t)&v191);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  uint64_t v90 = (*v70)[2];
  unint64_t v89 = (std::__shared_weak_count *)(*v70)[3];
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v91 = v172;
  if (*((char *)v43 + 279) < 0)
  {
    std::string::__init_copy_ctor_external(&v190, (const std::string::value_type *)v43[32], v43[33]);
  }
  else
  {
    *(_OWORD *)&v190.__r_.__value_.__l.__data_ = *(_OWORD *)v175;
    v190.__r_.__value_.__r.__words[2] = v43[34];
  }
  int v92 = *((_DWORD *)v43 + 77);
  if (*((char *)v43 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(&v189, (const std::string::value_type *)v43[35], v43[36]);
  }
  else
  {
    *(_OWORD *)&v189.__r_.__value_.__l.__data_ = *(_OWORD *)v66;
    v189.__r_.__value_.__r.__words[2] = v43[37];
  }
  Mil2BnnsModel::add_bnns_input_output(v90, (long long *)&v190, v92, (uint64_t)&v189);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
LABEL_462:
  (*(void (**)(void *))(*v169 + 8))(v169);
  if (v208.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v208.__r_.__value_.__l.__size_);
  }
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
  *(void *)&long long v112 = v169;
  *((void *)&v112 + 1) = v43;
  int v113 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v112;
  if (v113) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v113);
  }
LABEL_468:
  if (!*(void *)(a1 + 272))
  {
    int v115 = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&v208, "Model type is not supported.");
    MEMORY[0x210558D40](v115, &v208);
    __cxa_throw(v115, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v187) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v187);
  }
  return a1;
}

void sub_20D345F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, Mil2BnnsWaveRNNFusedSubscaleInference::Config *a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void **a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v58 - 89) < 0)
  {
    operator delete(*(void **)(v58 - 112));
    if ((v56 & 1) == 0)
    {
LABEL_6:
      if (a54 < 0) {
        operator delete(__p);
      }
      std::string v60 = *(std::__shared_weak_count **)(v58 - 128);
      if (v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
      uint64_t v61 = *(std::__shared_weak_count **)(v57 + 288);
      if (v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
      MilWaveRNNFusedSubscaleInference::Config::~Config(a13);
      *(void *)(v57 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &unk_26C2028A0;
      if (*(char *)(v57 + 71) < 0) {
        operator delete(*(void **)(v57 + 48));
      }
      if (a19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a19);
      }
      std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v57);
      operator delete(v62);
      if (a22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a22);
      }
      if (*(char *)(v54 + 383) < 0) {
        operator delete(*a20);
      }
      std::mutex::~mutex((std::mutex *)(v54 + 296));
      uint64_t v63 = *(std::__shared_weak_count **)(v54 + 280);
      if (v63) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      }
      Module::~Module((Module *)v54);
      _Unwind_Resume(a1);
    }
  }
  else if (!v56)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v55);
  goto LABEL_6;
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &off_26C2051B0;
  int v2 = *(std::__shared_weak_count **)(a1 + 320);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Mil2BnnsWaveRNNFusedSubscaleInference::Config::~Config((void **)(a1 + 72));
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &unk_26C2028A0;
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 48);
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2185B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2185B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &off_26C205620;
  int v2 = *(std::__shared_weak_count **)(a1 + 320);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Mil2BnnsWaveRNNFusedSubscaleInference::Config::~Config((void **)(a1 + 72));
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &unk_26C2028A0;
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 48);
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Mil2BnnsWaveRNNFusedSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &off_26C2051D0;
  espresso_plan_build_clean();
  espresso_plan_build_clean();
  int v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MilWaveRNNFusedSubscaleInference::Config::~Config((void **)(a1 + 72));
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &unk_26C2028A0;
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 48);
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2185F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MilWaveRNNFusedSubscaleInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2185F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TokenizerEngine::next_token(TokenizerEngine *this, uint64_t a2, int a3)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  *((void *)this + 3) = 0;
  *((void *)this + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (*(_DWORD *)(a2 + 32) != *(_DWORD *)(a2 + 48))
  {
    uint64_t v61 = (unsigned char *)(a2 + 65);
    while (1)
    {
      UChar32 v6 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)(a2 + 24));
      if (v6 < 0)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = *(int *)(a2 + 32);
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v63 = v17;
          _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_ERROR, "Illegal UTF-8 character at offset %04tx", buf, 0xCu);
        }
        Diagnostics::log(3, "Illegal UTF-8 character at offset %04tx", v16, *(int *)(a2 + 32));
        TokenizerEngine::make_token(a2, (uint64_t)this);
        int v18 = *(_DWORD *)(a2 + 60) + 1;
        goto LABEL_131;
      }
      unsigned int v7 = v6;
      int v8 = u_charType(v6);
      int v10 = v8;
      int v11 = 1 << v8;
      BOOL v13 = ((1 << v8) & 0x7F001) != 0 && v7 != 63743;
      if (v7 == 173)
      {
        if (*(char *)(a2 + 95) < 0) {
          uint64_t v14 = *(void *)(a2 + 80);
        }
        else {
          uint64_t v14 = *(unsigned __int8 *)(a2 + 95);
        }
        unsigned int v23 = *(unsigned __int8 *)(*(void *)(a2 + 24) + *(int *)(a2 + 32));
        unsigned int v24 = (v23 + 62);
        if (v23 <= 0xEF) {
          int v25 = 2;
        }
        else {
          int v25 = 3;
        }
        if (v23 <= 0xDF) {
          int v26 = v25;
        }
        else {
          int v26 = v25 + 1;
        }
        if (v24 >= 0x33) {
          int v26 = 1;
        }
        if (!v14)
        {
          int v18 = v26 + *(_DWORD *)(a2 + 60);
LABEL_131:
          *(_DWORD *)(a2 + 60) = v18;
          goto LABEL_132;
        }
        int v27 = v26 + *(_DWORD *)(a2 + 56);
      }
      else
      {
        if ((v11 & 0x1C0) == 0)
        {
          if (*v61)
          {
            TokenizerEngine::make_token(a2, (uint64_t)this);
            uint64_t v59 = v61;
            goto LABEL_149;
          }
          uint64_t v28 = *(unsigned __int8 *)(a2 + 95);
          if (*(char *)(a2 + 95) < 0) {
            uint64_t v29 = *(void *)(a2 + 80);
          }
          else {
            uint64_t v29 = *(unsigned __int8 *)(a2 + 95);
          }
          int v35 = (1 << v8) & 0x2E;
          if (v29)
          {
            if (*(unsigned char *)(a2 + 64))
            {
              if (v8 == 9) {
                goto LABEL_71;
              }
            }
            else if ((v11 & 0x2E) != 0)
            {
              goto LABEL_71;
            }
            TokenizerEngine::make_token(a2, (uint64_t)this);
            uint64_t v28 = *(unsigned __int8 *)(a2 + 95);
          }
LABEL_71:
          uint64_t v36 = v28;
          if ((v28 & 0x80) != 0) {
            uint64_t v36 = *(void *)(a2 + 80);
          }
          BOOL v38 = v10 == 9 || v35 != 0;
          if (!v36 && v38) {
            *(unsigned char *)(a2 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v10 == 9;
          }
          if (!v13)
          {
            if ((v28 & 0x80u) == 0) {
              uint64_t v39 = v28;
            }
            else {
              uint64_t v39 = *(void *)(a2 + 80);
            }
            if (v7 < 0x10000) {
              int v40 = 1;
            }
            else {
              int v40 = 2;
            }
            std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)(a2 + 72), (int)v39 + v40, v9);
            if (HIWORD(v7))
            {
              if (*(char *)(a2 + 95) >= 0) {
                uint64_t v43 = a2 + 72;
              }
              else {
                uint64_t v43 = *(void *)(a2 + 72);
              }
              *(_WORD *)(v43 + 2 * (int)v39) = (v7 >> 10) - 10304;
              if (*(char *)(a2 + 95) >= 0) {
                uint64_t v41 = a2 + 72;
              }
              else {
                uint64_t v41 = *(void *)(a2 + 72);
              }
              uint64_t v42 = (v39 << 32) + 0x100000000;
              LOWORD(v7) = v7 & 0x3FF | 0xDC00;
            }
            else
            {
              if (*(char *)(a2 + 95) >= 0) {
                uint64_t v41 = a2 + 72;
              }
              else {
                uint64_t v41 = *(void *)(a2 + 72);
              }
              uint64_t v42 = v39 << 32;
            }
            *(_WORD *)(v41 + (v42 >> 31)) = v7;
            unsigned int v44 = *(unsigned __int8 *)(*(void *)(a2 + 24) + *(int *)(a2 + 32));
            unsigned int v45 = (v44 + 62);
            if (v44 <= 0xEF) {
              int v46 = 2;
            }
            else {
              int v46 = 3;
            }
            if (v44 <= 0xDF) {
              int v47 = v46;
            }
            else {
              int v47 = v46 + 1;
            }
            if (v45 >= 0x33) {
              int v47 = 1;
            }
            *(_DWORD *)(a2 + 56) += v47;
            if (v35 || v10 == 9)
            {
              if (*(char *)(a2 + 95) < 0 && *(void *)(a2 + 80) >= 0x80uLL) {
                TokenizerEngine::make_token(a2, (uint64_t)this);
              }
            }
            else
            {
              *uint64_t v61 = 1;
            }
            goto LABEL_132;
          }
          if (v7 == 10)
          {
            if (!*(unsigned char *)(a2 + 67))
            {
              *(unsigned char *)(a2 + 67) = 1;
              goto LABEL_122;
            }
          }
          else if (v7 != 8233)
          {
            if (v7 != 13)
            {
LABEL_122:
              unsigned int v48 = *(unsigned __int8 *)(*(void *)(a2 + 24) + *(int *)(a2 + 32));
              unsigned int v49 = (v48 + 62);
              if (v48 <= 0xEF) {
                int v50 = 2;
              }
              else {
                int v50 = 3;
              }
              if (v48 <= 0xDF) {
                int v51 = v50;
              }
              else {
                int v51 = v50 + 1;
              }
              if (v49 >= 0x33) {
                int v51 = 1;
              }
              int v18 = v51 + *(_DWORD *)(a2 + 60);
              goto LABEL_131;
            }
            if (!*(unsigned char *)(a2 + 66))
            {
              *(unsigned char *)(a2 + 66) = 1;
              goto LABEL_122;
            }
          }
          *(unsigned char *)(a2 + 68) = 1;
          goto LABEL_122;
        }
        if (*(char *)(a2 + 95) >= 0) {
          uint64_t v19 = *(unsigned __int8 *)(a2 + 95);
        }
        else {
          uint64_t v19 = *(void *)(a2 + 80);
        }
        if (v7 < 0x10000) {
          int v20 = 1;
        }
        else {
          int v20 = 2;
        }
        std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)(a2 + 72), (int)v19 + v20, v9);
        if (HIWORD(v7))
        {
          if (*(char *)(a2 + 95) >= 0) {
            uint64_t v30 = a2 + 72;
          }
          else {
            uint64_t v30 = *(void *)(a2 + 72);
          }
          *(_WORD *)(v30 + 2 * (int)v19) = (v7 >> 10) - 10304;
          if (*(char *)(a2 + 95) >= 0) {
            uint64_t v21 = a2 + 72;
          }
          else {
            uint64_t v21 = *(void *)(a2 + 72);
          }
          uint64_t v22 = (v19 << 32) + 0x100000000;
          LOWORD(v7) = v7 & 0x3FF | 0xDC00;
        }
        else
        {
          if (*(char *)(a2 + 95) >= 0) {
            uint64_t v21 = a2 + 72;
          }
          else {
            uint64_t v21 = *(void *)(a2 + 72);
          }
          uint64_t v22 = v19 << 32;
        }
        *(_WORD *)(v21 + (v22 >> 31)) = v7;
        unsigned int v31 = *(unsigned __int8 *)(*(void *)(a2 + 24) + *(int *)(a2 + 32));
        unsigned int v32 = (v31 + 62);
        if (v31 <= 0xEF) {
          int v33 = 2;
        }
        else {
          int v33 = 3;
        }
        if (v31 <= 0xDF) {
          int v34 = v33;
        }
        else {
          int v34 = v33 + 1;
        }
        if (v32 >= 0x33) {
          int v34 = 1;
        }
        int v27 = v34 + *(_DWORD *)(a2 + 56);
      }
      *(_DWORD *)(a2 + 56) = v27;
LABEL_132:
      uint64_t v52 = *(int *)(a2 + 32);
      unsigned int v53 = *(unsigned __int8 *)(*(void *)(a2 + 24) + v52);
      unsigned int v54 = (v53 + 62);
      if (v53 <= 0xEF) {
        int v55 = 2;
      }
      else {
        int v55 = 3;
      }
      if (v53 <= 0xDF) {
        int v56 = v55;
      }
      else {
        int v56 = v55 + 1;
      }
      if (v54 >= 0x33) {
        int v56 = 1;
      }
      int v57 = v56 + v52;
      *(_DWORD *)(a2 + 32) = v57;
      BOOL v5 = *(void *)this != 0;
      if (v57 == *(_DWORD *)(a2 + 48) || *(void *)this != 0)
      {
        if (!a3) {
          return;
        }
        goto LABEL_147;
      }
    }
  }
  BOOL v5 = 0;
  if (a3)
  {
LABEL_147:
    if (!v5)
    {
      TokenizerEngine::make_token(a2, (uint64_t)this);
      uint64_t v59 = (unsigned char *)(a2 + 65);
LABEL_149:
      *uint64_t v59 = 0;
    }
  }
}

void sub_20D3473A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11)
{
  if (*(char *)(v11 + 47) < 0) {
    operator delete(*a11);
  }
  _Unwind_Resume(exception_object);
}

void TokenizerEngine::make_token(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(void *)(a1 + 80)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 95))
  {
    return;
  }
  int v4 = (void **)(a1 + 72);
  if (*(unsigned char *)(a1 + 64) || *(unsigned char *)(a1 + 65)) {
    uint64_t v5 = a1 + 104;
  }
  else {
    uint64_t v5 = a1 + 96;
  }
  UTFTransliterator::transliterate((std::basic_string<char16_t> *)&v13, v5, (const void **)(a1 + 72));
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)int v4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(void *)(a1 + 88) = *((void *)&v13.__r_.__value_.__l + 2);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)&long long v7 = v6;
  *((void *)&v7 + 1) = HIDWORD(v6);
  *(_OWORD *)a2 = v7;
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 68);
  int v8 = *(char *)(a1 + 95);
  if (v8 >= 0) {
    std::basic_string<char16_t>::value_type v9 = (const UChar *)(a1 + 72);
  }
  else {
    std::basic_string<char16_t>::value_type v9 = *(const UChar **)(a1 + 72);
  }
  if (v8 >= 0) {
    LODWORD(v10) = *(unsigned __int8 *)(a1 + 95);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 80);
  }
  UTFString::to_utf8(&v13, v9, v10);
  uint64_t v12 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(void *)(a2 + 40) = *((void *)&v13.__r_.__value_.__l + 2);
  std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)(a1 + 72), 0, v11);
  *(void *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 66) = 0;
  *(unsigned char *)(a1 + 68) = 0;
}

void std::basic_string<char16_t>::resize(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __n, std::basic_string<char16_t>::value_type __c)
{
  uint64_t v5 = this;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
    std::basic_string<char16_t>::size_type v8 = __n - size;
    if (__n > size)
    {
      std::basic_string<char16_t>::size_type v7 = this->__r_.__value_.__l.__size_;
      unint64_t v11 = this->__r_.__value_.__r.__words[2];
      std::basic_string<char16_t>::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      unint64_t v6 = HIBYTE(v11);
      goto LABEL_6;
    }
    this->__r_.__value_.__l.__size_ = __n;
    uint64_t v5 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
LABEL_16:
    int v16 = (std::basic_string<char16_t> *)((char *)v5 + 2 * __n);
    goto LABEL_19;
  }
  std::basic_string<char16_t>::size_type v7 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  std::basic_string<char16_t>::size_type v8 = __n - v7;
  if (__n <= v7)
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
    goto LABEL_16;
  }
  std::basic_string<char16_t>::size_type v9 = 10;
LABEL_6:
  if (v9 - v7 < v8)
  {
    std::basic_string<char16_t>::__grow_by(this, v9, v8 - v9 + v7, v7, v7, v3, v4);
    v5->__r_.__value_.__l.__size_ = v7;
    LOBYTE(v6) = *((unsigned char *)&v5->__r_.__value_.__s + 23);
  }
  uint64_t v12 = v5;
  if ((v6 & 0x80) != 0) {
    uint64_t v12 = (std::basic_string<char16_t> *)v5->__r_.__value_.__r.__words[0];
  }
  std::string v13 = (std::basic_string<char16_t> *)((char *)v12 + 2 * v7);
  std::basic_string<char16_t>::size_type v14 = v8;
  do
  {
    v13->__r_.__value_.__s.__data_[0] = 0;
    std::string v13 = (std::basic_string<char16_t> *)((char *)v13 + 2);
    --v14;
  }
  while (v14);
  std::basic_string<char16_t>::size_type v15 = v7 + v8;
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0) {
    v5->__r_.__value_.__l.__size_ = v15;
  }
  else {
    *((unsigned char *)&v5->__r_.__value_.__s + 23) = v15 & 0x7F;
  }
  int v16 = (std::basic_string<char16_t> *)((char *)v12 + 2 * v15);
LABEL_19:
  v16->__r_.__value_.__s.__data_[0] = 0;
}

void std::basic_string<char16_t>::__grow_by(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add)
{
  if (0x7FFFFFFFFFFFFFF7 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v11 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t v11 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char16_t>::size_type v12 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char16_t>::size_type v12 = 2 * __old_cap;
  }
  uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v12 | 3) != 0xB) {
    uint64_t v13 = v12 | 3;
  }
  if (v12 >= 0xB) {
    uint64_t v14 = v13 + 1;
  }
  else {
    uint64_t v14 = 11;
  }
  if (__old_cap <= 0x3FFFFFFFFFFFFFF2) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0x7FFFFFFFFFFFFFF7;
  }
  int v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v15);
  std::basic_string<char16_t>::size_type v17 = (std::basic_string<char16_t>::size_type)v16;
  uint64_t v19 = v18;
  if (__n_copy) {
    memmove(v16, v11, 2 * __n_copy);
  }
  if (__old_sz != __n_copy) {
    memmove((void *)(v17 + 2 * __n_copy), (char *)v11 + 2 * __n_copy, 2 * (__old_sz - __n_copy));
  }
  if (__old_cap != 10) {
    operator delete(v11);
  }
  this->__r_.__value_.__r.__words[0] = v17;
  this->__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
}

uint64_t RewriteImpl::compile_rule(uint64_t a1, const void **a2)
{
  int v2 = *(uint64_t (**)(void))(**(void **)std::map<std::string,std::string>::at(*(void *)(a1 + 192), a2) + 24);
  return v2();
}

uint64_t RewriteImpl::add_rule(uint64_t a1, const void **a2)
{
  int v2 = *(uint64_t (**)(void))(**(void **)std::map<std::string,std::string>::at(*(void *)(a1 + 192), a2) + 40);
  return v2();
}

void RewriteImpl::create_rule_inst(uint64_t a1)
{
  int v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = off_26C2195B0;
  v2[5] = 0;
  std::basic_string<char16_t>::size_type v3 = *(std::__shared_weak_count **)(a1 + 200);
  *(void *)(a1 + 200) = v2;
  v2[4] = 0;
  v2[3] = v2 + 4;
  *(void *)(a1 + 192) = v2 + 3;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  fr_verbose_log(void)::is_verbose_ = 0;
  std::basic_string<char16_t>::size_type v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = off_26C216408;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[3] = off_26C2017B0;
  v4[8] = 0;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_DWORD *)v4 + 18) = 1;
  operator new();
}

void sub_20D3479D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair((uint64_t)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<FastRewriter>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<FastRewriter>&,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v5 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  if (!*v5)
  {
    std::string::size_type v6 = v5;
    std::basic_string<char16_t>::size_type v7 = (char *)operator new(0x48uLL);
    v9[0] = v7;
    v9[1] = a1 + 1;
    char v10 = 0;
    std::basic_string<char16_t>::size_type v8 = (std::string *)(v7 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((void *)v7 + 6) = *(void *)(a3 + 16);
    }
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 24);
    *(void *)(a3 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *(void *)(a3 + 32) = 0;
    char v10 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v6, (uint64_t *)v7);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
}

void sub_20D347BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<FastRewriter>>>::__on_zero_shared(uint64_t a1)
{
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<FastRewriter>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2195B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<FastRewriter>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2195B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void RewriteImpl::generate_tokens(RewriteImpl *this)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t **__return_ptr))(*(void *)this + 64))(&v84);
  uint64_t v2 = *v84;
  uint64_t v3 = v84[1];
  if (*v84 != v3)
  {
    uint64_t v75 = v84[1];
    while (1)
    {
      std::basic_string<char16_t>::size_type v4 = *(void **)(v2 + 32);
      int64_t v5 = *(unsigned __int8 *)(v2 + 23);
      if (*(char *)(v2 + 23) < 0)
      {
        if (*(void *)(v2 + 8))
        {
LABEL_5:
          std::string::size_type v6 = (UTFRegex *)*((void *)this + 43);
          status[0] = U_ZERO_ERROR;
          if ((v5 & 0x80u) == 0) {
            std::basic_string<char16_t>::size_type v7 = (const char *)v2;
          }
          else {
            std::basic_string<char16_t>::size_type v7 = *(const char **)v2;
          }
          if ((v5 & 0x80u) == 0) {
            int64_t v8 = v5;
          }
          else {
            int64_t v8 = *(void *)(v2 + 8);
          }
          std::basic_string<char16_t>::size_type v9 = utext_openUTF8(0, v7, v8, status);
          if (status[0] <= U_ZERO_ERROR) {
            char v10 = v9;
          }
          else {
            char v10 = 0;
          }
          UTFRegex::set_text(v6, v10, 1);
          if (*((char *)this + 151) < 0) {
            std::string::__init_copy_ctor_external(&v82, *((const std::string::value_type **)this + 16), *((void *)this + 17));
          }
          else {
            std::string v82 = *(std::string *)((char *)this + 128);
          }
          if (UTFRegex::search(*((URegularExpression ***)this + 43)))
          {
            uint64_t v11 = (URegularExpression **)*((void *)this + 43);
            status[0] = U_ZERO_ERROR;
            int32_t v12 = uregex_start(*v11, 0, status);
            UTFRegex::group<std::basic_string<char16_t>>((uint64_t)status, *((URegularExpression ***)this + 43), 1);
            if ((v79 & 0x80u) == 0) {
              uint64_t v13 = status;
            }
            else {
              uint64_t v13 = *(UErrorCode **)status;
            }
            if ((v79 & 0x80u) == 0) {
              int32_t v14 = v79;
            }
            else {
              int32_t v14 = __n;
            }
            UTFString::to_utf8(&v91, (const UChar *)v13, v14);
            if ((char)v79 < 0) {
              operator delete(*(void **)status);
            }
            UTFRegex::group<std::basic_string<char16_t>>((uint64_t)status, *((URegularExpression ***)this + 43), 2);
            if ((v79 & 0x80u) == 0) {
              uint64_t v15 = status;
            }
            else {
              uint64_t v15 = *(UErrorCode **)status;
            }
            if ((v79 & 0x80u) == 0) {
              int32_t v16 = v79;
            }
            else {
              int32_t v16 = __n;
            }
            UTFString::to_utf8(&__str, (const UChar *)v15, v16);
            if ((char)v79 < 0)
            {
              operator delete(*(void **)status);
              if (!v12) {
                goto LABEL_38;
              }
              goto LABEL_108;
            }
            if (v12) {
              goto LABEL_108;
            }
LABEL_38:
            char v17 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              uint64_t v18 = &v91;
              switch(*((unsigned char *)&v91.__r_.__value_.__s + 23))
              {
                case 2:
                  goto LABEL_48;
                case 3:
                  goto LABEL_53;
                case 4:
                  goto LABEL_74;
                case 5:
                  if (LODWORD(v91.__r_.__value_.__l.__data_) != 1768191329 || v91.__r_.__value_.__s.__data_[4] != 111) {
                    goto LABEL_108;
                  }
                  goto LABEL_66;
                default:
                  goto LABEL_108;
              }
            }
            std::string::size_type size = v91.__r_.__value_.__l.__size_;
            if (v91.__r_.__value_.__l.__size_ == 2)
            {
              uint64_t v18 = (std::string *)v91.__r_.__value_.__r.__words[0];
LABEL_48:
              if (LOWORD(v18->__r_.__value_.__l.__data_) != 28276) {
                goto LABEL_49;
              }
              char v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                if (__str.__r_.__value_.__l.__size_ != 5) {
                  goto LABEL_49;
                }
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 5) {
                  goto LABEL_49;
                }
                p_str = &__str;
              }
              int data = (int)p_str->__r_.__value_.__l.__data_;
              int v34 = p_str->__r_.__value_.__s.__data_[4];
              if (data != 1818587251 || v34 != 108)
              {
LABEL_49:
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::size_type size = v91.__r_.__value_.__l.__size_;
                  goto LABEL_51;
                }
                goto LABEL_108;
              }
LABEL_100:
              if (v25 < 0)
              {
                int v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_102:
                operator delete(v27);
                char v17 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
              }
LABEL_103:
              if (v17 < 0) {
                operator delete(v91.__r_.__value_.__l.__data_);
              }
LABEL_105:
              (*(void (**)(RewriteImpl *))(*(void *)this + 152))(this);
LABEL_202:
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v82.__r_.__value_.__l.__data_);
              }
              goto LABEL_204;
            }
LABEL_51:
            if (size == 3)
            {
              uint64_t v18 = (std::string *)v91.__r_.__value_.__r.__words[0];
LABEL_53:
              int data_low = LOWORD(v18->__r_.__value_.__l.__data_);
              int v22 = v18->__r_.__value_.__s.__data_[2];
              if (data_low == 28532 && v22 == 105)
              {
                char v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  int v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  if (__str.__r_.__value_.__l.__size_ != 4) {
                    goto LABEL_102;
                  }
                }
                else
                {
                  if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 4) {
                    goto LABEL_103;
                  }
                  int v27 = &__str;
                }
                if (LODWORD(v27->__r_.__value_.__l.__data_) != 1752461935) {
                  goto LABEL_100;
                }
              }
              if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_108;
              }
              std::string::size_type size = v91.__r_.__value_.__l.__size_;
            }
            if (size != 4)
            {
              if (size != 5) {
                goto LABEL_108;
              }
              if (*(_DWORD *)v91.__r_.__value_.__l.__data_ != 1768191329
                || *(unsigned char *)(v91.__r_.__value_.__r.__words[0] + 4) != 111)
              {
                goto LABEL_108;
              }
LABEL_66:
              char v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              goto LABEL_100;
            }
            uint64_t v18 = (std::string *)v91.__r_.__value_.__r.__words[0];
LABEL_74:
            if (LODWORD(v18->__r_.__value_.__l.__data_) == 1735287148)
            {
              uint64_t v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v29 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v29 = __str.__r_.__value_.__l.__size_;
              }
              std::string::size_type v30 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
              if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v30 = v82.__r_.__value_.__l.__size_;
              }
              if (v29 == v30)
              {
                if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unsigned int v31 = &v82;
                }
                else {
                  unsigned int v31 = (std::string *)v82.__r_.__value_.__r.__words[0];
                }
                if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
                {
                  if (!memcmp(__str.__r_.__value_.__l.__data_, v31, __str.__r_.__value_.__l.__size_)) {
                    goto LABEL_108;
                  }
                }
                else
                {
                  if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
                    goto LABEL_108;
                  }
                  unsigned int v32 = &__str;
                  while (v32->__r_.__value_.__s.__data_[0] == v31->__r_.__value_.__s.__data_[0])
                  {
                    unsigned int v32 = (std::string *)((char *)v32 + 1);
                    unsigned int v31 = (std::string *)((char *)v31 + 1);
                    if (!--v28) {
                      goto LABEL_108;
                    }
                  }
                }
              }
              std::string::operator=(&v82, &__str);
            }
LABEL_108:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v91.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v36 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)this + 24), (const void **)&v82.__r_.__value_.__l.__data_);
          if (*((void *)this + 24) + 8 == v36) {
            goto LABEL_105;
          }
          uint64_t v37 = v36;
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          BOOL v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(status[0]) = 0;
            _os_log_impl(&dword_20CD80000, v38, OS_LOG_TYPE_DEFAULT, "rewrite started", (uint8_t *)status, 2u);
          }
          Diagnostics::log(5, "rewrite started", v39);
          kdebug_trace();
          v76.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          (***(void (****)(UErrorCode *__return_ptr))(v37 + 56))(status);
          uint64_t v40 = v79;
          if ((v79 & 0x80u) == 0) {
            size_t v41 = v79;
          }
          else {
            size_t v41 = __n;
          }
          uint64_t v42 = *(unsigned __int8 *)(v2 + 23);
          int v43 = (char)v42;
          if ((v42 & 0x80u) != 0) {
            uint64_t v42 = *(void *)(v2 + 8);
          }
          if (v41 == v42)
          {
            if (v43 >= 0) {
              unsigned int v44 = (unsigned __int8 *)v2;
            }
            else {
              unsigned int v44 = *(unsigned __int8 **)v2;
            }
            if ((v79 & 0x80) != 0)
            {
              if (memcmp(*(const void **)status, v44, __n)) {
                goto LABEL_134;
              }
            }
            else if (v79)
            {
              unsigned int v45 = status;
              while (*(unsigned __int8 *)v45 == *v44)
              {
                unsigned int v45 = (UErrorCode *)((char *)v45 + 1);
                ++v44;
                if (!--v40) {
                  goto LABEL_156;
                }
              }
              goto LABEL_134;
            }
LABEL_156:
            (*(void (**)(RewriteImpl *, unsigned __int8 *))(*(void *)this + 152))(this, v44);
          }
          else
          {
LABEL_134:
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            int v46 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
            {
              Censor::global_plaintext(&v91, v2);
              int v47 = SHIBYTE(v91.__r_.__value_.__r.__words[2]);
              std::string::size_type v48 = v91.__r_.__value_.__r.__words[0];
              Censor::global_plaintext(&__str, (uint64_t)status);
              if (v47 >= 0) {
                unsigned int v49 = &v91;
              }
              else {
                unsigned int v49 = (std::string *)v48;
              }
              int v50 = &__str;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int v50 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136315394;
              unint64_t v87 = v49;
              __int16 v88 = 2080;
              unint64_t v89 = v50;
              _os_log_impl(&dword_20CD80000, v46, OS_LOG_TYPE_DEFAULT, "#Rewrite:\n[FROM] - %s\n[ TO ] - %s", buf, 0x16u);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v91.__r_.__value_.__l.__data_);
              }
            }
            Censor::global_plaintext(&v91, v2);
            int v51 = SHIBYTE(v91.__r_.__value_.__r.__words[2]);
            std::string::size_type v52 = v91.__r_.__value_.__r.__words[0];
            Censor::global_plaintext(&__str, (uint64_t)status);
            if (v51 >= 0) {
              unsigned int v54 = &v91;
            }
            else {
              unsigned int v54 = (std::string *)v52;
            }
            int v55 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v55 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            Diagnostics::log(5, "#Rewrite:\n[FROM] - %s\n[ TO ] - %s", v53, v54, v55);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v91.__r_.__value_.__l.__data_);
            }
            (*(void (**)(RewriteImpl *, UErrorCode *))(*(void *)this + 168))(this, status);
          }
          int v57 = *v80;
          int v56 = v80[1];
          while (v57 != v56)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v60 = *v57;
              LODWORD(v91.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(v91.__r_.__value_.__r.__words[0]) = v60;
              _os_log_impl(&dword_20CD80000, v58, OS_LOG_TYPE_DEFAULT, "#Rewrite - POS - %d", (uint8_t *)&v91, 8u);
            }
            Diagnostics::log(5, "#Rewrite - POS - %d", v59, *v57);
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v61 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
            {
              Censor::global_plaintext(&v91, (uint64_t)(v57 + 2));
              uint64_t v62 = (v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v91
                  : (std::string *)v91.__r_.__value_.__r.__words[0];
              LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v62;
              _os_log_impl(&dword_20CD80000, v61, OS_LOG_TYPE_DEFAULT, "#Rewrite - Matched - %s", (uint8_t *)&__str, 0xCu);
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v91.__r_.__value_.__l.__data_);
              }
            }
            Censor::global_plaintext(&v91, (uint64_t)(v57 + 2));
            if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v64 = &v91;
            }
            else {
              uint64_t v64 = (std::string *)v91.__r_.__value_.__r.__words[0];
            }
            Diagnostics::log(5, "#Rewrite - Matched - %s", v63, v64);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v91.__r_.__value_.__l.__data_);
            }
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v65 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
            {
              Censor::global_plaintext(&v91, (uint64_t)(v57 + 8));
              float v66 = (v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v91
                  : (std::string *)v91.__r_.__value_.__r.__words[0];
              LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v66;
              _os_log_impl(&dword_20CD80000, v65, OS_LOG_TYPE_DEFAULT, "#Rewrite - Replaced - %s", (uint8_t *)&__str, 0xCu);
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v91.__r_.__value_.__l.__data_);
              }
            }
            Censor::global_plaintext(&v91, (uint64_t)(v57 + 8));
            if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v68 = &v91;
            }
            else {
              uint64_t v68 = (std::string *)v91.__r_.__value_.__r.__words[0];
            }
            Diagnostics::log(5, "#Rewrite - Replaced - %s", v67, v68);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v91.__r_.__value_.__l.__data_);
            }
            v57 += 20;
          }
          v69.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          kdebug_trace();
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v70 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v91.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_20CD80000, v70, OS_LOG_TYPE_DEFAULT, "rewrite ended", (uint8_t *)&v91, 2u);
          }
          Diagnostics::log(5, "rewrite ended", v71);
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v3 = v75;
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v72 = (v69.__d_.__rep_ - v76.__d_.__rep_) / 1000000;
          int v73 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v91.__r_.__value_.__l.__data_) = 134217984;
            *(double *)((char *)v91.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (double)v72 / 1000.0;
            _os_log_impl(&dword_20CD80000, v73, OS_LOG_TYPE_DEFAULT, "rewrite latency: %.3f s", (uint8_t *)&v91, 0xCu);
          }
          Diagnostics::log(5, "rewrite latency: %.3f s", v74, (double)v72 / 1000.0);
          if (v81) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v81);
          }
          if ((char)v79 < 0) {
            operator delete(*(void **)status);
          }
          goto LABEL_202;
        }
      }
      else if (*(unsigned char *)(v2 + 23))
      {
        goto LABEL_5;
      }
      memset(v83, 0, sizeof(v83));
      std::vector<std::shared_ptr<Agglomerate>>::__init_with_size[abi:ne180100]<std::shared_ptr<Agglomerate>*,std::shared_ptr<Agglomerate>*>(v83, *(void **)(v2 + 24), v4, ((uint64_t)v4 - *(void *)(v2 + 24)) >> 4);
      (*(void (**)(RewriteImpl *, void *))(*(void *)this + 160))(this, v83);
      *(void *)std::string status = v83;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)status);
LABEL_204:
      v2 += 48;
      if (v2 == v3) {
        goto LABEL_207;
      }
    }
  }
  *((unsigned char *)this + 8) = 1;
LABEL_207:
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
}

void sub_20D348974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  if (*(char *)(v42 - 153) < 0) {
    operator delete(*(void **)(v42 - 176));
  }
  if (*(char *)(v42 - 121) < 0) {
    operator delete(*(void **)(v42 - 144));
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  _Unwind_Resume(exception_object);
}

void UTFRegex::group<std::basic_string<char16_t>>(uint64_t a1, URegularExpression **a2, int32_t a3)
{
  std::string::size_type v6 = operator new(0x48uLL);
  *(void *)a1 = v6;
  *(_OWORD *)(a1 + 8) = xmmword_20D6B4A30;
  _OWORD *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  *((_WORD *)v6 + 32) = 0;
  UErrorCode status = U_ZERO_ERROR;
  int32_t v7 = uregex_group(*a2, a3, (UChar *)v6, 32, &status);
  if (v7 >= 33)
  {
    std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)a1, v7, v8);
    UErrorCode status = U_ZERO_ERROR;
    char v9 = *(unsigned char *)(a1 + 23);
    if (v9 >= 0) {
      char v10 = (UChar *)a1;
    }
    else {
      char v10 = *(UChar **)a1;
    }
    if (v9 >= 0) {
      int32_t v11 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      int32_t v11 = *(_DWORD *)(a1 + 8);
    }
    int32_t v7 = uregex_group(*a2, a3, v10, v11, &status);
  }
  std::basic_string<char16_t>::resize((std::basic_string<char16_t> *)a1, v7 & ~(v7 >> 31), v8);
}

void sub_20D348B58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void RewriteImpl::~RewriteImpl(RewriteImpl *this)
{
  *(void *)this = off_26C1FFAB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  FrontendNNModule::~FrontendNNModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C1FFAB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  FrontendNNModule::~FrontendNNModule(this);
}

void FrontendNNModule::~FrontendNNModule(FrontendNNModule *this)
{
  *(void *)this = off_26C201808;
  char v10 = (void **)((char *)this + 304);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::basic_string<char16_t>::size_type v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int64_t v5 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::string::size_type v6 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  int32_t v7 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::basic_string<char16_t>::value_type v8 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  char v9 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  FrontendModule::~FrontendModule((void **)this);
}

uint64_t std::__shared_ptr_emplace<RewriteImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<RewriteImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2154B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<RewriteImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2154B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void RewritePersistentModule::~RewritePersistentModule(RewritePersistentModule *this)
{
  *(void *)this = off_26C203A18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = off_26C203A18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void FastSpeech2DecoderModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::basic_string<char16_t>::size_type v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_DEFAULT, "Parallel AM decoder module start.", buf, 2u);
  }
  Diagnostics::log(5, "Parallel AM decoder module start.", v5);
  std::mutex::lock((std::mutex *)(a1 + 320));
  *(unsigned char *)(a1 + 312) = 1;
  int32_t v7 = *(std::__shared_weak_count **)(*(void *)v6 + 16);
  uint64_t v46 = *(void *)(*(void *)v6 + 8);
  int v47 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v9 = *(std::__shared_weak_count **)(*(void *)v8 + 16);
  uint64_t v44 = *(void *)(*(void *)v8 + 8);
  unsigned int v45 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int32_t v11 = *(std::__shared_weak_count **)(*(void *)v10 + 16);
  uint64_t v42 = *(void *)(*(void *)v10 + 8);
  int v43 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(v46 + 8);
  if (v12 != *(void *)(v46 + 16) && *(unsigned char *)(v12 + 60)) {
    *(void *)(a1 + 30std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  }
  TacotronAlignment::alignment_reset(*(TacotronAlignment **)(a1 + 384));
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  int v40 = 0;
  uint64_t v39 = 0;
  uint64_t v14 = *(void *)(a1 + 400);
  uint64_t v35 = v44;
  uint64_t v36 = v45;
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v14 + 8))(&v37);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  uint64_t v15 = v37;
  if (v38 != v37)
  {
    unint64_t v16 = 0;
    do
    {
      char v17 = *(void (****)(void, long long *, void *))(a1 + 400);
      long long v18 = *(_OWORD *)(v15 + 16 * v16);
      long long v34 = v18;
      if (*((void *)&v18 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      unsigned int v54 = 0;
      uint64_t v19 = operator new(0x40uLL);
      void *v19 = &off_26C214BC8;
      v19[1] = a1;
      v19[2] = &v46;
      v19[3] = &rep;
      v19[4] = &v40;
      v19[5] = &v44;
      v19[6] = &v39;
      v19[7] = &v42;
      unsigned int v54 = v19;
      (**v17)(v17, &v34, v53);
      std::__function::__value_func<int ()(std::shared_ptr<WaveNetFeature>)>::~__value_func[abi:ne180100](v53);
      if (*((void *)&v34 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
      }
      ++v16;
      uint64_t v15 = v37;
    }
    while (v16 < (v38 - v37) >> 4);
  }
  uint64_t v20 = (unsigned __int128)((std::chrono::steady_clock::now().__d_.__rep_ - v13.__d_.__rep_)
                          * (__int128)0x431BDE82D7B634DBLL) >> 64;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  double v23 = (double)(uint64_t)((v20 >> 18) + ((unint64_t)v20 >> 63)) / 1000.0;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134218496;
    *(void *)&uint8_t buf[4] = v39 + v40;
    __int16 v49 = 2048;
    double v50 = (double)(uint64_t)((v20 >> 18) + ((unint64_t)v20 >> 63)) / 1000.0;
    __int16 v51 = 2048;
    double v52 = (double)*(unint64_t *)&buf[4] / v23;
    _os_log_impl(&dword_20CD80000, v21, OS_LOG_TYPE_DEFAULT, "Parallel AM decoder module, total frames = %lu, Run Time : %.3f s, %.3f frames/s", buf, 0x20u);
  }
  Diagnostics::log(5, "Parallel AM decoder module, total frames = %lu, Run Time : %.3f s, %.3f frames/s", v22, v39 + v40, *(void *)&v23, (double)(unint64_t)(v39 + v40) / v23);
  int v24 = *(_DWORD *)(a1 + 276);
  int v25 = *(_DWORD *)(a1 + 272);
  uint64_t v26 = *(void *)(a1 + 304);
  int v27 = v40;
  uint64_t v28 = *(std::__shared_weak_count **)(a1 + 392);
  v33[0] = *(void *)(a1 + 384);
  v33[1] = (uint64_t)v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v29 = *(std::__shared_weak_count **)(a1 + 176);
  v32[0] = *(void *)(a1 + 168);
  v32[1] = (uint64_t)v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v30 = v47;
  v31[0] = v46;
  v31[1] = v47;
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 30std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = FastSpeechUtils::emit_word_markers(v24, v25, v26, v27, v33, v32, v31, a1, (void (*)(void *, int *))Module::callback, 0);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  *(void *)std::string buf = &v37;
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  std::mutex::unlock((std::mutex *)(a1 + 320));
}

void sub_20D3493FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (v38)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    if (!v37)
    {
LABEL_3:
      if (!v36) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v37)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  if (!v36)
  {
LABEL_5:
    *(void *)(v39 - 192) = &a25;
    std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 192));
    if (a32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a32);
    }
    if (a34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a34);
    }
    if (a36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a36);
    }
    std::mutex::unlock(a14);
    _Unwind_Resume(a1);
  }
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  goto LABEL_5;
}

void sub_20D349474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  JUMPOUT(0x20D349424);
}

void sub_20D349488()
{
}

void sub_20D349490()
{
}

void sub_20D349498()
{
}

void sub_20D3494A0()
{
}

void sub_20D3494A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::__function::__value_func<int ()(std::shared_ptr<WaveNetFeature>)>::~__value_func[abi:ne180100]((void *)(v22 - 152));
  if (!a22) {
    JUMPOUT(0x20D349414);
  }
  JUMPOUT(0x20D34940CLL);
}

uint64_t Module::callback(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

char **std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::target_type()
{
}

uint64_t std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)a2;
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v4 + 160))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEFAULT, "Parallel AM decoder inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "Parallel AM decoder inference cancelled.", v6);
  }
  else if (!*(unsigned char *)(**(void **)(a1 + 16) + 2))
  {
    double v10 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - **(void **)(a1 + 24)) / 1000000) / 1000.0;
    double v11 = (double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3)) / v10 / (1000.0 / (double)*(int *)(v4 + 272));
    uint64_t v57 = v4;
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unsigned int v54 = v2;
    float v12 = v11;
    std::chrono::steady_clock::time_point v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v15 = **(_DWORD **)(a1 + 32) == 0;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3);
      *(_DWORD *)std::string buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)uint64_t v70 = 2048;
      *(void *)&v70[2] = v16;
      *(_WORD *)&v70[10] = 2048;
      *(double *)&v70[12] = v10;
      __int16 v71 = 2048;
      double v72 = (double)v16 / v10;
      double v17 = v12;
      __int16 v73 = 2048;
      double v74 = v12;
      _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_DEFAULT, "Parallel AM decoder inference first = %d, total frames = %lu, Run Time : %.3f s, %.3f frames/s, rtf: %.3f", buf, 0x30u);
    }
    else
    {
      double v17 = v12;
    }
    uint64_t v60 = a1;
    Diagnostics::log(5, "Parallel AM decoder inference first = %d, total frames = %lu, Run Time : %.3f s, %.3f frames/s, rtf: %.3f", v14, **(_DWORD **)(a1 + 32) == 0, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3), *(void *)&v10, (double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3)) / v10, *(void *)&v17);
    int v18 = *(_DWORD *)(v4 + 288);
    if (NeuralTTSUtils::check_thermal_limit((NeuralTTSUtils *)2))
    {
      if (*(float *)(v4 + 296) >= v12) {
        int v18 = -1431655765 * ((v3[2] - v3[1]) >> 3);
      }
      else {
        int v18 = *(_DWORD *)(v4 + 292);
      }
    }
    uint64_t v19 = **(void **)(a1 + 40);
    uint64_t v20 = *(void *)(v19 + 32);
    for (uint64_t i = *(void *)(v19 + 40); v20 != i; v20 += 24)
    {
      *(void *)std::string buf = 0;
      *(void *)uint64_t v70 = 0;
      *(void *)&v70[8] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(buf, *(const void **)v20, *(void *)(v20 + 8), (uint64_t)(*(void *)(v20 + 8) - *(void *)v20) >> 2);
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      std::string __p = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&__p, *(int **)buf, *(int **)v70, (uint64_t)(*(void *)v70 - *(void *)buf) >> 2);
      unint64_t v22 = v3[8];
      if (v22 >= v3[9])
      {
        uint64_t v23 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v3 + 7, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)(v3 + 7), (uint64_t)&__p);
        uint64_t v23 = v22 + 24;
      }
      v3[8] = v23;
      if (__p)
      {
        uint64_t v67 = __p;
        operator delete(__p);
      }
      if (*(void *)buf)
      {
        *(void *)uint64_t v70 = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
    if (*(unsigned char *)(v57 + 313))
    {
      uint64_t v24 = *(void *)(v57 + 384);
      v65[0] = (uint64_t)v3;
      v65[1] = (uint64_t)v54;
      if (v54) {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v25 = *(void **)(v60 + 16);
      uint64_t v26 = (std::__shared_weak_count *)v25[1];
      v64[0] = *v25;
      v64[1] = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      **(void **)(v60 + 48) = TacotronAlignment::trim_silences(v24, v65, (uint64_t)v64, *(void *)(v57 + 304));
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
    }
    if (v3[7] != v3[8])
    {
      TacotronAlignment::append_alignments(*(void *)(v57 + 384), v3 + 7);
      uint64_t v27 = *(void *)(v57 + 384);
      uint64_t v28 = **(void **)(v60 + 16);
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      std::string __p = 0;
      std::vector<TacotronPhoneFeature>::__init_with_size[abi:ne180100]<TacotronPhoneFeature*,TacotronPhoneFeature*>(&__p, *(void *)(v28 + 8), *(void *)(v28 + 16), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v28 + 16) - *(void *)(v28 + 8)) >> 3));
      TacotronAlignment::generate_speech_rate(buf, v27, (uint64_t *)&__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3), -1431655765 * ((uint64_t)(v3[2] - v3[1]) >> 3), (uint64_t)(*(void *)(**(void **)(v60 + 16) + 40) - *(void *)(**(void **)(v60 + 16) + 32)) >> 2);
      v63[0] = &__p;
      std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](v63);
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v3 + 10), v3[11], *(char **)buf, *(char **)v70, (uint64_t)(*(void *)v70 - *(void *)buf) >> 2);
      if (*(void *)buf)
      {
        *(void *)uint64_t v70 = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(buf, *(void *)(v57 + 168));
    std::string::size_type v29 = *(int **)buf;
    if (*(void *)buf)
    {
      Observable::emit(*(uint64_t ***)buf, "tts.feature.neural.mel", v3 + 1);
      Observable::emit((uint64_t **)v29, "tts.feature.neural.alignment", v3 + 7);
    }
    if (v3[2] == v3[1])
    {
      LODWORD(v53) = 0;
      uint64_t v35 = v60;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v58 = 24 * v18;
      unint64_t v55 = v18;
      uint64_t v56 = 4 * v18;
      uint64_t v35 = v60;
      do
      {
        uint64_t v36 = (char *)operator new(0x88uLL);
        *((void *)v36 + 1) = 0;
        *((void *)v36 + 2) = 0;
        *(void *)uint64_t v36 = off_26C215E20;
        *(_OWORD *)(v36 + 40) = 0u;
        *(_OWORD *)(v36 + 56) = 0u;
        *(_OWORD *)(v36 + 72) = 0u;
        *(_OWORD *)(v36 + 88) = 0u;
        *(_OWORD *)(v36 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
        *(_OWORD *)(v36 + 120) = 0u;
        *(_OWORD *)(v36 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
        *((_OWORD *)v36 + 2) = 0u;
        uint64_t v37 = (uint64_t)(v36 + 32);
        *((_WORD *)v36 + 12) = 257;
        *((_OWORD *)v36 + 3) = 0u;
        *((_OWORD *)v36 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
        *((_OWORD *)v36 + 5) = 0u;
        *((_OWORD *)v36 + 6) = 0u;
        *((_OWORD *)v36 + 7) = 0u;
        *(void *)(v36 + 126) = 0;
        v63[0] = (void **)(v36 + 24);
        v63[1] = (void **)v36;
        uint64_t v38 = *(uint64_t **)(v35 + 16);
        uint64_t v39 = *v38;
        int v40 = (std::__shared_weak_count *)v38[1];
        if (v40)
        {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          v36[132] = FastSpeechUtils::has_whisper(*(void *)(v39 + 8), *(void *)(v39 + 16));
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        else
        {
          v36[132] = FastSpeechUtils::has_whisper(*(void *)(v39 + 8), *(void *)(v39 + 16));
        }
        uint64_t v42 = v3[1];
        uint64_t v41 = v3[2];
        uint64_t v43 = v33 + v42;
        unint64_t v59 = v34 + v55;
        if (0xAAAAAAAAAAAAAAABLL * ((v41 - v42) >> 3) <= v34 + v55)
        {
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(v37, v43, v41, 0xAAAAAAAAAAAAAAABLL * ((v31 + v41 - v42) >> 3));
          uint64_t v48 = v3[10];
          uint64_t v47 = v3[11];
          if (v48 != v47) {
            std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v36 + 104, (char *)(v32 + v48), v47, (v30 + v47 - v48) >> 2);
          }
          uint64_t v50 = v3[4];
          uint64_t v49 = v3[5];
          if (v50 != v49) {
            std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v36 + 56), v33 + v50, v49, 0xAAAAAAAAAAAAAAABLL * ((v31 + v49 - v50) >> 3));
          }
          char v46 = *((unsigned char *)v3 + 1);
        }
        else
        {
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(v37, v43, v58 + v33 + v42, v55);
          uint64_t v44 = v3[10];
          if (v44 != v3[11]) {
            std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v36 + 104, (char *)(v32 + v44), v32 + v44 + v56, v55);
          }
          uint64_t v45 = v3[4];
          if (v45 != v3[5]) {
            std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v36 + 56), v33 + v45, v33 + v45 + v58, v55);
          }
          char v46 = 0;
        }
        v36[25] = v46;
        *((_DWORD *)v36 + 32) = v34 + **(_DWORD **)(v60 + 32);
        if (v34) {
          BOOL v51 = 0;
        }
        else {
          BOOL v51 = *(unsigned char *)v3 != 0;
        }
        v36[24] = v51;
        v36[133] = *(unsigned char *)(v57 + 313);
        double v52 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v52 + 8) = 0u;
        *(void *)double v52 = off_26C215330;
        *((_OWORD *)v52 + 2) = 0u;
        *((void *)v52 + 3) = v52 + 32;
        Agglomerate::set<std::shared_ptr<WaveNetFeature>>((uint64_t)(v52 + 24), (unint64_t *)v63);
        Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v52 + 24), *(unint64_t **)(v60 + 56));
        uint64_t v61 = v52 + 24;
        uint64_t v62 = (std::__shared_weak_count *)v52;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v52 + 1, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, char **))(*(void *)v57 + 72))(v57, &v61);
        uint64_t v35 = v60;
        if (v62) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v62);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52);
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36);
        unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3);
        v33 += v58;
        v32 += v56;
        v31 -= v58;
        v30 -= v56;
        v34 += v55;
      }
      while (v53 > v59);
    }
    **(_DWORD **)(v35 + 32) += v53;
    (*(std::chrono::steady_clock::time_point **)(v35 + 24))->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v2 = v54;
    if (*(void *)v70) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v70);
    }
    uint64_t v8 = 0;
    if (v54) {
      goto LABEL_9;
    }
    return v8;
  }
  uint64_t v8 = 1;
  if (v2) {
LABEL_9:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v8;
}

void sub_20D349E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v33 = *(void **)(v31 - 176);
  if (v33)
  {
    *(void *)(v31 - 168) = v33;
    operator delete(v33);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C214BC8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &off_26C214BC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

void std::__function::__func<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FastSpeech2DecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::~__func()
{
}

void FastSpeech2DecoderModule::prepare(FastSpeech2DecoderModule *this)
{
  if (!*((unsigned char *)this + 312))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
    }
    Diagnostics::log(5, "Prepare inference.", v3);
    long long v4 = (char *)operator new(0x228uLL);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)long long v4 = off_26C216280;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 18std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    *(_OWORD *)(v4 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v4 + 26std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v4 + 280) = 0u;
    *(_OWORD *)(v4 + 296) = 0u;
    *(_OWORD *)(v4 + 312) = 0u;
    *(_OWORD *)(v4 + 328) = 0u;
    *(_OWORD *)(v4 + 34std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v4 + 360) = 0u;
    *(_OWORD *)(v4 + 376) = 0u;
    *((_WORD *)v4 + 12) = 257;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 9) = 0u;
    *((_OWORD *)v4 + 10) = 0u;
    *((_OWORD *)v4 + 11) = 0u;
    *((_OWORD *)v4 + 12) = 0u;
    *((_OWORD *)v4 + 13) = 0u;
    *((_OWORD *)v4 + 1std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *((_OWORD *)v4 + 15) = 0u;
    *((_OWORD *)v4 + 16) = 0u;
    *((_OWORD *)v4 + 17) = 0u;
    *((_OWORD *)v4 + 18) = 0u;
    *((_OWORD *)v4 + 19) = 0u;
    *((_OWORD *)v4 + 20) = 0u;
    *((_OWORD *)v4 + 21) = 0u;
    *((_OWORD *)v4 + 22) = 0u;
    *((_OWORD *)v4 + 23) = 0u;
    *(_OWORD *)(v4 + 520) = 0u;
    *(_OWORD *)(v4 + 536) = 0u;
    *(_OWORD *)(v4 + 488) = 0u;
    *(_OWORD *)(v4 + 50std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v4 + 456) = 0u;
    *(_OWORD *)(v4 + 472) = 0u;
    *(_OWORD *)(v4 + 42std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v4 + 440) = 0u;
    *(_OWORD *)(v4 + 392) = 0u;
    *(_OWORD *)(v4 + 408) = 0u;
    v15[0] = (unint64_t)(v4 + 24);
    v15[1] = (unint64_t)v4;
    v4[26] = 1;
    int64_t v5 = (char *)operator new(0x70uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)int64_t v5 = off_26C217898;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *((_WORD *)v5 + 12) = 257;
    *((void *)v5 + 12) = 0;
    *((void *)v5 + 13) = 0;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    v14[0] = (unint64_t)(v5 + 24);
    v14[1] = (unint64_t)v5;
    int v10 = 0;
    std::vector<float>::vector(__p, 0x100uLL, &v10);
    std::vector<std::vector<float>>::vector(buf, 0x500uLL, (uint64_t)__p);
    std::vector<std::vector<std::vector<float>>>::resize((uint64_t *)v5 + 4, (uint64_t *)buf);
    unint64_t v16 = buf;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_DWORD *)std::string buf = 1280;
    std::vector<int>::resize((std::vector<int> *)(v5 + 80), 1uLL, (std::vector<int>::const_reference)buf);
    uint64_t v6 = (char *)operator new(0xB0uLL);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)uint64_t v6 = off_26C215FA8;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *((void *)v6 + 21) = 0;
    *(_OWORD *)(v6 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
    *(void *)std::string buf = v6 + 24;
    std::chrono::steady_clock::time_point v13 = v6;
    int32_t v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 8) = 0u;
    *(void *)int32_t v7 = off_26C215330;
    *((_OWORD *)v7 + 2) = 0u;
    *((void *)v7 + 3) = v7 + 32;
    Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)(v7 + 24), v15);
    Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v7 + 24), (unint64_t *)buf);
    Agglomerate::set<std::shared_ptr<FastSpeechDecoderFeature>>((uint64_t)(v7 + 24), v14);
    uint64_t v8 = v7 + 24;
    char v9 = (std::__shared_weak_count *)v7;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(FastSpeech2DecoderModule *, char **))(*(void *)this + 80))(this, &v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  }
}

void sub_20D34A380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<float>>>::resize(uint64_t *a1, uint64_t *a2)
{
  long long v3 = (void **)a1[1];
  if (v3 == (void **)*a1)
  {
    uint64_t v6 = (uint64_t)(a1 + 2);
    if (a1[2] == (void)v3)
    {
      uint64_t v19 = a1 + 2;
      int32_t v7 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v6, 1uLL);
      unint64_t v16 = v7;
      v17.i64[0] = (uint64_t)v7;
      v17.i64[1] = (uint64_t)v7;
      int v18 = &v7[3 * v8];
      char *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v7, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      char v9 = (char *)(v7 + 3);
      v17.i64[1] = (uint64_t)(v7 + 3);
      double v11 = (void **)*a1;
      int v10 = (void **)a1[1];
      uint64_t v12 = v17.i64[0];
      if (v10 == (void **)*a1)
      {
        int64x2_t v14 = vdupq_n_s64((unint64_t)v10);
      }
      else
      {
        do
        {
          *(void *)(v12 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
          *(void *)(v12 - 16) = 0;
          v12 -= 24;
          *(void *)(v12 + 16) = 0;
          long long v13 = *(_OWORD *)(v10 - 3);
          v10 -= 3;
          *(_OWORD *)uint64_t v12 = v13;
          *(void *)(v12 + 16) = v10[2];
          *int v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
        }
        while (v10 != v11);
        int64x2_t v14 = *(int64x2_t *)a1;
        char v9 = (char *)v17.i64[1];
      }
      *a1 = v12;
      a1[1] = (uint64_t)v9;
      int64x2_t v17 = v14;
      BOOL v15 = (void **)a1[2];
      a1[2] = (uint64_t)v18;
      int v18 = v15;
      unint64_t v16 = (void **)v14.i64[0];
      std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)&v16);
    }
    else
    {
      const char *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      a1[1] = (uint64_t)(v3 + 3);
    }
  }
  else if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3) >= 2)
  {
    uint64_t v4 = *a1 + 24;
    while (v3 != (void **)v4)
    {
      v3 -= 3;
      unint64_t v16 = v3;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v16);
    }
    a1[1] = v4;
  }
}

void sub_20D34A5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Agglomerate::set<std::shared_ptr<FastSpeechDecoderFeature>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v8 = (char ***)off_26C206638;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  int32_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v8 = (char ***)off_26C206638;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void Agglomerate::ItemHolder<std::shared_ptr<FastSpeechDecoderFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206638;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<FastSpeechDecoderFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206638;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    long long v6 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<FastSpeechDecoderFeature>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)(a1 + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 32);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__shared_ptr_emplace<FastSpeechDecoderFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FastSpeechDecoderFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FastSpeech2DecoderModule::~FastSpeech2DecoderModule(std::mutex *this)
{
  FastSpeech2DecoderModule::~FastSpeech2DecoderModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  this->__m_.__sig = (uint64_t)off_26C203BD0;
  uint64_t v2 = *(std::__shared_weak_count **)&this[6].__m_.__opaque[32];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)&this[6].__m_.__opaque[16];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)this[6].__m_.__opaque;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::mutex::~mutex(this + 5);
  Module::~Module((Module *)this);
}

BOOL InferenceEngine::MilInferenceModel::get_parameter_value_if<BOOL>(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v4 = (unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48) == 1
    && *(void *)(a1 + 56) + 8 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(void *)(a1 + 56), a2))
  {
    long long v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v4, a2);
    char v8 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v6, &v8);
    return v8 != 0;
  }
  return a3;
}

void std::__shared_ptr_emplace<FastSpeech2DecoderDennisInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C204FE8;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<FastSpeech2DecoderDennisInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2186D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FastSpeech2DecoderDennisInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2186D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FastSpeech2DecoderBaseInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C204FE8;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<FastSpeech2DecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FastSpeech2DecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FastSpeech2DecoderPersistentModule::~FastSpeech2DecoderPersistentModule(FastSpeech2DecoderPersistentModule *this)
{
  *(void *)this = off_26C205388;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C205388;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void Database::~Database(void **this)
{
  Database::~Database(this);
  JUMPOUT(0x2105595E0);
}

{
  void *v2;
  std::__shared_weak_count *v3;

  *this = &off_26C205BC8;
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)(this + 48));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)(this + 43));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)(this + 38));
  if (*((char *)this + 303) < 0) {
    operator delete(this[35]);
  }
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)(this + 28));
  uint64_t v2 = this[7];
  this[7] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void Database::fetch_unit(Database *this, Unit *a2)
{
  uint64_t v4 = *(unsigned int *)a2;
  if ((v4 & 0x80000000) != 0)
  {
    unint64_t v10 = *((int *)this + 115);
    LODWORD(__p) = 0;
    std::vector<float>::resize((uint64_t)a2 + 88, v10, &__p);
    unint64_t v11 = *((int *)this + 115);
    LODWORD(__p) = 0;
    std::vector<float>::resize((uint64_t)a2 + 112, v11, &__p);
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    *((float *)a2 + 38) = (float)-*(_DWORD *)a2;
    MEMORY[0x210558E70]((char *)a2 + 40, "sil");
  }
  else
  {
    std::string __p = 0;
    int64x2_t v14 = 0;
    uint64_t v15 = 0;
    Database::get_unit((uint64_t)this, v4, &__p);
    std::vector<float>::resize((uint64_t)a2 + 88, *((int *)this + 115));
    std::vector<float>::resize((uint64_t)a2 + 112, *((int *)this + 115));
    uint64_t v5 = *((int *)this + 115);
    if (v5)
    {
      memmove(*((void **)a2 + 11), (char *)__p + 4 * *((int *)this + 106), 4 * v5);
      uint64_t v6 = *((int *)this + 115);
      if (v6) {
        memmove(*((void **)a2 + 14), (char *)__p + 4 * *((int *)this + 107), 4 * v6);
      }
    }
    int32_t v7 = __p;
    *((_DWORD *)a2 + 3std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((_DWORD *)__p + *((int *)this + 108));
    *((_DWORD *)a2 + 35) = v7[*((int *)this + 109)];
    *((_DWORD *)a2 + 36) = v7[*((int *)this + 110)];
    *((_DWORD *)a2 + 37) = v7[*((int *)this + 111)];
    *((_DWORD *)a2 + 38) = v7[*((int *)this + 112)];
    char v8 = Database::feat_val(this, *((_DWORD *)this + 113), (int)*(float *)&v7[*((int *)this + 113)]);
    MEMORY[0x210558E70]((char *)a2 + 40, v8);
    long long v9 = Database::feat_val(this, *((_DWORD *)this + 114), (int)*((float *)__p + *((int *)this + 114)));
    MEMORY[0x210558E70]((char *)a2 + 64, v9);
    if (__p)
    {
      int64x2_t v14 = __p;
      operator delete(__p);
    }
  }
  uint64_t v12 = *(unsigned int *)a2;
  if ((v12 & 0x80000000) == 0 && *((unsigned char *)this + 8)) {
    LODWORD(v12) = *((_DWORD *)this + 48) & *(_DWORD *)(*((void *)this + 11) + 4 * v12);
  }
  *((_DWORD *)a2 + 1) = v12;
}

void sub_20D34AF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 Database::get_unit(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(*(void *)(a1 + 80) + 4) <= (int)a2)
  {
    std::vector<float>::resize((uint64_t)a3, 0);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    long long v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v54 = a2;
      _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_DEBUG, "UNIT %d either negative or off end of db, selecting neighboring units to edge of db ", buf, 8u);
    }
    Diagnostics::log(7, "UNIT %d either negative or off end of db, selecting neighboring units to edge of db ", v14, a2);
  }
  else
  {
    std::vector<float>::resize((uint64_t)a3, *(unsigned __int8 *)(*(void *)(a1 + 48) + 4) + 2);
    int32_t v7 = (char *)*a3;
    uint64_t v8 = *(void *)(a1 + 104);
    long long v9 = *(unsigned __int8 **)(a1 + 48);
    uint64_t v10 = v8 + v9[5] * (uint64_t)(int)a2;
    uint64_t v11 = v9[6];
    if (v9[6])
    {
      memmove(*a3, (const void *)(v8 + v9[5] * (uint64_t)(int)a2), 4 * v11);
      long long v9 = *(unsigned __int8 **)(a1 + 48);
      uint64_t v12 = v9[6];
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v9[7];
    unint64_t v16 = (float *)&v7[4 * v12];
    if (v9[7])
    {
      uint64_t v17 = 4 * v15;
      int v18 = v16;
      uint64_t v19 = (unsigned int *)(v10 + 4 * v11);
      do
      {
        unsigned int v20 = *v19++;
        *v18++ = (float)v20;
        v17 -= 4;
      }
      while (v17);
    }
    uint64_t v21 = v10 + 4 * v11 + 4 * v15;
    uint64_t v22 = v9[8];
    uint64_t v23 = &v16[v15];
    if (v9[8])
    {
      uint64_t v24 = 2 * v22;
      int v25 = v23;
      uint64_t v26 = (unsigned __int16 *)v21;
      do
      {
        unsigned int v27 = *v26++;
        *v25++ = (float)v27;
        v24 -= 2;
      }
      while (v24);
    }
    uint64_t v28 = (unsigned __int8 *)(v21 + 2 * v22);
    uint64_t v29 = v9[9];
    uint64_t v30 = &v23[v22];
    if (v9[9])
    {
      uint64_t v31 = v9[9];
      uint64_t v32 = v30;
      uint64_t v33 = v28;
      do
      {
        unsigned int v34 = *v33++;
        *v32++ = (float)v34;
        --v31;
      }
      while (v31);
    }
    unsigned int v35 = v9[10];
    if (v9[10])
    {
      unsigned int v36 = 0;
      uint64_t v37 = &v28[v29];
      int v38 = v9[10];
      uint64_t v39 = &v30[v29];
      do
      {
        int v40 = 0;
        int v41 = v38 - 8;
        if (v38 >= 8) {
          int v38 = 8;
        }
        if (v38 <= 1) {
          int v38 = 1;
        }
        do
        {
          if ((*v37 >> v40)) {
            float v42 = 1.0;
          }
          else {
            float v42 = 0.0;
          }
          *v39++ = v42;
          ++v40;
        }
        while (v38 != v40);
        ++v37;
        v36 += 8;
        int v38 = v41;
      }
      while (v36 < v35);
    }
    uint64_t v43 = *(int *)(a1 + 168);
    uint64_t v44 = *(unsigned int *)(v10 + 4 * v43);
    unsigned int v45 = *(_DWORD *)(*(void *)(a1 + 72) + 8 * v44);
    float v46 = (float)(int)((v45 >> 31) | (2 * ((v45 >> *(_DWORD *)(a1 + 200)) & *(_DWORD *)(a1 + 204))));
    uint64_t v47 = *a3;
    *((float *)*a3 + *(int *)(a1 + 160)) = v46;
    int v48 = *(_DWORD *)(a1 + 196);
    result.n128_u64[0] = 0;
    if (v48 < 32) {
      result.n128_f32[0] = (float)(*(_DWORD *)(*(void *)(a1 + 88) + 4 * a2) >> v48);
    }
    v47[*(int *)(a1 + 164)] = result.n128_u32[0];
    result.n128_f32[0] = (float)v44;
    *(float *)&v47[v43] = (float)v44;
    uint64_t v49 = *(const float **)(a1 + 120);
    if (v49)
    {
      uint64_t v50 = (float *)&v47[v9[44]];
      vDSP_vma(v50, 1, v49, 1, *(const float **)(a1 + 112), 1, v50, 1, v9[45]);
    }
    if (*(unsigned char *)(a1 + 216))
    {
      uint64_t v51 = (uint64_t)*a3 + 4 * *(int *)(a1 + 212);
      uint64_t v52 = *(void *)v51;
      __n128 result = *(__n128 *)(v51 + 24);
      *(void *)(v51 + 32) = *(void *)(v51 + 40);
      *(_DWORD *)(v51 + 40) = *(_DWORD *)(v51 + 48);
      *(_OWORD *)uint64_t v51 = *(_OWORD *)(v51 + 8);
      *(__n128 *)(v51 + 16) = result;
      *(void *)((char *)*a3 + 4 * *(int *)(a1 + 212) + 4std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v52;
    }
  }
  return result;
}

char *Database::feat_val(Database *this, int a2, signed int a3)
{
  char v3 = a3;
  uint64_t v42 = *MEMORY[0x263EF8340];
  int v6 = *((_DWORD *)this + 40);
  if (v6 == a2)
  {
    int32_t v7 = StringTable::feat_val(*((StringTable **)this + 7), a2, a3 >> 1);
    std::string::basic_string[abi:ne180100]<0>(&v41, v7);
    if (v3) {
      std::string::value_type v8 = 50;
    }
    else {
      std::string::value_type v8 = 49;
    }
    std::string::push_back(&v41, v8);
    *(void *)&long long v39 = v41.__r_.__value_.__l.__size_;
    std::string::size_type v9 = v41.__r_.__value_.__r.__words[0];
    *(void *)((char *)&v39 + 7) = *(std::string::size_type *)((char *)&v41.__r_.__value_.__r.__words[1] + 7);
    char v10 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    memset(&v41, 0, sizeof(v41));
    uint64_t v11 = (void **)((char *)this + 280);
    if (*((char *)this + 303) < 0)
    {
      operator delete(*((void **)this + 35));
      int v21 = SHIBYTE(v41.__r_.__value_.__r.__words[2]);
      uint64_t v22 = v39;
      *((void *)this + 35) = v9;
      *((void *)this + 36) = v22;
      *(void *)((char *)this + 295) = *(void *)((char *)&v39 + 7);
      *((unsigned char *)this + 303) = v10;
      if (v21 < 0)
      {
        operator delete(v41.__r_.__value_.__l.__data_);
        if ((*((unsigned char *)this + 303) & 0x80) == 0) {
          return (char *)v11;
        }
        return (char *)*v11;
      }
      if (v10 < 0) {
        return (char *)*v11;
      }
    }
    else
    {
      uint64_t v12 = v39;
      *((void *)this + 35) = v9;
      *((void *)this + 36) = v12;
      *(void *)((char *)this + 295) = *(void *)((char *)&v39 + 7);
      *((unsigned char *)this + 303) = v10;
      if (v10 < 0) {
        return (char *)*v11;
      }
    }
    return (char *)v11;
  }
  if (*((_DWORD *)this + 42) == a2)
  {
    unsigned int v13 = *(_DWORD *)(*((void *)this + 9) + 8 * a3);
    uint64_t v14 = *((void *)this + 17);
    if (v14)
    {
      unsigned int v15 = *(_DWORD *)(v14 + 4 * (*(void *)&v13 & 0x7FFFFLL));
      unsigned int v16 = HIBYTE(v15);
      unsigned int v17 = BYTE2(v15);
      unsigned int v18 = BYTE1(v15);
      unsigned int v38 = v15;
    }
    else
    {
      unsigned int v16 = (v13 >> 18) & 0x3F;
      unsigned int v17 = (v13 >> 12) & 0x3F;
      unsigned int v38 = *(_DWORD *)(*((void *)this + 9) + 8 * a3) & 0x3F;
      unsigned int v18 = (v13 >> 6) & 0x3F;
    }
    uint64_t v23 = &v41;
    if ((*((_DWORD *)this + 52) & v13) != 0)
    {
      uint64_t v23 = (std::string *)((char *)&v41.__r_.__value_.__l.__data_ + 1);
      v41.__r_.__value_.__s.__data_[0] = 63;
    }
    int v24 = *((_DWORD *)this + 50);
    int v25 = *((unsigned __int8 *)this + 204);
    if ((v13 & 0x80000000) == 0) {
      char v26 = 49;
    }
    else {
      char v26 = 50;
    }
    unsigned int v27 = (StringTable **)((char *)this + 56);
    uint64_t v28 = StringTable::feat_val(*((StringTable **)this + 7), v6, v18);
    uint64_t v29 = stpcpy((char *)v23, v28);
    char *v29 = v26;
    v29[1] = 45;
    uint64_t v30 = StringTable::feat_val(*v27, *((_DWORD *)this + 40), v16);
    uint64_t v31 = stpcpy(v29 + 2, v30);
    *uint64_t v31 = v26;
    v31[1] = 45;
    uint64_t v32 = StringTable::feat_val(*v27, *((_DWORD *)this + 40), v25 & (v13 >> v24));
    uint64_t v33 = stpcpy(v31 + 2, v32);
    *uint64_t v33 = v26;
    v33[1] = 45;
    unsigned int v34 = StringTable::feat_val(*v27, *((_DWORD *)this + 40), v17);
    unsigned int v35 = stpcpy(v33 + 2, v34);
    *unsigned int v35 = v26;
    v35[1] = 45;
    unsigned int v36 = StringTable::feat_val(*v27, *((_DWORD *)this + 40), v38);
    uint64_t v37 = stpcpy(v35 + 2, v36);
    *uint64_t v37 = v26;
    v37[1] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v39, (char *)&v41);
    uint64_t v11 = (void **)((char *)this + 280);
    if (*((char *)this + 303) < 0) {
      operator delete(*v11);
    }
    *(_OWORD *)uint64_t v11 = v39;
    *((void *)this + 37) = v40;
    if ((*((char *)this + 303) & 0x80000000) == 0) {
      return (char *)v11;
    }
    return (char *)*v11;
  }
  uint64_t v19 = (StringTable *)*((void *)this + 7);
  return StringTable::feat_val(v19, a2, a3);
}

void sub_20D34B5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Database::context_encode(Database *this, int a2, int a3, int a4, int a5, unsigned int a6, int a7, int a8)
{
  uint64_t v8 = *((void *)this + 17);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 18) - v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 2;
      uint64_t v11 = (_DWORD *)*((void *)this + 17);
      do
      {
        unint64_t v12 = v10 >> 1;
        unsigned int v13 = &v11[v10 >> 1];
        unsigned int v15 = *v13;
        uint64_t v14 = v13 + 1;
        v10 += ~(v10 >> 1);
        if (v15 < ((a3 << 24) | (a5 << 16) | (a2 << 8) | a6)) {
          uint64_t v11 = v14;
        }
        else {
          unint64_t v10 = v12;
        }
      }
      while (v10);
    }
    else
    {
      uint64_t v11 = (_DWORD *)*((void *)this + 17);
    }
    unint64_t v19 = ((unint64_t)v11 - v8) >> 2;
    if (a7) {
      unsigned int v20 = 0x80000000;
    }
    else {
      unsigned int v20 = 0;
    }
    int v21 = *((_DWORD *)this + 52);
    if (!a8) {
      int v21 = 0;
    }
    return v21 | v20 | (a4 << *((_DWORD *)this + 50)) | v19;
  }
  else
  {
    if (a7) {
      unsigned int v16 = 0x80000000;
    }
    else {
      unsigned int v16 = 0;
    }
    int v17 = *((_DWORD *)this + 52);
    if (!a8) {
      int v17 = 0;
    }
    return (a2 << 6) | (a3 << 18) | (a4 << 24) | (a5 << 12) | a6 | v16 | v17;
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  int32_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unsigned int v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  unsigned int v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  int v17 = *a3;
  long long v18 = **a3;
  *((void *)i + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((void *)*a3 + 2);
  *((_OWORD *)i + 1) = v18;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)int v17 = 0;
  *((_DWORD *)i + 10) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v25 = *(void *)a1;
  char v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_38:
    *char v26 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v16;
  *unsigned int v16 = i;
  *(void *)(v25 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10) {
        v27 %= v10;
      }
    }
    else
    {
      v27 &= v10 - 1;
    }
    char v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_20D34B8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Database>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<Database>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218E08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Database>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218E08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Database::feat_name_to_fingerprint_mask(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(a1 + 304), a2);
  if (!v3) {
    return 0;
  }
  int v4 = *((_DWORD *)v3 + 10);
  int v5 = *(_DWORD *)(a1 + 180);
  BOOL v6 = __OFSUB__(v4, v5);
  int v7 = v4 - v5;
  if (v7 < 0 != v6 || v4 >= *(_DWORD *)(a1 + 160))
  {
    return 0;
  }
  else if (v7 >= *(_DWORD *)(a1 + 184))
  {
    return 0;
  }
  else
  {
    return (unsigned __int16)(1 << v7);
  }
}

char *Database::feat_val(Database *a1, long long *a2, signed int a3)
{
  int v7 = a2;
  int v5 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1 + 304, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v7);
  return Database::feat_val(a1, *((_DWORD *)v5 + 10), a3);
}

void Database::add_unit_range(Database *this, unsigned int a2, unsigned int a3, UnitCandidates *a4)
{
  unsigned int v5 = a2;
  int v7 = (char *)a4 + 64;
  BOOL v6 = (char *)*((void *)a4 + 8);
  unint64_t v8 = (char *)a4 + 64;
  if (v6)
  {
    unint64_t v8 = (char *)a4 + 64;
    do
    {
      unsigned int v9 = *((_DWORD *)v6 + 7);
      if (v9 >= a2)
      {
        if (v9 <= a2)
        {
          if (*((_DWORD *)v6 + 8) < a2) {
            v6 += 8;
          }
          else {
            unint64_t v8 = v6;
          }
        }
        else
        {
          unint64_t v8 = v6;
        }
      }
      else
      {
        v6 += 8;
      }
      BOOL v6 = *(char **)v6;
    }
    while (v6);
  }
  if (a2 < a3)
  {
    std::string::size_type v118 = (void **)((char *)a4 + 32);
    uint64_t v119 = (std::vector<int> *)((char *)a4 + 8);
    unint64_t v10 = (void *)((char *)a4 + 24);
    unsigned int v115 = a3;
    float v114 = (char *)a4 + 64;
    while (1)
    {
      unsigned int v11 = a3;
      unint64_t v12 = v7;
      unsigned int v13 = a3;
      if (v8 == v7) {
        break;
      }
      unsigned int v11 = *((_DWORD *)v8 + 7);
      if (v11 >= a3)
      {
        unsigned int v11 = a3;
        unint64_t v12 = v8;
        unsigned int v13 = a3;
        break;
      }
      uint64_t v14 = (void *)*((void *)v8 + 1);
      unint64_t v15 = v8;
      if (v14)
      {
        do
        {
          unint64_t v12 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unint64_t v12 = (void *)v15[2];
          BOOL v16 = *v12 == (void)v15;
          unint64_t v15 = v12;
        }
        while (!v16);
      }
      unsigned int v13 = *((_DWORD *)v8 + 8);
      if (v11 > v5) {
        break;
      }
LABEL_156:
      unsigned int v5 = v13;
      unint64_t v8 = (char *)v12;
      if (v13 >= a3) {
        return;
      }
    }
    if (v11 >= *(_DWORD *)a4 + v5 - ((*((void *)a4 + 2) - *((void *)a4 + 1)) >> 2)) {
      unsigned int v17 = *(_DWORD *)a4 + v5 - ((*((void *)a4 + 2) - *((void *)a4 + 1)) >> 2);
    }
    else {
      unsigned int v17 = v11;
    }
    long long v18 = (uint64_t *)operator new(0x28uLL);
    float v19 = v18;
    *((_DWORD *)v18 + 7) = v5;
    *((_DWORD *)v18 + 8) = v17;
    float v20 = (uint64_t *)*((void *)a4 + 8);
    BOOL v21 = (uint64_t **)v7;
    unint64_t v22 = (uint64_t **)v7;
    for (unsigned int i = v13; v20; v20 = (uint64_t *)v20[1])
    {
      while (1)
      {
        BOOL v21 = (uint64_t **)v20;
        unsigned int v23 = *((_DWORD *)v20 + 7);
        if (v5 >= v23) {
          break;
        }
LABEL_28:
        float v20 = (uint64_t *)*v20;
        unint64_t v22 = v21;
        if (!*v21) {
          goto LABEL_34;
        }
      }
      if (v23 >= v5)
      {
        unsigned int v24 = *((_DWORD *)v20 + 8);
        if (v17 < v24) {
          goto LABEL_28;
        }
        if (v24 >= v17)
        {
          operator delete(v18);
          goto LABEL_37;
        }
      }
      unint64_t v22 = (uint64_t **)(v20 + 1);
    }
LABEL_34:
    uint64_t *v18 = 0;
    v18[1] = 0;
    v18[2] = (uint64_t)v21;
    *unint64_t v22 = v18;
    uint64_t v25 = **((void **)a4 + 7);
    if (v25)
    {
      *((void *)a4 + 7) = v25;
      float v19 = *v22;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a4 + 8), v19);
    ++*((void *)a4 + 9);
LABEL_37:
    uint64_t v26 = *((void *)a4 + 1);
    unint64_t v27 = v17 - v5 + ((*((void *)a4 + 2) - v26) >> 2);
    if (v27 > (*((void *)a4 + 3) - v26) >> 2)
    {
      std::vector<int>::reserve(v119, v17 - v5 + ((*((void *)a4 + 2) - v26) >> 2));
      if (*((void *)a4 + 6) != *((void *)a4 + 4)) {
        std::vector<unsigned short>::reserve(v118, v27);
      }
    }
    uint64_t v28 = v5;
    if (*((void *)a4 + 6) == *((void *)a4 + 4))
    {
      if (*((unsigned char *)this + 8))
      {
        if (v17 > v5)
        {
          uint64_t v60 = (unsigned int *)*((void *)a4 + 2);
          do
          {
            if ((unint64_t)v60 >= *v10)
            {
              std::vector<int>::pointer begin = v119->__begin_;
              uint64_t v63 = ((char *)v60 - (char *)v119->__begin_) >> 2;
              unint64_t v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62) {
                goto LABEL_160;
              }
              uint64_t v65 = *v10 - (void)begin;
              if (v65 >> 1 > v64) {
                unint64_t v64 = v65 >> 1;
              }
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v66 = v64;
              }
              if (v66)
              {
                uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)a4 + 24, v66);
                std::vector<int>::pointer begin = (std::vector<int>::pointer)*((void *)a4 + 1);
                uint64_t v60 = (unsigned int *)*((void *)a4 + 2);
              }
              else
              {
                uint64_t v67 = 0;
              }
              uint64_t v68 = (unsigned int *)&v67[4 * v63];
              *uint64_t v68 = v5;
              uint64_t v61 = v68 + 1;
              while (v60 != (unsigned int *)begin)
              {
                unsigned int v69 = *--v60;
                *--uint64_t v68 = v69;
              }
              *((void *)a4 + 1) = v68;
              *((void *)a4 + 2) = v61;
              *((void *)a4 + 3) = &v67[4 * v66];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *uint64_t v60 = v5;
              uint64_t v61 = v60 + 1;
            }
            ++v5;
            *((void *)a4 + 2) = v61;
            uint64_t v60 = v61;
          }
          while (v5 != v17);
        }
      }
      else if (v17 > v5)
      {
        uint64_t v98 = *((void *)this + 11);
        unint64_t v99 = v98 + 4 * v17;
        int v100 = ~(-1 << *((_DWORD *)this + 47));
        std::string v101 = (int *)(v98 + 4 * v28);
        std::string v102 = (int *)*((void *)a4 + 2);
        do
        {
          int v103 = *v101++;
          int v104 = v103 & v100;
          if ((unint64_t)v102 >= *v10)
          {
            std::vector<int>::pointer v106 = v119->__begin_;
            uint64_t v107 = v102 - v119->__begin_;
            unint64_t v108 = v107 + 1;
            if ((unint64_t)(v107 + 1) >> 62) {
LABEL_160:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v109 = *v10 - (void)v106;
            if (v109 >> 1 > v108) {
              unint64_t v108 = v109 >> 1;
            }
            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v110 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v110 = v108;
            }
            if (v110)
            {
              int v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)a4 + 24, v110);
              std::vector<int>::pointer v106 = (std::vector<int>::pointer)*((void *)a4 + 1);
              std::string v102 = (int *)*((void *)a4 + 2);
            }
            else
            {
              int v111 = 0;
            }
            long long v112 = (int *)&v111[4 * v107];
            int *v112 = v104;
            int v105 = v112 + 1;
            while (v102 != v106)
            {
              int v113 = *--v102;
              *--long long v112 = v113;
            }
            *((void *)a4 + 1) = v112;
            *((void *)a4 + 2) = v105;
            *((void *)a4 + 3) = &v111[4 * v110];
            if (v106) {
              operator delete(v106);
            }
          }
          else
          {
            int *v102 = v104;
            int v105 = v102 + 1;
          }
          *((void *)a4 + 2) = v105;
          std::string v102 = v105;
        }
        while ((unint64_t)v101 < v99);
      }
    }
    else
    {
      uint64_t v29 = *((void *)this + 11);
      unint64_t v30 = v29 + 4 * v17;
      int v31 = *((_DWORD *)this + 47);
      if (*((unsigned char *)this + 8))
      {
        if (v17 > v5)
        {
          uint64_t v32 = (unsigned int *)(v29 + 4 * v5);
          do
          {
            unsigned int v34 = *v32++;
            unsigned int v33 = v34;
            unsigned int v36 = (unsigned int *)*((void *)a4 + 2);
            unint64_t v35 = *((void *)a4 + 3);
            if ((unint64_t)v36 >= v35)
            {
              std::vector<int>::pointer v38 = v119->__begin_;
              uint64_t v39 = ((char *)v36 - (char *)v119->__begin_) >> 2;
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62) {
                goto LABEL_160;
              }
              uint64_t v41 = v35 - (void)v38;
              if (v41 >> 1 > v40) {
                unint64_t v40 = v41 >> 1;
              }
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v40;
              }
              if (v42)
              {
                uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)a4 + 24, v42);
                std::vector<int>::pointer v38 = (std::vector<int>::pointer)*((void *)a4 + 1);
                unsigned int v36 = (unsigned int *)*((void *)a4 + 2);
              }
              else
              {
                uint64_t v43 = 0;
              }
              uint64_t v44 = (unsigned int *)&v43[4 * v39];
              *uint64_t v44 = v5;
              uint64_t v37 = v44 + 1;
              while (v36 != (unsigned int *)v38)
              {
                unsigned int v45 = *--v36;
                *--uint64_t v44 = v45;
              }
              *((void *)a4 + 1) = v44;
              *((void *)a4 + 2) = v37;
              *((void *)a4 + 3) = &v43[4 * v42];
              if (v38) {
                operator delete(v38);
              }
            }
            else
            {
              *unsigned int v36 = v5;
              uint64_t v37 = v36 + 1;
            }
            *((void *)a4 + 2) = v37;
            unsigned int v46 = v33 >> v31;
            int v48 = (char *)*((void *)a4 + 5);
            unint64_t v47 = *((void *)a4 + 6);
            if ((unint64_t)v48 >= v47)
            {
              uint64_t v50 = (char *)*v118;
              uint64_t v51 = v48 - (unsigned char *)*v118;
              if (v51 <= -3) {
                goto LABEL_161;
              }
              uint64_t v52 = v51 >> 1;
              unint64_t v53 = v47 - (void)v50;
              if (v53 <= (v51 >> 1) + 1) {
                unint64_t v54 = v52 + 1;
              }
              else {
                unint64_t v54 = v53;
              }
              BOOL v55 = v53 >= 0x7FFFFFFFFFFFFFFELL;
              uint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
              if (!v55) {
                uint64_t v56 = v54;
              }
              if (v56)
              {
                uint64_t v56 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v56);
                uint64_t v50 = (char *)*((void *)a4 + 4);
                int v48 = (char *)*((void *)a4 + 5);
              }
              else
              {
                uint64_t v57 = 0;
              }
              uint64_t v58 = (_WORD *)(v56 + 2 * v52);
              *uint64_t v58 = v46;
              uint64_t v49 = v58 + 1;
              while (v48 != v50)
              {
                __int16 v59 = *((_WORD *)v48 - 1);
                v48 -= 2;
                *--uint64_t v58 = v59;
              }
              *((void *)a4 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v58;
              *((void *)a4 + 5) = v49;
              *((void *)a4 + 6) = v56 + 2 * v57;
              if (v50) {
                operator delete(v50);
              }
            }
            else
            {
              *(_WORD *)int v48 = v46;
              uint64_t v49 = v48 + 2;
            }
            ++v5;
            *((void *)a4 + 5) = v49;
          }
          while ((unint64_t)v32 < v30);
        }
      }
      else if (v17 > v5)
      {
        uint64_t v70 = (unsigned int *)(v29 + 4 * v5);
        do
        {
          unsigned int v72 = *v70++;
          unsigned int v71 = v72;
          int v73 = v72 & ~(-1 << v31);
          uint64_t v75 = (int *)*((void *)a4 + 2);
          unint64_t v74 = *((void *)a4 + 3);
          if ((unint64_t)v75 >= v74)
          {
            std::vector<int>::pointer v77 = v119->__begin_;
            uint64_t v78 = v75 - v119->__begin_;
            unint64_t v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62) {
              goto LABEL_160;
            }
            uint64_t v80 = v74 - (void)v77;
            if (v80 >> 1 > v79) {
              unint64_t v79 = v80 >> 1;
            }
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v81 = v79;
            }
            if (v81)
            {
              std::string v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)a4 + 24, v81);
              std::vector<int>::pointer v77 = (std::vector<int>::pointer)*((void *)a4 + 1);
              uint64_t v75 = (int *)*((void *)a4 + 2);
            }
            else
            {
              std::string v82 = 0;
            }
            unint64_t v83 = (int *)&v82[4 * v78];
            *unint64_t v83 = v73;
            std::chrono::steady_clock::time_point v76 = v83 + 1;
            while (v75 != v77)
            {
              int v84 = *--v75;
              *--unint64_t v83 = v84;
            }
            *((void *)a4 + 1) = v83;
            *((void *)a4 + 2) = v76;
            *((void *)a4 + 3) = &v82[4 * v81];
            if (v77) {
              operator delete(v77);
            }
          }
          else
          {
            int *v75 = v73;
            std::chrono::steady_clock::time_point v76 = v75 + 1;
          }
          *((void *)a4 + 2) = v76;
          unsigned int v85 = v71 >> v31;
          unint64_t v87 = (char *)*((void *)a4 + 5);
          unint64_t v86 = *((void *)a4 + 6);
          if ((unint64_t)v87 >= v86)
          {
            unint64_t v89 = (char *)*v118;
            uint64_t v90 = v87 - (unsigned char *)*v118;
            if (v90 <= -3) {
LABEL_161:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v91 = v90 >> 1;
            unint64_t v92 = v86 - (void)v89;
            if (v92 <= (v90 >> 1) + 1) {
              unint64_t v93 = v91 + 1;
            }
            else {
              unint64_t v93 = v92;
            }
            BOOL v55 = v92 >= 0x7FFFFFFFFFFFFFFELL;
            uint64_t v94 = 0x7FFFFFFFFFFFFFFFLL;
            if (!v55) {
              uint64_t v94 = v93;
            }
            if (v94)
            {
              uint64_t v94 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v94);
              unint64_t v89 = (char *)*((void *)a4 + 4);
              unint64_t v87 = (char *)*((void *)a4 + 5);
            }
            else
            {
              uint64_t v95 = 0;
            }
            int v96 = (_WORD *)(v94 + 2 * v91);
            *int v96 = v85;
            __int16 v88 = v96 + 1;
            while (v87 != v89)
            {
              __int16 v97 = *((_WORD *)v87 - 1);
              v87 -= 2;
              *--int v96 = v97;
            }
            *((void *)a4 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v96;
            *((void *)a4 + 5) = v88;
            *((void *)a4 + 6) = v94 + 2 * v95;
            if (v89) {
              operator delete(v89);
            }
          }
          else
          {
            *(_WORD *)unint64_t v87 = v85;
            __int16 v88 = v87 + 2;
          }
          *((void *)a4 + 5) = v88;
        }
        while ((unint64_t)v70 < v30);
      }
    }
    a3 = v115;
    int v7 = v114;
    unsigned int v13 = i;
    if (i && *(void *)a4 != (uint64_t)(*((void *)a4 + 2) - *((void *)a4 + 1)) >> 2) {
      goto LABEL_156;
    }
  }
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(a2);
    unsigned int v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFELL];
    int v7 = &v4[2 * v6];
    unint64_t v8 = (char *)*a1;
    unsigned int v9 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v9 != *a1)
    {
      unint64_t v10 = v5;
      do
      {
        __int16 v11 = *((_WORD *)v9 - 1);
        v9 -= 2;
        *((_WORD *)v10 - 1) = v11;
        v10 -= 2;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void Database::add_units(Database *this, unsigned int a2, unsigned int a3, UnitCandidates *a4)
{
  int v4 = (_DWORD *)*((void *)this + 9);
  uint64_t v5 = *((void *)this + 10) - (void)v4;
  if (v5)
  {
    unint64_t v6 = v5 >> 3;
    int v7 = (_DWORD *)*((void *)this + 9);
    unint64_t v8 = v6;
    do
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = &v7[2 * (v8 >> 1)];
      unsigned int v12 = *v10;
      __int16 v11 = v10 + 2;
      v8 += ~(v8 >> 1);
      if (v12 < a2) {
        int v7 = v11;
      }
      else {
        unint64_t v8 = v9;
      }
    }
    while (v8);
    unsigned int v13 = v7[1];
    do
    {
      unint64_t v14 = v6 >> 1;
      unint64_t v15 = &v4[2 * (v6 >> 1)];
      unsigned int v17 = *v15;
      BOOL v16 = v15 + 2;
      v6 += ~(v6 >> 1);
      if (v17 > a3) {
        unint64_t v6 = v14;
      }
      else {
        int v4 = v16;
      }
    }
    while (v6);
    unsigned int v18 = v4[1];
  }
  else
  {
    unsigned int v18 = v4[1];
    unsigned int v13 = v18;
  }
  Database::add_unit_range(this, v13, v18, a4);
}

void ViterbiStream::process_data(uint64_t a1, uint64_t *a2)
{
  v196[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v161 = a1;
  if (*v3 != v5)
  {
    uint64_t v6 = a1 + 320;
    uint64_t v7 = a1 + 328;
    do
    {
      std::string v190 = 0;
      std::string v191 = 0;
      std::string v192 = 0;
      BOOL v170 = 0;
      uint64_t v171 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v4 + 608), *(void *)(v4 + 616), (uint64_t)(*(void *)(v4 + 616) - *(void *)(v4 + 608)) >> 2);
      uint64_t v8 = *(void *)(v161 + 296);
      v168[0] = *(void (****)(void))(v161 + 288);
      v168[1] = (void (***)(void))v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      fetch_unit_by_ctx_number(&__p, v168, (uint64_t *)&v190);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
      }
      if (__p)
      {
        BOOL v170 = __p;
        operator delete(__p);
      }
      (***(void (****)(void, uint64_t, char ***))(v161 + 272))(*(void *)(v161 + 272), v4, &v190);
      a1 = v161;
      unint64_t v10 = *(void **)(v161 + 312);
      unint64_t v9 = *(void *)(v161 + 320);
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = *(void *)(v161 + 304);
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v12) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        *(void *)&v179[24] = v6;
        if (v16)
        {
          if (v16 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unsigned int v17 = (char *)operator new(24 * v16);
        }
        else
        {
          unsigned int v17 = 0;
        }
        unsigned int v18 = &v17[24 * v13];
        p_int64x2_t buf = v17;
        *(void *)uint64_t v179 = v18;
        *(void *)&v179[8] = v18;
        *(void *)&v179[16] = &v17[24 * v16];
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = 0;
        *(void *)unsigned int v18 = 0;
        std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(v18, *(void *)(v4 + 72), *(void *)(v4 + 80), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v4 + 80) - *(void *)(v4 + 72)) >> 3));
        uint64_t v19 = *(void *)v179;
        uint64_t v11 = *(void *)&v179[8] + 24;
        *(void *)&v179[8] += 24;
        a1 = v161;
        BOOL v21 = *(void **)(v161 + 304);
        float v20 = *(void **)(v161 + 312);
        if (v20 == v21)
        {
          int64x2_t v23 = vdupq_n_s64((unint64_t)v20);
        }
        else
        {
          do
          {
            *(void *)(v19 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
            *(void *)(v19 - 16) = 0;
            v19 -= 24;
            *(void *)(v19 + 16) = 0;
            long long v22 = *(_OWORD *)(v20 - 3);
            v20 -= 3;
            *(_OWORD *)uint64_t v19 = v22;
            *(void *)(v19 + 16) = v20[2];
            void *v20 = 0;
            v20[1] = 0;
            v20[2] = 0;
          }
          while (v20 != v21);
          int64x2_t v23 = *(int64x2_t *)(v161 + 304);
          uint64_t v11 = *(void *)&v179[8];
        }
        *(void *)(v161 + 30std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v19;
        *(void *)(v161 + 312) = v11;
        *(int64x2_t *)uint64_t v179 = v23;
        uint64_t v24 = *(void *)(v161 + 320);
        *(void *)(v161 + 320) = *(void *)&v179[16];
        *(void *)&v179[16] = v24;
        p_int64x2_t buf = (void *)v23.i64[0];
        std::__split_buffer<std::vector<MarkerRecord>>::~__split_buffer((uint64_t)&p_buf);
      }
      else
      {
        *unint64_t v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(v10, *(void *)(v4 + 72), *(void *)(v4 + 80), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v4 + 80) - *(void *)(v4 + 72)) >> 3));
        uint64_t v11 = (uint64_t)(v10 + 3);
        *(void *)(v161 + 312) = v11;
      }
      *(void *)(a1 + 312) = v11;
      std::vector<Prompt>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Prompt*>,std::__wrap_iter<Prompt*>>(v7, *(void *)(a1 + 336), *(uint64_t **)(v4 + 632), *(void *)(v4 + 640), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v4 + 640) - *(void *)(v4 + 632)) >> 3));
      p_int64x2_t buf = &v190;
      std::vector<Unit>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
      v4 += 656;
    }
    while (v4 != v5);
  }
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 272) + 24))(*(void *)(a1 + 272)))
  {
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 272) + 8))(&v176);
    uint64_t v25 = operator new(0x30uLL);
    v25[1] = 0;
    v25[2] = 0;
    *uint64_t v25 = off_26C2197A8;
    v25[3] = 0;
    uint64_t v26 = v25 + 3;
    v25[4] = 0;
    v25[5] = 0;
    uint64_t v174 = 0;
    uint64_t v175 = 0;
    std::string::size_type v173 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v173, v176, (uint64_t)v177, (v177 - (unsigned char *)v176) >> 2);
    uint64_t v27 = *(void *)(a1 + 296);
    v172[0] = *(void (****)(void))(a1 + 288);
    v172[1] = (void (***)(void))v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v167 = (std::__shared_weak_count *)v25;
    fetch_unit_by_ctx_number(&v173, v172, v26);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v27);
    }
    if (v173)
    {
      uint64_t v174 = v173;
      operator delete(v173);
    }
    uint64_t v29 = *(void *)(a1 + 304);
    uint64_t v28 = *(void *)(a1 + 312);
    if (0xD37A6F4DE9BD37A7 * ((uint64_t)(v25[4] - v25[3]) >> 3) != 0xAAAAAAAAAAAAAAABLL * ((v28 - v29) >> 3))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Size of markers doesn't match size of units.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if (v28 != v29)
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v32 = 160;
      do
      {
        unsigned int v33 = (uint64_t *)(*v26 + v32);
        if ((uint64_t *)(v29 + v30) != v33)
        {
          std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(v33, *(void *)(v29 + v30), *(void *)(v29 + v30 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v29 + v30 + 8) - *(void *)(v29 + v30)) >> 3));
          uint64_t v29 = *(void *)(a1 + 304);
          uint64_t v28 = *(void *)(a1 + 312);
        }
        ++v31;
        v30 += 24;
        v32 += 184;
      }
      while (v31 < 0xAAAAAAAAAAAAAAABLL * ((v28 - v29) >> 3));
    }
    uint64_t v35 = *(void *)(a1 + 288);
    unsigned int v34 = *(std::__shared_weak_count **)(a1 + 296);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v156 = v34;
    unsigned int v36 = *(int **)(a1 + 328);
    uint64_t v159 = *(int **)(a1 + 336);
    if (v36 != v159)
    {
      int v160 = 0;
      float v164 = v25 + 3;
      uint64_t v165 = v35;
      while (1)
      {
        uint64_t v38 = *((void *)v36 + 6);
        uint64_t v37 = *((void *)v36 + 7);
        uint64_t v39 = v36[1];
        uint64_t v166 = v36;
        unint64_t v40 = 2 * *v36 + v160;
        float v187 = 0;
        float v188 = 0;
        uint64_t v189 = 0;
        uint64_t v41 = v25[3];
        if (0xD37A6F4DE9BD37A7 * ((v25[4] - v41) >> 3) > v40)
        {
          unint64_t v42 = (void *)(v41 + 184 * v40);
          float v187 = (int *)v42[20];
          v42[20] = 0;
          uint64_t v43 = v188;
          float v188 = (int *)v42[21];
          v42[21] = v43;
          uint64_t v44 = v189;
          uint64_t v189 = v42[22];
          v42[22] = v44;
        }
        uint64_t v45 = v37 - v38;
        uint64_t v46 = 2 * v39;
        unint64_t v47 = (unint64_t)v45 >> 2;
        if (2 * v39 != ((unint64_t)v45 >> 2))
        {
          int64x2_t buf = 0uLL;
          v196[0] = 0;
          int v157 = 2 * v39;
          unint64_t v158 = v45;
          unint64_t v48 = (int)(v45 >> 2);
          unint64_t v162 = v48;
          unint64_t v163 = v46 + (int)v40;
          if (v40 >= v163)
          {
            unint64_t v50 = (int)v46;
          }
          else
          {
            unint64_t v49 = 0;
            unint64_t v50 = (int)v46;
            unint64_t v51 = v40;
            do
            {
              uint64_t v52 = *v26 + 184 * v51;
              unint64_t v54 = *(_DWORD **)(v52 + 160);
              for (unsigned int i = *(_DWORD **)(v52 + 168); v54 != i; v54 += 14)
              {
                if (*v54 == 3)
                {
                  int v55 = ((v51 - v40) * v162 / v50) & ~((int)((v51 - v40) * v162 / v50) >> 31);
                  if (v55 >= (int)v47) {
                    int v55 = v47;
                  }
                  int v56 = v55 + v40;
                  if (v49 >= v196[0])
                  {
                    uint64_t v57 = (uint64_t)(v49 - buf.i64[0]) >> 6;
                    if ((unint64_t)(v57 + 1) >> 58) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v58 = (v196[0] - buf.i64[0]) >> 5;
                    if (v58 <= v57 + 1) {
                      unint64_t v58 = v57 + 1;
                    }
                    if (v196[0] - buf.i64[0] >= 0x7FFFFFFFFFFFFFC0uLL) {
                      unint64_t v59 = 0x3FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v59 = v58;
                    }
                    *(void *)&v179[24] = v196;
                    if (v59)
                    {
                      if (v59 >> 58) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      uint64_t v60 = (char *)operator new(v59 << 6);
                    }
                    else
                    {
                      uint64_t v60 = 0;
                    }
                    p_int64x2_t buf = v60;
                    *(void *)uint64_t v179 = &v60[64 * v57];
                    *(void *)&v179[8] = *(void *)v179;
                    *(void *)&v179[16] = &v60[64 * v59];
                    std::pair<int,MarkerRecord>::pair[abi:ne180100]<int &,MarkerRecord&,0>(*(uint64_t *)v179, v56, (uint64_t)v54);
                    uint64_t v61 = *(void *)v179;
                    unint64_t v49 = *(void *)&v179[8] + 64;
                    *(void *)&v179[8] += 64;
                    int64x2_t v62 = buf;
                    uint64_t v25 = &v167->__vftable;
                    if (buf.i64[1] == buf.i64[0])
                    {
                      int64x2_t v68 = vdupq_n_s64(buf.u64[1]);
                    }
                    else
                    {
                      uint64_t v63 = 0;
                      do
                      {
                        uint64_t v64 = v61 + v63;
                        uint64_t v65 = v62.i64[1] + v63;
                        *(_DWORD *)(v64 - 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_DWORD *)(v62.i64[1] + v63 - 64);
                        *(void *)(v64 - 56) = *(void *)(v62.i64[1] + v63 - 56);
                        long long v66 = *(_OWORD *)(v62.i64[1] + v63 - 48);
                        *(void *)(v64 - 32) = *(void *)(v62.i64[1] + v63 - 32);
                        *(_OWORD *)(v64 - 48) = v66;
                        *(void *)(v65 - 40) = 0;
                        *(void *)(v65 - 32) = 0;
                        *(void *)(v65 - 48) = 0;
                        long long v67 = *(_OWORD *)(v62.i64[1] + v63 - 24);
                        *(_WORD *)(v64 - 8) = *(_WORD *)(v62.i64[1] + v63 - 8);
                        *(_OWORD *)(v64 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v67;
                        v63 -= 64;
                      }
                      while (v62.i64[1] + v63 != v62.i64[0]);
                      v61 += v63;
                      int64x2_t v68 = buf;
                      unint64_t v49 = *(void *)&v179[8];
                    }
                    buf.i64[0] = v61;
                    buf.i64[1] = v49;
                    *(int64x2_t *)uint64_t v179 = v68;
                    uint64_t v69 = v196[0];
                    v196[0] = *(void *)&v179[16];
                    *(void *)&v179[16] = v69;
                    p_int64x2_t buf = (void *)v68.i64[0];
                    std::__split_buffer<std::pair<int,MarkerRecord>>::~__split_buffer((uint64_t)&p_buf);
                  }
                  else
                  {
                    std::pair<int,MarkerRecord>::pair[abi:ne180100]<int &,MarkerRecord&,0>(v49, v56, (uint64_t)v54);
                    v49 += 64;
                  }
                  buf.i64[1] = v49;
                }
              }
              ++v51;
              uint64_t v26 = v164;
            }
            while (v51 < v163);
            unint64_t v48 = v162;
          }
          uint64_t v70 = *v26;
          if (v50)
          {
            unint64_t v71 = v70 + 184 * v40;
            uint64_t shared_owners = v71 + 184 * (int)v50;
            uint64_t v73 = v25[4];
            if (shared_owners != v73)
            {
              uint64_t v74 = 184 * (int)v50;
              do
              {
                unint64_t v75 = v71 + v74;
                *(void *)unint64_t v71 = *(void *)(v71 + v74);
                *(_DWORD *)(v71 + 8) = *(_DWORD *)(v71 + v74 + 8);
                std::chrono::steady_clock::time_point v76 = *(void **)(v71 + 16);
                if (v76)
                {
                  *(void *)(v71 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v76;
                  operator delete(v76);
                  *(void *)(v71 + 16) = 0;
                  *(void *)(v71 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
                  *(void *)(v71 + 32) = 0;
                }
                *(_OWORD *)(v71 + 16) = *(_OWORD *)(v75 + 16);
                *(void *)(v71 + 32) = *(void *)(v75 + 32);
                *(void *)(v75 + 16) = 0;
                *(void *)(v75 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
                *(void *)(v75 + 32) = 0;
                std::vector<int>::pointer v77 = (void **)(v71 + 40);
                if (*(char *)(v71 + 63) < 0) {
                  operator delete(*v77);
                }
                unint64_t v78 = v75 + 40;
                unint64_t v79 = v71 + v74;
                *(_OWORD *)std::vector<int>::pointer v77 = *(_OWORD *)v78;
                *(void *)(v71 + 56) = *(void *)(v78 + 16);
                *(unsigned char *)(v71 + v74 + 63) = 0;
                *(unsigned char *)unint64_t v78 = 0;
                uint64_t v80 = (void **)(v71 + 64);
                if (*(char *)(v71 + 87) < 0) {
                  operator delete(*v80);
                }
                *(_OWORD *)uint64_t v80 = *(_OWORD *)(v79 + 64);
                *(void *)(v71 + 80) = *(void *)(v79 + 80);
                *(unsigned char *)(v79 + 87) = 0;
                *(unsigned char *)(v79 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
                unint64_t v81 = *(void **)(v71 + 88);
                if (v81)
                {
                  *(void *)(v71 + 96) = v81;
                  operator delete(v81);
                  *(void *)(v71 + 88) = 0;
                  *(void *)(v71 + 96) = 0;
                  *(void *)(v71 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
                }
                std::string v82 = (void *)(v79 + 88);
                *(_OWORD *)(v71 + 88) = *(_OWORD *)(v79 + 88);
                unint64_t v83 = v71 + v74;
                *(void *)(v71 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(v71 + v74 + 104);
                *std::string v82 = 0;
                v82[1] = 0;
                void v82[2] = 0;
                int v84 = *(void **)(v71 + 112);
                if (v84)
                {
                  *(void *)(v71 + 120) = v84;
                  operator delete(v84);
                  *(void *)(v71 + 112) = 0;
                  *(void *)(v71 + 120) = 0;
                  *(void *)(v71 + 128) = 0;
                }
                *(_OWORD *)(v71 + 112) = *(_OWORD *)(v83 + 112);
                *(void *)(v71 + 128) = *(void *)(v83 + 128);
                *(void *)(v83 + 112) = 0;
                *(void *)(v83 + 120) = 0;
                *(void *)(v83 + 128) = 0;
                *(_OWORD *)(v71 + 136) = *(_OWORD *)(v83 + 136);
                *(_DWORD *)(v71 + 152) = *(_DWORD *)(v83 + 152);
                std::vector<MarkerRecord>::__vdeallocate((uint64_t *)(v71 + 160));
                *(_OWORD *)(v71 + 160) = *(_OWORD *)(v83 + 160);
                *(void *)(v71 + 176) = *(void *)(v83 + 176);
                *(void *)(v83 + 168) = 0;
                *(void *)(v83 + 176) = 0;
                *(void *)(v83 + 160) = 0;
                v71 += 184;
              }
              while (v71 + v74 != v73);
              uint64_t v25 = &v167->__vftable;
              uint64_t shared_owners = v167[1].__shared_owners_;
            }
            uint64_t v35 = v165;
            while (shared_owners != v71)
            {
              shared_owners -= 184;
              std::allocator<Unit>::destroy[abi:ne180100](shared_owners);
            }
            v25[4] = v71;
            uint64_t v70 = v25[3];
            unint64_t v48 = v162;
          }
          else
          {
            uint64_t v35 = v165;
          }
          long long v185 = 0u;
          long long v186 = 0u;
          long long v183 = 0u;
          long long v184 = 0u;
          long long v181 = 0u;
          long long v182 = 0u;
          long long v180 = 0u;
          *(void *)uint64_t v179 = 0x7FFFFFFFLL;
          p_int64x2_t buf = (void *)0x8000000080000000;
          memset(&v179[8], 0, 56);
          std::string::basic_string[abi:ne180100]<0>(&v179[56], &byte_20D5A22AE);
          *((void *)&v185 + 1) = 0;
          long long v186 = 0uLL;
          long long v181 = 0u;
          long long v182 = 0u;
          long long v183 = 0u;
          if ((v158 >> 2))
          {
            unsigned int v85 = (uint64_t *)(v70 + 184 * v40);
            unint64_t v87 = v25[4];
            uint64_t v86 = v25[5];
            if (0xD37A6F4DE9BD37A7 * ((uint64_t)(v86 - v87) >> 3) >= v48)
            {
              unint64_t v93 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v87 - (void)v85) >> 3);
              unint64_t v94 = v48;
              unint64_t v95 = v48 - v93;
              if (v48 <= v93) {
                goto LABEL_109;
              }
              int v96 = v48;
              uint64_t v97 = 0;
              unint64_t v94 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v87 - (void)v85) >> 3);
              uint64_t v98 = v87 + 184 * v95;
              uint64_t v99 = 184 * v96 - (v87 - (void)v85);
              do
              {
                Unit::Unit((Unit *)(v87 + v97), (const Unit *)&p_buf);
                v97 += 184;
              }
              while (v99 != v97);
              v167[1].__shared_owners_ = v98;
              uint64_t v25 = &v167->__vftable;
              uint64_t v35 = v165;
              unint64_t v48 = v162;
              if ((uint64_t *)v87 != v85)
              {
LABEL_109:
                std::vector<Unit>::__move_range((uint64_t)v164, (uint64_t)v85, v87, (uint64_t)&v85[23 * (int)v48]);
                int v100 = (uint64_t *)&p_buf;
                if (v85 <= (uint64_t *)&p_buf)
                {
                  if (v25[4] <= (unint64_t)&p_buf) {
                    unint64_t v101 = 0;
                  }
                  else {
                    unint64_t v101 = v48;
                  }
                  int v100 = (uint64_t *)&v179[184 * v101 - 8];
                }
                do
                {
                  Unit::operator=((uint64_t)v85, v100);
                  v85 += 23;
                  --v94;
                }
                while (v94);
              }
            }
            else
            {
              uint64_t v88 = *v164;
              unint64_t v89 = v48 - 0x2C8590B21642C859 * ((uint64_t)(v87 - *v164) >> 3);
              if (v89 > 0x1642C8590B21642) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v90 = 0xD37A6F4DE9BD37A7 * ((v86 - v88) >> 3);
              if (2 * v90 > v89) {
                unint64_t v89 = 2 * v90;
              }
              if (v90 >= 0xB21642C8590B21) {
                unint64_t v91 = 0x1642C8590B21642;
              }
              else {
                unint64_t v91 = v89;
              }
              p_shared_weak_owners = &v167[1].__shared_weak_owners_;
              if (v91) {
                unint64_t v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Unit>>(v91);
              }
              else {
                uint64_t v92 = 0;
              }
              std::string v102 = (Unit *)(v91 + 8 * (((uint64_t)v85 - v88) >> 3));
              std::string v190 = (char **)v91;
              std::string v191 = v102;
              std::string v192 = v102;
              unint64_t v193 = v91 + 184 * v92;
              int v103 = (Unit *)((char *)v102 + 184 * (int)v162);
              uint64_t v104 = 184 * (int)v162;
              do
              {
                Unit::Unit(v102, (const Unit *)&p_buf);
                std::string v102 = (Unit *)((char *)v102 + 184);
                v104 -= 184;
              }
              while (v104);
              std::string v192 = v103;
              std::vector<Unit>::__swap_out_circular_buffer(v164, &v190, v85);
              std::__split_buffer<Unit>::~__split_buffer((uint64_t)&v190);
            }
          }
          std::string v190 = (char **)&v185 + 1;
          std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
          if (*((void *)&v182 + 1))
          {
            *(void *)&long long v183 = *((void *)&v182 + 1);
            operator delete(*((void **)&v182 + 1));
          }
          uint64_t v26 = v164;
          if ((void)v181)
          {
            *((void *)&v181 + 1) = v181;
            operator delete((void *)v181);
          }
          if (SHIBYTE(v180) < 0) {
            operator delete(*(void **)&v179[56]);
          }
          if ((v179[55] & 0x80000000) != 0) {
            operator delete(*(void **)&v179[32]);
          }
          if (*(void *)&v179[8])
          {
            *(void *)&v179[16] = *(void *)&v179[8];
            operator delete(*(void **)&v179[8]);
          }
          uint64_t v105 = buf.i64[1];
          if (buf.i64[0] != buf.i64[1])
          {
            uint64_t v106 = buf.i64[0] + 16;
            do
            {
              uint64_t v108 = v106 - 16;
              int v107 = *(_DWORD *)(v106 - 16);
              LODWORD(p_buf) = v107;
              *(void *)uint64_t v179 = *(void *)(v106 - 8);
              if (*(char *)(v106 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v179[8], *(const std::string::value_type **)v106, *(void *)(v106 + 8));
                int v107 = (int)p_buf;
              }
              else
              {
                long long v109 = *(_OWORD *)v106;
                *(void *)&v179[24] = *(void *)(v106 + 16);
                *(_OWORD *)&v179[8] = v109;
              }
              long long v110 = *(_OWORD *)(v106 + 24);
              *(_WORD *)&v179[48] = *(_WORD *)(v106 + 40);
              *(_OWORD *)&v179[32] = v110;
              uint64_t v111 = *v164 + 184 * v107;
              unint64_t v114 = *(void *)(v111 + 168);
              int v113 = (uint64_t *)(v111 + 168);
              unint64_t v112 = v114;
              unsigned int v115 = v113 - 1;
              if (v114 >= v113[1])
              {
                uint64_t v116 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v115, (uint64_t)v179);
              }
              else
              {
                std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v115, (uint64_t)v179);
                uint64_t v116 = v112 + 56;
              }
              uint64_t v25 = &v167->__vftable;
              *int v113 = v116;
              if ((v179[31] & 0x80000000) != 0) {
                operator delete(*(void **)&v179[8]);
              }
              v106 += 64;
              uint64_t v35 = v165;
            }
            while (v108 + 64 != v105);
          }
          int v160 = v160 - v157 + v47;
          p_int64x2_t buf = &buf;
          std::vector<std::pair<int,MarkerRecord>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
        }
        int v117 = v166;
        uint64_t v118 = *((void *)v166 + 6);
        if (*((void *)v166 + 7) != v118) {
          break;
        }
LABEL_156:
        float v126 = (void *)(*v26 + 184 * v40);
        int v127 = (int *)v126[20];
        v126[20] = v187;
        float v187 = v127;
        std::string::size_type v128 = (int *)v126[21];
        v126[21] = v188;
        float v188 = v128;
        uint64_t v129 = v126[22];
        v126[22] = v189;
        uint64_t v189 = v129;
        p_int64x2_t buf = &v187;
        std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
        unsigned int v36 = v117 + 18;
        a1 = v161;
        if (v36 == v159) {
          goto LABEL_157;
        }
      }
      unint64_t v119 = 0;
      uint64_t v120 = 184 * v40 + 152;
      while (1)
      {
        uint64_t v121 = *(unsigned int *)(v118 + 4 * v119);
        if ((v121 & 0x80000000) == 0 && *(unsigned char *)(v35 + 8)) {
          LODWORD(v121) = *(_DWORD *)(*(void *)(v35 + 96) + 4 * v121);
        }
        uint64_t v122 = *v26;
        std::string::size_type v123 = (int32x2_t *)(*v26 + v120 - 152);
        v123->i32[0] = v121;
        (**(void (***)(uint64_t, int32x2_t *))v35)(v35, v123);
        uint64_t v124 = (void *)(v122 + v120 - 112);
        int v125 = *(char *)(v122 + v120 - 89);
        if (v125 < 0)
        {
          if (*(void *)(v122 + v120 - 104) == 4)
          {
            uint64_t v124 = (void *)*v124;
LABEL_152:
            if (*(_DWORD *)v124 == 829188467 || *(_DWORD *)v124 == 845965683) {
              *std::string::size_type v123 = vdup_n_s32((int)(float)-*(float *)(v122 + v120));
            }
          }
        }
        else if (v125 == 4)
        {
          goto LABEL_152;
        }
        ++v119;
        int v117 = v166;
        uint64_t v118 = *((void *)v166 + 6);
        v120 += 184;
        if (v119 >= (*((void *)v166 + 7) - v118) >> 2) {
          goto LABEL_156;
        }
      }
    }
LABEL_157:
    if (v156) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v156);
    }
    unint64_t v130 = *(char **)(a1 + 304);
    int v131 = *(char **)(a1 + 312);
    while (v131 != v130)
    {
      v131 -= 24;
      p_int64x2_t buf = v131;
      std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
    }
    *(void *)(a1 + 312) = v130;
    uint64_t v132 = *(void *)(a1 + 328);
    for (uint64_t j = *(void *)(a1 + 336); j != v132; std::allocator<Prompt>::destroy[abi:ne180100](j))
      j -= 72;
    *(void *)(a1 + 336) = v132;
    (*(void (**)(void))(**(void **)(a1 + 272) + 16))(*(void *)(a1 + 272));
    p_int64x2_t buf = 0;
    *(void *)uint64_t v179 = 0;
    *(void *)&v179[8] = 0;
    int32x2_t v134 = (std::__shared_weak_count_vtbl *)v25[3];
    if ((std::__shared_weak_count_vtbl *)v25[4] != v134)
    {
      int v135 = 0;
      unint64_t v136 = 0;
      do
      {
        int v137 = (_DWORD *)&v134->~__shared_weak_count + 46 * v136 + 1;
        if ((unint64_t)v135 >= *(void *)&v179[8])
        {
          int v139 = (char *)p_buf;
          uint64_t v140 = (v135 - (unsigned char *)p_buf) >> 2;
          unint64_t v141 = v140 + 1;
          if ((unint64_t)(v140 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v142 = *(void *)&v179[8] - (void)p_buf;
          if ((uint64_t)(*(void *)&v179[8] - (void)p_buf) >> 1 > v141) {
            unint64_t v141 = v142 >> 1;
          }
          if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v143 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v143 = v141;
          }
          if (v143)
          {
            int v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v179[8], v143);
            int v139 = (char *)p_buf;
            int v135 = *(char **)v179;
          }
          else
          {
            int v144 = 0;
          }
          int v145 = &v144[4 * v140];
          *(_DWORD *)int v145 = *v137;
          std::string::size_type v138 = v145 + 4;
          if (v135 == v139)
          {
            a1 = v161;
          }
          else
          {
            a1 = v161;
            do
            {
              int v146 = *((_DWORD *)v135 - 1);
              v135 -= 4;
              *((_DWORD *)v145 - 1) = v146;
              v145 -= 4;
            }
            while (v135 != v139);
          }
          p_int64x2_t buf = v145;
          *(void *)uint64_t v179 = v138;
          *(void *)&v179[8] = &v144[4 * v143];
          if (v139) {
            operator delete(v139);
          }
        }
        else
        {
          *(_DWORD *)int v135 = *v137;
          std::string::size_type v138 = v135 + 4;
        }
        *(void *)uint64_t v179 = v138;
        ++v136;
        int32x2_t v134 = v167[1].__vftable;
        int v135 = v138;
      }
      while (v136 < 0xD37A6F4DE9BD37A7 * ((v167[1].__shared_owners_ - (uint64_t)v134) >> 3));
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v147 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      float v188 = 0;
      uint64_t v189 = 0;
      float v187 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v187, p_buf, *(uint64_t *)v179, (uint64_t)(*(void *)v179 - (void)p_buf) >> 2);
      stringify_units(&v190, &v187);
      if (SHIBYTE(v192) >= 0) {
        std::string::size_type v148 = &v190;
      }
      else {
        std::string::size_type v148 = (char ***)v190;
      }
      buf.i32[0] = 136315138;
      *(uint64_t *)((char *)buf.i64 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (uint64_t)v148;
      _os_log_impl(&dword_20CD80000, v147, OS_LOG_TYPE_INFO, "Units    : %s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v192) < 0) {
        operator delete(v190);
      }
      if (v187)
      {
        float v188 = v187;
        operator delete(v187);
      }
    }
    v196[0] = 0;
    int64x2_t buf = 0uLL;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&buf, p_buf, *(uint64_t *)v179, (uint64_t)(*(void *)v179 - (void)p_buf) >> 2);
    stringify_units(&v190, (int **)&buf);
    if (SHIBYTE(v192) >= 0) {
      float v150 = &v190;
    }
    else {
      float v150 = (char ***)v190;
    }
    Diagnostics::log(6, "Units    : %s", v149, v150);
    if (SHIBYTE(v192) < 0) {
      operator delete(v190);
    }
    if (buf.i64[0])
    {
      buf.i64[1] = buf.i64[0];
      operator delete((void *)buf.i64[0]);
    }
    if (p_buf)
    {
      *(void *)uint64_t v179 = p_buf;
      operator delete(p_buf);
    }
    float v151 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v151 + 8) = 0u;
    *((_OWORD *)v151 + 2) = 0u;
    *((void *)v151 + 3) = v151 + 32;
    *(void *)float v151 = off_26C215330;
    p_int64x2_t buf = &v190;
    if (!v152) {
      operator new();
    }
    p_int64x2_t buf = off_26C206778;
    *(void *)uint64_t v179 = v26;
    *(void *)&v179[8] = v167;
    atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v153 = *(_OWORD *)v179;
    *(void *)uint64_t v179 = 0;
    *(void *)&v179[8] = 0;
    uint64_t v154 = *(std::__shared_weak_count **)(v152 + 16);
    *(_OWORD *)(v152 + 8) = v153;
    if (v154)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v154);
      p_int64x2_t buf = off_26C206778;
      if (*(void *)&v179[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v179[8]);
      }
    }
    p_int64x2_t buf = v151 + 24;
    *(void *)uint64_t v179 = v151;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v151 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, void **))(*(void *)a1 + 72))(a1, &p_buf);
    if (*(void *)v179) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v179);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v151);
    std::__shared_weak_count::__release_shared[abi:ne180100](v167);
    if (v176)
    {
      BOOL v177 = v176;
      operator delete(v176);
    }
  }
}

void sub_20D34D694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  unint64_t v58 = *(void **)(v56 - 216);
  if (v58)
  {
    *(void *)(v56 - 208) = v58;
    operator delete(v58);
  }
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  if (a40) {
    operator delete(a40);
  }
  _Unwind_Resume(a1);
}

void fetch_unit_by_ctx_number(void *a1, void (****a2)(void), uint64_t *a3)
{
  uint64_t v6 = a1[1] - *a1;
  unint64_t v7 = v6 >> 2;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  unint64_t v10 = 0xD37A6F4DE9BD37A7 * ((v9 - *a3) >> 3);
  unint64_t v11 = (v6 >> 2) - v10;
  if (v6 >> 2 <= v10)
  {
    if (v6 >> 2 >= v10)
    {
      unint64_t v22 = a3[1];
      goto LABEL_20;
    }
    unint64_t v22 = v8 + 184 * v7;
    while (v9 != v22)
    {
      v9 -= 184;
      std::allocator<Unit>::destroy[abi:ne180100](v9);
    }
LABEL_18:
    a3[1] = v22;
    goto LABEL_20;
  }
  uint64_t v12 = a3[2];
  if (0xD37A6F4DE9BD37A7 * ((v12 - v9) >> 3) >= v11)
  {
    unint64_t v22 = v9 + 184 * v11;
    uint64_t v23 = 184 * v7 - 8 * ((v9 - *a3) >> 3);
    do
    {
      std::allocator<Unit>::construct[abi:ne180100]<Unit>(v9);
      v9 += 184;
      v23 -= 184;
    }
    while (v23);
    goto LABEL_18;
  }
  if ((unint64_t)v6 >= 0x590B21642C85909) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v30 = a3 + 2;
  unint64_t v13 = 0xD37A6F4DE9BD37A7 * ((v12 - v8) >> 3);
  uint64_t v14 = 2 * v13;
  if (2 * v13 <= v7) {
    uint64_t v14 = v7;
  }
  if (v13 >= 0xB21642C8590B21) {
    unint64_t v15 = 0x1642C8590B21642;
  }
  else {
    unint64_t v15 = v14;
  }
  unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Unit>>(v15);
  uint64_t v17 = (uint64_t)&v16[184 * v10];
  v27[0] = v16;
  v27[1] = v17;
  uint64_t v28 = v17;
  uint64_t v29 = &v16[184 * v18];
  uint64_t v19 = 184 * v7;
  float v20 = &v16[184 * v7];
  unint64_t v21 = v19 - 184 * v10;
  do
  {
    std::allocator<Unit>::construct[abi:ne180100]<Unit>(v17);
    v17 += 184;
    v21 -= 184;
  }
  while (v21);
  uint64_t v28 = (uint64_t)v20;
  std::vector<Unit>::__swap_out_circular_buffer(a3, v27);
  std::__split_buffer<Unit>::~__split_buffer((uint64_t)v27);
  unint64_t v22 = a3[1];
LABEL_20:
  uint64_t v24 = *a3;
  if (v22 != *a3)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    do
    {
      *(_DWORD *)(v24 + v25) = *(_DWORD *)(*a1 + 4 * v26);
      (***a2)();
      ++v26;
      uint64_t v24 = *a3;
      v25 += 184;
    }
    while (v26 < 0xD37A6F4DE9BD37A7 * ((a3[1] - *a3) >> 3));
  }
}

void sub_20D34DAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<Prompt>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Prompt*>,std::__wrap_iter<Prompt*>>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v8 = (uint64_t *)result;
    uint64_t v11 = *(void *)(result + 16);
    uint64_t v9 = result + 16;
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v21 = v12 - a2;
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        unint64_t v22 = &a3[9 * a5];
      }
      else
      {
        unint64_t v22 = &a3[(uint64_t)(v12 - a2) >> 3];
        __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Prompt>,Prompt*,Prompt*,Prompt*>(v9, (uint64_t)v22, a4, *(void *)(v9 - 8));
        v8[1] = result;
        if (v21 < 1) {
          return result;
        }
      }
      std::vector<Prompt>::__move_range((uint64_t)v8, a2, v12, a2 + 72 * a5);
      return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Prompt *,Prompt *,Prompt *>(v6, v22, a2);
    }
    else
    {
      uint64_t v13 = *v8;
      unint64_t v14 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v12 - *v8) >> 3);
      if (v14 > 0x38E38E38E38E38ELL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0x8E38E38E38E38E39 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x8E38E38E38E38E39 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x1C71C71C71C71C7) {
        unint64_t v18 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v30 = v9;
      if (v18)
      {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v18);
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
      }
      uint64_t v23 = (uint64_t)&v19[72 * v15];
      v27[0] = v19;
      v27[1] = v23;
      uint64_t v28 = v23;
      uint64_t v29 = &v19[72 * v20];
      uint64_t v24 = 9 * a5;
      uint64_t v25 = v23 + 72 * a5;
      uint64_t v26 = 8 * v24;
      do
      {
        std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt&>(v23, v6);
        v23 += 72;
        v6 += 9;
        v26 -= 72;
      }
      while (v26);
      uint64_t v28 = v25;
      std::vector<Prompt>::__swap_out_circular_buffer(v8, v27, a2);
      return std::__split_buffer<Prompt>::~__split_buffer((uint64_t)v27);
    }
  }
  return result;
}

void sub_20D34DD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Prompt>,Prompt*,Prompt*,Prompt*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt&>(a4 + v7, (uint64_t *)(a2 + v7));
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

__n128 std::vector<Prompt>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    uint64_t v7 = *(__n128 **)(a1 + 8);
  }
  else
  {
    uint64_t v6 = (__n128 *)(a2 + v4 - a4);
    uint64_t v7 = *(__n128 **)(a1 + 8);
    do
    {
      unint64_t v8 = v6->n128_u64[0];
      v7->n128_u32[2] = v6->n128_u32[2];
      v7->n128_u64[0] = v8;
      __n128 v9 = v6[1];
      v7[2].n128_u64[0] = v6[2].n128_u64[0];
      v7[1] = v9;
      v6[1].n128_u64[1] = 0;
      v6[2].n128_u64[0] = 0;
      v6[1].n128_u64[0] = 0;
      v7[2].n128_u16[4] = v6[2].n128_u16[4];
      v7[3].n128_u64[1] = 0;
      v7[4].n128_u64[0] = 0;
      v7[3].n128_u64[0] = 0;
      __n128 result = v6[3];
      v7[3] = result;
      v7[4].n128_u64[0] = v6[4].n128_u64[0];
      v6[3].n128_u64[0] = 0;
      v6[3].n128_u64[1] = 0;
      v6[4].n128_u64[0] = 0;
      uint64_t v7 = (__n128 *)((char *)v7 + 72);
      uint64_t v6 = (__n128 *)((char *)v6 + 72);
    }
    while ((unint64_t)v6 < a3);
  }
  *(void *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    uint64_t v11 = 0;
    uint64_t v12 = -8 * ((v4 - a4) >> 3);
    do
    {
      uint64_t v13 = v5 + v11;
      uint64_t v14 = v4 + v11;
      uint64_t v15 = *(void *)(v5 + v11 - 72);
      *(_DWORD *)(v14 - 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_DWORD *)(v5 + v11 - 64);
      *(void *)(v14 - 72) = v15;
      unint64_t v16 = (void **)(v4 + v11 - 56);
      if (*(char *)(v4 + v11 - 33) < 0) {
        operator delete(*v16);
      }
      long long v17 = *(_OWORD *)(v13 - 56);
      *(void *)(v4 + v11 - 40) = *(void *)(v13 - 40);
      *(_OWORD *)unint64_t v16 = v17;
      *(unsigned char *)(v13 - 33) = 0;
      *(unsigned char *)(v13 - 56) = 0;
      uint64_t v20 = *(void **)(v14 - 24);
      uint64_t v19 = (void *)(v14 - 24);
      unint64_t v18 = v20;
      *((_WORD *)v19 - std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_WORD *)(v13 - 32);
      if (v20)
      {
        *(void *)(v4 + v11 - 16) = v18;
        operator delete(v18);
        void *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
      }
      uint64_t v21 = (void *)(v13 - 24);
      __n128 result = *(__n128 *)(v13 - 24);
      *(__n128 *)uint64_t v19 = result;
      *(void *)(v4 + v11 - 8) = *(void *)(v5 + v11 - 8);
      void *v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
      v11 -= 72;
    }
    while (v12 != v11);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Prompt *,Prompt *,Prompt *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1 + 7;
    do
    {
      uint64_t v7 = v5 - 7;
      uint64_t v6 = *(v5 - 7);
      *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 - 12);
      *(void *)a3 = v6;
      std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v5 - 5));
      *(_WORD *)(a3 + 40) = *((_WORD *)v5 - 8);
      if ((uint64_t *)a3 != v5 - 7) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 48), (char *)*(v5 - 1), *v5, (*v5 - *(v5 - 1)) >> 2);
      }
      a3 += 72;
      v5 += 9;
    }
    while (v7 + 9 != a2);
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a1);
}

void *std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)a2[2], a2[3]);
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  __int16 v6 = *((_WORD *)a2 + 20);
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 48), (const void *)a2[6], a2[7], (a2[7] - a2[6]) >> 2);
}

void sub_20D34E0BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<Prompt>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Prompt>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v7;
  uint64_t v8 = a1[1];
  uint64_t v9 = a2[2];
  if (v8 != v3)
  {
    do
    {
      uint64_t v10 = *(void *)v3;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v3 + 8);
      *(void *)uint64_t v9 = v10;
      long long v11 = *(_OWORD *)(v3 + 16);
      *(void *)(v9 + 32) = *(void *)(v3 + 32);
      *(_OWORD *)(v9 + 16) = v11;
      *(void *)(v3 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v3 + 32) = 0;
      *(void *)(v3 + 16) = 0;
      *(_WORD *)(v9 + 40) = *(_WORD *)(v3 + 40);
      *(void *)(v9 + 56) = 0;
      *(void *)(v9 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v9 + 48) = 0;
      *(_OWORD *)(v9 + 48) = *(_OWORD *)(v3 + 48);
      *(void *)(v9 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(v3 + 64);
      *(void *)(v3 + 48) = 0;
      *(void *)(v3 + 56) = 0;
      *(void *)(v3 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      v9 += 72;
      v3 += 72;
    }
    while (v3 != v8);
    uint64_t v7 = a2[1];
  }
  a2[2] = v9;
  uint64_t v12 = *a1;
  *a1 = v7;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__split_buffer<Prompt>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::allocator<Prompt>::destroy[abi:ne180100](i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Prompt>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  if (a3 != a5)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a7 + v8;
      uint64_t v10 = a3 + v8;
      uint64_t v11 = *(void *)(a3 + v8 - 72);
      *(_DWORD *)(v9 - 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_DWORD *)(a3 + v8 - 64);
      *(void *)(v9 - 72) = v11;
      long long v12 = *(_OWORD *)(a3 + v8 - 56);
      *(void *)(v9 - 40) = *(void *)(a3 + v8 - 40);
      *(_OWORD *)(v9 - 56) = v12;
      *(void *)(v10 - 48) = 0;
      *(void *)(v10 - 40) = 0;
      *(void *)(v10 - 56) = 0;
      *(_WORD *)(v9 - 32) = *(_WORD *)(a3 + v8 - 32);
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      *(void *)(v9 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(_OWORD *)(v9 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(a3 + v8 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 + v8 - 8);
      *(void *)(v10 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v10 - 16) = 0;
      *(void *)(v10 - 8) = 0;
      v8 -= 72;
    }
    while (a3 + v8 != a5);
    return a7 + v8;
  }
  return result;
}

uint64_t std::__split_buffer<std::vector<MarkerRecord>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Unit>>(unint64_t a1)
{
  if (a1 >= 0x1642C8590B21643) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(184 * a1);
}

double std::allocator<Unit>::construct[abi:ne180100]<Unit>(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)a1 = 0x8000000080000000;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 64), &byte_20D5A22AE);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return result;
}

void sub_20D34E3F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*(void **)(v1 + 40));
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<Unit>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Unit>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>>((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Unit>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    std::allocator<Unit>::destroy[abi:ne180100](i - 184);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Unit>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    do
    {
      a7 -= 184;
      v9 -= 23;
      std::allocator<Unit>::construct[abi:ne180100]<Unit,Unit>(a7, v9);
    }
    while (v9 != a5);
  }
  return a7;
}

__n128 std::allocator<Unit>::construct[abi:ne180100]<Unit,Unit>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v2;
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 32) = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  long long v3 = *(_OWORD *)(a2 + 5);
  *(void *)(a1 + 56) = a2[7];
  *(_OWORD *)(a1 + 40) = v3;
  a2[6] = 0;
  a2[7] = 0;
  a2[5] = 0;
  long long v4 = *((_OWORD *)a2 + 4);
  *(void *)(a1 + 80) = a2[10];
  *(_OWORD *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v4;
  a2[9] = 0;
  a2[10] = 0;
  a2[8] = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  *(void *)(a1 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = a2[13];
  a2[11] = 0;
  a2[12] = 0;
  a2[13] = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(void *)(a1 + 128) = a2[16];
  a2[14] = 0;
  a2[15] = 0;
  a2[16] = 0;
  long long v5 = *(_OWORD *)(a2 + 17);
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
  *(_OWORD *)(a1 + 136) = v5;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  __n128 result = *((__n128 *)a2 + 10);
  *(__n128 *)(a1 + 160) = result;
  *(void *)(a1 + 176) = a2[22];
  a2[20] = 0;
  a2[21] = 0;
  a2[22] = 0;
  return result;
}

void *stringify_units(void *a1, int **a2)
{
  if (*a2 != a2[1])
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
    long long v3 = *a2;
    long long v4 = a2[1];
    long long v5 = &byte_20D5A22AE;
    if (*a2 == v4) {
      goto LABEL_18;
    }
    int v6 = -1000000;
    int v7 = -1000000;
    do
    {
      int v8 = v6;
      int v6 = *v3;
      if (*v3 < 0 || v6 != v8 + 1)
      {
        if (v7 <= -1000000)
        {
          int v7 = *v3;
        }
        else
        {
          size_t v9 = strlen(v5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v9);
          if (v8 > v7)
          {
            uint64_t v10 = (void *)std::ostream::operator<<();
            v18[0] = 58;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v18, 1);
          }
          std::ostream::operator<<();
          int v7 = v6;
          long long v5 = ",";
        }
      }
      ++v3;
    }
    while (v3 != v4);
    if (v7 <= -1000001) {
      goto LABEL_20;
    }
    if (v6 <= v7)
    {
LABEL_18:
      size_t v14 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v14);
    }
    else
    {
      size_t v11 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v11);
      long long v12 = (void *)std::ostream::operator<<();
      v18[0] = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v18, 1);
    }
    std::ostream::operator<<();
LABEL_20:
    std::stringbuf::str();
    v15[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v15[1] = MEMORY[0x263F8C318] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x210559500](&v17);
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
}

void sub_20D34E8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<std::shared_ptr<std::vector<Unit>>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206778;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<std::vector<Unit>>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206778;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::vector<std::pair<int,MarkerRecord>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0) {
          operator delete(*(v4 - 6));
        }
        v4 -= 8;
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Unit::~Unit(Unit *this)
{
  long long v5 = (void **)((char *)this + 160);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  long long v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
}

__n128 std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(__n128 **)(a1 + 8);
  v4->n128_u64[0] = *(void *)a2;
  long long v5 = (std::string *)&v4->n128_i8[8];
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    v4[1].n128_u64[1] = *(void *)(a2 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  __n128 result = *(__n128 *)(a2 + 32);
  v4[3].n128_u16[0] = *(_WORD *)(a2 + 48);
  v4[2] = result;
  *(void *)(a1 + 8) = (char *)v4 + 56;
  return result;
}

void sub_20D34EB3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v7 = 0x492492492492492;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v25 = v6;
  if (v7)
  {
    size_t v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v7);
  }
  else
  {
    size_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = &v9[56 * v2];
  unint64_t v22 = v9;
  *(void *)&long long v23 = v10;
  size_t v11 = &v9[56 * v8];
  *((void *)&v23 + 1) = v10;
  uint64_t v24 = v11;
  *(void *)uint64_t v10 = *(void *)a2;
  long long v12 = (std::string *)(v10 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
    size_t v14 = (char *)*((void *)&v23 + 1);
    uint64_t v10 = (char *)v23;
    size_t v11 = v24;
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 8);
    *((void *)v10 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    size_t v14 = &v9[56 * v2];
  }
  uint64_t v15 = &v9[56 * v2];
  long long v16 = *(_OWORD *)(a2 + 32);
  *((_WORD *)v15 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_WORD *)(a2 + 48);
  *((_OWORD *)v15 + 2) = v16;
  uint64_t v17 = (uint64_t)(v14 + 56);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MarkerRecord>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>>(v6, a1[1], a1[1], *a1, *a1, (uint64_t)v10, (uint64_t)v10);
  long long v18 = *(_OWORD *)a1;
  *a1 = v19;
  a1[1] = v17;
  long long v23 = v18;
  uint64_t v20 = a1[2];
  a1[2] = (uint64_t)v11;
  uint64_t v24 = (char *)v20;
  unint64_t v22 = (char *)v18;
  std::__split_buffer<MarkerRecord>::~__split_buffer((uint64_t)&v22);
  return v17;
}

void sub_20D34ECC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<MarkerRecord>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<MarkerRecord>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 56;
      *(void *)(a1 + 16) = v2 - 56;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MarkerRecord>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a3 != a5)
  {
    uint64_t v8 = *(void *)(a3 - 56);
    a3 -= 56;
    *(void *)(a7 - 56) = v8;
    a7 -= 56;
    long long v9 = *(_OWORD *)(a3 + 8);
    *(void *)(a7 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(a3 + 24);
    *(_OWORD *)(a7 + 8) = v9;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *(void *)(a3 + 8) = 0;
    __n128 result = *(__n128 *)(a3 + 32);
    *(_WORD *)(a7 + 48) = *(_WORD *)(a3 + 48);
    *(__n128 *)(a7 + 32) = result;
  }
  return result;
}

void Unit::Unit(Unit *this, const Unit *a2)
{
  uint64_t v4 = *(void *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *(void *)this = v4;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 2, *((const void **)a2 + 2), *((void *)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 2);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 4);
    *((void *)this + 10) = *((void *)a2 + 10);
    *((_OWORD *)this + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v6;
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 11, *((const void **)a2 + 11), *((void *)a2 + 12), (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 2);
  *((void *)this + 1std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 14, *((const void **)a2 + 14), *((void *)a2 + 15), (uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 2);
  long long v7 = *(_OWORD *)((char *)a2 + 136);
  int v8 = *((_DWORD *)a2 + 38);
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 38) = v8;
  *(_OWORD *)((char *)this + 136) = v7;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((void *)this + 20, *((void *)a2 + 20), *((void *)a2 + 21), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 3));
}

void sub_20D34EED4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<Unit>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 - a4;
  unint64_t v8 = a2 + v6 - a4;
  if (v8 >= a3)
  {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v10 = (uint64_t *)(a2 + v6 - a4);
    uint64_t v11 = *(void *)(a1 + 8);
    do
    {
      result.n128_u64[0] = std::allocator<Unit>::construct[abi:ne180100]<Unit,Unit>(v11, v10).n128_u64[0];
      v10 += 23;
      v11 += 184;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v11;
  if (v6 != a4)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v8 + v13;
      uint64_t v15 = v6 + v13;
      long long v16 = *(void **)(v8 + v13 - 184);
      long long v18 = (void **)(v6 + v13 - 168);
      uint64_t v17 = *v18;
      *((_DWORD *)v18 - 2) = *(_DWORD *)(v8 + v13 - 176);
      *(v18 - 2) = v16;
      if (v17)
      {
        *(void *)(v15 - 160) = v17;
        operator delete(v17);
        void *v18 = 0;
        *(void *)(v6 + v13 - 160) = 0;
        *(void *)(v6 + v13 - 152) = 0;
      }
      uint64_t v19 = (void *)(v14 - 168);
      *(_OWORD *)long long v18 = *(_OWORD *)(v14 - 168);
      *(void *)(v15 - 152) = *(void *)(v14 - 152);
      void *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      uint64_t v20 = (void **)(v15 - 144);
      if (*(char *)(v15 - 121) < 0) {
        operator delete(*v20);
      }
      uint64_t v21 = (long long *)(v14 - 144);
      uint64_t v22 = v8 + v13;
      long long v23 = *v21;
      *(void *)(v15 - 128) = *((void *)v21 + 2);
      *(_OWORD *)uint64_t v20 = v23;
      *(unsigned char *)(v8 + v13 - 121) = 0;
      *(unsigned char *)uint64_t v21 = 0;
      uint64_t v24 = v6 + v13;
      uint64_t v25 = (void **)(v6 + v13 - 120);
      if (*(char *)(v6 + v13 - 97) < 0) {
        operator delete(*v25);
      }
      long long v26 = *(_OWORD *)(v22 - 120);
      *(void *)(v6 + v13 - 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(v22 - 104);
      *(_OWORD *)uint64_t v25 = v26;
      *(unsigned char *)(v22 - 97) = 0;
      *(unsigned char *)(v22 - 120) = 0;
      uint64_t v29 = *(void **)(v24 - 96);
      uint64_t v28 = (void *)(v24 - 96);
      uint64_t v27 = v29;
      if (v29)
      {
        *(void *)(v6 + v13 - 88) = v27;
        operator delete(v27);
        void *v28 = 0;
        v28[1] = 0;
        v28[2] = 0;
      }
      uint64_t v30 = (void *)(v22 - 96);
      *(_OWORD *)uint64_t v28 = *(_OWORD *)(v22 - 96);
      uint64_t v31 = v8 + v13;
      uint64_t v32 = v6 + v13;
      *(void *)(v6 + v13 - 80) = *(void *)(v8 + v13 - 80);
      void *v30 = 0;
      v30[1] = 0;
      v30[2] = 0;
      unsigned int v34 = (void **)(v6 + v13 - 72);
      unsigned int v33 = *v34;
      if (*v34)
      {
        *(void *)(v32 - 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v33;
        operator delete(v33);
        *unsigned int v34 = 0;
        *(void *)(v6 + v13 - 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
        *(void *)(v6 + v13 - 56) = 0;
      }
      uint64_t v35 = (void *)(v31 - 72);
      *(_OWORD *)unsigned int v34 = *(_OWORD *)(v31 - 72);
      *(void *)(v32 - 56) = *(void *)(v31 - 56);
      *uint64_t v35 = 0;
      v35[1] = 0;
      v35[2] = 0;
      long long v36 = *(_OWORD *)(v31 - 48);
      *(_DWORD *)(v32 - 32) = *(_DWORD *)(v31 - 32);
      *(_OWORD *)(v32 - 48) = v36;
      std::vector<MarkerRecord>::__vdeallocate((uint64_t *)(v32 - 24));
      __n128 result = *(__n128 *)(v31 - 24);
      *(__n128 *)(v32 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = result;
      *(void *)(v32 - 8) = *(void *)(v31 - 8);
      *(void *)(v31 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v31 - 16) = 0;
      *(void *)(v31 - 8) = 0;
      v13 -= 184;
    }
    while (-8 * (v7 >> 3) != v13);
  }
  return result;
}

uint64_t Unit::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v3;
  if ((uint64_t *)a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a1 + 40));
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a1 + 64));
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), (char *)a2[2], a2[3], (a2[3] - a2[2]) >> 2);
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 5));
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 8));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 88), (char *)a2[11], a2[12], (a2[12] - a2[11]) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 112), (char *)a2[14], a2[15], (a2[15] - a2[14]) >> 2);
    long long v5 = *(_OWORD *)(a2 + 17);
    *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
    *(_OWORD *)(a1 + 136) = v5;
    std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)(a1 + 160), a2[20], a2[21], 0x6DB6DB6DB6DB6DB7 * ((a2[21] - a2[20]) >> 3));
  }
  return a1;
}

uint64_t std::vector<Unit>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Unit>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>,std::reverse_iterator<Unit*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (uint64_t *)*a1, v6, v6);
  a2[1] = v7;
  unint64_t v8 = (uint64_t *)a1[1];
  uint64_t v9 = a2[2];
  if (v8 != v3)
  {
    do
    {
      std::allocator<Unit>::construct[abi:ne180100]<Unit,Unit>(v9, v3);
      v3 += 23;
      v9 += 184;
    }
    while (v3 != v8);
    uint64_t v7 = a2[1];
  }
  a2[2] = v9;
  uint64_t v10 = *a1;
  *a1 = v7;
  a2[1] = v10;
  uint64_t v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return v6;
}

uint64_t std::pair<int,MarkerRecord>::pair[abi:ne180100]<int &,MarkerRecord&,0>(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = *(void *)a3;
  long long v5 = (std::string *)(a1 + 16);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = *(_OWORD *)(a3 + 32);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a3 + 48);
  *(_OWORD *)(a1 + 40) = v7;
  return a1;
}

uint64_t std::__split_buffer<std::pair<int,MarkerRecord>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<std::vector<Unit>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<Unit>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<std::vector<Unit>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2197A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<Unit>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2197A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ViterbiStream::~ViterbiStream(ViterbiStream *this)
{
  *(void *)this = off_26C200930;
  uint64_t v4 = (void **)((char *)this + 328);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 304);
  std::vector<std::vector<MarkerRecord>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = off_26C200930;
  uint64_t v4 = (void **)((char *)this + 328);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 304);
  std::vector<std::vector<MarkerRecord>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  Module::~Module(this);
}

void std::vector<std::vector<MarkerRecord>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        long long v6 = v4;
        std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  long long v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    uint64_t v19 = v16;
LABEL_17:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *uint64_t v12 = &v9[v17];
  return result;
}

void SharedObjectPool::get<Database>(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    SharedObjectPool::get<VoiceConfig>(&v14, (long long **)a2);
    uint64_t v5 = v14;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void))(*(void *)v14 + 16))(v12, v14, 1768842360, 0);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(&v11, v5, 1937011316, 2);
    long long v6 = (char *)operator new(0x1E8uLL);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)long long v6 = off_26C218E08;
    *((void *)v6 + 3) = &off_26C205BC8;
    uint64_t v7 = v12[1];
    *((void *)v6 + 5) = v12[0];
    *((void *)v6 + 6) = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    long long v8 = v13;
    *((void *)v6 + 31) = 0;
    *(_OWORD *)(v6 + 56) = v8;
    *((void *)v6 + 10) = 0;
    *((void *)v6 + 32) = 0;
    *((void *)v6 + 33) = 0;
    operator new();
  }
  uint64_t v10 = *(void *)(*(void *)v9 + 16);
  *a1 = *(void *)(*(void *)v9 + 8);
  a1[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D35084C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::recursive_mutex *a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a21);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a22);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v33);
  if (*(char *)(v32 + 327) < 0) {
    operator delete(*(void **)(v32 + 304));
  }
  if (*(char *)(v32 + 303) < 0) {
    operator delete(*a20);
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a14);
  uint64_t v35 = *(void *)(v32 + 80);
  *(void *)(v32 + 80) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  long long v36 = *(std::__shared_weak_count **)(v32 + 48);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v32);
  operator delete(v37);
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  std::recursive_mutex::unlock(a19);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<std::shared_ptr<Database>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2066D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<Database>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2066D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<UnitViterbiProcessor>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &off_26C202D28;
  uint64_t v4 = (void **)(a1 + 776);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 752);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 728);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  UnitFeature::~UnitFeature((UnitFeature *)(a1 + 120));
  uint64_t v4 = (void **)(a1 + 96);
  std::vector<Unit>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
}

void UnitFeature::~UnitFeature(UnitFeature *this)
{
  uint64_t v2 = (void *)*((void *)this + 70);
  if (v2)
  {
    *((void *)this + 71) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 67);
  if (v3)
  {
    *((void *)this + 68) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 64);
  if (v4)
  {
    *((void *)this + 65) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 61);
  if (v5)
  {
    *((void *)this + 62) = v5;
    operator delete(v5);
  }
  long long v6 = (void *)*((void *)this + 54);
  if (v6)
  {
    *((void *)this + 55) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 51);
  if (v7)
  {
    *((void *)this + 52) = v7;
    operator delete(v7);
  }
  long long v8 = (void *)*((void *)this + 48);
  if (v8)
  {
    *((void *)this + 49) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 45);
  if (v9)
  {
    *((void *)this + 46) = v9;
    operator delete(v9);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(*((void **)this + 42));
  }
  if (*((char *)this + 335) < 0) {
    operator delete(*((void **)this + 39));
  }
  if (*((char *)this + 311) < 0) {
    operator delete(*((void **)this + 36));
  }
  if (*((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }
  if (*((char *)this + 263) < 0) {
    operator delete(*((void **)this + 30));
  }
  uint64_t v10 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  uint64_t v10 = (void **)((char *)this + 72);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::__shared_ptr_emplace<UnitViterbiProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<UnitViterbiProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL NeuralTTSUtils::has_neural_fallback_connection(uint64_t a1)
{
  SharedObjectPool::get<GryphonConfig>(&v8, a1);
  uint64_t v1 = v8;
  std::string::basic_string[abi:ne180100]<0>(__p, "neural_fallback_connection");
  GryphonConfig::params_for_connection((uint64_t)v6, v1, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  int v2 = v6[0];
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v6[0]);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v2 == 1;
}

void sub_20D350E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  size_t v17 = *(std::__shared_weak_count **)(v15 - 24);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void SharedObjectPool::get<GryphonConfig>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  uint64_t v5 = a2 + 32;
  {
    SharedObjectPool::get<VoiceConfig>(&v16, (long long **)a2);
    (*((void (**)(uint64_t *__return_ptr))*v16 + 9))(&v14);
    long long v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_26C220090;
    v6[1].__shared_owners_ = 0;
    LOBYTE(v6[1].__vftable) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v18, (uint64_t)&v14);
    int v7 = LOBYTE(v6[1].__vftable);
    LOBYTE(v6[1].__vftable) = (_BYTE)v18;
    LOBYTE(v18) = v7;
    uint64_t shared_owners = v6[1].__shared_owners_;
    v6[1].__shared_owners_ = v19;
    *(void *)&long long v19 = shared_owners;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v19, v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    long long v18 = &v16;
    if (!v9) {
      operator new();
    }
    long long v18 = (char ***)off_26C21FFE8;
    *(void *)&long long v19 = v6 + 1;
    *((void *)&v19 + 1) = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v10 = v19;
    long long v19 = 0uLL;
    uint64_t v11 = *(std::__shared_weak_count **)(v9 + 16);
    *(_OWORD *)(v9 + 8) = v10;
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      long long v18 = (char ***)off_26C21FFE8;
      if (*((void *)&v19 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v13 = *(void *)(*(void *)v12 + 16);
  *a1 = *(void *)(*(void *)v12 + 8);
  a1[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D351144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v15, *(unsigned __int8 *)(v14 + 24));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v14);
  operator delete(v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a11, a10);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<std::shared_ptr<GryphonConfig>>::~ItemHolder(void *a1)
{
  *a1 = off_26C21FFE8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<GryphonConfig>>::~ItemHolder(void *a1)
{
  *a1 = off_26C21FFE8;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

BOOL NeuralTTSUtils::is_ane_available(NeuralTTSUtils *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "neuralModelType");
  InternalSettings::get_string_for_key(v7, (uint64_t *)__p);
  if (v8 < 0)
  {
    BOOL v2 = v7[1] == (void *)3 && *(_WORD *)v7[0] == 28257 && *((unsigned char *)v7[0] + 2) == 101;
    operator delete(v7[0]);
  }
  else
  {
    BOOL v2 = v8 == 3 && LOWORD(v7[0]) == 28257 && BYTE2(v7[0]) == 101;
  }
  if (v6 < 0)
  {
    operator delete(__p[0]);
    if (v2) {
      return 1;
    }
  }
  else if (v2)
  {
    return 1;
  }
  if (NeuralTTSUtils::is_ane_available(void)::onceToken != -1) {
    dispatch_once(&NeuralTTSUtils::is_ane_available(void)::onceToken, &__block_literal_global_1570);
  }
  return NeuralTTSUtils::is_ane_available(void)::is_ane_available != 0;
}

void sub_20D351370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14NeuralTTSUtils16is_ane_availableEv_block_invoke()
{
  int v0 = MGGetBoolAnswer();
  NeuralTTSUtils::is_ane_available(void)::is_ane_available = v0;
  if (v0)
  {
    CFStringRef v1 = (const __CFString *)MGGetStringAnswer();
    if (CFEqual(v1, @"t8006")
      || CFStringHasPrefix(v1, @"vmapple")
      || CFStringHasPrefix(v1, @"vminternal"))
    {
      NeuralTTSUtils::is_ane_available(void)::is_ane_available = 0;
    }
    CFRelease(v1);
  }
}

BOOL NeuralTTSUtils::is_amx_available(NeuralTTSUtils *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "neuralModelType");
  InternalSettings::get_string_for_key(&v10, (uint64_t *)__p);
  if (v12 < 0)
  {
    BOOL v2 = v11 == 3 && *(_WORD *)v10 == 28001 && v10[2] == 120;
    operator delete(v10);
  }
  else
  {
    BOOL v2 = v12 == 3 && (unsigned __int16)v10 == 28001 && BYTE2(v10) == 120;
  }
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v2) {
      return 1;
    }
  }
  else if (v2)
  {
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "neuralModelType");
  InternalSettings::get_string_for_key(&v10, (uint64_t *)__p);
  if (v12 < 0)
  {
    BOOL v6 = v11 == 3 && *(_WORD *)v10 == 28257 && v10[2] == 101;
    operator delete(v10);
  }
  else
  {
    BOOL v6 = v12 == 3 && (unsigned __int16)v10 == 28257 && BYTE2(v10) == 101;
  }
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  return (_get_cpu_capabilities() & 0x78000000) != 0;
}

void sub_20D3515B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NeuralTTSUtils::is_gpu_available(NeuralTTSUtils *this)
{
  return 0;
}

BOOL NeuralTTSUtils::has_ota_ane_model(NeuralTTSUtils *this, const char *a2)
{
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v19, (char *)this);
  BOOL v2 = v20;
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v17, v19, v20);
  SharedObjectPool::get<GryphonConfig>(&v15, v17);
  uint64_t v3 = v15;
  std::string::basic_string[abi:ne180100]<0>(__p, "espresso_wavernn");
  GryphonConfig::params_for_module((uint64_t)v13, v3, (uint64_t)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "espresso_wavernn_fallback");
  GryphonConfig::params_for_module((uint64_t)v9, v3, (uint64_t)v7);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  uint64_t v4 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (EspressoWaveRNNModule::has_ota_ane_model(v13))
  {
    BOOL has_ota_ane_model = 1;
    if (!v4) {
      goto LABEL_15;
    }
LABEL_14:
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    goto LABEL_15;
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL has_ota_ane_model = EspressoWaveRNNModule::has_ota_ane_model(v9);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    goto LABEL_14;
  }
LABEL_15:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return has_ota_ane_model;
}

void sub_20D351734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, unsigned __int8 a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,unsigned __int8 a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  uint64_t v29 = v27;
  if (v29)
  {
    uint64_t v31 = v29;
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a16, a15);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a24, a23);
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  uint64_t v32 = *(std::__shared_weak_count **)(v28 - 56);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(void *a1, char *a2)
{
  uint64_t v4 = (std::string *)operator new(0x48uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C215368;
  std::string::basic_string[abi:ne180100]<0>(v7, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  Environment::Environment(v4 + 1, (long long *)v7, (long long *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *a1 = v4 + 1;
  a1[1] = v4;
}

void sub_20D3518B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  char v6 = operator new(0x90uLL);
  int v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = off_26C216600;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    v6[4] = a3;
    v6[3] = a2;
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    v6[4] = 0;
    v6[3] = a2;
  }
  unsigned char v6[8] = 0;
  v6[5] = 0;
  v6[6] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  MEMORY[0x210559270](v6 + 10);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v7 + 3;
  a1[1] = v7;
}

void sub_20D3519C4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(*(void **)(v1 + 64));
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  if (*v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SharedObjectPool>::__on_zero_shared(uint64_t a1)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 80));
  std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(*(void **)(a1 + 64));
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<SharedObjectPool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SharedObjectPool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Environment>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0)
  {
    BOOL v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<Environment>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Environment>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void NeuralTTSUtils::compile_ane_model(NeuralTTSUtils *this, const char *a2)
{
  if (NeuralTTSUtils::is_amx_available(this))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int64x2_t buf = 0;
      _os_log_impl(&dword_20CD80000, v3, OS_LOG_TYPE_DEFAULT, "AMX is available. Skip compiling ANE model.", buf, 2u);
    }
    Diagnostics::log(5, "AMX is available. Skip compiling ANE model.", v4);
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(buf, (char *)this);
    uint64_t v5 = v23;
    std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v20, *(uint64_t *)buf, v23);
    char v6 = v20;
    SharedObjectPool::get<GryphonConfig>(&v18, (uint64_t)v20);
    int v7 = v18;
    std::string::basic_string[abi:ne180100]<0>(__p, "espresso_wavernn");
    GryphonConfig::params_for_module((uint64_t)v16, v7, (uint64_t)__p);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v16[0])
    {
      char v8 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      EspressoWaveRNNModule::compile_ane_model(v16, v6);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v10, "espresso_wavernn_fallback");
    GryphonConfig::params_for_module((uint64_t)v12, v7, (uint64_t)v10);
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    if (v12[0])
    {
      char v9 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      EspressoWaveRNNModule::compile_ane_model(v12, v6);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_20D351DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, unsigned __int8 a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,unsigned __int8 a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a16, a15);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a24, a23);
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v28 - 56);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

uint64_t NeuralTTSUtils::is_ane_model_compiled(NeuralTTSUtils *this, const char *a2)
{
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v30, (char *)this);
  BOOL v2 = v31;
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v28, v30, v31);
  uint64_t v3 = v28;
  SharedObjectPool::get<GryphonConfig>(&v26, (uint64_t)v28);
  uint64_t v4 = v26;
  std::string::basic_string[abi:ne180100]<0>(__p, "espresso_wavernn");
  GryphonConfig::params_for_module((uint64_t)&v24, v4, (uint64_t)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "espresso_wavernn_fallback");
  GryphonConfig::params_for_module((uint64_t)&v20, v4, (uint64_t)v18);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (!(_BYTE)v24) {
    goto LABEL_16;
  }
  uint64_t v5 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL has_ota_ane_model = EspressoWaveRNNModule::has_ota_ane_model((unsigned __int8 *)&v24);
  BOOL v7 = has_ota_ane_model;
  if (!v5)
  {
    if (has_ota_ane_model)
    {
      long long v16 = v3;
      uint64_t v17 = 0;
      goto LABEL_13;
    }
LABEL_16:
    int v9 = 0;
    int is_ane_model_compiled = 1;
    goto LABEL_17;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  if (!v7) {
    goto LABEL_16;
  }
  long long v16 = v3;
  uint64_t v17 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_13:
  int is_ane_model_compiled = EspressoWaveRNNModule::is_ane_model_compiled(&v24, &v16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v9 = 1;
LABEL_17:
  if (!(_BYTE)v20) {
    goto LABEL_29;
  }
  long long v10 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v11 = EspressoWaveRNNModule::has_ota_ane_model((unsigned __int8 *)&v20);
  int v12 = v11;
  if (!v10)
  {
    if ((v11 & is_ane_model_compiled) == 1)
    {
      uint64_t v14 = v3;
      char v15 = 0;
      goto LABEL_25;
    }
LABEL_28:
    v9 |= v12;
    is_ane_model_compiled &= ~v12;
    goto LABEL_29;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if ((v12 & is_ane_model_compiled & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v14 = v3;
  char v15 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_25:
  int is_ane_model_compiled = EspressoWaveRNNModule::is_ane_model_compiled(&v20, &v14);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  int v9 = 1;
LABEL_29:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return v9 & is_ane_model_compiled;
}

void sub_20D352078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, unsigned __int8 a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,unsigned __int8 a27,uint64_t *a28)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a20, a19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a28, a27);
  uint64_t v32 = *(std::__shared_weak_count **)(v30 - 88);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  uint64_t v33 = *(std::__shared_weak_count **)(v30 - 72);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(a1);
}

BOOL NeuralTTSUtils::is_neural_voice_ready(NeuralTTSUtils *this, const char *a2)
{
  if (NeuralTTSUtils::is_amx_available(this)) {
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "neuralModelType");
  InternalSettings::get_string_for_key(&v36, (uint64_t *)&__p);
  if (SHIBYTE(v38) < 0)
  {
    BOOL v4 = v37 == (uint64_t *)3 && *(_WORD *)v36 == 28001 && v36[2] == 120;
    operator delete(v36);
  }
  else
  {
    BOOL v4 = SHIBYTE(v38) == 3 && (unsigned __int16)v36 == 28001 && BYTE2(v36) == 120;
  }
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__p);
    if (v4) {
      return 1;
    }
  }
  else if (v4)
  {
    return 1;
  }
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v29, (char *)this);
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v27, v29, v30);
  SharedObjectPool::get<GryphonConfig>(&v25, v27);
  char v8 = v25;
  std::string::basic_string[abi:ne180100]<0>(v21, "espresso_wavernn");
  GryphonConfig::params_for_module((uint64_t)v23, v8, (uint64_t)v21);
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  int v9 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v36 = v23;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  unint64_t v40 = 0x8000000000000000;
  int v10 = v23[0];
  if (v23[0] == 1)
  {
    int v12 = v24 + 1;
    uint64_t v13 = v24[1];
    if (!v13) {
      goto LABEL_39;
    }
    uint64_t v14 = v24 + 1;
    do
    {
      int v15 = std::string::compare((const std::string *)(v13 + 32), "preinstalled_model_path");
      long long v16 = (uint64_t *)(v13 + 8);
      if (v15 >= 0)
      {
        long long v16 = (uint64_t *)v13;
        uint64_t v14 = (uint64_t *)v13;
      }
      uint64_t v13 = *v16;
    }
    while (*v16);
    if (v14 == v12 || std::string::compare((const std::string *)(v14 + 4), "preinstalled_model_path") >= 1) {
LABEL_39:
    }
      uint64_t v14 = v12;
    uint64_t v37 = v14;
    int v10 = v23[0];
  }
  else
  {
    if (v23[0] == 2)
    {
      BOOL v11 = v24;
      uint64_t v38 = v24[1];
      std::string __p = v23;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      unint64_t v35 = 0x8000000000000000;
      goto LABEL_45;
    }
    unint64_t v40 = 1;
  }
  std::string __p = v23;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  unint64_t v35 = 0x8000000000000000;
  if (v10 == 1)
  {
    uint64_t v32 = v24 + 1;
    goto LABEL_48;
  }
  if (v10 != 2)
  {
    unint64_t v35 = 1;
    goto LABEL_48;
  }
  BOOL v11 = v24;
LABEL_45:
  uint64_t v33 = v11[1];
LABEL_48:
  BOOL v18 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v36, (unsigned __int8 **)&__p);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v18 && (NeuralTTSUtils::is_ane_model_compiled(this, v17) & 1) == 0)
  {
    uint64_t v19 = v27;
    uint64_t v20 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL has_neural_fallback_connection = NeuralTTSUtils::has_neural_fallback_connection(v19);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  else
  {
    BOOL has_neural_fallback_connection = 1;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  return has_neural_fallback_connection;
}

void sub_20D352428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a17, a16);
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(a1);
}

BOOL NeuralTTSUtils::is_ane_only_platform(NeuralTTSUtils *this)
{
  BOOL result = NeuralTTSUtils::is_ane_available(this);
  if (result) {
    return !NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)result);
  }
  return result;
}

uint64_t NeuralTTSUtils::is_h12_platform(NeuralTTSUtils *this)
{
  if (NeuralTTSUtils::is_h12_platform(void)::onceToken != -1) {
    dispatch_once(&NeuralTTSUtils::is_h12_platform(void)::onceToken, &__block_literal_global_23);
  }
  return NeuralTTSUtils::is_h12_platform(void)::isH12Platform;
}

void ___ZN14NeuralTTSUtils15is_h12_platformEv_block_invoke()
{
  CFStringRef v0 = (const __CFString *)MGGetStringAnswer();
  if (v0)
  {
    CFStringRef v1 = v0;
    NeuralTTSUtils::is_h12_platform(void)::isH12Platform = CFEqual(v0, @"t8030");
    CFRelease(v1);
  }
  else
  {
    NeuralTTSUtils::is_h12_platform(void)::isH12Platform = 0;
  }
}

BOOL NeuralTTSUtils::is_neural_tts_platform(NeuralTTSUtils *this)
{
  BOOL is_ane_available = NeuralTTSUtils::is_ane_available(this);
  if (is_ane_available) {
    return 1;
  }
  return NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)is_ane_available);
}

uint64_t NeuralTTSUtils::is_natural_tts_platform(NeuralTTSUtils *this)
{
  if (NeuralTTSUtils::is_natural_tts_platform(void)::onceToken != -1) {
    dispatch_once(&NeuralTTSUtils::is_natural_tts_platform(void)::onceToken, &__block_literal_global_29);
  }
  return NeuralTTSUtils::is_natural_tts_platform(void)::isNaturalTTSPlatform;
}

uint64_t ___ZN14NeuralTTSUtils23is_natural_tts_platformEv_block_invoke()
{
  std::string::basic_string[abi:ne180100]<0>(__p, "allowNaturalVoice");
  char BOOL_for_key = InternalSettings::get_BOOL_for_key((uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = MGGetBoolAnswer();
  NeuralTTSUtils::is_natural_tts_platform(void)::isNaturalTTSPlatform = result | BOOL_for_key;
  return result;
}

void sub_20D352694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NeuralTTSUtils::check_fallback_conditions(NeuralTTSUtils *this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  CFStringRef v1 = (NSProcessInfoObjCBridge *)NSProcessInfoObjCBridge::low_power_mode_enabled(this);
  unsigned int thermal_state = NSProcessInfoObjCBridge::get_thermal_state(v1);
  std::string::basic_string[abi:ne180100]<0>(buf, "ignoreThermalState");
  int BOOL_for_key = InternalSettings::get_BOOL_for_key((uint64_t *)buf);
  int v4 = BOOL_for_key;
  if (v19 < 0)
  {
    operator delete(*(void **)buf);
    if (v4) {
      goto LABEL_3;
    }
  }
  else if (BOOL_for_key)
  {
LABEL_3:
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int64x2_t buf = 134218240;
      *(void *)&uint8_t buf[4] = thermal_state;
      __int16 v17 = 1024;
      int v18 = (int)v1;
      _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEFAULT, "ignoring thermal state: %ld, low power mode: %{BOOL}d", buf, 0x12u);
    }
    Diagnostics::log(5, "ignoring thermal state: %ld, low power mode: %{BOOL}d", v6, thermal_state, v1);
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "forceNeuralThermalState");
  int v7 = InternalSettings::get_BOOL_for_key((uint64_t *)buf);
  int v8 = v7;
  if (v19 < 0)
  {
    operator delete(*(void **)buf);
    if (v8) {
      goto LABEL_10;
    }
  }
  else if (v7)
  {
LABEL_10:
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int64x2_t buf = 0;
      _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_DEFAULT, "force neural critical thermal state", buf, 2u);
    }
    BOOL v11 = "force neural critical thermal state";
    goto LABEL_30;
  }
  if ((int)thermal_state < 2)
  {
    if (!v1) {
      return 0;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int64x2_t buf = 0;
      _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_DEFAULT, "switching to fallback pipeline due to low power mode", buf, 2u);
    }
    BOOL v11 = "switching to fallback pipeline due to low power mode";
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int64x2_t buf = 134217984;
      *(void *)&uint8_t buf[4] = thermal_state;
      _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_DEFAULT, "switching to fallback pipeline due to thermal state: %ld", buf, 0xCu);
    }
    uint64_t v15 = thermal_state;
    BOOL v11 = "switching to fallback pipeline due to thermal state: %ld";
  }
LABEL_30:
  Diagnostics::log(5, v11, v10, v15);
  return 1;
}

void sub_20D3529B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL NeuralTTSUtils::is_watch_platform(NeuralTTSUtils *this)
{
  return MGGetSInt32Answer() == 6;
}

BOOL NeuralTTSUtils::is_homepod_platform(NeuralTTSUtils *this)
{
  return MGGetSInt32Answer() == 7;
}

BOOL NeuralTTSUtils::check_thermal_critical_conditions(NeuralTTSUtils *this)
{
  return NeuralTTSUtils::check_thermal_limit((NeuralTTSUtils *)2);
}

BOOL NeuralTTSUtils::check_thermal_limit(NeuralTTSUtils *this)
{
  int v1 = (int)this;
  uint64_t v16 = *MEMORY[0x263EF8340];
  BOOL v2 = (NSProcessInfoObjCBridge *)NSProcessInfoObjCBridge::low_power_mode_enabled(this);
  uint64_t thermal_state = NSProcessInfoObjCBridge::get_thermal_state(v2);
  std::string::basic_string[abi:ne180100]<0>(buf, "ignoreThermalState");
  int BOOL_for_key = InternalSettings::get_BOOL_for_key((uint64_t *)buf);
  int v5 = BOOL_for_key;
  if (v15 < 0)
  {
    operator delete(*(void **)buf);
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (BOOL_for_key)
  {
LABEL_3:
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    char v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int64x2_t buf = 134217984;
      *(void *)&uint8_t buf[4] = thermal_state;
      _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEFAULT, "ignoring neural thermal state: %ld", buf, 0xCu);
    }
    Diagnostics::log(5, "ignoring neural thermal state: %ld", v7, thermal_state);
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "forceNeuralThermalState");
  int v8 = InternalSettings::get_BOOL_for_key((uint64_t *)buf);
  if (v15 < 0) {
    operator delete(*(void **)buf);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  BOOL v10 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      *(_WORD *)int64x2_t buf = 0;
      _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_DEFAULT, "force neural critical thermal state", buf, 2u);
    }
    Diagnostics::log(5, "force neural critical thermal state", v11);
    return 1;
  }
  if (v10)
  {
    *(_DWORD *)int64x2_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = thermal_state;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v2;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_DEFAULT, "Current thermal state: %d, low power mode: %d", buf, 0xEu);
  }
  Diagnostics::log(5, "Current thermal state: %d, low power mode: %d", v11, thermal_state, v2);
  if ((int)thermal_state >= v1) {
    return 1;
  }
  if (v2)
  {
    if (NeuralTTSUtils::is_h12_platform(void)::onceToken != -1) {
      dispatch_once(&NeuralTTSUtils::is_h12_platform(void)::onceToken, &__block_literal_global_23);
    }
    if (NeuralTTSUtils::is_h12_platform(void)::isH12Platform || (MGGetSInt32Answer() & 0xFFFFFFFE) == 6) {
      return 1;
    }
  }
  if (NeuralTTSUtils::is_h12_platform(void)::onceToken != -1) {
    dispatch_once(&NeuralTTSUtils::is_h12_platform(void)::onceToken, &__block_literal_global_23);
  }
  if (NeuralTTSUtils::is_h12_platform(void)::isH12Platform) {
    BOOL v13 = (int)thermal_state <= 1;
  }
  else {
    BOOL v13 = 1;
  }
  return !v13;
}

void sub_20D352D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL NeuralTTSUtils::has_compact_neural_fallback(NeuralTTSUtils *this, const char *a2)
{
  uint64_t v3 = MGGetSInt32Answer();
  if ((v3 & 0xFFFFFFFE) != 6)
  {
    BOOL is_ane_available = NeuralTTSUtils::is_ane_available((NeuralTTSUtils *)v3);
    if (is_ane_available && !NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)is_ane_available)) {
      return 0;
    }
  }
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v21, (char *)this);
  int v5 = v22;
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v19, v21, v22);
  SharedObjectPool::get<GryphonConfig>(&v17, v19);
  char v6 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "espresso_wavernn_fallback");
  GryphonConfig::params_for_module((uint64_t)v15, v6, (uint64_t)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "mil_wavernn_fallback");
  GryphonConfig::params_for_module((uint64_t)v11, v6, (uint64_t)v9);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  BOOL v7 = (v11[0] | v15[0]) != 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v7;
}

void sub_20D352E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,unsigned __int8 a23,uint64_t *a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a24, a23);
  uint64_t v27 = *(std::__shared_weak_count **)(v25 - 56);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v25 - 40);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

uint64_t NeuralTTSUtils::should_use_neural_voice(NeuralTTSUtils *this, const char *a2)
{
  BOOL is_ane_available = NeuralTTSUtils::is_ane_available(this);
  if (!is_ane_available && !NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)is_ane_available)
    || !NeuralTTSUtils::is_neural_voice_ready(this, v4))
  {
    return 0;
  }
  if (!NeuralTTSUtils::check_thermal_limit((NeuralTTSUtils *)2)) {
    return 1;
  }
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v19, (char *)this);
  int v5 = v20;
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v17, v19, v20);
  uint64_t v6 = v17;
  BOOL v7 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL has_neural_fallback_connection = NeuralTTSUtils::has_neural_fallback_connection(v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (has_neural_fallback_connection)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    char v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_DEFAULT, "voice should use gryphon pipeline fallback", v16, 2u);
    }
    int v12 = "voice should use gryphon pipeline fallback";
    goto LABEL_23;
  }
  if (NeuralTTSUtils::has_compact_neural_fallback(this, v8))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    char v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_DEFAULT, "voice should use compact neural fallback", v16, 2u);
    }
    int v12 = "voice should use compact neural fallback";
LABEL_23:
    Diagnostics::log(5, v12, v11);
    uint64_t v13 = 1;
    if (!v7) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v13 = 0;
  if (v7) {
LABEL_24:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_25:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v13;
}

void sub_20D3530E0(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NeuralTTSUtils::neural_sample_rate(uint64_t *a1)
{
  SharedObjectPool::get<GryphonConfig>(&v12, *a1);
  int v1 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "audio_resampling");
  GryphonConfig::params_for_module((uint64_t)v10, v1, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v10[0])
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "sample_rate_in");
    unsigned int v5 = 24000;
    uint64_t v2 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v10, (const void **)v6, &v5);
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    int v3 = v10[0];
  }
  else
  {
    int v3 = 0;
    uint64_t v2 = 24000;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v3);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v2;
}

void sub_20D3531F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v22 - 40), *(unsigned __int8 *)(v22 - 48));
  uint64_t v24 = *(std::__shared_weak_count **)(v22 - 24);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

float NeuralTTSUtils::current_model_sample_rate(NeuralTTSUtils *this, const char *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,char const*&,void>(&v32, (char *)this);
  uint64_t v2 = v33;
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v30, v32, v33);
  uint64_t v3 = v30;
  SharedObjectPool::get<GryphonConfig>(&v28, v30);
  int v4 = v28;
  std::string::basic_string[abi:ne180100]<0>(__p, "audio_resampling");
  GryphonConfig::params_for_module((uint64_t)v26, v4, (uint64_t)__p);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (v26[0])
  {
    unsigned int v5 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AudioResamplingModule::AudioResamplingModule((uint64_t)v34, v26, v3, v5);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    int v6 = v36;
    std::string::basic_string[abi:ne180100]<0>(v20, "neural_thermal_fallback_connection");
    GryphonConfig::params_for_connection((uint64_t)v22, v4, (uint64_t)v20);
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    float v7 = (float)v6;
    if (v22[0])
    {
      v13[0] = 0;
      v13[1] = 0;
      v12[0] = v3;
      v12[1] = (uint64_t)v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      NeuralThermalFallbackConnection::NeuralThermalFallbackConnection((uint64_t)v14, 0, 0, v13, v22, v12);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      unsigned __int8 should_fallback = NeuralThermalFallbackConnection::should_fallback((NeuralThermalFallbackConnection *)v14);
      if ((should_fallback & (v19 > 0.0)) != 0) {
        float v7 = v19;
      }
      v14[0] = &unk_26C1FF470;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      int v9 = v22[0];
    }
    else
    {
      int v9 = 0;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v9);
    v34[0] = off_26C202E30;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    Module::~Module((Module *)v34);
    int v10 = v26[0];
  }
  else
  {
    int v10 = 0;
    float v7 = 24000.0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v10);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return v7;
}

void sub_20D3534D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,unsigned __int8 a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,unsigned __int8 a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,char a46)
{
  NeuralThermalFallbackConnection::~NeuralThermalFallbackConnection((NeuralThermalFallbackConnection *)&a13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a31, a30);
  AudioResamplingModule::~AudioResamplingModule((AudioResamplingModule *)&a46);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a39, a38);
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  _Unwind_Resume(a1);
}

void NeuralThermalFallbackConnection::~NeuralThermalFallbackConnection(NeuralThermalFallbackConnection *this)
{
  *(void *)this = &unk_26C1FF470;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unsigned int v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void AudioResamplingModule::~AudioResamplingModule(AudioResamplingModule *this)
{
  *(void *)this = off_26C202E30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C202E30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

void NeuralTTSUtils::stress_marker(uint64_t *a1, uint64_t a2, BOOL *a3)
{
  SharedObjectPool::get<GryphonConfig>(&v13, *a1);
  unsigned int v5 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "neural_adapter");
  GryphonConfig::params_for_module((uint64_t)v11, v5, (uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v11[0])
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "stress_marker");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, v11, (const void **)v6, &v8);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v8;
    *((unsigned char *)&v8.__r_.__value_.__s + 23) = 0;
    v8.__r_.__value_.__s.__data_[0] = 0;
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v8, "stress_marker_before");
    LOBYTE(v6[0]) = 0;
    *a3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v11, (const void **)&v8.__r_.__value_.__l.__data_, (unsigned __int8 *)v6);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
    *a3 = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_20D3537DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v27 - 56), *(unsigned __int8 *)(v27 - 64));
  uint64_t v29 = *(std::__shared_weak_count **)(v27 - 40);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(a1);
}

BOOL NeuralTTSUtils::is_personal_voice(uint64_t a1)
{
  SharedObjectPool::get<GryphonConfig>(&v14, a1);
  int v1 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "neural_adapter");
  GryphonConfig::params_for_module((uint64_t)v12, v1, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v12[0])
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "speaker_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, v12, (const void **)v7, &v9);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v3 = v9.__r_.__value_.__l.__size_ == 14
        && *(void *)v9.__r_.__value_.__l.__data_ == 0x735F6D6F74737563
        && *(void *)(v9.__r_.__value_.__r.__words[0] + 6) == 0x72656B616570735FLL;
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v3 = SHIBYTE(v9.__r_.__value_.__r.__words[2]) == 14
        && v9.__r_.__value_.__r.__words[0] == 0x735F6D6F74737563
        && *(std::string::size_type *)((char *)v9.__r_.__value_.__r.__words + 6) == 0x72656B616570735FLL;
    }
    int v4 = v12[0];
  }
  else
  {
    int v4 = 0;
    BOOL v3 = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v4);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return v3;
}

void sub_20D3539C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v24 - 40), *(unsigned __int8 *)(v24 - 48));
  long long v26 = *(std::__shared_weak_count **)(v24 - 24);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    uint64_t v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 2;
    }
    if (v15)
    {
      uint64_t v16 = result;
      do
      {
        *(_DWORD *)uint64_t v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      uint64_t v17 = &v13[4 * (a2 - v14)];
      uint64_t v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)uint64_t v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v6 >> 1;
    if (v6 >> 1 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](a1, v9);
    char v10 = a1[1];
    char v11 = &v10[4 * a2];
    uint64_t v12 = 4 * a2;
    do
    {
      *(_DWORD *)char v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void WordEmbedding::~WordEmbedding(WordEmbedding *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void WordEmbedding::embedding(float **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[4];
  unsigned int v6 = *(_DWORD *)(v5 + 4);
  if (v6)
  {
    unsigned int v7 = 0;
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v8 = (const char *)a3;
    }
    else {
      uint64_t v8 = *(const char **)a3;
    }
    uint64_t v9 = a2[7];
    uint64_t v10 = a2[5];
    while (1)
    {
      unsigned int v11 = (v7 + v6) >> 1;
      int v12 = strcmp(v8, (const char *)(v9 + *(unsigned int *)(v10 + 4 * v11)));
      if (!v12) {
        break;
      }
      if (v12 >= 0) {
        unsigned int v7 = v11 + 1;
      }
      else {
        unsigned int v6 = (v7 + v6) >> 1;
      }
      if (v7 >= v6) {
        goto LABEL_11;
      }
    }
    std::vector<float>::vector(a1, *(unsigned int *)(v5 + 8));
    vDSP_Length v15 = *(unsigned int *)(a2[4] + 8);
    vDSP_vfltu8((const unsigned __int8 *)(a2[6] + v15 * v11), 1, *a1, 1, v15);
    vDSP_vsmsa(*a1, 1, (const float *)(a2[4] + 16), (const float *)(a2[4] + 12), *a1, 1, *(unsigned int *)(a2[4] + 8));
  }
  else
  {
LABEL_11:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    uint64_t v13 = (const void *)a2[8];
    uint64_t v14 = a2[9];
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, v13, v14, (v14 - (uint64_t)v13) >> 2);
  }
}

void sub_20D353CA8(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void FastRewriterImpl::set_group_buffer_count(FastRewriterImpl *this, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  fr_group_buffer_count();
  if (a2) {
    char v3 = a2;
  }
  else {
    char v3 = 24;
  }
  fr_group_buffer_count(void)::group_buf_cnt = v3;
  if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      fr_group_buffer_count();
      *(_DWORD *)int64x2_t buf = 67109120;
      int v7 = fr_group_buffer_count(void)::group_buf_cnt;
      _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_DEBUG, "Set matching group buffer count to %u", buf, 8u);
    }
    fr_group_buffer_count();
    Diagnostics::log(7, "Set matching group buffer count to %u", v5, fr_group_buffer_count(void)::group_buf_cnt);
  }
}

void FastRewriterImpl::set_matching_threads(FastRewriterImpl *this, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  fr_matching_threads();
  if (a2) {
    char v3 = a2;
  }
  else {
    char v3 = 4;
  }
  fr_matching_threads(void)::matching_threads = v3;
  if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      fr_matching_threads();
      *(_DWORD *)int64x2_t buf = 67109120;
      int v7 = fr_matching_threads(void)::matching_threads;
      _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_DEBUG, "Set matching threads to %u", buf, 8u);
    }
    fr_matching_threads();
    Diagnostics::log(7, "Set matching threads to %u", v5, fr_matching_threads(void)::matching_threads);
  }
}

void FastRewriterImpl::set_verbose(FastRewriterImpl *this, char a2)
{
  fr_verbose_log(void)::is_verbose_ = a2;
}

void FastRewriterImpl::add_rule(uint64_t a1, std::string *a2)
{
  FRRuleSet::add_text_rule(*(void *)(a1 + 8), a2);
  char v3 = *(FRRuleSet **)(a1 + 8);
  FRRuleSet::parse(v3);
}

uint64_t FastRewriterImpl::dump(uint64_t result)
{
  v22[19] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(result + 48))
  {
    uint64_t v1 = result;
    std::ofstream::basic_ofstream((uint64_t *)v20);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    uint64_t v13 = v15;
    std::ostream::write();
    uint64_t v2 = *(uint64_t **)(v1 + 24);
    char v3 = *(uint64_t **)(v1 + 32);
    if (v2 != v3)
    {
      uint64_t v4 = 4;
      do
      {
        uint64_t v5 = *v2;
        unsigned int v6 = (std::__shared_weak_count *)v2[1];
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v5 + 24))(v5, v14, v4);
        if (fr_verbose_log(void)::is_verbose_)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int64x2_t buf = 67109120;
            int v19 = v7;
            _os_log_impl(&dword_20CD80000, v8, OS_LOG_TYPE_DEBUG, "Size of Graph: %u", buf, 8u);
          }
          Diagnostics::log(7, "Size of Graph: %u", v9, v7, v13);
        }
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        uint64_t v4 = (v7 + v4);
        v2 += 2;
      }
      while (v2 != v3);
    }
    std::ostream::operator<<();
    v14[0] = *MEMORY[0x263F8C2B8];
    uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v15[0] = v10;
    v15[1] = MEMORY[0x263F8C318] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x210559500](&v17);
    *(void *)uint64_t v20 = *MEMORY[0x263F8C2B0];
    *(void *)&v20[*(void *)(*(void *)v20 - 24)] = *(void *)(MEMORY[0x263F8C2B0] + 24);
    MEMORY[0x210558FE0](&v21);
    std::ostream::~ostream();
    return MEMORY[0x210559500](v22);
  }
  else if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unsigned int v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_DEBUG, "Skip dump model because it's already binary model", v20, 2u);
    }
    return Diagnostics::log(7, "Skip dump model because it's already binary model", v12);
  }
  return result;
}

void sub_20D35435C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
}

void FastRewriterImpl::compile(FastRewriterImpl *this)
{
  uint64_t v127 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 12))
  {
    uint64_t v2 = *((void *)this + 1);
    uint64_t v118 = 0;
    unint64_t v119 = 0;
    int v117 = 0;
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = *(void *)(v2 + 80);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    buf.__r_.__value_.__s.__data_[8] = 0;
    if (v4 != v3)
    {
      unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v3) >> 3);
      if (v5 >= 0x666666666666667) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unsigned int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v5);
      uint64_t v7 = 0;
      int v117 = v6;
      uint64_t v118 = v6;
      unint64_t v119 = &v6[40 * v8];
      do
      {
        std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::pair[abi:ne180100]((std::string *)&v6[v7], (long long *)(v3 + v7));
        v7 += 40;
      }
      while (v3 + v7 != v4);
      uint64_t v9 = &v6[v7];
      uint64_t v10 = v117;
      uint64_t v118 = v9;
      if (v117 != v9)
      {
        long long v109 = v9;
        do
        {
          if (v10[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v116, *(const std::string::value_type **)v10, *((void *)v10 + 1));
          }
          else
          {
            long long v11 = *(_OWORD *)v10;
            v116.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
            *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v11;
          }
          uint64_t v12 = *((void *)v10 + 3);
          uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 4);
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v14 = *(FRRule ***)v12;
          if (*(void *)v12 != *(void *)(v12 + 8))
          {
            long long v115 = 0uLL;
            uint64_t v111 = v13;
            if (!FRRule::is_pcre_rule(*v14))
            {
              if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v113, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
              }
              else {
                std::string v113 = v116;
              }
              if (v13) {
                atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              char v16 = (char *)operator new(0xB8uLL);
              *((void *)v16 + 1) = 0;
              *((void *)v16 + 2) = 0;
              *(void *)char v16 = off_26C218C80;
              if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v123, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
              }
              else {
                std::string v123 = v113;
              }
              if (v13) {
                atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *((void *)v16 + 3) = &off_26C205790;
              int v103 = (std::string *)(v16 + 32);
              if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v103, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v103->__r_.__value_.__l.__data_ = *(_OWORD *)&v123.__r_.__value_.__l.__data_;
                *((void *)v16 + 6) = *((void *)&v123.__r_.__value_.__l + 2);
              }
              uint64_t v104 = (FRCode *)std::string::basic_string[abi:ne180100]<0>((void *)v16 + 7, "nfa");
              *((void *)v16 + 10) = v12;
              *((void *)v16 + 11) = v13;
              if (v13) {
                atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *((void *)v16 + 19) = 0;
              *((_OWORD *)v16 + 7) = 0u;
              *((_OWORD *)v16 + 8) = 0u;
              *((_DWORD *)v16 + 36) = 1065353216;
              *((void *)v16 + 20) = 0;
              *((void *)v16 + 21) = 0;
              *((_DWORD *)v16 + 4std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
              FRCode::init_tables(v104);
              is_mul_ok((uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 4, 0x88uLL);
              operator new[]();
            }
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v114, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
            }
            else {
              std::string v114 = v116;
            }
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            vDSP_Length v15 = (char *)operator new(0xE0uLL);
            *((void *)v15 + 1) = 0;
            *((void *)v15 + 2) = 0;
            *(void *)vDSP_Length v15 = off_26C2153A0;
            if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = v114;
            }
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *((_OWORD *)v15 + 10) = 0u;
            *((void *)v15 + 3) = &off_26C1FF740;
            *((_OWORD *)v15 + 2) = 0u;
            *((_OWORD *)v15 + 3) = 0u;
            *((_OWORD *)v15 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
            *(_OWORD *)(v15 + 88) = 0u;
            *(_OWORD *)(v15 + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
            *(_OWORD *)(v15 + 120) = 0u;
            *(_OWORD *)(v15 + 136) = 0u;
            *((_OWORD *)v15 + 11) = 0u;
            *((_OWORD *)v15 + 12) = 0u;
            *((_OWORD *)v15 + 13) = 0u;
            std::string::operator=((std::string *)(v15 + 32), &__str);
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v17 = (std::__shared_weak_count *)*((void *)v15 + 12);
            *((void *)v15 + 11) = v12;
            *((void *)v15 + 12) = v13;
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            MEMORY[0x210558E70](v15 + 56, "pcre");
            std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((char **)v15 + 13, (uint64_t)(*(void *)(*((void *)v15 + 11) + 8) - **((void **)v15 + 11)) >> 4);
            std::vector<char *>::resize((char **)v15 + 16, (uint64_t)(*(void *)(*((void *)v15 + 11) + 8) - **((void **)v15 + 11)) >> 4);
            *((_DWORD *)v15 + 38) = 0;
            uint64_t v18 = (char **)*((void *)v15 + 11);
            int v19 = *v18;
            unint64_t v112 = v18[1];
            if (*v18 != v112)
            {
              long long v110 = v10;
              while (1)
              {
                uint64_t v20 = *(void *)v19;
                uint64_t v21 = (std::__shared_weak_count *)*((void *)v19 + 1);
                if (v21)
                {
                  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
                  memset(&v123, 0, sizeof(v123));
                  memset(&v124, 0, sizeof(v124));
                  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                else
                {
                  memset(&v123, 0, sizeof(v123));
                  memset(&v124, 0, sizeof(v124));
                }
                uint64_t v24 = *(void *)(v20 + 176);
                uint64_t v23 = v20 + 176;
                uint64_t v22 = v24;
                std::string::size_type v25 = *(char *)(v23 + 23) >= 0 ? v23 : v22;
                for (uint64_t i = (unsigned __int8 *)v25; ; ++i)
                {
                  int v27 = *i;
                  if (v27 != 9 && v27 != 32) {
                    break;
                  }
                }
                if (!*i) {
                  break;
                }
                uint64_t v31 = (char)v27;
                unsigned int v32 = (v27 - 48);
                if (v31 == 92 || v32 <= 9)
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  uint64_t v34 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    LODWORD(buf.__r_.__value_.__l.__data_) = 67109378;
                    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v31;
                    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v25;
                    _os_log_impl(&dword_20CD80000, v34, OS_LOG_TYPE_DEBUG, "Invalid delimiter in PCRE2 pattern: %c(%s), ignore!", (uint8_t *)&buf, 0x12u);
                  }
                  Diagnostics::log(7, "Invalid delimiter in PCRE2 pattern: %c(%s), ignore!", v35, v31, v25);
                  goto LABEL_127;
                }
                int v38 = i[1];
                int v36 = i + 1;
                int v37 = v38;
                if (!v38 || v37 == v31)
                {
                  uint64_t v39 = (const char *)v36;
                  if (!v37) {
                    goto LABEL_117;
                  }
                }
                else
                {
                  uint64_t v39 = (const char *)v36;
                  do
                  {
                    if (v37 == 92)
                    {
                      int v40 = *((unsigned __int8 *)v39 + 1);
                      if (v40 != v31 && v40 != 0) {
                        ++v39;
                      }
                    }
                    int v42 = *(unsigned __int8 *)++v39;
                    int v37 = v42;
                  }
                  while (v42 && v37 != v31);
                  if (!v37)
                  {
LABEL_117:
                    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                    }
                    uint64_t v13 = v111;
                    uint64_t v56 = Diagnostics_GetLogObject(void)::__profile_log_default;
                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_20CD80000, v56, OS_LOG_TYPE_DEBUG, "Empty line in rule file, ignore!", (uint8_t *)&buf, 2u);
                    }
                    Diagnostics::log(7, "Empty line in rule file, ignore!", v57);
                    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                    }
                    unint64_t v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                    {
                      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v25;
                      _os_log_impl(&dword_20CD80000, v58, OS_LOG_TYPE_DEBUG, "Missing end tag in PCRE2 pattern: %s, ignore!", (uint8_t *)&buf, 0xCu);
                    }
                    std::string::size_type v107 = v25;
                    uint64_t v30 = "Missing end tag in PCRE2 pattern: %s, ignore!";
                    goto LABEL_126;
                  }
                }
                if ((uint64_t)&v36[-v25] >= 0) {
                  std::string::size_type v43 = (std::string::size_type)&v36[-v25];
                }
                else {
                  std::string::size_type v43 = v25 - (void)v36;
                }
                uint64_t v44 = v39 - (const char *)v36;
                if (v44 >= 0) {
                  std::string::size_type v45 = v44;
                }
                else {
                  std::string::size_type v45 = -v44;
                }
                std::string::basic_string(&buf, (const std::string *)v23, v43, v45, (std::allocator<char> *)&v121);
                if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v123.__r_.__value_.__l.__data_);
                }
                uint64_t v46 = 0;
                std::string v123 = buf;
LABEL_84:
                unint64_t v47 = v39 + 1;
                while (1)
                {
                  int v48 = *v47;
                  int v49 = *(unsigned __int8 *)v47;
                  if (!*v47 || v49 == 45) {
                    break;
                  }
                  uint64_t v39 = v47;
                  if (v48 <= 109)
                  {
                    if (v48 == 105)
                    {
                      int v50 = 8;
                      goto LABEL_101;
                    }
                    ++v47;
                    if (v48 == 109)
                    {
                      int v50 = 1024;
LABEL_101:
                      uint64_t v46 = v46 | v50;
                      goto LABEL_84;
                    }
                  }
                  else
                  {
                    if (v48 == 110)
                    {
                      int v50 = 0x2000;
                      goto LABEL_101;
                    }
                    if (v48 == 115)
                    {
                      uint64_t v39 = v47;
                      int v50 = 32;
                      goto LABEL_101;
                    }
                    ++v47;
                    if (v48 == 120)
                    {
                      if ((v46 & 0x80) != 0) {
                        int v50 = 0x1000000;
                      }
                      else {
                        int v50 = 128;
                      }
                      goto LABEL_101;
                    }
                  }
                }
                uint64_t v13 = v111;
                while (v49 == 9 || v49 == 32)
                {
                  char v51 = *++v47;
                  LOBYTE(v49) = v51;
                }
                if (!(_BYTE)v49)
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  uint64_t v52 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                    _os_log_impl(&dword_20CD80000, v52, OS_LOG_TYPE_DEBUG, "Empty line in rule file, ignore!", (uint8_t *)&buf, 2u);
                  }
                  Diagnostics::log(7, "Empty line in rule file, ignore!", v53);
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  unint64_t v54 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v25;
                    _os_log_impl(&dword_20CD80000, v54, OS_LOG_TYPE_DEBUG, "Missing separator in PCRE2 pattern: %s, ignore!", (uint8_t *)&buf, 0xCu);
                  }
                  Diagnostics::log(7, "Missing separator in PCRE2 pattern: %s, ignore!", v55, v25);
                  goto LABEL_127;
                }
                if (strncmp(v47, "-->", 3uLL))
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  unint64_t v71 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v25;
                    _os_log_impl(&dword_20CD80000, v71, OS_LOG_TYPE_DEBUG, "Invalid separator in PCRE2 pattern: %s, ignore!", (uint8_t *)&buf, 0xCu);
                  }
                  Diagnostics::log(7, "Invalid separator in PCRE2 pattern: %s, ignore!", v72, v25);
                  goto LABEL_127;
                }
                for (uint64_t j = v47 + 3; ; ++j)
                {
                  int v74 = *j;
                  if (v74 != 9 && v74 != 32) {
                    break;
                  }
                }
                if (!*j)
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  unint64_t v75 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                    _os_log_impl(&dword_20CD80000, v75, OS_LOG_TYPE_DEBUG, "Empty line in rule file, ignore!", (uint8_t *)&buf, 2u);
                  }
                  Diagnostics::log(7, "Empty line in rule file, ignore!", v76);
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  std::vector<int>::pointer v77 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v25;
                    _os_log_impl(&dword_20CD80000, v77, OS_LOG_TYPE_DEBUG, "Missing target in PCRE2 rule: %s, ignore!", (uint8_t *)&buf, 0xCu);
                  }
                  Diagnostics::log(7, "Missing target in PCRE2 rule: %s, ignore!", v78, v25);
                  goto LABEL_127;
                }
                if (v74 == 34)
                {
                  ++j;
                  int v79 = 34;
                }
                else
                {
                  int v79 = 32;
                }
                int v80 = *j;
                BOOL v81 = v80 == 0;
                for (k = j; !v81 && v80 != v79; ++k)
                {
                  if (v80 == 92)
                  {
                    int v84 = k[1];
                    if (v84 != v79 && v84 != 0) {
                      ++k;
                    }
                  }
                  int v86 = k[1];
                  int v80 = v86;
                  BOOL v81 = v86 == 0;
                }
                if (!v80)
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  int v96 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                    _os_log_impl(&dword_20CD80000, v96, OS_LOG_TYPE_DEBUG, "Empty line in rule file, ignore!", (uint8_t *)&buf, 2u);
                  }
                  Diagnostics::log(7, "Empty line in rule file, ignore!", v97);
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  uint64_t v98 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v25;
                    _os_log_impl(&dword_20CD80000, v98, OS_LOG_TYPE_DEBUG, "Missing end tag in PCRE2 target string: %s, ignore!", (uint8_t *)&buf, 0xCu);
                  }
                  Diagnostics::log(7, "Missing end tag in PCRE2 target string: %s, ignore!", v99, v25);
LABEL_127:
                  char v59 = 0;
                  if (!v21) {
                    goto LABEL_129;
                  }
LABEL_128:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
                  goto LABEL_129;
                }
                if ((uint64_t)&j[-v25] >= 0) {
                  std::string::size_type v87 = (std::string::size_type)&j[-v25];
                }
                else {
                  std::string::size_type v87 = v25 - (void)j;
                }
                uint64_t v88 = k - j;
                if (v88 >= 0) {
                  std::string::size_type v89 = v88;
                }
                else {
                  std::string::size_type v89 = -v88;
                }
                std::string::basic_string(&buf, (const std::string *)v23, v87, v89, (std::allocator<char> *)&v121);
                if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v124.__r_.__value_.__l.__data_);
                }
                std::string v124 = buf;
                uint64_t v13 = v111;
                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                }
                unint64_t v90 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v92 = &v123;
                  if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v92 = (std::string *)v123.__r_.__value_.__r.__words[0];
                  }
                  unint64_t v93 = &v124;
                  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    unint64_t v93 = (std::string *)v124.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v92;
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v93;
                  HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
                  int v126 = v46;
                  _os_log_impl(&dword_20CD80000, v90, OS_LOG_TYPE_DEBUG, "Parsed rule: re = '%s'; tgt = '%s'; options = %x",
                    (uint8_t *)&buf,
                    0x1Cu);
                }
                unint64_t v94 = &v123;
                if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  unint64_t v94 = (std::string *)v123.__r_.__value_.__r.__words[0];
                }
                unint64_t v95 = &v124;
                if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  unint64_t v95 = (std::string *)v124.__r_.__value_.__r.__words[0];
                }
                Diagnostics::log(7, "Parsed rule: re = '%s'; tgt = '%s'; options = %x", v91, v94, v95, v46);
                char v59 = 1;
                if (v21) {
                  goto LABEL_128;
                }
LABEL_129:
                if (v59)
                {
                  unsigned int v122 = 0;
                  uint64_t v121 = 0;
                  uint64_t v60 = pcre2_compile_8();
                  if (v60)
                  {
                    *(void *)(*((void *)v15 + 13) + 8 * *((int *)v15 + 38)) = v60;
                    std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
                    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type size = v124.__r_.__value_.__l.__size_;
                    }
                    int64x2_t v62 = malloc_type_malloc(size + 1, 0x9D9493EDuLL);
                    uint64_t v63 = *((int *)v15 + 38);
                    *(void *)(*((void *)v15 + 16) + 8 * v63) = v62;
                    uint64_t v64 = *(void **)(*((void *)v15 + 16) + 8 * v63);
                    std::string::size_type v65 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
                    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      long long v66 = &v124;
                    }
                    else {
                      long long v66 = (std::string *)v124.__r_.__value_.__r.__words[0];
                    }
                    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type v65 = v124.__r_.__value_.__l.__size_;
                    }
                    memcpy(v64, v66, v65 + 1);
                    ++*((_DWORD *)v15 + 38);
                  }
                  else
                  {
                    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                    }
                    long long v67 = Diagnostics_GetLogObject(void)::__profile_log_default;
                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v69 = &v123;
                      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        uint64_t v69 = (std::string *)v123.__r_.__value_.__r.__words[0];
                      }
                      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v69;
                      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v122;
                      _os_log_impl(&dword_20CD80000, v67, OS_LOG_TYPE_DEBUG, "Compiled RE failed(%s), Code: %d", (uint8_t *)&buf, 0x12u);
                    }
                    uint64_t v70 = &v123;
                    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      uint64_t v70 = (std::string *)v123.__r_.__value_.__r.__words[0];
                    }
                    uint64_t v108 = v122;
                    Diagnostics::log(7, "Compiled RE failed(%s), Code: %d", v68, v70);
                  }
                }
                if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v124.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v123.__r_.__value_.__l.__data_);
                  if (!v21) {
                    goto LABEL_153;
                  }
LABEL_152:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
                  goto LABEL_153;
                }
                if (v21) {
                  goto LABEL_152;
                }
LABEL_153:
                v19 += 16;
                if (v19 == v112)
                {
                  unint64_t v100 = *((int *)v15 + 38);
                  unint64_t v101 = (char **)*((void *)v15 + 11);
                  int v19 = *v101;
                  std::string v102 = v101[1];
                  uint64_t v9 = v109;
                  uint64_t v10 = v110;
                  goto LABEL_234;
                }
              }
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              uint64_t v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_20CD80000, v28, OS_LOG_TYPE_DEBUG, "Empty line in rule file, ignore!", (uint8_t *)&buf, 2u);
              }
              uint64_t v30 = "Empty line in rule file, ignore!";
LABEL_126:
              Diagnostics::log(7, v30, v29, v107, v108);
              goto LABEL_127;
            }
            unint64_t v100 = 0;
            std::string v102 = *v18;
LABEL_234:
            if (v100 != (v102 - v19) >> 4)
            {
              std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((char **)v15 + 13, v100);
              std::vector<char *>::resize((char **)v15 + 16, *((int *)v15 + 38));
            }
            v15[80] = 0;
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
            *(void *)&long long v115 = v15 + 24;
            *((void *)&v115 + 1) = v15;
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15);
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v114.__r_.__value_.__l.__data_);
            }
            std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100]((uint64_t)this + 24, &v115);
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15);
          }
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v116.__r_.__value_.__l.__data_);
          }
          v10 += 40;
        }
        while (v10 != v9);
      }
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    std::vector<std::pair<std::string,std::shared_ptr<std::vector<std::shared_ptr<FRRule>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  else if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v105 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v105, OS_LOG_TYPE_DEBUG, "Skip compilation because it's binary model", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Skip compilation because it's binary model", v106);
  }
}

void sub_20D355A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57,uint64_t a58)
{
  std::vector<std::pair<std::string,std::shared_ptr<std::vector<std::shared_ptr<FRRule>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 144));
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::shared_ptr<std::vector<std::shared_ptr<FRRule>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *FastRewriterImpl::apply_prefix@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  v6[4] = *MEMORY[0x263EF8340];
  v6[0] = &off_26C212700;
  v6[1] = a3;
  v6[3] = v6;
  FastRewriterImpl::apply_real(a5, a1, a2, (uint64_t)v6, a4);
  return std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100](v6);
}

void sub_20D355E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void FastRewriterImpl::apply_real(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v9 = operator new(0x30uLL);
  v9[1] = 0;
  void v9[2] = 0;
  *uint64_t v9 = off_26C219700;
  v9[4] = 0;
  v9[5] = 0;
  void v9[3] = 0;
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v9 + 3;
  *(void *)(a1 + 32) = v9;
  std::string::operator=((std::string *)a1, (const std::string *)a3);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  if (v10 != v11)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      uint64_t v10 = *(void *)(a2 + 24);
      uint64_t v11 = *(void *)(a2 + 32);
    }
    else
    {
      std::string v92 = *(std::string *)a3;
    }
    std::string __p = 0;
    unint64_t v90 = 0;
    unint64_t v91 = 0;
    if (v10 != v11)
    {
      uint64_t v12 = &fst::TropicalWeightTpl<float>::Type(void)::type;
      uint64_t v13 = &fst::TropicalWeightTpl<float>::Type(void)::type;
      uint64_t v80 = v11;
      uint64_t v81 = a4;
      while (1)
      {
        uint64_t v14 = (*(uint64_t (**)(void))(**(void **)v10 + 16))();
        uint64_t v15 = *(void *)(a4 + 24);
        if (!v15) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 48))(v15, v14) & 1) == 0) {
          goto LABEL_122;
        }
        (*(void (**)(std::string *__return_ptr))(**(void **)v10 + 8))(&__str);
        if (v87) {
          break;
        }
        if (fr_verbose_log(void)::is_verbose_)
        {
          if (v12[34] != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v30 = v13[33];
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v31 = (*(uint64_t (**)(void))(**(void **)v10 + 16))();
            int v32 = *(char *)(v31 + 23);
            uint64_t v33 = *(void *)v31;
            Censor::global_plaintext(&v95, (uint64_t)&v92);
            if (v32 >= 0) {
              uint64_t v34 = v31;
            }
            else {
              uint64_t v34 = v33;
            }
            unint64_t v35 = &v95;
            if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              unint64_t v35 = (std::string *)v95.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)unint64_t v94 = 136315394;
            *(void *)&v94[4] = v34;
            *(_WORD *)&v94[12] = 2080;
            *(void *)&v94[14] = v35;
            _os_log_impl(&dword_20CD80000, v30, OS_LOG_TYPE_DEBUG, "Result of Graph: %s | %s", v94, 0x16u);
            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v95.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v36 = (*(uint64_t (**)(void))(**(void **)v10 + 16))();
          int v37 = *(char *)(v36 + 23);
          uint64_t v38 = *(void *)v36;
          Censor::global_plaintext(&v95, (uint64_t)&v92);
LABEL_110:
          if (v37 >= 0) {
            uint64_t v78 = v36;
          }
          else {
            uint64_t v78 = v38;
          }
          int v79 = &v95;
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v79 = (std::string *)v95.__r_.__value_.__r.__words[0];
          }
          Diagnostics::log(7, "Result of Graph: %s | %s", v39, v78, v79);
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v95.__r_.__value_.__l.__data_);
          }
          uint64_t v12 = &fst::TropicalWeightTpl<float>::Type(void)::type;
          uint64_t v13 = &fst::TropicalWeightTpl<float>::Type(void)::type;
        }
LABEL_118:
        if (v88) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v88);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
LABEL_122:
        v10 += 16;
        if (v10 == v11)
        {
          if (__p)
          {
            unint64_t v90 = __p;
            operator delete(__p);
          }
          goto LABEL_125;
        }
      }
      if (a5)
      {
        char v16 = *(uint64_t **)(a1 + 24);
        if (*v16 == v16[1])
        {
          uint64_t v41 = (unsigned int *)*v87;
          int v42 = (unsigned int *)v87[1];
          if ((unsigned int *)*v87 != v42)
          {
            do
            {
              if (*((char *)v41 + 31) < 0)
              {
                int v44 = v41[4];
                std::string::size_type v43 = (void *)*((void *)v41 + 1);
              }
              else
              {
                std::string::size_type v43 = v41 + 2;
                int v44 = *((unsigned __int8 *)v41 + 31);
              }
              std::string::size_type v45 = (char *)(v41 + 8);
              if (*((char *)v41 + 55) < 0) {
                std::string::size_type v45 = *(char **)v45;
              }
              _Gryphon_ReportSubstitution(v44, v43, v45);
              if (v12[34] != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              uint64_t v46 = v13[33];
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                int v48 = v41 + 14;
                if (*((char *)v41 + 79) < 0) {
                  int v48 = (void *)*v48;
                }
                LODWORD(v95.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v48;
                _os_log_impl(&dword_20CD80000, v46, OS_LOG_TYPE_DEBUG, "==> Rule: %s", (uint8_t *)&v95, 0xCu);
              }
              int v49 = v41 + 14;
              if (*((char *)v41 + 79) < 0) {
                int v49 = (void *)*v49;
              }
              Diagnostics::log(7, "==> Rule: %s", v47, v49);
              uint64_t v50 = *(void *)(a1 + 24);
              unint64_t v51 = *(void *)(v50 + 8);
              if (v51 >= *(void *)(v50 + 16))
              {
                uint64_t v52 = std::vector<FRReplaceInst>::__push_back_slow_path<FRReplaceInst const&>(*(uint64_t **)(a1 + 24), (uint64_t)v41);
              }
              else
              {
                std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(*(void *)(v50 + 8), (uint64_t)v41);
                uint64_t v52 = v51 + 80;
                *(void *)(v50 + 8) = v51 + 80;
              }
              *(void *)(v50 + 8) = v52;
              unint64_t v53 = v90;
              if (__p == v90) {
                int v54 = 0;
              }
              else {
                int v54 = *((_DWORD *)v90 - 2) - *((_DWORD *)v90 - 6);
              }
              uint64_t v55 = *v41;
              if (*((char *)v41 + 31) < 0) {
                uint64_t v56 = *((void *)v41 + 2);
              }
              else {
                uint64_t v56 = *((unsigned __int8 *)v41 + 31);
              }
              if (*((char *)v41 + 55) < 0) {
                uint64_t v57 = *((void *)v41 + 5);
              }
              else {
                uint64_t v57 = *((unsigned __int8 *)v41 + 55);
              }
              uint64_t v58 = v56 + v55;
              uint64_t v59 = (v55 + v54);
              uint64_t v60 = v57 + v59;
              if ((unint64_t)v90 >= v91)
              {
                uint64_t v62 = ((char *)v90 - (unsigned char *)__p) >> 5;
                unint64_t v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 59) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v64 = v91 - (void)__p;
                if ((uint64_t)(v91 - (void)__p) >> 4 > v63) {
                  unint64_t v63 = v64 >> 4;
                }
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v65 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v65 = v63;
                }
                if (v65) {
                  unint64_t v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(v65);
                }
                else {
                  uint64_t v66 = 0;
                }
                long long v67 = (void *)(v65 + 32 * v62);
                void *v67 = v55;
                v67[1] = v58;
                v67[2] = v59;
                v67[3] = v60;
                uint64_t v69 = __p;
                int64x2_t v68 = v90;
                uint64_t v70 = (char *)v67;
                uint64_t v12 = &fst::TropicalWeightTpl<float>::Type(void)::type;
                if (v90 != __p)
                {
                  do
                  {
                    long long v71 = *((_OWORD *)v68 - 1);
                    *((_OWORD *)v70 - 2) = *((_OWORD *)v68 - 2);
                    *((_OWORD *)v70 - 1) = v71;
                    v70 -= 32;
                    v68 -= 4;
                  }
                  while (v68 != v69);
                  int64x2_t v68 = v69;
                }
                uint64_t v61 = v67 + 4;
                std::string __p = v70;
                unint64_t v90 = v67 + 4;
                unint64_t v91 = v65 + 32 * v66;
                if (v68) {
                  operator delete(v68);
                }
              }
              else
              {
                *unint64_t v90 = v55;
                v53[1] = v58;
                uint64_t v61 = v53 + 4;
                v53[2] = v59;
                void v53[3] = v60;
                uint64_t v12 = &fst::TropicalWeightTpl<float>::Type(void)::type;
              }
              unint64_t v90 = v61;
              v41 += 20;
              uint64_t v13 = &fst::TropicalWeightTpl<float>::Type(void)::type;
            }
            while (v41 != v42);
          }
        }
        else
        {
          memset(&v95, 0, sizeof(v95));
          memset(v94, 0, 24);
          uint64_t v17 = *v87;
          uint64_t v18 = v87[1];
          if (*v87 != v18)
          {
            do
            {
              if (*(char *)(v17 + 31) < 0)
              {
                int v20 = *(_DWORD *)(v17 + 16);
                int v19 = *(void **)(v17 + 8);
              }
              else
              {
                int v19 = (void *)(v17 + 8);
                int v20 = *(unsigned __int8 *)(v17 + 31);
              }
              uint64_t v21 = (char *)(v17 + 32);
              if (*(char *)(v17 + 55) < 0) {
                uint64_t v21 = *(char **)v21;
              }
              _Gryphon_ReportSubstitution(v20, v19, v21);
              if (v12[34] != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              uint64_t v22 = v13[33];
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v24 = (void *)(v17 + 56);
                if (*(char *)(v17 + 79) < 0) {
                  uint64_t v24 = (void *)*v24;
                }
                *(_DWORD *)std::string buf = 136315138;
                *(void *)&uint8_t buf[4] = v24;
                _os_log_impl(&dword_20CD80000, v22, OS_LOG_TYPE_DEBUG, "==> Rule: %s", buf, 0xCu);
              }
              std::string::size_type v25 = (void *)(v17 + 56);
              if (*(char *)(v17 + 79) < 0) {
                std::string::size_type v25 = (void *)*v25;
              }
              Diagnostics::log(7, "==> Rule: %s", v23, v25);
              long long v26 = *(std::__shared_weak_count **)(a1 + 32);
              int v84 = *(uint64_t **)(a1 + 24);
              unsigned int v85 = v26;
              if (v26) {
                atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              char v27 = FastRewriter::merge(&v84, (uint64_t **)v17, (std::string *)a3, (uint64_t *)&__p, (uint64_t **)&v95);
              if (v85) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v85);
              }
              if ((v27 & 1) == 0)
              {
                uint64_t v28 = *(void *)&v94[8];
                if (*(void *)&v94[8] >= *(void *)&v94[16])
                {
                  uint64_t v29 = std::vector<FRReplaceInst>::__push_back_slow_path<FRReplaceInst const&>((uint64_t *)v94, v17);
                }
                else
                {
                  std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(*(uint64_t *)&v94[8], v17);
                  uint64_t v29 = v28 + 80;
                }
                *(void *)&v94[8] = v29;
              }
              v17 += 80;
            }
            while (v17 != v18);
            char v16 = *(uint64_t **)(a1 + 24);
          }
          int v40 = *(std::__shared_weak_count **)(a1 + 32);
          v83[0] = v16;
          v83[1] = (uint64_t *)v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          FastRewriter::apply_replace_update(*(unsigned int **)v94, *(unsigned int **)&v94[8], v83, (char **)&__p, (int **)&v95);
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          FastRewriter::apply_offsets_update((uint64_t)__p, (uint64_t)v90, (unsigned int *)v95.__r_.__value_.__l.__data_, (unsigned int *)v95.__r_.__value_.__l.__size_);
          *(void *)std::string buf = v94;
          std::vector<FRReplaceInst>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if (v95.__r_.__value_.__r.__words[0])
          {
            v95.__r_.__value_.__l.__size_ = v95.__r_.__value_.__r.__words[0];
            operator delete(v95.__r_.__value_.__l.__data_);
          }
        }
      }
      std::string::operator=((std::string *)a1, &__str);
      uint64_t v11 = v80;
      a4 = v81;
      std::string::operator=(&v92, &__str);
      if (!fr_verbose_log(void)::is_verbose_) {
        goto LABEL_118;
      }
      if (v12[34] != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      unsigned int v72 = v13[33];
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v73 = (*(uint64_t (**)(void))(**(void **)v10 + 16))();
        int v74 = *(char *)(v73 + 23);
        uint64_t v75 = *(void *)v73;
        Censor::global_plaintext(&v95, (uint64_t)&__str);
        if (v74 >= 0) {
          uint64_t v76 = v73;
        }
        else {
          uint64_t v76 = v75;
        }
        std::vector<int>::pointer v77 = &v95;
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::vector<int>::pointer v77 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)unint64_t v94 = 136315394;
        *(void *)&v94[4] = v76;
        *(_WORD *)&v94[12] = 2080;
        *(void *)&v94[14] = v77;
        _os_log_impl(&dword_20CD80000, v72, OS_LOG_TYPE_DEBUG, "Result of Graph: %s | %s", v94, 0x16u);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v36 = (*(uint64_t (**)(void))(**(void **)v10 + 16))();
      int v37 = *(char *)(v36 + 23);
      uint64_t v38 = *(void *)v36;
      Censor::global_plaintext(&v95, (uint64_t)&__str);
      goto LABEL_110;
    }
LABEL_125:
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20D3567B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair(v36);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  unsigned int v6 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_20D3569DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<FRReplaceInst>::__push_back_slow_path<FRReplaceInst const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v7 = 0x333333333333333;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v17 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRReplaceInst>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v14 = v7;
  *(void *)&long long v15 = v7 + 80 * v2;
  *((void *)&v15 + 1) = v15;
  unint64_t v16 = v7 + 80 * v8;
  std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(v15, a2);
  uint64_t v9 = v15 + 80;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FRReplaceInst>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>>(v6, a1[1], a1[1], *a1, *a1, v15, v15);
  long long v10 = *(_OWORD *)a1;
  *a1 = v11;
  a1[1] = v9;
  long long v15 = v10;
  uint64_t v12 = a1[2];
  a1[2] = v16;
  unint64_t v16 = v12;
  unint64_t v14 = v10;
  std::__split_buffer<FRReplaceInst>::~__split_buffer((uint64_t)&v14);
  return v9;
}

void sub_20D356B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<FRReplaceInst>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void FastRewriter::apply_replace_update(unsigned int *a1, unsigned int *a2, uint64_t **a3, char **a4, int **a5)
{
  if (a1 == a2) {
    return;
  }
  long long v5 = a5;
  unint64_t v7 = a3;
  uint64_t v8 = a1;
  do
  {
    uint64_t v9 = *v7;
    uint64_t v10 = **v7;
    unint64_t v11 = (*v7)[1];
    if (v11 == v10) {
      goto LABEL_72;
    }
    char v12 = 0;
    int v13 = 0;
    unint64_t v14 = 0;
    do
    {
      if (v12)
      {
        if (v14 >= (a4[1] - *a4) >> 5) {
          goto LABEL_100;
        }
        *(int64x2_t *)&(*a4)[32 * v14 + 16] = vaddq_s64(*(int64x2_t *)&(*a4)[32 * v14 + 16], vdupq_n_s64(v13));
LABEL_8:
        char v12 = 1;
        goto LABEL_14;
      }
      long long v15 = (unsigned int *)(v10 + 80 * v14);
      if (*v8 < *v15)
      {
        if (v14)
        {
          if (v14 - 1 >= (a4[1] - *a4) >> 5) {
LABEL_100:
          }
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          int v16 = *(_DWORD *)&(*a4)[32 * v14 - 8] - *(_DWORD *)&(*a4)[32 * v14 - 24];
        }
        else
        {
          int v16 = 0;
        }
        std::vector<FRReplaceInst>::insert(v9, (uint64_t)v15, (unint64_t)v8);
        if (*((char *)v8 + 31) < 0) {
          uint64_t v17 = *((void *)v8 + 2);
        }
        else {
          uint64_t v17 = *((unsigned __int8 *)v8 + 31);
        }
        uint64_t v18 = *a4;
        uint64_t v19 = *v8;
        if (*((char *)v8 + 55) < 0) {
          uint64_t v20 = *((void *)v8 + 5);
        }
        else {
          uint64_t v20 = *((unsigned __int8 *)v8 + 55);
        }
        uint64_t v21 = &v18[32 * v14];
        uint64_t v22 = v17 + v19;
        uint64_t v23 = (v19 + v16);
        uint64_t v24 = v20 + v23;
        std::string::size_type v25 = a4[1];
        unint64_t v26 = (unint64_t)a4[2];
        if ((unint64_t)v25 >= v26)
        {
          unint64_t v31 = ((v25 - v18) >> 5) + 1;
          if (v31 >> 59) {
            goto LABEL_101;
          }
          uint64_t v32 = v26 - (void)v18;
          if (v32 >> 4 > v31) {
            unint64_t v31 = v32 >> 4;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(v33);
          }
          else
          {
            unint64_t v35 = 0;
            uint64_t v34 = 0;
          }
          uint64_t v36 = &v35[32 * v14];
          int v37 = &v35[32 * v34];
          if (v14 == v34)
          {
            if ((uint64_t)v14 < 1)
            {
              if (v14) {
                unint64_t v38 = 2 * v14;
              }
              else {
                unint64_t v38 = 1;
              }
              uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(v38);
              uint64_t v36 = &v39[32 * (v38 >> 2)];
              int v37 = &v39[32 * v40];
              if (v35)
              {
                uint64_t v41 = v35;
                int v42 = v37;
                operator delete(v41);
                int v37 = v42;
              }
            }
            else
            {
              v36 -= 32 * ((v14 + 1) >> 1);
            }
          }
          *(void *)uint64_t v36 = v19;
          *((void *)v36 + 1) = v22;
          *((void *)v36 + 2) = v23;
          *((void *)v36 + 3) = v24;
          std::string::size_type v43 = *a4;
          int v44 = v36;
          if (*a4 != v21)
          {
            std::string::size_type v45 = v21;
            uint64_t v46 = v36;
            do
            {
              long long v47 = *((_OWORD *)v45 - 1);
              int v44 = v46 - 32;
              *((_OWORD *)v46 - 2) = *((_OWORD *)v45 - 2);
              *((_OWORD *)v46 - 1) = v47;
              v45 -= 32;
              v46 -= 32;
            }
            while (v45 != v43);
          }
          int v48 = v36 + 32;
          int v49 = a4[1];
          int64_t v50 = v49 - v21;
          unint64_t v7 = a3;
          if (v49 != v21)
          {
            unint64_t v51 = v37;
            memmove(v48, v21, v49 - v21);
            int v37 = v51;
          }
          uint64_t v52 = *a4;
          *a4 = v44;
          a4[1] = &v48[v50];
          a4[2] = v37;
          long long v5 = a5;
          if (v52) {
            operator delete(v52);
          }
        }
        else
        {
          if (v21 == v25)
          {
            *(void *)uint64_t v21 = v19;
            *((void *)v21 + 1) = v22;
            *((void *)v21 + 2) = v23;
            *((void *)v21 + 3) = v24;
            a4[1] = v21 + 32;
          }
          else
          {
            char v27 = v25 - 32;
            uint64_t v28 = a4[1];
            while (v27 < v25)
            {
              long long v29 = *(_OWORD *)v27;
              long long v30 = *((_OWORD *)v27 + 1);
              v27 += 32;
              *(_OWORD *)uint64_t v28 = v29;
              *((_OWORD *)v28 + 1) = v30;
              v28 += 32;
            }
            a4[1] = v28;
            if (v25 != v21 + 32) {
              memmove(&v25[-32 * ((v25 - (v21 + 32)) >> 5)], v21, v25 - (v21 + 32));
            }
            *(void *)uint64_t v21 = v19;
            *((void *)v21 + 1) = v22;
            *((void *)v21 + 2) = v23;
            *((void *)v21 + 3) = v24;
          }
          unint64_t v7 = a3;
        }
        if (*((char *)v8 + 55) < 0) {
          uint64_t v53 = *((void *)v8 + 5);
        }
        else {
          LODWORD(v53) = *((unsigned __int8 *)v8 + 55);
        }
        if (*((char *)v8 + 31) < 0) {
          uint64_t v54 = *((void *)v8 + 2);
        }
        else {
          LODWORD(v5std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((unsigned __int8 *)v8 + 31);
        }
        int v13 = v53 - v54;
        uint64_t v55 = *v5;
        uint64_t v56 = v5[1];
        while (v55 != v56)
        {
          int v57 = *v55;
          if (*v55 >= 0) {
            unint64_t v58 = v57;
          }
          else {
            unint64_t v58 = -v57;
          }
          if (v14 <= v58) {
            *uint64_t v55 = ((v57 >> 31) | 1) + v57;
          }
          v55 += 5;
        }
        goto LABEL_8;
      }
      char v12 = 0;
LABEL_14:
      ++v14;
      uint64_t v9 = *v7;
      uint64_t v10 = **v7;
      unint64_t v11 = (*v7)[1];
    }
    while (v14 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v10) >> 4));
    if ((v12 & 1) == 0)
    {
LABEL_72:
      if (v11 >= v9[2])
      {
        uint64_t v59 = std::vector<FRReplaceInst>::__push_back_slow_path<FRReplaceInst const&>(v9, (uint64_t)v8);
      }
      else
      {
        std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(v11, (uint64_t)v8);
        uint64_t v59 = v11 + 80;
        v9[1] = v11 + 80;
      }
      v9[1] = v59;
      uint64_t v60 = a4[1];
      uint64_t v61 = *v8;
      if (*((char *)v8 + 31) < 0) {
        uint64_t v62 = *((void *)v8 + 2);
      }
      else {
        uint64_t v62 = *((unsigned __int8 *)v8 + 31);
      }
      if (*((char *)v8 + 55) < 0) {
        uint64_t v63 = *((void *)v8 + 5);
      }
      else {
        uint64_t v63 = *((unsigned __int8 *)v8 + 55);
      }
      uint64_t v64 = v62 + v61;
      uint64_t v65 = (v61 + *((_DWORD *)v60 - 2) - *((_DWORD *)v60 - 6));
      uint64_t v66 = v63 + v65;
      unint64_t v67 = (unint64_t)a4[2];
      if ((unint64_t)v60 >= v67)
      {
        uint64_t v69 = (v60 - *a4) >> 5;
        unint64_t v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 59) {
LABEL_101:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v71 = v67 - (void)*a4;
        if (v71 >> 4 > v70) {
          unint64_t v70 = v71 >> 4;
        }
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v72 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v72 = v70;
        }
        if (v72) {
          unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(v72);
        }
        else {
          uint64_t v73 = 0;
        }
        int v74 = (void *)(v72 + 32 * v69);
        void *v74 = v61;
        v74[1] = v64;
        v74[2] = v65;
        v74[3] = v66;
        uint64_t v76 = *a4;
        uint64_t v75 = a4[1];
        std::vector<int>::pointer v77 = v74;
        if (v75 != *a4)
        {
          do
          {
            long long v78 = *((_OWORD *)v75 - 1);
            *((_OWORD *)v77 - 2) = *((_OWORD *)v75 - 2);
            *((_OWORD *)v77 - 1) = v78;
            v77 -= 4;
            v75 -= 32;
          }
          while (v75 != v76);
          uint64_t v75 = *a4;
        }
        int64x2_t v68 = (char *)(v74 + 4);
        *a4 = (char *)v77;
        a4[1] = (char *)(v74 + 4);
        a4[2] = (char *)(v72 + 32 * v73);
        if (v75) {
          operator delete(v75);
        }
      }
      else
      {
        *(void *)uint64_t v60 = v61;
        *((void *)v60 + 1) = v64;
        int64x2_t v68 = v60 + 32;
        *((void *)v60 + 2) = v65;
        *((void *)v60 + 3) = v66;
      }
      a4[1] = v68;
    }
    v8 += 20;
  }
  while (v8 != a2);
}

void sub_20D357038(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t FastRewriter::merge(uint64_t **a1, uint64_t **a2, std::string *__str, uint64_t *a4, uint64_t **a5)
{
  uint64_t v231 = *MEMORY[0x263EF8340];
  float v226 = a4;
  float v227 = (int **)a5;
  float v225 = (int **)a5;
  v224[0] = &v226;
  v224[1] = (uint64_t **)&v225;
  v224[2] = a1;
  v224[3] = a2;
  v224[4] = a5;
  uint64_t v6 = **a1;
  uint64_t v5 = (*a1)[1];
  if (v5 == v6) {
    return 0;
  }
  uint64_t v8 = a2;
  char v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4);
  LODWORD(v220) = -1;
LABEL_3:
  uint64_t v12 = *v226;
  unint64_t v13 = (v226[1] - *v226) >> 5;
  unint64_t v14 = (uint64_t *)*((unsigned __int8 *)v8 + 31);
  if ((char)v14 < 0) {
    unint64_t v14 = v8[2];
  }
LABEL_5:
  if (v10 <= v13) {
    uint64_t v15 = (v226[1] - *v226) >> 5;
  }
  else {
    uint64_t v15 = v10;
  }
  while (1)
  {
    if (v10 == v15) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v16 = *(void *)(v12 + 32 * v10 + 16);
    uint64_t v17 = *v227;
    uint64_t v18 = v227[1];
    if (*v227 != v18)
    {
      uint64_t v19 = *v227;
      while (1)
      {
        unint64_t v20 = *v19;
        if (v10 == v20) {
          break;
        }
        if (v10 > v20)
        {
          uint64_t v21 = v19[1] + (uint64_t)(v19[4] - (v19[3] + v19[2]));
          goto LABEL_15;
        }
LABEL_16:
        v19 += 5;
        if (v19 == v18) {
          goto LABEL_17;
        }
      }
      uint64_t v21 = v19[1];
LABEL_15:
      v16 += v21;
      goto LABEL_16;
    }
LABEL_17:
    unint64_t v23 = v6 + 80 * v10;
    unint64_t v22 = v23 + 32;
    LODWORD(v23) = *(char *)(v23 + 55);
    if ((v23 & 0x80000000) != 0) {
      unint64_t v23 = *(void *)(v22 + 8);
    }
    else {
      unint64_t v23 = v23;
    }
    uint64_t v24 = *v225;
    std::string::size_type v25 = v225[1];
    if (*v225 == v25)
    {
      int v26 = 0;
    }
    else
    {
      int v26 = 0;
      do
      {
        if (v10 >= *v24) {
          int v26 = v24[4] + v26 - (v24[3] + v24[2]) + v24[1];
        }
        v24 += 5;
      }
      while (v24 != v25);
    }
    unint64_t v27 = v23 + v16;
    unint64_t v28 = (v26 + *(_DWORD *)v8);
    if (v23 + v16 <= v28 || (unint64_t v29 = (unint64_t)v14 + v28, (unint64_t)v14 + v28 <= v16))
    {
      if (v9)
      {
        FastRewriter::merge(std::shared_ptr<std::vector<FRReplaceInst>>,FRReplaceInst&,std::string const&,std::vector<std::array<unsigned long,4ul>> &,std::vector<std::array<int,5ul>> &)::$_5::operator()(v224, v10 - 1);
        return 1;
      }
      char v9 = 0;
      if (v27 > v28) {
        unint64_t v31 = v220;
      }
      else {
        unint64_t v31 = (v220 + 1);
      }
      unint64_t v220 = v31;
      ++v10;
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4);
      if (v10 >= v11)
      {
        if ((v220 & 0x80000000) == 0)
        {
          if (v220 >= (a4[1] - *a4) >> 5) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t result = 0;
          *(_DWORD *)uint64_t v8 = *(_DWORD *)(*a4 + 32 * v220 + 8) + *(_DWORD *)v8 - *(_DWORD *)(*a4 + 32 * v220 + 24);
          return result;
        }
        return 0;
      }
      goto LABEL_5;
    }
    unint64_t v30 = v27 - v29;
    if (v27 >= v29) {
      break;
    }
    if (v9)
    {
      unint64_t v32 = v10 - 1;
      if (v11 <= v10 - 1) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v33 = v8;
      uint64_t v34 = a4;
      uint64_t v35 = a4[1];
      uint64_t v36 = *a4 + 32 * v10;
      uint64_t v37 = v35 - (v36 + 32);
      if (v35 != v36 + 32)
      {
        memmove((void *)(*a4 + 32 * v10), (const void *)(v36 + 32), v35 - (v36 + 32));
        uint64_t v34 = a4;
      }
      v34[1] = v36 + v37;
      std::string::size_type size = v6 + 80 * v32;
      unint64_t v38 = (std::string *)(size + 8);
      LODWORD(size) = *(char *)(size + 31);
      if ((size & 0x80000000) != 0) {
        std::string::size_type size = v38->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = size;
      }
      std::string::basic_string(&v223, __str, size + *(unsigned int *)(v6 + 80 * v32), (*(_DWORD *)(v6 + 80 * v10) - *(_DWORD *)(v6 + 80 * v32)) - size, (std::allocator<char> *)&__p);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v223.__r_.__value_.__l.__data_, (const void **)(v6 + 80 * v10 + 8), (uint64_t)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(v38, (const std::string::value_type *)p_p, v41);
      uint64_t v8 = v33;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v223.__r_.__value_.__l.__data_, (const void **)v22, (uint64_t)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v42 = &__p;
      }
      else {
        int v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v43 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)(v6 + 80 * v32 + 32), (const std::string::value_type *)v42, v43);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v44 = &__p;
      }
      else {
        int v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)(v6 + 80 * v32 + 56), (const std::string::value_type *)v44, v45);
      uint64_t v46 = a4;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        uint64_t v46 = a4;
      }
      std::string::size_type v47 = HIBYTE(v223.__r_.__value_.__r.__words[2]);
      if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v47 = v223.__r_.__value_.__l.__size_;
      }
      if (*(char *)(v6 + 80 * v10 + 31) < 0) {
        uint64_t v48 = *(void *)(v6 + 80 * v10 + 16);
      }
      else {
        uint64_t v48 = *(unsigned __int8 *)(v6 + 80 * v10 + 31);
      }
      if (*(char *)(v22 + 23) < 0) {
        uint64_t v49 = *(void *)(v22 + 8);
      }
      else {
        uint64_t v49 = *(unsigned __int8 *)(v22 + 23);
      }
      unint64_t v51 = v46;
      uint64_t v50 = *v46;
      if (v32 < (v51[1] - v50) >> 5)
      {
        std::string::size_type v52 = v48 + v47;
        std::string::size_type v53 = v49 + v47;
        uint64_t v54 = v50 + 32 * v32;
        *(void *)(v54 + 8) += v52;
        *(void *)(v54 + 24) += v53;
      }
      uint64_t v55 = *a1;
      uint64_t v56 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<FRReplaceInst *,FRReplaceInst *,FRReplaceInst *>(**a1 + 80 * v10 + 80, (*a1)[1], **a1 + 80 * v10);
      for (uint64_t i = v55[1]; i != v56; std::allocator<FRReplaceInst>::destroy[abi:ne180100](i))
        i -= 80;
      v55[1] = v56;
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v223.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = **a1;
      uint64_t v5 = (*a1)[1];
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4);
      char v9 = 1;
      if (v10 >= v11) {
        goto LABEL_96;
      }
      goto LABEL_3;
    }
    ++v10;
    char v9 = 1;
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4);
    if (v10 >= v11)
    {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4);
LABEL_96:
      FastRewriter::merge(std::shared_ptr<std::vector<FRReplaceInst>>,FRReplaceInst&,std::string const&,std::vector<std::array<unsigned long,4ul>> &,std::vector<std::array<int,5ul>> &)::$_5::operator()(v224, v11 - 1);
      return 1;
    }
  }
  unint64_t v58 = (std::string *)(v8 + 1);
  if (v9)
  {
    unint64_t v59 = v10 - 1;
    if (v11 <= v10 - 1) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v60 = a4;
    if (v13 <= v59) {
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v61 = *(void *)(v12 + 32 * v59 + 16);
    while (1)
    {
      if (v17 == v18)
      {
        int v86 = (std::string *)*a4;
        uint64_t v85 = a4[1];
        unint64_t v87 = (v85 - *a4) >> 5;
        if (v87 <= v59) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v221 = v10 - 1;
        std::string::size_type v88 = *(&v86->__r_.__value_.__l.__size_ + 4 * v59);
        std::string::size_type v89 = *a5;
        unint64_t v90 = a5[1];
        int v212 = v8;
        if (*a5 == v90)
        {
          if (v87 > v10)
          {
            std::string v92 = (std::string::size_type *)((char *)v86 + 32 * v10);
            std::string::size_type v93 = *v92;
            goto LABEL_168;
          }
        }
        else
        {
          unint64_t v91 = *a5;
          do
          {
            if (v221 == *(_DWORD *)v91) {
              v88 += *((int *)v91 + 2);
            }
            unint64_t v91 = (uint64_t *)((char *)v91 + 20);
          }
          while (v91 != v90);
          if (v87 > v10)
          {
            std::string v92 = (std::string::size_type *)((char *)v86 + 32 * v10);
            std::string::size_type v93 = *v92;
            do
            {
              if (v10 == *(_DWORD *)v89) {
                v93 += *((int *)v89 + 1);
              }
              std::string::size_type v89 = (uint64_t *)((char *)v89 + 20);
            }
            while (v89 != v90);
LABEL_168:
            __stra = v58;
            long long v109 = (std::string *)((char *)v86 + 32 * v10);
            size_t v110 = v85 - ((void)v109 + 32);
            if (v110)
            {
              size_t v213 = v110;
              uint64_t v210 = (std::string *)((char *)v86 + 32 * v10);
              memmove(v92, &v109[1].__r_.__value_.__r.__words[1], v110);
              size_t v110 = v213;
              long long v109 = v210;
              uint64_t v60 = a4;
              int v86 = (std::string *)*a4;
            }
            uint64_t v111 = (uint64_t)v109 + v110;
            v60[1] = v111;
            uint64_t v218 = v86;
            if (v221 >= (v111 - (uint64_t)v86) >> 5) {
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            }
            int v214 = v93 - v88;
            std::string::basic_string(&v223, __str, v88, v93 - v88, (std::allocator<char> *)&__p);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v223.__r_.__value_.__l.__data_, (const void **)(v6 + 80 * v10 + 8), (uint64_t)&__p);
            unint64_t v112 = (void **)(v6 + 80 * v221 + 8);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v113 = &__p;
            }
            else {
              std::string v113 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v114 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v114 = __p.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)(v6 + 80 * v221 + 8), (const std::string::value_type *)v113, v114);
            long long v115 = v218;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              long long v115 = v218;
            }
            int v209 = (std::string::size_type *)((char *)v115 + 32 * v221);
            std::string::size_type __n = (v28 - v61);
            if (*(char *)(v22 + 23) < 0) {
              std::string v116 = *(uint64_t **)(v22 + 8);
            }
            else {
              LODWORD(v116) = *(unsigned __int8 *)(v22 + 23);
            }
            int v117 = v212;
            int v118 = v116 + v214;
            LODWORD(v116) = *((unsigned __int8 *)v212 + 55);
            if ((char)v116 < 0) {
              std::string v116 = v212[5];
            }
            int v119 = v118 + v116;
            LODWORD(v116) = *((unsigned __int8 *)v212 + 31);
            if ((char)v116 < 0) {
              std::string v116 = v212[2];
            }
            int v208 = v119 - v116;
            std::string::size_type v219 = (std::string *)(v6 + 80 * v221 + 32);
            if ((int)__n >= 1)
            {
              std::string::basic_string(&__p, (const std::string *)(v6 + 80 * v221 + 32), 0, __n, (std::allocator<char> *)&v229);
              char v120 = *((unsigned char *)v212 + 55);
              if (v120 >= 0) {
                uint64_t v121 = (const std::string::value_type *)(v212 + 4);
              }
              else {
                uint64_t v121 = (const std::string::value_type *)v212[4];
              }
              if (v120 >= 0) {
                std::string::size_type v122 = *((unsigned __int8 *)v212 + 55);
              }
              else {
                std::string::size_type v122 = (std::string::size_type)v212[5];
              }
              std::string v123 = std::string::append(&__p, v121, v122);
              std::string v124 = a5;
              std::string::size_type v125 = v123->__r_.__value_.__r.__words[0];
              v230.__r_.__value_.__r.__words[0] = v123->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v123->__r_.__value_.__r.__words[1] + 7);
              char v126 = HIBYTE(v123->__r_.__value_.__r.__words[2]);
              v123->__r_.__value_.__l.__size_ = 0;
              v123->__r_.__value_.__r.__words[2] = 0;
              v123->__r_.__value_.__r.__words[0] = 0;
              uint64_t v127 = v6 + 80 * v221 + 32;
              if (*(char *)(v6 + 80 * v221 + 55) < 0)
              {
                operator delete(v219->__r_.__value_.__l.__data_);
                uint64_t v127 = v6 + 80 * v221 + 32;
              }
              *(void *)uint64_t v127 = v125;
              *(void *)(v127 + 8) = v230.__r_.__value_.__r.__words[0];
              *(void *)(v127 + 15) = *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7);
              *(unsigned char *)(v127 + 23) = v126;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (*(char *)(v6 + 80 * v10 + 31) < 0) {
                uint64_t v128 = *(void *)(v6 + 80 * v10 + 16);
              }
              else {
                LODWORD(v128) = *(unsigned __int8 *)(v6 + 80 * v10 + 31);
              }
              int v153 = v128 + v214;
              v209[1] += v153;
              v209[3] += v153 + v208;
              int v154 = *((unsigned __int8 *)v212 + 55);
              int v155 = *((unsigned __int8 *)v212 + 31);
              if ((v155 & 0x80u) != 0) {
                int v155 = *((_DWORD *)v212 + 4);
              }
              if ((v154 & 0x80u) != 0) {
                int v154 = *((_DWORD *)v212 + 10);
              }
              int v140 = v154 - v155;
              unint64_t v141 = (int *)a5[1];
              uint64_t v156 = (int *)a5[2];
              if (v141 < v156) {
                goto LABEL_236;
              }
              unint64_t v158 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v141 - (char *)*a5) >> 2);
              unint64_t v159 = v158 + 1;
              if (v158 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v160 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v156 - (char *)*a5) >> 2);
              if (2 * v160 > v159) {
                unint64_t v159 = 2 * v160;
              }
              if (v160 >= 0x666666666666666) {
                unint64_t v161 = 0xCCCCCCCCCCCCCCCLL;
              }
              else {
                unint64_t v161 = v159;
              }
              if (v161) {
                unint64_t v161 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v161);
              }
              else {
                uint64_t v162 = 0;
              }
              unint64_t v174 = v161 + 20 * v158;
              unint64_t v175 = v161 + 20 * v162;
              *(void *)unint64_t v174 = v221;
              *(void *)(v174 + 8) = 0;
              *(_DWORD *)(v174 + 16) = v140;
              unint64_t v157 = v174 + 20;
              BOOL v177 = *a5;
              uint64_t v176 = a5[1];
              if (v176 != *a5)
              {
                do
                {
                  long long v178 = *(_OWORD *)((char *)v176 - 20);
                  *(_DWORD *)(v174 - std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((_DWORD *)v176 - 1);
                  *(_OWORD *)(v174 - 20) = v178;
                  v174 -= 20;
                  uint64_t v176 = (uint64_t *)((char *)v176 - 20);
                }
                while (v176 != v177);
                goto LABEL_274;
              }
              goto LABEL_275;
            }
            *(_DWORD *)(v6 + 80 * v221) -= v61 - v28;
            std::string::basic_string(&__p, __stra, 0, v61 - v28, (std::allocator<char> *)&v229);
            int v129 = *(char *)(v6 + 80 * v221 + 31);
            if (v129 >= 0) {
              unint64_t v130 = (const std::string::value_type *)(v6 + 80 * v221 + 8);
            }
            else {
              unint64_t v130 = (const std::string::value_type *)*v112;
            }
            if (v129 >= 0) {
              std::string::size_type v131 = *(unsigned __int8 *)(v6 + 80 * v221 + 31);
            }
            else {
              std::string::size_type v131 = *(void *)(v6 + 80 * v221 + 16);
            }
            uint64_t v132 = std::string::append(&__p, v130, v131);
            std::string::size_type v133 = (void *)v132->__r_.__value_.__r.__words[0];
            v230.__r_.__value_.__r.__words[0] = v132->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v132->__r_.__value_.__r.__words[1] + 7);
            char v134 = HIBYTE(v132->__r_.__value_.__r.__words[2]);
            v132->__r_.__value_.__l.__size_ = 0;
            v132->__r_.__value_.__r.__words[2] = 0;
            v132->__r_.__value_.__r.__words[0] = 0;
            int v135 = (std::string *)(v6 + 80 * v221 + 32);
            if (*(char *)(v6 + 80 * v221 + 31) < 0)
            {
              operator delete(*v112);
              int v135 = (std::string *)(v6 + 80 * v221 + 32);
            }
            char *v112 = v133;
            *(void *)(v6 + 80 * v221 + 16) = v230.__r_.__value_.__r.__words[0];
            *(void *)(v6 + 80 * v221 + 23) = *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7);
            *(unsigned char *)(v6 + 80 * v221 + 31) = v134;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              int v135 = (std::string *)(v6 + 80 * v221 + 32);
            }
            std::string::operator=(v135, (const std::string *)(v212 + 4));
            std::string v124 = a5;
            int v117 = v212;
            std::string::size_type v136 = v209[1] + v208;
            *v209 += (int)__n;
            v209[1] = v136;
            std::string::size_type v137 = v209[3] + v208;
            v209[2] += (int)__n;
            v209[3] = v137;
            int v138 = *((unsigned __int8 *)v212 + 55);
            int v139 = *((unsigned __int8 *)v212 + 31);
            if ((v139 & 0x80u) != 0) {
              int v139 = *((_DWORD *)v212 + 4);
            }
            if ((v138 & 0x80u) != 0) {
              int v138 = *((_DWORD *)v212 + 10);
            }
            int v140 = v138 - v139;
            unint64_t v141 = (int *)a5[1];
            uint64_t v142 = (int *)a5[2];
            if (v141 < v142)
            {
LABEL_236:
              *(void *)unint64_t v141 = v221;
              *((void *)v141 + 1) = 0;
              unint64_t v157 = (unint64_t)(v141 + 5);
              v141[4] = v140;
            }
            else
            {
              unint64_t v143 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v141 - (char *)*a5) >> 2);
              unint64_t v144 = v143 + 1;
              if (v143 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v145 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v142 - (char *)*a5) >> 2);
              if (2 * v145 > v144) {
                unint64_t v144 = 2 * v145;
              }
              if (v145 >= 0x666666666666666) {
                unint64_t v146 = 0xCCCCCCCCCCCCCCCLL;
              }
              else {
                unint64_t v146 = v144;
              }
              if (v146) {
                unint64_t v146 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v146);
              }
              else {
                uint64_t v147 = 0;
              }
              unint64_t v174 = v146 + 20 * v143;
              unint64_t v175 = v146 + 20 * v147;
              *(void *)unint64_t v174 = v221;
              *(void *)(v174 + 8) = 0;
              *(_DWORD *)(v174 + 16) = v140;
              unint64_t v157 = v174 + 20;
              long long v184 = *a5;
              uint64_t v176 = a5[1];
              if (v176 != *a5)
              {
                do
                {
                  long long v185 = *(_OWORD *)((char *)v176 - 20);
                  *(_DWORD *)(v174 - std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((_DWORD *)v176 - 1);
                  *(_OWORD *)(v174 - 20) = v185;
                  v174 -= 20;
                  uint64_t v176 = (uint64_t *)((char *)v176 - 20);
                }
                while (v176 != v184);
LABEL_274:
                uint64_t v176 = *v124;
              }
LABEL_275:
              *std::string v124 = (uint64_t *)v174;
              v124[1] = (uint64_t *)v157;
              v124[2] = (uint64_t *)v175;
              if (v176) {
                operator delete(v176);
              }
            }
            v124[1] = (uint64_t *)v157;
            if (*(char *)(v22 + 23) < 0)
            {
              unint64_t v186 = *(void *)(v22 + 8);
              BOOL v189 = v186 > v30;
              unint64_t v188 = v10 - 1;
              if (v189)
              {
LABEL_283:
                std::string::basic_string(&__p, (const std::string *)v22, v29 - v27 + v186, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v230);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string v190 = &__p;
                }
                else {
                  std::string v190 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v191 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v191 = __p.__r_.__value_.__l.__size_;
                }
                std::string::append(v219, (const std::string::value_type *)v190, v191);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
            else
            {
              unint64_t v186 = *(unsigned __int8 *)(v22 + 23);
              BOOL v187 = v30 >= v186;
              unint64_t v188 = v10 - 1;
              if (!v187) {
                goto LABEL_283;
              }
            }
            std::operator+<char>();
            std::string v192 = std::string::append(&v229, "/");
            long long v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
            v230.__r_.__value_.__r.__words[2] = v192->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v193;
            v192->__r_.__value_.__l.__size_ = 0;
            v192->__r_.__value_.__r.__words[2] = 0;
            v192->__r_.__value_.__r.__words[0] = 0;
            std::string v196 = (const std::string::value_type *)v117[7];
            std::string v195 = v117 + 7;
            std::string v194 = v196;
            int v197 = *((char *)v195 + 23);
            if (v197 >= 0) {
              std::string v198 = (const std::string::value_type *)v195;
            }
            else {
              std::string v198 = v194;
            }
            if (v197 >= 0) {
              std::string::size_type v199 = *((unsigned __int8 *)v195 + 23);
            }
            else {
              std::string::size_type v199 = (std::string::size_type)v195[1];
            }
            std::string::size_type v200 = std::string::append(&v230, v198, v199);
            long long v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v200->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v201;
            v200->__r_.__value_.__l.__size_ = 0;
            v200->__r_.__value_.__r.__words[2] = 0;
            v200->__r_.__value_.__r.__words[0] = 0;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v202 = &__p;
            }
            else {
              std::string v202 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v203 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v203 = __p.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)(v6 + 80 * v188 + 56), (const std::string::value_type *)v202, v203);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v230.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v229.__r_.__value_.__l.__data_);
            }
            std::string v204 = *a1;
            uint64_t v205 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<FRReplaceInst *,FRReplaceInst *,FRReplaceInst *>(**a1 + 80 * v10 + 80, (*a1)[1], **a1 + 80 * v10);
            for (uint64_t j = v204[1]; j != v205; std::allocator<FRReplaceInst>::destroy[abi:ne180100](j))
              j -= 80;
            v204[1] = v205;
LABEL_312:
            if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v223.__r_.__value_.__l.__data_);
            }
            return 1;
          }
        }
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v62 = *v17;
      if (v59 == v62)
      {
        uint64_t v63 = v17[1];
      }
      else
      {
        if (v59 <= v62) {
          goto LABEL_95;
        }
        uint64_t v63 = v17[1] + (uint64_t)(v17[4] - (v17[3] + v17[2]));
      }
      v61 += v63;
LABEL_95:
      v17 += 5;
    }
  }
  std::operator+<char>();
  if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v64 = &v223;
  }
  else {
    uint64_t v64 = (std::string *)v223.__r_.__value_.__r.__words[0];
  }
  if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v65 = HIBYTE(v223.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v65 = v223.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)(v6 + 80 * v10 + 56), (const std::string::value_type *)v64, v65);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223.__r_.__value_.__l.__data_);
  }
  std::string::size_type v66 = (v28 - v16);
  if ((v66 & 0x80000000) != 0)
  {
    *(_DWORD *)(v6 + 80 * v10) += v66;
    std::string::basic_string(&v223, (const std::string *)(v8 + 1), 0, -(int)v66, (std::allocator<char> *)&__p);
    uint64_t v94 = v6 + 80 * v10 + 8;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v223.__r_.__value_.__l.__data_, (const void **)v94, (uint64_t)&__p);
    if (*(char *)(v94 + 23) < 0) {
      operator delete(*(void **)v94);
    }
    long long v95 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v94 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v94 = v95;
    uint64_t v96 = (uint64_t *)*((unsigned __int8 *)v8 + 31);
    if ((char)v96 < 0) {
      uint64_t v96 = v8[2];
    }
    std::string::basic_string(&__p, (const std::string *)v22, (std::string::size_type)v96 + (int)v66, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v229);
    int v97 = *((char *)v8 + 55);
    if (v97 >= 0) {
      uint64_t v98 = (const std::string::value_type *)(v8 + 4);
    }
    else {
      uint64_t v98 = (const std::string::value_type *)v8[4];
    }
    if (v97 >= 0) {
      std::string::size_type v99 = *((unsigned __int8 *)v8 + 55);
    }
    else {
      std::string::size_type v99 = (std::string::size_type)v8[5];
    }
    unint64_t v100 = std::string::insert(&__p, 0, v98, v99);
    std::string::size_type v101 = v100->__r_.__value_.__r.__words[0];
    v230.__r_.__value_.__r.__words[0] = v100->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v100->__r_.__value_.__r.__words[1] + 7);
    char v102 = HIBYTE(v100->__r_.__value_.__r.__words[2]);
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(v22 + 23) < 0) {
      operator delete(*(void **)v22);
    }
    *(void *)unint64_t v22 = v101;
    *(void *)(v22 + 8) = v230.__r_.__value_.__r.__words[0];
    *(void *)(v22 + 15) = *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7);
    *(unsigned char *)(v22 + 23) = v102;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v103 = *((unsigned __int8 *)v8 + 55);
    int v104 = *((unsigned __int8 *)v8 + 31);
    if ((v104 & 0x80u) != 0) {
      int v104 = *((_DWORD *)v8 + 4);
    }
    if ((v103 & 0x80u) != 0) {
      int v103 = *((_DWORD *)v8 + 10);
    }
    int v105 = v103 - v104;
    uint64_t v106 = (int *)a5[1];
    unint64_t v107 = (unint64_t)a5[2];
    if ((unint64_t)v106 >= v107)
    {
      unint64_t v163 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v106 - (char *)*a5) >> 2);
      unint64_t v164 = v163 + 1;
      if (v163 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v165 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v107 - (void)*a5) >> 2);
      if (2 * v165 > v164) {
        unint64_t v164 = 2 * v165;
      }
      if (v165 >= 0x666666666666666) {
        unint64_t v166 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v166 = v164;
      }
      if (v166) {
        unint64_t v166 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v166);
      }
      else {
        uint64_t v167 = 0;
      }
      uint64_t v179 = (_DWORD *)(v166 + 20 * v163);
      unint64_t v180 = v166 + 20 * v167;
      _DWORD *v179 = v10;
      v179[1] = v66;
      v179[2] = 0;
      v179[3] = v66;
      v179[4] = v105;
      uint64_t v108 = v179 + 5;
      long long v182 = *a5;
      long long v181 = a5[1];
      if (v181 != *a5)
      {
        do
        {
          long long v183 = *(_OWORD *)((char *)v181 - 20);
          *(v179 - 1) = *((_DWORD *)v181 - 1);
          *(_OWORD *)(v179 - 5) = v183;
          v179 -= 5;
          long long v181 = (uint64_t *)((char *)v181 - 20);
        }
        while (v181 != v182);
        long long v181 = *a5;
      }
      *a5 = (uint64_t *)v179;
      a5[1] = (uint64_t *)v108;
      a5[2] = (uint64_t *)v180;
      if (v181) {
        operator delete(v181);
      }
    }
    else
    {
      *uint64_t v106 = v10;
      v106[1] = v66;
      v106[2] = 0;
      v106[3] = v66;
      uint64_t v108 = v106 + 5;
      v106[4] = v105;
    }
    a5[1] = (uint64_t *)v108;
    goto LABEL_312;
  }
  std::string::basic_string(&__p, (const std::string *)v22, 0, v66, (std::allocator<char> *)&v230);
  int v67 = *((char *)v8 + 55);
  if (v67 >= 0) {
    int64x2_t v68 = (const std::string::value_type *)(v8 + 4);
  }
  else {
    int64x2_t v68 = (const std::string::value_type *)v8[4];
  }
  if (v67 >= 0) {
    std::string::size_type v69 = *((unsigned __int8 *)v8 + 55);
  }
  else {
    std::string::size_type v69 = (std::string::size_type)v8[5];
  }
  unint64_t v70 = std::string::append(&__p, v68, v69);
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  unint64_t v72 = (uint64_t *)*((unsigned __int8 *)v8 + 31);
  if ((char)v72 < 0) {
    unint64_t v72 = v8[2];
  }
  std::string::basic_string(&v230, (const std::string *)v22, (std::string::size_type)v72 + v66, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v228);
  if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v73 = &v230;
  }
  else {
    uint64_t v73 = (std::string *)v230.__r_.__value_.__r.__words[0];
  }
  if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v74 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v74 = v230.__r_.__value_.__l.__size_;
  }
  uint64_t v75 = std::string::append(&v223, (const std::string::value_type *)v73, v74);
  std::string::size_type v76 = v75->__r_.__value_.__r.__words[0];
  v229.__r_.__value_.__r.__words[0] = v75->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v229.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v75->__r_.__value_.__r.__words[1] + 7);
  char v77 = HIBYTE(v75->__r_.__value_.__r.__words[2]);
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  long long v78 = (void **)a5;
  if (*(char *)(v22 + 23) < 0) {
    operator delete(*(void **)v22);
  }
  *(void *)unint64_t v22 = v76;
  *(void *)(v22 + 8) = v229.__r_.__value_.__r.__words[0];
  *(void *)(v22 + 15) = *(std::string::size_type *)((char *)v229.__r_.__value_.__r.__words + 7);
  *(unsigned char *)(v22 + 23) = v77;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v230.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v79 = *((unsigned __int8 *)v8 + 55);
  int v80 = *((unsigned __int8 *)v8 + 31);
  if ((v80 & 0x80u) != 0) {
    int v80 = *((_DWORD *)v8 + 4);
  }
  if ((v79 & 0x80u) != 0) {
    int v79 = *((_DWORD *)v8 + 10);
  }
  int v81 = v79 - v80;
  std::string v82 = (int *)a5[1];
  unint64_t v83 = (int *)a5[2];
  if (v82 >= v83)
  {
    unint64_t v148 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v82 - (char *)*a5) >> 2);
    unint64_t v149 = v148 + 1;
    if (v148 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v150 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v83 - (char *)*a5) >> 2);
    if (2 * v150 > v149) {
      unint64_t v149 = 2 * v150;
    }
    if (v150 >= 0x666666666666666) {
      unint64_t v151 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v151 = v149;
    }
    if (v151)
    {
      unint64_t v151 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v151);
      long long v78 = (void **)a5;
    }
    else
    {
      uint64_t v152 = 0;
    }
    unint64_t v168 = v151 + 20 * v148;
    unint64_t v169 = v151 + 20 * v152;
    *(_DWORD *)unint64_t v168 = v10;
    *(_DWORD *)(v168 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *(void *)(v168 + 8) = 0;
    *(_DWORD *)(v168 + 16) = v81;
    BOOL v170 = (void *)(v168 + 20);
    unsigned int v172 = (char *)*v78;
    uint64_t v171 = (char *)v78[1];
    if (v171 != *v78)
    {
      do
      {
        long long v173 = *(_OWORD *)(v171 - 20);
        *(_DWORD *)(v168 - std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((_DWORD *)v171 - 1);
        *(_OWORD *)(v168 - 20) = v173;
        v168 -= 20;
        v171 -= 20;
      }
      while (v171 != v172);
      uint64_t v171 = (char *)*v78;
    }
    *long long v78 = (void *)v168;
    v78[1] = v170;
    v78[2] = (void *)v169;
    if (v171) {
      operator delete(v171);
    }
    v78[1] = v170;
    return 1;
  }
  *std::string v82 = v10;
  v82[1] = 0;
  *((void *)v82 + 1) = 0;
  v82[4] = v81;
  uint64_t result = 1;
  a5[1] = (uint64_t *)(v82 + 5);
  return result;
}

void sub_20D3582D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FastRewriter::apply_offsets_update(uint64_t result, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  if (a3 != a4)
  {
    unint64_t v4 = (a2 - result) >> 5;
    do
    {
      unint64_t v5 = *a3;
      if ((v5 & 0x80000000) == 0 && v4 > v5)
      {
        uint64_t v6 = (int64x2_t *)(result + 32 * v5);
        int32x4_t v7 = *(int32x4_t *)(a3 + 1);
        int64x2_t v8 = vaddw_high_s32(v6[1], v7);
        int64x2_t *v6 = vaddw_s32(*v6, *(int32x2_t *)v7.i8);
        v6[1] = v8;
        if (v4 - 1 != v5)
        {
          signed __int32 v9 = vaddq_s32(vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_s32(vdupq_laneq_s32(v7, 3), vaddq_s32(vdupq_laneq_s32(v7, 2), v7)), 1), v7).u32[0];
          if (v9)
          {
            int v10 = v5 + 1;
            if (v4 > v10)
            {
              uint64_t v11 = v10;
              int64x2_t v12 = vdupq_n_s64(v9);
              unint64_t v13 = v4 - v10;
              unint64_t v14 = (int64x2_t *)(result + 16 + 32 * v11);
              do
              {
                *unint64_t v14 = vaddq_s64(*v14, v12);
                v14 += 2;
                --v13;
              }
              while (v13);
            }
          }
        }
      }
      a3 += 5;
    }
    while (a3 != a4);
  }
  return result;
}

void std::vector<FRReplaceInst>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<FRReplaceInst>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<FRReplaceInst>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void FastRewriter::merge(std::shared_ptr<std::vector<FRReplaceInst>>,FRReplaceInst&,std::string const&,std::vector<std::array<unsigned long,4ul>> &,std::vector<std::array<int,5ul>> &)::$_5::operator()(uint64_t ***a1, unint64_t a2)
{
  v75[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1[2];
  uint64_t v3 = *v2;
  if (0xCCCCCCCCCCCCCCCDLL * ((v2[1] - *v2) >> 4) <= a2) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = ***a1;
  if (a2 >= ((**a1)[1] - v6) >> 5) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v7 = *(void *)(v6 + 32 * a2 + 16);
  int64x2_t v8 = (int **)(*a1)[1];
  signed __int32 v9 = *v8;
  int v10 = v8[1];
  while (v9 != v10)
  {
    unint64_t v11 = *v9;
    if (v11 == a2)
    {
      uint64_t v12 = v9[1];
    }
    else
    {
      if (v11 >= a2) {
        goto LABEL_10;
      }
      uint64_t v12 = v9[1] + (uint64_t)(v9[4] - (v9[3] + v9[2]));
    }
    v7 += v12;
LABEL_10:
    v9 += 5;
  }
  uint64_t v13 = v3 + 80 * a2;
  unint64_t v14 = (std::string *)(v13 + 32);
  int v15 = *(char *)(v13 + 55);
  if (v15 < 0) {
    std::string::size_type size = v14->__r_.__value_.__l.__size_;
  }
  else {
    LODWORD(size) = v15;
  }
  uint64_t v17 = a1[3];
  uint64_t v18 = (int **)*a1[1];
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  if (v19 == v20)
  {
    int v21 = 0;
  }
  else
  {
    int v21 = 0;
    do
    {
      if (*v19 <= a2) {
        int v21 = v19[4] + v21 - (v19[3] + v19[2]) + v19[1];
      }
      v19 += 5;
    }
    while (v19 != v20);
  }
  unint64_t v22 = (v21 + *(_DWORD *)v17);
  if (*((char *)v17 + 31) < 0) {
    unint64_t v23 = v17[2];
  }
  else {
    LODWORD(v23) = *((unsigned __int8 *)v17 + 31);
  }
  int v24 = v22 - (size + v7);
  if (v22 >= v7)
  {
    int v25 = 0;
  }
  else
  {
    int v25 = v7 - v22;
    *(_DWORD *)(v3 + 80 * a2) -= v7 - v22;
  }
  int v26 = v24 + v23;
  unint64_t v27 = (void **)a1[4];
  if (*((char *)v17 + 55) < 0) {
    unint64_t v28 = v17[5];
  }
  else {
    LODWORD(v28) = *((unsigned __int8 *)v17 + 55);
  }
  unint64_t v71 = v22;
  std::string __str = v14;
  if (*((char *)v17 + 31) < 0) {
    uint64_t v17 = (uint64_t **)v17[2];
  }
  else {
    LODWORD(v17) = *((unsigned __int8 *)v17 + 31);
  }
  int v29 = -v25;
  int v30 = v28 - v17 + v26;
  unint64_t v32 = v27[1];
  unint64_t v31 = (unint64_t)v27[2];
  if ((unint64_t)v32 >= v31)
  {
    unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v32 - (unsigned char *)*v27) >> 2);
    unint64_t v35 = v34 + 1;
    if (v34 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v31 - (void)*v27) >> 2);
    if (2 * v36 > v35) {
      unint64_t v35 = 2 * v36;
    }
    if (v36 >= 0x666666666666666) {
      unint64_t v37 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v37 = v35;
    }
    if (v37) {
      unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v37);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v39 = (_DWORD *)(v37 + 20 * v34);
    unint64_t v40 = v37 + 20 * v38;
    *uint64_t v39 = a2;
    v39[1] = v29;
    unint64_t v39[2] = v26;
    v39[3] = v29;
    v39[4] = v30;
    unint64_t v33 = v39 + 5;
    int v42 = (char *)*v27;
    std::string::size_type v41 = (char *)v27[1];
    if (v41 != *v27)
    {
      do
      {
        long long v43 = *(_OWORD *)(v41 - 20);
        *(v39 - 1) = *((_DWORD *)v41 - 1);
        *(_OWORD *)(v39 - 5) = v43;
        v39 -= 5;
        v41 -= 20;
      }
      while (v41 != v42);
      std::string::size_type v41 = (char *)*v27;
    }
    *unint64_t v27 = v39;
    v27[1] = v33;
    void v27[2] = (void *)v40;
    if (v41) {
      operator delete(v41);
    }
  }
  else
  {
    *unint64_t v32 = a2;
    v32[1] = v29;
    uint64_t v32[2] = v26;
    v32[3] = v29;
    unint64_t v33 = v32 + 5;
    v32[4] = v30;
  }
  v27[1] = v33;
  int v44 = a1[3];
  LODWORD(v45) = *((char *)v44 + 31);
  if ((v45 & 0x80000000) != 0) {
    unint64_t v46 = (unint64_t)v44[2];
  }
  else {
    unint64_t v46 = *((unsigned __int8 *)v44 + 31);
  }
  if (v46 > v25)
  {
    std::string::basic_string(&v73, (const std::string *)(v44 + 1), 0, v25, (std::allocator<char> *)&v74);
    uint64_t v47 = v3 + 80 * a2;
    uint64_t v50 = *(const std::string::value_type **)(v47 + 8);
    uint64_t v49 = v47 + 8;
    uint64_t v48 = v50;
    int v51 = *(char *)(v49 + 23);
    if (v51 >= 0) {
      std::string::size_type v52 = (const std::string::value_type *)v49;
    }
    else {
      std::string::size_type v52 = v48;
    }
    if (v51 >= 0) {
      std::string::size_type v53 = *(unsigned __int8 *)(v49 + 23);
    }
    else {
      std::string::size_type v53 = *(void *)(v49 + 8);
    }
    uint64_t v54 = std::string::append(&v73, v52, v53);
    std::string::size_type v55 = v54->__r_.__value_.__r.__words[0];
    v75[0] = v54->__r_.__value_.__l.__size_;
    *(void *)((char *)v75 + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
    char v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(v49 + 23) < 0) {
      operator delete(*(void **)v49);
    }
    *(void *)uint64_t v49 = v55;
    *(void *)(v49 + 8) = v75[0];
    *(void *)(v49 + 15) = *(void *)((char *)v75 + 7);
    *(unsigned char *)(v49 + 23) = v56;
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    int v44 = a1[3];
    LOBYTE(v45) = *((unsigned char *)v44 + 31);
  }
  if ((v45 & 0x80) != 0)
  {
    unint64_t v45 = (unint64_t)v44[2];
    if (v45 > v26) {
      goto LABEL_68;
    }
  }
  else if (v26 < (unint64_t)v45)
  {
    unint64_t v45 = v45;
LABEL_68:
    std::string::basic_string(&v73, (const std::string *)(v44 + 1), v45 - v26, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v75);
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v57 = &v73;
    }
    else {
      int v57 = (std::string *)v73.__r_.__value_.__r.__words[0];
    }
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v58 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v58 = v73.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(v3 + 80 * a2 + 8), (const std::string::value_type *)v57, v58);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
  }
  if (v71 >= v7)
  {
    std::string::basic_string(&v73, __str, 0, v71 - v7, (std::allocator<char> *)&v74);
    unint64_t v59 = a1[3];
    unint64_t v62 = (const std::string::value_type *)v59[4];
    uint64_t v60 = v59 + 4;
    uint64_t v61 = v62;
    int v63 = *((char *)v60 + 23);
    if (v63 >= 0) {
      uint64_t v64 = (const std::string::value_type *)v60;
    }
    else {
      uint64_t v64 = v61;
    }
    if (v63 >= 0) {
      std::string::size_type v65 = *((unsigned __int8 *)v60 + 23);
    }
    else {
      std::string::size_type v65 = (std::string::size_type)v60[1];
    }
    std::string::size_type v66 = std::string::append(&v73, v64, v65);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v75[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v75 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    char v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str->__r_.__value_.__l.__data_);
    }
    __str->__r_.__value_.__r.__words[0] = v67;
    __str->__r_.__value_.__l.__size_ = v75[0];
    *(std::string::size_type *)((char *)&__str->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v75 + 7);
    *((unsigned char *)&__str->__r_.__value_.__s + 23) = v68;
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::operator=(__str, (const std::string *)(a1[3] + 4));
  }
  std::operator+<char>();
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v69 = &v73;
  }
  else {
    std::string::size_type v69 = (std::string *)v73.__r_.__value_.__r.__words[0];
  }
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v70 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v70 = v73.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)(v3 + 80 * a2 + 56), (const std::string::value_type *)v69, v70);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
}

void sub_20D358AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<FRReplaceInst *,FRReplaceInst *,FRReplaceInst *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v5;
      uint64_t v6 = (void **)(a3 + 8);
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      long long v7 = *(_OWORD *)(v5 + 8);
      *(void *)(a3 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v6 = v7;
      *(unsigned char *)(v5 + 31) = 0;
      *(unsigned char *)(v5 + 8) = 0;
      int64x2_t v8 = (void **)(a3 + 32);
      if (*(char *)(a3 + 55) < 0) {
        operator delete(*v8);
      }
      long long v9 = *(_OWORD *)(v5 + 32);
      *(void *)(a3 + 48) = *(void *)(v5 + 48);
      *(_OWORD *)int64x2_t v8 = v9;
      *(unsigned char *)(v5 + 55) = 0;
      *(unsigned char *)(v5 + 32) = 0;
      int v10 = (void **)(a3 + 56);
      if (*(char *)(a3 + 79) < 0) {
        operator delete(*v10);
      }
      long long v11 = *(_OWORD *)(v5 + 56);
      *(void *)(a3 + 72) = *(void *)(v5 + 72);
      *(_OWORD *)int v10 = v11;
      *(unsigned char *)(v5 + 79) = 0;
      *(unsigned char *)(v5 + 56) = 0;
      a3 += 80;
      v5 += 80;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<FRReplaceInst>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 / 80;
  unint64_t v9 = *a1 + 80 * (v7 / 80);
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v5) >> 4) + 1;
    if (v34 > 0x333333333333333) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v5) >> 4);
    if (2 * v36 > v34) {
      unint64_t v34 = 2 * v36;
    }
    if (v36 >= 0x199999999999999) {
      unint64_t v37 = 0x333333333333333;
    }
    else {
      unint64_t v37 = v34;
    }
    uint64_t v67 = v11;
    if (v37)
    {
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FRReplaceInst>>(v37);
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v38 = 0;
    }
    uint64_t v40 = (uint64_t)&v39[80 * v8];
    uint64_t v64 = v39;
    *(void *)&long long v65 = v40;
    *((void *)&v65 + 1) = v40;
    std::string::size_type v66 = &v39[80 * v38];
    if (v8 == v38)
    {
      if (v7 < 1)
      {
        if (v5 == a2) {
          unint64_t v43 = 1;
        }
        else {
          unint64_t v43 = 2 * v8;
        }
        uint64_t v71 = v11;
        int v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FRReplaceInst>>(v43);
        uint64_t v46 = v65;
        if (*((void *)&v65 + 1) == (void)v65)
        {
          int64x2_t v52 = vdupq_n_s64(v65);
          uint64_t v47 = (uint64_t)&v44[80 * (v43 >> 2)];
        }
        else
        {
          uint64_t v47 = (uint64_t)&v44[80 * (v43 >> 2) + *((void *)&v65 + 1) - v65];
          uint64_t v48 = &v44[80 * (v43 >> 2)];
          do
          {
            *(_DWORD *)uint64_t v48 = *(_DWORD *)v46;
            long long v49 = *(_OWORD *)(v46 + 8);
            *((void *)v48 + 3) = *(void *)(v46 + 24);
            *(_OWORD *)(v48 + 8) = v49;
            *(void *)(v46 + 16) = 0;
            *(void *)(v46 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
            *(void *)(v46 + 8) = 0;
            long long v50 = *(_OWORD *)(v46 + 32);
            *((void *)v48 + 6) = *(void *)(v46 + 48);
            *((_OWORD *)v48 + 2) = v50;
            *(void *)(v46 + 40) = 0;
            *(void *)(v46 + 48) = 0;
            *(void *)(v46 + 32) = 0;
            long long v51 = *(_OWORD *)(v46 + 56);
            *((void *)v48 + 9) = *(void *)(v46 + 72);
            *(_OWORD *)(v48 + 56) = v51;
            *(void *)(v46 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
            *(void *)(v46 + 72) = 0;
            *(void *)(v46 + 56) = 0;
            v48 += 80;
            v46 += 80;
          }
          while (v48 != (char *)v47);
          int64x2_t v52 = (int64x2_t)v65;
        }
        std::string::size_type v53 = v66;
        char v68 = v64;
        uint64_t v64 = v44;
        *(void *)&long long v65 = &v44[80 * (v43 >> 2)];
        int64x2_t v69 = v52;
        *((void *)&v65 + 1) = v47;
        std::string::size_type v66 = &v44[80 * v45];
        std::string::size_type v70 = v53;
        std::__split_buffer<FRReplaceInst>::~__split_buffer((uint64_t)&v68);
        uint64_t v40 = *((void *)&v65 + 1);
      }
      else
      {
        uint64_t v41 = v8 + 2;
        if (v8 >= -1) {
          uint64_t v41 = v8 + 1;
        }
        uint64_t v42 = v40 - 80 * (v41 >> 1);
        uint64_t v40 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<FRReplaceInst *,FRReplaceInst *,FRReplaceInst *>(v40, v40, v42);
        *(void *)&long long v65 = v42;
        *((void *)&v65 + 1) = v40;
      }
    }
    std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(v40, a3);
    *((void *)&v65 + 1) += 80;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FRReplaceInst>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>>(v11, v9, v9, *a1, *a1, v65, v65);
    *(void *)&long long v65 = v54;
    uint64_t v55 = a1[1];
    uint64_t v56 = *((void *)&v65 + 1);
    if (v9 != v55)
    {
      do
      {
        *(_DWORD *)uint64_t v56 = *(_DWORD *)v9;
        long long v57 = *(_OWORD *)(v9 + 8);
        *(void *)(v56 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(v9 + 24);
        *(_OWORD *)(v56 + 8) = v57;
        *(void *)(v9 + 16) = 0;
        *(void *)(v9 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
        *(void *)(v9 + 8) = 0;
        long long v58 = *(_OWORD *)(v9 + 32);
        *(void *)(v56 + 48) = *(void *)(v9 + 48);
        *(_OWORD *)(v56 + 32) = v58;
        *(void *)(v9 + 40) = 0;
        *(void *)(v9 + 48) = 0;
        *(void *)(v9 + 32) = 0;
        long long v59 = *(_OWORD *)(v9 + 56);
        *(void *)(v56 + 72) = *(void *)(v9 + 72);
        *(_OWORD *)(v56 + 56) = v59;
        *(void *)(v9 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
        *(void *)(v9 + 72) = 0;
        *(void *)(v9 + 56) = 0;
        v56 += 80;
        v9 += 80;
      }
      while (v9 != v55);
      uint64_t v54 = v65;
      unint64_t v9 = a1[1];
    }
    uint64_t v60 = *a1;
    *a1 = v54;
    a1[1] = v56;
    uint64_t v61 = a1[2];
    a1[2] = (uint64_t)v66;
    *((void *)&v65 + 1) = v9;
    std::string::size_type v66 = (char *)v61;
    uint64_t v64 = (char *)v60;
    *(void *)&long long v65 = v60;
    std::__split_buffer<FRReplaceInst>::~__split_buffer((uint64_t)&v64);
  }
  else if (v9 == v6)
  {
    std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(*a1 + 80 * (v7 / 80), a3);
    a1[1] = v9 + 80;
  }
  else
  {
    unint64_t v12 = v9 + 80;
    unint64_t v13 = v6 - 80;
    uint64_t v63 = v7 / 80;
    uint64_t v14 = a1[1];
    if (v6 >= 0x50)
    {
      do
      {
        *(_DWORD *)uint64_t v14 = *(_DWORD *)v13;
        long long v15 = *(_OWORD *)(v13 + 8);
        *(void *)(v14 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(v13 + 24);
        *(_OWORD *)(v14 + 8) = v15;
        *(void *)(v13 + 16) = 0;
        *(void *)(v13 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
        *(void *)(v13 + 8) = 0;
        long long v16 = *(_OWORD *)(v13 + 32);
        *(void *)(v14 + 48) = *(void *)(v13 + 48);
        *(_OWORD *)(v14 + 32) = v16;
        *(void *)(v13 + 40) = 0;
        *(void *)(v13 + 48) = 0;
        *(void *)(v13 + 32) = 0;
        long long v17 = *(_OWORD *)(v13 + 56);
        *(void *)(v14 + 72) = *(void *)(v13 + 72);
        *(_OWORD *)(v14 + 56) = v17;
        *(void *)(v13 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
        *(void *)(v13 + 72) = 0;
        *(void *)(v13 + 56) = 0;
        v14 += 80;
        v13 += 80;
      }
      while (v13 < v6);
    }
    a1[1] = v14;
    if (v6 != v12)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v12) >> 4);
      unint64_t v20 = v5 + 80 * v19 + 80 * v63;
      uint64_t v21 = -80 * v19;
      do
      {
        uint64_t v22 = v20 + v18;
        uint64_t v23 = v6 + v18;
        *(_DWORD *)(v6 + v18 - 80) = *(_DWORD *)(v20 + v18 - 80);
        int v24 = (void **)(v6 + v18 - 72);
        if (*(char *)(v6 + v18 - 49) < 0) {
          operator delete(*v24);
        }
        long long v25 = *(_OWORD *)(v22 - 72);
        *(void *)(v6 + v18 - 56) = *(void *)(v22 - 56);
        *(_OWORD *)int v24 = v25;
        *(unsigned char *)(v22 - 49) = 0;
        *(unsigned char *)(v22 - 72) = 0;
        int v26 = (void **)(v23 - 48);
        if (*(char *)(v23 - 25) < 0) {
          operator delete(*v26);
        }
        unint64_t v27 = (long long *)(v22 - 48);
        uint64_t v28 = v20 + v18;
        long long v29 = *v27;
        *(void *)(v23 - 32) = *((void *)v27 + 2);
        *(_OWORD *)int v26 = v29;
        *(unsigned char *)(v20 + v18 - 25) = 0;
        *(unsigned char *)unint64_t v27 = 0;
        int v30 = (void **)(v6 + v18 - 24);
        if (*(char *)(v6 + v18 - 1) < 0) {
          operator delete(*v30);
        }
        long long v31 = *(_OWORD *)(v28 - 24);
        *(void *)(v6 + v18 - 8) = *(void *)(v28 - 8);
        *(_OWORD *)int v30 = v31;
        *(unsigned char *)(v28 - 1) = 0;
        *(unsigned char *)(v28 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
        v18 -= 80;
      }
      while (v21 != v18);
    }
    unint64_t v32 = a3;
    if (v9 <= a3) {
      unint64_t v32 = a3 + 80 * (a1[1] > a3);
    }
    *(_DWORD *)unint64_t v9 = *(_DWORD *)v32;
    uint64_t v33 = v5 + 80 * v63;
    std::string::operator=((std::string *)(v33 + 8), (const std::string *)(v32 + 8));
    std::string::operator=((std::string *)(v33 + 32), (const std::string *)(v32 + 32));
    std::string::operator=((std::string *)(v33 + 56), (const std::string *)(v32 + 56));
  }
}

void sub_20D359114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  *(void *)(v11 + 8) = v12;
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FRReplaceInst>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a1);
}

uint64_t std::__split_buffer<FRReplaceInst>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::allocator<FRReplaceInst>::destroy[abi:ne180100](i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FRReplaceInst>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a3 != a5)
  {
    int v8 = *(_DWORD *)(a3 - 80);
    a3 -= 80;
    *(_DWORD *)(a7 - 80) = v8;
    a7 -= 80;
    long long v9 = *(_OWORD *)(a3 + 8);
    *(void *)(a7 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(a3 + 24);
    *(_OWORD *)(a7 + 8) = v9;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *(void *)(a3 + 8) = 0;
    long long v10 = *(_OWORD *)(a3 + 32);
    *(void *)(a7 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)(a7 + 32) = v10;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    __n128 result = *(__n128 *)(a3 + 56);
    *(void *)(a7 + 72) = *(void *)(a3 + 72);
    *(__n128 *)(a7 + 56) = result;
    *(void *)(a3 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 56) = 0;
  }
  return result;
}

void std::__shared_ptr_emplace<std::vector<FRReplaceInst>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<FRReplaceInst>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<std::vector<FRReplaceInst>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<FRReplaceInst>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char **std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned __int8 ***)(a1 + 8);
  uint64_t v3 = *((unsigned __int8 *)v2 + 23);
  if (*((char *)v2 + 23) < 0)
  {
    uint64_t v4 = *v2;
    uint64_t v5 = v2[1];
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(a1 + 8);
    uint64_t v5 = (unsigned __int8 *)*((unsigned __int8 *)v2 + 23);
    if (!*((unsigned char *)v2 + 23)) {
      goto LABEL_11;
    }
  }
  unint64_t v6 = &v5[(void)v4];
  if ((a2[23] & 0x80u) == 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(unsigned __int8 **)a2;
  }
  while (*v4 == *v7)
  {
    ++v4;
    ++v7;
    if (!--v5)
    {
      uint64_t v4 = v6;
      break;
    }
  }
LABEL_11:
  if ((v3 & 0x80) != 0)
  {
    uint64_t v2 = (unsigned __int8 **)*v2;
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
  }
  return v4 == (unsigned __int8 *)((char *)v2 + v3);
}

uint64_t std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_26C212700;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_26C212700;
  result[1] = v3;
  return result;
}

void std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::~__func()
{
}

void *FastRewriterImpl::apply_group@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  v6[4] = *MEMORY[0x263EF8340];
  v6[0] = &off_26C2126A8;
  v6[1] = a3;
  v6[3] = v6;
  FastRewriterImpl::apply_real(a5, a1, a2, (uint64_t)v6, a4);
  return std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100](v6);
}

void sub_20D3594BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char **std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v3 = v2[23];
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v2[23];
  }
  else {
    uint64_t v4 = *((void *)v2 + 1);
  }
  uint64_t v5 = a2[23];
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (v4 != v5) {
    return 0;
  }
  if (v6 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v3 & 0x80) != 0) {
    return memcmp(*(const void **)v2, a2, *((void *)v2 + 1)) == 0;
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v7 = v3 - 1;
  do
  {
    int v9 = *v2++;
    int v8 = v9;
    int v11 = *a2++;
    int v10 = v11;
    BOOL v13 = v7-- != 0;
    uint64_t result = v8 == v10;
  }
  while (v8 == v10 && v13);
  return result;
}

uint64_t std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_26C2126A8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_26C2126A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::~__func()
{
}

void *FastRewriterImpl::apply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &off_26C212758;
  v5[3] = v5;
  FastRewriterImpl::apply_real(a4, a1, a2, (uint64_t)v5, a3);
  return std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100](v5);
}

void sub_20D3596E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char **std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::operator()()
{
  return 1;
}

void std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &off_26C212758;
}

void *std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_26C212758;
  return result;
}

void std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::~__func()
{
}

uint64_t FastRewriter::create(void *a1, uint64_t a2)
{
  v15[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v13);
  if (*(_DWORD *)&v14[*(void *)(v13[0] - 24) + 16])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = *(void *)a2;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v12 = v6;
      _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_ERROR, "Invalid Rule file: %s", buf, 0xCu);
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    Diagnostics::log(3, "Invalid Rule file: %s", v5, v7);
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    fr_verbose_log(void)::is_verbose_ = 0;
    int v8 = operator new(0x70uLL);
    v8[1] = 0;
    v8[2] = 0;
    *int v8 = off_26C216408;
    *(void *)&long long v9 = FastRewriterImpl::FastRewriterImpl((uint64_t)(v8 + 3), a2);
    *((void *)&v9 + 1) = v8;
    *(_OWORD *)a1 = v9;
  }
  v13[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x210558FE0](v14);
  std::istream::~istream();
  return MEMORY[0x210559500](v15);
}

void sub_20D3599F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  std::ifstream::~ifstream(&a14);
  _Unwind_Resume(a1);
}

uint64_t FastRewriterImpl::FastRewriterImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v133 = *MEMORY[0x263EF8340];
  *(void *)a1 = off_26C2017B0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  uint64_t v115 = a1 + 24;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __str = *(std::string *)a2;
  }
  std::string::size_type v4 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v113 = v3;
  if (v4 == -1)
  {
    int v6 = 2;
    goto LABEL_10;
  }
  std::string::basic_string(v132, &__str, v4, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
  int v5 = SHIBYTE(v132[0].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v132[0].__r_.__value_.__r.__words[2]) < 0)
  {
    if (v132[0].__r_.__value_.__l.__size_ != 4) {
      goto LABEL_16;
    }
    uint64_t v7 = (std::string *)v132[0].__r_.__value_.__r.__words[0];
    if (*(_DWORD *)v132[0].__r_.__value_.__l.__data_ == 1954051118)
    {
      *(_DWORD *)(v3 + 48) = 1;
      goto LABEL_19;
    }
  }
  else
  {
    if (SHIBYTE(v132[0].__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_16;
    }
    if (LODWORD(v132[0].__r_.__value_.__l.__data_) == 1954051118)
    {
      int v6 = 1;
LABEL_10:
      *(_DWORD *)(v3 + 48) = v6;
      goto LABEL_20;
    }
    uint64_t v7 = v132;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) == 1952539694)
  {
    int v8 = 0;
    goto LABEL_17;
  }
LABEL_16:
  int v8 = 2;
LABEL_17:
  *(_DWORD *)(v3 + 48) = v8;
  if ((v5 & 0x80000000) == 0) {
    goto LABEL_20;
  }
  uint64_t v7 = (std::string *)v132[0].__r_.__value_.__r.__words[0];
LABEL_19:
  operator delete(v7);
LABEL_20:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  int v9 = *(_DWORD *)(v3 + 48);
  if (v9)
  {
    if (v9 == 1) {
      operator new();
    }
  }
  else
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v122 = *(std::string *)a2;
    }
    MemoryMap::MemoryMap((std::__shared_weak_count **)v132, (uint64_t)&v122);
    long long v10 = *(_OWORD *)&v132[0].__r_.__value_.__l.__data_;
    if (v132[0].__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v132[0].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    int v11 = *(std::__shared_weak_count **)(v3 + 64);
    *(_OWORD *)(v3 + 56) = v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v12 = (unsigned __int8 **)(v3 + 72);
    *(_OWORD *)(v3 + 72) = *(_OWORD *)&v132[0].__r_.__value_.__r.__words[2];
    if (v132[0].__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v132[0].__r_.__value_.__l.__size_);
    }
    BOOL v13 = *v12;
    if (**v12)
    {
      unsigned int v14 = 0;
      unsigned int v117 = 4;
      unint64_t v112 = (unsigned __int8 **)(v3 + 72);
      std::string::size_type v114 = *v12;
      do
      {
        long long v126 = 0uLL;
        if (v13[3])
        {
          long long v15 = *v12;
          if (*(_DWORD *)&(*v12)[v117] != -1)
          {
            uint64_t v16 = *(void *)(v3 + 64);
            if (v16)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
              long long v15 = *v12;
            }
            long long v17 = operator new(0xB8uLL);
            v17[1] = 0;
            v17[2] = 0;
            int v119 = v17;
            void *v17 = off_26C218C80;
            if (v16) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
            }
            v17[4] = 0;
            v17[3] = &off_26C205790;
            void v17[5] = 0;
            v17[6] = 0;
            int v118 = (void **)(v17 + 4);
            uint64_t v18 = (FRCode *)std::string::basic_string[abi:ne180100]<0>(v17 + 7, "nfa");
            v119[19] = 0;
            *((_OWORD *)v119 + 7) = 0u;
            v119[10] = 0;
            v119[11] = 0;
            *((_OWORD *)v119 + 8) = 0u;
            *((_DWORD *)v119 + 36) = 1065353216;
            v119[20] = 0;
            v119[21] = 0;
            *((_DWORD *)v119 + 4std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
            FRCode::init_tables(v18);
            *((_DWORD *)v119 + 26) = *(_DWORD *)&v15[v117];
            std::string::basic_string[abi:ne180100]<0>(v132, (char *)&v15[v117 + 4]);
            if (*((char *)v119 + 55) < 0) {
              operator delete(*v118);
            }
            *(std::string *)int v118 = v132[0];
            strlen((const char *)&v15[v117 + 4]);
            operator new[]();
          }
          unint64_t v27 = *(std::__shared_weak_count **)(v3 + 64);
          *(void *)&v125[0] = *(void *)(v3 + 56);
          *((void *)&v125[0] + 1) = v27;
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v125[1] = *(_OWORD *)v12;
          FRPCREGraph::create(v132, (uint64_t *)v125, v117 + 112);
          long long v28 = *(_OWORD *)&v132[0].__r_.__value_.__l.__data_;
          *(_OWORD *)&v132[0].__r_.__value_.__l.__data_ = 0uLL;
          long long v120 = v28;
          long long v126 = v28;
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
        }
        else
        {
          uint64_t v19 = *(void *)(v3 + 56);
          unint64_t v20 = *(std::__shared_weak_count **)(v3 + 64);
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v124 = *(_OWORD *)v12;
          uint64_t v21 = (char *)operator new(0xA0uLL);
          uint64_t v22 = v21;
          unsigned int v116 = v14;
          *((void *)v21 + 1) = 0;
          *((void *)v21 + 2) = 0;
          *(void *)uint64_t v21 = off_26C2156B0;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v121 = v21 + 24;
          *((_OWORD *)v21 + 5) = 0u;
          uint64_t v23 = v21 + 80;
          *((_OWORD *)v21 + 2) = 0u;
          int v24 = (void **)(v21 + 32);
          *((void *)v21 + 3) = off_26C200268;
          *((_OWORD *)v21 + 3) = 0u;
          *((_OWORD *)v21 + 6) = 0u;
          *((_OWORD *)v21 + 7) = 0u;
          *((_OWORD *)v21 + 8) = 0u;
          *((_OWORD *)v21 + 9) = 0u;
          if (v20)
          {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            int v26 = (std::__shared_weak_count **)(v21 + 40);
            long long v25 = (std::__shared_weak_count *)*((void *)v21 + 5);
            *((void *)v22 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v19;
            *((void *)v22 + 5) = v20;
            if (v25) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            }
          }
          else
          {
            *((void *)v21 + 5) = 0;
            int v26 = (std::__shared_weak_count **)(v21 + 40);
            *((void *)v21 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v19;
          }
          *((_OWORD *)v22 + 3) = v124;
          uint64_t v29 = *((void *)v22 + 6) + v117;
          *((void *)v22 + 8) = v117;
          *((void *)v22 + 9) = v29;
          if (fr_verbose_log(void)::is_verbose_)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            int v30 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              int v32 = *(_DWORD *)(*((void *)v22 + 9) + 104);
              LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v32;
              _os_log_impl(&dword_20CD80000, v30, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[num_of_states_]: %u", (uint8_t *)v132, 8u);
            }
            Diagnostics::log(7, "# - BinaryGraph[num_of_states_]: %u", v31, *(unsigned int *)(*((void *)v22 + 9) + 104));
            if (fr_verbose_log(void)::is_verbose_)
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              uint64_t v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                int v35 = *(_DWORD *)(*((void *)v22 + 9) + 100);
                LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v35;
                _os_log_impl(&dword_20CD80000, v33, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[num_of_cells_]: %u", (uint8_t *)v132, 8u);
              }
              Diagnostics::log(7, "# - BinaryGraph[num_of_cells_]: %u", v34, *(unsigned int *)(*((void *)v22 + 9) + 100));
              if (fr_verbose_log(void)::is_verbose_)
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                }
                unint64_t v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                {
                  int v38 = *(_DWORD *)(*((void *)v22 + 9) + 96);
                  LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                  HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v38;
                  _os_log_impl(&dword_20CD80000, v36, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[num_of_rules_]: %u", (uint8_t *)v132, 8u);
                }
                Diagnostics::log(7, "# - BinaryGraph[num_of_rules_]: %u", v37, *(unsigned int *)(*((void *)v22 + 9) + 96));
                if (fr_verbose_log(void)::is_verbose_)
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                  }
                  uint64_t v39 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    int v41 = *(_DWORD *)(*((void *)v22 + 9) + 56);
                    LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                    HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v41;
                    _os_log_impl(&dword_20CD80000, v39, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_base_]: %u", (uint8_t *)v132, 8u);
                  }
                  Diagnostics::log(7, "# - BinaryGraph[rule_base_]: %u", v40, *(unsigned int *)(*((void *)v22 + 9) + 56));
                  if (fr_verbose_log(void)::is_verbose_)
                  {
                    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                    }
                    uint64_t v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                    {
                      int v44 = *(_DWORD *)(*((void *)v22 + 9) + 60);
                      LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                      HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v44;
                      _os_log_impl(&dword_20CD80000, v42, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_offset_]: %u", (uint8_t *)v132, 8u);
                    }
                    Diagnostics::log(7, "# - BinaryGraph[rule_offset_]: %u", v43, *(unsigned int *)(*((void *)v22 + 9) + 60));
                    if (fr_verbose_log(void)::is_verbose_)
                    {
                      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                      }
                      uint64_t v45 = Diagnostics_GetLogObject(void)::__profile_log_default;
                      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                      {
                        int v47 = *(_DWORD *)(*((void *)v22 + 9) + 72);
                        LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                        HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v47;
                        _os_log_impl(&dword_20CD80000, v45, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_parse_base_]: %u", (uint8_t *)v132, 8u);
                      }
                      Diagnostics::log(7, "# - BinaryGraph[rule_parse_base_]: %u", v46, *(unsigned int *)(*((void *)v22 + 9) + 72));
                      if (fr_verbose_log(void)::is_verbose_)
                      {
                        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                        }
                        uint64_t v48 = Diagnostics_GetLogObject(void)::__profile_log_default;
                        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                        {
                          int v50 = *(_DWORD *)(*((void *)v22 + 9) + 76);
                          LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                          HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v50;
                          _os_log_impl(&dword_20CD80000, v48, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_parse_offset_]: %u", (uint8_t *)v132, 8u);
                        }
                        Diagnostics::log(7, "# - BinaryGraph[rule_parse_offset_]: %u", v49, *(unsigned int *)(*((void *)v22 + 9) + 76));
                        if (fr_verbose_log(void)::is_verbose_)
                        {
                          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                          }
                          long long v51 = Diagnostics_GetLogObject(void)::__profile_log_default;
                          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                          {
                            int v53 = *(_DWORD *)(*((void *)v22 + 9) + 80);
                            LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                            HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v53;
                            _os_log_impl(&dword_20CD80000, v51, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_parse_string_base_]: %u", (uint8_t *)v132, 8u);
                          }
                          Diagnostics::log(7, "# - BinaryGraph[rule_parse_string_base_]: %u", v52, *(unsigned int *)(*((void *)v22 + 9) + 80));
                          if (fr_verbose_log(void)::is_verbose_)
                          {
                            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                            }
                            uint64_t v54 = Diagnostics_GetLogObject(void)::__profile_log_default;
                            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                            {
                              int v56 = *(_DWORD *)(*((void *)v22 + 9) + 84);
                              LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                              HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v56;
                              _os_log_impl(&dword_20CD80000, v54, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_parse_string_offset_]: %u", (uint8_t *)v132, 8u);
                            }
                            Diagnostics::log(7, "# - BinaryGraph[rule_parse_string_offset_]: %u", v55, *(unsigned int *)(*((void *)v22 + 9) + 84));
                            if (fr_verbose_log(void)::is_verbose_)
                            {
                              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                              }
                              long long v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
                              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                              {
                                int v59 = **((_DWORD **)v22 + 9);
                                LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v59;
                                _os_log_impl(&dword_20CD80000, v57, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[state_base_]: %u", (uint8_t *)v132, 8u);
                              }
                              Diagnostics::log(7, "# - BinaryGraph[state_base_]: %u", v58, **((unsigned int **)v22 + 9));
                              if (fr_verbose_log(void)::is_verbose_)
                              {
                                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                }
                                uint64_t v60 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                {
                                  int v62 = *(_DWORD *)(*((void *)v22 + 9) + 4);
                                  LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                  HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v62;
                                  _os_log_impl(&dword_20CD80000, v60, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[state_offset_]: %u", (uint8_t *)v132, 8u);
                                }
                                Diagnostics::log(7, "# - BinaryGraph[state_offset_]: %u", v61, *(unsigned int *)(*((void *)v22 + 9) + 4));
                                if (fr_verbose_log(void)::is_verbose_)
                                {
                                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                  }
                                  uint64_t v63 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                  {
                                    int v65 = *(_DWORD *)(*((void *)v22 + 9) + 8);
                                    LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                    HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v65;
                                    _os_log_impl(&dword_20CD80000, v63, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_base_]: %u", (uint8_t *)v132, 8u);
                                  }
                                  Diagnostics::log(7, "# - BinaryGraph[cell_base_]: %u", v64, *(unsigned int *)(*((void *)v22 + 9) + 8));
                                  if (fr_verbose_log(void)::is_verbose_)
                                  {
                                    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                    }
                                    std::string::size_type v66 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                    {
                                      int v68 = *(_DWORD *)(*((void *)v22 + 9) + 12);
                                      LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                      HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v68;
                                      _os_log_impl(&dword_20CD80000, v66, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_offset_]: %u", (uint8_t *)v132, 8u);
                                    }
                                    Diagnostics::log(7, "# - BinaryGraph[cell_offset_]: %u", v67, *(unsigned int *)(*((void *)v22 + 9) + 12));
                                    if (fr_verbose_log(void)::is_verbose_)
                                    {
                                      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                      }
                                      int64x2_t v69 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                      {
                                        int v71 = *(_DWORD *)(*((void *)v22 + 9) + 16);
                                        LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                        HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v71;
                                        _os_log_impl(&dword_20CD80000, v69, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_list_base_]: %u", (uint8_t *)v132, 8u);
                                      }
                                      Diagnostics::log(7, "# - BinaryGraph[cell_list_base_]: %u", v70, *(unsigned int *)(*((void *)v22 + 9) + 16));
                                      if (fr_verbose_log(void)::is_verbose_)
                                      {
                                        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                        }
                                        unint64_t v72 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                        {
                                          int v74 = *(_DWORD *)(*((void *)v22 + 9) + 20);
                                          LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                          HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v74;
                                          _os_log_impl(&dword_20CD80000, v72, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_list_offset_]: %u", (uint8_t *)v132, 8u);
                                        }
                                        Diagnostics::log(7, "# - BinaryGraph[cell_list_offset_]: %u", v73, *(unsigned int *)(*((void *)v22 + 9) + 20));
                                        if (fr_verbose_log(void)::is_verbose_)
                                        {
                                          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                          }
                                          uint64_t v75 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                          {
                                            int v77 = *(_DWORD *)(*((void *)v22 + 9) + 24);
                                            LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                            HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v77;
                                            _os_log_impl(&dword_20CD80000, v75, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_group_base_]: %u", (uint8_t *)v132, 8u);
                                          }
                                          Diagnostics::log(7, "# - BinaryGraph[cell_group_base_]: %u", v76, *(unsigned int *)(*((void *)v22 + 9) + 24));
                                          if (fr_verbose_log(void)::is_verbose_)
                                          {
                                            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                            }
                                            long long v78 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                            {
                                              int v80 = *(_DWORD *)(*((void *)v22 + 9) + 28);
                                              LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                              HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v80;
                                              _os_log_impl(&dword_20CD80000, v78, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_group_offset_]: %u", (uint8_t *)v132, 8u);
                                            }
                                            Diagnostics::log(7, "# - BinaryGraph[cell_group_offset_]: %u", v79, *(unsigned int *)(*((void *)v22 + 9) + 28));
                                            if (fr_verbose_log(void)::is_verbose_)
                                            {
                                              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                              }
                                              int v81 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                              {
                                                int v83 = *(_DWORD *)(*((void *)v22 + 9) + 32);
                                                LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                                HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v83;
                                                _os_log_impl(&dword_20CD80000, v81, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_rule_list_base_]: %u", (uint8_t *)v132, 8u);
                                              }
                                              Diagnostics::log(7, "# - BinaryGraph[cell_rule_list_base_]: %u", v82, *(unsigned int *)(*((void *)v22 + 9) + 32));
                                              if (fr_verbose_log(void)::is_verbose_)
                                              {
                                                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                                }
                                                int v84 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                                {
                                                  int v86 = *(_DWORD *)(*((void *)v22 + 9) + 36);
                                                  LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                                  HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v86;
                                                  _os_log_impl(&dword_20CD80000, v84, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_rule_list_offset_]: %u", (uint8_t *)v132, 8u);
                                                }
                                                Diagnostics::log(7, "# - BinaryGraph[cell_rule_list_offset_]: %u", v85, *(unsigned int *)(*((void *)v22 + 9) + 36));
                                                if (fr_verbose_log(void)::is_verbose_)
                                                {
                                                  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                                  }
                                                  unint64_t v87 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                                  {
                                                    int v89 = *(_DWORD *)(*((void *)v22 + 9) + 40);
                                                    LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                                    HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v89;
                                                    _os_log_impl(&dword_20CD80000, v87, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_counter_base_]: %u", (uint8_t *)v132, 8u);
                                                  }
                                                  Diagnostics::log(7, "# - BinaryGraph[cell_counter_base_]: %u", v88, *(unsigned int *)(*((void *)v22 + 9) + 40));
                                                  if (fr_verbose_log(void)::is_verbose_)
                                                  {
                                                    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                                    }
                                                    unint64_t v90 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                                    {
                                                      int v92 = *(_DWORD *)(*((void *)v22 + 9) + 44);
                                                      LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                                      HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v92;
                                                      _os_log_impl(&dword_20CD80000, v90, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_counter_offset_]: %u", (uint8_t *)v132, 8u);
                                                    }
                                                    Diagnostics::log(7, "# - BinaryGraph[cell_counter_offset_]: %u", v91, *(unsigned int *)(*((void *)v22 + 9) + 44));
                                                    if (fr_verbose_log(void)::is_verbose_)
                                                    {
                                                      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                                        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                                      }
                                                      std::string::size_type v93 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                                      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                                      {
                                                        int v95 = *(_DWORD *)(*((void *)v22 + 9) + 48);
                                                        LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                                        HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v95;
                                                        _os_log_impl(&dword_20CD80000, v93, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_siblings_base_]: %u", (uint8_t *)v132, 8u);
                                                      }
                                                      Diagnostics::log(7, "# - BinaryGraph[cell_siblings_base_]: %u", v94, *(unsigned int *)(*((void *)v22 + 9) + 48));
                                                      uint64_t v12 = v112;
                                                      uint64_t v3 = v113;
                                                      if (fr_verbose_log(void)::is_verbose_)
                                                      {
                                                        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                                                          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                                                        }
                                                        uint64_t v96 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                                        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                                        {
                                                          int v98 = *(_DWORD *)(*((void *)v22 + 9) + 52);
                                                          LODWORD(v132[0].__r_.__value_.__l.__data_) = 67109120;
                                                          HIDWORD(v132[0].__r_.__value_.__r.__words[0]) = v98;
                                                          _os_log_impl(&dword_20CD80000, v96, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_siblings_offset_]: %u", (uint8_t *)v132, 8u);
                                                        }
                                                        Diagnostics::log(7, "# - BinaryGraph[cell_siblings_offset_]: %u", v97, *(unsigned int *)(*((void *)v22 + 9) + 52));
                                                        uint64_t v12 = v112;
                                                        uint64_t v3 = v113;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          std::string::size_type v99 = (long long *)(v22 + 48);
          if (**((_DWORD **)v22 + 9) == -1)
          {
            int v104 = *v24;
            int v105 = *v26;
            __p[0] = v104;
            __p[1] = v105;
            if (v105) {
              atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v131 = *v99;
            FRPCREGraph::create(v132, (uint64_t *)__p, v117 + 112);
            uint64_t v106 = (std::__shared_weak_count *)*((void *)v22 + 11);
            *((_OWORD *)v22 + 5) = *(_OWORD *)&v132[0].__r_.__value_.__l.__data_;
            if (v106) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v106);
            }
            if (v105) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v105);
            }
            unint64_t v107 = (const std::string *)(*(uint64_t (**)(void))(**(void **)v23 + 32))();
            BOOL v13 = v114;
            unsigned int v14 = v116;
            std::string::operator=((std::string *)(v22 + 136), v107);
          }
          else
          {
            std::string::size_type v100 = (std::string::size_type)*v24;
            std::string::size_type v101 = *v26;
            v132[0].__r_.__value_.__r.__words[0] = v100;
            v132[0].__r_.__value_.__l.__size_ = (std::string::size_type)v101;
            if (v101) {
              atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)&v132[0].__r_.__value_.__r.__words[2] = *v99;
            v127.__r_.__value_.__r.__words[0] = v117 + 112;
            std::allocate_shared[abi:ne180100]<FRBlob<char>,std::allocator<FRBlob<char>>,MemoryMap &,unsigned long &,void>(&v128, (uint64_t)v132, &v127);
            if (v101) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v101);
            }
            uint64_t v102 = v128;
            std::string::basic_string[abi:ne180100]<0>(&v127, *(char **)(v128 + 8));
            std::string::resize(&v127, *(void *)(v102 + 16), 0);
            BOOL v13 = v114;
            unsigned int v14 = v116;
            std::string::operator=((std::string *)(v22 + 112), &v127);
            if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v127.__r_.__value_.__l.__data_);
            }
            if (v129) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v129);
            }
            MEMORY[0x210558E70](v22 + 136, &byte_20D5A22AE);
            int v103 = (std::__shared_weak_count *)*((void *)v22 + 11);
            *((void *)v22 + 10) = 0;
            *((void *)v22 + 11) = 0;
            if (v103) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v103);
            }
          }
          if (v20)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
            *(void *)&long long v108 = v121;
            *((void *)&v108 + 1) = v22;
            long long v120 = v108;
            long long v126 = v108;
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          else
          {
            *(void *)&long long v109 = v121;
            *((void *)&v109 + 1) = v22;
            long long v120 = v109;
            long long v126 = v109;
          }
        }
        std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](v115, &v126);
        int v110 = (*(uint64_t (**)(void))(*(void *)v120 + 40))(v120);
        if (*((void *)&v120 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v120 + 1));
        }
        v117 += v110;
        ++v14;
      }
      while (v14 < *v13);
    }
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
  }
  return v3;
}

void sub_20D35BA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a52) {
    std::default_delete<FRRuleSet>::operator()[abi:ne180100]((uint64_t)a52);
  }
  int v56 = *(std::__shared_weak_count **)(a20 + 64);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  a55 = a22;
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  long long v57 = *(std::__shared_weak_count **)(a20 + 16);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<FRRuleSet>::operator=[abi:ne180100]<FRRuleSet,std::default_delete<FRRuleSet>,void>(uint64_t a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = 0u;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t std::default_delete<FRRuleSet>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void **)(result + 72);
    std::vector<std::pair<std::string,std::shared_ptr<std::vector<std::shared_ptr<FRRule>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1 + 32);
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    JUMPOUT(0x2105595E0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<FRRuleSet  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<FRRuleSet  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<FRRuleSet>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<FRRuleSet  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FastRewriterImpl>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = off_26C2017B0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::string::size_type v4 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<FastRewriterImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FastRewriterImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FeatureProcessingFastspeech2::process_user_features(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)a2 + 8);
  if (v5 != *(void *)(*(void *)a2 + 16) && *(unsigned char *)(v5 + 60)) {
    *(_DWORD *)(a1 + 80) = 0;
  }
  std::map<std::string,std::vector<float>>::map[abi:ne180100](v129, 0);
  uint64_t v126 = 0;
  std::string v127 = 0;
  unint64_t v128 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v124 = 0;
  uint64_t v125 = 0;
  std::string v123 = 0;
  uint64_t v6 = *(void *)(*(void *)a2 + 8);
  float v7 = 0.0;
  float v8 = 0.0;
  for (uint64_t i = *(void *)(*(void *)a2 + 16); v6 != i; v6 += 104)
  {
    int v9 = *(_DWORD *)(a1 + 80);
    if (0xAAAAAAAAAAAAAAABLL * ((v124 - (uint64_t)v123) >> 3) > v9)
    {
      int v10 = *(_DWORD *)(a1 + 80);
      int v11 = v9 + 1;
      for (uint64_t j = &v123[3 * v10]; ; j += 3)
      {
        int v13 = *((char *)j + 23);
        if (v13 < 0)
        {
          if (j[1] != (void *)3) {
            break;
          }
          unsigned int v14 = (unsigned __int16 *)*j;
        }
        else
        {
          unsigned int v14 = (unsigned __int16 *)j;
          if (v13 != 3) {
            break;
          }
        }
        int v15 = *v14;
        int v16 = *((unsigned __int8 *)v14 + 2);
        if (v15 != 26995 || v16 != 108) {
          break;
        }
        ++v10;
        *(_DWORD *)(a1 + 80) = v11++;
      }
      int v9 = v10;
    }
    if (*(unsigned __int8 *)(v6 + 61) | *(unsigned __int8 *)(v6 + 62))
    {
      int v24 = v127;
      uint64_t v25 = *(void *)*(v127 - 3);
      int v26 = *(_DWORD *)(a1 + 112);
      unint64_t v27 = operator new(0xCuLL);
      uint64_t v121 = v27 + 3;
      std::string v122 = (char *)(v27 + 3);
      *(void *)unint64_t v27 = v25;
      void v27[2] = v26;
      long long v120 = v27;
      if ((unint64_t)v24 >= v128)
      {
        uint64_t v28 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v126, (uint64_t)&v120);
      }
      else
      {
        void *v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v24, v120, (uint64_t)v121, (v121 - (unsigned char *)v120) >> 2);
        uint64_t v28 = (uint64_t)(v24 + 3);
      }
      uint64_t v45 = 0;
      std::string v127 = (void *)v28;
      float v30 = *(float *)(a1 + 112);
      std::string __p = 0;
      int v118 = 0;
      char v46 = 1;
      int v119 = 0;
      do
      {
        char v47 = v46;
        std::map<std::string,std::vector<float>>::map[abi:ne180100](v116, v129);
        std::map<std::string,std::vector<float>>::map[abi:ne180100](v115, (const void ***)(a1 + 32));
        float v48 = FeatureProcessingBase::normalize_feature(v116, v115, v45, *((float *)v120 + v45));
        float v49 = v48;
        int v50 = v118;
        if (v118 >= (float *)v119)
        {
          int64x2_t v52 = (float *)__p;
          uint64_t v53 = ((char *)v118 - (unsigned char *)__p) >> 2;
          unint64_t v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v55 = v119 - (unsigned char *)__p;
          if ((v119 - (unsigned char *)__p) >> 1 > v54) {
            unint64_t v54 = v55 >> 1;
          }
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v54;
          }
          if (v56)
          {
            long long v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v119, v56);
            int64x2_t v52 = (float *)__p;
            int v50 = v118;
          }
          else
          {
            long long v57 = 0;
          }
          long long v58 = (float *)&v57[4 * v53];
          *long long v58 = v49;
          long long v51 = v58 + 1;
          while (v50 != v52)
          {
            int v59 = *((_DWORD *)v50-- - 1);
            *((_DWORD *)v58-- - 1) = v59;
          }
          std::string __p = v58;
          int v118 = v51;
          int v119 = &v57[4 * v56];
          if (v52) {
            operator delete(v52);
          }
        }
        else
        {
          *int v118 = v48;
          long long v51 = v50 + 1;
        }
        int v118 = v51;
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v115[1]);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v116[1]);
        char v46 = 0;
        uint64_t v45 = 1;
      }
      while ((v47 & 1) != 0);
      uint64_t v60 = v118;
      if (v118 >= (float *)v119)
      {
        int v62 = (float *)__p;
        uint64_t v63 = ((char *)v118 - (unsigned char *)__p) >> 2;
        unint64_t v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v65 = v119 - (unsigned char *)__p;
        if ((v119 - (unsigned char *)__p) >> 1 > v64) {
          unint64_t v64 = v65 >> 1;
        }
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v64;
        }
        if (v66)
        {
          uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v119, v66);
          int v62 = (float *)__p;
          uint64_t v60 = v118;
        }
        else
        {
          uint64_t v67 = 0;
        }
        int v68 = (float *)&v67[4 * v63];
        *int v68 = *(float *)(a1 + 112);
        uint64_t v61 = v68 + 1;
        while (v60 != v62)
        {
          int v69 = *((_DWORD *)v60-- - 1);
          *((_DWORD *)v68-- - 1) = v69;
        }
        std::string __p = v68;
        int v118 = v61;
        int v119 = &v67[4 * v66];
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        *int v118 = *(float *)(a1 + 112);
        uint64_t v61 = v60 + 1;
      }
      int v118 = v61;
      unint64_t v70 = a3[1];
      if (v70 >= a3[2])
      {
        uint64_t v71 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, (uint64_t)&__p);
        uint64_t v71 = v70 + 24;
      }
      a3[1] = v71;
    }
    else
    {
      int v18 = *(_DWORD *)(MEMORY[0x30] + 4 * v9);
      int v19 = *(_DWORD *)(MEMORY[0x48] + 4 * v9);
      int v20 = *(_DWORD *)(MEMORY[0x18] + 4 * v9);
      uint64_t v21 = operator new(0xCuLL);
      uint64_t v121 = v21 + 3;
      std::string v122 = (char *)(v21 + 3);
      _DWORD *v21 = v18;
      v21[1] = v19;
      v21[2] = v20;
      long long v120 = v21;
      uint64_t v22 = v127;
      if ((unint64_t)v127 >= v128)
      {
        uint64_t v23 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v126, (uint64_t)&v120);
      }
      else
      {
        *std::string v127 = 0;
        v22[1] = 0;
        v22[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v22, v120, (uint64_t)v121, (v121 - (unsigned char *)v120) >> 2);
        uint64_t v23 = (uint64_t)(v22 + 3);
      }
      uint64_t v29 = 0;
      std::string v127 = (void *)v23;
      float v30 = *(float *)(MEMORY[0x18] + 4 * *(int *)(a1 + 80));
      std::string __p = 0;
      int v118 = 0;
      int v119 = 0;
      do
      {
        std::map<std::string,std::vector<float>>::map[abi:ne180100](v114, v129);
        std::map<std::string,std::vector<float>>::map[abi:ne180100](v113, (const void ***)(a1 + 32));
        float v31 = FeatureProcessingBase::normalize_feature(v114, v113, v29, *((float *)v120 + v29));
        float v32 = v31;
        uint64_t v33 = v118;
        if (v118 >= (float *)v119)
        {
          int v35 = (float *)__p;
          uint64_t v36 = ((char *)v118 - (unsigned char *)__p) >> 2;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v38 = v119 - (unsigned char *)__p;
          if ((v119 - (unsigned char *)__p) >> 1 > v37) {
            unint64_t v37 = v38 >> 1;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v119, v39);
            int v35 = (float *)__p;
            uint64_t v33 = v118;
          }
          else
          {
            uint64_t v40 = 0;
          }
          int v41 = (float *)&v40[4 * v36];
          float *v41 = v32;
          unint64_t v34 = v41 + 1;
          while (v33 != v35)
          {
            int v42 = *((_DWORD *)v33-- - 1);
            *((_DWORD *)v41-- - 1) = v42;
          }
          std::string __p = v41;
          int v118 = v34;
          int v119 = &v40[4 * v39];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *int v118 = v31;
          unint64_t v34 = v33 + 1;
        }
        int v118 = v34;
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v113[1]);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v114[1]);
        ++v29;
      }
      while (v29 != 3);
      unint64_t v43 = a3[1];
      if (v43 >= a3[2])
      {
        uint64_t v44 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, (uint64_t)&__p);
        uint64_t v44 = v43 + 24;
      }
      a3[1] = v44;
      ++*(_DWORD *)(a1 + 80);
    }
    if (__p)
    {
      int v118 = (float *)__p;
      operator delete(__p);
    }
    if (v120)
    {
      uint64_t v121 = v120;
      operator delete(v120);
    }
    float v8 = v8 + v30;
  }
  unint64_t v72 = (float *)MEMORY[0x18];
  if (MEMORY[0x18] != MEMORY[0x20])
  {
    float v7 = 0.0;
    do
    {
      float v73 = *v72++;
      float v7 = v7 + v73;
    }
    while (v72 != (float *)MEMORY[0x20]);
  }
  int v74 = v127;
  uint64_t v75 = *(void *)*(v127 - 3);
  float v76 = *(float *)(a1 + 112);
  int v77 = (float *)operator new(0xCuLL);
  float v78 = v7 - v8;
  if ((float)(v7 - v8) <= v76) {
    float v78 = v76;
  }
  uint64_t v121 = v77 + 3;
  std::string v122 = (char *)(v77 + 3);
  *(void *)int v77 = v75;
  v77[2] = v78;
  long long v120 = v77;
  if ((unint64_t)v74 >= v128)
  {
    uint64_t v79 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v126, (uint64_t)&v120);
  }
  else
  {
    void *v74 = 0;
    v74[1] = 0;
    v74[2] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v74, v120, (uint64_t)v121, (v121 - (unsigned char *)v120) >> 2);
    uint64_t v79 = (uint64_t)(v74 + 3);
  }
  uint64_t v80 = 0;
  std::string v127 = (void *)v79;
  std::string __p = 0;
  int v118 = 0;
  int v119 = 0;
  char v81 = 1;
  do
  {
    char v82 = v81;
    std::map<std::string,std::vector<float>>::map[abi:ne180100](v112, v129);
    std::map<std::string,std::vector<float>>::map[abi:ne180100](v111, (const void ***)(a1 + 32));
    float v83 = FeatureProcessingBase::normalize_feature(v112, v111, v80, *((float *)v120 + v80));
    float v84 = v83;
    uint64_t v85 = v118;
    if (v118 >= (float *)v119)
    {
      unint64_t v87 = (float *)__p;
      uint64_t v88 = ((char *)v118 - (unsigned char *)__p) >> 2;
      unint64_t v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v90 = v119 - (unsigned char *)__p;
      if ((v119 - (unsigned char *)__p) >> 1 > v89) {
        unint64_t v89 = v90 >> 1;
      }
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v91 = v89;
      }
      if (v91)
      {
        int v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v119, v91);
        unint64_t v87 = (float *)__p;
        uint64_t v85 = v118;
      }
      else
      {
        int v92 = 0;
      }
      std::string::size_type v93 = (float *)&v92[4 * v88];
      *std::string::size_type v93 = v84;
      int v86 = v93 + 1;
      while (v85 != v87)
      {
        int v94 = *((_DWORD *)v85-- - 1);
        *((_DWORD *)v93-- - 1) = v94;
      }
      std::string __p = v93;
      int v118 = v86;
      int v119 = &v92[4 * v91];
      if (v87) {
        operator delete(v87);
      }
    }
    else
    {
      *int v118 = v83;
      int v86 = v85 + 1;
    }
    int v118 = v86;
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v111[1]);
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v112[1]);
    char v81 = 0;
    uint64_t v80 = 1;
  }
  while ((v82 & 1) != 0);
  float v95 = *(float *)(a1 + 112) * 5.0;
  uint64_t v96 = v118;
  if (v118 >= (float *)v119)
  {
    int v98 = (float *)__p;
    uint64_t v99 = ((char *)v118 - (unsigned char *)__p) >> 2;
    unint64_t v100 = v99 + 1;
    if ((unint64_t)(v99 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v101 = v119 - (unsigned char *)__p;
    if ((v119 - (unsigned char *)__p) >> 1 > v100) {
      unint64_t v100 = v101 >> 1;
    }
    if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v102 = v100;
    }
    if (v102)
    {
      int v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v119, v102);
      int v98 = (float *)__p;
      uint64_t v96 = v118;
    }
    else
    {
      int v103 = 0;
    }
    int v104 = (float *)&v103[4 * v99];
    int v105 = &v103[4 * v102];
    *int v104 = v95;
    int v97 = v104 + 1;
    while (v96 != v98)
    {
      int v106 = *((_DWORD *)v96-- - 1);
      *((_DWORD *)v104-- - 1) = v106;
    }
    std::string __p = v104;
    int v118 = v97;
    int v119 = v105;
    if (v98) {
      operator delete(v98);
    }
  }
  else
  {
    *int v118 = v95;
    int v97 = v96 + 1;
  }
  int v118 = v97;
  unint64_t v107 = a3[1];
  if (v107 >= a3[2])
  {
    uint64_t v108 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, (uint64_t)&__p);
  }
  else
  {
    std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, (uint64_t)&__p);
    uint64_t v108 = v107 + 24;
  }
  a3[1] = v108;
  if (__p)
  {
    int v118 = (float *)__p;
    operator delete(__p);
  }
  if (v120)
  {
    uint64_t v121 = v120;
    operator delete(v120);
  }
  long long v120 = &v123;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  std::string v123 = (void **)&v126;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v123);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v129[1]);
}

void sub_20D35C914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t *__p,uint64_t *a33,uint64_t a34,uint64_t a35)
{
  if (__p)
  {
    a33 = __p;
    operator delete(__p);
  }
  std::string __p = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a35 = a10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = v35 - 184;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(v35 - 152));
  _Unwind_Resume(a1);
}

float FeatureProcessingBase::normalize_feature(uint64_t **a1, uint64_t **a2, unsigned int a3, float a4)
{
  std::string::basic_string[abi:ne180100]<0>(v19, "mean");
  v17[0] = v19;
  float v8 = *(float *)(*((void *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v19, (_OWORD **)v17)+ 7)+ 4 * a3);
  std::string::basic_string[abi:ne180100]<0>(v17, "std");
  v15[0] = v17;
  float v9 = *(float *)(*((void *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v17, (_OWORD **)v15)+ 7)+ 4 * a3);
  std::string::basic_string[abi:ne180100]<0>(v15, "std");
  __p[0] = v15;
  float v10 = *(float *)(*((void *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v15, (_OWORD **)__p)+ 7)+ 4 * a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "mean");
  uint64_t v21 = __p;
  float v11 = *(float *)(*((void *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)__p, (_OWORD **)&v21)+ 7)+ 4 * a3);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  return v11 + (float)((float)((float)(a4 - v8) / v9) * v10);
}

void sub_20D35CB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    float v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    float v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *float v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 9) = 0;
    *((void *)v6 + 7) = 0;
    char v12 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void FeatureProcessingTacotron::process_user_features(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)a2 + 8);
  if (v6 != *(void *)(*(void *)a2 + 16) && *(unsigned char *)(v6 + 60)) {
    *(_DWORD *)(a1 + 80) = 0;
  }
  std::map<std::string,std::vector<float>>::map[abi:ne180100](v66, 0);
  uint64_t v63 = 0;
  unint64_t v64 = 0;
  unint64_t v65 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v60 = 0;
  uint64_t v7 = *(void *)(*(void *)a2 + 8);
  uint64_t v51 = *(void *)(*(void *)a2 + 16);
  if (v7 == v51)
  {
    uint64_t v47 = -24;
    goto LABEL_67;
  }
  do
  {
    int v8 = *(_DWORD *)(a1 + 80);
    if (0xAAAAAAAAAAAAAAABLL * ((v61 - (uint64_t)v60) >> 3) > v8)
    {
      int v9 = *(_DWORD *)(a1 + 80);
      int v10 = v8 + 1;
      for (uint64_t i = &v60[3 * v9]; ; i += 3)
      {
        int v12 = *((char *)i + 23);
        if (v12 < 0)
        {
          if (i[1] != (void *)3) {
            break;
          }
          uint64_t v13 = (unsigned __int16 *)*i;
        }
        else
        {
          uint64_t v13 = (unsigned __int16 *)i;
          if (v12 != 3) {
            break;
          }
        }
        int v14 = *v13;
        int v15 = *((unsigned __int8 *)v13 + 2);
        if (v14 != 26995 || v15 != 108) {
          break;
        }
        ++v9;
        *(_DWORD *)(a1 + 80) = v10++;
      }
      int v8 = v9;
    }
    if (*(unsigned char *)(v7 + 61))
    {
      long long v17 = v64;
      if ((unint64_t)v64 >= v65)
      {
        uint64_t v18 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v63, (uint64_t)(v64 - 3));
      }
      else
      {
        *unint64_t v64 = 0;
        v17[1] = 0;
        v17[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v17, (const void *)*(v17 - 3), *(v17 - 2), (uint64_t)(*(v17 - 2) - *(v17 - 3)) >> 2);
        uint64_t v18 = (uint64_t)(v17 + 3);
      }
      unint64_t v64 = (void *)v18;
      unint64_t v21 = a3[1];
      uint64_t v22 = v21 - 24;
      if (v21 >= a3[2])
      {
LABEL_33:
        uint64_t v29 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, v22);
        goto LABEL_34;
      }
LABEL_32:
      std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, v22);
      uint64_t v29 = v21 + 24;
LABEL_34:
      a3[1] = v29;
      goto LABEL_35;
    }
    if (*(unsigned char *)(v7 + 62))
    {
      int v19 = v64;
      if ((unint64_t)v64 >= v65)
      {
        uint64_t v20 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v63, (uint64_t)(v64 - 3));
      }
      else
      {
        *unint64_t v64 = 0;
        v19[1] = 0;
        v19[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v19, (const void *)*(v19 - 3), *(v19 - 2), (uint64_t)(*(v19 - 2) - *(v19 - 3)) >> 2);
        uint64_t v20 = (uint64_t)(v19 + 3);
      }
      unint64_t v64 = (void *)v20;
      unint64_t v21 = a3[1];
      uint64_t v22 = v21 - 24;
      if (v21 >= a3[2]) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    int v23 = *(_DWORD *)(MEMORY[0x30] + 4 * v8);
    int v24 = *(_DWORD *)(MEMORY[0x48] + 4 * v8);
    int v25 = *(_DWORD *)(MEMORY[0x18] + 4 * v8);
    int v26 = operator new(0xCuLL);
    long long v58 = v26 + 3;
    int v59 = v26 + 3;
    *int v26 = v23;
    v26[1] = v24;
    v26[2] = v25;
    long long v57 = v26;
    unint64_t v27 = v64;
    if ((unint64_t)v64 >= v65)
    {
      uint64_t v28 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v63, (uint64_t)&v57);
    }
    else
    {
      *unint64_t v64 = 0;
      v27[1] = 0;
      void v27[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v27, v57, (uint64_t)v58, (v58 - (unsigned char *)v57) >> 2);
      uint64_t v28 = (uint64_t)(v27 + 3);
    }
    uint64_t v30 = 0;
    unint64_t v64 = (void *)v28;
    std::string __p = 0;
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    do
    {
      std::map<std::string,std::vector<float>>::map[abi:ne180100](v53, v66);
      std::map<std::string,std::vector<float>>::map[abi:ne180100](v52, (const void ***)(a1 + 32));
      float v31 = FeatureProcessingBase::normalize_feature(v53, v52, v30, *((float *)v57 + v30));
      float v32 = v31;
      uint64_t v33 = v55;
      if (v55 >= v56)
      {
        uint64_t v35 = (float *)__p;
        uint64_t v36 = ((char *)v55 - (unsigned char *)__p) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)v56 - (unsigned char *)__p;
        if (((char *)v56 - (unsigned char *)__p) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v56, v39);
          uint64_t v35 = (float *)__p;
          uint64_t v33 = v55;
        }
        else
        {
          uint64_t v40 = 0;
        }
        int v41 = (float *)&v40[4 * v36];
        float *v41 = v32;
        unint64_t v34 = v41 + 1;
        while (v33 != v35)
        {
          int v42 = *((_DWORD *)v33-- - 1);
          *((_DWORD *)v41-- - 1) = v42;
        }
        std::string __p = v41;
        uint64_t v55 = v34;
        unint64_t v56 = (float *)&v40[4 * v39];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *uint64_t v55 = v31;
        unint64_t v34 = v33 + 1;
      }
      uint64_t v55 = v34;
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v52[1]);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v53[1]);
      ++v30;
    }
    while (v30 != 3);
    unint64_t v43 = a3[1];
    if (v43 >= a3[2])
    {
      uint64_t v44 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, (uint64_t)&__p);
      uint64_t v44 = v43 + 24;
    }
    a3[1] = v44;
    ++*(_DWORD *)(a1 + 80);
    if (__p)
    {
      uint64_t v55 = (float *)__p;
      operator delete(__p);
    }
    if (v57)
    {
      long long v58 = v57;
      operator delete(v57);
    }
LABEL_35:
    v7 += 104;
  }
  while (v7 != v51);
  uint64_t v45 = v64;
  if ((unint64_t)v64 < v65)
  {
    *unint64_t v64 = 0;
    v45[1] = 0;
    v45[2] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v45, (const void *)*(v45 - 3), *(v45 - 2), (uint64_t)(*(v45 - 2) - *(v45 - 3)) >> 2);
    uint64_t v46 = (uint64_t)(v45 + 3);
    goto LABEL_68;
  }
  uint64_t v47 = (uint64_t)(v64 - 3);
LABEL_67:
  uint64_t v46 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v63, v47);
LABEL_68:
  unint64_t v64 = (void *)v46;
  unint64_t v48 = a3[1];
  uint64_t v49 = v48 - 24;
  if (v48 >= a3[2])
  {
    uint64_t v50 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, v49);
  }
  else
  {
    std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, v49);
    uint64_t v50 = v48 + 24;
  }
  a3[1] = v50;
  long long v57 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  uint64_t v60 = (void **)&v63;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v60);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v66[1]);
}

void sub_20D35D190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char **__p,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27)
{
  std::string __p = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(v27 - 136));
  _Unwind_Resume(a1);
}

void PhonewiseFeatureModule::process_data(uint64_t a1, uint64_t *a2)
{
  void (***v7)(uint64_t *__return_ptr);
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31[3];
  uint64_t v32[3];
  uint64_t v33[4];
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  long long buf;
  uint64_t v39;
  uint64_t v40;

  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void **)(*(void *)v4 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = *(void (****)(uint64_t *__return_ptr))(a1 + 296);
    unint64_t v34 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v7 = *(void (****)(uint64_t *__return_ptr))(a1 + 296);
    unint64_t v34 = 0;
  }
  v33[3] = (uint64_t)v6;
  (**v7)(&v35);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3);
    _os_log_impl(&dword_20CD80000, v8, OS_LOG_TYPE_INFO, "Normalized speech feature slice size: %zu", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(6, "Normalized speech feature slice size: %zu", v9, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    int v12 = (uint64_t)(v6[5] - v6[4]) >> 2;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v12;
    _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_INFO, "Tacotron feature phone embedding size: %zu", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(6, "Tacotron feature phone embedding size: %zu", v11, (uint64_t)(v6[5] - v6[4]) >> 2);
  uint64_t v13 = (void *)(a1 + 272);
  if (*(char *)(a1 + 295) < 0)
  {
    int v15 = *(void *)(a1 + 280);
    if (v15 != 8)
    {
      if (v15 != 11) {
        goto LABEL_43;
      }
      uint64_t v13 = (void *)*v13;
LABEL_21:
      char v16 = (void *)*v13;
      long long v17 = *(void *)((char *)v13 + 3);
      if (v16 == (void *)0x6565707374736166 && v17 == 0x3268636565707374)
      {
        int v19 = (uint64_t)(v6[5] - v6[4]) >> 2;
        LODWORD(v37) = 0;
        std::vector<float>::vector(&buf, v19, &v37);
        uint64_t v20 = (void *)v6[15];
        if (v20)
        {
          v6[16] = v20;
          operator delete(v20);
          v6[15] = 0;
          v6[16] = 0;
          v6[17] = 0;
        }
        *(_OWORD *)(v6 + 15) = buf;
        v6[17] = v39;
        unint64_t v21 = (uint64_t)(v6[5] - v6[4]) >> 2;
        LODWORD(v37) = 0;
        std::vector<float>::vector(&buf, v21, &v37);
        uint64_t v22 = (void *)v6[18];
        if (v22)
        {
          v6[19] = v22;
          operator delete(v22);
          v6[18] = 0;
          v6[19] = 0;
          v6[20] = 0;
        }
        *((_OWORD *)v6 + 9) = buf;
        v6[20] = v39;
        int v23 = (uint64_t)(v6[5] - v6[4]) >> 2;
        LODWORD(v37) = 0;
        std::vector<float>::vector(&buf, v23, &v37);
        int v24 = (void *)v6[21];
        if (v24)
        {
          v6[22] = v24;
          operator delete(v24);
          v6[21] = 0;
          v6[22] = 0;
          v6[23] = 0;
        }
        *(_OWORD *)(v6 + 21) = buf;
        v6[23] = v39;
        memset(v33, 0, 24);
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v33, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
        PhonewiseFeatureModule::get_prosody_feature((char **)&buf, v33, 2u);
        int v25 = (void *)v6[24];
        if (v25)
        {
          v6[25] = v25;
          operator delete(v25);
          v6[24] = 0;
          v6[25] = 0;
          v6[26] = 0;
        }
        *((_OWORD *)v6 + 12) = buf;
        v6[26] = v39;
        unint64_t v39 = 0;
        unint64_t v37 = (void **)v33;
        std::string buf = 0uLL;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
        memset(v32, 0, sizeof(v32));
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v32, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
        PhonewiseFeatureModule::get_prosody_feature((char **)&buf, v32, 0);
        int v26 = (void *)v6[27];
        if (v26)
        {
          v6[28] = v26;
          operator delete(v26);
          v6[27] = 0;
          v6[28] = 0;
          v6[29] = 0;
        }
        *(_OWORD *)(v6 + 27) = buf;
        v6[29] = v39;
        unint64_t v39 = 0;
        unint64_t v37 = (void **)v32;
        std::string buf = 0uLL;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
        memset(v31, 0, sizeof(v31));
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v31, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
        PhonewiseFeatureModule::get_prosody_feature((char **)&buf, v31, 1u);
        uint64_t v27 = (void *)v6[30];
        if (v27)
        {
          v6[31] = v27;
          operator delete(v27);
          v6[30] = 0;
          v6[31] = 0;
          v6[32] = 0;
        }
        *((_OWORD *)v6 + 15) = buf;
        v6[32] = v39;
        unint64_t v39 = 0;
        unint64_t v37 = (void **)v31;
        std::string buf = 0uLL;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
        *(_DWORD *)v6[15] = 1065353216;
        *(_DWORD *)v6[24] = 0;
      }
      goto LABEL_43;
    }
    uint64_t v13 = (void *)*v13;
  }
  else
  {
    int v14 = *(unsigned __int8 *)(a1 + 295);
    if (v14 != 8)
    {
      if (v14 != 11) {
        goto LABEL_43;
      }
      goto LABEL_21;
    }
  }
  if (*v13 == 0x6E6F72746F636174 && v6 + 12 != &v35) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 12), v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
  }
LABEL_43:
  uint64_t v28 = (std::__shared_weak_count *)a2[1];
  uint64_t v29 = *a2;
  uint64_t v30 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v29);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  *(void *)&std::string buf = &v35;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D35D828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  *(void *)(v24 - 112) = &a23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 112));
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void sub_20D35D898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  JUMPOUT(0x20D35D884);
}

void PhonewiseFeatureModule::get_prosody_feature(char **a1, uint64_t *a2, unsigned int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    int v8 = a1 + 2;
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = *(void *)(v3 + 24 * v7);
      if ((unint64_t)v6 >= *v8)
      {
        int v12 = *a1;
        uint64_t v13 = (v6 - *a1) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = *v8 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v8, v16);
          int v12 = *a1;
          uint64_t v6 = a1[1];
        }
        else
        {
          long long v17 = 0;
        }
        uint64_t v18 = &v17[4 * v13];
        *(_DWORD *)uint64_t v18 = *(_DWORD *)(v10 + 4 * v9);
        float v11 = v18 + 4;
        while (v6 != v12)
        {
          int v19 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        *a1 = v18;
        a1[1] = v11;
        a1[2] = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v6 = *(_DWORD *)(v10 + 4 * v9);
        float v11 = v6 + 4;
      }
      a1[1] = v11;
      ++v7;
      uint64_t v3 = *a2;
      uint64_t v6 = v11;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v7);
  }
}

void sub_20D35DA00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void PhonewiseFeatureModule::~PhonewiseFeatureModule(PhonewiseFeatureModule *this)
{
  PhonewiseFeatureModule::~PhonewiseFeatureModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C203728;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  Module::~Module(this);
}

uint64_t FeatureProcessingBase::FeatureProcessingBase(uint64_t a1, uint64_t a2, long long ***a3)
{
  v29[19] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C202F58;
  uint64_t v5 = (void *)(a1 + 8);
  FeatureProcessingBase::Config::Config(a1 + 8, a2);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (void **)(a1 + 56);
  *(void *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(a1 + 72) = 0;
  SharedObjectPool::get<VoiceConfig>(&v21, *a3);
  (*(void (**)(long long *__return_ptr))(*(void *)v21 + 40))(&v27);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v27;
  *(void *)(a1 + 72) = v28[0];
  std::ifstream::basic_ifstream((uint64_t *)&v27);
  v26[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(&v27, (uint64_t)v26, 1, (uint64_t)v19);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v26);
  unint64_t v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v19, "mean");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(buf, (unsigned __int8 *)v7);
  std::string::basic_string[abi:ne180100]<0>(__p, "mean");
  int v23 = __p;
  int v8 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)__p, (_OWORD **)&v23);
  uint64_t v9 = (void *)v8[7];
  if (v9)
  {
    v8[8] = v9;
    operator delete(v9);
    v8[7] = 0;
    v8[8] = 0;
    v8[9] = 0;
  }
  *(_OWORD *)(v8 + 7) = *(_OWORD *)buf;
  v8[9] = v25;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v19, "std");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(buf, (unsigned __int8 *)v10);
  std::string::basic_string[abi:ne180100]<0>(__p, "std");
  int v23 = __p;
  float v11 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)__p, (_OWORD **)&v23);
  int v12 = (void *)v11[7];
  if (v12)
  {
    char v11[8] = v12;
    operator delete(v12);
    v11[7] = 0;
    char v11[8] = 0;
    v11[9] = 0;
  }
  *(_OWORD *)(v11 + 7) = *(_OWORD *)buf;
  v11[9] = v25;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = v5;
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v5;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_INFO, "Target user voice profile is loaded from: %s", buf, 0xCu);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v5 = (void *)*v5;
  }
  Diagnostics::log(6, "Target user voice profile is loaded from: %s", v14, v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  *(void *)&long long v27 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)&v28[-2] + *(void *)(v27 - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x210558FE0](v28);
  std::istream::~istream();
  MEMORY[0x210559500](v29);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return a1;
}

void sub_20D35DE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a18, a17);
  std::ifstream::~ifstream(&a29);
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (*(char *)(v29 + 79) < 0) {
    operator delete(*v31);
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(v29 + 40));
  if (*(char *)(v29 + 31) < 0) {
    operator delete(*v30);
  }
  _Unwind_Resume(a1);
}

uint64_t FeatureProcessingBase::Config::Config(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>((void *)a1, &byte_20D5A22AE);
  uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "target_user_voice_profile");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v4, &v6);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v6;
  return a1;
}

void sub_20D35DFB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<FeatureProcessingFastspeech2>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &off_26C2048C0;
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &unk_26C202F58;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<FeatureProcessingFastspeech2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FeatureProcessingFastspeech2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FeatureProcessingTacotron>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &unk_26C202F58;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<FeatureProcessingTacotron>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FeatureProcessingTacotron>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Module::callback(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 168);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = (std::recursive_mutex *)(v2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(v2 + 56));
  {
    std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 56));
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)v5 + 8);
  std::string v6 = *(std::__shared_weak_count **)(*(void *)v5 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
  if (v7)
  {
    long long v10 = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(v7 + 24);
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    a2 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v8 + 48))(v8, &v10);
    if (v6) {
      goto LABEL_8;
    }
  }
  else if (v6)
  {
LABEL_8:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v7) {
    return 0;
  }
  return a2;
}

void sub_20D35E2F0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Module::cache(uint64_t a1, long long *a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a1 + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 208));
  if (!*(unsigned char *)(a1 + 160))
  {
    std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)(a1 + 112), a2);
    Observable::emit((uint64_t **)(a1 + 8), "cache", 0);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D35E38C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Module::clean_up(Module *this)
{
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  uint64_t v3 = (void **)*((void *)this + 15);
  uint64_t v4 = (void **)*((void *)this + 16);
  if (v4 == v3)
  {
    uint64_t v5 = (void *)((char *)this + 152);
    uint64_t v4 = (void **)*((void *)this + 15);
  }
  else
  {
    uint64_t v5 = (void *)((char *)this + 152);
    unint64_t v6 = *((void *)this + 18);
    uint64_t v7 = &v3[v6 >> 8];
    uint64_t v8 = (uint64_t)*v7;
    uint64_t v9 = (uint64_t)*v7 + 16 * v6;
    uint64_t v10 = *(uint64_t *)((char *)v3 + (((*((void *)this + 19) + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)this + 152) + v6);
    if (v9 != v10)
    {
      do
      {
        uint64_t v11 = *(std::__shared_weak_count **)(v9 + 8);
        if (v11)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          uint64_t v8 = (uint64_t)*v7;
        }
        v9 += 16;
        if (v9 - v8 == 4096)
        {
          uint64_t v12 = (uint64_t)v7[1];
          ++v7;
          uint64_t v8 = v12;
          uint64_t v9 = v12;
        }
      }
      while (v9 != v10);
      uint64_t v3 = (void **)*((void *)this + 15);
      uint64_t v4 = (void **)*((void *)this + 16);
    }
  }
  *uint64_t v5 = 0;
  unint64_t v13 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v14 = *((void *)this + 16);
      uint64_t v3 = (void **)(*((void *)this + 15) + 8);
      *((void *)this + 15) = v3;
      unint64_t v13 = v14 - (void)v3;
    }
    while (v13 > 0x10);
  }
  if (v13 >> 3 == 1)
  {
    uint64_t v15 = 128;
  }
  else
  {
    if (v13 >> 3 != 2) {
      goto LABEL_17;
    }
    uint64_t v15 = 256;
  }
  *((void *)this + 18) = v15;
LABEL_17:
  std::recursive_mutex::unlock(v2);
}

void Module::uncancel(Module *this)
{
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  *((unsigned char *)this + 160) = 0;
  std::recursive_mutex::unlock(v2);
}

void Module::cancel(Module *this)
{
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  *((unsigned char *)this + 160) = 1;
  std::recursive_mutex::unlock(v2);
}

void Module::yield(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_20D35E5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void Module::process(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a1 + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 208));
  *(unsigned char *)(a1 + 160) = 0;
  std::recursive_mutex::unlock(v4);
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v19 = *a2;
  uint64_t v20 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &v19);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::recursive_mutex::lock(v4);
  if (*(unsigned char *)(a1 + 160))
  {
    unint64_t v6 = *(void ***)(a1 + 120);
    uint64_t v7 = *(void ***)(a1 + 128);
    if (v7 == v6)
    {
      uint64_t v8 = (void *)(a1 + 152);
      uint64_t v7 = *(void ***)(a1 + 120);
    }
    else
    {
      uint64_t v8 = (void *)(a1 + 152);
      unint64_t v9 = *(void *)(a1 + 144);
      uint64_t v10 = &v6[v9 >> 8];
      uint64_t v11 = (uint64_t)*v10;
      uint64_t v12 = (uint64_t)*v10 + 16 * v9;
      uint64_t v13 = *(uint64_t *)((char *)v6 + (((*(void *)(a1 + 152) + v9) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*(unsigned char *)(a1 + 152) + v9);
      if (v12 != v13)
      {
        do
        {
          uint64_t v14 = *(std::__shared_weak_count **)(v12 + 8);
          if (v14)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            uint64_t v11 = (uint64_t)*v10;
          }
          v12 += 16;
          if (v12 - v11 == 4096)
          {
            uint64_t v15 = (uint64_t)v10[1];
            ++v10;
            uint64_t v11 = v15;
            uint64_t v12 = v15;
          }
        }
        while (v12 != v13);
        unint64_t v6 = *(void ***)(a1 + 120);
        uint64_t v7 = *(void ***)(a1 + 128);
      }
    }
    *uint64_t v8 = 0;
    unint64_t v16 = (char *)v7 - (char *)v6;
    if ((unint64_t)((char *)v7 - (char *)v6) >= 0x11)
    {
      do
      {
        operator delete(*v6);
        uint64_t v17 = *(void *)(a1 + 128);
        unint64_t v6 = (void **)(*(void *)(a1 + 120) + 8);
        *(void *)(a1 + 120) = v6;
        unint64_t v16 = v17 - (void)v6;
      }
      while (v16 > 0x10);
    }
    if (v16 >> 3 == 1)
    {
      uint64_t v18 = 128;
      goto LABEL_21;
    }
    if (v16 >> 3 == 2)
    {
      uint64_t v18 = 256;
LABEL_21:
      *(void *)(a1 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v18;
    }
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D35E774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void Module::retrieve(Module *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  if (*((void *)this + 19))
  {
    long long v5 = *(_OWORD *)(*(void *)(*((void *)this + 15) + ((*((void *)this + 18) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *((void *)this + 18));
    *(_OWORD *)a2 = v5;
    if (*((void *)&v5 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::deque<std::shared_ptr<Agglomerate>>::pop_front((uint64_t)this + 112);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void std::deque<std::shared_ptr<Agglomerate>>::pop_front(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a1 + 8) + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * v2
                                    + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    unint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v4 = *(void *)(a1 + 40) - 1;
  unint64_t v5 = v2 + 1;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  if (v5 >= 0x200)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
}

uint64_t Module::Module(uint64_t a1, char *a2, uint64_t *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(a1 + 32) = 850045863;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)a1 = off_26C205918;
  *(void *)(a1 + 8) = a1 + 16;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 18std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  unint64_t v6 = (void **)(a1 + 184);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 200) = 0;
  MEMORY[0x210559270](a1 + 208);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 176);
  *(void *)(a1 + 168) = v8;
  *(void *)(a1 + 176) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "id");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("module", a2, (const void **)__p, &v13);
    if (*(char *)(a1 + 207) < 0) {
      operator delete(*v6);
    }
    *(std::string *)unint64_t v6 = v13;
    *((unsigned char *)&v13.__r_.__value_.__s + 23) = 0;
    v13.__r_.__value_.__s.__data_[0] = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    MEMORY[0x210558E70](v6, "module");
  }
  return a1;
}

void sub_20D35EA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex::~recursive_mutex(v18);
  if (*(char *)(v14 + 207) < 0) {
    operator delete(*v17);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v14 + 176);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100](v16);
  uint64_t v22 = *(std::__shared_weak_count **)(v14 + 104);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::mutex::~mutex(v15);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(*v19);
  _Unwind_Resume(a1);
}

void Module::enable_hot_plugging(uint64_t a1, uint64_t a2, std::string::size_type a3, std::__shared_weak_count *a4)
{
  uint64_t v8 = (std::string *)operator new(0x58uLL);
  unint64_t v9 = (std::string::__raw *)v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C2157C8;
  uint64_t v10 = v8 + 1;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8 + 1, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  v9[2].__words[1] = 0;
  v9[2].__words[0] = (std::string::size_type)&v9[2].__words[1];
  v9[2].__words[2] = 0;
  v9[3].__words[0] = a3;
  v9[3].__words[1] = (std::string::size_type)a4;
  if (a4)
  {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *(void *)&long long v11 = v10;
  *((void *)&v11 + 1) = v9;
  char v12 = *(std::__shared_weak_count **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = v11;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_20D35EB98(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ModuleBuilder>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1 + 48, *(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 24);
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, a2[1]);
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(a1 + 8, (uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<ModuleBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2157C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ModuleBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2157C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void SharedObjectPool::get<ModuleFactory>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  uint64_t v5 = a2 + 32;
  {
    unint64_t v6 = (std::__shared_weak_count *)operator new(0x30uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_26C215800;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_26C2002A8;
    uint64_t v7 = operator new(0x48uLL);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = off_26C218FC8;
    v6[1].__shared_owners_ = (uint64_t)ModuleFactory::ModuleFactoryImpl::ModuleFactoryImpl((ModuleFactory::ModuleFactoryImpl *)(v7 + 3));
    v6[1].__shared_weak_owners_ = (uint64_t)v7;
    std::string v13 = &v15;
    if (!v8) {
      operator new();
    }
    std::string v13 = (char ***)off_26C2063F8;
    *(void *)&long long v14 = v6 + 1;
    *((void *)&v14 + 1) = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v9 = v14;
    long long v14 = 0uLL;
    uint64_t v10 = *(std::__shared_weak_count **)(v8 + 16);
    *(_OWORD *)(v8 + 8) = v9;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      std::string v13 = (char ***)off_26C2063F8;
      if (*((void *)&v14 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v12 = *(void *)(*(void *)v11 + 16);
  *a1 = *(void *)(*(void *)v11 + 8);
  a1[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D35EF28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v6);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ModuleBuilder::add_config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v15, a3);
  uint64_t v5 = (void **)(a1 + 24);
  unint64_t v6 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(a1 + 24, &v18, (const void **)a2);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = (char *)operator new(0x48uLL);
    v16[2] = (uint64_t *)(a1 + 32);
    char v17 = 0;
    long long v9 = (std::string *)(v7 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v7 + 6) = *(void *)(a2 + 16);
    }
    v7[56] = 0;
    *((void *)v7 + 8) = 0;
    uint64_t v10 = v18;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v10;
    *uint64_t v8 = v7;
    uint64_t v11 = (void *)**v5;
    uint64_t v12 = (uint64_t *)v7;
    if (v11)
    {
      *uint64_t v5 = v11;
      uint64_t v12 = (uint64_t *)*v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v12);
    ++*(void *)(a1 + 40);
  }
  int v13 = v7[56];
  v7[56] = v15[0];
  v15[0] = v13;
  long long v14 = (uint64_t *)*((void *)v7 + 8);
  *((uint64_t **)v7 + 8) = v16[0];
  v16[0] = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v16, v13);
}

void sub_20D35F0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](v12, v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a10, a9);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<std::shared_ptr<ModuleFactory>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2063F8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<ModuleFactory>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2063F8;
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t Pipeline::modules(Pipeline *this)
{
  return (uint64_t)this + 8;
}

void Pipeline::read(Pipeline *this@<X0>, uint64_t a2@<X8>)
{
  if (*((void *)this + 12))
  {
    uint64_t v3 = (char *)this + 56;
    long long v4 = *(_OWORD *)(*(void *)(*((void *)this + 8) + ((*((void *)this + 11) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *((void *)this + 11));
    *(_OWORD *)a2 = v4;
    if (*((void *)&v4 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::deque<std::shared_ptr<Agglomerate>>::pop_front((uint64_t)v3);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
}

uint64_t Pipeline::reset(Pipeline *this)
{
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEBUG, "Pipeline reset", v10, 2u);
  }
  uint64_t result = Diagnostics::log(7, "Pipeline reset", v3);
  *((unsigned char *)this + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  unint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v5 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7);
  }
  uint64_t v9 = *((void *)this + 4);
  uint64_t v8 = *((void *)this + 5);
  while (v9 != v8)
  {
    uint64_t result = *(void *)(*(void *)v9 + 40);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result);
    }
    v9 += 16;
  }
  return result;
}

uint64_t Pipeline::cancel(Pipeline *this)
{
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEBUG, "Pipeline cancel", v10, 2u);
  }
  uint64_t result = Diagnostics::log(7, "Pipeline cancel", v3);
  *((unsigned char *)this + 10std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 1;
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  unint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v5 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
  }
  uint64_t v9 = *((void *)this + 4);
  uint64_t v8 = *((void *)this + 5);
  while (v9 != v8)
  {
    uint64_t result = *(void *)(*(void *)v9 + 40);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    }
    v9 += 16;
  }
  return result;
}

void Pipeline::add_connection(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[5];
  unint64_t v4 = a1[6];
  if ((unint64_t)v5 < v4)
  {
    uint64_t v6 = a2[1];
    *(void *)uint64_t v5 = *a2;
    *((void *)v5 + 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = v5 + 16;
    goto LABEL_23;
  }
  uint64_t v8 = (char *)a1[4];
  uint64_t v9 = (v5 - v8) >> 4;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 3 > v10) {
    unint64_t v10 = v11 >> 3;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v13 = (char *)operator new(16 * v12);
  long long v14 = &v13[16 * v9];
  long long v15 = *(_OWORD *)a2;
  *(_OWORD *)long long v14 = *(_OWORD *)a2;
  if (*((void *)&v15 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v8 = (char *)a1[4];
    uint64_t v5 = (char *)a1[5];
  }
  unint64_t v16 = &v13[16 * v12];
  uint64_t v7 = v14 + 16;
  if (v5 == v8)
  {
    a1[4] = v14;
    a1[5] = v7;
    a1[6] = v16;
    if (!v8) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  do
  {
    long long v17 = *((_OWORD *)v5 - 1);
    v5 -= 16;
    *((_OWORD *)v14 - 1) = v17;
    v14 -= 16;
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
  }
  while (v5 != v8);
  uint64_t v18 = (char *)a1[4];
  uint64_t v8 = (char *)a1[5];
  a1[4] = v14;
  a1[5] = v7;
  a1[6] = v16;
  if (v8 != v18)
  {
    do
    {
      uint64_t v19 = (std::__shared_weak_count *)*((void *)v8 - 1);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v8 -= 16;
    }
    while (v8 != v18);
    uint64_t v8 = v18;
  }
  if (v8) {
LABEL_22:
  }
    operator delete(v8);
LABEL_23:
  a1[5] = v7;
}

void Pipeline::replace_module(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  for (uint64_t i = *(void **)(a1 + 16); v3 != i; v3 += 2)
  {
    if (*v3 == *a2)
    {
      uint64_t v8 = *a3;
      uint64_t v7 = a3[1];
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)v3[1];
      void *v3 = v8;
      v3[1] = v7;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
}

void Pipeline::insert_module(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = (uint64_t)(a1 + 3);
  unint64_t v5 = a1[3];
  uint64_t v8 = a1[1];
  uint64_t v7 = (char *)a1[2];
  uint64_t v9 = a2 - v8;
  uint64_t v10 = (a2 - v8) >> 4;
  uint64_t v11 = (char *)(v8 + ((a2 - v8) & 0xFFFFFFFFFFFFFFF0));
  if ((unint64_t)v7 >= v5)
  {
    unint64_t v15 = ((uint64_t)&v7[-v8] >> 4) + 1;
    if (v15 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v5 - v8;
    if (v17 >> 3 > v15) {
      unint64_t v15 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v53 = v6;
    if (v18) {
      unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v18);
    }
    else {
      uint64_t v19 = 0;
    }
    float v31 = (void *)(v18 + 16 * v10);
    uint64_t v50 = (char *)v18;
    *(void *)&long long v51 = v31;
    *((void *)&v51 + 1) = v31;
    int64x2_t v52 = (char *)(v18 + 16 * v19);
    if (v10 == v19)
    {
      if (v9 < 1)
      {
        if (v8 == a2) {
          unint64_t v33 = 1;
        }
        else {
          unint64_t v33 = v9 >> 3;
        }
        uint64_t v57 = v6;
        unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v33);
        uint64_t v36 = v51;
        uint64_t v37 = *((void *)&v51 + 1) - v51;
        if (*((void *)&v51 + 1) == (void)v51)
        {
          int64x2_t v42 = vdupq_n_s64(v51);
          unint64_t v39 = (unint64_t)&v34[16 * (v33 >> 2)];
        }
        else
        {
          uint64_t v38 = v37 >> 4;
          unint64_t v39 = (unint64_t)&v34[16 * (v33 >> 2) + (v37 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v40 = 16 * v38;
          int v41 = &v34[16 * (v33 >> 2)];
          do
          {
            *(_OWORD *)int v41 = *(_OWORD *)v36;
            v41 += 16;
            *(void *)uint64_t v36 = 0;
            *(void *)(v36 + 8) = 0;
            v36 += 16;
            v40 -= 16;
          }
          while (v40);
          int64x2_t v42 = (int64x2_t)v51;
        }
        unint64_t v43 = v52;
        uint64_t v54 = (uint64_t)v50;
        uint64_t v50 = v34;
        *(void *)&long long v51 = &v34[16 * (v33 >> 2)];
        int64x2_t v55 = v42;
        *((void *)&v51 + 1) = v39;
        int64x2_t v52 = &v34[16 * v35];
        unint64_t v56 = v43;
        std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)&v54);
        float v31 = (void *)*((void *)&v51 + 1);
      }
      else
      {
        unint64_t v32 = v10 + 2;
        if (v10 >= -1) {
          unint64_t v32 = v10 + 1;
        }
        v31 -= 2 * (v32 >> 1);
        *(void *)&long long v51 = v31;
        *((void *)&v51 + 1) = v31;
      }
    }
    *float v31 = *(void *)v3;
    uint64_t v44 = *((void *)v3 + 1);
    v31[1] = v44;
    if (v44)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
      float v31 = (void *)*((void *)&v51 + 1);
    }
    *((void *)&v51 + 1) = v31 + 2;
    *(void *)&long long v51 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<Module>>,std::reverse_iterator<std::shared_ptr<Module>*>,std::reverse_iterator<std::shared_ptr<Module>*>,std::reverse_iterator<std::shared_ptr<Module>*>>(v6, (uint64_t)v11, v11, a1[1], (void *)a1[1], v51, v51);
    uint64_t v45 = (char *)a1[2];
    uint64_t v46 = (_OWORD *)*((void *)&v51 + 1);
    int v59 = (_OWORD *)*((void *)&v51 + 1);
    uint64_t v58 = *((void *)&v51 + 1);
    uint64_t v54 = v6;
    v55.i64[0] = (uint64_t)&v58;
    v55.i64[1] = (uint64_t)&v59;
    if (v11 != v45)
    {
      do
      {
        *v46++ = *(_OWORD *)v11;
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        v11 += 16;
      }
      while (v11 != v45);
      int v59 = v46;
    }
    LOBYTE(v56) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<Agglomerate>>,std::shared_ptr<Agglomerate>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v54);
    long long v47 = *(_OWORD *)(a1 + 1);
    uint64_t v48 = (uint64_t)v52;
    a1[1] = v51;
    a1[2] = (uint64_t)v46;
    long long v51 = v47;
    uint64_t v49 = a1[3];
    a1[3] = v48;
    int64x2_t v52 = (char *)v49;
    uint64_t v50 = (char *)v47;
    std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)&v50);
  }
  else if (v11 == v7)
  {
    long long v30 = *(_OWORD *)a3;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a3;
    if (*((void *)&v30 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    a1[2] = (uint64_t)(v11 + 16);
  }
  else
  {
    unint64_t v12 = v11 + 16;
    int v13 = v7 - 16;
    long long v14 = (_OWORD *)a1[2];
    while (v13 < v7)
    {
      *v14++ = *(_OWORD *)v13;
      *(void *)int v13 = 0;
      *((void *)v13 + 1) = 0;
      v13 += 16;
    }
    a1[2] = (uint64_t)v14;
    if (v7 != v12)
    {
      uint64_t v20 = (std::__shared_weak_count **)(v7 - 8);
      uint64_t v21 = 16 * ((v7 - v12) >> 4);
      uint64_t v22 = v8 + 16 * v10 - 16;
      do
      {
        int v23 = (void *)(v22 + v21);
        long long v24 = *(_OWORD *)(v22 + v21);
        void *v23 = 0;
        v23[1] = 0;
        uint64_t v25 = *v20;
        *(_OWORD *)(v20 - 1) = v24;
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        v20 -= 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v11 <= v3) {
      v3 += 16 * (a1[2] > (unint64_t)v3);
    }
    uint64_t v27 = *(void *)v3;
    uint64_t v26 = *((void *)v3 + 1);
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)uint64_t v11 = v27;
    uint64_t v28 = v8 + 16 * v10;
    uint64_t v29 = *(std::__shared_weak_count **)(v28 + 8);
    *(void *)(v28 + 8) = v26;
    if (v29)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
  }
}

void sub_20D35F95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<Module>>,std::reverse_iterator<std::shared_ptr<Module>*>,std::reverse_iterator<std::shared_ptr<Module>*>,std::reverse_iterator<std::shared_ptr<Module>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  while (a3 != a5)
  {
    long long v8 = *((_OWORD *)a3 - 1);
    a3 -= 2;
    *(_OWORD *)(result - 16) = v8;
    result -= 16;
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t *Pipeline::push_back_module(uint64_t *result, long long *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (uint64_t)(result + 3);
  unint64_t v4 = result[3];
  uint64_t v6 = (void *)result[2];
  if ((unint64_t)v6 >= v4)
  {
    uint64_t v9 = result[1];
    uint64_t v10 = ((uint64_t)v6 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v26 = v5;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v13);
    unint64_t v15 = &v14[16 * v10];
    uint64_t v17 = &v14[16 * v16];
    *(void *)&long long v24 = v15;
    uint64_t v25 = v17;
    long long v18 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v18 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v19 = v24;
      uint64_t v17 = v25;
    }
    else
    {
      uint64_t v19 = (uint64_t)v15;
    }
    long long v8 = v15 + 16;
    uint64_t v20 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<Module>>,std::reverse_iterator<std::shared_ptr<Module>*>,std::reverse_iterator<std::shared_ptr<Module>*>,std::reverse_iterator<std::shared_ptr<Module>*>>(v5, v3[2], (void *)v3[2], v3[1], (void *)v3[1], v19, v19);
    long long v21 = *(_OWORD *)(v3 + 1);
    v3[1] = v20;
    v3[2] = (uint64_t)v8;
    long long v24 = v21;
    uint64_t v22 = v3[3];
    void v3[3] = (uint64_t)v17;
    uint64_t v25 = (char *)v22;
    uint64_t v23 = v21;
    uint64_t result = (uint64_t *)std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    void *v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
    v6[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    long long v8 = v6 + 2;
  }
  v3[2] = (uint64_t)v8;
  return result;
}

uint64_t StreamingPipeline::process(uint64_t result, void *a2)
{
  uint64_t v200 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(result + 8);
  if (v2 == *(void **)(result + 16)) {
    return result;
  }
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 104)) {
    return result;
  }
  uint64_t v5 = (std::__shared_weak_count *)v2[1];
  *(void *)&long long v198 = *v2;
  *((void *)&v198 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v195 = 0u;
  long long v196 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *(void *)&long long v193 = (char *)&v195 + 8;
  v191[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(1uLL);
  v191[1] = v191[0];
  *(void **)&long long v192 = v191[0];
  *((void *)&v192 + 1) = (char *)v191[0] + 8 * v6;
  *(void *)&long long v190 = operator new(0x1000uLL);
  std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(v191, &v190);
  for (uint64_t i = (void *)v195;
        i != __p[1];
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)v191, i))
  {
    --i;
  }
  long long v8 = __p[0];
  long long v9 = *(_OWORD *)v191;
  v191[0] = __p[0];
  v191[1] = i;
  *(_OWORD *)std::string __p = v9;
  long long v195 = v192;
  if (v191[0])
  {
    operator delete(v8);
    uint64_t v10 = v196;
    unint64_t v11 = (char *)__p[1];
    uint64_t v12 = (char *)v195;
  }
  else
  {
    uint64_t v10 = v196;
    unint64_t v11 = (char *)*((void *)&v9 + 1);
    uint64_t v12 = (char *)v192;
  }
  uint64_t v13 = *((void *)&v196 + 1);
  unsigned __int8 v14 = v10 + BYTE8(v196);
  unint64_t v15 = &v11[8 * ((unint64_t)(v10 + *((void *)&v196 + 1)) >> 8)];
  uint64_t v16 = *(char **)v15;
  uint64_t v17 = *(void *)v15 + 16 * v14;
  if (v12 == v11) {
    long long v18 = 0;
  }
  else {
    long long v18 = (char *)v17;
  }
  uint64_t v19 = (v18 - v16) >> 4;
  if (v18 - v16 <= -16)
  {
    unint64_t v22 = 254 - v19;
    unsigned __int8 v20 = ~(_BYTE)v22;
    long long v21 = &v15[-8 * (v22 >> 8)];
  }
  else
  {
    unsigned __int8 v20 = v19 + 1;
    long long v21 = &v15[8 * ((unint64_t)(v19 + 1) >> 8)];
  }
  uint64_t v23 = *(void *)v21 + 16 * v20;
  if (v18 != (char *)v23)
  {
    long long v24 = &v198;
    do
    {
      uint64_t v25 = v16 + 4096;
      if (v15 == v21) {
        uint64_t v25 = (char *)v23;
      }
      if (v18 == v25)
      {
        uint64_t v25 = v18;
      }
      else
      {
        uint64_t v26 = v18;
        do
        {
          *(void *)uint64_t v26 = *(void *)v24;
          uint64_t v27 = *((void *)v24 + 1);
          *((void *)v26 + 1) = v27;
          if (v27) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
          }
          ++v24;
          v26 += 16;
        }
        while (v26 != v25);
        uint64_t v13 = *((void *)&v196 + 1);
      }
      v13 += (v25 - v18) >> 4;
      *((void *)&v196 + 1) = v13;
      if (v15 == v21) {
        break;
      }
      uint64_t v28 = (char *)*((void *)v15 + 1);
      v15 += 8;
      uint64_t v16 = v28;
      long long v18 = v28;
    }
    while (v28 != (char *)v23);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v198 + 1);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v192 = 0u;
  long long v193 = 0u;
  *(_OWORD *)std::string::size_type v191 = 0u;
  uint64_t v29 = a2[1];
  *(void *)&long long v190 = *a2;
  *((void *)&v190 + 1) = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = *((void *)&v196 + 1);
  if (*((void *)&v196 + 1))
  {
    while (1)
    {
      if (*(unsigned char *)(v3 + 104)) {
        goto LABEL_214;
      }
      float v31 = (uint64_t *)(*(void *)((char *)__p[1] + (((unint64_t)(v30 + v196 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (v30 + v196 - 1));
      uint64_t v33 = *v31;
      unint64_t v32 = (std::__shared_weak_count *)v31[1];
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((void)v190)
      {
        long long v189 = v190;
        if (*((void *)&v190 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v190 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, long long *))(*(void *)v33 + 24))(v33, &v189);
        if (*((void *)&v189 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v189 + 1));
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v33 + 16))(&v198, v33);
      long long v34 = v198;
      long long v198 = 0uLL;
      uint64_t v35 = (std::__shared_weak_count *)*((void *)&v190 + 1);
      long long v183 = v34;
      long long v190 = v34;
      if (v35)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        if (*((void *)&v198 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v198 + 1));
        }
      }
      uint64_t v36 = (std::__shared_weak_count *)*((void *)&v183 + 1);
      if (v33 == *(void *)(*(void *)(v3 + 16) - 16))
      {
        if ((void)v183)
        {
          do
          {
            std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)(v3 + 56), &v190);
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v33 + 16))(&v198, v33);
            long long v58 = v198;
            long long v198 = 0uLL;
            long long v184 = v58;
            long long v190 = v58;
            if (v36)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v36);
              if (*((void *)&v198 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v198 + 1));
              }
            }
            uint64_t v36 = (std::__shared_weak_count *)*((void *)&v184 + 1);
          }
          while ((void)v184);
        }
        long long v190 = 0uLL;
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
LABEL_84:
        uint64_t v59 = *((void *)&v196 + 1) - 1;
        uint64_t v60 = __p[1];
        unint64_t v61 = *((void *)&v196 + 1) - 1 + v196;
        uint64_t v62 = *(std::__shared_weak_count **)(*(void *)((char *)__p[1] + ((v61 >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * v61
                                           + 8);
        if (v62)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v62);
          uint64_t v59 = *((void *)&v196 + 1) - 1;
          uint64_t v60 = __p[1];
          unint64_t v61 = *((void *)&v196 + 1) - 1 + v196;
        }
        *((void *)&v196 + 1) = v59;
        if ((void *)v195 == v60) {
          uint64_t v63 = 0;
        }
        else {
          uint64_t v63 = 32 * (v195 - (void)v60) - 1;
        }
        if (v63 - v61 >= 0x200)
        {
          operator delete(*(void **)(v195 - 8));
          *(void *)&long long v195 = v195 - 8;
        }
        if (*((void *)&v193 + 1))
        {
          uint64_t v64 = *(void *)(*(void *)(*(void *)(*(void *)((char *)v191[1]
                                                              + (((unint64_t)(*((void *)&v193 + 1) + v193 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                  + 16 * (BYTE8(v193) + v193 - 1))
                                      + 40)
                          + 272);
          unint64_t v65 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v64 + 64))(v64);
          long long v198 = 0uLL;
          uint64_t v199 = 0;
          std::vector<std::shared_ptr<Module>>::__init_with_size[abi:ne180100]<std::shared_ptr<Module>*,std::shared_ptr<Module>*>((uint64_t)&v198, *v65, v65[1], ((char *)v65[1] - (char *)*v65) >> 4);
          if (*(void *)v198 == v33)
          {
            uint64_t v66 = *((void *)&v193 + 1) - 1;
            uint64_t v67 = v191[1];
            unint64_t v68 = *((void *)&v193 + 1) - 1 + v193;
            int v69 = *(std::__shared_weak_count **)(*(void *)((char *)v191[1] + ((v68 >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * v68
                                               + 8);
            if (v69)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v69);
              uint64_t v66 = *((void *)&v193 + 1) - 1;
              uint64_t v67 = v191[1];
              unint64_t v68 = *((void *)&v193 + 1) - 1 + v193;
            }
            *((void *)&v193 + 1) = v66;
            if ((void *)v192 == v67) {
              uint64_t v70 = 0;
            }
            else {
              uint64_t v70 = 32 * (v192 - (void)v67) - 1;
            }
            if (v70 - v68 >= 0x200)
            {
              operator delete(*(void **)(v192 - 8));
              *(void *)&long long v192 = v192 - 8;
            }
          }
          int v197 = (void **)&v198;
          std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100](&v197);
        }
        goto LABEL_201;
      }
      if (!(void)v183) {
        goto LABEL_84;
      }
      uint64_t v37 = *(void **)(v3 + 32);
      uint64_t v38 = *(void **)(v3 + 40);
      if (v37 == v38) {
        goto LABEL_101;
      }
      while (1)
      {
        uint64_t v39 = *v37;
        uint64_t v40 = (std::__shared_weak_count *)v37[1];
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(void *)(v39 + 8) == v33)
        {
          long long v198 = v183;
          if (*((void *)&v183 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v183 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          char v41 = (**(uint64_t (***)(uint64_t, long long *))v39)(v39, &v198);
          if (*((void *)&v198 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v198 + 1));
          }
        }
        else
        {
          char v41 = 0;
        }
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        if (v41) {
          break;
        }
        v37 += 2;
        if (v37 == v38)
        {
          uint64_t v37 = v38;
          break;
        }
      }
      if (v37 == *(void **)(v3 + 40))
      {
LABEL_101:
        if (*((void *)&v193 + 1))
        {
          uint64_t v71 = (uint64_t *)(*(void *)((char *)v191[1]
                                      + (((unint64_t)(*((void *)&v193 + 1) + v193 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * (BYTE8(v193) + v193 - 1));
          uint64_t v73 = *v71;
          unint64_t v72 = (std::__shared_weak_count *)v71[1];
          if (v72) {
            atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v73)
          {
            int v74 = (void **)(*(uint64_t (**)(void))(**(void **)(*(void *)(v73 + 40) + 272) + 64))(*(void *)(*(void *)(v73 + 40) + 272));
            long long v198 = 0uLL;
            uint64_t v199 = 0;
            std::vector<std::shared_ptr<Module>>::__init_with_size[abi:ne180100]<std::shared_ptr<Module>*,std::shared_ptr<Module>*>((uint64_t)&v198, *v74, v74[1], ((char *)v74[1] - (char *)*v74) >> 4);
            uint64_t v75 = (void *)v198;
            if ((void)v198 != *((void *)&v198 + 1))
            {
              while (*v75 != v33)
              {
                v75 += 2;
                if (v75 == *((void **)&v198 + 1))
                {
                  uint64_t v75 = (void *)*((void *)&v198 + 1);
                  break;
                }
              }
            }
            float v76 = (long long *)(v75 + 2);
            if (v76 == *((long long **)&v198 + 1)) {
              int v77 = (long long *)(v73 + 24);
            }
            else {
              int v77 = v76;
            }
            std::deque<std::shared_ptr<Module>>::push_back(__p, v77);
            int v197 = (void **)&v198;
            std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100](&v197);
LABEL_119:
            if (v72) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v72);
            }
            goto LABEL_201;
          }
        }
        else
        {
          unint64_t v72 = 0;
        }
        uint64_t v78 = *(void *)(v3 + 8);
        uint64_t v79 = *(void *)(v3 + 16);
        if (v78 != v79)
        {
          while (*(void *)v78 != v33)
          {
            v78 += 16;
            if (v78 == v79)
            {
              uint64_t v78 = *(void *)(v3 + 16);
              break;
            }
          }
        }
        std::deque<std::shared_ptr<Module>>::push_back(__p, (long long *)(v78 + 16));
        goto LABEL_119;
      }
      if (!*(void *)(*v37 + 40))
      {
        uint64_t v80 = *(long long **)(v3 + 8);
        char v81 = *(long long **)(v3 + 16);
        if (v80 != v81)
        {
          while (*(void *)v80 != *(void *)(*v37 + 24))
          {
            if (++v80 == v81)
            {
              uint64_t v80 = *(long long **)(v3 + 16);
              break;
            }
          }
        }
        std::deque<std::shared_ptr<Module>>::push_back(__p, v80);
        goto LABEL_201;
      }
      int64x2_t v42 = (void **)v192;
      unint64_t v43 = (void **)v191[1];
      uint64_t v44 = v192 - (unint64_t)v191[1];
      unint64_t v45 = (void *)v192 == v191[1] ? 0 : 32 * (v192 - (unint64_t)v191[1]) - 1;
      uint64_t v46 = *((void *)&v193 + 1);
      unint64_t v47 = *((void *)&v193 + 1) + v193;
      if (v45 == *((void *)&v193 + 1) + (void)v193) {
        break;
      }
LABEL_198:
      long long v149 = *(_OWORD *)v37;
      (*(_OWORD **)((char *)v43 + ((v47 >> 5) & 0x7FFFFFFFFFFFFF8)))[v47] = *(_OWORD *)v37;
      if (*((void *)&v149 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v149 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v46 = *((void *)&v193 + 1);
      }
      *((void *)&v193 + 1) = v46 + 1;
      uint64_t v150 = *(void *)(*(void *)(*v37 + 40) + 272);
      unint64_t v151 = (long long **)(*(uint64_t (**)(uint64_t))(*(void *)v150 + 64))(v150);
      std::deque<std::shared_ptr<Module>>::push_back(__p, *v151);
LABEL_201:
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      uint64_t v30 = *((void *)&v196 + 1);
      if (!*((void *)&v196 + 1)) {
        goto LABEL_214;
      }
    }
    if ((unint64_t)v193 < 0x100)
    {
      char v82 = (void **)v191[0];
      int64_t v83 = *((void *)&v192 + 1) - (unint64_t)v191[0];
      if (v44 >> 3 >= (unint64_t)((uint64_t)(*((void *)&v192 + 1) - (unint64_t)v191[0]) >> 3))
      {
        if (*((void **)&v192 + 1) == v191[0]) {
          unint64_t v84 = 1;
        }
        else {
          unint64_t v84 = v83 >> 2;
        }
        uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v84);
        uint64_t v179 = v86;
        unint64_t v87 = v85;
        uint64_t v88 = &v85[8 * (v44 >> 3)];
        *(void *)&long long v89 = v85;
        *((void *)&v89 + 1) = v88;
        long long v185 = v89;
        uint64_t v90 = operator new(0x1000uLL);
        *(void *)&long long v91 = v88;
        *((void *)&v91 + 1) = &v87[8 * v179];
        if (v44 >> 3 == v179)
        {
          uint64_t v92 = v88 - v87;
          *(void *)&long long v93 = v185;
          if (v44 < 1)
          {
            uint64_t v125 = v90;
            uint64_t v126 = v92 >> 2;
            if (v42 == v43) {
              unint64_t v127 = 1;
            }
            else {
              unint64_t v127 = v126;
            }
            unint64_t v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v127);
            uint64_t v88 = &v128[8 * (v127 >> 2)];
            *(void *)&long long v93 = v128;
            *((void *)&v93 + 1) = v88;
            *(void *)&long long v91 = v88;
            *((void *)&v91 + 1) = &v128[8 * v129];
            if (v87)
            {
              long long v180 = v91;
              long long v186 = v93;
              operator delete(v87);
              long long v91 = v180;
              long long v93 = v186;
            }
            uint64_t v90 = v125;
          }
          else
          {
            uint64_t v94 = v92 >> 3;
            if (v94 >= -1) {
              unint64_t v95 = v94 + 1;
            }
            else {
              unint64_t v95 = v94 + 2;
            }
            v88 -= 8 * (v95 >> 1);
            *(void *)&long long v91 = v88;
            *((void *)&v93 + 1) = v88;
          }
        }
        else
        {
          long long v93 = v185;
        }
        *(void *)uint64_t v88 = v90;
        *(void *)&long long v91 = v91 + 8;
        for (uint64_t j = (char *)v192; j != v191[1]; j -= 8)
        {
          long long v131 = (void *)*((void *)&v93 + 1);
          if (*((void *)&v93 + 1) == (void)v93)
          {
            uint64_t v133 = (unsigned char *)v91;
            if ((unint64_t)v91 >= *((void *)&v91 + 1))
            {
              if (*((void *)&v91 + 1) == *((void *)&v93 + 1)) {
                unint64_t v138 = 1;
              }
              else {
                unint64_t v138 = (uint64_t)(*((void *)&v91 + 1) - *((void *)&v93 + 1)) >> 2;
              }
              int v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v138);
              uint64_t v132 = &v139[(2 * v138 + 6) & 0xFFFFFFFFFFFFFFF8];
              unint64_t v141 = v132;
              uint64_t v142 = v133 - (unsigned char *)v131;
              if (v133 != (unsigned char *)v131)
              {
                unint64_t v141 = &v132[v142 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v143 = 8 * (v142 >> 3);
                unint64_t v144 = v132;
                unint64_t v145 = v131;
                do
                {
                  uint64_t v146 = *v145++;
                  *(void *)unint64_t v144 = v146;
                  v144 += 8;
                  v143 -= 8;
                }
                while (v143);
              }
              *(void *)&long long v93 = v139;
              *((void *)&v93 + 1) = v132;
              *(void *)&long long v91 = v141;
              *((void *)&v91 + 1) = &v139[8 * v140];
              if (v131)
              {
                long long v181 = v91;
                long long v188 = v93;
                operator delete(v131);
                long long v91 = v181;
                long long v93 = v188;
              }
            }
            else
            {
              uint64_t v134 = (uint64_t)(*((void *)&v91 + 1) - v91) >> 3;
              if (v134 >= -1) {
                uint64_t v135 = v134 + 1;
              }
              else {
                uint64_t v135 = v134 + 2;
              }
              uint64_t v136 = v135 >> 1;
              uint64_t v137 = v91 + 8 * (v135 >> 1);
              uint64_t v132 = (char *)(v137 - (v91 - *((void *)&v93 + 1)));
              if ((void)v91 == *((void *)&v93 + 1))
              {
                uint64_t v133 = (unsigned char *)*((void *)&v93 + 1);
              }
              else
              {
                uint64_t v182 = *((void *)&v91 + 1);
                uint64_t v187 = v93;
                memmove((void *)(v137 - (v91 - *((void *)&v93 + 1))), *((const void **)&v93 + 1), v91 - *((void *)&v93 + 1));
                *((void *)&v91 + 1) = v182;
                *(void *)&long long v93 = v187;
              }
              *((void *)&v93 + 1) = v132;
              *(void *)&long long v91 = &v133[8 * v136];
            }
          }
          else
          {
            uint64_t v132 = (char *)*((void *)&v93 + 1);
          }
          uint64_t v147 = *((void *)j - 1);
          *((void *)v132 - 1) = v147;
          *((void *)&v93 + 1) -= 8;
        }
        unint64_t v148 = v191[0];
        *(_OWORD *)std::string::size_type v191 = v93;
        long long v192 = v91;
        if (v148) {
          operator delete(v148);
        }
        goto LABEL_197;
      }
      if (*((void *)&v192 + 1) == (void)v192)
      {
        int v105 = operator new(0x1000uLL);
        if (v82 == v43)
        {
          if (v42 == v43) {
            unint64_t v106 = 1;
          }
          else {
            unint64_t v106 = v83 >> 2;
          }
          unint64_t v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v106);
          unint64_t v43 = (void **)&v107[(2 * v106 + 6) & 0xFFFFFFFFFFFFFFF8];
          long long v109 = (void **)v191[1];
          int v110 = v43;
          uint64_t v111 = v192 - (unint64_t)v191[1];
          if ((void *)v192 != v191[1])
          {
            int v110 = (void **)((char *)v43 + (v111 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v112 = 8 * (v111 >> 3);
            uint64_t v113 = v43;
            do
            {
              std::string::size_type v114 = *v109++;
              *v113++ = v114;
              v112 -= 8;
            }
            while (v112);
          }
          uint64_t v115 = v191[0];
          v191[0] = v107;
          v191[1] = v43;
          *(void *)&long long v192 = v110;
          *((void *)&v192 + 1) = &v107[8 * v108];
          if (v115)
          {
            operator delete(v115);
            unint64_t v43 = (void **)v191[1];
          }
        }
        *(v43 - 1) = v105;
        unsigned int v116 = (char *)v191[1];
        unsigned int v117 = (char *)v192;
        v191[1] = (char *)v191[1] - 8;
        uint64_t v118 = *(void *)v191[1];
        v191[1] = v116;
        if ((void)v192 == *((void *)&v192 + 1))
        {
          uint64_t v119 = v116 - (char *)v191[0];
          if (v116 <= v191[0])
          {
            if ((void *)v192 == v191[0]) {
              unint64_t v152 = 1;
            }
            else {
              unint64_t v152 = (uint64_t)(v192 - (unint64_t)v191[0]) >> 2;
            }
            int v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v152);
            int v155 = (uint64_t *)v191[1];
            unsigned int v117 = &v153[8 * (v152 >> 2)];
            uint64_t v156 = v192 - (unint64_t)v191[1];
            if ((void *)v192 != v191[1])
            {
              unsigned int v117 = &v153[8 * (v152 >> 2) + (v156 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v157 = 8 * (v156 >> 3);
              unint64_t v158 = &v153[8 * (v152 >> 2)];
              do
              {
                uint64_t v159 = *v155++;
                *(void *)unint64_t v158 = v159;
                v158 += 8;
                v157 -= 8;
              }
              while (v157);
            }
            unint64_t v160 = v191[0];
            v191[0] = v153;
            v191[1] = &v153[8 * (v152 >> 2)];
            *(void *)&long long v192 = v117;
            *((void *)&v192 + 1) = &v153[8 * v154];
            if (v160)
            {
              operator delete(v160);
              unsigned int v117 = (char *)v192;
            }
          }
          else
          {
            uint64_t v120 = v119 >> 3;
            BOOL v52 = v119 >> 3 < -1;
            uint64_t v121 = (v119 >> 3) + 2;
            if (v52) {
              uint64_t v122 = v121;
            }
            else {
              uint64_t v122 = v120 + 1;
            }
            std::string v123 = &v116[-8 * (v122 >> 1)];
            uint64_t v124 = v192 - (void)v116;
            if ((char *)v192 != v116)
            {
              memmove(&v116[-8 * (v122 >> 1)], v116, v192 - (void)v116);
              unsigned int v116 = (char *)v191[1];
            }
            unsigned int v117 = &v123[v124];
            v191[1] = &v116[-8 * (v122 >> 1)];
            *(void *)&long long v192 = &v123[v124];
          }
        }
        *(void *)unsigned int v117 = v118;
      }
      else
      {
        NSObject *v42 = operator new(0x1000uLL);
      }
    }
    else
    {
      *(void *)&long long v193 = v193 - 256;
      uint64_t v48 = (char *)v191[1] + 8;
      uint64_t v49 = *(void **)v191[1];
      v191[1] = (char *)v191[1] + 8;
      if (*((void *)&v192 + 1) == (void)v192)
      {
        uint64_t v50 = v48 - (char *)v191[0];
        if (v48 <= v191[0])
        {
          if ((void *)v192 == v191[0]) {
            unint64_t v96 = 1;
          }
          else {
            unint64_t v96 = (uint64_t)(v192 - (unint64_t)v191[0]) >> 2;
          }
          int v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v96);
          uint64_t v99 = (uint64_t *)v191[1];
          int64x2_t v42 = (void **)&v97[8 * (v96 >> 2)];
          uint64_t v100 = v192 - (unint64_t)v191[1];
          if ((void *)v192 != v191[1])
          {
            int64x2_t v42 = (void **)&v97[8 * (v96 >> 2) + (v100 & 0xFFFFFFFFFFFFFFF8)];
            uint64_t v101 = 8 * (v100 >> 3);
            unint64_t v102 = &v97[8 * (v96 >> 2)];
            do
            {
              uint64_t v103 = *v99++;
              *(void *)unint64_t v102 = v103;
              v102 += 8;
              v101 -= 8;
            }
            while (v101);
          }
          int v104 = v191[0];
          v191[0] = v97;
          v191[1] = &v97[8 * (v96 >> 2)];
          *(void *)&long long v192 = v42;
          *((void *)&v192 + 1) = &v97[8 * v98];
          if (v104)
          {
            operator delete(v104);
            int64x2_t v42 = (void **)v192;
          }
        }
        else
        {
          uint64_t v51 = v50 >> 3;
          BOOL v52 = v50 >> 3 < -1;
          uint64_t v53 = (v50 >> 3) + 2;
          if (v52) {
            uint64_t v54 = v53;
          }
          else {
            uint64_t v54 = v51 + 1;
          }
          int64x2_t v55 = &v48[-8 * (v54 >> 1)];
          uint64_t v56 = v192 - (void)v48;
          if ((char *)v192 == v48)
          {
            uint64_t v57 = (char *)v192;
          }
          else
          {
            memmove(&v48[-8 * (v54 >> 1)], v48, v192 - (void)v48);
            uint64_t v57 = (char *)v191[1];
          }
          int64x2_t v42 = (void **)&v55[v56];
          v191[1] = &v57[-8 * (v54 >> 1)];
          *(void *)&long long v192 = &v55[v56];
        }
      }
      NSObject *v42 = v49;
    }
    *(void *)&long long v192 = v192 + 8;
LABEL_197:
    unint64_t v43 = (void **)v191[1];
    uint64_t v46 = *((void *)&v193 + 1);
    unint64_t v47 = *((void *)&v193 + 1) + v193;
    goto LABEL_198;
  }
LABEL_214:
  uint64_t v161 = *(void *)(v3 + 8);
  uint64_t v162 = *(void *)(v3 + 16);
  while (v161 != v162)
  {
    if (*(unsigned char *)(v3 + 104))
    {
      (*(void (**)(void))(**(void **)v161 + 48))();
      (*(void (**)(void))(**(void **)v161 + 64))();
    }
    v161 += 16;
  }
  uint64_t v163 = *(void *)(v3 + 32);
  uint64_t v164 = *(void *)(v3 + 40);
  while (v163 != v164)
  {
    uint64_t v165 = *(void *)(*(void *)v163 + 40);
    if (v165 && *(unsigned char *)(v3 + 104))
    {
      (*(void (**)(uint64_t))(*(void *)v165 + 48))(v165);
      (*(void (**)(void))(**(void **)(*(void *)v163 + 40) + 64))(*(void *)(*(void *)v163 + 40));
    }
    v163 += 16;
  }
  if (*(unsigned char *)(v3 + 104))
  {
    unint64_t v166 = *(void ***)(v3 + 64);
    uint64_t v167 = *(void ***)(v3 + 72);
    if (v167 == v166)
    {
      unint64_t v168 = (void *)(v3 + 96);
      uint64_t v167 = *(void ***)(v3 + 64);
    }
    else
    {
      unint64_t v168 = (void *)(v3 + 96);
      unint64_t v169 = *(void *)(v3 + 88);
      BOOL v170 = &v166[v169 >> 8];
      uint64_t v171 = (uint64_t)*v170;
      uint64_t v172 = (uint64_t)*v170 + 16 * v169;
      uint64_t v173 = *(uint64_t *)((char *)v166 + (((*(void *)(v3 + 96) + v169) >> 5) & 0x7FFFFFFFFFFFFF8))
           + 16 * (*(unsigned char *)(v3 + 96) + v169);
      if (v172 != v173)
      {
        do
        {
          unint64_t v174 = *(std::__shared_weak_count **)(v172 + 8);
          if (v174)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v174);
            uint64_t v171 = (uint64_t)*v170;
          }
          v172 += 16;
          if (v172 - v171 == 4096)
          {
            uint64_t v175 = (uint64_t)v170[1];
            ++v170;
            uint64_t v171 = v175;
            uint64_t v172 = v175;
          }
        }
        while (v172 != v173);
        unint64_t v166 = *(void ***)(v3 + 64);
        uint64_t v167 = *(void ***)(v3 + 72);
      }
    }
    void *v168 = 0;
    unint64_t v176 = (char *)v167 - (char *)v166;
    if ((unint64_t)((char *)v167 - (char *)v166) >= 0x11)
    {
      do
      {
        operator delete(*v166);
        uint64_t v177 = *(void *)(v3 + 72);
        unint64_t v166 = (void **)(*(void *)(v3 + 64) + 8);
        *(void *)(v3 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v166;
        unint64_t v176 = v177 - (void)v166;
      }
      while (v176 > 0x10);
    }
    if (v176 >> 3 == 1)
    {
      uint64_t v178 = 128;
      goto LABEL_241;
    }
    if (v176 >> 3 == 2)
    {
      uint64_t v178 = 256;
LABEL_241:
      *(void *)(v3 + 88) = v178;
    }
  }
  if (*((void *)&v190 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v190 + 1));
  }
  std::deque<std::shared_ptr<Connection>>::~deque[abi:ne180100]((uint64_t)v191);
  return std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100](__p);
}

void sub_20D360A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24)
{
  operator delete(v25);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::deque<std::shared_ptr<Connection>>::~deque[abi:ne180100]((uint64_t)&a16);
  std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100](&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<Module>>::__init_with_size[abi:ne180100]<std::shared_ptr<Module>*,std::shared_ptr<Module>*>(uint64_t result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (void *)result;
    uint64_t v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(a4);
    void *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[2 * v8];
    uint64_t v13 = v7;
    uint64_t v12 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    if (a2 != a3)
    {
      do
      {
        void *v7 = *a2;
        uint64_t v9 = a2[1];
        v7[1] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        v7 += 2;
        a2 += 2;
      }
      while (a2 != a3);
      uint64_t v13 = v7;
    }
    char v11 = 1;
    uint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<Agglomerate>>,std::shared_ptr<Agglomerate>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v7;
  }
  return result;
}

void sub_20D360C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::deque<std::shared_ptr<Module>>::push_back(void *a1, long long *a2)
{
  unint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  unint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  unint64_t v9 = v7 + v8;
  if (v6 == v7 + v8)
  {
    if (v8 < 0x100)
    {
      unint64_t v23 = (v4 - v5) >> 3;
      long long v24 = (char *)a1[3];
      uint64_t v25 = (uint64_t)&v24[-*a1];
      if (v23 >= v25 >> 3)
      {
        if (v24 == (char *)*a1) {
          unint64_t v26 = 1;
        }
        else {
          unint64_t v26 = v25 >> 2;
        }
        uint64_t v66 = a1 + 3;
        *(void *)&long long v64 = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v26);
        *((void *)&v64 + 1) = v64 + 8 * v23;
        *(void *)&long long v65 = *((void *)&v64 + 1);
        *((void *)&v65 + 1) = v64 + 8 * v27;
        uint64_t v63 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v64, &v63);
        for (uint64_t i = (void *)a1[2];
              i != (void *)a1[1];
              std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)&v64, i))
        {
          --i;
        }
        long long v30 = v64;
        long long v31 = v65;
        *(void *)&long long v64 = *a1;
        uint64_t v29 = (void *)v64;
        *((void *)&v64 + 1) = i;
        *(_OWORD *)a1 = v30;
        *((_OWORD *)a1 + 1) = v31;
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_44;
      }
      if (v24 != v4)
      {
        *(void *)&long long v64 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v64);
LABEL_44:
        uint64_t v5 = (char *)a1[1];
        uint64_t v7 = a1[5];
        unint64_t v9 = v7 + a1[4];
        goto LABEL_45;
      }
      *(void *)&long long v64 = operator new(0x1000uLL);
      std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v64);
      unint64_t v43 = (void *)a1[1];
      unint64_t v4 = (char *)a1[2];
      uint64_t v45 = *v43;
      uint64_t v44 = (char *)(v43 + 1);
      uint64_t v11 = v45;
      a1[1] = v44;
      if (v4 == (char *)a1[3])
      {
        uint64_t v46 = (uint64_t)&v44[-*a1];
        if ((unint64_t)v44 > *a1)
        {
          uint64_t v47 = v46 >> 3;
          BOOL v15 = v46 >> 3 < -1;
          uint64_t v48 = (v46 >> 3) + 2;
          if (v15) {
            uint64_t v49 = v48;
          }
          else {
            uint64_t v49 = v47 + 1;
          }
          uint64_t v50 = -(v49 >> 1);
          uint64_t v51 = v49 >> 1;
          BOOL v52 = &v44[-8 * v51];
          int64_t v53 = v4 - v44;
          if (v4 != v44)
          {
            memmove(&v44[-8 * v51], v44, v4 - v44);
            uint64_t v44 = (char *)a1[1];
          }
          unint64_t v4 = &v52[v53];
          uint64_t v54 = &v44[8 * v50];
          goto LABEL_42;
        }
        if (v4 == (char *)*a1) {
          unint64_t v56 = 1;
        }
        else {
          unint64_t v56 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v56);
        long long v34 = &v33[8 * (v56 >> 2)];
        uint64_t v36 = &v33[8 * v57];
        long long v58 = (uint64_t *)a1[1];
        unint64_t v4 = v34;
        uint64_t v59 = a1[2] - (void)v58;
        if (v59)
        {
          unint64_t v4 = &v34[v59 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v60 = 8 * (v59 >> 3);
          unint64_t v61 = &v33[8 * (v56 >> 2)];
          do
          {
            uint64_t v62 = *v58++;
            *(void *)unint64_t v61 = v62;
            v61 += 8;
            v60 -= 8;
          }
          while (v60);
        }
LABEL_30:
        int64x2_t v42 = (void *)*a1;
        *a1 = v33;
        a1[1] = v34;
        a1[2] = v4;
        a1[3] = v36;
        if (v42)
        {
          operator delete(v42);
          unint64_t v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 256;
      uint64_t v12 = *(void *)v5;
      uint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unsigned __int8 v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            unint64_t v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            unint64_t v22 = (char *)a1[1];
          }
          unint64_t v4 = &v20[v21];
          uint64_t v54 = &v22[8 * v18];
LABEL_42:
          a1[1] = v54;
          a1[2] = v4;
          goto LABEL_43;
        }
        if (v4 == (char *)*a1) {
          unint64_t v32 = 1;
        }
        else {
          unint64_t v32 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v32);
        long long v34 = &v33[8 * (v32 >> 2)];
        uint64_t v36 = &v33[8 * v35];
        uint64_t v37 = (uint64_t *)a1[1];
        unint64_t v4 = v34;
        uint64_t v38 = a1[2] - (void)v37;
        if (v38)
        {
          unint64_t v4 = &v34[v38 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v39 = 8 * (v38 >> 3);
          uint64_t v40 = &v33[8 * (v32 >> 2)];
          do
          {
            uint64_t v41 = *v37++;
            *(void *)uint64_t v40 = v41;
            v40 += 8;
            v39 -= 8;
          }
          while (v39);
        }
        goto LABEL_30;
      }
    }
LABEL_43:
    *(void *)unint64_t v4 = v11;
    a1[2] += 8;
    goto LABEL_44;
  }
LABEL_45:
  long long v55 = *a2;
  *(_OWORD *)(*(void *)&v5[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9) = *a2;
  if (*((void *)&v55 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v55 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void sub_20D360FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::shared_ptr<Connection>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 256;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      BOOL v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL PronounceNNMT::is_multiword_prefix(uint64_t a1, uint64_t a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = *(void *)a2;
  }
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    unint64_t v4 = (unsigned __int8 *)(v3 + v2);
    unint64_t v5 = (unsigned __int8 *)v3;
LABEL_8:
    uint64_t v6 = 0;
    while (*v5 != asc_20D5F9AD9[v6])
    {
      if (++v6 == 2)
      {
        if (++v5 != v4) {
          goto LABEL_8;
        }
        goto LABEL_16;
      }
    }
    if (v5 != v4 && &v5[-v3] != (unsigned __int8 *)-1) {
      return 0;
    }
  }
LABEL_16:
  PronounceNNMT::preprocess(&__p, *(kaldi::quasar::TorchEncoderDecoder **)(a1 + 6584), a2, (uint64_t)v11, 1);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  BOOL v7 = size != 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
  return v7;
}

void sub_20D361230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PronounceNNMT::preprocess(std::string *a1, kaldi::quasar::TorchEncoderDecoder *this, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v7 = kaldi::quasar::TorchEncoderDecoder::InputSymbols(this);
  memset(&v47, 0, sizeof(v47));
  memset(&v46, 0, sizeof(v46));
  uint64_t v35 = a3;
  UTFString_Impl::to_lower((UTFString_Impl *)v44, a3);
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 23) = 0;
  }
  if ((v45 & 0x80u) == 0) {
    uint64_t v8 = v44;
  }
  else {
    uint64_t v8 = (void **)v44[0];
  }
  if ((v45 & 0x80u) == 0) {
    unint64_t v9 = v45;
  }
  else {
    unint64_t v9 = (unint64_t)v44[1];
  }
  int64x2_t v42 = v8;
  unint64_t v43 = v9 << 32;
  if (v9)
  {
    int v10 = 0;
    do
    {
      unsigned int v11 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v42);
      std::string::resize(&v46, 0, 0);
      UTFString::push_back_codepoint<std::string>(&v46, v11);
      if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v7 + 96))(v7, &v46) != -1) {
        goto LABEL_45;
      }
      UTFString::decompose_codepoint((uint64_t *)v40, v11);
      std::string::resize(&v46, 0, 0);
      if (v41 >= 0) {
        uint64_t v12 = v40;
      }
      else {
        uint64_t v12 = (void **)v40[0];
      }
      unsigned int v13 = *(unsigned __int16 *)v12;
      if ((v13 & 0xFC00) == 0xD800) {
        unsigned int v13 = *((unsigned __int16 *)v12 + 1) + (v13 << 10) - 56613888;
      }
      UTFString::push_back_codepoint<std::string>(&v46, v13);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v7 + 96))(v7, &v46);
      if (v14 == -1)
      {
        if (a5)
        {
          std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
          int v15 = 1;
        }
        else
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            Censor::global_plaintext(&v39, (uint64_t)&v46);
            int v17 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
            std::string::size_type v18 = v39.__r_.__value_.__r.__words[0];
            Censor::global_plaintext(&__p, v35);
            uint64_t v19 = &v39;
            if (v17 < 0) {
              uint64_t v19 = (std::string *)v18;
            }
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string buf = 136315394;
            uint64_t v49 = v19;
            __int16 v50 = 2080;
            uint64_t v51 = p_p;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v39.__r_.__value_.__l.__data_);
            }
          }
          Censor::global_plaintext(&v39, (uint64_t)&v46);
          int v21 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
          std::string::size_type v22 = v39.__r_.__value_.__r.__words[0];
          Censor::global_plaintext(&__p, v35);
          long long v24 = &v39;
          if (v21 < 0) {
            long long v24 = (std::string *)v22;
          }
          uint64_t v25 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v39.__r_.__value_.__l.__data_);
          }
          int v15 = 3;
        }
      }
      else
      {
        int v15 = 0;
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (v14 == -1)
      {
        if (v15 != 3 && v15) {
          goto LABEL_76;
        }
      }
      else
      {
LABEL_45:
        std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v47.__r_.__value_.__l.__size_;
        }
        if (size) {
          std::string::push_back(&v47, 32);
        }
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v27 = &v46;
        }
        else {
          uint64_t v27 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v28 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v28 = v46.__r_.__value_.__l.__size_;
        }
        std::string::append(&v47, (const std::string::value_type *)v27, v28);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v29 = &v46;
        }
        else {
          uint64_t v29 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v30 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v30 = v46.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a4, (const std::string::value_type *)v29, v30);
      }
      unsigned int v31 = *((unsigned __int8 *)v8 + v10);
      unsigned int v32 = (v31 + 62);
      if (v31 <= 0xEF) {
        int v33 = 2;
      }
      else {
        int v33 = 3;
      }
      if (v31 <= 0xDF) {
        int v34 = v33;
      }
      else {
        int v34 = v33 + 1;
      }
      if (v32 >= 0x33) {
        int v34 = 1;
      }
      v10 += v34;
      LODWORD(v43) = v10;
    }
    while (v10 != v9);
  }
  *a1 = v47;
  memset(&v47, 0, sizeof(v47));
LABEL_76:
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
}

void sub_20D3616E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (*(char *)(v45 - 129) < 0) {
    operator delete(*(void **)(v45 - 152));
  }
  _Unwind_Resume(exception_object);
}

void PronounceNNMT::pronounce_multi(uint64_t a1@<X0>, std::string *a2@<X1>, void *a3@<X8>)
{
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v7 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v7 = (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v8 = &v7[size];
    unint64_t v9 = v7;
LABEL_8:
    uint64_t v10 = 0;
    while (*v9 != asc_20D5F9AD9[v10])
    {
      if (++v10 == 2)
      {
        if (++v9 != v8) {
          goto LABEL_8;
        }
        goto LABEL_18;
      }
    }
    if (v9 == v8 || v9 - v7 == -1) {
      goto LABEL_18;
    }
    std::string::basic_string[abi:ne180100]<0>(a3, &byte_20D5A22AE);
  }
  else
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(&__p, "UNK");
    PronounceNNMT::pronounce((uint64_t)a3, a1, a2, 1);
    if (v12 < 0) {
      operator delete(__p);
    }
  }
}

void sub_20D36187C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PronounceNNMT::pronounce(uint64_t a1, uint64_t a2, std::string *a3, int a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  memset(&__str, 0, sizeof(__str));
  PronounceNNMT::preprocess(&v30, *(kaldi::quasar::TorchEncoderDecoder **)(a2 + 6584), (uint64_t)a3, (uint64_t)&__str, a4);
  std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v30.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(v29, 0, sizeof(v29));
    EncoderDecoder::decode(a2 + 8, (uint64_t)&v30, (uint64_t)v29);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    uint64_t v8 = *(void *)v29[0];
    uint64_t v9 = *(void *)(v29[0] + 8);
    while (v8 != v9)
    {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a1 + 8);
      }
      if (v10) {
        std::string::push_back((std::string *)a1, 32);
      }
      int v11 = *(char *)(v8 + 23);
      if (v11 >= 0) {
        char v12 = (const std::string::value_type *)v8;
      }
      else {
        char v12 = *(const std::string::value_type **)v8;
      }
      if (v11 >= 0) {
        std::string::size_type v13 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        std::string::size_type v13 = *(void *)(v8 + 8);
      }
      std::string::append((std::string *)a1, v12, v13);
      v8 += 240;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      int v15 = &v28;
      Censor::global_plaintext(&v28, (uint64_t)a3);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      Censor::global_plaintext(&v27, (uint64_t)&__str);
      int v16 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      std::string::size_type v17 = v27.__r_.__value_.__r.__words[0];
      Censor::global_plaintext(&__p, a1);
      std::string::size_type v18 = &v27;
      if (v16 < 0) {
        std::string::size_type v18 = (std::string *)v17;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v15;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      int v33 = p_p;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
    }
    p_std::string buf = &buf;
    Censor::global_plaintext(&buf, (uint64_t)a3);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    Censor::global_plaintext(&v28, (uint64_t)&__str);
    int v21 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
    std::string::size_type v22 = v28.__r_.__value_.__r.__words[0];
    Censor::global_plaintext(&v27, a1);
    long long v24 = &v28;
    if (v21 < 0) {
      long long v24 = (std::string *)v22;
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v25 = &v27;
    }
    else {
      uint64_t v25 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::string::operator=(a3, &__str);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((void *)a1, &byte_20D5A22AE);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_20D361BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v36 + 23) < 0) {
    operator delete(*(void **)v36);
  }
  *(void *)(v37 - 112) = &a28;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 112));
  if (a36 < 0) {
    operator delete(a31);
  }
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  _Unwind_Resume(a1);
}

void PronounceNNMT::pronounce(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
}

void PronounceNNMT::~PronounceNNMT(PronounceNNMT *this)
{
  uint64_t v1 = (char *)this + 8;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch((uint64_t)this + 6448);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch((uint64_t)v1);
  JUMPOUT(0x2105595E0);
}

{
  char *v1;

  uint64_t v1 = (char *)this + 8;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch((uint64_t)this + 6448);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch((uint64_t)v1);
}

void PhonemeEncodingLegacy::silence(uint64_t **this@<X0>, void *a2@<X8>)
{
  PhonemeEncodingImpl::start_phoneme_representation((PhonemeEncodingImpl *)this);
  MEMORY[0x210558E70](this + 1, "sil");
  PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)this);
  memset(v5, 0, sizeof(v5));
  std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v5, this[15], this[16], 0xAAAAAAAAAAAAAAABLL * (this[16] - this[15]));
  unint64_t v4 = (uint64_t *)v5[0];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(a2, *v4, v4[1], (v4[1] - *v4) >> 6);
  uint64_t v6 = (void **)v5;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_20D361DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void PhonemeEncodingImpl::start_phoneme_representation(PhonemeEncodingImpl *this)
{
  uint64_t v2 = (void **)*((void *)this + 15);
  uint64_t v3 = (void **)*((void *)this + 16);
  while (v3 != v2)
  {
    v3 -= 3;
    unint64_t v4 = v3;
    std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
  *((void *)this + 16) = v2;
  PhonemeEncodingImpl::start_word(this);
}

void PhonemeEncodingImpl::start_word(PhonemeEncodingImpl *this)
{
  PhonemeEncodingImpl::start_syllable(this);
  uint64_t v2 = (void *)((char *)this + 96);
  if (*((void *)this + 12) != *((void *)this + 13))
  {
    unint64_t v3 = *((void *)this + 17);
    unint64_t v4 = (void *)*((void *)this + 16);
    if ((unint64_t)v4 >= v3)
    {
      uint64_t v6 = *((void *)this + 15);
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - v6) >> 3);
      unint64_t v8 = v7 + 1;
      if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v6) >> 3);
      if (2 * v9 > v8) {
        unint64_t v8 = 2 * v9;
      }
      if (v9 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v8;
      }
      v15[4] = (char *)this + 136;
      if (v10) {
        unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v10);
      }
      else {
        uint64_t v11 = 0;
      }
      char v12 = (void *)(v10 + 24 * v7);
      v15[0] = v10;
      v15[1] = v12;
      void v15[3] = v10 + 24 * v11;
      *char v12 = 0;
      v12[1] = 0;
      uint64_t v12[2] = 0;
      *(_OWORD *)char v12 = *((_OWORD *)this + 6);
      uint64_t v12[2] = *((void *)this + 14);
      void *v2 = 0;
      *((void *)this + 13) = 0;
      *((void *)this + 1std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      unint64_t v15[2] = v12 + 3;
      std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer((uint64_t *)this + 15, v15);
      uint64_t v13 = *((void *)this + 16);
      std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)v15);
      uint64_t v5 = *((void *)this + 12);
      uint64_t v14 = *((void *)this + 13);
      *((void *)this + 16) = v13;
      while (v14 != v5)
      {
        v14 -= 64;
        std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](v14);
      }
    }
    else
    {
      uint64_t v5 = 0;
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)unint64_t v4 = *((_OWORD *)this + 6);
      v4[2] = *((void *)this + 14);
      void *v2 = 0;
      *((void *)this + 13) = 0;
      *((void *)this + 1std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *((void *)this + 16) = v4 + 3;
    }
    *((void *)this + 13) = v5;
  }
}

void PhonemeEncodingImpl::start_syllable(PhonemeEncodingImpl *this)
{
  PhonemeEncodingImpl::start_phoneme((uint64_t)this);
  uint64_t v2 = (void *)((char *)this + 48);
  if (*((void *)this + 6) != *((void *)this + 7))
  {
    unint64_t v3 = (uint64_t *)((char *)this + 32);
    unint64_t v4 = *((void *)this + 14);
    unint64_t v5 = *((void *)this + 13);
    if (v5 >= v4)
    {
      uint64_t v9 = *((void *)this + 12);
      uint64_t v10 = (uint64_t)(v5 - v9) >> 6;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 58) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v4 - v9;
      if (v12 >> 5 > v11) {
        unint64_t v11 = v12 >> 5;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      v18[4] = (char *)this + 112;
      if (v13) {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      unint64_t v15 = v13 + (v10 << 6);
      v18[0] = v13;
      v18[1] = v15;
      v18[3] = v13 + (v14 << 6);
      uint64_t v16 = *v3;
      *(_DWORD *)(v15 + 8) = *((_DWORD *)this + 10);
      *(void *)unint64_t v15 = v16;
      *(void *)(v15 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 16) = 0;
      *(_OWORD *)(v15 + 16) = *((_OWORD *)this + 3);
      *(void *)(v15 + 32) = *((void *)this + 8);
      void *v2 = 0;
      *((void *)this + 7) = 0;
      *((void *)this + 8) = 0;
      long long v17 = *(_OWORD *)((char *)this + 72);
      *(void *)(v15 + 56) = *((void *)this + 11);
      *(_OWORD *)(v15 + 40) = v17;
      *((void *)this + 10) = 0;
      *((void *)this + 11) = 0;
      *((void *)this + 9) = 0;
      v18[2] = v15 + 64;
      std::vector<PhonemeRepresentation::Syllable>::__swap_out_circular_buffer((uint64_t *)this + 12, v18);
      unint64_t v8 = *((void *)this + 13);
      std::__split_buffer<PhonemeRepresentation::Syllable>::~__split_buffer((uint64_t)v18);
    }
    else
    {
      uint64_t v6 = *v3;
      *(_DWORD *)(v5 + 8) = *((_DWORD *)this + 10);
      *(void *)unint64_t v5 = v6;
      *(void *)(v5 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)(v5 + 32) = 0;
      *(void *)(v5 + 16) = 0;
      *(_OWORD *)(v5 + 16) = *((_OWORD *)this + 3);
      *(void *)(v5 + 32) = *((void *)this + 8);
      void *v2 = 0;
      *((void *)this + 7) = 0;
      *((void *)this + 8) = 0;
      long long v7 = *(_OWORD *)((char *)this + 72);
      *(void *)(v5 + 56) = *((void *)this + 11);
      *(_OWORD *)(v5 + 40) = v7;
      *((void *)this + 10) = 0;
      *((void *)this + 11) = 0;
      *((void *)this + 9) = 0;
      unint64_t v8 = v5 + 64;
    }
    *((void *)this + 13) = v8;
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 6);
  }
  *((void *)this + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
}

uint64_t PhonemeEncodingImpl::start_phoneme(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(char *)(this + 31) < 0)
  {
    if (!*(void *)(this + 16)) {
      return this;
    }
  }
  else if (!*(unsigned char *)(this + 31))
  {
    return this;
  }
  uint64_t v2 = (long long *)(this + 8);
  if (!*(unsigned char *)(this + 216)
    || (this = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(this + 144, (const void **)(this + 8))) != 0|| (this = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v1 + 168, (const void **)(v1 + 8))) != 0|| (this = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v1 + 192, (const void **)(v1 + 8))) != 0)
  {
    unint64_t v3 = *(void *)(v1 + 64);
    unint64_t v4 = *(void *)(v1 + 56);
    if (v4 >= v3)
    {
      uint64_t v7 = *(void *)(v1 + 48);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v7) >> 3);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v7) >> 3);
      if (2 * v10 > v9) {
        unint64_t v9 = 2 * v10;
      }
      if (v10 >= 0x555555555555555) {
        unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v11 = v9;
      }
      uint64_t v21 = v1 + 64;
      if (v11) {
        unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      unint64_t v13 = v11 + 24 * v8;
      *(void *)&long long buf = v11;
      *((void *)&buf + 1) = v13;
      unint64_t v20 = v11 + 24 * v12;
      long long v14 = *v2;
      *(void *)(v13 + 16) = *(void *)(v1 + 24);
      *(_OWORD *)unint64_t v13 = v14;
      *(void *)(v1 + 16) = 0;
      *(void *)(v1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)uint64_t v2 = 0;
      unint64_t v19 = v13 + 24;
      std::vector<PhonemeRepresentation::Phoneme>::__swap_out_circular_buffer((uint64_t *)(v1 + 48), &buf);
      unint64_t v6 = *(void *)(v1 + 56);
      this = std::__split_buffer<PhonemeRepresentation::Phoneme>::~__split_buffer((uint64_t)&buf);
    }
    else
    {
      long long v5 = *v2;
      *(void *)(v4 + 16) = *(void *)(v1 + 24);
      *(_OWORD *)unint64_t v4 = v5;
      *(void *)(v1 + 16) = 0;
      *(void *)(v1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
      *(void *)uint64_t v2 = 0;
      unint64_t v6 = v4 + 24;
    }
    *(void *)(v1 + 56) = v6;
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = v1 + 8;
      if (*(char *)(v1 + 31) < 0) {
        uint64_t v17 = *(void *)v2;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v17;
    }
    if (*(char *)(v1 + 31) < 0) {
      uint64_t v2 = *(long long **)v2;
    }
  }
  if (*(char *)(v1 + 31) < 0)
  {
    **(unsigned char **)(v1 + 8) = 0;
    *(void *)(v1 + 16) = 0;
  }
  else
  {
    *(unsigned char *)(v1 + 8) = 0;
    *(unsigned char *)(v1 + 31) = 0;
  }
  return this;
}

void PhonemeEncodingLegacy::join_phonemes(const void **a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v8 = a1;
    }
    else {
      unint64_t v8 = *a1;
    }
    memmove(p_p, v8, v6);
  }
  *(_DWORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v6) = 2108960;
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    unint64_t v10 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  uint64_t v12 = std::string::append(&__p, v10, v11);
  *a3 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20D3624D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PhonemeEncodingLegacy::phoneme_string(uint64_t a1@<X0>, uint64_t **a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  unint64_t v4 = *a2;
  uint64_t v21 = a2[1];
  if (*a2 != v21)
  {
    int v5 = 0;
    uint64_t v6 = a1 + 144;
    while (1)
    {
      if (v5) {
        std::string::append(a3, " _");
      }
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      if (*v4 != v7) {
        break;
      }
LABEL_41:
      ++v5;
      v4 += 3;
      if (v4 == v21) {
        return;
      }
    }
    int v9 = 0;
LABEL_7:
    if (v9) {
      std::string::append(a3, " .");
    }
    uint64_t v11 = *(void *)(v8 + 16);
    uint64_t v10 = *(void *)(v8 + 24);
    while (1)
    {
      if (v11 == v10)
      {
        ++v9;
        v8 += 64;
        if (v8 == v7) {
          goto LABEL_41;
        }
        goto LABEL_7;
      }
      std::string::size_type v12 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = a3->__r_.__value_.__l.__size_;
        if (!size) {
          goto LABEL_30;
        }
        unint64_t v13 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((unsigned char *)&a3->__r_.__value_.__s + 23)) {
          goto LABEL_30;
        }
        unint64_t v13 = a3;
        std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      }
      if (v13->__r_.__value_.__s.__data_[size - 1] != 46) {
        break;
      }
      int v15 = *(char *)(v11 + 23);
      if (v15 < 0)
      {
        if (*(void *)(v11 + 8) != 1) {
          break;
        }
        uint64_t v16 = *(unsigned char **)v11;
      }
      else
      {
        uint64_t v16 = (unsigned char *)v11;
        if (v15 != 1) {
          break;
        }
      }
      if (*v16 != 35) {
        break;
      }
      if ((v12 & 0x80u) == 0) {
        uint64_t v17 = a3;
      }
      else {
        uint64_t v17 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      if ((v12 & 0x80u) != 0) {
        std::string::size_type v12 = a3->__r_.__value_.__l.__size_;
      }
      v17->__r_.__value_.__s.__data_[v12 - 1] = 35;
LABEL_39:
      v11 += 24;
    }
    std::string::push_back(a3, 32);
LABEL_30:
    int v18 = *(char *)(v11 + 23);
    if (v18 >= 0) {
      unint64_t v19 = (const std::string::value_type *)v11;
    }
    else {
      unint64_t v19 = *(const std::string::value_type **)v11;
    }
    if (v18 >= 0) {
      std::string::size_type v20 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      std::string::size_type v20 = *(void *)(v11 + 8);
    }
    std::string::append(a3, v19, v20);
    if (*(_DWORD *)v8)
    {
      if (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v6, (const void **)v11))
      {
        std::string::push_back(a3, 58);
      }
    }
    goto LABEL_39;
  }
}

void sub_20D3626A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *PhonemeEncodingLegacy::parse_phoneme_string@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  PhonemeEncodingImpl::start_phoneme_representation((PhonemeEncodingImpl *)a1);
  int v6 = a2[23];
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(char **)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = a2[23];
  }
  else {
    uint64_t v8 = *((void *)a2 + 1);
  }
  for (; v8; --v8)
  {
    int v9 = *v7;
    if (v9 <= 44)
    {
      if (v9 == 32)
      {
        PhonemeEncodingImpl::start_phoneme(a1);
        goto LABEL_19;
      }
      if (v9 != 35) {
        goto LABEL_15;
      }
    }
    else
    {
      if ((v9 - 45) < 2)
      {
        PhonemeEncodingImpl::start_syllable((PhonemeEncodingImpl *)a1);
        goto LABEL_19;
      }
      if (v9 == 58)
      {
        *(_DWORD *)(a1 + 32) = 1;
        goto LABEL_19;
      }
      if (v9 != 95)
      {
LABEL_15:
        std::string::push_back((std::string *)(a1 + 8), v9);
        goto LABEL_19;
      }
    }
    PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)a1);
LABEL_19:
    ++v7;
  }
  PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v10 = *(uint64_t **)(a1 + 120);
  uint64_t v11 = *(uint64_t **)(a1 + 128);
  return std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(a3, v10, v11, 0xAAAAAAAAAAAAAAABLL * (v11 - v10));
}

void PhonemeEncodingLegacy::~PhonemeEncodingLegacy(PhonemeEncodingLegacy *this)
{
  PhonemeEncodingImpl::~PhonemeEncodingImpl(this);
  JUMPOUT(0x2105595E0);
}

void PhonemeEncodingImpl::~PhonemeEncodingImpl(PhonemeEncodingImpl *this)
{
  *(void *)this = off_26C202930;
  std::__tree<std::string>::destroy((uint64_t)this + 192, *((char **)this + 25));
  std::__tree<std::string>::destroy((uint64_t)this + 168, *((char **)this + 22));
  std::__tree<std::string>::destroy((uint64_t)this + 144, *((char **)this + 19));
  uint64_t v2 = (void **)((char *)this + 120);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 96);
  std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void PhonemeEncodingXSampa::silence(uint64_t **this@<X0>, void *a2@<X8>)
{
  PhonemeEncodingImpl::start_phoneme_representation((PhonemeEncodingImpl *)this);
  MEMORY[0x210558E70](this + 1, "sil");
  PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)this);
  memset(v5, 0, sizeof(v5));
  std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v5, this[15], this[16], 0xAAAAAAAAAAAAAAABLL * (this[16] - this[15]));
  unint64_t v4 = (uint64_t *)v5[0];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(a2, *v4, v4[1], (v4[1] - *v4) >> 6);
  int v6 = (void **)v5;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_20D362978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void PhonemeEncodingXSampa::join_phonemes(const void **a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *a1;
    }
    memmove(p_p, v8, v6);
  }
  *(_DWORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v6) = 2108960;
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  std::string::size_type v12 = std::string::append(&__p, v10, v11);
  *a3 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20D362A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *PhonemeEncodingXSampa::phoneme_string@<X0>(std::string *result@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t v4 = *a2;
  uint64_t v16 = a2[1];
  if (*a2 != v16)
  {
    int v5 = 0;
    uint64_t v6 = (uint64_t)&result[6];
    do
    {
      if (v5) {
        uint64_t result = std::string::append((std::string *)a3, " #");
      }
      uint64_t v7 = *v4;
      uint64_t v8 = v4[1];
      if (*v4 != v8)
      {
        int v9 = 0;
        do
        {
          if (v9) {
            uint64_t result = std::string::append((std::string *)a3, " .");
          }
          uint64_t v10 = *(void *)(v7 + 16);
          uint64_t v11 = *(void *)(v7 + 24);
          while (v10 != v11)
          {
            uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
            if ((v12 & 0x80u) != 0) {
              uint64_t v12 = *(void *)(a3 + 8);
            }
            if (v12) {
              std::string::push_back((std::string *)a3, 32);
            }
            if (*(_DWORD *)v7
              && std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v6, (const void **)v10))
            {
              std::string::push_back((std::string *)a3, 34);
            }
            int v13 = *(char *)(v10 + 23);
            if (v13 >= 0) {
              long long v14 = (const std::string::value_type *)v10;
            }
            else {
              long long v14 = *(const std::string::value_type **)v10;
            }
            if (v13 >= 0) {
              std::string::size_type v15 = *(unsigned __int8 *)(v10 + 23);
            }
            else {
              std::string::size_type v15 = *(void *)(v10 + 8);
            }
            uint64_t result = std::string::append((std::string *)a3, v14, v15);
            v10 += 24;
          }
          ++v9;
          v7 += 64;
        }
        while (v7 != v8);
      }
      ++v5;
      v4 += 3;
    }
    while (v4 != v16);
  }
  return result;
}

void sub_20D362BE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *PhonemeEncodingXSampa::parse_phoneme_string@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  PhonemeEncodingImpl::start_phoneme_representation((PhonemeEncodingImpl *)a1);
  int v6 = a2[23];
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(char **)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = a2[23];
  }
  else {
    uint64_t v8 = *((void *)a2 + 1);
  }
  for (; v8; --v8)
  {
    int v9 = *v7;
    if (v9 > 44)
    {
      if ((v9 - 45) >= 2)
      {
LABEL_17:
        std::string::push_back((std::string *)(a1 + 8), v9);
        goto LABEL_18;
      }
      PhonemeEncodingImpl::start_syllable((PhonemeEncodingImpl *)a1);
    }
    else
    {
      switch(v9)
      {
        case ' ':
          PhonemeEncodingImpl::start_phoneme(a1);
          break;
        case '""':
          PhonemeEncodingImpl::start_phoneme(a1);
          *(_DWORD *)(a1 + 32) = 1;
          break;
        case '#':
          PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)a1);
          break;
        default:
          goto LABEL_17;
      }
    }
LABEL_18:
    ++v7;
  }
  PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v10 = *(uint64_t **)(a1 + 120);
  uint64_t v11 = *(uint64_t **)(a1 + 128);
  return std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(a3, v10, v11, 0xAAAAAAAAAAAAAAABLL * (v11 - v10));
}

void PhonemeEncodingXSampa::~PhonemeEncodingXSampa(PhonemeEncodingXSampa *this)
{
  PhonemeEncodingImpl::~PhonemeEncodingImpl(this);
  JUMPOUT(0x2105595E0);
}

uint64_t *std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  int v5 = (uint64_t **)result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t)(result + 1);
    *(void *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(void *)(v6 + 8)) {
      uint64_t v8 = *(void **)(v6 + 8);
    }
    else {
      uint64_t v8 = (void *)v6;
    }
    int v18 = (const void **)result;
    unint64_t v19 = v8;
    std::string::size_type v20 = v8;
    if (v8)
    {
      unint64_t v19 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        int v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          uint64_t v10 = v20;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v5, &v17, (const void **)v20 + 4);
          std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v5, v17, leaf_high, v10);
          uint64_t v8 = v19;
          std::string::size_type v20 = v19;
          if (v19) {
            unint64_t v19 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          }
          uint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              int v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          int v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t *)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)v5, (uint64_t)(a2 + 4), (uint64_t)&v18);
      long long v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v5, &v17, v18 + 4);
      uint64_t result = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v5, v17, v14, (uint64_t *)v18);
      std::string::size_type v15 = (void *)a2[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          std::string::size_type v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)a2[2];
          BOOL v13 = *v16 == (void)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_20D362EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<PhonemeEncodingLegacy  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<PhonemeEncodingLegacy  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<PhonemeEncodingLegacy  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_pointer<PhonemeEncodingXSampa  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<PhonemeEncodingXSampa  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<PhonemeEncodingXSampa  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::vector<PhonemeRepresentation::Word>::__insert_with_size[abi:ne180100]<std::__wrap_iter<PhonemeRepresentation::Word const*>,std::__wrap_iter<PhonemeRepresentation::Word const*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = a3;
  uint64_t v8 = *a1;
  uint64_t v9 = (a2 - *a1) / 24;
  uint64_t v10 = (uint64_t *)(*a1 + 24 * v9);
  uint64_t v12 = (uint64_t)(a1 + 2);
  uint64_t v11 = a1[2];
  BOOL v13 = (void *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v13) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (v13 - v10)) >= a5)
    {
      unint64_t v19 = &a3[3 * a5];
      std::string::size_type v20 = (void *)a1[1];
    }
    else
    {
      char v41 = a1 + 2;
      v45[0] = v13;
      uint64_t v48 = v13;
      unint64_t v19 = &a3[v13 - v10];
      *(void *)&long long v42 = &v48;
      *((void *)&v42 + 1) = v45;
      LOBYTE(v43) = 0;
      if (v19 == a4)
      {
        std::string::size_type v20 = v13;
      }
      else
      {
        uint64_t v40 = v9;
        std::string::size_type v20 = v13;
        uint64_t v21 = &a3[v13 - v10];
        do
        {
          void *v20 = 0;
          v20[1] = 0;
          v20[2] = 0;
          std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(v20, *v21, v21[1], (v21[1] - *v21) >> 6);
          std::string::size_type v20 = (void *)(v45[0] + 24);
          v45[0] += 24;
          v21 += 3;
        }
        while (v21 != a4);
        uint64_t v9 = v40;
      }
      LOBYTE(v43) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v41);
      a1[1] = (uint64_t)v20;
      if ((char *)v13 - (char *)v10 < 1) {
        return;
      }
    }
    unsigned int v31 = &v10[3 * a5];
    unsigned int v32 = &v20[-3 * a5];
    int v33 = v20;
    if (v32 < v13)
    {
      int v33 = v20;
      do
      {
        *int v33 = 0;
        v33[1] = 0;
        uint64_t v33[2] = 0;
        *(_OWORD *)int v33 = *(_OWORD *)v32;
        uint64_t v33[2] = v32[2];
        *unsigned int v32 = 0;
        v32[1] = 0;
        uint64_t v32[2] = 0;
        v33 += 3;
        v32 += 3;
      }
      while (v32 < v13);
    }
    a1[1] = (uint64_t)v33;
    if (v20 != v31)
    {
      unint64_t v34 = 0;
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (v20 - v31);
      unint64_t v36 = v8 + 24 * v35 + 24 * v9;
      uint64_t v37 = -24 * v35;
      do
      {
        unint64_t v38 = v36 + v34;
        std::string v39 = &v20[v34 / 8];
        std::vector<PhonemeRepresentation::Syllable>::__vdeallocate((void **)&v20[v34 / 8 - 3]);
        *(_OWORD *)(v39 - 3) = *(_OWORD *)(v36 + v34 - 24);
        *(v39 - 1) = *(void *)(v36 + v34 - 8);
        *(void *)(v38 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
        *(void *)(v38 - 16) = 0;
        *(void *)(v38 - 8) = 0;
        v34 -= 24;
      }
      while (v37 != v34);
    }
    for (; v6 != v19; v10 += 3)
    {
      if (v6 != v10) {
        std::vector<PhonemeRepresentation::Syllable>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>((uint64_t)v10, *v6, v6[1], (v6[1] - *v6) >> 6);
      }
      v6 += 3;
    }
  }
  else
  {
    unint64_t v14 = a5 - 0x5555555555555555 * (((uint64_t)v13 - v8) >> 3);
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v8) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v44 = v12;
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v22 = (void *)(v16 + 24 * v9);
    char v41 = (uint64_t *)v16;
    *(void *)&long long v42 = v22;
    *((void *)&v42 + 1) = v22;
    unint64_t v43 = v16 + 24 * v17;
    uint64_t v23 = 3 * a5;
    long long v24 = &v22[3 * a5];
    uint64_t v25 = 8 * v23;
    do
    {
      *uint64_t v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(v22, *v6, v6[1], (v6[1] - *v6) >> 6);
      v22 += 3;
      v6 += 3;
      v25 -= 24;
    }
    while (v25);
    *((void *)&v42 + 1) = v24;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>>(v12, (uint64_t)v10, v10, *a1, (void *)*a1, v42, v42);
    *(void *)&long long v42 = v26;
    std::string v27 = (uint64_t *)a1[1];
    uint64_t v48 = v24;
    std::string v47 = v24;
    v45[0] = v12;
    v45[1] = &v47;
    v45[2] = &v48;
    if (v10 != v27)
    {
      do
      {
        void *v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
        *(_OWORD *)long long v24 = *(_OWORD *)v10;
        v24[2] = v10[2];
        *uint64_t v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        v24 += 3;
        v10 += 3;
      }
      while (v10 != v27);
      uint64_t v48 = v24;
    }
    char v46 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v45);
    long long v28 = *(_OWORD *)a1;
    uint64_t v29 = v43;
    *a1 = v42;
    a1[1] = (uint64_t)v24;
    long long v42 = v28;
    uint64_t v30 = a1[2];
    a1[2] = v29;
    unint64_t v43 = v30;
    char v41 = (uint64_t *)v28;
    std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&v41);
  }
}

void sub_20D36348C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  *(void *)(v4 + 8) = v5;
  _Unwind_Resume(a1);
}

uint64_t NSProcessInfoObjCBridge::get_thermal_state(NSProcessInfoObjCBridge *this)
{
  uint64_t v1 = [MEMORY[0x263F08AB0] injectedProcessInfo];
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
  }
  else
  {
    id v3 = [MEMORY[0x263F08AB0] processInfo];
  }
  uint64_t v4 = v3;

  uint64_t v5 = [v4 thermalState];
  if ((unint64_t)(v5 - 1) < 3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_20D363540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t NSProcessInfoObjCBridge::low_power_mode_enabled(NSProcessInfoObjCBridge *this)
{
  uint64_t v1 = [MEMORY[0x263F08AB0] injectedProcessInfo];
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
  }
  else
  {
    id v3 = [MEMORY[0x263F08AB0] processInfo];
  }
  uint64_t v4 = v3;

  uint64_t v5 = [v4 isLowPowerModeEnabled];
  return v5;
}

void sub_20D3635B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t FROffsetHash::get(uint64_t a1, int a2)
{
  unsigned int v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    uint64_t v3 = 1;
    int v4 = 1;
    unsigned int v5 = (v2 - 1) & a2;
    while (1)
    {
      int v6 = *(_DWORD *)(*(void *)(a1 + 16) + 4 * (v5 >> 4)) >> (2 * (v5 & 0xF));
      if ((v6 & 2) != 0 || (v6 & 1) == 0 && *(_DWORD *)(*(void *)(a1 + 24) + 4 * v5) == a2) {
        break;
      }
      unsigned int v5 = (v5 + v4++) & (v2 - 1);
      if (v5 == ((v2 - 1) & a2)) {
        return v3;
      }
    }
    if ((v6 & 3) != 0) {
      unsigned int v7 = *(_DWORD *)a1;
    }
    else {
      unsigned int v7 = v5;
    }
  }
  else
  {
    unsigned int v7 = 0;
  }
  if (v7 == v2) {
    return 1;
  }
  else {
    return (unint64_t)*(unsigned int *)(*(void *)(a1 + 32) + 4 * v7) << 32;
  }
}

void SwitchLanguageImpl::generate_tokens(SwitchLanguageImpl *this)
{
  unsigned int v2 = (void *)((char *)this + 32);
  uint64_t v3 = *((void *)this + 9);
  do
  {
    if (*((unsigned char *)this + 8) || *((void *)this + 9) != v3) {
      break;
    }
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v15);
    uint64_t v4 = v15;
    if ((void)v15)
    {
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
      uint64_t v5 = v15;
      uint64_t v7 = (void *)(v5 + 8) == v6 ? 0 : v6[5] + 8;
      uint64_t v8 = *(void *)(v7 + 48);
      if (*(char *)(v8 + 63) < 0) {
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v8 + 40), *(void *)(v8 + 48));
      }
      else {
        std::string v14 = *(std::string *)(v8 + 40);
      }
      environment = (std::string *)EnvironmentBroker::get_environment(*((uint64_t ***)this + 13), (long long *)&v14);
      std::string::operator=((std::string *)(*(void *)(v7 + 48) + 40), environment);
      if ((std::string *)environment[7].__r_.__value_.__r.__words[2] == environment)
      {
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v15);
      }
      else
      {
        uint64_t side_chain = SideChainBroker::get_side_chain(*((void *)this + 14), (const void **)&environment->__r_.__value_.__l.__data_);
        (*(void (**)(uint64_t))(*(void *)side_chain + 24))(side_chain);
        uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)side_chain + 56))(side_chain);
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v11, &v15);
        do
        {
          (*(void (**)(long long *__return_ptr, uint64_t, void))(*(void *)side_chain + 16))(&v13, side_chain, 0);
          uint64_t v12 = v13;
          if ((void)v13)
          {
            std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v13);
            (*(void (**)(uint64_t))(*(void *)side_chain + 32))(side_chain);
          }
          if (*((void *)&v13 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
          }
        }
        while (v12);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *((unsigned char *)this + 8) = 1;
    }
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
  }
  while (v4);
}

void sub_20D3638BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void SwitchLanguageImpl::~SwitchLanguageImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x2105595E0);
}

void SwitchLanguage_MeCabImpl::generate_tokens(SwitchLanguage_MeCabImpl *this)
{
  if (!*((unsigned char *)this + 8))
  {
    unsigned int v2 = (void *)((char *)this + 32);
    uint64_t v22 = *((void *)this + 9);
    uint64_t v23 = (char *)this + 32;
    while (1)
    {
      if (*((void *)this + 9) != v22) {
        return;
      }
      (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v29);
      if (!(void)v29) {
        break;
      }
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
      uint64_t v3 = v29;
      uint64_t v5 = (void *)(v3 + 8);
      unsigned int v2 = v23;
      if (v5 == v4) {
        goto LABEL_16;
      }
      uint64_t v6 = v4[5];
      uint64_t v7 = (void *)(v6 + 8);
      int v8 = *(char *)(v6 + 31);
      if (v8 < 0)
      {
        if (*(void *)(v6 + 16) != 1) {
          goto LABEL_16;
        }
        uint64_t v7 = (void *)*v7;
      }
      else if (v8 != 1)
      {
        goto LABEL_16;
      }
      if (*(unsigned char *)v7 != 42) {
        goto LABEL_16;
      }
      if (!*((unsigned char *)this + 112))
      {
        (*(void (**)(void))(**((void **)this + 13) + 24))(*((void *)this + 13));
        *((unsigned char *)this + 112) = 1;
      }
      uint64_t v9 = (void *)(*(uint64_t (**)(void))(**((void **)this + 13) + 56))(*((void *)this + 13));
LABEL_46:
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v9, &v29);
LABEL_47:
      if (*((void *)&v29 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
      }
      if (*((unsigned char *)this + 8)) {
        return;
      }
    }
    *((unsigned char *)this + 8) = 1;
LABEL_16:
    if (*((unsigned char *)this + 112))
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v13 = 0;
      do
      {
        (*(void (**)(long long *__return_ptr))(**((void **)this + 13) + 16))(&v28);
        uint64_t v14 = v28;
        if ((void)v28)
        {
          (*(void (**)(void))(**((void **)this + 13) + 32))(*((void *)this + 13));
          uint64_t v15 = v28;
          if ((void *)(v15 + 8) != v16)
          {
            uint64_t v17 = v16[5];
            uint64_t v18 = *(void *)(v17 + 56);
            if (v18 != v10)
            {
              unint64_t v19 = *(std::__shared_weak_count **)(v17 + 64);
              if (v19) {
                atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v11) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v11);
              }
              uint64_t v24 = v18;
              uint64_t v25 = v19;
              if (v19) {
                atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              TokenAttributes::create_nested(&v26, &v24, 6);
              uint64_t v12 = v26;
              std::string::size_type v20 = v27;
              uint64_t v26 = 0;
              std::string v27 = 0;
              if (v13)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v13);
                if (v27) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
                }
              }
              if (v25) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v25);
              }
              MEMORY[0x210558E70](v12 + 40, "en-US");
              uint64_t v10 = v18;
              uint64_t v11 = v19;
              long long v13 = v20;
              unsigned int v2 = v23;
            }
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v21 = *(std::__shared_weak_count **)(v17 + 64);
            *(void *)(v17 + 56) = v12;
            *(void *)(v17 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v13;
            if (v21) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            }
          }
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v28);
        }
        if (*((void *)&v28 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
        }
      }
      while (v14);
      *((unsigned char *)this + 112) = 0;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
    uint64_t v9 = v2;
    if (!(void)v29) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
}

void sub_20D363C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SwitchLanguage_MeCabImpl::clear(SwitchLanguage_MeCabImpl *this)
{
  *((unsigned char *)this + 112) = 0;
  return FrontendModule::clear(this);
}

void SwitchLanguage_MeCabImpl::~SwitchLanguage_MeCabImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<SwitchLanguageImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SwitchLanguageImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SwitchLanguageImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::ItemHolder<SideChainBroker>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206058;
  SideChainBroker::~SideChainBroker((char **)(a1 + 8));
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<SideChainBroker>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206058;
  SideChainBroker::~SideChainBroker((char **)(a1 + 8));
  return a1;
}

void SwitchLanguagePersistentModule::~SwitchLanguagePersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<SwitchLanguage_MeCabImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SwitchLanguage_MeCabImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2179B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SwitchLanguage_MeCabImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2179B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AudioResamplingModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *(void *)(*(void *)v4 + 8);
  uint64_t v9 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(unsigned char *)v10)
  {
    kaldi::LinearResample::Reset(*(kaldi::LinearResample **)(a1 + 272), v5, v6, v7, v8);
    *(void *)(a1 + 30std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    if (*(unsigned char *)(v10 + 113))
    {
      if (!*(unsigned char *)(a1 + 292)) {
        *(void *)(a1 + 296) = 15;
      }
      uint64_t v11 = *a2;
      __p[1] = 0;
      *(void *)&long long v48 = 0;
      __p[0] = 0;
      std::vector<RateMarker>::__init_with_size[abi:ne180100]<RateMarker*,RateMarker*>(__p, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3);
      long long v13 = __p[0];
      if (__p[1] == __p[0])
      {
        if (!__p[1])
        {
LABEL_12:
          *(void *)(a1 + 296) += *(void *)(v10 + 104);
          goto LABEL_13;
        }
      }
      else
      {
        *(void *)(a1 + 296) = (unint64_t)(float)((float)*(unint64_t *)(a1 + 296) / *((float *)__p[0] + 1));
      }
      operator delete(v13);
      goto LABEL_12;
    }
  }
LABEL_13:
  uint64_t v14 = *(float **)(v10 + 56);
  uint64_t v15 = *(void *)(v10 + 64);
  unint64_t v16 = (float **)(v10 + 56);
  int64_t v17 = (v15 - (uint64_t)v14) >> 2;
  int64_t v18 = *(void *)(a1 + 296) * *(int *)(a1 + 312) / 0x3E8uLL - *(void *)(a1 + 304);
  uint64_t v19 = v18 & ~(v18 >> 63);
  if (v19 >= v17) {
    uint64_t v20 = (v15 - (uint64_t)v14) >> 2;
  }
  else {
    uint64_t v20 = v19;
  }
  if (v20)
  {
    unsigned int v21 = Resampler::make_some_noise(std::vector<float> &,unsigned long,unsigned long)::rnd;
    do
    {
      unsigned int v21 = 1664525 * v21 + 1013904223;
      *v14++ = (float)(v21 % 3) + -1.0;
      --v20;
    }
    while (v20);
    Resampler::make_some_noise(std::vector<float> &,unsigned long,unsigned long)::rnd = v21;
    uint64_t v14 = *v16;
    int64_t v17 = (v15 - (uint64_t)*v16) >> 2;
  }
  uint64_t v22 = *(void *)(a1 + 272);
  int v23 = *(unsigned __int8 *)(v10 + 1);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v48 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v14, v15, v17);
  v56[2] = 0;
  v56[0] = __p[0];
  v56[1] = ((unint64_t)((char *)__p[1] - (char *)__p[0]) >> 2);
  kaldi::VectorBase<float>::Scale((uint64_t)v56, 0.000030518);
  int64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  kaldi::LinearResample::Resample(v22, (uint64_t)v56, v23 != 0, (uint64_t)&v53, v24);
  kaldi::VectorBase<float>::Scale((uint64_t)&v53, 32768.0);
  std::vector<float>::vector(__dst, (int)v54);
  if (v54) {
    memmove(__dst[0], v53, 4 * (int)v54);
  }
  uint64_t v25 = (float *)__dst[0];
  uint64_t v26 = (float *)__dst[1];
  if (__dst[0] != __dst[1])
  {
    std::string v27 = (float *)(v22 + 112);
    long long v28 = (float *)(v22 + 116);
    do
    {
      float v29 = *v25;
      float v30 = *v28;
      if (*v25 < *v27 || v29 > v30)
      {
        if (v29 <= v30)
        {
          unsigned int v32 = v25;
        }
        else
        {
          float v29 = *v28;
          unsigned int v32 = (float *)(v22 + 116);
        }
        if (v29 < *v27) {
          unsigned int v32 = (float *)(v22 + 112);
        }
        *uint64_t v25 = *v32;
      }
      ++v25;
    }
    while (v25 != v26);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v53);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v33 = *v16;
  if (*v16)
  {
    *(void *)(v10 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v33;
    operator delete(v33);
    *unint64_t v16 = 0;
    *(void *)(v10 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
    *(void *)(v10 + 72) = 0;
  }
  *(_OWORD *)(v10 + 56) = *(_OWORD *)__dst;
  *(void *)(v10 + 72) = v52;
  unint64_t v34 = *(std::__shared_weak_count **)(a1 + 176);
  v50[0] = *(void *)(a1 + 168);
  v50[1] = (uint64_t)v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  OverlappingPrompt::overlap_if_available(v50, v10 + 56);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  *(void *)(a1 + 304) += (uint64_t)(*(void *)(v10 + 64) - *(void *)(v10 + 56)) >> 2;
  uint64_t v35 = *a2;
  {
    uint64_t v37 = *(void **)(*(void *)v36 + 8);
    unint64_t v38 = *(std::__shared_weak_count **)(*(void *)v36 + 16);
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v39 = v37[1];
    if (*v37 != v39)
    {
      uint64_t v40 = *v37 + 32;
      do
      {
        long long v41 = *(_OWORD *)(v40 - 16);
        *(_OWORD *)std::string __p = *(_OWORD *)(v40 - 32);
        long long v48 = v41;
        if (*(char *)(v40 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v40, *(void *)(v40 + 8));
        }
        else
        {
          long long v42 = *(_OWORD *)v40;
          v49.__r_.__value_.__r.__words[2] = *(void *)(v40 + 16);
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v42;
        }
        *((void *)&v48 + 1) = (unint64_t)(float)(*(float *)(a1 + 288) * (float)*((unint64_t *)&v48 + 1));
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        uint64_t v43 = v40 - 32;
        v40 += 56;
      }
      while (v43 + 56 != v39);
    }
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
  }
  uint64_t v44 = (std::__shared_weak_count *)a2[1];
  uint64_t v45 = *a2;
  char v46 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v45);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_20D3643D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Resampler>::__on_zero_shared(uint64_t a1)
{
  kaldi::Vector<float>::Destroy(a1 + 112);
  uint64_t v3 = (void **)(a1 + 72);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unsigned int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<Resampler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218F58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Resampler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218F58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AudioResamplingModule::AudioResamplingModule(uint64_t a1, char *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  v19[0] = a3;
  v19[1] = (uint64_t)a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Module::Module(a1, a2, v19);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *(void *)a1 = off_26C202E30;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "sample_rate_in");
  unsigned int v16 = 24000;
  *(_DWORD *)(a1 + 312) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v16);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sample_rate_out");
  unsigned int v16 = 48000;
  *(_DWORD *)(a1 + 316) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v16);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "leading_silence");
  unsigned int v16 = 0;
  *(void *)(a1 + 296) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v16);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "override_trimming_silence");
  LOBYTE(v16) = 0;
  *(unsigned char *)(a1 + 292) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, (unsigned __int8 *)&v16);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  int v8 = operator new(0x90uLL);
  v8[1] = 0;
  v8[2] = 0;
  *int v8 = off_26C218F58;
  uint64_t v9 = *(unsigned int *)(a1 + 312);
  int v10 = *(_DWORD *)(a1 + 316);
  float v11 = (float)(int)v9;
  if ((float)v10 < (float)(int)v9) {
    float v11 = (float)v10;
  }
  uint64_t v12 = kaldi::LinearResample::LinearResample((kaldi::LinearResample *)(v8 + 3), v9, v10, (float)(v11 * 0.5) + -1.0, 5, v7);
  v8[17] = 0x46FFFE00C7000000;
  *(void *)&long long v13 = v12;
  *((void *)&v13 + 1) = v8;
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v13;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  *(float *)(a1 + 288) = (float)(*(_DWORD *)(a1 + 316) / *(_DWORD *)(a1 + 312));
  return a1;
}

void sub_20D3647A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  uint64_t v19 = (std::__shared_weak_count *)*((void *)v15 + 35);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  Module::~Module(v15);
  _Unwind_Resume(a1);
}

void sub_20D36480C()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x20D364804);
}

void Tokenize_Hanzi::generate_tokens(Tokenize_Hanzi *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned int v2 = (void *)((char *)this + 32);
  do
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v13);
    uint64_t v3 = v13;
    if (!(void)v13)
    {
      *((unsigned char *)this + 8) = 1;
      goto LABEL_26;
    }
    (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
    uint64_t v4 = v13;
    if ((void *)(v4 + 8) == v5) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5[5] + 8;
    }
    if ((void *)(v4 + 8) == v7) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v7[5] + 8;
    }
    int v9 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 == 1885892462)
    {
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v13);
      int v9 = *(_DWORD *)v6;
    }
    if (v9 == 1952807028)
    {
      int v10 = (const std::string::value_type **)(v6 + 24);
      if (*(char *)(v6 + 47) < 0)
      {
        std::string::size_type v11 = *(void *)(v6 + 32);
        if (!v11) {
          goto LABEL_26;
        }
        std::string::__init_copy_ctor_external(&v12, *v10, v11);
      }
      else
      {
        if (!*(unsigned char *)(v6 + 47)) {
          goto LABEL_26;
        }
        *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
        v12.__r_.__value_.__r.__words[2] = *(void *)(v6 + 40);
      }
      operator new();
    }
    if (v9 != 1651664235) {
      goto LABEL_26;
    }
    if (*(char *)(v6 + 47) < 0)
    {
      if (*(void *)(v6 + 32)) {
        goto LABEL_26;
      }
    }
    else if (*(unsigned char *)(v6 + 47))
    {
      goto LABEL_26;
    }
    if (v8) {
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v13);
    }
LABEL_26:
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  while (v3);
}

void sub_20D364E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,char a38)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a38);
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  _Unwind_Resume(a1);
}

void Tokenize_Hanzi::add_token(uint64_t a1, std::string *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v8 = operator new(0x30uLL);
  *(_OWORD *)((char *)v8 + 8) = 0u;
  *(void *)uint64_t v8 = off_26C215330;
  v8[2] = 0u;
  *((void *)v8 + 3) = v8 + 2;
  *(void *)&long long v26 = (char *)v8 + 24;
  *((void *)&v26 + 1) = v8;
  memset(&__p, 0, sizeof(__p));
  UTFString::lstrip(a2);
  UTFString::rstrip(a2);
  std::string::operator=(&__p, a2);
  unint64_t v9 = *((unsigned __int8 *)a3 + 23);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = (uint64_t)a3;
  }
  else {
    uint64_t v10 = *a3;
  }
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = a3[1];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = __p.__r_.__value_.__l.__size_;
  }
  *((void *)&v25 + 1) = size;
  unint64_t v12 = *a4;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v9 >= v12)
  {
    if (size)
    {
      uint64_t v14 = (void *)(v10 + v12);
      uint64_t v15 = (char *)(v10 + v9);
      int64_t v16 = v9 - v12;
      if (v16 >= size)
      {
        int v21 = p_p->__r_.__value_.__s.__data_[0];
        do
        {
          uint64_t v22 = v16 - size;
          if (v22 == -1) {
            break;
          }
          int v23 = (char *)memchr(v14, v21, v22 + 1);
          if (!v23) {
            break;
          }
          int64_t v17 = v23;
          if (!memcmp(v23, p_p, size)) {
            goto LABEL_17;
          }
          uint64_t v14 = v17 + 1;
          int64_t v16 = v15 - (v17 + 1);
        }
        while (v16 >= size);
      }
      int64_t v17 = v15;
LABEL_17:
      unint64_t v12 = (unint64_t)&v17[-v10];
      if (v17 == v15) {
        unint64_t v12 = -1;
      }
    }
  }
  else
  {
    unint64_t v12 = -1;
  }
  *(void *)&long long v25 = v12;
  *a4 = v12 + size;
  std::string v27 = &v30;
  if (!v18) {
    operator new();
  }
  std::string v27 = (char ***)off_26C205FB8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = __p;
  }
  long long v29 = v25;
  uint64_t v19 = (void **)(v18 + 8);
  if (*(char *)(v18 + 31) < 0) {
    operator delete(*v19);
  }
  long long v20 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
  *(void *)(v18 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((void *)&v28.__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v19 = v20;
  *(_OWORD *)(v18 + 32) = v29;
  std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)(a1 + 32), &v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_20D36521C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x2105595E0](v15, 0x1093C40110CF19CLL);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<TokenHanziItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C205FB8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenHanziItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C205FB8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void Tokenize_Hanzi::~Tokenize_Hanzi(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<Tokenize_Hanzi>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Tokenize_Hanzi>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Tokenize_Hanzi>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void PsolaStream::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v278 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(uint64_t **)(*(void *)v3 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(*(void *)v3 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v227 = v5;
  uint64_t v6 = *v4;
  uint64_t v240 = v4[1];
  if (*v4 != v240)
  {
    char v228 = (int32x2_t **)(a1 + 384);
    std::string v229 = (void *)(a1 + 408);
    v233 = (void **)(a1 + 344);
    std::string::size_type v232 = (_OWORD *)(a1 + 368);
    float32x2_t v7 = (float32x2_t)vdup_n_s32(0x42C80000u);
    float32x2_t v8 = (float32x2_t)vdup_n_s32(0x447A0000u);
    float v9 = 0.5;
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 280);
      if (v10)
      {
        if (*(unsigned char *)(v10 + 48)) {
          break;
        }
      }
LABEL_364:
      v6 += 120;
      if (v6 == v240) {
        goto LABEL_365;
      }
    }
    uint64_t v11 = *(void *)(v6 + 8);
    uint64_t v12 = *(void *)(v6 + 16);
    uint64_t v13 = v11;
    if (v11 != v12)
    {
      do
      {
        uint64_t v14 = *(_DWORD **)(v11 + 160);
        uint64_t v15 = *(_DWORD **)(v11 + 168);
        while (v14 != v15)
        {
          if (*v14 == 1)
          {
            SharedObjectPool::get<SynthesizerConfig>(v249, *(void *)(a1 + 168));
            int64_t v17 = (float32x2_t *)v249[0];
            int64_t v16 = (std::__shared_weak_count *)v249[1];
            *(float *)(a1 + 296) = *((float *)v249[0] + 1) * 100.0;
            *(int32x2_t *)(a1 + 300) = vrev64_s32((int32x2_t)vmul_f32(v17[1], v7));
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
          }
          v14 += 14;
        }
        v11 += 184;
      }
      while (v11 != v12);
      uint64_t v13 = *(void *)(v6 + 8);
      uint64_t v11 = *(void *)(v6 + 16);
      uint64_t v10 = *(void *)(a1 + 280);
    }
    int v18 = *(_DWORD *)(a1 + 440);
    long long v19 = 0uLL;
    *(_OWORD *)uint64_t v250 = 0u;
    long long v251 = 0u;
    *(_OWORD *)uint64_t v249 = 0u;
    v253 = 0;
    int64x2_t v20 = 0uLL;
    long long v254 = 0u;
    memset(&v255[1], 0, 24);
    if (v18) {
      int v21 = 15;
    }
    else {
      int v21 = 0;
    }
    uint64_t v241 = v6;
    if (!*(unsigned char *)(v10 + 48))
    {
      long long v234 = 0uLL;
      goto LABEL_238;
    }
    unint64_t v22 = *(unsigned int *)(v13 + 4);
    uint64_t v23 = *(int *)(v11 - 180);
    memset(v277, 0, sizeof(v277));
    int64x2_t v276 = 0uLL;
    if (((v23 | v22) & 0x80000000) != 0)
    {
      int v29 = *(_DWORD *)(v10 + 84) * (v21 - v22 + 10);
      if (v29 < 1)
      {
        long long v234 = 0uLL;
        long long v237 = 0uLL;
        uint64_t v6 = v241;
      }
      else
      {
        int v30 = 0;
        uint64_t v6 = v241;
        do
        {
          unsigned int v31 = (char *)v276.i64[1];
          if (v276.i64[1] >= *(void *)&v277[0])
          {
            int v33 = (char *)v276.i64[0];
            uint64_t v34 = (v276.i64[1] - v276.i64[0]) >> 2;
            unint64_t v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v36 = *(void *)&v277[0] - v276.i64[0];
            if ((*(void *)&v277[0] - v276.i64[0]) >> 1 > v35) {
              unint64_t v35 = v36 >> 1;
            }
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37)
            {
              unint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v277, v37);
              unsigned int v31 = (char *)v276.i64[1];
              int v33 = (char *)v276.i64[0];
            }
            else
            {
              unint64_t v38 = 0;
            }
            uint64_t v39 = (int *)&v38[4 * v34];
            *uint64_t v39 = v30;
            unsigned int v32 = v39 + 1;
            while (v31 != v33)
            {
              int v40 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *--uint64_t v39 = v40;
            }
            v276.i64[0] = (uint64_t)v39;
            v276.i64[1] = (uint64_t)v32;
            *(void *)&v277[0] = &v38[4 * v37];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(_DWORD *)v276.i64[1] = v30;
            unsigned int v32 = v31 + 4;
          }
          v276.i64[1] = (uint64_t)v32;
          LOBYTE(v269) = 0;
          std::vector<BOOL>::push_back((uint64_t)v277 + 8, &v269);
          v30 += *(_DWORD *)(v10 + 88);
        }
        while (v30 < v29);
        int64x2_t v20 = v276;
        long long v234 = v277[1];
        long long v237 = v277[0];
      }
      int v105 = 0;
      memset(v277, 0, sizeof(v277));
      int64x2_t v276 = 0u;
      goto LABEL_233;
    }
    v273 = 0;
    v274 = 0;
    uint64_t v275 = 0;
    int v230 = v21;
    if ((int)v22 < 1)
    {
      int v236 = 0;
    }
    else
    {
      int v24 = 0;
      int v25 = *(_DWORD *)(v10 + 84);
      while (v24 < v25 * v21)
      {
        uint64_t v26 = *(void *)(v10 + 8);
        if (*(unsigned char *)(v26 + 8)) {
          uint64_t v27 = *(unsigned int *)(*(void *)(v26 + 96) + 4 * (v22 - 1));
        }
        else {
          uint64_t v27 = v22 - 1;
        }
        Database::get_unit(v26, v27, (void **)&v273);
        int v25 = *(_DWORD *)(v10 + 84);
        int v24 = (int)(float)(truncf(v273[*(int *)(v10 + 92)] * (float)v25) + (float)v24);
        if (v22-- <= 1)
        {
          int v236 = v24;
          LODWORD(v22) = 0;
          goto LABEL_52;
        }
      }
      int v236 = v24;
    }
LABEL_52:
    int v41 = 0;
    uint64_t v42 = (v23 + 1);
    while (1)
    {
      uint64_t v43 = *(void *)(v10 + 8);
      if (v23 >= *(int *)(*(void *)(v43 + 80) + 4) - 1 || v41 >= 10 * *(_DWORD *)(v10 + 84)) {
        break;
      }
      uint64_t v44 = v42;
      if (*(unsigned char *)(v43 + 8)) {
        uint64_t v44 = *(unsigned int *)(*(void *)(v43 + 96) + 4 * v23 + 4);
      }
      Database::get_unit(v43, v44, (void **)&v273);
      int v41 = (int)(float)(truncf(v273[*(int *)(v10 + 92)] * (float)*(int *)(v10 + 84)) + (float)v41);
      uint64_t v42 = (v42 + 1);
      ++v23;
    }
    int v231 = v42 - v22;
    unsigned int v45 = *(_DWORD *)(v10 + 60);
    int v47 = *(_DWORD *)(v10 + 72);
    int v46 = *(_DWORD *)(v10 + 76);
    uint64_t v48 = *(void *)(v10 + 32);
    int v49 = *(_DWORD *)(v10 + 68);
    unsigned int v50 = *(_DWORD *)v10;
    if ((int)v23 + 1 >= v45) {
      int v51 = v23;
    }
    else {
      int v51 = v23 + 1;
    }
    if ((int)v23 + 1 >= v45) {
      int v52 = *(_DWORD *)(v10 + 40);
    }
    else {
      int v52 = v47 + v50 * *(_DWORD *)(v48 + (v49 + v51 * v46));
    }
    uint64_t v53 = v47 + v50 * *(_DWORD *)(v48 + (v49 + v46 * v22));
    PitchmarkExtractorCore::get_pitchmarks_from_data((PitchmarkExtractorCore *)&v269, (int *)v10, v48 + v53, (v52 - (int)v53) / v50);
    if (v270 == v269)
    {
      uint64_t v54 = 0;
      int64x2_t v20 = vdupq_n_s64((unint64_t)v270);
      uint64_t v270 = 0;
      int v269 = 0;
      long long v55 = v271;
      long long v271 = 0uLL;
      long long v237 = v55;
      long long v234 = v272;
      long long v272 = 0uLL;
      uint64_t v6 = v241;
LABEL_226:
      int64x2_t v244 = v20;
      if (v54)
      {
        uint64_t v270 = v54;
        operator delete(v54);
        int64x2_t v20 = v244;
      }
      if (v273)
      {
        v274 = v273;
        operator delete(v273);
        int64x2_t v20 = v244;
      }
      if (*((void *)&v277[0] + 1))
      {
        operator delete(*((void **)&v277[0] + 1));
        int64x2_t v20 = v244;
      }
      int v105 = (void *)v276.i64[0];
LABEL_233:
      int64x2_t v245 = v20;
      if (v105)
      {
        v276.i64[1] = (uint64_t)v105;
        operator delete(v105);
        int64x2_t v20 = v245;
      }
      if (v249[0])
      {
        v249[1] = v249[0];
        operator delete(v249[0]);
        int64x2_t v20 = v245;
      }
      long long v19 = v237;
LABEL_238:
      *(int64x2_t *)uint64_t v249 = v20;
      v250[0] = (void *)v19;
      if (v250[1])
      {
        uint64_t v239 = *((void *)&v19 + 1);
        operator delete(v250[1]);
        *((void *)&v19 + 1) = v239;
      }
      v250[1] = *((void **)&v19 + 1);
      long long v251 = v234;
      *(void *)&long long v271 = 0;
      uint64_t v270 = 0;
      int v269 = 0;
      std::vector<Unit>::__init_with_size[abi:ne180100]<Unit*,Unit*>(&v269, *(void *)(v6 + 8), *(void *)(v6 + 16), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3));
      unsigned int v150 = 0;
      if (v270 == v269 || (*((_DWORD *)v269 + 1) & 0x80000000) != 0)
      {
        unsigned int v151 = 0;
      }
      else
      {
        unsigned int v151 = 0;
        if ((*(v270 - 45) & 0x80000000) == 0)
        {
          unsigned int v151 = *((_DWORD *)v269 + 34);
          unsigned int v150 = *(v270 - 10);
        }
      }
      *(void *)&long long v252 = __PAIR64__(v150, v151);
      v276.i64[0] = (uint64_t)&v269;
      std::vector<Unit>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
      *((float32x2_t *)&v252 + 1) = v7;
      float32x2_t v152 = vdiv_f32(*(float32x2_t *)(v6 + 84), v8);
      uint64_t v153 = *(void *)(v6 + 8);
      uint64_t v154 = *(void *)(v6 + 16);
      float32x2_t v238 = v152;
      unint64_t v155 = 0;
      if (v153 == v154)
      {
        long long v246 = 0u;
      }
      else
      {
        uint64_t v156 = 0;
        long long v246 = 0u;
        float v157 = v152.f32[0];
        do
        {
          float v158 = v157 + (float)(*(float *)(v153 + 152) / 1000.0);
          if ((unint64_t)v156 >= v155)
          {
            uint64_t v159 = (void *)v246;
            uint64_t v160 = (uint64_t)((uint64_t)v156 - v246) >> 3;
            unint64_t v161 = v160 + 1;
            if ((unint64_t)(v160 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v155 - v246) >> 2 > v161) {
              unint64_t v161 = (uint64_t)(v155 - v246) >> 2;
            }
            if (v155 - (unint64_t)v246 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v162 = v161;
            }
            if (v162)
            {
              unint64_t v162 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v162);
              uint64_t v156 = (float *)*((void *)&v246 + 1);
            }
            else
            {
              uint64_t v163 = 0;
            }
            uint64_t v164 = (float *)(v162 + 8 * v160);
            float *v164 = v157;
            v164[1] = v158;
            uint64_t v165 = v164;
            while (v156 != (float *)v246)
            {
              uint64_t v166 = *((void *)v156 - 1);
              v156 -= 2;
              *((void *)v165 - 1) = v166;
              v165 -= 2;
            }
            unint64_t v155 = v162 + 8 * v163;
            uint64_t v156 = v164 + 2;
            *(void *)&long long v246 = v165;
            if (v159) {
              operator delete(v159);
            }
          }
          else
          {
            float *v156 = v157;
            v156[1] = v158;
            v156 += 2;
          }
          *(void *)&long long v167 = v246;
          *((void *)&v167 + 1) = v156;
          long long v246 = v167;
          float v157 = v157 + (float)(*(float *)(v153 + 152) / 1000.0);
          v153 += 184;
        }
        while (v153 != v154);
      }
      v255[0] = v238;
      if (v255[1])
      {
        v255[2] = v255[1];
        operator delete((void *)v255[1]);
      }
      *(_OWORD *)&v255[1] = v246;
      v255[3] = v155;
      unint64_t v168 = (void **)(a1 + 320);
      if (*(void *)(a1 + 456) == *(void *)(a1 + 448))
      {
        uint64_t v6 = v241;
        if (*(int *)(a1 + 440) >= 1)
        {
          uint64_t v169 = *(void *)(a1 + 312);
          uint64_t v170 = *(void *)(v169 + 16);
          if (*(char *)(v170 - 121) < 0)
          {
            uint64_t v171 = *(char **)(v170 - 144);
            uint64_t v172 = *(void *)(v170 - 136);
          }
          else
          {
            uint64_t v171 = (char *)(v170 - 144);
            uint64_t v172 = *(unsigned __int8 *)(v170 - 121);
          }
          if (v172 >= 3)
          {
            uint64_t v173 = &v171[v172];
            unint64_t v174 = v171;
            do
            {
              uint64_t v175 = (char *)memchr(v174, 115, v172 - 2);
              if (!v175) {
                break;
              }
              BOOL v176 = *(_WORD *)v175 == 26995 && v175[2] == 108;
              if (v176)
              {
                if (v175 != v173 && v175 - v171 != -1) {
                  goto LABEL_307;
                }
                break;
              }
              unint64_t v174 = v175 + 1;
              uint64_t v172 = v173 - (unsigned char *)v174;
            }
            while (v173 - (unsigned char *)v174 >= 3);
          }
          uint64_t v177 = *(void *)(v241 + 8);
          if (*(char *)(v177 + 63) < 0)
          {
            uint64_t v178 = *(char **)(v177 + 40);
            uint64_t v179 = *(void *)(v177 + 48);
          }
          else
          {
            uint64_t v178 = (char *)(v177 + 40);
            uint64_t v179 = *(unsigned __int8 *)(v177 + 63);
          }
          if (v179 >= 3)
          {
            long long v180 = &v178[v179];
            long long v181 = v178;
            do
            {
              uint64_t v182 = (char *)memchr(v181, 115, v179 - 2);
              if (!v182) {
                break;
              }
              if (*(_WORD *)v182 == 26995 && v182[2] == 108)
              {
                if (v182 != v180 && v182 - v178 != -1) {
                  goto LABEL_306;
                }
                break;
              }
              long long v181 = v182 + 1;
              uint64_t v179 = v180 - (unsigned char *)v181;
            }
            while (v180 - (unsigned char *)v181 >= 3);
          }
          float v184 = *(float *)(a1 + 372);
          if (v184 == 0.0)
          {
LABEL_306:
            uint64_t v6 = v241;
LABEL_307:
            unint64_t v168 = (void **)(a1 + 320);
          }
          else
          {
            float v185 = *(float *)&v252;
            uint64_t v6 = v241;
            unint64_t v168 = (void **)(a1 + 320);
            if (*(float *)&v252 != 0.0)
            {
              float v186 = (float)(v184 + *(float *)&v252) * v9;
              if ((float)(vabds_f32(v184, *(float *)&v252) / v186) > 0.1)
              {
                uint64_t v187 = *(unsigned int *)(v170 - 180);
                uint64_t v188 = *(unsigned int *)(v177 + 4);
                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                }
                long long v189 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
                {
                  v276.i64[0] = __PAIR64__(v187, 67109888);
                  double v191 = v185;
                  v276.i16[4] = 1024;
                  *(__int32 *)((char *)&v276.i32[2] + 2) = v188;
                  v276.i16[7] = 2048;
                  *(double *)uint64_t v277 = v184;
                  WORD4(v277[0]) = 2048;
                  *(double *)((char *)v277 + 10) = v185;
                  _os_log_impl(&dword_20CD80000, v189, OS_LOG_TYPE_INFO, "PSOLA f0 modification between units: %d,%d (f0 beg/end: %1.2f/%1.2f Hz)", (uint8_t *)&v276, 0x22u);
                }
                else
                {
                  double v191 = v185;
                }
                Diagnostics::log(6, "PSOLA f0 modification between units: %d,%d (f0 beg/end: %1.2f/%1.2f Hz)", v190, v187, v188, v184, *(void *)&v191);
                *(_DWORD *)(a1 + 376) = 1120403456;
                *(float *)(a1 + 380) = (float)(v186 / v184) * 100.0;
                *((float *)&v252 + 2) = (float)(v186 / v185) * 100.0;
                HIDWORD(v252) = 1120403456;
                populate_unit_pitch_modification(a1 + 376, (uint64_t)v229, v228);
                float v9 = 0.5;
                populate_unit_pitch_modification((uint64_t)&v252 + 8, (uint64_t)v255, (int32x2_t **)&v253);
                uint64_t v169 = *(void *)(a1 + 312);
              }
            }
          }
          PsolaStream::process_segment(a1, v169, (uint64_t)v168);
        }
      }
      else
      {
        uint64_t v6 = v241;
        PsolaStream::process_segment(a1, v241, (uint64_t)v249);
      }
      *(void *)(a1 + 312) = v6;
      if (v168 == v249)
      {
        std::vector<BOOL>::operator=(v233, (uint64_t)&v250[1]);
        *std::string::size_type v232 = v252;
        void *v229 = v255[0];
LABEL_356:
        ++*(_DWORD *)(a1 + 440);
        *(_DWORD *)(a1 + 444) -= 373475417 * ((*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
        if (v255[1])
        {
          v255[2] = v255[1];
          operator delete((void *)v255[1]);
        }
        if (v253)
        {
          *(void *)&long long v254 = v253;
          operator delete(v253);
        }
        if (v250[1]) {
          operator delete(v250[1]);
        }
        if (v249[0])
        {
          v249[1] = v249[0];
          operator delete(v249[0]);
        }
        goto LABEL_364;
      }
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v168, (char *)v249[0], (uint64_t)v249[1], ((char *)v249[1] - (char *)v249[0]) >> 2);
      std::vector<BOOL>::operator=(v233, (uint64_t)&v250[1]);
      *std::string::size_type v232 = v252;
      long long v192 = (char *)v253;
      long long v193 = (char *)v254;
      size_t v194 = v254 - (void)v253;
      unint64_t v195 = (uint64_t)(v254 - (void)v253) >> 3;
      uint64_t v196 = *(void *)(a1 + 400);
      int v197 = *(char **)(a1 + 384);
      if (v195 > (v196 - (uint64_t)v197) >> 3)
      {
        if (v197)
        {
          *(void *)(a1 + 392) = v197;
          operator delete(v197);
          uint64_t v196 = 0;
          *char v228 = 0;
          *(void *)(a1 + 392) = 0;
          *(void *)(a1 + 400) = 0;
        }
        if ((v194 & 0x8000000000000000) != 0) {
          goto LABEL_388;
        }
        uint64_t v198 = v196 >> 2;
        if (v196 >> 2 <= v195) {
          uint64_t v198 = v195;
        }
        unint64_t v199 = (unint64_t)v196 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v198;
        if (v199 >> 61) {
LABEL_388:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v200 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v199);
        int v197 = v200;
        *(void *)(a1 + 38std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v200;
        *(void *)(a1 + 392) = v200;
        *(void *)(a1 + 400) = &v200[8 * v201];
        if (v193 != v192) {
          memmove(v200, v192, v194);
        }
LABEL_334:
        *(void *)(a1 + 392) = &v197[v194];
        double v206 = (char *)v255[1];
        *(void *)(a1 + 408) = v255[0];
        char v207 = (char *)v255[2];
        size_t v208 = v255[2] - (void)v206;
        unint64_t v209 = (uint64_t)(v255[2] - (void)v206) >> 3;
        uint64_t v210 = *(void *)(a1 + 432);
        uint64_t v211 = *(char **)(a1 + 416);
        if (v209 > (v210 - (uint64_t)v211) >> 3)
        {
          if (v211)
          {
            *(void *)(a1 + 42std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v211;
            operator delete(v211);
            uint64_t v210 = 0;
            *(void *)(a1 + 416) = 0;
            *(void *)(a1 + 42std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
            *(void *)(a1 + 432) = 0;
          }
          if ((v208 & 0x8000000000000000) != 0) {
            goto LABEL_387;
          }
          uint64_t v212 = v210 >> 2;
          if (v210 >> 2 <= v209) {
            uint64_t v212 = v209;
          }
          unint64_t v213 = (unint64_t)v210 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v212;
          if (v213 >> 61) {
LABEL_387:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          int v214 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v213);
          uint64_t v211 = v214;
          *(void *)(a1 + 416) = v214;
          *(void *)(a1 + 42std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v214;
          *(void *)(a1 + 432) = &v214[8 * v215];
          if (v207 != v206) {
            memmove(v214, v206, v208);
          }
          goto LABEL_355;
        }
        std::string::size_type v216 = *(unsigned char **)(a1 + 424);
        unint64_t v217 = (v216 - v211) >> 3;
        if (v217 >= v209)
        {
          if ((char *)v255[2] == v206)
          {
LABEL_354:
            uint64_t v6 = v241;
LABEL_355:
            *(void *)(a1 + 42std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = &v211[v208];
            goto LABEL_356;
          }
          std::string::size_type v219 = *(void **)(a1 + 416);
          uint64_t v218 = v206;
        }
        else
        {
          if (v216 != v211)
          {
            memmove(*(void **)(a1 + 416), v206, v216 - v211);
            uint64_t v211 = *(char **)(a1 + 424);
          }
          uint64_t v218 = &v206[8 * v217];
          size_t v208 = v207 - v218;
          if (v207 == v218) {
            goto LABEL_354;
          }
          std::string::size_type v219 = v211;
        }
        memmove(v219, v218, v208);
        goto LABEL_354;
      }
      std::string v202 = *(unsigned char **)(a1 + 392);
      unint64_t v203 = (v202 - v197) >> 3;
      if (v203 >= v195)
      {
        if ((void *)v254 == v253)
        {
LABEL_333:
          uint64_t v6 = v241;
          goto LABEL_334;
        }
        uint64_t v205 = *(void **)(a1 + 384);
        std::string v204 = (char *)v253;
      }
      else
      {
        if (v202 != v197)
        {
          memmove(*(void **)(a1 + 384), v253, v202 - v197);
          int v197 = *(char **)(a1 + 392);
        }
        std::string v204 = &v192[8 * v203];
        size_t v194 = v193 - v204;
        if (v193 == v204) {
          goto LABEL_333;
        }
        uint64_t v205 = v197;
      }
      memmove(v205, v204, v194);
      goto LABEL_333;
    }
    std::string __p = 0;
    unsigned int v267 = 0;
    unsigned int v268 = 0;
    uint64_t v263 = 0;
    v264 = 0;
    v265 = 0;
    int v235 = v23 - v22;
    if ((int)v23 >= (int)v22)
    {
      int v242 = 0;
      unint64_t v22 = (int)v22;
      do
      {
        uint64_t v56 = *(void *)(v10 + 8);
        if (*(unsigned char *)(v56 + 8)) {
          uint64_t v57 = *(unsigned int *)(*(void *)(v56 + 96) + 4 * v22);
        }
        else {
          uint64_t v57 = v22;
        }
        Database::get_unit(v56, v57, (void **)&v273);
        uint64_t v58 = *(int *)(v10 + 96);
        uint64_t v59 = v273;
        uint64_t v60 = v267;
        if (v267 >= v268)
        {
          uint64_t v62 = (char *)__p;
          uint64_t v63 = (v267 - (unsigned char *)__p) >> 2;
          unint64_t v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62) {
            goto LABEL_386;
          }
          uint64_t v65 = v268 - (unsigned char *)__p;
          if ((v268 - (unsigned char *)__p) >> 1 > v64) {
            unint64_t v64 = v65 >> 1;
          }
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v64;
          }
          if (v66)
          {
            uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v268, v66);
            uint64_t v62 = (char *)__p;
            uint64_t v60 = v267;
          }
          else
          {
            uint64_t v67 = 0;
          }
          unint64_t v68 = &v67[4 * v63];
          *(float *)unint64_t v68 = v59[v58];
          unint64_t v61 = v68 + 4;
          while (v60 != v62)
          {
            int v69 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v68 - 1) = v69;
            v68 -= 4;
          }
          std::string __p = v68;
          unsigned int v267 = v61;
          unsigned int v268 = &v67[4 * v66];
          if (v62) {
            operator delete(v62);
          }
        }
        else
        {
          *(float *)unsigned int v267 = v273[v58];
          unint64_t v61 = v60 + 4;
        }
        unsigned int v267 = v61;
        uint64_t v70 = *(int *)(v10 + 92);
        uint64_t v71 = v273;
        unint64_t v72 = v264;
        if (v264 >= v265)
        {
          int v74 = (char *)v263;
          uint64_t v75 = (v264 - (unsigned char *)v263) >> 2;
          unint64_t v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 62) {
LABEL_386:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v77 = v265 - (unsigned char *)v263;
          if ((v265 - (unsigned char *)v263) >> 1 > v76) {
            unint64_t v76 = v77 >> 1;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v76;
          }
          if (v78)
          {
            uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v265, v78);
            int v74 = (char *)v263;
            unint64_t v72 = v264;
          }
          else
          {
            uint64_t v79 = 0;
          }
          uint64_t v80 = &v79[4 * v75];
          *(float *)uint64_t v80 = v71[v70];
          uint64_t v73 = v80 + 4;
          while (v72 != v74)
          {
            int v81 = *((_DWORD *)v72 - 1);
            v72 -= 4;
            *((_DWORD *)v80 - 1) = v81;
            v80 -= 4;
          }
          uint64_t v263 = v80;
          v264 = v73;
          v265 = &v79[4 * v78];
          if (v74) {
            operator delete(v74);
          }
        }
        else
        {
          *(float *)v264 = v273[v70];
          uint64_t v73 = v72 + 4;
        }
        v264 = v73;
        int v242 = (int)(float)((float)v242 + (float)(v273[*(int *)(v10 + 92)] * (float)*(int *)(v10 + 84)));
        ++v22;
      }
      while (v42 != v22);
    }
    else
    {
      int v242 = 0;
    }
    std::vector<int>::value_type __x = 0;
    if (v235 == -1)
    {
      std::vector<int>::value_type v83 = 0;
    }
    else
    {
      uint64_t v82 = 0;
      std::vector<int>::value_type v83 = 0;
      int v84 = 0;
      uint64_t v85 = v270;
      uint64_t v86 = v269;
      do
      {
        unint64_t v87 = v84;
        if (v84 < (unint64_t)((v85 - (unsigned char *)v86) >> 2))
        {
          float v88 = *((float *)v263 + v82);
          int v89 = *(_DWORD *)(v10 + 84);
          while (1)
          {
            int v90 = v86[v87];
            if (v90 == *(_DWORD *)(v10 + 100)) {
              break;
            }
            std::vector<int>::value_type v91 = __x + v90;
            std::vector<int>::value_type __x = v91;
            uint64_t v92 = (char *)v276.i64[1];
            if (v276.i64[1] >= *(void *)&v277[0])
            {
              uint64_t v94 = (char *)v276.i64[0];
              uint64_t v95 = (v276.i64[1] - v276.i64[0]) >> 2;
              unint64_t v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v97 = *(void *)&v277[0] - v276.i64[0];
              if ((*(void *)&v277[0] - v276.i64[0]) >> 1 > v96) {
                unint64_t v96 = v97 >> 1;
              }
              if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v98 = v96;
              }
              if (v98)
              {
                uint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v277, v98);
                uint64_t v92 = (char *)v276.i64[1];
                uint64_t v94 = (char *)v276.i64[0];
                std::vector<int>::value_type v91 = __x;
              }
              else
              {
                uint64_t v99 = 0;
              }
              uint64_t v100 = (std::vector<int>::value_type *)&v99[4 * v95];
              *uint64_t v100 = v91;
              long long v93 = v100 + 1;
              while (v92 != v94)
              {
                std::vector<int>::value_type v101 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *--uint64_t v100 = v101;
              }
              v276.i64[0] = (uint64_t)v100;
              v276.i64[1] = (uint64_t)v93;
              *(void *)&v277[0] = &v99[4 * v98];
              if (v94) {
                operator delete(v94);
              }
            }
            else
            {
              *(_DWORD *)v276.i64[1] = v91;
              long long v93 = v92 + 4;
            }
            v276.i64[1] = (uint64_t)v93;
            LOBYTE(v259) = (*(void *)(*((void *)&v271 + 1) + ((v87 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v87) & 1;
            std::vector<BOOL>::push_back((uint64_t)v277 + 8, &v259);
            ++v87;
            uint64_t v85 = v270;
            uint64_t v86 = v269;
            if (v87 >= ((char *)v270 - (unsigned char *)v269) >> 2)
            {
              int v84 = v87;
              goto LABEL_129;
            }
          }
          v83 += (int)(float)(v88 * (float)v89);
          std::vector<int>::value_type __x = v83;
          int v84 = v87 + 1;
        }
LABEL_129:
        ++v82;
      }
      while (v82 != v231);
    }
    unint64_t v102 = *(Database **)(v10 + 8);
    std::string::basic_string[abi:ne180100]<0>(v257, "name");
    uint64_t v103 = Database::feat_val(v102, (long long *)v257, (int)*(float *)__p);
    uint64_t v6 = v241;
    std::string::basic_string[abi:ne180100]<0>(&v259, v103);
    if (v258 < 0) {
      operator delete(v257[0]);
    }
    if (v276.i64[0] == v276.i64[1])
    {
LABEL_147:
      long long v109 = *(Database **)(v10 + 8);
      std::string::basic_string[abi:ne180100]<0>(v257, "name");
      int v110 = Database::feat_val(v109, (long long *)v257, (int)*((float *)__p + v235));
      MEMORY[0x210558E70](&v259, v110);
      if (v258 < 0) {
        operator delete(v257[0]);
      }
      if (v276.i64[0] == v276.i64[1]) {
        goto LABEL_157;
      }
      if (v261 < 0)
      {
        if (v260 != 4) {
          goto LABEL_157;
        }
        uint64_t v111 = v259;
        if (*(_DWORD *)v259 == 829188467)
        {
LABEL_179:
          int v129 = *(_DWORD *)(v276.i64[1] - 4);
          for (std::vector<int>::value_type i = *(_DWORD *)(v10 + 88); ; std::vector<int>::value_type i = __x)
          {
            std::vector<int>::value_type v131 = i + v129;
            std::vector<int>::value_type __x = i + v129;
            if (i + v129 >= v83) {
              break;
            }
            uint64_t v132 = (char *)v276.i64[1];
            if (v276.i64[1] >= *(void *)&v277[0])
            {
              uint64_t v134 = (char *)v276.i64[0];
              uint64_t v135 = (v276.i64[1] - v276.i64[0]) >> 2;
              unint64_t v136 = v135 + 1;
              if ((unint64_t)(v135 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v137 = *(void *)&v277[0] - v276.i64[0];
              if ((*(void *)&v277[0] - v276.i64[0]) >> 1 > v136) {
                unint64_t v136 = v137 >> 1;
              }
              if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v138 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v138 = v136;
              }
              if (v138)
              {
                int v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v277, v138);
                uint64_t v132 = (char *)v276.i64[1];
                uint64_t v134 = (char *)v276.i64[0];
                std::vector<int>::value_type v131 = __x;
              }
              else
              {
                int v139 = 0;
              }
              uint64_t v140 = (std::vector<int>::value_type *)&v139[4 * v135];
              *uint64_t v140 = v131;
              uint64_t v133 = v140 + 1;
              while (v132 != v134)
              {
                std::vector<int>::value_type v141 = *((_DWORD *)v132 - 1);
                v132 -= 4;
                *--uint64_t v140 = v141;
              }
              v276.i64[0] = (uint64_t)v140;
              v276.i64[1] = (uint64_t)v133;
              *(void *)&v277[0] = &v139[4 * v138];
              if (v134) {
                operator delete(v134);
              }
            }
            else
            {
              *(_DWORD *)v276.i64[1] = v131;
              uint64_t v133 = v132 + 4;
            }
            v276.i64[1] = (uint64_t)v133;
            LOBYTE(v257[0]) = 0;
            std::vector<BOOL>::push_back((uint64_t)v277 + 8, v257);
            int v129 = *(_DWORD *)(v10 + 88);
          }
          goto LABEL_157;
        }
      }
      else
      {
        if (v261 != 4) {
          goto LABEL_157;
        }
        if (v259 == 829188467) {
          goto LABEL_179;
        }
        uint64_t v111 = &v259;
      }
      if (*v111 != 845965683)
      {
LABEL_157:
        if (*(_DWORD *)(v10 + 4) >= 3u)
        {
          unint64_t v112 = *(unsigned int *)(v10 + 108);
          if ((int)v112 >= 1)
          {
            uint64_t v113 = v276.i64[0];
            unint64_t v114 = (v276.i64[1] - v276.i64[0]) >> 2;
            if (v114 >= v112 && v114 - v112 > v112)
            {
              unint64_t v115 = v276.i64[0] + 4 * v112;
              LODWORD(v116) = *(_DWORD *)(v10 + 108);
              do
              {
                int v117 = (2 * v116) | 1;
                int v118 = 0;
                if ((v116 & 0x80000000) == 0)
                {
                  uint64_t v119 = (int *)(v115 - 4 * (int)v116);
                  int v120 = v117;
                  do
                  {
                    int v121 = *v119++;
                    v118 += v121;
                    --v120;
                  }
                  while (v120);
                }
                *(_DWORD *)(v113 + 4 * v112++) = v118 / v117;
                uint64_t v116 = *(int *)(v10 + 108);
                v115 += 4;
              }
              while (v114 - v116 > v112);
            }
          }
        }
        uint64_t v122 = (_DWORD *)v276.i64[0];
        if (v276.i64[1] != v276.i64[0])
        {
          int v123 = *(_DWORD *)(v10 + 84);
          int v124 = v123 * v230;
          int v125 = v236 - v123 * v230;
          unint64_t v126 = (v276.i64[1] - v276.i64[0]) >> 2;
          if (v125 < 1)
          {
            if (v236 != v124)
            {
              if (v126 <= 1) {
                uint64_t v128 = 1;
              }
              else {
                uint64_t v128 = (v276.i64[1] - v276.i64[0]) >> 2;
              }
              do
              {
                *v122++ -= v125;
                --v128;
              }
              while (v128);
            }
          }
          else
          {
            unint64_t v127 = 0;
            if (v126 <= 1) {
              unint64_t v126 = 1;
            }
            while (*(_DWORD *)(v276.i64[0] + 4 * v127) < v125)
            {
              if (v126 == ++v127) {
                goto LABEL_203;
              }
            }
            if (v127)
            {
              uint64_t v142 = (const void *)(v276.i64[0] + 4 * v127);
              uint64_t v143 = v276.i64[1] - (void)v142;
              if ((const void *)v276.i64[1] != v142) {
                memmove((void *)v276.i64[0], v142, v276.i64[1] - (void)v142);
              }
              v276.i64[1] = (uint64_t)v122 + v143;
            }
            std::vector<BOOL>::erase((uint64_t)v257, (uint64_t *)v277 + 1, *((uint64_t *)&v277[0] + 1), 0, (unint64_t *)(*((void *)&v277[0] + 1) + 8 * (v127 >> 6)), v127 & 0x3F);
          }
LABEL_203:
          int v144 = v242 - v41 + 10 * v123;
          int v145 = v236;
          if (v144 >= 1)
          {
            uint64_t v146 = 0;
            unint64_t v147 = (v276.i64[1] - v276.i64[0]) >> 2;
            while (*(_DWORD *)(v276.i64[0] + 4 * v146) < v144)
            {
              if (v147 == ++v146)
              {
                uint64_t v146 = (v276.i64[1] - v276.i64[0]) >> 2;
                break;
              }
            }
            if (v147 > (int)v146)
            {
              if (v276.i64[0] + 4 * (int)v146 != v276.i64[1]) {
                v276.i64[1] = v276.i64[0] + 4 * (int)v146;
              }
              std::vector<BOOL>::erase((uint64_t)v257, (uint64_t *)v277 + 1, *((void *)&v277[0] + 1) + 8 * ((unint64_t)(int)v146 >> 6), v146 & 0x3F, (unint64_t *)(*((void *)&v277[0] + 1) + 8 * (*(void *)&v277[1] >> 6)), v277[1] & 0x3F);
              int v145 = v236;
            }
          }
          BOOL v176 = v145 == v124;
          uint64_t v6 = v241;
          if (!v176)
          {
            unint64_t v148 = (_DWORD *)v276.i64[0];
            if (v276.i64[1] != v276.i64[0])
            {
              unint64_t v149 = (v276.i64[1] - v276.i64[0]) >> 2;
              if (v149 <= 1) {
                unint64_t v149 = 1;
              }
              do
              {
                *v148++ -= v125;
                --v149;
              }
              while (v149);
            }
          }
        }
        int64x2_t v20 = v276;
        int64x2_t v276 = 0uLL;
        long long v237 = v277[0];
        memset(v277, 0, sizeof(v277));
        long long v234 = v277[1];
        int64x2_t v243 = v20;
        if (v261 < 0)
        {
          operator delete(v259);
          int64x2_t v20 = v243;
        }
        if (v263)
        {
          v264 = (char *)v263;
          operator delete(v263);
          int64x2_t v20 = v243;
        }
        if (__p)
        {
          unsigned int v267 = (char *)__p;
          operator delete(__p);
          int64x2_t v20 = v243;
        }
        if (*((void *)&v271 + 1))
        {
          operator delete(*((void **)&v271 + 1));
          int64x2_t v20 = v243;
        }
        uint64_t v54 = v269;
        goto LABEL_226;
      }
      goto LABEL_179;
    }
    if (v261 < 0)
    {
      if (v260 != 4) {
        goto LABEL_147;
      }
      int v104 = v259;
      if (*(_DWORD *)v259 != 829188467)
      {
LABEL_143:
        if (*v104 != 845965683) {
          goto LABEL_147;
        }
      }
    }
    else
    {
      if (v261 != 4) {
        goto LABEL_147;
      }
      if (v259 != 829188467)
      {
        int v104 = &v259;
        goto LABEL_143;
      }
    }
    std::vector<int>::value_type __x = *(_DWORD *)v276.i64[0] - *(_DWORD *)(v10 + 88);
    if (__x >= 1)
    {
      do
      {
        v106.__i_ = (std::__wrap_iter<const int *>::iterator_type)v276.i64[0];
        std::vector<int>::insert((std::vector<int> *)&v276, v106, &__x);
        char v256 = 0;
        std::vector<BOOL>::insert((uint64_t)v277 + 8, *((unint64_t *)&v277[0] + 1), 0, &v256, (uint64_t)v257);
        int v107 = *(_DWORD *)(v10 + 88);
        BOOL v108 = __OFSUB__(__x, v107);
        __x -= v107;
      }
      while (!((__x < 0) ^ v108 | (__x == 0)));
    }
    goto LABEL_147;
  }
LABEL_365:
  if (*(void *)(a1 + 456) == *(void *)(a1 + 448) && *(int *)(a1 + 440) >= 1) {
    PsolaStream::process_segment(a1, *(void *)(a1 + 312), a1 + 320);
  }
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 312) = 0;
  unint64_t v220 = *(void **)(a1 + 320);
  if (v220)
  {
    *(void *)(a1 + 328) = v220;
    operator delete(v220);
  }
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  unint64_t v221 = *(void **)(a1 + 344);
  if (v221) {
    operator delete(v221);
  }
  *(void *)(a1 + 376) = 0;
  long long v222 = 0uLL;
  *(_OWORD *)(a1 + 34std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  std::string v223 = *(void **)(a1 + 384);
  if (v223)
  {
    *(void *)(a1 + 392) = v223;
    operator delete(v223);
    long long v222 = 0uLL;
  }
  *(_OWORD *)(a1 + 38std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v222;
  *(_OWORD *)(a1 + 400) = v222;
  std::string::size_type v224 = *(void **)(a1 + 416);
  if (v224)
  {
    *(void *)(a1 + 42std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v224;
    operator delete(v224);
  }
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 42std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(a1 + 432) = 0;
  float v225 = (std::__shared_weak_count *)a2[1];
  uint64_t v247 = *a2;
  std::string::size_type v248 = v225;
  if (v225) {
    atomic_fetch_add_explicit(&v225->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v247);
  if (v248) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v248);
  }
  if (v227) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v227);
  }
}

void sub_20D366B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(a1);
}

void *std::vector<Unit>::__init_with_size[abi:ne180100]<Unit*,Unit*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<Unit>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Unit>,Unit*,Unit*,Unit*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20D366CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<Unit>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void PsolaStream::process_segment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16) - v6;
  if (v7 == 184) {
    uint64_t v8 = *(_DWORD *)(v6 + 4) >> 31;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(char **)a3;
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v11 = v10 - *(void *)a3;
  if (v10 != *(void *)a3)
  {
    uint64_t v203 = a2;
    uint64_t v13 = *(void *)(a3 + 64);
    uint64_t v12 = *(void *)(a3 + 72);
    uint64_t v15 = *(void *)(a1 + 448);
    uint64_t v14 = *(void *)(a1 + 456);
    uint64_t v215 = 0;
    long long v213 = 0u;
    *(_OWORD *)int v214 = 0u;
    *(_OWORD *)uint64_t v211 = 0u;
    *(_OWORD *)uint64_t v212 = 0u;
    *(_OWORD *)__src = 0u;
    long long v210 = 0u;
    long long v207 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)uint64_t v205 = 0u;
    *(_OWORD *)double v206 = 0u;
    if (v205 != (void **)a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v205, v9, v10, v11 >> 2);
    }
    std::vector<BOOL>::operator=(&v206[1], a3 + 24);
    uint64_t v16 = *(void *)(v203 + 8);
    if (*(void *)(v203 + 16) != v16)
    {
      unint64_t v17 = 0;
      uint64_t v202 = (v12 - v13) >> 3;
      uint64_t v201 = v14;
      do
      {
        uint64_t v18 = v16 + 184 * v17;
        long long v19 = *(int **)(v18 + 160);
        int64x2_t v20 = *(int **)(v18 + 168);
        while (v19 != v20)
        {
          int v21 = *v19;
          if (*v19 == 6)
          {
            *(float *)(a1 + 30std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (float)v19[1];
          }
          else if (v21 == 5)
          {
            *(float *)(a1 + 296) = (float)v19[1];
          }
          else if (v21 == 4)
          {
            *(float *)(a1 + 300) = (float)v19[1];
          }
          v19 += 14;
        }
        unint64_t v22 = (float *)(*(void *)(a3 + 64) + 8 * v17);
        if (v202 != 0xD37A6F4DE9BD37A7 * (v7 >> 3)) {
          unint64_t v22 = (float *)&PsolaStream::process_segment(AudioSegmentation &,PsolaContext &)::NO_PITCH_MODIFICATION;
        }
        if (v8)
        {
          float v23 = *(float *)(*(void *)(a3 + 104) - 4) + *(float *)(a3 + 92);
          int v24 = 0;
        }
        else
        {
          uint64_t v25 = *(void *)(a3 + 96) + 8 * v17;
          int v24 = *(_DWORD *)v25;
          float v23 = *(float *)(v25 + 4);
        }
        float v26 = *(float *)(a1 + 300);
        float v28 = *v22;
        float v27 = v22[1];
        if (v26 != 100.0 || v28 != 100.0 || v27 != 100.0)
        {
          float v31 = v26 / 100.0;
          float v32 = v31 * (float)(v28 / 100.0);
          float v33 = v31 * (float)(v27 / 100.0);
          uint64_t v34 = (char *)__p[1];
          if (__p[1] >= __src[0])
          {
            uint64_t v36 = (char *)__p[0];
            int64_t v37 = ((char *)__p[1] - (char *)__p[0]) >> 4;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 60) {
              goto LABEL_265;
            }
            int64_t v39 = (char *)__src[0] - (char *)__p[0];
            if (((char *)__src[0] - (char *)__p[0]) >> 3 > v38) {
              unint64_t v38 = v39 >> 3;
            }
            _CF = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0;
            unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF) {
              unint64_t v41 = v38;
            }
            if (v41)
            {
              unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v41);
              uint64_t v34 = (char *)__p[1];
              uint64_t v36 = (char *)__p[0];
            }
            else
            {
              uint64_t v42 = 0;
            }
            unint64_t v43 = v41 + 16 * v37;
            *(float *)unint64_t v43 = v32;
            *(float *)(v43 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v33;
            *(_DWORD *)(v43 + 8) = v24;
            *(float *)(v43 + 12) = v23;
            uint64_t v44 = (char *)v43;
            if (v34 != v36)
            {
              do
              {
                *((_OWORD *)v44 - 1) = *((_OWORD *)v34 - 1);
                v44 -= 16;
                v34 -= 16;
              }
              while (v34 != v36);
              uint64_t v36 = (char *)__p[0];
            }
            unint64_t v35 = (void *)(v43 + 16);
            __p[0] = v44;
            __p[1] = (void *)(v43 + 16);
            __src[0] = (void *)(v41 + 16 * v42);
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *(float *)__p[1] = v32;
            *((float *)v34 + 1) = v33;
            unint64_t v35 = v34 + 16;
            *((_DWORD *)v34 + 2) = v24;
            *((float *)v34 + 3) = v23;
          }
          __p[1] = v35;
        }
        if (v14 == v15)
        {
          float v45 = *(float *)(a1 + 296);
          if (v45 != 100.0)
          {
            uint64_t v46 = v213;
            float v47 = 100.0 / v45;
            if ((unint64_t)v213 >= *((void *)&v213 + 1))
            {
              int v49 = v212[1];
              uint64_t v50 = (uint64_t)(v213 - (unint64_t)v212[1]) >> 4;
              unint64_t v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 60) {
                goto LABEL_265;
              }
              int64_t v52 = *((void *)&v213 + 1) - (unint64_t)v212[1];
              if ((uint64_t)(*((void *)&v213 + 1) - (unint64_t)v212[1]) >> 3 > v51) {
                unint64_t v51 = v52 >> 3;
              }
              _CF = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0;
              unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
              if (!_CF) {
                unint64_t v53 = v51;
              }
              if (v53)
              {
                unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v53);
                uint64_t v46 = v213;
                int v49 = v212[1];
              }
              else
              {
                uint64_t v54 = 0;
              }
              long long v55 = (float *)(v53 + 16 * v50);
              *long long v55 = v47;
              v55[1] = v47;
              *((_DWORD *)v55 + 2) = v24;
              v55[3] = v23;
              uint64_t v56 = v55;
              if ((void *)v46 != v49)
              {
                do
                {
                  *((_OWORD *)v56 - 1) = *(_OWORD *)(v46 - 16);
                  v56 -= 4;
                  v46 -= 16;
                }
                while ((void *)v46 != v49);
                int v49 = v212[1];
              }
              uint64_t v48 = (char *)(v55 + 4);
              v212[1] = v56;
              *(void *)&long long v213 = v55 + 4;
              *((void *)&v213 + 1) = v53 + 16 * v54;
              if (v49) {
                operator delete(v49);
              }
            }
            else
            {
              *(float *)long long v213 = v47;
              *(float *)(v46 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v47;
              uint64_t v48 = (char *)(v46 + 16);
              *(_DWORD *)(v46 + 8) = v24;
              *(float *)(v46 + 12) = v23;
            }
            *(void *)&long long v213 = v48;
          }
        }
        float v57 = *(float *)(a1 + 304);
        if (v57 != 80.0)
        {
          uint64_t v58 = (char *)v214[1];
          float v59 = v57 / 80.0;
          if (v214[1] >= v215)
          {
            unint64_t v61 = (char *)v214[0];
            int64_t v62 = ((char *)v214[1] - (char *)v214[0]) >> 4;
            unint64_t v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 60) {
LABEL_265:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v64 = v215 - (char *)v214[0];
            if ((v215 - (char *)v214[0]) >> 3 > v63) {
              unint64_t v63 = v64 >> 3;
            }
            _CF = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0;
            unint64_t v65 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF) {
              unint64_t v65 = v63;
            }
            if (v65)
            {
              unint64_t v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v65);
              uint64_t v58 = (char *)v214[1];
              unint64_t v61 = (char *)v214[0];
            }
            else
            {
              uint64_t v66 = 0;
            }
            unint64_t v67 = v65 + 16 * v62;
            *(float *)unint64_t v67 = v59;
            *(float *)(v67 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v59;
            *(_DWORD *)(v67 + 8) = v24;
            *(float *)(v67 + 12) = v23;
            unint64_t v68 = (char *)v67;
            if (v58 != v61)
            {
              do
              {
                *((_OWORD *)v68 - 1) = *((_OWORD *)v58 - 1);
                v68 -= 16;
                v58 -= 16;
              }
              while (v58 != v61);
              unint64_t v61 = (char *)v214[0];
            }
            uint64_t v60 = (void *)(v67 + 16);
            v214[0] = v68;
            v214[1] = (void *)(v67 + 16);
            uint64_t v215 = (char *)(v65 + 16 * v66);
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *(float *)v214[1] = v59;
            *((float *)v58 + 1) = v59;
            uint64_t v60 = v58 + 16;
            *((_DWORD *)v58 + 2) = v24;
            *((float *)v58 + 3) = v23;
          }
          v214[1] = v60;
        }
        if (v14 != v15)
        {
          uint64_t v69 = v8;
          uint64_t v70 = v15;
          unint64_t v71 = v17 + *(int *)(a1 + 444);
          unint64_t v72 = v71 - 1;
          if (!v71) {
            unint64_t v72 = 0;
          }
          uint64_t v73 = *(void *)(a1 + 448);
          if (v71 + 2 == 0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 456) - v73) >> 5)) {
            unint64_t v74 = v17 + *(int *)(a1 + 444);
          }
          else {
            unint64_t v74 = v71 + 1;
          }
          float v75 = expf(*(float *)(v73 + 608 * v72 + 472));
          uint64_t v76 = v73 + 608 * v71;
          float v77 = (float)(v75 + expf(*(float *)(v76 + 456))) * 0.5;
          float v78 = expf(*(float *)(v76 + 472));
          float v79 = (float)(v78 + expf(*(float *)(v73 + 608 * v74 + 456))) * 0.5;
          uint64_t v80 = v210;
          if ((unint64_t)v210 >= *((void *)&v210 + 1))
          {
            uint64_t v82 = __src[1];
            uint64_t v83 = (uint64_t)(v210 - (unint64_t)__src[1]) >> 4;
            unint64_t v84 = v83 + 1;
            if ((unint64_t)(v83 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            int64_t v85 = *((void *)&v210 + 1) - (unint64_t)__src[1];
            if ((uint64_t)(*((void *)&v210 + 1) - (unint64_t)__src[1]) >> 3 > v84) {
              unint64_t v84 = v85 >> 3;
            }
            _CF = (unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0;
            unint64_t v86 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF) {
              unint64_t v86 = v84;
            }
            if (v86)
            {
              unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v86);
              uint64_t v80 = v210;
              uint64_t v82 = __src[1];
            }
            else
            {
              uint64_t v87 = 0;
            }
            float v88 = (float *)(v86 + 16 * v83);
            *float v88 = v77;
            v88[1] = v79;
            *((_DWORD *)v88 + 2) = v24;
            v88[3] = v23;
            int v89 = v88;
            if ((void *)v80 != v82)
            {
              do
              {
                *((_OWORD *)v89 - 1) = *(_OWORD *)(v80 - 16);
                v89 -= 4;
                v80 -= 16;
              }
              while ((void *)v80 != v82);
              uint64_t v82 = __src[1];
            }
            int v81 = (char *)(v88 + 4);
            __src[1] = v89;
            *(void *)&long long v210 = v88 + 4;
            *((void *)&v210 + 1) = v86 + 16 * v87;
            if (v82) {
              operator delete(v82);
            }
          }
          else
          {
            *(float *)long long v210 = v77;
            *(float *)(v80 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v79;
            int v81 = (char *)(v80 + 16);
            *(_DWORD *)(v80 + 8) = v24;
            *(float *)(v80 + 12) = v23;
          }
          *(void *)&long long v210 = v81;
          uint64_t v90 = *(void *)(v203 + 8);
          if (v69) {
            float v91 = *(float *)(v90 + 184 * v17 + 152)
          }
                + (float)((float)(*(float *)(a3 + 88) + *(float *)(a3 + 92)) * 1000.0);
          else {
            float v91 = *(float *)(v90 + 184 * v17 + 152);
          }
          uint64_t v92 = *(void *)(a1 + 448);
          float v93 = *(float *)(v92 + 608 * v71 + 480);
          float v94 = expf(v93) / v91;
          if (v69)
          {
            uint64_t v14 = v201;
            uint64_t v15 = v70;
          }
          else
          {
            uint64_t v95 = *(int *)(a1 + 444);
            if (v93 == 0.0
              || v95 - 0x2C8590B21642C859 * ((*(void *)(v203 + 16) - v90) >> 3) == 0x86BCA1AF286BCA1BLL
                                                                                     * ((*(void *)(a1 + 456) - v92) >> 5)
              || v95 == 0)
            {
              float v94 = 1.0;
            }
            uint64_t v14 = v201;
            uint64_t v15 = v70;
          }
          uint64_t v98 = v213;
          uint64_t v8 = v69;
          if ((unint64_t)v213 >= *((void *)&v213 + 1))
          {
            uint64_t v100 = v212[1];
            uint64_t v101 = (uint64_t)(v213 - (unint64_t)v212[1]) >> 4;
            unint64_t v102 = v101 + 1;
            if ((unint64_t)(v101 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            int64_t v103 = *((void *)&v213 + 1) - (unint64_t)v212[1];
            if ((uint64_t)(*((void *)&v213 + 1) - (unint64_t)v212[1]) >> 3 > v102) {
              unint64_t v102 = v103 >> 3;
            }
            _CF = (unint64_t)v103 >= 0x7FFFFFFFFFFFFFF0;
            unint64_t v104 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF) {
              unint64_t v104 = v102;
            }
            if (v104)
            {
              unint64_t v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v104);
              uint64_t v98 = v213;
              uint64_t v100 = v212[1];
            }
            else
            {
              uint64_t v105 = 0;
            }
            std::vector<int>::const_iterator v106 = (float *)(v104 + 16 * v101);
            *std::vector<int>::const_iterator v106 = v94;
            v106[1] = v94;
            *((_DWORD *)v106 + 2) = v24;
            v106[3] = v23;
            int v107 = v106;
            if ((void *)v98 != v100)
            {
              do
              {
                *((_OWORD *)v107 - 1) = *(_OWORD *)(v98 - 16);
                v107 -= 4;
                v98 -= 16;
              }
              while ((void *)v98 != v100);
              uint64_t v100 = v212[1];
            }
            uint64_t v99 = (char *)(v106 + 4);
            v212[1] = v107;
            *(void *)&long long v213 = v106 + 4;
            *((void *)&v213 + 1) = v104 + 16 * v105;
            if (v100) {
              operator delete(v100);
            }
          }
          else
          {
            *(float *)long long v213 = v94;
            *(float *)(v98 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v94;
            uint64_t v99 = (char *)(v98 + 16);
            *(_DWORD *)(v98 + 8) = v24;
            *(float *)(v98 + 12) = v23;
          }
          *(void *)&long long v213 = v99;
        }
        ++v17;
        uint64_t v16 = *(void *)(v203 + 8);
      }
      while (v17 < 0xD37A6F4DE9BD37A7 * ((*(void *)(v203 + 16) - v16) >> 3));
    }
    if (__p[1] == __p[0])
    {
      if ((void *)v210 == __src[1] && (void *)v213 == v212[1])
      {
        BOOL v115 = v214[1] != v214[0];
        if (v8) {
          goto LABEL_203;
        }
      }
      else
      {
        BOOL v115 = 1;
        if (v8) {
          goto LABEL_203;
        }
      }
    }
    else
    {
      if (v8) {
        goto LABEL_204;
      }
      *(_DWORD *)long long buf = *(_DWORD *)__p[0];
      *(_DWORD *)&uint8_t buf[4] = *(_DWORD *)buf;
      *(_DWORD *)&uint8_t buf[8] = 0;
      *(_DWORD *)&unsigned char buf[12] = *(_DWORD *)(a3 + 88);
      std::vector<PsolaModificationSpec>::insert((uint64_t)__p, (char *)__p[0], buf);
      BOOL v108 = (char *)__p[1];
      int v109 = *((_DWORD *)__p[1] - 3);
      float v110 = *(float *)(*(void *)(a3 + 104) - 4);
      float v111 = v110 + *(float *)(a3 + 92);
      if (__p[1] >= __src[0])
      {
        uint64_t v116 = (char *)__p[0];
        int64_t v117 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        unint64_t v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        int64_t v119 = (char *)__src[0] - (char *)__p[0];
        if (((char *)__src[0] - (char *)__p[0]) >> 3 > v118) {
          unint64_t v118 = v119 >> 3;
        }
        _CF = (unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0;
        unint64_t v120 = 0xFFFFFFFFFFFFFFFLL;
        if (!_CF) {
          unint64_t v120 = v118;
        }
        if (v120)
        {
          unint64_t v120 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v120);
          BOOL v108 = (char *)__p[1];
          uint64_t v116 = (char *)__p[0];
        }
        else
        {
          uint64_t v121 = 0;
        }
        uint64_t v122 = (float *)(v120 + 16 * v117);
        *(_DWORD *)uint64_t v122 = v109;
        *((_DWORD *)v122 + 1) = v109;
        int v123 = (void *)(v120 + 16 * v121);
        v122[2] = v110;
        v122[3] = v111;
        unint64_t v112 = v122 + 4;
        if (v108 != v116)
        {
          do
          {
            *((_OWORD *)v122 - 1) = *((_OWORD *)v108 - 1);
            v122 -= 4;
            v108 -= 16;
          }
          while (v108 != v116);
          uint64_t v116 = (char *)__p[0];
        }
        __p[0] = v122;
        __p[1] = v112;
        __src[0] = v123;
        if (v116) {
          operator delete(v116);
        }
      }
      else
      {
        *(_DWORD *)__p[1] = v109;
        *((_DWORD *)v108 + 1) = v109;
        unint64_t v112 = v108 + 16;
        *((float *)v108 + 2) = v110;
        *((float *)v108 + 3) = v111;
      }
      __p[1] = v112;
      BOOL v115 = 1;
    }
    if ((void *)v210 != __src[1])
    {
      *(_DWORD *)long long buf = *(_DWORD *)__src[1];
      *(_DWORD *)&uint8_t buf[4] = *(_DWORD *)buf;
      *(_DWORD *)&uint8_t buf[8] = 0;
      *(_DWORD *)&unsigned char buf[12] = *(_DWORD *)(a3 + 88);
      std::vector<PsolaModificationSpec>::insert((uint64_t)&__src[1], (char *)__src[1], buf);
      uint64_t v124 = v210;
      int v125 = *(_DWORD *)(v210 - 12);
      float v126 = *(float *)(*(void *)(a3 + 104) - 4);
      float v127 = v126 + *(float *)(a3 + 92);
      if ((unint64_t)v210 >= *((void *)&v210 + 1))
      {
        uint64_t v128 = __src[1];
        uint64_t v129 = (uint64_t)(v210 - (unint64_t)__src[1]) >> 4;
        unint64_t v130 = v129 + 1;
        if ((unint64_t)(v129 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        int64_t v131 = *((void *)&v210 + 1) - (unint64_t)__src[1];
        if ((uint64_t)(*((void *)&v210 + 1) - (unint64_t)__src[1]) >> 3 > v130) {
          unint64_t v130 = v131 >> 3;
        }
        _CF = (unint64_t)v131 >= 0x7FFFFFFFFFFFFFF0;
        unint64_t v132 = 0xFFFFFFFFFFFFFFFLL;
        if (!_CF) {
          unint64_t v132 = v130;
        }
        if (v132)
        {
          unint64_t v132 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v132);
          uint64_t v124 = v210;
          uint64_t v128 = __src[1];
        }
        else
        {
          uint64_t v133 = 0;
        }
        uint64_t v134 = (char *)(v132 + 16 * v129);
        *(_DWORD *)uint64_t v134 = v125;
        *((_DWORD *)v134 + 1) = v125;
        unint64_t v135 = v132 + 16 * v133;
        *((float *)v134 + 2) = v126;
        *((float *)v134 + 3) = v127;
        unint64_t v136 = v134 + 16;
        if ((void *)v124 != v128)
        {
          do
          {
            *((_OWORD *)v134 - 1) = *(_OWORD *)(v124 - 16);
            v134 -= 16;
            v124 -= 16;
          }
          while ((void *)v124 != v128);
          uint64_t v128 = __src[1];
        }
        __src[1] = v134;
        *(void *)&long long v210 = v136;
        *((void *)&v210 + 1) = v135;
        if (v128) {
          operator delete(v128);
        }
        *(void *)&long long v210 = v136;
        if (v8) {
          goto LABEL_203;
        }
      }
      else
      {
        *(_DWORD *)long long v210 = v125;
        *(_DWORD *)(v124 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v125;
        *(float *)(v124 + 8) = v126;
        *(float *)(v124 + 12) = v127;
        *(void *)&long long v210 = v124 + 16;
      }
    }
    if (v214[1] != v214[0])
    {
      *(_DWORD *)long long buf = *(_DWORD *)v214[0];
      *(_DWORD *)&uint8_t buf[4] = *(_DWORD *)buf;
      *(_DWORD *)&uint8_t buf[8] = 0;
      *(_DWORD *)&unsigned char buf[12] = *(_DWORD *)(a3 + 88);
      std::vector<PsolaModificationSpec>::insert((uint64_t)v214, (char *)v214[0], buf);
      uint64_t v137 = (char *)v214[1];
      int v138 = *((_DWORD *)v214[1] - 3);
      float v139 = *(float *)(*(void *)(a3 + 104) - 4);
      float v140 = v139 + *(float *)(a3 + 92);
      if (v214[1] >= v215)
      {
        uint64_t v142 = (char *)v214[0];
        int64_t v143 = ((char *)v214[1] - (char *)v214[0]) >> 4;
        unint64_t v144 = v143 + 1;
        if ((unint64_t)(v143 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v145 = v215 - (char *)v214[0];
        if ((v215 - (char *)v214[0]) >> 3 > v144) {
          unint64_t v144 = v145 >> 3;
        }
        _CF = (unint64_t)v145 >= 0x7FFFFFFFFFFFFFF0;
        unint64_t v146 = 0xFFFFFFFFFFFFFFFLL;
        if (!_CF) {
          unint64_t v146 = v144;
        }
        if (v146)
        {
          unint64_t v146 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v146);
          uint64_t v137 = (char *)v214[1];
          uint64_t v142 = (char *)v214[0];
        }
        else
        {
          uint64_t v147 = 0;
        }
        unint64_t v148 = (float *)(v146 + 16 * v143);
        *(_DWORD *)unint64_t v148 = v138;
        *((_DWORD *)v148 + 1) = v138;
        unint64_t v149 = (char *)(v146 + 16 * v147);
        v148[2] = v139;
        v148[3] = v140;
        std::vector<int>::value_type v141 = v148 + 4;
        if (v137 != v142)
        {
          do
          {
            *((_OWORD *)v148 - 1) = *((_OWORD *)v137 - 1);
            v148 -= 4;
            v137 -= 16;
          }
          while (v137 != v142);
          uint64_t v142 = (char *)v214[0];
        }
        v214[0] = v148;
        v214[1] = v141;
        uint64_t v215 = v149;
        if (v142) {
          operator delete(v142);
        }
      }
      else
      {
        *(_DWORD *)v214[1] = v138;
        *((_DWORD *)v137 + 1) = v138;
        std::vector<int>::value_type v141 = v137 + 16;
        *((float *)v137 + 2) = v139;
        *((float *)v137 + 3) = v140;
      }
      v214[1] = v141;
    }
    if (v14 == v15) {
      char v150 = v8;
    }
    else {
      char v150 = 1;
    }
    if ((v150 & 1) == 0 && (void *)v213 != v212[1])
    {
      *(float *)(v213 - std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(float *)(a3 + 92) + *(float *)(v213 - 4);
      if (!v115) {
        goto LABEL_250;
      }
      goto LABEL_204;
    }
LABEL_203:
    if (!v115)
    {
LABEL_250:
      if (v214[0])
      {
        v214[1] = v214[0];
        operator delete(v214[0]);
      }
      if (v212[1])
      {
        *(void **)&long long v213 = v212[1];
        operator delete(v212[1]);
      }
      if (v211[0])
      {
        v211[1] = v211[0];
        operator delete(v211[0]);
      }
      if (__src[1])
      {
        *(void **)&long long v210 = __src[1];
        operator delete(__src[1]);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v206[1]) {
        operator delete(v206[1]);
      }
      if (v205[0])
      {
        v205[1] = v205[0];
        operator delete(v205[0]);
      }
      return;
    }
LABEL_204:
    unsigned int v151 = (float *)__p[1];
    int64_t v152 = (char *)__p[1] - (char *)__p[0];
    if (__p[1] == __p[0])
    {
      float v153 = *(float *)(*(void *)(a3 + 104) - 4) + *(float *)(a3 + 92);
      if (__p[1] >= __src[0])
      {
        uint64_t v158 = v152 >> 4;
        int64_t v159 = (char *)__src[0] - (char *)__p[0];
        if (((char *)__src[0] - (char *)__p[0]) >> 3 <= (unint64_t)((v152 >> 4) + 1)) {
          uint64_t v160 = v158 + 1;
        }
        else {
          uint64_t v160 = v159 >> 3;
        }
        if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v161 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v161 = v160;
        }
        unint64_t v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v161);
        uint64_t v163 = &v162[16 * v158];
        uint64_t v165 = &v162[16 * v164];
        __asm { FMOV            V0.2S, #1.0 }
        *(void *)uint64_t v163 = _D0;
        *((_DWORD *)v163 + 2) = 0;
        *((float *)v163 + 3) = v153;
        float v157 = v163 + 16;
        long long v167 = (char *)__p[1];
        unint64_t v168 = (char *)__p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            *((_OWORD *)v163 - 1) = *((_OWORD *)v167 - 1);
            v163 -= 16;
            v167 -= 16;
          }
          while (v167 != v168);
          long long v167 = (char *)__p[0];
        }
        __p[0] = v163;
        __p[1] = v157;
        __src[0] = v165;
        if (v167) {
          operator delete(v167);
        }
      }
      else
      {
        __asm { FMOV            V0.2S, #1.0 }
        *(void *)__p[1] = _D0;
        v151[2] = 0.0;
        v151[3] = v153;
        float v157 = v151 + 4;
      }
      __p[1] = v157;
    }
    uint64_t v169 = v213;
    uint64_t v170 = v213 - (unint64_t)v212[1];
    if ((void *)v213 == v212[1])
    {
      float v171 = *(float *)(*(void *)(a3 + 104) - 4) + *(float *)(a3 + 92);
      if ((unint64_t)v213 >= *((void *)&v213 + 1))
      {
        uint64_t v174 = v170 >> 4;
        int64_t v175 = *((void *)&v213 + 1) - (unint64_t)v212[1];
        if ((uint64_t)(*((void *)&v213 + 1) - (unint64_t)v212[1]) >> 3 <= (unint64_t)((v170 >> 4) + 1)) {
          uint64_t v176 = v174 + 1;
        }
        else {
          uint64_t v176 = v175 >> 3;
        }
        if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v177 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v177 = v176;
        }
        uint64_t v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v177);
        uint64_t v179 = &v178[16 * v174];
        long long v181 = &v178[16 * v180];
        __asm { FMOV            V0.2S, #1.0 }
        *(void *)uint64_t v179 = _D0;
        *((_DWORD *)v179 + 2) = 0;
        *((float *)v179 + 3) = v171;
        uint64_t v173 = v179 + 16;
        long long v183 = (char *)v213;
        float v184 = (char *)v212[1];
        if ((void *)v213 != v212[1])
        {
          do
          {
            *((_OWORD *)v179 - 1) = *((_OWORD *)v183 - 1);
            v179 -= 16;
            v183 -= 16;
          }
          while (v183 != v184);
          long long v183 = (char *)v212[1];
        }
        v212[1] = v179;
        *(void *)&long long v213 = v173;
        *((void *)&v213 + 1) = v181;
        if (v183) {
          operator delete(v183);
        }
      }
      else
      {
        __asm { FMOV            V0.2S, #1.0 }
        *(void *)long long v213 = _D0;
        *(_DWORD *)(v169 + 8) = 0;
        *(float *)(v169 + 12) = v171;
        uint64_t v173 = (char *)(v169 + 16);
      }
      *(void *)&long long v213 = v173;
    }
    float v185 = (float *)v214[1];
    int64_t v186 = (char *)v214[1] - (char *)v214[0];
    if (v214[1] == v214[0])
    {
      float v187 = *(float *)(*(void *)(a3 + 104) - 4) + *(float *)(a3 + 92);
      if (v214[1] >= v215)
      {
        uint64_t v190 = v186 >> 4;
        uint64_t v191 = v215 - (char *)v214[0];
        if ((v215 - (char *)v214[0]) >> 3 <= (unint64_t)((v186 >> 4) + 1)) {
          uint64_t v192 = v190 + 1;
        }
        else {
          uint64_t v192 = v191 >> 3;
        }
        if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v193 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v193 = v192;
        }
        size_t v194 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v193);
        unint64_t v195 = &v194[16 * v190];
        int v197 = &v194[16 * v196];
        __asm { FMOV            V0.2S, #1.0 }
        *(void *)unint64_t v195 = _D0;
        *((_DWORD *)v195 + 2) = 0;
        *((float *)v195 + 3) = v187;
        long long v189 = v195 + 16;
        unint64_t v199 = (char *)v214[1];
        uint64_t v200 = (char *)v214[0];
        if (v214[1] != v214[0])
        {
          do
          {
            *((_OWORD *)v195 - 1) = *((_OWORD *)v199 - 1);
            v195 -= 16;
            v199 -= 16;
          }
          while (v199 != v200);
          unint64_t v199 = (char *)v214[0];
        }
        v214[0] = v195;
        v214[1] = v189;
        uint64_t v215 = v197;
        if (v199) {
          operator delete(v199);
        }
      }
      else
      {
        __asm { FMOV            V0.2S, #1.0 }
        *(void *)v214[1] = _D0;
        v185[2] = 0.0;
        v185[3] = v187;
        long long v189 = v185 + 4;
      }
      v214[1] = v189;
    }
    Psola::Psola((Psola *)buf, *(_DWORD *)(a1 + 272));
    Psola::modify((uint64_t)buf, *(_DWORD *)(a1 + 272), (float **)(v203 + 56), (int **)v205);
    Psola::~Psola((void **)buf);
    goto LABEL_250;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v113 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_20CD80000, v113, OS_LOG_TYPE_DEBUG, "Pitchmarks do not exist for the segment, PSOLA modification is not performed.", buf, 2u);
  }
  Diagnostics::log(7, "Pitchmarks do not exist for the segment, PSOLA modification is not performed.", v114);
}

void sub_20D367C88(_Unwind_Exception *a1)
{
}

uint64_t populate_unit_pitch_modification(uint64_t result, uint64_t a2, int32x2_t **a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  uint64_t v3 = *(const float **)(a2 + 8);
  uint64_t v4 = *(const float **)(a2 + 16);
  if (v4 != v3)
  {
    uint64_t v7 = (float32x2_t *)result;
    unint64_t v8 = 0;
    float32x2_t v9 = (float32x2_t)vdup_n_s32(0x3E99999Au);
    __asm { FMOV            V10.2S, #1.0 }
    float32x2_t v14 = (float32x2_t)vdup_n_s32(0x42C80000u);
    float64x2_t v47 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
    v15.i32[1] = 0;
    do
    {
      *(float *)v15.i32 = *(v4 - 1) - *(float *)a2;
      uint64_t v16 = 2 * v8;
      float32x2_t v18 = vld1_dup_f32(v3);
      unint64_t v17 = (float32x2_t *)&v3[v16];
      float32x2_t v19 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*v17, v18));
      _NF = *(float *)v15.i32 < 0.3;
      float32x2_t v21 = vsub_f32(_D10, vdiv_f32(v19, v9));
      double v22 = COERCE_DOUBLE(vbic_s8((int8x8_t)v21, (int8x8_t)vcltz_f32(v21)));
      float32x2_t v23 = vadd_f32(vdiv_f32(vsub_f32(v19, (float32x2_t)vdup_lane_s32(v15, 0)), v9), _D10);
      double v24 = COERCE_DOUBLE(vbic_s8((int8x8_t)v23, (int8x8_t)vcltz_f32(v23)));
      double v25 = COERCE_DOUBLE(vsub_f32(vsub_f32(_D10, *(float32x2_t *)&v22), *(float32x2_t *)&v24));
      double v26 = COERCE_DOUBLE(vdiv_f32(v19, (float32x2_t)vdup_lane_s32(v15, 0)));
      double v27 = COERCE_DOUBLE(vsub_f32(_D10, *(float32x2_t *)&v26));
      if (_NF) {
        double v25 = 0.0;
      }
      if (!_NF)
      {
        double v27 = v22;
        double v26 = v24;
      }
      int32x2_t v28 = (int32x2_t)vmla_f32(vmla_n_f32(vmul_lane_f32(*(float32x2_t *)&v26, *v7, 1), *(float32x2_t *)&v27, COERCE_FLOAT(*v7)), v14, *(float32x2_t *)&v25);
      int v30 = a3[1];
      unint64_t v29 = (unint64_t)a3[2];
      if ((unint64_t)v30 >= v29)
      {
        float v32 = *a3;
        uint64_t v33 = v30 - *a3;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v35 = v29 - (void)v32;
        if (v35 >> 2 > v34) {
          unint64_t v34 = v35 >> 2;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v36);
          float v32 = *a3;
          int v30 = a3[1];
        }
        else
        {
          uint64_t v37 = 0;
        }
        unint64_t v38 = (int32x2_t *)(v36 + 8 * v33);
        *unint64_t v38 = vrev64_s32(v28);
        float v31 = v38 + 1;
        if (v30 != v32)
        {
          do
          {
            int32x2_t v39 = v30[-1];
            --v30;
            v38[-1] = v39;
            --v38;
          }
          while (v30 != v32);
          float v32 = *a3;
        }
        *a3 = v38;
        a3[1] = v31;
        a3[2] = (int32x2_t *)(v36 + 8 * v37);
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        int32x2_t *v30 = vrev64_s32(v28);
        float v31 = v30 + 1;
      }
      a3[1] = v31;
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      int v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
      BOOL v41 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO);
      float64x2_t v43 = vcvtq_f64_f32((float32x2_t)v28);
      if (v41)
      {
        *(_DWORD *)long long buf = 134218240;
        float64x2_t v46 = vdivq_f64(v43, v47);
        float64_t v49 = v46.f64[1];
        float64_t v44 = v46.f64[1];
        __int16 v50 = 2048;
        float64_t v51 = v46.f64[0];
        _os_log_impl(&dword_20CD80000, v40, OS_LOG_TYPE_INFO, "PSOLA f0 modification contour: %.3f %.3f", buf, 0x16u);
        v45.f64[0] = v46.f64[0];
      }
      else
      {
        float64x2_t v45 = vdivq_f64(v43, v47);
        float64_t v44 = v45.f64[1];
      }
      uint64_t result = Diagnostics::log(6, "PSOLA f0 modification contour: %.3f %.3f", v42, *(void *)&v44, *(void *)&v45.f64[0]);
      ++v8;
      uint64_t v3 = *(const float **)(a2 + 8);
      uint64_t v4 = *(const float **)(a2 + 16);
    }
    while (v8 < ((char *)v4 - (char *)v3) >> 3);
  }
  return result;
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        uint64_t v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      uint64_t v6 = *(void **)(a2 + 8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

void PsolaContext::~PsolaContext(PsolaContext *this)
{
  unsigned int v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 3);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v5;
    operator delete(v5);
  }
}

void std::vector<PsolaModificationSpec>::insert(uint64_t a1, char *__src, _OWORD *a3)
{
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v12 = *(char **)a1;
    unint64_t v13 = ((uint64_t)&v6[-*(void *)a1] >> 4) + 1;
    if (v13 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = __src - v12;
    uint64_t v15 = (__src - v12) >> 4;
    uint64_t v16 = v7 - (void)v12;
    if (v16 >> 3 > v13) {
      unint64_t v13 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v13;
    }
    if (v17)
    {
      float32x2_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v17);
    }
    else
    {
      float32x2_t v19 = 0;
      uint64_t v18 = 0;
    }
    int64x2_t v20 = &v19[16 * v15];
    float32x2_t v21 = &v19[16 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v14 >> 3;
        }
        double v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v23);
        int64x2_t v20 = &v24[16 * (v23 >> 2)];
        float32x2_t v21 = &v24[16 * v25];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v22 = v15 + 2;
        if (v15 >= -1) {
          unint64_t v22 = v15 + 1;
        }
        v20 -= 16 * (v22 >> 1);
      }
    }
    *(_OWORD *)int64x2_t v20 = *a3;
    double v26 = *(char **)a1;
    double v27 = v20;
    if (*(char **)a1 != __src)
    {
      int32x2_t v28 = __src;
      unint64_t v29 = v20;
      do
      {
        double v27 = v29 - 16;
        *((_OWORD *)v29 - 1) = *((_OWORD *)v28 - 1);
        v28 -= 16;
        v29 -= 16;
      }
      while (v28 != v26);
    }
    int v30 = *(unsigned char **)(a1 + 8);
    uint64_t v31 = v30 - __src;
    if (v30 != __src) {
      memmove(v20 + 16, __src, v30 - __src);
    }
    float v32 = *(char **)a1;
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = &v20[v31 + 16];
    *(void *)(a1 + 16) = v21;
    if (v32)
    {
      operator delete(v32);
    }
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *a3;
    *(void *)(a1 + 8) = __src + 16;
  }
  else
  {
    unint64_t v8 = __src + 16;
    float32x2_t v9 = v6 - 16;
    uint64_t v10 = *(_OWORD **)(a1 + 8);
    while (v9 < v6)
    {
      long long v11 = *(_OWORD *)v9;
      v9 += 16;
      *v10++ = v11;
    }
    *(void *)(a1 + 8) = v10;
    if (v6 != v8) {
      memmove(&v6[-16 * ((v6 - v8) >> 4)], __src, v6 - v8);
    }
    *(_OWORD *)__src = *a3;
  }
}

void sub_20D3682F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void Psola::~Psola(void **this)
{
  if (*((char *)this + 671) < 0) {
    operator delete(this[81]);
  }
  if (*((char *)this + 647) < 0) {
    operator delete(this[78]);
  }
  if (*((char *)this + 623) < 0) {
    operator delete(this[75]);
  }
  if (*((char *)this + 599) < 0) {
    operator delete(this[72]);
  }
  if (*((char *)this + 575) < 0) {
    operator delete(this[69]);
  }
  unsigned int v2 = this[66];
  if (v2)
  {
    this[67] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[63];
  if (v3)
  {
    this[64] = v3;
    operator delete(v3);
  }
  unint64_t v4 = this[60];
  if (v4)
  {
    this[61] = v4;
    operator delete(v4);
  }
  uint64_t v5 = this[57];
  if (v5)
  {
    this[58] = v5;
    operator delete(v5);
  }
  uint64_t v6 = this[54];
  if (v6)
  {
    this[55] = v6;
    operator delete(v6);
  }
  unint64_t v7 = this[51];
  if (v7)
  {
    this[52] = v7;
    operator delete(v7);
  }
  unint64_t v8 = this[48];
  if (v8)
  {
    this[49] = v8;
    operator delete(v8);
  }
  float32x2_t v9 = this[45];
  if (v9)
  {
    this[46] = v9;
    operator delete(v9);
  }
  uint64_t v10 = this[42];
  if (v10)
  {
    this[43] = v10;
    operator delete(v10);
  }
  long long v11 = this[39];
  if (v11)
  {
    this[40] = v11;
    operator delete(v11);
  }
  uint64_t v12 = this[36];
  if (v12)
  {
    this[37] = v12;
    operator delete(v12);
  }
  unint64_t v13 = this[33];
  if (v13)
  {
    this[34] = v13;
    operator delete(v13);
  }
  uint64_t v14 = this[30];
  if (v14)
  {
    this[31] = v14;
    operator delete(v14);
  }
  uint64_t v15 = this[27];
  if (v15)
  {
    this[28] = v15;
    operator delete(v15);
  }
  uint64_t v16 = this[24];
  if (v16)
  {
    this[25] = v16;
    operator delete(v16);
  }
  unint64_t v17 = this[21];
  if (v17)
  {
    this[22] = v17;
    operator delete(v17);
  }
  uint64_t v18 = this[18];
  if (v18)
  {
    this[19] = v18;
    operator delete(v18);
  }
  float32x2_t v19 = this[15];
  if (v19)
  {
    this[16] = v19;
    operator delete(v19);
  }
  int64x2_t v20 = this[12];
  if (v20)
  {
    this[13] = v20;
    operator delete(v20);
  }
  float32x2_t v21 = this[9];
  if (v21)
  {
    this[10] = v21;
    operator delete(v21);
  }
  unint64_t v22 = this[5];
  if (v22) {
    operator delete(v22);
  }
  unint64_t v23 = this[2];
  if (v23)
  {
    this[3] = v23;
    operator delete(v23);
  }
}

void PsolaInputData::~PsolaInputData(PsolaInputData *this)
{
  unsigned int v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 12);
  if (v4)
  {
    *((void *)this + 13) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 9);
  if (v5)
  {
    *((void *)this + 10) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 7) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 3);
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v8;
    operator delete(v8);
  }
}

char *std::vector<Unit>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Unit>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Unit>,Unit*,Unit*,Unit*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      Unit::Unit((Unit *)(a4 + v7), (const Unit *)(a2 + v7));
      v7 += 184;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void PsolaStream::~PsolaStream(PsolaStream *this)
{
  PsolaStream::~PsolaStream(this);
  JUMPOUT(0x2105595E0);
}

{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  void **v8;
  uint64_t vars8;

  *(void *)this = off_26C1FFA48;
  unsigned int v2 = (void **)((char *)this + 448);
  unint64_t v8 = (void **)((char *)this + 472);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = v2;
  std::vector<UnitFeature>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v3 = (void *)*((void *)this + 52);
  if (v3)
  {
    *((void *)this + 53) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 48);
  if (v4)
  {
    *((void *)this + 49) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 43);
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 40);
  if (v6)
  {
    *((void *)this + 41) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  Module::~Module(this);
}

void std::vector<UnitFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        UnitFeature::~UnitFeature((UnitFeature *)(v4 - 608));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<PitchmarkExtractor>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<PitchmarkExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PitchmarkExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::vector<Prompt>::__assign_with_size[abi:ne180100]<Prompt*,Prompt*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  float32x2_t v9 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<Prompt>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<Prompt>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Prompt>,Prompt*,Prompt*,Prompt*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    unint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Prompt *,Prompt *,Prompt *>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Prompt>,Prompt*,Prompt*,Prompt*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  uint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Prompt *,Prompt *,Prompt *>(a2, a3, (uint64_t)v9);
  for (uint64_t i = *(void *)(a1 + 8); i != v14; std::allocator<Prompt>::destroy[abi:ne180100](i))
    i -= 72;
  *(void *)(a1 + 8) = v14;
}

void sub_20D3689D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20D3689E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<Prompt>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::allocator<Prompt>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<Prompt>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<UnitFeature>,UnitFeature*,UnitFeature*,UnitFeature*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      UnitFeature::UnitFeature((UnitFeature *)(a3 + v6), (const UnitFeature *)(a1 + v6));
      v6 += 608;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<UnitFeature>>(unint64_t a1)
{
  if (a1 >= 0x6BCA1AF286BCA2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(608 * a1);
}

void UnitFeature::UnitFeature(UnitFeature *this, const UnitFeature *a2)
{
  PhoneFeature::PhoneFeature((std::string *)this, a2);
  int v4 = *((_DWORD *)a2 + 53);
  *(void *)(v5 + 216) = 0;
  *(_DWORD *)(v5 + 212) = v4;
  *(void *)(v5 + 22std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *(void *)(v5 + 232) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v5 + 216), *((long long **)a2 + 27), *((long long **)a2 + 28), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 28) - *((void *)a2 + 27)) >> 3));
  if (*((char *)a2 + 263) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 10, *((const std::string::value_type **)a2 + 30), *((void *)a2 + 31));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 15);
    *((void *)this + 32) = *((void *)a2 + 32);
    *((_OWORD *)this + 15) = v6;
  }
  if (*((char *)a2 + 287) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 11, *((const std::string::value_type **)a2 + 33), *((void *)a2 + 34));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 264);
    *((void *)this + 35) = *((void *)a2 + 35);
    *(_OWORD *)((char *)this + 26std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v7;
  }
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 12, *((const std::string::value_type **)a2 + 36), *((void *)a2 + 37));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 18);
    *((void *)this + 38) = *((void *)a2 + 38);
    *((_OWORD *)this + 18) = v8;
  }
  if (*((char *)a2 + 335) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 13, *((const std::string::value_type **)a2 + 39), *((void *)a2 + 40));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 312);
    *((void *)this + 41) = *((void *)a2 + 41);
    *(_OWORD *)((char *)this + 312) = v9;
  }
  if (*((char *)a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 14, *((const std::string::value_type **)a2 + 42), *((void *)a2 + 43));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 21);
    *((void *)this + 4std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *((void *)a2 + 44);
    *((_OWORD *)this + 21) = v10;
  }
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 45, *((const void **)a2 + 45), *((void *)a2 + 46), (uint64_t)(*((void *)a2 + 46) - *((void *)a2 + 45)) >> 2);
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 48, *((const void **)a2 + 48), *((void *)a2 + 49), (uint64_t)(*((void *)a2 + 49) - *((void *)a2 + 48)) >> 2);
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 51, *((const void **)a2 + 51), *((void *)a2 + 52), (uint64_t)(*((void *)a2 + 52) - *((void *)a2 + 51)) >> 2);
  *((void *)this + 5std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 54, *((const void **)a2 + 54), *((void *)a2 + 55), (uint64_t)(*((void *)a2 + 55) - *((void *)a2 + 54)) >> 2);
  long long v11 = *(_OWORD *)((char *)a2 + 472);
  *(_OWORD *)((char *)this + 456) = *(_OWORD *)((char *)a2 + 456);
  *(_OWORD *)((char *)this + 472) = v11;
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 61) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 61, *((const void **)a2 + 61), *((void *)a2 + 62), (uint64_t)(*((void *)a2 + 62) - *((void *)a2 + 61)) >> 2);
  *((void *)this + 66) = 0;
  *((_OWORD *)this + 32) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 64, *((const void **)a2 + 64), *((void *)a2 + 65), (uint64_t)(*((void *)a2 + 65) - *((void *)a2 + 64)) >> 2);
  *((void *)this + 69) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 67, *((const void **)a2 + 67), *((void *)a2 + 68), (uint64_t)(*((void *)a2 + 68) - *((void *)a2 + 67)) >> 2);
  *((void *)this + 72) = 0;
  *((_OWORD *)this + 35) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 70, *((const void **)a2 + 70), *((void *)a2 + 71), (uint64_t)(*((void *)a2 + 71) - *((void *)a2 + 70)) >> 2);
  long long v12 = *(_OWORD *)((char *)a2 + 584);
  *((_DWORD *)this + 150) = *((_DWORD *)a2 + 150);
  *(_OWORD *)((char *)this + 58std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v12;
}

void sub_20D368E4C(_Unwind_Exception *a1, void **a2, void **a3, void **a4, uint64_t a5, void **a6, ...)
{
  va_start(va, a6);
  if (*(char *)(v6 + 335) < 0) {
    operator delete(*a2);
  }
  if (*(char *)(v6 + 311) < 0) {
    operator delete(*a3);
  }
  if (*(char *)(v6 + 287) < 0) {
    operator delete(*a4);
  }
  if (*(char *)(v6 + 263) < 0) {
    operator delete(*a6);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  PhoneFeature::~PhoneFeature((void **)v6);
  _Unwind_Resume(a1);
}

void sub_20D368FA0()
{
}

uint64_t UnitFeature::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  long long v4 = *(_OWORD *)(a2 + 52);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 52) = v4;
  if (a1 != a2) {
    std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)(a1 + 72), *(void *)(a2 + 72), *(void *)(a2 + 80), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  *(_OWORD *)(a1 + 14std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 176);
  long long v6 = *(_OWORD *)(a2 + 192);
  long long v8 = *(_OWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 192) = v6;
  *(_OWORD *)(a1 + 160) = v8;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  if (a1 != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 216), *(std::string **)(a2 + 216), *(long long **)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 240));
  std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a2 + 264));
  std::string::operator=((std::string *)(a1 + 288), (const std::string *)(a2 + 288));
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)(a2 + 312));
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
  if (a1 != a2)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 360), *(char **)(a2 + 360), *(void *)(a2 + 368), (uint64_t)(*(void *)(a2 + 368) - *(void *)(a2 + 360)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 384), *(char **)(a2 + 384), *(void *)(a2 + 392), (uint64_t)(*(void *)(a2 + 392) - *(void *)(a2 + 384)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 408), *(char **)(a2 + 408), *(void *)(a2 + 416), (uint64_t)(*(void *)(a2 + 416) - *(void *)(a2 + 408)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 432), *(char **)(a2 + 432), *(void *)(a2 + 440), (uint64_t)(*(void *)(a2 + 440) - *(void *)(a2 + 432)) >> 2);
    long long v9 = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(a1 + 472) = v9;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 488), *(char **)(a2 + 488), *(void *)(a2 + 496), (uint64_t)(*(void *)(a2 + 496) - *(void *)(a2 + 488)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 512), *(char **)(a2 + 512), *(void *)(a2 + 520), (uint64_t)(*(void *)(a2 + 520) - *(void *)(a2 + 512)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 536), *(char **)(a2 + 536), *(void *)(a2 + 544), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 560), *(char **)(a2 + 560), *(void *)(a2 + 568), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 2);
  }
  long long v10 = *(_OWORD *)(a2 + 584);
  *(_DWORD *)(a1 + 600) = *(_DWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 58std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v10;
  return a1;
}

uint64_t Pronounce_RuleImpl::generate_tokens(Pronounce_RuleImpl *this)
{
  uint64_t result = MEMORY[0x270FA5388](this);
  uint64_t v123 = *MEMORY[0x263EF8340];
  uint64_t v99 = (void *)(result + 32);
  uint64_t v100 = result;
  while (!*(unsigned char *)(result + 8))
  {
    (*(void (**)(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__return_ptr))(**(void **)(result + 16) + 16))(&v110);
    std::__wrap_iter<const char *>::iterator_type i = v110.__position_.__begin_.__i_;
    if (v110.__position_.__begin_.__i_)
    {
      uint64_t v3 = *(void *)(v100 + 16);
      long long v4 = *(std::__shared_weak_count **)(v100 + 24);
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      std::__wrap_iter<const char *>::iterator_type v5 = v110.__position_.__begin_.__i_;
      if (v5 + 8 == (std::__wrap_iter<const char *>::iterator_type)v6)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)v111, "TokenBasicItem is not generated in previous modules.");
        MEMORY[0x210558D40](exception, v111);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      uint64_t v7 = v6[5];
      if (v5 + 8 == (std::__wrap_iter<const char *>::iterator_type)v8) {
        goto LABEL_95;
      }
      uint64_t v9 = v8[5];
      if (*(char *)(v9 + 31) < 0)
      {
        if (!*(void *)(v9 + 16))
        {
LABEL_95:
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v99, (long long *)&v110);
          goto LABEL_96;
        }
      }
      else if (!*(unsigned char *)(v9 + 31))
      {
        goto LABEL_95;
      }
      long long v10 = (std::string::size_type *)(v9 + 8);
      *(_OWORD *)unint64_t v112 = 0u;
      memset(v111, 0, sizeof(v111));
      int v11 = *(char *)(v9 + 31);
      if (v11 < 0)
      {
        if (*(void *)(v9 + 16) != 1) {
          goto LABEL_34;
        }
        long long v12 = (unsigned char *)*v10;
      }
      else
      {
        long long v12 = (unsigned char *)(v9 + 8);
        if (v11 != 1)
        {
LABEL_34:
          (***(void (****)(std::string *__return_ptr))(v100 + 136))(&buf);
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          unint64_t v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            std::string::size_type v18 = v9 + 8;
            if (*(char *)(v9 + 31) < 0) {
              std::string::size_type v18 = *v10;
            }
            Censor::global_plaintext(&__p, (uint64_t)&buf);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            LODWORD(v119.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v119.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v18;
            WORD2(v119.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v119.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
            _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_DEBUG, "#Pronounce_Rule: %s -> %s", (uint8_t *)&v119, 0x16u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if (*(char *)(v9 + 31) < 0) {
            long long v10 = (std::string::size_type *)*v10;
          }
          Censor::global_plaintext(&__p, (uint64_t)&buf);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float32x2_t v21 = &__p;
          }
          else {
            float32x2_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          Diagnostics::log(7, "#Pronounce_Rule: %s -> %s", v20, v10, v21);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__s.__data_[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&__p.__r_.__value_.__l.__size_, &byte_20D5A22AE);
          std::string::basic_string[abi:ne180100]<0>(v117, &byte_20D5A22AE);
          if (!*(unsigned char *)(v100 + 105)) {
            goto LABEL_83;
          }
          if (*(char *)(v9 + 55) < 0)
          {
            if (!*(void *)(v9 + 40)) {
              goto LABEL_83;
            }
LABEL_54:
            UTFString::split(&v109, (const std::string *)(v9 + 32), 0x5Fu, 0);
            unint64_t v22 = *(const void ***)v109.__position_.__begin_.__i_;
            if (*((void *)v109.__position_.__begin_.__i_ + 1) == *(void *)v109.__position_.__begin_.__i_) {
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            }
            if (*((char *)v22 + 23) >= 0) {
              size_t v23 = *((unsigned __int8 *)v22 + 23);
            }
            else {
              size_t v23 = (size_t)v22[1];
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v119, v23 + 1);
            if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              double v24 = &v119;
            }
            else {
              double v24 = (std::string *)v119.__r_.__value_.__r.__words[0];
            }
            if (v23)
            {
              if (*((char *)v22 + 23) >= 0) {
                uint64_t v25 = v22;
              }
              else {
                uint64_t v25 = *v22;
              }
              memmove(v24, v25, v23);
            }
            *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v23) = 33;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string buf = &buf;
            }
            else {
              p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = buf.__r_.__value_.__l.__size_;
            }
            int32x2_t v28 = std::string::append(&v119, (const std::string::value_type *)p_buf, size);
            long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v114.__position_.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v114.__position_.__begin_.__i_ = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v119.__r_.__value_.__l.__data_);
            }
            (***(void (****)(std::string *__return_ptr))(v100 + 168))(&v119);
            create_pronunciation_with_phone_sequence((uint64_t *)&v113, &v119, (uint64_t)&__p);
            std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)v111, (uint64_t *)v113.__position_.__begin_.__i_, (uint64_t *)v113.__position_.__end_.__i_, 0xAAAAAAAAAAAAAAABLL * ((v113.__position_.__end_.__i_ - v113.__position_.__begin_.__i_) >> 3));
            v108.__position_.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v113;
            std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
            if (v120) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v120);
            }
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v119.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v114.__position_.__pregex_) < 0) {
              operator delete((void *)v114.__position_.__begin_.__i_);
            }
            if (v109.__position_.__end_.__i_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v109.__position_.__end_.__i_);
            }
          }
          else
          {
            if (*(unsigned char *)(v9 + 55)) {
              goto LABEL_54;
            }
LABEL_83:
            create_pronunciation_with_phone_sequence((uint64_t *)&v119, &buf, (uint64_t)&__p);
            std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)v111, (uint64_t *)v119.__r_.__value_.__l.__data_, (uint64_t *)v119.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v119.__r_.__value_.__l.__size_ - v119.__r_.__value_.__r.__words[0]) >> 3));
            v114.__position_.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v119;
            std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
          }
          std::string::operator=((std::string *)&v111[24], (const std::string *)(v7 + 32));
          if (v118 < 0) {
            operator delete(v117[0]);
          }
          if (v116 < 0) {
            operator delete((void *)__p.__r_.__value_.__l.__size_);
          }
          if (v122) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v122);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
LABEL_92:
          Agglomerate::set<TokenPronunciationItem>((uint64_t)v110.__position_.__begin_.__i_, (uint64_t)v111);
          if (SHIBYTE(v112[1]) < 0) {
            operator delete(*(void **)&v111[24]);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
          std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_95;
        }
      }
      if (*v12 != 42) {
        goto LABEL_34;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      unint64_t v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        Censor::global_plaintext(&__p, v7 + 32);
        uint64_t v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v14;
        _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_ERROR, "Unknown pronunciation for token '%s', replace with silence.", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      Censor::global_plaintext(&__p, v7 + 32);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v16 = &__p;
      }
      else {
        uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      Diagnostics::log(3, "Unknown pronunciation for token '%s', replace with silence.", v15, v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      create_silence((uint64_t *)&__p);
      std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)v111, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      goto LABEL_92;
    }
LABEL_96:
    if (v110.__position_.__end_.__i_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v110.__position_.__end_.__i_);
    }
    uint64_t result = v100;
    if (!i) {
      break;
    }
  }
  if (*(unsigned char *)(result + 104))
  {
    std::string::basic_string[abi:ne180100]<0>(&v102, &byte_20D5A22AE);
    unint64_t v30 = 0;
    while (1)
    {
      if (*(void *)(v100 + 72) <= v30) {
        std::__throw_out_of_range[abi:ne180100]("deque");
      }
      uint64_t v31 = (uint64_t *)(*(void *)(*(void *)(v100 + 40)
                                  + (((*(void *)(v100 + 64) + v30) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*(unsigned char *)(v100 + 64) + v30));
      uint64_t v33 = *v31;
      float v32 = (std::__shared_weak_count *)v31[1];
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v33)
      {
        uint64_t v35 = (void *)(v33 + 8);
        if ((void *)(v33 + 8) == v34)
        {
          uint64_t v97 = __cxa_allocate_exception(0x10uLL);
          StringFormatter::StringFormatter((StringFormatter *)v111, "Token missing TokenBasicItem");
          MEMORY[0x210558D40](v97, v111);
          __cxa_throw(v97, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        uint64_t v36 = v34[5];
        if (!*(void *)(v100 + 120))
        {
          uint64_t v38 = *(void *)(v36 + 56);
          uint64_t v37 = *(void *)(v36 + 64);
          if (v37) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
          }
          int32x2_t v39 = *(std::__shared_weak_count **)(v100 + 128);
          *(void *)(v100 + 120) = v38;
          *(void *)(v100 + 128) = v37;
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
        }
        if (*(_DWORD *)(v36 + 8) == 1651664235)
        {
          if (v35 != v40)
          {
            uint64_t v41 = v40[5];
            std::string::basic_string[abi:ne180100]<0>(v111, &byte_20D5A22AE);
            int v42 = *(char *)(v36 + 55);
            if (v42 >= 0) {
              float64x2_t v43 = (const std::string::value_type *)(v36 + 32);
            }
            else {
              float64x2_t v43 = *(const std::string::value_type **)(v36 + 32);
            }
            if (v42 >= 0) {
              std::string::size_type v44 = *(unsigned __int8 *)(v36 + 55);
            }
            else {
              std::string::size_type v44 = *(void *)(v36 + 40);
            }
            std::string::append((std::string *)v111, v43, v44);
            std::string::append((std::string *)v111, " ‡ sil †");
            if (*(float *)(v41 + 8) != 0.0 || *(_DWORD *)(v41 + 12) == 1)
            {
              if (v111[23] >= 0) {
                float64x2_t v45 = v111;
              }
              else {
                float64x2_t v45 = *(const std::string::value_type **)v111;
              }
              if (v111[23] >= 0) {
                std::string::size_type v46 = v111[23];
              }
              else {
                std::string::size_type v46 = *(void *)&v111[8];
              }
              std::string::append(&v102, v45, v46);
            }
            if ((v111[23] & 0x80000000) != 0) {
              operator delete(*(void **)v111);
            }
          }
        }
        {
          std::string::append(&v102, " ");
          int v47 = *(char *)(v36 + 55);
          if (v47 >= 0) {
            uint64_t v48 = (const std::string::value_type *)(v36 + 32);
          }
          else {
            uint64_t v48 = *(const std::string::value_type **)(v36 + 32);
          }
          if (v47 >= 0) {
            std::string::size_type v49 = *(unsigned __int8 *)(v36 + 55);
          }
          else {
            std::string::size_type v49 = *(void *)(v36 + 40);
          }
          std::string::append(&v102, v48, v49);
          std::string::append(&v102, " ‡ ");
          (*(void (**)(unsigned char *__return_ptr))(***(void ***)(v100 + 112) + 24))(v111);
          if (v111[23] >= 0) {
            __int16 v50 = v111;
          }
          else {
            __int16 v50 = *(const std::string::value_type **)v111;
          }
          if (v111[23] >= 0) {
            std::string::size_type v51 = v111[23];
          }
          else {
            std::string::size_type v51 = *(void *)&v111[8];
          }
          std::string::append(&v102, v50, v51);
          if ((v111[23] & 0x80000000) != 0) {
            operator delete(*(void **)v111);
          }
          std::string::append(&v102, " †");
        }
        if (v35 == v52) {
          break;
        }
        uint64_t v53 = v52[5];
        if (*(unsigned char *)(v53 + 8))
        {
          std::string::basic_string[abi:ne180100]<0>(v111, " ");
          uint64_t v56 = *(void *)(v36 + 32);
          uint64_t v55 = v36 + 32;
          uint64_t v54 = v56;
          int v57 = *(char *)(v55 + 23);
          uint64_t v58 = (const std::string::value_type *)(v57 >= 0 ? v55 : v54);
          std::string::size_type v59 = v57 >= 0 ? *(unsigned __int8 *)(v55 + 23) : *(void *)(v55 + 8);
          std::string::append((std::string *)v111, v58, v59);
          std::string::append((std::string *)v111, " ‡ sil †");
          uint64_t v60 = v111[23] >= 0 ? v111 : *(const std::string::value_type **)v111;
          std::string::size_type v61 = v111[23] >= 0 ? v111[23] : *(void *)&v111[8];
          std::string::append(&v102, v60, v61);
          if ((v111[23] & 0x80000000) != 0) {
            operator delete(*(void **)v111);
          }
        }
        if (!*(unsigned char *)(v53 + 9)) {
          break;
        }
      }
      char v62 = 0;
      if (v32) {
        goto LABEL_164;
      }
LABEL_165:
      if ((v62 & 1) == 0)
      {
        unint64_t v63 = &v102;
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v63 = (std::string *)v102.__r_.__value_.__r.__words[0];
        }
        if (v63->__r_.__value_.__s.__data_[0] == 32) {
          std::string::erase(&v102, 0, 1uLL);
        }
        std::string::basic_string[abi:ne180100]<0>(v111, " †  ‡ sil †");
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v64 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v64 = v102.__r_.__value_.__l.__size_;
        }
        if (v111[23] >= 0) {
          std::string::size_type v65 = v111[23];
        }
        else {
          std::string::size_type v65 = *(void *)&v111[8];
        }
        std::string::size_type v66 = v64 - v65;
        if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (HIBYTE(v102.__r_.__value_.__r.__words[2]) >= v66 && v65 != -1)
          {
            if (HIBYTE(v102.__r_.__value_.__r.__words[2]) - v66 >= v65) {
              size_t v67 = v65;
            }
            else {
              size_t v67 = HIBYTE(v102.__r_.__value_.__r.__words[2]) - v66;
            }
            unint64_t v68 = &v102;
            goto LABEL_193;
          }
LABEL_256:
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        if (v65 == -1 || v102.__r_.__value_.__l.__size_ < v66) {
          goto LABEL_256;
        }
        if (v102.__r_.__value_.__l.__size_ - v66 >= v65) {
          size_t v67 = v65;
        }
        else {
          size_t v67 = v102.__r_.__value_.__l.__size_ - v66;
        }
        unint64_t v68 = (std::string *)v102.__r_.__value_.__r.__words[0];
LABEL_193:
        if (v111[23] >= 0) {
          uint64_t v69 = v111;
        }
        else {
          uint64_t v69 = *(unsigned char **)v111;
        }
        if (!memcmp((char *)v68 + v66, v69, v67) && v67 == v65) {
          std::string::erase(&v102, v66, v65);
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v70 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          Censor::global_plaintext(&__p, (uint64_t)&v102);
          unint64_t v71 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v71;
          _os_log_impl(&dword_20CD80000, v70, OS_LOG_TYPE_DEBUG, "#Sentence Rule gets composed phone string : %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        Censor::global_plaintext(&__p, (uint64_t)&v102);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v73 = &__p;
        }
        else {
          uint64_t v73 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(7, "#Sentence Rule gets composed phone string : %s", v72, v73);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v111[23] & 0x80000000) != 0) {
          operator delete(*(void **)v111);
        }
        (***(void (****)(void **__return_ptr))(v100 + 152))(&v101);
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        unint64_t v74 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          Censor::global_plaintext((std::string *)v111, (uint64_t)&v102);
          int v75 = v111[23];
          uint64_t v76 = *(unsigned char **)v111;
          Censor::global_plaintext(&__p, (uint64_t)&v101);
          float v77 = v111;
          if (v75 < 0) {
            float v77 = v76;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float v78 = &__p;
          }
          else {
            float v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = (std::string::size_type)v77;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v78;
          _os_log_impl(&dword_20CD80000, v74, OS_LOG_TYPE_DEBUG, "#Sentence Rule:\n[Input]  - %s\n[Output] - %s", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((v111[23] & 0x80000000) != 0) {
            operator delete(*(void **)v111);
          }
        }
        Censor::global_plaintext((std::string *)v111, (uint64_t)&v102);
        int v79 = v111[23];
        uint64_t v80 = *(unsigned char **)v111;
        Censor::global_plaintext(&__p, (uint64_t)&v101);
        uint64_t v82 = v111;
        if (v79 < 0) {
          uint64_t v82 = v80;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v83 = &__p;
        }
        else {
          uint64_t v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(7, "#Sentence Rule:\n[Input]  - %s\n[Output] - %s", v81, v82, v83);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v111[23] & 0x80000000) != 0) {
          operator delete(*(void **)v111);
        }
        unint64_t v84 = *(void ***)(v100 + 40);
        int64_t v85 = *(void ***)(v100 + 48);
        if (v85 == v84)
        {
          int64_t v85 = *(void ***)(v100 + 40);
        }
        else
        {
          unint64_t v86 = *(void *)(v100 + 64);
          uint64_t v87 = &v84[v86 >> 8];
          uint64_t v88 = (uint64_t)*v87;
          uint64_t v89 = (uint64_t)*v87 + 16 * v86;
          uint64_t v90 = *(uint64_t *)((char *)v84 + (((*(void *)(v100 + 72) + v86) >> 5) & 0x7FFFFFFFFFFFFF8))
              + 16 * (*(unsigned char *)(v100 + 72) + v86);
          if (v89 != v90)
          {
            do
            {
              float v91 = *(std::__shared_weak_count **)(v89 + 8);
              if (v91)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v91);
                uint64_t v88 = (uint64_t)*v87;
              }
              v89 += 16;
              if (v89 - v88 == 4096)
              {
                uint64_t v92 = (uint64_t)v87[1];
                ++v87;
                uint64_t v88 = v92;
                uint64_t v89 = v92;
              }
            }
            while (v89 != v90);
            unint64_t v84 = *(void ***)(v100 + 40);
            int64_t v85 = *(void ***)(v100 + 48);
          }
        }
        *(void *)(v100 + 72) = 0;
        unint64_t v93 = (char *)v85 - (char *)v84;
        if ((unint64_t)((char *)v85 - (char *)v84) >= 0x11)
        {
          do
          {
            operator delete(*v84);
            uint64_t v94 = *(void *)(v100 + 48);
            unint64_t v84 = (void **)(*(void *)(v100 + 40) + 8);
            *(void *)(v100 + 40) = v84;
            unint64_t v93 = v94 - (void)v84;
          }
          while ((unint64_t)(v94 - (void)v84) > 0x10);
        }
        unint64_t v95 = v93 >> 3;
        if (v95 == 1)
        {
          uint64_t v96 = 128;
LABEL_250:
          *(void *)(v100 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v96;
        }
        else if (v95 == 2)
        {
          uint64_t v96 = 256;
          goto LABEL_250;
        }
        std::string::basic_string[abi:ne180100]<0>(&v103, " † | ‡ | †");
        std::regex_traits<char>::regex_traits(&v104);
        uint64_t v107 = 0;
        long long v106 = 0u;
        long long v105 = 0u;
        std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>();
      }
    }
    ++v30;
    char v62 = 1;
    if (!v32) {
      goto LABEL_165;
    }
LABEL_164:
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    goto LABEL_165;
  }
  *(unsigned char *)(result + 8) = 1;
  return result;
}

void sub_20D36AC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (SLOBYTE(STACK[0xAF7]) < 0) {
    operator delete((void *)STACK[0xAE0]);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *a2)
{
  long long v4 = *(_OWORD *)&a2->__position_.__begin_.__i_;
  *(_OWORD *)((char *)&this->__position_.__end_.__i_ + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)((char *)&a2->__position_.__end_.__i_ + 4);
  *(_OWORD *)&this->__position_.__begin_.__i_ = v4;
  this->__position_.__match_.__matches_.__begin_ = 0;
  this->__position_.__match_.__matches_.__end_ = 0;
  this->__position_.__match_.__matches_.__end_cap_.__value_ = 0;
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(&this->__position_.__match_.__matches_.__begin_, (long long *)a2->__position_.__match_.__matches_.__begin_, (long long *)a2->__position_.__match_.__matches_.__end_, 0xAAAAAAAAAAAAAAABLL* (((char *)a2->__position_.__match_.__matches_.__end_ - (char *)a2->__position_.__match_.__matches_.__begin_) >> 3));
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v5 = a2->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&this->__position_.__match_.__unmatched_.matched = *(_OWORD *)&a2->__position_.__match_.__unmatched_.matched;
  this->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v5;
  long long v6 = *(_OWORD *)&a2->__position_.__match_.__prefix_.second.__i_;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v7 = a2->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  long long v8 = *(_OWORD *)&a2->__position_.__match_.__suffix_.matched;
  this->__position_.__match_.__position_start_.__i_ = a2->__position_.__match_.__position_start_.__i_;
  *(_OWORD *)&this->__position_.__match_.__suffix_.matched = v8;
  this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v7;
  *(_OWORD *)&this->__position_.__match_.__prefix_.second.__i_ = v6;
  this->__result_ = a2->__result_;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v9 = a2->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(void *)&this->__suffix_.matched = *(void *)&a2->__suffix_.matched;
  this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v9;
  ptrdiff_t n = a2->__n_;
  this->__subs_.__begin_ = 0;
  this->__n_ = n;
  this->__subs_.__end_ = 0;
  this->__subs_.__end_cap_.__value_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this->__subs_.__begin_, a2->__subs_.__begin_, (uint64_t)a2->__subs_.__end_, a2->__subs_.__end_ - a2->__subs_.__begin_);
  if (a2->__result_ == &a2->__suffix_)
  {
    p_suffix = &this->__suffix_;
LABEL_9:
    this->__result_ = p_suffix;
    return this;
  }
  if (this->__result_)
  {
    unint64_t v11 = this->__subs_.__begin_[this->__n_];
    if (v11 == -1)
    {
      p_suffix = &this->__position_.__match_.__prefix_;
    }
    else
    {
      std::vector<std::ssub_match>::pointer begin = this->__position_.__match_.__matches_.__begin_;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__position_.__match_.__matches_.__end_ - (char *)begin) >> 3);
      uint64_t v14 = &begin[(int)v11];
      if (v13 <= v11) {
        p_suffix = &this->__position_.__match_.__unmatched_;
      }
      else {
        p_suffix = v14;
      }
    }
    goto LABEL_9;
  }
  return this;
}

void sub_20D36B514(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  uint64_t v3 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *)this->__result_;
  uint64_t v4 = (uint64_t)__x->__result_;
  if (!((unint64_t)v3 | v4)) {
    goto LABEL_2;
  }
  p_suffix = &this->__suffix_;
  long long v8 = &__x->__suffix_;
  if (v3 == &this->__suffix_ && v4 == (void)v8)
  {
    if (!std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)this->__result_, v4))
    {
LABEL_2:
      LOBYTE(v5) = 1;
      return v5;
    }
    uint64_t v3 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *)this->__result_;
  }
  if (!v3 || (long long v10 = __x->__result_) == 0)
  {
LABEL_18:
    LOBYTE(v5) = 0;
    return v5;
  }
  LOBYTE(v5) = 0;
  if (v3 != p_suffix && v10 != v8)
  {
    BOOL v5 = std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&this->__position_, &__x->__position_);
    if (v5)
    {
      if (this->__n_ == __x->__n_)
      {
        std::vector<int>::pointer begin = this->__subs_.__begin_;
        long long v12 = (int *)((char *)this->__subs_.__end_ - (char *)begin);
        std::vector<int>::pointer v13 = __x->__subs_.__begin_;
        if (v12 == (int *)((char *)__x->__subs_.__end_ - (char *)v13))
        {
          LOBYTE(v5) = memcmp(begin, v13, (size_t)v12) == 0;
          return v5;
        }
      }
      goto LABEL_18;
    }
  }
  return v5;
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this)
{
  v16[0] = *(_OWORD *)&this->__position_.__begin_.__i_;
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)&this->__position_.__end_.__i_ + 4);
  memset(__p, 0, sizeof(__p));
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(__p, (long long *)this->__position_.__match_.__matches_.__begin_, (long long *)this->__position_.__match_.__matches_.__end_, 0xAAAAAAAAAAAAAAABLL* (((char *)this->__position_.__match_.__matches_.__end_ - (char *)this->__position_.__match_.__matches_.__begin_) >> 3));
  uint64_t v2 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char> *)this->__result_;
  std::__wrap_iter<const char *>::iterator_type i = this->__position_.__match_.__position_start_.__i_;
  long long v20 = *(_OWORD *)&this->__position_.__match_.__prefix_.second.__i_;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v21 = this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  long long v22 = *(_OWORD *)&this->__position_.__match_.__suffix_.matched;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = this->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  long long v19 = *(_OWORD *)&this->__position_.__match_.__unmatched_.matched;
  if (v2 == (std::regex_token_iterator<std::__wrap_iter<const char *>, char> *)&this->__suffix_)
  {
LABEL_12:
    p_suffix = 0;
    goto LABEL_19;
  }
  std::vector<int>::pointer begin = this->__subs_.__begin_;
  unint64_t v4 = this->__n_ + 1;
  if (v4 < this->__subs_.__end_ - begin)
  {
    this->__n_ = v4;
    unint64_t v5 = begin[v4];
    goto LABEL_14;
  }
  this->__n_ = 0;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&this->__position_);
  memset(&v15.__match_.__prefix_, 0, 17);
  memset(&v15.__match_.__suffix_, 0, 17);
  v15.__match_.__ready_ = 0;
  v15.__match_.__position_start_.__i_ = 0;
  memset(&v15.__match_, 0, 41);
  memset(&v15, 0, 28);
  if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&this->__position_, &v15))
  {
    std::vector<int>::pointer end = this->__subs_.__end_;
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v7 = wmemchr(this->__subs_.__begin_, -1, end - this->__subs_.__begin_);
    p_suffix = 0;
    if (v7) {
      std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v9 = v7;
    }
    else {
      std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v9 = end;
    }
    if (v9 == this->__subs_.__end_ || !(_BYTE)v22) {
      goto LABEL_19;
    }
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v10 = v21;
    if (v21.second.__i_ != v21.first.__i_)
    {
      this->__suffix_.matched = 1;
      this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v10;
      p_suffix = &this->__suffix_;
      goto LABEL_19;
    }
    goto LABEL_12;
  }
  unint64_t v5 = this->__subs_.__begin_[this->__n_];
LABEL_14:
  if (v5 == -1)
  {
    p_suffix = &this->__position_.__match_.__prefix_;
  }
  else
  {
    std::vector<std::ssub_match>::pointer v11 = this->__position_.__match_.__matches_.__begin_;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__position_.__match_.__matches_.__end_ - (char *)v11) >> 3);
    std::vector<int>::pointer v13 = &v11[(int)v5];
    if (v12 <= v5) {
      p_suffix = &this->__position_.__match_.__unmatched_;
    }
    else {
      p_suffix = v13;
    }
  }
LABEL_19:
  this->__result_ = p_suffix;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_20D36B7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v4 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(a4);
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[3 * v7];
    while (a2 != a3)
    {
      long long v8 = *a2;
      result[2] = *((void *)a2 + 2);
      *(_OWORD *)uint64_t result = v8;
      result += 3;
      a2 = (long long *)((char *)a2 + 24);
    }
    v4[1] = result;
  }
  return result;
}

void sub_20D36B878(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>()
{
}

void sub_20D36BC84(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<int>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  do
  {
    long long v8 = v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != a3)
  {
    if (*v8 != 124) {
      return v8;
    }
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v9 = a1->__end_;
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v10 = v8 + 1;
    std::vector<std::ssub_match>::pointer v11 = v8 + 1;
    do
    {
      long long v8 = v11;
      std::vector<std::ssub_match>::pointer v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v10 == v8) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == (char *)a3) {
    return (unsigned __int8 *)a2;
  }
  unint64_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (char *)v4)
  {
    do
    {
      long long v6 = v3;
      uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(this, v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<int>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  long long v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v9 = a1->__end_;
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    long long v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  long long v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    uint64_t v7 = v6;
    long long v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  long long v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    uint64_t v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  uint64_t v9 = (v8 - 36);
  if (v9 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) != 0) {
    goto LABEL_4;
  }
  if (v9 == 5)
  {
    if (!*(_DWORD *)(a1 + 36)) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_13:
    if ((v8 - 123) >= 2)
    {
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_32:
      uint64_t v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
  }
LABEL_4:
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v10 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_21:
    int v11 = *a2;
LABEL_22:
    if (v11 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v11 = *a2;
  if (v11 != 92) {
    goto LABEL_22;
  }
  int v12 = *v10;
  char v13 = *v10;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
    {
      uint64_t v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10, a3, 0);
    }
    else
    {
      BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
      uint64_t v16 = 2;
      if (!v15) {
        uint64_t v16 = 0;
      }
      uint64_t v14 = (unsigned __int8 *)&a2[v16];
    }
    if (v14 != (unsigned __int8 *)a2)
    {
LABEL_25:
      if (v14 == (unsigned __int8 *)a2 && v14 != (unsigned __int8 *)a3)
      {
        int v17 = *a2;
        if (v17 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor((std::basic_regex<char> *)a1);
          goto LABEL_32;
        }
        if (v17 != 40)
        {
          if (v17 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor((std::basic_regex<char> *)a1);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
        unsigned int v18 = *(_DWORD *)(a1 + 28);
        ++*(_DWORD *)(a1 + 36);
        long long v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v19 == a3 || (long long v20 = v19, *v19 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v18);
        --*(_DWORD *)(a1 + 36);
        uint64_t v14 = (unsigned __int8 *)(v20 + 1);
      }
      if (v14 != (unsigned __int8 *)a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    goto LABEL_21;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
  uint64_t v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v21 = (*(_DWORD *)(a1 + 28) + 1);
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), v21);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      char v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        char v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    char v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    BOOL v15 = a2 + 1;
    uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            char v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              char v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              size_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            size_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        size_t v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          char v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            char v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        uint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            char v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                char v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    char v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  char v13 = a2;
  if (v12 == 43)
  {
    char v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_136;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_136;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_136;
    }
    int v8 = a3 - 4;
    while (1)
    {
      uint64_t v9 = (char *)v5;
      if ((char *)v5 == a3)
      {
        int v11 = a3;
        goto LABEL_114;
      }
      int v10 = *(unsigned __int8 *)v5;
      int v11 = (char *)v5;
      if (v10 != 93) {
        break;
      }
LABEL_114:
      uint64_t v5 = (uint64_t)v11;
LABEL_115:
      if (v9 == (char *)v5)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93) {
            return v9 + 1;
          }
        }
LABEL_136:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    memset(&v39, 0, sizeof(v39));
    if ((char *)(v5 + 1) != a3 && v10 == 91)
    {
      int v12 = *(unsigned __int8 *)(v5 + 1);
      switch(v12)
      {
        case '.':
          int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)&v39);
          uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
          std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v39.__r_.__value_.__l.__size_;
          }
          if (size)
          {
LABEL_34:
            if (v11 != a3)
            {
              int v17 = *v11;
              if (v17 != 93)
              {
                BOOL v19 = v11 + 1;
                if (v11 + 1 != a3 && v17 == 45 && *v19 != 93)
                {
                  memset(&__p, 0, sizeof(__p));
                  BOOL v20 = v11 + 2;
                  if (v11 + 2 != a3 && *v19 == 91 && *v20 == 46)
                  {
                    size_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v11 + 3, a3, (uint64_t)&__p);
                    goto LABEL_120;
                  }
                  if ((v5 | 0x40) == 0x40)
                  {
                    LODWORD(v19) = *v19;
                    if (v19 == 92)
                    {
                      if (v5) {
                        size_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11 + 2, a3, &__p);
                      }
                      else {
                        size_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v11 + 2), (std::basic_regex<char> *)a3, &__p, v7);
                      }
LABEL_120:
                      BOOL v20 = v21;
LABEL_121:
                      *(_OWORD *)int v40 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                      std::string::size_type v36 = v39.__r_.__value_.__r.__words[2];
                      std::string v38 = __p;
                      memset(&v39, 0, sizeof(v39));
                      uint64_t v41 = v36;
                      memset(&__p, 0, sizeof(__p));
                      std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v40, (char *)&v38);
                      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v38.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v41) < 0) {
                        operator delete(v40[0]);
                      }
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      char v29 = 1;
LABEL_111:
                      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v39.__r_.__value_.__l.__data_);
                      }
                      int v11 = v20;
                      if ((v29 & 1) == 0) {
                        goto LABEL_115;
                      }
                      goto LABEL_114;
                    }
                  }
                  else
                  {
                    LOBYTE(v19) = *v19;
                  }
                  std::string::operator=(&__p, (std::string::value_type)v19);
                  goto LABEL_121;
                }
              }
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v39.__r_.__value_.__l.__size_)
              {
                if (v39.__r_.__value_.__l.__size_ == 1)
                {
                  size_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_43:
                  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0]);
LABEL_80:
                  char v29 = 1;
                  BOOL v20 = v11;
                  goto LABEL_111;
                }
                size_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_79:
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0], v18->__r_.__value_.__s.__data_[1]);
                goto LABEL_80;
              }
              operator delete(v39.__r_.__value_.__l.__data_);
            }
            else if (*((unsigned char *)&v39.__r_.__value_.__s + 23))
            {
              size_t v18 = &v39;
              if (HIBYTE(v39.__r_.__value_.__r.__words[2]) == 1) {
                goto LABEL_43;
              }
              goto LABEL_79;
            }
            goto LABEL_114;
          }
LABEL_28:
          if ((v5 | 0x40) == 0x40)
          {
            int v15 = *v11;
            if (v15 == 92)
            {
              uint64_t v16 = v11 + 1;
              if (v5)
              {
                int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v16, a3, &v39);
              }
              else
              {
                int v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v16, (std::basic_regex<char> *)a3, &v39, v7);
                uint64_t v5 = 0;
              }
              goto LABEL_34;
            }
          }
          else
          {
            LOBYTE(v15) = *v11;
          }
          std::string::operator=(&v39, v15);
          ++v11;
          goto LABEL_34;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_135;
          }
          for (unint64_t i = 0; ; ++i)
          {
            size_t v14 = (char *)(v5 + i + 2);
            if (*v14 == 58 && *(unsigned char *)(v5 + i + 3) == 93) {
              break;
            }
            if (&v8[-v5] == (char *)i) {
              goto LABEL_135;
            }
          }
          if (v14 == a3) {
LABEL_135:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          int v24 = *(_DWORD *)(a1 + 24);
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
          std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
          }
          (*(void (**)(void, std::string *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), p_p, (char *)p_p + v25);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v27 = &__p;
          }
          else {
            int v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v27, v24 & 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (!classname) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          }
          char v29 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_110;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_135;
          }
          for (uint64_t j = 0; ; ++j)
          {
            size_t v14 = &j[v5 + 2];
            if (*v14 == 61 && j[v5 + 3] == 93) {
              break;
            }
            if (&v8[-v5] == j) {
              goto LABEL_135;
            }
          }
          if (v14 == a3) {
            goto LABEL_135;
          }
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_) {
LABEL_137:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
              goto LABEL_137;
            }
            uint64_t v31 = &__p;
          }
          std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)v40, a1, (char *)v31, (char *)v31 + v30);
          float v32 = (void *)HIBYTE(v41);
          if (v41 < 0) {
            float v32 = v40[1];
          }
          if (v32)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (long long *)v40);
          }
          else
          {
            std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
            }
            if (v33 == 2)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v35 = &__p;
              }
              else {
                uint64_t v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v35->__r_.__value_.__s.__data_[0], v35->__r_.__value_.__s.__data_[1]);
            }
            else
            {
              if (v33 != 1) {
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v34 = &__p;
              }
              else {
                unint64_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v34->__r_.__value_.__s.__data_[0]);
            }
          }
          if (SHIBYTE(v41) < 0) {
            operator delete(v40[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v29 = 0;
LABEL_110:
          uint64_t v5 = (uint64_t)(v14 + 2);
          BOOL v20 = v9;
          goto LABEL_111;
      }
    }
    uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    int v11 = v9;
    goto LABEL_28;
  }
  return a2;
}

void sub_20D36CBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  uint64_t v5 = a3 - 2;
  unsigned int v6 = a2;
  for (unint64_t i = a2; ; v6 = i)
  {
    int v8 = *i++;
    if (v8 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    --v5;
  }
  if (v6 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v12;
  unint64_t v9 = v13;
  *(void *)(a4 + 16) = v13;
  unint64_t v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = *(void *)(a4 + 8);
  }
  if (v10 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        unint64_t v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 16std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    std::string::value_type v9 = 0;
    unint64_t v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          unsigned int v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            unsigned int v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            unsigned int v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        unsigned int v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      unsigned int v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  unint64_t v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            int v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              unint64_t v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                int v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6) {
                  goto LABEL_23;
                }
              }
            }
          }
          goto LABEL_64;
        case 'v':
          if (a4)
          {
            unsigned int v6 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          char v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_28;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u) {
            goto LABEL_64;
          }
          char v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          char v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_33;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u) {
            goto LABEL_64;
          }
          char v13 = -87;
LABEL_33:
          std::string::value_type v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4) {
            std::string::operator=(a4, v14);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        unsigned int v6 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_50;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          unsigned int v6 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_50:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      uint64_t v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if (v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          unsigned int v6 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_64;
    }
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65) {
      goto LABEL_64;
    }
    unsigned int v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v15 >= 0x5B && (v15 - 97) > 0x19u) {
      goto LABEL_64;
    }
    std::string::value_type v16 = v15 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v16);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_20D36D510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 != (char *)a3)
  {
    if ((std::vector<int>::pointer end = a1->__end_,
          unsigned int marked_count = a1->__marked_count_,
          int v9 = (unsigned __int8 *)(a2 + 1),
          int v8 = *a2,
          a2 + 1 == (char *)a3)
      && v8 == 36
      || ((v8 - 46) <= 0x2E
        ? (BOOL v10 = ((1 << (v8 - 46)) & 0x600000000001) == 0)
        : (BOOL v10 = 1),
          !v10))
    {
      std::string v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
      if (v11 == v3)
      {
        if (*v3 == 46) {
          operator new();
        }
        std::string v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v3, (char *)a3);
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      std::string v11 = v3 + 1;
    }
    if (v3 == v11 && v9 != a3 && *v3 == 92)
    {
      if (2 * (v3[1] == 40))
      {
        uint64_t v12 = (uint64_t)&v3[2 * (v3[1] == 40)];
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v13 = a1->__marked_count_;
        do
        {
          std::string::value_type v14 = (unsigned __int8 *)v12;
          uint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v12, a3);
        }
        while (v14 != (unsigned __int8 *)v12);
        if (v14 == a3 || v14 + 1 == a3 || *v14 != 92 || v14[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::string v11 = (char *)(v14 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v13);
      }
      else
      {
        BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v3[1]);
        uint64_t v16 = 2;
        if (!v15) {
          uint64_t v16 = 0;
        }
        std::string v11 = &v3[v16];
      }
    }
    if (v11 != v3)
    {
      if (v11 == (char *)a3) {
        return (char *)a3;
      }
      size_t v17 = a1->__marked_count_ + 1;
      int v18 = *v11;
      if (v18 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return ++v11;
      }
      if (v11 + 1 == (char *)a3 || v18 != 92 || v11[1] != 123) {
        return v11;
      }
      BOOL v20 = (unsigned __int8 *)(v11 + 2);
      int v29 = 0;
      size_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v20, a3, &v29);
      if (v20 == v21) {
LABEL_46:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v21 != a3)
      {
        BOOL v22 = v21 + 1;
        int v23 = *v21;
        if (v23 == 44)
        {
          int v28 = -1;
          int v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v21 + 1, a3, &v28);
          if (v24 != a3 && v24 + 1 != a3 && *v24 == 92 && v24[1] == 125)
          {
            size_t v26 = v28;
            size_t v25 = v29;
            if (v28 == -1)
            {
              size_t v26 = -1;
            }
            else if (v28 < v29)
            {
              goto LABEL_46;
            }
            std::string v11 = (char *)&v24[2 * (v24[1] == 125)];
            int v27 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v27, v25, v26, end, marked_count + 1, v17, 1);
            return v11;
          }
        }
        else if (v22 != a3 && v23 == 92 && *v22 == 125)
        {
          std::string v11 = (char *)(v21 + 2);
          size_t v25 = v29;
          int v27 = a1;
          size_t v26 = v29;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_33;
      }
      int v16 = a2[1];
      if (v16 == 66)
      {
        BOOL v17 = 1;
      }
      else
      {
        if (v16 != 98) {
          goto LABEL_33;
        }
        BOOL v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v17);
      uint64_t v15 = 2;
      return &a2[v15];
    }
    if (v6 != 94) {
      goto LABEL_33;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_22:
    uint64_t v15 = 1;
    return &a2[v15];
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_22;
  }
  BOOL v8 = v6 == 40;
  unint64_t v7 = (char *)(a2 + 1);
  BOOL v8 = !v8 || v7 == a3;
  if (!v8)
  {
    BOOL v8 = *v7 == 63;
    int v9 = (char *)(a2 + 2);
    if (v8 && v9 != a3)
    {
      int v11 = *v9;
      if (v11 == 33)
      {
        std::regex_traits<char>::regex_traits(&v46.__traits_);
        memset(&v46.__flags_, 0, 40);
        v46.__flags_ = a1->__flags_;
        uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v46, a2 + 3, a3);
        unsigned int marked_count = v46.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v46, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v12 == a3 || *v12 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      else
      {
        if (v11 != 61) {
          goto LABEL_33;
        }
        std::regex_traits<char>::regex_traits(&v46.__traits_);
        memset(&v46.__flags_, 0, 40);
        v46.__flags_ = a1->__flags_;
        uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v46, a2 + 3, a3);
        unsigned int v13 = v46.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v46, 0, a1->__marked_count_);
        a1->__marked_count_ += v13;
        if (v12 == a3 || *v12 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      std::string::value_type v14 = (unsigned __int8 *)(v12 + 1);
      std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v46.__traits_.__loc_);
      if (v12 + 1 != (char *)a2) {
        return v14;
      }
    }
  }
LABEL_33:
  std::vector<int>::pointer end = a1->__end_;
  unsigned int v20 = a1->__marked_count_;
  int v21 = (char)*a2;
  int v22 = *a2;
  if (v21 <= 91)
  {
    int v23 = a2;
    switch(*a2)
    {
      case '$':
      case ')':
        goto LABEL_91;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_56;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_96;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++a1->__open_count_;
          int v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 3, a3);
          if (v24 != a3 && *v24 == 41)
          {
            --a1->__open_count_;
            int v23 = (unsigned __int8 *)(v24 + 1);
            goto LABEL_91;
          }
LABEL_96:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v29 = a1->__marked_count_;
        ++a1->__open_count_;
        std::string::size_type v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v30 == a3) {
          goto LABEL_96;
        }
        uint64_t v31 = v30;
        if (*v30 != 41) {
          goto LABEL_96;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v29);
        --a1->__open_count_;
        int v23 = (unsigned __int8 *)(v31 + 1);
        goto LABEL_91;
      case '*':
      case '+':
        goto LABEL_58;
      case '.':
        operator new();
      default:
        if (v21 == 91)
        {
          int v23 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, a3);
          goto LABEL_91;
        }
        if (v21 != 63) {
          goto LABEL_56;
        }
        goto LABEL_58;
    }
  }
  uint64_t v25 = (v21 - 92);
  if (v25 > 0x21) {
    goto LABEL_56;
  }
  int v23 = a2;
  if (((1 << v25) & 0x300000006) != 0) {
    goto LABEL_91;
  }
  if (v25)
  {
    if (v25 == 31) {
LABEL_58:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_56:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v22);
    int v23 = a2 + 1;
    goto LABEL_91;
  }
  int v23 = a2;
  if (v22 != 92) {
    goto LABEL_91;
  }
  size_t v26 = (char *)(a2 + 1);
  if (a2 + 1 == (unsigned __int8 *)a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v27 = *v26;
  unsigned int v28 = v27 - 48;
  if (v27 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v28);
LABEL_90:
    int v23 = a2 + 2;
    goto LABEL_91;
  }
  if ((v27 - 49) <= 8)
  {
    int v23 = a2 + 2;
    if (a2 + 2 == (unsigned __int8 *)a3)
    {
      int v23 = (unsigned __int8 *)a3;
    }
    else
    {
      while (1)
      {
        int v32 = *v23;
        if ((v32 - 48) > 9) {
          break;
        }
        if (v28 >= 0x19999999) {
          goto LABEL_97;
        }
        ++v23;
        unsigned int v28 = v32 + 10 * v28 - 48;
        if (v23 == (unsigned __int8 *)a3)
        {
          int v23 = (unsigned __int8 *)a3;
          break;
        }
      }
      if (!v28) {
LABEL_97:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
    }
    if (v28 > v20) {
      goto LABEL_97;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v28);
    if (v26 != (char *)v23) {
      goto LABEL_91;
    }
  }
  int v33 = *v26;
  if (v33 > 99)
  {
    if (v33 == 119)
    {
      unint64_t v34 = a1;
      BOOL v35 = 0;
      goto LABEL_82;
    }
    if (v33 == 115)
    {
      int v42 = a1;
      BOOL v43 = 0;
      goto LABEL_88;
    }
    if (v33 != 100) {
      goto LABEL_83;
    }
    std::string::size_type v36 = a1;
    BOOL v37 = 0;
LABEL_80:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v36, v37);
    int v39 = started->__mask_ | 0x400;
LABEL_89:
    started->__mask_ = v39;
    goto LABEL_90;
  }
  switch(v33)
  {
    case 'D':
      std::string::size_type v36 = a1;
      BOOL v37 = 1;
      goto LABEL_80;
    case 'S':
      int v42 = a1;
      BOOL v43 = 1;
LABEL_88:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
      int v39 = started->__mask_ | 0x4000;
      goto LABEL_89;
    case 'W':
      unint64_t v34 = a1;
      BOOL v35 = 1;
LABEL_82:
      int v40 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v34, v35);
      v40->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v40, 95);
      goto LABEL_90;
  }
LABEL_83:
  uint64_t v41 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
  if (v26 == (char *)v41) {
    int v23 = a2;
  }
  else {
    int v23 = (unsigned __int8 *)v41;
  }
LABEL_91:
  std::string::value_type v14 = a2;
  if (v23 == a2) {
    return v14;
  }
  size_t v44 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v23, (unsigned __int8 *)a3, end, v20 + 1, v44);
}

void sub_20D36DE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void Pronounce_RuleImpl::~Pronounce_RuleImpl(Pronounce_RuleImpl *this)
{
  *(void *)this = off_26C202500;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = off_26C202500;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  FrontendModule::~FrontendModule((void **)this);
}

uint64_t std::__shared_ptr_emplace<Pronounce_RuleImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Pronounce_RuleImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Pronounce_RuleImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *SiriTTS::PhoneticAlphabet::PhoneticAlphabet(uint64_t *a1, long long **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  unsigned int v13 = a1;
  if (v3 != v4)
  {
    while (1)
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v5 = *v3;
        v12.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
        *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
      }
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        break;
      }
      std::string::size_type size = v12.__r_.__value_.__l.__size_;
      operator delete(v12.__r_.__value_.__l.__data_);
      if (size) {
        goto LABEL_9;
      }
LABEL_10:
      uint64_t v3 = (long long *)((char *)v3 + 24);
      if (v3 == v4)
      {
        unint64_t v7 = *a1;
        BOOL v8 = (_OWORD *)a1[1];
        goto LABEL_13;
      }
    }
    if (!*((unsigned char *)&v12.__r_.__value_.__s + 23)) {
      goto LABEL_10;
    }
LABEL_9:
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v13, v3);
    goto LABEL_10;
  }
  BOOL v8 = 0;
  unint64_t v7 = 0;
LABEL_13:
  unint64_t v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v8 - v7) >> 3));
  if (v8 == (_OWORD *)v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*,false>(v7, v8, v10, 1);
  return a1;
}

void sub_20D36E16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  int v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*,false>(unint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unsigned int v151 = (_OWORD *)((char *)a2 - 24);
    unint64_t v9 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v9;
          uint64_t v10 = (uint64_t)a2 - v9;
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v60 = *((unsigned __int8 *)a2 - 1);
                if ((v60 & 0x80u) != 0) {
                  unint64_t v60 = *((void *)a2 - 2);
                }
                unint64_t v61 = *(unsigned __int8 *)(v9 + 23);
                if ((v61 & 0x80u) != 0) {
                  unint64_t v61 = *(void *)(v9 + 8);
                }
                if (v60 > v61)
                {
                  uint64_t v167 = *(void *)(v9 + 16);
                  long long v159 = *(_OWORD *)v9;
                  long long v62 = *v151;
                  *(void *)(v9 + 16) = *((void *)a2 - 1);
                  *(_OWORD *)unint64_t v9 = v62;
                  *((void *)a2 - 1) = v167;
                  long long *v151 = v159;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)v9, (long long *)(v9 + 24), v151);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(v9, v9 + 24, v9 + 48, (uint64_t)v151);
                break;
              case 5uLL:
                unint64_t v63 = (long long *)(v9 + 24);
                std::string::size_type v64 = (long long *)(v9 + 48);
                std::string::size_type v65 = (long long *)(v9 + 72);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(v9, v9 + 24, v9 + 48, v9 + 72);
                unint64_t v66 = *((unsigned __int8 *)a2 - 1);
                if ((v66 & 0x80u) != 0) {
                  unint64_t v66 = *((void *)a2 - 2);
                }
                unint64_t v67 = *(unsigned __int8 *)(v9 + 95);
                if ((v67 & 0x80u) != 0) {
                  unint64_t v67 = *(void *)(v9 + 80);
                }
                if (v66 > v67)
                {
                  long long v68 = *v65;
                  uint64_t v69 = *(void *)(v9 + 88);
                  uint64_t v70 = *((void *)a2 - 1);
                  *std::string::size_type v65 = *v151;
                  *(void *)(v9 + 88) = v70;
                  *((void *)a2 - 1) = v69;
                  long long *v151 = v68;
                  unint64_t v71 = *(unsigned __int8 *)(v9 + 95);
                  if ((v71 & 0x80u) != 0) {
                    unint64_t v71 = *(void *)(v9 + 80);
                  }
                  unint64_t v72 = *(unsigned __int8 *)(v9 + 71);
                  if ((v72 & 0x80u) != 0) {
                    unint64_t v72 = *(void *)(v9 + 56);
                  }
                  if (v71 > v72)
                  {
                    uint64_t v73 = *(void *)(v9 + 64);
                    long long v74 = *v64;
                    *std::string::size_type v64 = *v65;
                    *(void *)(v9 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(v9 + 88);
                    *std::string::size_type v65 = v74;
                    *(void *)(v9 + 88) = v73;
                    unint64_t v75 = *(unsigned __int8 *)(v9 + 71);
                    if ((v75 & 0x80u) != 0) {
                      unint64_t v75 = *(void *)(v9 + 56);
                    }
                    unint64_t v76 = *(unsigned __int8 *)(v9 + 47);
                    if ((v76 & 0x80u) != 0) {
                      unint64_t v76 = *(void *)(v9 + 32);
                    }
                    if (v75 > v76)
                    {
                      uint64_t v77 = *(void *)(v9 + 40);
                      long long v78 = *v63;
                      *unint64_t v63 = *v64;
                      *(void *)(v9 + 40) = *(void *)(v9 + 64);
                      *std::string::size_type v64 = v78;
                      *(void *)(v9 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v77;
                      unint64_t v79 = *(unsigned __int8 *)(v9 + 47);
                      if ((v79 & 0x80u) != 0) {
                        unint64_t v79 = *(void *)(v9 + 32);
                      }
                      unint64_t v80 = *(unsigned __int8 *)(v9 + 23);
                      if ((v80 & 0x80u) != 0) {
                        unint64_t v80 = *(void *)(v9 + 8);
                      }
                      if (v79 > v80)
                      {
                        uint64_t v168 = *(void *)(v9 + 16);
                        long long v160 = *(_OWORD *)v9;
                        *(_OWORD *)unint64_t v9 = *v63;
                        *(void *)(v9 + 16) = *(void *)(v9 + 40);
                        *unint64_t v63 = v160;
                        *(void *)(v9 + 40) = v168;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v10 <= 575)
          {
            int v81 = (void *)(v9 + 24);
            BOOL v83 = (_OWORD *)v9 == a2 || v81 == (void *)a2;
            if (a4)
            {
              if (!v83)
              {
                uint64_t v84 = 0;
                int64_t v85 = (void *)v9;
                do
                {
                  unint64_t v86 = v81;
                  unint64_t v87 = *((unsigned __int8 *)v85 + 47);
                  char v88 = v87;
                  uint64_t v89 = v85[4];
                  if ((v87 & 0x80u) != 0) {
                    unint64_t v87 = v85[4];
                  }
                  unint64_t v90 = *((unsigned __int8 *)v85 + 23);
                  if ((v90 & 0x80u) != 0) {
                    unint64_t v90 = v85[1];
                  }
                  if (v87 > v90)
                  {
                    uint64_t v91 = *v86;
                    *(_DWORD *)unint64_t v161 = *((_DWORD *)v85 + 10);
                    *(_DWORD *)&v161[3] = *(_DWORD *)((char *)v85 + 43);
                    v86[1] = 0;
                    v86[2] = 0;
                    *unint64_t v86 = 0;
                    uint64_t v92 = v84;
                    while (1)
                    {
                      uint64_t v93 = v9 + v92;
                      *(_OWORD *)(v93 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(v9 + v92);
                      *(void *)(v93 + 40) = *(void *)(v9 + v92 + 16);
                      *(unsigned char *)(v93 + 23) = 0;
                      *(unsigned char *)uint64_t v93 = 0;
                      if (!v92) {
                        break;
                      }
                      unint64_t v94 = *(unsigned __int8 *)(v93 - 1);
                      unint64_t v95 = *(void *)(v93 - 16);
                      if ((v94 & 0x80u) == 0) {
                        unint64_t v95 = v94;
                      }
                      v92 -= 24;
                      if (v87 <= v95)
                      {
                        uint64_t v96 = v9 + v92 + 24;
                        goto LABEL_148;
                      }
                    }
                    uint64_t v96 = v9;
LABEL_148:
                    *(void *)uint64_t v96 = v91;
                    *(void *)(v96 + 8) = v89;
                    *(_DWORD *)(v96 + 16) = *(_DWORD *)v161;
                    *(_DWORD *)(v96 + 19) = *(_DWORD *)&v161[3];
                    *(unsigned char *)(v96 + 23) = v88;
                  }
                  int v81 = v86 + 3;
                  v84 += 24;
                  int64_t v85 = v86;
                }
                while (v86 + 3 != (void *)a2);
              }
            }
            else if (!v83)
            {
              do
              {
                uint64_t v142 = v81;
                unint64_t v143 = *(unsigned __int8 *)(a1 + 47);
                char v144 = v143;
                uint64_t v145 = *(void *)(a1 + 32);
                if ((v143 & 0x80u) != 0) {
                  unint64_t v143 = *(void *)(a1 + 32);
                }
                unint64_t v146 = *(unsigned __int8 *)(a1 + 23);
                if ((v146 & 0x80u) != 0) {
                  unint64_t v146 = *(void *)(a1 + 8);
                }
                if (v143 > v146)
                {
                  uint64_t v147 = *v142;
                  *(_DWORD *)uint64_t v164 = *(_DWORD *)(a1 + 40);
                  *(_DWORD *)&v164[3] = *(_DWORD *)(a1 + 43);
                  v142[1] = 0;
                  v142[2] = 0;
                  *uint64_t v142 = 0;
                  unint64_t v148 = v142;
                  do
                  {
                    *(_OWORD *)unint64_t v148 = *(_OWORD *)(v148 - 3);
                    v148[2] = *(v148 - 1);
                    *((unsigned char *)v148 - 1) = 0;
                    *((unsigned char *)v148 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
                    unint64_t v149 = *((unsigned __int8 *)v148 - 25);
                    unint64_t v150 = *(v148 - 5);
                    v148 -= 3;
                    if ((v149 & 0x80u) != 0) {
                      unint64_t v149 = v150;
                    }
                  }
                  while (v143 > v149);
                  *unint64_t v148 = v147;
                  v148[1] = v145;
                  *(_DWORD *)((char *)v148 + 19) = *(_DWORD *)&v164[3];
                  *((_DWORD *)v148 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_DWORD *)v164;
                  *((unsigned char *)v148 + 23) = v144;
                }
                int v81 = v142 + 3;
                a1 = (unint64_t)v142;
              }
              while (v142 + 3 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if ((_OWORD *)v9 != a2)
            {
              int64_t v97 = (v11 - 2) >> 1;
              int64_t v98 = v97;
              do
              {
                int64_t v99 = v98;
                if (v97 >= v98)
                {
                  uint64_t v100 = (2 * v98) | 1;
                  unint64_t v101 = v9 + 24 * v100;
                  if (2 * v99 + 2 < (uint64_t)v11)
                  {
                    unint64_t v102 = *(unsigned __int8 *)(v101 + 23);
                    if ((v102 & 0x80u) != 0) {
                      unint64_t v102 = *(void *)(v101 + 8);
                    }
                    unint64_t v103 = *(unsigned __int8 *)(v101 + 47);
                    if ((v103 & 0x80u) != 0) {
                      unint64_t v103 = *(void *)(v101 + 32);
                    }
                    v101 += 24 * (v102 > v103);
                    if (v102 > v103) {
                      uint64_t v100 = 2 * v99 + 2;
                    }
                  }
                  unint64_t v104 = v9 + 24 * v99;
                  if (*(char *)(v101 + 23) >= 0) {
                    unint64_t v105 = *(unsigned __int8 *)(v101 + 23);
                  }
                  else {
                    unint64_t v105 = *(void *)(v101 + 8);
                  }
                  unint64_t v106 = *(unsigned __int8 *)(v104 + 23);
                  char v107 = v106;
                  uint64_t v108 = *(void *)(v104 + 8);
                  if ((v106 & 0x80u) != 0) {
                    unint64_t v106 = *(void *)(v104 + 8);
                  }
                  if (v105 <= v106)
                  {
                    uint64_t v109 = *(void *)v104;
                    *(_DWORD *)&v162[3] = *(_DWORD *)(v104 + 19);
                    *(_DWORD *)unint64_t v162 = *(_DWORD *)(v104 + 16);
                    *(void *)(v104 + 8) = 0;
                    *(void *)(v104 + 16) = 0;
                    *(void *)unint64_t v104 = 0;
                    do
                    {
                      unint64_t v110 = v104;
                      unint64_t v104 = v101;
                      long long v111 = *(_OWORD *)v101;
                      *(void *)(v110 + 16) = *(void *)(v101 + 16);
                      *(_OWORD *)unint64_t v110 = v111;
                      *(unsigned char *)(v101 + 23) = 0;
                      *(unsigned char *)unint64_t v101 = 0;
                      if (v97 < v100) {
                        break;
                      }
                      uint64_t v112 = (2 * v100) | 1;
                      unint64_t v101 = v9 + 24 * v112;
                      uint64_t v113 = 2 * v100 + 2;
                      if (v113 < (uint64_t)v11)
                      {
                        unint64_t v114 = *(unsigned __int8 *)(v101 + 23);
                        if ((v114 & 0x80u) != 0) {
                          unint64_t v114 = *(void *)(v101 + 8);
                        }
                        unint64_t v115 = *(unsigned __int8 *)(v101 + 47);
                        if ((v115 & 0x80u) != 0) {
                          unint64_t v115 = *(void *)(v101 + 32);
                        }
                        v101 += 24 * (v114 > v115);
                        if (v114 > v115) {
                          uint64_t v112 = v113;
                        }
                      }
                      unint64_t v116 = *(char *)(v101 + 23) >= 0 ? *(unsigned __int8 *)(v101 + 23) : *(void *)(v101 + 8);
                      uint64_t v100 = v112;
                    }
                    while (v116 <= v106);
                    *(void *)unint64_t v104 = v109;
                    *(void *)(v104 + 8) = v108;
                    *(_DWORD *)(v104 + 16) = *(_DWORD *)v162;
                    *(_DWORD *)(v104 + 19) = *(_DWORD *)&v162[3];
                    *(unsigned char *)(v104 + 23) = v107;
                  }
                }
                int64_t v98 = v99 - 1;
              }
              while (v99);
              int64_t v117 = v10 / 0x18uLL;
              float v153 = (void *)(v9 + 8);
              do
              {
                uint64_t v118 = 0;
                std::string v119 = a2;
                uint64_t v120 = *(void *)a1;
                *(void *)uint64_t v163 = *v153;
                *(void *)&v163[7] = *(void *)((char *)v153 + 7);
                char v121 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                unint64_t v122 = a1;
                do
                {
                  uint64_t v123 = v122 + 24 * v118 + 24;
                  uint64_t v124 = 2 * v118;
                  uint64_t v118 = (2 * v118) | 1;
                  uint64_t v125 = v124 + 2;
                  if (v124 + 2 < v117)
                  {
                    unint64_t v126 = *(unsigned __int8 *)(v123 + 23);
                    if ((v126 & 0x80u) != 0) {
                      unint64_t v126 = *(void *)(v123 + 8);
                    }
                    unint64_t v127 = *(unsigned __int8 *)(v123 + 47);
                    if ((v127 & 0x80u) != 0) {
                      unint64_t v127 = *(void *)(v123 + 32);
                    }
                    v123 += 24 * (v126 > v127);
                    if (v126 > v127) {
                      uint64_t v118 = v125;
                    }
                  }
                  if (*(char *)(v122 + 23) < 0) {
                    operator delete(*(void **)v122);
                  }
                  long long v128 = *(_OWORD *)v123;
                  *(void *)(v122 + 16) = *(void *)(v123 + 16);
                  *(_OWORD *)unint64_t v122 = v128;
                  *(unsigned char *)(v123 + 23) = 0;
                  *(unsigned char *)uint64_t v123 = 0;
                  unint64_t v122 = v123;
                }
                while (v118 <= (uint64_t)((unint64_t)(v117 - 2) >> 1));
                a2 = (_OWORD *)((char *)a2 - 24);
                if ((_OWORD *)v123 == (_OWORD *)((char *)v119 - 24))
                {
                  *(void *)uint64_t v123 = v120;
                  *(void *)(v123 + 8) = *(void *)v163;
                  *(void *)(v123 + 15) = *(void *)&v163[7];
                  *(unsigned char *)(v123 + 23) = v121;
                }
                else
                {
                  long long v129 = *a2;
                  *(void *)(v123 + 16) = *((void *)v119 - 1);
                  *(_OWORD *)uint64_t v123 = v129;
                  *((void *)v119 - 3) = v120;
                  *(void *)((char *)v119 - 9) = *(void *)&v163[7];
                  *((void *)v119 - 2) = *(void *)v163;
                  *((unsigned char *)v119 - 1) = v121;
                  uint64_t v130 = v123 - a1 + 24;
                  if (v130 >= 25)
                  {
                    unint64_t v131 = (v130 / 0x18uLL - 2) >> 1;
                    uint64_t v132 = a1 + 24 * v131;
                    if (*(char *)(v132 + 23) >= 0) {
                      unint64_t v133 = *(unsigned __int8 *)(v132 + 23);
                    }
                    else {
                      unint64_t v133 = *(void *)(v132 + 8);
                    }
                    unint64_t v134 = *(unsigned __int8 *)(v123 + 23);
                    char v135 = v134;
                    uint64_t v136 = *(void *)(v123 + 8);
                    if ((v134 & 0x80u) != 0) {
                      unint64_t v134 = *(void *)(v123 + 8);
                    }
                    if (v133 > v134)
                    {
                      uint64_t v137 = *(void *)v123;
                      *(_DWORD *)&v156[3] = *(_DWORD *)(v123 + 19);
                      *(_DWORD *)uint64_t v156 = *(_DWORD *)(v123 + 16);
                      *(void *)(v123 + 8) = 0;
                      *(void *)(v123 + 16) = 0;
                      *(void *)uint64_t v123 = 0;
                      do
                      {
                        uint64_t v138 = v123;
                        uint64_t v123 = v132;
                        long long v139 = *(_OWORD *)v132;
                        *(void *)(v138 + 16) = *(void *)(v132 + 16);
                        *(_OWORD *)uint64_t v138 = v139;
                        *(unsigned char *)(v132 + 23) = 0;
                        *(unsigned char *)uint64_t v132 = 0;
                        if (!v131) {
                          break;
                        }
                        unint64_t v131 = (v131 - 1) >> 1;
                        uint64_t v132 = a1 + 24 * v131;
                        unint64_t v140 = *(unsigned __int8 *)(v132 + 23);
                        if ((v140 & 0x80u) != 0) {
                          unint64_t v140 = *(void *)(v132 + 8);
                        }
                      }
                      while (v140 > v134);
                      *(void *)uint64_t v123 = v137;
                      *(void *)(v123 + 8) = v136;
                      *(_DWORD *)(v123 + 16) = *(_DWORD *)v156;
                      *(_DWORD *)(v123 + 19) = *(_DWORD *)&v156[3];
                      *(unsigned char *)(v123 + 23) = v135;
                    }
                  }
                }
              }
              while (v117-- > 2);
            }
            return;
          }
          unint64_t v12 = v11 >> 1;
          unint64_t v13 = v9 + 24 * (v11 >> 1);
          if ((unint64_t)v10 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)a1, (long long *)(a1 + 24 * (v11 >> 1)), v151);
            uint64_t v14 = 3 * v12;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)(a1 + 24), (long long *)(a1 + 8 * v14 - 24), a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)(a1 + 48), (long long *)(a1 + 24 + 8 * v14), (_OWORD *)((char *)a2 - 72));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)(a1 + 8 * v14 - 24), (long long *)v13, (long long *)(a1 + 24 + 8 * v14));
            uint64_t v165 = *(void *)(a1 + 16);
            long long v157 = *(_OWORD *)a1;
            uint64_t v15 = *(void *)(v13 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(void *)(a1 + 16) = v15;
            *(void *)(v13 + 16) = v165;
            *(_OWORD *)unint64_t v13 = v157;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)(a1 + 24 * (v11 >> 1)), (long long *)a1, v151);
          }
          --a3;
          if (a4)
          {
            uint64_t v16 = *(void *)(a1 + 8);
            uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
            char v18 = *(unsigned char *)(a1 + 23);
            break;
          }
          unint64_t v19 = *(void *)(a1 - 16);
          if (*(char *)(a1 - 1) >= 0) {
            unint64_t v19 = *(unsigned __int8 *)(a1 - 1);
          }
          uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
          char v18 = v17;
          uint64_t v16 = *(void *)(a1 + 8);
          unint64_t v20 = (v17 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
          if (v19 > v20) {
            break;
          }
          uint64_t v43 = *(void *)a1;
          *(_DWORD *)unint64_t v155 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)&v155[3] = *(_DWORD *)(a1 + 19);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          unint64_t v44 = *((unsigned __int8 *)a2 - 1);
          if ((v44 & 0x80u) != 0) {
            unint64_t v44 = *((void *)a2 - 2);
          }
          if (v20 <= v44)
          {
            unint64_t v48 = a1 + 24;
            do
            {
              unint64_t v9 = v48;
              if (v48 >= (unint64_t)a2) {
                break;
              }
              unint64_t v49 = *(char *)(v48 + 23) >= 0 ? *(unsigned __int8 *)(v48 + 23) : *(void *)(v48 + 8);
              v48 += 24;
            }
            while (v20 <= v49);
          }
          else
          {
            unint64_t v45 = a1;
            do
            {
              unint64_t v9 = v45 + 24;
              unint64_t v46 = *(unsigned __int8 *)(v45 + 47);
              unint64_t v47 = *(void *)(v45 + 32);
              if ((v46 & 0x80u) != 0) {
                unint64_t v46 = v47;
              }
              unint64_t v45 = v9;
            }
            while (v20 <= v46);
          }
          __int16 v50 = a2;
          if (v9 < (unint64_t)a2)
          {
            std::string::size_type v51 = a2;
            do
            {
              __int16 v50 = (long long *)((char *)v51 - 24);
              unint64_t v52 = *((unsigned __int8 *)v51 - 1);
              unint64_t v53 = *((void *)v51 - 2);
              if ((v52 & 0x80u) != 0) {
                unint64_t v52 = v53;
              }
              std::string::size_type v51 = v50;
            }
            while (v20 > v52);
          }
          while (v9 < (unint64_t)v50)
          {
            uint64_t v166 = *(void *)(v9 + 16);
            long long v158 = *(_OWORD *)v9;
            long long v54 = *v50;
            *(void *)(v9 + 16) = *((void *)v50 + 2);
            *(_OWORD *)unint64_t v9 = v54;
            *((void *)v50 + 2) = v166;
            long long *v50 = v158;
            do
            {
              unint64_t v55 = *(unsigned __int8 *)(v9 + 47);
              unint64_t v56 = *(void *)(v9 + 32);
              v9 += 24;
              if ((v55 & 0x80u) != 0) {
                unint64_t v55 = v56;
              }
            }
            while (v20 <= v55);
            do
            {
              unint64_t v57 = *((unsigned __int8 *)v50 - 1);
              unint64_t v58 = *((void *)v50 - 2);
              __int16 v50 = (long long *)((char *)v50 - 24);
              if ((v57 & 0x80u) != 0) {
                unint64_t v57 = v58;
              }
            }
            while (v20 > v57);
          }
          BOOL v4 = v9 - 24 >= a1;
          BOOL v5 = v9 - 24 == a1;
          if (v9 - 24 == a1)
          {
            if (*(char *)(v9 - 1) < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v59 = *(_OWORD *)(v9 - 24);
            *(void *)(a1 + 16) = *(void *)(v9 - 8);
            *(_OWORD *)a1 = v59;
            *(unsigned char *)(v9 - 1) = 0;
          }
          a4 = 0;
          *(void *)(v9 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v43;
          *(void *)(v9 - 16) = v16;
          *(_DWORD *)(v9 - 5) = *(_DWORD *)&v155[3];
          *(_DWORD *)(v9 - 8) = *(_DWORD *)v155;
          *(unsigned char *)(v9 - 1) = v18;
        }
        uint64_t v21 = *(void *)a1;
        *(_DWORD *)uint64_t v154 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)&v154[3] = *(_DWORD *)(a1 + 19);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        unint64_t v22 = v18 >= 0 ? v17 : v16;
        unint64_t v23 = a1;
        do
        {
          unint64_t v24 = v23;
          v23 += 24;
          unint64_t v25 = *(unsigned __int8 *)(v24 + 47);
          if ((v25 & 0x80u) != 0) {
            unint64_t v25 = *(void *)(v24 + 32);
          }
        }
        while (v25 > v22);
        size_t v26 = a2;
        if (v24 == a1)
        {
          std::string::size_type v30 = a2;
          while (v23 < (unint64_t)v30)
          {
            int v27 = (_OWORD *)((char *)v30 - 24);
            unint64_t v31 = *((unsigned __int8 *)v30 - 1);
            unint64_t v32 = *((void *)v30 - 2);
            if ((v31 & 0x80u) != 0) {
              unint64_t v31 = v32;
            }
            std::string::size_type v30 = v27;
            if (v31 > v22) {
              goto LABEL_36;
            }
          }
          int v27 = v30;
        }
        else
        {
          do
          {
            int v27 = (_OWORD *)((char *)v26 - 24);
            unint64_t v28 = *((unsigned __int8 *)v26 - 1);
            unint64_t v29 = *((void *)v26 - 2);
            if ((v28 & 0x80u) != 0) {
              unint64_t v28 = v29;
            }
            size_t v26 = v27;
          }
          while (v28 <= v22);
        }
LABEL_36:
        unint64_t v9 = v23;
        if (v23 < (unint64_t)v27)
        {
          unint64_t v33 = (unint64_t)v27;
          do
          {
            long long v34 = *(_OWORD *)v9;
            uint64_t v35 = *(void *)(v9 + 16);
            uint64_t v36 = *(void *)(v33 + 16);
            *(_OWORD *)unint64_t v9 = *(_OWORD *)v33;
            *(void *)(v9 + 16) = v36;
            *(void *)(v33 + 16) = v35;
            *(_OWORD *)unint64_t v33 = v34;
            do
            {
              unint64_t v37 = *(unsigned __int8 *)(v9 + 47);
              unint64_t v38 = *(void *)(v9 + 32);
              v9 += 24;
              if ((v37 & 0x80u) != 0) {
                unint64_t v37 = v38;
              }
            }
            while (v37 > v22);
            do
            {
              unint64_t v39 = *(unsigned __int8 *)(v33 - 1);
              unint64_t v40 = *(void *)(v33 - 16);
              v33 -= 24;
              if ((v39 & 0x80u) != 0) {
                unint64_t v39 = v40;
              }
            }
            while (v39 <= v22);
          }
          while (v9 < v33);
        }
        if (v9 - 24 == a1)
        {
          if (*(char *)(v9 - 1) < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v41 = *(_OWORD *)(v9 - 24);
          *(void *)(a1 + 16) = *(void *)(v9 - 8);
          *(_OWORD *)a1 = v41;
          *(unsigned char *)(v9 - 1) = 0;
        }
        *(void *)(v9 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v21;
        *(void *)(v9 - 16) = v16;
        *(_DWORD *)(v9 - 5) = *(_DWORD *)&v154[3];
        *(_DWORD *)(v9 - 8) = *(_DWORD *)v154;
        *(unsigned char *)(v9 - 1) = v18;
        if (v23 >= (unint64_t)v27) {
          break;
        }
LABEL_55:
        std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*,false>(a1, v9 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v42 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(a1, v9 - 24);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(v9, (uint64_t)a2))
      {
        break;
      }
      if (!v42) {
        goto LABEL_55;
      }
    }
    a2 = (_OWORD *)(v9 - 24);
    if (!v42) {
      continue;
    }
    break;
  }
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(long long *result, long long *a2, long long *a3)
{
  unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0) {
    unint64_t v3 = *((void *)a2 + 1);
  }
  if (*((char *)result + 23) >= 0) {
    unint64_t v4 = *((unsigned __int8 *)result + 23);
  }
  else {
    unint64_t v4 = *((void *)result + 1);
  }
  unint64_t v5 = *((unsigned __int8 *)a3 + 23);
  if ((v5 & 0x80u) != 0) {
    unint64_t v5 = *((void *)a3 + 1);
  }
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      uint64_t v9 = *((void *)a2 + 2);
      long long v10 = *a2;
      uint64_t v11 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v11;
      *a3 = v10;
      *((void *)a3 + 2) = v9;
      unint64_t v12 = *((unsigned __int8 *)a2 + 23);
      if ((v12 & 0x80u) != 0) {
        unint64_t v12 = *((void *)a2 + 1);
      }
      unint64_t v13 = *((unsigned __int8 *)result + 23);
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *((void *)result + 1);
      }
      if (v12 > v13)
      {
        uint64_t v14 = *((void *)result + 2);
        long long v15 = *result;
        uint64_t v16 = *((void *)a2 + 2);
        *uint64_t result = *a2;
        *((void *)result + 2) = v16;
        *a2 = v15;
        *((void *)a2 + 2) = v14;
      }
    }
  }
  else
  {
    if (v5 > v3)
    {
      uint64_t v6 = *((void *)result + 2);
      long long v7 = *result;
      uint64_t v8 = *((void *)a3 + 2);
      *uint64_t result = *a3;
      *((void *)result + 2) = v8;
LABEL_24:
      *a3 = v7;
      *((void *)a3 + 2) = v6;
      return result;
    }
    uint64_t v17 = *((void *)result + 2);
    long long v18 = *result;
    uint64_t v19 = *((void *)a2 + 2);
    *uint64_t result = *a2;
    *((void *)result + 2) = v19;
    *a2 = v18;
    *((void *)a2 + 2) = v17;
    unint64_t v20 = *((unsigned __int8 *)a3 + 23);
    if ((v20 & 0x80u) != 0) {
      unint64_t v20 = *((void *)a3 + 1);
    }
    unint64_t v21 = *((unsigned __int8 *)a2 + 23);
    if ((v21 & 0x80u) != 0) {
      unint64_t v21 = *((void *)a2 + 1);
    }
    if (v20 > v21)
    {
      uint64_t v6 = *((void *)a2 + 2);
      long long v7 = *a2;
      uint64_t v22 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v22;
      goto LABEL_24;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)a1, (long long *)a2, (long long *)a3);
  unint64_t v9 = *(unsigned __int8 *)(a4 + 23);
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = *(void *)(a4 + 8);
  }
  unint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = *(void *)(a3 + 8);
  }
  if (v9 > v10)
  {
    uint64_t v11 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v12 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v12;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v11;
    unint64_t v13 = *(unsigned __int8 *)(a3 + 23);
    if ((v13 & 0x80u) != 0) {
      unint64_t v13 = *(void *)(a3 + 8);
    }
    unint64_t v14 = *(unsigned __int8 *)(a2 + 23);
    if ((v14 & 0x80u) != 0) {
      unint64_t v14 = *(void *)(a2 + 8);
    }
    if (v13 > v14)
    {
      uint64_t v15 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v16 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v16;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v15;
      unint64_t v17 = *(unsigned __int8 *)(a2 + 23);
      if ((v17 & 0x80u) != 0) {
        unint64_t v17 = *(void *)(a2 + 8);
      }
      unint64_t v18 = *(unsigned __int8 *)(a1 + 23);
      if ((v18 & 0x80u) != 0) {
        unint64_t v18 = *(void *)(a1 + 8);
      }
      if (v17 > v18)
      {
        uint64_t v19 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v20 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v20;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v19;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = *(unsigned __int8 *)(a2 - 1);
      if ((v6 & 0x80u) != 0) {
        unint64_t v6 = *(void *)(a2 - 16);
      }
      unint64_t v7 = *(unsigned __int8 *)(a1 + 23);
      if ((v7 & 0x80u) != 0) {
        unint64_t v7 = *(void *)(a1 + 8);
      }
      if (v6 > v7)
      {
        uint64_t v8 = *(void *)(a1 + 16);
        long long v9 = *(_OWORD *)a1;
        uint64_t v10 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v9;
        *(void *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      unint64_t v25 = (long long *)(a1 + 24);
      size_t v26 = (long long *)(a1 + 48);
      int v27 = (long long *)(a1 + 72);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72);
      unint64_t v28 = *(unsigned __int8 *)(a2 - 1);
      if ((v28 & 0x80u) != 0) {
        unint64_t v28 = *(void *)(a2 - 16);
      }
      unint64_t v29 = *(unsigned __int8 *)(a1 + 95);
      if ((v29 & 0x80u) != 0) {
        unint64_t v29 = *(void *)(a1 + 80);
      }
      if (v28 > v29)
      {
        uint64_t v30 = *(void *)(a1 + 88);
        long long v31 = *v27;
        uint64_t v32 = *(void *)(a2 - 8);
        *int v27 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 88) = v32;
        *(_OWORD *)(a2 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v31;
        *(void *)(a2 - 8) = v30;
        unint64_t v33 = *(unsigned __int8 *)(a1 + 95);
        if ((v33 & 0x80u) != 0) {
          unint64_t v33 = *(void *)(a1 + 80);
        }
        unint64_t v34 = *(unsigned __int8 *)(a1 + 71);
        if ((v34 & 0x80u) != 0) {
          unint64_t v34 = *(void *)(a1 + 56);
        }
        if (v33 > v34)
        {
          uint64_t v35 = *(void *)(a1 + 64);
          long long v36 = *v26;
          *size_t v26 = *v27;
          *(void *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(a1 + 88);
          *int v27 = v36;
          *(void *)(a1 + 88) = v35;
          unint64_t v37 = *(unsigned __int8 *)(a1 + 71);
          if ((v37 & 0x80u) != 0) {
            unint64_t v37 = *(void *)(a1 + 56);
          }
          unint64_t v38 = *(unsigned __int8 *)(a1 + 47);
          if ((v38 & 0x80u) != 0) {
            unint64_t v38 = *(void *)(a1 + 32);
          }
          if (v37 > v38)
          {
            uint64_t v39 = *(void *)(a1 + 40);
            long long v40 = *v25;
            *unint64_t v25 = *v26;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *size_t v26 = v40;
            *(void *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v39;
            unint64_t v41 = *(unsigned __int8 *)(a1 + 47);
            if ((v41 & 0x80u) != 0) {
              unint64_t v41 = *(void *)(a1 + 32);
            }
            unint64_t v42 = *(unsigned __int8 *)(a1 + 23);
            if ((v42 & 0x80u) != 0) {
              unint64_t v42 = *(void *)(a1 + 8);
            }
            if (v41 > v42)
            {
              uint64_t v43 = *(void *)(a1 + 16);
              long long v44 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v25;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *unint64_t v25 = v44;
              *(void *)(a1 + 40) = v43;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v11 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v12 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unint64_t v15 = *(unsigned __int8 *)(v12 + 23);
    char v16 = v15;
    uint64_t v17 = *(void *)(v12 + 8);
    if ((v15 & 0x80u) != 0) {
      unint64_t v15 = *(void *)(v12 + 8);
    }
    unint64_t v18 = *(unsigned __int8 *)(v11 + 23);
    if ((v18 & 0x80u) != 0) {
      unint64_t v18 = *(void *)(v11 + 8);
    }
    if (v15 > v18)
    {
      uint64_t v19 = *(void *)v12;
      *(_DWORD *)unint64_t v45 = *(_DWORD *)(v12 + 16);
      *(_DWORD *)&void v45[3] = *(_DWORD *)(v12 + 19);
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)uint64_t v12 = 0;
      uint64_t v20 = v13;
      while (1)
      {
        uint64_t v21 = a1 + v20;
        *(_OWORD *)(v21 + 72) = *(_OWORD *)(a1 + v20 + 48);
        *(void *)(v21 + 88) = *(void *)(a1 + v20 + 64);
        *(unsigned char *)(v21 + 71) = 0;
        *(unsigned char *)(v21 + 48) = 0;
        if (v20 == -48) {
          break;
        }
        unint64_t v22 = *(unsigned __int8 *)(v21 + 47);
        unint64_t v23 = *(void *)(v21 + 32);
        if ((v22 & 0x80u) == 0) {
          unint64_t v23 = v22;
        }
        v20 -= 24;
        if (v15 <= v23)
        {
          uint64_t v24 = a1 + v20 + 72;
          goto LABEL_23;
        }
      }
      uint64_t v24 = a1;
LABEL_23:
      *(void *)uint64_t v24 = v19;
      *(void *)(v24 + 8) = v17;
      *(_DWORD *)(v24 + 16) = *(_DWORD *)v45;
      *(_DWORD *)(v24 + 19) = *(_DWORD *)&v45[3];
      *(unsigned char *)(v24 + 23) = v16;
      if (++v14 == 8) {
        return v12 + 24 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 24;
    v12 += 24;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t *SiriTTS::PhoneticAlphabet::PhoneticAlphabet(uint64_t *a1, const void **a2, uint64_t a3)
{
  v43[2] = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  SiriTTS::package_path((SiriTTS *)v35);
  long long v37 = *(_OWORD *)v35;
  uint64_t v38 = v36;
  v35[1] = 0;
  uint64_t v36 = 0;
  v35[0] = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(&v34.__pn_, "PhoneticAlphabet");
  std::__fs::filesystem::operator/[abi:ne180100](&v34, (uint64_t)&v37, &v25);
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  unint64_t v7 = &v32;
  std::string::basic_string[abi:ne180100]((uint64_t)&v32, v6 + 1);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a3;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a3 + 8);
  }
  uint64_t v12 = std::string::append(&v32, v10, v11);
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[0];
  v43[0] = v12->__r_.__value_.__l.__size_;
  *(void *)((char *)v43 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v33.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v43 + 7);
  v33.__pn_.__r_.__value_.__r.__words[0] = v13;
  v33.__pn_.__r_.__value_.__l.__size_ = v43[0];
  *((unsigned char *)&v33.__pn_.__r_.__value_.__s + 23) = v14;
  v43[0] = 0;
  *(void *)((char *)v43 + 7) = 0;
  std::__fs::filesystem::operator/[abi:ne180100](&v33, (uint64_t)&v25, &v28);
  memset(&v31, 0, sizeof(v31));
  std::string::append[abi:ne180100]<char const*,0>(&v31.__pn_, "symbols.json", "");
  std::__fs::filesystem::operator/[abi:ne180100](&v31, (uint64_t)&v28, __p);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&pn, __p[0].__pn_.__r_.__value_.__l.__data_, __p[0].__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    pptrdiff_t n = __p[0].__pn_;
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(v35[0]);
  }
  std::ifstream::basic_ifstream((uint64_t *)__p);
  if (!v41)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x10uLL);
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v23 = (const char *)a2;
    }
    else {
      unint64_t v23 = (const char *)*a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v24 = (const char *)a3;
    }
    else {
      uint64_t v24 = *(const char **)a3;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v28, "Unable to find symbols for '%s' with '%s'", v23, v24);
    MEMORY[0x210558D40](exception, &v28);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  LOBYTE(v37) = 0;
  *((void *)&v37 + 1) = 0;
  nlohmann::operator>>(__p, (uint64_t)&v37);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__p + *(void *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__pn_.__r_.__value_.__r.__words[1]+ *(void *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)) | 4);
  }
  v28.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  *(_OWORD *)&v28.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
  uint64_t v29 = 0;
  unint64_t v30 = 0x8000000000000000;
  if ((_BYTE)v37)
  {
    if (v37 == 2)
    {
      v28.__pn_.__r_.__value_.__r.__words[2] = **((void **)&v37 + 1);
    }
    else if (v37 == 1)
    {
      v28.__pn_.__r_.__value_.__l.__size_ = **((void **)&v37 + 1);
    }
    else
    {
      unint64_t v30 = 0;
    }
  }
  else
  {
    unint64_t v30 = 1;
  }
  while (1)
  {
    uint64_t v26 = 0;
    *(_OWORD *)&v25.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
    v25.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    unint64_t v27 = 0x8000000000000000;
    if (v37 == 2)
    {
      v25.__pn_.__r_.__value_.__r.__words[2] = *(void *)(*((void *)&v37 + 1) + 8);
    }
    else if (v37 == 1)
    {
      v25.__pn_.__r_.__value_.__l.__size_ = *((void *)&v37 + 1) + 8;
    }
    else
    {
      unint64_t v27 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v28, (unsigned __int8 **)&v25))
    {
      break;
    }
    unint64_t v15 = (long long *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key((uint64_t)&v28);
    unint64_t v16 = a1[1];
    if (v16 >= a1[2])
    {
      uint64_t v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, v15);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, v15);
      uint64_t v17 = v16 + 24;
    }
    a1[1] = v17;
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v28);
  }
  unint64_t v18 = (_OWORD *)a1[1];
  unint64_t v19 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - *a1) >> 3));
  if (v18 == (_OWORD *)*a1) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*,false>(*a1, v18, v20, 1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v37 + 1, v37);
  __p[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2A8];
  *(std::string::size_type *)((char *)__p[0].__pn_.__r_.__value_.__r.__words
                            + *(void *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x210558FE0](&__p[0].__pn_.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x210559500](&v42);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_20D36FAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  unint64_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_20D36FC78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *nlohmann::operator>>(void *a1, uint64_t a2)
{
  v8[18] = *(void **)MEMORY[0x263EF8340];
  v5[0] = a1;
  v5[1] = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  v6[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v5, (uint64_t)v6, 1, (uint64_t)v7);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v7, 0, a2);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v8);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v6);
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v5);
  return a1;
}

void sub_20D36FD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer((void **)(v15 + 40));
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](&a15);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](&a11);
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)&a9);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*,false>(unint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unsigned int v151 = (_OWORD *)((char *)a2 - 24);
    unint64_t v9 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v9;
          uint64_t v10 = (uint64_t)a2 - v9;
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v60 = *((unsigned __int8 *)a2 - 1);
                if ((v60 & 0x80u) != 0) {
                  unint64_t v60 = *((void *)a2 - 2);
                }
                unint64_t v61 = *(unsigned __int8 *)(v9 + 23);
                if ((v61 & 0x80u) != 0) {
                  unint64_t v61 = *(void *)(v9 + 8);
                }
                if (v60 > v61)
                {
                  uint64_t v167 = *(void *)(v9 + 16);
                  long long v159 = *(_OWORD *)v9;
                  long long v62 = *v151;
                  *(void *)(v9 + 16) = *((void *)a2 - 1);
                  *(_OWORD *)unint64_t v9 = v62;
                  *((void *)a2 - 1) = v167;
                  long long *v151 = v159;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)v9, (long long *)(v9 + 24), v151);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(v9, v9 + 24, v9 + 48, (uint64_t)v151);
                break;
              case 5uLL:
                unint64_t v63 = (long long *)(v9 + 24);
                std::string::size_type v64 = (long long *)(v9 + 48);
                std::string::size_type v65 = (long long *)(v9 + 72);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(v9, v9 + 24, v9 + 48, v9 + 72);
                unint64_t v66 = *((unsigned __int8 *)a2 - 1);
                if ((v66 & 0x80u) != 0) {
                  unint64_t v66 = *((void *)a2 - 2);
                }
                unint64_t v67 = *(unsigned __int8 *)(v9 + 95);
                if ((v67 & 0x80u) != 0) {
                  unint64_t v67 = *(void *)(v9 + 80);
                }
                if (v66 > v67)
                {
                  long long v68 = *v65;
                  uint64_t v69 = *(void *)(v9 + 88);
                  uint64_t v70 = *((void *)a2 - 1);
                  *std::string::size_type v65 = *v151;
                  *(void *)(v9 + 88) = v70;
                  *((void *)a2 - 1) = v69;
                  long long *v151 = v68;
                  unint64_t v71 = *(unsigned __int8 *)(v9 + 95);
                  if ((v71 & 0x80u) != 0) {
                    unint64_t v71 = *(void *)(v9 + 80);
                  }
                  unint64_t v72 = *(unsigned __int8 *)(v9 + 71);
                  if ((v72 & 0x80u) != 0) {
                    unint64_t v72 = *(void *)(v9 + 56);
                  }
                  if (v71 > v72)
                  {
                    uint64_t v73 = *(void *)(v9 + 64);
                    long long v74 = *v64;
                    *std::string::size_type v64 = *v65;
                    *(void *)(v9 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(v9 + 88);
                    *std::string::size_type v65 = v74;
                    *(void *)(v9 + 88) = v73;
                    unint64_t v75 = *(unsigned __int8 *)(v9 + 71);
                    if ((v75 & 0x80u) != 0) {
                      unint64_t v75 = *(void *)(v9 + 56);
                    }
                    unint64_t v76 = *(unsigned __int8 *)(v9 + 47);
                    if ((v76 & 0x80u) != 0) {
                      unint64_t v76 = *(void *)(v9 + 32);
                    }
                    if (v75 > v76)
                    {
                      uint64_t v77 = *(void *)(v9 + 40);
                      long long v78 = *v63;
                      *unint64_t v63 = *v64;
                      *(void *)(v9 + 40) = *(void *)(v9 + 64);
                      *std::string::size_type v64 = v78;
                      *(void *)(v9 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v77;
                      unint64_t v79 = *(unsigned __int8 *)(v9 + 47);
                      if ((v79 & 0x80u) != 0) {
                        unint64_t v79 = *(void *)(v9 + 32);
                      }
                      unint64_t v80 = *(unsigned __int8 *)(v9 + 23);
                      if ((v80 & 0x80u) != 0) {
                        unint64_t v80 = *(void *)(v9 + 8);
                      }
                      if (v79 > v80)
                      {
                        uint64_t v168 = *(void *)(v9 + 16);
                        long long v160 = *(_OWORD *)v9;
                        *(_OWORD *)unint64_t v9 = *v63;
                        *(void *)(v9 + 16) = *(void *)(v9 + 40);
                        *unint64_t v63 = v160;
                        *(void *)(v9 + 40) = v168;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v10 <= 575)
          {
            int v81 = (void *)(v9 + 24);
            BOOL v83 = (_OWORD *)v9 == a2 || v81 == (void *)a2;
            if (a4)
            {
              if (!v83)
              {
                uint64_t v84 = 0;
                int64_t v85 = (void *)v9;
                do
                {
                  unint64_t v86 = v81;
                  unint64_t v87 = *((unsigned __int8 *)v85 + 47);
                  char v88 = v87;
                  uint64_t v89 = v85[4];
                  if ((v87 & 0x80u) != 0) {
                    unint64_t v87 = v85[4];
                  }
                  unint64_t v90 = *((unsigned __int8 *)v85 + 23);
                  if ((v90 & 0x80u) != 0) {
                    unint64_t v90 = v85[1];
                  }
                  if (v87 > v90)
                  {
                    uint64_t v91 = *v86;
                    *(_DWORD *)unint64_t v161 = *((_DWORD *)v85 + 10);
                    *(_DWORD *)&v161[3] = *(_DWORD *)((char *)v85 + 43);
                    v86[1] = 0;
                    v86[2] = 0;
                    *unint64_t v86 = 0;
                    uint64_t v92 = v84;
                    while (1)
                    {
                      uint64_t v93 = v9 + v92;
                      *(_OWORD *)(v93 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_OWORD *)(v9 + v92);
                      *(void *)(v93 + 40) = *(void *)(v9 + v92 + 16);
                      *(unsigned char *)(v93 + 23) = 0;
                      *(unsigned char *)uint64_t v93 = 0;
                      if (!v92) {
                        break;
                      }
                      unint64_t v94 = *(unsigned __int8 *)(v93 - 1);
                      unint64_t v95 = *(void *)(v93 - 16);
                      if ((v94 & 0x80u) == 0) {
                        unint64_t v95 = v94;
                      }
                      v92 -= 24;
                      if (v87 <= v95)
                      {
                        uint64_t v96 = v9 + v92 + 24;
                        goto LABEL_148;
                      }
                    }
                    uint64_t v96 = v9;
LABEL_148:
                    *(void *)uint64_t v96 = v91;
                    *(void *)(v96 + 8) = v89;
                    *(_DWORD *)(v96 + 16) = *(_DWORD *)v161;
                    *(_DWORD *)(v96 + 19) = *(_DWORD *)&v161[3];
                    *(unsigned char *)(v96 + 23) = v88;
                  }
                  int v81 = v86 + 3;
                  v84 += 24;
                  int64_t v85 = v86;
                }
                while (v86 + 3 != (void *)a2);
              }
            }
            else if (!v83)
            {
              do
              {
                uint64_t v142 = v81;
                unint64_t v143 = *(unsigned __int8 *)(a1 + 47);
                char v144 = v143;
                uint64_t v145 = *(void *)(a1 + 32);
                if ((v143 & 0x80u) != 0) {
                  unint64_t v143 = *(void *)(a1 + 32);
                }
                unint64_t v146 = *(unsigned __int8 *)(a1 + 23);
                if ((v146 & 0x80u) != 0) {
                  unint64_t v146 = *(void *)(a1 + 8);
                }
                if (v143 > v146)
                {
                  uint64_t v147 = *v142;
                  *(_DWORD *)uint64_t v164 = *(_DWORD *)(a1 + 40);
                  *(_DWORD *)&v164[3] = *(_DWORD *)(a1 + 43);
                  v142[1] = 0;
                  v142[2] = 0;
                  *uint64_t v142 = 0;
                  unint64_t v148 = v142;
                  do
                  {
                    *(_OWORD *)unint64_t v148 = *(_OWORD *)(v148 - 3);
                    v148[2] = *(v148 - 1);
                    *((unsigned char *)v148 - 1) = 0;
                    *((unsigned char *)v148 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
                    unint64_t v149 = *((unsigned __int8 *)v148 - 25);
                    unint64_t v150 = *(v148 - 5);
                    v148 -= 3;
                    if ((v149 & 0x80u) != 0) {
                      unint64_t v149 = v150;
                    }
                  }
                  while (v143 > v149);
                  *unint64_t v148 = v147;
                  v148[1] = v145;
                  *(_DWORD *)((char *)v148 + 19) = *(_DWORD *)&v164[3];
                  *((_DWORD *)v148 + std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(_DWORD *)v164;
                  *((unsigned char *)v148 + 23) = v144;
                }
                int v81 = v142 + 3;
                a1 = (unint64_t)v142;
              }
              while (v142 + 3 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if ((_OWORD *)v9 != a2)
            {
              int64_t v97 = (v11 - 2) >> 1;
              int64_t v98 = v97;
              do
              {
                int64_t v99 = v98;
                if (v97 >= v98)
                {
                  uint64_t v100 = (2 * v98) | 1;
                  unint64_t v101 = v9 + 24 * v100;
                  if (2 * v99 + 2 < (uint64_t)v11)
                  {
                    unint64_t v102 = *(unsigned __int8 *)(v101 + 23);
                    if ((v102 & 0x80u) != 0) {
                      unint64_t v102 = *(void *)(v101 + 8);
                    }
                    unint64_t v103 = *(unsigned __int8 *)(v101 + 47);
                    if ((v103 & 0x80u) != 0) {
                      unint64_t v103 = *(void *)(v101 + 32);
                    }
                    v101 += 24 * (v102 > v103);
                    if (v102 > v103) {
                      uint64_t v100 = 2 * v99 + 2;
                    }
                  }
                  unint64_t v104 = v9 + 24 * v99;
                  if (*(char *)(v101 + 23) >= 0) {
                    unint64_t v105 = *(unsigned __int8 *)(v101 + 23);
                  }
                  else {
                    unint64_t v105 = *(void *)(v101 + 8);
                  }
                  unint64_t v106 = *(unsigned __int8 *)(v104 + 23);
                  char v107 = v106;
                  uint64_t v108 = *(void *)(v104 + 8);
                  if ((v106 & 0x80u) != 0) {
                    unint64_t v106 = *(void *)(v104 + 8);
                  }
                  if (v105 <= v106)
                  {
                    uint64_t v109 = *(void *)v104;
                    *(_DWORD *)&v162[3] = *(_DWORD *)(v104 + 19);
                    *(_DWORD *)unint64_t v162 = *(_DWORD *)(v104 + 16);
                    *(void *)(v104 + 8) = 0;
                    *(void *)(v104 + 16) = 0;
                    *(void *)unint64_t v104 = 0;
                    do
                    {
                      unint64_t v110 = v104;
                      unint64_t v104 = v101;
                      long long v111 = *(_OWORD *)v101;
                      *(void *)(v110 + 16) = *(void *)(v101 + 16);
                      *(_OWORD *)unint64_t v110 = v111;
                      *(unsigned char *)(v101 + 23) = 0;
                      *(unsigned char *)unint64_t v101 = 0;
                      if (v97 < v100) {
                        break;
                      }
                      uint64_t v112 = (2 * v100) | 1;
                      unint64_t v101 = v9 + 24 * v112;
                      uint64_t v113 = 2 * v100 + 2;
                      if (v113 < (uint64_t)v11)
                      {
                        unint64_t v114 = *(unsigned __int8 *)(v101 + 23);
                        if ((v114 & 0x80u) != 0) {
                          unint64_t v114 = *(void *)(v101 + 8);
                        }
                        unint64_t v115 = *(unsigned __int8 *)(v101 + 47);
                        if ((v115 & 0x80u) != 0) {
                          unint64_t v115 = *(void *)(v101 + 32);
                        }
                        v101 += 24 * (v114 > v115);
                        if (v114 > v115) {
                          uint64_t v112 = v113;
                        }
                      }
                      unint64_t v116 = *(char *)(v101 + 23) >= 0 ? *(unsigned __int8 *)(v101 + 23) : *(void *)(v101 + 8);
                      uint64_t v100 = v112;
                    }
                    while (v116 <= v106);
                    *(void *)unint64_t v104 = v109;
                    *(void *)(v104 + 8) = v108;
                    *(_DWORD *)(v104 + 16) = *(_DWORD *)v162;
                    *(_DWORD *)(v104 + 19) = *(_DWORD *)&v162[3];
                    *(unsigned char *)(v104 + 23) = v107;
                  }
                }
                int64_t v98 = v99 - 1;
              }
              while (v99);
              int64_t v117 = v10 / 0x18uLL;
              float v153 = (void *)(v9 + 8);
              do
              {
                uint64_t v118 = 0;
                std::string v119 = a2;
                uint64_t v120 = *(void *)a1;
                *(void *)uint64_t v163 = *v153;
                *(void *)&v163[7] = *(void *)((char *)v153 + 7);
                char v121 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                unint64_t v122 = a1;
                do
                {
                  uint64_t v123 = v122 + 24 * v118 + 24;
                  uint64_t v124 = 2 * v118;
                  uint64_t v118 = (2 * v118) | 1;
                  uint64_t v125 = v124 + 2;
                  if (v124 + 2 < v117)
                  {
                    unint64_t v126 = *(unsigned __int8 *)(v123 + 23);
                    if ((v126 & 0x80u) != 0) {
                      unint64_t v126 = *(void *)(v123 + 8);
                    }
                    unint64_t v127 = *(unsigned __int8 *)(v123 + 47);
                    if ((v127 & 0x80u) != 0) {
                      unint64_t v127 = *(void *)(v123 + 32);
                    }
                    v123 += 24 * (v126 > v127);
                    if (v126 > v127) {
                      uint64_t v118 = v125;
                    }
                  }
                  if (*(char *)(v122 + 23) < 0) {
                    operator delete(*(void **)v122);
                  }
                  long long v128 = *(_OWORD *)v123;
                  *(void *)(v122 + 16) = *(void *)(v123 + 16);
                  *(_OWORD *)unint64_t v122 = v128;
                  *(unsigned char *)(v123 + 23) = 0;
                  *(unsigned char *)uint64_t v123 = 0;
                  unint64_t v122 = v123;
                }
                while (v118 <= (uint64_t)((unint64_t)(v117 - 2) >> 1));
                a2 = (_OWORD *)((char *)a2 - 24);
                if ((_OWORD *)v123 == (_OWORD *)((char *)v119 - 24))
                {
                  *(void *)uint64_t v123 = v120;
                  *(void *)(v123 + 8) = *(void *)v163;
                  *(void *)(v123 + 15) = *(void *)&v163[7];
                  *(unsigned char *)(v123 + 23) = v121;
                }
                else
                {
                  long long v129 = *a2;
                  *(void *)(v123 + 16) = *((void *)v119 - 1);
                  *(_OWORD *)uint64_t v123 = v129;
                  *((void *)v119 - 3) = v120;
                  *(void *)((char *)v119 - 9) = *(void *)&v163[7];
                  *((void *)v119 - 2) = *(void *)v163;
                  *((unsigned char *)v119 - 1) = v121;
                  uint64_t v130 = v123 - a1 + 24;
                  if (v130 >= 25)
                  {
                    unint64_t v131 = (v130 / 0x18uLL - 2) >> 1;
                    uint64_t v132 = a1 + 24 * v131;
                    if (*(char *)(v132 + 23) >= 0) {
                      unint64_t v133 = *(unsigned __int8 *)(v132 + 23);
                    }
                    else {
                      unint64_t v133 = *(void *)(v132 + 8);
                    }
                    unint64_t v134 = *(unsigned __int8 *)(v123 + 23);
                    char v135 = v134;
                    uint64_t v136 = *(void *)(v123 + 8);
                    if ((v134 & 0x80u) != 0) {
                      unint64_t v134 = *(void *)(v123 + 8);
                    }
                    if (v133 > v134)
                    {
                      uint64_t v137 = *(void *)v123;
                      *(_DWORD *)&v156[3] = *(_DWORD *)(v123 + 19);
                      *(_DWORD *)uint64_t v156 = *(_DWORD *)(v123 + 16);
                      *(void *)(v123 + 8) = 0;
                      *(void *)(v123 + 16) = 0;
                      *(void *)uint64_t v123 = 0;
                      do
                      {
                        uint64_t v138 = v123;
                        uint64_t v123 = v132;
                        long long v139 = *(_OWORD *)v132;
                        *(void *)(v138 + 16) = *(void *)(v132 + 16);
                        *(_OWORD *)uint64_t v138 = v139;
                        *(unsigned char *)(v132 + 23) = 0;
                        *(unsigned char *)uint64_t v132 = 0;
                        if (!v131) {
                          break;
                        }
                        unint64_t v131 = (v131 - 1) >> 1;
                        uint64_t v132 = a1 + 24 * v131;
                        unint64_t v140 = *(unsigned __int8 *)(v132 + 23);
                        if ((v140 & 0x80u) != 0) {
                          unint64_t v140 = *(void *)(v132 + 8);
                        }
                      }
                      while (v140 > v134);
                      *(void *)uint64_t v123 = v137;
                      *(void *)(v123 + 8) = v136;
                      *(_DWORD *)(v123 + 16) = *(_DWORD *)v156;
                      *(_DWORD *)(v123 + 19) = *(_DWORD *)&v156[3];
                      *(unsigned char *)(v123 + 23) = v135;
                    }
                  }
                }
              }
              while (v117-- > 2);
            }
            return;
          }
          unint64_t v12 = v11 >> 1;
          unint64_t v13 = v9 + 24 * (v11 >> 1);
          if ((unint64_t)v10 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)a1, (long long *)(a1 + 24 * (v11 >> 1)), v151);
            uint64_t v14 = 3 * v12;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)(a1 + 24), (long long *)(a1 + 8 * v14 - 24), a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)(a1 + 48), (long long *)(a1 + 24 + 8 * v14), (_OWORD *)((char *)a2 - 72));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)(a1 + 8 * v14 - 24), (long long *)v13, (long long *)(a1 + 24 + 8 * v14));
            uint64_t v165 = *(void *)(a1 + 16);
            long long v157 = *(_OWORD *)a1;
            uint64_t v15 = *(void *)(v13 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(void *)(a1 + 16) = v15;
            *(void *)(v13 + 16) = v165;
            *(_OWORD *)unint64_t v13 = v157;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)(a1 + 24 * (v11 >> 1)), (long long *)a1, v151);
          }
          --a3;
          if (a4)
          {
            uint64_t v16 = *(void *)(a1 + 8);
            uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
            char v18 = *(unsigned char *)(a1 + 23);
            break;
          }
          unint64_t v19 = *(void *)(a1 - 16);
          if (*(char *)(a1 - 1) >= 0) {
            unint64_t v19 = *(unsigned __int8 *)(a1 - 1);
          }
          uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
          char v18 = v17;
          uint64_t v16 = *(void *)(a1 + 8);
          unint64_t v20 = (v17 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
          if (v19 > v20) {
            break;
          }
          uint64_t v43 = *(void *)a1;
          *(_DWORD *)unint64_t v155 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)&v155[3] = *(_DWORD *)(a1 + 19);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          unint64_t v44 = *((unsigned __int8 *)a2 - 1);
          if ((v44 & 0x80u) != 0) {
            unint64_t v44 = *((void *)a2 - 2);
          }
          if (v20 <= v44)
          {
            unint64_t v48 = a1 + 24;
            do
            {
              unint64_t v9 = v48;
              if (v48 >= (unint64_t)a2) {
                break;
              }
              unint64_t v49 = *(char *)(v48 + 23) >= 0 ? *(unsigned __int8 *)(v48 + 23) : *(void *)(v48 + 8);
              v48 += 24;
            }
            while (v20 <= v49);
          }
          else
          {
            unint64_t v45 = a1;
            do
            {
              unint64_t v9 = v45 + 24;
              unint64_t v46 = *(unsigned __int8 *)(v45 + 47);
              unint64_t v47 = *(void *)(v45 + 32);
              if ((v46 & 0x80u) != 0) {
                unint64_t v46 = v47;
              }
              unint64_t v45 = v9;
            }
            while (v20 <= v46);
          }
          __int16 v50 = a2;
          if (v9 < (unint64_t)a2)
          {
            std::string::size_type v51 = a2;
            do
            {
              __int16 v50 = (long long *)((char *)v51 - 24);
              unint64_t v52 = *((unsigned __int8 *)v51 - 1);
              unint64_t v53 = *((void *)v51 - 2);
              if ((v52 & 0x80u) != 0) {
                unint64_t v52 = v53;
              }
              std::string::size_type v51 = v50;
            }
            while (v20 > v52);
          }
          while (v9 < (unint64_t)v50)
          {
            uint64_t v166 = *(void *)(v9 + 16);
            long long v158 = *(_OWORD *)v9;
            long long v54 = *v50;
            *(void *)(v9 + 16) = *((void *)v50 + 2);
            *(_OWORD *)unint64_t v9 = v54;
            *((void *)v50 + 2) = v166;
            long long *v50 = v158;
            do
            {
              unint64_t v55 = *(unsigned __int8 *)(v9 + 47);
              unint64_t v56 = *(void *)(v9 + 32);
              v9 += 24;
              if ((v55 & 0x80u) != 0) {
                unint64_t v55 = v56;
              }
            }
            while (v20 <= v55);
            do
            {
              unint64_t v57 = *((unsigned __int8 *)v50 - 1);
              unint64_t v58 = *((void *)v50 - 2);
              __int16 v50 = (long long *)((char *)v50 - 24);
              if ((v57 & 0x80u) != 0) {
                unint64_t v57 = v58;
              }
            }
            while (v20 > v57);
          }
          BOOL v4 = v9 - 24 >= a1;
          BOOL v5 = v9 - 24 == a1;
          if (v9 - 24 == a1)
          {
            if (*(char *)(v9 - 1) < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v59 = *(_OWORD *)(v9 - 24);
            *(void *)(a1 + 16) = *(void *)(v9 - 8);
            *(_OWORD *)a1 = v59;
            *(unsigned char *)(v9 - 1) = 0;
          }
          a4 = 0;
          *(void *)(v9 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v43;
          *(void *)(v9 - 16) = v16;
          *(_DWORD *)(v9 - 5) = *(_DWORD *)&v155[3];
          *(_DWORD *)(v9 - 8) = *(_DWORD *)v155;
          *(unsigned char *)(v9 - 1) = v18;
        }
        uint64_t v21 = *(void *)a1;
        *(_DWORD *)uint64_t v154 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)&v154[3] = *(_DWORD *)(a1 + 19);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        unint64_t v22 = v18 >= 0 ? v17 : v16;
        unint64_t v23 = a1;
        do
        {
          unint64_t v24 = v23;
          v23 += 24;
          unint64_t v25 = *(unsigned __int8 *)(v24 + 47);
          if ((v25 & 0x80u) != 0) {
            unint64_t v25 = *(void *)(v24 + 32);
          }
        }
        while (v25 > v22);
        uint64_t v26 = a2;
        if (v24 == a1)
        {
          unint64_t v30 = a2;
          while (v23 < (unint64_t)v30)
          {
            unint64_t v27 = (_OWORD *)((char *)v30 - 24);
            unint64_t v31 = *((unsigned __int8 *)v30 - 1);
            unint64_t v32 = *((void *)v30 - 2);
            if ((v31 & 0x80u) != 0) {
              unint64_t v31 = v32;
            }
            unint64_t v30 = v27;
            if (v31 > v22) {
              goto LABEL_36;
            }
          }
          unint64_t v27 = v30;
        }
        else
        {
          do
          {
            unint64_t v27 = (_OWORD *)((char *)v26 - 24);
            unint64_t v28 = *((unsigned __int8 *)v26 - 1);
            unint64_t v29 = *((void *)v26 - 2);
            if ((v28 & 0x80u) != 0) {
              unint64_t v28 = v29;
            }
            uint64_t v26 = v27;
          }
          while (v28 <= v22);
        }
LABEL_36:
        unint64_t v9 = v23;
        if (v23 < (unint64_t)v27)
        {
          unint64_t v33 = (unint64_t)v27;
          do
          {
            long long v34 = *(_OWORD *)v9;
            uint64_t v35 = *(void *)(v9 + 16);
            uint64_t v36 = *(void *)(v33 + 16);
            *(_OWORD *)unint64_t v9 = *(_OWORD *)v33;
            *(void *)(v9 + 16) = v36;
            *(void *)(v33 + 16) = v35;
            *(_OWORD *)unint64_t v33 = v34;
            do
            {
              unint64_t v37 = *(unsigned __int8 *)(v9 + 47);
              unint64_t v38 = *(void *)(v9 + 32);
              v9 += 24;
              if ((v37 & 0x80u) != 0) {
                unint64_t v37 = v38;
              }
            }
            while (v37 > v22);
            do
            {
              unint64_t v39 = *(unsigned __int8 *)(v33 - 1);
              unint64_t v40 = *(void *)(v33 - 16);
              v33 -= 24;
              if ((v39 & 0x80u) != 0) {
                unint64_t v39 = v40;
              }
            }
            while (v39 <= v22);
          }
          while (v9 < v33);
        }
        if (v9 - 24 == a1)
        {
          if (*(char *)(v9 - 1) < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v41 = *(_OWORD *)(v9 - 24);
          *(void *)(a1 + 16) = *(void *)(v9 - 8);
          *(_OWORD *)a1 = v41;
          *(unsigned char *)(v9 - 1) = 0;
        }
        *(void *)(v9 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v21;
        *(void *)(v9 - 16) = v16;
        *(_DWORD *)(v9 - 5) = *(_DWORD *)&v154[3];
        *(_DWORD *)(v9 - 8) = *(_DWORD *)v154;
        *(unsigned char *)(v9 - 1) = v18;
        if (v23 >= (unint64_t)v27) {
          break;
        }
LABEL_55:
        std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*,false>(a1, v9 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v42 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*>(a1, v9 - 24);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*>(v9, (uint64_t)a2))
      {
        break;
      }
      if (!v42) {
        goto LABEL_55;
      }
    }
    a2 = (_OWORD *)(v9 - 24);
    if (!v42) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = *(unsigned __int8 *)(a2 - 1);
      if ((v6 & 0x80u) != 0) {
        unint64_t v6 = *(void *)(a2 - 16);
      }
      unint64_t v7 = *(unsigned __int8 *)(a1 + 23);
      if ((v7 & 0x80u) != 0) {
        unint64_t v7 = *(void *)(a1 + 8);
      }
      if (v6 > v7)
      {
        uint64_t v8 = *(void *)(a1 + 16);
        long long v9 = *(_OWORD *)a1;
        uint64_t v10 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v9;
        *(void *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      unint64_t v25 = (long long *)(a1 + 24);
      uint64_t v26 = (long long *)(a1 + 48);
      unint64_t v27 = (long long *)(a1 + 72);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72);
      unint64_t v28 = *(unsigned __int8 *)(a2 - 1);
      if ((v28 & 0x80u) != 0) {
        unint64_t v28 = *(void *)(a2 - 16);
      }
      unint64_t v29 = *(unsigned __int8 *)(a1 + 95);
      if ((v29 & 0x80u) != 0) {
        unint64_t v29 = *(void *)(a1 + 80);
      }
      if (v28 > v29)
      {
        uint64_t v30 = *(void *)(a1 + 88);
        long long v31 = *v27;
        uint64_t v32 = *(void *)(a2 - 8);
        *unint64_t v27 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 88) = v32;
        *(_OWORD *)(a2 - 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v31;
        *(void *)(a2 - 8) = v30;
        unint64_t v33 = *(unsigned __int8 *)(a1 + 95);
        if ((v33 & 0x80u) != 0) {
          unint64_t v33 = *(void *)(a1 + 80);
        }
        unint64_t v34 = *(unsigned __int8 *)(a1 + 71);
        if ((v34 & 0x80u) != 0) {
          unint64_t v34 = *(void *)(a1 + 56);
        }
        if (v33 > v34)
        {
          uint64_t v35 = *(void *)(a1 + 64);
          long long v36 = *v26;
          *uint64_t v26 = *v27;
          *(void *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = *(void *)(a1 + 88);
          *unint64_t v27 = v36;
          *(void *)(a1 + 88) = v35;
          unint64_t v37 = *(unsigned __int8 *)(a1 + 71);
          if ((v37 & 0x80u) != 0) {
            unint64_t v37 = *(void *)(a1 + 56);
          }
          unint64_t v38 = *(unsigned __int8 *)(a1 + 47);
          if ((v38 & 0x80u) != 0) {
            unint64_t v38 = *(void *)(a1 + 32);
          }
          if (v37 > v38)
          {
            uint64_t v39 = *(void *)(a1 + 40);
            long long v40 = *v25;
            *unint64_t v25 = *v26;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *uint64_t v26 = v40;
            *(void *)(a1 + 6std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = v39;
            unint64_t v41 = *(unsigned __int8 *)(a1 + 47);
            if ((v41 & 0x80u) != 0) {
              unint64_t v41 = *(void *)(a1 + 32);
            }
            unint64_t v42 = *(unsigned __int8 *)(a1 + 23);
            if ((v42 & 0x80u) != 0) {
              unint64_t v42 = *(void *)(a1 + 8);
            }
            if (v41 > v42)
            {
              uint64_t v43 = *(void *)(a1 + 16);
              long long v44 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v25;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *unint64_t v25 = v44;
              *(void *)(a1 + 40) = v43;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v11 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v12 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unint64_t v15 = *(unsigned __int8 *)(v12 + 23);
    char v16 = v15;
    uint64_t v17 = *(void *)(v12 + 8);
    if ((v15 & 0x80u) != 0) {
      unint64_t v15 = *(void *)(v12 + 8);
    }
    unint64_t v18 = *(unsigned __int8 *)(v11 + 23);
    if ((v18 & 0x80u) != 0) {
      unint64_t v18 = *(void *)(v11 + 8);
    }
    if (v15 > v18)
    {
      uint64_t v19 = *(void *)v12;
      *(_DWORD *)unint64_t v45 = *(_DWORD *)(v12 + 16);
      *(_DWORD *)&void v45[3] = *(_DWORD *)(v12 + 19);
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)uint64_t v12 = 0;
      uint64_t v20 = v13;
      while (1)
      {
        uint64_t v21 = a1 + v20;
        *(_OWORD *)(v21 + 72) = *(_OWORD *)(a1 + v20 + 48);
        *(void *)(v21 + 88) = *(void *)(a1 + v20 + 64);
        *(unsigned char *)(v21 + 71) = 0;
        *(unsigned char *)(v21 + 48) = 0;
        if (v20 == -48) {
          break;
        }
        unint64_t v22 = *(unsigned __int8 *)(v21 + 47);
        unint64_t v23 = *(void *)(v21 + 32);
        if ((v22 & 0x80u) == 0) {
          unint64_t v23 = v22;
        }
        v20 -= 24;
        if (v15 <= v23)
        {
          uint64_t v24 = a1 + v20 + 72;
          goto LABEL_23;
        }
      }
      uint64_t v24 = a1;
LABEL_23:
      *(void *)uint64_t v24 = v19;
      *(void *)(v24 + 8) = v17;
      *(_DWORD *)(v24 + 16) = *(_DWORD *)v45;
      *(_DWORD *)(v24 + 19) = *(_DWORD *)&v45[3];
      *(unsigned char *)(v24 + 23) = v16;
      if (++v14 == 8) {
        return v12 + 24 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 24;
    v12 += 24;
    if (v12 == a2) {
      return 1;
    }
  }
}

void SiriTTS::PhoneticAlphabet::greedy_symbols_from_phoneme(uint64_t *a1@<X0>, std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0) {
    std::string::size_type v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = a2->__r_.__value_.__l.__size_;
  }
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    long long v31 = a3;
    do
    {
      unint64_t v33 = v7;
      uint64_t v10 = *a1;
      uint64_t v9 = a1[1];
      if (*a1 == v9)
      {
LABEL_44:
        std::string::size_type v28 = std::string::rfind[abi:ne180100]((unsigned __int8 *)a2, v8) + 1;
        exceptioptrdiff_t n = __cxa_allocate_exception(0x10uLL);
        std::string::basic_string(&v37, a2, v28, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v39);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v30 = &v37;
        }
        else {
          uint64_t v30 = (std::string *)v37.__r_.__value_.__r.__words[0];
        }
        StringFormatter::StringFormatter((StringFormatter *)v38, "Unable to symbolize phoneme [%s]", (const char *)v30);
        MEMORY[0x210558D40](exception, v38);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      std::string::size_type v11 = (std::string::size_type)a2;
      if ((v4 & 0x80u) == 0)
      {
        unint64_t v12 = v4;
      }
      else
      {
        std::string::size_type v11 = a2->__r_.__value_.__r.__words[0];
        unint64_t v12 = size;
      }
      uint64_t v13 = (char *)(v11 + v12);
      std::string::size_type v35 = v11;
      std::string __s = (void *)(v11 + v8);
      int64_t v14 = v12 - v8;
      while (1)
      {
        int v15 = *(char *)(v10 + 23);
        char v16 = v15 >= 0 ? (char *)v10 : *(char **)v10;
        int64_t v17 = v15 >= 0 ? *(unsigned __int8 *)(v10 + 23) : *(void *)(v10 + 8);
        if (v12 >= v8)
        {
          if (!v17) {
            break;
          }
          uint64_t v19 = v13;
          if (v14 >= v17)
          {
            int v20 = *v16;
            int64_t v21 = v14;
            int64_t v22 = v14;
            unint64_t v23 = __s;
            do
            {
              int64_t v24 = v22 - v17;
              if (v24 == -1) {
                break;
              }
              unint64_t v25 = (char *)memchr(v23, v20, v24 + 1);
              if (!v25) {
                break;
              }
              uint64_t v19 = v25;
              if (!memcmp(v25, v16, v17)) {
                goto LABEL_27;
              }
              unint64_t v23 = v19 + 1;
              int64_t v22 = v13 - (v19 + 1);
            }
            while (v22 >= v17);
            uint64_t v19 = v13;
LABEL_27:
            std::string::size_type v11 = v35;
            int64_t v14 = v21;
          }
          uint64_t v18 = (uint64_t)&v19[-v11];
          if (v19 == v13) {
            uint64_t v18 = -1;
          }
        }
        else
        {
          uint64_t v18 = -1;
        }
        if (v18 == v8) {
          break;
        }
        v10 += 24;
        if (v10 == v9) {
          goto LABEL_44;
        }
      }
      if (v33 >= v31[2])
      {
        uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v31, (long long *)v10);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v31, (long long *)v10);
        uint64_t v7 = v33 + 24;
      }
      v31[1] = v7;
      if (*(char *)(v10 + 23) < 0) {
        uint64_t v26 = *(void *)(v10 + 8);
      }
      else {
        uint64_t v26 = *(unsigned __int8 *)(v10 + 23);
      }
      v8 += v26;
      unint64_t v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
      if ((v4 & 0x80u) == 0) {
        unint64_t v27 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      else {
        unint64_t v27 = a2->__r_.__value_.__l.__size_;
      }
    }
    while (v8 < v27);
  }
}

void sub_20D371124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t std::string::rfind[abi:ne180100](unsigned __int8 *a1, unint64_t a2)
{
  if ((char)a1[23] < 0)
  {
    unint64_t v3 = a1;
    a1 = *(unsigned __int8 **)a1;
    unint64_t v2 = *((void *)v3 + 1);
  }
  else
  {
    unint64_t v2 = a1[23];
  }
  if (v2 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = v2;
  }
  if (v2 - v4 > 1) {
    unint64_t v5 = v4 + 1;
  }
  else {
    unint64_t v5 = v2;
  }
  std::string::size_type v6 = &a1[v5];
  if (v5)
  {
    uint64_t v7 = a1;
    unint64_t v8 = &a1[v5];
    do
    {
      uint64_t v9 = v7;
      uint64_t v10 = v7;
      while (1)
      {
        int v11 = *v10++;
        if (v11 == 32) {
          break;
        }
        uint64_t v9 = v10;
        if (v10 == v6)
        {
          uint64_t v9 = v8;
          goto LABEL_19;
        }
      }
      uint64_t v7 = v9 + 1;
      unint64_t v8 = v9;
    }
    while (v10 != v6);
  }
  else
  {
    uint64_t v9 = a1;
  }
LABEL_19:
  if (v9 == v6) {
    return -1;
  }
  else {
    return v9 - a1;
  }
}

std::string *SiriTTS::PhonemeMapper::PhonemeMapper(std::string *this, long long *a2, uint64_t a3, long long *a4)
{
  void v64[2] = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)a3;
    this[1].__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v10;
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  std::string::pointer v11 = &this[4].__r_.__value_.__s.__data_[8];
  this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[4].__r_.__value_.__l.__size_;
  unint64_t v12 = this + 4;
  this[4].__r_.__value_.__r.__words[2] = 0;
  uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v14 = *(void *)(a3 + 8);
  }
  uint64_t v15 = *((unsigned __int8 *)a4 + 23);
  int v16 = (char)v15;
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *((void *)a4 + 1);
  }
  if (v14 == v15)
  {
    if (v16 >= 0) {
      int64_t v17 = (const std::string::value_type *)a4;
    }
    else {
      int64_t v17 = *(const std::string::value_type **)a4;
    }
    if ((v13 & 0x80) == 0)
    {
      if (*(unsigned char *)(a3 + 23))
      {
        uint64_t v18 = (unsigned __int8 *)a3;
        while (*v18 == *(unsigned __int8 *)v17)
        {
          ++v18;
          ++v17;
          if (!--v13) {
            goto LABEL_44;
          }
        }
        goto LABEL_26;
      }
LABEL_44:
      SiriTTS::PhoneticAlphabet::PhoneticAlphabet((uint64_t *)__p, (const void **)a2, a3);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&this[3]);
      this[3] = __p[0].__pn_;
      memset(__p, 0, 24);
      pn.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&pn);
      int data = (std::string *)this[3].__r_.__value_.__l.__data_;
      for (std::string::size_type i = this[3].__r_.__value_.__l.__size_; data != (std::string *)i; ++data)
      {
        pn.__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        unint64_t v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&this[4], (const void **)&data->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&pn);
        std::string::operator=((std::string *)(v33 + 7), data);
      }
      return this;
    }
    if (!memcmp(*(const void **)a3, v17, *(void *)(a3 + 8))) {
      goto LABEL_44;
    }
  }
LABEL_26:
  SiriTTS::package_path((SiriTTS *)v53);
  *(_OWORD *)unint64_t v55 = *(_OWORD *)v53;
  uint64_t v56 = v54;
  v53[1] = 0;
  uint64_t v54 = 0;
  v53[0] = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(&v52.__pn_, "PhoneticAlphabet");
  std::__fs::filesystem::operator/[abi:ne180100](&v52, (uint64_t)v55, &v57);
  if (*((char *)a2 + 23) >= 0) {
    size_t v19 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v19 = *((void *)a2 + 1);
  }
  int v20 = &v50;
  std::string::basic_string[abi:ne180100]((uint64_t)&v50, v19 + 1);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v20 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if (v19)
  {
    if (*((char *)a2 + 23) >= 0) {
      int64_t v21 = (const std::string::value_type *)a2;
    }
    else {
      int64_t v21 = *(const std::string::value_type **)a2;
    }
    memmove(v20, v21, v19);
  }
  *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 95;
  int v22 = *(char *)(a3 + 23);
  if (v22 >= 0) {
    unint64_t v23 = (const std::string::value_type *)a3;
  }
  else {
    unint64_t v23 = *(const std::string::value_type **)a3;
  }
  if (v22 >= 0) {
    std::string::size_type v24 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v24 = *(void *)(a3 + 8);
  }
  unint64_t v25 = std::string::append(&v50, v23, v24);
  std::string::size_type v26 = v25->__r_.__value_.__r.__words[0];
  v64[0] = v25->__r_.__value_.__l.__size_;
  *(void *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v51.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v64 + 7);
  v51.__pn_.__r_.__value_.__r.__words[0] = v26;
  v51.__pn_.__r_.__value_.__l.__size_ = v64[0];
  *((unsigned char *)&v51.__pn_.__r_.__value_.__s + 23) = v27;
  v64[0] = 0;
  *(void *)((char *)v64 + 7) = 0;
  std::__fs::filesystem::operator/[abi:ne180100](&v51, (uint64_t)&v57, &v58);
  std::operator+<char>();
  std::string::size_type v28 = std::string::append(&v48, ".json");
  std::string::size_type v29 = v28->__r_.__value_.__r.__words[0];
  v63[0] = v28->__r_.__value_.__l.__size_;
  *(void *)((char *)v63 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
  char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v49.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v63 + 7);
  v49.__pn_.__r_.__value_.__r.__words[0] = v29;
  v49.__pn_.__r_.__value_.__l.__size_ = v63[0];
  *((unsigned char *)&v49.__pn_.__r_.__value_.__s + 23) = v30;
  std::__fs::filesystem::operator/[abi:ne180100](&v49, (uint64_t)&v58, __p);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&pn, __p[0].__pn_.__r_.__value_.__l.__data_, __p[0].__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    pptrdiff_t n = __p[0].__pn_;
  }
  if (SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(v53[0]);
  }
  std::ifstream::basic_ifstream((uint64_t *)__p);
  if (!v61)
  {
    exceptioptrdiff_t n = __cxa_allocate_exception(0x10uLL);
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v45 = (const char *)a2;
    }
    else {
      unint64_t v45 = *(const char **)a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      unint64_t v46 = (const char *)a3;
    }
    else {
      unint64_t v46 = *(const char **)a3;
    }
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v47 = (const char *)a4;
    }
    else {
      unint64_t v47 = *(const char **)a4;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v58, "Unable to find '%s' mapping from '%s' to '%s'", v45, v46, v47);
    MEMORY[0x210558D40](exception, &v58);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  LOBYTE(v55[0]) = 0;
  v55[1] = 0;
  nlohmann::operator>>(__p, (uint64_t)v55);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__p + *(void *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__pn_.__r_.__value_.__r.__words[1]+ *(void *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)) | 4);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>(&v58, (unsigned __int8 *)v55);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&this[4], (void *)this[4].__r_.__value_.__l.__size_);
  std::string::size_type size = (void *)v58.__pn_.__r_.__value_.__l.__size_;
  this[4].__r_.__value_.__r.__words[0] = v58.__pn_.__r_.__value_.__r.__words[0];
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)size;
  std::string::size_type v35 = v58.__pn_.__r_.__value_.__r.__words[2];
  this[4].__r_.__value_.__r.__words[2] = v58.__pn_.__r_.__value_.__r.__words[2];
  if (v35)
  {
    size[2] = v11;
    v58.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58.__pn_.__r_.__value_.__l.__size_;
    *(_OWORD *)&v58.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type size = 0;
  }
  else
  {
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v58, size);
  memset(&v58, 0, sizeof(v58));
  long long v36 = (void *)v12->__r_.__value_.__r.__words[0];
  if (v12->__r_.__value_.__l.__data_ != v11)
  {
    std::string v37 = 0;
    do
    {
      unint64_t v38 = (long long *)(v36 + 4);
      if ((unint64_t)v37 >= v58.__pn_.__r_.__value_.__r.__words[2])
      {
        std::string v37 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v58, v38);
      }
      else
      {
        if (*((char *)v36 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v37, (const std::string::value_type *)v36[4], v36[5]);
        }
        else
        {
          long long v39 = *v38;
          v37->__r_.__value_.__r.__words[2] = v36[6];
          *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v39;
        }
        ++v37;
      }
      v58.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
      long long v40 = (void *)v36[1];
      if (v40)
      {
        do
        {
          unint64_t v41 = v40;
          long long v40 = (void *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          unint64_t v41 = (void *)v36[2];
          BOOL v42 = *v41 == (void)v36;
          long long v36 = v41;
        }
        while (!v42);
      }
      long long v36 = v41;
    }
    while (v41 != (void *)v11);
  }
  SiriTTS::PhoneticAlphabet::PhoneticAlphabet((uint64_t *)&v57, (long long **)&v58);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&this[3]);
  this[3] = v57.__pn_;
  memset(&v57, 0, sizeof(v57));
  v53[0] = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
  v57.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v55[1], LOBYTE(v55[0]));
  __p[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2A8];
  *(std::string::size_type *)((char *)__p[0].__pn_.__r_.__value_.__r.__words
                            + *(void *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x210558FE0](&__p[0].__pn_.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x210559500](&v62);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_20D371998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v75, *(void **)(v73 + 104));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v73 + 71) < 0) {
    operator delete(*v74);
  }
  if (*(char *)(v73 + 47) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v73 + 23) < 0) {
    operator delete(*(void **)v73);
  }
  _Unwind_Resume(a1);
}

void SiriTTS::PhonemeMapper::map(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a3, &byte_20D5A22AE);
  SiriTTS::PhonemeMapper::mapToList(a1, a2, v11);
  uint64_t v6 = v11[0];
  uint64_t v7 = v11[1];
  while (v6 != v7)
  {
    int v8 = *(char *)(v6 + 23);
    if (v8 >= 0) {
      long long v9 = (const std::string::value_type *)v6;
    }
    else {
      long long v9 = *(const std::string::value_type **)v6;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      std::string::size_type v10 = *(void *)(v6 + 8);
    }
    std::string::append(a3, v9, v10);
    v6 += 24;
  }
  unint64_t v12 = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_20D371C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(exception_object);
}

void SiriTTS::PhonemeMapper::mapToList(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v156 = *(std::string *)a2;
  }
  uint64_t v6 = a1 + 6;
  size_t v7 = strlen((const char *)SiriTTS::PhonemeSystemLHP);
  size_t v8 = v7;
  if ((*((char *)a1 + 71) & 0x80000000) == 0)
  {
    long long v9 = a1 + 6;
    if (v8 != *((unsigned __int8 *)a1 + 71)) {
      goto LABEL_11;
    }
LABEL_10:
    if (memcmp(v9, (const void *)SiriTTS::PhonemeSystemLHP, v8)) {
      goto LABEL_11;
    }
    int v22 = *((char *)a1 + 23);
    if (v22 < 0)
    {
      if (a1[1] != (const void *)5) {
        goto LABEL_11;
      }
      std::string::size_type v24 = (int *)*a1;
      if (*(_DWORD *)*a1 != 1395487329 || *((unsigned char *)*a1 + 4) != 65)
      {
LABEL_44:
        int v25 = *v24;
        int v26 = *((unsigned __int8 *)v24 + 4);
        if (v25 != 1227715689 || v26 != 84) {
          goto LABEL_11;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, ".");
        std::string::basic_string[abi:ne180100]<0>(&v149, "_");
        int v28 = *(char *)(a2 + 23);
        if (v28 < 0)
        {
          std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          LOBYTE(v28) = *(unsigned char *)(a2 + 23);
        }
        else
        {
          std::string v164 = *(std::string *)a2;
        }
        if ((v28 & 0x80u) == 0) {
          uint64_t v125 = (const char *)a2;
        }
        else {
          uint64_t v125 = *(const char **)a2;
        }
        if ((v28 & 0x80u) == 0) {
          unint64_t v126 = v28;
        }
        else {
          unint64_t v126 = *(void *)(a2 + 8);
        }
        UTFString::to_utf16((std::basic_string<char16_t> *)&v163, v125, v126);
        std::operator+<char>();
        if ((v151 & 0x80u) == 0) {
          unint64_t v127 = (const std::string::value_type *)&v149;
        }
        else {
          unint64_t v127 = (const std::string::value_type *)v149;
        }
        if ((v151 & 0x80u) == 0) {
          std::string::size_type v128 = v151;
        }
        else {
          std::string::size_type v128 = v150;
        }
        long long v129 = std::string::append(&v159, v127, v128);
        long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v160.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        unint64_t v131 = std::string::append(&v160, "]) \\1");
        long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v162.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v160.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v159.__r_.__value_.__l.__data_);
        }
        if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v133 = &v162;
        }
        else {
          unint64_t v133 = (std::string *)v162.__r_.__value_.__r.__words[0];
        }
        UTFRegex::UTFRegex((UTFRegex *)&v160, (const char *)v133);
        while (1)
        {
          status[0] = U_ZERO_ERROR;
          LODWORD(v159.__r_.__value_.__l.__data_) = 0;
          unint64_t v134 = (v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? (const UChar *)&v163
               : (const UChar *)v163.__r_.__value_.__r.__words[0];
          int64_t v135 = (v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? HIBYTE(v163.__r_.__value_.__r.__words[2])
               : v163.__r_.__value_.__l.__size_;
          uint64_t v136 = utext_openUChars(0, v134, v135, (UErrorCode *)&v159);
          uint64_t v137 = SLODWORD(v159.__r_.__value_.__l.__data_) <= 0 ? v136 : 0;
          UTFRegex::set_text((UTFRegex *)&v160, v137, 1);
          if (!uregex_find((URegularExpression *)v160.__r_.__value_.__l.__data_, -1, status)) {
            break;
          }
          UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&v159, (URegularExpression **)&v160, 1);
          status[0] = U_ZERO_ERROR;
          int32_t v138 = uregex_end((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, status);
          status[0] = U_ZERO_ERROR;
          int32_t v139 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, status);
          UTFRegex::group<std::basic_string<char16_t>>((uint64_t)status, (URegularExpression **)&v160, 2);
          UErrorCode v161 = U_ZERO_ERROR;
          int32_t v140 = uregex_end((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
          UErrorCode v161 = U_ZERO_ERROR;
          int32_t v141 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
          UErrorCode v161 = U_ZERO_ERROR;
          std::basic_string<char16_t>::size_type v142 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
          if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v143 = &v159;
          }
          else {
            unint64_t v143 = (std::string *)v159.__r_.__value_.__r.__words[0];
          }
          if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::basic_string<char16_t>::size_type size = HIBYTE(v159.__r_.__value_.__r.__words[2]);
          }
          else {
            std::basic_string<char16_t>::size_type size = v159.__r_.__value_.__l.__size_;
          }
          std::basic_string<char16_t>::replace((std::basic_string<char16_t> *)&v163, v142, v140 - v141, (const std::basic_string<char16_t>::value_type *)v143, size);
          UErrorCode v161 = U_ZERO_ERROR;
          std::basic_string<char16_t>::size_type v145 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, &v161);
          if (v158 >= 0) {
            unint64_t v146 = status;
          }
          else {
            unint64_t v146 = *(UErrorCode **)status;
          }
          if (v158 >= 0) {
            std::basic_string<char16_t>::size_type v147 = HIBYTE(v158);
          }
          else {
            std::basic_string<char16_t>::size_type v147 = *(void *)&status[2];
          }
          std::basic_string<char16_t>::replace((std::basic_string<char16_t> *)&v163, v145, v138 - v139, (const std::basic_string<char16_t>::value_type *)v146, v147);
          if (SHIBYTE(v158) < 0) {
            operator delete(*(void **)status);
          }
          if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v159.__r_.__value_.__l.__data_);
          }
        }
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v123 = &v163;
        }
        else {
          uint64_t v123 = (std::string *)v163.__r_.__value_.__r.__words[0];
        }
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int32_t v124 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
        }
        else {
          int32_t v124 = v163.__r_.__value_.__r.__words[1];
        }
LABEL_368:
        UTFString::to_utf8(&v155, (const UChar *)v123, v124);
        UTFRegex::~UTFRegex((UTFRegex *)&v160);
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v162.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v163.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v164.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v156.__r_.__value_.__l.__data_);
        }
        std::string v156 = v155;
        *((unsigned char *)&v155.__r_.__value_.__s + 23) = 0;
        v155.__r_.__value_.__s.__data_[0] = 0;
        if ((char)v151 < 0) {
          operator delete(v149);
        }
        if ((char)v154 < 0) {
          operator delete(__p);
        }
        goto LABEL_11;
      }
    }
    else
    {
      if (v22 != 5) {
        goto LABEL_11;
      }
      BOOL v23 = *(_DWORD *)a1 == 1395487329 && *((unsigned char *)a1 + 4) == 65;
      std::string::size_type v24 = (int *)a1;
      if (!v23) {
        goto LABEL_44;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, ".");
    std::string::basic_string[abi:ne180100]<0>(&v149, "_");
    int v33 = *(char *)(a2 + 23);
    if (v33 < 0)
    {
      std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      LOBYTE(v33) = *(unsigned char *)(a2 + 23);
    }
    else
    {
      std::string v164 = *(std::string *)a2;
    }
    if ((v33 & 0x80u) == 0) {
      uint64_t v100 = (const char *)a2;
    }
    else {
      uint64_t v100 = *(const char **)a2;
    }
    if ((v33 & 0x80u) == 0) {
      unint64_t v101 = v33;
    }
    else {
      unint64_t v101 = *(void *)(a2 + 8);
    }
    UTFString::to_utf16((std::basic_string<char16_t> *)&v163, v100, v101);
    std::operator+<char>();
    if ((v151 & 0x80u) == 0) {
      unint64_t v102 = (const std::string::value_type *)&v149;
    }
    else {
      unint64_t v102 = (const std::string::value_type *)v149;
    }
    if ((v151 & 0x80u) == 0) {
      std::string::size_type v103 = v151;
    }
    else {
      std::string::size_type v103 = v150;
    }
    unint64_t v104 = std::string::append(&v159, v102, v103);
    long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v160.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    unint64_t v106 = std::string::append(&v160, "]) \\1 ");
    long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
    v162.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v107;
    v106->__r_.__value_.__l.__size_ = 0;
    v106->__r_.__value_.__r.__words[2] = 0;
    v106->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v160.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v159.__r_.__value_.__l.__data_);
    }
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v108 = &v162;
    }
    else {
      uint64_t v108 = (std::string *)v162.__r_.__value_.__r.__words[0];
    }
    UTFRegex::UTFRegex((UTFRegex *)&v160, (const char *)v108);
    while (1)
    {
      status[0] = U_ZERO_ERROR;
      LODWORD(v159.__r_.__value_.__l.__data_) = 0;
      uint64_t v109 = (v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? (const UChar *)&v163
           : (const UChar *)v163.__r_.__value_.__r.__words[0];
      int64_t v110 = (v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(v163.__r_.__value_.__r.__words[2])
           : v163.__r_.__value_.__l.__size_;
      long long v111 = utext_openUChars(0, v109, v110, (UErrorCode *)&v159);
      uint64_t v112 = SLODWORD(v159.__r_.__value_.__l.__data_) <= 0 ? v111 : 0;
      UTFRegex::set_text((UTFRegex *)&v160, v112, 1);
      if (!uregex_find((URegularExpression *)v160.__r_.__value_.__l.__data_, -1, status)) {
        break;
      }
      UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&v159, (URegularExpression **)&v160, 1);
      status[0] = U_ZERO_ERROR;
      int32_t v113 = uregex_end((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, status);
      status[0] = U_ZERO_ERROR;
      int32_t v114 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, status);
      UTFRegex::group<std::basic_string<char16_t>>((uint64_t)status, (URegularExpression **)&v160, 2);
      UErrorCode v161 = U_ZERO_ERROR;
      int32_t v115 = uregex_end((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
      UErrorCode v161 = U_ZERO_ERROR;
      int32_t v116 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
      UErrorCode v161 = U_ZERO_ERROR;
      std::basic_string<char16_t>::size_type v117 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v118 = &v159;
      }
      else {
        uint64_t v118 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::basic_string<char16_t>::size_type v119 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::basic_string<char16_t>::size_type v119 = v159.__r_.__value_.__l.__size_;
      }
      std::basic_string<char16_t>::replace((std::basic_string<char16_t> *)&v163, v117, v115 - v116, (const std::basic_string<char16_t>::value_type *)v118, v119);
      UErrorCode v161 = U_ZERO_ERROR;
      std::basic_string<char16_t>::size_type v120 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, &v161);
      if (v158 >= 0) {
        char v121 = status;
      }
      else {
        char v121 = *(UErrorCode **)status;
      }
      if (v158 >= 0) {
        std::basic_string<char16_t>::size_type v122 = HIBYTE(v158);
      }
      else {
        std::basic_string<char16_t>::size_type v122 = *(void *)&status[2];
      }
      std::basic_string<char16_t>::replace((std::basic_string<char16_t> *)&v163, v120, v113 - v114, (const std::basic_string<char16_t>::value_type *)v121, v122);
      if (SHIBYTE(v158) < 0) {
        operator delete(*(void **)status);
      }
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
    }
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v123 = &v163;
    }
    else {
      uint64_t v123 = (std::string *)v163.__r_.__value_.__r.__words[0];
    }
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int32_t v124 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
    }
    else {
      int32_t v124 = v163.__r_.__value_.__r.__words[1];
    }
    goto LABEL_368;
  }
  if ((const void *)v7 == a1[7])
  {
    if (v7 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    long long v9 = *v6;
    goto LABEL_10;
  }
LABEL_11:
  SiriTTS::PhoneticAlphabet::greedy_symbols_from_phoneme((uint64_t *)a1 + 9, &v156, (uint64_t *)&v160);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::string::size_type v11 = v160.__r_.__value_.__l.__size_;
  std::string::size_type v10 = (const void **)v160.__r_.__value_.__r.__words[0];
  if (v160.__r_.__value_.__r.__words[0] == v160.__r_.__value_.__l.__size_) {
    goto LABEL_64;
  }
  char v12 = 0;
  do
  {
    while (1)
    {
      uint64_t v13 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)(a1 + 12), v10);
      if (a1 + 13 == (const void **)v13)
      {
        exceptioptrdiff_t n = __cxa_allocate_exception(0x10uLL);
        if (*((char *)v10 + 23) < 0) {
          std::string::size_type v10 = (const void **)*v10;
        }
        StringFormatter::StringFormatter((StringFormatter *)&v164, "Unable to map phone symbol [%s]", (const char *)v10);
        MEMORY[0x210558D40](exception, &v164);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (*(char *)(v13 + 79) < 0)
      {
        if (*(void *)(v13 + 64))
        {
LABEL_16:
          uint64_t v14 = (long long *)(v13 + 56);
          unint64_t v15 = a3[1];
          if (v15 >= a3[2])
          {
            int v16 = (void **)std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v14);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v14);
            int v16 = (void **)(v15 + 24);
          }
          goto LABEL_25;
        }
      }
      else if (*(unsigned char *)(v13 + 79))
      {
        goto LABEL_16;
      }
      int64_t v17 = (void **)a3[1];
      if ((void **)*a3 != v17) {
        break;
      }
      v10 += 3;
      char v12 = 1;
      if (v10 == (const void **)v11) {
        goto LABEL_64;
      }
    }
    int v16 = v17 - 3;
    int v18 = *((char *)v17 - 1);
    if (v18 < 0)
    {
      if (*(v17 - 2) == (void *)1 && *(unsigned char *)*v16 == 32)
      {
        operator delete(*v16);
LABEL_25:
        a3[1] = (uint64_t)v16;
        int64_t v17 = v16;
      }
    }
    else if (v18 == 1 && *(unsigned char *)v16 == 32)
    {
      goto LABEL_25;
    }
    v10 += 3;
  }
  while (v10 != (const void **)v11);
  if (v12)
  {
    uint64_t v19 = *a3;
    if ((void **)*a3 != v17)
    {
      int v20 = *(char *)(v19 + 23);
      if (v20 < 0)
      {
        if (*(void *)(v19 + 8) != 1) {
          goto LABEL_64;
        }
        int64_t v21 = *(unsigned char **)v19;
      }
      else
      {
        int64_t v21 = (unsigned char *)*a3;
        if (v20 != 1) {
          goto LABEL_64;
        }
      }
      if (*v21 == 32)
      {
        if ((void **)(v19 + 24) != v17)
        {
          do
          {
            if (*(char *)(v19 + 23) < 0) {
              operator delete(*(void **)v19);
            }
            *(_OWORD *)uint64_t v19 = *(_OWORD *)(v19 + 24);
            *(void *)(v19 + 16) = *(void *)(v19 + 40);
            *(unsigned char *)(v19 + 47) = 0;
            uint64_t v29 = v19 + 48;
            *(unsigned char *)(v19 + 2std::__function::__value_func<std::shared_ptr<FrontendModule> ()(std::shared_ptr<FrontendModule>,FrontendEnvironment const*)>::~__value_func[abi:ne180100]((void *)this + 4) = 0;
            v19 += 24;
          }
          while ((void **)v29 != v17);
          int64_t v17 = (void **)a3[1];
        }
        while (v17 != (void **)v19)
        {
          if (*((char *)v17 - 1) < 0) {
            operator delete(*(v17 - 3));
          }
          v17 -= 3;
        }
        a3[1] = v19;
      }
    }
  }
LABEL_64:
  size_t v30 = strlen((const char *)SiriTTS::PhonemeSystemLHP);
  if (*((char *)a1 + 71) < 0)
  {
    if ((const void *)v30 != a1[7]) {
      goto LABEL_174;
    }
    if (v30 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v6 = (const void **)*v6;
  }
  else if (v30 != *((unsigned __int8 *)a1 + 71))
  {
    goto LABEL_174;
  }
  if (memcmp(v6, (const void *)SiriTTS::PhonemeSystemLHP, v30)) {
    goto LABEL_174;
  }
  int v31 = *((char *)a1 + 23);
  if (v31 < 0)
  {
    if (a1[1] != (const void *)5) {
      goto LABEL_88;
    }
    a1 = (const void **)*a1;
  }
  else if (v31 != 5)
  {
    goto LABEL_88;
  }
  if (*(_DWORD *)a1 != 1244488042 || *((unsigned char *)a1 + 4) != 80)
  {
LABEL_88:
    std::string::basic_string[abi:ne180100]<0>(status, "'");
    std::string::basic_string[abi:ne180100]<0>(&v155, ".");
    std::string::basic_string[abi:ne180100]<0>(&__p, "_");
    memset(&v159, 0, sizeof(v159));
    memset(&v164, 0, sizeof(v164));
    uint64_t v35 = *a3;
    uint64_t v36 = a3[1];
    if (*a3 == v36)
    {
      std::string::size_type v65 = 0;
      goto LABEL_168;
    }
    char v37 = 0;
    while (*(char *)(v35 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)v35, *(void *)(v35 + 8));
      if ((*(char *)(v35 + 23) & 0x80000000) == 0)
      {
        int64_t v38 = *(unsigned __int8 *)(v35 + 23);
        goto LABEL_94;
      }
      long long v40 = *(const std::string::value_type **)v35;
      int64_t v38 = *(void *)(v35 + 8);
LABEL_95:
      if (v158 >= 0) {
        unint64_t v41 = status;
      }
      else {
        unint64_t v41 = *(UErrorCode **)status;
      }
      if (v158 >= 0) {
        int64_t v42 = HIBYTE(v158);
      }
      else {
        int64_t v42 = *(void *)&status[2];
      }
      if (v42)
      {
        if (v38 >= v42)
        {
          uint64_t v43 = &v40[v38];
          int v44 = *(char *)v41;
          unint64_t v45 = (std::string::value_type *)v40;
          do
          {
            int64_t v46 = v38 - v42;
            if (v46 == -1) {
              break;
            }
            unint64_t v47 = (const std::string::value_type *)memchr(v45, v44, v46 + 1);
            if (!v47) {
              break;
            }
            std::string v48 = v47;
            if (!memcmp(v47, v41, v42))
            {
              if (v48 == v43 || v48 - v40 == -1) {
                break;
              }
              goto LABEL_112;
            }
            unint64_t v45 = (std::string::value_type *)(v48 + 1);
            int64_t v38 = v43 - (v48 + 1);
          }
          while (v38 >= v42);
        }
      }
      else
      {
LABEL_112:
        std::string::basic_string(&v162, (const std::string *)v35, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v149);
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v163.__r_.__value_.__l.__data_);
        }
        std::string v163 = v162;
        char v37 = 1;
      }
      std::__fs::filesystem::path v49 = (_OWORD *)v164.__r_.__value_.__l.__size_;
      if (v164.__r_.__value_.__l.__size_ >= v164.__r_.__value_.__r.__words[2])
      {
        std::__fs::filesystem::path v51 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v164, (long long *)&v163);
      }
      else
      {
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v164.__r_.__value_.__l.__size_, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v50 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
          *(void *)(v164.__r_.__value_.__l.__size_ + 16) = *((void *)&v163.__r_.__value_.__l + 2);
          *std::__fs::filesystem::path v49 = v50;
        }
        std::__fs::filesystem::path v51 = (_OWORD *)((char *)v49 + 24);
      }
      v164.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
      uint64_t v52 = *(unsigned __int8 *)(v35 + 23);
      size_t v53 = *(void *)(v35 + 8);
      if ((v52 & 0x80u) == 0) {
        uint64_t v54 = *(unsigned __int8 *)(v35 + 23);
      }
      else {
        uint64_t v54 = *(void *)(v35 + 8);
      }
      std::string::size_type v55 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v55 = v155.__r_.__value_.__l.__size_;
      }
      if (v54 == v55)
      {
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v56 = &v155;
        }
        else {
          uint64_t v56 = (std::string *)v155.__r_.__value_.__r.__words[0];
        }
        if ((v52 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v35, v56, *(void *)(v35 + 8))) {
            goto LABEL_150;
          }
        }
        else
        {
          if (!*(unsigned char *)(v35 + 23)) {
            goto LABEL_150;
          }
          uint64_t v57 = 0;
          while (*(unsigned __int8 *)(v35 + v57) == v56->__r_.__value_.__s.__data_[v57])
          {
            if (v52 == ++v57) {
              goto LABEL_150;
            }
          }
        }
      }
      uint64_t v58 = v154;
      if ((v154 & 0x80u) != 0) {
        uint64_t v58 = v153;
      }
      if (v54 != v58) {
        goto LABEL_160;
      }
      if ((v154 & 0x80u) == 0) {
        p_p = (unsigned __int8 *)&__p;
      }
      else {
        p_p = (unsigned __int8 *)__p;
      }
      if ((v52 & 0x80) == 0)
      {
        if (v52)
        {
          uint64_t v60 = 0;
          while (*(unsigned __int8 *)(v35 + v60) == p_p[v60])
          {
            if (v52 == ++v60) {
              goto LABEL_150;
            }
          }
          goto LABEL_160;
        }
LABEL_150:
        if (v37)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)status, (const void **)v164.__r_.__value_.__l.__data_, (uint64_t)&v162);
          std::string::size_type v61 = v164.__r_.__value_.__r.__words[0];
          if (*(char *)(v164.__r_.__value_.__r.__words[0] + 23) < 0) {
            operator delete(*(void **)v164.__r_.__value_.__l.__data_);
          }
          long long v62 = *(_OWORD *)&v162.__r_.__value_.__l.__data_;
          *(void *)(v61 + 16) = *((void *)&v162.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v61 = v62;
          std::__fs::filesystem::path v51 = (long long *)v164.__r_.__value_.__l.__size_;
        }
        std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v159, (std::string *)v159.__r_.__value_.__l.__size_, (std::string *)v164.__r_.__value_.__l.__data_, v51, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v51 - v164.__r_.__value_.__r.__words[0]) >> 3));
        std::string::size_type v64 = v164.__r_.__value_.__l.__size_;
        std::string::size_type v63 = v164.__r_.__value_.__r.__words[0];
        while (v64 != v63)
        {
          if (*(char *)(v64 - 1) < 0) {
            operator delete(*(void **)(v64 - 24));
          }
          v64 -= 24;
        }
        char v37 = 0;
        v164.__r_.__value_.__l.__size_ = v63;
        goto LABEL_160;
      }
      if (!memcmp(*(const void **)v35, p_p, v53)) {
        goto LABEL_150;
      }
LABEL_160:
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v163.__r_.__value_.__l.__data_);
      }
      v35 += 24;
      if (v35 == v36)
      {
        std::string::size_type v65 = (std::string *)v164.__r_.__value_.__r.__words[0];
        if (v37)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)status, (const void **)v164.__r_.__value_.__l.__data_, (uint64_t)&v163);
          std::string::size_type v66 = v164.__r_.__value_.__r.__words[0];
          if (*(char *)(v164.__r_.__value_.__r.__words[0] + 23) < 0) {
            operator delete(*(void **)v164.__r_.__value_.__l.__data_);
          }
          long long v67 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
          *(void *)(v66 + 16) = *((void *)&v163.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v66 = v67;
          std::string::size_type v65 = (std::string *)v164.__r_.__value_.__r.__words[0];
        }
        goto LABEL_168;
      }
    }
    int64_t v38 = *(unsigned __int8 *)(v35 + 23);
    long long v39 = *(_OWORD *)v35;
    v163.__r_.__value_.__r.__words[2] = *(void *)(v35 + 16);
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v39;
LABEL_94:
    long long v40 = (const std::string::value_type *)v35;
    goto LABEL_95;
  }
  std::string::basic_string[abi:ne180100]<0>(status, "'");
  std::string::basic_string[abi:ne180100]<0>(&v155, ".");
  std::string::basic_string[abi:ne180100]<0>(&__p, "_");
  memset(&v159, 0, sizeof(v159));
  memset(&v164, 0, sizeof(v164));
  uint64_t v68 = *a3;
  uint64_t v69 = a3[1];
  if (*a3 == v69)
  {
    std::string::size_type v65 = 0;
    goto LABEL_168;
  }
  char v70 = 0;
  while (2)
  {
    if ((*(char *)(v68 + 23) & 0x80000000) == 0)
    {
      int64_t v71 = *(unsigned __int8 *)(v68 + 23);
      long long v72 = *(_OWORD *)v68;
      v163.__r_.__value_.__r.__words[2] = *(void *)(v68 + 16);
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v72;
      goto LABEL_183;
    }
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)v68, *(void *)(v68 + 8));
    if (*(char *)(v68 + 23) < 0)
    {
      uint64_t v73 = *(const std::string::value_type **)v68;
      int64_t v71 = *(void *)(v68 + 8);
    }
    else
    {
      int64_t v71 = *(unsigned __int8 *)(v68 + 23);
LABEL_183:
      uint64_t v73 = (const std::string::value_type *)v68;
    }
    if (v158 >= 0) {
      long long v74 = status;
    }
    else {
      long long v74 = *(UErrorCode **)status;
    }
    if (v158 >= 0) {
      int64_t v75 = HIBYTE(v158);
    }
    else {
      int64_t v75 = *(void *)&status[2];
    }
    if (v75)
    {
      if (v71 >= v75)
      {
        unint64_t v76 = &v73[v71];
        int v77 = *(char *)v74;
        long long v78 = (std::string::value_type *)v73;
        do
        {
          int64_t v79 = v71 - v75;
          if (v79 == -1) {
            break;
          }
          unint64_t v80 = (const std::string::value_type *)memchr(v78, v77, v79 + 1);
          if (!v80) {
            break;
          }
          int v81 = v80;
          if (!memcmp(v80, v74, v75))
          {
            if (v81 == v76 || v81 - v73 == -1) {
              break;
            }
            goto LABEL_201;
          }
          long long v78 = (std::string::value_type *)(v81 + 1);
          int64_t v71 = v76 - (v81 + 1);
        }
        while (v71 >= v75);
      }
    }
    else
    {
LABEL_201:
      std::string::basic_string(&v162, (const std::string *)v68, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v149);
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v163.__r_.__value_.__l.__data_);
      }
      std::string v163 = v162;
      char v70 = 1;
    }
    uint64_t v82 = (_OWORD *)v164.__r_.__value_.__l.__size_;
    if (v164.__r_.__value_.__l.__size_ >= v164.__r_.__value_.__r.__words[2])
    {
      uint64_t v84 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v164, (long long *)&v163);
    }
    else
    {
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v164.__r_.__value_.__l.__size_, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v83 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
        *(void *)(v164.__r_.__value_.__l.__size_ + 16) = *((void *)&v163.__r_.__value_.__l + 2);
        *uint64_t v82 = v83;
      }
      uint64_t v84 = (_OWORD *)((char *)v82 + 24);
    }
    v164.__r_.__value_.__l.__size_ = (std::string::size_type)v84;
    uint64_t v85 = *(unsigned __int8 *)(v68 + 23);
    size_t v86 = *(void *)(v68 + 8);
    if ((v85 & 0x80u) == 0) {
      uint64_t v87 = *(unsigned __int8 *)(v68 + 23);
    }
    else {
      uint64_t v87 = *(void *)(v68 + 8);
    }
    std::string::size_type v88 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v88 = v155.__r_.__value_.__l.__size_;
    }
    if (v87 == v88)
    {
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v89 = &v155;
      }
      else {
        uint64_t v89 = (std::string *)v155.__r_.__value_.__r.__words[0];
      }
      if ((v85 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v68, v89, *(void *)(v68 + 8))) {
          goto LABEL_226;
        }
      }
      else if (*(unsigned char *)(v68 + 23))
      {
        uint64_t v90 = 0;
        while (*(unsigned __int8 *)(v68 + v90) == v89->__r_.__value_.__s.__data_[v90])
        {
          if (v85 == ++v90) {
            goto LABEL_239;
          }
        }
        goto LABEL_226;
      }
LABEL_239:
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v159, (std::string *)v159.__r_.__value_.__l.__size_, (std::string *)v164.__r_.__value_.__l.__data_, v84, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v84 - v164.__r_.__value_.__r.__words[0]) >> 3));
      std::string::size_type v95 = v164.__r_.__value_.__l.__size_;
      unint64_t v94 = (std::string *)v164.__r_.__value_.__r.__words[0];
      while ((std::string *)v95 != v94)
      {
        if (*(char *)(v95 - 1) < 0) {
          operator delete(*(void **)(v95 - 24));
        }
        v95 -= 24;
      }
      v164.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
      if (v70)
      {
        if ((unint64_t)v94 >= v164.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v97 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v164, (long long *)status);
        }
        else
        {
          if (SHIBYTE(v158) < 0)
          {
            std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)status, *(std::string::size_type *)&status[2]);
          }
          else
          {
            long long v96 = *(_OWORD *)status;
            v94->__r_.__value_.__r.__words[2] = v158;
            *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v96;
          }
          std::string::size_type v97 = (std::string::size_type)&v94[1];
        }
        char v70 = 0;
        v164.__r_.__value_.__l.__size_ = v97;
      }
      else
      {
        char v70 = 0;
      }
    }
    else
    {
LABEL_226:
      uint64_t v91 = v154;
      if ((v154 & 0x80u) != 0) {
        uint64_t v91 = v153;
      }
      if (v87 == v91)
      {
        if ((v154 & 0x80u) == 0) {
          uint64_t v92 = (unsigned __int8 *)&__p;
        }
        else {
          uint64_t v92 = (unsigned __int8 *)__p;
        }
        if ((v85 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v68, v92, v86)) {
            goto LABEL_239;
          }
        }
        else
        {
          if (!v85) {
            goto LABEL_239;
          }
          uint64_t v93 = 0;
          while (*(unsigned __int8 *)(v68 + v93) == v92[v93])
          {
            if (v85 == ++v93) {
              goto LABEL_239;
            }
          }
        }
      }
    }
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }
    v68 += 24;
    if (v68 != v69) {
      continue;
    }
    break;
  }
  std::string::size_type v65 = (std::string *)v164.__r_.__value_.__r.__words[0];
  if (v70)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)status, (const void **)v164.__r_.__value_.__l.__data_, (uint64_t)&v163);
    std::string::size_type v98 = v164.__r_.__value_.__r.__words[0];
    if (*(char *)(v164.__r_.__value_.__r.__words[0] + 23) < 0) {
      operator delete(*(void **)v164.__r_.__value_.__l.__data_);
    }
    long long v99 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
    *(void *)(v98 + 16) = *((void *)&v163.__r_.__value_.__l + 2);
    *(_OWORD *)std::string::size_type v98 = v99;
    std::string::size_type v65 = (std::string *)v164.__r_.__value_.__r.__words[0];
  }
LABEL_168:
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v159, (std::string *)v159.__r_.__value_.__l.__size_, v65, (long long *)v164.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v164.__r_.__value_.__l.__size_ - (void)v65) >> 3));
  v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v164;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a3);
  *(std::string *)a3 = v159;
  memset(&v159, 0, sizeof(v159));
  v164.__r_.__value_.__r.__words[0] = (std::string::size_type)&v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
  if ((char)v154 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v155.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v158) < 0) {
    operator delete(*(void **)status);
  }
LABEL_174:
  v164.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v156.__r_.__value_.__l.__data_);
  }
}

void sub_20D372ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::replace(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __pos, std::basic_string<char16_t>::size_type __n1, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __n2)
{
  std::basic_string<char16_t>::size_type v5 = __n2;
  uint64_t v6 = __s;
  std::basic_string<char16_t>::size_type v7 = __pos;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
    std::basic_string<char16_t>::size_type v10 = size - __pos;
    if (size >= __pos)
    {
      if (v10 >= __n1) {
        std::basic_string<char16_t>::size_type v11 = __n1;
      }
      else {
        std::basic_string<char16_t>::size_type v11 = size - __pos;
      }
      std::basic_string<char16_t>::size_type v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v11 - size + v12 < __n2) {
        goto LABEL_13;
      }
      uint64_t v13 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      goto LABEL_16;
    }
LABEL_39:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::basic_string<char16_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  std::basic_string<char16_t>::size_type v10 = size - __pos;
  if (size < __pos) {
    goto LABEL_39;
  }
  if (v10 >= __n1) {
    std::basic_string<char16_t>::size_type v11 = __n1;
  }
  else {
    std::basic_string<char16_t>::size_type v11 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
  }
  if (v11 - size + 10 < __n2)
  {
    std::basic_string<char16_t>::size_type v12 = 10;
LABEL_13:
    std::basic_string<char16_t>::__grow_by_and_replace(this, v12, size + __n2 - (v12 + v11), size, v7, v11, __n2, __s);
    return this;
  }
  uint64_t v13 = this;
LABEL_16:
  if (__n2 == v11)
  {
    std::basic_string<char16_t>::size_type v11 = __n2;
  }
  else
  {
    std::basic_string<char16_t>::size_type v14 = v10 - v11;
    if (v10 != v11)
    {
      unint64_t v15 = (char *)v13 + 2 * v7;
      std::basic_string<char16_t>::size_type v16 = __n2 - v11;
      if (__n2 < v11)
      {
        if (__n2) {
          memmove((char *)v13 + 2 * v7, __s, 2 * __n2);
        }
        memmove(&v15[2 * v5], &v15[2 * v11], 2 * v14);
        std::basic_string<char16_t>::size_type v17 = size + v16;
        goto LABEL_34;
      }
      if ((char *)v13 + 2 * size > (char *)__s && v15 + 2 <= (char *)__s)
      {
        if (&v15[2 * v11] <= (char *)__s)
        {
          uint64_t v6 = &__s[v16];
        }
        else
        {
          if (v11) {
            memmove((char *)v13 + 2 * v7, __s, 2 * v11);
          }
          v7 += v11;
          v6 += v5;
          v5 -= v11;
          std::basic_string<char16_t>::size_type v11 = 0;
        }
      }
      memmove((char *)v13 + 2 * v7 + 2 * v5, (char *)v13 + 2 * v7 + 2 * v11, 2 * v14);
    }
  }
  if (v5) {
    memmove((char *)v13 + 2 * v7, v6, 2 * v5);
  }
  std::basic_string<char16_t>::size_type v17 = v5 - v11 + size;
LABEL_34:
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = v17;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  v13->__r_.__value_.__s.__data_[v17] = 0;
  return this;
}

void std::basic_string<char16_t>::__grow_by_and_replace(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add, const std::basic_string<char16_t>::value_type *__p_new_stuff)
{
  if (0x7FFFFFFFFFFFFFF6 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t v15 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char16_t>::size_type v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char16_t>::size_type v16 = 2 * __old_cap;
  }
  uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB) {
    uint64_t v17 = v16 | 3;
  }
  if (v16 >= 0xB) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = 11;
  }
  if (__old_cap > 0x3FFFFFFFFFFFFFF2) {
    uint64_t v19 = 0x7FFFFFFFFFFFFFF7;
  }
  else {
    uint64_t v19 = v18;
  }
  int v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v19);
  std::basic_string<char16_t>::size_type v21 = (std::basic_string<char16_t>::size_type)v20;
  uint64_t v23 = v22;
  if (__n_copy) {
    memmove(v20, v15, 2 * __n_copy);
  }
  if (__n_add) {
    memmove((void *)(v21 + 2 * __n_copy), __p_new_stuff, 2 * __n_add);
  }
  std::basic_string<char16_t>::size_type v24 = __old_sz - (__n_del + __n_copy);
  if (v24) {
    memmove((void *)(v21 + 2 * __n_copy + 2 * __n_add), (char *)v15 + 2 * __n_copy + 2 * __n_del, 2 * v24);
  }
  if (__old_cap != 10) {
    operator delete(v15);
  }
  std::basic_string<char16_t>::size_type v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_WORD *)(v21 + 2 * v25) = 0;
}